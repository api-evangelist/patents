---
title: Matching a first location profile with at least one other location profile
abstract: A server (--) for supporting a recommendation () to a user device () is disclosed. The server comprises a matching unit () configured to match a first location profile associated with a current location () of the user device with at least one other location profile, wherein the matching is based on at least one item consumed in the current location in a first time interval (Î±) and at least one item consumed in the other location in at least one second time interval (A-A, B-B, N-Nn) which is different from the first time interval. A recommender system (), a recommender engine computer program () and a computer program product () are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460156&OS=09460156&RS=09460156
owner: TELEFONAKTIEBOLAGET L M ERICSSON
number: 09460156
owner_city: Stockholm
owner_country: SE
publication_date: 20111111
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a 35 U.S.C. \u00a7371 National Phase Entry Application from PCT\/SE2011\/051361, filed Nov. 11, 2011, and designating the United States, which claims priority to U.S. Provisional Patent Application No. 61\/413,005, filed Nov. 12, 2010. The above-mentioned applications are incorporated by reference herein.","The invention relates to a recommender system, a server, a recommender engine computer program, and a computer program product for matching a first location profile with at least one other location profile.","Recommender systems are a relatively well-known technology today and used in different services for recommending, among other things, media items such as movies, music and pictures. Examples of such recommender systems are utilized by companies having Internet sites such as www.amazon.com and www.lastfm.com. Recommender systems help a user in finding interesting items without the user having to explicitly state what he or she wants.","A commonly used recommender method is CF (Collaborative Filtering) which produces recommendations by computing the similarity between users or items based on consumption history. CF systems suffer from the so-called \u2018new user problem\u2019, and in addition to this, they also suffer from the so-called \u2018new item problem\u2019. The new user problem means that a user has to rate a sufficient number of items before the user's preferences can be understood. The new item problem causes new items to be ignored, i.e. not recommended, until a substantial number of users have rated the item. Another well-known recommender method is CB (Content Based) recommender systems. Simply said, CB recommendations are based on the description, meta data, about the content as such. From a user's profile in terms of item consumption, the user's preferences in terms of item attributes may be derived and used to find similar items to recommend. CB systems generally also suffer from the new user problem.","Combinations of the above methods are also common and referred to as HRS (Hybrid Recommender Systems). These hybrid systems can have four different architectures:\n\n","For more information see Y-L. Chen and L-C. Cheng: A novel collaborative filtering approach for recommending ranked items, Expert Syst. Appl., 34(4):2396-2405, 2008.","CA (Context Aware) recommender methods have emerged in the past years as the use of location-aware devices with various sensors have become more popular. Recommending applications for mobile devices has for instance been done by presenting which applications other users geographically close to the active user are consuming. This has been discussed in A. Girardello and F. Michahelles: AppAware: Which Mobile Applications Are Hot?, MobileHCI, 10 Sep. 7-10, 2010.","There are a number of different recommender systems entering the mobile device area making use of the location context of the device. Patent application US-2006\/0266830-A1 discloses a method where location is used to enhance scaling of CF. The method requires that each location has a sufficient amount of consumption data for another recommender technique to produce good recommendations on the subset of all consumptions. Patent application US-2009\/0193099-A1 discloses a system that assess a hypothetical context, such as current context, future times and future location, based on the context of each prior user request. The hypothetical context is then used to produce recommendations for the user. Recommendations are thus based on where a user has been as context and maps that to a neighborhood context. Hypothetical contexts here do however not make use of other data than what is known for the current user and the system does not capture any characteristic of the items to be recommended in relation to context.","The context-aware approach, using the context of the user requesting recommendations and the context of previous item consumptions in the system to produce recommendations introduce a new problem. To recommend, for example, items popular or frequently consumed in a certain location, such item data must already be present in the system and if a user is among the first to visit this location, there will be no or little data present.","An object of the invention is to improve a recommender system, or rather recommendations to a user device\/user, in that at least the above mentioned new problem is reduced.","The invention relates to a server for supporting a recommendation to a user device. The server comprises a matching unit configured to match a first location profile associated with a current location of the user device with at least one other location profile, wherein the matching is based on at least one item consumed in the current location in a first time interval and at least one item consumed in the other location in at least one second time interval which is different from the first time interval (\u03b1). Hereby is enabled that a recommendation may be based on consumed items not only in the current location at a certain period of time, but also on consumed items in other locations which have a similar, but time-shifted consumption pattern. When similarity between locations is detected, it may not be based on the complete location profile, but rather based on the similarity of the locations at specific points in time.","An item is or may correspond to a variety of things, such as, for example, a book, a movie, music, an e-book, a computer program (e.g. an application for a mobile phone, a web-browser application, a computer program for a PC, and a tablet\/slate application), a consumer product (e.g., an appliance, clothes, a car, etc.), a service (e.g., professional services, such as a service provided by a doctor and a lawyer), an event (such as a music concert, an exhibition, a sports event), a restaurant, a caf\u00e9, a bar, a nightclub, a shop, a shopping centre, a sports arena, a holiday resort, a hotel, a petrol station, an ATM (Automated Teller Machine), a thing worth seeing etc.","A consumption of an item is a performed action associated with the item. According to this definition, consumption can be an \u201cimplicit\u201d action by a user or the user device or an explicit action, examples of which are mentioned in the detailed description.","A location profile is a set of data comprising a location identity, at least one item identity, at least one consumption associated with the item identity and the location identity and a time associated with each consumption. The type of consumption may also be comprised in the location profile and other information associated with the consumption, the item identity and the location identity may also be comprised in the location profile. Such optional, further information may be sensor identity, operating system of the user device, and more specific location data, such as the geographical co-ordinates longitude, latitude and altitude associated with the consumption.","The first time interval may end after the end of the second time interval and\/or begin after the beginning of the second time interval. The first time interval may also have occurred later than the second time interval, i.e there are no overlap between the time intervals, so that compared location profiles do not have any consumption in the same period of time. Hereby the possibility of capturing the trends in item popularity and changing consumption patterns over time in different locations. The detection of similar locations enables a recommender system to capture a greater fraction of the available dataset. This means that the server may be able to find location neighborhood over time, which will be an important component for a recommender system when a user have not consumed anything on his user device, i.e the recommender system is enabled to match consumptions there and then with consumptions here and now.","The matching unit may be configured to perform the matching by comparing hashed consumption information of the first location profile with hashed consumption information of the other location profile. Alternatively, the matching unit may be configured to perform the matching partly by calculating a similarity between items and in that case the matching unit may be configured to calculating the similarity using a Pearson-r correlation.","The server may comprise a weighting unit for basing the recommendation also on a weighted prioritization between items associated with the first location profile and items of the other location profile.","The server may comprise a sending unit for sending the recommendation, wherein the recommendation comprises information about items retrieved both from the first location profile and from the other location profile.","The matching unit may be a part of a recommender engine.","The server may comprise a retrieving unit and a database, which comprises a first set of items associated with the first location profile and a second set of items associated with the other location profile. The retrieving unit is in this case configured to retrieve the first set of items and the second set of items.","The first set of items and the second set of items may be retrievable from a table of the database, where the table comprises records where each record comprises location identity, item identity, time of consumption and consumption type.","The server may comprise an information enricher for retrieving from a meta data database further information associated with items recommended in the recommendation. The server may also comprise the meta data database.","The server may comprise a receiving unit configured to receive from the user device a user identification and a geographical position associated with the user identification. The user identification may be one or more of user device identity, IMSI, mobile network subscription identity, and authentication data.","The receiving unit may also be adapted to receive, from the user device, information about at least one consumption of an item and a time of the consumption.","The receiving unit may be configured to receive from the user device information about a wireless telecommunications network utilized by the user device, user password for a service, operating system of the user device, and information on whether the subscription is a post-paid or prepaid subscription.","The invention also relates to a recommender system comprising a first server and a second server. The first server comprises a sending unit for sending a recommendation of at least one item to a user device. The second server comprises a matching unit configured to match a first location profile associated with a current location of the user device with at least one other location profile, wherein the matching is based on at least one item consumed in the current location in a first time interval and at least one item consumed in the other location in at least one second time interval which is different from the first time interval.","The second server may comprise a weighting unit for basing the recommendation also on a weighted prioritization between items associated with the first location profile and items of the other location profile.","The second server may comprise a retrieving unit and a database, which comprises a first set of items associated with the first location profile and a second set of items associated with the other location profile, and wherein the retrieving unit is configured to retrieve the first set of items and the second set of items.","The first server may comprise an information enricher for retrieving from a meta data database further information associated with items recommended in the recommendation.","Furthermore the invention relates to a recommender engine computer program which comprises computer readable code means which when run on a server of a recommender system causes the server to match a first location profile associated with a current location of the user device with at least one other location profile, wherein the matching is based on at least one item consumed in the current location in a first time interval and at least one item consumed in the other location in at least one second time interval which is different from the first time interval.","The recommender engine computer program may comprise computer readable code means which when run on the server causes the server to perform the matching by comparing hashed consumption information of the first location profile with hashed consumption information of the second location profile.","The recommender engine computer program may comprise computer readable code means which when run on the server causes the server to perform the matching partly by calculating a similarity between items.","The recommender engine computer program may comprise computer readable code means which when run on the server causes the server to retrieve from a database a first set of items associated with the first location profile and a second set of items associated with the other location profile.","Moreover the invention relates to a computer program product, which comprises a computer readable medium and the recommender engine computer program stored on the computer readable medium.","The inventors have acknowledged that a characteristic of items which is not captured by most recommender systems is the time and context bound popularity of the item. For example, an item may be a good recommendation at one time in one location, but bad at a different time at a different location. This characteristic can be seen as a trend, but may be the result of release dates of items or other events which cannot be foreseen by the recommender system. A documentary about elections may for instance be at its peak of relevance in the period of time leading up to an election in a region. Elections are however not held at the same point in time globally, and thus, the relevance of the documentary will be associated with time and place. Another example is that a trend, such as a fashion trend, which first pops up in New York may propagate over the world and half a year later occur in, for example, Stockholm. This acknowledgement has been utilized in embodiments of this invention to solve the above mentioned new problem by making use of the location of the user's user device to find other similar locations in terms of item consumption. These similar locations are detected and popular items at these locations may be recommended instead of or in addition to popular items in the current location of the user device. The detection of similar locations enables a recommender system to capture a greater fraction of the available dataset. In essence this means that at least some embodiments disclosed herein enables a recommender system to find location neighborhood over time, which alleviate only the new problem, but also the above mentioned new user problem when the user has not consumed anything on the user device, i.e. the recommender system according to some embodiments is enabled to match consumptions \u2018there and then\u2019 with consumptions \u2018here and now\u2019.","Another example benefiting from the invention is when a popular musician releases a new album in New York and it generates a certain behavior there and then. A few weeks\/month later the album came to Stockholm and generated a similar pattern. Here it would be possible to match consumption profiles over time. Stockholm and New York could in other words be described as having similar content profiles in music but be time-shifted.","Yet another example is the Disneyland use case. A user is among the first users of the recommender system to visit Disneyland in California, USA. However, a lot of users already used the recommender system at Disneyland in Paris, France. Since the previous few to visit Disneyland California consumed similar items (e.g. Disney history application, kids games, communication application, Google Maps) to the ones who have visited Disneyland Paris, these locations are detected as similar and items consumed at Disneyland Paris are valid as recommendations for the California counterpart.","While the recommender system described herein, as well as servers, methods, computer programs and computer program products, covers various modifications and alternative constructions, embodiments of the invention are shown in the drawings and will hereinafter be described in detail. However it is to be understood that the specific description and drawings are not intended to limit the invention to the specific forms disclosed. On the contrary, it is intended that the scope of the claimed invention includes all modifications and alternative constructions thereof falling within the spirit and scope of the invention as expressed in the appended claims.",{"@attributes":{"id":"p-0060","num":"0063"},"figref":["FIG. 1","FIG. 2","FIG. 4","FIG. 3"],"b":["1","2","3","4","3","3","4","2","3","3","3","3","3","5","1","5","5","1","3","6","3","6"]},"The user device  is in  illustrated as a desktop computer or a mobile station in the form of a laptop or a wireless telephone, but could of course be another type of user device, e.g. a wireless tablet\/slate, an IP TV system, a vehicle navigation system detachable from a vehicle, and a multimedia unit embedded in a vehicle. A client application  in the form of either a laptop application or a mobile application is also illustrated to show that in this embodiment there is a client application which communicates with the recommender system . In  the recommender system  is illustrated with a first server - and a second server -, and in such a configuration the first server - in one embodiment is the one that performs at least the receiving of the recommendation request  in steps A and step E, including the enrichment of item information to the recommendation  sent to the user device . Accordingly, the second server - may be the one that performs step B, C and D. However, the person ordinary skilled in the art understand that the recommender system  may comprise only one server -\/server host as illustrated in  or more than two servers, for example one server for each one of the steps A-E. A user  is also illustrated in  in order to distinguish it as a person and not the user device .  also illustrates a recommender engine  which when run by the server of  causes the server to perform at least steps B-D.","Although  shows a recommendation request  from the user device , there are alternative embodiments where the recommender system  is utilized to select and push recommendations to users of a recommendation service without the user devices specifically having to send the recommendation request.","Now turning to , wherein steps C and C indicate that the recommender system  according to one embodiment retrieves data about consumptions, locations and relations between the consumption and location, i.e. a so-called consumption-location relation or consumption-location association. How this can be done is described more in detail further down in conjunction with the description of a specific embodiment. A consumption is here defined as a performed action associated with the item. According to this definition, consumption can be an \u201cimplicit\u201d action by the user  or the user device , such as actions mentioned in table 1 below related to an item in the form of a mobile phone application, in the table abbreviated to \u2018app\u2019.",{"@attributes":{"id":"p-0064","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Consumption types and their meaning"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type of consumption","Meaning"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Consumed","The user has run the app for (value)"]},{"entry":[{},{},"milliseconds"]},{"entry":[{},"Save","The user has installed the app"]},{"entry":[{},"Glimpse","The app has been shown on a screen in"]},{"entry":[{},{},"a list of recommendations to the user"]},{"entry":[{},"Consider","The user has viewed the details of an"]},{"entry":[{},{},"app, i.e. the details of the app has been"]},{"entry":[{},{},"displayed on the screen of the mobile"]},{"entry":[{},{},"phone"]},{"entry":[{},"Mark","The user has placed the app in a list,"]},{"entry":[{},{},"such as in a favorite list"]},{"entry":[{},"Associate","The app has been returned as a"]},{"entry":[{},{},"recommendation to the user (but was"]},{"entry":[{},{},"not necessarily display on screen)"]},{"entry":[{},"Query","The user has requested apps similar to"]},{"entry":[{},{},"the app"]},{"entry":[{},"Delete","The user has uninstalled the app"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A consumption can also be an explicit action initiated by the user , e.g. rating the item on a scale such as a five-star scale, and pushing a button for \u201clike\u201d or \u201cdislike\u201d.","A location can be any geographical area identified by an identification (id). The identification is in one embodiment a string of characters or a number. For instance, streets, cities and countries can be assigned unique id:s for the recommender system  and also be stored within the recommender system . A consumption of an item can thus be associated with more than one location in different location layers, e.g. a consumption in a particular part of Stockholm could be associated with a location for Europe, a location for the European Union, a location for Scandinavia, a location for Sweden, a location for the part of Sweden where Stockholm is situated, a location for the Stockholm area and a location for a particular part of the Stockholm area. One way of associating geographical areas with locations is to dedicate each postcode\/zip code area with a location-id. Another way of defining a location area with a particular location-id is to define its location as the geographical area within a circle, rectangle or polygon with a predetermined center and a predetermined radius. Another alternative is to not only define a circular location with a fixed radius, but to make the radius adaptive\/expandable in order to make sure that each location can be associated with a certain number of items, if that is considered to be beneficial to the recommender system  in some embodiments. This allows, for example, locations in the same location layer to cover smaller geographical areas in cities and larger geographical areas in rural areas. In some embodiments a geographical position in the form of e.g. longitude and latitude or an IP-address, does not necessarily have to be associated with only one location-id in even the same location layer, but could belong to more than one location-id, for instance if two circular locations overlap each other.","A consumption is associated with an item, a user, a context (comprising location and time) mappable to the locations stored in the recommender system , e.g. in the first server - or the second server -, and a consumption type identifying the observed user action\/ user device action, such as one of the consumptions mentioned in table 1. Different consumptions can also be given different weights, for example, an application with consumption type \u2018Save\u2019 can be given a relative weight of , whereas Consumed is given five, and Mark and Query are given one respectively. In one embodiment this means that information related to consumption is stored in a database in the user device  and is sent to the recommender system  at either regular intervals or more arbitrarily, such as when manually requested or when opening the client application . In other words there are no location profiles stored in the user device  in this embodiment. Instead location profiles are here only stored in the recommender system  and the data in each location profile is generated through consumption information received from not only one user device , but preferably from a plurality of user devices. In the recommender system , locations and consumptions serve as input to the location-based recommender part of the recommender system , along with the location of the recommendation request , i.e. the location lof the user or user device . From this data, popular items at location lcan be identified in a step C and be used as location l's profile to serve as input to a step C  and a step C where location l's profile is used to identify similar locations and to provide recommendable items, respectively. In other words, step C may be set to identify top-consumed items and a location profile.","In a step C, one or more locations Lsimilar to location lare identified, e.g. by comparing other locations over time windows using CF-like neighborhood identification. The identification is described more in detail below under the sub-heading \u2018Identifying Time-shifted Location Similarities\u2019 . The most popular items, so-called top items, at these locations are then extracted in step C and their predicted rank weighted down in step C to account for the time that has passed since the consumption. This could be performed by a rating decay as described in the patent application WO-2011\/005157-A1. That application describes the decay of item ratings according to eq. 1 below.",{"@attributes":{"id":"p-0069","num":"0072"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":"N","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"t"}},{"mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":"N","mn":"0"},"mo":"-","mover":{"mi":["R","_"]}}},"mo":"\u2062","msup":{"mi":"\u2147","mrow":{"mrow":{"mo":"-","mfrac":{"mrow":{"mi":"ln","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mn":"2"},"msub":{"mi":"t","mrow":{"mn":["1","2"],"mo":"\/"}}}},"mo":"\u2062","mi":"t"}}},"mo":"+","mover":{"mi":["R","_"]}}],"mo":"="}},{"mrow":{"mo":["[","]"],"mrow":{"mi":"math","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mi":"eq","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"1"}}}}]}}}},"br":{},"sub":"0 ","o":"R"},"In a step C, the items recommended from location land Lare merged by weighting the predicted ranks of items together. This could be performed using a simple weighting function such as the one of math eq. 2 below.\n\n()=\u03c9+\u03c9\u2003\u2003[math eq. 2]\n\nwhere \u03c9+\u03c9=1, is the new rank of item i, ris the rank of item i base on Land ris the rank of item i based on location l.\n\nIdentifying Time-shifted Location Similarities\n",{"@attributes":{"id":"p-0071","num":"0074"},"figref":["FIGS. 5 and 6","FIG. 7","FIG. 7","FIG. 7"],"b":["41","42","43","1","8","1","8","1","1","1","1","8","1","8","1","3","44","10"],"sub":["r ","ij ","ij "]},"The steps C-C are in one embodiment performed by the recommender engine , but step C may in another embodiment be performed by a part of the recommender system  which is not considered to be a part of the recommender engine . More specifically, the recommender engine  here comprises a matching unit  (see ) for matching location profiles in a way corresponding to steps C-C. The matching unit  may however in other embodiments be enabled with the help of a separate matching engine computer program  (see ) which interacts with the recommender engine . The recommender engine  may of course also comprise the hashing function in embodiments where the matching is done by comparing hashed consumption information. The skilled person also knows that there exist other alternatives to the two above matching principles. One alternative is to calculate the similarity between vectors comprising data of the location profiles. A cosine similarity can be calculated and two vectors\/location profiles may be determined to be similar if the angle between them is equal or smaller than a threshold angle. The angle could also be measured in a reduced number of dimensions using PCA (Principle Component Analysis) if the number of dimensions of the vectors is considered as too large. Yet another alternative is to use clustering algorithms with classifiers to determine clusters, for example to cluster different consumptions and determine the similarity of clusters associated with location profiles.","It must also be mentioned that the compared time-location profiles may have an equal length of time even though they are time-shifted, but this is not necessary at all. Similarities can be identified without the need for time-location profiles of an equal time length. The first time interval \u03b1 may be longer than each one of the other time intervals to which it is compared, but may also be shorter in time than the other time intervals. It should also be mentioned that it in some embodiments might not be necessary to divide one or more of the location profiles which shall be compared, so the step C is as an optional step with respect to comparison of sub-parts of location profiles, since it according to the invention is possible to compare complete location profiles as long as there are different times of either one or both of the first and last consumptions of the current location profile and a location profile with which it shall be compared. The selection of time intervals when segmenting consumptions in a location profile can be made in many different ways. Simple examples are to just to set the time intervals as one for each day, one for each morning, one for each evening, one for typical rush-hours etc. It could also be interesting to check variations in years, by comparing location profiles from a specific date each year, i.e. comparing Christmas Eve in one location with Christmas Eve in another location one year ago. Trends, such as after-work trends, can also be analyzed by matching different Fridays with each other.",{"@attributes":{"id":"p-0074","num":"0077"},"figref":["FIG. 8","FIG. 10","FIG. 8"],"b":["305","3","11"]},"SELECT*FROM locationtable WHERE locationID=","The returned answer would then be all item id:s, times and consumption types associated with the location  in the location table.","By making use of the location of the user device , it should be possible to produce better than random recommendations for new users. Through identification of locations with similar consumption patterns, a greater fraction of the total set of items is made recommendable and locations with insufficient profiles would be able to produce recommendations, i.e. a user that just has bought, for example, a new android phone can still get interesting and good recommendation from the first day, if such methods are incorporated in the mobile phone and\/or in an application providing such functionality. Embodiments specifically directed to recommendation of mobile applications are described more in detail further down.","As locations are compared within time intervals, a serendipity effect may be obtained. That is, if a first location lis detected as similar to a second location lof n days ago, recommending items currently popular at the second location lcould be seen as a prediction of the future of consumption in the first location l. The time shifted property of the identification of similar locations also lets the recommender system  capture trends in item consumption, i.e. identifying and recommending items associated with contexts which are not limited to the current context of the current location of the user device .","There are currently not enough good methods that aid users in finding interesting recommendations on a device that does not have a consumption history. The invention herein is describing a new way of using location and time sliding to perform good recommendations.","Local vs. Global Popularity","In order to have separable location profiles, items which are globally popular may in an embodiment deliberately not be included in the profile as such items will only contribute to an increased similarity between all locations. The location profiles should rather be made up of items truly characterizing the location. Just as a human being is not necessarily well-defined by someone having two arms, two legs and one nose, since it matches most people, certain general location attributes are not enough to accurately describe a certain location. Techniques to identify such globally and locally popular items are described in WO-2011\/053292-A1 and can be used to generate location profiles in steps C and C of .","As illustrated in , further ranking of items in and the similar\/neighboring locations may be made by calculating and taking into account a global weighting factor (GWF) for all locations being determined as similar to the location land in some embodiments also a local weighting factor (LWF) for items in the location profile of location l. A \u2018local\u2019 list of recommended items in the location profile of location land a \u2018global\u2019 list of consumed items from the similar places is retrieved. The recommended items to be sent in the recommendation  are then calculated using the GWF applied on the items of the similar locations and LWF applied on the items in the location profile of location l. In other words the recommender system  can be modified so that the weighting could be different in dependence on how important it is to send a recommendation of items consumed at location land how important it is to see items consumed in the neighboring\/similar locations.","Having described the functions of different embodiments of the recommender system , a server in the form of the second server - shall now be described in conjunction with . The server thus supports recommendation to the user device  and comprises a receiving unit  for receiving a forwarded or modified recommendation request from the first server -. The second server also comprises the matching unit  for matching the location profile for location lwith at least one other location profile, wherein the matching is based on items consumed in the first location in a first time interval and items consumed in the other location in a second time interval. The second server - also comprises a sending unit  for sending a set of recommended items to another server, such as the first server -. The second server - also comprises a retrieving unit  for retrieving a first set of items associated with the location profile for location land a second set of items associated with at least one other location profile from a database , which in  is comprised in the second server -, but which of course could be in another server of the recommender system . The second server - here also comprises an optional weighting unit  which configure the second server - to base its recommendation to the user device  based on a weighted prioritization between items associated with the first location profile and the other location profile according to what has been described above.","Although the respective unit disclosed in conjunction with  have been disclosed as physically separate units in the second server -, and all may be special purpose circuits such as ASICs (Application Specific Integrated Circuits), a server according to the invention also covers embodiments of the second server - where some or all of the units are implemented as separate computer programs or computer program modules running on a processor. Such an embodiment is disclosed in conjunction with .","The matching unit  may be enabled by the matching engine computer program  or a computer program module  of a recommender engine computer program  in combination with a processor , e.g. one or more microprocessors with or without DSP:s (Digital Signal Processors). The recommender engine computer program  and the matching engine computer program  are here stored in a first computer program product  in the form of a computer readable medium such as a harddisk, flash memory, disc, ROM (Read-only memory), RAM (Random Access Memory), and EEPROM (Electrically Erasable Programmable Read-only Memory). The database  for location profiles is illustrated as comprised in a second computer program product  in the form of a memory, e.g. in the server. The database  may however of course also be comprised in the first computer program product . As illustrated in , the processor , the first computer program product  and the second computer program product  are connected with each other via a system bus. The receiving unit , the sending unit , the retrieving unit  and the weighting unit  are here enabled by corresponding computer program modules , ,  and  respectively of the recommender engine computer program  when run by the processor . To physically enable the sending and receiving of information from and to the second server -, the receiving unit  and the sending unit  of course has to be supported by hardware parts known to the skilled person, such as physical ports  for wired connection with e.g. the first server - or a transceiver circuit for wireless communication (not shown).",{"@attributes":{"id":"p-0084","num":"0087"},"figref":"FIG. 12","b":["3","1","3","3","1"],"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["a first receiving unit  for receiving the recommendation request ,","a location unit  for determining the location-id of the location l.,","a first sending unit  for sending the recommendation request  or a modified recommendation request  to the second server -,","a second receiving unit  for receiving information associated with recommended items from the second server -,","a prioritizing unit  for optional, further prioritization of items to be sent to the user device ,","a second retrieving unit  for retrieving meta data from a meta data database ,","an information enricher  for enriching the information associated with the recommended items with meta data, links, images etc, and","a second sending unit  for sending the recommendation  to the user device ."]}}}},"The first receiving unit  may also be configured to receive from the user device :\n\n","Although the respective units and the information enricher  disclosed in conjunction with  have been disclosed as physically separate units in the first server -, and all may be special purpose circuits such as ASICs, the first server - has embodiments where some or all of the units are implemented as separate computer programs or computer program modules running on a processor. Such an embodiment is disclosed in conjunction with , where the first server - comprises a second processor  connected to a third computer program product  and a fourth computer program product  connected to each other via a system bus. .The second processor  may be one or more microprocessors with or without DSP:s. The third and fourth computer program products are computer readable media such as a harddisk, flash memory, optical disc, ROM, RAM and EEPROM. The meta data database  is illustrated as comprised in the fourth computer program product , but may in other embodiments be comprised in the third computer program product . The information enricher , the first receiving unit , the location unit , a first sending unit , a second receiving unit , the prioritizing unit , the second retrieving unit  and the second sending unit  are here enabled by corresponding computer program modules respectively of a part of a distributed recommender computer program , which when run by the second processor  correspond to the respective unit and the information enricher . The distributed recommender computer program  may when stored in a computer program product, such as a memory provided by a vendor for the recommender computer program  also comprise the recommendation engine computer program  and\/or the matching computer program .","Embodiments Specifically Directed to Recommendation of Mobile Applications","The person skilled in the art appreciates that the recommender system  and the user device  as described above can be implemented in many ways. In order to illustrate this further, exemplary embodiments related to the recommendation of items in the form of mobile phone applications are in the following described in more detail. Here a client-server system comprising the recommender system  and the user device  is utilizing the Android platform. The server-side of the client-server system is suitably implemented using Java Enterprise Edition.","In  the Android software stack is shown. It illustrates that the client application  can make use of the application framework for standard GUI components and various managers such as the Activity Manager and Content Providers for storage.","There are four major components to an Android application: Activities, Services, Broadcast Receivers and Content Providers. An Activity presents the GUI and is given the full size of the display to draw in. The Activities also handle user touch input. A Service does not have a user interface, but is run in the background, and could for instance be fetching data over the network. A Broadcast Receiver receives and reacts to broadcast announcements sent by an Android system or other applications. Content Providers store and retrieve data to make it available to all applications, and is here the way to share data across applications. Content Providers here also handle data storage within an application and SQLite is the database used by the Content Providers. In this embodiment, the user device  is responsible for collecting and sending consumption data\/information to the recommender system . The user device  makes the recommendation requests  to the recommender system  and displays the received recommendations to the user . The recommender system  collects application metadata, stores consumption data received from user devices, and forwards requests for recommendations to a recommender engine such as the recommender engine  illustrated in , and then sends the recommendation  back to the user device .","A motivation for this design is that although the user device  could make requests directly to the recommender engine  it would have to store lots of data, such as consumption data and application metadata. The user device  could possibly even comprise parts or even all of the principal functionality of the recommender system . However, the computational power and storage capabilities of user devices such as mobile devices are currently relatively limited if compared to typical server hardware. There is also a convenience in having a centralized way of collecting application metadata. The task of collecting and managing applications does not need to become a distributed problem, and the recommender engine can remain unchanged, as it is not part of the collecting. This solution also allows modifications to parts of the recommender system , without a need for the client application  to be updated.","To describe the client application  adapted for communication with the recommender system , a task-based and top-down approach is taken. A typical user scenario is shown in , where the user  is first shown a home screen (a) of the application. If the user  then presses \u201cDiscover\u201d, a list of recommendations is shown in screen (b), and from the list of recommendations the user may view an application's details in screen (c) by pressing an item in the list, or display a pop-up menu with available actions as illustrated with screen (b).","Other features of the client application are illustrated in . As recommendations are presented and applications are run on the same system as the client application , it is possible to monitor the user's actions. Access to contextual information such as the time and the user's location is also made available through the Android platform and this information can therefore be associated with each consumption.","Table 1 above shows exemplary types of consumptions that can be collected according to this embodiment. If an application is \u2018consumed\u2019, it is run on the user device  in the foreground. A consumption of the type \u2018save\u2019 means that the user chose to install the application, and the opposite of this is \u2018delete\u2019 which corresponds to an application being uninstalled. A \u2018glimpsed\u2019 application has been recommended and shown to the user, whereas \u2018associate\u2019 only means that application information has been sent to the user device  as a recommendation. Hence, \u2018glimpsed\u2019 is a subset of \u2018associate\u2019. If a user views the details of an application, it is stored as a consumption of type \u2018consider\u2019. Users are enabled to place applications in lists within the client application and such an action is referred to as a \u2018mark\u2019 and a request for similar applications for an application is of the type \u2018query\u2019.","A consumption is made up of the user's id, the application's id, the context in which the consumption took place and the type of the consumption. The context here comprises at least information on the time and location associated with each consumption. The context could be extended to comprise any other information describing the context, such as battery status, sensory data, network connection and other applications running Some of the consumptions, namely glimpse, consider, mark, associate and query, are logged from the Activities (e.g. the displaying of the screens illustrated in ) of the client application. The remaining consumption types are logged in a Broadcast Receiver which listens for broadcasts sent by the Android system, notifying its listeners of events. Each time a consumption is detected, it is stored in an SQLite database.","As the consumptions are stored locally in the user device  rather than sent to the recommender system  instantly after their creation, they can be retrieved from the SQLite database and sent at any time. This allows for freedom to modify when consumptions should be sent. It could be done according to one or more of the following events: upon request from the user , when a recommendation request  is made by the user device , timer-based (e.g. at regular intervals or at a certain time after a consumption has been made), as soon as the user has Wi-Fi access, when the client application  is launched in the user device  and when the number of consumptions stored in the SQLite database reaches a certain number, to avoid them taking up too much memory space. The recommender system  has a REST (Representational state transfer) interface which accepts json-string representations of consumptions. The stored consumptions in the user device  are converted to such strings with the use of Gson, a Java-library for converting Java objects into their json representation. A list of such strings is sent to the recommender system  using the org.apache.http library, which is part of the Android platform. The recommendation request  thus comprises information about the location of the request, the user's id, categories and optionally also a Boolean indicating whether the recommendations should be based only on location or not. To save memory space, consumptions are deleted once they have been sent to the recommender system , but they are not deleted until the recommender system  has responded that the consumptions have been stored in the recommender system .","Requesting recommendations can be performed in two ways in the client application , the user can either make a general request or use the search functionality to specify some criteria for the request. This selection is done on the home screen, (see ) of the client application , where pressing a first Discover icon  results in a general recommendation request. Discovery can also be reached by pressing a second discovery-icon  in a menu-bar at the top of the client application GUI. A button Search  initiate the displaying of a search interface shown in ().","From the search activity, the user  is enabled to specify a location on which the recommendations  should be based. To select a location, the user  is shown a zoomable and movable map as illustrated in , and by clicking\/touching a spot on the displayed map for more than a predetermined time, for example one second, makes the location selected. This could for instance be useful in case the user  is going on vacation and wishes to download applications relevant to the destination before the trip is made. It could also serve as inspiration to know which applications are popular in a certain region such as New York or at the NASA headquarters. From the search activity, the user  may also select application categories which make only applications from these categories valid for recommendation.","The response, i.e. the recommendation , from the recommender system  to the recommendation request  is here a list of applications, in the json format, which is transformed into a Java list of Application objects using Gson. The presentation of the recommended items is the same for the two types of requests described above and is illustrated in (). A scrollable list is displayed to present the recommended applications and comprises information such as icon, title and category for each recommended application in the list. By pressing an arrow  presented to the right of each list item reveals a pop-up menu  with four buttons. One of the buttons gives, if pressed, the possibility to install the application. The other buttons gives the possibility to place it in a list, request displaying of similar applications and get an explanation as to why the application has been recommended, respectively. The applications may typically be ordered according to a rank provided by the recommender system . Each application may, even if not shown in the Figs., have an attribute indicating the applications position, where \u20181\u2019 is the most relevant and should be displayed first in the list, \u20182\u2019 is the second most important and so on.","Received recommendations of applications are here cached on the user device  until the next recommendation request  is made, whereupon the cached recommendations are removed to save storage space and give way to new recommendations. The recommendations are cached to allow the user  to accept, e.g. a phone call, without risking that the recommendations disappear.","By pressing a displayed area associated with a listed item itself, details such as the name of the application, the category of the application, the vendor of the application, version number, average ratings by users, indication of the number of downloads, and a description of the application (as shown in ()) of the recommended application are shown and the user  may take actions such as installing the application, by pushing on an Install button  or, by pushing a \u2018List\u2019 button  placing it in another list which is stored on a more permanent basis in the user device  than in the cache. This list can of course be stored in an embedded memory in the user device , but may of course also be stored in a detachable memory card\/flash card. If the user  decides to install the application, it is in this embodiment typically launched in an Android market client installed on the user device  where the user needs to confirm the installation before the application is downloaded, but it may of course be downloaded from a server not connected to the Android market service. Application-lists re as indicated in  a feature in the client application  and enables the user  to archive or manage recommended applications. A recommendation of an application may be placed in a list for inspection at a later time, if the user for instance wants to wait until there is Wi-Fi access or connection to a home telecommunications network, before downloading the application. Lists also allow the user  to group applications, for application management purposes. An optional feature of the client application  is to enable users to install or uninstall all of the applications in a list in one click. Two lists are in one version of the client application  included already from start: in  called \u2018Favorites\u2019 and \u2018Archive\u2019. When placing a recommended application (or rather information associated with a recommended application) in a list, the user  may however create other lists. This is shown in  () where the user may select an existing list or create a new one. By selecting \u201cLists\u201d from the home screen the user  is shown the available lists, and pressing one of the lists shows the applications placed in this list as shown in () where the contents of the Archive list is displayed.","A top-down approach will now be used to describe the inner workings of the recommender system  associated with above client application. The recommender system  is here embodied as a single server. As should be apparent from the above description, the server is configured to receive and store consumption data, receive a recommendations request from the user device  and respond to this request by deriving recommendations. To provide this functionality the server is also able to collect meta data for applications.","As seen in , REST resources are at the top layer of the server where they serve as an interface to the underlying functionality. Each request made to the server is handled by the REST resources and forwarded to the appropriate part of the logics layer. Each resource presents an interface to an entity such as application, recommendation, consumption or user-id. A recommendation request  to the server is here made through an HTTP request and results in a call to the appropriate method of the class representing and implementing the resource. When the recommendation request  has been processed by the logics layer, the REST layer creates a response\/recommendation  which is sent to the requesting user device . This response is either empty with a status code indicating whether the recommendation request  was successful or not, or contains a message representing the requested resource. For instance, a request for recommended applications returns a list of applications as a json-string.","Once requests to the server have been interpreted and any additional data parsed by the REST layer, the request is passed to the logics layer which takes an appropriate action, which here is, inter alia, to store the consumptions in a database , which correspond to the location profile database  in the second server - above, had the recommender system  in this specific embodiment been a two-server system.","The recommendation request  is also passed on to the recommender engine  either directly or via a recommender engine adapter (not shown). The logic layer makes sure to instantiate any objects needed by the underlying layers and passes them to appropriate methods.","Data persistence is handled using Hibernate which is a persistence framework for Java EE. Through an Object\/Relational mapping, Java objects are fetched and stored. A mapping file may be used for each item\/entity defining the mapping from Java object to a relational database representation of each entity. A configuration file defining which database to use and authentication information for this database is defined and used by Hibernate to connect to the database. The meta data database may here be a MySQL database and an illustration of such a database is made in . Each of the entities in this model has a corresponding Java class which it maps to. Using Hibernate and MySQL allowed for a rapid implementation of the persistence functionality.","For the server to be able to send application recommendations with metadata such as title, version and so on to the user device  in an efficient way, this information is in this embodiment stored in the server, but may of course in other embodiments be stored in another server, even outside the recommender system . As the Android platform is used in this example, android application metadata should be collected, e.g. using an existing API to the Android Market. The collection of metadata is here instantiated by an administrator of the recommender system  through an HTTP request, which could be performed from any browser or other HTTP client. Table 2 lists admin requests and their meaning",{"@attributes":{"id":"p-0107","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Meta data admin requests"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Admin Request","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Collect Random","The server fetches application meta data and"]},{"entry":[{},"random"]},{"entry":["Collect New","The server fetches application meta data for"]},{"entry":[{},"applications marked as new in the Android"]},{"entry":[{},"Market"]},{"entry":["Collect Featured","The server fetches application meta data for"]},{"entry":[{},"applications marked as featured in the Android"]},{"entry":[{},"Market"]},{"entry":["Collect Popular","The server fetches application meta data for"]},{"entry":[{},"applications marked as popular in the Android"]},{"entry":[{},"Market"]},{"entry":["Maintain","The server identifies applications with missing"]},{"entry":[{},"metadata in the database, and fetches metadata"]},{"entry":[{},"for these applications"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"For applications which have been consumed on the user device , corresponding identifying strings will be sent to the server as explained above. If a consumed application is not already present in the meta data database, its identifying string will be stored but the other metadata fields are left blank. The maintain request of table 3 can be used to populate the metadata of such applications in the recommender system . The meta data database corresponds to the meta data database  in the first server - in the two-server configuration of .","As is readily understood from the description above, the client application  comprises code means which when run on the user device  enables the user device  to:\n\n"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The objects, advantages and effects as well as features of the invention will be more readily understood from the following detailed description of embodiments of a user device, recommender system, servers, computer program and computer program products when read together with the accompanying drawings, in which:",{"@attributes":{"id":"p-0037","num":"0040"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0038","num":"0041"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0039","num":"0042"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0040","num":"0043"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0041","num":"0044"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0042","num":"0045"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0043","num":"0046"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0044","num":"0047"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0045","num":"0048"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0046","num":"0049"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0047","num":"0050"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0048","num":"0051"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0049","num":"0052"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0050","num":"0053"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0051","num":"0054"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0052","num":"0055"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0053","num":"0056"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0054","num":"0057"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0055","num":"0058"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
