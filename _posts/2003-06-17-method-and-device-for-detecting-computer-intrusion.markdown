---
title: Method and device for detecting computer intrusion
abstract: A method and device for detecting intrusion on a computer system utilizes a target server running software that is executed for a client only upon receiving authorization from a monitoring server to execute the software. When an attempt to execute software on the target server by a client is not authorized, monitoring server notifies the system administrator of the unauthorized attempt.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07797744&OS=07797744&RS=07797744
owner: AT&T Intellectual Property II, L.P.
number: 07797744
owner_city: Reno
owner_country: US
publication_date: 20030617
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation-in-part to U.S. application Ser. No. 10\/461,932, filed Jun. 13, 2003, entitled \u201cMethod and Device for Detecting Computer Network Intrusions\u201d. This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60\/388,619, filed Jun. 17, 2002, and which is incorporated herein by reference.","This invention relates to computer security and particularly to computer intrusion detection whereby access to a target server is monitored.","Computer networks typically include a server computer (\u201cserver\u201d) and a plurality of client computers (\u201cclients\u201d) coupled to permit access by clients to resources on the server. Security of servers on the Internet and other insecure networks is a major concern. Configuration errors and bugs in widely used proprietary and open source software packages allow attackers to enter and gain control of servers. The attackers can then steal proprietary information, destroy the information, or even destroy the file system of the server, rendering it useless. Even worse, attackers can surreptitiously alter the server's system so that they have ongoing control over it. Once an attacker has established ongoing control over a server's system, they can use it to capture sensitive information or to attack other machines on the network. If the attacker's intrusions go undetected, the damage potential is virtually unlimited. Thus, it is desirable to detect intrusions in a timely manner. Preferably such intrusions should be prevented.","Some previous approaches to detecting network intrusion by an attacker have attempted to detect changes in the running system's file system or behavior. For example, the open source Tripwire system computes a hash of the contents of specified system files and stores the hashes of the system files in a database. Then, periodically or on command, the Tripwire system computes the hash values of the files and compares these recomputed values to the database values. If a difference is found, it implies a change to the system files. Assuming no authorized changes have occurred to the system files, changed hash values indicate an intrusion has occurred. Other intrusion detection tools try to discover file system changes by inspecting file modification dates.","The above described intrusion detection systems are vulnerable to defeat by an attacker because the information that is used to infer changes is stored locally on the compromised system. Thus, the attacker can alter the stored information to defeat the detection technique. For example, a common technique used by attackers to avoid intrusion detection is to install a \u201croot kit.\u201d The root kit includes an altered set of commands (such as a directory listing command that fails to display the correct alteration dates of system command files) that mask the actions of the attacker while allowing the attacker unfettered access to the server.","Another common intrusion detection approach attempts to detect abnormal network traffic patterns emanating from the server. While this can work if the normal traffic patterns are well enough defined and different from the traffic pattern an attacker may wish to exploit, these are stringent conditions and do not apply in many cases. In particular, a prudent attacker can generate traffic patterns into which the malicious traffic is then embedded as a small \u201cnoise\u201d signal. Finally, these are unlikely to counter the problem of the attacker stealing or destroying the sensitive information on the server itself.","The disclosed method for computer network intrusion detection is implemented on a computer network including a target server, a client on the network and a monitoring server coupled to the target server. The target server is accessible by a client on the network and administered by a system administrator capable of authorizing attempts to execute software on the target server. The method comprising the steps of loading monitored latent software on the target server and monitoring. Attempts to execute monitored latent software on the target server from the client are received and it is determined whether the attempt to execute the monitored latent software by the client is authorized prior to completely executing the monitored latent software. A message is sent to the system administrator and the execution of the monitored latent software is aborted prior to completion when the attempt to execute the monitored latent software is not authorized.","Another disclosed method for computer network intrusion detection is implemented on a computer network including a target server and a monitoring server. The target server is accessible by a plurality of clients on the network and administered by a system administrator capable of authorizing attempts by a client on the network to execute software on the target server. The method includes distinguishing between active software and latent software resident on the target server and permitting attempts to execute active software on the target server by any of the plurality of clients. A client of the plurality of clients is authorized to attempt to execute latent software on the target server thereby defining an authorized client. Attempts to execute latent software on the target server are received from a client of the plurality of clients thereby defining an attempting client. It is determined whether the attempting client is the authorized client prior to completely executing the latent software on the target server. When the attempting client is not the authorized client, a message is sent to the system administrator and execution of the monitored latent software is aborted prior to completion.","A disclosed computer system administered by a system administrator and accessible by a client on an external network includes a target server coupled to the external network and configured to receive connections from the client and to receive requests from the client to execute software thereon, an interface with the system administrator and a monitoring server coupled to the target server but not directly accessible on the external network by the client. The monitoring server has authorization data resident thereon and administration software accessible through the interface for administering the authorization data. The said target server includes software resident thereon having an authorization subroutine for sending a query to the monitoring server indicating that the client is requesting to execute the software and receiving a response from the monitoring server indicating that the client is authorized to execute the software prior to successfully completing execution of the software for the client. The monitoring server includes a subroutine thereon for receiving the query from the target machine, accessing the authorization data to determine whether the client is authorized to execute the software on the target machine, sending a response to the target machine indicating that the client is authorized to execute the software or the client is not authorized to execute the software, and sending a message through the interface to the system administrator if the client is not authorized to execute the software.","Additional features and advantages of the invention will become apparent to those skilled in the art upon consideration of the following detailed description of illustrated embodiments exemplifying the best mode of carrying out the invention as presently perceived.","As shown, for example, in , the disclosed method  of detection of server intrusion provides that an intruder first execute software resident on an attacked machine or target server  that was loaded by a legitimate administrator  of target server . This software on target server  may check with a \u201chome base\u201d, shown illustratively as a monitoring server , prior to each execution to see if it should proceed. Alternatively, as shown, for example, in , the software on target server  may check with monitoring server  for authorization to proceed whenever a time interval has not expired. If the intruder can never successfully execute the first command, then information on target server  cannot be read, altered, or destroyed. Without reading or altering information on target server , the attacker cannot install malicious software versions on target server . Thus, the attack fails.","Network servers typically include a well defined set of software accessible by network clients that is designed to be running on the server at a typical instant. Often such a server computer is designed to operate autonomously, carrying out a few well-known tasks, such as web service, electronic mail service, printer service and file service. This well-known task software is referred to herein as the \u201cactive\u201d software. Other software on the server, such as an administration command or a secure remote login daemon is not intended to be used during normal operation. This second class of software is referred to herein as the \u201clatent\u201d software.","Software can be further classified by how it is activated or used. A \u201ccommand\u201d is a software component that is executed by a user from some interface, typically via a \u201ccommand shell\u201d such as DOS or UNIX, accessed either locally from the machine's console or remotely through a remote login service. Typically, as shown, for example, in , a command is executed and runs to completion once invoked, returning a result to the user through the interface. A daemon, on the other hand, is a persistently running program that is started, typically at boot time, and runs continuously, servicing individual requests or reacting to events or conditions, as shown, for example, in . An example is the secure shell daemon, which waits for network connections on TCP port  and authenticates logins. Once the login is authenticated, the user is connected to a command shell, in which he or she may the activate commands. Other examples include web servers, mail servers, and file transfer protocol (FTP) servers. Note that active software components will typically be daemons, though not necessarily. Latent software components will typically be either daemons (e.g. secure remote login daemon, file transfer protocol daemon) or commands (e.g. directory listing command, file copying command).","Referring to , a simplified computer network layout  is shown. The illustrated simplified computer network  includes target server , monitoring server , two clients ,  and an interface  with an administrator . Monitoring server  is coupled through interface  with system administrator . Interface  may include any standard computer interface such as a separate administrator computer coupled directly or through the network to the monitoring server  or phone, pager, fax, PDA or other device coupled directly or through a network gateway to monitoring server . One illustrated client  is an attacker machine and one illustrated client  is an authorized maintenance person's machine. Those skilled in the art will recognize that the illustrated servers ,  and clients ,  communicate over a network  which may include additional non-illustrated servers and clients. While the target and monitoring servers ,  are shown as separate machines, it is within the scope of the disclosure for the target and monitoring servers ,  to be implemented on a single computer, on separate processors or on separate virtual machines.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["22","34","24","38","26","22","34","24","22","34","40","42","38","24","40"],"sub":["1 ","2 ","1 "]},"As shown in , authorized client  connects  to target server  and attempts to execute latent software  resident on target server . While only inferentially illustrated by the ellipses in , it is within the scope of the disclosure for authorized client  to execute active software  on target server  between connection  and the attempt to execute latent software . Illustratively, during this first attempt to execute latent software on target server , authorized client  invokes latent software \u201cC\u201d. Upon attempting to execute the latent software  on target machine , the altered or monitored latent software ,  (,  and ) on target server  queries  monitoring server  to receive authorization to execute the latent software. The latent software on target server  suspends operation until a response is received from monitoring server . Because monitoring server  has been programmed to provide authorization  to authorized client  if a request to execute latent software  is received in the defined interval from authorized client , monitoring server  sends a \u201cyes\u201d authorization response  to target server  indicating that it may proceed with execution of the latent software. Upon receipt of the authorizing response from monitoring server , target server  completes execution  of the latent software \u201cC\u201d and sends the results  of the latent software \u201cC\u201d to authorized client .","Illustratively, during a second attempt to execute latent software  on target server , authorized client  invokes latent software \u201cD\u201d. Since the invocation of latent software \u201cD\u201d  is received from authorized client  prior to time t, the above described authorization process is repeated and authorized client  receives the results  of the latent software \u201cD\u201d execution.","However, if authorized client  invokes latent software on target server  prior to time t(not shown) or after time t, i.e. outside the defined interval, monitoring server  will send a \u201cno\u201d response  to the authorization query  and target server  will abort execution of the latent software before completion. An appropriate failure message  is sent to authorized server . It is within the scope of the disclosure to not notify the client when authorization has been denied. Also, upon receipt of an authorization query  outside of the defined interval, monitoring server  sends an alert message  to administrator . It is within the scope of the disclosure for authorization software on monitoring server  to send a query to administrator  each time an authorization query  is received from target server  and await a response from administrator  prior to sending a \u201cyes\u201d or \u201cno\u201d response to target server .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["22","24","26","22","32","32","44","22","46","22","32","74","22","44","46","46","22","32","46","22","22","48","26","22","26","26","32","26","58","22","22","26","60","24","58","26","22","56","32","46"]},"As shown, for example, in , in the described method  and device , latent software ,  is running on target server  that queries monitoring server  prior to executing its normal function. Monitoring server  may respond by indicating that target server  is authorized to proceed or is not authorized to proceed with its normal function. If this response indicates to proceed (\u201cyes\u201d) , as shown in , then the normal function of the latent software is carried out by target server  and the results are sent  to the client. Otherwise, the target server  aborts execution of latent software ,  prior to carrying out the normal function and sends a failure message  to the client. It is within the scope of the disclosure to not notify the client when authorization has been denied. Illustratively, at any time after connection  any client may freely execute active software  resident on target server , . So long as the active software  does not call monitored latent software, active software  runs to completion.","In the illustrated embodiment of , the latent software running on target server  includes a wait period which specifies a time limit for receipt of a response from monitoring server . If the response is not received within a specified time limit, it is treated as a negative response and execution of the latent software is aborted. This prevents attackers from interdicting the method  by a network denial of service attack. However, it is also within the scope of the disclosure for the latent software execution on target server  to be suspended indefinitely until a response is received from monitoring server . Additional features, such as those found in  may be incorporated into method  within the scope of the disclosure.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["130","26","22","122","130","62","64","18","26","24","62","22","122","66","28","68","70","72","24","22","122","26","62","66","36"]},"A plurality of client including attacker client  and authorized client  are on the network  and may connect through the network to target servers , . Clients ,  are restricted from directly connecting to monitoring server .","As shown, for example, in , administrative software , portions ,  of monitored latent software , , request log , and permission database  are resident on monitoring server . Portions ,  of monitored latent software ,  and active software  are resident on target servers , . The term \u201cresident on\u201d and similar terms means that a program or function is stored on a computer readable medium. The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to a processor for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as a storage device. Volatile media includes dynamic memory, such as main memory. Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications. Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave on a transmission media, or any other medium from which a computer can read.","Administrative web program  is used to manage permissions database  on monitoring server . Monitoring server  maintains a database of permission information . This information governs the access policy for the monitored servers. Essentially, it records under what circumstances (time, command name, host) a command (or daemon) may be executed. For example, it might say \u2018From 1800-1900 hours host foobar.x.com may execute any command\u2019, \u2018Host frobboz.y.com may not execute any commands.\u2019, etc.","Permission database  is illustratively maintained by authorized administrator  via a web-based application. The web-based application resident on the administrator's PC  allows authenticated and private access by a controlling administrator , with controls allowing granting or denying permissions at particular time ranges, on particular hosts. One embodiment of the web-based application is the Apache web server (www.apache.org) using Java servlet technology. The web-based application might also have controls for arranging for logging of permission requests, notification via phone, email, or pager when unauthorized permission requests are received. This web-based application may be implemented using techniques well known to web implementers skilled in the art. It is within the scope of the disclosure for more detailed options to vary the basic scheme. For example, the permissions could further depend upon the identity of the person accessing the monitored server, based upon a special authentication command available on the monitored server.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIGS. 4-10","FIGS. 5 and 6","FIG. 5","FIG. 6","FIGS. 7 and 8","FIG. 7","FIG. 8","FIGS. 5-8","FIGS. 6 and 8"],"b":["22","200","300","302","22","304","26","22","400","500","502","22","504","26","36","24","36","300","500","80"]},"As shown, for example, in , upon interrupting execution of the daemon or command, authorization and notification algorithm  checks to determine if a timer has expired . This timer is set upon receipt of an initial authorization to execute latent software. If the timer has not expired, the interruption of the daemon or command ceases and the latent software continues to completion. If the timer has expired, or has never been set, target server  asks the monitoring server for permission  to continue execution of the latent software by sending a query . It is within the scope of the disclosure that a timer can be implemented in many ways, including implementing a timer that counts up or down using the system clock or creating a file indicating either the end time of a time interval or the start time and duration of a time interval and comparing the current time to the data in the file. After sending query  the process on target server  is interrupted for a wait period  during which time the process awaits a response  from monitoring server .","Illustratively, query  includes information that is entered into a log  on monitoring server . This information is then used to check a permissions database . The monitoring server  then determines if the data in the permissions database indicates that access to the latent software is authorized . If so, monitoring server  prepares an \u201cOK\u201d message  and sends an \u201cOK\u201d authorization response  to the process on target server . If the data in the permissions database indicates that access to the latent software is not authorized, monitoring computer  notifies  the system administrator  of an unauthorized attempt to execute latent software on target server  and prepares  and sends a \u201cNo\u201d response  to the process on target server .","Upon receipt of a response ,  from monitoring server , or upon expiration of the wait period, the process on target server  continues and determines if an \u201cOK\u201d authorization response was received . If so, the timer is started  and execution of the latent software is allowed to continue to completion. If a \u201cno\u201d response was received from the monitoring computer , or the wait period expired prior to receiving a response, the latent software aborts execution .","Daemons are a first type of latent software on target server  that are altered to include authorization and notification algorithm . As shown for example, in , an unaltered daemon  runs on a server awaiting a service request . Daemon , while waiting for a service request, queries a port on which a service request message  might be received. When a request is received, illustratively via network messaging  from a client , , daemon  terminates the wait period  then dispatches the request to a process thread . Once the process thread is dispatched , daemon  then again begins awaiting a service request  while the process thread is executed .","To protect a daemon so as to implement a monitored daemon , it is necessary to alter the daemons code to call the secure query\/response software  prior to servicing a request , as shown, for example, in . The illustrated altered or monitored daemon , includes each of the components, processes and functions of unaltered daemon  with query\/response software  inserted between the dispatch request to process thread step  and the processing of the request by the thread step . Illustratively, the query\/response algorithm  is nested within the unaltered latent software. For open source software, such as exists under the GNU\/Linux operating system, this is easily accomplished using standard programming techniques. For proprietary software, it is possible either to negotiate with the vendor\/owner of the software to put in the necessary \u201chooks\u201d (modifications), use existing Application Programming Interfaces (APIs) to carry out the necessary calls, or reverse engineer the object code and patch it to make the calls. All these techniques are well known in the art.","Commands  are a second type of latent software on target server  that are altered to include authorization and notification algorithm . An unaltered command  is immediately executed  once an invocation call  is received. As shown in , for commands executed from the command line, a \u201cwrapper\u201d script  can be written that replaces the original command  to implement authorization and notification algorithm . Wrapper  first calls the secure query\/response protocol software . If this call returns success, then wrapper  will execute the normal command , which will be hidden in a non-standard location , as shown, for example, in .","Under Linux, the \u201cls\u201d command is typically stored in a well-known standard location  on the file system , such as (\u201c\/bin\/ls\u201d) as shown, for example, in . During the implementation of a monitored command  the original \u201cls\u201d command  is moved from its standard location (\u201c\/bin\/ls\u201d)  to the hidden location (\/Ax77z423\/bin\/ls\u201d) , as shown, for example, in , and thus becomes a \u201chidden command\u201d. The wrapper for \u201cls\u201d, ls<wrapper>  is then installed in \u201c\/bin\/ls\u201d with a call to the hidden command \u201cls\u201d  that is installed in \u201c\/Ax77z423\/bin\/ls\u201d of file system . The hiding is successful, because the attacker has no way of practically guessing the pathname to locate the original commands . All directory listing commands will be wrapped, so an attacker cannot execute such a listing without causing a notification, which will then detect and prevent further intrusion. Other approaches for implementing monitored commands, e.g. altering the source code of the latent commands to implement a query and wait for a response  and recompiling code, are within the scope of the disclosure.","Since the disclosed intrusion detection method protects only the latent software ,  portions ,  of which are on target server , an attack based solely on executing active software  on target server  will initially appear to evade the technique. However, most attacks, while possibly exploiting weaknesses in active software  to initiate, require the use of latent software ,  to obtain useful (to the attacker) results. A typical scenario is for an attacker to use a buffer overflow in a web server to obtain a root command shell. However, the attacker, even after obtaining the root command shell cannot do anything useful without executing latent commands , , such as file transfer, directory listing, or file contents display.","In the embodiments of latent software ,  illustrated in , target server  makes a secure remote query  to monitoring server  and monitoring server  sends an appropriate secure response  or  to target server . Illustratively, the query and response are both signed and encrypted. It is within the scope of the disclosure to modify the method illustrated in  to include secure queries and responses.","Of course there are many variations to method  shown in  that are within the scope of the disclosure. First, for practicality, if a remote check succeeds, method  may choose to set a timer, as shown, for example, in . Prior to timer expiration, all latent software ,  then proceeds normally without doing the remote check. This makes for much more practical usage when an authorizing administrator logs in to carry out authorized maintenance, for example.","In another variation of method , monitoring server  can have a log database  for logging all queries  it receives as shown, for example, in .","As shown, for example, in , the query  sent by target server  includes some information about the circumstances of the call. This information is compared to information stored in permissions database  on monitoring server  to determine whether authorization should be sent to target server .","The secure queries  and responses ,  illustrated in  are implemented using cryptographic digitally signed network messages, for example using the RSA or DSA public key signature techniques. The protocol for communication can be via a well known query\/response protocol, such as HTTP, a messaging protocol, such as SMTP, or via simple remote procedure call in a network capable programming language such as Java. Illustratively, the query and response are both encrypted for privacy with well known encryption techniques to maintain the privacy of the communication between target server  and monitoring server . Such secure query\/response protocols are well known in the art.","While the invention has been illustrated and described in detail in the drawings and foregoing description, such illustration and description is to be considered as exemplary and not restrictive in character, it being understood that only the preferred embodiment has been shown and described and that all changes and modifications that come within the spirit of the invention are desired to be protected. For example, while the present invention has been described in regards to a disclosed operating system, features of the present invention may implemented in other operating systems environment."],"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION OF THE DRAWINGS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The detailed description particularly refers to the accompanying drawings in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
