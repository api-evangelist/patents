---
title: Method to compute wait time
abstract: A requesting critical wait time of a given resource may be determined. The requesting critical wait time is the time spent by the one or more resources waiting for the given resource, wherein at least one of the resources waiting for the given resource can proceed if access to the given resource is granted. A requested by critical wait time for a resource is determined, the requested by critical wait time being time spent by the resource for waiting solely for the given resource, wherein if the resource were granted access to the given resource, the resource can proceed without further waiting.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08521472&OS=08521472&RS=08521472
owner: International Business Machines Corporation
number: 08521472
owner_city: Armonk
owner_country: US
publication_date: 20090918
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["The present disclosure relates generally to computer systems, and more specifically to monitoring performance events in a computer system.","Processing of performance events, which occur during normal operation in every execution layer of a computer system can result in performance bottlenecks and\/or delays. As software systems become more advanced, the setting of their level of performance becomes increasingly more challenging for software developers. The interactions among different execution layers should be understood to identify and eliminate performance bottlenecks and delays which may occur. An infrastructure for monitoring performance events across execution layers of a system can be used to identify bottlenecks and delays.","One method of detecting performance bottlenecks and delays is to monitor frequency and timing of the events. Monitoring of the events may be interactive which allows dynamic configuration of a monitoring infrastructure. The method of monitoring may provide an Application Programming Interface (API) to enable a tool to be programmed that can generate and process the monitoring information automatically. The API may function as an interface between different execution layers to indicate the occurrence of events for use by the tool to process the event information for analysis. The monitoring and processing of event information may be both offline and online. With offline processing, a stand alone tool can be used that analyzes an event stream that was generated during execution and after the monitoring data was stored. With online processing, a tool can be used that process events as they occur, without storing them, for immediate use to identify online bottlenecks and delays.","Prior art performance monitoring focused on monitoring a single computer component or a single execution layer. For the hardware layer, interfaces have been developed for programming hardware performance counters across different architectures.","For enterprise software layers, an Application Response Measurement (ARM) standard has been developed as a uniform interface to calculate and measure response time and status of work processed by an enterprise software application.","The prior art computes either \u201ccomputational wait time\u201d as the time a computational resource R is waiting for another resource, or \u201cresource waiting time\u201d as the time a system resource T has computational resources waiting for it. For example, take the case where there are three program threads (computational resources) each waiting for a lock on a database (a system resource). Current systems would either profile the performance of this system by recording the total time each of the threads spends waiting for the lock\u2014the computational wait time; or they would record the total time spent waiting for the database lock\u2014the resource wait time.","What neither of these approaches measures is the time spent waiting that could have actually been spent computing. Suppose in the above example that for any thread to run, there had to be a free core (e.g., a free processor in a parallel computing machine). Suppose now that at one point, all three threads are waiting for the lock, but only threads  and  have access to a free core. Since thread  does not have access to a core, it could not run even if it were granted the lock. Despite this, the wait times for all three threads are measured identically.","What is needed is a system and method that computes critical waiting time, which is the time a given computational resource is waiting for one and only one other resource; e.g., the time the thread could have been computing had it been granted the given lock, since no other resources\u2014like a core\u2014were needed.","Brief Summary","Wait time for one or more resources is computed, for instance, for detecting delays in a computer system. A method for computing wait time, in one aspect, may include detecting a request for a given resource by one or more resources; and computing, using a processor, a requesting critical wait time of the given resource, the requesting critical wait time being time spent by the one or more resources waiting for the given resource, wherein at least one of the resources waiting for the given resource can proceed if access to the given resource is granted.","A system for computing wait time, in one aspect, may include a monitoring module operable to detect a request for a given resource by one or more resources. The monitoring module further may be operable to determine a requesting critical wait time of the given resource, the requesting critical wait time being time spent by the one or more resources waiting for the given resource, wherein at least one of the resources waiting for the given resource can proceed if access to the given resource is granted.","A computer readable storage medium storing a program of instructions executable by a machine to perform one or more methods described herein also may be provided.","Further features as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. In the drawings, like reference numbers indicate identical or functionally similar elements.","A system and method are disclosed which compute critical waiting time. Critical waiting time in the present disclosure refers to the time that a computational resource is waiting on another resource where, if the computational resource had the other resource, then the computational resource can make progress, since it does not need any additional resources. The system and method in one aspect may reduce delay during operation of a computer system and accurately profile its operation.","The system and method of the present disclosure may detect delays in a computer system, for instance, by monitoring all system resources (e.g., locks) that are being requested by one or more computational resources (e.g., threads) and incrementing the critical wait time for any given system resource if the computational resource requesting it would not require any additional system resource if the request were granted.","In a computer system a significant source of performance degradation occurs when multiple threads try to access the same resource at the same time when the resource is guarded by a lock that allows only serial access. When a thread is waiting on a lock, the thread cannot make progress. Traditionally, a performance analyst will determine which locks result in threads waiting for the longest amount of time and the analyst will try to eliminate the lock by using a lock free data structure, or try to reduce the amount of time a thread holds the lock. Using a lock free data structure has its own problems as the overhead to grab the data structure may increase.","Current approaches compute either a computational wait time as the time a computational resource is waiting for another resource, or a resource waiting time as the time that a resource has a computational resource waiting for it. With multi-core systems, there is more than one core that can run a thread. Multi-core systems may allow as many threads as there are cores to make progress in parallel. However, with multi-core systems, not all thread waiting times will affect the performance of a computer system. For example, if a thread is waiting on a lock, but all the cores are busy doing other work, then eliminating the lock time for this waiting thread will not have an effect on performance because the thread cannot make progress until a core becomes available.","In one embodiment of the system and method of the present disclosure, two types of wait time may be computed, for example, to reduce delay during operation of a computer system and to accurately profile its operation: RequestedByCriticalWaitTime(R) computes the time that a resource R is waiting on another resource where, if resource R had the other resource, it could make progress, since it does not need any additional resources; and","RequestingCriticalWaitTime(R) computes the time spent by other resources waiting for resource R, where at least one of the resources waiting for R could make progress if they were given access to R.","The following definitions are used in the present disclosure, for any given resource R:","CriticalRequestor(R)==true if and when R is only requesting a single other resource; otherwise CriticalRequestor(R)==false. When CriticalRequestor(R)==true, resource R would be able to make progress if it were given access to the resource on which it is waiting because it does not have to wait for anything else.","Every resource R (both computational (e.g., a thread) and system (e.g., a core)) has at least following four wait times associated with it:\n\n","There also two sets of resources associated with every resource:\n\n","As illustrated and described in detail with references to , the method and system of the present disclosure may compute:","RequestedByCriticalWaitTime(R)\u2014the (critical) waiting time spent by a resource R (e.g. computational resources, such as a thread) waiting for other resources (e.g., a system resources, such as a core, or another computational resources, such as another thread), where, if the resource R had the other resource, then the resource R can make progress; and","RequestingCriticalWaitTime(R)\u2014the time spent by other resources (e.g. computational resources, such as a threads) waiting for resource R (e.g., a system resources, such as a core, or another computational resources, such as another thread), where at least one of the resources waiting for R could make progress if they were given access to R.","The following values may be also computed:\n\n",{"@attributes":{"id":"p-0036","num":"0043"},"figref":["FIG. 1","FIG. 3","FIG. 4","FIG. 5","FIG. 6","FIG. 7"],"b":["1000","1000","1040","1030","1020","1022","1000","1010","1000","1010","14025","1020","1050","1060","1070","1080","1090","1100","1110","1120"]},"It should be understood that while  illustrates the functional components residing in a server component , the system and method of the present disclosure is not limited only to that configuration. Thus, the components may be distributed over a network on different platforms in a distributed environment, and\/or configured in a cloud computing environment. Further, while  shows a CPU , the system may include multiple processors and\/or cores.","Referring to , the wait time query handler  responds to requests for wait time related data. In one embodiment of the present invention, these queries are fulfilled using information retrieved from the critical wait time database , where all of the wait time related data computed by the monitoring handler  are stored. Such queries can include requests for any of the four different types of wait time: RequestedByWaitTime(R), RequestedByCriticalWaitTime(R), RequestingWaitTime(R), RequestingCriticalWaitTime(R) for a resource R. A query also can be made for a list of resources, for instance, the list sorted based on one or more of the types of wait time. For example, to determine which resources are spending the most critical time waiting for another resource, one can request a list of all resources with the list sorted based on RequestedByCriticalWaitTime(R). To determine which resources are the most sought after, one can request a list of all resources with the list sorted based on RequestingCriticalWaitTime(R).","As a practical example, suppose that a collection class instance C is identified to have the most critical wait time. To improve the performance of and\/or to reduce the bottleneck created by C, C's implementation may be changed, for instance, to be concurrent using a java.util.concurrent class. As another example, suppose that the cores on a machine are identified as having the most critical wait time, then a larger machine with more cores may be implemented, for example, to improve performance.","The application server  is a request generating and satisfying process. These requests are monitored by the monitoring handler . An example of such a server may be an instance of IBM's Websphere\u2122 Server, an Hypertext Transfer Protocol (HTTP) server that accepts and processes HTTP invocations (GETS and PUTS) received via the network interface . The local requests it generates may include requests for data from storage  as well as for computation.","In another aspect, an operating system (OS) or the like may act as a request generator, for instance, when the OS context switches out a thread, e.g., thread T, that was running on a core, e.g., core C. In this case, the request would be resource thread T requesting resource core C, wherein RequestedBy (T) would be updated to add C, and Requesting (C) would be updated to add T. Additional flags and timers associated with this request as described herein would be updated.","The critical wait time database  provides for the creation, deletion and modification of persistent data, and is used by the handlers - of the server . An example of a product providing such function includes IBM\u2122DB\/2\u2122 database system. The critical wait time database  could also be embodied as a service running on another machine and accessed via the network interface .","Referring to , there is shown a flow chart illustrating the control flow of the server's logic  in one embodiment of the present disclosure. As shown, in step , the monitoring handler  is started. Following this, in step , the application server  is started, allowing it to generate and satisfy requests.",{"@attributes":{"id":"p-0044","num":"0051"},"figref":"FIG. 3","b":["1050","1050","1110","1100","1050"]},"Referring to , the monitoring handler  begins at step , following which it  waits for input (i.e., a request, the satisfaction of a request, or a request for the wait time query handler ) in step . Step  checks whether the input is a new request, e.g., a request by resource R for resource R. If so, then at step , all necessary database elements are created in the critical wait time database  for each of R and R. Any needed timer processes may be also created. Next, at step , the new request requestor update handler  is invoked (e.g., with parameter R and R). At step , the new request requestee update handler  is invoked. Following step , control continues to step .","At , if the input is not a new request, then step  checks whether the input is an indication that a given request (e.g., a request by R for R) had been satisfied. If so, then in step , the satisfied request requestor update handler  is invoked. At step , the satisfied request requestee update handler  is invoked, after which control continues to step .","At , if the request has not been satisfied,  checks whether the input is request for wait time data. At , if the input is a request for wait time data, the wait time data request handler  is invoked in step , following which control continues to step . If input is not a request for wait time data, then control continues at .",{"@attributes":{"id":"p-0048","num":"0055"},"figref":"FIG. 4","b":["1060","1060","1","1","1","1","1","2","1060","4000","4010","2","1","1","2"],"br":{},"in-line-formulae":[{},{}]},"Step  then checks whether the size of RequestedBy(R) =1, i.e., R is only requesting a single resource. At , if the size of size of RequestedBy(R) is not equal 1, control passes to step . If the size of size of RequestedBy(R) is equal , then in step  the value of CriticalRequestor(R) is set=true. Next, in step , the timers for both RequestedByWaitTime(R) and RequestedByCriticalWaitTime(R) are started, following which the handler ends at step . If the size of size of RequestedBy(R) is not equal 1, then it must be greater than 1 since a newly requested resource was just added in step . Step  checks whether the size of RequestedBy(R)==2 (past the threshold for R's being a critical requestor). If so, then in step , the value of CriticalRequestor(R) is set=false, and in step , the timer for RequestedByCriticalWaitTime(R) is stopped. Following this, the handler  ends in step . If RequestedBy(R) is not equal to 2, control continues from step  to step  where the handler  ends.",{"@attributes":{"id":"p-0050","num":"0057"},"figref":"FIG. 5","b":["1070","1070","2","2","2","2","1","2","5000","5010","1","2","2","1"],"br":{},"in-line-formulae":[{},{}]},"Next, step  checks whether the size of Requesting(R) ==1, which means that this is the only request for R. If so, then step  starts the timer for RequestingWaitTime(R). Next, step  checks all of the members of Requesting(R) and sets N to be the number of the members that are critical requestors (i.e., the number of the members for which CriticalRequestor( )==true). Step  then checks whether N is greater than 0. If so, then step  sets the RequestingCriticalWaitTimeFactor(R) =N. This is a weighting factor used for allowing an indication that more than one critical requestor is waiting for a given resource. Suppose for example, that there are two system resources Rx and Ry, and that while Rx is being requested by three resources that are critical requestors, Ry is only being requested by one. Then, RequestingCriticalWaitTimeFactor(Rx) =3 while RequestingCriticalWaitTimeFactor(Ry) =1, which means that the critical wait time attributed to Rx be multiplied by three, while Ry's will only be multiplied by 1. Therefore, if 1 second is spent in this state waiting for Rx and Ry, RequestingCriticalWaitTime(Rx) will be incremented by 3, while RequestingCriticalWaitTime(Ry) will only be incremented by 1. The timer for RequestingCriticalWaitTime(R) is then started in step . This timer using the RequestingCriticalWaitTimeFactor(R) as a factor for it measurements. The handler then ends at step . If, however, N is not greater than 0, then step  stops the RequestingCriticalWaitTime(R) timer, following which the handler  ends at step .",{"@attributes":{"id":"p-0052","num":"0059"},"figref":"FIG. 6","b":["1080","1080","1","1","1","2","1080","6000","6010","2","1","1","2"],"br":{},"in-line-formulae":[{},{}]},"Step  then checks whether the size of RequestedBy(R)==1, i.e., R is only requesting a single resource. At , if the size of size of RequestedBy(R) is not equal 1, control passes to step . If the size of size of RequestedBy(R) is equal 1, then in step  the value of CriticalRequestor(R) is set=true. Next, in step , the timer for RequestedByCriticalWaitTime(R) is started, following which the handler ends at step . Step  checks whether the size of RequestedBy(R)==0, i.e., R is not requesting for any resources. If so, then at step , the value of CriticalRequestor(R) is set=false, and at step , the timers for both RequestedByWaitTime(R) and RequestedByCriticalWaitTime(R) are stopped. Following this, the handler  ends in step . If the size of RequestedBy(R) is not equal to 0, then control continues from step  to step , where the handler  ends.",{"@attributes":{"id":"p-0054","num":"0061"},"figref":"FIG. 7","b":["1090","1090","2","2","2","2","1","7000","7010","1","2","2","1"],"br":{},"in-line-formulae":[{},{}]},"Next, step  checks whether the size of Requesting(R )==0, which means that there are no current requests for R. If so, then step  stops both the RequestingWaitTime(R) and RequestingCriticalWaitTime(R) timers, following which the handler  ends at step . Stopping a timer that has not been started (i.e., timer that was stopped already) would result in a no action or operation. Another alternative may be to check whether the timer is active before stopping the timer, i.e., instead of performing the stop operation regardless of the timer's state. If at step , however, the size of Requesting(R) is greater than 0, then step  checks all of the members of Requesting(R) and sets N to be the number of the members that are critical requestors (i.e., the number of the members for which CriticalRequestor( )==true).","Step  then checks whether N is greater than 0. If so, then step  sets the RequestingCriticalWaitTimeFactor(R) =N. The timer for RequestingCriticalWaitTime(R) is then started in step , following which the handler  ends at step . If, however, N is not greater than 0, then step  stops the RequestingCriticalWaitTime(R) timer, following which the handler  ends at step . As described above with reference to , RequestingCriticalWaitTimeFactor is a weighting factor used for allowing an indication that more than one critical requestor is waiting for a given resource. It provides a factor by which the timer should be incremented, every time increment period. Thus, this factor allows for a weighed RequestingCriticalWaitTime wait time. The weight factor may be used to determine how many clones an application server should be vertically cloned by, for example, where a vertical clone replicates the software stack from the JavaTM virtual machine up. For instance, if the weight is 1, then only one clone is needed to eliminate the waiting. If the weight is 5, then 5 clones would be needed.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Referring now to , the systems and methodologies of the present disclosure may be carried out or executed in a computer system that includes a processing unit , which houses one or more processors and\/or cores, memory and other systems components (not shown expressly in the drawing) that implement a computer processing system, or computer that may execute a computer program product. The computer program product may comprise media, for example a hard disk, a compact storage medium such as a compact disc, or other storage devices, which may be read by the processing unit  by any techniques known or will be known to the skilled artisan for providing the computer program product to the processing system for execution.","The computer program product may comprise all the respective features enabling the implementation of the methodology described herein, and which\u2014when loaded in a computer system\u2014is able to carry out the methods. Computer program, software program, program, or software, in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: (a) conversion to another language, code or notation; and\/or (b) reproduction in a different material form.","The computer processing system that carries out the system and method of the present disclosure may also include a display device such as a monitor or display screen  for presenting output displays and providing a display through which the user may input data and interact with the processing system, for instance, in cooperation with input devices such as the keyboard  and mouse device  or pointing device. The computer processing system may be also connected or coupled to one or more peripheral devices such as the printer , scanner (not shown), speaker, and any other devices, directly or via remote connections. The computer processing system may be connected or coupled to one or more other processing systems such as a server , other remote computer processing system , network storage devices , via any one or more of a local Ethernet, WAN connection, Internet, etc. or via any other networking methodologies that connect different computing systems and allow them to communicate with one another. The various functionalities and modules of the systems and methods of the present disclosure may be implemented or carried out distributedly on different processing systems (e.g., , , ), or on any single platform, for instance, accessing data stored locally or distributedly on the network.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements, if any, in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","Various aspects of the present disclosure may be embodied as a program, software, or computer instructions embodied in a computer or machine usable or readable medium, which causes the computer or machine to perform the steps of the method when executed on the computer, processor, and\/or machine. A program storage device readable by a machine, tangibly embodying a program of instructions executable by the machine to perform various functionalities and methods described in the present disclosure is also provided.","The system and method of the present disclosure may be implemented and run on a general-purpose computer or special-purpose computer system. The computer system may be any type of known or will be known systems and may typically include a processor, memory device, a storage device, input\/output devices, internal buses, and\/or a communications interface for communicating with other computer systems in conjunction with communication hardware and software, etc.","The terms \u201ccomputer system\u201d and \u201ccomputer network\u201d as may be used in the present application may include a variety of combinations of fixed and\/or portable computer hardware, software, peripherals, and storage devices. The computer system may include a plurality of individual components that are networked or otherwise linked to perform collaboratively, or may include one or more stand-alone components. The hardware and software components of the computer system of the present application may include and may be included within fixed and portable devices such as desktop, laptop, server. A module may be a component of a device, software, program, or system that implements some \u201cfunctionality\u201d, which can be embodied as software, hardware, firmware, electronic circuitry, or etc.","The embodiments described above are illustrative examples and it should not be construed that the present invention is limited to these particular embodiments. Thus, various changes and modifications may be effected by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
