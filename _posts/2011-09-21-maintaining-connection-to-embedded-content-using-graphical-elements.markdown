---
title: Maintaining connection to embedded content using graphical elements
abstract: A system and method for dynamically linking or connecting annotations to embedded content, such as a 3D model, using graphical elements within a two-dimensional space is provided. Such connection is maintained as the annotation is rendered with the 3D model, thereby enabling the annotations to intelligently update themselves using 3D information from the embedded content. Further, the capability, as provided herein, to manipulate viewing positions and perspective effects of an embedded 3D model without disrupting the annotations in the two-dimensional page layout provides a greater degree of flexibility and forgiveness.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08902219&OS=08902219&RS=08902219
owner: Trimble Navigation Limited
number: 08902219
owner_city: Sunnyvale
owner_country: US
publication_date: 20110921
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. System","III. Method","IV. Example Computer System Implementation","V. Conclusion"],"p":["The present application claims the benefit of U.S. Provisional Patent Application No. 61\/385,466, filed on Sep. 22, 2010, entitled \u201cMaintaining Connection to Embedded Content Using Graphical Elements\u201d by Hauswirth, et al., which is incorporated herein by reference in its entirety.","1. Field","Embodiments relate generally to the field of three-dimensional (3D) computer graphics, particularly to computer aided design tools.","2. Background","Computers have been used for computer aided design, drafting, and modeling since their inception. The early computer aided design (CAD) applications were used to simplify the creation of two-dimensional models of design objects. The creation of architectural drawings and electronic circuit layouts were just a few of these early applications.","The benefits realized by two-dimensional computer drafting applications are significantly multiplied when such an application adds the capability to model geometries in three dimensions. However, typical computer applications that provide three-dimensional (3D) modeling capabilities have been complex and required significant user training. Further, updating or changing the 3D models has been a time-consuming, manual task.","The capability to annotate embedded content with descriptions and comments is provided. Further, the capability to dynamically link or connect an annotation to the embedded content, such as a 3D model, and maintain such a connection using graphical elements within a two-dimensional space is provided. Such capability can also enable the annotations to intelligently update themselves using 3D information from the embedded content. Further, the capability to manipulate viewing positions and perspective effects of an embedded 3D model without disrupting the annotations in the two-dimensional page layout provides a greater degree of flexibility for design professionals.","Embodiments relate to maintaining a connection or dynamic link to embedded content using graphical elements associated with the embedded content. In an embodiment, an annotation object may be added to an embedded three-dimensional model within a two-dimensional viewport space. The user input corresponding to the embedded three-dimensional model within the two-dimensional viewport space is detected. The annotation object may be added to at least a portion of the embedded three-dimensional model based on the detected user input. The annotation object may be rendered with the three-dimensional model within the two-dimensional viewport space. Connection information may be stored in association with the annotation object in memory. The annotation object may be rendered with the embedded three-dimensional model within the two-dimensional viewport space based on the connection information stored with the annotation object. The annotation object may then be dynamically changed within the two-dimensional viewport space as it is rendered with the embedded three-dimensional graphical model so as to reflect any changes made to the embedded three-dimensional graphical model within three-dimensional space.","Embodiments may be implemented using hardware, firmware, software, or a combination thereof and may be implemented in one or more computer systems or other processing systems.","Further embodiments, features, and advantages of the present invention, as well as the structure and operation of the various embodiments, are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled the relevant art(s) based on the information contained herein.","The accompanying drawings, which are incorporated herein and form part of the specification, illustrate the embodiments of present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the relevant art(s) to make and use the invention.","Three-dimensional (3D) modeling computer applications have been developed to be more accessible to users and easier to use relative to other 3D CAD applications. An example of such a 3D modeling application is SketchUp from Google Inc. of Mountain View, Calif. To facilitate using 3D modeling applications even further, page layout applications have been developed that can be used in conjunction with the 3D modeling applications. An example of such a page layout application is Google SketchUp Pro LayOut (hereinafter referred to as \u201cLayOut\u201d), which is also from Google Inc. of Mountain View, Calif.","For example, LayOut allows design professionals to create two-dimensional presentations in digital or paper format by embedding 3D models created in SketchUp within LayOut directly, whereas traditionally, 3D models had to be exported as static images and later imported into a separate presentation application. Thus, these new 3D modeling and page layout tools have allowed design professionals to work more efficiently by reducing the amount of time spent composing and updating two-dimensional presentations corresponding to the 3D models.","However, as embedded 3D models often need to be changed or updated within a page layout, design professional may still face the time-consuming task of manually updating any annotations that have been made to the 3D model within the page layout.","Embodiments relate to maintaining a connection or dynamic link to embedded content using a graphical element. Embodiments allow an annotation to be dynamically linked or connected to embedded content, such as an embedded 3D model, within a two-dimensional space using one or more graphical elements. Such connection is maintained as the annotation is rendered with the 3D model, thereby enabling the annotations to intelligently update themselves using 3D information from the embedded content. Further, embodiments enable users to manipulate viewing positions and perspective effects of an embedded 3D model without disrupting the annotations in the two-dimensional page layout.","While the present invention is described herein with reference to illustrative embodiments for particular applications, it should be understood that embodiments are not limited thereto. Other embodiments are possible, and modifications can be made to the embodiments within the spirit and scope of the teachings herein and additional fields in which the embodiments would be of significant utility. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the relevant art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","It would also be apparent to one of skill in the relevant art that the embodiments, as described herein, can be implemented in many different embodiments of software, hardware, firmware, and\/or the entities illustrated in the figures. Any actual software code with the specialized control of hardware to implement embodiments is not limiting of the detailed description. Thus, the operational behavior of embodiments will be described with the understanding that modifications and variations of the embodiments are possible, given the level of detail presented herein.","In the detailed description herein, references to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1","b":["100","100","110","120","130","140","110","112","114","116","110","112","114","116","120","130","140","100","120","122","124","126"]},"Computing device  can be any type of computing device having one or more processors, a user input (for example, a mouse, QWERTY keyboard, touch-screen, a graphics tablet, or microphone), and a communications infrastructure capable of receiving and transmitting data over a network. For example, computing device  can include, but is not limited to, a mobile phone, a personal digital assistant (PDA), a computer, a cluster of computers, a set-top box, or other similar type of device capable of processing instructions and receiving and transmitting data to and from humans and other computing devices. Although only layout manager , 3D model manager , annotation manager , GUI manager , memory , GUI , and network interface  are shown, it would be apparent to a person skilled in the art that computing device  may include additional components, modules, and\/or sub-components as necessary.","As will be described in further detail below, memory  can be used to store information accessible by one or more of 3D model manager , annotation manager , and GUI manager , according to an embodiment. Memory  may be any type of recording medium coupled to an integrated circuit that controls access to the recording medium. The recording medium can be, for example and without limitation, a semiconductor memory, a hard disk, or other similar type of memory or storage device. Moreover, memory  may be integrated within computing device , a stand-alone device communicatively coupled to computing device  via a direct connection, or a cloud-based storage location coupled to computing device  over a network.","In an embodiment, layout manager  is communicatively coupled to GUI . GUI  can be any type of graphical user interface display coupled to computing device  for displaying information and content to a user. Further, layout manager  can be communicatively coupled to network interface  for receiving and\/or transmitting information over a network. The network can be any network or combination of networks used to communicate information between different computing devices. Such a network can include, but is not limited to, a wired (e.g., Ethernet) or a wireless (e.g., Wi-Fi and 3G) network. In addition, such a network can include, but is not limited to, a local area network, medium area network, and\/or wide area network such as the Internet.","Layout manager , including its components (3D model manager , annotation manager , and GUI manager ), can be implemented in software, firmware, hardware, or any combination thereof. Embodiments of 3D model manager , annotation manager , and GUI manager , or portions thereof, can also be implemented to run on any type of processing device including, but not limited to, a computer, workstation, embedded system, networked device, mobile device, or other type of processor or computer system capable of carrying out the functionality described herein.","In operation, 3D model manager  can receive or acquire content that can be embedded into a two-dimensional viewport space, in accordance with au embodiment. The two-dimensional (2D) viewport space can be implemented as a 2D viewport into a 3D virtual world. Different types of content, including, but not limited to, 3D content, may be embedded into the 2D viewport space. The embedded 3D content can include, but is not limited to, 3D graphical models. For ease of explanation, embodiments of 3D model manager , annotation manager , and GUI manager  are described with respect to , but are not intended to be limited thereto. Further, embodiments are described herein with respect to 3D content and 3D models for illustrative purposes only. A person skilled in the relevant art given this description would appreciate that other types of embedded content may be used as necessary.","In an embodiment, 3D model manager  embeds a 3D graphical model within the 2D viewport space, which then displays a 2D representation of the 3D model using, for example, GUI . The 3D graphical model may itself be a representation of a real-world object, such as a house (see, e.g., 3D model  shown in , discussed in further detail below). In this regard, the scale of the 3D model represented in the 2D viewport space is generally not 1:1. For example, a 3D model of a house rendered in the 2D viewport space may be assigned a scale such as 1:12 where every inch in the 2D viewport space represents twelve inches (one foot) of the actual physical house. It is noted that the 2D viewport space may comprise additional elements that do not represent real world objects, for example and without limitation, blocks of text.","The embedded object within the 2D viewport space can include information that is associated with it, such as metadata describing various attributes specific to the embedded object. For example, an embedded 3D model can include information corresponding to the geometry of various graphical elements that are rendered in the 2D viewport space. Further, the 3D model itself can be associated with a 3D space. For example, the 3D model may have been created using a 3D modeling computer program capable of representing objects at an actual 1:1 scale. An example of such a 3D modeling program is SketchUp from Google Inc. of Mountain View, Calif. The 3D models may be stored at memory  as 3D models  or may be received directly from the 3D modeling program via, for example, a communication or programming interface between the 3D modeling program and layout manager .","Further, the 2D viewport space may display the embedded 3D model from the perspective of a virtual camera. Such a perspective may be defined by a three-dimensional view frustum such as, for example, a truncated three-dimensional pyramid. The view frustum represents the virtual camera's viewable content area within a three-dimensional space. Additionally, embedded content within the 2D viewport space can be displayed at varying levels of detail depending on distance from the virtual camera. In an embodiment, the user can manipulate the user's viewpoint of the frustum using an input device, such as, for example, a mouse, coupled to computing device .","In an embodiment, GUI manager  receives the user input and sends it to 3D model manager . Based on the received user input from GUI manager , 3D model manager  changes, in real-time, the orientation and position of the frustum. From the user's perspective, the user is changing the orientation and\/or position of the 3D model itself within the 2D viewport space. Additional aspects of virtual cameras and view frustums would be apparent to a person skilled in the relevant art given this description.","In an embodiment, annotation manager  enables a user at computing device  to add an annotation object to the embedded 3D model within the 2D viewport space. Accordingly, the user may interact with the embedded 3D model using an input device (e.g., a mouse) coupled to computing device  in order to add annotations for purposes of identifying or describing specific portions of the embedded 3D model. For example, the user may add an architectural dimension (or simply \u201cdimension\u201d) object, described in further detail below, to identify a distance between portions of an embedded 3D model (see, e.g., annotation object  shown in ). In an embodiment, GUI manager  detects the user input corresponding to the embedded 2D model within the 2D viewport space and sends it to annotation manager .","In an embodiment, annotation manager  renders the annotation object based on the user input it receives from GUI manager . For example, as will be described in further detail, the type of annotation object may depend on the position of the detected input within the 2D viewport space. Further, annotation manager  may display one or more different visual indicators with respect to the embedded 3D model that help guide the user in the creation of different types annotation object. To render the annotation object, annotation manager  may retrieve information pertaining to various types of annotation objects from annotation object data  stored in memory , according to an embodiment.","A. Example User Interaction for Adding Dimension Object",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIGS. 3A-3C","b":"300"},"The example user interaction begins in , in which the user starts by setting a base point , for example, by mouse-clicking the point on embedded object  within the 21) viewport space. In , the user clicks on a second control point , which sets a length for the dimension object. In an embodiment, annotation manager  identifies the dimension as a horizontal dimension based on the location of base point and point with respect to embedded object . In , the user drags the mouse down vertically and mouse-clicks a third time at a control point in the 2D viewport space to create the annotation object, as shown.","It is noted that different types of dimension objects may be used as necessary. In an example,  show horizontal and vertical dimensions corresponding to a rotated en bedded model. In an embodiment, dimensions may be either linear or angular. For example, a linear dimension is depicted by dimension  of . In this example, linear dimension  comprises a plurality of graphical elements including, for example and without limitation, three lines , , and  and a text string . Line  may be referred to as the starting extension line and extends away from the start point of the dimension (e.g., point of ). Line , which may be referred to as an extension line, extends away from the end point of the dimension (e.g., point of ). Line  is perpendicular to the lines  and  and represents the length of the dimension. The dimension text  is tied to the dimension line and displays the dimensional value, e.g., length of the dimension, in some unit of measurement. Further, the distance  represents a distance between the dimension line  and the embedded model  being measured. Distance  may be adjusted as necessary by the user when adding the dimension object.","In another example, an angular dimension may be provided as a group including three lines and text string, similar to the linear dimension. Similarly, the first line may extend away from the start point of the dimension, and the second line may extend away from the end point of the dimension. The third angular dimension line, however, may be an arc perpendicular to the first and second lines and represents the angle. The dimension text may be, for example, tied to the dimension line and displays the angle in degrees.","In an embodiment, GUI manager  can enable the user to edit the graphical elements (e.g., lines and text strings) of any annotation object, including dimension objects. Further, one or more style properties of the dimension object may also be editable by the user. For example, GUI manager  may display a control box (e.g., dimension properties box  shown in ) that allows the user to change various properties including, but not limited to, a format, orientation, and precision of the text string used to show the dimension value, described above.","It is noted that such dimensions as described herein can measure distances between any points in the document area, such as the distance between two entities, the length of a single line in an entity, or the length of a line in an embedded model. Further, the start and end points of a linear dimension affix the dimension to the embedded models. Thus, when a user moves or resizes embedded models that have an associated dimension, the dimension automatically adjusts accordingly.","Further, as shown in , the 2D viewport space  may be separated into various zones based on the dimension baseline. In an embodiment, these zones are used to determine the type of dimension to draw or render within the 2D viewport space. It is noted that the zones illustrated in  are for illustrative purposes only and embodiments are not intended to be limited thereto. For example, some dimensions may not work with the simple zone based choosing of the dimension type. At times, the user may want to align the dimension perpendicular to something other than the dimension baseline.  shows a dimension object that is aligned to the baseline of the embedded model, according to an embodiment. However, such an alignment may not be desired by the user.","Thus, the user may, at point , select a \u201cFree\u201d mode using an input device (e.g., by pressing an \u201cOption\u201d key in combination with clicking and dragging with a mouse), which can draw a line between the second click point and the mouse position with no zone snapping. In an embodiment, an inference engine may be used to get perpendicular and parallel inferences corresponding to the points in order to obtain an alignment desired by the user, as shown in the example illustrated in .  shows an exemplary set of control points -corresponding to the embedded model for a dimension object , according to an embodiment.  shows an exemplary method of calculating direction and offsets for a dimension object using various control points, according to an embodiment.","It would be apparent to a person skilled in the art that embodiments are not limited to the types of dimension objects described above. Other types of dimension objects may be used as necessary. Further description of dimension objects, including user interface and user interaction examples, can be found, for example, in the user guide and reference guide documentation for the dimension tool of LayOut from Google Inc. of Mountain view, CA.","B. Maintaining Connection to Embedded Content","Referring back to , annotation manager  creates a dynamic link or connection between the added annotation object and the portion (e.g., one or more points) of the embedded 3D model based on the detected user input. For example, annotation manager  may create a dynamic link between the newly added annotation object and one or more control points (based on the user input) with respect to the embedded 3D model (e.g., control points , , and of , respectively, described above). In an embodiment, annotation manager  calculates the 2D points within the 2D viewport space based on user input (e.g., a mouse position). It would be apparent to a person skilled in the relevant art given this description that any one of various well-known methods may be used by annotation manager  to calculate such 2D points.","In an embodiment, annotation manager  determines the appropriate control point in the 3D world space of the embedded 3D model corresponding to the 2D point in the 2D viewport space. In an embodiment, annotation manager  determines such 3D control points by communicating with or extracting the information from the embedded 3D model itself. For example, the embedded model may provide an application programming interface (API) with which annotation manager  can communicate. Such an API may, for example, take input from annotation manager  (e.g., a 2D point in the 2D viewport space corresponding to a mouse position) and return the corresponding 3D point in the world space of the embedded 3D model. Accordingly, annotation manager  can use the information from the embedded 3D model to attach the 2D point(s) of the annotation object to the 3D point(s) of the embedded 3D model. In this regard, graphical elements of the annotation object within 2D viewport space are connected to the graphical elements of the embedded 3D model within its 3D space.","In an embodiment, annotation manager  stores the connection or dynamic link between the annotation object and the 3D model in association with the annotation object. For example, such connection information in addition to any other data specific to the annotation object (e.g., data describing the annotation object's attributes) may be stored as annotation object data  in memory . In an embodiment, annotation manager  uses the connection information associated with the annotation object to render the annotation object with the embedded 3D model within the 2D viewport space. It would be apparent to a person skilled in the relevant art given this description that the 3D connection information does not necessarily have to be stored with the annotation object. For example, connection information may be pulled dynamically from the embedded 3D model as they are both rendered within the 2D viewport space.","As described above, the user may interact with the embedded 3D model to change its orientation, position, and\/or scale within the 2D viewport space from the user's perspective. In an embodiment, in response to user input, GUI manager  accordingly updates the position of the virtual camera in the 3D world space of the embedded 3D model, as described above. After changes to the embedded 3D model are made by the user, annotation manager  uses the connection information stored with the annotation object to determine all of the connections between the annotation object and the embedded 3D model.","In an embodiment, annotation manager  determines the appropriate 2D point in the 2D viewport space corresponding to each 3D point of the embedded 3D model based on the connection information. In this regard, the dynamic link or connection enables annotation manager  to determine the correct location in the 2D viewport space in which to render the annotation object with the embedded 3D model so as to reflect on any changes made to the 3D model in its 3D world space (e.g., changes made by the user to the position of the virtual camera, as described above). Thus, as the virtual camera's position is changed by the user once the annotation object is added, the annotation object stays connected to the 3D points of the model.","Thus, annotation manager  updates the graphical elements of the annotation object within the 2D viewport space based on the changes made to the embedded 3D model. For example, if the annotation object is a dimension object, as described above, annotation manager  updates the dimension value of the dimension object to reflect any changes in length (e.g., if the user changes the scale of the 3D model) corresponding to the portion of the embedded 3D model to which the dimension object is attached.","It is noted that annotation manager  may derive the correct length for the dimension value as the object is rendered with the 3D model in a number of ways. In an embodiment, an orthographic view of the embedded 3D model may be rendered in the 2D viewport space. As lengths are measureable within orthographic views, an associated scale of the embedded 3D model may be used to determine the length of the relevant portion of the embedded 3D model (e.g., a length of a side of the 3D model  of a house, as illustrated in ).","In another embodiment, the length can be calculated by snapping or attaching the dimension object to two points within the 3D space of the embedded 3D model, as described above, and thereafter calculating a displacement value between the two points in the 3D space. The 3D model can be orbited to any position and the dimension object will remain connected and display the correct length value. Further, in a perspective view (in contrast to an orthographic view) of an embedded 3D model (see, e.g., example house 3D model  shown in of ), a first dimensioned portion of the 3D model may appear to be a different length from a second dimensioned portion of the model (e.g., front corner of the example house 3D model  may appear longer than the back corner) even though the two portions may be of equal length. However, since the dimension object can pull 3D information from the 3D model, the second dimensioned portion can be accurately dimensioned to display the correct value.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIGS. 2A-2C","FIGS. 2A-2C","FIG. 2A"],"b":["210","200","210","200","210","200","210","210"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 2B","b":["210","212","114","200","210","114","210","114","200","212","124","120"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 2C","FIG. 2C","FIG. 2C"],"b":["210","214","200","210","210","114","116","212","210","200","210","214","212","210","200"]},"It is noted that embodiments are not limited to the example illustrated in . The user may also make other types of changes to 3D model . For example, the user may change the scale of 3D model  within its 3D world space. Accordingly, annotation manager  may use GUI manager  to dynamically update the text string of annotation object  to match any change in scale of 3D model  within its 3D world space.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 8","FIG. 1"],"b":["800","800","802","804","806","808","810","812","814","800","100"]},"Method  begins in step , in which a 3D model is embedded within a 2D viewport space. As described above, the 3D model may be have been created using a 3D modeling computer program such as, for example, SketchUp from Google Inc. of Mountain View, Calif. The 3D model may be imported directly from such computer program or stored in memory and later inserted into the 2D viewport space through user interaction. It is noted that although method  is described in the context of 3D model, embodiments are not limited thereto. Step  may be performed by, for example, 3D model manager , described above.","Method  proceeds to step , which includes enabling a user to add an annotation object in association with the 3D model, as described above. In step , the added annotation object is dynamically linked to at least a portion of the 3D model based on the user input. For example, the embedded model may provide an interface enabling it to communicate information regarding its graphical elements and\/or points corresponding to its graphical elements within its 3D world space. Accordingly, the information from the embedded 3D model can be used to attach the 2D point(s) of the annotation object to the 3D point(s) of the embedded 3D model. As described above, graphical elements of the annotation object within 2D viewport space are connected to the graphical elements of the embedded 3D model within its 3D space.","Method  may then proceed to step , in which the connection information derived from the embedded 3D model is stored with the annotation object. This stored connection information may then be used in step , which includes determining whether any changes have been made to the embedded 3D model. For example, when the user changes the position of the virtual camera to change the viewing perspective of the embedded 3D model, this change can be detected and both the 3D model and the annotation object may be adjusted according to the stored connection information as it is rendered within the 2D viewport space. Thus, method  proceeds to step  if any changes are detected or to step  if no changes have been detected. However, it is noted that step  may be optional as the relevant information may be derived as the annotation is dynamically rendered without having to store the connection information.","Step  includes changing the position and\/or orientation of the annotation object within 2D viewport space to match changes to 3D model, as described above. Method  concludes after step , which includes rendering the annotation object with embedded 3D model within 2D viewport space. Steps , , , , and  may be performed by, for example, annotation manager , described above. Step  may be performed by, for example, GUI manager , described above.","One advantage of method  is that enables users to add annotations to embedded 3D models within a 2D space without having to manually update the annotation to reflect any changes that may be made to the 3D model within 3D space. Moreover, the ability to manipulate the camera position and perspective effects of the embedded 3D model without disrupting the annotations in the 2D page layout makes method  much more flexible and forgiving than conventional methods.","Embodiments shown in , or any part(s) or function(s) thereof, may be implemented using hardware, software modules, firmware, tangible computer readable media having instructions stored thereon, or a combination thereof and may be implemented in one or more computer systems or other processing systems.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 9","FIG. 1","FIGS. 1-8"],"b":["900","100","900"]},"If programmable logic is used, such logic may execute on a commercially available processing platform or a special purpose device. One of ordinary skill in the art may appreciate that embodiments of the disclosed subject matter can be practiced with various computer system configurations, including multi-core multiprocessor systems, minicomputers, mainframe computers, computer linked or clustered with distributed functions, as well as pervasive or miniature computers that may be embedded into virtually any device.","For instance, at least one processor device and a memory may be used to implement the above described embodiments. A processor device may be a single processor, a plurality of processors, or combinations thereof. Processor devices may have one or more processor \u201ccores.\u201d","Various embodiments of the invention are described in terms of this example computer system . After reading this description, it will become apparent to a person skilled in the relevant art how to implement the invention using other computer systems and\/or computer architectures. Although operations may be described as a sequential process, some of the operations may in fact be performed in parallel, concurrently, and\/or in a distributed environment, and with program code stored locally or remotely for access by single or multi-processor machines. In addition, in some embodiments the order of operations may be rearranged without departing from the spirit of the disclosed subject matter.","Processor device  may be a special purpose or a general purpose processor device. As will be appreciated by persons skilled in the relevant art, processor device  may also be a single processor in a multi-core\/multiprocessor system, such system operating alone, or in a cluster of computing devices operating in a cluster or server farm. Processor device  is connected to a communication infrastructure , for example, a bus, message queue, network, or multi-core message-passing scheme.","Computer system  also includes a main memory , for example, random access memory (RAM), and may also include a secondary memory . Secondary memory  may include, for example, a hard disk drive , removable storage drive . Removable storage drive  may comprise a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash memory, or the like. The removable storage drive  reads from and\/or writes to a removable storage unit  in a well known manner. Removable storage unit  may comprise a floppy disk, magnetic tape, optical disk, etc. which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art, removable storage unit  includes a computer usable storage medium having stored therein computer software and\/or data.","In alternative implementations, secondary memory  may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include, for example, a removable storage unit  and an interface . Examples of such means may include a program cartridge and cartridge interface (such as that found in video game devices), a removable memory chip (such as an EPROM, or PROM) and associated socket, and other removable storage units  and interfaces  which allow software and data to be transferred from the removable storage unit  to computer system .","Computer system  may also include a communications interface . Communications interface  allows software and data to be transferred between computer system  and external devices. Communications interface  may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, or the like. Software and data transferred via communications interface  may be in the form of signals, which may be electronic, electromagnetic, optical, or other signals capable of being received by communications interface . These signals may be provided to communications interface  via a communications path . Communications path  carries signals and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, an RF link or other communications channels.","In this document, the terms \u201ccomputer program medium\u201d and \u201ccomputer usable medium\u201d are used to generally refer to media such as removable storage unit , removable storage unit , and a hard disk installed in hard disk drive . Computer program medium and computer usable medium may also refer to memories, such as main memory  and secondary memory , which may be memory semiconductors (e.g. DRAMs, etc.).","Computer programs (also called computer control logic) are stored in main memory  and\/or secondary memory . Computer programs may also be received via communications interface . Such computer programs, when executed, enable computer system  to implement the present invention as discussed herein. In particular, the computer programs, when executed, enable processor device  to implement the processes of the present invention, such as the stages in the method illustrated by flowchart  of , discussed above. Accordingly, such computer programs represent controllers of the computer system . Where the invention is implemented using software, the software may be stored in a computer program product and loaded into computer system  using removable storage drive , interface , and hard disk drive , or communications interface .","Embodiments of the invention also may be directed to computer program products comprising software stored on any computer useable medium. Such software, when executed in one or more data processing device, causes a data processing device(s) to operate as described herein. Embodiments of the invention employ any computer useable or readable medium. Examples of computer useable mediums include, but are not limited to, primary storage devices (e.g., any type of random access memory), secondary storage devices (e.g., hard drives, floppy disks, CD ROMS, ZIP disks, tapes, magnetic storage devices, and optical storage devices, MEMS, nano-technological storage device, etc.), and communication mediums (e.g., wired and wireless communications networks, local area networks, wide area networks, intranets, etc.).","The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.","Embodiments of the present invention have been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.","The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can, by applying knowledge within the skill of the art, readily modify and\/or adapt for various applications such specific embodiments, without undue experimentation, without departing from the general concept of the present invention. Therefore, such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments, based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation, such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.","The breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["Embodiments are described, by way of example only, with reference to the accompanying drawings. In the drawings, like reference numbers may indicate identical or functionally similar elements. The drawing in which an element first appears is typically indicated by the leftmost digit or digits in the corresponding reference number.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 4A-4C"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7D"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
