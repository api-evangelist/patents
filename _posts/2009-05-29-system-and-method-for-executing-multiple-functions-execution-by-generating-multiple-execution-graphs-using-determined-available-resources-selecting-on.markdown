---
title: System and method for executing multiple functions execution by generating multiple execution graphs using determined available resources, selecting one of the multiple execution graphs based on estimated cost and compiling the selected execution graph
abstract: Various embodiments herein provide one or more systems, methods, software, and data structures for executing multiple functions using more than one resource within a computing system. Examples of functions comprise data processing filters and effects. Resources include, for example, a central processing unit (CPU) and a graphics processing unit (GPU). Based on an input graph received from a user, one or more execution graphs may be generated to indicate the resources to be used and data conversions to be performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08549529&OS=08549529&RS=08549529
owner: Adobe Systems Incorporated
number: 08549529
owner_city: San Jose
owner_country: US
publication_date: 20090529
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND INFORMATION","DETAILED DESCRIPTION"],"p":["Data processing programs (such as image processing programs and audio processing programs) typically include one or more filters or functions that can be used to modify media received from a user. Some of these filters are limited to being executed on a specific piece of hardware such as a central processing unit (CPU) or a graphics processing unit (GPU).","Data processing techniques typically include functions that may be used to modify a media input (e.g., an audio file, an image or a series of images). Functions that are commonly used include, but are not limited to, blur, tint, fade, recolor, and filtering techniques. Well-known filters include Gaussian filters, anti-aliasing filters, and median filters. Multiple functions may be used to modify media to remove noise and\/or to achieve a desired effect. Some resources within a computer or other machine may more efficiently perform a particular function than another resource. As such, it may be desirable to perform some functions within a first resource and other functions within another resource.","A computer or other machine being used to modify the media input may include multiple resources that are each able to execute at least a portion of the functions. The resources may include one or more processors that, in turn, may each support multiple computing platforms. Examples of processors include central processing units (CPUs) and graphic processing units (GPUs). Computing platforms may include application programming interfaces (APIs) such as Open CL and\/or architectures (e.g., CUDA). For simplicity, each computing platform is referred to as a separate resource, even though it may be executed by one of the processors that are also referred to as resources. To illustrate, as used in connection with the embodiments described herein, examples of resources include CPUs, multi-core CPUs, multiple CPUs, integrated GPUs, multiple GPUs, and implementations of graphics or computer systems, such as OpenGL, OpenCL, Cuda, DirectX, and DirectX ComputeShader. For illustration, exemplary resources used herein to describe various embodiments are referred to as the \u201cCPU\u201d and the \u201cGPU.\u201d","Some embodiments provide systems and approaches for receiving an input graph from a user that indicates one or more functions to be performed on the media input but does not necessarily indicate a specific resource to be used to execute each function. The input graph is described herein as being in graphical form but is understood to include textual or other representations of the functions to be performed. The input graph may be referred to as being \u201cresource independent.\u201d The systems and approaches provided herein may automatically interrogate the resources and determine which resources will be used to build and\/or execute each of the functions within the input graph. The determination may be based on reducing the memory footprint, reducing an execution time, generating higher precision output, avoiding overuse of a single resource, reducing a number of conversions to be performed, etc. To switch between resources, systems and approaches described herein may provide one or more conversions between the functions to convert data executable by one resource (e.g., a GPU) to data executable by another resource (e.g., the CPU). The terms \u201ckernel\u201d and \u201cnode\u201d may be used to refer to functions and conversions inclusively.","Some embodiments may be desirable for functions that require a specific set of resources to be executed properly. For example, a box blur filter is typically optimized by a user to run on specific resources at various points during execution. Specifying these resources can be difficult and time-consuming. The embodiments described here may receive a command from a user via an input graph to apply a box blur filter to one or more images. The embodiments then identify the available resources and select the optimal set of resources to perform each portion of the box blur filter without additional input from the user. The selection may be based on, for example, memory footprint, execution time, improved accuracy, improved performance, resource scheduling, reduced conversions during execution of the function. In some instances, various embodiments may be used where the actual hardware resources that will be available are unknown when the function is generated. This aspect may be desirable for executing legacy functions on updated hardware resources.","In some instances, the data comprises an image or audio recording of a physical object captured by, for example, a camera or audio recorder. This data may be in an electronic format that is not understandable by a user, such as, for example, an array of numerical values representing pixels in an image. The systems and methods described herein may operate to receive the data and transform the data into a visual or audio depiction that is understandable by a user (e.g., an image). Further, some functions described herein may comprise, for example, processing data corresponding to an event and\/or natural phenomena.","For example, image data of a physical object may be received from a digital camera in a computer-readable format such as a bitmap, jpeg, or other image file format. The approaches described here may operate to receive the data via an image processing application and transform the data. Transformations may include, for example, applying one or more filters to remove noise, sharpening or blurring the image, or applying a special effect. Special effects may include a kaleidoscope effect, a stained glass effect, an aging effect, converting a color image to a black and white image, or the like. The transformed image or image data may be displayed to the user as a visual depiction of the physical object. Audio data and other data may be transformed similarly using filters, special effects, and other techniques.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","100","102","104","106","108","100","110"]},"The input graph  may be received via a user interface of a data processing program such as an image processing software application. The input graph  may be specified programmatically by an image processing application via an application programming interface (API) such as the FILTERGRAPH\u00ae API by ADOBE SYSTEMS INC. of San Jose, Calif. The input graph  may also be described in a text file (e.g., as used in PIXELBENDER\u00ae imaging software by ADOBE SYSTEMS INC. of San Jose, Calif.) by a user of an image processing application (e.g., PHOTOSHOP\u00ae or AFTER EFFECTS\u00ae image processing applications ADOBE SYSTEMS INC. of San Jose, Calif.). The input graph  may be received from a user as a graphical representation or as a programmatic representation (e.g., in a programming language). The input graph  may include one or more predefined functions or user-defined functions and one or more media inputs  that indicate one or more file locations of media inputs to be modified. Alternatively, the user may provide a data structure other than a graph, such as a text indicating one or more functions to be performed. Alternate diagrammatic formats may also be used.","In some instances, the term \u201ca resource-independent input graph\u201d is used to specify that an input graph (e.g., input graph ) received from a user does not specify the resource used to execute at least one or, in some embodiments, all of the functions to be performed. The resource-independent input graph may or may not indicate a resource on which the input is to be received and\/or the resource from which to access the output.","Input graph  specifies one or more functions (e.g., first function  and second function ) to be performed. In some instances, the input graph  may include a media input  or a location where the media input  is located. The media input  may be associated with a specific resource. The input graph  may also include, in some embodiments, a location where the modified media input (i.e., media output ) is to be stored and a resource associated with the media output . The input graph  may include one or more parameters  corresponding to a first function  and a second function . It is noted that the input graph  may or may not include an indication of the hardware that may be used to perform the functions within the input graph.","Functions within the input graph  may include, for example, first function  and second function . The first function  and\/or the second function  may be predefined, user-defined, nested, and\/or comprise a third-party filter that can be managed using the input graph . The input graph  typically dictates an order in which the functions are to be performed on the media input . The order in which the functions are to be performed may be referred to as an execution sequence. In some embodiments, the input graph  may indicate that two or more functions are to be performed in parallel or that the functions may or may not be reordered.","Examples of functions that may be included in an input graph  are familiar to those skilled in the art. These functions include, for example, blur, tint, fade, and the like. The functions may also include known filters such as Gaussian filters, salt-and-pepper filters, and the like. For example, other functions used in image processing to create a desired image may be included in the functions  and . These examples include a stained-glass effect, recolor effect, crackle-effect, and the like.","The functions  and  may receive parameters  as inputs. The parameters  may be the same or different for each of the functions  and . The parameters  may be provided at the same time the media input  is provided and\/or may be received when the input graph  is generated. A parameter may include, for example, ranges, constants, or other variables used to execute one or more of the functions  and . In some instances, a first portion of the parameters  may be received when the input graph  is generated and a second portion of the parameters  may be received when a media input  is received. One or more of the parameters  may be associated with a default value.","The input graph  may indicate a format and\/or location of an output file referred to here as media output . The media output  may be in the same format or a different format from the format and\/or location of the media input . For example, in some instances the media input  may be in a CPU-compliant format while the media output  may be in a GPU-compliant format.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2A","b":["200","206","212","220","224","200","202","204","100","200","200","100","202","204","200","200"]},"The CPU input  indicates that a media input  is received or will be received via a process executed by the CPU of the computing system. The CPU output  indicates that the media output  will be stored and accessible via a process executed by the CPU of the computing system. In some instances, the media output  may be stored and\/or accessed via a process executed by another resource of the computing system","A first execution graph  of the graph  includes two functions  and  for performing the first function  and the second function  of the input graph  shown in . The function  corresponds to the first function  and indicates that this function is to be performed on the CPU. The execution graph  also includes CPU function , indicating that the second function  is also to be performed on the CPU. In operation, the first function  may comprise a blur function, for example, and the second function  may comprise a tint function. The function  corresponding to the first function  indicates that the CPU is to perform the blur function and that the function  corresponding to the second function  indicates that the CPU is also to perform the tint function.","The second execution graph  includes function  to perform first function  on the CPU and a second function  to be performed on the GPU instead of the CPU. To do this, conversion  is inserted into the second execution graph  to convert the output of function  into GPU-readable data that can be processed by the GPU. Function  may receive the GPU data generated by the conversion  to perform a second function . Because the output of function  is GPU-readable and the output  is designated as a CPU format, a second conversion  is inserted into execution graph .","The graph  further includes execution graph  and execution graph , which operate to perform the first function  on the GPU in a function , and as described above, conversions  and  are inserted into the execution graphs  and  as needed.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2B","FIG. 2A"],"b":["250","200","250","200"]},"The graph  may be useful in various embodiments, particularly where more than two resources are available. For example, in addition to a CPU and a GPU, other architectures or platforms may also be available. For example, a GPU may operate other resources, such as OpenGL, OpenCL, and CUDA, and switching between the resources within the GPU may also require a conversion. Even more so, in these embodiments, a direct conversion may not be possible. For example, if a first function  is performed on a CUDA-enabled GPU and a second function is to be performed on a CPU, two conversions may be used (e.g., a CUDA-to-GL function and a GL-to-CPU function).","The graph  or the condensed graph  may be used in conjunction with a shortest path algorithm to determine a most efficient execution graph or instance within the graph to perform the functions provided by the user. Examples of shortest path algorithm include, but are not limited to, Dijkstra's algorithm and an A* search algorithm.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["300","300","302","304","306","308","302","100","110"]},"The selector  may determine whether a function in the input graph  is executable by each of one or more available resources. The selector  may further select an available resource to execute each function based in part on an execution sequence depicted in the input graph . Based on the selection, the inserting module  may insert a conversion into an execution graph (e.g., conversion  in the first execution graph ) to convert an output at one resource into an input at another resource.","The compiler  may compile the execution graph to be executed and perform the functions in the input graph .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["400","400","400","300","400","100","102","110","100","108"]},"In an operation , a user input graph is received by the interface module . In some embodiments, the user input graph may comprise user input graph  or may be recalled from a file location or uniform resource locator (URL). The input graph  may be written in a programming language or may be assembled graphically by a user via a user interface. The user input graph  may be associated with a media input to be modified or may be provided without the media input.","In an operation , the resources are interrogated by the selector  to determine whether each of the resources is able to perform at least a portion of the functions specified in the input graph. The interrogation may be based on one or more preset parameters. The interrogation itself may be executed as a Boolean command. In some systems, each resource may be surveyed more than once.","In an operation , multiple instances of an execution graph are generated by the selector  and\/or the inserting module . The multiple instances may be assembled in a graph such as graph  or condensed graph . The multiple instances of the execution graph may include those instances that are possible to perform based on the survey performed in the operation .","In an operation , one instance of the multiple instances of the execution graph may be selected by the selector  and\/or the inserting module  based on an estimated cost of executing the path. \u201cCost\u201d is understood as a metric corresponding to the performance of the functions or conversions within the execution graph. Examples of costs include amount of time, amount of memory, amount of transfers, precision, accuracy or quality of the output, amount of power consumed, actual monetary cost, etc. The cost estimation may be calculated using, for example, a weighted algorithm, a shortest path algorithm, a count of the number of conversions be performed, or a combination thereof.","In instances where the weighting algorithm is used, the conversions (such as conversions  and ) may be weighted more heavily than the functions provided either on the CPU or the GPU in part because conversion functions are generally expensive and may include costly format conversions in order to provide the resource with an optimal layout of the data. In other instances, particularly where a number of conversions are included in each execution graph, one type of conversion may be considered more expensive than another type of conversion. For example, a conversion from an Open CL resource to an OpenGL resource may be less expensive or weighted less heavily than a conversion from a CUDA resource to a CPU. Further, some conversions directly from one resource to another may not be possible and may require a temporary conversion to a third resource. In some instances, the selection  may be controlled by a client application (e.g., an image processing application or an audio processing application) to restrict usage of certain resources or to force usage of only certain resources.","In an operation , once the least expensive execution graph is selected, an executable of the execution graph is compiled by the compiler  and executed using the resources specified by the execution graph. The client application and the user do not necessarily have any knowledge about which resources perform each function or about the resources locally available on the computing system. The execution graph may be modified further by a resource based on one or more parameters or attributes of the media input provided by the user.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 5A-5D","FIG. 5A"],"b":["100","500","502","502","502","504","506","504","500","508","110"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5B","b":["510","504","104","106","504","510","104","106"]},"As depicted in execution graph , a subfunction A  and a subfunction B  may both be performed first to generate output that is used as input into a subfunction C . In some instances, a subfunction may not receive any input. Upon receiving the outputs of subfunction A  and subfunction B , the subfunction C  may perform some function using both. For example, subfunction C  may comprise a combining function. This function graph  also includes a CPU output  similar to the CPU output  as described in connection with .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5C","b":["522","510","404","522","514","516","518","522"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5D","FIG. 2A"],"b":["524","250","522","524","524","522","514","524","514","526","528"]},"Once the graph  is generated, one of the execution graphs is selected using a shortest distance algorithm. For instance, in the example depicted, subfunction A  may be selected to be performed on the GPU. This allows subfunction A  and subfunction B  to be performed substantially in parallel on the GPU and the CPU, respectively. Using the selected execution graph, an executable version of the execution graph is generated and the media input is processed to generate a modified media as described above.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["600","600","602","608","610","602","604","606","608","610","600","612","614","616","616"]},"Some embodiments may be useful to perform a predetermined set of functions on various computers without knowledge of the resources available on each of the computers. Other embodiments may be useful for more efficiently selecting resources on a computer given a set of functions to be performed.","In the foregoing detailed description, reference is made to the accompanying drawings that form a part hereof, in which is shown by way of illustration specific embodiments in which the inventive subject matter may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice them, and it is to be understood that other embodiments may be utilized and that structural, logical, and electrical changes may be made without departing from the scope of the subject matter of the present application.","The foregoing description is, therefore not to be taken in a limited sense, and the scope of the inventive subject matter is defined by the appended claims.","The functions or algorithms described herein are implemented in hardware, software, or in one embodiment, a combination of software and hardware. The software comprises computer executable instructions stored on a computer readable medium such as memory or other type of storage device. Further, described functions may correspond to modules, which may include software, hardware, firmware, or any combination thereof. Multiple functions are performed in one or more modules as desired, and the embodiments described are merely examples. The software is executed on a digital signal processor, ASIC, microprocessor, or other type of processor operating on a system, such as a personal computer, server, router, or other device capable of processing data in the network interconnection devices.","Some embodiments implement the functions in two or more specific interconnected hardware modules or devices with related control and data signals communicated between and through the modules, or as portions of an application-specific integrated circuit. Thus, the exemplary process flows are applicable to software, firmware, and hardware implementations.","Embodiments may, for example, be implemented as a stand-alone application (e.g., without any network capabilities), a client-server application or a peer-to-peer (or distributed) application. Embodiments may also, for example, be deployed by Software-as-a-Service (SaaS), Application Service Providers (ASPs), or utility computing providers, in addition to being sold or licensed via traditional channels.","It is emphasized that the abstract is provided to comply with 37 C.F.R. \u00a71.72 (b) requiring an Abstract that will allow the reader to quickly ascertain the nature and gist of the technical disclosure. It is submitted with the understanding that it will not be used to interpret the scope or meaning of the claims.","In the foregoing Detailed Description, various features are together in a single embodiment to streamline the disclosure. This approach of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments of the inventive subject matter require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus, the following claims are hereby incorporated into Detailed Description, with each claim standing on its own as a separate embodiment.","In the above Detailed Description, numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, approaches, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter. Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is here, and generally, considered to be a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a computing platform, such as a computer or a similar electronic computing device, that manipulates or transforms data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing platform.","It will is readily understood by those skilled in the art that various other changes in the details, material, and arrangements of the present method stages which have been described and illustrated in order to a explain the nature of the inventive subject matter may be made without departing from the principles and scope of the inventive subject matter as expressed in subjoined claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 5A-5D"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
