---
title: Blocking processing restrictions based on page indices
abstract: Processing restrictions of a computing environment are filtered and blocked, in certain circumstances, such that processing continues despite the restrictions. One restriction includes an indication that address translation is prohibited, in response to a buffer miss. When a processing unit of the computing environment is met with this restriction, it performs a comparison of page indices, which indicates whether the address translation can continue. If address translation can continue, the restriction is ignored. The processing unit includes a processor or a pageable entity, as examples.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07020761&OS=07020761&RS=07020761
owner: International Business Machines Corporation
number: 07020761
owner_city: Armonk
owner_country: US
publication_date: 20030512
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["This application contains subject matter which is related to the subject matter of the following applications, each of which is assigned to the same assignee as this application. Each of the below listed applications is hereby incorporated herein by reference in its entirety:","\u201cFILTERING PROCESSOR REQUESTS BASED ON IDENTIFIERS,\u201d Slegel et al., Ser. No. 10\/436,361, filed herewith;","\u201cBLOCKING PROCESSING RESTRICTIONS BASED ON ADDRESSES,\u201d Slegel et al., Ser. No. 10\/435,361, filed herewith; and","\u201cINVALIDATING STORAGE, CLEARING BUFFER ENTRIES, AND AN INSTRUCTION THEREFOR,\u201d Slegel et al., Ser. No. 10\/435,919, filed herewith.","This invention relates, in general, to processing within a computing environment, and in particular, to blocking processing restrictions of the computing environment, such that processing can continue despite the restrictions.","The processing of a request by one processor of a computing environment may affect one or more other processors of the environment. For example, in a Symmetric Multiprocessor System (SMP) based on the z\/Architecture of International Business Machines Corporation, Armonk, N.Y., a broadcast purge operation, such as an Invalidate Page Table Entry (IPTE) instruction, requires entries of one or more buffers (e.g., Translation Lookaside Buffers (TLBs)) to be removed from the buffers in all processors of the environment. Furthermore, the architecture requires the buffers to be purged atomically, such that no processor can observe a new TLB entry, while some other processor observes an old entry. Many other computer architectures also provide a similar mechanism.","One common implementation for the broadcast purge operation includes the following: 1) all processors are quiesced (i.e., most normal processing operations are suspended, including accessing the TLB); 2) TLBs on all processors are purged of the appropriate entries; 3) the common resource is changed (e.g., a page table entry in storage for IPTE); and 4) finally, the quiesce is released and the processors continue their normal activities. Obviously, this implementation could have a major performance impact, especially for large SMP configurations, since all processors must be quiesced for the duration of the operation. In particular, it is common that one processor is executing some long running instruction that is not interruptible, so it cannot reach the quiesce state for some time. Thus, all other processors are required to wait for this last processor to reach the quiesce state before the steps described above can be completed.","Some strides have been made in the above processing to enhance performance. For example, in U.S. Pat. No. 6,119,219, entitled \u201cSystem Serialization With Early Release Of Individual Processor,\u201d Webb et al., Sep. 12, 2000, and U.S. Pat. No. 6,079,013, entitled \u201cMultiprocessor Serialization With Early Release of Processors,\u201d Webb et al., Jun. 20, 2000, each of which is hereby incorporated herein by reference in its entirety, a technique is described in which processors are potentially quiesced for a shorter period of time. For example, when a processor receives a request, it immediately quiesces and then purges the appropriate entries in its own TLB. After the purge is complete, this processor is allowed to continue processing subject to various restrictions. One of these restrictions includes that if the processor misses in its TLB, it is not permitted to perform address translation, but instead must stall until the quiesce is released. Only after the quiesce is released are all restrictions removed from the processors and processing can continue.","Thus, although attempts have been made to reduce the amount of time processors are stalled, enhancements are still needed. For example, a need exists for a capability that enables processing restrictions to be blocked, such that processing can continue, despite the restrictions.","The shortcomings of the prior art are overcome and additional advantages are provided through the provision of a method of facilitating processing of a computing environment. The method includes, for instance, determining whether address translation is to continue despite a restriction prohibiting address translation; and continuing with processing, in response to the determining.","In a further aspect of the present invention, a method of facilitating processing of a computing environment is provided. The method includes, for instance, obtaining, by a processing unit of the computing environment, an indication to stall processing, in response to a processing restriction; determining whether the processing restriction is to be blocked; and continuing processing, in response to the determining.","System and computer program products corresponding to the above-summarized methods are also described and claimed herein.","Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention.","In accordance with an aspect of the present invention, a capability is provided that enables processing within a computing environment to continue, despite a processing restriction indicating that processing is prohibited. As one example, address translation is allowed to be performed, subsequent to a buffer miss, although it is indicated as prohibited. A comparison of page indices, for instance, indicates whether the prohibition can be blocked.","One embodiment of a computing environment  incorporating and using one or more aspects of the present invention is described with reference to . Computing environment  is based, for instance, on the z\/Architecture offered by International Business Machines Corporation, Armonk, N.Y. The z\/Architecture is described in an IBM\u00ae publication entitled, \u201cz\/Architecture Principles of Operation,\u201d IBM Publication No. SA22-7832-00, December 2000, which is hereby incorporated herein by reference in its entirety. (IBM\u00ae is a registered trademark of International Business Machines Corporation, Armonk, N.Y., U.S.A. Other names used herein may be registered trademarks, trademarks or product names of International Business Machines Corporation or other companies.) In one example, a computing environment based on the z\/Architecture includes an eServer zSeries offered by International Business Machines Corporation, Armonk, N.Y.","As one example, computing environment  includes a central processor complex (CPC)  coupled to a controller . Central processor complex  includes, for instance, one or more partitions  (e.g., logical partitions LP\u2013LPn), one or more central processors  (e.g., CP\u2013CPm), and a hypervisor  (e.g., a logical partition manager), each of which is described below.","Each logical partition  is capable of functioning as a separate system. That is, each logical partition can be independently reset, initially loaded with an operating system, if desired, and operate with different programs. An operating system or application program running in a logical partition appears to have access to a full and complete computer system, but in reality, only a portion of it is available. A combination of hardware and Licensed Internal Code (commonly referred to as microcode) keeps a program in a logical partition from interfering with a program in a different logical partition. This allows several different logical partitions to operate on a single physical processor in a time sliced manner. In this particular example, each logical partition has a resident operating system , which may differ for one or more logical partitions. In one embodiment, operating system  is the z\/OS operating system offered by International Business Machines Corporation, Armonk, N.Y.","Central processors  are physical processor resources that are allocated to the logical partitions. For instance, a logical partition  includes one or more logical processors, each of which represents all or a share of a physical processor resource  allocated to the partition. The logical processors of a particular partition  may be either dedicated to the partition, so that the underlying processor resource is reserved for that partition; or shared with another partition, so that the underlying processor resource is potentially available to another partition.","Logical partitions  are managed by hypervisor  implemented by microcode running on processors . Logical partitions  and hypervisor  each comprise one or more programs residing in respective portions of central storage associated with the central processors. One example of hypervisor  is the Processor Resource\/Systems Manager (PR\/SM), offered by International Business Machines Corporation, Armonk, N.Y.","Controller , which is coupled to the central processor complex, includes centralized logic responsible for arbitrating between different processors issuing requests. For instance, when controller  receives a request, it determines that the requester is the master processor for that request and that the other processors are slave processors; it broadcasts messages; and otherwise, handles requests. One example of a controller is described in U.S. Pat. No. 6,199,219, entitled \u201cSystem Serialization With Early Release Of Individual Processor,\u201d Webb et al., Sep. 12, 2000, which is hereby incorporated herein by reference in its entirety. Further details are also described with reference to .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["200","201","200"]},"Controller  includes various controls including, for instance, system serialization controls . The system serialization controls are used to insure that operations that are to be serialized, such as Invalidate Page Table Entry (IPTE) instructions, are serialized, in that only one such instruction is in progress at one time in the computing environment. It also monitors the sequence of events for that operation.","Controller  is coupled to each central processor via various interfaces. For instance, an interface  is used by the Licensed Internal Code in a central processor to send \u201ccontrol\u201d commands to the controller, which specify an action to be taken, and to send \u201csense\u201d commands, which return information from the controller. Another interface is a response bus , which is used to return information from the controller for the \u201csense\u201d commands. The response bus is also used to communicate command status for \u201ccontrol\u201d commands, and may be set from a plurality of sources within the controller, including the system serialization controls. A central processor can use this interface to sense the state of the system serialization controls in controller .","A further interface is interface , which is used by the controller to send commands to each CPU. This may also be controlled from a plurality of sources within the controller, including system serialization controls . A yet further interface is interface , which provides signals to cache controls  of central processor . Cache controls  process commands, in response to the signals. In one example, cache controls  process commands that affect one or more buffers, such as Translation Lookaside Buffers (TLBs) , as described in further detail below.","In addition to cache controls , central processor  includes various other controls, including, for instance, interrupt controls  and execution controls . In response to particular events, interrupt controls  cause an internal interruption to be pending in the CPU, which in turn, causes execution controls  to suspend program instruction processing, at the next interruptible point. In response to the interruption, execution controls  invokes a Licensed Internal Code routine to set a broadcast operation allowed latch  to enable cache controls  to process pending commands.","Central processor  also includes a CPU quiesced latch  that indicates whether or not the central processor is quiesced.","The above described computing environment is only one example. Many variations are possible without departing from the spirit of the present invention. For example, one or more partitions can be running in different architecture modes. Further, as one example, the environment need not be based on the z\/Architecture, but instead, can be based on other architectures offered by Intel, Sun Microsystems, as well as others. Moreover, an environment may include an emulator (e.g., software or other emulation mechanisms), in which a particular architecture or a subset thereof is emulated. In such an environment, one or more emulation functions of the emulator can implement one or more aspects of the present invention, even though a computer executing the emulator may have a different architecture than the capabilities being emulated. As one example, in emulation mode, the specific instruction or operation being emulated is decoded, and an appropriate emulation function is built to implement the individual instruction or operation.","Individual processors execute instructions, as well as handle other processing. At times, the processing of a particular instruction places processing restrictions on the processing of one or more other processors of the computing environment. There are situations, however, when those restrictions may be ignored, in accordance with an aspect of the present invention. Thus, a processor may filter a processing restriction, and block (i.e., ignore) that restriction, in certain circumstances. This is described in further detail below.","One example described herein relates to the execution of an Invalidate Page Table Entry (IPTE) instruction. An instance of an Invalidate Page Table Entry instruction is described in an IBM\u00ae publication entitled, \u201cz\/Architecture Principles of Operation,\u201d IBM Publication No. SA22-7832-00, December 2000, which is hereby incorporated herein by reference in its entirety.","The Invalidate Page Table Entry instruction causes one or more processors to purge entries in a buffer relating to the instruction. For instance, each processor has associated therewith one or more buffers, referred to as Translation Lookaside Buffers (TLBs), located in the processor. The Translation Lookaside Buffers are used by a Dynamic Address Translation (DAT) mechanism to enhance performance, when translating virtual addresses to real addresses. That is, some of the information used by the Dynamic Address Translation mechanism is maintained in the buffers for faster access. For example, various information specified in region tables, segment tables and\/or page tables are maintained in the buffers.","To purge an entry in a buffer, processors within the environment are placed in a quiesce state, such that data is not corrupted. While in this quiesce state, restrictions are placed on those processors, indicating, for instance, that address translation cannot be performed, if there is a miss in their TLB. However, in accordance with an aspect of the present invention, this restriction can be filtered and ignored, such that processing may continue. This is described in further detail with reference to . In particular,  depicts one embodiment of the logic associated with an aspect of the present invention, and  provide further details for one particular example, in which an IPTE instruction is executed.","Initially, referring to , a processor executing within a computing environment becomes subject to processing restrictions, STEP . In one example, this occurs when the processor is placed in a quiesce state. In response to being placed in a quiesce state, the processor continues processing under certain restrictions. For example, the processor is to stall processing, if the processor misses in one or more of its TLBs.","The processor continues processing until it is faced with the restriction, STEP . For example, it continues processing until it misses in its TLB. Then, in accordance with an aspect of the present invention, a determination is made as to whether the processor can continue with the operation, despite the restriction, INQUIRY . That is, a decision is made as to whether the restriction can be blocked. In one example, this determination is made based on page indices. For instance, a comparison is made between a page index that is to be used for translation (e.g., address translation) and a page index previously saved by the processor. If the indices are equal, then processing is stalled, STEP . However, if the indices are unequal, then the operation can be performed, despite the restriction, STEP .","Further details relating to the processing of one or more aspects of the present invention are described with reference to . Although three processors are depicted, it is understood that any numbers of processors can be used. Referring to , a processor  executing an instruction  (e.g., an IPTE instruction) issues a broadcast request  (e.g., a quiesce request) as part of processing the instruction. The request is forwarded, in this example, to a controller . The processor issuing the request is referred to herein as the master processor, and the other processors are referred to as slave processors. The processors are coupled to controller .","In response to controller  receiving a request of a broadcast nature from the master processor, the controller forwards the request () to the slave processors. The processors process the request in an appropriate manner, which depends on, for example, the current state of the processors.","For example, as depicted in , CP is executing a long running instruction (), and thus, does not respond to the quiesce request at this time and the quiesce request remains pending for CP. On the other hand, CP responds to the controller that has reached a quiesce point (), and it performs an operation associated with the quiesce request. This operation includes purging entries from one or more of its TLBs (). Additionally, in accordance with an aspect of the present invention, CP saves at least a portion of the page index of the request for later use (). In one example, a page index is an offset of a given page table entry from the origin of the page table, and 4\u20136 bits of the page index are saved. However, in other examples, other numbers of bits, including the entire page index, may be saved.","Since CP indicated to the controller that it has reached a quiesce point, in one embodiment, the controller sets a signal for the processor (see ). This signal is, for instance, a block translations (blk_xlat) signal () indicating that the slave processor is not permitted to continue in the event of a TLB miss. That is, the slave processor is signaled that it is not permitted to perform DAT translations in the event of a TLB miss. However, in accordance with an aspect of the present invention, further processing is performed to determine if the signal can be ignored.","For example, when CP misses in its TLB (e.g., there is no entry in the TLB corresponding to the virtual address to be translated), it attempts to perform Dynamic Address Translation. During Dynamic Address Translation, it compares at least a portion of the page index of the page it is to access with the saved page index it has from the broadcast IPTE operation. If they do not match, then the processor is allowed to continue translation and resume normal execution. For example, the processor can continue using parts of the virtual address and\/or other information to index into tables to obtain information usable in forming the real address. Further, as part of normal execution, the processor completes this instruction, as well as processes other instructions.","However, if they do match, then the processor stalls and waits for the blk_xlat signal to drop. (In one example, comparisons are performed at one or more steps during the translation, and processing continues or stalls, in response to the comparisons.)","With reference to , it is shown that CP is continuing to execute instructions under the restrictions described above. These restrictions continue until the blk_xlat signal () drops. Further, it is shown that CP has finally finished its long running instruction and is able to take the quiesce interrupt. Thus, CP responds back to the controller that it is at a quiesce point (). Further, it purges its TLB of appropriate entries associated with the broadcast IPTE operation and saves at least a portion of the page index for later use ().","In response to the controller receiving the quiesce indication from CP, the controller sets the blk_xlat signal for CP (), and CP is now under the same restrictions that CP has been under. Additionally, the controller responds to the quiesce master processor, CP, that the last processor in the system has reached the quiesce point, and the system is placed in a quiesce state ().","Since the system is in a quiesce state, the master processor invalidates the appropriate page table entries in storage (\u2014). In one example, this includes turning on an invalid bit in one or more page table entries in storage. In response to the master processor completing the invalidation of the appropriate page table entries, it sends a signal to the controller indicating to release the quiesce (). Meanwhile, CP and CP continue normal execution subject to the limitations ().","In response to the controller receiving the release indication, the controller releases the quiesce, and CP, CP and CP resume normal execution (\u2014) with no limitations. The blk_xlat signals that were previously active from the controller are no longer active.","Described in detail above is a capability that enables restrictions to be blocked (i.e., ignored) under certain conditions. This advantageously reduces the amount of quiesce stall time of processors and enhances system performance. This performance enhancement can be seen in many environments, including large SMP environments. For instance, one or more capabilities of the present invention improve on system performance, as follows. Previously for a 16-way SMP system, 10% of all time could be spent on quiescing the system and being stalled waiting for blk_xlat to drop. This performance degradation would increase at a rate roughly proportional to the square of the number of processors in an SMP system. This is significantly reduced by using one or more aspects of the present invention.","Although the above example is described with reference to an IPTE instruction, one or more aspects of the present invention are applicable to other instructions, including those that are similar or equivalent to the above instruction in the same architecture or different architectures. In one example, one or more aspects of the present invention are applicable to an IDTE instruction, which is described in a U.S. application entitled \u201cInvalidating Storage, Clearing Buffer Entries, and An Instruction Therefor,\u201d Slegel et al., filed herewith, which is hereby incorporated herein by reference in its entirety.","Many variations to the above embodiment are possible without departing from the spirit of the present invention. For example, one or more aspects of the present invention are equally applicable to, for instance, virtual machine emulation, in which one or more pageable entities (e.g., guests) execute on one or more processors. As one example, pageable guests are defined by the Start Interpretive Execution (SIE) architecture, one example of which is described in an IBM\u00ae publication entitled, \u201cIBM System\/370 Extended Architecture,\u201d IBM Publication No. SA22-7095 (1985), which is hereby incorporated herein by reference in its entirety. In this example, both the host and guest are operating in a virtual addressing environment, and the translation tables (e.g., page and segment tables) for the guest are stored at virtual addresses in the host that are to be translated. That is, the page table entries themselves are virtual addresses that are to be translated to real addresses in the manner described herein. Thus, comparison of the page indices are performed, in one example, at each level of translation.","Although the above example is described with reference to SIE and the z\/Architecture, one or more aspects of the present invention are equally applicable to other architectures and\/or environments employing pageable entities or similar constructs.","In addition to the above variations, one or more aspects of the present invention are applicable to environments having mixed architecture modes. For example, in a logically partitioned environment, one physical processor can be executing code in one architecture mode, while another physical processor is executing code in another architecture mode. Additionally, one or more partitions can be executing pageable entities. A mixed architecture mode may alter the above processing, as indicated in the following table:",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Architecture Mode Of","Architecture Mode","Action On Slave"]},{"entry":[{},"Master Processor","Of Slave Processor","Processor"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ESA\/390","ESA\/390","No blocking"]},{"entry":[{},"ESA\/390","z\/Architecture","Blocking possible"]},{"entry":[{},"z\/Architecture","ESA\/390","No blocking"]},{"entry":[{},"z\/Architecture","z\/Architecture","Blocking possible"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"In the above table, when the action on the slave processor indicates no blocking, then the restriction is not ignored and the blk_xlat signal is honored. However, in those situations where it indicates that blocking is possible, then the restriction may be blocked, as determined in accordance with an aspect of the present invention.","The various modes of architecture described above are only examples. Other architecture modes and\/or mixed architecture modes may be supported without departing from the spirit of the present invention.","Moreover, the various embodiments described above are just examples. There may be many variations to these embodiments without departing from the spirit of the present invention. For instance, although a logically partitioned environment is described herein, this is only one example. Aspects of the invention are beneficial to many types of environments, including other environments that have a plurality of zones, and non-partitioned environments. Further, there may be no central processor complexes, but yet, multiple processors coupled together. Yet further, one or more aspects of the invention are applicable to single processor environments.","Although a particular environment is described herein, again, many variations to this environment can be implemented without departing from the spirit of the present invention. For example, if the environment is logically partitioned, then more or less logical partitions may be included in the environment. Further, there may be multiple central processing complexes coupled together. These are only some of the variations that can be made without departing from the spirit of the present invention. Additionally, other variations are possible. For example, although the controller described herein serializes the instruction so that one broadcast instruction executes at one time, in another embodiment, multiple instructions may execute at one time. Further, the environment may include multiple controllers. Yet further, multiple quiesce requests (from one or more controllers) may be concurrently outstanding in the system. In that scenario, multiple page indices are saved and multiple comparisons are performed. Additional variations are also possible.","Advantageously, one or more aspects of the present invention can be used to increase performance, along with one or more aspects of one or more other inventions, which are described in a U.S. Patent Application, entitled \u201cFiltering Processor Requests Based On Identifiers,\u201d Slegel et al., (IBM Docket No. POU920030047US1) filed herewith; and a U.S. Patent Application, entitled \u201cBlocking Processing Restrictions Based On Addresses,\u201d Slegel et al. (IBM Docket No. POU920030049US1) filed herewith, each of which is hereby incorporated herein by reference in its entirety.","As used herein, the term \u201cprocessing unit\u201d includes pageable entities, such as guests; processors; emulators; and\/or other similar components. Moreover, the term \u201cby a processing unit\u201d includes on behalf of a processing unit. The term \u201cobtaining\u201d includes, but is not limited to, receiving, having, being provided, receiving an indication of, etc. Yet further, the term \u201cbuffer\u201d includes an area of storage, as well as different types of data structures, including, but not limited to, arrays. Further, although the term \u201ctable\u201d is used herein, this term is to cover various other data structures. The terms, buffer and table, are not meant to be limiting to specific types of data structures.","The capabilities of the present invention can be implemented in software, firmware, hardware, or some combination thereof.","One or more aspects of the present invention can be included in an article of manufacture (e.g., one or more computer program products) having, for instance, computer usable media. The media has embodied therein, for instance, computer readable program code means or logic (e.g., instructions, code, commands, etc.) to provide and facilitate the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.","Additionally, at least one program storage device readable by a machine embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.","The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps (or operations) described therein without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted or modified. All of these variations are considered a part of the claimed invention.","Although preferred embodiments have been depicted and described in detail herein, it will be apparent to those skilled in the relevant art that various modifications, additions, substitutions and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The subject matter which is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The foregoing and other objects, features, and advantages of the invention are apparent from the following detailed description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
