---
title: Software title discovery
abstract: In a computer system that has no single place to discover all installed software applications, a software title discovery technique uses a combination of techniques to discover installed software. One of the combined techniques is an operating system predefined interface for obtaining information about installed software application; other techniques that may be employed include searching a repository of uninstall information, searching for executable files in a portion of a filesystem for the computer, and searching for executable files pointed to by other files in the filesystem of the computer system. A client/server configuration may be employed to allow collection of the software application information across a network of computers in an enterprise by a server computer system, allowing the server system to provide reports regard installed software applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08346752&OS=08346752&RS=08346752
owner: BMC Software, Inc.
number: 08346752
owner_city: Houston
owner_country: US
publication_date: 20090923
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional Application Ser. No. 61\/149,629 entitled \u201cSoftware Title Discovery on Windows Platform\u201d filed Feb. 3, 2009 and which is incorporated by reference in its entirety herein.","This disclosure relates generally to the field of computer software. More particularly, but not by way of limitation, it relates to techniques for discovering installed software applications on a computer system.","Identifying installed applications on a computer running a Microsoft WINDOWS\u00ae (WINDOWS is a registered trademark of the Microsoft Corporation) platform is challenging because there is no single place where all of the installed applications can be discovered. Applications are not installed in a standard manner and certain components that are part of the operating system look like applications. These challenges surface because software vendors (including Microsoft) do not follow a standard approach to installing software on a WINDOWS platform.","Not all installed applications can be fetched by running a Windows Management Instrumentation (WMI) query. Not all applications are installed using a Windows Installer (previously known as Microsoft Installer or MSI). Shortcuts are created on the Desktop or the Start Menu Programs folder for applications that have a graphical user interface (GUI), but some applications do not have a shortcut at all. The Sun Microsystems Sun JAVA\u00ae SE Development Kit (JDK) is an example for this type. (JAVA is a registered trademark of Sun Microsystems, Inc.) Most of the applications are installed under the \u201cProgram Files\u201d folder by default; however, some applications are installed elsewhere. The ORACLE\u00ae client is an example for this type. (ORACLE is a registered trademark of Oracle Corporation.) The installation information for applications is left in multiple places: the registry, folders, WMI, etc.","Not only do standard tools not identify all applications, they identify as applications software titles that are not applications. An entry is added in the \u201cAdd\/Remove Programs\u201d applet under \u201cControl Panel\u201d for an installed application. Some entries are added for things other than applications, however, including drivers, updates, and patches applied to the operating system. Therefore identifying installed applications can be challenging.","Other techniques for discovering applications also have shortcomings. For example, shortcuts appear in the \u201cStart Menu Programs\u201d menu for components that are part of the operating system, such as the games \u201cPinball\u201d and \u201cSolitaire.\u201d","In summary, applications installed on a WINDOWS platform do not follow a common paradigm to be able to consolidate a report of what is installed on the box. Software for software title discovery is available from a number of vendors. Examples of such discover software include: BMC Discovery Scanner from BMC Software; Belarc Advisor from Belarc, Inc.; zCI Computer Inventory System, Magnicomp Sysinfo from Magnicomp; iInventory, from iInventory Software; and the OCS Inventory NG system. Previous attempts at doing WINDOWS software discovery either resulted in too much information (a low signal-to-noise ratio), or too little (applications are installed, but not discovered). In addition, previous attempts at software discovery often caused a significant drain on the resources of the computer being scanned, particularly in implementations that do a complete disk scan looking for executables.","In one embodiment, a method of discovering software applications installed on a computer is disclosed. The method comprises performing a first software application search on the computer system, creating a first set of discovered software application information and performing a second software application search on the computer system, creating a second set of discovered software application information. The first set of discovered software application information and the second set of discovered software application information are then merged, creating a merged set of discovered software application information. The merged set of discovered software application information is then stored. The first software application search employs an operating system defined interface for obtaining software application information.","In another embodiment, a computer readable medium is disclosed. The medium has instruction stored on it that when executed cause the processor of a client computer to perform the method described above.","In another embodiment, a networked computer system is disclosed. The system comprises a server computer and a plurality of client computers. At least one of the client computers is programmed to perform at least a portion of the method described above, and the entire method is performed collectively by the server computer and the plurality of client computers.","In a second embodiment, a method of discovering software applications is disclosed. The method comprises a server computer requesting a client computer to perform software application discovery and receiving a client software application information by the server computer. The server stores the client software application information and generating reports based on the client software application information. The client software application information is derived from a plurality of sources on the client computer that comprise an operating system defined interface for obtaining installed software application information, and another source for obtaining installed software application information.","In another embodiment, a computer readable medium is disclosed. The medium has instruction stored on it that when executed cause the processor of a client computer to perform the method described above.","Although the discussion below is set forth in terms of computers running one of the Microsoft WINDOWS operating systems, the present invention is not limited to such computers and operating systems. Instead, the present invention is applicable to any computing device capable of installing applications, and in particular, computing devices where information regarding installed applications is stored in more than one location or in more than one way. A software title, as used herein, means a software application that can be identified by name or other attributes.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1","FIG. 1"],"b":["70","100","120"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1"],"b":["200","210"]},"Referring now to , an example computing device  capable of running a WINDOWS operating system is shown. Example computing device  comprises a programmable control device  which may be optionally connected to an input device or system  (e.g., keyboard, mouse, touch screen, etc.) and display . A program storage device (PSD)  (sometimes referred to as a hard disc) is included with the programmable control device . Also included with programmable control device  is a network interface  for communication via a network with other computing and corporate infrastructure devices (not shown). Network interface  may be included within programmable control device  or be external to programmable control device . In either case, programmable control device  will be communicatively coupled to network interface . Program storage device  represents any form of non-volatile storage including, but not limited to, all forms of optical and magnetic storage elements including solid-state storage, and may be included within programmable control device  or be external to programmable control device . Program storage device  may be used for storage of software to control programmable control device , data for use by the endpoint computer system , or both.","Programmable control device  may be programmed to perform methods in accordance with this disclosure (examples of which are in ). Programmable control device  comprises a processing unit (PU) , input-output (I\/O) interface  and memory . Processing unit  may include any programmable controller device including, for example, one or more members of the Intel Core\u00ae, Pentium\u00ae and Celeron\u00ae processor families from the Intel and the Cortex and ARM processor families from ARM. (INTEL, CORE, PENTIUM, and CELERON are registered trademarks of the Intel Corporation. CORTEX is a registered trademark of the ARM Limited Corporation. ARM is a registered trademark of the ARM Limited Company.) Memory  may include one or more memory modules and comprise random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), programmable read-write memory, and solid-state memory. One of ordinary skill in the art will also recognize that PU  may also include some internal memory including, for example, cache memory.","Computing device  can act as either a server or a client, or both.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4","b":["410","410"]},"After the results from the discovery techniques of block  are obtained, then in one embodiment the results are combined and filtered again in block  by a filtration technique that is common across all discovery techniques.","In block , the combined and filtered results are reconciled with each other to attempt to eliminate duplicate results by merging duplicate entries. Because each of the discovery techniques of block  may identify the same software application in a different form, the results are not compared as a whole, but a predefined set of rules are employed to merge results that refer to the same software application.","The reconciled results are then stored in block . In one embodiment, the results are stored in a configuration management database associated with a configuration management server, as discussed in more detail below. In another embodiment, the results are stored on the computing device  executing the software title discovery software. Typically, reporting software (not described further herein) may be used to provide reports based on the software title discovery technique, either for a user of the computing device  executing the software title discovery software, or for a user of an enterprise configuration management software that collects and aggregates information from multiple computing devices  deployed by an enterprise.","In one embodiment, five discovery attempts are performed in block , as illustrated in : WMI queries (), Add\/Remove Program examination (); a search for executables in the Program Files folders (); a search for executables linked by shortcuts (), and an examination of Thinapps (). These discovery attempts are illustrative and by way of example only, and other discovery attempts can be used. In each of the discovery attempts illustrated in , embodiments collect attribute information about the discovered software. In one embodiment, the collected attributes include the software's name, current version, manufacturer, globally unique identifier (GUID), install location, install date, and label, and the file name(s) of the associated executables. The list of collected information is illustrative and by way of example only, and other information may be collected as desired. Not all of the attributes may be available for every software application discovered, and not every discovery technique may result in the collection of all of the desired attributes.","Microsoft defines a standard operating system interface for software title discovery, as part of Windows Management Instrumentation (WMI). As discussed previously, Microsoft defines a process for installing applications using an MSI installer. Programs installed through an MSI installer are registered to the operating system, typically in a WMI data repository. In one embodiment, the WMI class PRODUCT is queried in block  to get the list of applications registered to the WMI. Applications that are installed using MSI installers are discovered from this source. WMI is not always available, however. For example, in certain older WINDOWS platforms, WMI is not enabled by default. In another example, on some computing devices , the WMI repository could be corrupt. If WMI is not enabled or the WMI repository is corrupt, another Microsoft standard interface, the Windows Application Programming Interface (API), often referred to as the Win32 API, may be used as an alternate approach to obtain the list of programs installed by an MSI installer.","In one embodiment, no technique specific filter is used to filter the results of the WMI query. In other embodiments, the MSI-installed program list produced by the WMI query may be filtered to eliminate operating system components or other similar software that are not considered software applications to be discovered.","In block , a second software discovery search is performed, using the WINDOWS registry. The registry is a hierarchical database that contains data that is critical for the operation of Windows and the applications and services that run on Windows. The data is structured in a tree format. Each node in the tree is called a key. Each key can contain both subkeys and data entries called values. Sometimes, the presence of a key is all the data that an application requires; other times, an application opens a key and uses the values associated with the key. A key can have any number of values, and the values can be in any form.","Application installers may create an uninstall command string in the WINDOWS registry to be able to uninstall the application. These applications typically store the uninstall information in the Windows registry hive identified as HKEY_LOCALMACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall. A hive is a logical group of keys, subkeys, and values in the registry that has a set of supporting files containing backups of its data. Examination of the information contained in the Uninstall hive may identify other software applications.","On 64-bit computing devices , the Uninstall hive is typically found at HKEY_LOCALMACHINE\\SOFTWARE\\wow6432Node Microsoft\\Windows\\CurrentVersion\\Uninstall, hence, in one embodiment, both locations are examined.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6","b":["610","620","630","640","650","660","680","670"]},"In one embodiment, the results from the Uninstall hive search are collected and passed through a series of technique-specific filters to remove entries that are updates to the operating system or are part of the operating system. Each filter removes from the results any information that matches the filter. In one embodiment, the series of filters includes the following:","(1) Is the DisplayName property is empty?","(2) Is the SystemComponentattribute set to 1?","(3) Does the InstallLocation property start with the path to the WINDOWS operating system folder obtained using the Win32 API, typically C:\\Windows?","(4) Is the Release Type attribute \u201cupdate\u201d or \u201chotfix\u201d?","(5) Is the DisplayName attribute \u201cSecurity Update,\u201d \u201cHotfix,\u201d or \u201cService Pack\u201d?","(6) Is the ParentKeyName attribute empty and the Publisher attribute \u201cMicrosoft\u201d?","(7) Is the Publisher attribute \u201cMicrosoft,\u201d does the DisplayName attribute contain \u201cWindows,\u201d and does the HelpLinkattribute contain \u201ckbid\u201d?","(8) Does the registry node name start with \u201cKB\u201d and does a number extracted from one of the Name, DisplayName, or Helplink attributes match with the other two attributes?","If any of these filters matches a result obtained from the Uninstall hive, then that result is eliminated. The preceding list of filters is illustrative and by way of example only, and other filters and ordering of filters can be used.","Returning to , in block  the Program Files folder is examined for additional software titles. Every application folder under the Program Files folder is analyzed to collect executables. The Program Files folder is located using the Windows API, and is typically \u201cC:\\Program Files.\u201d The header properties of the collected executables are then examined to determine the name of the software title. One embodiment of this Program Files examination is illustrated in .","First, in block , the software title discovery scanner identifies the root install location of the application under the Program Files folder. If there are files found in an application folder, it is considered the root for that application. Otherwise, every folder under this folder becomes a root. For example, \u201cC:\\Program File\\WinZip\u201d is the root folder for the WINZIP\u00ae application from Winzip International LLC. In another example, applications like Microsoft Office have multiple application roots under the \u201cC:\\Program Files\\Office\u201d folder. In that example, every folder is considered as a separate application root folder.","Second, in block , information is collected about all of the executables under the root install location. Until a file is found, the folder tree is traversed recursively from the root folder. Once a file is found, the discovery process continues to collect executables from that folder and from up to three levels of subfolders. The traversal of the tree returns any time an executable is found. This may, and frequently does, collect a plurality of executables.","Third, the discovery process analyzes the header properties of the collected executables to determine the attributes for creating a software title result, as illustrated in blocks - of . In block , if there is only one executable found, read the header properties to create the software title result in block . In block , compare the header properties of all of the executables to see whether they are similar; if a match is found, create a software title result from the header properties in block .","In block , if an executable is linked to a registry entry in the location \u201cHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\u201d and that entry is the only executable linked to that entry, read the header properties to create a software title result in block . In block , if an executable is linked to a shortcut and this is the only executable so linked, then read the header properties to create a software title result in block . In block , match the header properties of the executables to the application folder name. If a match is found, read the header properties to create the software title result in . If all of the above steps fail, in block  create a software title result using the folder name as the software title's name.","In one embodiment, no technique-specific filters are applied to the results of the Program Files examination process of block .","Returning to , another technique for software discovery may be performed in block . The shortcuts (*.Ink files) found in the \u201cStart Menu Programs,\u201d \u201cDesktop,\u201d and \u201cQuick Launch Toolbar\u201d for all the users defined by the computer device  is parsed to determine the executable pointed to by the shortcut. The executable header properties are then fetched and Software Title entries may be created for every unique \u201cProduct Name.\u201d","The Software Title entry created from the \u201cStart Menu Programs\u201d shortcuts additionally contains a label attribute. The value for this label comes from the \u201cStart Menu Programs\u201d folder.","In one embodiment, no technique-specific filters are applied to the results of the Shortcut examination of block .","Another possible technique that may be used to find installed applications is to search for ThinApps in block . Thinapps are virtualized applications, which are packaged in such a way that the application can be installed by storing a single executable file on the computer device 's file system, which internally contains the operating environment for the application. There are multiple vendors of ThinApps, each of which provide a vendor-specific way of virtualizing the software application into the packaging file. In block , the software title discovery process may interrogate the ThinApp file to determine the software application that is virtualized in the ThinApp using vendor-specific techniques. If any ThinApps are found, the collected information regarding the virtualized software application may be added to the results from the examinations of blocks - described above.","The above techniques for locating and identifying software applications are illustrative and by way of example only, and other techniques and combinations of techniques can be used as desired. While the operating system vendor predefined software title discovery technique of block , is always used in operating systems where such a technique is provided by the operating system vendor, the secondary techniques of blocks - may not be invoked in every situation.","After software title discovery has been performed as illustrated in  and discussed above, then a common filter may be applied to the results to eliminate noise.","In one embodiment, illustrated in , the results obtained from the multiple discovery techniques are collated by the software title's name, then any software titles that were removed by any of the technique specific filters may be removed from the combined results. Otherwise, an entry marked as noise by one technique-specific filter might be captured again using a different discovery technique and not filtered by that technique.","In blocks -, two filters are applied in one embodiment to the combined results of all of the software title discovery techniques. If the name of the software title is missing, as determined in block , the software title may be filtered out in block . In block , an effort may be made to filter out system components, by checking if the publisher of the software is Microsoft, and the name of the software is \u201cOperating Sys,\u201d \u201cMovie Maker,\u201d \u201cMedia Player,\u201d \u201cDriver,\u201d or \u201cupdate.\u201d If so, in block  the title is filtered out of the collated results.","Because the software title discovery techniques described above are performed independently, using different data sources that may have overlapping contents, the collated results, even after filtering, may have duplicate entries.  is a flowchart illustrating one embodiment of the reconciliation technique of block  of .  illustrates the application of two reconciliation rules. The reconciliations rules of  are illustrative and by way of example only, and other reconciliation rules can be used as desired.","In block , the reconciliation technique  employs a first rule that compares the GUIDs of two candidate results for merger. If GUIDs are available for both software title results, and both GUIDs are the same, then merge the two results in block . If the GUIDs are different, then do not merge the two results, and bypass any other reconciliation rule processing, because the GUID difference is strong enough to show the two results are not reconcilable and should not be merged.","If the first rule does not determine whether to merge the two results, then a second rule  is employed. First, in block , the names of two candidates for merger are compared. If the names match, in block , compare the installation locations. If the installation locations match, then in block  merge the software title entries. If the names do not match, then in block , the reconciliation technique eliminates elements often found in software titles, such as version numbers and words or phrases such as \u201calpha,\u201d \u201cbeta,\u201d etc. If the names match after eliminate those common elements, then in block  merge the software titles. If not, then in block , eliminate the manufacturer from the name if present, and redo the comparison. If the names now match, in block  compare the installation locations and merge the software titles in block  if the installation locations match. Otherwise, the two software titles are not matched with this rule.","If the second rule does not result in the merger of the two software titles, a third rule may be applied in one embodiment, as illustrated in . Blocks - correspond to blocks - of  and are therefore not described again. In this rule, however, if the installation location does not match, the comparison is relaxed to shrink the path in block  until the two installation paths match. If the paths cannot be shrunk to match, the titles cannot be merged. If the relaxed path matching of block  is successful, then the version attributes of the two software titles are compared in block . If the version attributes match, then the software titles may be merged in block . Otherwise, the software titles are not matched with this third rule.","By filtering out noise, both in the technique-specific filters and the common filters of , as well as by merging software titles that can be reconciled by the rules of , embodiments of the software title discovery technique may provide improved results over the prior art techniques, both including software titles that would not have otherwise been discovered, and eliminating unwanted or duplicate information.","Software title discovery may be useful for individual computing devices , but may be particularly valuable to an enterprise trying to monitor usage of software across large numbers of computer devices .  is a block diagram illustrating a system  for employing the software discovery techniques described above across the enterprise according to one embodiment. In a server , a configuration management server software  causes a configuration management client software  to perform the software title discovery techniques described above in a client computing device . The client software  passes the results of the software title discovery to the configuration management server software , which then stores the results in a configuration management database  that is operatively coupled to the server . A user of the configuration management server software  may then prepare reports on software title installation across multiple clients , allowing management of software titles across the enterprise or portions thereof. This may assist an enterprise in numerous ways, including managing its licenses for software.","In systems such as the one illustrated in , some of the software title discovery process illustrated in  may be performed on the client , and some of the process may be performed on the server . For example, in one embodiment, the software title discovery actions of block  may be performed on the client , and the filtering, reconciliation, and storing of blocks - may be performed on the server . In other embodiments, all of blocks - may be performed on the client , and the stored results also transmitted to the server  for storage in the database .","Aspects of the invention are described as a method of control or manipulation of data, and may be implemented in one or a combination of hardware, firmware, and software. Embodiments of the invention may also be implemented as instructions stored on a machine-readable medium, which may be read and executed by at least one processor to perform the operations described herein. A machine-readable medium may include any mechanism for tangibly embodying information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium (sometimes referred to as a program storage device or a computer readable medium) may include read-only memory (ROM), random-access memory (RAM), magnetic disc storage media, optical storage media, flash-memory devices, electrical, optical, and others.","Various changes in the details of the illustrated operational methods are possible without departing from the scope of the following claims. For instance, illustrative flowchart steps or process steps of  may perform the identified steps in an order different from that disclosed here. Alternatively, some embodiments may combine the activities described herein as being separate steps. Similarly, one or more of the described steps may be omitted, depending upon the specific operational environment in which the method is being implemented. In addition, acts in accordance with  may be performed by a programmable control device executing instructions organized into one or more program modules. A programmable control device may comprise a single computer processor, a special purpose processor (e.g., a digital signal processor, \u201cDSP\u201d), a plurality of processors coupled by a communications link or a custom designed state machine. Custom designed state machines may be embodied in a hardware device such as an integrated circuit including, but not limited to, application specific integrated circuits (\u201cASICs\u201d) or field programmable gate array (\u201cFPGAs\u201d). Storage devices, sometimes called computer readable media, suitable for tangibly embodying program instructions include, but are not limited to: magnetic disks (fixed, floppy, and removable) and tape; optical media such as compact disc read-only memory devices (CD-ROMs) and digital versatile discs (\u201cDVDs\u201d); and semiconductor memory devices such as Electrically Programmable Read-Only Memory (\u201cEPROM\u201d), Electrically Erasable Programmable Read-Only Memory (\u201cEEPROM\u201d), Programmable Gate Arrays and flash devices.","It is to be understood that the above description is intended to be illustrative, and not restrictive. For example, the above-described embodiments may be used in combination with each other. Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of the invention therefore should be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled. In the appended claims, the terms \u201cincluding\u201d and \u201cin which\u201d are used as the plain-English equivalents of the respective terms \u201ccomprising\u201d and \u201cwherein.\u201d"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIGS. 7-10","FIG. 4"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
