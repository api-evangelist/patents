---
title: Hosted storage locking
abstract: A hosted storage system receives a request from a requester to access a hosted resource. The hosted resource includes a binary large object. The hosted storage system providing hosted storage to a plurality of clients that are coupled to the hosted storage system. A copy of the hosted resource is created. A copy message including the copy of the hosted resource is provided to the requester. The hosted resource is maintained in the hosted storage system while the requester modifies the copy of the hosted resource. A message is received from the requester. The messages include a modified copy of the hosted resource. It is determined that the hosted resource has not been modified since the copy of the hosted resource was created. The hosted resource is replaced with the modified copy of the hosted resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09002790&OS=09002790&RS=09002790
owner: Google Inc.
number: 09002790
owner_city: Mountain View
owner_country: US
publication_date: 20110914
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This document relates to hosted storage.","Hosted, or cloud-based storage, refers to off-site or remote data storage that is typically provided by a third party. The third party may implement the hosted storage in a data center, and provide access to the hosted storage over a network, such as the Internet.","In one aspect, a method is performed by one or more processors. The method includes receiving, at a hosted storage system, a request from a requester to access a hosted resource. The hosted resource includes a binary large object. The hosted storage system providing hosted storage to a plurality of clients that are coupled to the hosted storage system. The method further includes creating a copy of the hosted resource. The method further includes providing a copy message includes the copy of the hosted resource to the requester. The method further includes maintaining the hosted resource in the hosted storage system while the requester modifies the copy of the hosted resource. The method further includes receiving a message from the requester. The messages include a modified copy of the hosted resource. The method further includes determining that the hosted resource has not been modified since the copy of the hosted resource was created. The method further includes replacing, in response to the determining and in the hosted storage system, the hosted resource with the modified copy of the hosted resource. The request from a requester, the copy message, and the message from the requester are Hypertext Transfer Protocol messages.","Implementations can include any, all, or none of the following features. The method further includes providing includes providing a version indicator of the hosted resource to the requester for modification. The method further includes receiving the modified copy of the hosted resource includes receiving the provided version indicator. The method further includes determining includes comparing the provided version indicator with a current version indicator of the hosted resource. The method further includes replacing includes incrementing the version indicator. The version indicator includes a plurality of values, each value associated with a version of the hosted resource or a metadata value associated with the hosted resource. Comparing the provided version indicator with a current version indicator of the hosted resource includes comparing a subset of the plurality of values of the provided version indicator with a subset of the plurality of values of the current version indicator. The hosted storage system includes a datastore configured to store hosted resources; a metadata store configured to store metadata related to hosted resources, the metadata including access control lists; and an interface configured to receive the request from a requester to access a hosted resource, to provide the copy message to the requester, and to receive the message from the requester including a modified copy of the hosted resource. The determining and the replacing are performed as part of a single operation. The method further includes receiving, at the hosted storage system and before the replacing, a second request from a second requester to access a hosted resource. The method further includes creating a second copy of the hosted resource. The method further includes providing a copy of the hosted resource to the second requester for modification. The method further includes receiving a second modified copy of the hosted resource, the second modified copy created by the second requester. The method further includes determining that the hosted resource has been modified since second copy of the hosted resource was created. The method further includes providing, to the second requester, a modification rejection message. The method further includes modifying a portion of the hosted resource; and wherein the modification rejection message indicates modified portion of the hosted resource.","In one aspect, a method is performed by one or more processors. The method includes receiving, at a hosted storage system, a request from a requester to access a hosted resource, the hosted storage system providing hosted storage to a plurality of clients that are coupled to the hosted storage system. The method further includes creating a copy of the hosted resource. The method further includes providing a copy message includes the copy of the hosted resource and a version indicator of the hosted resource to the requester, the version indicator includes a plurality of values, each value associated with a version of the hosted resource or a metadata value associated with the hosted resource. The method further includes maintaining the hosted resource in the hosted storage system while the requester modifies the copy of the hosted resource. The method further includes receiving a message from the requester includes a modified copy of the hosted resource and the provided version indicator. The method further includes determining that the hosted resource has not been modified since the copy of the hosted resource was created by comparing the provided version indicator with a current version indicator of the hosted resource. The method further includes replacing, in response to the determining and in the hosted storage system, the hosted resource with the modified copy of the hosted resource. The method further includes incrementing, in response to the determining and in the hosted storage system, the version indicator.","In one aspect, a computer system includes a hosted storage system configured to provide hosted storage to a plurality of clients that are coupled to the hosted storage system. The hosted storage system is further configured to receive a request from a requester to access a hosted resource. The hosted resource includes a binary large object. The hosted storage system is further configured to create a copy of the hosted resource. The hosted storage system is further configured to provide a copy message that includes the copy of the hosted resource to the requester. The hosted storage system is further configured to maintain the hosted resource in the hosted storage system while the requester modifies the copy of the hosted resource. The hosted storage system is further configured to receive a message from the requester that includes a modified copy of the hosted resource. The hosted storage system is further configured to determine that the hosted resource has not been modified since the copy of the hosted resource was created. The hosted storage system is further configured to replace, in response to the determining and in the hosted storage system, the hosted resource with the modified copy of the hosted resource. The system further includes a requestor configured to provide to the hosted storage system the request. The requestor is further configured to receive from the hosted storage system the copy message. The requestor is further configured to modify the copy of the hosted resource. The requestor is further configured to provide to the hosted storage system the message. The request from a requester, the copy message, and the message from the requester to access a hosted resource are Hypertext Transfer Protocol messages.","Implementations can include any, all, or none of the following features. Providing the copy message includes providing a version indicator of the hosted resource to the requester for modification. Receiving the modified copy of the hosted resource includes receiving the provided version indicator; determining includes comparing the provided version indicator with a current version indicator of the hosted resource. Replacing includes incrementing the version indicator. The version indicator includes a plurality of values, each value associated with a version of the hosted resource or a metadata value associated with the hosted resource. Comparing the provided version indicator with a current version indicator of the hosted resource includes comparing a subset of the plurality of values of the provided version indicator with a subset of the plurality of values of the current version indicator. The hosted storage system includes a datastore configured to store hosted resources; a metadata store configured to store metadata related to hosted resources, the metadata including access control lists; and an interface configured to receive the request from a requester to access a hosted resource, to provide the copy message to the requester, and to receive the message from the requester including a modified copy of the hosted resource. The determining and the replacing are performed as part of a single operation. The hosted storage system is further configured to receive, at the hosted storage system and before the replacing, a second request from a second requester to access a hosted resource; create a second copy of the hosted resource; provide a copy of the hosted resource to the second requester for modification; receive a second modified copy of the hosted resource, determine that the hosted resource has been modified since second copy of the hosted resource was created; and provide, to the second requester, a modification rejection message. The system further including the second requester configured to provide to the hosted storage system the second request; receive from the hosted storage system the copy of the hosted resource; modify the copy of the hosted resource; and provide to the hosted storage system the second modified copy of the hosted resource; and receive the modification rejection message. The hosted storage system is further configured to modify a portion of the hosted resource; and wherein the modification rejection message indicates modified portion of the hosted resource.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings, and from the claims.","Various implementations of the subject matter described here may provide one or more of the following advantages. For example, examination of version indicator before storing data can prevent the loss of changes to the data. A hosted storage system that uses version indicator can provide concurrent access of data object to many clients while maintaining state of the data object. Tracking multiple version values can allow a system to lock part of a data object while keeping other parts of the data object unlocked.","A hosted storage system can receive, store, and serve data objects to clients. When a client requests the data object, the object is returned with a version indicator. The client may modify the object, and send the modified object back to the hosted storage system, along with the same version indicator. If the version indicator of the uploaded data object matches the version indicator of the data object stored in the hosted storage system, the hosted storage system can replace the stored data object with the uploaded (and modified) data object. If the version indicator does not match (for example, because the object at the hosted storage system has been modified in the interim), the hosted storage system can reject the uploaded data object and report the rejection to the client.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 7","FIG. 2","FIG. 7"],"b":["100","100","104","106","102","108","700","750","102","102","220","102","700","750"]},"In the system , the hosted storage system  can store data objects and provide applications with access to those stored objects. The applications may be running on computing devices geographically separate from each other. The stored data objects can be associated with a version indicator that is incremented, or otherwise changed, when the stored data object (and\/or metadata associated with the object) is changed.","Requesters  and  can use the hosted storage system  for data object storage. In some implementations, the requesters  and  may have permission to read and write the same data object in the hosted storage system. For example, the requesters  and  may be used by users that are part of the same user groups. As members of the same user group, both users may be authorized to access a shared data objet in the hosted storage system . The requesters  and  can communicate with the hosted storage system  through a network  such as a local area network, a wide area network, or the Internet.","The requesters  and  can send and receive messages  and , respectively. The messages  and  may include messages to request a data object, receive a copy of the data object, and to upload a modified copy of the data object. The messages  and  may be used, for example, to modify the data object. In some implementations, the data objects may be opaque binary large objects (blobs) in the hosted storage system , and edits to the data object may only be possible by the requesters  and . Modifications to the data object by the requesters  and  can include, but are not limited to, edits to the data object, changes to the object's metadata, deletion of the object, and replacement of the contents of the data object with different content.","The hosted storage  can maintain a version indicator for each data object in the hosted storage . This version indicator can include, for example, numeric values that are incremented when a data object in the hosted storage  is modified. The hosted storage  can include the version indicator with the data object as the data object is sent to the requester  and . This version indicator can be tracked and updated by the hosted storage  and provided to any client that requests a copy of the data object. Any copy of the data object provided by the hosted storage  to any client can include the current version indicator of the data object. In the upload messages  and , the updated data objects can include the same version indicator. In this example, the version indicator is shown as an integer value (), but other types of version indicator are possible.","The requesters  and  can operate independently and asynchronously on the same data object from the hosted storage . These operations, along with the messages  and , are not instantaneous. This can create a race condition in which, for example, the requester  accesses the data object while the requester  is operating on a local copy of the data object. In this example, the requester  may make a change to the data object that the requester  does not have access to.","The hosted storage system  can control the state of the data object by only accepting uploads of a data object where the uploaded data object version information matches the stored data object version indicator. In this example, the uploaded data object from the requester  may be accepted, as it contains the same version indicator () as the stored data object version indicator (). To accept the object, the hosted storage system  can replace the hosted data object with the uploaded data object. As a part of the same acceptance, the data object version indicator can be incremented (to 2). Later, when the upload message  is received by the hosted storage  from the requester , the hosted storage system  may reject the uploaded data object because the version indicator of the uploaded data object () is different than the version indicator of the hosted data object (). As part of rejecting the uploaded data object from the requester , the hosted storage system  can send a rejection message (not shown) to the requester , store the uploaded data object as a different object, accept only a part of the uploaded data object (e.g. only metadata) and\/or take another action.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["200","202","220"]},"The system  can provide scalable stores for storing data objects. The client device  can upload data objects to the hosted storage service  and control access to the uploaded data objects. Access control can include a range of security levels, from keeping data securely confidential to publishing it without restrictions. Data stored in hosted storage service  can be secured from unauthorized access. The hosted storage service  can use a simple and consistent application programming interface, or API, which can allow arbitrary quantities of structured or unstructured data to be kept private or shared between individuals, organizations, or with the world at large. The client device  can store data in the hosted storage service  for mutual business reasons (e.g., submission of work product ordered by the owner of the hosted storage service ), or for use in data processing by other services (e.g., images uploaded are used to automatically and dynamically create a photo gallery web page.)","The client device  can be implemented using a computing device, such as the computing device  or the mobile device  described with respect to . The client device  can communicate with the hosted storage service  via a network , such as the Internet. The client device  can communicate across the network using communication protocols such as, for example, one or more of Transmission Control Protocol\/Internet Protocol (TCP\/IP), Hypertext Transfer Protocol (HTTP), Hypertext Transfer Protocol Secure (HTTPS), Secure Shell Remote Protocol (SSH), or Application Program Interfaces (API). While only a single client device  is shown, there can be multiple client devices communicating across the network  with the hosted storage service  and\/or other services and devices.","The hosted storage service  can be implemented such that client applications such as a client application  can store, retrieve, or otherwise manipulate data objects in the hosted storage service . The hosted storage service  can be implemented by one or more server devices, which can be implemented using a computing device, such as the computing device  or mobile device  described with respect to . For example, the hosted storage service  can be implemented by multiple server devices operating in the same, or different, data centers.","The hosted storage service  generally includes an interface frontend , an interface backend , a storage backend , metadata  for objects stored in the storage backend , and a keystore . In general, the interface frontend  may receive requests from and send responses to the client device . For instance, the hosted storage service  can be implemented as a Web Service with a corresponding set of Web Service Application Programming Interfaces (APIs). The Web Service APIs may be implemented, for example, as a Representational State Transfer (REST)-based HTTP interface or a Simple Object Access Protocol (SOAP)-based interface.","An interface frontend  can receive messages from the client  and parse the request into a format usable by the hosted storage service , such as a remote procedure call (RPC) to an interface backend . The interface frontend  writes responses generated by the hosted storage service  for transmission to the client . In some implementations, multiple interface frontends  are implemented, for example to support multiple access protocols.","The interface frontend  can include a graphical front end, for example to display on a web browser for data access. The interface frontend  can include a sub-system to enable managed uploads and downloads of large files (e.g., for functionality such as pause, resume, and recover from time-out). The interface frontend  can monitor load information and update logs, for example to track and protect against denial of service (DOS) attacks.","As described above, the Web Service API may be a REST-based HTTP interface. In a REST-based interface, a data object is accessed as a resource, uniquely named using a URI, and the client application  and service  exchange representations of resource state using a defined set of operations. For example, requested actions can be represented as verbs, such as by HTTP GET, PUT, POST, HEAD, and DELETE verbs. The GET verb may be used to retrieve an object, while the HEAD verb may be used to retrieve information about an object without retrieving the object itself. The DELETE verb may be used to delete an object from the hosted storage service . The PUT and POST verbs may be used to upload an object to the service . PUT requests can come from the client  and contain authentication and authorization credentials and object metadata in a header, such as an HTTP header. POST requests can be received when a client  wants to upload from a web browser form. The form POST upload protocol for the hosted storage service  can involve multiple required form fields to provide authentication, authorization and object metadata. More generally, any of the API requests may include credentials for authentication and authorization, for example, in a header of the request. For example, an authorization header may be included in the REST requests, which includes an access key to identify the entity sending the request.","Alternatively, or additionally, a user can be authenticated based on credentials stored in a browser cookie, which gets appended to the API requests. If no valid cookie is present, a redirect to an authentication frontend can be generated, and the authentication frontend can be used to generate the browser cookie. The authentication frontend can be used by systems and services in addition to the hosted storage service  (e.g., if the organization operating the hosted storage service  also operates other web services such as email service.) A user can also or alternatively be authenticated based on authentication credentials from an external credentialing service or an external service that includes credentialing functionally. User or group identifier information can be calculated from the external service's credential information. Requests sent by the client  to the interface frontend  can be translated and forwarded to the external service for authentication.","In general, objects stored in the hosted storage service  can be referenced by object identifiers. The hosted storage service  can define namespaces to which a valid object identifier must conform. For example, the namespace may require that object identifiers be a sequence of Unicode characters whose UTF-8 encoding is at most 1024 bytes long. As another example, the namespace may require that object identifiers be globally unique identifiers (GUIDs), which may be 128-bit integers.","Objects can be stored in hosted storage service  in buckets. In some examples, each bucket is uniquely named in the hosted storage service , each object is uniquely named in a bucket, and every bucket and object combination is unique. Objects may be uniquely identified by a URI that includes the bucket name and the object name, and identifies the hosted storage service . For example, an object named \u201clong\/song.mp3\u201d in a bucket named \u201cmusic\u201d could be specified using a URI pattern such as http:\/\/s.hostedstoragesystem.com\/music\/long\/song.mp3 or http:\/\/music.s.hostedstoragesystem.com\/long\/song.mp3. Alternatively, the user of the client  can create a bucket named www.music.org, publish a CNAME alias redirecting that to http:\/\/music.s.hostedstoragesystem.com, and address the object as http:\/\/www.music.org\/long\/song.mp3. In some examples, buckets do not nest.","The interface backend  can handle request authentication and authorization, can manage data and metadata, and can track activity such as for billing. The interface backend  can provide functionality for independent frontend\/backend scaling for resource utilization and responsiveness under localized heavy loads. Data management can be encapsulated in the interface backend  while communication serving can be encapsulated in the interface frontend . The interface backend  can isolate security mechanisms from the client-facing interface frontend . Version locking of hosted resources can be accomplished by the interface backend .","The interface backend  can expose an interface usable by both the interface frontend  and other systems. In some examples, some features of the interface backend  are accessible only by an interface frontend (not shown) used by the owners of the hosted storage service  (internal users). Such features can include those needed for administrative tasks (e.g., resolving an object reference to a low level disk address.) The interface backend  can handle request authentication (e.g., ensuring a user's credentials are valid) and authorization (e.g., verifying that a requested operation is permitted.) The interface backend can also provide encryption and decryption services to prevent unauthorized access to data, even by internal users.","A keystore  can store encryption keys for data objects, where the encryption keys have themselves been encrypted by the interface backend . The encrypted keys can carry associated metadata that is cryptographically bound to the key itself, and are referred here to as wrapped keys. From the point of view of the interface backend , the wrapped keys can be opaque objects. To obtain the cleartext key of a wrapped key for use (e.g., to encrypt or decrypt a data object) the interface backend  can provide the wrapped key and client authentication credentials to the keystore . The keystore  can verify, based in part on the wrapped key's metadata, that the provided authentication credential is sufficient to authorize release of the key, and if so, can return the unwrapped key to the interface backend . The interface backend  can use the key to encrypt or decrypt the data object and then can discard the key.","In some examples, the encryption key is a symmetric key that can be used to both encrypt and decrypt an object. In some examples, a wrapped key can have associated metadata indicating multiple users or groups authorized to access the cleartext key. In some examples, the keystore  can copy a wrapped key and rewrap the key for a different principle (e.g., containing different metadata).","The interface backend  can manage metadata  associated with data objects, for example in a structured data format such as a database (e.g., MySQL or BigTable). User-specified names labeling the buckets can be completely defined within the metadata , and object metadata  can map a resource name to one or more data shares  storing the resource. The metadata  can also contain bucket and object creation times, object sizes, hashes, and access control lists  (ACL ) for both buckets and objects. The interface backend  can log activity and track storage consumption to support accounting for billing and chargebacks. In some examples, this includes quota monitoring in each dimension in which customers are charged (e.g., reads, writes, network transfers, total storage in use.)","The ACLs  define who is authorized to perform actions on corresponding buckets or objects, and the nature of the permitted actions. The ACLs  can be an unordered list of {scope, role} pairs, plus Boolean flags. The scope may define a user or group of users, and the role may define the access permissions for the user or group. In some examples, the union of all {scope, role} pairs can define access rights. In some examples, more specific {scope, role} pairs override more general ones.","Table 1: Bucket Roles below shows a list of example roles that can be included in ACLs  for buckets.","Table 2: Object Roles below shows a list of example roles that can be included in ACLs  for data objects.",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Bucket Roles"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Role","Capabilities"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["READ","Can list the bucket's contents. Cannot create or"]},{"entry":[{},"delete objects."]},{"entry":["WRITE","READ capabilities plus ability to create and delete"]},{"entry":[{},"objects in the bucket."]},{"entry":["FULL_CONTROL","WRITE capabilities plus ability to read and write"]},{"entry":[{},"the bucket ACL."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Object Roles"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Role","Capabilities"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["READ","Can read the object."]},{"entry":["FULL_CONTROL","READER capabilities plus ability to read and write"]},{"entry":[{},"the object ACL."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Scopes can be defined to a single user or a group of users. In one implementation, those users with a FULL_CONTROL role (and therefore able to modify the ACL for a given bucket or object) may define a group of users, and then provide a role for the group. For example, a group of users may be managed by the hosted storage service  (or, more generally, by the service provider that provides the hosted storage service ) for reasons other than storage permissions (for example, Google Groups at groups.google.com) and those groups may be identified by a single username or other identifier associated with the group of users, an e-mail address associated with the group of users (which may or may not also correspond to an identifier of the group), or a domain name associated with a group. This may allow a user to specify a preexisting group managed by the service provider that is already defined by the identifier, e-mail address, or domain name. Similarly, users may be able to specify a group of users (for example, by user id or e-mail address) and associate an access key with the group. This may allow for the formation of ad-hoc groups for the management of storage permissions, rather than groups already managed by the service provider.","In this way, a group of users can be given a particular role simply by managing the role of the group. Similarly, if the ACL is associated with a bucket containing a number of objects, or the ACL is otherwise associated with multiple objects, the role with respect to those objects can be easily changed by simply changing the role of the group.","Table 3: Scopes below shows a list of example scopes that can be included in ACLs  for buckets and\/or data objects.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Scopes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Service ID","A single authenticated user specified by username."]},{"entry":["Email Address","A single user specified by an email address."]},{"entry":["Service Group ID","A group of users managed by the hosted storage"]},{"entry":[{},"service 220 and specified by an associated identifier."]},{"entry":["Invite Token","One or more users with access to a one time use"]},{"entry":[{},"digital token."]},{"entry":["Group-Restricted","One or more users with access to a permanent"]},{"entry":["Key","use digital key."]},{"entry":["All Service Users","All authenticated users of the hosted storage"]},{"entry":[{},"service 220."]},{"entry":["All Users","All users, no authentication. Can be anonymous or"]},{"entry":[{},"semi-anonymous."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The FULL_CONTROL role can represent all possible capabilities, such as those assigned to an object or bucket owner connected to a financially responsible party. The bucket owner can be configured to always have FULL_CONTROL for the bucket. In general, the bucket and\/or object owner can create or modify scopes and roles in the corresponding ACLs, but in some implementations the pair {bucket owner, FULL_CONTROL} may be prevented from being removed from the bucket ACL  (or the object ACL). To create an object, a user can have write permission on the bucket, which can be granted by WRITE and FULL_CONTROL. WRITE permission on the bucket can imply permission to delete or overwrite an object in the bucket. Additional constraints can disallow certain modifications to ACLs . In some examples, it is possible to create an object that the bucket owner cannot read.","The storage backend  can contain multiple datastores -. Although three datastores  are shown, more or fewer are possible. Each of the datastores -can store data objects -in a particular format. For example, data store can store a data object as a Binary Large Object (BLOB), data store can store a data object in a distributed file system (e.g., Network File System, Google File System), and data store can store a data object in a structured data format such as a database (e.g., MySQL, BigTable.)","The interface backend  can ensure safe modification to the hosted resources such as data objects , metadata , and ACLs  by enforcing version locking of the resources. Version locking can apply to access of a hosted resource by elements within the hosted storage system  such as the interface backend , or by external elements such as the client application .","The interface backend can store a version indicator for each data object  in the metadata . This version indicator can reflect the current version of the data object , and can be managed by the interface backend  when the data object  or its associated metadata  or ACL  is changed. When an element such as the client application  requests the data object  (e.g. with a GET HTTPS request), the interface backend  can provide the version indicator as well as the data object  in response.","When a request to write to the data object  is received by the interface backend  (e.g. a PUT HTTPS request), the interface backend  can compare the version indicator in the request to the version indicator stored in the metadata . If the version indicators match, the interface backend  can process the write request. If they do not match, the interface backend  can reject the request, and send a message to the element with the reason for the rejection.","The process used to determine that the version indicators match can be based on the format of the version indicator. One format of version indicator may be a single integer that is incremented any time a data object  or the associated metadata  is modified. In this case, the two integers can be compared. Another format of the version indicator may include a vector of integer values. Each element of the vector may correspond to the data object  or a single metadata  field. When a request to write the data object  or a metadata  is received, the interface backend  can compare only the vector elements of the version indicator that correspond to the requested data object  or metadata  field. In other alternatives, the version indicators may contain non-integer values such as byte strings, or ascii values.","For example, the hosted storage system  may have metadata  fields for object size, object hash, ACL , and mime-type field. The associated version indicator can be a five dimensional vector: [object version, size version, hash version, ACL version, mime-type version]. The interface backend  can receive a write request, including the example version indicator, to write only to the mime-type metadata  field. In this case, the interface backend  can compare only the \u201cmime-type version\u201d dimension of the received version indicator to the \u201cmime-type version\u201d dimension of the stored version indicator. If those two dimension match, even if other dimensions do not, the interface backend  can accept and process the received write request.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 3","b":["300","300","220","301","301","200","400","104","202","106","220","218","104","106"]},"The requester  generates a request for a hosted resource (). For example, the requester  may, at user direction, identify a data object  such as a hosted document to access for editing. The requester  can create a message, such as an HTTPS GET or HEAD message, requesting a copy of data object , and the request may include the user's authentication information. The hosted storage system  receives a request from the requester  to access the hosted resource (). The hosted storage system  provides hosted storage to a plurality of clients that are coupled to the hosted storage system. For example, the hosted storage system  can receive and authenticate the request.","The hosted storage system  creates a copy of the hosted resource. For example, the hosted storage system  may read a copy of the data object  out of the datastore  and decrypt the data object . The hosted storage system  provides the copy of the hosted resource to the requester . For example, the hosted storage system  can send a message with the copy of the data object  to the requester . The hosted storage system  provides a version indicator with the hosted resource to the requester . For example, version indicator of the data object  may be stored in the metadata  in association with the data object . This version indicator may be included in the message to the requester .","In some implementations, the message to the requester  can be an HTTPS response to the GET or HEAD message requesting the data object . The HTTPS response can include a custom HTTP header, in this example x-sequence-header, that includes the version indicator, an example of which is shown below.",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 200 OK"]},{"entry":[{},"Content-Type: application\/xml; charset=UTF-8"]},{"entry":[{},"Date: Fri, 22 Jul 2011 16:27:56 GMT"]},{"entry":[{},"Expires: Fri, 22 Jul 2011 16:27:56 GMT"]},{"entry":[{},"Cache-Control: private, max-age=0"]},{"entry":[{},"x-sequence-header: 2"]},{"entry":[{},"X-Frame-Options: SAMEORIGIN"]},{"entry":[{},"header: Content-Length: 2475"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The hosted storage system  maintains the hosted resource while the requester  modifies the copy of the hosted resource (). For example, the hosted storage system  may not need to modify, move, or delete the data object  or the version indicator in the process of copying and sending the data object  or the version indicator. However, in some implementations, some modification, movements, or deletions may be performed.","The requester  receives the hosted resource from the hosted storage system  and edits the hosted resource (). For example, the requester  may receive the data object , parse, and display the data object  as a document to the user. The user may edit the document, and instruct the requester  to save the document.","The requester  generates a second request to access the hosted resource (). For example, while the user is editing the document, the requester  can create a request to change the ACLs  for a group of data objects , including the data object  being edited by the user. The second request to access the hosted resource is received from a second requester ().","The hosted storage system  creates a copy of the hosted resource and the hosted storage system  provides the copy of the hosted resource to the requester . For example, the hosted storage system  may read a copy of the data object  out of the datastore  and decrypt the data object . The hosted storage system  can then send a message with the copy of the data object  to the requester . The hosted storage system  provides a version indicator with the hosted resource to the requester . For example, version indicator of the data object  may be stored in the metadata  in association with the data object  and this version indicator may be retrieved and included in the message to the requester . In some implementations, this may effectively create the same message as sent in .","The hosted storage system  receives a modified copy of the hosted resource from the requester  (). For example, the requester  may, in response to the user's instruction to save the document, send a message to the hosted storage system  with the modified data object , along with the version indicator that the requester  received in . The hosted storage system  receives the version indicator of the modified copy of the hosted resource from the requester . For example, the hosted storage system  can parse the version indicator in the message from the requester . The hosted storage system  determines that the hosted resource has not been modified since the copy of the hosted resource was created. For example, the hosted storage system  can compare the version indicator from the requester  with the version indicator in the metadata  for the data object . If the version indicators match, the hosted storage system  can determine that the hosted copy of the data object  has not been modified since the copy of the data object  was created.","In some implementations, the message from the requester  can be a HTTPS PUT, POST, or DELETE message. This message can include a custom HTTP header, in this example x-if-sequence-number-match, that includes the version indicator from the requester , an example of which is shown below.",{"@attributes":{"id":"p-0069","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PUT \/sampleput\/xxx HTTP\/1.1"]},{"entry":[{},"Host: datarepository.example.com"]},{"entry":[{},"Accept-Encoding: identity"]},{"entry":[{},"Content-MD5: filbWD4p\/PTGCwYwaCa+Mg=="]},{"entry":[{},"Content-Length: 15"]},{"entry":[{},"x-api-version: 2"]},{"entry":[{},"Content-Type: application\/octet-stream"]},{"entry":[{},"x-if-sequence-match: 3"]},{"entry":[{},"User-Agent: Agentname"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The version indicator indicates a plurality of values, each value associated with the version of the hosted resource or a metadata value associated with the hosted resource. For example, the version indicator may include an array of integers or other values. Each entry in the array may correspond to a different feature, aspect, or part of a data object .","Table 4: Version Array below shows an example version array that may be used in the hosted storage system . The first row lists a label describing an aspect of a data object , and the second row shows an example current version.",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Version Array"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Opaque",{},{},{}]},{"entry":[{},"object","ACL","Metadata field 1","Metadata field 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"12","3","128","4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"The hosted storage system  compares the version indicator of the modified copy of the hosted resource with the version indicator of the hosted copy of the hosted resource. For example, if the version indicator is an integer or an array of integers, the hosted storage system  can compare the integers or array of integers to determine if they have the same values. Comparing the version indicators includes comparing a subset of the plurality of values of the provided version indicator with a subset of the plurality of the values of the current version indicator. For example, the x-if-sequence-number-match header field may indicate that only a portion of the data object  was modified (e.g. the Opaque object in the document example), and only that portion of the version arrays may be compared. The hosted storage system  may ignore the other portions of the version arrays. That is, if the Metadata field  has changed, but the Opaque object field has not, the hosted storage system  may determine that, for the purposes of the uploaded data object , the stored data object  has not been modified.","The hosted storage system  replaces the hosted resource with the modified copy of the hosted resource (). For example, the hosted storage system  may store the uploaded data object  in the datastore , and the fully qualified name of the data object  (e.g. bucket\/name) may now resolve to the uploaded data object . In some implementations, the older copy of the data object  may be deleted, archived, or renamed. For example, the hosted storage system  may rename the old data object , and it may be saved in the same bucket. In this case, the name portion of the fully qualified name may be different. In another example, the old data object  may be moved to a different bucket. In this case, the bucket portion of the fully qualified name may be different.","The hosted storage system  increments the version indicator of the hosted resource. For example, for a version indicator that is a single integer, the integer value is increased by 1. In another example with a version indicator that includes a vector of integers; the hosted storage system  increments one or more integers, depending on the feature, aspect, or part of the data object  that is changed.","The determining and the replacing are performed by the hosted storage system  as part of a single operation. For example, once the hosted storage system  determines that the data object  has not been modified, that data object  is blocked from any type of modification or access other than the replacement until the replacement has been completed. The determining and replacement may be described as atomic from the point of view of the requesters  and .","The hosted storage system  receives and edits the hosted resource (). For example, the requester  may receive the message from the hosted storage system  with the ACL  that is associated with the data object . The requester  may edit the ACL , and send the ACL  and version indicator back to the hosted storage system . This may occur, for example during or after the  and\/or .","The hosted storage system  receives a second modified copy of the hosted resource (). For example, the hosted storage system  can receive the message with the modified ACL  from the requester . The hosted storage system  determines that the hosted resource has been modified since the copy of the hosted resource was created. For example, the version indicator, or a portion of the version indicator, from the requester  is compared by the hosted storage system  to the version indicator stored in the metadata , and the hosted storage system  determines that the version indicators are different.","The hosted storage system  modifies a portion of the hosted resource (). For example, if the version indicator from the requester  and the version indicator of the metadata  differ only in one field (e.g. Opaque object), but the message from the requester  indicates that the requested change involves only a different feature of the data object  (e.g. ACL), the indicated portion may be changed. In this case, the ACL  may be modified as requested by the requester . In another example in which the message from the requester  indicates a change to two features of the data object  (e.g. Opaque object and ACL), but one of those fields is different from the stored version indicator (e.g. Opaque object), only the feature of the data object  that is not different (e.g. the ACL) may be changed.","The hosted storage system  provides a rejection message to the requester . For example, the hosted storage system  may generate a rejection message that indicates the current version of the data object , and send that message to the requester . The rejection message indicates a modified portion of the hosted resource. For example, if a portion of the data object  is changed in , and a portion is rejected, and indication of the changed or rejected portions may be included in the message. The requester  receives the rejection message is received ().",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 4","b":["400","400","206","210","200","400"]},"A request is received by the interface frontend  from the client application  to store an object (). The request can include a HTTP PUT or POST request, an authentication credential that authenticates the principal (entity) making the request, a data object, and a target for the object consisting of a bucket and data object name. In some examples, the authentication credentials can include an interoperable authentication header, token, or cookie. The interface frontend can make a RPC to the backend  including the request headers.","The interface backend  can examine and validate the authentication credentials (). For example, native credentials (e.g., user ID, token) can be validated using internal validation features of the hosted storage service . External credentials (e.g., user names and passwords for another system) can be sent to the associated external system for validation.","The interface backend  can query the request's target bucket's ACL  to determine if the authenticated principal is permitted to create an object in the bucket (). For example, the principal or a group the principal is a member of can have the WRITE or FULL_CONTROL role assigned in the bucket's ACL , which would allow the principal to create an object in the bucket. If the principal is not authorized to create an object, the request is denied.","Otherwise, the interface backend  uploads the object to the target bucket with the target data object name to a datastore  (). In some examples, each bucket is associated with only a single datastore , and specifying a target bucket specifies a datastore . In some examples, the interface backend  can examine the data object or use a parameter in the RPC from the interface frontend  to determine which datastore  to store the object in, with associated metadata  indicating the location of the object (that is, the particular datastore the object is stored in and the object's location in that datastore).","The interface backend  re-validates the principal's authentication and authorization (). To support long-running uploads, expiry times of authentication credentials can be temporarily ignored.","The interface backend  generates a new document key request to the keystore  for a wrapped key for the newly-uploaded object (). The new wrapped key is tied to the authentication credentials of the principal of the request. The keystore  can also supply an encryption key to encrypt the wrapped key. The interface backend  encrypts the wrapped key ().","The interface backend  creates an ACL  representing the access control list for the newly created object (). In some example, a default ACL  is used or an ACL  can be specified by the request from the client .","The interface backend  generates a new document key request to the keystore  for a wrapped key for every principal (user or group) in the ACL  with permissions to read the object or modify the object's ACL . Each new wrapped key is tied to a single principal. The keystore  can also supply an encryption key to encrypt the wrapped keys, or the interface backend  can reuse the encryption key from the step .","The interface backend  stores the object's ACL  and wrapped keys in the object's metadata . The encryption key or keys can be discarded by the interface backend .",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 5","b":["500","206","210","200","500"]},"A request is received by the interface frontend  from the client application  to download an object (). The request can include a HTTP GET request, an authentication credential that authenticates the principal (entity) making the request, and a target consisting of a bucket (and optionally data object) name. In some examples, the authentication credentials can include an interoperable authentication header, token, or cookie. The interface frontend can make a RPC to the backend  including the request headers.","The interface backend  examines and validates the authentication credentials included in the request (). For example, native credentials (e.g., user ID, token) can be validated using internal validation features of the hosted storage service . External credentials (e.g., user names and passwords for another system) can be sent to the associated external system for validation.","The interface backend  queries the request's bucket or object ACL  to determine if the authenticated principal is permitted to read the target (). For example, the principal or a group the principal is a member of can have the READ, WRITE or FULL_CONTROL role assigned, which would allow the principal to read or otherwise access the target. If the principal is not authorized to read or access the object, the request is denied.","Otherwise, the interface backend  determines if the request is for a bucket or for an object (). If the request is for a bucket, the interface backend  queries for a list of the bucket's contents () and the listing is returned to the client application  ().","If the request is for an object, the interface backend  looks up the appropriate wrapped key for the given authenticated requestor from the object's metadata  (). The interface backend  sends the wrapped key and the authentication credentials to the keystore , which can return the decrypted object encryption key to the interface backend  (). The interface backend  can fetch and decrypt the target object () to be returned to the client application  ().",{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 6","b":["600","218","600","218","220"]},"A bucket or object is created by the backend interface  based on requests from the client application  (). The client request can include a bucket name, an object name, and\/or an ACL . The principal requesting the new bucket or object is authenticated and made the owner of the bucket or object.","If an ACL  is specified in the request (), the specified ACL  is associated with the bucket or object. If the specified ACL  does not include a {scope, role} pair specifying the principal having FULL_CONTROL, one such {scope, role} pair can be added to the ACL . In one implementation, an ACL may be specified in a request by enumerating each scope and role pair to be included in the ACL, or may be specified by reference to the name of a pre-specified or \u201ccanned\u201d ACL. A list of pre-specified or \u2018canned\u2019 ACLs  is shown in","Table 5 Canned ACLs below. The canned ACLs  can be cataloged by the hosted storage system  and referenced by the client application  by name, rather than requiring the request enumerate each scope and role pair.",{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Canned ACLs"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Canned ACL Name","{scope, permission}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"private","{creating user or bucket owner,"]},{"entry":[{},{},"FULL_CONTROL}"]},{"entry":[{},"public-read","{all users, READ}"]},{"entry":[{},{},"{bucket owner, FULL_CONTROL}"]},{"entry":[{},"public-read-write","{all users, WRITE}"]},{"entry":[{},{},"{bucket owner, FULL_CONTROL}"]},{"entry":[{},"authenticated-read","{all authenticated users, READ}"]},{"entry":[{},{},"{bucket owner, FULL_CONTROL}"]},{"entry":[{},"bucket-owner-read","{bucket owner, READ}"]},{"entry":[{},"[for objects only]","{object owner, FULL_CONTROL}"]},{"entry":[{},"bucket-owner-full-control","{bucket owner, FULL_CONTROL}"]},{"entry":[{},"[for objects only]","{object owner, FULL_CONTROL}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"If an ACL  is not specified in the request (), a default ACL  can be used (). For example, bucket and object creation can default to the \u201cprivate\u201d canned ACL  for authenticated users. For object creation by unauthenticated users, such as for new objects created in a \u201cpublic-read-write\u201d bucket, a default of \u201cbucket-owner-full-control\u201d can be used.","An ACL  can be served, for example, to a principal with READ, WRITE, or FULL_CONTROL of the associated bucket or object (). For example, a client application  can perform a HTTP GET to a target's URI with the query string ?acl to retrieve the ACL associated with the target. The ACL  can be serialized and returned to the client application .","The serialization may be defined, for example, by the following extended Backus-Naur form. Nonterminals appear in sans serif italics, terminals appear in Courier Bold, { } denote zero or more repetitions, [ ] enclose optional entities, | separates alternatives, and ( ) denote grouping. The terminal symbols canonical-id, email-address, and domain are defined in English below:",{"@attributes":{"id":"p-0105","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"i":["access","control","list","owner entries "],"b":["<AccessControlList>","<\/AccessControlList>"]}},{"entry":{"i":["owner","id "],"b":["<Owner>","<\/Owner>"]}},{"entry":{"i":["entries","entry ","entry "],"b":["<Entries>","<\/Entries>"]}},{"entry":{"i":["entry","permission scope ","scope permission "],"b":["<Entry>","<\/Entry>"]}},{"entry":{"i":"permission","b":["<Permission>","READ ","WRITE | FULL","CONTROL ","<\/Permission>"],"sub":"\u2014"}},{"entry":{"i":["scope","id "],"b":["<Scope type=UserById>","<\/Scope>"]}},{"entry":"|  "},{"entry":"|  "},{"entry":"|  "},{"entry":"|  "},{"entry":"| "},{"entry":"| "},{"entry":{"i":["id","canonical","id ","text "],"b":["<ID>","<\/ID>","<Name>","<\/Name>"]}},{"entry":"|[   ]  -"},{"entry":{"i":["email","email","address ","text "],"b":["<EmailAddress>","<\/EmailAddress>","<Name>","<\/Name>"]}},{"entry":"|[   ]  -"},{"entry":{"i":"text"}},{"entry":{"i":["canonical","id"]}},{"entry":{"i":["email","address"]}},{"entry":{"i":"domain"}},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"An example serialized ACL  is shown below.",{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<AccessControlList>"},{"entry":"<Owner>"},{"entry":"<ID>a9a7b886d6fd24a52fe8ca5bef65f89a64e0193f23000e241bf9b1c61be666e9<\/ID>"},{"entry":"<Name>chriscustomer<\/Name>"},{"entry":"<\/Owner>"},{"entry":"<Entries>"},{"entry":"<Entry><Permission>FULL_CONTROL<\/Permission>"},{"entry":"<Scope type=UserById>"},{"entry":"<ID>a9a7b886d6fd24a52fe8ca5bef65f89a64e0193f23000e241bf9b1c61be666e9<\/ID>"},{"entry":"<Name>chriscustomer<\/Name>"},{"entry":"<\/Scope>"},{"entry":"<\/Entry>"},{"entry":"<Entry><Permission>FULL_CONTROL<\/Permission>"},{"entry":"<Scope type=UserById>"},{"entry":"<ID>79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be<\/ID>"},{"entry":"<Name>Frank<\/Name>"},{"entry":"<\/Scope>"},{"entry":"<\/Entry>"},{"entry":"<Entry><Permission>FULL_CONTROL<\/Permission>"},{"entry":"<Scope type=UserById>"},{"entry":"<ID>de019164ebb0724ff67188e243eae9ccbebdde523717cc312255d9a82498e394a<\/ID>"},{"entry":"<Name>Jose<\/Name>"},{"entry":"<\/Scope>"},{"entry":"<\/Entry>"},{"entry":"<Entry><Permission>READ<\/Permission><Scope type=AllUsers><\/Entry>"},{"entry":"<\/Entries>"},{"entry":"<\/AccessControlList>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"An ACL  can be updated, for example by a principal with WRITE or FULL_CONTROL of the associated bucket or object (). In some examples, a client must read, modify, and write an ACL  in order to update an ACL . In this example, the ACL  is served () as part of modification (). In some implementations, a client application  can send ACL update requests to the hosted storage system .",{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 7","b":["7","7","700","7","750","7","700","7","750"]},"The computing device   includes a processor  , a memory  , a storage device  , a high-speed interface   connecting to the memory   and multiple high-speed expansion ports  , and a low-speed interface   connecting to a low-speed expansion port   and the storage device  . Each of the processor  , the memory  , the storage device  , the high-speed interface  , the high-speed expansion ports  , and the low-speed interface  , are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. The processor   can process instructions for execution within the computing device  , including instructions stored in the memory   or on the storage device   to display graphical information for a GUI on an external input\/output device, such as a display   coupled to the high-speed interface  . In other implementations, multiple processors and\/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).","The memory   stores information within the computing device  . In some implementations, the memory   is a volatile memory unit or units. In some implementations, the memory   is a non-volatile memory unit or units. The memory   may also be another form of computer-readable medium, such as a magnetic or optical disk.","The storage device   is capable of providing mass storage for the computing device  . In some implementations, the storage device   may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. Instructions can be stored in an information carrier. The instructions, when executed by one or more processing devices (for example, processor  ), perform one or more methods, such as those described above. The instructions can also be stored by one or more storage devices such as computer- or machine-readable mediums (for example, the memory  , the storage device  , or memory on the processor  ).","The high-speed interface   manages bandwidth-intensive operations for the computing device  , while the low-speed interface  manages lower bandwidth-intensive operations. Such allocation of functions is an example only. In some implementations, the high-speed interface  is coupled to the memory , the display  (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports , which may accept various expansion cards (not shown). In the implementation, the low-speed interface  is coupled to the storage device  and the low-speed expansion port . The low-speed expansion port , which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input\/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.","The computing device  may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server , or multiple times in a group of such servers. In addition, it may be implemented in a personal computer such as a laptop computer . It may also be implemented as part of a rack server system . Alternatively, components from the computing device  may be combined with other components in a mobile device (not shown), such as a mobile computing device . Each of such devices may contain one or more of the computing device  and the mobile computing device , and an entire system may be made up of multiple computing devices communicating with each other.","The mobile computing device  includes a processor , a memory , an input\/output device such as a display , a communication interface , and a transceiver , among other components. The mobile computing device  may also be provided with a storage device, such as a micro-drive or other device, to provide additional storage. Each of the processor , the memory , the display , the communication interface , and the transceiver , are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.","The processor  can execute instructions within the mobile computing device , including instructions stored in the memory . The processor  may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor  may provide, for example, for coordination of the other components of the mobile computing device , such as control of user interfaces, applications run by the mobile computing device , and wireless communication by the mobile computing device .","The processor  may communicate with a user through a control interface  and a display interface  coupled to the display . The display  may be, for example, a TFT (Thin-Film-Transistor Liquid Crystal Display) display or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. The display interface  may comprise appropriate circuitry for driving the display  to present graphical and other information to a user. The control interface  may receive commands from a user and convert them for submission to the processor . In addition, an external interface  may provide communication with the processor , so as to enable near area communication of the mobile computing device  with other devices. The external interface  may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.","The memory  stores information within the mobile computing device . The memory  can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units. An expansion memory  may also be provided and connected to the mobile computing device  through an expansion interface , which may include, for example, a SIMM (Single In Line Memory Module) card interface. The expansion memory  may provide extra storage space for the mobile computing device , or may also store applications or other information for the mobile computing device . Specifically, the expansion memory  may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example, the expansion memory  may be provide as a security module for the mobile computing device , and may be programmed with instructions that permit secure use of the mobile computing device . In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.","The memory may include, for example, flash memory and\/or NVRAM memory (non-volatile random access memory), as discussed below. In some implementations, instructions are stored in an information carrier. that the instructions, when executed by one or more processing devices (for example, processor ), perform one or more methods, such as those described above. The instructions can also be stored by one or more storage devices, such as one or more computer- or machine-readable mediums (for example, the memory , the expansion memory , or memory on the processor ). In some implementations, the instructions can be received in a propagated signal, for example, over the transceiver  or the external interface .","The mobile computing device  may communicate wirelessly through the communication interface , which may include digital signal processing circuitry where necessary. The communication interface  may provide for communications under various modes or protocols, such as GSM voice calls (Global System for Mobile communications), SMS (Short Message Service), EMS (Enhanced Messaging Service), or MMS messaging (Multimedia Messaging Service), CDMA (code division multiple access), TDMA (time division multiple access), PDC (Personal Digital Cellular), WCDMA (Wideband Code Division Multiple Access), CDMA2000, or GPRS (General Packet Radio Service), among others. Such communication may occur, for example, through the transceiver  using a radio-frequency. In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, a GPS (Global Positioning System) receiver module  may provide additional navigation- and location-related wireless data to the mobile computing device , which may be used as appropriate by applications running on the mobile computing device .","The mobile computing device  may also communicate audibly using an audio codec , which may receive spoken information from a user and convert it to usable digital information. The audio codec  may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of the mobile computing device . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on the mobile computing device .","The mobile computing device  may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone . It may also be implemented as part of a smart-phone , personal digital assistant, or other similar mobile device.","Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and\/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.","These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the terms machine-readable medium and computer-readable medium refer to any computer program product, apparatus and\/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and\/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term machine-readable signal refers to any signal used to provide machine instructions and\/or data to a programmable processor.","To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.","The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (LAN), a wide area network (WAN), and the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","Although a few implementations have been described in detail above, other modifications are possible. For example, while a client application is described as accessing the delegate(s), in other implementations the delegate(s) may be employed by other applications implemented by one or more processors, such as an application executing on one or more servers. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other actions may be provided, or actions may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
