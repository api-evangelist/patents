---
title: Source code wrapper generation
abstract: It may be advantageous to facilitate communication between two types of source code. For example, a wrapper may be generated to translate between managed source code and native source code. Current techniques may translate a single type of native source code into a managed binary wrapper. However, as provided herein, a managed source code wrapper may be generated based upon a variety of native source code formats. A native binary descriptor describing a set of native code may be received. A provider may be selected based upon the format of the set of native code. The provider may be executed upon the native binary descriptor to produce a common native binary description. A managed source code wrapper may be generated based upon the common native binary description. Because the managed source code wrapper may be in a textual source code format, a developer may easily maintain and/or customize the wrapper.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08250523&OS=08250523&RS=08250523
owner: Microsoft Corporation
number: 08250523
owner_city: Redmond
owner_country: US
publication_date: 20090129
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Parallel development of source code using multiple programming languages may occur within a programming environment. It may be advantageous to create communication channels and\/or wrappers around programming systems and\/or other arrangements that have their own metadata description formats. For example, a computer application developed in managed code (e.g., C# programming language) may attempt to open a web browser developed in a native code (e.g., programming language in XPCOM format). To facilitate communication between different programming languages, a wrapper may be generated. The wrapper may expose objects within a programming language (e.g., native code) to other programming languages (e.g., managed code), thus providing interoperability between the programming languages. However, wrappers produced by existing tools provide limited control, flexibility, and\/or customization to developers.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","A technique for generating a managed source code wrapper that provides control, flexibility, and\/or customization to developers is disclosed herein. A native binary descriptor corresponding to a set of native code may be received. The native binary descriptor may comprise arbitrary descriptions of native code (e.g., a description in a native metadata format). A provider may be executed upon the native binary descriptor to produce a common native binary description. The provider may translate the native binary descriptor into a common universal format that maps directly to data types offered by managed code. The provider may be selected from a set of providers based upon the set of native code (e.g., if the set of native code comprises C++ source code, then a C++ provider may be selected). The common native binary description may be in a universal format independent of the type of provider and\/or the type of native code it was derived from.","A managed source code wrapper may be generated based upon the common native binary description and\/or managed metadata. The managed source code wrapper may comprise at least one source code file generated in a managed source code language (e.g., C#, VB.NET, etc.). During generation, a configuration file may comprise user-defined data. The user-defined data allows customization and flexibility in generating the managed source code wrapper. Because the managed source code wrapper is generated in a managed source code language, a developer may easily maintain and customize it. For example, a developer may specify user-defined data comprising custom marshalling code, a type of source code to generate the managed source code wrapper in, native interfaces to exclude in the managed source code wrapper, and\/or other user-defined data. The managed source code wrapper may be used to facilitate interoperability (e.g., marshalling of communication) between managed source code and the set of native source code.","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are illustrated in block diagram form in order to facilitate describing the claimed subject matter.","Some programming projects may involve source code from multiple programming languages. It may be appreciated that source code may be interpreted to comprise programming systems, runtimes, and\/or binary (e.g., a .TLB file) having their own metadata format descriptions, for example. Communication between these programming languages may be facilitated through a translation layer. The translation layer may act as a wrapper around source code (e.g., native source code) in order to expose data types, objects, and\/or interfaces to other source code (e.g., managed source code). The translation layer may translate between the different programming languages (e.g., managed data types and native data types) through marshalling.","Currently, the translation layer may be hand-authored by a developer in a textual source code format as a wrapper. However, hand-authoring the wrapper may be a very tedious task that is prone to human error (e.g., resulting in bugs that are hard to indentify at runtime). The wrapper may also be automatically generated by tools that are less prone to error. Existing tools produce a managed binary wrapper as an output. The tools that generate a managed binary wrapper may be less prone to human error, but they lack the flexibility of the textual source code format of hand-authored wrappers.","The managed binary wrappers produced by existing tools do not provide control, flexibility, and customization to developers at least because of the binary format. For example, if a developer desires to change a managed binary wrapper, then the developer may have to interpret and\/or make changes in binary. In another example, if the source code that is wrapped changes, then the managed binary wrapper would have to be re-created every time because it is difficult to track changes in binary. Another drawback is the lack of customized marshalling. For example, if a wrapper generation tool does not understand interfaces (e.g., data types) of the source code to be wrapped, then the developer may be unable to supply additional marshalling functionality that may be included within a generated wrapper. Yet another problem with managed binary wrappers is that the entire managed binary wrapper is consumed, thus undesirable pieces of the managed binary wrapper may not be excluded (e.g., a developer is only interested in a small subset of a large API). This may lead to increased development costs (e.g., a security review may be performed against all code whether used or not). Other problems may include difficulty in debugging the managed binary wrapper at a source code level and minimal customization over the output of the managed binary wrapper. Often, a developer may use an additional tool to decompile the generated managed binary wrapper into a textual source code format to work around these limitations.","As provided herein, a technique for generating a managed source code wrapper. This technique may consume native binary descriptors corresponding to a set of native code to generate a managed source code wrapper. The native binary descriptors may be translated into a universal format for the generation of the managed source code wrapper. In contrast to prior techniques that exclusively consume a single native format, the native binary descriptor may comprise arbitrary descriptions of various native source codes, thus allowing for consumption of a variety of different native codes.","A provider model may be utilized to translate a native binary descriptor (e.g., native metadata) into a universal format (e.g., a common native binary description). A provider selected from a set of providers may be executed upon the native binary descriptor to produce a common native binary description. The provider may be selected based upon the native code that is to be wrapped. For example, a C++ provider may be executed upon a C++ native binary descriptor. Regardless of the provider and\/or the native code that is to be wrapped, the common native binary description may be in a common universal format. The common native binary description may comprise commonalities of the native code and managed source code.","To enhance customization in generating the managed source code wrapper, a configuration file comprising user-defined data may be consumed. In one example, a user may specify which interfaces within the native code the user is interested with. This allows the user to configure the descriptive nature of the managed source code wrapper. Because the native code may have a large number of interfaces, resources and\/or time may be mitigated by specifying a specific set of interfaces to be included in the managed source code wrapper. In another example, the user may supply custom marshalling code to be used within the managed source code wrapper. This may allow the user to provide additional translation functionality to the managed source code wrapper. This may be advantageous because parameters within the native code may not have equivalents and\/or may be translated incorrectly by the managed source code wrapper. In yet another example, the user-defined data may specify the type of source code and\/or number of source code files generated. For example, the user may desire a single VB.NET source code file as the managed source code wrapper. During generation of the managed source code wrapper, a source code output generator may be selected to generate the managed source code wrapper in a specific source code format.","Unlike current techniques, a variety of native code formats may be consumed through arbitrary descriptions of the native code. Furthermore, the output wrapper is not limited to a binary file, but may be source code files in a format designated by a user. Finally, the user may customize the output wrapper though user-defined data within a configuration file. Because the output wrapper may be in a text based source code format, a user may be able to further customize, manage, and\/or maintain the output wrapper by editing the source code files of the output wrapper. The user may be able to write a new provider to perform optimization and\/or arbitrary transformations. Arbitrary code may be inserted as part of generating a common descriptor, for example, and\/or as part of generating a source code wrapper.","One embodiment of generating a managed source code wrapper is illustrated by an exemplary method  in . At , the method begins. At , a native binary descriptor corresponding to a set of native code is received. For example, a developer may be developing a project comprising managed source code (e.g., C#) and native source code (e.g., a set of native code corresponding to an XPCOM format) in parallel. To facilitate communication between the managed source code and the set of native code, a wrapper may be generated to wrap the set of native code to expose functionality (e.g., interfaces, data types, etc.) to the managed source code. The native binary descriptor may be any arbitrary description of the set of native source code. The native binary descriptor only has to sufficiently describe the set of native code. For example, the native binary descriptor may comprise native code metadata comprising primitive types, native types to be mapped, and\/or native types that are not describable in managed source code.","At , a provider may be executed upon the native binary descriptor to produce a common native binary description. The provider may be selected from a set of providers based upon the set of native code. For example, an XPCOM provider may be selected based upon a set of native code corresponding to an XPCOM format. The common native binary description (the output of the execution) is in a universal format that does not depend upon the native binary descriptor, the format of the native code, and\/or the provider. That is, the content of the common native binary description may differ, but the format does not. The method  may generate wrappers based upon a variety of native code formats because the common native binary descriptor is in a universal format.","At , a managed source code wrapper may be generated based upon the common native binary description and\/or managed metadata. In one example, at least one native type within the set of native code (e.g., described within the common native binary description) may be iterated over to create a mapping to at least one managed data type. It may be appreciated that the managed source code wrapper may comprise managed source code (e.g., not limited to binary code) and that a user may specify through user-defined data within a configuration file the type of managed source code (e.g., C#, VB.NET, etc.). A source code output generator may be selected to create the managed source code wrapper in a desired source code language (e.g., user specifies an output source code type designation within a configuration file).","Customization may be enhanced through a configuration file that may be received. The configuration file may comprise user-defined data. For example, user-defined data is not limited to but may comprise an XML description of functions and parameter types; a set of exclusion data; a set of override data corresponding to naming policies and translation types; a set of custom marshalling code; a file number output; an automatic generation request corresponding to security, performance, and\/or logging. The user-defined data may be used during the generation of the managed source code wrapper to control the generating. For example, a user-defined set of exclusion data may be used to determine which native code interfaces (e.g., functions) may be excluded within the managed source code wrapper because they are undesirable by the user. This allows native code interfaces to be preserved. In another example, the user may supply a set of custom marshalling code to be included within the managed source code wrapper. In yet another example, the user may specify a file number output to control the number of source code files corresponding to the managed source code wrapper.","Because the managed source code wrapper may be configured into a user-defined source code type (e.g., text based programming language format), the managed source code wrapper may be easily modified and further customized once created. This may mitigate resources and\/or time in recreating a wrapper because of changes within the native code rendering the wrapper obsolete. If the user modifies a portion of the wrapper, for example, then the configuration file may specify the portion as do not overwrite (e.g., do not overwrite with auto-generated equivalents during subsequent regeneration of the wrapper). This allows the user to preserve user modified portions (e.g., user defined methods, types, etc.) during subsequent regenerations of the wrapper. At , the method ends.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["200","206","212","204","202","204","202","202","202","204","206","206","204"]},"The common description generator  may be configured to execute a provider  upon the native binary descriptor  to produce a common native binary description . The provider may translate the native binary descriptor  into a universal format (e.g., the common native binary description ) that may directly map to data types offered by managed code. The common description generator  may be configured to consume a wide variety of native binary descriptors because multiple providers corresponding to different native code formats may be selected for execution. In one example, the native binary descriptor may comprise native code metadata comprising primitive types, native types to be wrapped, and\/or native types that are not describable in managed source code. The non-describable native types may be treated in a generic way, such as through a simple pointer, devoid of type information.","The managed source code wrapper generator  may be configured to generate a managed source code wrapper  based upon the common native binary descriptor . In one example, the managed source code wrapper generator  may be configured to iterate over native types described in the common native binary description  to create mappings to managed data types. In contrast to prior techniques, the managed source code wrapper generator  may generate the managed source code wrapper  in a variety of programming languages, which may be specified as user-defined data within a configuration file. The managed source code wrapper generator  may select an appropriate source code output generator based upon the desired source code type.","In one example of generating the managed source code wrapper , the managed source code wrapper generator  may create mappings based upon the common native binary description  to create the managed source code wrapper . The managed source code wrapper generator  may determine which interfaces (e.g., methods, data types, etc.) directly map to the desired output source code format. A direct mapping may be created for these interfaces. The managed source code wrapper generator  may determine which interfaces are undesirable or not describable to the user. These undesirable interfaces may be subbed out. For example, an IntPtr type in C# may be used in place of the undesirable interfaces. In contrast, current wrapper generators may fail because a single piece of data may be missing. The managed source code wrapper generator  may determine which interfaces are not describable in the desired output source code format. Custom marshalling code may be injected to provide the mapping of the indescribable interfaces to avoid error. The managed source code wrapper  may be generated based upon these mappings and\/or other mappings of the set of native source code to managed source code.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","306","312","306","304","302","306","2","310","308","2","310","304","2","310","304","312","306","2","310","304","312"]},"The managed source code wrapper generator  may be configured to receive the common native binary description  and\/or a configuration file . The configuration file  may comprise user-defined data. For example, user-defined data may comprise a set of custom marshalling code, a set of exclusion data specifying interfaces to exclude, an output source code type designation, and\/or other user-data that may be utilized in customizing the managed source code wrapper . In contrast to prior techniques, the managed source code wrapper generator  may consume the configuration file  to provide a user enhanced control and customization over the outputted wrapper. The managed source code wrapper generator  may select a source code output generator  to generate the managed source code wrapper  in a desired source code format.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":["400","404","412","402","404","404","406","402","408"]},"The developer may specify within a configuration file  that the output wrapper is to be in single source code file in a C# format. The developer may provide additional user-defined data within the configuration file  (e.g., the developer may specify what interfaces to include within the output wrapper, custom marshalling code for data types that are not describable in managed code, etc.). The managed source code wrapper generator  may receive the common native binary description  and the configuration file . The managed source code wrapper generator  may select a C# output generator  to generate the C# source code  (e.g., the output wrapper) based upon the common native binary description  and\/or configuration file . Thus, the developer may utilize the C# source code  to \u201cwrap\u201d around the XPCOM formatted source code\/binary to expose functionality that may be accessed through C# source code. The C# source code  comprises source code that may be maintained and customized by the developer due to the text based nature of C#.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5","b":["500","508","518","508","502","504","506","508","510","504","508","512","506","514","504","506"]},"The common native binary description  and a configuration file  may be received by the managed source code wrapper generator . For example, the configuration file  may comprise user-defined data specifying the generation of a C# and a VB.NET wrapper. The managed source code wrapper generator  may select a C# output generator  to generate a C# source code  (e.g., a managed source code wrapper). It may be appreciated that in one embodiment the C# source code  may comprise separate C# source code files corresponding to native source code in the MSCOM TLB format and to native source code in the XPCOM XPT format. The managed source code wrapper generator  may select a VB.NET output generator  to generate a VB.NET source code  (e.g., a managed source code wrapper). It may be appreciated that in one embodiment the VB.NET source code  may comprise separate VB.NET source code files corresponding to native source code in the MSCOM TLB format and to native source code\/binary in the XPCOM XPT format.","Still another embodiment involves a computer-readable medium comprising processor-executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer-readable medium that may be devised in these ways is illustrated in , wherein the implementation  comprises a computer-readable medium  (e.g., a CD-R, DVD-R, or a platter of a hard disk drive), on which is encoded computer-readable data . This computer-readable data  in turn comprises a set of computer instructions  configured to operate according to one or more of the principles set forth herein. In one such embodiment , the processor-executable instructions  may be configured to perform a method, such as the exemplary method  of , for example. In another such embodiment, the processor-executable instructions  may be configured to implement a system, such as the exemplary system of , for example. Many such computer-readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 7","FIG. 7"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 7","FIG. 7"],"b":["710","712","712","716","718","718","714"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media.","The term \u201ccomputer readable media\u201d may include communication media. Communication media typically embodies computer readable instructions or other data in a \u201cmodulated data signal\u201d such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
