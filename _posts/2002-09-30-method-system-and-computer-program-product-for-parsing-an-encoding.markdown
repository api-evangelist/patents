---
title: Method, system and computer program product for parsing an encoding
abstract: According to a method, system and computer program product for parsing an encoding, a computing device receives an encoding that includes a first level of indefinite length. The first level includes a second level of indefinite length. In response to instructions of a first instance of a parser, the computing device parses the first level. In response to instructions of a second instance of the parser, the computing device parses the second level. The second instance is invoked by the first instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07596630&OS=07596630&RS=07596630
owner: International Business Machines Corporation
number: 07596630
owner_city: Armonk
owner_country: US
publication_date: 20020930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The disclosures herein relate in general to information processing systems and in particular to a method, system and computer program product for parsing an encoding.","The International Telecommunication Union (\u201cITU\u201d) is the United Nations Specialized Agency in the field of telecommunications. The ITU Telecommunication Standardization Sector (\u201cITU-T\u201d) is a permanent organ of the ITU. The ITU-T is responsible for studying technical, operating and tariff questions and issuing Recommendations on them with a view toward standardizing telecommunications on a worldwide basis.","Abstract Syntax Notation One (\u201cASN.1\u201d) is an information technology standard for communicating between computer applications. ITU-T Recommendation X.690 specifies ASN. 1 encoding rules, including specification of basic encoding rules (\u201cBER\u201d), canonical encoding rules (\u201cCER\u201d), and distinguished encoding rules (\u201cDER\u201d). It is implicit in the specification of these encoding rules that they are also used for decoding.","ITU-T Recommendation X.690 is also published as ISO\/IEC International Standard 8825-1. ISO is the International Organization for Standardization. IEC is the International Electrotechnical Commission.","With BER, a sender of information has various choices about encoding data values. With CER and DER, the sender has more restrictions than otherwise allowed by BER. CER and DER differ from one another in the set of restrictions that they place on BER.","A key difference is that DER uses a definite length form of encoding, while CER uses an indefinite length form of encoding. In general, (a) DER is more suitable than CER if the encoded value is sufficiently small to fit into available memory, or if there is a need to rapidly skip nested values, (b) CER is more suitable than DER if the encoded value is large and cannot fit into available memory, or if it is necessary to encode and transmit a part of a value before the entire value is available, and (c) BER is more suitable than CER or DER if the encoding contains a set value or set-of value, and if there is no need for CER and DER restrictions. CER and DER may increase memory and CPU overhead to ensure that set values and set-of values have only a single possible encoding.","Because of DER's ease of use, many applications implement a framework to handle DER encoding data only. In order to parse BER encoded data, such DER-compatible applications would need to create another framework. Some applications may handle a single level of BER encoding, but are less successful in handling BER encoding with multiple levels of indefinite length.","Accordingly, a need has arisen for a method, system and computer program product for parsing an encoding, in which various shortcomings of previous techniques are overcome.","One embodiment, accordingly, provides for a method, system and computer program product for parsing an encoding. A computing device receives an encoding that includes a first level of indefinite length. The first level includes a second level of indefinite length. In response to instructions of a first instance of a parser, the computing device parses the first level. In response to instructions of a second instance of the parser, the computing device parses the second level. The second instance is invoked by the first instance.","A principal advantage of this embodiment is that various shortcomings of previous techniques are overcome.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIGS. 3"],"b":["100","100","102","104","106","4","5","6","7","100","108"]},"Each of computing systems ,  and  includes a respective network interface for communicating with network  (i.e. outputting information to, and receiving information from, network ), such as by transferring information (e.g. instructions, data, signals) between such computing system and network . Each of computing systems ,  and  includes at least one respective computing device (e.g. computer, such as an IBM-compatible personal computers) for executing a respective process and performing respective operations (e.g. processing and communicating information) in response thereto, as discussed further hereinbelow. Each such computing system and computing device is formed by various electronic circuitry components.","As shown in , computing systems ,  and  are coupled through network  to one another. Through network , information is communicated by computing systems ,  and  to one another. In the discussion hereinbelow, computing system  is a representative one of computing systems ,  and .",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 2"],"b":["102","102","202","204","206","208","206","210","212","214","102","102"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 3"]},"For example, an octet string \u201800112233445566778899AABBCCDDEEFF\u2019 can be encoded in either a \u201cdefinite length\u201d format or an \u201cindefinite length\u201d format, as shown below (in hexadecimal format).","Definite length:",{"@attributes":{"id":"p-0026","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"T","L","V"]},{"entry":[{},"04","10","00112233445566778899AABBCCDDEEFF"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"Indefinite length:",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"T","L","V",{},{}]},{"entry":[{},"24","80",{}]},{"entry":[{},{},{},"T","L","V"]},{"entry":[{},{},{},"04","08","0011223344556677"]},{"entry":[{},{},{},"04","08","8899AABBCCDDEEFF"]},{"entry":[{},{},{},"00","00"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]}}}}},"In this example of the indefinite length format:","(a) the Type is 24, universal class 4, constructed (bit  is the primitive\/constructed bit, and a value of 00100 in the last 5 bits indicates that the encoding is an octet string);","(b) the indefinite Length is indicated by 80;","(c) the lowest level has definite length constructs in which the Type is 04 and the Length is 08; and","(d) the end of data is delimited by a pair of zero octets.","Within the encoding, a level's respective Type, Length and Value fields are associated with one another.","Referring to , the decoding operation starts at a step , in response to a call from a computer application, which is executed by a computing system (e.g. computing system ) that receives the encoding from another computing system (e.g. computing system ). At step , the computing system reads the Type. At a next step , the computing system reads the Length. At a next step , the computing system determines whether the Length is definite (i.e. whether Length is 80 (base  or hexadecimal), which indicates indefinite length instead of definite length).","If the Length is definite, the operation continues from step  to a step , at which the computing system reads actual data from the Value. After step , the operation continues to a step , at which the computing system constructs the actual data. At a next step , the computing system returns the constructed data to the computer application.","Referring again to step , if the Length is indefinite, the operation continues from step  to a step , at which the computing system reads the next Type. After step , the operation continues to a step , at which the computing system reads the next Length. At a next step , the computing system determines whether the Type is 00 and whether the Length is 00 (i.e. the end of data is delimited by a pair of zero octets).","If the end of data is not yet delimited by a pair of zero octets, the operation continues from step  to a step , at which the computing system reads actual data (according to the Length) from the Value. After step , the operation continues to a step , at which the computing system stores the actual data in a temporary buffer (in addition to actual data, if any, already stored in the temporary buffer by previous execution(s) of step ). After step , the operation returns to step , at which the computing system reads the next Type.","Referring again to step , if the end of data is delimited by a pair of zero octets, the operation continues from step  to a step , at which the computing system reads actual data (stored by previous execution(s) of step ) from the temporary buffer. After step , the operation continues to step .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 3","FIG. 4","FIG. 3"],"b":["402","412","302","312","314","324","326","414"]},"At step , the computing system invokes an instance of a \u201ctype\u201d parser, which is a software application discussed further hereinbelow in connection with . In the course of invoking this instance of the type parser, the computing system passes (to this instance of the type parser) this level's Type (i.e. the Type of the current level being parsed within the encoding). Accordingly, this level (i.e. the current level) is the \u201cinvoking\u201d level for this instance of the type parser. After step , the operation continues to step .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 5","FIG. 4","FIG. 5"],"b":["414","502"]},"At step , the computing system determines whether the invoking level's Type (received at step ) indicates that its associated Value is primitive. A primitive Value includes only a single type of data, such as \u201cinteger\u201d or \u201coctet string.\u201d A non-primitive Value may include multiple types of data, such as \u201csequence.\u201d","If the invoking level's Type indicates that its associated Value is non-primitive, the operation continues from step  to a step , at which the computing system invokes an instance of a non-primitive type parser, which is a software application discussed further hereinbelow in connection with . After step , the operation continues to a step , at which the computing system returns actual data (stored by execution of step ) to the step (i.e. step  of  or step  of ) which invoked this instance of the type parser.","Referring again to step , if the invoking level's Type indicates that its associated Value is primitive, the operation continues from step  to a step , at which the computing system invokes an instance of a primitive type parser, which is a software application discussed further hereinbelow in connection with . In the course of invoking this instance of the primitive type parser, the computing system passes (to this instance of the primitive type parser) this level's Type. Accordingly, this level is the invoking level for this instance of the primitive type parser. After step , the operation continues to step , at which the computing system returns actual data (stored by execution of step ) to the step (i.e. either step  of  or step  of ) which invoked this instance of the type parser.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 5","FIG. 6"],"b":["508","602"]},"At step , the computing system reads the next Type. At a next step , the computing system reads the next Length.","At a next step , the computing system determines whether the Type is 00 and whether the Length is 00 (i.e. whether the end of data is delimited by a pair of zero octets). If the end of data is not yet delimited by a pair of zero octets, the operation continues from step  to a step , at which the computing system determines whether the Length is definite (i.e. whether Length is 80, which indicates indefinite length instead of definite length). If the Length is definite, the operation continues from step  to a step , at which the computing system determines whether the Type of the current level is consistent with the Type of the invoking level for this instance of the primitive type parser.","If the current level's Type is consistent with the invoking level's Type, the operation continues from step  to a step , at which the computing system reads actual data from the Value. After step , the operation continues to a step , at which the computing system stores the actual data in a temporary buffer (in addition to actual data, if any, already stored in the temporary buffer by previous execution(s) of step ). The temporary buffer is associated with (and used in executing) this instance of the primitive type parser.","After step , the operation returns to step , at which the computing system reads the next Type. Referring again to step , if the current level's Type is not consistent with the invoking level's Type, the operation continues from step  to a step , at which the computing system outputs an error signal (indicating an error condition).","Referring again to step , if the end of data is delimited by a pair of zero octets, the operation continues from step  to a step , at which the computing system returns actual data (stored by previous execution(s) of step ) from the temporary buffer to the step (i.e. step  of ) which invoked this instance of the primitive type parser.","Referring again to step , if the Length is indefinite, the operation continues from step  to a step , at which the computing system invokes an additional instance of the primitive type parser of . In the course of invoking the additional instance of the primitive type parser, the computing system passes (to the additional instance of the primitive type parser) this level's Type. Accordingly, this level is the invoking level for the additional instance of the primitive type parser. After step , the operation continues to step .","At step , the additional (e.g. second) instance of the primitive type parser is identical in operation to the previously invoked (e.g. first) instance (discussed hereinabove in connection with ) of the primitive type parser. The first instance is a first executable object, and the second instance is a second executable object.","In executing the second instance, the computing system (a) allocates a second temporary buffer (e.g. in executing the first instance, the temporary buffer discussed hereinabove is a first temporary buffer), (b) performs step  by reading the next Type, (c) performs step  by reading the next Length, and (d) eventually, performs step , at which the computing system returns actual data (stored by previous execution(s) of step  of the second instance) from the second temporary buffer to the step (i.e. step  of the first instance) which invoked the second instance. After such actual data from the second temporary buffer is returned to step  of the first instance, the operation continues to step  of the first instance, at which the computing system stores such actual data in the first temporary buffer (in addition to actual data, if any, already stored in the first temporary buffer by previous execution(s) of step  of the first instance). In that manner, the second temporary buffer is associated with (and used in executing) the second instance, in place of the first temporary buffer (which is used in executing the first instance).","Likewise, referring again to step , if the Length is indefinite in the second instance, the operation continues from step  to step  of the second instance, at which the computing system invokes a third instance of the primitive type parser of . The third instance is invoked in the same manner as the second instance. Accordingly, at step , the third instance of the primitive type parser is identical in operation to the first and second instances (discussed hereinabove in connection with ) of the primitive type parser.","In executing the third instance, the computing system (a) allocates a third temporary buffer, (b) performs step  by reading the next Type, (c) performs step  by reading the next Length, and (d) eventually, performs step , at which the computing system returns actual data (stored by previous execution(s) of step  of the third instance) from the third temporary buffer to the step (i.e. step  of the second instance) which invoked the third instance. After such actual data from the third temporary buffer is returned to step  of the second instance, the operation continues to step  of the second instance, at which the computing system stores such actual data in the second temporary buffer (in addition to actual data, if any, already stored in the second temporary buffer by previous execution(s) of step  of the second instance). In that manner, the third temporary buffer is associated with (and used in executing) the third instance, in place of the first and second temporary buffers (which are used in executing the first and second instances, respectively).",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 7","FIG. 5","FIG. 7","FIG. 7","FIG. 6","FIG. 6","FIG. 6","FIG. 6"],"b":["504","702","702","708","602","608","710","612","712","614","714","618"]},"Accordingly, at step , the computing system reads the next Type. At a next step , the computing system reads the next Length. At a next step , the computing system determines whether the Type is 00 and whether the Length is 00 (i.e. whether the end of data is delimited by a pair of zero octets). If the end of data is not yet delimited by a pair of zero octets, the operation continues from step  to a step , at which the computing system determines whether the Length is definite. If the Length is definite, the operation continues from step  to a step , at which the computing system reads actual data from the Value.","After step , the operation continues to a step , at which the computing system stores the actual data in a temporary buffer (in addition to actual data, if any, already stored in the temporary buffer by previous execution(s) of step ). The temporary buffer is associated with (and used in executing) this instance of the non-primitive type parser. After step , the operation returns to step , at which the computing system reads the next Type.","Referring again to step , if the end of data is delimited by a pair of zero octets, the operation continues from step  to a step , at which the computing system returns actual data (stored by previous execution(s) of step ) from the temporary buffer to the step (i.e. step  of ) which invoked this instance of the non-primitive type parser.","Referring again to step , if the Length is indefinite, the operation continues from step  to a step , at which the computing system invokes an additional instance of the type parser of . In the course of invoking the additional instance of the type parser, the computing system passes (to the additional instance of the type parser) this level's Type. Accordingly, this level is the invoking level for the additional instance of the type parser. After step , the operation continues to step .","At step , the additional (e.g. second) instance of the type parser is identical in operation to the previously invoked (e.g. first) instance (discussed hereinabove in connection with ) of the type parser. The first instance is a first executable object, and the second instance is a second executable object.","Similarly, as discussed hereinabove in connection with the first, second and third instances of the primitive type parser, any number of additional instances may be invoked of (a) the type parser of , (b) the primitive type parser of , and (c) the non-primitive type parser of . In that manner, by recursively invoking multiple instances of such parsers, the computing system operates without storing certain state information that would otherwise be associated with various parsing steps, and the computing system is able to parse encodings that have numerous levels of indefinite length, in addition to at least one level of definite length, such as the following example encoding.",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["T","L","V",{},{},{},{}]},{"entry":["24","80"]},{"entry":[{},{},"T","L","V"]},{"entry":[{},{},"24","80",{}]},{"entry":[{},{},{},{},"T","L","V"]},{"entry":[{},{},{},{},"04","08","0011223344556677"]},{"entry":[{},{},{},{},"04","08","8899AABBCCDDEEFF"]},{"entry":[{},{},{},{},"00","00"]},{"entry":[{},{},"24","80"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"T","L","V",{},{}]},{"entry":[{},{},{},"24","80"]},{"entry":[{},{},{},{},{},"T","L","V"]},{"entry":[{},{},{},{},{},"04","08","0011223344556677"]},{"entry":[{},{},{},{},{},"04","08","8899AABBCCDDEEFF"]},{"entry":[{},{},{},{},{},"00","00"]},{"entry":[{},{},{},"00","00"]},{"entry":[{},"00","00"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]}]}}]}}},"As shown in this example, a lower level of indefinite length may be nested within a higher level of indefinite length, so that the higher level includes the lower level. Also, a lower level of definite length may be nested within a higher level of indefinite length, so that the higher level includes the lower level.","This example of multi-level indefinite length encoding would not be properly parsed by the decoding operation of . Nevertheless, with practical revisions to software programming code (but without revising the application programming interface (\u201cAPI\u201d)), the decoding operation of  is readily modified to achieve the more flexible decoding operation of , ,  and , as discussed hereinabove by replacing steps - of  (indicated by dashed enclosure ) with step . Accordingly, steps - of  (and steps - of ) form a definite length parser, which is a software application having various instructions. Moreover, with the decoding operation of , ,  and , the computing system detects an error if a number of delimiter zero octet pairs fails to match the number of indefinite length encoding levels, thereby avoiding a potential source of infinite loop error.","Referring again to , in the illustrative embodiment, computer  is an IBM-compatible computer that executes Microsoft Windows NT operating system (\u201cOS\u201d) software, or alternatively is any computer that executes any OS. All Microsoft products identified herein are available from Microsoft Corporation, One Microsoft Way, Redmond, Wash. 98052-6399, telephone (425) 882-8080. For example, computer  includes (a) a network interface (e.g. asynchronous transfer mode (\u201cATM\u201d) circuitry) for communicating between computer  and network  and (b) a memory device (e.g. random access memory (\u201cRAM\u201d) device and read only memory (\u201cROM\u201d) device) for storing information (e.g. instructions executed by computer  and data operated upon by computer  in response to such instructions).","Accordingly, computer  is connected to network , input devices , display device , print device , computer-readable medium , and storage device , as shown in . Computing system  and user  operate in association with one another.","For example, user  operates input devices  in order to output information to computer , and computer  receives such information from input devices . Moreover, in response to signals from computer , display device  displays visual images, and a user (e.g. user ) views such visual images. Also, in response to signals from computer , print device  prints visual images on paper, and a user (e.g. user ) views such visual images.","Input devices  include, for example, a conventional electronic keyboard and a pointing device such as a conventional electronic \u201cmouse,\u201d rollerball or light pen. User  operates the keyboard to output alphanumeric text information to computer , and computer  receives such alphanumeric text information from the keyboard. User  operates the pointing device to output cursor-control information to computer , and computer  receives such cursor-control information from the pointing device.","In the illustrative embodiment, computer-readable medium  is a floppy diskette. Computer-readable medium  and computer  are structurally and functionally interrelated with one another, as discussed further hereinbelow. Each computing device of the illustrative embodiment is structurally and functionally interrelated with a respective computer-readable medium, similar to the manner in which computer  is structurally and functionally interrelated with computer-readable medium . In that manner, computer-readable medium  is a representative one of such computer-readable media, including for example but not limited to storage device .","Computer-readable medium  stores (or encodes, or records, or embodies) functional descriptive material (e.g. including but not limited to computer programs (also referred to as computer applications) and data structures). Such functional descriptive material imparts functionality when encoded on computer-readable medium . Also, such functional descriptive material is structurally and functionally interrelated to computer-readable medium .","Within such functional descriptive material, data structures define structural and functional interrelationships between such data structures and computer-readable medium  (and other aspects of computing system  and system ). Such interrelationships permit the data structures' functionality to be realized. Also, within such functional descriptive material, computer programs define structural and functional interrelationships between such computer programs and computer-readable medium  (and other aspects of computing system  and system ). Such interrelationships permit the computer programs' functionality to be realized.","For example, computer  reads (or accesses, or copies) such functional descriptive material from computer-readable medium  into the memory device of computing system , and computing system  performs its operations (as discussed elsewhere herein) in response to such material which is stored in the memory device of computing system . More particularly, computing system  performs the operation of processing a computer application (that is stored, encoded, recorded or embodied on a computer-readable medium) for causing computing system  to perform additional operations (as discussed elsewhere herein). Accordingly, such functional descriptive material exhibits a functional interrelationship with the way in which computing system  executes its processes and performs its operations.","Further, the computer-readable medium is an apparatus from which the computer application is accessible by computer , and the computer application is processable by computer  for causing computing system  to perform such additional operations. In addition to reading such functional descriptive material from computer-readable medium , computing system  is capable of reading such functional descriptive material from (or through) network  which is also a computer-readable medium (or apparatus). Moreover, the memory device of computing system  is itself a computer-readable medium (or apparatus).","Although  shows only three computing systems (i.e. computing systems ,  and ), it should be understood that other computing systems (e.g. substantially identical to computing system ) are connected to network . Each of such other computing systems operates in association with a respective human user, similar to the manner in which computing system  operates in association with user .","While the inventions have been shown and described with reference to particular embodiments thereof, it will be understood by those skilled in the art that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the inventions."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
