---
title: Legacy filter support in a new managed file system filter model
abstract: Systems and methods are described that facilitate management of file system filters, comprising a filter manager that maps altitudes of minifilters to legacy filter order groups. An aspect of the present invention provides for minifilters that can dynamically load and unload, thus facilitating increased flexibility in filter system management.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07844606&OS=07844606&RS=07844606
owner: Microsoft Corporation
number: 07844606
owner_city: Redmond
owner_country: US
publication_date: 20031104
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates generally to computer systems, and more particularly to systems and methods that facilitate ordering of file systems and file system filters.","Extant file system management models are limited in that the order in which a filter loads dictates the order in which the filter attaches to a critical volume. Such systems are inflexible with respect to variation in the ordering of filters. For example, an operating system will notify a filter that registers for such notifications, that there is a file system loading. A file system creates a device object as it loads, and the file system provides information to the file manager regarding the contents of the file system.","Traditional systems require that filters attach to a critical volume in the order in which they load. Legacy filters do not have dynamic loading capabilities, but rather must load as load-order groups (antivirus, encryption, quota, etc.). Such filters are typically layered from top to bottom. For example, legacy filters must load at a predetermined time in accordance with an associated start-type, which results in inflexibility of the filter system. Conventional start-types can be, for instance, \u201cboot,\u201d whereby a filter or driver is loaded at start-up; \u201csystem,\u201d which denotes that a file system is already loaded, and that a next phase of drivers is incoming; \u201cauto,\u201d whereby drivers are automatically loaded before login; \u201cmanual,\u201d whereby a user must explicitly start the driver; and \u201cdisable,\u201d which describes a driver that does not load or start. Legacy filters have specific start-types assigned to them, and, thus, can determine when they boot relative to each other. For example, if a legacy filter L has associated with it a \u201cboot\u201d start-type and filter L has associated with it a \u201csystem\u201d start-type, L will load first. Depending on the function of the filters, this can be problematic in that it can unnecessarily increase the time required to perform a given function. For instance, it is often desirable to load an encryption filter before loading an antivirus filter. However, if the start-types dictate that an antivirus filter loads prior to an encryption filter, ineffectiveness is inevitable. Such ineffectiveness occurs because the antivirus filter in this case only sees encrypted I\/O, and, therefore, cannot detect viruses. Furthermore, the loading order of two filters in the same load order group and having the same start-type (e.g., \u201cboot\u201d) cannot be predicted or guaranteed, thus further increasing inefficiency and the potential for undesirable loading sequences.","Software modules such as file system filter drivers can be stacked or otherwise arranged linearly (e.g., chained), and perform their operations in the order in which they are stacked. For example, in the Windows\u00ae 2000 operating system, file system filter drivers are stacked into a driver stack where they are able to intercept file system-directed requests and responses to and from a base file system (such as FAT or NTFS). In this manner, the drivers can, for example, scan file data for viruses, enforce disk usage quotas, encrypt data, and perform other similar functions.","While it is often useful to run more than one such filter driver for each file storage volume of a computer system, these filters are written by a number of vendors, and software bugs often result from interoperability issues between the various filters. Testing has discovered that such bugs often depend on the order in which drivers are loaded and\/or attached to the filter driver stack. Additionally, certain combinations of filters can only work properly when attached in a certain order. For example, to be effective, an antivirus filter, which reads the contents of a file to look for viruses, needs to see the data before the data is scrambled by an encryption filter.","Contemporary operating systems, such as Microsoft Corporation's Windows\u00ae XP operating system, with an underlying file system such as the Windows\u00ae NTFS (Windows\u00ae NT File System), FAT, CDFS, SMB redirector filesystem, or WebDav file systems, permit one or more file system filter drivers to be inserted between the I\/O manager that receives user I\/O requests and the file system driver. In general, filter drivers (\u2018filters\u2019) are kernel-mode drivers that enhance the underlying file system by performing various file-related computing tasks that users desire, including tasks such as passing file system I\/O (requests and data) through anti-virus software, file system quota providers, file replicators and encryption\/compression products. For example, antivirus products provide a filter that watches I\/O to and from certain file types (.exe, .doc, etc.) looking for virus signatures, while file replication products perform file system-level mirroring. Other types of file system filter drivers are directed to system restoration (which backs up system files when changes are about to be made so that the user can return to the original state), disk quota enforcement, backup of open files, undeletion of deleted files, encryption of files, and so forth. Thus, by installing file system filter drivers, computer users can select the file system features they want and need, in a manner that enables upgrades, replacement, insertion, removal of the components without necessitating the changing the actual operating system or file system driver code.","The existing file system filter model in contemporary Windows\u00ae-based operating systems (e.g., Windows\u00ae NT, Windows\u00ae 2000, Windows\u00ae XP, Windows\u00ae .NET Server 2003) leverages the inherent I\/O model, which is a packet-based approach. To this end, file system filters load as regular drivers in a stack and attach to the underlying file system's volume device objects. User I\/O requests are converted by an I\/O manager into I\/O Request Packets (IRPs), which are sent to the driver stack and processed by the top driver, which can complete it, pass it down in a call to another driver towards the file system, which in turn calls the next lower driver, and so on. In general, each driver does whatever processing it is coded to perform on the IRP, and then explicitly passes down the IRP to the next lower driver (or file system if none are lower), or completes (or fails) the IRP and sends it back up the stack to the next higher driver (or the I\/O manager if none are higher).","Another problem is efficiency, as file system filters traditionally receive and process every operation that normally goes to a file system, even those in which they have no interest. For example, an antivirus product can slow down a system as much as sixty percent, but not every I\/O request received by an antivirus filter is one upon which the filter will act (e.g., inspect corresponding data for viruses). Redundancy is also a problem that leads to inefficiency and computing cost, as many filters perform similar functions in different manners, leading to unnecessary code.","Interoperability between drivers is also a significant problem, as, for example, one driver can modify I\/O in a way that another driver does not anticipate and cannot properly deal with. Note that interoperability problems are one of the biggest drawbacks of the existing model, in part because filters have only limited control over ordering of attachment to a file system.","Other problems include overflowing stack space, because when two or more filters are installed, stack overflows are common due to recursive reentrant I\/O issued by filters. Deadlocks are also common in the existing model, again primarily due to re-entrant I\/O. Further problems include the inability to dynamically load and unload filters in the stack without a system reboot.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key\/critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","One aspect of the present invention described herein comprises a filter manager that allows coexistence between legacy filters that are already part of a file system and newer filters, thereby facilitating management of the priority and\/or ordering of such filters and their execution. The filter manager infrastructure can mitigate the necessity for developers of the legacy filters to perform substantial modification on the filters because the management infrastructure seamlessly allows them to coexist with new filters. This invention permits the filter manager to insert newer \u201cminifilters\u201d between other filters to create a new framework. Working within a legacy filter framework, minifilters can be moved as desired. Moreover, minifilters can dynamically change their own position as desired. Thus, present invention advantageously enhances the ability of a filter manager to sort incoming requests.","According to a related aspect of the invention, a filter manager maps the \u201caltitude\u201d of minifilters within the framework of a legacy structure. An altitude can be a number that represents a priority setting relative to another altitude, and, collectively, assigned altitudes of minifilters define their full order. The altitudes leverage load-order groups to ensure that the order between the minifilters and legacy filters relative to each other is maintained, such that complete ordering is always present between minifilters. For example, each minifilter driver instance can be associated with an altitude that indicates where the driver is located in the callback order. The altitude can be pre-defined or derived from flags provide by the driver that indicate the type of processing the driver will perform on the callback data.","According to another aspect, altitude values are unique, such that no two altitudes have the same value. Unique altitude values enhance the ability of a filter to attach to a critical volume, such that the ordering of a filter occurs with respect to the ordering of attachment to a critical volume. This aspect further facilitates organization of filters according to their assigned altitudes, thereby mitigating the need for an organization schema relegated to ordering filters based on the order in which they load. For example, a filter manager can load first, and attach, followed by loading of a minifilter(s). Legacy filters can then load and attach directly, but the minifilters need not directly attach when they load.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative, however, of but a few of the various ways in which the principles of the invention may be employed and the present invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It may be evident, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate describing the present invention.","The following terms are used throughout the description, the definitions of which are provided herein to assist in understanding various aspects of the subject invention.","File system filters are drivers that enhance the underlying file system of an operating system. Examples of commercial products that feature a file system filter are antivirus software, file system quota providers, file replicators, and encryption\/compression products.","A legacy filter is an extant filter driver in a file system. The terms \u201clegacy\u201d and \u201cload order\u201d are used interchangeably herein and describe a typical file system filter whose position in a given stack is subject to the constraints of the order in which it loads and\/or, more particularly, the order in which it attaches.","A minifilter is a filter that has an \u201caltitude\u201d associated with it, which defines its position in a stack with regard to the position of one or more legacy filters. The altitude of a minifilter can be a unique numerical value.","As used in this application, the terms \u201ccomponent\u201d and \u201csystem\u201d are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component can be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components can reside within a process and\/or thread of execution and a component can be localized on one computer and\/or distributed between two or more computers. It is to be appreciated that filters, minifilters, filter managers, classifiers, models, order groups and other various items are components.","As used herein, the term \u201cinference\u201d refers generally to the process of reasoning about or inferring states of the system, environment, and\/or user from a set of observations as captured via events and\/or data. Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example. The inference can be probabilistic\u2014that is, the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher-level events from a set of events and\/or data. Such inference results in the construction of new events or actions from a set of observed events and\/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","100","102","104","104","106","104","108","110","110","110","108","110"]},"The filter manager  permits integration of the benefits of the present invention while maintaining support for conventional filter models, which facilitates a smooth transition period during which conventional models can port over to the present filter management system. By allowing the filter manager  to attach to a volume more than once, the system  permits co-existence between the legacy filters  and the minifilters .","A legacy filter  has a \u201cload order\u201d group, whereas a minifilter  has an \u201caltitude\u201d that defines its load order group. The present invention defines altitude mappings for the load order group so that absolute order on a mixed-mode machine can be determined. For example, the following list represents some conventional load order groups in the order in which they should attach to a volume, top to bottom. This list is by no means exhaustive, and is presented for illustrative purposes only.",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FSFilter Activity","ActivityMonitor"]},{"entry":[{},"Monitor"]},{"entry":[{},"FSFilter","Undelete"]},{"entry":[{},"Undelete"]},{"entry":[{},"FSFilter Anti-","AntiVirus"]},{"entry":[{},"Virus"]},{"entry":[{},"FSFilter","Replication"]},{"entry":[{},"Replication"]},{"entry":[{},"FSFilter","ContinuousBackup"]},{"entry":[{},"Continuous"]},{"entry":[{},"Backup"]},{"entry":[{},"FSFilter Content","ContentScreener"]},{"entry":[{},"Screener"]},{"entry":[{},"FSFilter Quota","QuotaManagement"]},{"entry":[{},"Management"]},{"entry":[{},"FSFilter Cluster","CFSMetaDataServer"]},{"entry":[{},"File System"]},{"entry":[{},"FSFilter HSM","HSM"]},{"entry":[{},"FSFilter","Compression"]},{"entry":[{},"Compression"]},{"entry":[{},"FSFilter","Encryption"]},{"entry":[{},"Encryption"]},{"entry":[{},"FSFilter","PhysicalQuotaManagement"]},{"entry":[{},"Physical Quota"]},{"entry":[{},"Management"]},{"entry":[{},"FSFilter Open","OpenFileBackup"]},{"entry":[{},"File"]},{"entry":[{},"FSFilter","SecurityEnhancer"]},{"entry":[{},"Security"]},{"entry":[{},"Enhancer"]},{"entry":[{},"FSFilter Copy","CopyProtection"]},{"entry":[{},"protection"]},{"entry":[{},"FSFilter"]},{"entry":[{},"Infrastructure"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Load order groups guarantee that a filter in a load order group that is higher up in the order than another load order group will be loaded before a filter in the lower load order group. However, no order within the same group is guaranteed in conventional systems.","Start type is a parameter that can adversely affect load order for legacy filters . There are currently five different start types: Boot, System, Automatic, Manual, and Disabled. Unfortunately, if a higher-order filter has a start-type which is later than that of a lower-order filter, the attachment will be in the reverse order regardless of the load order group. For example, if a user buys an encryption filter having a \u201csystem\u201d start type from a first vendor and an antivirus filter having a \u201cboot\u201d start type from a second vendor, then the antivirus filter will load and attach before the encryption filter. When input enters the stack, it will be encrypted before the antivirus filter can at upon it, thus rendering the antivirus filter useless. However, if the antivirus filter is a minifilter , it can load before the encryption filter and attach later, thus mitigating any problems associated with the order in which filters act upon input. Additionally, minifilters  will not be affected by start type or by load order groups in a legacy-free environment. Regardless of when a minifilter  loads, the minifilter  can attach at the right place in the stack.","According to another aspect of the invention, several assumptions can be followed to facilitate loading and\/or unloading of minifilters  on a mixed-mode machine (e.g., a machine employing both legacy filters  and minifilters ).\n\n","The following discussion describes the manner in which minifilters  can be loaded on a mixed machine. A mixed machine comprises both legacy filters  and minifilters . Minifilters  that need to be at a specific location in a stack can supply a load order group, an information file (INF) specifying an automatic instance, and an altitude in the INF file. The filter manager  creates an instance at the specified load-order group altitude at filter load time. If such an automatic instance is not specified, assumption #4 above acts to reduce the probability of being able to dynamically create the instance again. By specifying automatic instances, minifilters  can ensure attachment to the stack.","To facilitate mixed mode ordering, a small change to the application programming interface (fore example, \u201c(API) IoRegisterFsRegistrationChange( )\u201d, which is used in Longhorn, etc.) can be checked into the file system architecture (such as, for example, Microsoft's Longhorn build). This API allows filters to register for file system arrival\/departures. The API for the IoRegisterFsRegistrationChange( ) command can \u201cfail\u201d adjacent registrations for the same driver to permit the file manager  to facilitate compatibility between legacy filters  and minifilters . This, in turn, permits a filter manager to register for file system notification for each minifilter  that registers. However, adjacent minifilters  (with no legacy filter in between) can be collapsed into the same filter manager instance, in which case the registration for file system notifications will fail. The change to the API ensures that adjacent registrations for file system notifications will fail.","Each instance of the filter manager  in the \u2018virtual\u2019 stack will be referred to as a \u2018frame\u2019 in this document. A frame is an instance of a filter manager global state that can manage minifilters at that attachment order in the stack. The global state for the filter manager is split into a per-frame state to facilitate grouping of minifilters within a frame.",{"@attributes":{"id":"p-0042","num":"0045"},"figref":["FIG. 2","FIG. 2"],"b":["200","2","2","1","1","1","1","1"],"br":[{},{},{},{}],"in-line-formulae":[{},{},{},{}],"sub":["1","1","2 ","n ","n ","2 ","1","1","2 ","n ","1","1","2 "]},{"@attributes":{"id":"p-0043","num":"0046"},"figref":["FIG. 3","FIG. 3"],"b":["300","1","2","3","2","1","3"],"br":{},"in-line-formulae":[{},{}]},"Furthermore,  illustrates a legacy filter such that the desired stacking order of the filters is represented by\n\nM\u2192M\u2192L\u2192M\n","In this example, frame F attaches to the base file system (here, NTFS) and manages both minifilter M and minifilter M. It is important to note that within frame F, minifilter M is stacked above minifilter M, as required by their respective altitudes. Legacy filter L is stacked above frame F, and below frame F, which manages minifilter M. As illustrated in , the attachment order of the frames determines the stack order. However, in the present example, the order in which minifilters M and M load and\/or attach is irrelevant because their respective order within frame F is governed by their respective altitudes.",{"@attributes":{"id":"p-0046","num":"0049"},"figref":"FIG. 4","b":["400","1","2","3","1"],"br":[{},{},{},{}],"in-line-formulae":[{},{},{},{}],"sub":["1","2","3 ","n ","1","2","3 ","n "]},"While, for purposes of simplicity of explanation, the one or more methodologies shown herein, e.g., in the form of a flow chart, are shown and described as a series of acts, it is to be understood and appreciated that the present invention is not limited by the order of acts, as some acts may, in accordance with the present invention, occur in a different order and\/or concurrently with other acts from that shown and described herein. For example, those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events, such as in a state diagram. Moreover, not all illustrated acts may be required to implement a methodology in accordance with the present invention.","The following discussion is presented to describe the manner in which minifilters can be associated with frames. For each frame i, the filter manager maintains a non-overlapping closed interval [L, H] of the altitudes currently spanned by the frame, where every minifilter's altitude within the frame i is guaranteed >Li and \u2266Hi. This altitude interval can be adjusted as appropriate when a minifilter loads as outlined in the algorithm below. However, since a filter manager never unloads, the intervals need not become narrower for a given frame, thereby ensuring that a minifilter that dynamically unloads and reloads will relocate to the same frame.","To determine the interval of a frame, each minifilter can be assigned a default altitude. Even though filters can support multiple instances, one altitude can be chosen as a \u2018default\u2019, which can be used to determine the frame to which the filter belongs. According to one aspect of the algorithm, for instance, the lowest altitude among all the specified instances can be chosen as the \u2018default\u2019 altitude.","The filter manager can also maintain the frames in a linked list that can be ordered head to tail from lowest to highest in the stack. The altitude intervals for each frame can be closed and non-overlapping.","The algorithm obeys the following principles:\n\n","Once a frame is established, it will not be removed. This is so because frames represent attachments of a legacy filter, or frame manager. When a minifilter unloads, the interval at which it was loaded can remain unadjusted, so that when the minifilter reloads, it can be reloaded at the same frame, as set forth above in 2.2.",{"@attributes":{"id":"p-0053","num":"0065"},"figref":"FIG. 5","b":["502","504","506","508","510"]},{"@attributes":{"id":"p-0054","num":"0066"},"figref":"FIG. 6","b":["602","604","606","608","612","616"]},{"@attributes":{"id":"p-0055","num":"0067"},"figref":"FIG. 7","b":["702","704","706","708","710","712","714","716"]},"The subject invention (e.g., in connection with minifilter ordering) can employ various artificial intelligence based schemes for carrying out various aspects of the subject invention. For example, a process for determining when a minifilter will be loaded or where it will be mapped based on a particular legacy filter structure can be facilitated via an automatic classification system and process. A classifier is a function that maps an input attribute vector, x=(x1, x2, x3, x4, xn), to a confidence that the input belongs to a class, that is, f(x)=confidence(class). Such classification can employ a probabilistic and\/or statistical-based analysis (e.g., factoring into the analysis utilities and costs) to prognose or infer an action that a user desires to be automatically performed. In the case of minifilters, for example, attributes can be numerical values or other data-specific attributes derived from the words (e.g., altitudes), and the classes can be load order groups (e.g., levels of priorities).","For example, a support vector machine (SVM) classifier can be employed. An SVM operates by finding a hypersurface in the space of possible inputs. This hypersurface will attempt to split the triggering criteria from the non-triggering events. Intuitively, this makes the classification correct for testing data that is near, but not identical to the training data. Other directed and undirected model classification approaches include, e.g., na\u00efve Bayes, Bayesian networks, decision trees, and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.","As will be readily appreciated from the subject specification, the subject invention can employ classifiers that are explicitly trained (e.g., via a generic training data) as well as implicitly trained (e.g., via observing user behavior, receiving extrinsic information). For example, SVMs are configured via a learning or training phase within a classifier constructor and feature selection module. Thus, the classifier(s) can be used to automatically determine according to a predetermined criteria when and where a minifilter loads, unloads, reloads, attaches, etc. The criteria can include, but is not limited to, minifilter altitude, adjacent filter(s), adjacent filter function(s), etc.","Referring now to , there is illustrated a block diagram of a computer operable to execute the disclosed architecture. In order to provide additional context for various aspects of the present invention,  and the following discussion are intended to provide a brief, general description of a suitable computing environment  in which the various aspects of the present invention may be implemented. While the invention has been described above in the general context of computer-executable instructions that may run on one or more computers, those skilled in the art will recognize that the invention also may be implemented in combination with other program modules and\/or as a combination of hardware and software. Generally, program modules include routines, programs, components, data structures, etc., that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations, including single-processor or multiprocessor computer systems, minicomputers, mainframe computers, as well as personal computers, hand-held computing devices, microprocessor-based or programmable consumer electronics, and the like, each of which may be operatively coupled to one or more associated devices. The illustrated aspects of the invention may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference again to , there is illustrated an exemplary environment  for implementing various aspects of the invention includes a computer , the computer  including a processing unit , a system memory  and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  may be any of various commercially available processors. Dual microprocessors and other multi-processor architectures may also be employed as the processing unit .","The system bus  can be any of several types of bus structure that may further interconnect to a memory bus (with or without a memory controller), a peripheral bus, and a local bus using any of a variety of commercially available bus architectures. The system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) is stored in a non-volatile memory  such as ROM, EPROM, EEPROM, which BIOS contains the basic routines that help to transfer information between elements within the computer , such as during start-up.","The computer  further includes a hard disk drive , a magnetic disk drive , (e.g., to read from or write to a removable disk ) and an optical disk drive , (e.g., reading a CD-ROM disk  or to read from or write to other high capacity optical media such as Digital Video Disk (DVD)). The hard disk drive , magnetic disk drive  and optical disk drive  can be connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface  and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of data, data structures, computer-executable instructions, and so forth. For the computer , the drives and media accommodate the storage of broadcast programming in a suitable digital format. Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as zip drives, magnetic cassettes, flash memory cards, digital video disks, cartridges, and the like, may also be used in the exemplary operating environment, and further that any such media may contain computer-executable instructions for performing the methods of the present invention.","A number of program modules can be stored in the drives and RAM , including an operating system , one or more application programs , other program modules  and program data . It is appreciated that the present invention can be implemented with various commercially available operating systems or combinations of operating systems.","A user can enter commands and information into the computer  through a keyboard  and a pointing device, such as a mouse . Other input devices (not shown) may include a microphone, an IR remote control, a joystick, a game pad, a satellite dish, a scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus , but may be connected by other interfaces, such as a parallel port, a game port, a universal serial bus (\u201cUSB\u201d), an IR interface, etc. A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , a computer typically includes other peripheral output devices (not shown), such as speakers, printers etc.","The computer  may operate in a networked environment using logical connections via wired and\/or wireless communications to one or more remote computers, such as a remote computer(s) . The remote computer(s)  may be a workstation, a server computer, a router, a personal computer, portable computer, microprocessor-based entertainment appliance, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although, for purposes of brevity, only a memory storage device  is illustrated. The logical connections depicted include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a wired or wireless communication network interface or adapter . The adaptor  may facilitate wired or wireless communication to the LAN , which may also include a wireless access point disposed thereon for communicating with the wireless adaptor . When used in a WAN networking environment, the computer  typically includes a modem , or is connected to a communications server on the LAN, or has other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external and a wired or wireless device, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","The computer  is operable to communicate with any wireless devices or entities operably disposed in wireless communication, e.g., a printer, scanner, desktop and\/or portable computer, portable data assistant, any piece of equipment or location associated with a wirelessly detectable tag (e.g., a kiosk, news stand, restroom), and telephone. This includes at least Wi-Fi and Bluetooth\u2122 wireless technologies. Thus the communication may be a predefined structure as with conventional network or simply an ad hoc communication between at least two devices.","Wi-Fi, or Wireless Fidelity, allows connection to the Internet from a couch at home, a bed in a hotel room or a conference room at work, without wires. Wi-Fi is a wireless technology like a cell phone that enables such devices, e.g., computers, to send and receive data indoors and out; anywhere within the range of a base station. Wi-Fi networks use radio technologies called IEEE 802.11 (a, b, g, etc.) to provide secure, reliable, fast wireless connectivity. A Wi-Fi network can be used to connect computers to each other, to the Internet, and to wired networks (which use IEEE 802.3 or Ethernet). Wi-Fi networks operate in the unlicensed 2.4 and 5 GHz radio bands, with an 11 Mbps (802.11b) or 54 Mbps (802.11a) data rate or with products that contain both bands (dual band), so the networks can provide real-world performance similar to the basic 10BaseT wired Ethernet networks used in many offices.","The disclosed computer  may also be employed with HiperLAN technology. HiperLAN is a set of wireless local area network (WLAN) communication standards primarily used in European countries. There are two specifications: HiperLAN\/1 and HiperLAN\/2, both of which have been adopted by the European Telecommunications Standards Institute. The HiperLAN standards provide features and capabilities similar to those of the IEEE 802.11 WLAN standards used in the U.S. and other adopting countries. HiperLAN\/1 provides communications at up to 20 Mbps in the 5-GHz range of the radio frequency spectrum. HiperLAN\/2 operates at up to 54 Mbps in the same RF band, and is compatible with 3G (third-generation) WLAN systems for sending and receiving data, images, and voice communications. HiperLAN\/2 has the potential, and is intended, for implementation worldwide in conjunction with similar systems in the 5-GHz RF band.","Referring now to , there is illustrated a schematic block diagram of an exemplary computing environment  in accordance with the present invention. The system  includes one or more client(s) . The client(s)  can be hardware and\/or software (e.g., threads, processes, computing devices). The client(s)  can house cookie(s) and\/or associated contextual information by employing the present invention, for example. The system  also includes one or more server(s) . The server(s)  can also be hardware and\/or software (e.g., threads, processes, computing devices). The servers  can house threads to perform transformations by employing the present invention, for example. One possible communication between a client  and a server  may be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and\/or associated contextual information, for example. The system  includes a communication framework  (e.g., a global communication network such as the Internet) that can be employed to facilitate communications between the client(s)  and the server(s) .","Communications may be facilitated via a wired (including optical fiber) and\/or wireless technology. The client(s)  are operably connected to one or more client data store(s)  that can be employed to store information local to the client(s)  (e.g., cookie(s) and\/or associated contextual information). Similarly, the server(s)  are operably connected to one or more server data store(s)  that can be employed to store information local to the servers .","What has been described above includes examples of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the term \u201cincludes\u201d is used in either the detailed description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 8 and 9"}]},"DETDESC":[{},{}]}
