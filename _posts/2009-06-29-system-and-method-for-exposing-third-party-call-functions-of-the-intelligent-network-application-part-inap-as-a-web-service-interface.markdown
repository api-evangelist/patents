---
title: System and method for exposing third party call functions of the intelligent network application part (INAP) as a web service interface
abstract: Systems and methods are described for exposing the third party call control functionality of a telecom signaling network as a web services interface. An intelligent network application part (INAP) plug-in is used to provide the translation logic of simple web service interface calls received from a client application, into the lower-level signaling protocol invocations needed to provide the third party call functionality at the network level. The INAP plug-in is deployed in a service access gateway positioned between the telecommunications signaling-based network and a multitude of service provider applications that seek to access various functions in the network. By implementing the INAP plug-in, applications are provided with access to third party call control (3PCC) within the network, without the necessity of invoking low-level signaling needed to establish calls, terminate or cancel calls, as well as obtain various call information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08498302&OS=08498302&RS=08498302
owner: Oracle International Corporation
number: 08498302
owner_city: Redwood Shores
owner_country: US
publication_date: 20090629
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF INVENTION","DETAILED DESCRIPTION"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The current invention relates generally to telecommunication network functionality and more specifically to exposing third party call control signaling functionality as a web service interface.","Given the recent dramatic growth in wireless and cellular communications, more and more businesses and other entities are integrating themselves with mobile device technologies. In addition to standard voice features, modern cellular phones and similar devices provide countless other services, such as internet access, email, short messaging service (SMS) texting, digital cameras, multimedia messaging service (MMS), Bluetooth, gaming, various web-based applications and the like. As a result, telecommunication carriers and network operators have been under increased pressure to provide more and more service offerings to their subscribers. Today's network operator wants to attract new and retain customers, develop profitable new business models, improve returns and launch new services as quickly as possible. In addition, the possible competitive pressures from other entities such as internet-based providers have been a growing area of concern in this field.","Faced with these challenges, most operators expect a drastic increase in their portfolio of content and application offerings, from a handful now, to thousands and possibly even millions in the future. While some of these offerings will be developed and deployed in house, the vast majority of these new applications will likely be sourced from partners, Web applications such as social networking sites and third party service providers. These outsourced services will be deployed and executed outside of the carrier's internal network, thereby creating new challenges in security, integration and management of the environment.","To assist with these challenges, new telecommunication gateways and software applications have emerged, which are typically deployed by the network operator as part of a service development platform (SDP). These gateways usually provide features for managing the ecosystem between the operator, its internal subscriber network and various third party providers. For example, a communication services gateway may help to secure third party access to the operator's core network, provide service level agreement (SLA) enforcement, as well as perform numerous other functions.","These service access gateways have greatly simplified the management and control of accessing the telecom network by various third party service providers. However, there still exists significant room for improvement in the ease of use and access of proprietary telecom networks, as well as providing new features and functionality for users. For example, certain legacy networks are frequently accessed by specific and low level signaling protocols. One such set of protocols is the signaling system 7 (SS7) protocol suite and in particular the intelligent network application part (INAP) used in intelligent network architecture. In order to gain access to functionality in these types of legacy networks, the application developer is generally forced to learn the particular signaling protocol, or to use some other mechanism to overcome the disconnect that exists between web development and low level network signaling protocols. What is needed is a simpler and more direct approach to integrating the network operator functionality with services and features in the web application world.","In the present disclosure, systems and methods are described for exposing the third party call control functionality of a telecom signaling network as a web services interface. An intelligent network application part (INAP) plug-in is used to provide the translation logic of simple web service interface calls received from a client application, into the lower-level signaling protocol invocations needed to provide the third party call functionality at the network level. The INAP plug-in is deployed in a service access gateway positioned between the telecommunications signaling-based network and a multitude of service provider applications that seek to access various functions in the network. By implementing the INAP plug-in, applications are provided with access to third party call control (3PCC) within the network, without the necessity of invoking low-level signaling needed to establish calls, terminate or cancel calls, as well as obtain various call information.","The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. References to embodiments in this disclosure are not necessarily to the same embodiment, and such references mean at least one. While specific implementations are discussed, it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.","In the following description, numerous specific details are set forth to provide a thorough description of the invention. However, it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail so as not to obscure the invention.","In accordance with the embodiments of the invention, systems and methods are described for exposing third party call functionality of legacy telecommunication networks to a service provider application. In particular, third party call control of a signaling system 7 (SS7) protocol stack is exposed as a web services interface by using an intelligent network application part (INAP) plug-in. The INAP plug-in can be deployed in a gateway that is positioned between the service provider application and the telecom network. The plug-in provides protocol mapping between a northbound application-facing web services interface (e.g. ParlayX Third Party Call) and the southbound network-facing interface (INAP). By employing the INAP plug-in, the developers of the service provider web application are allowed access to third party call control functions without having to know the low level signaling protocols used to access such functions. As such, the plug-in provides a layer of abstraction to web developers and applications seeking to integrate with the legacy telephony networks, and enables new features and functionality to be easily incorporated therewith.","In one embodiment, the plug-in is deployed in a service access gateway (SAG) positioned between the telecommunications network and the various external applications (e.g. web applications) seeking to access the functionality of the network. It should be noted that, as used throughout this disclosure, the terms gateway, service access gateway, and telecommunications gateway, all refer to the same thing. The gateway can serve as a security gatekeeper to the network, providing service level agreement (SLA) enforcement, traffic management and protocol translation features. In one embodiment, the gateway is a set of software applications that perform some services to the requests flowing to\/from the network. In alternative embodiments, the gateway can be implemented as hardware, firmware, or any combination thereof.","The INAP plug-in is deployed in the gateway as part of a set of service exposure services. In one embodiment, the plug-in works with TietoEnator's SS7 stack through a Java INAP application programming interface (API). INAP is a signaling protocol used in intelligent network architecture and it is a part of the SS7 protocol suite. The INAP plug-in provides access to third party call control (3PCC) features of the SS7 suite. 3PCC allows one entity (controller) to set up and manage communications (telephone call) between two or more other parties. For example, a web application (third party) can set up a telephone call between two or more subscribers. Normally, a sequence of signaling calls need to be performed by the application in order to access this function, however the INAP plug-in allows the application to make a simple web services invocation, such as \u201cmakeCall\u201d to the gateway and the plug-in can take care of the low level signaling protocols necessary to establish the call. More specifically, the plug-in can employ the INAP Java API provided by the SS7 stack in order to set up the INAP dialogue for making the call.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},"As illustrated, the INAP plug-in  is deployed in a service access gateway  that manages communication access between applications  and the SS7 stack . The plug-in interacts with the SS7 stack via the JAIN (Java APIs for Integrated Networks) INAP API  which in turn uses the Java CommonParts API . The INAP API library reads properties from a configuration file , which is pointed out by the INAP plug-in . As requests from the application  are received, they can be translated into a set of INAP calls by the plug-in  in order to invoke third party call control functionality within the SS7 stack. It should be noted that the SS7 stack, as illustrated in , is part of a product produced by Ericsson\u2122 and is separate with respect to the service access gateway.","In one embodiment, all direct interaction with the INAP API is isolated in one single entity in the plug-in , the call handler. The call handler can send and receive INAP operations in transactions, where a transaction can contain one or more INAP operations. The transactions associated with a particular call are sent over one INAP dialogue. In one embodiment, interaction with the Java INAP API is asynchronous\u2014outbound transactions (request transactions) are sent via INAPPRovider.send and inbound transactions (indication transactions) are received via callbacks to an INAPListener interface, registered with an INAPProvider reference is requested by the INAP plug-in .","In various embodiments, the gateway can further include an access tier  and a network tier . The stateless access tier  can serve as an entry point for external (possibly un-trusted) third party applications into the network. The network tier  which integrates with the internal network can be shielded from the applications by the access tier. The network tier can receive requests from the access tier via an EJB or another similar component . In one embodiment, all plug-ins of the gateway, including the INAP plug-in  can be deployed in the network tier .",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},"As previously described, the gateway  can include the INAP plug-in  which can use the Java INAP API  that communicates with the SS7 stack via the Java CommonParts API . The INAP plug-in can also provide a Java Management Extension (JMX) MBean interface  for provisioning.","As further illustrated, the signaling software  can be comprised of three processes, the SS7 backend  which contains the SS7 stack down to the transport level; the SS7 frontend  which employs the stream control transmission protocol (SCTP) using Ethernet network interface cards (NIC)  in the host; and a Log Daemon  which logs on behalf of both backend and frontend processes. In one embodiment, all of the SS7 processes communicate internally via a TCP\/IP based protocol called CommonParts. This CommonParts protocol is also used for communications between the gateway  and the signaling stack . CommonParts transfers messages between users where each user is identified by a CommonParts module identifier (ID). A module ID is either associated with its own port number or with another user ID that owns its own port.","In addition to the MBean , configuration information can also be provided in four additional places. In one embodiment, the INAP API configuration file  provides the API with the details about where to connect, how to bind to the stack and values for a subset of parameters that are not exposed in the API. This file can be generated by the plug-in at startup time based on configuration data provided through the MBean interface .","In addition, the CommonParts configuration file  can configure the interprocess communication for the stack. In one embodiment, all stack processes read this file at startup. The SS7 backend configuration file  contains configuration of the SS7 backend stack layers. Each layer has a dedicated section in this file, where information such as SS7 network routing and protocol timers is configured. The SS7 frontend configuration file  contains specific configuration details for the front end process (SCTP).","In various embodiments, the SS7 front end further connects to a signal transfer point (STP)  in the operator's signaling network  by an Ethernet card  and over the SCTP protocol.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3"},"As shown, the SS7 stack can also be deployed in a high availability (HA) configuration. In this mode, two SS7 backends ,  work together in an active-standby configuration. The frontend processes ,  are shared between the two backends. In one embodiment, the active backend  handles all ongoing INAP dialogues and if that backend is lost, all ongoing dialogues are lost.","As further illustrated, the signaling solution is deployed on two servers or stack-in-a-box (SIABs) (, ), which can be co-located with the gateway cluster deployment. Each server runs one backend and one or more frontend processes, as well as the monitoring processes that start and supervise the frontends and backends. In one embodiment, the Femon process ,  supervises the frontends on its local server and the Hamon process (, ) supervises the backend. In one embodiment, the Femon process always tries to keep its frontends running (always active mode) while the Hamon processes are configured with a primary role, either master  or slave . This designation can be set up in a dedicated configuration file, as previously described.","In one embodiment, the Hamon on each server in the signaling software communicates with the other\u2014at startup these processes agree on who is master and during execution, each keeps track of the state of the remote Hamon. The slave Hamon  can assume the master role if it loses contact with the master Hamon . In addition, the slave Hamon will then activate its associated stack which is in hot standby mode (started but not active as long as it runs in slave mode).","In the gateway deployment (, ), the Java INAP API (, ) is configured with the addresses of both backend servers (e.g. in the INAP API configuration file). As previously mentioned, the Java INAP API will connect to the backend by way of the Java CommonParts API (, ). Since only one backend is active at a time, all INAP plug-in instances (, ) will use the same backend . If the active backend  is lost, all connected INAP plug-ins are notified and will need to reconnect.","Moreover, similarly to the standalone deployment, the frontend processes of both servers can communicate with the STP  in the operator's signaling network  by way of Ethernet cards (, ) and over the SCTP protocol.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4"},"As shown in step , a third party call invocation request is received from an application to a gateway via a web services interface. This call can be a simple invocation such as makeCall. As a non-limiting example, the table below illustrates a list of possible web service interface calls available to the application for accessing third party call control:",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["makeCall","The invocation of this method causes INAP operations"]},{"entry":[{},"InitiateCallAttempt, RequestReportBCSMEvent, Connect and"]},{"entry":[{},"Continue to be sent. Parameters callingParty and calledParty can"]},{"entry":[{},"be used twice when establishing the connection with each call"]},{"entry":[{},"party."]},{"entry":["endCall","The invocation of this operation will result in INAP operation"]},{"entry":[{},"ReleaseCall being invoked. It will also result in updates to the"]},{"entry":[{},"CallInformation store"]},{"entry":["cancelCallRequest","This operation would only have effect if it is invoked before the"]},{"entry":[{},"1st participant has answered the call. If this precondition is met,"]},{"entry":[{},"the call will be released."]},{"entry":["getCallInformation","This invocation obtains various data associated with the call"]},{"entry":[{},"from the CallInformationStore. The parameter used for this"]},{"entry":[{},"method would be the call identifier. The results can include"]},{"entry":[{},"information regarding call status, termination cause and"]},{"entry":[{},"duration."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In step , the third party call invocation request is translated into one or more signaling protocol calls by the gateway, where the signaling protocol is employed at the telecommunications network level. The translation logic can be encapsulated in the INAP plug-in and can be performed by using the Java INAP API which in turns uses the CommonParts protocol, as previously described.","In step , the gateway can invoke a sequence of signaling protocol calls to the telecommunications network in order to provide third party call functionality to the application. As a non-limiting example, the gateway can invoke the following Java interface calls to the network:",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["InitiateCallAttempt","The makeCall callingPartyNumber actually goes into the"]},{"entry":[{},"destinationRoutingAddress and the calledPartyNumber goes into"]},{"entry":[{},"the callingPartyNumber on the INAP side. This is because"]},{"entry":[{},"InitiateCallAttempt is used to establish a connection with the"]},{"entry":[{},"first party in the call"]},{"entry":["RequestReportBSCMEvent","This invocation reports events such as route failures, busy"]},{"entry":[{},"signals, answers, no answers, disconnects and the like."]},{"entry":["Connect","Uses the parameters of destination routing address and calling"]},{"entry":[{},"party number to connect the call."]},{"entry":["ReleaseCall","Releases a call"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The network can also transmit various requests (e.g. EventReportBCSM invocation) to the gateway in order to inform the gateway about the changes in the call state (e.g. party answered, did not answer, disconnected, etc.) or which call leg was affected by the changes in call state and the like.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5"},"All direct interaction with the Java INAP API can be isolated in a single entity in the INAP plug-in\u2014the CallHandler . As shown, the CallHandler uses the API provided by the INAPProviderFactory  in order to request an INAPProvider  reference with a specific configuration. The factory will create a new instance if it hasn't already been created for the particular configuration, otherwise it will return an existing provider. The plug-in will then create a new dialogue  via the INAPProvider and using that dialogue object, it can start sending transactions to the SS7 stack  and thereby to the operator's network . The inbound transactions are received via callbacks to the INAPListener interface  registered when the INAPProvider reference  is requested by the INAP plug-in.","In various contexts, the embodiments described throughout this disclosure encompass computer apparatus, computing systems and machine-readable media configured to carry out the foregoing methods. In addition to an embodiment consisting of specifically designed integrated circuits or other electronics, the present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure, as will be apparent to those skilled in the computer art.","Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits, as will be readily apparent to those skilled in the art.","The various embodiments also include a computer program product which is a storage medium (media) having instructions stored thereon\/in which can be used to program a general purpose or specialized computing processor(s)\/device(s) to perform any of the features presented herein. The storage medium can include, but is not limited to, one or more of the following: any type of physical media including floppy disks, optical discs, DVDs, CD-ROMs, microdrives, magneto-optical disks, holographic storage, ROMs, RAMs, PRAMS, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs); paper or paper-based media; and any type of media or device suitable for storing instructions and\/or information. The computer program product can be transmitted in whole or in parts and over one or more public and\/or private networks wherein the transmission includes instructions which can be used by one or more processors to perform any of the features presented herein. In various embodiments, the transmission may include a plurality of separate transmissions.","The foregoing description of the preferred embodiments of the present invention has been provided for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations can be apparent to the practitioner skilled in the art. Embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the relevant art to understand the invention. It is intended that the scope of the invention be defined by the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
