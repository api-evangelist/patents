---
title: Component placement tool for printed circuit board
abstract: In one embodiment, creating a layout for a Printed Circuit Board (PCB) by creating n boundary lines at n locations, respectively, on the PCB and placing n sets of electronic components on the n boundary lines, respectively; and iteratively adjusting and evaluating the layout of the PCB until a set of layout requirements for the PCB has been satisfied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08751999&OS=08751999&RS=08751999
owner: Fujitsu Limited
number: 08751999
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20110705
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["This disclosure generally relates to Printed Circuit Board (PCB) layout.","A Printed Circuit Board, or PCB, is used to mechanically support and electrically connect electronic components using conductive channels, tracks, vias, or signal traces etched from metal (e.g., copper) sheets laminated onto a non-conductive substrate. Multiple electronic components may be placed on a PCB. The process of placing the component pads for the electronic components, traces, vias, and other board features on a PCB and creating the floor plan necessary to manufacture the PCB is generally referred to as PCB layout.","A part of the PCB layout process involves creating a floor plan for placing multiple electronic components on a PCB. Often, the various electronic components placed on the same PCB may have different sizes, shapes, or design and performance requirements or constraints. In addition, there may be design or performance requirements or constrains for the PCB as a whole. Examples of these requirements or constraints may include, but not limited to: (1) component alignment (e.g., specific components may need to be lined up horizontally, vertically, or diagonally on the board), (2) component spacing (e.g., a specific amount of space may be required between components), (3) component location (e.g., specific components may need to be placed next to each other), (4) component number (e.g., a specific number of components may need to be placed on the same board), (5) heat air flow (e.g., air can flow efficiently through the PCB in order to cool down the components), (6) wire length matching (e.g., specific wires may be required to have the same length), (7) routability (e.g., all wires should be completely routed), (8) component implementability (e.g., sufficient margin for the manufacture of the PCB), and (9) cost minimization (e.g., minimizing the cost of manufacturing the PCB in terms of material, labor, or success rate).",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1A","FIG. 1B"],"b":["100","110","110","100","110","100","100","110","112","110","100"]},"Traditionally, PCB layout has been done manually (e.g., by layout engineers or technicians). More recently, as the complexity of the PCBs increases, there are various computer-implemented tools (e.g., software applications) that help automate parts of the layout process. Some existing layout tools implement different optimization methods in order to improve the quality of the layouts; however, these optimization methods have various problems. For example, with a top-down layout process, a PCB is first divided into a few larger regions, and then each larger region is repeatedly divided into smaller and smaller regions, until the electronic components can be placed into the individual regions.  illustrates an example layout for PCB . In this case, PCB  is eventually divided into a number of relatively small regions . The boundary of each region  is marked by boundary lines . Different regions  may have different sizes or shapes in order to accommodate different electronic components , which are placed into suitable regions . With the top-down layout process, however, the latter process of optimization in top-down manner is mostly local (e.g., with respect to specific regions of the board) instead of global (e.g., with respect to the entire PCB as a whole). There is little flexibility, and it is often complicated and difficult to control the wire lengths and constraints, routing, and resources with fine-grin grids, because the earlier process should optimize with only rough information of the location of the components, which may have errors, and the latter process should follow the decision made by the earlier process. As another example, with a floor-planning-and-grid-placement layout process, there are too many iterations because if the floor plan is modified, the results of the grid placement in the previous phase (e.g., the previous floor plan) become invalid or obsolete. Some layout processes may work well with small and simple PCBs but have problems for larger and more complex PCBs, while others may lack support for various types of layout information and board features.","Particular embodiments provide a PCB layout process where electronic components are placed on the boundary lines, instead of inside the regions defined by the boundary lines, on a PCB.  illustrates an example layout of PCB . There are a number of boundary lines  (e.g., horizontal or vertical lines) dividing PCB  into a number of regions. However, in contrast to , electronic components  are placed on various boundary lines . Note that one or more electronic components  may be placed on the same horizontal or vertical boundary line .","Given a specific PCB and a specific set of electronic components placed on the PCB, there may be different layouts for creating boundary lines on which the set of electronic components may be placed. For example,  illustrate two alternative layouts of boundary lines  for PCB , which differ from the layout illustrated in .","In particular embodiments, a layout of a PCB, as defined by a set of boundary lines (e.g., ), may be represented by a Slicing Tree, which is a binary tree suitable for representing a slicing floor plan. To briefly explain Slicing Trees in general, consider an example floor plan illustrated in . In this case, an area  is divided into seven regions  by six boundary lines , including four vertical boundary lines -, -, -, - and two horizontal boundary lines -, -. Note that a horizontal boundary line separates a region vertically (e.g., separating the region into a top part and a bottom part), while a vertical boundary line separates a region horizontally (e.g., separating the region into a left part and a right part). Within an area, the number of regions defined by a set of boundary lines equals the number of boundary lines plus one. Thus, if there are n boundary lines, there are n+1 regions defined by the n boundary lines.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 5","FIG. 4","FIG. 5","FIG. 4","FIG. 5","FIG. 4"],"b":["410","520","420","520","1","420","1","520","2","420","2","520","3","420","3","520","4","420","4","520","5","420","5","520","5","420","5"]},"In particular embodiments, for each non-leaf node corresponding to a specific boundary line, its two children are the two parts separated by the corresponding boundary line. For example, in , horizontal boundary line - separates area  into a top part and a bottom part. The top part includes regions - to - defined by boundary lines - to -. The bottom part includes region -. In , node - corresponds to horizontal boundary line -. Its left child includes leaf node , which corresponds to region -, and its right child includes leaf nodes - and non-leaf nodes - to -, which correspond to regions - to - defined by boundary lines - to -. As another example, in , vertical boundary line - separates regions - and -. In , non-leaf node - corresponds to vertical boundary line -. Its left child includes leaf node  corresponding to region -; and its right child includes leaf node  corresponding to region -. In particular embodiments, any slicing floor plan may be similarly represented by a suitable Slicing Tree.","In particular embodiments, a Slicing Tree may be represented by a Polish Expression or Reverse Polish Expression, which is a form of logical, arithmetic, or algebraic expression. With a Polish Expression, each operator is placed to the left of its operands; and with a Reverse Polish Expression, each operator is placed to the right of its operands.  illustrates an example binary tree. Node Z has two children: X and Y, which may or may not be leaf nodes. To represent such a binary tree using a Polish Expression or Reverse Polish Expression, in particular embodiments, a parent (i.e., non-leaf) node is considered an operator, and its two children are considered the two operands of the operator. Thus, the Reverse Polish Expression representing the binary tree illustrated in  is \u201cPolish(X), Polish (Y), Z\u201d. Note that the two children, X and Y, may or may not be leaf nodes. If a child is a leaf node, then its Polish Expression or Reverse Polish Expression is the value of the leaf node. If a child is a non-leaf node, then the same logic may be applied to obtain the Polish Expression or Reverse Polish Expression of the non-leaf node.","Similarly, the Slicing Tree illustrated in  may be represented by the Reverse Polish Expression \u201c7, 1, 2, V, 3, 6, 4, 5, V, H, V, V, H\u201d. For easy readability, it may be clearer to divide this Reverse Polish Expression into segments using brackets (e.g., \u201c[\u201d and \u201c]\u201d) as \u201c[7, [[1, 2, V], [3, [6, [4, 5, V], H], V], V], H]\u201d. In this expression, the segment \u201c[4, 5, V]\u201d corresponds to node - and its two children \u201c4\u201d and \u201c5\u201d, with \u201cV\u201d being the operator and \u201c4\u201d and \u201c5\u201d being the two operands. The segment \u201c[6, [4, 5, V], H]\u201d corresponds to node - and its two children \u201c6\u201d and \u201c[4, 5, V]\u201d, with \u201cH\u201d being the operator and \u201c6\u201d and \u201c[4, 5, V]\u201d being the two operands. The segment \u201c[3, [6, [4, 5, V], H], V]\u201d corresponds to node - and its two children \u201c3\u201d and \u201c[6, [4, 5, V], H]\u201d, with the last \u201cV\u201d being the operator. The segment \u201c[1, 2, V]\u201d corresponds to node - and its two children \u201c1\u201d and \u201c2\u201d, with \u201cV\u201d being the operator and \u201c1\u201d and \u201c2\u201d being the two operands. The segment \u201c[[1, 2, V], [3, [6, [4, 5, V], H], V], V]\u201d corresponds to node - and its two children \u201c[1, 2, V]\u201d and \u201c[3, [6, [4, 5, V], H], V]\u201d, with the last \u201cV\u201d being the operator. The whole expression \u201c7, 1, 2, V, 3, 6, 4, 5, V, H, V, V, H\u201d corresponds to node - (i.e., the root) and its two children \u201c7\u201d and \u201c[[1, 2, V], [3, [6, [4, 5, V], H], V], V]\u201d, with the last \u201cH\u201d being the operator.","In case of a Polish Expression or Reverse Polish Expression representing a Slicing Tree, there are two types of operators: \u201cV\u201d corresponding to a vertical boundary line, and \u201cH\u201d corresponding to a horizontal boundary line. A skewed Slicing Tree corresponds to a Polish Expression or Reverse Polish Expression where no two consecutive operators (e.g., \u201cH\u201d or \u201cV\u201d) in the expressions are of the same type.","As illustrated in , a PCB may be divided into multiple regions with a set of boundary lines. In particular embodiments, one or more electronic components may be placed on each boundary line.  illustrates an example PCB . An example layout has been created for PCB  that includes five horizontal boundary lines -H to -H and three vertical boundary lines -V to -V (i.e., a total of eight boundary lines). A set of electronic components may be placed on each boundary line . In particular embodiments, each set of electronic components placed on a single boundary line  may include one or more electronic components. If there are n boundary lines, then there are n sets of electronic components. In the case illustrated in , there are eight boundary lines, and thus there are eight sets of electronic components - to -.","In particular embodiments, a PCB layout, such as the one illustrated in , may be represented by a Slicing Tree.  illustrates an example Slicing Tree that represents the layout illustrated in . Each non-leaf node in  corresponds to a horizontal or vertical boundary line  in  (e.g., node \u201cH\u201d corresponds to horizontal boundary line -H; node \u201cV\u201d corresponds to vertical boundary line -V; and so on). Each leaf node in , except one (i.e., node \u201cX\u201d), corresponds to a set of electronic components  placed on a boundary line  in  (e.g., node \u201c1\u201d corresponds to component set -; node \u201c2\u201d corresponds to component set -; and so on). As explained above, since a Slicing Tree is a binary tree used to represent a slicing floor plan, the number of leaf nodes equals the number of non-leaf nodes plus one. The non-leaf nodes correspond to the boundary lines, and the leaf nodes correspond to the sets of electronic components placed on the boundary lines. Since the number of sets of electronic components placed on the boundary lines necessarily equals the number of boundary lines, there is one leaf node in the Slicing Tree that does not correspond to a set of electronic components. In particular embodiments, this extra leaf node is considered a dummy node (e.g., a mere place holder). In , leaf node \u201cX\u201d is the dummy node that does not correspond to any set of electronic components.","In particular embodiments, a Slicing Tree may be represented by a Polish Expression or Reverse Polish Expression. For example, the Reverse Polish Expression representing the Slicking Tree illustrated in  is \u201cX, 1, H, , V, , , H, , , , , H, V, H, V, H\u201d.","In particular embodiments, when a PCB layout is represented by a Slicing Tree, the layout may be modified by adjusting the positions of the nodes, leaf or non-leaf, in the Slicing Tree. Similarly, when a PCB layout is represented by a Polish Expression or Reverse Polish Expression, the layout may be modified by adjusting the positions of the operands or operators in the expression. For example, particular embodiments may (1) swap two adjacent operands in a Polish or Reverse Polish Expression, or swap two adjacent leaf nodes in a Slicing Tree; (2) take a chain of consecutive operators in a Polish or Reverse Polish Expression (e.g., HVHV) and complement it (e.g., VHVH); (3) swap an adjacent operator and operand while ensuring that the Slicing Tree remains a skewed tree.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 9","b":"902"},"Particular embodiments may divide the electronic components that need to be placed on the PCB into n sets, where each set may include one or more of the electronic components. Particular embodiments may create n boundary lines at n locations, respectively, on the PCB and place the n sets of components on the n boundary lines, respectively. There are various ways to place the n boundary lines, and thus the n sets of components, on the PCB. In particular embodiments, the initial n locations for the n boundary lines may be chosen randomly. The n boundary lines form a layout for the PCB with respect to the n sets of electronic components. Particular embodiments may represent the n boundary lines and the n sets of electronic components using a Slicing Tree or a Polish or Reverse Polish Expression, as described above.","Particular embodiments may then iteratively adjust the locations of one or more boundary lines, until a set of design, performance, or manufacture requirements or constrains for the layout is satisfied. Since a set of electronic components is placed on each boundary line, when a boundary line is moved from one location to another location on the PCB, the corresponding set of electronic components is also moved from the first location to the second locations.","In particular embodiments, the iterative process of adjusting the locations of the boundary lines, and thus the locations of the component sets, may be implemented based on Simulated Annealing (SA). SA is a generic probabilistic metaheuristic for the global optimization problem of locating a good approximation to the global optimum of a given function in a large search space.","Applying SA to the present iterative process, particular embodiments may initialize scheduling and status prior to starting the iterations, as illustrated in STEP . The following illustrates an example pseudo code for the initialization step:",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ T_i is the initial temperature."]},{"entry":[{},"T_i = 100;"]},{"entry":[{},"\/\/ T_f is the final temperature, which is"]},{"entry":[{},"\/\/ the stopping condition for the iterative process."]},{"entry":[{},"T_f = 0;"]},{"entry":[{},"\/\/ During each iteration, the current temperature"]},{"entry":[{},"\/\/ is decreased by T_step."]},{"entry":[{},"T_step = 0.1;"]},{"entry":[{},"\/\/ MCL is the length of Markov chains."]},{"entry":[{},"MCL = 100;"]},{"entry":[{},"\/\/ MCL_current is the length of the current Markov chains."]},{"entry":[{},"MCL_current = 0;"]},{"entry":[{},"[initialize the seed of random value generating function];"]},{"entry":[{},"\/\/ P_best and C_best relate to the best layout solution"]},{"entry":[{},"\/\/ for the PCB."]},{"entry":[{},"P_best = NULL;"]},{"entry":[{},"C_best = INFINITY;"]},{"entry":[{},"\/\/ P_current is the current Polish or Reverse Polish"]},{"entry":[{},"\/\/ Expression representing the current layout of the"]},{"entry":[{},"\/\/ PCB during each iteration."]},{"entry":[{},"P_current = [initial layout of the PCB];"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"After initializing the variables, particular embodiments may start the iterative process. STEPS - may be repeated during each iteration.","During a specific iteration, particular embodiments may generate a floor plan structure, as illustrated in STEP . The floor plan is defined by the boundary lines and where these boundary lines are located on the PCB. Thus, when some of the boundary lines are moved (e.g., during a particular iteration), the floor plan changes. The floor plan, in fact, indicates the layout of the PCB. The current floor plan, or the current layout, of the PCB is represented by \u201cP_current\u201d. The following illustrates an example pseudo code for the floor-plan-structure-generation step:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"V = [read first vertex from P_current];"]},{"entry":[{},"while (V != NULL) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If V == [leaf node] {","\/\/ V is a leaf node"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[push V into stack S1];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {","\/\/ V is a non-leaf node"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[push V into stack S2];"]},{"entry":[{},"if V == [vertical boundary line] {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[create vertical slicing line at V.Ratio];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {","\/\/ V is horizontal boundary line"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[create horizontal slicing line at V.Ratio];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"V = [read next vertex from P_current];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Particular embodiments may allocate the electronic components, as illustrated in STEP . The following illustrates an example pseudo code for the component-allocation step:",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ discard the dummy leaf node"]},{"entry":[{},"[pop first vertex from S1];"]},{"entry":[{},"V_leaf = [pop next vertex from S1];"]},{"entry":[{},"while (V_leaf != NULL) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"V_slice = [pop next vertex from S2];"]},{"entry":[{},"[allocate all components in CompGroupTable indexed by"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"V_leaf.index];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"V_leaf = [pop next vertex from S1];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Particular embodiments may compute the cost of the current layout, as illustrated in STEP . The following illustrates an example pseudo code for the cost-calculation step:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[execute routing estimation program to extract the cost of"]},{"entry":[{},"wire length (C_w) and routing violation (C_v)];"]},{"entry":[{},"[evaluate the constraints to extract the cost of"]},{"entry":[{},"constraints (C_c)];"]},{"entry":[{},"\/\/ compute the current cost for the current layout"]},{"entry":[{},"C_current = C_w + C_v + C_c;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"902"},"Particular embodiments may evaluate the current layout, as illustrated in STEP . The following illustrates an example pseudo code for the evaluation step:",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (random( ) < A(C_best, C_current, T_i) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P_best = P_current;"]},{"entry":[{},"C_best = C_current;"]},{"entry":[{},"MCL = 0;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MCL_current++;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0045","num":"0044"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"A","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["E","T"],"mo":[",",","],"msup":{"mi":["E","\u2032"]}}}},{"mo":"{","mtable":{"mtr":[{"mtd":[{"mn":"1"},{"mrow":{"mrow":{"mi":["if","\u0394","E"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]},"mo":"<","mn":"0"}}]},{"mtd":[{"msup":{"mi":"\u2147","mrow":{"mo":["(",")"],"mrow":{"mo":"-","mfrac":{"mrow":{"mi":["\u0394","E"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},"mi":"T"}}}}},{"mi":"otherwise"}]}]}}],"mo":"="}}}},"Particular embodiments may update the scheduling and status, as illustrated in STEP . The following illustrates an example pseudo code for the updating step:",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (MCL_current >= MCL) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MCL_current = 0;"]},{"entry":[{},"\/\/ Decrease the current temperature by \u201cT_step\u201d."]},{"entry":[{},"T_i = T_i \u2212 T_step;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if (T_i <= T_f) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Current temperature is at or below \u201cT_f\u201d;"]},{"entry":[{},"\/\/ end the iterative process."]},{"entry":[{},"exit;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[randomly choose one of the following operations and"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"apply to P_current:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(1) swap the order of two vertexes chosen"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"randomly;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(2) swap two sets of components chosen randomly;"]},{"entry":[{},"(3) move a component chosen randomly to a"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"different set chosen randomly; and"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(4) change the ratio of a vertex chosen randomly"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"to a random value between 0 and 1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In the above example implementation, the iterative process, including STEPS -, is repeated until the initial temperature \u201cT_i\u201d is gradually decreased, by the amount of \u201cT_step\u201d during each iteration, and reaches the final temperature \u201cT_f\u201d. The layout represented by \u201cP_best\u201d and \u201cC_best\u201d obtained after completing the iterative process is the resulting layout for the PCB.","Particular embodiments may be implemented on one or more computer systems. For example, the PCB layout process illustrated in  may be implemented as computer software stored in non-transient computer-readable medium.  illustrates an example computer system . In particular embodiments, one or more computer systems  perform one or more steps of one or more methods described or illustrated herein. In particular embodiments, one or more computer systems  provide functionality described or illustrated herein. In particular embodiments, software running on one or more computer systems  performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .","This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system  taking any suitable physical form. As example and not by way of limitation, computer system  may be an embedded computer system, a system-on-chip (SOC), a single-board computer system (SBC) (such as, for example, a computer-on-module (COM) or system-on-module (SOM)), a desktop computer system, a laptop or notebook computer system, an interactive kiosk, a mainframe, a mesh of computer systems, a mobile telephone, a personal digital assistant (PDA), a server, or a combination of two or more of these. Where appropriate, computer system  may include one or more computer systems ; be unitary or distributed; span multiple locations; span multiple machines; or reside in a cloud, which may include one or more cloud components in one or more networks. Where appropriate, one or more computer systems  may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation, one or more computer systems  may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems  may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein, where appropriate.","In particular embodiments, computer system  includes a processor , memory , storage , an input\/output (I\/O) interface , a communication interface , and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement, this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.","In particular embodiments, processor  includes hardware for executing instructions, such as those making up a computer program. As an example and not by way of limitation, to execute instructions, processor  may retrieve (or fetch) the instructions from an internal register, an internal cache, memory , or storage ; decode and execute them; and then write one or more results to an internal register, an internal cache, memory , or storage . In particular embodiments, processor  may include one or more internal caches for data, instructions, or addresses. This disclosure contemplates processor  including any suitable number of any suitable internal caches, where appropriate. As an example and not by way of limitation, processor  may include one or more instruction caches, one or more data caches, and one or more translation lookaside buffers (TLBs). Instructions in the instruction caches may be copies of instructions in memory  or storage , and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory  or storage  for instructions executing at processor  to operate on; the results of previous instructions executed at processor  for access by subsequent instructions executing at processor  or for writing to memory  or storage ; or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual-address translation for processor . In particular embodiments, processor  may include one or more internal registers for data, instructions, or addresses. This disclosure contemplates processor  including any suitable number of any suitable internal registers, where appropriate. Where appropriate, processor  may include one or more arithmetic logic units (ALUs); be a multi-core processor; or include one or more processors . Although this disclosure describes and illustrates a particular processor, this disclosure contemplates any suitable processor.","In particular embodiments, memory  includes main memory for storing instructions for processor  to execute or data for processor  to operate on. As an example and not by way of limitation, computer system  may load instructions from storage  or another source (such as, for example, another computer system ) to memory . Processor  may then load the instructions from memory  to an internal register or internal cache. To execute the instructions, processor  may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions, processor  may write one or more results (which may be intermediate or final results) to the internal register or internal cache. Processor  may then write one or more of those results to memory . In particular embodiments, processor  executes only instructions in one or more internal registers or internal caches or in memory  (as opposed to storage  or elsewhere) and operates only on data in one or more internal registers or internal caches or in memory  (as opposed to storage  or elsewhere). One or more memory buses (which may each include an address bus and a data bus) may couple processor  to memory . Bus  may include one or more memory buses, as described below. In particular embodiments, one or more memory management units (MMUs) reside between processor  and memory  and facilitate accesses to memory  requested by processor . In particular embodiments, memory  includes random access memory (RAM). This RAM may be volatile memory, where appropriate. Where appropriate, this RAM may be dynamic RAM (DRAM) or static RAM (SRAM). Moreover, where appropriate, this RAM may be single-ported or multi-ported RAM. This disclosure contemplates any suitable RAM. Memory  may include one or more memories , where appropriate. Although this disclosure describes and illustrates particular memory, this disclosure contemplates any suitable memory.","In particular embodiments, storage  includes mass storage for data or instructions. As an example and not by way of limitation, storage  may include an HDD, a floppy disk drive, flash memory, an optical disc, a magneto-optical disc, magnetic tape, or a Universal Serial Bus (USB) drive or a combination of two or more of these. Storage  may include removable or non-removable (or fixed) media, where appropriate. Storage  may be internal or external to computer system , where appropriate. In particular embodiments, storage  is non-volatile, solid-state memory. In particular embodiments, storage  includes read-only memory (ROM). Where appropriate, this ROM may be mask-programmed ROM, programmable ROM (PROM), erasable PROM (EPROM), electrically erasable PROM (EEPROM), electrically alterable ROM (EAROM), or flash memory or a combination of two or more of these. This disclosure contemplates mass storage  taking any suitable physical form. Storage  may include one or more storage control units facilitating communication between processor  and storage , where appropriate. Where appropriate, storage  may include one or more storages . Although this disclosure describes and illustrates particular storage, this disclosure contemplates any suitable storage.","In particular embodiments, I\/O interface  includes hardware, software, or both providing one or more interfaces for communication between computer system  and one or more I\/O devices. Computer system  may include one or more of these I\/O devices, where appropriate. One or more of these I\/O devices may enable communication between a person and computer system . As an example and not by way of limitation, an I\/O device may include a keyboard, keypad, microphone, monitor, mouse, printer, scanner, speaker, still camera, stylus, tablet, touch screen, trackball, video camera, another suitable I\/O device or a combination of two or more of these. An I\/O device may include one or more sensors. This disclosure contemplates any suitable I\/O devices and any suitable I\/O interfaces  for them. Where appropriate, I\/O interface  may include one or more device or software drivers enabling processor  to drive one or more of these I\/O devices. I\/O interface  may include one or more I\/O interfaces , where appropriate. Although this disclosure describes and illustrates a particular I\/O interface, this disclosure contemplates any suitable I\/O interface.","In particular embodiments, communication interface  includes hardware, software, or both providing one or more interfaces for communication (such as, for example, packet-based communication) between computer system  and one or more other computer systems  or one or more networks. As an example and not by way of limitation, communication interface  may include a network interface controller (NIC) or network adapter for communicating with an Ethernet or other wire-based network or a wireless NIC (WNIC) or wireless adapter for communicating with a wireless network, such as a WI-FI network. This disclosure contemplates any suitable network and any suitable communication interface  for it. As an example and not by way of limitation, computer system  may communicate with an ad hoc network, a personal area network (PAN), a local area network (LAN), a wide area network (WAN), a metropolitan area network (MAN), or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example, computer system  may communicate with a wireless PAN (WPAN) (such as, for example, a BLUETOOTH WPAN), a WI-FI network, a WI-MAX network, a cellular telephone network (such as, for example, a Global System for Mobile Communications (GSM) network), or other suitable wireless network or a combination of two or more of these. Computer system  may include any suitable communication interface  for any of these networks, where appropriate. Communication interface  may include one or more communication interfaces , where appropriate. Although this disclosure describes and illustrates a particular communication interface, this disclosure contemplates any suitable communication interface.","In particular embodiments, bus  includes hardware, software, or both coupling components of computer system  to each other. As an example and not by way of limitation, bus  may include an Accelerated Graphics Port (AGP) or other graphics bus, an Enhanced Industry Standard Architecture (EISA) bus, a front-side bus (FSB), a HYPERTRANSPORT (HT) interconnect, an Industry Standard Architecture (ISA) bus, an INFINIBAND interconnect, a low-pin-count (LPC) bus, a memory bus, a Micro Channel Architecture (MCA) bus, a Peripheral Component Interconnect (PCI) bus, a PCI-Express (PCI-X) bus, a serial advanced technology attachment (SATA) bus, a Video Electronics Standards Association local (VLB) bus, or another suitable bus or a combination of two or more of these. Bus  may include one or more buses , where appropriate. Although this disclosure describes and illustrates a particular bus, this disclosure contemplates any suitable bus or interconnect.","Herein, reference to a computer-readable storage medium encompasses one or more non-transitory, tangible computer-readable storage media possessing structure. As an example and not by way of limitation, a computer-readable storage medium may include a semiconductor-based or other integrated circuit (IC) (such, as for example, a field-programmable gate array (FPGA) or an application-specific IC (ASIC)), a hard disk, an HDD, a hybrid hard drive (HHD), an optical disc, an optical disc drive (ODD), a magneto-optical disc, a magneto-optical drive, a floppy disk, a floppy disk drive (FDD), magnetic tape, a holographic storage medium, a solid-state drive (SSD), a RAM-drive, a SECURE DIGITAL card, a SECURE DIGITAL drive, or another suitable computer-readable storage medium or a combination of two or more of these, where appropriate. Herein, reference to a computer-readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. \u00a7101. Herein, reference to a computer-readable storage medium excludes transitory forms of signal transmission (such as a propagating electrical or electromagnetic signal per se) to the extent that they are not eligible for patent protection under 35 U.S.C. \u00a7101. A computer-readable non-transitory storage medium may be volatile, non-volatile, or a combination of volatile and non-volatile, where appropriate.","This disclosure contemplates one or more computer-readable storage media implementing any suitable storage. In particular embodiments, a computer-readable storage medium implements one or more portions of processor  (such as, for example, one or more internal registers or caches), one or more portions of memory , one or more portions of storage , or a combination of these, where appropriate. In particular embodiments, a computer-readable storage medium implements RAM or ROM. In particular embodiments, a computer-readable storage medium implements volatile or persistent memory. In particular embodiments, one or more computer-readable storage media embody software. Herein, reference to software may encompass one or more applications, bytecode, one or more computer programs, one or more executables, one or more instructions, logic, machine code, one or more scripts, or source code, and vice versa, where appropriate. In particular embodiments, software includes one or more application programming interfaces (APIs). This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments, software is expressed as source code or object code. In particular embodiments, software is expressed in a higher-level programming language, such as, for example, C, Perl, or a suitable extension thereof. In particular embodiments, software is expressed in a lower-level programming language, such as assembly language (or machine code). In particular embodiments, software is expressed in JAVA, C, or C++. In particular embodiments, software is expressed in Hyper Text Markup Language (HTML), Extensible Markup Language (XML), or other suitable markup language.","Herein, \u201cor\u201d is inclusive and not exclusive, unless expressly indicated otherwise or indicated otherwise by context. Therefore, herein, \u201cA or B\u201d means \u201cA, B, or both,\u201d unless expressly indicated otherwise or indicated otherwise by context. Moreover, \u201cand\u201d is both joint and several, unless expressly indicated otherwise or indicated otherwise by context. Therefore, herein, \u201cA and B\u201d means \u201cA and B, jointly or severally,\u201d unless expressly indicated otherwise or indicated otherwise by context.","This disclosure encompasses all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly, where appropriate, the appended claims encompass all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Moreover, reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to, arranged to, capable of, configured to, enabled to, operable to, or operative to perform a particular function encompasses that apparatus, system, component, whether or not it or that particular function is activated, turned on, or unlocked, as long as that apparatus, system, or component is so adapted, arranged, capable, configured, enabled, operable, or operative."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
