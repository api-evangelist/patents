---
title: Power management in a device
abstract: Implementations of power management in a device are described. The device includes a power driver configured to manage power supply to one or more components in system-on-chip (SOC) hardware. The device further includes power subsystems configured as drivers for controlling the components of the SOC hardware and a user interface configured to receive a selected power mode as an input and identify profiles of one or more applications being executed in the device. Based on the selected power mode, the power driver directs the power subsystems to change a mode of operation of at least one component determined from the profiles of the one or more applications being executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189049&OS=09189049&RS=09189049
owner: STMICROELECTRONICS INTERNATIONAL N.V.
number: 09189049
owner_city: Amsterdam
owner_country: NL
publication_date: 20091221
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATION","FIELD OF THE INVENTION","RELEVANT BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The present application claims priority of Indian Patent Application No. 2937\/DEL\/2008 filed Dec. 24, 2008, which is incorporated herein in its entirety by this reference.","The subject matter described herein, in general, relates to power management and in particular, relates to managing power consumption in a device.","Electronic devices, such as home entertainment devices and personal communication devices, are provided with multiple functionalities to enhance user experience. However, increase in functionalities has led to an increase in the complexity as well as power consumption of these devices. For example, in home entertainment devices, such as a set top box, adding the High Definition (HD) functionality would increase the overall power consumption by 5 to 10 Watts (W) as HD video content requires more picture information to be processed. The HD functionality would also require an increase in the hard disk recording capabilities or a digital video recorder (DVR) functionality, which would further contribute to about 10 W of power usage.","With growing awareness about the necessity for energy conservation, various regulatory authorities and standards committees across the globe are making it mandatory for manufacturers of electronic devices to reduce power consumption of devices, especially when the devices are operating in standby modes. Accordingly, European Union Code of Conduct has defined two types of standby modes: active and passive. In the active standby mode, some drivers of an electronic device keep receiving power while others are cut-off from the power supply, thus saving marginal power. On the other hand, in the passive standby mode, all the drivers are cut-off from the power supply, thus saving considerably more power than that in the active mode, however, causing high latency in resumption of the device. The high latency is faced because the time taken to initialize device clocks and processors, on re-starting from the passive standby mode, is high.","Apart from defining the modes, the standards committees have also specified power consumption norms for each of the standby modes. For example, the European Union Code of Conduct requires that the active standby power consumption for digital cable boxes, set top boxes, and multi function boxes, is limited to a value of between 9-12 W and passive standby power consumption is limited to a value less than 6 W.","This summary is provided to introduce power management for devices, such as set top boxes, digital video disc (DVD) players, and digital television. These concepts are further described below in the detailed description. The summary is not intended to identify essential features of the claimed subject matter nor is it intended for use in determining the scope of the claimed subject matter.","In one embodiment, a device is provided with one or more power modes for managing the power consumed by the device. The device includes power subsystems configured as drivers for controlling the components of a system-on-chip (SOC) hardware present in the device. A user interface provided in the device receives an input of the selected power mode and identifies profiles of one or more applications being executed in the device. Based on the selected power mode, a power driver directs the power subsystems to change a mode of operation of at least one component of the SOC hardware determined from the profiles of the one or more applications being executed.","The disclosed subject matter relates to systems and methods for power management in a device such as a home entertainment (HE) device. The systems and methods described herein further relate to reduction of power consumption during an active standby mode and a passive standby mode. Further, the passive standby mode has low latency during suspension and resumption of control.","In one implementation, the active standby mode corresponds to a mode of operation of the HE device where the user may perceive the HE device to be switched off, but the HE device may still be functioning, for example, exchanging data, as the HE device is still plugged in. In this mode of operation, power is provided to components that are functioning while the rest of the components are placed in a low power mode, thereby reducing the power consumption on the whole.","For example, when an application of the HE device receives a request for placing the device in an active standby power mode, the application can instruct a power driver to place the HE device in the active standby mode. For the purpose, the power driver determines a desired profile for the application. In one implementation, a profile can include a list of the drivers and states in which the drivers are to be set for a particular application. The drivers are programs designed to control various components of the HE device.","Based on the determined profile, the power driver invokes callback functions of various drivers, and function calls for operating system (OS) supported components of the HE device that have OS power management support. Further, the power driver also invokes callback functions for the OS supported components of the HE device that do not have OS power management support. On execution of the callback functions, the drivers can place their components and clocks in a low power mode and terminate any running application, thus consuming minimal power. Similarly, on execution of the function calls, OS drivers can suspend the usage of OS supported components and place them in a low power mode, thus consuming minimal power. In one implementation, the power driver can place common clocks, such as clocks associated with a host processor, or co-processor clocks in a scaled down or off mode, thus consuming minimal power.","In another scenario, when the HE device is placed in the passive standby mode, all the services associated with the HE device are disengaged. In one implementation, before placing the HE device in the passive standby mode, data associated with the state of the HE device can be stored in the device memory. The stored data, referred to as state data, corresponds to the state of the HE device just before it was placed in the passive standby mode. Also, while in the passive standby mode, the memory can be placed in a self-refresh mode so that the state data is available for low latency recovery, thus ensuring that the system does not have to be re-initialized to be brought into either an active mode, i.e., a fully functional mode, or the active standby mode. The HE device, when required by the user, can go back into the active mode by fetching the state data and restoring the HE device to a state corresponding to the fetched data. The HE device, for example, a set-top box, can be returned to the active mode by using a remote controller or a front panel button on the HE device.","Thus, the power management system described herein provides low latency during suspension or resumption of control from standby modes and also decreases power consumption during the standby modes.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","100","100"]},"In one embodiment, the HE device  can include an input feed  for receiving signals such as audio-video signals, infrared signals, Ethernet signals, and wireless links, for example Bluetooth signals from a source, such as a cable, a satellite dish or an antenna. The HE device  also includes input\/output (I\/O) interfaces , such as interface cards, for allowing other components of the HE device  to send and receive signals through the input feed . The HE device  further includes analog processor(s)  for controlling analog components of the HE device . In one implementation, the analog processor(s)  can include a single processing unit or a number of processing units.","The HE device  further includes digital signal processors (DSPs)  for processing digital signals sent and received by the HE device . The processing may include, for example, compressing, decompressing, and shaping the digital signals. These digital signals may be received either from the input feed  and transferred to the DSPs  through the input\/output (I\/O) interfaces , or may be generated in the HE device . The HE device  also includes a de-modulator , a de-multiplexer , a battery or power supply unit , and other hardware (H\/W) components . The other H\/W components  may include hardware that are required for performing additional functions associated with the HE device , for example, analog to digital converters (ADC), digital to analog converters (DAC), power controllers, and the like.","The analog processor(s)  and the DSPs  are configured to fetch and execute instructions from a device memory . The device memory  includes a power driver  for managing the supply of power to the other H\/W components  and other components, such as the de-modulator  and the de-multiplexer , which are part of a system-on-chip hardware (not shown in the figure). The power driver  can manage the supply of power to place the HE device  in a particular power mode such as an active mode, an active standby mode, and a passive standby mode.","In one implementation, the active mode is a fully functional mode, where all the components of the of the HE device  are functional and supplied with power. The active standby mode corresponds to a mode of operation of the HE device , where power is supplied to those components that are functioning while the rest of the components are powered down, thereby reducing the overall power consumption. Whereas, in the passive standby mode, all the services associated with the HE device  are disengaged.","The device memory  also includes a clock driver  that provides clock signals to IP cores and various components, collectively referred to as components, of the HE device . Further, the device memory  includes a profile registry , applications , an operating system (OS) , and other programs and data . The OS  is typically a set of programs used to maintain and execute programs related to the HE device .","The applications  are a set of programs used for performing different functions of the HE device  such as playing or recording audio and video files, accessing the Internet, and so on. Each of the applications  is associated with one or more profiles (not shown in this figure). Each profile includes a list of drivers and the states of the drivers for the execution of the application  with which the profile is associated. The drivers are programs designed to control various components of the HE device .","The applications  register their profiles with the power driver  by making a profile entry in the profile registry . In one implementation, the applications  register their profiles when the applications  are used for the first time. The applications  make a profile registration call to the power driver  for making the profile entry. On receiving the profile registration call, the power driver  generates profile IDs for the profiles associated with each of the applications . Further, the power driver  stores the respective profiles of the applications  along with their profile IDs in the profile registry  and returns the profile IDs to the applications .","Through these profile IDs, the applications  can communicate a profile, to be set, to the power driver . For example, an application for performing recording can have one profile for recording an audio broadcast and one profile for recording both the audio and video broadcast. Both the profiles will include all components related to audio\/video broadcast; however, they may be set at different states of operation. In both the cases, the power driver  will invoke related drivers for performing the desired application. For example, in response to a request for recording only the audio broadcast, the power driver  can invoke call back functions so that only the audio drivers function normally while other drivers are scaled down or switched off depending on the profile settings. For example, in response to the callback functions, a clock (not shown in the figure) associated with the other drivers is scaled down to a low frequency or switched off, and the components not required for recording the audio broadcast are powered off.","In another implementation, the power driver  can also use operating system (OS) function calls for OS drivers (not shown in this figure). The OS drivers suspend the usage of OS supported components and place them in a low power mode, thus providing for minimum power consumption. In case the OS  does not support low power modes, then the power driver  handles the OS supported component itself. In such cases, the OS  is requested to suspend the usage of the components required for recording video broadcast. Once suspended, the power driver  powers off these components. Thus, the power driver  can set components and associated clock domains in the states mentioned in a particular profile.","In operation, the HE device  can receive an input, such as a power mode input, for control suspension (i.e., going into a standby mode) or control resumption (i.e., going into the active mode). The input can be received from a user or a broadcaster, for example, via a remote control, a device front panel, a satellite signal, an Ethernet connection, or a wireless link such as a Bluetooth signal. Accordingly, the power driver  sets various components in a state desired by the received input. Such a state is set based on the profiles, registered and stored in the profile registry , corresponding to the applications  associated with the received input.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["200","100","100","202","204","104","206","116","206","206","120","208","120","100","206"]},"The control unit , based on the signal from the power driver , individually switches ON or OFF the power supply of different IPs, such as the device chip , a memory chip , and other hardware components , all being a part of a system-on-chip (SOC) hardware (not shown in this figure). In one implementation of the above embodiment, the device chip  may include the clock driver , the profile registry , the applications , the DSPs , the de-multiplexer , and the de-modulator .","To achieve low latency, especially when in the passive standby mode, the power driver  uses the memory chip . The memory chip  can be a Double-Data-Rate Synchronous Dynamic Random Access Memory, also known as DDR SDRAM or DDR RAM. On receiving a request for initiating the passive standby mode, the power driver  saves, in the memory chip , the state data of applications being currently run by various processors. The state data is stored so that the applications can resume from the stage at which they were suspended. After saving the state data, the power driver  requests the control unit  to switch off the power supply of the complete SOC hardware except the memory chip . The functioning of the power driver  is explained in detail with reference to  below.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["300","100","300","302","304","306","120"]},"The application\/user interface , hereinafter referred to as user interface, includes the applications  and acts as an interface between the power driver  and the control unit . The user interface  can receive inputs, such as selected power mode inputs from various sources, such as from a user via a remote control or a device front panel, a satellite signal from a broadcaster, an Ethernet connection, or a wireless link such as a Bluetooth signal. The user interface  can also provide prompts and information to the user through the control unit . The middleware  and the middleware wrapper  are used to abstract functionalities of the HE device  as is known in the art.","The middleware  and the middleware wrapper  are used to isolate applications  from the details of the underlying network and hardware components. This considerably reduces the complexity of content development because the applications  can be written to take advantage of a common interface. In one implementation, the middleware  and the middleware wrapper  provide an interface between the applications  and the power driver .","The power driver  manages power supply and functioning of individual components of system-on-chip (SOC) hardware  through the control unit  and various power subsystems . The various power subsystems  are configured as drivers for controlling the SOC hardware . The various subsystems include a Dmod subsystem -, audio subsystem -, video subsystem -, transport subsystem -, and peripheral and communication subsystem -, collectively referred to as subsystems . In addition, the power driver  also manages power supply to the clock driver .","The various subsystems  and the clock driver  correspond to software drivers, which in turn control the components present on the SOC hardware , such as corresponding IPs, the device chip , and the other hardware components . The corresponding IPs on SOC hardware  can include Dmod IP -, audio IP -, video IP -, transport IP -, peripherals IP -, hereinafter collectively referred to as IPs, and clock domains -. The SOC hardware  further includes host CPU and system services , hereinafter referred to as host processor(s), co-processor(s) , and may include the memory chip  in one embodiment. In one embodiment, the components in the SOC hardware  are designed to operate at multiple power voltage and frequency levels.","The power driver  is configured to direct the power subsystems  to change a mode of operation of the components of the SOC hardware based on the selected power mode input. In one embodiment, the mode of operation may be selected from an ON mode and the low power mode. The subsystems  may also include customized drivers and drivers that are a part of the OS . The OS drivers are used for controlling components supported by the OS , hereinafter referred to as OS supported components. For example, in Linux, the Ethernet driver is a part of the OS. Also, for the customized drivers, the power driver  may interface directly by registration and call back functions. For the drivers of the OS supported components, if the OS  supports power management, the power driver  uses their exposed application programming interfaces (APIs); otherwise, the power driver  can implement the low power modes for the OS supported components not having OS power management support.","The clock driver  manages the clocks of the SOC hardware , by either scaling down or switching off the clocks. The clock driver  first determines whether the clock domains - are shared between different components or are dedicated exclusively to a particular component. If a clock is shared, then the clock driver  conforms, by sending callback functions, from all the components sharing the clock before switching off or scaling down the clock.","For example, if a subsystem  wants to scale down or switch off its clock and the clock is a shared clock, then the power driver will send callback functions to all the components sharing the clock. If all the components sharing the clock agree, then the power driver  will scale down the clock, i.e., decrease its working frequency, or place the clock in the low power mode depending on the request made by the driver.","If the clock is exclusive to the driver, then the power driver  will switch off or scale down the clock directly. On the other hand, if a driver requests for enabling a clock, then the power driver  simply enables the clock irrespective of it being exclusive or shared.","For illustration purposes, consider the HE device  operating in the active mode. The user interface  may receive a request, via the control unit , for entering the active standby mode. The user interface  then determines the profile of the applications  that are running and need to be stopped for entering the active standby mode. Based on the determined profile, the power driver  selects the components associated with applications  that need to be stopped and instructs the power subsystems to place the selected components in the low power mode.","For the selected components, the power driver  invokes callback functions of customized subsystems or drivers and function calls for operating system (OS) supported drivers. If the OS  does not support low power modes, then the power driver  handles the low power mode itself. For the purpose, the power driver  requests the OS  to suspend the use of the OS supported components so that the power driver  can place them in the low power mode. As per the callback function instructions, the subsystems  can place their components and clocks in the low power mode so that the associated IPs consume minimal power.","The low power mode can be explained as the condition where the selected components of the SOC hardware  stop functioning and hence consume minimal power. The power driver  may also instruct the clock driver  to place common clocks, i.e., clocks shared between various processors, such as the host processors  and the co-processors  in the scaled down mode, if required in the determined profile. In this way, the HE device  is placed into an active standby mode. In one embodiment, the power driver  may automatically place the HE device  in the active standby mode when it receives no input from the user for a long period of time. In such a case, the control unit  may trigger the active standby mode by sending a signal to the user interface .","In order to resume control from the active standby mode, the user interface  waits for an \u201cOut of Standby\u201d event in the form of a wake up signal through the I\/O interfaces , via the control unit . The user interface  determines a wake up reason on receiving the wake up signal. The execution of the user interface  is made possible in the active standby mode by running the CPU services  on reduced clocks. The wake up reason can be either a request for running one of the applications  received from a user, from a broadcaster or from a remote device through an Ethernet connection.","On determining the wake up reason, the user interface  can instruct the power driver  to go into ON mode and restore those components that are associated with the applications  required for the wake up. The components to be restored are determined from the profiles of the applications . For example, if the wake up reason is due to a user providing a command to record an audio or video file, the power driver  will retrieve the profile corresponding to active mode of operation of the application for audio or video recording. Based on the retrieved profile, the power driver  instructs the power subsystems  to resume control of the various components. For example, the power driver  can instruct the audio video subsystems - and - to restore the power of the corresponding IPs - and -.","For the resumption of control, the power driver  can first restore the common clocks through the clock driver . The power driver  then invokes desired callback functions of the corresponding subsystems or drivers and function calls for the OS supported components. In the callback functions, the subsystems  enable the desired IP components and associated clocks. For the OS supported components, if the OS  does not support the low power modes, then the power driver  restores the power and allows the OS  to resume usage of the OS supported components that were being used before going in the low power mode. Thus, in the active mode all the SOC hardware  are connected to the power supply .","In another scenario, for illustration purposes, consider the HE device  operating in either the active mode or the active standby mode. The user interface  may receive a request for entering the passive standby mode through the I\/O interfaces , via the control unit . The user interface  instructs the power driver  to go into the passive standby mode. The power driver , in turn, first redirects all the subsystems  to go into the low power mode by invoking callback functions of the customized drivers and function calls for the OS supported components.","On execution of the callback functions, the subsystems  place their SOC hardware  and clocks in the low power mode. Thus, the SOC hardware  enters the low power mode and stops functioning, thereby consuming minimum power, and is ready to be disconnected from the power supply. Further, the power driver  can save snap-shots of processors, such as the host processors , co-processors , and execution images of Program Counter and other registers onto the memory chip . In one embodiment, the snapshots of the processors include states of applications being executed.","The power driver  thus saves the state data of the applications  being executed by the various processors in the memory chip . The power driver  can then place the memory chip  into the self-refresh mode. Further, the power driver  requests the control unit  to switch OFF the power supply of the complete SOC hardware  including the host processors , the co-processors , the corresponding IPs, and other hardware circuits. The HE device  is now in the passive standby mode. In one embodiment, the control unit  may automatically trigger the passive standby mode by sending an input to the user interface  when the device  receives no input from the user for a long period of time after being placed in the active standby mode.","In order to resume control, i.e., to bring the HE device  into the active mode from the low latency passive standby mode, the user interface  receives an instruction from the user to enable the power supply of the SOC hardware . The instruction may be received from a remote control via the photo diode  or through the front panel  of the HE device .","The user interface  sends the request to the control unit , which then re-powers the SOC hardware  circuitry. For this, a boot loader (not shown in this figure) places the memory chip  out of the self-refresh mode and the control is restored to a point just before the power supply was switched off. As the SOC hardware  is re-powered, all clocks and components can resume the applications they were running before going in the passive standby mode.","In one implementation, the power driver  may also read the status of the control unit  to determine the wake up reason, i.e., whether the wake up is achieved via the remote or the front panel activity, and pass on the status to the user interface . On determining the wake up reason, the user interface  instructs the power driver  to go into the ON mode.","While going into the ON mode, the power driver  first restores the common clocks of the HE device . The power driver  then instructs each subsystem  to restore functioning of the components of the SOC hardware  for bringing the HE device  out of the passive standby mode. The power driver  instructs the subsystems  to go into the active mode by invoking callback functions of the customized drivers and function calls for the OS supported components. If the OS  does not support low power modes, then the power driver  can handle the callback functions itself. On execution of the callback functions, the drivers enable the component IPs and associated clocks. In this way, the HE device  returns to the active mode.","The power driver  can thus manage power supply to the components embedded on the SOC hardware  and the clock domains - through the control unit , subsystems  and the clock driver , respectively, based on the power mode input. The power driver  manages the power supplied to the components of the SOC hardware  by directing the control unit  to switch off the power supply to selected components after the components have been placed in the low power mode by the power subsystems .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIGS. 4-7"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIGS. 4 and 5","b":["400","500","100"]},"According to , at block , an application registers a profile based on a profile entry list. In one implementation, an application, such as the application  of the HE device , for example, a set-top box, makes a profile entry. The application  makes the profile entry for registering a profile in the profile registry  and generating a profile ID for the same.","At block , the application  determines whether a power driver, such as the power driver , is initialized or not. If the power driver  is not initialized, an error is returned at block ; otherwise, the \u201cYes\u201d path is followed from block  to block . At block , the power driver  reads the component type, state, and name from the profile entry list and proceeds to block .","At block , it is determined whether the component type corresponds to a customized component. In case the component is of customized type, i.e., in case of \u201cyes\u201d, the component name, type, and state are stored in a memory of the device chip  at block . Otherwise, in the case of \u201cNo\u201d, the process  moves to block .","At block , it is determined whether the component type corresponds to an OS supported component or not. If the component is not an OS supported component, an error is returned at block . Otherwise, in case of \u201cyes\u201d, the process  moves to block  where it is determined whether the OS, such as the OS , provides power management for the component or not.","If the OS  facilitates power management for the component, then at block , the OS function of the component along with component name is registered. In case the OS  does not facilitate power management for the component, the \u201cNo\u201d path is followed from block , and at block  the component is registered as an OS supported component. An internal power management function, such as a callback function, of the OS supported component is also registered with the power driver  at block . Thus the power driver  can handle low power mode for the OS supported components using the internal power management functions.","Following registering of the component name and OS or callback function at block  or , the process  moves to block  where internal data structures for the OS supported components are updated. The process  then moves to block  where it is determined whether the current component entry is the last entry in the profile to be registered. If the current entry is not the last entry for the profile, then the process  moves to block  to receive the next entry and thereupon to block , after which the same process  as described above takes place. If the current entry is the last in the profile entry, the \u201cyes\u201d path is followed from block , and successful registration of the profile is returned with the profile ID at block .","Referring back to block , where the process  moved after it was found that the component is of customized type, the process  then moves to block  where it is determined whether any callback function is registered with the same name. If there is no such callback function already registered, a function is neither called nor is any action taken at block . This is because for inclusion in a profile, callback functions corresponding to the component have to be registered with the power driver  so that the power driver  can invoke the callback functions when required. In case there is a callback function registered with the same name as that of the component, then at block , the callback function of that component is stored in the memory of the device chip .","From blocks  and , the process  reaches decision block  where it is determined whether the current entry in the profile entry is the last entry for profile registration. In case the entry is not the last entry, the process  moves to block  where, as described earlier, the next entry is received from the list of profile entries and the process  again moves to block  and continues as described earlier. In case the entry is the last entry, the process  moves to block  where, after successful profile registration, the profile ID thus generated is returned.","According to , at block , an application requests for setting a profile using a profile ID. For example, in one implementation, an application, such as the application  of the HE device , for example, a set-top box, requests for setting a profile corresponding to an active standby mode using a profile ID. Further, at block , the application  determines whether a power driver, such as the power driver , is initialized. In case the power driver  is not initialized, an error is returned at block . Otherwise, the power driver  retrieves a profile entry from the profile registry  using the profile ID of the application . At block , the power driver  reads the component type, state, and name from the profile entry retrieved at block  and the process  moves to block .","At block , it is determined whether the component type is customized. In case the component type is customized, i.e., in case of \u201cyes\u201d, the process  moves to block . Otherwise, in case of \u201cNo\u201d, the process  moves to block .","At block , it is determined whether any callback function is registered with the same name. If there is no such callback function already registered, an error is returned at block . In case there is a callback function registered with the same name as that of the component, then at block , the power driver  invokes the registered callback function for the application.","From block , the process  reaches decision block  where it is determined whether the current entry in the profile entry list is the last entry. In case the entry is not the last entry, the process  moves to block ; otherwise, the process  follows the \u201cyes\u201d path to block  where status of the component in the profile is returned to the application .","At block , the power driver  reads the next entry from the profile entry list and the process  moves to block . The process  is then repeated until an error or success, i.e., return status is achieved as described above.","Going back to block , where the process  moved after it was determined that the component type is not customized, it is determined whether the component is an operating system (OS) supported component or not. If the component is not an OS supported component, an error is returned at block ; otherwise, the process  moves to block .","At block , it is determined whether an OS such as the OS  supports low power modes or not. If the OS  supports low power modes, then at block , a command is given to call OS function. In case the OS  does not support low power modes, the process  follows the \u201cNo\u201d path from block  and moves to block . At block , the OS operation is resumed or suspended and the component is enabled or disabled based on the state of the component in the profile by the power driver  using callback functions registered with the power driver .","From blocks  and , the process  moves to block  where it is determined whether the current entry is the last profile entry. If the current entry is the last, status of the component in the profile is returned to the application  at block . Otherwise, the process  moves to block  and the process  continues as described earlier.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIGS. 6 and 7","b":["600","700","100"]},"At block , a request for the passive standby mode is received by the user interface . At block , it is determined whether a power driver, such as the power driver , is initialized. If the power driver  is not initialized, then an error is returned at block  and the process  stops.","If the power driver  is initialized, then the process  continues at block  where all the component of the SOC hardware  are placed in a low power mode by the power driver  through the control unit . For this, the power driver  invokes callback functions for the customized drivers and OS function calls for the OS supported components. If there is an OS supported component for which the OS  does not support the low power mode, then the power driver  invokes the internal power management functions such as the callback functions for the OS supported component. As a response to the callback function or OS function calls, each component driver saves the state data of the running applications.","At block , the control unit  disables all interrupts and stops kernel time slicing. Kernel time slicing, as known in the art, refers to the time allocation to each component for execution of its process. Similarly, interrupts, as known in the art, refers to an instruction requiring immediate attention of a component thus causing the related processors to switch from one application to another. Disabling interrupts and stopping kernel time slicing thereby ensures that no components are functional.","At block , snapshots of the processors are saved onto the memory chip  and the memory chip  is placed in the self-refresh mode. The power driver  also stops the clock signals to the memory chip . The saved snapshots can be used later for low latency recovery of operations.","At block , the control unit  switches off power supply to the SOC hardware . However, the memory  remains powered ON so that the snapshots are available on resumption of control. Thus, the HE device  is placed in the passive standby mode where no components of the SOC hardware  receive power and therefore, minimal power is consumed.","With reference to , at block , a request in the form of a wake up signal is received from, for example, the remote control via photo diode  or the front panel  of the HE device , and the control unit  re-powers the SOC hardware . At block , the control unit  uses a boot loader, such as a power management aware boot loader to restore memory, such as the memory chip , and retrieve the saved snapshots from the memory chip . Other pointers and registers are also recovered from the memory chip  and restored so that execution of the application can start from the last saved location.","At block , the power driver  reads status pins to determine the wake up reason. On determining the wake up reason, the user interface  can instruct the power driver  to go into ON mode and restore those components that are associated with the applications  required for the wake up. At block , the power driver  restores kernel time slicing and retrieves interrupts setting from the memory chip . Further, the power driver  returns to the applications  that were being executed just before the HE device  was placed in the passive standby mode.","At block , it is determined whether the HE device  is to be returned to an active mode or not. If the determination yields that the HE device does not have to be placed in the active mode, then at block , the process returns to block  of the process  to set the HE device  in the passive standby mode. However, based on the determination, if the HE device  is to be returned to the active mode, then from block , the control passes to block . At block , the power driver  places all the SOC hardware  in the active mode by invoking callback functions or OS function calls as described earlier.","Although embodiments for implementing power management in a device have been described in language specific to structural features and\/or methods, it is to be understood that the invention is not necessarily limited to the specific features or methods described. Rather, the specific features and methods are disclosed as exemplary implementations for the power management in a device."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The detailed description is provided with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The same numbers are used throughout the drawings to reference like features and components.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
