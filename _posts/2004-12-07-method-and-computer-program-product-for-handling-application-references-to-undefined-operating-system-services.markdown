---
title: Method and computer program product for handling application references to undefined operating system services
abstract: A method and a computer program product that enable an existing operating system (OS) to provide a non-failure response to an application's reference to an OS service that is not currently defined/available within the existing OS. The loader of the OS responds to each reference to an undefined service by mapping the reference to an undefined service response utility (USRU). USRU is a specialized service designed to provide a response that a requested service is not yet available. When the OS loader detects that an application is referring to an OS service that is undefined, the OS loader resolves the reference to the USRU, which, when invoked returns an indication that the requested service is not yet available.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454762&OS=07454762&RS=07454762
owner: International Business Machines Corporation
number: 07454762
owner_city: Armonk
owner_country: JP
publication_date: 20041207
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"],"p":["1. Technical Field","The present invention relates generally to computer systems, and in particular to operating system (OS) services of a computer system. Still more particularly, the present invention relates to a method and system for handling requests for operating system (OS) services from an application.","2. Description of the Related Art","Most computer systems utilize an operating system (OS) to enable processing of application programs and to complete other general hardware\/software functions. An OS provides a plurality of services\/functions that reside within the OS kernel. These functions (or services) can be accessed via a reference generated by an application and issued to an OS library. The OS library provides a list of each OS function that may currently be available for access by an application.","The desire to continually improve and expand the OS leads to the OS developers\/providers\/programmers frequently creating new functions and\/or upgrades (newer versions) to the existing functions. OS developers frequently introduce new capabilities into the OS kernel that can be referenced by an application. With conventional methods, these functions are often package in the next version\/release of the OS. For these functions to be available within a computer system, the function name must be added to the OS library and a new OS kernel (encompassing the function) is required to be loaded on the computer system. Then, the computer system is restarted to invoke the new function.","Since the availability of the new OS may be several months or years away, most modern operating systems, particularly various versions of UNIX\u2122, are designed with the capability to extend a base kernel through dynamically loadable and unloadable modules called \u201ckernel extensions.\u201d These kernel extensions make use of kernel services, and in turn can provide services themselves. A kernel extension for a particular function has to be made available before an application can successfully reference the function. Thus, in order to allow an application to reference these newer\/update functions while still using the current\/older release of the OS, OS programmers typically have to write a kernel extension plus additional code to load the kernel extension onto the system and make the function available.","However, very often, the expanded library of functions lists the new\/upgraded function before the function is provided within the current version of the OS, (i.e., the computer system's OS does not yet support the related underlying function listed within the OS library). Often, new libraries are provided for the current OS before the underlying functions can be made available. If an application references this function, a failure occurs. This failure may result in a restart of the OS. Such OS restarts are themselves problematic and not desired. Also, newer versions of applications may be designed to refer to services that are available only in a new version of the OS than currently exist on the computing device. In both scenarios, the application's request to reference the service fails and produces an error condition because the loader of the operating system cannot determine what service the request is referencing.","With the frequency at which new functions (or updates to existing functions) are generated, keeping an OS current with kernel extensions is a tedious and time consuming effort both in terms of designing these kernel extensions and associated code for loading the extensions and loading these extensions unto the computer systems. Certain programmers provide an indirect method for looking up the availability of a service. With the indirect method, an application is specially written to check for the availability of the service. The application then invokes the service indirectly, if the service is available. However, as with the above \u201cdirect\u201d solution with kernel extensions, this indirect method is a tedious solution for programmers.","Using kernel extensions until the services are provided within the based operating system provides an additional drawback. As noted above, a kernel extension must be available and should be loaded before any applications refer to the specific service. However, in order for the-base OS to support the new service, the system usually has to be restarted, leading to a halt (or disruption) to executing system services. For a load intensive computer system that is required to remain operational without such disruption (system downtime), providing OS support for these newer\/updated services by restarting the system may be undesirable.","The present invention thus recognizes that it would be desirable to enable an application's reference to an undefined\/unavailable OS service to be handled without causing a failure condition and\/or system shutdown\/reboot. The invention further recognizes that providing an enhanced OS that allows direct handling of undefined\/unavailable OS services without requiring development and deployment of specialized kernel extensions (along with the associated kernel-loading applications) would be a welcomed improvement. These and other benefits are provided by the invention described herein.","Disclosed are a method and a computer program product that enable an existing operating system (OS) to provide a non-failure response to an application's reference to an OS service that is not currently defined\/available within the existing OS. The loader of the OS responds to each reference to an undefined service by mapping the reference to a pre-defined unavailable service response utility (USRU). USRU is a specialized service designed to provide a response that a referenced service is not available or is undefined.","The OS loader is coded to provide this mapping to the USRU whenever a reference to an undefined service is received. When the OS loader detects that an application is referring to an OS service that is undefined, the OS loader resolves the reference to the USRU, which, when invoked returns an indication that the requested service is undefined.","Thus, the OS loader forces the resolution of an application's reference to an undefined service within the OS by triggering the USRU to provide the \u201cnot defined\/not yet available\u201d response. USRU may be written as a part of the base OS or provided as a separate value-added application to enhance the base OS.","The above as well as additional objectives, functions, and advantages of the present invention will become apparent in the following detailed written description.","The present invention provides a method and a computer program product that enable an existing operating system (OS) to provide a non-failure response to an application's reference to an OS service that is not currently defined\/available within the existing OS. The loader of the OS responds to each reference to an undefined service by mapping the reference to a pre-defined unavailable service response utility (USRU). USRU is a specialized service designed to provide a response that a referenced service is not available or is undefined.","The OS loader is coded to provide this mapping to the USRU whenever a reference to an undefined\/unavailable service is received. When the OS loader detects that an application is referring to an OS service that is undefined\/unavailable, the OS loader resolves the reference to the USRU, which, when invoked returns an indication that the requested service is undefined\/unavailable.","Thus, the OS loader forces the resolution of an application's reference to an undefined service within the OS by triggering the USRU to provide the \u201cnot defined\/not yet available\u201d response. USRU may be written as a part of the base OS or provided as a separate value-added application to enhance the base OS.","As utilized herein, the term(s) undefined\/unavailable, and similar terms, are generally utilized to refer to one or more of the following types of OS service:","(1) services that are new and therefore not available in the current release of the OS;","(2) services that have been updated to include additional features from the prior version of the service but whose newer versions are not yet available in the current version of the OS. (In one implementation, in addition to the USRU issuing a response to the application when a prior version of the service is available, the OS loader returns the prior version of the service to the application in a seamless manner); and","(3) services that do not fall into either of the previous two categories but are just not supported\/present within the current OS that is loaded on the computer system.","To maintain consistency throughout the description of the illustrative embodiments, all further references to a service that falls in one or more of the above categories are described as an undefined service.","With reference now to the figures, and in particular to , there is illustrated an exemplary computer system within which the functions of the invention may advantageously be implemented. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Computer system  includes a processing unit , system memory , and system bus  that couples various system components including system memory  to processing unit . System bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the computer system , such as during start-up, is stored in ROM .","Computer system  further includes hard disk drive  for reading from and writing to hard disk , magnetic disk drive  for reading from or writing to removable magnetic disk , and optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to system bus  by hard disk drive interface , magnetic disk drive interface , and optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data. Although the exemplary environment described herein employs hard disk , removable magnetic disk , and removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories, read only memories, storage area networks, and the like may also be used in the exemplary operating environment.","A number of program modules are stored on the one or more of the above memory devices (i.e., hard disk , magnetic disk , optical disk , ROM  or RAM . Among these are base operating system (OS) , one or more application programs , other program modules , and program data .","For purposes of illustration, base OS  is described as a Windows-based operating system, such as Windows XP\u00ae, which is a trademark of Microsoft Corp. The functions of the invention are, however, applicable to any operating system that supports the enhanced OS loader and USRU functionality beyond the conventional OS loader. Thus, for example, the invention may also be implemented within a Linux-based OS. Other OSes which may implement the functionality of the invention available include Hewlett Packard's HP-UX\u00ae, IBM's AIX\u00ae, Sun's Solaris\u00ae, etc.","A user may enter commands and information into the computer system  through input devices such as keyboard  and graphical pointing device (mouse) . These input devices are often connected to CPU  through serial port interface  that is coupled to the system bus , but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB) or a network interface card. Monitor  or other type of display device is also connected to the system bus  via an interface, such as video adapter . In addition to monitor , computer system  may include other peripheral output devices (not shown), such as speakers and printers.","Computer system  may operate in a networked environment using logical connections to one or more remote computers, such as remote computer . Remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node. Depending on whether a wide are network (WAN) or local area network (LAN) is being accessed by computer system , the network access may be via modem  or network interface , respectively.","Finally, while computer system  is illustrated with specific hardware and software components, the invention is applicable to any type of computer system configuration so long as the background OS includes the enhanced file queuing options described herein. No structural or operational limitations are implied by the specific configuration and description thereof within the present specification.","Turning now to , there is illustrated a block diagram layout representing an exemplary physical construct for OS kernel space and user\/application space. Layout  includes OS kernel layer  having a plurality of OS services\/functions  and an OS loader  located therein. User\/application space  includes one or more application programs  and \u201cshares\u201d OS library  with OS kernel layer .","According to the illustrative embodiment of the invention, USRU  is also located within OS kernel space. USRU  is a specialized, pre-established service that handles a response to an application reference for a service that is undefined. USRU  has an address known to the OS loader. Both OS kernel layer  and user\/application space  may include many other components. For example, OS kernel layer  may include a service for loading and unloading kernel extensions.","The functions of OS loader  include providing specific system services requested by an application within application space . Application space  contains at least one application program  that executes on computer system. During execution, application program  references services\/functions  within OS kernel  via OS library . OS library  and OS loader  provide an interface between OS kernel space  and user\/application space . References to specific services\/functions found within the OS library  causes OS loader  to initiate a search for the associated function. According to the invention, when the referenced service is undefined, OS loader  completes a mapping of the reference for that service name to USRU . In one embodiment, the mapping is stored within OS loader, so future references to that service is automatically referred to USRU .","With the functionality provided by USRU and enhanced OS loader, applications are allowed to reference undefined services by directly invoking the USRU, without having to utilize\/implement an indirect service look up scheme. USRU functionality further removes the requirement that the OS programmer\/developer\/provider develop and distribute multiple kernel extensions to provided temporary services until a newer version of the OS is made available with these new\/unavailable services provided therein. Further, an application is able to reference new\/unavailable services without restarting the OS to provide the service.","Specific program code may be provided to enable the OS to support the above-described functionality provided by the OS loader and USRU. While these features may be provided as a code within the base operating system, the invention contemplates providing these features, particularly those of USRU as a separate, add-on, OS update. This update may be provided as a one-time kernel extension that eliminates the need for future kernel extensions for new services. The update may be provided as a patch to the OS. Additionally, the add-on may be packaged separately from the OS and sold or distributed as a separate, licensed component.","With reference now to the flow chart of , there is illustrated a process by which an application's reference to an undefined service is handled by an OS. The process begins at block  at which the OS is loaded into the memory of the computer system along with a URSU. Then, a request for (or reference to) an OS service is received from an application at block . The reference is received by the OS loader, which determines at block  whether the reference is for an undefined service (i.e., not within the list of available OS services or kernel extensions thereof). When the service associated with the reference is an available service, the service functionality is provided to the application at block . Then the process ends at block .","From block , when the reference is for an undefined service, the OS loader generates a call to the USRU to handle the request, as shown at block . The OS loader is programmed to complete a mapping to the USRU whenever an application references a service within the OS library and the service is not defined and\/or not available within the OS services. The OS loader creates a logical \u201cbridge\u201d between the reference for the service and USRU. The service name (used to reference the function) is stored by the OS loader along with the address of the USRU. Following the initial mapping, future references to the particular service from any application are automatically mapped to the USRU.","Returning to , the URSU receives the call from the OS loader and automatically generates a response that the service is unavailable at block . Transmission of the response to the application is handled similarly to a response to a reference that was successfully resolved (i.e., no failure condition registered), as indicated at block . The process then ends at block .","With USRU functionality, applications are allowed to reference undefined services by directly invoking the new service, without having to utilize an indirect service look up scheme. USRU functionality further removes the requirement that the OS developer\/provider develop and manage multiple kernel extensions to provided temporary services until a newer\/updated version of the OS, enhanced with these new\/unavailable services, is loaded on the computer system. Further, an application is able to generate a reference to an undefined service without causing a system failure and\/or restarting the OS. No specific kernel extension and associated extension-loading code is required.","The OS loader completes the mapping to the USRU whenever the library references a function that is undefined (within the currently available services). The OS loader creates a bridge linking the applications reference to the undefined function with the USRU. The OS loader receives the reference to the undefined function and rather than providing a failure message\/response, the OS loader completes the link by mapping the reference (OS library entry) to the address\/location of a defined service, the USRU. The application thus continues operating. In one implementation, the application may check to see if the function is available and if not, the application keeps running using the older\/limited version of the function, as if the reference was resolved.","As a final matter, it is important that while an illustrative embodiment of the present invention has been, and will continue to be, described in the context of a fully functional computer system with installed management software, those skilled in the art will appreciate that the software aspects of an illustrative embodiment of the present invention are capable of being distributed as a program product in a variety of forms, and that an illustrative embodiment of the present invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of signal bearing media include recordable type media such as floppy disks, hard disk drives, CD ROMs, and transmission type media such as digital and analog communication links.","While the invention has been particularly shown and described with reference to a preferred embodiment, it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention itself, as well as a preferred mode of use, further objects, and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
