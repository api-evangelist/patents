---
title: Hypervisor file system
abstract: In general, the present invention provides a computer-implemented hypervisor file system (HVFS) comprising (among other things): a HVFS Manager, a Source File System Implementation, Hypervisor API, and HVFS Driver implemented in conjunction with a set (e.g., one or more) of virtual machines. Running a virtual machine on top of complex software systems like hypervisors allows the virtual machine to be presented with virtual storage devices which operate in the file system abstraction layer, instead of the block device layer traditionally presented by hardware. Doing so allows the file system abstraction to be implemented in the hypervisor, and not in the individual virtual machines, giving the hypervisor much greater access and control over the file system elements used by virtual machines, as well as giving it new capabilities such as sharing file system elements across virtual machines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069596&OS=09069596&RS=09069596
owner: International Business Machines Corporation
number: 09069596
owner_city: Armonk
owner_country: US
publication_date: 20091117
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention generally relates to file storage and retrieval. Specifically, the present invention relates to a Hypervisor File System (HVFS).","As computing power has continued to increase, the industry has started using virtualization technology to gain better utilization of hardware resources while allowing for isolated management on entire operating systems running on the same system. As companies have started migration of their Information Technology (IT) infrastructure onto virtual platforms, they have generally found the isolation of virtual machines to be beneficial, but have also found some drawbacks.","Many common problems such as backup and anti-virus could previously be solved by a single software component being installed on the physical server, often because they could provide their solution to the entire file system of the machine. With virtualization, however, each virtual machine manages its own isolated virtual resources, so these solutions have to be installed on each virtual machine, increasing management complexity and cost. Ideally, the virtual machine platform could provide some software with the ability to access resources across all virtual machines to provide common services while maintaining the majority of isolation.","With the specific resource in consideration here, the file system, this is difficult to achieve because virtual machine platforms usually provide storage to virtual machines in the form of virtual storage devices that mimic the way traditional storage devices work, leaving implementation of the file system abstraction to the file system drivers that run as part of the operating system kernel inside each virtual machine. As such, all known solutions fail to address current needs.","In general, the present invention provides a computer-implemented hypervisor file system (HVFS), comprising: (among other things) a HVFS Manager, a Source File System Implementation, Hypervisor API, and HVFS Driver implemented in conjunction with a set (e.g., one or more) of virtual machines. Running a virtual machine on top of complex software systems like hypervisors allows the virtual machine to be presented with virtual storage devices which operate in the file system abstraction layer, instead of the block device layer traditionally presented by hardware. Doing so allows the file system abstraction to be implemented in the hypervisor, and not in the individual virtual machines, giving the hypervisor much greater access and control over the file system elements used by virtual machines, as well as giving it new capabilities such as sharing file system elements across virtual machines.","A first aspect of the present invention provides a computer-implemented hypervisor file system (HVFS), comprising: a HVFS manager being configured to receive file system requests and to service the file system requests based on at least one of: a configuration and at least one source file system implementation; a set of HVFS drivers implemented for a set of operating system kernels, the set of HVFS drivers being configured to forward file system requests to the HVFS manager; and a set of HVFS Application Programming Interfaces (APIs) configured to receive the file system requests from the set of HVFS drivers and to forward the file system requests to the HVFS manager.","A second aspect of the present invention provides a computer-implemented hypervisor storage method, comprising: receiving a file system request at an HVFS driver from a requestor; sending the file system request to a HVFS manager via a HVFS API; servicing the file system request with the HVFS manager based on at least one of the following: a configuration, or at least one source file system implementation; and returning a response to the request to the requestor via the HVFS API and the HVFS driver.","A third aspect of the present invention provides a computer readable storage medium containing a program product for hypervisor storage, the computer readable storage medium comprising program code for causing a computer to: receive a file system request at an HVFS driver from a requestor; send the file system request to a HVFS manager via a HVFS API; service the file system request with the HVFS manager based on at least one of the following: a configuration, or at least one source file system implementation; and return a response to the request to the requestor via the HVFS API and the HVFS driver.","A fourth aspect of the present invention provides a method for deploying a hypervisor file system, comprising: deploying a computer infrastructure being operable to: receive a file system request at an HVFS driver from a requestor; send the file system request to a HVFS manager via a HVFS API; service the file system request with the HVFS manager based on at least one of the following: a configuration, or at least one source file system implementation; and return a response to the request to the requestor via the HVFS API and the HVFS driver.","A fifth aspect of the present invention provides a hypervisor-based data processing system, comprising: a memory medium comprising instructions; a bus coupled to the memory medium; and a processor coupled to the bus that when executing the instructions causes the hyper-visor-based data processing system to: receive a file system request at an HVFS driver from a requestor; send the file system request to a HVFS manager via a HVFS API; service the file system request with the HVFS manager based on at least one of the following: a configuration, or at least one source file system implementation; and return a response to the request to the requestor via the HVFS API and the HVFS driver.","The drawings are not necessarily to scale. The drawings are merely schematic representations, not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention, and therefore should not be considered as limiting the scope of the invention. In the drawings, like numbering represents like elements.","For convenience, the Detailed Description of the Invention has the following sections","I. General Description","II. Computerized Implementation","I. General Description","As indicated above, the present invention provides a computer-implemented hypervisor file system (HVFS) comprising (among other things) a HVFS Manager, a Source File System Implementation, Hypervisor API, and HVFS Driver implemented in conjunction with a set (e.g., one or more) of virtual machines. Running a virtual machine on top of complex software systems like hypervisors allows the virtual machine to be presented with virtual storage devices which operate in the file system abstraction layer, instead of the block device layer traditionally presented by hardware. Doing so allows the file system abstraction to be implemented in the hypervisor, and not in the individual virtual machines, giving the hypervisor much greater access and control over the file system elements used by virtual machines, as well as giving it new capabilities such as sharing file system elements across virtual machines.","By implementing the file systems used by virtual machines under the present invention, services such as backups and anti-malware solutions can be provided to all virtual machines on a virtual machine platform transparently and ubiquitously. The implementation does not need to depend on special configuration or access rights in the virtual machines and does not need to depend on them being powered on as is the case with Network File Systems. Backups can be targeted on specific file system objects, can occur while the virtual machine is active, and can even be triggered by file system events such as changes to certain files, unlike using Virtual Storage Device Images. Anti-malware solutions can be given access to file system elements easily and can be triggered synchronously on file system events, unlike with Monitoring File System Drivers.","Referring now to , a diagram of a HVFS  according to the present invention is shown. In the diagram, solid arrow lines represent the flow of file system requests such as reading from or writing to a file, listing the contents of a directory, etc. Dashed arrows represent the flow of storage device requests such as reading from or writing to a specific block of the storage device. As depicted, elements of the HVFS  comprise one or more of the following: HVFS manager , a set (i.e., at least one) of HVFS API interfaces , and a set of HVFS drivers A-N. As depicted, HVFS manager  and HVFS API interfaces  can be implemented within hypervisor block . This type of compartmentalization of such components is only one possible way of implementing the present invention.  further shows virtual machines A-N, a set operating system (OS) kernels A-N, a set of operating system (OS) APIs A-N, a set of programs A-N, and one or more storage devices such as storage device\/unit . Moreover, the components shown in  are typically implemented within a physical machine  (e.g., a computer). It is understood that although not shown in , physical machine  will likely further include other hardware and\/or software components (e.g., a processor, memory, a bus, etc.). Some of these components will be described in conjunction with  below.","Regardless, the HVFS components of the present invention generally have the following forms and functions:","HVFS Manager \u2014a module that executes as part of the hypervisor block , receives requests from HVFS Drivers A-N running inside the operating system kernels A-N of virtual machines and processes\/services the requests based on configuration and one or more source file system implementations.","Source File System Implementation\/Storage device \u2014can be fulfilled by any file system implementation; runs alongside the HVFS Manager . Although shown external to hypervisor , this comment can be run in hypervisor .","Hypervisor API Extension(s) A-N\u2014additional API calls in the Hypervisor API that can be used to make file system requests to the HVFS Manager.","HVFS Driver(s) A-N\u2014a file system driver implemented for each operating system kernel A-N supported that forwards file system requests received from the operating system and user programs A-N to the HVFS Manager  via\/through the HVFS API Extension(s) A-N.","In a typical embodiment when file system request (hereinafter \u201crequest\u201d) is request by OS API(S)(s) A-N from program(s) A-N. The request is communicated to HVFS manager  via HVFS driver(s) A-B and HVFS API(S) . HVFS manager  will then attempt to fulfill the request by accessing file storage device(s) . A response (e.g., whether or not the request information was obtained) will then be sent back to the requesting program(s) A-N by HVFS manager  (e.g., via HVFS API(S) , HVFS driver(s) A-N, OS API(S) A-N.","One difference between a file system implementation on a virtual machine platform using the HVFS and current common implementations is that the translation from file system requests to storage device requests occurs in the hypervisor layer under HVFS, not in the file system drivers that run as part of the operating system kernels inside the virtual machines.","Note that the invention does not specify how the source file system is implemented. Any current file system implementation could be used as long as it can be accessed by the HVFS Manager, including traditional block device file systems, network file systems, and in-memory file systems.","Services implemented in the hypervisor layer can easily gain access to this same file system source, and thereby gain access to the file systems used by hosted virtual machines without any interaction with software on those virtual machines. This allows for ubiquitous and transparent deployment of services in the virtual machine platform layer.","II. Computerized Implementation","Referring now to , a computerized implementation  of the present invention is shown. As depicted, implementation  includes computer system  (e.g., physical machine ) deployed within a computer infrastructure . This is intended to demonstrate, among other things, that the present invention could be implemented within a network environment (e.g., the Internet, a wide area network (WAN), a local area network (LAN), a virtual private network (VPN), etc.), or on a stand-alone computer system. In the case of the former, communication throughout the network can occur via any combination of various types of communication links. For example, the communication links can comprise addressable connections that may utilize any combination of wired and\/or wireless transmission methods. Where communications occur via the Internet, connectivity could be provided by conventional TCP\/IP sockets-based protocol, and an Internet service provider could be used to establish connectivity to the Internet. Still yet, computer infrastructure  is intended to demonstrate that some or all of the components of implementation  could be deployed, managed, serviced, etc., by a service provider who offers to implement, deploy, and\/or perform the functions of the present invention for others.","As shown, computer system  includes a processing unit , a memory , a bus , and device interfaces . Further, computer system  is shown communicating with one or more external devices  that communicate with bus via device interfaces. In general, processing unit  executes computer program code, such as search term hypervisor utility , which is stored in memory  and\/or storage system . While executing computer program code, processing unit  can read and\/or write data to\/from memory , storage system , and\/or device interfaces . Bus  provides a communication link between each of the components in computer system . Although not shown, computer system  could also include I\/O interfaces that communicate with: one or more external devices  such as a kiosk, a checkout station, a keyboard, a pointing device, a display, etc.); one or more devices that enable a user to interact with computer system ; and\/or any devices (e.g., network card, modem, etc.) that enable computer system  to communicate with one or more other computing devices.","Computer infrastructure  is only illustrative of various types of computer infrastructures for implementing the invention. For example, in one embodiment, computer infrastructure  comprises two or more computing devices (e.g., a server cluster) that communicate over a network to perform the various processes of the invention. Moreover, computer system  is only representative of various possible computer systems that can include numerous combinations of hardware. To this extent, in other embodiments, computer system  can comprise any specific purpose computing article of manufacture comprising hardware and\/or computer program code for performing specific functions, any computing article of manufacture that comprises a combination of specific purpose and general purpose hardware\/software, or the like. In each case, the program code and hardware can be created using standard programming and engineering techniques, respectively. Moreover, processing unit  may comprise a single processing unit, or be distributed across one or more processing units in one or more locations, e.g., on a client and server. Similarly, memory  and\/or storage system  can comprise any combination of various types of data storage and\/or transmission media that reside at one or more physical locations. Further, device interfaces  can comprise any module for exchanging information with one or more external devices . Still further, it is understood that one or more additional components (e.g., system software, math co-processing unit, etc.) not shown in  can be included in computer system .","Storage system  can be any type of system capable of providing storage for information under the present invention. To this extent, storage system  could include one or more storage devices (e.g., storage device  of ), such as a magnetic disk drive or an optical disk drive. In another embodiment, storage system  includes data distributed across, for example, a local area network (LAN), wide area network (WAN) or a storage area network (SAN) (not shown). In addition, although not shown, additional components, such as cache memory, communication systems, system software, etc., may be incorporated into computer system .","Shown in memory  of computer system  is search term hypervisor utility , which includes a set of modules . Set of modules  generally provide all functions of the present invention as described herein. Along these lines, set of modules  should be understood as including components of . As shown in conjunction with , set of modules  is configured for (among other things): receiving a file system request at an HVFS driver from a requestor in step S; sending the file system request to a HVFS manager via a HVFS API in step S; servicing (e.g., by accessing storage unit ) the file system request with the HVFS manager based on at least one of the following: a configuration, or at least one source file system implementation in step S; and\/or returning a response to the request to the requestor via the HVFS API and the HVFS driver in step S.","While shown and described herein as a hypervisor file system, it is understood that the invention further provides various alternative embodiments. For example, in one embodiment, the invention provides a computer-readable\/useable storage medium that includes computer program code to enable a computer infrastructure to provide hypervisor functionality as discussed herein. To this extent, the computer-readable\/useable storage medium includes program code that implements each of the various processes of the invention. It is understood that the terms computer-readable storage medium or computer useable storage medium comprise one or more of any type of physical embodiment of the program code. In particular, the computer-readable\/useable storage medium can comprise program code embodied on one or more portable storage articles of manufacture (e.g., a compact disc, a magnetic disk, a tape, etc.), on one or more data storage portions of a computing device, such as memory  () and\/or storage system  () (e.g., a fixed disk, a read-only memory, a random access memory, a cache memory, etc.).","In another embodiment, the invention provides a method that performs the process of the invention on a subscription, advertising, and\/or fee basis. That is, a service provider, such as a Solution Integrator, could offer to provide hypervisor functionality. In this case, the service provider can create, maintain, support, etc., a computer infrastructure, such as computer infrastructure  () that performs the process of the invention for one or more customers. In return, the service provider can receive payment from the customer(s) under a subscription and\/or fee agreement and\/or the service provider can receive payment from the sale of advertising content to one or more third parties.","In still another embodiment, the invention provides a computer-implemented method for providing hypervisor functionality. In this case, a computer infrastructure, such as computer infrastructure  (), can be provided and one or more systems for performing the process of the invention can be obtained (e.g., created, purchased, used, modified, etc.) and deployed to the computer infrastructure. To this extent, the deployment of a system can comprise one or more of: (1) installing program code on a computing device, such as computer system  (), from a computer-readable medium; (2) adding one or more computing devices to the computer infrastructure; and (3) incorporating and\/or modifying one or more existing systems of the computer infrastructure to enable the computer infrastructure to perform the process of the invention.","As used herein, it is understood that the terms \u201cprogram code\u201d and \u201ccomputer program code\u201d are synonymous and mean any expression, in any language, code, or notation, of a set of instructions intended to cause a computing device having an information processing capability to perform a particular function either directly or after either or both of the following: (a) conversion to another language, code or notation; and\/or (b) reproduction in a different material form. To this extent, program code can be embodied as one or more of: an application\/software program, component software\/a library of functions, an operating system, a basic device system\/driver for a particular computing and\/or device, and the like.","A data processing system suitable for storing and\/or executing program code can be provided hereunder and can include at least one processor communicatively coupled, directly or indirectly, to memory element(s) through a system bus. The memory elements can include, but are not limited to, local memory employed during actual execution of the program code, bulk storage, and cache memories that provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input\/output or device (including, but not limited to, keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening device controllers.","Network adapters also may be coupled to the system to enable the data processing system to become coupled to other data processing systems, remote printers, storage devices, and\/or the like, through any combination of intervening private or public networks. Illustrative network adapters include, but are not limited to, modems, cable modems, and Ethernet cards.","The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and, obviously, many modifications and variations are possible. Such modifications and variations that may be apparent to a person skilled in the art are intended to be included within the scope of the invention as defined by the accompanying claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE INVENTION","p":["These and other features of this invention will be more readily understood from the following detailed description of the various aspects of the invention taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
