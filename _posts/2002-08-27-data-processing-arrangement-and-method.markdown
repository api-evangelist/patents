---
title: Data processing arrangement and method
abstract: A data processing arrangement () and method for fuzzy backup and restore of MQSeries shared queues held in coupling facility list structure (). Periodically backups are taken of the data held in the CF list structure by backing up messages in the sequence uncommitted puts (), committed puts (), uncommitted gets () and expired messages (), whereby all messages may be backed up in the backup means except for exceptions which are recorded in the record log. In the event of media failure of the coupling facility, data can be restored by restoring messages in the sequence restoring messages from the backup means (), replaying messages from the record log means () and determining final disposition of messages from replay of the record log means (). This provides the advantage of allowing the number of log records written to be reduced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06948093&OS=06948093&RS=06948093
owner: International Business Machines Corporation
number: 06948093
owner_city: Armonk
owner_country: US
publication_date: 20020827
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","STATEMENT OF INVENTION","DESCRIPTION OF PREFERRED EMBODIMENT"],"p":["This application is related to the commonly owned copending application, incorporated herein by reference, filed on the same date as the present application, titled \u201cDATA PROCESSING ARRANGEMENT AND METHOD\u201d.","This invention relates to data processing and more particularly to a data processing arrangement and method for facilitating recovery after failure.","IBM's MQSeries\u00ae is a set of middleware products that allow user applications to intercommunicate using messages, without having to know the complexities of the underlying hardware and software platform. Applications communicate using the MQSeries application programming interface (API), issuing such calls as MQPUT to put a message onto a queue and MQGET to get a message from a queue. In this specification, the terms \u201cget\u201d and \u201cput\u201d are used generally interchangeably with the terms \u201cread\u201d and \u201cwrite\u201d, respectively. MQSeries is described in such publications as MQSeries Planning Guide, IBM GC33-1349-07 (January 1999), incorporated herein by reference.","The IBM S\/390\u00ae Parallel Sysplex\u00ae configuration is a cluster of interconnected processing nodes with attachments to shared storage devices, network controllers, and core cluster technology components, consisting of coupling facilities, coupling support facilities, and external time references (ETRs). A coupling facility (CF) enables high-performance read\/write sharing of data by applications running on each node of the cluster through global locking and cache coherency management mechanisms. It also provides cluster-wide queuing mechanisms for workload distribution and message passing between nodes.","The coupling facility is described in the following patents and publications, incorporated herein by reference:\n\n","In the field of this invention it is known that fuzzy backup of a database can be achieved by copying the database in parallel with updates by a database engine to create a \u2018fuzzy\u2019 backup, and then (if required) restoring the database from that fuzzy backup and forward recovering it by application of log records cut by the database engine which describe the updates that were performed since the start of the fuzzy backup.","From U.S. Pat. No. 5,884,328 there is known a database mirroring mechanism based on a fuzzy backup and incremental changes. However, this known mechanism is particularly related to maintaining replicas in real time rather than re-creating a replica later in time from earlier-recorded data.","In MQSeries systems it is possible to exploit the Coupling Facility List Structure architecture for the storage of messages on shared queues.","Since the data representing messages stored by MQSeries in a Coupling Facility List structure is able to move from one list to another as the unit of work state progresses, extending the technique of fuzzy backup to MQSeries messages stored on a Coupling Facility List structure could potentially lead to excessive amounts of logging describing deletes of data from one list and inserts of the same data to a different list. This approach would therefore have the disadvantage that lots of log records would get cut as the messages transition from key to key and from list to list.","Note, this is true not just for such an MQSeries system but for any system based upon similar principles for moving data around\/accessing data.","Accordingly, the present invention provides an apparatus for backing up a plurality of data elements in a data processing system, wherein the data elements exist in an ordered plurality of states, the apparatus comprising: means for backing up data elements grouped by state, the order in which groups are backed up corresponding to the order of the states in which the data elements exist; and means for logging changes in data in the data processing system.","Preferably all data elements except for exceptions are backed up by the backup means and the logging means comprises: means for determining exceptions; and means for logging the exceptions.","The exceptions may comprise at least one of data elements that move through all states before backup; data elements that are added after backup has started; and data elements that are rolled back from a given state to the previous state in the order.","According to the preferred embodiment, if data elements are determined to be moving though all states before the backup, the logging means logs the state transitions for those data elements.","Preferably the logging means comprises means for logging state transitions for each data element.","Preferably the data elements are messages in a messaging system and the ordered plurality of states comprise: uncommitted puts, committed puts, uncommitted gets, and expired messages.","In the preferred embodiment the backup means further comprises means for backing up a given state twice. This may involve backing up uncommitted gets before backing up the ordered plurality of states.","In one embodiment the data processing system comprises a S\/390 processor arranged to run an OS\/390 operating system.","In one embodiment, the apparatus comprises: coupling means coupled to the data processing system and arranged to store at least one shared queue of the data elements, wherein the backup means is for holding a backup of the data elements held in the coupling means and wherein the log means is for recording changes in data elements stored in the coupling means; and wherein the apparatus further comprises: restore means coupled to the coupling means, the backup means and the log means for restoring coupling means data elements from the backup means and the log means in event of failure; wherein the data elements are messages and the backup means is arranged to backup messages in the sequence uncommitted puts, committed puts, uncommitted gets and expired messages, whereby all messages may be backed up in the backup means except for exceptions which are recorded in the log.","Preferably it is possible to perform a restore of data elements in the sequence restoring backed up data elements, replaying logged data elements and determining the final disposition of data elements from the replay of the log.","In a further aspect, the invention provides a method of backing up a plurality of data elements in a data processing system, wherein the data elements exist in an ordered plurality of states, the method comprising the step of: backing up data elements grouped by state, the order in which groups are backed up corresponding to the order of the states in which the data elements exist; and logging changes in data in the data processing system.","In a yet further aspect, the invention provides a computer program for backing up a plurality of data elements in a data processing system, the computer program comprising program code means adapted to, when run on a computer, perform a method comprising the steps of: backing up data elements grouped by state, the order in which groups are backed up corresponding to the order of the states in which the data elements exist; and logging changes to the data in the data processing system.","The invention is based on use of knowledge of how message data moves from one list to another at unit of work state transitions, and the fact that unit of work state transitions already have the transition logged, to minimize the quantity of data logged.","The following terms, used throughout this description, are reproduced here for ready reference.","A \u201cbackout\u201d (or \u201cabort\u201d) is an operation that reverses all the changes made during the current unit of work. After the operation is complete, a new unit of work begins.","A \u201ccommit\u201d is an operation that applies all the changes made during the current unit of work. After the operation is complete, a new unit of work begins.","A \u201csyncpoint\u201d is an intermediate or end point during processing of a transaction at which the transaction's protected resources are consistent. At a syncpoint, changes to the resources can safely be committed, or they can be backed out to the previous syncpoint.","A \u201cunit of work\u201d is a recoverable sequence of operations performed by an application between two points of consistency. A unit of work begins when a transaction starts or after a user-requested syncpoint. It ends either at a user-requested syncpoint or at the end of a transaction.",{"@attributes":{"id":"p-0034","num":"0062"},"figref":"FIG. 1","b":["100","100","102","104","106","102","104"]},"Within each system , user applications  perform sequences of operations, referred to herein as units of work (UOWs), on shared message queues  via a shared queue manager (SQM)  resident on that system. Shared queue managers  on different systems  that share the same message queue  are referred to herein as a queue-sharing group (QSG). Each shared queue manager  in turn interacts with the coupling facility via a component  of the OS\/390 operating system known as Sysplex Services for Data Sharing (XES). Sysplex Services for Data Sharing (XES) is described more fully in the IBM publication MVS\/ESA Programming: Sysplex Services Guide, GC28-1495-02 (June 1995), incorporated herein by reference.","User applications  on a system  interact with the shared queue manager  on that system via a series of Message Queue Interface (MQI) calls, the most important of which are MQPUT (to put a message onto a message queue ) and MQGET (to get a message from a message queue ). In response to such a call, shared queue manager  issues a call to XES  to invoke a requested system service to communicate with the coupling facility . In response to receiving a call from a shared queue manager , XES  sends an appropriate message command block (MCB) containing data and other operands to the coupling facility  to perform the requested operation. XES  receives back from the coupling facility  a message response block (MRB) containing data and\/or a response code. As part of its list-processing capability, coupling facility  performs requested operations on lists composed of one or more entries.","Each shared queue manager  maintains a record log  of all message transactions involving the CF . Periodically, one of the shared queue managers  uses XES services  to read the contents of the coupling facility  and record them in a fuzzy backup .","The present invention, according to the preferred embodiment, is based on the protocol of backup sequence and logging described below:","A message stored in a CF list structure can be in one of 5 states, which are:","1. uncommitted put","2. committed put","3. uncommitted get","4. committed get","5. expired","It has been observed by the present inventor(s) that in MQSeries systems a message can only move forward (in numerically ascending order) through this list, except for the case of the rollback of an MQGET where the message can move from being an uncommitted get back to being a committed put.","Consequently, it has been realised by the present inventor(s) that by performing the backup of messages stored in the CF in the order:","1. uncommitted puts","2. committed puts","3. uncommitted gets","4. expired messages (A)","there will always be recorded in the backup every message except those:",{"@attributes":{"id":"p-0051","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":{"@attributes":{"id":"ul0002-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":["that move through all the states ahead of the backup; or","that are put after the backup has started; or","that are rolled back from being uncommitted gets to committed puts (the one backward transition)."]}}}},"Further, it has been realised by the present inventor(s) that the log can be relied on to provide message data for the exception cases:\n\n","Referring now to FIG.  and , utilising the above properties of CF list structure, an improved Backup\/Recover Protocol used in the sysplex  is summarized as follows:","As shown in , messages in the CF  are backed up in the following sequence:","step  uncommitted gets","step  uncommitted puts","step  committed puts","step  uncommitted gets","step  expired messages","As will be explained in greater detail below, the step  occurs (in order to avoid a possible timing problem) before steps - corresponding to the \u2018core\u2019 ordered backup sequence referred to at (A) above.","Supporting this backup sequence:\n\n","As shown in , to restore the CF after a failure, the following sequence is used:\n\n","In use of the sysplex  to perform the improved backup\/restore protocol described above, the following may be noted:\n\n","It will be understood that although the invention has been described above in the context of an MQSeries sysplex, the invention is not necessarily limited to MQSeries systems and may be used more generally in other arrangements, particularly where data is accessed by a key and the key associated with an element of data is changed as the data changes from uncommitted (locked) state to committed (unlocked, i.e., available to other applications) state.","In summary, it will be understood that the fuzzy backup of shared queues held in coupling facility list structure described above provides the following advantages:","Although the coupling facility list structure effectively provides keyed access to data held in the structure, and techniques for media recovery by replaying log records (typically insert, change, delete) operations are well understood for record oriented media, traditional logging techniques would require explicit log records be cut each time the key of one of these pieces of data was changed, or the data moved from one list to another (i.e., delete on first list, insert on second).","In contrast, the technique of the present invention is based on exploitation of knowledge of how systems such as MQSeries systems change keys and move data, and thus the number of log records written can be reduce"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A preferred embodiment of the present invention will now be described by way of example only and with reference to the following drawings:",{"@attributes":{"id":"p-0026","num":"0054"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0055"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0028","num":"0056"},"figref":"FIG. 3","b":"1"}]},"DETDESC":[{},{}]}
