---
title: Method and system for compilation with profiling feedback from client
abstract: A computer-implemented method for compilation of applications includes storing, at a server, a plurality of variants, wherein each of the plurality of variants describes a distinct client architecture. A plurality of optimized binaries for an application are maintained at the server, wherein the plurality of optimized binaries correspond to different variants in the plurality of variants. The server receives a request from a client to download the application, wherein the request includes a reference to a first variant that describes the client's architecture. A determination is made that the first variant corresponds to a first optimized binary of the plurality of optimized binaries, and the server provides the first optimized binary to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09185513&OS=09185513&RS=09185513
owner: Google Inc.
number: 09185513
owner_city: Mountain View
owner_country: US
publication_date: 20111202
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure generally relates to compilation of applications using profiling feedback from a client.","Client-side applications are often written in script languages (e.g., Javascript) or compiled into intermediate forms (e.g., bytecode) to run on a wide variety of client computing devices with different central processing unit (CPU) architectures, hardware accelerators, or platform libraries. An interpreter or compiler \u201cjust-in-time\u201d (JIT) approach is used to execute the applications on the client computing device.","However, processing power, RAM, and storage capabilities of client computing devices are usually much less capable compared to desktop or server-side components. Even when power and storage capabilities of a client computing device are as capable as a server, battery power consumption of the computing device is a concern. As a result, client-side compilation of software is often light-weight and not as good as server-side compilation.","To cope with client computing devices that lack certain hardware accelerators or platform libraries, some applications may carry extra software libraries to emulate missing hardware or platform capabilities. The extra software, however, wastes bandwidth at download for clients that already have some or all of the software capabilities and thus do not need the extra software.","According to one general aspect, a computer-implemented method for compilation of applications includes storing, at a server, a plurality of variants, wherein each of the plurality of variants describes a distinct client architecture. The method includes maintaining, at the server, a plurality of optimized binaries for an application, wherein the plurality of optimized binaries correspond to different variants in the plurality of variants. The method includes receiving, at the server, a request from a client to download the application, wherein the request includes a reference to a first variant that describes the client's architecture. The method includes determining that the first variant corresponds to a first optimized binary of the plurality of optimized binaries, and providing, from the server, the first optimized binary to the client.","In some implementations, the method also includes creating, at the server, the plurality of optimized binaries. Further, the method may include receiving, at the server, the plurality of variants. In various implementations, the first optimized binary is created after the request to download the application is received. Additionally, the request to download the application may be received via a digital marketplace. The method may also include receiving, at the server, profile information from the client upon approval by a user, and based on the profile information, automatically providing an updated optimized binary for the application to the user. The profile information may include usage patterns related to the application.","According to another general aspect, a system for optimizing applications includes a memory configured to store executable code, and a processor operably coupled to the memory. The processor may be configured to execute the code to receive, from a client, a request to download an application, wherein the request includes a reference to a variant that describes the client's architecture. Based on the request, the processor may be configured to create a binary file for the application, provide the binary file to the client, and upon receiving profile data from the client, create an optimized binary file for the application using the profile data.","In some implementations, the system is configured to automatically create the optimized binary file using the profile data. The binary file may be created based on the variant. The profile data may include instances of errors when the application is implemented. The instances of errors may be forwarded to a developer of the application.","According to yet another general aspect, a tangible computer-readable storage medium has recorded and stored thereon instructions that, when executed by a processor of a computer system cause the computer system to store a plurality of variants, wherein each of the plurality of variants describes a distinct client architecture, maintain a plurality of optimized binaries for an application, wherein the plurality of optimized binaries correspond to different variants in the plurality of variants, receive a request to download the application, wherein the request includes a reference to a first variant that describes a requesting client's architecture, determine that the first variant corresponds to a first optimized binary of the plurality of optimized binaries, and provide the first optimized binary to the requesting client. In some implementations, the system may receive profile information from the client upon approval by a user, and based on the profile information, automatically provide an updated optimized binary for the application to the user.","According to yet another general aspect, a system for compilation of applications includes a memory configured to store executable code and a plurality of variants, wherein each of the plurality of variants describes a distinct client architecture, and a processor operably coupled to the memory. The processor may be configured to execute the code to maintain a plurality of optimized binaries for an application, wherein the plurality of optimized binaries correspond to different variants in the plurality of variants, receive a request to download the application, wherein the request includes a reference to a first variant that describes a requesting client's architecture, determine that the first variant corresponds to a first optimized binary of the plurality of optimized binaries, and provide the first optimized binary to the requesting client.","In some implementations, the processor is further configured to execute the code to create the plurality of optimized binaries. The processor may be further configured to execute the code to receive the plurality of optimized variants. The optimized binary may be created after the request to download the application is received. The request to download the application may be received via a digital marketplace. The first variant may describe a configuration for a central processing unit architecture of the requesting client. The processor may be further configured to execute the code to receive profile information from the client upon approval by a user, and using the profile information, automatically provide an updated optimized binary to the user.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.","Like reference symbols in the various drawings indicate like elements.","Some differences between computing devices cannot be altered using software. For example, a computing device's lack of a global positioning system (GPS) cannot be altered, although a location may still be approximated by using Wi-Fi and a cellphone tower. For those differences that can be altered by software, a developer of an application may choose to include its own software library when distributing the application, for example to address differences between old and new platforms or devices. A developer may provide his own compression library for platform application programming interface(s) (API) that are not originally supported by certain devices. For example, a developer may provide a digital audio software decoder (e.g., an MP3 software decoder) just in case certain devices do not have a digital audio hardware decoder. As another example, a developer may provide various software video encoders or decoders.","Differences in software and hardware capabilities for computing devices, such as CPU architecture, hardware accelerators, or platform libraries, are referred to as \u201cvariants\u201d in this disclosure. A computing device's \u201cvariant\u201d may also include any information or data about the computing device, including software or hardware associated with the computing device, such as peripheral devices. Client computing devices have the capability to publish their individual \u201cvariants\u201d to servers, for example upon user approval when a user opts to download an application using a web browser.","A web browser executed by a client device can receive code (e.g., HTML code) from a remote server (e.g., a remote server that hosts a website) and can execute the received code on the client device for the benefit of a user of the client device.","In various implementations, the web browser may include or be associated with one or more web applications. In this context, a \u201cweb application\u201d may be configured to perform a single task or multiple tasks for a user. In such an implementation, the web application may be configured to be executed or interpreted by the web browser. This is compared with native applications that include machine executable code and are configured to be executed directly by a processor or via the operating system of the client device, whereas a web application may be incapable of execution or display without the aid of the web browser. Thus, web applications can be run inside a browser with a dedicated user interface, and typically provide functionality and an experience that is more rich and interactive than a standalone website but less cumbersome and monolithic than a desktop application. Examples of web applications include games, photo editors, and video players that are run inside the browser.","Web applications can be \u201chosted applications\u201d or \u201cpackaged applications.\u201d Hosted applications may include at least a portion of a web site that itself includes web pages, plus some metadata that may be especially pertinent to the web application or to the user of the web application to allow the web application to perform some particular functionality for the user. Packaged applications can be thought of as web applications whose code is bundled, so that the user can download all of the content of the web application for execution by the browser. A packaged web application may not need to have network access to perform its functionality for the user, and rather may be executed successfully by the browser locally on the computing device without access to a network. Packaged web applications have the option of using Extension APIs, allowing packaged applications to change the way the browser behaves or looks.","In various implementations, the web browser may include or be configured to interact with one or more browser extensions. In this context, a \u201cbrowser extension\u201d may include one or more web pages packaged or grouped together as a definable whole, and configured to extend the functionality to the web browser. Thus, extensions also provide extra functionality to a browser, but generally, unlike applications, there is little or no user interface component to the functionality provided by an extension. Instead, web extensions extend the functionality of the browser and the websites being viewed in it. For example, web extensions can extend the functionality of the browser by adding a new button to the address bar, such as an ever-present currency converter. Buttons like this can also apply to the current website being viewed\u2014for example, clicking the currency converter button can convert all prices on the website presented to a user into a currency chosen by the user. In another example, an extension can be installed so that when a user hovers a cursor over a thumbnail image on a webpage executed by a browser a larger-size version of the image is displayed until the user moves the cursor away from the image. In another example, and extension may be installed to embed a \u201cmail this\u201d button next to every link in every page. Compared to web applications, extensions cut across websites and web applications. Extensions are usually in effect across all websites (though some are site-specific). Web applications do not combine with other applications in this way. Rather, web applications run standalone, like any regular website.","When installable web applications are \u201cinstalled\u201d by the user, the web applications may be added to and integrated with the user's web browser. Installation can include adding a shortcut to an application launcher area of the browser. An installation also allows web applications to obtain increased privileges without having to prompt the user for each one individually. Special user interface treatments may apply for the web application's tabs or windows. \u201cInstalling\u201d a web application may include integration with: a client's operating system's task and window managers for easy window switching, a taskbar or quick-launch system, interoperating system notification(s), or persistently running background processes. Uninstallation allows for easy removal or deactivation of an installed application from the user's browser or system, and may include revoking all associated privileges. A server-side flag can be used to disable applications remotely.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","100"]},"The network  includes server  and computing devices  and . The computing devices  and  may take the form of a number of different devices, such as a personal computer, laptop computer, tablet computer, netbook computer, or a web-enabled phone, as examples. Device  includes a CPU , hardware accelerator(s) (HW ACCEL) , an operating system (O\/S) , a platform library , and a memory . CPU  may be any general processor, and O\/S  may be one of many operating systems. Memory  may be one or more storage devices configured to store information used by CPU  to perform certain functions. For example, memory  may include app , which may be a web application related to photo editing, for example. Examples of hardware accelerators (HW ACCEL ) include video cards or graphics cards, or any hardware built on top of field-programmable gate array chips, and may include any hardware that is used to perform some function faster than is possible in software running on a general CPU, such as CPU . It will be appreciated that in some embodiments, computing device  will not include any hardware accelerators.","Platform library  may include a collection of resources used to develop software, such as a Java class library or a C\/C++ library. Variant  may include information about device 's hardware architecture and platform libraries, such as information about CPU , HW ACCEL , and platform library , for example.","Device  includes a memory , an O\/S , a CPU , which may be any general processor, platform library , and hardware accelerator(s) (HW ACCEL) . Platform library  may include a collection of resources used to develop software, such as a Java class library or a C\/C++ library. Variant  may include information about device 's hardware architecture and platform libraries, such as information about CPU , platform library , and HW ACCEL , for example.","In the network , the computing devices  and  are coupled with a network . The network  may include a data access network that provides access to the Internet and\/or the World Wide Web. Via the network , computing devices  and  (using web browsers, for example) may communicate with a server . Server  includes a CPU , a memory , an O\/S , an optimizer , applications , binaries , and variants . Optimizer  may compile code for each application in applications , and may generate a binary file for each application. Binary files (\u201cbinaries\u201d)  are computer files which may contain any type of data encoded in binary form for computer storage and processing purposes. A binary may be a completely functional program (e.g., a web application) capable of use by a computing device (e.g., devices  and ) without any installer, for example.","In one implementation, the server  may be configured to receive requests from client computing devices (such as devices  and ) for download of applications, and to provide, in response to such requests, binaries for the applications (e.g., for web applications or browser extensions).","The particular binary that is sent from server  to computing device  or  may depend on the \u201cvariant\u201d of the requesting device (e.g., the hardware and software capabilities and architecture of computing device  or ), as described in more detail below with respect to . Variants  may be stored in a storage location in server , or, in some implementations, variants  may be store remotely from server .","In the arrangement shown in , a browser may be used to request installation of applications  by interacting with the server . For instance, server  may implement a website that is used to distribute applications, such as web applications, among other content. As an example, the server  may implement an e-commerce site. The server  may acquire applications from developers, for example via network .","Requests to install applications may be included in messages from the computing devices ,  to the server  that indicate agreement to purchase respective applications. In other implementations, the server  may take other forms or implement other techniques, such as providing access to free applications, or may take the form of a developer's website which provides access to application installation procedures\/packages.","The specific actions performed when installing an application may vary depending on the particular implementation and\/or the particular application. In an example implementation, installing a web application may include installing an icon that corresponds with the web application in an application launcher area of a web browser application. A user may then interact with this icon to launch the web application. In another example implementation, installing a web application may include syncing the web application across multiple computing devices (e.g., mobile phones, smart phones, tablets, laptops, desktops) that a user accesses, for example from different locations at different times (e.g., using the same login credentials).","In other implementations, installing a web application may include starting a background page for the web application, if the web application includes a background page feature. A background page of a web application may enable the web application to run as soon as the user logs into their computer, including before the user launches a web browser application or launches the associated web application in the web browser application. A background page may an invisible element running in a browser application, where the background page includes a declared association, in the web browser application, with the installed web application.","While network  illustrates only a single server , it will be appreciated that additional servers may be included in network .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 2","FIG. 2"],"b":["140","210","110","149","110","110","149","149","140","142","147","148","140"],"sub":"1 "},"Server  may utilize the variant  to determine if a binary exists for application  that matches or relates to the received variant . For example, server  may use a data store  (e.g., table, database, etc.) that includes applications  (e.g., A, A, etc.), binaries  (B, B, B, etc.), and variants  (V, V, V, etc.) to determine which, if any, binary for application  corresponds to variant . In the example discussed above, the user of computing device  requests to download application \u201cA\u201d  from server , for example via a web browser. Computing device  may also send a reference to variant  that describes variant  to server  before, with, or after the request to download application \u201cA\u201d . Server  determines that application \u201cA\u201d  corresponds to several different binaries (e.g., any of binaries , such as binary \u201cB\u201d A, \u201cB,\u201d and \u201cB\u201d). Server  also determines that variant  \u201cV\u201d corresponds to binary A \u201cB\u201d. Upon determining that variant  corresponds to binary A, server  sends binary \u201cB\u201d A to computing device . Binary \u201cB\u201d A may be the binary that is optimized for device 's architecture.","In some implementations, server  may only need to compile or optimize code once to generate a binary for each variant. The number of binaries  may grow over time, but the number of binaries  at server  is still fewer than having millions of clients each doing their own individual compilations.","In some implementations, optimizer  may compile code to generate a new binary for an application on-demand, i.e., when computing device  requests to download the application from server . Server  may determine that a binary for computing device 's variant does not yet exist. In this example, the binary may be specialized for the particular client (e.g., computing device ). Specialized binaries may save bandwidth on download, may take up less space in computing device's storage  (e.g., RAM\/ROM), and may execute faster for certain computing devices. Server  sends the binary (e.g., binary A) to computing device . Computing device  may store binary A in storage , for example, and CPU  may use binary A to execute the requested application.","A debug symbol is information that expresses which programming-language constructs generated a specific piece of machine code in a given executable module. Sometimes the symbolic information is compiled together with the module's binary file, or distributed in separate file, or simply discarded during the compilation or linking. This symbolic information enables a person using a symbolic debugger to gain additional information about the binary, such as the names of variables and routines from the original source code. This information can be helpful while trying to investigate and fix a crashing application or any other error.","When debug symbols are embedded in the binary itself, the file can then grow significantly larger (sometimes by several megabytes). To avoid this extra size, some compilers and debugging systems output the symbolic information into a separate file.","In the implementation described above with respect to , server  may have all the details for symbolic information for debugging available because server  performs the whole compilation for an application, unlike a JIT compiler running on a client, which either has to store its own symbolic information during compilation (which takes up a lot of storage) or lack the symbolic information (making debugging difficult). Symbolic information is usually much larger than a binary, and it saves space on a client device if server  stores the symbolic information.","Information (e.g., variant , or usage information related to the application) that is provided by computing device  to the server  may be provided on an opt-in basis. In other words, such information may be provided from the computing device  to the server  only if a user of the computing device specifically authorizes the transmission of such information from the computing device to the server. Further, in some implementations, application updates may be reported to users that have opted to receive such information, such as to a user who opted to receive updates (e.g., when the user downloaded an application). In addition, data may be anonymized in one or more ways before it is sent, so that personally identifiable information is removed.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 3","FIGS. 1 and 2","FIG. 2"],"b":["110","310","149"]},"A plurality of optimized binaries (e.g., binaries  shown in ) are maintained at the server for an application (). The optimized binaries may correspond to different variants or different sets of variants in the plurality of variants. For example, one of the optimized binaries may be a re-compiled application that is specialized to enhance a user's experience based on a particular CPU architecture.","The server receives a request (e.g., from computing device  shown in ) to download the application (). The request may include a reference to a first variant (e.g., variant  described above with respect to ) that describes a client's architecture (e.g., computing device ). A determination is made whether the first variant corresponds to one of the plurality of optimized binaries (). For example, as shown in , optimizer  may determine that variant \u201cV\u201d  corresponds to a first optimized binary \u201cB\u201d A, from binaries .","If not (, no), server  may compile and store a first optimized binary for the first variant (). If the variant corresponds to one of the optimized binaries (e.g., a first optimized binary) (, yes), or after compiling and storing the first optimized binary (), the server provides the first optimized binary to the client (), for example via network  shown in .","To optimize applications, developers may need to understand how the applications are actually used (i.e., \u201cusage patterns\u201d). Not all computing devices are the same, and a developer cannot necessarily predict all differences or each user's usage pattern for an application. A user may download a generic version of an application, which may be subsequently optimized, for example based on the user's usage pattern. Some or all of the process shown in  may be performed automatically, with user approval. For example, a user may authorize automatic application updates when a user downloads an application from a digital marketplace.","A developer may write in a script language or compile code into intermediate forms (e.g., bytecode). To target different variants, a developer does not need to generate native binary code. For example, writing applications in Javascript or Java is sufficient. In some implementations, developers may use portable solutions. For example, portability means that a web page renders and behaves the same way, regardless of the browser's operating system or the type of hardware it is running on. In some implementations, a developer can build and run binaries for a variety of processor architectures, and can create a portable representation of the binaries. A browser running on any type of processor could translate the portable representation into a native binary without access to the source code of the program.","The developer may submit the application to a digital marketplace (e.g., server  shown in ), from which a user may download the application. In one exemplary implementation, a server may optimize the application for a user (e.g., a particular user or a typical anticipated user), for example based on usage patterns.  is a flowchart of an exemplary process for optimizing applications. The flowchart shown in  may be performed at least in part by a server (e.g., server  shown in ). The system receives, from a client (e.g., computing device  shown in ) a request to download an application, wherein the request includes a reference to a variant that describes the client's architecture. The request includes a variant. (). The reference to the variant may include data about the computing device's CPU architecture, hardware accelerators, or platform library, for example (e.g., variant  shown in ). Based on the request, the system creates a binary file for the application (). The system provides the binary file to the client ().","A client (e.g., computing device ) may collect profile data while implementing the application. As an example, profile data may include data about how a video editing application is used on the computing device. The data may be collected in the background while the video editing application is implemented at the computing device.","Upon receiving profile data from the client (e.g., usage patterns or other information related to use of the application), the system creates an optimized binary file for the application using the profile data (). In some implementations, the optimized binary file may be sent to the user immediately or shortly after submitting the profile data, or at a later time as a regular application update. In the example mentioned above, if a user implements some function of the video editing application more frequently than other functions, the frequently used function may be optimized to run 10-20% faster, for example, to cut down on latency. In this example, the rest of the video editing application may be left un-optimized, and the video editing application's overall performance is therefore enhanced for the particular user of the computing device.","In some implementations, profile data may be collected at various levels. At a function level, a compiler can instrument each function of an application (i.e., insert code at the prologue of function) to count how many times the function is executed. A larger counter indicates the popularity of that function (or worthiness of re-compilation or optimization). At another level, a function may consist of at least one \u201cbasic block\u201d (i.e., a single-entrance, single-exit, stream of instruction in compiler terms) and edges (i.e., potential execution paths) between basic blocks. Basic blocks and edges form a \u201ccontrol-flow-graph\u201d (CFG). A compiler can insert code in each basic block to count how many times each block is executed. The compiler can than re-optimize to favor a frequently executed \u201chot\u201d path in the CFG.","Instrumentation at a basic block level can significantly bloat the code size, however, and can also skew the run-time performance. Another alternative is to perform sampling-based profiling where operating systems sample instruction pointer(s) (\u201cIP\u201d) at a pre-determined time interval. The compiler can map the IP back to the source line of a program (much like a debugger can map IP back to source lines) and figure out the \u201chot\u201d path of the CFG. Assigning a counter for each instruction address is expensive, so in some implementations, adjacent IP (e.g., a group of 16) may share the same counter.","Profile data collection may also be subject to the how representable the training inputs are with respect to typical use, and a user's behavior or use of an application can also change overtime. In some implementations, a threshold to trigger re-compilation, or to trigger when profile data is sent to server , may exist, for example to avoid a recompilation \u201cping-pong\u201d between two popular uses of an application too often. In some implementations, server  may provide two different optimized versions of the application to a user, for example to address two popular uses of the application.","In some implementations, differences in usage can become an additional dimension of a variant. Server  can group similar sets of usage together, to reduce the number of variants due to different types of usage. For example, in some implementations, server  may find a binary among the binaries  that best matches a variant, for example a binary with usage similar to usage by a particular computing device. In some implementations, server  may locate several binaries that match a variant. In those implementations, the first binary that server  locates as matching a variant may not be the best binary after server  considers usage patterns. Server  may locate the best binary, based on usage patterns, among the subset of binaries that matches the variant.","In some implementations, if a computing device or a user can not provide profile data, or if a user opts not to provide certain data, a server may deliver its best guess for an optimized binary, for example based on aggregated data (e.g., geographic data, language data, social graph data, etc.).","In some implementations, if an application crashes, the computing device may collect a \u201ccore dump\u201d (e.g., a memory or storage dump that records the state of the working memory of a computer program at a specific time) for the server, and the server may match up the \u201ccore dump\u201d data with symbolic information stored at the server. Server  may send the information to a developer of the application to assist in debugging.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 5","b":["500","550","500","550"]},"Computing device  includes a processor , memory , a storage device , a high-speed interface  connecting to memory  and high-speed expansion ports , and a low speed interface  connecting to low speed bus  and storage device . Each of the components , , , , , and , are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. The processor  can process instructions for execution within the computing device , including instructions stored in the memory  or on the storage device  to display graphical information for a GUI on an external input\/output device, such as display  coupled to high speed interface . In other implementations, multiple processors and\/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices  may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).","The memory  stores information within the computing device . In one implementation, the memory  is a volatile memory unit or units. In another implementation, the memory  is a non-volatile memory unit or units. The memory  may also be another form of computer-readable medium, such as a magnetic or optical disk.","The storage device  is capable of providing mass storage for the computing device . In one implementation, the storage device  may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory , the storage device , or memory on processor .","The high speed controller  manages bandwidth-intensive operations for the computing device , while the low speed controller  manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In one implementation, the high-speed controller  is coupled to memory , display  (e.g., through a graphics processor or accelerator), and to high-speed expansion ports , which may accept various expansion cards (not shown). In the implementation, low-speed controller  is coupled to storage device  and low-speed expansion port . The low-speed expansion port, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input\/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.","The computing device  may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server , or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition, it may be implemented in a personal computer such as a laptop computer . Alternatively, components from computing device  may be combined with other components in a mobile device (not shown), such as device . Each of such devices may contain one or more of computing device , , and an entire system may be made up of multiple computing devices ,  communicating with each other.","Computing device  includes a processor , memory , an input\/output device such as a display , a communication interface , and a transceiver , among other components. The device  may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of the components , , , , , and , are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.","The processor  can execute instructions within the computing device , including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide, for example, for coordination of the other components of the device , such as control of user interfaces, applications run by device , and wireless communication by device .","Processor  may communicate with a user through control interface  and display interface  coupled to a display . The display  may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. The display interface  may comprise appropriate circuitry for driving the display  to present graphical and other information to a user. The control interface  may receive commands from a user and convert them for submission to the processor . In addition, an external interface  may be provided in communication with processor , so as to enable near area communication of device  with other devices. External interface  may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.","The memory  stores information within the computing device . The memory  can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units. Expansion memory  may also be provided and connected to device  through expansion interface , which may include, for example, a SIMM (Single In Line Memory Module) card interface. Such expansion memory  may provide extra storage space for device , or may also store applications or other information for device . Specifically, expansion memory  may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example, expansion memory  may be provided as a security module for device , and may be programmed with instructions that permit secure use of device . In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.","The memory may include, for example, flash memory and\/or NVRAM memory, as discussed below. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory , expansion memory , or memory on processor  that may be received, for example, over transceiver  or external interface .","Device  may communicate wirelessly through communication interface , which may include digital signal processing circuitry where necessary. Communication interface  may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver . In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module  may provide additional navigation- and location-related wireless data to device , which may be used as appropriate by applications running on device .","Device  may also communicate audibly using audio codec , which may receive spoken information from a user and convert it to usable digital information. Audio codec  may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device .","The computing device  may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone . It may also be implemented as part of a smart phone , personal digital assistant, or other similar mobile device.","Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and\/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.","These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the terms \u201cmachine-readable medium\u201d \u201ccomputer-readable medium\u201d refers to any computer program product, apparatus and\/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and\/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term \u201cmachine-readable signal\u201d refers to any signal used to provide machine instructions and\/or data to a programmable processor.","To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.","The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), and the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","A number of implementations and embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention.","In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations and embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
