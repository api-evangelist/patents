---
title: Method for updating data in a distributed data storage system
abstract: There is provided a method implemented in a data storage system including a plurality of storage nodes connected to each other via a communications network. At least one storage node of the plurality of storage nodes may store a first data item. The data item may be arranged to include a reference to a second data item stored in the data storage system. The method may include providing an identifier of the second data item. The method may also include providing status information about the first data item. The identifier may be used to update the first data item, for example based on the status information. The first data item may be stored at the at least one storage node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08997124&OS=08997124&RS=08997124
owner: Compuverde AB
number: 08997124
owner_city: 
owner_country: SE
publication_date: 20110902
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application includes subject matter that may be related to subject matter included in the following applications: U.S. patent application Ser. No. 13\/224,393 entitled \u201cA Method And Device For Maintaining Data In A Data Storage System Comprising A Plurality Of Data Storage Nodes,\u201d filed Sept. 2, 2011; U.S. patent application Ser. No. 13\/224,404 entitled \u201cMethod And Device For Writing Data To A Data Storage System Comprising A Plurality Of Data Storage Nodes,\u201d filed Sept. 2, 2011; U.S. patent application Ser. No. 13\/224,415 entitled \u201cMethod For Data Maintenance,\u201d filed Sept. 2, 2011; U.S. patent application Ser. No. 13\/224,424 entitled \u201cMethod For Handling Requests In A Storage System And Storage Node For A Storage System,\u201d filed Sept. 2, 2011; and U.S. patent application Ser. No. 13\/224,433 entitled \u201cMethod For Data Retrieval From A Distributed Data Storage System,\u201d filed Sept. 2, 2011.","The present disclosure is generally related to methods for updating data in a distributed data storage system comprising a plurality of storage nodes. Moreover, the present concept relates to a server adapted to implement such a method.","One way to store and share large amounts of date is to utilize data storage systems including a large number of storage facilities at geographically disparate locations. Such systems may decrease the risk of data corruption and the risk of data getting lost.","There are a number of methods for writing and maintaining data in such a data storage system, and updating data may use numerous computing resources.","Updating data, especially smaller blocks of data, in such a data storage system while at the same time operating safely and robustly may be difficult.","A method for implementing an updating operation in a data storage system including a plurality of storage nodes is disclosed. The method for updating data stored in a data storage system including a plurality of storage nodes may include receiving status information regarding a first data item stored on a first storage node. The method may also include receiving an identifier of a second data item stored on a second storage node. A reference to the second data item may be included in the first data item. The method may include sending an update of the first data item to the first storage node based on the received status information. The update may include the identifier.","According to an example, there is provided a method implemented in a data storage system including a plurality of storage nodes connected to each other via a communications network. At least one storage node of the plurality of storage nodes may store a first data item. The data item may be arranged to include a reference to a second data item stored in the data storage system. The method may include providing an identifier of the second data item. The method may also include providing status information about the first data item. The identifier may be used to update the first data item, for example based on the status information. The first data item may be stored at the at least one storage node.","By providing status information about the first data item as well as an identifier for the second data item to a device (e.g. a device internal or external to the data storage system), from which the updating process is controlled, the number of communications between this device and the storage nodes may be reduced when updating the first data item.","A virtual directory structure may easily be updated in the data storage system where the data items, such as data files, are stored in an unstructured manner.","Thus, the updating operation in a data storage system including a plurality of storage nodes may be rendered more effective.","An example method may be implemented as software\/hardware combination implementations which are executed on a server or some other data writing device. In another example, the method may be embodied as software\/hardware combination implementations which are executed on one or several storage nodes included in the data storage system.","According to one embodiment, the updating may be performed by means of an application programming interface (API). For example, by using an API, the method may be implemented on many different computing platforms.","According to one embodiment, the API may be implemented on a server in communication with the at least one storage node. The method may be implemented on a dedicated device, for example a device provided by a third party that may not be responsible for the maintenance of the storage nodes.","According to an example embodiment, the API may be implemented in a storage node included in the data storage system. In this example, the number of access points into the storage system may be increased.","According to an example embodiment, the status information may be cached from a previous access to the first data item.","According to an example embodiment, the identifier may be cached from a previous access to the second data item.","By storing the status information and\/or the identifier in a cache memory, the status information may be provided quickly to a device, internal or external to the data storage system, from which the updating process may be controlled. For example, the previous access may be a read or write operation.","According to an embodiment, the updating may include at least one of appending data to an existing data file included in the first data item or overwriting an existing data file included in the first data item.","According to an example embodiment, the status information may include storage location information of the first data item stored at the at least one storage node. By providing storage location information, one may obtain notification about which of the plurality of storage nodes that are storing the first data item, as well as information about the identifier, or key, of the first data item.","According to an example embodiment, the status information may include information about a free storage space condition at the at least one storage node.","According to one embodiment, the status information may include information about a load condition at the at least one storage node.","In an example, the information about the free storage space condition and\/or the load condition may affect the method of updating. For example, the updating act of a first data item stored at a particular storage node may be interrupted if the available storage space at the storage node is insufficient and\/or if the load condition at the storage node is too large.","According to an example embodiment, the act of updating may be initiated on condition that the size of the second data item is smaller than a predetermined value. The method may be made more efficient by handling data items having small sizes. In one example, the method may be performed only if the first data item is below a predetermined size.","According to an example embodiment, the status information about the first data item may be provided at regular (e.g. periodic) time intervals. In this way, the status information may be kept up to date.","According to an example embodiment, the method may further include receiving an acknowledgement from the at least one storage nodes. The acknowledgement may include information about the act of updating. The acknowledgement may include information about whether the updating process was successful or not. The device may re-perform the updating process if the acknowledgement is not received.","According to an example embodiment, at least one of the acts of providing an identifier of the second data item, providing status information about the first data item and updating the first data item may be repeated on a condition of a negative acknowledgement. An advantage of this embodiment is that the process of updating may be repeated, for example in the case of a malfunction, thereby improving the quality and reliability.","According to an example embodiment, the act of updating may be implemented by means of unicast messages. Unicast messages may allow the first data item will be updated in a bandwidth-effective manner.","Exemplary systems include a data storage system including a plurality of data storage nodes connected to each other via a communications network. At least one storage node of the plurality of storage nodes may be arranged to store a first data item. The data item may be arranged to include a reference to a second data item stored in the data storage system. The data storage system may include an application programming interface (API), which may be configured to receive an identifier of the second data item. The API may be configured to receive status information about the first data item. The API, based on the status information, may be configured to update the first data item, stored at the at least one storage node, with the identifier.","In an example, a storage node may be configured to send status information to a server regarding a first data item stored on a first storage node. The storage node may receive an update of the first data item from the server. The update may include an identifier forwarded by the server from a second storage node that stores a second data item that includes a reference to the first data item. The storage node may update the first data item based on the received update.","Other features and structures of the disclosed systems and methods will become apparent to those skilled in the art upon review of the following drawings, the detailed description, and the appended claims.","The structure and architecture of an example of a distributed data storage system  is outlined schematically in . The distributed data storage system  may include a plurality of storage nodes , which may be in communication with a server , as will be described below.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 1","FIG. 1"],"b":["1","5","9","3","5","9","7","5","9","7","7","5","9","11","13","11","13"]},"Each API  may communicate with storage nodes  in the data storage system . The storage nodes  may communicate with each other. Storage nodes  may include storage node API . Each storage node  may include a network interface card (NIC), for example so that the storage node may receive and send data to\/from other storage nodes  and the server . The communications may be based on TCP (Transmission Control Protocol) and UDP (User Datagram Protocol), although other communication methods\/protocols may be implemented.","It should be noted that different APIs  on the same server  may access different sets of storage nodes . It should be further noted that there may exist more than one server  which accesses each storage node . The storages nodes may operate in a similar manner even though multiple servers may access the data storage system.","The components of the distributed data storage system may include the storage nodes  and the APIs  in the server  which may access the storage nodes . For example, the methods for updating and accessing the data may be implemented on server  in . In another example, the methods may be carried out in one, or several, of the storage nodes . Those methods may be embodied as software\/hardware combination implementations which may be executed on the server  and\/or on at least one of the storage nodes . The methods may include determining the operation and the properties of the overall distributed data storage system .","The storage node  may typically be similar to a file server which may be comprised of a number of functional blocks. The storage node  may thus include a tangible storage medium , which for example may include a number of internal (e.g. connected via Integrated Device Electronics (IDE) or Serial Advance Technology Attachment (SATA)) or external hard drives (e.g. connected via Universal Serial Bus (USB) or Firewire), optionally configured as a RAID (Redundant Array of Independent Disk) system. Other types of storage media are however conceivable as well.","Each storage node  may contain a node list including the IP addresses of all storage nodes in its set or group of storage nodes, or a subset thereof. The number of storage nodes in a group may vary from a few to hundreds to thousands of storage nodes.","The storage nodes  of the distributed data storage system  may be considered to be in the same hierarchical level. In other words, there may not be a dedicated \u201cmaster\u201d node that is responsible for maintaining a directory of stored data entities and monitoring data consistency, etc. Instead, each of the storage nodes  may be considered equal, and may, at times, carry out data management operations vis-\u00e0-vis other storage nodes  in the system. This equality may ensure that the system is robust. In case of a storage node malfunction, other nodes in the system may step in for the malfunctioning node and ensure reliable data storage.","According to the example illustrated in , the server  may exist at a different hierarchy level than the storage nodes . It is noted, however, that the server functionality as described in the present context may equally well be implemented in any, or several, of the storage nodes  included in the data storage system . This alternative implementation of the server functionality may give rise to a different, equally applicable, hierarchical structure of the data storage system .","The reading of data, as well as other functions in the system, may utilize multicast communication to communicate simultaneously with a plurality of storage nodes. Exemplary multicast or IP multicast communications may be a point-to-multipoint communication which may be accomplished by sending a message to an IP address which is reserved for multicast applications. For example, a message, for example a request, may be sent to such an IP address (e.g. 244.0.0.1), and a number of recipient servers may be registered as subscribers to that IP address. Each of the recipient servers may include its own IP address. When a switch in the network receives the message directed to 244.0.0.1, the switch may forward the message to the IP addresses of each server registered as a subscriber.","In principle, a single server may be registered as a subscriber to a multicast address, in which case a point-to-point, communication may be achieved. However, in the context of this disclosure, such a communication may nevertheless be considered a multicast communication since a multicast scheme is employed.","Unicast communication may also be employed, for example a communication with a single recipient.","The tangible storage medium  may store one or more data items ,  in the form of collection objects  and\/or payload data in the form of data files . A collection object  may include a set of references. A reference may be a reference to one or more data files stored in the storage system (e.g. data files ). A reference may also be a reference to another collection object  stored in the storage system. A reference may include a pointer (e.g. a memory address) to a storage location of a storage node . A reference may include an identifier of the collection object or data file referred to.","The collection object  may be used for implementing a structured layer in the data storage system . Data files  referenced in the collection object  may represent data files stored in the structure. Additional collection objects  referenced in the collection object  may represent subdirectories stored in the directory.","A collection object  may be a data object having a predetermined format. The data object may be a special file in the file system of the storage medium  in the sense that it may be a binary file to be interpreted by the API. In an example, the data object may be a standard data file in the file system of the storage medium . The data object may be a text file indicating the referenced collection objects  and\/or data files . A data object may be readable using the same routines of the file system as the data files .",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 2","b":["19","19","20","20","20","19","20","19","20","15","7","20","19","20","19","19"],"i":["a ","a ","a","a ","a ","a","a ","a","a ","a ","a ","a","a ","a "]},"The collection object may include a field with an identifier of another collection object , for example in the form of a string. The collection object may include a reference to the collection object . The collection object may be stored on the same storage node as the collection object or on another storage node than the collection object . The storage system may use the identifier in the field to locate and access the collection object . Thus, the collection object may form a second data item which is identified by a second unique key.","Similarly to the collection object , the collection object may include a field with an identifier of a third collection object . The collection object may include a field with an identifier of a data file . In other words, any one (or more) of the collection objects -may represent a second data item including a reference to third data item, and the data file may represent a second data item including payload data, for example an image.","By appointing the collection object as a root collection object, the collection object may represent a root directory of the storage system. Analogously, the collection object may represent a subdirectory of the root directory . The collection object may represent a subdirectory of the subdirectory . The data file may represent a data file stored in the subdirectory . The collection objects -may thus define a hierarchical storage structure. The structure may be referred to as a directory tree.","In order to implement large storage systems spanning over multiple networks, the data item identifiers -may include two data elements. The first data element may be a cluster ID that may identify the cluster where the data item (collection object -or data file ) is located. The cluster address may be a multicast address so that the API may send a request for a data item to a specific cluster using the multicast address. The second data element may a data item ID formed by a unique number that identifies the data item -inside the cluster. The unique number may be a number of a specified length, e.g. 128 bits, enabling a large number of data items to be uniquely identified within the cluster. By this arrangement a collection object in one cluster may reference another collection object or data file in another cluster. In other words, the first and second unique key may include a cluster address pointing out a subset of the storage nodes within the system, and a data item identifier identifying a data item within the subset of storage nodes.","Referring back to , the server  may for example include a register indicating a storage node  storing the collection object (e.g. collection object ) associated with a specific identifier (e.g. identifier ). In an example, the collection object may be located using the read method disclosed in U.S. patent application Ser. No. 13\/125,524, filed Apr. 21, 2011, the contents of which are hereby incorporated by reference herein. Briefly, according to this read method the server  or a storage node  may send a multicast message to the plurality of storage nodes . The multicast message may include the identifier of the desired collection object . Each storage node , in response to receiving the multicast message, may scan its storage medium  after a collection object having said identifier. If found the storage node  may respond and indicate that it stores the object sought-after to the originator of the multicast message. The collection object may then be accessed by means of a unicast request sent to a responding storage node  storing the collection object ","It is noted that there may be other methods of locating the collection object.","In an example embodiment the server  may use cached information for accessing the data items in the system, for example the identifier (i.e. the identifier ) or key to the data item (e.g. the collection object ) stored at the responding storage node . The identifier or key to the data item may be stored in a memory at the server , which may make it accessible by the API. In addition, the server  may store status information associated to the storage node . In an example, the identifier and\/or the status information may be stored in a memory at one, or several, of the storage nodes  included in the data storage system .","The status information about the collection object , or more generally the data item, may include, in addition to the storage location information, information about a current load condition of the storage node  storing the data item, information regarding which version of the data item that is stored in the storage node , information about which API  and\/or server  (in case there are many) that updated, or created, the version of the data item that is stored in the storage node , information about the data storage availability, information about a system age of the storage node, positional information of the storage node, and\/or the like.","In an example, the status information associated to a particular data item may be provided to the API  at regular time intervals.","In an example, the status information associated to particular data item may be provided to the API  each time the corresponding storage node  storing the data item is participating in an operation in the data storage system . Example operations may include a reading operation, a writing operation, a creating operation and\/or an updating operation.","The operation of the data storage system will be described with reference to  and . More specifically, the method of updating data in the data storage system  will be described.  schematically illustrates an example embodiment of a data updating process.  illustrates a corresponding flow chart of an example method for updating data. Note that the exact order of the steps performed according to  may be altered.","In the following disclosure, the first data item  may be a collection object (e.g. the collection object ) including a set of references. The second data item  may be another collection object (e.g. the collection object ). In another example, the second data item may be a data file comprising payload data (e.g. an image file). The details about the data items have been described in the above. For example, the first  and\/or the second  data item may be stored at additional storage nodes -. In an example embodiment a single data item (e.g. the first data item ) is to be updated. According to this embodiment, the data item may be any kind of file that needs to be updated\/appended with new data (e.g. updates other than updating a collection object with a new reference). Also in this embodiment the cached information disclosed above (and in more detail below) may be used for accessing the data item.","In block , one of the APIs  in the server  may be provided with status information about the first data item  (i.e. the collection object ). More specifically, the server  may resolve the path to the first data item  by utilizing cached storage location information about the first data item . For example, as described above, the storage location information, possibly along with additional status information, may be gained from a previously performed data retrieval process, for example according to the method as disclosed in U.S. patent application Ser. No. 13\/125,524. It is understood, however, that also other methods for gaining the status information about the first storage data item  are conceivable. For example, the storage node  storing the first data item  may provide the server  with status information, including storage information, at regular time intervals.","The status information about the first data item  may be stored at the server . According to another example, the status information may be additionally or only stored at one or more of the storage nodes -. According to yet another example, the status information may be stored at an external device, other that the server  and the storage nodes -, in communication with the storage nodes -","The cached storage location information may include information about which of the storage nodes -may store the first data item . For example, the storage location information may provide their IP addresses, as well as about the key to the first data item  stored at these storage nodes. In , the storage node may store the first data item , which is indicated by the letter A. It should be noted, that the first data item  may be stored at additional several storage nodes -","In block , the API  in the server  may be provided with the key to the second data item  (e.g. the collection object ) by utilizing cached information about the key. Similarly to the above, this information may have been gained from a previously performed data retrieval process and may be stored at the server  and\/or at one or more of the storage nodes -","In , the storage node may store the second data item , which is indicated by the letter B.","In block , the API  in the server  may establish a connection with the storage nodes storing the first data item , for example by utilizing the cached storage information about which of the storage nodes -may store the first data item . The connection may be established by utilizing their IP addresses. This connection may be implemented by means of unicast, see . However, other types of connections, such as multicast or broadcast, are also conceivable.","In block , the first data item  (e.g. the collection object ) may be amended with a reference (e.g. the reference , which may include the identifier for the collection object ) to the second data item , at which point (e.g., block ), the updating process may be complete.","In one example, there may be several already existing keys in the first data item , and in the updating process the cached key to the second data item  may be added to this list of keys in the first data item .","In another example, there may be a data file included in the first data item , and in the updating process the data file may be overwritten by the second data item . In an example, the second data item  may substantially correspond to the data file.","The updated first data item  (e.g. the collection object including the reference ) may be stored at the server . This stored information about the updated first data item  may be utilized for future applications in the data storage system , such as reading, writing or updating operations of data items comprised in the data storage system .","In an example, the act of updating the first data item  may be arranged to not occur or to be interrupted on condition that the size of the second data item  exceeds a predetermined value. An example predetermined value may be 512 kilobyte (kB).","Storage node , storing the second data item , may not actively participate in the updating process according to an example. The first  and second  data items may already be stored at the storage nodes , and in the updating process according to the present embodiment an appropriate directory structure is provided, for example by amending the first data item  with the reference.","As mentioned above, additional storage nodes -may also store the first data item . For example, the storage node in  may store the first data item , but may not participating in the updating process, for example due to a malfunction.","In an example, at least one of the storage nodes participating in the updating process may send an acknowledgement to the API  included in the server  participating in the updating process. The acknowledgement may include information about the performance of the updating act. In particular, the acknowledgement may include information about whether the updating process was successful or not. Additional status information may be included in the acknowledgement.","Additionally, if the updating process fails in more than a predetermined fraction of the storage nodes , for example more than 50%, a replication of at least one of the first data item  and the second data item  at some of the storage nodes  may be performed.","It may happen that a data item stored at two or more storage nodes  are being updated substantially simultaneously by two different APIs . These APIs  may be included in the same, or alternatively, at different servers. The contents of the respective updating processes may differ, thereby giving rise to versions of the data item having different contents. In this case, a selection procedure may be initiated in which one of the versions are selected and thereafter stored at the different storage nodes. Optionally, all the different versions may be stored at the storage nodes.","The selection procedure may be implemented as follows in an embodiment wherein two APIs (e.g. API and API) are in the process of updating a data item which is stored at three different storage nodes (e.g. storage nodes SN, SN and SN). The data items stored at the respective storage nodes are associated to specific version numbers and to information about which API that updated the version of the data item. This version number and API information may be stored in the data sets at the storage nodes as well as at the APIs. In the following, the version number V and API information N are collectively denoted by the version data (V|N). For example, the version data (|) means that the version number  of the data item has been updated by the second API (e.g. API).","The storage nodes are arranged to send acknowledgements to at least one of the APIs including information about whether the updating process was successful or not. Moreover, the acknowledgements may include the version data, e.g. (V|N), associated to the updated data item.","For example, at a particular time instant, it may be that all the data item has the same version number, say version number V=25. The data items stored at the first two storage nodes (e.g. the storage nodes SN and SN) may both have previously been updated by the first API (e.g. API). However, before the first API had the time to do so, the second API (e.g. API) managed to update the data item stored at the third storage node (e.g. storage node SN). Put differently, the first API managed to update the data items stored at the first and second storage nodes with version  before the second API had the time to do so. The acknowledgements sent back to the APIs, as well as the information stored at the storage nodes, thereby may include the version data (|), (|) and (|), for the data items stored at the first, second and third storage node, respectively.","Thus, when the first API at a subsequent time instant attempts to update the third storage node with its version  of the data item, this updating may be arranged to not occur since there is already a version  stored at the third storage node as sent from the second API. Moreover, when the second API at a subsequent time instant tries to update the first and second storage nodes, the updating of these may not occur, since there are already versions  at the first and second storage nodes as sent from the first API.","The APIs receiving the acknowledgements including the version data may be arranged to instruct the storage nodes included in the data storage system  to keep the data item having the version data (V|N) of the data item which is most frequently occurring in the received acknowledgements. For example, if the version data (V|N) of the data item occurs in more than 50% of the acknowledgements, this data item may be kept. In the following, the data item associated to a version data (V|N) may be referred to as a correct version if it is to be kept (e.g., it may be associated with version data (V|N) and\/or may be included in more than 50% of the relevant storage nodes) and a wrong version of the data item (e.g., it may not be associated with version data (V|N) and\/or may be included in less than 50% of the relevant storage nodes).","The APIs may be arranged to send instructions to the storage nodes keeping the wrong versions to delete the wrong versions of the data item. Moreover, wrong versions of the data item may be replaced, or alternatively amended, by the correct versions of the data item at these storage nodes by means of the APIs instructing the storage nodes to send the correct version. In another example, the other storage nodes included in the data storage system  may send the correct version, for example according to the method as disclosed in U.S. patent application Ser. No. 13\/125,524. It should be noted that the wrong versions of the data item may either be replaced, supplemented, or overwritten. In another example, the wrong versions may be amended, in which case the parts of the correct version which differ from the wrong version in question may be added to the wrong version of the data item. Thereby, the data from the wrong versions may be kept in the data storage system.","Thus, in the example involving the three storage nodes and the two APIs, version  as sent from the first API may have version data (|). Version (|) may be kept as the correct version , since this version has been successfully stored at two storage nodes (e.g., SN and SN).","In another example, the data item sent from the second API (e.g. API) to the third storage node (i.e. SN), may be determined to be the wrong version. The determination may be based on the fact that less than half of the storage nodes include this version and\/or that more storage nodes store another version as compared to the number that store this version. In an example, the wrong version may be resent to all of the storage nodes with a new version number, e.g. version number . This data item will then be associated with the version data (|).","According to another embodiment, a backup process may be initiated in case the updating process fails. For example, the server  may multicast a query about at which storage nodes -the first  and second  data item are stored as well as their keys. The updating process may then be executed in accordance with the above.","The updating process described above may be repeated as many times needed for updating a specific hierarchical storage structure in the data storage system .","More specifically, the updating process may be repeated by reiterating the steps described above in relation to  while at the applying the update process to data items farther down the virtual directory tree. In a first reiteration, rather than updating the first data item , the second data item  (e.g. the collection object ) may be updated. A third data item (e.g. the data file ) may also be updated, for example after the second data item has been updated. As a result of the updating process, the second data item  may be updated with a reference (e.g. the reference comprising the identifier for the data file ) to the third data item.","Additional reiterations proceed in analogy with the first reiteration.","According to an another embodiment, the method for updating the data items may further include storing the second data item  at one or several storage nodes . The storage nodes  having the lowest load conditions, the largest free storage space available, or similarly, may be selected for the storage.","For example, the second data item  may be stored by sending a unicast message which may include the second data item  and\/or instructions for storing the second data item . The instruction may be sent on condition that the receiving storage nodes  fulfill a set of criteria. The set of criteria may be predetermined or change with time according to an network and\/or device conditions. This set of criteria may include a minimum available free storage space, a maximum load condition, a maximum system age, a desired geographical range for the storage nodes are to be found within, and\/or the like. Moreover, a corresponding reference to the second data item  may be provided, for example to create an appropriate hierarchical storage structure according to the above.","The storage nodes  may be adapted to store the second data item  on a further condition that the size of the second data item is smaller than a predetermined value.","According to an example, the reference to the second data item  present in the first data item  may be deleted. For example, the second data item  may be erased from all the storage nodes  storing it.","A method for retrieving data from the data storage system  is also disclosed herein. The method may include the sending of a multicast message to a plurality of storage nodes . For example, there may be five storage nodes each having an IP (Internet Protocol) address 192.168.1.1, 192.168.1.2, etc. The number of storage nodes is, needless to say, just an example. The query may contain a data identifier, for example \u201c2B9B4A97-76E5-499E-A21A6D7932DD7927\u201d, which may be a Universally Unique Identifier (UUID). The multicast message may include a request for each of the storage nodes to send a specific data item on a condition the data item is stored at the storage node in question.","The storage nodes may scan themselves for data corresponding to the identifier. If such data is found at some of the storage nodes, a response may be sent which may be received by the server . More specifically, each of the storage node\/nodes  storing the requested data item may transmit a response to the server . The response may include an instance of the requested data item from the storage node\/nodes .","The response may contain further information in addition to an indication that the storage node has an instance, or copy, of the requested data. For example, the response may contain information from the storage node directory about other storage nodes containing the data, storage location information, information regarding which version of the data item is contained in the storage node, information about which API and\/or which server, that created the version of the data item that is contained in the storage node, information about a free storage space available at the storage node, information about a system age of the storage node, information regarding the current load the storage node, and\/or the like.","If, the data item is not stored at a particular storage node, this storage node may be silent or may send reference data to the server. This reference data may include information that the requested data item is not stored at the storage node in question, and may in addition include information about the storage node, such as a current load condition, information about a current data storage availability, storage location information, information about a system age of the storage node, and\/or the like.","The received data items from the storage nodes may be analyzed to check whether at least one instance of the requested data item has a maintained integrity. By a maintained data integrity of a data item is meant an intact condition of a data item as compared to an original data item, up to certain acceptable data discrepancies. In other words, a data item may have a maintained data integrity if the currently stored item has not been edited or changed such that it varies from the data that was intended to be stored (e.g., the most recently saved data version on that storage node).","The act of analyzing may be implemented by analyzing received data from one storage node, from two storage nodes, or alternatively from several storage nodes. The analysis of the data integrity may, for example, be performed in the server. As an example, the analysis may be implemented by means of a checksum algorithm, a cryptographic hash function such as MD5 (Message-Digest Algorithm), a comparison of portions of some or all of the different instances of the requested data item, a comparison with a reference data item, and\/or the like.","As a consequence of the analysis, it may be established whether the integrity of some of the received data items from the storage nodes has been properly maintained or not. If at least one instance of the requested data item has a maintained a desired integrity, an instance of data with the desired integrity may be selected. If several instances of the requested data item have a maintained integrity, one of these may be selected depending on a set of additional criteria. The criteria may for instance include a current load condition of the storage nodes, geographical positions of the storage nodes, a system age of the storage nodes, and\/or other characteristics of the storage nodes. Alternatively, the storage node having the latest version of the requested data item and\/or the lowest load may be selected.","In an example, one instance of the requested data item with a maintained desired integrity, for example the received data from the storage node, may be selected. The received data item from the other storage node may be discarded, for example irrespective of whether this data item also has a maintained integrity. In an example, the received data item from the other storage node may be stored as reference data, for example at the server .","In an example, if the integrity of the at least one instance of the requested data item is maintained at the desired level, a further analysis of the data items received from additional storage nodes may be aborted or interrupted.","In one example, one may compare a number of instances of the requested data item, for example two instances, and interrupt checking additional received data items if these two instances agree to a desired accuracy or comply with a desired integrity state of the data.","In another example, the comparison between different instances may be interrupted when a certain fraction of the total number of instances agrees to a desired accuracy. Typical fractions may be 50%, 60% or 70%, but also other fractions may be equally conceivable.","A desired accuracy may be that the compared data items fully agree, certain portions of the compared data items fully agree, and\/or that certain portion agree to some specified margin (e.g. 99% agreement). In some instances, however, a less strict desired accuracy may be sufficient.","For example, the data integrity may be lost when the connection between the server  and some of the storage nodes  is corrupted such that the transfer of the requested data item fails. The data may also be corrupted and lose integrity when the data storage system suffers from some other malfunction. For example, a storage node storing the requested data item may not be working properly. In this example, the malfunctioning storage node may be unable to transmit an instance of the requested data. If a transfer of data from some of the storage nodes fails, the server may select another storage node, or set of storage nodes, for the retrieval of data.","If no instance of the requested data item from the storage nodes has a maintained integrity, a new multicast message may be sent to the storage nodes, and the steps described above may be repeated. This recursive processing may be reiterated until an instance of the requested data item with a maintained integrity has been received from some of the storage nodes , or alternatively, until a predetermined number of iterations have been performed.","In an example, the server  may send a unicast message to the storage node associated to the data item having a lost integrity, and the message may include information about the nature of the failed transfer, information about the received data item, and\/or the like.","The present method for retrieving data is particularly efficient when a majority of the data items to be handled by the data storage system are small and a minority of the data items to be handled are large. What is considered a small or large data item may depend on the system capabilities, such as connection speeds between the various entities comprised in the system, storage capabilities, and\/or the like. Definitions of small and large data may vary from system to system (e.g. \u201csmall\u201d may imply data blocks with sizes less than or equal to 512 kB and\/or less than a predetermined fraction of the data bandwidth available in the system).","If the majority of the data items to be handled by the system are considered to be small, one may assume that the size of all the data items to be retrieved is small. Moreover, if the size of the data to be retrieved exceeds a predetermined value, the transmittal from the storage node storing this data, as well as from the additional storage nodes storing instances of this data, to the server may not occur or may be halted, aborted, stopped, interrupted, etc. This decision may be made locally at the storage nodes storing the data to be retrieved and\/or by the server.","For example, the storage nodes storing the data to be retrieved may send reference data back to the server, which may include information about the sizes and the storage locations of the data items which were supposed to be sent, file handles, and\/or additional relevant information about the storage nodes, such as a current load condition, a free storage space available, a system age, position information, etc. In addition, the reference data may include instructions for the server to retrieve the data item from a particular set of the storage nodes storing the requested data. In one example, the data item may be retrieved from one particular storage node by means of a unicast communication.","In the above the embodiments mainly have been described with reference to a limited number of examples. However, as is readily appreciated by a person skilled in the art, other examples than the ones disclosed above are equally possible within the scope of the disclosure, as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above, as well as additional objects, features, and structures of the disclosed systems and methods, will be better understood through the following illustrative and non-limiting detailed description of example embodiments, with reference to the appended drawings, where like reference numerals will be used for like elements, wherein:",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
