---
title: Generating programmatic interfaces from natural language expressions of authorizations for request of information
abstract: An embodiment of the present invention is a technique for processing an authorization rule. An object type is created for a return type of an operation in the rule authorizing a request for information. A current container is established. A propositional expression in the rule is processed to record the object type as a resulting context from the propositional expression in the current container.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07620935&OS=07620935&RS=07620935
owner: Microsoft Corporation
number: 07620935
owner_city: Redmond
owner_country: US
publication_date: 20040430
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE INVENTION","DESCRIPTION"],"p":["This application is related to the following patent application Ser. No. 10\/836,822 entitled \u201cGenerating Programmatic Interfaces From Natural Language Expressions Of Authorizations For Provision Of Information\u201d, filed on the same date and assigned to the same assignee as the present application, the contents of which are herein incorporated by reference.","1. Field of the Invention","Embodiments of the invention are in the field of natural language processing, and relate more specifically to programmatic interfaces from natural language expressions.","2. Description of Related Art","Natural language used by human to communicate tends to be contextual and imprecise. To automate natural language processing using computerized methods, certain rules are usually imposed to confine the natural language expressions to a well-defined format. There are several applications that can provide an environment where natural language expressions may be expressed in an unambiguous format. One such application is business rules.","When business services or transactions are automated in a computer system, business rules provide business requirements on the automated system. These requirements dictate what the system should and should not do, or who can provide information to the system and who can request information from the system. However, the process of translating business rules expressed in business language into software components using human software developers tends to be error-prone and time-consuming. Automatic generation of software systems from business rules will save time and avoid the problem of errors that would occur in manual translation.","An embodiment of the present invention is a technique to process an authorization rule. An object type is created for a return type of an operation in the rule authorizing a request for information. A current container is established. A propositional expression in the rule is processed to record the object type as a resulting context from the propositional expression in the current container.","An embodiment of the present invention is a technique to process an authorization rule. An object type is created for a return type of an operation in the rule authorizing a request for information. A current container is established. A propositional expression in the rule is processed to record the object type as a resulting context from the propositional expression in the current container.","In the following description, numerous specific details are set forth. However, it is understood that embodiments of the invention may be practiced without these specific details. In other instances, well-known circuits, structures, and techniques have not been shown in order not to obscure the understanding of this description.","An embodiment of the present invention considers the part of an authorization rule that expresses what information may be requested, apart from any consideration of who requests it or conditions under which it may be requested. The method of the present invention examines propositional expressions of the authorization rule with respect to use of propositional interrogative operators, interrogative operators and parametric operators.","Many relevant linguistic concepts are used in the following description. These concepts are developed using a linguistic terminology that includes a number of terms. These terms include \u201cexpression\u201d, \u201cnominal expression\u201d, \u201cterm\u201d, \u201cname\u201d, \u201cnumerical literal\u201d, \u201ctextual literal\u201d, \u201crole expression\u201d, \u201csentence\u201d, \u201csimple sentence\u201d, \u201ccomplex sentence\u201d, \u201cfunctional form\u201d, \u201csentential form\u201d, \u201cparametric operator\u201d, \u201cinterrogative operator\u201d, \u201cpropositional interrogative\u201d, \u201cidentification scheme\u201d, \u201ctype\u201d, \u201ccategory\u201d, \u201crole\u201d, \u201csupertype\u201d, and \u201csubtype\u201d.","An expression is a symbol or combination of symbols that means something. The meaning can be anything, including a proposition, a rule, a number, etc.","A nominal expression is a category of expression that names a thing or things.","A term is a category of symbol, a symbol that denotes being of a type, i.e., a common noun. Examples: \u201ccar\u201d denoting a category of vehicle, \u201cbank account\u201d.","A name is a category of symbol and of nominal expression; a symbol that names an individual thing, i.e., a proper noun. Examples: \u201cCalifornia\u201d naming a state of the United States, \u201cUnisys\u201d naming the company Unisys.","A numerical literal is a category of name that denotes a number using numerals. For example, \u201c123\u201d meaning the number 123.","A textual literal is a category of symbol and of nominal expression; a symbol that represents words, punctuation, textual characters or a sequence of any of these by literal presentation, as in quotation marks. For example, \u201chello\u201d representing the word \u201chello\u201d.","A role expression is a category of nominal expression. A nominal expression consists primarily of a term given in place of a placeholder in an expression based on a functional form, and consists secondarily of each operator (e.g., quantifier, pronominal operator, parametric operator, interrogative operator) and object modifier applied to the term together with any expression of instances specifically referenced by the term, or, if the denoted type's range is restricted using a nominal restrictive form, that nominal restrictive form along with the expression of each argument to the function delineated by that form. Examples: \u201ca checking account\u201d in the expression \u201ca checking account has the overdraw limit ($1000.00)\u201d; \u201cthe overdraw limit ($1000.00)\u201d in the expression \u201ca checking account has the overdraw limit ($1000.00)\u201d.","A sentence is a category of expression; an expression that denotes a proposition (possibly an open or interrogative proposition).","A simple sentence is a category of sentence; a sentence that is stated using a single sentential form\u2014no logical connectives. It includes a nominal expression for each placeholder of the sentential form. Example: \u201cEach person has a name\u201d.","A complex sentence is a category of sentence. It is a sentence that combines other sentences using a logical connective such as if, and, or, etc. Example: \u201cEach American citizen has a name and a social security number\u201d.","A functional form is a category of symbol and of expression; a complex symbol that is a sequence of typed placeholders and words interspersed that delineates a function and serves as a form for invoking the function in expressions. Each typed placeholder appears in the sequence as a term denoting the placeholder's type specially marked in some way (such as by underlining).","A sentential form is a category of functional form that delineates a propositional function. Example: \u201cvendor charges price for product\u201d.","A parametric operator is a category of operator that when expressed with a term denotes a discourse referent determined by future discourse context, with singular quantification. Example: \u201ca given\u201d in \u201cEach medical receptionist is authorized to provide what doctor sees a given patient\u201d.","An interrogative operator is a category of operator that when expressed with a term in a role expression denotes a discourse referent determined by future discourse context. The role expression is thereby a name for satisfiers in the encompassing sentence. Examples: the operator \u201cwhat\u201d in \u201cWhat doctor sees what patient\u201d, the operators \u201cwhich\u201d and \u201cwhat\u201d in \u201cWhich doctor sees what patient\u201d. Note that \u201cwhat\u201d carries the meaning of \u201cwho\u201d, \u201cwhen\u201d, \u201chow\u201d, \u201cwhere\u201d, \u201cwhy\u201d, etc. when used as an operator on a term, e.g., in \u201cwhat person\u201d, \u201cwhat time\u201d or \u201cwhat date\u201d, \u201cwhat method\u201d, \u201cwhat location\u201d, \u201cwhat purpose\u201d, etc.","A propositional interrogative is a category of operator that when expressed with a proposition denotes the truth-value of the proposition with regard to future discourse context. Example: the operator \u201cwhether\u201d in \u201cwhether each doctor is licensed\u201d.","An identification scheme is a scheme by which a thing of some type can be identified by facts about the thing that relate the thing to signifiers or to other things identified by signifiers. The identifying scheme comprises of the set of terms that correspond to the signifiers. Example: an employee may be identified by employee number.","A type is a classification of things (often by category or by role). A category is a role of a type in a categorization relation to a more general type. The category classifies a subset of the instances of the more general type based on some delimiting characteristic. Example: checking account is a category of account.","A role is a role of a type whose essential characteristic is that its instances play some part, or are put to some use, in some situation. The type classifies an instance based, not on a distinguishing characteristic of the instance itself (as with a category), but on some fact that involves the instance. Example: destination city is a role of a city.","A supertype is a role of a type used in relation to another type such that the other type is a category or role of the supertype, directly or indirectly. Each instance of the other type is an instance of the supertype. Examples: animal is a supertype of person (assuming person is a category of animal) and person is a supertype of driver (assuming driver is a role of a person).","A subtype is a role of a type used in relation to another type such that the subtype is a category or role of the other type, directly or indirectly. Each instance of the subtype is an instance of the other type. This is the inverse of supertype. Examples: person is a subtype of animal (assuming person is a category of animal) and driver is a subtype of person (assuming driver is a role of a person).","In one embodiment, the invention is implemented using object-oriented technique. The object-oriented technique is a method to represent a system using objects and associations between objects. The technique involves the use of \u201cclass\u201d, \u201cassociation\u201d, \u201cattribute\u201d, and \u201coperation\u201d. Although these terms are commonly known, they are defined in the following for clarification.","A class is an abstract concept representing a real world thing of interest to the system, such as a person, a router in a network, etc. A class is a template that defines the behavior and attributes that particular type of object possesses. A class can be the base for other classes. The behavior of the object is the collective set of operations that the object can perform, which are defined in respective class. The state of the object is defined by the values of its attributes at any given time.","An association represents a relationship between objects.","An attribute represents some aspect of an object. For example, the color of an automobile, the date of birth of a person. Each attribute has a type that defines the range of values that the attribute can have.","An operation represents a behavior that an object possesses.","A business rule that authorizes requests for information by a business actor indicates what information can be provided to the business actor. Such indications build on three linguistic concepts: (1) propositional interrogatives, (2) interrogative operators, and (3) parametric operators. These concepts are easily exemplified in English or other languages. The following are some examples in English.","Propositional interrogative: \u201cA bank manager may request whether at least one account is suspended.\u201d In this example, the word \u201cwhether\u201d is a propositional interrogative for the proposition \u201can account is suspended\u201d. This rule allows a bank manager to request the answer to the yes\/no question \u201cwhether at least one account is suspended\u201d.","Interrogative operator: \u201cA bank manager may request what account is suspended.\u201d In this example, the word \u201cwhat\u201d is an interrogative operator acting on the term \u201caccount\u201d in the scope of the proposition \u201caccount is suspended\u201d. This rule allows a bank manager to request a list of accounts which are suspended.","Parametric operator: \u201cA bank manager may request whether a given account is suspended.\u201d, \u201cA bank manager may request which loan officer is assigned to a given loan.\u201d A parametric operator is used to indicate where a requestor indicates what thing is being asked about. In the two examples above, the word \u201cgiven\u201d is a parametric operator acting on the terms \u201caccount\u201d and \u201cloan\u201d, respectively. The first rule allows a bank manager to request the answer to a yes\/no question about any particular account that the bank manager specifies\u2014whether that account is suspended. The second allows a bank manager ask a question about a loan that the bank manager specifies\u2014what loan officer is assigned to it.","The third concept can be used in combination with either of the first two, but the first two concepts are distinct in usage and are not mixed except when using conjunction (explained below). For example, a propositional interrogative (like \u201cwhether\u201d) is not used in an authorization rule on a proposition containing an interrogative operator (like \u201cwhat\u201d). However, multiple interrogative operators can occur in a single proposition. For example: \u201cA bank manager may request which loan officer is assigned to what loan.\u201d In the above example, \u201cwhich\u201d and \u201cwhat\u201d are both interrogative operators indicating that a bank manager can request a list of assignments of loan officers to loans.","Similarly, parametric operators can be used multiple times in a single proposition: \u201cA bank manager may request whether a given loan officer is assigned to a given loan.\u201d In this example, \u201ca given\u201d is a parametric operator indicating that both a loan officer and a loan are identified by a bank manager when requesting information.","It is possible for a rule to be conditioned on other information. For example, the rule above could be conditioned: \u201cA bank manager may request whether a given loan officer is assigned to a given loan if the loan is with a bank managed by the bank manager.\u201d","The condition does not affect what information can be requested other than to limit the circumstances in which the request is allowed. Such conditions do not change affect the interface of a software component that dispenses the information, but only the behavior of the component\u2014whether or not it will accept a request for information. For this reason, conditions placed on authorization rules can be ignored in the method of the present invention.","Note that the three linguistic concepts above are represented by many different words in English (e.g. \u201cwhich\u201d for \u201cwhat\u201d) and by many different words in other languages. The present invention does not consider specific words, but the three specific linguistic concepts categorized above.","A single authorization rule can use conjunction in order to authorize multiple kinds of information. Example: \u201cA bank manager may request what credit limit is on a given account and whether the account is suspended.\u201d The rule above uses the word \u201cand\u201d to indicate conjunction, which causes authorization to be granted, in this case, for two kinds of facts. Note that conjunction can occur using other words or forms. It is a general linguistic concept found in all languages.","One embodiment of the invention translates request interrogatives to object-oriented (OO) application programming interfaces (APIs). Each business rule that authorizes a request for information results in a single operation in an OO API. Each operation takes one or more parameters as arguments and returns a single object as a result. The type of the returned object, the number of parameters and the type of each parameter is determined in the operations described below.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 1","b":["100","100","110","120","130","100"]},"The business rule generator  generates business rules to be used in the business processing system . These business rules are in a linguistic form having a predefined syntax or format. In one embodiment, these business rules may represent authorizations to request or to provide information.","The translator  translates the business rules generated from the business rule generator  into application programmatic interfaces (APIs) that can be incorporated into the automated processing system . The APIs represent software components that can be readily integrated into the framework of the business processing system .","The business processing system  processes the business rules encoded as the APIs provided by the translator . The business processing system  may represent any system that process commercial or business transactions such as product ordering, vacation planning, etc.","Elements of one embodiment of the invention may be implemented by hardware, firmware, software or any combination thereof. When implemented in software or firmware, the elements of an embodiment of the present invention are essentially the code segments to perform the necessary tasks. The software\/firmware may include the actual code to carry out the operations described in one embodiment of the invention, or code that emulates or simulates the operations. The program or code segments can be stored in a processor or machine accessible medium or transmitted by a computer data signal embodied in a carrier wave, or a signal modulated by a carrier, over a transmission medium. The \u201cprocessor readable or accessible medium\u201d or \u201cmachine readable or accessible medium\u201d may include any medium that can store, transmit, or transfer information. Examples of the processor readable or machine accessible medium include an electronic circuit, a semiconductor memory device, a read only memory (ROM), a flash memory, an erasable ROM (EROM), a floppy diskette, a compact disk (CD) ROM, an optical disk, a hard disk, a fiber optic medium, a radio frequency (RF) link, etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, etc. The code segments may be downloaded via computer networks such as the Internet, Intranet, etc. The machine accessible medium may be embodied in an article of manufacture. The machine accessible medium may include data that, when accessed by a machine, cause the machine to perform the operations described above. The machine accessible medium may also include program code embedded therein. The program code may include machine readable code to perform the operations described above. The term \u201cdata\u201d here refers to any type of information that is encoded for machine-readable purposes. Therefore, it may include program, code, data, file, etc.","One embodiment of the invention may be described as a process which is usually depicted as a flowchart, a flow diagram, a structure diagram, or a block diagram. Although a flowchart may describe the operations as a sequential process, many of the operations can be performed in parallel or concurrently. A loop or iterations in a flowchart may be described by a single iteration. It is understood that a loop index or loop indices or counter or counters are maintained to update the associated counters or pointers. In addition, the order of the operations may be re-arranged. A process is terminated when its operations are completed. A process may correspond to a method, a program, a procedure, etc.","An embodiment of the invention performs the translation of a business rule, e.g., an authorization rule, into object-oriented application programmatic interfaces (OO APIs). The technique may be described by the following pseudo code.","Block-1: Process the Authorization Rule",{"@attributes":{"id":"p-0065","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":["1. Create an object type for the return type of the operation","2. Create an operation for the authorization whose return type is the object type created in step-1","3. Establish a variable, current-container","4. For each propositional expression in the rule describing requested information\n    \n    ","1. Establish a context for the propositional expression following the steps in block-5","2. Process each role expression in the propositional expression\n    \n    ","3. Process the truthfulness of the propositional interrogative\n    \n    ","1. Establish a context for the propositional expression following the steps in block-5","2. Process each role expression in the propositional expression\n    \n    ","1. Create an object type","2. For each term in the identification scheme of the term\n    \n    ","1. Find each pronominal reference in the propositional expression whose referent is a term in a previously processed propositional expression, but exclude each referent whose referent is the subject of a parametric operator.","2. If a pronominal reference is found (in step 1 above), then\n    \n    "]}},{"@attributes":{"id":"p-0066","num":"0106"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","120"]},"Upon START, the process  creates an object type for the return type of an operation in a rule authorizing a request for information (Block ). Next, the process  establishes a variable called a current container (Block ). Then, the process  processes a proposition expression in the rule to record that the object type in the current container is the resulting context from the proposition expression (Block ). The process  is then terminated.",{"@attributes":{"id":"p-0068","num":"0108"},"figref":"FIG. 3","b":"230"},"Upon START, the process  determines if the rule contain an unprocessed propositional expression describing the requested information (Block ). If not, the process  is terminated. Otherwise, the process  proceeds to set the current container to be the object type for the return type (Block ).","Next the process  establishes a context for the propositional expression (Block ). Then, the process  parses the propositional expression (Block  including two parts A and B) and is then terminated.",{"@attributes":{"id":"p-0071","num":"0111"},"figref":"FIG. 4","b":"330"},"Upon START, the process  finds each pronominal reference in the propositional expression (PE) having a referent term to be a term in a previously processed propositional expression, and not to be a subject of a parametric operator (Block ). Next, the process  determines if such a pronominal reference was found (Block ). If not, the process  is terminated. Otherwise, the process  selects the last processed propositional expression having such a referent term (Block ). Then, the process  determines if any referent term in that last processed PE is not the subject of an interrogative operator (Block ). If so, the process  sets the current container to be the object type that is the resulting context from the PE (Block ) and is then terminated. Otherwise, the process  sets the current container to be the object type generated from the last referent term (Block ) and is then terminated.","Block  of the process  () for parsing the propositional expression comprises two processes, A and B.",{"@attributes":{"id":"p-0074","num":"0114"},"figref":"FIG. 5","b":"340"},"Upon START, the process A determines if a propositional interrogative is applied to the propositional expression (Block ). If not, the process A is terminated. Otherwise, the process A reads in logical order a role expression in the PE (Block ). Next, the process A determines if the unprocessed role expression is not a pronominal reference and including no definite article or expression of a specifically referenced instance (Block ). If not, the process A proceeds to Block . Otherwise, the process A determines if the role expression have a parametric operator (Block ). If not, the process A proceeds to Block . Otherwise, the process A generates a second object type for the term in the role expression (Block ).","Next, the process A adds a parameter having the second object type to the operation being created (Block ). Then, the process A adds a Boolean attribute to the object type designated by the current container to indicate a truth value (i.e., true or false) of the propositional expression (Block ) and is then terminated.",{"@attributes":{"id":"p-0077","num":"0117"},"figref":"FIG. 6","b":"340"},"Upon START, the process B determines if the PE includes an interrogative operator (Block ). If not, the process B is terminated. Otherwise, the process B reads in logical order a role expression in the PE (Block ). Next, the process B determines if the unprocessed role expression is not a pronominal reference (Block ). If not, the process B is terminated. Otherwise, the process B generates a second object type for the term in the role expression (Block ).","Then, the process B determines if the role expression contain a parametric operator (Block ). If so, the process B adds a parameter having the second object type to the operation (Block ) and is then terminated. Otherwise, the process B determines if the role expression contain an interrogative operator (Block ). If not, the process B is terminated. Otherwise, the process B adds an attribute to the object type designated by the current container having an attribute type to be a collection of objects of the second object type (Block ). Next, the process B sets the current container to the second object type (Block ) and is then terminated.",{"@attributes":{"id":"p-0080","num":"0120"},"figref":"FIG. 7","b":["550","640"]},"Upon START, the process \/ creates a second object type (Block ). Next, the process \/ determines if the identification scheme of the term contain an unprocessed term (Block ). If not, the process \/ is terminated. Otherwise, the process \/ determines if the term has a numerical or lexical type (Block ). If so, the process \/ adds an attribute of the numerical or lexical type to the second object type (Block ) and returns to Block . Otherwise, the process \/ generates a temporary object type for the term (Block ).","Next, the process \/ adds an attribute having an attribute type same as the temporary object type to the second object type (Block ) and returns to Block .","The technique described above may be illustrated further by some examples. The examples in this section are based on the following vocabulary.","Vocabulary",{"@attributes":{"id":"p-0084","num":"0000"},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":["agent","name","name is a role of text","customer","customer has name","identification criteria: customer is identified by name","meal preference","meal preference is a role of Text","customer has meal preference","departure date","departure date is a role of date","cruise","cruise has name","identification criteria: cruise is identified by name","customer has a reservation for cruise on departure date","location","city name","city name is a role of text","country name","country name is a role of text","location has city name","location has country name","identification criteria: location is identified by city name, country name","duration","duration is a role of integer","visit","visit is to location","visit is for duration","identification criteria: visit is identified by location, duration","cruise makes visit"]}},"Authorization rule 1: Each agent is authorized to request whether a given customer has a reservation for a given cruise on a given departure date.","Authorization rule 2: Each agent is authorized to request what customer has a reservation for what cruise on a given departure date and whether the customer has a given meal preference.","Authorization rule 3: Each agent is authorized to request whether a given customer has a reservation for a given cruise on a given departure date and the customer has what meal preference.","Authorization rule 4: Each agent is authorized to request what customer has a reservation for a given cruise on a given departure date and the cruise makes what visit.","Interface for Authorization rule 1: Each agent is authorized to request whether a given customer has a reservation for a given cruise on a given departure date. The execution of the algorithm will result in the following OO interface:","Return-Object-Type GeneratedOperation(Customer-Type: customer, Cruise-Type cruise, Departure-Date-Type departure-date)",{"@attributes":{"id":"p-0091","num":"0160"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Class: Return-Object-Type {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Boolean IsPropositionTrue"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Class: Customer-Type {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Text : name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Class Cruise-Type {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Text: name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Class Departure-Date-Type {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Date: date"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Interface for Authorization rule 2: Each agent is authorized to request what customer has a reservation for what cruise on a given departure date and whether the customer has a given meal preference. The execution of the algorithm will result in the following OO interface:\n\n",{"@attributes":{"id":"p-0093","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Class: Return-Object-Type {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Customer-Type-Collection: customer-type-collection"]},{"entry":[{},"Note: Customer-Type-Collection is a collection of Customer-Type"]},{"entry":[{},"objects."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class: Customer-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Text : name"]},{"entry":[{},"Cruise-Type-Collection : cruise-type-collection"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Note: Cruise-Type-Collection is a collection of Cruise-Type objects."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Boolean : has-meal-preference"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Cruise-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Text: name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Meal-Preference-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Text: meal-type"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Interface for Authorization rule 3: Each agent is authorized to request whether a given customer has a reservation for a given cruise on a given departure date and the customer has what meal preference. The execution of the algorithm will result in the following OO interface:\n\n",{"@attributes":{"id":"p-0095","num":"0166"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Class: Return-Object-Type {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Boolean IsPropositionTrue"]},{"entry":[{},"Meal-Preference-Type-Collection: meal-preference-type-"]},{"entry":[{},"collection"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Note: Meal-Preference-Type-Collection is a collection of Meal-"]},{"entry":[{},"Preference-Type objects."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class: Customer-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Text : name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Cruise-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Text: name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Departure-Date-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Date: date"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Meal-Preference-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Text: meal-type"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Interface for Authorization rule 3: Each agent is authorized to request what customer has a reservation for a given cruise on a given departure date and the cruise makes what visit\n\n",{"@attributes":{"id":"p-0097","num":"0169"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Class: Return-Object-Type {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Customer-Type-Collection: customer-type-collection"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Note: Customer-Type-Collection is a collection of Customer-Type"]},{"entry":[{},"objects."]},{"entry":[{},"Visit-Type-Collection: visit-type-collection"]},{"entry":[{},"Note: Visit-Type-Collection is a collection of Visit-Type objects."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Cruise-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Text: name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Departure-Date-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Date: date"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class: Customer-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Text : name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Visit-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Location-Type: location"]},{"entry":[{},"Integer: duration"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Location-Type {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Text : city-name"]},{"entry":[{},"Text : country-name"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0098","num":"0170"},"figref":"FIG. 8","b":"800"},"The computer system  includes a processor , a memory , and a mass storage device . The computer system  receives a stream of input representing a set of business rules or vocabulary, processes the business rules or the vocabulary in accordance to the method of the present invention, and outputs an object-oriented API.","The processor  represents a central processing unit of any type of architecture, such as embedded processors, mobile processors, micro-controllers, digital signal processors, superscalar computers, vector processors, single instruction multiple data (SIMD) computers, complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture.","The memory  stores system code and data. The memory  is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory may include program code or code segments implementing one embodiment of the invention. The memory  includes a translator module  of the present invention when loaded from mass storage . The translator module  implements all or part of the translator  shown in . The translator module  may also simulate the translation functions described herein. The translator module  contains instructions that, when executed by the processor , cause the processor to perform the tasks or operations as described above.","The mass storage device  stores archive information such as code, programs, files, data, databases, applications, and operating systems. The mass storage device  may include compact disk (CD) ROM, a digital video\/versatile disc (DVD), floppy drive, and hard drive, and any other magnetic or optic storage devices such as tape drive, tape library, redundant arrays of inexpensive disks (RAIDs), etc. The mass storage device  provides a mechanism to read machine-accessible media. The machine-accessible media may contain computer readable program code to perform tasks as described above.","While the invention has been described in terms of several embodiments, those of ordinary skill in the art will recognize that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may best be understood by referring to the following description and accompanying drawings that are used to illustrate embodiments of the invention. In the drawings:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
