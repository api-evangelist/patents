---
title: Touch input for hosted applications
abstract: A multi-touch plug-in system is described herein that exposes multi-touch data for web application developers to consume in a platform independent way. The multi-touch plug-in system receives platform-specific touch data from an operating system or touch hardware, interprets the platform-specific touch data to convert the platform-specific touch data to generic touch data, and provides the generic touch data to a hosted application running within a plug-in sandbox. Often, sandboxed environments only allow identified, trusted plug-ins to execute. By managing multi-touch data within a trusted plug-in, the plug-in can ensure that hosted applications are properly restricted to well-defined behavior, while still allowing rich features such as multi-touch interaction. Thus, the multi-touch plug-in system brings rich multi-touch interaction to a web browsing environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08633902&OS=08633902&RS=08633902
owner: Microsoft Corporation
number: 08633902
owner_city: Redmond
owner_country: US
publication_date: 20091123
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A tablet PC, or pen computer, is a notebook or slate-shaped mobile computer, equipped with a touch screen or graphics tablet\/screen hybrid technology that allows the user to operate the computer with a stylus, digital pen, or fingertip instead of a keyboard or mouse. Tablet PCs offer a more natural form of input, as sketching and handwriting are a much more familiar form of input than a keyboard and mouse, especially for people who are new to computers. Tablet PCs can also be more accessible because those who are physically unable to type can utilize the additional features of a tablet PC to be able to interact with the electronic world. Other devices also offer similar touch input capabilities, such as touch screen mobile phones.","Multi-touch (or multi-touch) denotes a set of interaction techniques that allow computer users to control graphical applications using multiple fingers or input devices (e.g., a stylus). Multi-touch implementations usually include touch hardware (e.g., a screen, table, wall, and so on) and software that recognizes multiple contemporaneous touch points. Multi-touch stands in contrast to traditional touch screens (e.g., computer touchpad, ATM, shopping kiosk) that only recognize one touch point at a time. Multi-touch hardware can sense touches using heat, finger pressure, high capture rate cameras, infrared light, optic capture, tuned electromagnetic induction, ultrasonic receivers, transducer microphones, laser rangefinders, shadow capture, and other mechanisms. Many applications for multi-touch interfaces exist and application designers and users are proposing even more. As a new input method, multi-touch offers the potential for new user experience paradigms.","An application cannot use multi-touch hardware without an interface for the application software to receive information from the multi-touch hardware. Although newer operating systems, such as Microsoft Windows 7, provide an abstraction layer to receive uniform multi-touch data from many different types of multi-touch hardware, this data is not easily accessible from a web browser and other sandboxed environments. Web browsers often provide isolated or sandboxed environments that strictly control what software (sometimes called a plug-in or control) is allowed to execute on a client computer system. Users have an expectation that using a web browser or other sandbox is a safe experience that will not cause data corruption or other negative impact to their computer system. Newer web applications may make use of feature-rich web plug-ins like Microsoft Silverlight to build rich applications that are nearly or more functional than their desktop counterparts. Unfortunately, sandboxed environments and applications running within them have thus far had difficulty receiving and acting on multi-touch input. This produces a very limited potential market for sandbox application authors and reduces the incentive to write applications supporting multi-touch interactions.","A multi-touch plug-in system is described herein that exposes multi-touch data for web application developers to consume in a platform independent way. The multi-touch plug-in system receives platform-specific touch data from an operating system or touch hardware. The multi-touch plug-in system interprets the platform-specific touch data to convert the platform-specific touch data to generic touch data. The multi-touch plug-in system provides the generic touch data to a hosted application running within a plug-in sandbox. In some cases, a sandboxed environment only executes identified, trusted plug-ins. By managing multi-touch data within a trusted plug-in, the plug-in can ensure that hosted applications are properly restricted to well-defined behavior, while still allowing rich features such as multi-touch interaction. Thus, the multi-touch plug-in system brings rich multi-touch interaction to a web browsing environment.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","A multi-touch plug-in system is described herein that exposes multi-touch data for web application developers to consume in a platform independent way. In some embodiments, the multi-touch plug-in system receives platform-specific touch data from an operating system or touch hardware. For example, the operating system may provide one or more application programming interfaces (APIs) that applications, including a web browser, can call to receive touch data. On some platforms, applications may interact with touch hardware directly, such as by invoking one or more APIs for retrieving information from a driver for the hardware. The touch data may include information about coordinates on the screen or touchpad that a user touched, including multiple points representing one or more of the user's fingers or other objects in contact with the touch hardware.","The multi-touch plug-in system interprets the platform-specific touch data to convert the platform-specific touch data to generic touch data. For example, although each platform may represent touch coordinates in a different data structure, the system may convert touch coordinates into a common data structure so that hosted applications do not have to specifically support various touch hardware. The multi-touch plug-in system provides the generic touch data to a hosted application running within a web plug-in sandbox. For example, the hosted application may implement and register an event handler adhering to an interface agreed upon by the sandbox and the hosted application for sharing touch data. One example of a web plug-in sandbox is Microsoft Silverlight. In some cases, a sandboxed environment, such as a web browser, only executes identified, trusted plug-ins. By managing multi-touch data within a trusted plug-in, the plug-in can ensure that hosted applications are properly restricted to well-defined behavior, while still allowing rich features such as multi-touch interaction. Thus, the multi-touch plug-in system brings rich multi-touch interaction to a web browsing environment.","In some embodiments, the multi-touch plug-in system exposes touch input received from an operating system in a platform independent way to a hosted application using a broadcast API mechanism. The broadcast mechanism is a simple and low-cost method of exposing the multi-touch data in a generic way that allows the hosted application a high degree of flexibility about how to handle the data. Following is an example event handler for receiving broadcast touch information.",{"@attributes":{"id":"p-0014","num":"0013"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static class Touch"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public static event EventHandler<TouchFrameEventArgs>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FrameReported;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The hosted application declares a class like the one above with an event handler for receiving touch data. In this example, \u201cFrameReported\u201d is a broadcast event that is fired globally (as opposed to element scoped) so that the application can handle multi-touch data at a high level. There is data within TouchFrameEventArgs that allows the hosted application to decide whether the application will pass a received multi-touch message on to specific user interface (UI) elements. Following is an example data structure for implementing TouchFrameEventArgs.",{"@attributes":{"id":"p-0016","num":"0015"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public sealed class TouchFrameEventArgs : EventArgs"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int Timestamp { get; }"]},{"entry":[{},"public TouchPointCollection GetTouchPoints(UIElement relativeTo);"]},{"entry":[{},"public TouchPoint GetPrimaryTouchPoint(UIElement relativeTo);"]},{"entry":[{},"public void SuspendMousePromotionUntilTouchUp( )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The class methods GetTouchPoints and GetPrimaryTouchPoint allow the hosted application to indentify which UI elements the multi-touch data intersects with, which the application can then forward handling onto if the application chooses not to handle the data at a global level. SuspendMousePromotionUntilTouchUp( ) instructs the system to suppress touch message to mouse message promotion, described further herein.","Following is an example of how the above event handler and arguments can be used by a hosted application.",{"@attributes":{"id":"p-0019","num":"0018"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"void ListenToTouch( )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Touch.FrameReported += new"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"EventHandler<TouchFrameEventArgs>(Touch1_FrameReported);"},{"entry":"}"},{"entry":"void Touch1_FrameReported(object sender, TouchFrameEventArgs e)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var primaryTouch = e.GetPrimaryTouchPoint(null);"]},{"entry":[{},"var primaryDevice = primaryTouch.TouchDevice;"]},{"entry":[{},"if (primaryTouch.Action == TouchAction.Down)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (CaresAboutTouch(primaryDevice.DirectlyOver))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"e.SuspendMousePromotionUntilTouchUp( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"TouchPointCollection points ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003e.GetTouchPoints(primaryDevice.DirectlyOver);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ do gesture manipulation"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The ListenToTouch function registers the Touch1_FrameReported event handler. When the multi-touch plug-in system receives touch data, it calls the registered handler, which invokes the Touch1_FrameReported function. The Touch1_FrameReported function can perform a variety of steps to process touch data and take actions related to the specific hosted application. For example, a photo browsing application may allow a user to rotate and stretch a photo by twisting multiple touch points or moving touch points (e.g., where the user's fingers rest on a touch pad) closer together or farther apart.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","110","120","130","140"]},"The touch receiving component  receives low-level touch data related to touch hardware. For example, a touch hardware driver or operating system may provide low-level touch data to applications. In some embodiments, the operating system may provide touch data to applications in a message loop via a standardized message. For example, Microsoft Windows applications typically include a message loop that periodically receives information from the operating system to the application. Microsoft Windows 7, for example, provides a WM_TOUCH message that includes information about user interaction with an application through touch hardware. Although applications can receive this message, hosted applications (e.g., web pages and web applications) cannot. Thus, for a hosted application running in a sandboxed environment to receive this message, a trusted plug-in running in the environment, such as Microsoft Silverlight, provides a link between the operating system and hosted applications.","The touch translation component  converts low-level touch data into a uniform format for presentation to a hosted application. Web browsers typically operate on multiple platforms and encourage users to assume that common functionality is available regardless of the platform being used. For example, a user visiting the Bing search engine home page expects a similar experience, whether the user is using a Microsoft Windows PC, an Apple computer running Mac OS X, or a Linux-based PC. The user may also expect a similar experience regardless of the browser the user is running. Thus, a plug-in developer may produce a particular plug-in for multiple operating systems and browsers to provide a similar experience on different platforms. With respect to touch data, the type and format of information received varies across various platforms. The touch translation component  prevents this variation from being noticed by applications hosted by the plug-in, so that applications will run correctly using the plug-in regardless of the platform on which the plug-in is running. Some platforms may include a list of specific touch points, including coordinates of each of a user's fingers, an indication whether a particular finger changed from up to down (e.g., not contacting versus contacting the touch hardware), and so forth.","The application notification component  provides the uniform format touch data to the hosted application for handling by the application. For example, the application notification component  may invoke an event handler or other function provided by the hosted application for receiving touch data. Alternatively or additionally, the hosted application may poll the application notification component  to determine whether new touch data is available. The application notification component  may provide APIs for controlling and configuring the notification process, such as for pausing or turning off notification of new touch data events.","The input promotion component  promotes touch input data into non-touch input data. Computer systems often contain multiple forms of input, such as a mouse and keyboard. Certain forms of input, like mouse input, are similar to touch data and are more traditionally expected by applications. For example, a user placing a mouse cursor over an object and clicking the object has a similar effect to a user touching the object using touch hardware. An application may want to handle these types of input in the same code path, or an old application may not understand touch data and only understand mouse input. Thus, the multi-touch plug-in system  may allow applications to request that the system  promote touch input messages to their closest non-touch equivalent. For example, Microsoft Windows provides many mouse messages, such as WM_MOUSEMOVE, WM_LBUTTONDOWN, and so forth, and the system may translate WM_TOUCH messages into similar mouse input messages.","In some cases, this behavior can lead to unintended results. For example, when a user is performing a deep zoom, the user may be using a pinching gesture to control the rate of zooming an object, during which time a received promoted mouse message might interfere with the zooming operation. In some embodiments, the multi-touch plug-in system  provides an API or other facility for a hosted application to suspend promotion of touch input data. For example, in the example earlier herein, the function SuspendMousePromotionUntilTouchUp is called by the example event handler to prevent mouse promotion until the user lifts the current finger or set of touch points from the touch hardware (e.g., when the user is finished with the current touch gesture).","The computing device on which the multi-touch plug-in system is implemented may include a central processing unit, memory, input devices (e.g., keyboard and pointing devices), output devices (e.g., display devices), and storage devices (e.g., disk drives or other non-volatile storage media). The memory and storage devices are computer-readable storage media that may be encoded with computer-executable instructions (e.g., software) that implement or enable the system. In addition, the data structures and message structures may be stored or transmitted via a data transmission medium, such as a signal on a communication link. Various communication links may be used, such as the Internet, a local area network, a wide area network, a point-to-point dial-up connection, a cell phone network, and so on.","Embodiments of the system may be implemented in various operating environments that include personal computers, server computers, handheld or laptop devices, multiprocessor systems, microprocessor-based systems, programmable consumer electronics, digital cameras, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and so on. The computer systems may be cell phones, personal digital assistants, smart phones, personal computers, programmable consumer electronics, digital cameras, and so on.","The system may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, and so on that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["210","220"]},"Continuing in block , the system optionally promotes the received touch data into related non-touch input data. For example, the system may convert touch data into mouse messages understood by a wide variety of applications for backwards compatibility. This block is described further with reference to . Continuing in block , the system provides the translated platform-neutral touch data to an application hosted by the plug-in. For example, the system may notify an event handler of the hosted application for each unit of touch data received from the underlying platform. The notification may include information, such as via parameters to the event handler, that further describes the type of touch input received by touch hardware. For example, the information may include virtual coordinates of one or more points that correspond to locations the touch hardware identified touch input.","Continuing in block , the system waits for the next touch input from the platform. The system may repeat these steps in a loop each time touch data is received for as long as the hosted application or plug-in is running. Continuing in decision block , if the system receives new touch input, then the system loops to block  to process the new touch input, else the system loops to block  to continue waiting for new touch input. After block , these steps conclude.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["310","320","330"]},"Continuing in block , the component determines a similar non-touch input related to the received touch data. For example, if the user placed a finger over an on-screen object, then the component may determine that a mouse click at the touched location is an equivalent or similar mouse input. Continuing in block , the component provides the determined non-touch data to an application for handling. For example, the component may provide a mouse button click message (e.g., WM_LBUTTONDOWN using Microsoft Windows) to the application in place of or in addition to a touch message identifying a touched object or location. After block , these steps conclude.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["410","420","420","430","440","430","440","450","460","470","480","490","430","460"]},"In some embodiments, the multi-touch plug-in system automatically promotes touch data to mouse messages for backwards compatibility. As described further herein, older applications may not be designed to receive touch data but are typically designed to receive mouse input. The system can often translate touch data into similar mouse input and may do so to allow older applications to receive touch input. In some cases, this may produce undesirable behavior, so the system may also allow configuring (e.g., disabling) the automatic promotion of touch data to legacy input.","In some embodiments, the multi-touch plug-in system determines whether to provide touch data based on whether an application registers to receive touch data. For example, the system may provide touch data promoted to mouse messages to an application unless the application requests to receive touch data specifically. The system may also provide interpreted touch data, such as gestures, without providing native touch data. For example, Microsoft Windows 7 provides a WM_GESTURE message that conveys user touch input conforming to several common gestures (e.g., rotate and pan). Applications that want to receive more specific touch data, such as coordinates and touch points of each touch input object (e.g., a user finger) can register to do so as described herein. For other applications, the system may select a default set of input to provide to the application to ensure that the application can properly handle the types of input the application receives.","In some embodiments, the multi-touch plug-in system may provide different touch behavior to hosted applications when a web plug-in is running in a windowed mode versus a windowless mode. Applications running in a windowless mode typically expect the browser to render the application directly, instead of giving the plug-in its own window for rendering. One reason to use windowless mode is to blend application content with Hypertext Markup Language (HTML) content on a web page, which the browser can do only when it is in charge of all the rendering. With windowless mode, an application can layer application content on top of HTML content and HTML content on top of application content. For example, an application may want to display a map using HTML, but add a layer that uses vector graphics from a plug-in to highlight certain features of the map. The overlay scenario works well for simple situations, but when the browser has the responsibility of rendering the application content directly, there are numerous things that it cannot do (or cannot do well). Furthermore, some of the limitations depend on which browser is doing the rendering. Thus, the system may provide more limited touch data or no touch data at all in windowless mode, while providing full touch capabilities in windowed mode.","In some embodiments, the multi-touch plug-in system provides element-scoped touch notification. Although some of the touch data described herein is provided to hosted applications as a global-scope notification that touch data was received, the system can also include element-scoped touch data. As an example, if a hosted application includes three controls, and a user touches one of the controls, the system may notify only the touched control that a touch was received. This is element-scoped notification because only the touched element (or its children) receive the touch notification. Alternatively or additionally, the system can provide global-scope notification wherein a global event handler or other function receives notification whenever any element (or all elements within a particular area, such as a window) is touched.","In some embodiments, the sandboxed environment includes an application run outside of a web browser. For example, Microsoft Silverlight provides a standalone application mode that allows Microsoft Silverlight applications to run in a standalone application that is not associated with a browser. The standalone application may provide restrictions on the APIs and other underlying platform features that applications running within the sandbox can use.","From the foregoing, it will be appreciated that specific embodiments of the multi-touch plug-in system have been described herein for purposes of illustration, but that various modifications may be made without deviating from the spirit and scope of the invention. Accordingly, the invention is not limited except as by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
