---
title: Methods and systems for providing a signed digital certificate in real time
abstract: A method and system for signing a digital certificate in real time for accessing a service application hosted within a service provider (SP) computer system through an open application programming interface (API) platform is provided. The API platform is in communication with a memory device. The method includes receiving registration data from a developer computer device wherein the developer computer device is associated with a developer and configured to store a developer application, receiving a certificate signing request (CSR) from the developer computer device wherein the CSR includes a public key associated with the developer, verifying the registration data as being associated with the developer, signing the CSR to produce a signed certificate after verifying the registration data wherein the verifying and signing steps are performed by the SP computer system in real time, and transmitting the signed certificate and a client ID to the developer computer device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09032204&OS=09032204&RS=09032204
owner: MasterCard International Incorporated
number: 09032204
owner_city: Purchase
owner_country: US
publication_date: 20111222
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF DESCRIPTION OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This patent application claims priority to U.S. Provisional Patent Application Ser. No. 61\/430,820, filed on Jan. 7, 2011, which is hereby incorporated by reference in its entirety.","This invention relates generally to providing a signed digital certificate in real time and, more particularly, to network-based methods and systems for registering, verifying, and signing a digital certificate in real time by a service provider computer system for a developer computer device so that the developer computer device can communicate with the service provider computer system through an open application programming interface (API) architecture.","There are service provider companies that provide a variety of services to numerous consumers. These service provider companies utilize computer systems to provide these services. For example, in the financial industry, companies such as large banks, interchange networks and payment networks provide certain financial services to consumers, companies and other banks. Oftentimes, these service provider companies provide services that include receiving, processing and storing financial data in computer systems managed by the service provider companies. In many cases, access to this financial data is restricted to certain approved users. Restricting access to such financial data provides at least some protection for the data. However, it also limits the potential uses of the data.","Software developers around the world are able to develop computer programs, sometimes called applications, that are configured to utilize data such as the data stored within computer systems used by certain service provider companies. Of course, in order for these computer programs to use such data, the developer programs must be able to access the data. One way to access the data stored by these service provider companies is through an open application programming interface (API).","By allowing software developers to access data stored within computer system used by these service provider companies, the service provider companies are able to leverage these developer applications as well as increase their transaction volume. Thus, by providing this data access to developers, these service provider companies are able to provide additional services to both existing and new customers, which in turn improves the profitability of these companies. However, the providing of such data access also creates certain risks and challenges for the service provider companies.","At least one known technique for authenticating a message request sent by a developer computer device to a service provider computer system is through the use of a digital signature. A digital signature can be used for demonstrating the authenticity of a digital message or document. A valid digital signature gives a recipient reason to believe that the message was created by a known sender, and that it was not altered in transit. Digital signatures are commonly used for software distribution, financial transactions, and in other cases where it is important to detect forgery or tampering. Thus, a service provider computer system can provide access to a developer computer device when the developer computer device submits a message request that has been digitally signed and authenticated by the service provider computer system.","However, in these known cases, in order for the developer computer device to use a digital signature that can be authenticated by the service provider computer system, the developer computer device must register with the service provider by submitting registration data including a certificate signing request (CSR) to the service provider computer system. The service provider manually reviews the registration data, and, if the service provider approves the developer, signs and returns the certificate to the developer via the developer computer device.","Unfortunately, in at least some of these known cases, hundreds and sometimes thousands of developers are seeking to obtain access on a daily basis to a service provider computer system. In these cases, the developers submit registration data and CSRs to the service provider for review and approval. This review and approval process can be extremely time consuming and costly for the service provider.","Accordingly, it would be desirable to provide a computer system having an open API for use by certain service provider companies that is configured to automatically review, verify, and approve in real time registration data including CSRs that are submitted by developer computers such that the developer computers can gain access to the service provider computer systems.","In one embodiment, a computer-based method for signing a digital certificate in real time for accessing a service application hosted within a service provider (SP) computer system through an open application programming interface (API) platform is provided. The API platform is in communication with a memory device. The method includes receiving registration data from a developer computer device wherein the developer computer device is associated with a developer and configured to store a developer application, receiving a certificate signing request (CSR) from the developer computer device wherein the CSR includes a public key associated with the developer, verifying the registration data as being associated with the developer, signing the CSR to produce a signed certificate after verifying the registration data wherein the verifying and signing steps are performed by the SP computer system in real time, and transmitting the signed certificate and a client ID to the developer computer device.","In another embodiment, a computer system for signing a digital certificate in real time for accessing a service application hosted within a service provider (SP) computer system through an open application programming interface (API) platform is provided. The API platform is in communication with a memory device. The SP computer system is programmed to receive registration data from a developer computer device wherein the developer computer device is associated with a developer and configured to store a developer application, receive a certificate signing request (CSR) from the developer computer device wherein the CSR includes a public key associated with the developer, verify in real time the registration data as being associated with the developer, sign in real time the CSR to produce a signed certificate after verifying the registration data, and transmit the signed certificate and a client ID to the developer computer device.","In another embodiment, one or more computer-readable media having computer-executable instructions embodied thereon is provided. The computer-executable instructions are executed by a computer device. The instructions instruct the computer to receive registration data from a developer computer device wherein the developer computer device is associated with a developer and configured to store a developer application, receive a certificate signing request (CSR) from the developer computer device wherein the CSR includes a public key associated with the developer, verify in real time the registration data as being associated with the developer, sign in real time the CSR to produce a signed certificate after verifying the registration data, and transmit the signed certificate and a client ID to the developer computer device.","In another embodiment, a computer system for signing a digital certificate in real time for accessing a service application hosted within a service provider (SP) computer system through an open application programming interface (API) platform is provided. The computer system includes a memory device for storing data, and a service provider (SP) computer system having a processor and an open API platform. The SP computer system is in communication with the memory device. The SP computer system is programmed to: receive registration data from a developer computer device wherein the developer computer device is associated with a developer and configured to store a developer application, receive a certificate signing request (CSR) from the developer computer device wherein the CSR includes a public key associated with the developer, verify the registration data as being associated with the developer, sign the CSR to produce a signed digital certificate after verifying the registration data wherein the verifying and signing steps are performed by the SP computer system in real-time, and transmit the signed digital certificate and a client ID to the developer computer device.","In another embodiment, one or more computer-readable non-transitory media comprising a computer-executable program that instructs at least one processor to sign a digital certificate in real-time for accessing a service application hosted within a service provider (SP) computer system through an open application programming interface (API) platform is provided. The computer-executable program includes at least one code segment that instructs the at least one processor to: receive registration data from a developer computer device wherein the developer computer device is associated with a developer and configured to store a developer application, receive a certificate signing request (CSR) from the developer computer device wherein the CSR includes a public key associated with the developer, verify the registration data as being associated with the developer, sign the CSR to produce a signed digital certificate after verifying the registration data wherein the verifying and signing steps are performed in real-time, and transmit the signed digital certificate and a client ID to the developer computer device.","Embodiments of the methods and systems described herein enable a service provider company associated with a service provider computer system, which includes service applications stored therein, to (i) offer access to the service applications for use by developers of computer software applications, (ii) register developers with the service provider computer system including receiving a certificate signing request (CSR) from each of the developers, (iii) assign a client ID to each of the developers within the service provider computer device, (iv) verify the registration data provided by the developers; (v) sign the certificate by the service provider, and return the client ID and signed certificate to the developers for future identification and authentication, and (v) manage the identities and digital keys associated with the developers for processing future message requests from the developers.","In the example embodiment, the certificate signing request (CSR) and key generation process is started by the developer after registration on the API portal. The keys\/certificates are generated by the developer outside of the SP computer system with open source tools such as Open SSL. The basic steps in the process are as follows: (1) the developer uses an open source tool to generate a private and public key pair, and requests a signed certificate providing the CSR from the generated public\/private key pair to the API portal; (2) the open source tool provides the private and public key pair, and the public key is included in the CSR (the private key is held private by the developer); (3) the developer uploads the CSR which contains the public key to the API platform; (4) the API platform assigns a client ID and signs the developer's public key, wherein the combination of the client ID and the developer's signed digital certificate comprises the production key; (5) the developer then uses the client ID (which is included in the production key) in each message sent to the API platform that is digitally signed with the private key on the developer's computer device; (6) the API platform uses the client ID to identify which public key to use to verify the private key used to sign the message. Tools used to create keys and a CSR typically ask the developer to enter the following information when creating a CSR and key pair: name, organization, organizational unit, city, state or province, and country.","More specifically, the API platform includes a developer and application registration service (referred to as the \u201cAPI registration service\u201d), which helps manage the registration process of the developers with the service provider computer system. The API registration service is in communication with a certificate signing server that is configured to: receive the CSR submitted by the developer; automatically review the registration data submitted by the developer; automatically verify the registration data submitted by the developer including developer name, organization, organizational unit, city, state or province, and country; and sign the developer's certificate upon verification and approval. The certificate signing server, which is in communication with the API platform, is configured to review, verify and approve in real time so that a developer can be quickly registered with the service provider computer system without requiring a manual review process by the service provider.","After a developer registers with the API platform, the API platform stores the developer registration data in a memory device for future verifications. For example, the registration data may include the key alias associated with the developer application, the client ID, the public key, entity authorization, expected usage, and other registration data. The registration data is stored within the memory device. Accordingly, when a message request is submitted by a developer application to the service provider computer system, the API platform receives the message request which includes the client ID associated with the developer or developer application. The message request is also digitally signed with the developer's private key. The API platform uses the received client ID to identify which public key to use to verify the private key used to sign the message. The client ID and the public key are stored within the API memory device. Accordingly, the API platform is able to verify that each message received by the API platform was sent by the developer application and has not been tampered with.","In the example embodiment, a user (e.g., a developer, a consumer, a merchant, an acquirer, a processor or an issuer) may request multiple signed certificates for a particular identity, as well as multiple identities for a particular signed certificate.","In the example embodiment, the service provider computer system is a financial service computer system that provides financial transaction services to developers, consumers, merchants, acquirers and\/or issuers. The services may include providing data representing financial transactions, processing payment card transactions, locating banks or ATMs, providing information such as discounts and offers, etc. In another embodiment, the service provider computer system is a non-financial service computer system that provides non-financial transaction services to users, developers, consumers, merchants, acquirers and\/or issuers.","The following detailed description illustrates embodiments of the invention by way of example and not by way of limitation. It is contemplated that the invention has general application to processing financial transaction data by a third party in industrial, commercial, and residential applications.","As used herein, an element or step recited in the singular and proceeded with the word \u201ca\u201d or \u201can\u201d should be understood as not excluding plural elements or steps, unless such exclusion is explicitly recited. Furthermore, references to \u201cone embodiment\u201d of the present invention are not intended to be interpreted as excluding the existence of additional embodiments that also incorporate the recited features.","The methods and systems described herein may be implemented using computer programming or engineering techniques including computer software, firmware, hardware or any combination or subset thereof, wherein the technical effects may include at least one of: a) a developer, using a developer computer device, accesses a service provider computer system through an API portal; b) the developer uses the API portal to submit registration data including first name, last name, username, password, email address, country, street address, city, state\/province, postal code, phone number, company\/university affiliation; c) the developer also uploads, using the API portal, a certificate signing request (CSR), wherein the developer generates a private and public key pair using tools outside of the service provider computer system and the CSR includes the public key; d) the API platform assigns a client ID to a key alias, wherein the key alias is selected by the developer to identify the developer application; e) the API platform forwards the registration data and the CSR to a certificate signing server; f) the certificate signing server verifies the registration data by automatically validating the data found in the CSR request against the registration data, signs the certificate request, and returns it to the API platform in real time; g) the API platform stores within a memory device the client ID and the signed certificate (developer's public key), wherein the combination of the client ID and the developer's signed digital certificate comprises the production key; and h) the API platform sends the client ID and the signed certificate back to the developer at the developer computer device.","In the future, when the developer application sends a message request to the service provider computer system, the API platform receives the message request which includes the client ID and a digital signature (encrypted) created with the developer's private key. The API platform uses the received client ID to identify which public key to use to verify (decrypt) the private key used to sign the message. The API platform uses the client ID and the public key stored within the API memory device, to verify the message. Each message request received by the API platform is verified in the same manner, verifying that the message was sent by the developer application and has not been tampered with.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 1","b":["100","100"]},"More specifically, in the example embodiment, system  includes a server system , which is a type of computer system, and a plurality of client sub-systems (also referred to as client systems  and ) connected to server system . In one embodiment, client systems ,  are computers including a web browser, such that server system  is accessible to client systems ,  using the Internet. Client systems ,  are interconnected to the Internet through many interfaces including a network, such as a local area network (LAN) or a wide area network (WAN), dial-in-connections, cable modems, and special high-speed ISDN lines. Client systems ,  could be any device capable of interconnecting to the Internet including a web-based phone, personal digital assistant (PDA), or other web-based connectable equipment.","System  also includes point-of-sale (POS) terminals , which may be connected to client systems ,  and may be connected to server system . POS terminals  are interconnected to the Internet through many interfaces including a network, such as a local area network (LAN) or a wide area network (WAN), dial-in-connections, cable modems, wireless modems, and special high-speed ISDN lines. POS terminals  could be any device capable of interconnecting to the Internet and including an input device capable of reading information from a consumer's financial transaction card.","A database server  is connected to database , which contains information on a variety of matters, as described below in greater detail. In one embodiment, centralized database  is stored on server system  and can be accessed by potential users at one of client systems ,  by logging onto server system  through one of client systems , . In an alternative embodiment, database  is stored remotely from server system  and may be non-centralized.","Database  may store transaction data generated as part of sales activities conducted over the services network including data relating to merchants, account holders or customers, developers, issuers, acquirers, purchases made, and services provided by system . Database  may also store account data including at least one of a cardholder name, a cardholder address, an account number, and other account identifier. Database  may also store merchant data including a merchant identifier that identifies each merchant registered to use the network, and instructions for settling transactions including merchant bank account information. Database  may also store purchase data associated with items being purchased by a cardholder from a merchant, and authorization request data.","In the example embodiment, client system  may be associated with a developer of computer applications and may be referred to as a developer computer device, and client system  may be associated with a consumer, an acquirer or an issuer and may be referred to as a user computer device. Developer computer device  stores developer applications that a user may access and utilize via user computer device . Server system  may be associated with a service provider (SP) and may be referred to as a SP computer device. In the example embodiment, an SP may include a payment network provider, an interchange network provider, or any other provider of financial or non-financial services.","In the embodiment where the SP is an interchange network provider, system  includes POS terminals , which may be associated with a merchant. In this embodiment, system  may be part of a multi-party payment card industry system for enabling ordinary payment-by-card transactions such as a credit card payment system using the MasterCard\u00ae interchange. The MasterCard\u00ae interchange is a proprietary communications standard promulgated by MasterCard International Incorporated\u00ae for the exchange of financial transaction data between financial institutions that are members of MasterCard International Incorporated\u00ae. (MasterCard is a registered trademark of MasterCard International Incorporated located in Purchase, N.Y.).","For example, in a typical payment card system, a financial institution called the \u201cissuer\u201d issues a payment card, such as a credit card, to a consumer, who uses the payment card to tender payment for a purchase from a merchant. To accept payment with the payment card, the merchant must normally establish an account with a financial institution that is part of the financial payment system. This financial institution is usually called the \u201cmerchant bank\u201d or the \u201cacquiring bank\u201d or \u201cacquirer bank.\u201d When a consumer tenders payment for a purchase with a payment card (also known as a financial transaction card), the merchant requests authorization from the merchant bank for the amount of the purchase. The request may be performed over the telephone, but is usually performed through the use of a point-of-sale terminal, which reads the consumer's account information from the magnetic stripe on the payment card and communicates electronically with the transaction processing computers of the merchant bank. Alternatively, a merchant bank may authorize a third party to perform transaction processing on its behalf. In this case, the point-of-sale terminal will be configured to communicate with the third party. Such a third party is usually called a \u201cmerchant processor\u201d or an \u201cacquiring processor.\u201d","Using the interchange network, the computers of the merchant bank or the merchant processor will communicate with the computers of the issuer bank to determine whether the consumer's account is in good standing and whether the purchase is covered by the consumer's available credit line. Based on these determinations, the request for authorization will be declined or accepted. If the request is accepted, an authorization code is issued to the merchant.","When a request for authorization is accepted, the available credit line of consumer's account is decreased. Normally, a charge is not posted immediately to a consumer's account because bankcard associations, such as MasterCard International Incorporated\u00ae, have promulgated rules that do not allow a merchant to charge, or \u201ccapture,\u201d a transaction until goods are shipped or services are delivered. When a merchant ships or delivers the goods or services, the merchant captures the transaction by, for example, appropriate data entry procedures on the point-of-sale terminal. If a consumer cancels a transaction before it is captured, a \u201cvoid\u201d is generated. If a consumer returns goods after the transaction has been captured, a \u201ccredit\u201d is generated.","For debit card transactions, when a request for a PIN authorization is approved by the issuer, the consumer's account is decreased. Normally, a charge is posted immediately to a consumer's account. The bankcard association then transmits the approval to the acquiring processor for distribution of goods\/services, or information or cash in the case of an ATM.","After a transaction is captured, the transaction is settled between the merchant, the merchant bank, and the issuer. Settlement refers to the transfer of financial data or funds between the merchant's account, the merchant bank, and the issuer related to the transaction. Usually, transactions are captured and accumulated into a \u201cbatch,\u201d which is settled as a group.","The financial transaction cards or payment cards discussed herein may include credit cards, debit cards, a charge card, a membership card, a promotional card, prepaid cards, and gift cards. These cards can all be used as a method of payment for performing a transaction. As described herein, the term \u201cfinancial transaction card\u201d or \u201cpayment card\u201d includes cards such as credit cards, debit cards, and prepaid cards, but also includes any other devices that may hold payment account information, such as mobile phones, personal digital assistants (PDAs), and key fobs.","Although the SP has been described herein as an interchange network provider, it does not have to be so limited. As indicated above, the SP may also be a payment network provider or any other provider of financial services. In these embodiments, a transaction card, a payment or even a purchase are not necessarily needed to utilize the services provided by the SP.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 1"],"b":["122","122","100","122","112","114","115","118","112","116","124","126","128","130","132","134","116","130","116","124","126","128","130","132","136","138","140","142","136","138","140","142","136"]},"Each workstation, , , and  is a personal computer having a web browser. Although the functions performed at the workstations typically are illustrated as being performed at respective workstations , , and , such functions can be performed at one of many personal computers coupled to LAN . Workstations , , and  are illustrated as being associated with separate functions only to facilitate an understanding of the different types of functions that can be performed by individuals having access to LAN .","Server system  is configured to be communicatively coupled to various individuals, including employees  and to third parties, e.g., account holders, customers, auditors, developers, consumers, merchants, acquirers, issuers, etc.,  using an ISP Internet connection . The communication in the exemplary embodiment is illustrated as being performed using the Internet, however, any other wide area network (WAN) type communication can be utilized in other embodiments, i.e., the systems and processes are not limited to being practiced using the Internet. In addition, and rather than WAN , local area network  could be used in place of WAN .","In the exemplary embodiment, any authorized individual having a workstation  can access system . At least one of the client systems includes a manager workstation  located at a remote location. Workstations  and  are personal computers having a web browser. Also, workstations  and  are configured to communicate with server system . Furthermore, fax server  communicates with remotely located client systems, including a client system  using a telephone link. Fax server  is configured to communicate with other client systems , , and  as well.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 3","FIG. 2"],"b":["202","201","202","114","115","138","140","142","146","118","154","156"]},"User computer device  includes a processor  for executing instructions. In some embodiments, executable instructions are stored in a memory area . Processor  may include one or more processing units (e.g., in a multi-core configuration). Memory area  is any device allowing information such as executable instructions and\/or other data to be stored and retrieved. Memory area  may include one or more computer readable media.","User computer device  also includes at least one media output component  for presenting information to user . Media output component  is any component capable of conveying information to user . In some embodiments, media output component  includes an output adapter such as a video adapter and\/or an audio adapter. An output adapter is operatively coupled to processor  and operatively couplable to an output device such as a display device (e.g., a liquid crystal display (LCD), organic light emitting diode (OLED) display, cathode ray tube (CRT), or \u201celectronic ink\u201d display) or an audio output device (e.g., a speaker or headphones).","In some embodiments, user computer device  includes an input device  for receiving input from user . Input device  may include, for example, a keyboard, a pointing device, a mouse, a stylus, a touch sensitive panel (e.g., a touch pad or a touch screen), a gyroscope, an accelerometer, a position detector, or an audio input device. A single component such as a touch screen may function as both an output device of media output component  and input device .","User computer device  may also include a communication interface , which is communicatively couplable to a remote device such as server system . Communication interface  may include, for example, a wired or wireless network adapter or a wireless data transceiver for use with a mobile phone network (e.g., Global System for Mobile communications (GSM), 3G, 4G or Bluetooth) or other mobile data network (e.g., Worldwide Interoperability for Microwave Access (WIMAX)).","Stored in memory area  are, for example, computer readable instructions for providing a user interface to user  via media output component  and, optionally, receiving and processing input from input device . A user interface may include, among other possibilities, a web browser and client application. Web browsers enable users, such as user , to display and interact with media and other information typically embedded on a web page or a website from server system . A client application allows user  to interact with a server application from server system .",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 4","FIGS. 1 and 2"],"b":["301","112","301","116","124","126","128","130","132"]},"Server computer device  includes a processor  for executing instructions. Instructions may be stored in a memory area , for example. Processor  may include one or more processing units (e.g., in a multi-core configuration).","Processor  is operatively coupled to a communication interface  such that server computer device  is capable of communicating with a remote device such as user computer device  or another server computer device . For example, communication interface  may receive requests from client computer devices ,  via the Internet, as illustrated in .","Processor  may also be operatively coupled to a storage device . Storage device  is any computer-operated hardware suitable for storing and\/or retrieving data. In some embodiments, storage device  is integrated in server computer device . For example, server computer device  may include one or more hard disk drives as storage device . In other embodiments, storage device  is external to server computer device  and may be accessed by a plurality of server computer devices . For example, storage device  may include multiple storage units such as hard disks or solid state disks in a redundant array of inexpensive disks (RAID) configuration. Storage device  may include a storage area network (SAN) and\/or a network attached storage (NAS) system.","In some embodiments, processor  is operatively coupled to storage device  via a storage interface . Storage interface  is any component capable of providing processor  with access to storage device . Storage interface  may include, for example, an Advanced Technology Attachment (ATA) adapter, a Serial ATA (SATA) adapter, a Small Computer System Interface (SCSI) adapter, a RAID controller, a SAN adapter, a network adapter, and\/or any component providing processor  with access to storage device .","Memory areas  and  may include, but are not limited to, random access memory (RAM) such as dynamic RAM (DRAM) or static RAM (SRAM), read-only memory (ROM), erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), and non-volatile RAM (NVRAM). The above memory types are exemplary only, and are thus not limiting as to the types of memory usable for storage of a computer program.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 5","FIGS. 1 and 2","FIGS. 1 and 2","FIGS. 1 and 2","FIGS. 1 and 2","FIGS. 1 and 2"],"b":["400","400","100","122","400","402","112","404","114","406","115","408","115"]},"Developer computer device  includes a processor for executing instructions. Instructions may be stored in a memory area. The memory area may also include one or more developer applications . Applications  include computer-implemented instructions that cause a computer device to interact with another computer device. For example, a developer may create an application  for locating ATMs included within a network of ATMs serviced by the SP (referred to as the \u201cATM Locator App\u201d). The ATM Locator App can be stored within the memory area for use by computer device . Developer computer device  is in communication with SP computer system  through a developer portal such as API portal , and through a developer sandbox platform . As explained below in greater detail, sandbox platform  is a test platform provided by SP computer system  that enables a developer to test its applications with test data before such applications are rolled out for processing live production data.","SP computer system  includes API portal , memory device , sandbox platform , API platform , certificate signing server , API services wrapper , and service owner (SO) computer systems .","API portal  is configured to communicate with developer computer device , and facilitates managing developer registration and login with system . API portal  also enables developer computer device  to communicate with API platform . API portal  communicates with memory device  to facilitate a login by a developer.","API platform  includes a registration service  that is used to register developers and developer applications  with SP computer system . Registration service  is in communication with certificate signing server . API platform  also includes an API gateway proxy , and a memory cache . API platform  is also in communication with memory device . At least one of memory device  and memory cache  are configured to store data such as throttling profiles assigned to registered developer applications, throttling counts for registered developer applications, and predefined throttling profiles for service applications having general access.","API platform  is in communication with API services wrapper . API services wrapper  includes wrappers  for each service application  provided by an SO within SP computer system . Service applications  are stored at SO computer systems . SO computer systems  are in communication with API platform  through API services wrapper  or may be connected directly with API platform  without a wrapper.","Continuing with the ATM Locator App example from above, SO computer devices  may include a service application  that includes data showing a location of each of the ATM machines included within the network serviced by the SP (referred to as the \u201cATM Locator Service\u201d). In this example, the ATM Locator App, which is stored on developer computer device , is able to communicate with SO computer device  through API platform  and API services wrapper  by developer computer device  sending a data request to SO computer device , and by receiving a data response back from SO computer device . Developer computer device  is then able to display the location of all the ATMs within the SP network or at least some of the ATMs within the network.","Merchant computer device  and consumer computer device  each include a processor for executing instructions. Instructions may be stored in a memory area. The memory area may also include one or more developer applications  downloaded from developer computer device  for use by the merchant, consumer, acquirer, processor, and\/or issuer (collectively a \u201cuser\u201d). In other words, a developer may develop an application that can be used by a user on their computer devices (e.g., a POS device, a personal computer, smart phone or PDA). The user downloads the application from the developer to their computer device for use by the user, or in some other manner loads the developer application on the user computer device. When the user uses developer application , merchant and\/or consumer computer devices ,  communicate with SP computer system  through API platform . Continuing with the ATM Locator App example from above, the user can download the ATM Locator App from developer computer device . Consumer computer device  is then able to communicate with SO computer devices  through API platform  and API services wrapper  by sending a data request to SO computer devices , and by receiving a data response back from SO computer devices . Consumer computer device  is then able to display the location of all the ATMs within the SP network or at least some of the ATMs with the network.","As discussed above, SP computer system  includes a developer sandbox platform , which enables a developer to test its applications with test data before such applications are rolled out for processing live production data. Sandbox platform  includes a copy  of API gateway proxy , a copy  of API services wrapper , and simulator computer devices  which are configured to simulate SO computer devices . Sandbox platform  includes test data that allows a developer to test its applications  prior to rolling out applications  for production use.","In the example embodiment, a developer visits a web portal, referred to as API portal , designed specifically for SP computer system . At the home page, developers will be prompted to register with API platform . The registration process will collect, and authenticate as required, the following data elements from the developer: first name, last name, username, password, email address, country, street address, city, state\/province, postal code, phone number, and company\/university affiliation. Additionally, as a condition of registration, developers must opt-in to the program by affirmatively consenting to the terms and conditions and privacy notice. API portal  also includes a mechanism for the developers to request access to their information in the event that they desire to change, modify or delete such information.","Once registered and authenticated, developers can log into API portal  and access a variety of information regarding the various service applications  (e.g., service offerings such as payments, locators, offers, MATCH, etc.). Each service application  will have its own page(s) dedicated to describing the business requirements and specifications for that service in a format easily understood by non-industry developers.","Additionally, the developers will be able to log into API portal , register a key alias and request a sandbox key. The sandbox key allows developer's applications to access sandbox platform , which is an environment where developers can test and validate messages using service simulators .","Once a developer has been given a sandbox key, the developer can return to API portal  at any time and request a production key. A production key and client ID will be issued for the key alias used by the developer in the developer application. The client ID will identify which key alias is using API platform  to process messages and the developer that owns the production key. In the example embodiment, sandbox and production keys are not intended to be transferable or shared.","For every message that API platform  processes, the following will be logged: message request type; date and time received; path (message URL); IP address of sender; user agent of sender (name of sending application like IE, Firefox, or a different name); process time; and success or fail. If fail then, error information; client ID; key alias; user ID (system generated ID for developer account that owns the client ID); and unique message ID. There may be additional data elements collected based on the differing requirements of the various API service offerings. For example: for payments that have a merchant, a merchant ID will be logged in addition to the elements listed above.","In the example embodiment, a developer is required to register with SP computer system  to access certain information. However, an unregistered developer is able to access some information within SP computer system . For example, an unregistered developer can: review available API information, documentation and sample code; access certain functions; and access community pages and read forums. However, an unregistered developer cannot: post forum comments or blogs; create a key alias; or request a sandbox or production key.","API portal  provides a mechanism for developers to learn about the services that are available. They have the ability to: register; communicate with other developers via the forums; request keys for sandbox (testing) and production environments; view their personal dashboard; and view metrics on transactions for each key alias they have created. The keys provide message security between the developers and SP computer system .","SP computer system  allows a developer to interact with API sandbox platform . The developer uses sandbox platform  for testing and validating applications  by using simulators . The messages sent by developer applications  to API gateway proxy copy  are verified with a key. The key verifies that the message was not tampered with between the sender and SP computer system . The transaction in the message is authenticated by the backend simulator computer devices . The following data elements are collected from the developer during the sandbox key request process: (1) Key Alias: This is the alias the developer assigns to the key. It is used to present a user friendly identifier of the key on the dashboard. The dashboard is a web page on the portal website with the purpose of automatically displaying important information, objects, etc. (2) Description: The description of the key. It is assigned by the developer. Used on the dashboard to present the developer with a description of the key. (3) Use: This identifies if the key is for personal or commercial use. Personal use is an individual that intents to personally use or give to others for their personal use without charge. Commercial use is an individual that is developing for use by their employer or an individual that intends to sell their application to others. (4) Notes: This is free form notes that the developer can associate with the key. (5) Calls: This is the expected number of calls using the production key. It is assigned by the developer. Used by the SP for capacity planning (6) Profitable: This identifies if the developer intends for the key to be used to generate a profit. It is assigned by the developer. (7) Certificate: The SP signs the certificate and makes it available to the developer on the dashboard to download. The developer sandbox key is valid for testing all available API service applications with general access and any premium services that the developer, key alias and client ID have an approved production key.","SP computer system  assigns a production key to a developer. During this phase, the developer will be assigned a production key number and that key number will be provided to SP computer system  during each call. SP computer system  will use the production key number to control access and track developer activity throughout the process. In the example embodiment, an existing key alias and sandbox key are required prior to requesting a production key. The following data elements are collected from the developer during the production key request process: (1) Certificate: SP computer system  signs the certificate and makes it available to the developer on the dashboard to download. (2) Production Services Requested: This is a request for which services the production key will be valid.","A developer is able to engage a customer of the SP. The developer can build applications  for any of SP's business partners, including merchants, issuers, acquirers, or any other party in the SP network. The following examples describe a developer building a developer application  for a merchant user (the user could also be an individual, an acquirer, a processor or an issuer). The developer may be working directly for a merchant or for themselves to sell their application  to a merchant. The roles of the developer and merchant are separate. The SP does not have to be part of the relationship between the developer and the merchant. In some embodiments, the merchant may be required to have a relationship with the service application  being used, e.g. MiGS (MasterCard Internet Gateway System). The merchant and merchant acquirer would need to be registered with MiGS and have the credentials to prove that relationship is valid prior to using API platform .","In the example embodiment, the SP has a trust relationship with an existing merchant. The messages sent by merchant computer device  using developer application  to API gateway proxy  are verified with a key (public and private key). The key verifies that the message was not tampered with between the sender and API platform . The transaction in the message is authenticated by the backend service application . During this phase, customer authentication is managed by the SO of service application  being called.","In the example embodiment, SP computer system  includes a certificate signing request (CSR) and a key generation process. This process is started by the developer after registration on API portal . The keys\/certificates are generated by the developer outside of SP computer system  with open source tools (like Open SSL). The SP does not own the developer's private or public key. A developer could theoretically use the same key with multiple open API's or programs not just the open API of the SP. The developer owns their private key, public key and CSR (Certificate Signature Request). The basic steps in the process are as follows: (1) the developer uses an open source tool and requests a CSR; (2) the tool provides a private and public key pair, and the public key is included in the CSR; (3) the developer uploads the CSR which contains the public key to API platform ; (4) API platform  assigns a client ID and signs the certificate request including the developer's public key, wherein the combination of the client ID and the developer's signed certificate (public key) comprises the production key; (5) the developer then uses the client ID (which is included in the production key) in each message sent to API platform , the message being digitally signed with the private key from the developer's computer device ; (6) API platform  uses the client ID to identify which public key to use to verify the private key used to sign the message. Tools used to create keys and a CSR typically ask the developer to enter the following information when creating a CSR and key pair: name, organization, organizational unit, city, state or province, and country.","As stated above, API platform  is in communication with memory device  and includes memory cache . Memory device  and memory cache  are configured to store data such as throttling profiles assigned to registered developer applications, throttling counts for registered developer applications, and predefined general access throttling profiles for service applications having general access. In the example embodiment, a throttling profile is a matrix of criteria that includes at least one of: (i) a throttling amount threshold by timeframe and service application; (ii) a throttling amount threshold by timeframe, service application and developer identity; (iii) a throttling amount threshold by timeframe and developer identity; and (iv) total access across all service applications by timeframe and developer identity. In other words, a throttling profile assigned to a registered developer may include a throttling amount threshold and a throttling time period. The throttling amount threshold is a number of calls or request messages that can be made on a service application. The throttling time period is a time period that the throttling amount threshold is applicable. These throttling profiles may be stored within memory device  and\/or memory cache  for already registered developers, and for general access service applications wherein these general access throttling profiles are predefined by an SO such that they can be assigned to a developer application when it is registered for general access to a service.","In addition to storing the throttling profiles, API platform  also stores throttling counts (i.e., a counter) for registered developer applications. These throttling counts are the running total number of request messages made by a particular developer application to a particular service application during the throttling time period. In other words, when a throttling time period starts for a developer application, API platform  maintains a counter of each message request for the corresponding developer application until the throttling time period expires. The counter is stored in memory cache , and is used for validating the throttling of a request message by confirming that the updated counter (i.e., existing counter number +1) is not greater than the throttling amount threshold. Upon validating the throttling, the API platform forwards the request message on for processing. If throttling is not validated (i.e., existing counter number +1 is greater than the throttling amount threshold), then the API platform will not forward the request message on for further processing.","The methods and systems described herein also enable a service provider to offer to a developer at least one of premium and general access to the data stored within the service provider computer system. The developer is prompted to request premium and\/or general access for those services offered by the service provider having both premium and general access.","In the case of requesting premium access, a developer uses a developer computer system to send a request for premium access to a selected service application stored within the SP computer system by accessing the developer portal, and the API platform receives and forwards the developer request for premium access to the SO of the selected service application, who in turn approves or denies the developer request. Each SO being an owner of a particular service or set of services included within the overall SP computer system.","After the SO approves the developer request for premium access, the SO sets a throttling amount threshold and throttling time period, and gets a client ID (which is assigned by the API platform) to the developer application to be passed in messages for service enforcement. The throttling amount threshold and throttling time period defines, at least in part, a throttling profile for the developer. After being notified of the granting of premium access, the developer executes the developer application at the developer computer device which sends a request message to the API platform. The API platform validates the authenticity of the developer application message, counts the request message, and validates the throttling of the request message by comparing the count to the assigned throttling profile before forwarding the developer application message to the proper service application. The service application applies rules\u2014premium access rules in the case of premium access and general access rules in the case of general access\u2014to the developer application message, returns a number of records in response to the applied rules, and sends a service response to the API platform for forwarding to the developer computer device. The developer application receives the service response, and displays or uses the results. In the case of premium access rules, the premium access rules are based on the premium access granted to the developer application, which means the rules may be applied to additional data, with increased speed, with an improved priority, to additional services, and may include individualized or customized billing programs as compared to general access to the service application.","In the example embodiment, the developer application can also be executed by a computer system associated with at least one of a consumer, a merchant, an acquirer, a processor and an issuer (collectively used herein as a \u201cuser\u201d). In other words, in some cases, a user can download the developer application from the developer computer system for execution by the user computer device. In this embodiment, the user computer sends a developer application message to the API platform. The API platform validates the authenticity of the developer application message, counts the request message, and validates the throttling of the request message by comparing the count to the assigned throttling profile before forwarding the developer application message to the proper service application. The service application applies rules to the developer application message, returns a number of records in response to the applied rules, and sends a service response to the API platform for forwarding to the user computer device. The developer application receives the service response, and displays the results or uses the results at the user computer system.","As described herein \u201cpremium access\u201d refers to access granted to a developer or a developer application for accessing service applications stored on SO computer devices within the SP computer system. Premium access can be granted on a developer basis or on a developer application basis. Premium access is improved or superior access to data and logic stored within the SO computer devices as compared to general access to the SO computer devices. Premium access, as used herein, is defined to include access to additional data, additional bandwidth (i.e., data provided faster), improved data receiving priority, additional services, and individualized billing programs for the services provides as compared to general access to the SO computer devices.","In the case of requesting general access, a developer uses a developer computer system to send a request for general access to a selected service application stored within the SP computer system by accessing the developer portal, and the API platform receives the developer request. The API platform verifies that general access is requested and available, retrieves from a memory device the predefined throttling profile (i.e., the general access throttling profile) for the selected service application, and assigns the general access throttling profile to the developer application. Thus, in the case of general access, the SO predefines the throttling profile for each service application associated with the SO. Those predefined throttling profiles include the throttling amount threshold and throttling time period for general access to the service.","After being granted general access, the developer executes the developer application at the developer computer device which sends a request message to the API platform. The API platform validates the authenticity of the developer application message, counts the request message, and validates the throttling of the request message by comparing the count to the assigned throttling profile, which in this case is the predefined general access throttling profile, before forwarding the developer application message to the proper service application. The service application applies rules to the developer application message, returns a number of records in response to the applied rules, and sends a service response to the API platform for forwarding to the developer computer device. The developer application receives the service response, and displays or uses the results. As explained above, the developer application can also be executed by a user using a user computer system.","In the example embodiment, the API platform enables an SO to offer both general access and premium access to developers. SOs desire the ability to offer a controlled access or \u201cpremium access\u201d of their services to developers and business partners, in addition to the general access or open access. Premium and general access may be service-specific. For example, a developer may have an application with general access to Service A, and premium access to Service B.","In the methods and systems described herein, general access and premium access for each service may be optional. For example, it is possible that at least some services may have general access, and some may have premium access as well. Services with general access will provide that access to all developers and will provide standard data throughput and access to all non-restricted data, resources, and functions. Premium access is defined as greater data throughput, access to restricted data, access to restricted resources and restricted functions. Throughput is defined as one or both of the following: (a) number of requests (calls) allowed in a given time frame, and (b) number of records returned for a given request.","In the example embodiment, the SO will have the ability to define general access for their respective services, and will have the ability to define premium access for their respective services. The SO will also be able to define a premium access fee structure for their respective services. In the example embodiment, the SO may negotiate premium access online with a developer or may negotiate premium access to services through more traditional channels.","In the methods and systems described herein the API platform is configured to provide developer usage data to the SP\/SO to support invoicing and fee collection for premium\/general access. The API platform is also configured to enable the SO to grant and revoke premium\/general access at any time.","More specifically, the systems and methods described herein process message requests in the following manner: a) an SO predefines a throttling profile for general access of each service application offering general access including a throttling amount threshold and throttling time period, and stores the general access throttling profile within a service provider (SP) computer system; (b) a developer requests a production key with premium or general access to a service application stored within the SP computer system, wherein the developer submits the request from a developer computer system through a developer portal to the SP computer system; c) an API platform receives the developer request for premium or general access, signs the production key granting general access to any requested service application with general access; (d) in the case of premium access, the API platform sends an email to an SO associated with the requested service application requesting premium access to the requested service application for the developer, the SO logs into the SO application requested by the developer either approving or denying the developer request for premium access, the SO is prompted to select a throttling profile for the developer application after approving the premium access request, and the API platform updates the production key to include access to the approved premium service; e) in the case of general access, the API platform automatically assigns a general access throttling profile for the requested service application wherein a plurality of general access throttling profiles are stored within a memory device in communication with the API platform; f) the throttling profile assigned to the developer application is stored in the memory device; g) the developer or a user executes the developer application having premium or general access such that the developer application sends a message to the API platform, wherein the developer application message includes the client ID and the production key; h) the API platform validates the developer application message by verifying the client ID and production key, and, after validation, counts the request message (i.e., increasing a counter by one for each received request message for this developer application) and validates the request message by comparing the count to the assigned throttling profile; i) the API platform then forwards the developer application request message through an API services wrapper or directly to the corresponding service application at the SO computer system if throttling is validated; j) the corresponding service application applies rules to the developer application message, returns a number of records in response to the applied rules, and sends a service response having a bill code to the API platform; k) the API platform stores a message history of the service response with the bill code, removes the bill code from the service response, and sends the response to the developer computer device (if the developer sent the developer application message) or to the user computer device (if a consumer, merchant, acquirer and\/or issuer sent the developer application message); and l) the developer application receives the service response, and displays or uses the results.","In the financial service system described herein the bill code enables the SO to create a billing report for the developer. The SO requests a billing report from the API platform for a specific time period, and the API platform builds the report based on the bill code. The API platform stores the billing report in the database in a location designated by the SO. The SO is then able to bill the developer for using the SO service application. In the example embodiment, the SO and the developer are able to negotiate and enter into a customized or individualized billing program for providing premium access to the service application. These billing programs are typically based at least in part on a number of application request messages submitted to the service application by the developer application during a predefined period of time.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 6A","FIG. 5","FIG. 6A","FIG. 5","FIG. 5"],"b":["480","482","402","482","402","404","406","408"]},"First portion  of process  includes a developer creating  a key alias and submitting a CSR (certificate signing request) for a sandbox key. Developer computer device  submits the CSR to sandbox platform . Sandbox platform  signs  the sandbox key and grants general access to the requested simulated service application stored on simulator computer devices . Sandbox platform  sends  an email to developer confirming the issuance of the sandbox key and general access being granted. Developer computer device  receives  the email from sandbox platform .","First portion  of process  then continues on to a second portion  of process  shown in .",{"@attributes":{"id":"p-0106","num":"0105"},"figref":["FIG. 6B","FIG. 5","FIG. 6B","FIG. 5","FIG. 5"],"b":["500","482","402","500","482","402","404","406","408"]},"Second portion  of process  includes a developer requesting  premium access including a production key to a particular service application  (the \u201cfirst service application\u201d) stored on SO computer system . The developer request is submitted through developer portal , which is accessed via developer computer device . Portal  displays a user interface that prompts the developer to request a service application , such as first service application, offered by the SO via SO computer devices . Each key alias has a client ID, which enables developer computer system  to access the specific service application offered by the SO on SO computer device  through API platform  if the client ID has been approved by the SO.","API platform  receives  the developer request for premium access, signs the production key and grants general access to the developer for the first service application. API sends  an email to SO computer devices  requesting premium access to the first service application for the developer. A production key is only granted general access if a general service has been requested. If a premium service is requested that has a general service also then the general service will be granted. For example: if Locations Service Application has a general service and a premium service, and the developer requests the premium service then the general service will be granted immediately. If the developer requests MATCH Service Application which has premium service only then the client ID will not be granted any service access until the request is approved.","SO computer devices  receives  the email from API platform  and API services wrapper . The SO logs  into the SO application requested by the developer using SO computer devices . The production key request user interface is displayed on SO computer device  including the additional data fields designated for input by the SO. The SO selects the developer and key alias from a dropdown box, and selects  decline or approve for granting premium access to the first service application. If the SO selects decline, then a text box is provided for an explanation which can be emailed to the developer. If the SO selects approve, then the SO is prompted to select  a throttling amount threshold and throttling time period (i.e., a throttling profile), and gets  client ID already assigned to the developer to be passed in messages for service enforcement. The SO is provided the client ID so they can set up their service to handle requests from the specific approved source.","The production key for the developer is updated  from general access to premium access, and an email is transmitted  to notify the developer of the change in access to the requested service application. The email notifying the developer of the change in access is transmitted through API platform  to developer computer device .","The developer receives  the email at developer computer device  and updates its records to reflect premium access being granted to the requested service application. The developer executes  the developer application at developer computer device . The developer application sends a premium message to API platform . The developer premium application message includes the client ID and the production key provided by the API platform. API platform  validates  the developer premium application message by verifying the client ID and production key. After validation , API platform  checks  the throttling limit assigned to the developer application, captures the client ID from the message, and adds  the client ID to a header of the message. API platform  and API services wrapper  forward  the developer premium application message to the corresponding service application, the first service application.","The first service application applies  rules to the developer premium application message, and returns a number of records in response to the applied rules. The first service application creates  a response based at least in part on the number of returned records, adds  a bill code to the service response, and sends  the service response to API platform  through API services wrapper . In the example embodiment, the bill code may be optional depending on the service setup between the SO and the API platform.","API platform  stores  a message history of the service response with the bill code. API platform  removes  the bill code from the service response, and sends  the response to developer computer device . The developer application receives  the service response, and displays or uses the results.","In the example embodiment, the bill code enables the SO to create a billing report for the developer. The SO requests  a billing report from API platform  for a specific period of time (monthly, quarterly, yearly), and API platform  builds  the report based on the bill code. API platform  stores the billing report in memory device  in a location designated by the SO. The SO is then able to bill the developer for using the SO service application.","As described above, in the case where general access is requested, the API platform automatically assigns a general access throttling profile for the requested service application to the developer application, wherein a plurality of general access throttling profiles are stored within memory device  or memory cache . The general access throttling profile is then used to validate the request message.",{"@attributes":{"id":"p-0116","num":"0115"},"figref":["FIG. 7","FIG. 7","FIGS. 5 and 6","FIGS. 5 and 6"],"b":"700"},"User interface  is displayed when developer computer device  accesses developer portal  and the developer requests a production key. As stated above, process  includes a developer requesting  premium access including a production key to a particular service application  stored on SO computer system . The developer request is submitted through developer portal , which is accessed via developer computer device . Portal  displays a user interface, namely user interface , that prompts the developer to request a service application  offered by the SO via SO computer devices . Each developer key alias has a production key or client ID that will be provided in each message, and if that client ID is approved by the SO(s) then developer computer system  is able to access the specific service application offered by the SO on SO computer device .","User interface  includes premium services  and general (free) services . Each service offered under premium services  is listed with a checkbox for selection by the developer. Each service offered under general services  is listed with a checkbox for selection by the developer. In addition, user interface  includes certificate request file data box  which enables a developer to attach to the production key request a CSR (Certificate Signature Request). As explained above, when the developer uploads the CSR, the CSR contains the public key. API platform  uses the client ID received with each message and the developer's public key to verify that each message received by API platform  has not been tampered with.",{"@attributes":{"id":"p-0119","num":"0118"},"figref":["FIG. 8","FIG. 5","FIG. 8","FIGS. 5 and 6","FIGS. 5 and 6"],"b":["800","438"]},"User interface  includes a developer and key alias request pull down , a name, an address, an email address, a telephone number, a company name, a key alias name, and key alias description. The developer information is submitted to SO computer device  for approval. The premium service request approval user interface  also includes data fields requiring input from the SO upon receiving the request from the developer. These SO data fields include approve or deny premium access pull-down , client ID pull-down , throttling amount pull-down , throttling time period pull-down , and comments section . In addition, a billing reports section  is included on user interface .",{"@attributes":{"id":"p-0121","num":"0120"},"figref":["FIG. 9","FIG. 5","FIG. 9","FIG. 5","FIG. 5"],"b":["900","402","900","402","404","406","408"]},"Process  includes storing  a throttling profile for a developer application within at least one of memory device  and memory cache . The throttling profile includes a throttling amount threshold and a throttling time period. Process  further includes storing  a counter for the developer application within at least one of memory device  and memory cache . The counter tracks an access count for the developer application.","API platform  receives  a developer request message initiated by the developer application, and identifies  the identity of the developer application. Based on the identity of the developer application, API platform retrieves  the throttling profile for the developer application and retrieves  the access count for the developer application from either memory device  or memory cache . API platform  increases  the access count by 1 and compares  the updated access count to the throttling profile. More specifically, API platform  compares  the updated access count to the throttling amount threshold. If the updated access count is not greater than the throttling amount threshold, then API platform  validates  the request message as complying with the throttling profile. If, however, the updated access count is greater than the throttling amount threshold, then API platform  sends  an error message to developer computer system  notifying the developer that the throttling amount threshold has been exceeded.","API platform  stores  the updated access count in memory device  or memory cache  as the new access count, and forwards  the developer request message to the SO for further processing (i.e., applying rules to the developer request message, returning the number of records in response to the applied rules, and sending a service response based at least in part on the number of returned records to the user computer device).","API platform  also checks  the time of the request message relative to the throttling time period (i.e., the API platform determines whether the throttling time period has expired). If the throttling time period has expired, then API platform  updates  the new access count by setting it to zero and starts a new throttling time period on the next request message. If the throttling time period has not expired, then API platform  keeps  the new access count set at the stored  updated access count. Throttling by access and time frame may be applied to any type of request message customized to specific entities.",{"@attributes":{"id":"p-0126","num":"0125"},"figref":["FIG. 10","FIG. 5","FIG. 5"],"b":["950","402","950","402","404","406","408"]},"Process  includes receiving  registration data at API platform  from developer computer device . The registration data is submitted by the developer through API portal . The registration data includes data relating to the developer or developer application such as key alias, first name, last name, username, password, email address, country, street address, city, state\/province, postal code, phone number, and company\/university affiliation. In addition to the registration data, API platform also receives  a certificate signing request (CSR) from developer computer device , which is uploaded through API portal . The CSR includes a public key associated with the developer. The developer generates a private and public key pair using tools outside of the service provider computer system. The public key is uploaded with the CSR to API platform .","After receiving  registration data and receiving  the CSR, API platform  assigns  a client ID to the developer's key alias. The key alias having been selected by the developer for identifying the developer application within service provider computer system . More specifically, API platform  uses API registration service  to assign  a client ID to the developer's key alias. API platform  forwards  the registration data and the CSR to certificate signing server . Certificate signing server  verifies  the registration data, signs  the certificate request, and returns  the signed certificate to API platform  in real time. Verification  and signing  processes are automatically performed by certificate signing server  without any intervention or input by a person associated with service provider computer system . Accordingly, verification  and signing  are performed in real time without delay for manual intervention.","Verification  includes certificate signing server  verifying the registration data provided by the developer by automatically validating the data found in the CSR request against the registration data provided by the developer. In other words, certificate signing server  validates the registration data by comparing the registration data provided by the developer to the data found in the CSR request. In another embodiment, verification  may include a plurality of data checks performed by certificate signing server  to ensure that the developer is authentic and someone the SP is willing to exchange information with. The data checks may include at least one of: (1) a comparison of the developer provided data to the Specially Designated Nationals (SDN) List published by the Office of Foreign Assets Control (OFAC), (2) a comparison of the developer provided data to lists of designated fraudulent merchants and\/or consumers stored by the SP, and (3) a comparison of the geolocation of the developer's computer device to a list of countries with denied access.","For example, certificate signing server  may verify the registration data provided by the developer by comparing the provided data to the Specially Designated Nationals (SDN) List published by the Office of Foreign Assets Control (OFAC) to ensure that the SP is not granting data access to a developer listed on the SDN List. If certificate signing server  determines that developer is included on the SDN List, then certificate signing server  rejects the CSR request and denies access to SP computer system . In another example, certificate signing server  may verify the registration data provided by the developer by comparing the developer provided data to lists of fraudulent merchants and\/or consumers stored by the SP to ensure that the SP is not granting data access to a developer with a history of fraudulent activities. If certificate signing server  determines that developer is included on one of the fraudulent lists, then certificate signing server  rejects the CSR request and denies developer's access to SP computer system . In another example, certificate signing server  may verify the registration data provided by the developer by determining the geolocation of developer's computer device  and comparing it to a list of countries having been denied access, wherein the geolocation is determined by SP computer system  through its interaction with developer's computer device  via developer portal  and API platform . If certificate signing server  determines that the geolocation of developer's computer device  is actually within a country designated for denied access (e.g., for security reasons, etc.), then certificate signing server  rejects the CSR request and denies developer's access to SP computer system .","After a positive verification, API platform  stores  within memory device  the client ID and the signed digital certificate (developer's public key). The combination of the client ID and the developer's public key comprises the production key. API platform  sends  the client ID and the signed digital certificate to the developer at developer computer device . The registration process is then complete.","In the future, when developer application  sends  a message request to service provider computer system , API platform  receives  the message request which includes the client ID and a digital signature created with the private key of the developer. Since the message request includes the signed certificate, API platform  identifies  developer application  associated with the received message request by comparing the received client ID to the corresponding client ID stored within memory device . In addition, API platform  retrieves  the public key stored within memory device  and associate with the client ID. API platform  verifies  the digital signature used to sign the message request by using the public key retrieved  from memory device  to decrypt the message request. Each subsequent message request received by API platform  is verified in the same manner, verifying that the message was sent by the developer application and has not been tampered with. More specifically, the API platform authenticates the request message as being untampered with and originating from the developer application by using the retrieved public key to verify the digital signature of the request message.","In the example embodiment, the API portal includes API services documentation pages which include an explanation of service levels between general and multiple premium levels, and the process to obtain premium access. In addition, a developer may be required to register with service provider computer system  and provide certain additional information such as a developer pseudo ICA and an acquirer ICA (Interbank Card Association).","The systems and methods described herein also enable a developer to request a sandbox key and create a key alias. The sandbox key is a key that allows a developer to test their applications in a test area within system  such that the application being tested is provided test data from system  and not real data. A new sandbox key may be granted with access to all existing services with general access.","In the example embodiment, a request for a production key may use a popup with a premium selection for services with premium access. The developer will be prompted to select general access or premium access for each service offered. If premium is selected and there is a general option, then system  will grant general access to the developer. In some cases, certain services may only have general access or only have premium access. A production key with a premium access request will still be generated immediately with general access granted if any of the services requested have general access. For example: in the case where a developer requests premium access for ATM locations, the production key will be granted general access until premium access is approved; any message using the production key will be throttled based on general throttling; and messages will be forwarded without a client ID or with a client ID set for general access.","As explained above, when a production key for premium access is requested, an email is sent as notification for the SO to log into an application to approve and manage requests. The email may contain a link to a service management application. The service management application could be part of the API portal or a separate application. The email sent to the SO includes, developer name, alias name, and premium access requested. The system may include a configurable time limit to respond to a request by the service with the result of denying access. For example: SO offers a service having a 7 day time limit to respond to a request for premium access. If the request has not been approved or denied in 7 days, it is automatically denied.","The service management application would allow the SO to log in and review pending requests, and then approve or decline premium service access. The SO would have the ability to select a developer and a key alias. After making the developer and alias selection, a screen would display at least the developer name, contact information, alias name, alias description, and premium access requested. The SO would have the ability to approve or deny access, select throttling limits and throttling time limits based from the service setup. The API platform generates a client ID that the service uses to apply rules to messages. The API platform will include the client ID in messages sent to a service from the specified key alias.","The system is also configured to send an email to the developer for notifying the developer as to whether the request has been approved or denied. The system is also configured to allow the SO to view all developers and key alias approval status and transaction metrics by developer and\/or by key alias. The system is configured to enable an SO to view, grant and revoke premium access.","The SO provides content for service documentation pages that are accessible through the API portal. The system will also include a list of premium service levels, descriptions, and a designation showing which services require billing reports. The system will provide if a service is general only, premium only, or general and premium. The client ID will be added to messages to allow the service to determine what rules to apply to a message. The system will include a list of pre-established bill codes per service that may be returned with each message from the service that identifies the billing level of the transaction. The system will include a list of throttling settings (numbers of requests), and a SO setup page or registration page.","The system, and more specifically the API platform, may be configured to perform throttling by service, service level or production key level (client ID). All service level enforcement functionality will be handled by each service. The API platform will provide the client ID with each message. The API platform validates each message that comes through prior to sending to service. The API platform rejects any unauthorized requests.","In the example embodiment, the system includes a sandbox key to allow a developer to test an application using test data. All general services may be made available to every sandbox key. In addition, the sandbox key may be configured to allow a developer to test premium services and methods once the developer and client ID are approved.","Based on the foregoing specification, the above-discussed embodiments of the invention may be implemented using computer programming or engineering techniques including computer software, firmware, hardware or any combination or subset thereof. Any such resulting program, having computer-readable and\/or computer-executable instructions, may be embodied or provided within one or more computer-readable media, thereby making a computer program product, i.e., an article of manufacture, according to the discussed embodiments of the invention. The computer readable media may be, for instance, a fixed (hard) drive, diskette, optical disk, magnetic tape, semiconductor memory such as read-only memory (ROM) or flash memory, etc., or any transmitting\/receiving medium such as the Internet or other communication network or link. The article of manufacture containing the computer code may be made and\/or used by executing the instructions directly from one medium, by copying the code from one medium to another medium, or by transmitting the code over a network.","While the disclosure has been described in terms of various specific embodiments, it will be recognized that the disclosure can be practiced with modification within the spirit and scope of the claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 1-10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 5","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIGS. 6A and 6B","FIG. 5"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 7","FIG. 5"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 8","FIG. 5"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 9","FIG. 5"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 10","FIG. 5"]}]},"DETDESC":[{},{}]}
