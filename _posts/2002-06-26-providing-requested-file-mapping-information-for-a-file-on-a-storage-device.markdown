---
title: Providing requested file mapping information for a file on a storage device
abstract: A resolve agent for providing requested file mapping information for a file on a storage device. The agent comprises an application programming interface through which file identifying information is provided to the resolve agent and the requested file mapping information provided by the resolve agent; and file system logic configured to ascertain the requested file mapping information from file data structures on the storage device according to a file system that created the file data structure on the storage device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07308463&OS=07308463&RS=07308463
owner: Hewlett-Packard Development Company, L.P.
number: 07308463
owner_city: Houston
owner_country: US
publication_date: 20020626
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","The present invention relates generally to computer file systems and, more particularly, to computer file systems that locate extents of a file stored on a storage device in a manner that is independent of the implemented operating system.","2. Related Art","An application server is a computer that executes application programs such as order entry systems, banking systems and employee databases. Typically, client computers or workstations, by which users interact with the application programs, are connected to the application server over a local area network (LAN), or a wide area network such as the Internet. In some cases, storage devices such as disks are directly connected to the application servers to store application programs and application data (hereinafter, collectively called \u201cfiles\u201d). These disks are referred to as local disks. In other cases, disk arrays (also commonly referred to as storage servers) are used to store the files. A disk array is a computer, separate from an application server, which is dedicated to storing files. Application servers are typically connected to disk arrays by a storage area network (SAN). Software executing in the application servers and the disk arrays make the disks of the disk arrays appear as though they are directly connected to the application servers from the perspective of the application programs.","Each application server and each disk array is under the control of an operating system, such as Windows NT, Sun Solaris or HP-UX. Each operating system stores files on disks and other storage devices using a \u201cfile system,\u201d such as the HFS file system from Hewlett-Packard Company, the NTFS file system from Microsoft, and the Sun file system from Sun Microsystems, Inc.. A file system is a set of routines that allocates space on the storage devices and keeps track of storage-related information such as where each file is stored on the storage device, the name of each file, the folder or directory structure in which each file is organized, and the owner, access rights and other attributes of each file. A file system stores this storage-related information on the storage device. This storage-related information is commonly referred to as \u201cfile data structures,\u201d \u201con-disk structures\u201d and a \u201cfile structure\u201d (collectively and generally referred to herein as a file data structure).","An operating system uses its file system to interpret this file data structure whenever an application program, or the operating system itself, reads from or writes to a file on the storage device. File systems from disparate operating systems are not compatible with each other, because file data structures created by one operating system's file system typically cannot be interpreted by another operating system's file system. Consequently, a file stored in accordance with one operating system typically cannot be read by a different operating system.","To enable recovery from catastrophic loss of data in case of hardware failure, sabotage, fire or other disaster, data centers routinely make backup copies of their files. These copies are typically made on removable media, such as magnetic tape or optical disk, and are then stored off-site.","Data centers typically back up files periodically. Oftentimes, backup operations are performed daily, although in some circumstances, backup operations are performed hourly or even continuously. Backup operations are becoming increasingly problematic due to the increase in computer resources consumed by such operations. Specifically, backup operations generate memory and computational demands on these application servers and disk arrays, reducing the computers' capability to execute application programs and\/or quickly access files. Backup operations also consume network (LAN and SAN) resources; that is, they generate network traffic, which decreases the network's capacity to handle application-generated traffic between application servers and disk arrays. Furthermore, it is impractical to backup open files, because application programs that access these files are likely to change data in these files while the backup operation is in progress, rendering the backup copy internally inconsistent.","In an attempt to avoid these problems, data centers sometimes schedule backup operations for evenings, weekends, or other times that the application programs are not being utilized by many users. Oftentimes, during the backup operations, the application programs are shut down to prevent the data from being manipulated during the backup operation. However, this commonly used approach to backing up data is flawed, because it leaves the files vulnerable to data loss for long periods of time and during times of rapid change, that is, during times of peak usage. Furthermore, in some cases the time it takes to backup the files is significantly greater than the time during which the application program execution can be halted. In addition, each backup program is typically designed to run under only one operating system and can create backup copies of files stored under only that operating system, so a data center might have to employ several backup programs, one for each operating system, which increases costs to acquire the backup software and train data center personnel.","In one aspect of the invention, an agent for providing requested file mapping information for a file on a storage device. The agent comprises an application programming interface through which file identifying information is provided to the resolve agent and the requested file mapping information provided by the resolve agent; and file system logic configured to ascertain the requested file mapping information from file data structures on the storage device according to a file system that created the file data structure on the storage device.","In another aspect of the invention, a resolve agent for providing requested file mapping information is disclosed. The resolve agent comprises an application programming interface, by which file identifying information can be passed to the resolve agent and the requested file mapping information can be passed by the resolve agent. The resolve agent also comprises file system logic capable of ascertaining file mapping information according to a file system selected by a compilation parameter and capable of ascertaining the requested file mapping information from an on-disk structure according to the selected file system.","In a further aspect of the invention, a resolve agent for providing requested file mapping information is disclosed. The resolve agent comprises an application programming interface, by which file identifying information can be passed to the resolve agent and the requested file mapping information can be passed by the resolve agent. The resolve agent also comprises file system logic capable of ascertaining the requested file mapping information from an on-disk structure.","In a still further aspect of the invention, a method for providing requested file mapping information for a file on a storage device. The method comprises the steps of receiving a request for file mapping information, said request including file identifying information; obtaining the requested file mapping information from file data structures on the storage device according to a file system that created the file data structure on the storage device; and providing the requested file mapping information in reply to the request.","In yet another aspect of the invention, an article of manufacture is disclosed. The article of manufacture comprises a computer-readable medium storing computer-executable instructions, the instructions implementing an application programming interface, by which file identifying information can be received and file mapping information can be sent; and a file system capable of ascertaining the file mapping information from an on-disk structure.","In another aspect of the invention, an application programming interface (API) is disclosed. The API comprises, an input parameter comprising file identifying information; and an output parameter comprising file mapping information corresponding to the file identifying information.","In one more aspect of the invention, a resolve agent for providing requested file mapping information is disclosed. The resolve agent comprises means for passing file identifying information and the requested file mapping information; and means for ascertaining file mapping information according to a plurality o file systems and for ascertaining the requested file mapping information from file data structures according to one of the plurality of file systems.","Various embodiment of the present invention provide certain advantages and overcome certain drawbacks of the above and other conventional techniques. Not all embodiments of the present invention share the same advantages and those that do may not share them under the same or similar circumstances. Further features and advantages of the present invention as well as the structure and operation of various embodiments of the present invention are described in detail below with reference to the accompanying drawings. In the drawings, like reference numerals indicate like or functionally similar elements. Additionally, the left-most one or two digits of a reference numeral identifies the drawing in which the reference numeral first appears.","The present invention provides operating system-independent methods and systems for locating \u201cextents\u201d (fragments or portions) of files on a storage medium, such as a disk, and for providing this location information to another software or hardware component such as an off-line backup utility, defragmenter, etc. As will be described in detail below, in one aspect of the invention, files are stored on a mirror disk set. When a request or instruction is given to backup files of the mirror disk set, one of the mirror disks is disconnected from the other mirror disk(s) in the mirror disk set to provide a snapshot of the mirror disk set. This process is referred to herein as \u201csplitting the mirror,\u201d and the resulting mirror disk is referred to as a snapshot disk. If, when the files are to be backed up, the files are stored on a non-mirrored disk, a mirror disk set is first created by adding a mirror disk and copying the files stored on the non-mirrored disk to the newly added disk to form two mirror disks. Splitting the mirror is considered to be well-known in the art and is not described further herein.","A \u201cresolve agent\u201d or, simply, \u201cagent,\u201d contains at least a portion of the file system's routines, which enable the resolve agent to interpret file data structures according to the file system that created the file data structures. This includes interpreting file data structures stored on the snapshot to ascertain the location of the files to be backed up. As noted, the file data structures include information, such as the file location (starting block number and size), the filename of the file, the folder or directory structure in which the file is organized, and the attributes of the file.","The resolve agent also provides an application programming interface (API), enabling other components to communication with the resolve agent. Preferably, a \u201cbackup agent\u201d provides the resolve agent, via the API, with name(s) of file(s) to be backed up. The resolve agent reads file data structures on the snapshot disk to locate the file(s) to be backed up, including all extents of those files that are stored as discontiguous pieces on the disk. That is, the resolve agent ascertains a disk address (\u201cbeginning physical block number\u201d) for the beginning of each extent of each file, as well as the size (number of physical blocks) of each extent. Through the API, the resolve agent provides the physical block addresses and sizes to the backup agent, which initiates a copy operation of the identified extents from the snapshot disk to a backup device. This is in contrast to, for example, operating systems which locate files on a disk and return the data contained in those files rather than returning the location of the extents through an API or otherwise.","The resolve agent interprets file data structures stored on the snapshot disk by implementing those portions of the file system that stored the file which are associated with interpreting file data structures. The resolve agent reads and interprets the file data structures to locate files on the snapshot disk. The resolve agent includes an application programming interface (API) through which a backup agent provides the resolve agent with the names of the files to be backed up. The resolve agent reads file data structures on the snapshot disk to locate the specified files, including all extents of each file that is stored in a set of discontiguous pieces on the disk. Specifically, the resolve agent ascertains a disk address (\u201cbeginning physical block number\u201d) for the beginning of each extent of each file, as well as the size (number of physical blocks) of each extent. Through the API, the resolve agent provides these physical block addresses and sizes to the backup agent that initiates a copy operation of the identified extents from the snapshot disk to a backup device.","The resolve agent of the present invention can be implemented in any network environment.  is a block diagram of one computer environment in which an embodiment of the present invention can be used to locate extents of files that are to be backed up. Workstations or client computers  are connected by a LAN  to an application server . The application server  includes a local disk . Application server  is connected, via a storage area network (SAN) , to a disk array , which includes disks  and . SAN  typically includes fiber channel switches, hubs and\/or bridges and associated fiber channel interconnection hardware (not shown), although other interconnect technology can be used. An appropriate disk array and associated equipment is available from EMC Corporation, Hopkington, MA under the trade name Symmetrix and Fastrax DataEngine. In this example, disks  and  are part of a mirror disk set  and, therefore, are referred to herein as mirror disks  and . Mirror disk set  can include other disks such as application server local disk  and other mirror disks such as mirror disk , which is controlled by another disk array (not shown) connected to SAN .","The term \u201cdisk\u201d is used herein to refer to a physical storage device. However, \u201cdisk\u201d can also refer to a partition of a physical disk, such as a partition managed by the disk array . \u201cVolume\u201d refers to a single disk or partition or a plurality of disks or partitions, such as a stripe set, span set or a RAID array, that is treated like a single logical disk.","A backup device , such as a magnetic tape drive, optical disk writer or other device suitable for producing backup copies of files is connected to a disk array. Preferably, this disk array is the same disk array  as one of the mirror disks , , and preferably over the same bus  as the mirror disk , . Preferably, bus  is a small computer system interconnect (SCSI) bus. The medium of the backup device  is preferably removable, but it can also be non-removable.","A backup appliance  provides a platform on which to run a backup agent  and a \u201cresolve agent\u201d  (both introduced in  and described in detail below). Advantageously, backup appliance  need not run the same operating system as disk array  or application server . Backup appliance  can be a separate computer, such as a personal computer, or the backup agent  can run on disk array , application server , or another computer connected to SAN . Backup appliance  can be connected to SAN  over a dial-up connection or other well-known technology that provides a network connection to disk array . A workstation, keyboard and screen, or other hardware capable of providing a graphical user interface (\u201cGUI\u201d)  (hereinafter referred to as a user interface) is connected to backup appliance  to facilitate human interaction with backup agent . The connection  between user interface  and the backup appliance  can be direct or over any combination of networks or communication links. A suitable backup agent and user interface is available from Hewlett-Packard Company, Palo Alto, Calif. under the trade name OmniBack.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 2"],"b":["202","200","126","126","204","112","204","126","202","112","128","204"]},"If the file to be backed up resides on a disk that is currently not mirrored, backup agent  creates a mirror set by adding a mirror disk to the disk on which the file resides. In any case, backup agent  identifies, or optionally the administrator specifies, one mirror disk  of the mirror set to be used during a backup operation. The cache (not shown) for the identified or selected disk  is flushed, and the disk is disconnected from the mirror set. This produces a disk  containing a snapshot of the mirror disk set including the files specified to be backed up. As noted, this procedure is referred to as \u201csplitting the mirror.\u201d If the files specified by the administrator reside on more than one disk, the backup agent  performs these operations for each applicable disk. This is illustrated in  by the multiple snapshot disks .","Backup agent  sends file identifying information for each of the files to be backed up to resolve agent . This file identifying information can include for each file information identifying the disk(s) on which the file is stored, the directory or folder in which the file is organized and the filename of the file. Resolve agent  uses this file identifying information to read file data structures on snapshot disk  and to locate all the extents of the specified files.","Disks such as snapshot disk  are divided into \u201cphysical blocks,\u201d typically 512 bytes each, although other block sizes are used. Each physical block has an address referred to as a physical block number. Typically, one contiguous range of physical block numbers spans all the partitions of a physical disk. Thus, a typical arrangement is for the physical block numbers to begin at zero and increment by one to the end of the physical disk. If a physical disk is divided into several partitions, the beginning physical block number of the second and subsequent partitions is equal to one more than the block number of the last physical block in the respective preceding partition. Two or more physical blocks are aggregated into a \u201clogical block\u201d. All logical blocks on a volume are of equal size, but logical block sizes can vary from volume to volume. Each logical block has a logical block number. If a volume comprises more than one disk, all the space on the disks of the volume is treated like one contiguous space of logical blocks. In other words, the space of logical blocks abstracts the disks into appearing like one single disk.","An \u201cextent\u201d is a contiguous group of logical blocks. Extents are typically identified by the block number of the first logical block of the extent and the number of logical blocks in the extent. Not all extents on a disk are necessarily the same size. Some files (\u201ccontiguous files\u201d) are stored in a single extent, but most files are stored in a series of discontiguous extents.","For each file to be backed up, resolve agent  ascertains the location of the file. As noted, the file location information comprises the beginning logical block number and number of logical blocks in each extent of the file. The resolve agent  converts the beginning logical block number into the corresponding beginning physical block number, and it converts the number of logical blocks into the number of physical blocks, by taking into account the size of a logical block, relative to the size of a physical block. The beginning physical block number of each extent, and the number of physical blocks in each extent, are collectively referred to herein as file \u201cmapping information\u201d and the process of obtaining this mapping information is referred to as \u201cresolution\u201d or \u201cresolving.\u201d This file mapping information can also include the identity of one or more disks on which the file resides. Resolve agent  sends the mapping information to backup agent , which then instructs data mover to  to copy the identified blocks from snapshot disk  to backup device , preferably using an Extended SCSI Copy command (\u201cXCOPY\u201d) . Optionally, the file mapping information is also written to backup device  to facilitate subsequently restoring the backed up file(s). Optionally, after all files that are to be backed up from snapshot disk  are copied to backup device , snapshot disk  can be reconnected to mirror disk set .","As shown in , resolve agent  contains an interface and three components. Specifically, resolve agent  comprises an application programming interface (API) , an analyzer , a logical volume manager  and a physical reader , although these functions need not be segregated exactly as shown. In the embodiment illustrated in , there are three snapshot disks , and (collectively and generally referred to as snapshot disks ) that store the files to be backed up. Together, snapshot disks  form a volume . A physical reader  is created for each disk , as shown in .","Analyzer , logical volume manager  and physical readers  provide a hierarchy of abstractions of disks . Each component of resolve agent  accepts a request from a component or API  directly above it made at a higher level of abstraction and, in response, generates one or more requests to a resolve agent component directly below it at a lower level of abstraction; that is, addressed with a finer degree of resolution to a location on a disk than the higher level request. Importantly, API , analyzer  and logical volume manager  are operating system independent, however physical readers  is natively compiled to run on the operating system of backup appliance .","Advantageously, backup agent  and other software components (not shown) can interact with resolve agent  through API . API  provides a way for an external component such as backup agent  to specify to resolve agent  what disks and files are to be resolved. In the embodiment described below, this information is provided in two data structures, a platform data structure  () and a volume data structure  () described below. In addition, backup agent  specifies the location and size of an output buffer in which resolve agent  can return file mapping information for the specified files. One embodiment of this output buffer is described below with reference to .","In one embodiment, API  includes five calls: ResolveOpen( ), ResolveGetFirstBuffer( ), ResolveGetNextBuffer( ), ResolveClose( ) and ResolveGetErrorCode( ). The ResolveOpen API call conditions the resolve agent  for a particular volume and platform combination. This API call has two parameters, \u201c*platform,\u201d and \u201c*volume\u201d. The parameter \u201c*platform\u201d defines the platform or operating system of the disk to be processed. This parameter points to a platform data structure , one embodiment of which is shown in . Platform data structure  includes information pertaining to snapshot disks  such as the type and version of the operating system, etc. The parameter \u201c*volume\u201d specifies which volume is to be processed. This parameter points to a volume information data structure , one embodiment of which is shown in . These parameter are passed to the API  from an external component (not shown). Backup appliance  establishes a connection to snapshot disk , so snapshot disk  appears to be locally connected to backup appliance . \u201cLocal name\u201d is a character string, for example \u201c\/dev\/rdsk\/ctd\u201d, by which disk  is referenced by backup appliance . \u201cWWN\u201d stands for \u201cworld wide name,\u201d a 64-bit integer that identifies the disk  () in the SAN . Since a volume identified by a volume structure  can comprise several disks, a device information array  can contain information for each of these disks.","The ResolveGetFirst Buffer call causes resolve agent  to begin resolving a list of specified files. The ResolveGetFirstBuffer API function call includes five parameters: fileCount, **filenames, *continueFlag, bufferSize and *buffer. The parameter \u201cfileCount\u201d indicates the number of files in the \u201cfilenames\u201d array. The parameter \u201c**filenames\u201d is an array of filenames to be resolved. API  passes this parameter to analyzer . This is indicated on  at .","The parameter \u201c*continueFlag\u201d is a return parameter that indicates all the file mapping information could not be returned in one buffer, and the backup agent should call ResolveGetNextBuffer to retrieve one or more additional buffers of file mapping information. The parameter \u201cbufferSize\u201d denotes the size of the output buffer containing the requested file mapping information. The parameter \u201c*buffer\u201d is a return parameter that points to the noted output buffer containing file mapping information. This parameter is passed from analyzer  to API  as shown by reference numeral  in .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 7","FIGS. 6 and 7"],"b":["600","602","604","700","604","202","600"]},"ResolveGetNextBuffer(*continueFlag, bufferSize, *buffer) returns additional buffers when all the mapping information could not be returned in one buffer. The parameter \u201c*continueFlag\u201d is a return parameter which denotes that another call to ResolveGetNextBuffer is necessary. The parameters \u201cbufferSize\u201d and \u201c*buffer\u201d are the same as in ResolveGetFirstBuffer.","ResolveClose( ) cleans up the internal data structures and stops threads of resolve agent . This is described in greater detail below.","ResolveGetErrorCode( ) returns an error code for the last call to the resolve agent .","Analyzer  accepts file identifying information such as the filenames of the files to be backed up, the directories or folders in which these files are organized, and the name of the disk or disks on which the files are stored. In one embodiment, each disk is identified by a \u201clogical volume\u201d name. Analyzer  receives this information through the ResolveOpen( ) API call described above. More particularly, this information is provided to analyzer  through platform data structure  and volume data structure  which are passed to analyzer  through this call.","For each extent of each file to be resolved, analyzer  reads and interprets file data structures on snapshot disk  to locate the beginning logical block number and size (number of logical blocks) of extent . The Analyzer  treats snapshot disks  as a space of logical blocks, even if disks  form a multidisk volume . To read the file data structures, analyzer  issues read requests  to the logical volume manager . Each such read request specifies a starting logical block number and a number of logical blocks to read. Since analyzer  is written with knowledge of the layout of the file data structures on snapshot disk , instructions (\u201cfile system logic\u201d) in analyzer  can select appropriate logical blocks on snapshot disk  to read the necessary file data structures. Logical volume manager  returns the logical blocks  requested by the analyzer , and the analyzer analyzes the file data structures returned in these logical blocks. The file data structures on the disk  store extent addresses and sizes in terms of logical blocks. The analyzer  converts these starting logical block number addresses to starting physical block number addresses, and it converts sizes from numbers of logical blocks to numbers of physical sizes, based on the ratio of physical block size to logical block size of the disk .","Essentially, analyzer  includes a \u201cread-only\u201d file system for the file data structures used on snapshot disk . That is, analyzer  contains file system logic necessary to locate all the extents of a file on snapshot disk . Importantly, analyzer  does not need to contain file system logic necessary to allocate blocks or create or extend files on a disk. This read-only file system includes file system logic necessary to read the master file table, I-node or other file system-specific or operating system-specific file data structures on disk  to ascertain the disk's logical block size and other parameters of snapshot disk  and to interpret the directory structure and file mapping information stored on snapshot disk  and, thereby, locate extents of the specified files on the disk.","Most computer architectures store multi-byte data, such as 32-bit \u201clong\u201d integers. In some such architectures, the least significant eight bits of data is stored at the lowest addressed byte of the multi-byte data. This is in contrast to other computer architectures in which the least significant eight bits of data is stored in the highest addressed byte. This is commonly referred to as \u201clittle endian\u201d and \u201cbig endian\u201d. If analyzer  is executing on a computer that has a different endian than the computer that wrote the file data structures on disk , analyzer  converts data, such as starting logical block numbers, it extracts from the logical blocks returned by the logical volume manager . The endian of the disk  is indicated in platform data structure .","Logical volume manager  accepts I\/O requests addressed to logical blocks  and generates corresponding I\/O requests addressed to physical blocks on the appropriate disk . Logical volume manager  abstracts disks  into a contiguous span of logical blocks starting at logical block number zero, even if the disk is a multidisk volume or the disk includes a partition that begins at a physical block other than physical block number zero. Logical volume manager  ascertains the physical block size of the disk  by querying the disk. For example, for a SCSI disk, a SCSI IOCTL command can be issued to find the disk's block size, etc. Analyzer  passes to logical volume manager  information about a disk  obtained through the ResolveOpen( ) call. This information includes the disk's logical block size. Based on the logical block size and the physical block size, logical volume manager  calculates the number of physical blocks to read from disk  to satisfy any given request to read logical blocks. Based on the disk's beginning physical block number and the beginning logical block number of an I\/O request, the logical volume manager  calculates an offset to the beginning physical block number to read. If the disk is a multidisk volume, such as a stripe set, the logical volume manager  calculates which disk(s) of the multidisk set contain the physical blocks corresponding to the requested logical blocks. Logical volume manager  then passes, to the physical reader(s)  corresponding to the appropriate disk(s), requests  to read the appropriate physical blocks. Physical readers  return at  physical blocks to logical volume manager , which aggregates the physical blocks into logical blocks and returns the logical blocks  to the analyzer .","Using UNIX \u201csuperuser\u201d privilege, or a corresponding privilege on the backup appliance , the physical reader  is able to read any physical block(s) on the disk . Physical readers  issues I\/O calls to the operating system of the backup appliance  to read these physical blocks. Physical reader  is, therefore, natively compiled to run under the operating system of backup appliance .","When resolve agent  receives a ResolveGetFirstBuffer( ) call, it spawns a thread of execution to handle the request. For each file identified in the ResolveGetFirstBuffer( ) call, resolve agent  reads file data structures on snapshot disk  to ascertain the file's mapping information, and places that mapping information in a buffer . If the buffer becomes full, the thread is paused. Once the caller receives buffer , the thread is resumed and continues placing mapping information into buffer . Multiple threads enable resolve agent  to concurrently handle requests from multiple callers and facilitates multiple simultaneous backup operations from multiple disks  to multiple backup devices  ().","Preferably, the source code of analyzer  contains file system logic that enables it to read disks produced by several file systems. In such embodiments, a compile-time parameter can be implemented to control which file system logic is to be compiled at a given time. In one embodiment, file system logic that is not selected is not compiled. Alternatively, analyzer  is compiled with file system logic that enables it to read multiple file systems. In this latter embodiment, analyzer  selects, on a case-by-case basis, which file system logic to utilize. This determination can be based on, for example, the file system of snapshot disk , or it can be specified in an API call. Analyzer  can use platform structure  to identify the operating system and file system that was used to produce a disk . Alternatively, the analyzer  independently ascertains the file system that produced the disk  by reading portions of the disk. Typically, the first few blocks of the disk contain data, such as character strings, that identify the file system.","Writing an the analyzer  that can interpret file mapping information and locate extents is within the skill of an ordinary practitioner, if documentation of the location and layout of the file data structures on the disk  is available or can be ascertained by \u201creverse-engineering\u201d. Some file systems and their corresponding file data structures, such as Windows NT Version 4.0 (NTFS), FAT16, FAT32, HPUX, UFS, HFS and Digital\/Compaq Files-11, are well documented, so writing an analyzer  for these file systems is straightforward. Other file system, such as Veritas V3, Veritas V4 and Veritas V4, are partially documented. Yet other file systems must be reverse engineered to understand their file data structures.","Reverse engineering a file system involves ascertaining the location and layout of file data structures stored on a disk and used to keep track of files on the disk and the location of the extents of these files. Several tools are available to facilitate this reverse engineering, and some file systems are partially documented. For example, Veritas has \u201cmanual pages\u201d that partially document the file system.","Reverse engineering a file system involves several steps. A quiescent copy of a disk containing a number of representative files and directories (folders) should be obtained. Native commands, management utilities and programs provided with the operating system or written by a programmer can be used to obtain a user-visible view of information about the files and folders on the disk. For example, the \u201cfind\u201d, \u201cIs\u201d and \u201cdir\u201d commands, with various options, can be issued to obtain a list of files and sizes. Some of these commands can also provide file mapping information, which is helpful in verifying the location and layout of the file data structures. Documentation provided with the operating system, particularly the operating system's API, describes I\/O calls that can be made to retrieve information about files or disks that might not be available through the native commands mentioned above. Dump utilities and file system debuggers, such as WinHex, DISKEDIT and fsdb (which ships with HP-UX 11.0), can be used to produce human readable representations of the data stored on the disk. If no such dump utility is available, one can easily be written, although it might be necessary to mount the quiescent disk as a \u201cforeign\u201d volume, and superuser privilege might be required, allowing the dump program to read all logical blocks of the disk, without intervention by the operating system's file system.","Alternatively, the resolve agent  can be accessed by a backup agent, disk defragmenter or other component (\u201cclient\u201d) using a web interface. Returning to , backup appliance  can include a web server, such as the Apache web server, available from the Apache Software Foundation. Alternatively, the resolve agent can run on a separate \u201cresolve appliance\u201d , which also includes a web server. In either case, a web client  can access the computer on which the resolve agent  runs over a wide area network (WAN) , such as the Internet, or another network, such as a LAN, which can be LAN . Well-known remote procedure calls (RPCs), such as those supported by the Simple Object Access Protocol (SOAP), can be used by the web client to invoke procedures in the resolve agent  and return data to the web client. SOAP supports RPCs by enclosing the remote procedure calls and data in XML tags and transporting them between the web client  and the computer on which the resolve agent  runs, i.e. the resolve appliance  or the backup appliance , using the hypertext transport protocol (HTTP). In this way, the resolve agent  can provide a remote procedure calling interface, specifically a web interface, to the client .","Although the resolve agent  has been described as returning file mapping information for individual files, alternatively it can return mapping information for an entire volume. The backup agent  or other external entity can send volume identifying information, but no file identifying information, through the API  to the resolve agent . In this case, the resolve agent can return mapping information for the entire volume, rather than for individual files stored on the volume. This mapping information includes the starting physical block number of the volume and the number of physical blocks in the volume. If the volume comprises a multidisk set, this mapping information can comprise the starting physical block number of each disk and the number of physical blocks in the disk. Utilizing this alternative, the backup agent  can make a backup copy of the entire volume, rather than each file, on the backup device .","Although the resolve agent  has been described as providing file or volume mapping information to a backup agent , the resolve agent can provide this mapping information to other clients, such as a disk defragmentation utility. Furthermore, the resolve agent  can be invoked to ascertain information about one or more volumes connected to a SAN , without providing volume or file information to the resolve agent. In this case, the resolve agent  ascertains which volumes are accessible over the SAN  and ascertains information, such as volume name, file system, operating system, files, sizes, owners, creation\/access\/backup dates, etc. for these volumes and files stored on these volumes. In this case, the resolve agent  reads and interprets file data structures stored on these volumes as described above, but instead of searching for information on specified files, the resolve agent  returns information on all files or only on files that meet filter criteria specified by the other clients.","Although resolve agent  is described as reading file data structures to resolve each file, the resolve agent can cache these structures in memory to reduce the number of I\/O operations performed.","Although operation of the present invention has been described in terms of locating physical blocks of one or more files, information can be stored on a disk without necessarily organizing it into a file. The more general term \u201cdata\u201d is, therefore, also used to refer to information stored on a disk or volume.","Resolve agent  is preferably implemented in software that can be stored in the memory, and control the operation, of a computer. Furthermore, the resolve agent  can be stored on a removable or fixed computer-readable medium, such as a CD-ROM, DVD, hard disk and floppy disk. In addition, this software can be transmitted over a wireless or wired communication line or network.","The terms and expressions employed herein are used as terms of description and not of limitation, and there is no intention, in the use of such terms and expressions, of excluding any equivalents of the features shown and described or portions thereof, but it is recognized that various modifications are possible within the scope of the invention claimed."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention can be better understood by referring to the following detailed description of a preferred embodiment in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 4","FIGS. 2 and 3"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 5","FIGS. 2 and 3"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 6","FIGS. 2 and 3","FIG. 7","FIGS. 2 and 3"]}]},"DETDESC":[{},{}]}
