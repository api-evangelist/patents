---
title: Flexible error trace mechanism
abstract: For a flexible error trace mechanism, embodiments may be implemented for C/C++ interface libraries, or in programs written in C/C++ or other programming languages. In one embodiment, when an error occurs in a function call, a trace element may be recorded that may include the source file name, function name, line number and other information that may be used to identify the error. In one embodiment, the library function may call a plurality of library functions in a function call stack. For each of the plurality of library functions, if the library function generates an error, an error trace element may be added to the error trace. After completion of the library function, the program may obtain the error trace for the library function. The error(s), if any, may be debugged using the information in the obtained error trace.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685573&OS=07685573&RS=07685573
owner: Sun Microsystems, Inc.
number: 07685573
owner_city: Santa Clara
owner_country: US
publication_date: 20030828
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY INFORMATION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS","CONCLUSION"],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/491,381, filed Jul. 31, 2003.","1. Field of the Invention","This invention relates to computer software, and more particularly to error detection in code.","2. Description of the Related Art","Being able to trace an error when it occurs in a program may be as important as error handling itself in software development. With C\/C++ programs or libraries, what is often seen is that a function returns an error status (e.g. an error code) that may tell little or nothing about where (i.e. the frame in the call stack) the error occurred. Lacking this information may make debugging software and\/or identifying the root cause of an error time consuming and difficult. This may be especially true for errors that are difficult to reproduce. Often, C\/C++ programs rely on debugging tools to trace errors. These debugging tools may require special debug build libraries. In production, typically only optimized libraries are deployed.","The standard C++ language has Exception classes for error handling that may be used to provide more information for tracking error conditions. Modern high-level languages, e.g. the Java programming language and Microsoft Visual Basic NET, may provide APIs to get the stack trace for exceptions.","Embodiments of a flexible error trace mechanism are described. Embodiments may be implemented, for example, for C\/C++ interface libraries, but embodiments may also bc implemented in other programming languages. Embodiments provide a flexible error trace mechanism for C\/C++ interface libraries at runtime. Embodiments provide a flexible error trace mechanism for C\/C++ libraries or a library that provides C\/C++ interfaces. Embodiments may also be used in programs written in other programming languages. Note that C\/C++, when used herein, means either the C programming language, the C++ programming language, or both","In one embodiment, when an error occurs in a function call, thread private data may be used to record a trace element. A trace element for a function may include or indicate one or more of, but is not limited to, the source file name, function name, line number, product name, and possibly other information that may be used to identify the error; for example, a low-level system call error number.","A program may call a library function of a library via an API to the library. In one embodiment, the library is a C\/C++ interface library. If the library function generates one or more errors, an error trace element may be added to an error trace structure for each error generated. In one embodiment, each error trace element includes information describing a particular error generated during execution of the library function. The library function may complete and return to the calling program. After completion of the library function, if the library function generated an error, the program may obtain the error trace for the library function, for example by calling a library function configured to return the error trace.","In one embodiment, calling the library function may result in the call of a plurality of library functions in a function call stack. For each of the plurality of library functions, if the library function generates an error, an error trace element may be added to the error trace.","The error(s), if any, may be debugged using the information in the obtained error trace, if desired. In one embodiment, each error trace element indicates one or more of a location where the particular error of the error trace element occurred, an error type of the particular error, and what the particular error is. In one embodiment, debugging may include determining from the error trace element one or more of a location where the particular error of the error trace element occurred, an error type of the particular error, and what the particular error is.","While the invention is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the invention is not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude\u201d, \u201cincluding\u201d, and \u201cincludes\u201d mean including, but not limited to.","Embodiments of a flexible error trace mechanism are described. Embodiments may be implemented, for example, for C\/C++ interface libraries, but embodiments may also be implemented in other programming languages. Embodiments provide a flexible error trace mechanism for C\/C++ interface libraries at runtime. Embodiments provide a flexible error trace mechanism for C\/C++ libraries or a library that provides C\/C++ interfaces. Embodiments may also be used in programs written in other programming languages. Note that C\/C++, when used herein, means either the C programming language, the C++ programming language, or both","Embodiments may be used in single-threaded or multi-threaded programs. A thread may be defined as a sequential execution stream. There may be one or more threads per address space. Programs may use multi-threads to accomplish the performance of several tasks concurrently. In one embodiment, when an error occurs in a function call, thread private data may be used to record an error trace element. Note that, in other embodiments, the error trace elements may be stored in other locations than thread private data. In one embodiment, an error trace may be viewed as a location history that indicates one or more locations in potentially difference pieces of code and that defines the path the code took to generate this particular error.","An error trace element for a function may include or indicate one or more of, but is not limited to, the source file name, function name, line number, error type, and possibly other information that may be used to identify the error; for example, a low-level system call error number. In one embodiment, the error trace element may include or indicate a product name. The product name may be useful in layered software to determine which product the error occurred in. In one embodiment, product name information may be included in or indicated by the error type. For example, an \u2018nspr\u2019 error type used in Sun One Message Queue (MQ) may indicate the error occurred in an NSPR library. In this example, an MQ application calls API function in the MQ C-API library and the functions in the MQ C-API library in turn calls functions in the NSPR library. Note that error type may have other meaning in other implementations.","In one embodiment, error trace statements may be macros inserted into the source code so that the entire error trace in a library may be easily reduced to no-ops at compile time. In one embodiment, error trace statements may be defined with different debug levels so that an error trace in a debug build may have more function calls recorded for a call path than in an optimized build. In one embodiment, the library may provide a function to retrieve the error trace for the calling thread when the last library function call fails (or, in one embodiment, even if it doesn't fail). In one embodiment, the library implementer may decide where or how much tracing in a failed call path to record; that is, not every function call in a call path may need to be recorded.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["400","400","402","402","404","404","400"]},"System  may include, in memory , code  implementing an embodiment of an error trace mechanism . Error trace mechanism  may provide flexible error tracing for code  at runtime. Code  may be any type of program, program component, module, application, etc. In one embodiment, code  may be implemented in the C\/C++ programming language. In other embodiments, code  may be implemented in other programming languages. In one embodiment, code  may, for example, include a C\/C++ interface library that provides the functionality of the error trace mechanism  to the code . Embodiments may also be implemented in interface libraries of other programming languages. In one embodiment, error trace mechanism  may be implemented directly in a program or program component, function, module, application, etc., rather than being included as part of an interface library.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["102","100","100","100","104","104","106","104"]},"In the function call stack, an API call to a function (A( )) may be made, for example by a function in user code. From that API call, a series of library functions may be called (e.g. B( ), C( ) and D( )) in the thread. If one or more of the function calls fails, then an error trace element may be written to the error trace  for the thread, for example through the failing function calling a SetErrorTraceElement( ) function of the library upon detecting the error. In one embodiment, an error trace  may then be obtained by the calling function, e.g. a function in user code, for example by calling a GetErrorTrace( ) function of the library. In one embodiment, the called API function (e.g. function A( )) may return an error code. The returned error code may be checked and, if the error code indicates that the called function (or any functions in the function call stack) failed, then the calling function may obtain the error trace  (e.g. by calling a GetErrorTrace( ) function or its equivalent). In another embodiment, an error trace  may be returned by the called API function, in this example function A( ). The error trace  may include one or more elements added to the error trace  by called library functions of the function call stack that encountered errors. If no functions in the function call stack encountered an error, then the error trace , if obtained, may indicate that no functions failed (e.g. via the array of trace elements in error trace  being NULL). The error trace  may then be evaluated, displayed, or otherwise used for debugging purposes, and, for example, may be used to determine one or more of, but not limited to, where (e.g. which method or function, file, and\/or line number) an error or errors occurred, the error type of error(s) that occurred, and what the error(s) was (e.g. via error codes).","There are different ways in which multiple functions may be called in an error trace. For example, a. function A( ) may get called, and A( ) in turn calls functions x( ), y( ) and z( ). If x( ), y( ) or z( ) fails, A( ) may record an error trace element for each of the functions. Alternatively, x( ), for example, may record a error trace element, or both A( ) and x( ) may record an error trace element. This may be useful in identifying an error location when A( ) may call x( ) in multiple places in A( ), and A( ) has different execution branches depending on some condition variable. As another example, function A( ) may get called, and A( ) calls x( ), and x( ) in turn calls y( ), and y( ) in turn calls z( ). In this example, any of these functions may record an error trace element.","Note that, in one embodiment, a program may include two or more threads running simultaneously (e.g. threads A and B), and each thread may be recording some or all errors that occur in a thread-specific error trace .","The following is an exemplary API that provides an embodiment of the error trace mechanism, and includes a library code and user code example of using the error trace mechanism provided by the API. This example is from a message queue (MQ) API (e.g. Sun One Message Queue (MQ)), and is written in the C\/C++ programming language, and is not intended to be limiting. Embodiments of the error trace mechanism may be similarly implemented in other APIs, or in other code structures. The following is an exemplary API definition (header file) that includes the error trace mechanism:",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#ifndef ERRORTRACE_H"]},{"entry":[{},"#define ERRORTRACE_H"]},{"entry":[{},"ifdef _cplusplus"]},{"entry":[{},"extern \u201cC\u201d {"]},{"entry":[{},"#endif \/* _cplusplus *\/"]},{"entry":[{},"struct ErrorTrace {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MQBool usable;"]},{"entry":[{},"MQUint32 num_elements;"]},{"entry":[{},"MQUint32 num_allocated;"]},{"entry":[{},"char **trace;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"\/* get the errorTrace *\/"]},{"entry":[{},"MQStatus getErrorTrace (ErrorTrace ** trace);"]},{"entry":[{},"\/* set an element in the ErrorTrace structure. This adds an element to"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"char **trace, an array of error trace elements where each error trace"},{"entry":"element is represented as a string, in the ErrorTrace. Note that"},{"entry":"num_elements is also incremented *\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MQStatus setErrorTraceElement","( const char * method,"]},{"entry":[{},{},"\u2002const char * file,"]},{"entry":[{},{},"\u2002MQInt32 lineNumber,"]},{"entry":[{},{},"\u2002const char * errorType,"]},{"entry":[{},{},"\u2002MQUint32 errorCode);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* clear ErrorTrace; if \u2018all\u2019 is true, clear thread private data as well *\/"]},{"entry":[{},"MQStatus clearErrorTrace (MQBool all);"]},{"entry":[{},"ifdef _cplusplus"]},{"entry":[{},"}"]},{"entry":[{},"#endif \/* _cplusplus *\/"]},{"entry":[{},"#endif \/* ERRORTRACE_H *\/"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In one embodiment, getErrorTrace( ) returns the current thread's current error trace in string format as defined below (or NULL if no error trace is available). In one embodiment, a C\/C++API internal function may decide when or whether to record an error trace element in the error trace in case of an error. In one embodiment, error trace is stored as thread private data.","In one embodiment, the format of an error trace string may be:\n\n","In one embodiment, the caller may be responsible for freeing the returned string (e.g. an MQstring) by calling a function to free the string (e.g. MQFreestring( )). In one embodiment, the current thread's error trace may be automatically cleared on the next C-API method call, and may also be cleared by other function calls (e.g. in an MQCloseConnection( ) call). In one embodiment, the error trace string may be private.","The following is an API library code example function according to one embodiment:",{"@attributes":{"id":"p-0034","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Error A( )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static const char FUNC_NAME[ ] = \u201cA\u201d;"]},{"entry":[{},"Error errorCode;"]},{"entry":[{},"CLEAR_ERROR_TRACE(PR_FALSE);"]},{"entry":[{},"errorCode = b( );"]},{"entry":[{},"....."]},{"entry":[{},"if (errorCode != SUCCESS) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MQ_ERROR_TRACE(FUNC_NAME, errorCode);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"....."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following is a user code example according to one embodiment:",{"@attributes":{"id":"p-0036","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"....."]},{"entry":[{},"\/* call the API function A( ) *\/"]},{"entry":[{},"Error errorCode = A( );"]},{"entry":[{},"\/* check the return status *\/"]},{"entry":[{},"if (errorCode != SUCCESS) {"]},{"entry":[{},"....."]},{"entry":[{},"\/* get the error trace *\/"]},{"entry":[{},"ErrorTrace errorTrace = getErrorTrace( );"]},{"entry":[{},"....."]},{"entry":[{},"\/* process as needed according to the returned errorTrace *\/"]},{"entry":[{},"....."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"....."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following is an example of an error trace output that may be obtained when an exemplary API call (in this example, an API function MQCreateConnection( )) fails:",{"@attributes":{"id":"p-0038","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"connect:..\/ ..\/ ..\/ ..\/src\/share\/cclient\/io\/TCPSocket.cpp:173:mq:2103"},{"entry":"connect:..\/ ..\/ ..\/ ..\/src\/share\/cclient\/io\/TCPSocket.cpp:195:mq:2103"},{"entry":"readBrokerPorts:..\/ ..\/ ..\/ ..\/src\/share\/cclient\/client\/PortMapperClient.cpp:48:mq:2103"},{"entry":"connect:..\/ ..\/ ..\/ ..\/src\/share\/cclient\/client\/protocol\/TCPProtocolHandler.cpp.111:"},{"entry":"connectToBroker:..\/ ..\/ ..\/ ..\/src\/share\/cclient\/client\/Connection.cpp:416:mq:2103"},{"entry":"openConnection:..\/ ..\/ ..\/ ..\/src\/share\/cclient\/client\/Connection.cpp:247:mq:1900"},{"entry":"MQCreateConnection:..\/ ..\/ ..\/ ..\/src\/share\/cclient\/cshim\/iMQConnectoinShim.cpp:120:mq:"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0039","num":"0045"},"figref":"FIG. 3","b":"200"},"As indicated at , after the function completes, the program may determine if the function generated an error. As indicated at , if the function generated an error, the program may obtain an error trace for the function. In one embodiment, the obtained error trace may include one or more error trace elements, and each error trace element includes information describing a particular error generated during execution of the function.","In one embodiment, the function may call a plurality of functions in a function call stack. For each of the plurality of functions, if the particular function generates an error, an error trace element may be added to the error trace.","As indicated at , the error(s) may be debugged using the information in the obtained error trace, if desired. In one embodiment, each error trace element indicates one or more of a location where the particular error of the error trace element occurred, an error type of the particular error, and what the particular error is. In one embodiment, the location of the particular error may include one or more of a function name, a source file name, and a line number where the particular error occurred. In one embodiment, debugging may include determining from the error trace element one or more of a location where the particular error of the error trace element occurred, an error type of the particular error, and what the particular error is.",{"@attributes":{"id":"p-0043","num":"0049"},"figref":"FIG. 4","b":["300","302","304","306","308","310"]},"In one embodiment, calling the library function may result in the call of a plurality of library functions in a function call stack. For each of the plurality of library functions, if the library function generates an error, an error trace element may be added to the error trace.","As indicated at , the error(s) may be debugged using the information in the obtained error trace, if desired. In one embodiment, each error trace element indicates one or more of a location where the particular error of the error trace element occurred, an error type of the particular error, and what the particular error is. In one embodiment, the location of the particular error may include one or more of a function name, a source file name, and a line number where the particular error occurred. In one embodiment, debugging may include determining from the error trace element one or more of a location where the particular error of the error trace element occurred, an error type of the particular error, and what the particular error is.","Various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a carrier medium. Generally speaking, a carrier medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc. as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link.","The various methods as illustrated in the Figures and described herein represent exemplary embodiments of methods. The methods may be implemented in software, hardware, or a combination thereof. The order of method may be changed, and various elements may be added, reordered, combined, omitted, modified, etc.","Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended that the invention embrace all such modifications and changes and, accordingly, the above description to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
