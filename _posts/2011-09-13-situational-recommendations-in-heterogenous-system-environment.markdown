---
title: Situational recommendations in heterogenous system environment
abstract: Situational recommendations in heterogeneous system environment are described herein. An event is received, where the event represents an interaction between an agent and a first resource from a number of resources available at the heterogeneous system environment. At least one impacted situation of a number of situations is determined based on the event. At least one operator from a number of operators is determined to apply on the at least one impacted situation. The at least one operator updates the at least one impacted situation. Recommendation of a second resource from the number of resources is generated based on the updated situation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08863153&OS=08863153&RS=08863153
owner: SAP SE
number: 08863153
owner_city: Walldorf
owner_country: DE
publication_date: 20110913
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Embodiments of the invention generally relate to the software arts. More specifically, to data recommendations based on contextual information.","Information overload is a well-known issue in information systems. Users are faced with the problem of choosing among many possible resources to determine those likely to satisfy their needs. In many cases, users may be assisted in overcoming the information overload problem by being exposed to relevant data items, information, services, etc. In web environments, such as commercial websites, items of interest are determined and recommended to enable more efficient selection of information. Usually, web sites recommend items such as music, articles, web pages, keyword queries, books, online videos, friends, etc. Recommender systems aim at providing recommendations of relevant data to users to improve and accelerate navigation in a vast space of information resources. A recommender system (RS) would explore items to determine those of interest for a particular user based on the user's preferences and interests. Typically, items similar to those a user preferred in the past are recommended as relevant (e.g., content-based approach) and\/or items that users with similar tastes and preferences liked in the past (e.g., collaborative approach).","RS could be employed to recommend relevant resources to business users to improve their productivity and help them explore relevant available resources. Conventionally, business users interact with different communicating business applications and systems, e.g., Customer Relationship Management (CRM), Enterprise Resource Planning (ERP), Product Lifecycle Management (PLM), etc. Consequently, the recommendation of relevant resources to a business user imposes additional constraints, as opposed to scenarios where a user is limited to a web site within a browser. An example of such constraints is accessing different resources such as documents, processes, applications, structured data, etc., retrieved from various source systems, e.g., CRM, ERP, Human Resources (HR), and Business Intelligence (BI) systems, etc. Usually, such systems impose additional security controls, e.g., restricted access rights to data pertinent to a finance or human resources departments. On contrary, various web resources, e.g., commercial products, video clips, songs, may be freely available and recommended to every user in a web site. Additionally, when a user is interacting with diverse applications, a uniform user profile is rarely shared between the applications. As a result, fragmented or inconsistent data about the user activities and preferences are generated. In many cases, there is a need to recommend heterogeneous resources provided by various computer systems or applications that impose different security controls to a business user.","Various embodiments of systems and methods for situational recommendations in heterogeneous system environment are described herein. According to one aspect, an event is received or generated at a recommender system. The event represents an interaction between an agent and a resource from a number of resources available in the heterogeneous system environment. Based on the event, at least one impacted situation of a number of situations and at least one operator from a number of operators are determined. In another aspect, the operator is applied to update the at least one impacted situation based on the event. In yet another aspect, a recommendation to another resource from the number of resources is generated by the recommender system based on the updated situation.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for situational recommendations in heterogeneous system environment are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","Typically, a business user operates in a heterogeneous system environment such as a corporate network. In one embodiment, a heterogeneous system environment includes integrated systems built on different platforms that may also employ different programming languages. Further, these systems may be distributed across various networks. Such systems may also provide different and heterogeneous resources. For example, resources may be stored in various formats, including, text files, eXtensible Markup Language (XML) files, spreadsheets and a variety of proprietary storage methods, each imposing different data access methods.","A resource may be an entity, physical or abstract, that may be recommended. In an embodiment, a resource refers to an identified object that may be accessed, located or is otherwise available. Further, a resource may be assigned or identified by a Uniform Resource Identifier (URI). For example, resources include, but are not limited to, electronic documents, images, electronic services, computer applications or tools, devices, files, network connections, memory areas, web pages, queries, collections of other resources, etc. From a different perspective, resources may include users, customers, corporations, etc. In an embodiment, examples of abstract resources include, but are not limited to, types of relations (e.g., \u201cparent\u201d or \u201cemployee\u201d), classes, properties or other kind of ontologies or concepts, actions (e.g., \u201copen document\u201d, \u201ccreate report\u201d), etc.","In a heterogeneous system environment, it may be advantageous to enable recommendations of heterogeneous resources available in the environment. For example, depending on the context, a user may receive automatically generated recommendations including references to a customer from a CRM system, an application or tool on a company's Intranet, BI queries, a workflow to follow, other employees or contacts, etc.","In one embodiment, a common representation data model of heterogeneous resources and relations between these resources is implemented. Based on such model, suggestions of heterogeneous resources are enabled. Example of such data model is a graph representation. Often, systems that are part of a heterogeneous system environment implement different security and role-based access to respective data resources. The recommendation process should conform to data security controls enforced by the involved systems.","Usually, the context of a user changes during user's interactions with systems and applications. Context may refer to any information that may be used to characterize the situation of an entity, e.g., location, identity, activity, time information, etc. An entity may be anything considered relevant to the interaction between a user and an application, including, but not limited to, time, place, person, the user and the application themselves, etc. A situation may be a collection of states of entities relevant to an interaction between the user and the computer system environment.","Typically, changes of a user's context results in changes in the user's needs. Further, the degree of relevancy of a data resource to a user may also depend on the current user's context or situation. Therefore, information relevancy also changes based on the new context. In one embodiment, more effective and tailored suggestions are enabled by utilizing contextual information into the recommendation process. In one embodiment, a RS may dynamically adapt to current user's actions and enable timely and personalized recommendations. The reverse case is possible; a user's needs affect the user's context.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","105"]},"In one embodiment, situation tuples (S,P,O), may be extended to include additional metadata \u201cM\u201d, e.g., specifying temporal restrictions, privacy settings, level of confidence, accuracy, etc. In such a case, a situation statement may be expressed by one or more tuples (S,P,O,M), where\n\nM=(origin, t, l, s, c).\n\nIn this equation, \u201ct\u201d is a timestamp indicating when the situation statement was generated; \u201cl\u201d is expected lifetime or validity period of the situation statement; \u201cs\u201d is an ownership and privacy setting indicating who owns the situation statement and whether it is public, private or has custom access authorizations; \u201corigin\u201d indicates which system or user has created the situation statement; and \u201cc\u201d shows the level of confidence or other type of ranking indicating the level of accuracy, quality, completeness, or reliability of the situation. In one embodiment, other types of metadata may be integrated to situation tuples, including another related tuple.\n","Recommender system  is connected to client(s)  via network  and includes situation management platform , graph management platform , and model factory . Model factory  includes data sources for the recommender system . A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further, data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include data source where the data is not tangibly stored or is otherwise ephemeral such as data streams, broadcasted data, and the like. The data sources can include associated data foundations, semantic layers, management systems, security systems, etc.","Model factory  may encompass data sources, including but not limited to, XML files , Resource Description Framework (RDF) files , Ontology Web Language (OWL) files , SQL database , or memory . Data sources of model factory  such as XML , RDF , OWL , SQL , and memory , store raw data of available resources. The model factory  enables storage and retrieval of a number of available heterogeneous resources. In one embodiment, data sources of model factory  may be distributed across one or more source systems that are either internal or external to recommender system , or both. These systems may communicate over public or corporate networks, e.g., network . Examples of external source systems include, but are not limited to, a Lightweight Directory Access Protocol (LDAP), a CRM system, BI platform, social network, etc.","In one embodiment, the data sources - included in model factory  are communicatively coupled to graph management platform . The graph management platform  describes the heterogeneous resources available at data sources - available in model factory . Further, the graph management platform describes existing relations between the resources -, e.g., in a graph-based data model, to enable uniform data representation.","Graph management platform  includes providers - and graph repository . Providers - are added to graph management platform  to connect to one or more corresponding data sources - available in model factory . In one embodiment, each provider - is customized to communicate with respective data source included in model factory . Examples of providers include, but are not limited to, social provider to connect to LDAP; BI provider to define OLAP cubes, dimensions, measures, dependencies, hierarchies of the underlying data; Text Analysis Provider to enable Named Entity Recognition (NER) and facts extraction; etc.","Providers - may specify how to access and retrieve data from the corresponding data sources accessible through model factory . For example, a data source may be a BI data warehouse such as SQL database  and a provider from providers - may specify logic to query or modify data in the BI data warehouse using SQL requests. Similarly, a provider from providers - may be modeled to query RDF files , using SPARQL Protocol and RDF Query Language (SPARQL). SPARQL is used to extract information from RDF files, RDF Site Summary (RSS), and the like.","In one embodiment, providers - connect graph repository  to data sources such as data sources -. As illustrated, exemplary graph repository  includes graph model  and graphs -. In one embodiment, graph model  is a general model of resources available through model factory . The graph model  may include nodes corresponding to or describing resources, and edges to represent relationships between the resources. In one embodiment, graph model  may be implemented as a base schema using Resource Description Framework Schema (RDFS) language. Building and maintaining a complete graph of available resources may be inefficient or infeasible, e.g., due to performance reasons, computational costs, technical limitations, etc. Additional graphs, such as graphs -, may be added to graph repository  on a per-need basis by extending graph model .","In one embodiment, graph model  serves as a base model that may be further extended by providers -. Each provider - may register at graph repository  to retrieve and extend graph model  with specific nodes and relations defining corresponding graphs -, respectively. Each provider - may connect to a corresponding data source from model factory  to retrieve available resources provided by the respective data sources -. Providers - may populate the retrieved resources to their corresponding graphs -.","In one embodiment, each graph - is built based on graph model  by at least one corresponding provider from providers -. Graphs - may be implemented as extended schemas of the schema of graph model . Graphs - may further include specific nodes and edges defined in accordance with respective data sources -. In one embodiment, each graph - is specific to a particular data source available in model factory  and is built upon graph model  to model and represent resources provided by the corresponding data source.","The nodes and edges of graphs - may represent resources and relations between these resources, accordingly. In one embodiment, one or more nodes and edges of graphs - correspond to resources provided in model factory  that are identified by URIs. The complete graph of graph repository  is defined by merging the schema of graph model  with extended schemas of graphs - that are build by their respective providers -. Therefore, graph repository  may be described as an aggregation of several partial graphs -.","In one embodiment, graph management platform  maintains graph models to enable uniform representation of heterogeneous data resources and relations between the data resources available in model factory . Furthermore, model factory  may be extended by adding new data sources. Based on these new data sources, new providers may be built and added to graph management platform  to retrieve data resources available through the new data sources.","Situation management platform  manages users' situations occurring during the interactions between client(s)  and recommender system . Client(s)  may be one or more entities, including users and client applications, operable to generate events dispatched to recommender system  via network . An event may refer to an interaction between at least two data resources and may be described as a specific type of situation statement, where the interaction is represented by the relation between the resources. For example, interactions between users and other available resources, such as \u201cMaggie reading document1\u201d, \u201cJohn has meeting with Maggie\u201d, etc., define corresponding events. In one embodiment, events may be time-dependent situation statements that are valid for a given period of time, as opposite to other situation statements that describe static relations between resources. An event may be either external to recommender system , e.g. dispatched to recommender system  by client(s) , or internally raised within recommender system .","Situation management platform  includes event handler , operators manager  and situations manager . Situation management platform  receives events for processing. In one embodiment, the processing of an event may result in long running operations. Therefore, event handler  adds the received events to queue  to be prioritized and processed asynchronously.","Situations manager  monitors situations of entities that are relevant to events received or generated at recommender system . In one embodiment, a situation is collection of related situation statements or tuples. Situation graphs - represent monitored situations in the form of a graph. A situation graph can be defined as a collection of valid situation statements that are represented in the form of a graph. In one embodiment, a situation graph represents a user's situation at a certain point in time. An example of situation graph of a user is illustrated in . In one embodiment, the collection of situation statements or tuples, that constitute a situation, are arranged in situation graphs. For example, the subject \u201cS\u201d and the object \u201cO\u201d of a tuple may be represented as nodes and the predicate \u201cP\u201d may be represented as an edge between the nodes of \u201cP\u201d and \u201cO\u201d.","In one embodiment, as an event is dispatched to or otherwise detected by recommender system , situation manager  starts to monitor situations impacted by the event. Initially, impacted situations may be situations of the subject \u201cS\u201d and\/or the object \u201cO\u201d. For example, in one embodiment, once a user authenticates to recommender system , situations manager  retrieves a list of relevant to the user situation statements, where these situation statements constitute the user's current situation graph. Thus, the user's situation is loaded to situations manager . When recommender system  starts to monitor the situation of a user or an agent, e.g. when an event concerning this user or agent occurs, the agent's situation graph is initialized based on previously stored situations that are still valid. An agent is a resource present in the recommender system  that may generate a situation statement. In one embodiment, the \u201corigin\u201d of a situation statement indicates the agent that has created the statement. Examples of agents include, but are not limited to, providers, users, client applications, operators designed to perform various operations on situations, e.g., updating situations in response to events, etc. In one embodiment, situation manager  keeps graphs of monitored situations, such as situation graphs -, in a cache. In yet another embodiment, situation manager  initialize situation graphs -, on a per-need basis, from situation statements retained in graph repository . Situation graphs may be retrieved at situation manager  by querying graph repository .","Activation rules  are designed to react to specific events and, if certain conditions are met, to trigger additional processing in response to the events. One or more particular rules from activation rules  may be tailored to react to one or more specific events or event types. For example, one rule may be specified to react to events of type \u201ca user is interacting with unstructured document\u201d.","Operators  available in operators manager  are used to manipulate situations by adding, deleting or updating situation statements or tuples. Operators from operators manager  may define any operation that may be applied on graphs from graph repository  or situations graphs monitored in situation manager . An operator is a module that takes as input an event and a situation, and returns the situation updated to reflect the event and\/or information that is generated as a result of the operator's processing. Operators may be used to maintain and perform operations on situation graphs. For example, operators may add, delete or update nodes and\/or edges of situations graphs. In one embodiment, operators may assign values to blank nodes of graph models available in graph repository , based on received events.","Recommendation operator is a special kind of operator. A recommendation operator may add a recommendation situation statement to a situation graph managed by situations manager . For example, a recommendation statement may be \u201cRecommender1 recommend productX\u201d. In one embodiment, based on added recommendation statement, relevant resources are recommended to users. Other types of operators may include, but are not limited to: stemming operator that may reduce words of unstructured documents to their roots so that different grammatical forms are identified of the same words; expiry checker to determine outdated situation statements and to remove them from situation graphs; consistency checker to resolve conflicting situation statements to ensure coherent context, NER operator, etc.","Once, an event from queue  conforms to at least one activation rule from activation rules , it is further determined what operator available in operators manager  applies in response to the interpretation of the event. More than one activation rules from activation rules  may be used to trigger the same operator under different conditions. Thus, reusability of operators already developed is possible.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 2","b":["200","200","210","200","210","210","260","265","210","240","235","210","220","215"]},"One or more recommendations may be provided to an agent in response to an event, where the recommendations are based on the agent's situation.  illustrates process  for recommending a resource to an agent in response to an event, according to one embodiment. The process starts at  with receiving an event. The event represents an interaction between an agent and a resource. In one embodiment, an event may be externally triggered, e.g. sent to recommender system  by client(s)  in . An example of externally triggered event is \u201cMaggie reading document1\u201d. In this example, \u201cMaggie\u201d is an agent that is an external user and \u201cdocument1\u201d is a resource. In yet another embodiment, an event may be internally triggered, e.g., by internal agents of recommender system . An example of internally triggered event is \u201cOperatorX has processed document1\u201d. Accordingly, \u201cOperatorX\u201d is an internal agent program and \u201cdocument1\u201d is a resource.","In one embodiment, events may be described in RDF format. Further, events may conform to a certain model or schema such as graph model  in . Example of the event \u201cMaggie reading document1\u201d implemented in RDF format is the following:",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<rdf:RDF xmlns:gr=\u201c...\/grepo\/1.0#\u201d ...>"]},{"entry":[{},"<rdf:Description rdf:nodeID=\u201cA0\u201d>"]},{"entry":[{},"\u2003<rdf:type rdf:resource=\u201c...\/#Statement\u201d\/>"]},{"entry":[{},"\u2003<gr:subject rdf:resource=\u201c...\/users\/Maggie\u201d\/>"]},{"entry":[{},"\u2003gr:predicate rdf:resource=\u201c...\/predicates\/reading\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<gr:object rdf:resource=\u201c...\/document1\u201d\/>"]},{"entry":[{},"<gr:origin rdf:resource=\u201c...\/EmailClient_Plugin\u201d\/>"]},{"entry":[{},"<gr:priority>2<\/gr:priority>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/rdf:Description>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/rdf:RDF>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Referring back to , in one embodiment, client(s)  send events to recommender system  in response to user's interactions. An example of a method for sending an event is the \u201c\/event POST\u201d method, based on REpresentational State Transfer (REST) services. The \u201c\/event POST\u201d method may describe the event in RDF format. The output of the method may be an URI sent to recommender system , where the URI identifies the event's corresponding situation statement or tuple. Once an event is received, it may be stored in a queue such as queue  in  to be handled asynchronously, in accordance to their priority.","At , at least one impacted situation is determined based on the event. Generally, situations of the subject \u201cS\u201d and the object \u201cO\u201d of the event situation statement are impacted if they are agents, e.g., the user agent \u201cMaggie\u201d in the above described example. At , at least one operator is determined to apply on the current situation graph of the at least one impacted situation. In one embodiment, a set of operators are registered and declared to the situation platform, such as situation management platform  in . At , based on the event, the at least one operator is applied on the current situation graph of the at least one impacted situation. At , the current situation graph of the at least one impacted situation is updated.","In one embodiment, as a result of processed operators, the updated situation graph may connect to situation graphs of other impacted agents. For example, a first user may comment on a document initially created by a second user. Thus, situation graphs of the first and the second user may connect in response to the event and the subsequently processed operators. At , based on the updated situation graph of the at least one impacted situation, another resource is recommended to the agent. For example, the situation graph of the agent may be augmented with the situation statement \u201cdocument2 is recommended to Maggie\u201d. In one embodiment, a link to the recommended \u201cdocument2\u201d may pop up. Thus, based on the situation of a user or other agent, personalized recommendation are enabled and adapted to dynamic behavior of the respective user or other agent. If there are more than one impacted situations, the steps - of process  are performed for each impacted situation.","In one embodiment, the at least one operator is a module that takes the event and the at least one impacted situation as input and, in response to the event, outputs an updated impacted situation. A situation may be updated by adding, updating or deleting situation statements. In one embodiment, the situation graph may be augmented or updated by adding situation statements representing an event such as \u201cMaggie reading document1\u201d. In one embodiment, additional situation statements may be added to the situation graph in response to the processing of operations defined by the at least one operator, e.g. statements generated in response to the execution of a NER operator applied on an unstructured document. In one embodiment, operators may perform specific tasks or operations independently, or operators may be mutually dependent, e.g. an operator may be activated only if another operator has been already processed.  illustrates an exemplary graph of dependencies between operators.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["400","110","410"]},"Consistency checker  is a system operator that checks for ambiguous or conflicting situation statements of a situation to ensure accuracy of the situation. For example, if consistency checker  detects conflicting situation statements in a situation, such as \u201cMaggie has location position1\u201d and \u201cMaggie has location position2\u201d, where \u201cposition1\u201d and \u201cposition2\u201d may be in different cities or are distant. Consistency checker  may be applied to resolve ambiguities. In one embodiment, the confidence attribute \u201cc\u201d of the situation statements may be used to determine the accuracy or reliability of statements, e.g., a more recent situation statement with a higher confidence may be preferred.","Stemmer  is an operator that applies stemming to unstructured resources, such as documents or electronic mails. NER  is an operator that applies named entity recognition to an unstructured resource of a situation to identify atomic elements and classify them into categories such as names, persons, addresses, quantities, etc. Mapping and security operator  maps extracted entities from an unstructured resources of a situation to objects in a data warehouse and authenticates the agent of the situation to the data warehouse. Query recommender  is a recommendation operator that, based on mapped extracted entities from an unstructured resource to objects in a data warehouse, recommends OLAP queries that may be executed over the data warehouse.","In one embodiment, execution of one operator may be contingent upon the outcome of another operator. Mutual dependencies between operators may be declared. For example, in , execution of operators stemmer , NER , mapping and security , query recommender , depends on both expiry checker  and consistency checker . Operator NER  depends on the stemmer  to increase performance of named entity recognition by utilizing the stemming operations executed over an unstructured resource. Entities extracted by NER  are mapped to objects in a data warehouse by operator , thus operator  depends on NER . Query recommender  depends on the objects of the data warehouse to which the extracted entities are mapped to recommend relevant OLAP query based on the objects. In one embodiment, in , a graph of dependencies between operators, such as graph , may be declared to situation management platform .","In one embodiment, dependencies between operators may be implemented by adding corresponding condition to activation rules such as activation rules  in . The dependency between NER  and Stemmer  may be implemented in an activation rule that invokes operator NER  by adding a condition to check whether, for example, a situation statement \u201cStemmer has processed document1\u201d exists.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 5","FIG. 1","FIG. 1"],"b":["500","510","155","110","520","170"]},{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<rule>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<event>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"eventUser:=(SUBJECT HAS_TYPE \u201c...\/#UserAgent\u201d) AND"]},{"entry":[{},"eventDoc:=(OBJECT HAS_TYPE"]},{"entry":[{},"\u201c...\/#UnstructuredDocument\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/event>"]},{"entry":[{},"<condition>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NOT(EXISTS(s,"]},{"entry":[{},"(s.SUBJECT IS \u201c...\/operators\/stemming\u201d)AND"]},{"entry":[{},"(s.PREDICATE IS \u201c...\/predicates\/has_processed\u201d) AND"]},{"entry":[{},"(s.OBJECT IS eventDoc))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2002<\/condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2002<action>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CALL \u201c...\/operators\/stemming\u201d"]},{"entry":[{},"WITH_PARAMS eventDoc"]},{"entry":[{},"\u2002ON_BEHALF_OF eventUser"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<\/action>"},{"entry":"<\/rule>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The above illustrated activation rule is specified to react to events where a user agent is interacting with an unstructured document. For example, such event is \u201cMaggie reading document1\u201d.","The event part of activation rules is used to filter events to which the activation rule reacts and thus trigger additional processing. Thus, event parts of available activation rules are evaluated to determine those rules responding to the received event. At , conditions specified by the at least one applicable activation rule are evaluated. Thus, the condition part of the event is evaluated. For example, such condition is \u201coperatorB can be applied if \u2018operatorA has processed document1\u2019\u201d. Other exemplar conditions are used as execution guards to prevent multiple executions of the same operator in the same situation. Examples of execution guards, include but are not limited to, \u201cNOT(operatorA hasProcessed document1)\u201d, \u201cEXISTS(opA hasProcessed document1)\u201d, etc. In the above illustrated activation rule example, the condition part of the rule is an execution guard that checks whether a stemming operator has already been applied. In one embodiment, conditions may be evaluated by querying graph repository  in . For example, one or more of providers - may translate the condition part of an activation rule from RDF format to a SPARQL query to be executed over respective graphs - in graph repository , or over respective situation graphs - ().","At , one or more applicable operators relevant to the event are determined based on the evaluation of the action part of the at least one activation rule. In the above illustrated example, the activation rule specifies that a stemming operator is relevant to the received event. At , an operator from the determined one or more operators is applied in response to the event, if the conditions specified by the applicable rule are met. In the above illustrated example, if a stemming operator has not been already executed, then it is applied on the unstructured document1. At , the applied operator is added to a trace of executed operators. Thus, in response to an event, the operators applied to a given situation are tracked to prevent multiple execution of same operator. At , a check is performed whether all operators determined at  are applied. If there are any unapplied operators, then the process continues at . Activation rules enable proper application of operators as events are received.","In one embodiment, additional parameters generated as a result of the activation rule evaluation may be passed to invoked operators.","In one embodiment, an activation rule that responds to the received event may not be determined. For example, an activation rule, although configured to react to the received event may be disabled by a user. If no activation rule reacts to the event, then no operator might be triggered and no recommendations would be provided to the user.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 6","FIG. 1"],"b":["600","610","100","620","630","640","148","650","660"]},"In one embodiment, access to resources may be restricted or other security constraints may be imposed by source systems. Therefore, providers may authenticate to respective data sources to enable secure retrieval of data. In one embodiment, client applications such as client(s)  () may derive a user's credentials and enable authentication of the user to recommender system . For example, a method for user authentication to recommender system  may be a \u201cGET\u201d method based on REST services, that takes as input a user's login and password and returns an unique token subsequently used for data retrieval.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 7","b":"700"},"In , situation statements generated in response to the event  are displayed. In this exemplary scenario, event  is an interaction between a user and an unstructured document, e.g., \u201cMaggie read document1\u201d. Window  displays events that are already processed and window  displays events that are queued for subsequent processing. In window , event  is displayed as well as origin  of the event that indicates the source system or application of the event, e.g., \u201cEmailClient_Plugin\u201d. Window  displays related to event  situation statements that are generated as result of processing event . Each situation statement of related statements  is described by attributes -. Attribute  indicates the subject \u201cS\u201d for each situation statement; Attribute  indicates the predicate \u201cP\u201d; Attribute  indicates the object \u201cO\u201d; Attribute  indicates origin metadata \u201co\u201d; Attribute  indicates timestamp metadata \u201ct\u201d; Attribute  indicates confidence metadata \u201cc\u201d.","Text-to-Query operator may use as a data source a BI data warehouse. In the BI data warehouse, multi-dimensional OLAP cubes may be built to define metadata such as measures, dimensions, hierarchies, dependencies, etc. In one embodiment, a specific provider is built to generate and populate a corresponding graph model of the underlying source data, according to process  illustrated in . Example of such graph model may be a graph model declared in graph repository  in . Further, the provider may authenticate to the respective data warehouse to enable secure retrieval of data.","In one embodiment, once event  \u201cMaggie reading document1\u201d is received at or dispatched to the Text-to-Query system, the situation of the user agent \u201cMaggie\u201d is determined, according to process  described in . Further, an activation rule tailored to react to such event is evaluated, according to process  described in . Consequently, based on the rule evaluation, a number of operators are triggered and applied to the retrieved situation of \u201cMaggie\u201d. Examples of operators that may be applied include, but are not limited to, stemming operator such as stemmer , NER such as NER , mapping and security operator such as operator , query recommender such as query recommender  (). Therefore, a stemming operator analyzes the text of \u201cdocument1\u201d to reduce or classify words to their stem or root form. A NER operator is applied to the already stemmed text to extract entities from \u201cdocument1\u201d. A mapping operator maps the extracted entities to business object entities available in the BI data warehouse. As a result, the situation of \u201cMaggie\u201d is augmented with new situation statements such as statements -. The Text-to-Query recommendation operator, based on the extracted and mapped entities, generates relevant BI queries that may be executed over the BI data warehouse. As a result, situation statements are added to \u201cMaggie's\u201d situation that corresponds to the generated BI queries, e.g., statements -. Therefore, based on unstructured text document, relevant BI queries are recommended to a user.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 8","FIG. 7","FIG. 8"],"b":["800","800","810","730","810","820","815","800","760","780","820","760","820","830","825","770","820","840","835","780","820","850","845","800","810"]},"Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components may be implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 9","b":["900","900","905","955","900","940","955","910","915","910","915","905","915","900","925","930","900","925","930","900","935","900","950","950","900","945","900","920","960","960","960","950","960"]},"In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
