---
title: Generating standalone MIDlets from a testing harness
abstract: A testing harness for a design-under-test is modified to include a standalone implementation of an application programming interface used in developing the design-under-test. The standalone implementation is adapted to a target device, and is packaged with an executable application or MIDlet, together with any needed resource files. Either the package, or optionally a JAR and JAD file, is downloaded to a remote user for execution on the target device. Using the application programming interface and the other downloaded files, the remote user can test the target device, analyze the results, and even modify the test conditions without recourse to the testing harness. The arrangement provides a capability for a party who is not privileged to know details of the testing harness to practically evaluate and modify the design-under-test using a standalone testing application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07143310&OS=07143310&RS=07143310
owner: Sun Microsystems Inc.
number: 07143310
owner_city: Palo Alto
owner_country: US
publication_date: 20030122
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","This invention relates to improvements in software and hardware design verification. More particularly, this invention relates to the provision of a standalone verification procedure that can be executed and manipulated by a developer of a software or hardware design, in which the verification procedure was generated by a computer-implemented testing framework that is not available to the developer.","2. Description of the Related Art","The meanings of acronyms and certain terminology used herein are given in Table 1 and Table 2. The terms Sun, Sun Microsystems, Java, JavaCard, J2EE, J2ME, J2SE, and the Sun logo are trademarks or registered trademarks of Sun Microsystems, Inc., in the United States of America and other countries. All other company and product names may be trademarks of their respective companies.",{"@attributes":{"id":"p-0006","num":"0005"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CDC","Connected device configuration. An arrangement"]},{"entry":[{},{},"appropriate for 32-bit architectures requiring"]},{"entry":[{},{},"more than 2 MB of memory. An example of such a"]},{"entry":[{},{},"device is a Net TV box."]},{"entry":[{},"CLDC","Connected, limited device configuration. CLDC is"]},{"entry":[{},{},"suitable for devices with 16\/32-bit RISC\/CISC"]},{"entry":[{},{},"microprocessors\/controllers, having as little as"]},{"entry":[{},{},"160 KB of total memory available."]},{"entry":[{},"J2EE","Java 2 Enterprise Edition"]},{"entry":[{},"J2ME","Java 2 Micro Edition"]},{"entry":[{},"J2SE","Java 2 Standard Edition"]},{"entry":[{},"JavaCard","A Java-based technology that enables Java"]},{"entry":[{},{},"applications to run on smart cards and other"]},{"entry":[{},{},"devices with limited memory."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0007","num":"0006"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"API","Application programming interface"]},{"entry":[{},"JAD","Java application descriptor"]},{"entry":[{},"JAR","Java archive"]},{"entry":[{},"MIDlet","A MIDP application"]},{"entry":[{},"MIDP","Mobile information device profile. A set of Java"]},{"entry":[{},{},"APIs which, together with the CLDC, provides a"]},{"entry":[{},{},"complete J2ME application runtime environment"]},{"entry":[{},{},"targeted at mobile information devices."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Tools have been developed in recent years to aid in the design verification of hardware and software systems, for example software suites, hardware circuitry, and programmable logic designs. In order to assure that the design complies with its specifications, it is common to generate a large number of input or instruction sequences to assure that the design operates as intended under a wide variety of circumstances.","In general, test systems produce a report indicating whether tests have been passed or failed, and, in some cases may even indicate a module that is estimated to be faulty. Where the designer has himself constructed the test generator system, adjustment of the test engine and further analysis of design flaws may be possible. However, in other cases the testing framework and the design are controlled by different parties. For example, the designer may employ the services of a commercial design-testing agency that offers its services to the public. In such cases, proprietary considerations may limit the ability of the testing agency to make details of its test system available to the designer. Consequently, the designer, while aware of a design flaw, may be frustrated in evaluating its root causes, as the report received from the testing agency provides insufficient information.","A specification known as the Mobile Information Device Profile (MIDP) defines a set of Java application programming interfaces that provide an application runtime environment for mobile information devices, such as mobile telephones. The Mobile Information Device Profile is defined in the document, Mobile Information Device Profile (JSR-37), JCP Specification, Java 2 Platform, Micro Edition, 1.0a (Sun Microsystems Inc., Santa Clara, Calif., December 2000).","The Mobile Information Device Profile builds on the Connected Limited Device Configuration (CLDC) of the Java 2 Platform, Micro Edition (J2ME) (available from Sun Microsystems Inc., Santa Clara, Calif.). CLDC and J2ME specifically address the devices used in the vast market, which covers mobile information devices ranging from small devices, such as smart cards or pagers, to powerful set-top boxes. CLDC technology includes a virtual machine, which is a small Java virtual machine that is adapted to the constraints of small mobile information devices. MIDP applications that use the MIDP and CLDC APIs are known as MIDlets.","Mobile information devices are currently a fertile source of new designs. Both the devices themselves and their MIDlets require thorough design verification before release to the purchasing public. The present invention focuses principally on design verification of devices.","The present invention provides a computer-implemented testing framework for computing devices, particularly mobile information devices, and for software designed to run on such devices. A developer submits a computing product under development, typically a computing device or software that is designed to run on the device, for evaluation by a testing and verification center. The center runs a selected battery of test programs on the product while monitoring its behavior, using a general-purpose test facility available at the center for this purpose.","When the test facility discovers a fault in the product, evidenced by failure to exhibit the expected behavior under one of the test programs, it generates a standalone version of the particular test program that the product failed. This standalone version is capable of running on the developer's computing device, independent of the general-purpose test facility. The center downloads the standalone test program to the developer, who can then run it on the computing device in order to observe the deviant behavior of the device or software under development. Such observation will generally lead the developer to a solution of the design flaw that led to the deviant behavior more readily than could be achieved by simply reading an abstract printout of test results.","The use of the generic testing framework according to the invention to generate standalone executable programs, such as MIDlets, provides a convenient and powerful tool for engineering teams, such as software quality engineering teams, to develop and execute test suites for design verification. The generic testing framework is also useful for performance measurements and stress testing of a design.","In general, the details regarding the structure and the operation of the generic testing framework and its intrinsic application programming interfaces are not visible to the designer of a design-under-test. Rather, from the point of view of the designer, the generic testing framework is simply a \u201cblack box\u201d into which the design-under-test is submitted. The invention provides a capability for a remote user or a party who is not privileged to know details of the generic testing framework and its operations to nevertheless evaluate and modify the design-under-test using a standalone testing application. This capability is useful, for example, when the operator of the testing and verification center wishes to keep details of the testing framework and procedures proprietary, or when the level of complication of the general-purpose test facility and the resources that it requires are so great as to make it impractical to duplicate the facility at the developer's premises.","The invention provides a method for testing a computing product, which is carried out by running a battery of test programs in a test facility so as to simulate operation of the computing product, observing that a particular test program in the battery engenders behavior of interest during the simulated operation, and generating a standalone version of the particular test program, which is capable of running on the computing product independently of the test facility.","An additional aspect of the method includes downloading the standalone version to a development facility, and executing the particular test program on the computing product at the development facility using the standalone version.","According to one aspect of the method, executing the particular test program includes presenting an output of the particular test program using a display at the development facility.","According to another aspect of the method, the computing product is a mobile information device, and the display is integrally a part of the mobile information device.","Responsively to the output, the method is further carried out by establishing a modified test condition for the particular test program, and repeating execution of the particular test program using the modified test condition.","In one aspect of the method, the particular test program invokes functions of a development application programming interface. Generating the standalone version is carried out by providing a standalone implementation of the development application programming interface for use by the particular test program, and downloading the particular test program and the standalone implementation of the development application programming interface to the computing product, wherein the computing product is disposed at a second location.","In another aspect of the method, the particular test program includes a plurality of test cases, and the method is further carried out by preparing a properties file that specifies an order of execution of the test cases, downloading the properties file to the computing product, and executing the test cases on the computing product in the order of execution.","In still another aspect of the method, the particular test program includes a plurality of test cases, and the method is further carried out by encoding an order of execution of the test cases in the particular test program, and executing the test cases on the computing product in the order of execution.","In a further aspect of the method, following performance of executing the MIDlet and presenting results thereof, responsively to the results, the method is further carried out by establishing a modified test condition for the MIDlet, and repeating execution of the MIDlet using the modified test condition.","In yet another aspect of the method, the results are presented using the application programming interface.","In still another aspect of the method, following performance of executing the MIDlet and presenting results thereof, responsively to the results, the MIDlet is modified, and the MIDlet then re-executed.","The invention provides a computer software product, including a computer-readable medium in which computer program instructions are stored, which instructions, when read by a computer, cause the computer to perform a method for generating a standalone testing program for a design-under-test. The method is carried out at a first location by running at least a portion of a battery of test programs in a test harness linked to the computer so as to test operation of the design-under-test, the test programs invoking functions of a development application programming interface. The method is further carried out by selecting one of the test programs of the battery, assembling the selected test program as a MIDlet that is adapted to be executed on an information device, providing a standalone implementation of the application programming interface for the MIDlet, wherein the standalone application programming interface is an implementation of the development application programming interface and is adapted to the information device, and downloading the MIDlet and the standalone implementation of the application programming interface to the information device, the information device being disposed at a second location.","In one aspect of the computer software product, the selected test program includes a plurality of test cases, wherein the instructions further cause the computer to further carry out the method at the first location by preparing a properties file that specifies an order of execution of the test cases, and downloading the properties file to the device, wherein the standalone implementation of the application programming interface is adapted to cause the MIDlet to execute the test cases on the device in the order of execution.","In another aspect of the computer software product, following performance of executing the MIDlet, the application programming interface is adapted to cause the device to further carry out the method by displaying results thereof to a user, and responsively to an instruction from the user, establishing a modified test condition for the MIDlet, and repeating execution of the MIDlet using the modified test condition.","According to a further aspect of the computer software product, the application programming interface includes a class that controls an interaction of the MIDlet with a runtime environment thereof.","According to yet another aspect of the computer software product, the class includes a function that returns a description of the one of the test programs.","According to still another aspect of the computer software product, the class includes a function that returns properties of the runtime environment.","According to an additional aspect of the computer software product, the class includes a function for logging error information relating to the one of the test programs.","According to one aspect of the computer software product, the class includes a function that returns a specified property of the one of the test programs.","According to a further aspect of the computer software product, the class includes a function that registers results of a specified case of the one of the test programs.","According to yet another aspect of the computer software product, the class includes a function that suspends execution of the MIDlet for a specified interval.","According to still another aspect of the computer software product, the class includes a function that causes execution of the MIDlet to resume following suspension thereof.","According to one aspect of the computer software product, the class includes a function that returns a current execution mode of the class.","According to another aspect of the computer software product, the class includes a function that displays results of the one of the test programs.","The invention provides a data processing system for generating a standalone test program for an information device, wherein the test program invokes functions of a development application programming interface, the system including a computer readable memory that has a data structure stored therein. The data structure includes a standalone implementation of the application programming interface for executing the test program in a standalone mode of operation, wherein the standalone implementation of the application programming interface is an implementation of a development application programming interface that is adapted to enable the device to execute the test program in the standalone mode of operation, and to present test results to a user.","According to a further aspect of the data processing system, the standalone implementation of the application programming interface includes a class that controls an interaction of the test program with a runtime environment thereof.","According to yet another aspect of the data processing system, the class includes a function that returns a description of a test case of the test program.","According to still another aspect of the data processing system, the class includes a function that returns properties of the runtime environment.","According to an additional aspect of the data processing system, the class includes a function for logging error information relating to the test program.","According to one aspect of the data processing system, the class includes a function that returns a specified property of a test case of the test program.","Another aspect of the data processing system the test program includes a plurality of test cases, and the class includes a function that is invoked during performance of executing the test program, the function returning a status of a specified one of the test cases.","According to a further aspect of the data processing system, the test program includes a plurality of test cases, and the class includes a function that registers results of a specified one of the test cases.","According to yet another aspect of the data processing system, the class includes a function that suspends execution of the test program for a specified interval.","An additional aspect of the data processing system the class includes a function that causes execution of the test program to resume following a suspension thereof.","According to one aspect of the data processing system, the class includes a function that returns a current execution mode of the class.","According to another aspect of the data processing system, the class includes a function that displays results of the test program following execution thereof on the device.","The invention provides a computer-implemented test harness, including a first application programming interface, a test selection module that is accessible via the first application programming interface, a local test execution module for testing a design-under-test responsively to the test selection module, and an application generator adapted to generate an executable program for conducting selected tests on a remote device. The application generator is responsive to the first application programming interface. The selected tests are chosen responsively to results of the local test execution module, and the selected tests invoke functions of a development application programming interface. A persistent storage has a data structure resident therein, the data structure including a second implementation of the development application programming interface, the second implementation of the development application programming interface being an implementation of the development application programming interface that is adapted to the remote device. An order of test execution is obtained for at least one test procedure via the test selection module and the first application programming interface. The computer-implemented test harness further includes a packaging module, adapted to assemble the program and the data structure into a download package for transmission to the remote device. The download package is configured for standalone execution of the program on the remote device according to directions received from a user via the second implementation of the development application programming interface.","According to another aspect of the computer-implemented test harness, the local test execution module includes a simulation unit.","According to still another aspect of the computer-implemented test harness, the local test execution module includes a link to another remote device that is identical to the first remote device.","According to an additional aspect of the computer-implemented test harness, the design-under-test includes software adapted to execute on the remote device.","According to one aspect of the computer-implemented test harness, the design-under-test includes at least a portion of the remote device.","According to a further aspect of the computer-implemented test harness, the download package includes a JAR file.","According to yet another aspect of the computer-implemented test harness, the download package is a zip file.","Still another aspect of the computer-implemented test harness includes a server for a data network that is initially accessible by the remote device, the application generator and the persistent storage being disposed in the server.","According to an additional aspect of the computer-implemented test harness, the second implementation of the development application programming interface includes a class that controls an interaction of the program with a runtime environment thereof.","According to one aspect of the computer-implemented test harness, the class includes a function that returns a description of the test procedure.","According to another aspect of the computer-implemented test harness, the class includes a function that returns properties of the runtime environment.","According to a further aspect of the computer-implemented test harness, the class includes a function for logging error information relating to the test procedure.","According to yet another aspect of the computer-implemented test harness, the class includes a function that returns a specified property of the test procedure.","According to still another aspect of the computer-implemented test harness, the test procedure includes a plurality of cases, and the class includes a function that is invoked while executing the program on the remote device, the function returning a status of a specified one of the cases.","According to an additional aspect of the computer-implemented test harness, the class includes a function that registers results of a specified case of the test procedure.","According to one aspect of the computer-implemented test harness, the class includes a function that suspends execution of the program on the remote device for a specified interval.","According to a further aspect of the computer-implemented test harness, the class includes a function that causes a resumption of execution of the program on the remote device following a suspension thereof.","According to yet another aspect of the computer-implemented test harness, the class includes a function that returns a current execution mode of the class.","According to still another aspect of the computer-implemented test harness, the class includes a function that displays results of the test procedure.","In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent to one skilled in the art, however, that the present invention may be practiced without these specific details. In other instances well-known circuits, control logic, and the details of computer program instructions for conventional algorithms and processes have not been shown in detail in order not to unnecessarily obscure the present invention.","Software programming code, which embodies aspects of the present invention, is typically maintained in permanent storage, such as a computer readable medium. In a client\/server environment, such software programming code may be stored on a client or a server. The software programming code may be embodied on any of a variety of known media for use with a data processing system, This includes, but is not limited to, magnetic and optical storage devices such as disk drives, magnetic tape, compact discs (CD's), digital video discs (DVD's), and computer instruction signals embodied in a transmission medium with or without a carrier wave upon which the signals are modulated. For example, the transmission medium may include a communications network, such as the Internet.","Overview","Reference is now made to , which is a high-level block diagram illustrating a generic testing framework , which is constructed and operative in connection with a disclosed embodiment of the invention. The testing framework  is typically used for evaluating the hardware or software of a mobile information device , but is not limited to such devices. The testing framework  typically includes a computer having conventional facilities, such as persistent storage for holding data objects as are disclosed in further detail hereinbelow. In different embodiments, the testing framework  can be employed to test designs written for different platforms in a standalone mode of operation, for example J2SE or J2EE. Indeed, applications written in any of the platforms listed in Table 1 can be tested with the testing framework . The teachings of the invention herein are not limited to the particular generic testing framework disclosed herein, but may be applied to other testing frameworks that are unrelated to the specific platforms listed in Table 1 by the application of ordinary skill in the art.","The testing framework  is provided with an application programming interface  together with a test harness , which can be executed in a general purpose computer. The test harness  has a test selection unit  that provides a battery of tests, which can be selected using a graphical user interface  (GUI) of the testing framework , using the application programming interface . A test panel extension  of the graphical user interface  accommodates certain specialized functions of the testing framework  relating to standalone MIDlets. The test panel extension  is disclosed in further detail hereinbelow. The application programming interface  provides for common tasks, such as running and stopping tests, and communicating with other elements of the test harness . The testing framework  includes a communications interface , and is capable of external communication.","The tests that are available from the test selection unit  can be influenced by submission of test conditions and parameters via a user input , for example the directory in which the test's source files are located, or a web server used for networking requirements. Typically, the user input  is realized as an input screen of the application programming interface .","In some applications, particularly when hardware is being tested, the test harness  is physically connected to the mobile information device  during the test procedures over links . In some applications in which wireless devices are tested, it may be desirable that the links  be wireless. Alternatively or additionally, the test harness  may operate in a simulation mode, wherein a test MIDlet  executes and accepts program input and produces simulated output using a simulation unit . This mode is typically employed when software for the mobile information device  is being tested. However, the simulation unit  may also be used to simulate the hardware. Typically, a battery of tests, selected using the test selection unit , is executed using the test harness  linked to either the mobile information device  or the simulation unit .","The results of the tests are typically transmitted from the mobile information device  to the test harness  via the communications interface  over the links . A report  of test results is provided by the test harness . In some cases, it may be possible to view the test results directly on a display  of the mobile information device .","Analysis of the battery of tests is then conducted. With the aid of the report , an operator  of the test harness  can determine whether a design-under-test-does not pass a particular test, or that the test yields suspect results. A decision may then be made to provide the particular test for standalone execution to a remote user , who is typically a developer of hardware or software for the mobile information device . Of course, more than one test of the battery may fail, in which case the following procedure is repeated. It should be noted that many different tests can be generated for standalone execution, not merely those that fail. For example, it may be desired to rerun a test that was previously executed successfully in standalone mode after making a modification of the design-under-test.","In order to generate the standalone test program, the test harness , upon receipt of a suitable command via the application programming interface  of the testing framework , is responsible for generating a test MIDlet , or in some cases, retrieving it from storage. The communications interface  can be remotely accessible over a data network, such as the Internet. In any case, the testing framework  is provided with a suitable generator application  for generating the MIDlet , and generally has a run-time support library , which is used by the generator application . The software components disclosed in copending, commonly assigned Application No. (STC File. No. 45437), entitled \u201cExtensible Framework for Code Generation from XML Tags,\u201d are suitable for the generator application  and the library .","Typically the program under test, both in its version as the test MIDlet  and in its standalone version, the MIDlet , was originally developed by an outside developer prior to submission to the testing framework , using a development application programming interface, typically in a remote physical location (not shown). The testing framework  additionally provides a standalone agent , which has an application programming interface implementation . The application programming interface implementation  is an implementation of the development application programming interface that implements those functions of the development application programming interface that are necessary to execute the MIDlet  in the environment of a remote mobile information device  as a standalone application. A specialized packaging mechanism  is also included in the testing framework . Using the packaging mechanism , the standalone agent  is packaged with the MIDlet  a properties file , and other resource files  as a download package . The properties file , typically included in the JAR file, is disclosed in further detail hereinbelow. The resource files  can include graphics, other media files, test class files, and other resources that may be required to execute the MIDlet  in a standalone mode.","If it is determined by the operator  that a test has uncovered a design flaw or is otherwise of interest, then the package  is downloaded or otherwise transferred to the user  who submitted the design-under-test for testing by the testing framework . The physical separation of the user  from the testing framework  is indicated by a dashed line . The user  typically maintains the mobile information device , which is identical to the mobile information device . The user  may also operate other computing facilities , which can also accept downloads via the communications interface . It is to be emphasized that most aspects of the testing framework  are not exposed to the user . In particular, the software of the testing framework  is unavailable to the user , either intentionally for reasons of secrecy, or because it is inconvenient or difficult to set up. In practice, the interaction of the user  with the testing framework  is essentially limited to submission of a portion of the user input , and receipt of the report . In a setting in which the testing framework  is controlled by a party other than the user , the ability of the user  to interactively vary the user input  and to modify the generation of the MIDlet  is somewhat limited. In a current implementation, the test input is taken from the properties file , which can be prepared, at least in part by the user . In this way, the user  is able to vary the test input, just as can the operator  of the testing framework . In other implementations, this may not be the case. Those portions of the testing framework  that are not directly exposed to the user  are enclosed by a dotted line .","The communications interface  is accessible to the mobile information device  via a link , which can be a wireless link, and additionally or alternatively may involve the Internet. The communications interface  starts listening on a predetermined port for incoming requests for the MIDlet . The user  activates the mobile information device , and the link  so as to direct the mobile information device  to a URL that corresponds to the port on which the communications interface  is listening, and from which the MIDlet  can be downloaded.","The standalone agent  is downloaded as part of the package  with each test that is transferred over the link  to the MIDP environment of the mobile information device , which, as explained above, is controlled by the user , rather than the proprietor of the testing framework . The standalone agent  is totally independent of the testing framework  and its communications interface . In contrast, when testing the design-under-test using an analogous agent in the testing framework , such communication is required.","In other embodiments, the package  may be downloaded to the computing facilities  over a link , and the MIDlet  relayed by the computing facilities  to the mobile information device  via a link . After execution on the mobile information device , the user  can then analyze the test results, and can often adjust test conditions or parameters without use of the testing framework . It is to be emphasized that in such embodiments there is no reliance on communication between the testing framework  and the computing facilities  or the mobile information device  during execution of the MIDlet . The MIDlet  is a fully standalone application.","General Method of Operation","Reference is now made to , which is a flow chart illustrating a computer-implemented method of generating standalone MIDlets using a testing harness to evaluate a design-under-test that is operative in accordance with a disclosed embodiment of the invention. The sequence shown in  is exemplary, and the steps may be performed in different orders, so as to achieve an efficient implementation on a particular computer system. In initial step  a mobile information device situated at the site of the test harness is connected to the test harness, and is configured to execute a test MIDlet for purposes of testing the MIDlet or the device. In some applications, it may be desirable to represent the mobile information device in an emulator rather than test an actual mobile information device.","Next, at step , a member of a group of tests that are available in the generic testing framework is selected. In step , the operator of the test harness makes a determination whether a particular test of the group is suitable for testing the mobile information device. If so, the test is added to a list of tests that are intended to evaluate the mobile information device or software intended to run on the mobile information device.","Next, at decision step  a determination is made whether more tests from the group of tests remain to be evaluated. If the determination at decision step  is affirmative, then control returns to step .","If the determination at decision step  is negative, then control proceeds to decision step , where it is determined whether execution of a test from the group of tests is required. In some cases, a standalone MIDlet is generated regardless of the outcome of the test, and it may not be necessary to actually run the test.","If the determination at decision step  is negative, then control proceeds to decision step , which is disclosed below.","If the determination at decision step  is affirmative, then control proceeds to step , where the test evaluated in decision step  is flagged for execution. Control proceeds to decision step .","In decision step , it is determined if more tests need to be evaluated. If the determination at decision step  is affirmative, then control returns to decision step .","If the determination at decision step  is negative, then control proceeds to step .","At step  the selected tests that were flagged for execution in step  are actually run.","Next, at step , one of the tests from the battery is selected for result analysis.","Next, at decision step , a determination is made whether the test that was selected at step  revealed a flaw in the design-under-test, or has met other criteria for generation of a standalone MIDlet. In some implementations it may be required to generate a set of standalone MIDlets regardless of the outcome of the test in step . If the determination at decision step  is negative, then control proceeds to decision step , which is disclosed below.","If the determination at decision step  is affirmative, then control proceeds to step . A standalone MIDlet incorporating the failed test is generated or retrieved from storage.","Next, at step  other resource files necessary for the MIDlet generated in step  are assembled. These resources may include test class files, graphics, HTML files, and multi-media resources.","Next, at step  a properties file is produced. The properties file specifies the order in which the different cases of the test analyzed in step  are to be run. Other information necessary to execute the test cases in accordance with the intent of the user, for example test parameters, may be included in the properties file. The information in the properties file is implementation dependent. For example, the properties file may specify environment variables, such as the URL of a server used for networking tests.","Next, at step  a standalone agent that implements the application programming interface is associated with the properties file that was prepared in step , the resources that were assembled in step , and the MIDlet that was obtained in step . The user can repeat the test that was analyzed in step  by executing the MIDlet on the mobile information device without interaction with the generic testing framework.","Next, at step  archive files are collected into a download package. In some embodiments, the archive file may be further compressed prior to delivery to the mobile information device.","Control now proceeds to step . The download package that was assembled in step  is transmitted to a remote party.","At decision step  a determination is made whether there are more test results remaining to be analyzed. If the determination at decision step  is affirmative, then control returns to step .","If the determination at decision step  is negative, then control proceeds to final step , and the process ends.","Reference is now made to , which is a flow chart illustrating a method of processing the download package that was transmitted in step  () by a remote party, such as a developer. The description of  should be read in conjunction with . The process begins at initial step . Here the remote party prepares a device for receiving the download package. The device can be the mobile information device for which the download package is adapted, or it can be a separate computer facility that can relay the download package to the target mobile information device, or in some applications, execute the downloaded MIDlet using simulation. Then, at step , the download package is received and installed on the mobile information device.","Next, at step  the MIDlet that was included in the download of step  is activated on the mobile information device using the standard mechanism for activation of MIDlets on the device.","Next, at step , the cases of the test analyzed in step  () are executed in the order specified in the properties file that was prepared in step . Alternatively, the order of test execution may be determined by the user, or specified in the test code. Results are accumulated and organized.","Next, at step  the test results are presented to the remote party, generally on a display of the mobile information device. In some cases, the mobile information device can be emulated by a computing facility operated by the remote party. In any case, the results need not be uploaded to the generic testing framework.","Control now proceeds to decision step , where a determination is made whether the test requires modification. If the determination at decision step  is negative, then control proceeds to decision step . If the determination at decision step  is affirmative, then control proceeds to step , which is disclosed below.","At decision step  a determination is made whether more test cases remain to be evaluated. This is done with reference to the properties file that was prepared in step  (). If the determination at decision step  is affirmative, then control returns to step .","If the determination at decision step  is negative, then control proceeds to final step , and the process ends.","Step  is performed if the determination at decision step  is negative. Here, using the standalone application programming interface, the user appropriately modifies test parameters, or changes the order of the test cases. In various implementations, these modifications can be either modifications of the test source code, such as Java source files, or modifications of the properties file. If the test framework allows changes in the order of tests within a particular MIDlet, the user may be able to conveniently change the test order by editing the properties file. But in situations where the user cannot change the test order, for example, because it is determined in the source code, then he would have to edit the source code in order to change the test order. Alternatively or additionally, the user may modify the hardware under test. Modification of the software is also possible in those embodiments in which appropriate source code is included in the archive file. Control then returns to step  and the standalone MIDlet is rerun in order to determine whether the modification has rectified the problem that previously caused the test failure.","API Implementations","Reference is now made to , which is a class diagram illustrating details of a class Runner . The description of  should be read in conjunction with . The application programming interface implementation  () includes the class Runner , which is an API class that is provided for the use of the test writer. The class Runner  is a feature of the particular embodiment disclosed herein, and it is possible to practice the invention by providing the functionality of the class Runner  in different ways, as are known in the art of software development. The class Runner  handles the test's interaction with its run-time environment, and is responsible for controlling test execution, for example dealing with pause and resume events. The class Runner is also responsible for generating information, such as debug information, and reports. The methods of the class Runner  that are invoked by the test MIDlet  () when testing is conducted using the test harness  sometimes differ in their implementations from corresponding methods that are invoked by the MIDlet , because the standalone agent  operates under different constraints and conditions in standalone mode than the test harness . These differences are disclosed in further detail hereinbelow. The methods of the class Runner  are modifiable according to the requirements of a particular test harness.","Among the functions or methods provided in the class Runner  is a method showTestDescription( ) , which returns a description of a current test. This is necessary when the test is interactive, as the tester must be informed how to run the test and what results to expect. A HTML file specified by a parameter descriptionFile  contains the description and instructions for running each interactive test.","When invoked by the test MIDlet  operating within the testing framework  () the method showTestDescription( )  is implemented such that a connection is opened to the communications interface . A request is then submitted by an agent executing on the mobile information device  to the test harness  for the file specified by the parameter descriptionFile  to be displayed. The test harness  opens a separate window on a display (not shown) in which to actually display the file. This version of the method showTestDescription( )  is represented by the pseudocode fragment of Listing 1.",{"@attributes":{"id":"p-0123","num":"0122"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void showTestDescription( )"]},{"entry":[{},"{"]},{"entry":[{},"\u2003String testName =. . . \/\/ get current test name"]},{"entry":[{},"\u2003\/\/ open connection to server"]},{"entry":[{},"\u2003\/\/ use the agreed client-server protocol to"]},{"entry":[{},"\u2003\/\/ instruct the server to display the description"]},{"entry":[{},"\u2003\/\/ file for test testName"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"When the method showTestDescription( )  is invoked by the MIDlet  () operating in a standalone mode, the test harness  is not running. The user is responsible for opening the archive file of the package  finding and viewing the HTML test descriptor file, using a standard web browser. In this case the code for the method showTestDescription( )  is empty, as shown in Listing 2.",{"@attributes":{"id":"p-0125","num":"0124"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void showTestDescription( )"]},{"entry":[{},"{"]},{"entry":[{},"\u2003return;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":"The class Runner  is provided with other methods to facilitate its operation. A method getAgentProperty( )  retrieves the value of a property of the standalone agent  () including the runtime environment. The value of the agent property is typically returned as a string. However, many other data types could be returned in different embodiments of the method getAgentProperty( ) ."}}}},"A method verbose( )  is provided for writing log and debug messages to a test log. It is generally invoked during the current test to write a test message into the test log, which may be integrated into the report  (), or presented on the computing facilities  at the conclusion of the current test. The detail of such messages is specified by a parameter verboseLevel . In the case where the method verbose( )  is invoked by the MIDlet , the verbosity parameter is set during packaging by the generator application . Messages can also be printed to a display  of the mobile information device , or written to a log file if the mobile information device  allows it. The method verbose( )  returns the value True if the current test case has been selected for execution, and returns the value False otherwise.","A method getProperty( )  enables retrieval of a property specified for the current test. A parameter key  specifies the name of the desired test property. The value of the test property is returned as a string. When the testing framework  () is in use, the method getProperty( )  opens a connection to the communications interface  and retrieves a value from the testing framework . When used with the standalone agent  the method getProperty( )  retrieves the value from the properties file .","A method getRunner( )  is a static method, which is used to obtain a reference to the class Runner . Only one instance of the class Runner  exists at runtime. Once the method getRunner( )  returns the reference, it can be used to invoke methods of the class Runner .","There are several methods in the class Runner  that perform functions of an administrative nature, and are not generally invoked by executing tests. A method setAgentManager( )  sets a reference to the standalone agent  (), as specified by a parameter am . A method setCurrentTest( )  sets a current Test reference for the class Runner , as specified by a parameter test . A method initialize( )  causes the class Runner  to reinitialize its internal structure.","A method getRunnerExtender( )  returns an extender object which is used to obtain references to various classes of the standalone agent .","A method isSelected( )  enables a test to inquire about the status of a particular test case, specified by a parameter testCase . This is useful when a test class has more then one test case, in order to determine which test cases have been selected for execution. Test selection is usually done by the packaging mechanism  (). The method isSelected( )  returns the value True if this specified test case has been selected for execution, and returns the value False otherwise.","A method reportCaseTestResult( )  enables a current test to register a test result based on a test case specified by a parameter caseName . The test result is specified by a string result  in the parameter list of the method reportCaseTestResult( ) .","A method resumeTestExecution( )  causes the resumption of test execution after user feedback has been received.","In some embodiments two execution modes may be supported. A test mode involves standard execution of tests. A performance mode measures the execution time of the test and includes this information in the results report. The current embodiment only provides the test mode. However, the following two methods have been implemented, in order that the performance mode can readily be implemented as well. A method setMode( )  defines an execution mode according to a parameter runnerMode , which is used to select either the test mode or the performance mode. A method getMode( )  returns the current execution mode of the class Runner .","A method pause( )  causes execution of the current test to pause for an interval, measured in milliseconds, as specified by a parameter milliseconds . The method pause( )  can be invoked from within the test program.","A method suspendTestExecution( )  causes suspension of test execution in order to obtain user feedback or to await system events. The method suspendTestExecution( )  is particularly useful in interactive tests, in which user validation of results may be required. A parameter timeout  specifies a maximum interval during which the test is to be suspended.","In the testing framework  (), a conventional mechanism is provided for communication between the mobile information device  or the simulation unit , and the test harness . This is typically implemented as a Java class. A method reportTestResults( ) included in this class reports the results of a test that was run from the test harness . The implementation of the method reportTestResults( ) for the testing framework  is represented by the pseudocode fragment shown in Listing 3.",{"@attributes":{"id":"p-0138","num":"0138"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void reportTestResult(Test currentTest)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003String testName = currentTest.getTestName( );"]},{"entry":[{},"\u2003String testResult = currentTest.getTestResult( );"]},{"entry":[{},"\u2003\/\/ open connection to server"]},{"entry":[{},"\u2003\/\/ send to server testName, testResult"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the testing framework  (), the test result is displayed to the operator of the test harness . When the test executes in standalone mode at the remote site of the user , it is displayed on the display . If the test is running in an emulation environment, the method reportTestResults( ) can simply print the results in the emulation environment. The method reportTestResults( ) is shown in a pseudocode fragment in Listing 4 according to one implementation in the testing framework .",{"@attributes":{"id":"p-0140","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void reportTestResult(Test currentTest)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003String testName = currentTest.getTestName( );"]},{"entry":[{},"\u2003String testResult = currentTest.getTestResult( );"]},{"entry":[{},"\u2003System.out.println(\u201cTest:\u201d + testName +"]},{"entry":[{},"\u2003\u201c,result:\u201d + result);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Another implementation of the method reportTestResults( ) is shown in a pseudocode fragment in Listing 5. This implementation is suitable for tests being executed on the mobile information device . The test results appear on the display .",{"@attributes":{"id":"p-0142","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void reportTestResult(Test currentTest)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003String testName = currentTest.getTestName( );"]},{"entry":[{},"\u2003String testResult = currentTest.getTestResult( );"]},{"entry":[{},"\u2003\/\/ create a new TextBox on the screen and display"]},{"entry":[{},"\u2003\/\/the result in it"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Referring again to , the properties file  that is included in the package  includes instructions regarding the order of execution of a test by the mobile information device . Using the information in the properties file , the mobile information device  can execute the MIDlet  so as to emulate the test as it was performed using the mobile information device  and the test harness . The information is read from the properties file  during MIDlet execution. The JAR file that is downloaded to the client may contain multiple test cases. Communications differences between the execution of the test on the testing framework  and execution of the same test in standalone mode using the mobile information device  are now contrasted.","In the case of the testing framework , the test harness  is running and available for queries. An agent (not shown) running on the client side during test execution queries the test harness  via the communications interface  over the links . A response returned from the communications interface  via the links  to the mobile information device  specifies which test to run next.","In the case of standalone execution, the test harness  is not available to the mobile information device  during test execution. The standalone agent , which is executing on the mobile information device , nevertheless needs to know the order in which cases of the test will be run, the test parameters to be used, and other resources to be accessed. To deal with this issue, when the MIDlet  and other elements of the package  are generated and configured to execute in standalone mode, the generator application  adds the properties file  to the JAR file that contains the tests. The order in which the tests should be run is specified in the properties file . The standalone agent  then reads the properties file  in order to know which test to run.","Harness User Interface Extension","Continuing to refer to , the test panel extension  is provided in the test harness  in order to assist in selecting the tests to be carried out by the harness, as well as in preparing the standalone package . The test panel extension  can be realized by the addition of a test selector and a command button on a screen of the graphical user interface . When it has been determined to select a test for standalone operation, pressing the command button results in the generation of a compressed data archive, such as a zip file that contains JAR and JAD files, source files and other necessary resource files, including the properties file .","Packaging Mechanism","Continuing to refer to , the package  contains resource files  in addition to the MIDlet , as disclosed hereinabove. The packaging mechanism  assembles a modified JAR file as disclosed hereinabove. The packaging mechanism  is responsible for locating and packaging all the files that constitute the package  in a single zip file, including the JAR, JAD and other relevant files. Typically, a single zip file is created for each individual test of in a test battery. However, it is possible to implement the packaging process so that multiple tests are packaged in each JAR\/JAD file. In still other more sophisticated implementations, the user  may choose between different compositions of the package .","Operation","The disclosure of the operation of the testing framework  should be read in conjunction with . Reference is initially made to , which illustrates a computer screen display  that is generated by the testing framework . A pane  at the left of the screen display  presents a selection of test procedures, arranged as a hierarchical tree. The user may make a selection of the test procedures to be executed on the mobile information device  using the pane . A pane  presents a tabbed multipage control, which represents the environment settings of the screen display . Manipulation of the multipage control in the pane  allows the user to configure various test parameters, for instance, the directory in which the tests sources are located, and the web server used for networking tests. Test procedure selection is done by checking and unchecking the text boxes located beside the test\/package name. In the example of , a text box  is checked, indicating that a test procedure \u201cstress\u201d is to be performed.","To enable test procedures to be run using the testing framework  (), the operator  clicks on a play button  at the top of the screen display . This signals the testing framework  to start generating JAR files containing the test class files and assembling the other resources required for test execution. The testing framework  also starts listening for incoming requests for the MIDlet , using the communications interface . The operator  then has to activate the client, i.e., the platform on which the tests are run, which is the mobile information device . The operator  activates the wireless environment of the mobile information device  and directs the mobile information device  to the URL from which the tests can be downloaded. This is the same URL at which a thread of the testing framework  is listening for incoming requests.","Reference is now made to , which illustrates another computer screen display  that is generated by the testing framework  (). The screen display  presents the results of the test cases as a tabbed multipage control . On the screen display , the operator of the test harness  can see how many test procedures were run and what their status is (passed\/failed\/not run etc.). A tab  on the multipage control  directs the user to a page 200, which lists the tests that were run. A tab  directs the user to a page (not shown), which lists those test procedures that were passed.","It will be appreciated by persons skilled in the art that the present invention is not limited to what has been particularly shown and described hereinabove. Rather, the scope of the present invention includes both combinations and sub-combinations of the various features described hereinabove, as well as variations and modifications thereof that are not in the prior art which would occur to persons skilled in the art upon reading the foregoing description."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a better understanding of these and other objects of the present invention, reference is made to the detailed description of the invention, by way of example, which is to be read in conjunction with the following drawings, wherein:",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 2A","FIG. 2B","FIG. 2"]},{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 6","FIG. 5"]}]},"DETDESC":[{},{}]}
