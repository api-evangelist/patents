---
title: Reviewing cached user-group information in connection with issuing a digital rights management (DRM) license for content
abstract: A computer network has storage devices organized into X levels and storing element-group information. To determine whether an element is a member of any target groups, each target group is validated by searching the storage devices to find a target group item and, if found, placing the target group in a validated target bin (V). Also, the element is validated by searching the storage devices to find an element item, and if found, determining from the item all groups that the element is listed as being a member of and placing such member-of groups in a search bin (S). If (S) intersects (V), the element is a member of a target group. If not, all groups in (S) are moved to a queue (Q) corresponding to the storage device at level  and an iterative process searches for a membership path from the element to any target group.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06990502&OS=06990502&RS=06990502
owner: Microsoft Corporation
number: 06990502
owner_city: Redmond
owner_country: US
publication_date: 20030226
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","CONCLUSION"],"p":["The following U.S. Patent Applications disclose subject matter that is related to the subject matter of the present application, and are hereby incorporated herein by reference in their entirety:","U.S. patent application Ser. No. 10\/185,527, filed Jun. 28, 2002 and entitled \u201cObtaining a Signed Rights Label (SRL) for Digital Content and Obtaining a Digital License Corresponding to the Content Based on the SRL in a Digital Rights Management System\u201d;","U.S. patent application Ser. No. 10\/185,278, filed Jun. 28, 2002 and entitled \u201cUsing a Rights Template to Obtain a Signed Rights Label (SRL) for Digital Content in a Digital Rights Management System\u201d;","U.S. patent application Ser. No. 10\/185,511, filed Jun. 28, 2002 and entitled \u201cSystems And Methods For Issuing Usage Licenses For Digital Content And Services\u201d;","U.S. patent application Ser. No. 10\/364,627,filed Feb. 11, 2003 and entitled \u201cPublishing Digital Content Within an Organization in Accordance with a Digital Rights Management (DRM) System\u201d;","U.S. patent application Ser. No. 10\/346,115, filed Feb. 11, 2003 and entitled \u201cPublishing Digital Content Within an Organization in Accordance with a Digital Rights Management (DRM) System\u201d; and","U.S. patent application Ser. No. 10\/374,321, filed concurrently with the present application and entitled \u201cIssuing a Digital Rights Management (DRM) License for Content Based on Cross-Forest Directory Information\u201d.","This invention relates to a digital rights management (DRM) system. More particularly, the invention relates to employing a DRM system to publish digital content in an organization such as an office or corporation or the like such that rendering and use of the content within the organization may be constrained according to corresponding use or license terms. Even more particularly, the present invention relates to issuing a digital license for corresponding digital content based at least in part on cached group information.","Digital rights management and enforcement is highly desirable in connection with digital content such as digital audio, digital video, digital text, digital data, digital multimedia, etc., where such digital content is to be distributed to one or more users. Digital content could be static, such as a text document, for example, or it could be streamed, such as the streamed audio\/video of a live event. Typical modes of distribution include tangible devices such as a magnetic (floppy) disk, a magnetic tape, an optical (compact) disk (CD), etc., and intangible media such as an electronic bulletin board, an electronic network, the Internet, etc. Upon being received by the user, such user renders or \u2018plays\u2019 the digital content with the aid of an appropriate rendering device such as a media player on a personal computer or the like.","In one scenario, a content owner or rights-owner such as an author, a publisher, a broadcaster, etc., wishes to distribute such digital content to each of many users or recipients in exchange for a license fee or some other consideration. In such scenario, then, the content may be a song, an album of songs, a movie, etc., and the purpose of the distribution is to generate the license fees. Such content owner, given the choice, would likely wish to restrict what the user can do with such distributed digital content. For example, the content owner would like to restrict the user from copying and re-distributing such content to a second user, at least in a manner that denies the content owner a license fee from such second user.","In addition, the content owner may wish to provide the user with the flexibility to purchase different types of use licenses at different license fees, while at the same time holding the user to the terms of whatever type of license is in fact purchased. For example, the content owner may wish to allow distributed digital content to be played only a limited number of times, only for a certain total time, only on a certain type of machine, only on a certain type of media player, only by a certain type of user, etc.","In another scenario, a content developer, such as an employee in or member of an organization, wishes to distribute such digital content to one or more other employees or members in the organization or to other individuals outside the organization, but would like to keep others from rendering the content. Here, the distribution of the content is more akin to organization-based content sharing in a confidential or restricted manner, as opposed to broad-based distribution in exchange for a license fee or some other consideration.","In such scenario, then, the content may be a document presentation, spreadsheet, database, email, or the like, such as may be exchanged within an office setting, and the content developer may wish to ensure that the content stays within the organization or office setting and is not rendered by non-authorized individuals, such as for example competitors or adversaries. Again, such content developer wishes to restrict what a recipient can do with such distributed digital content. For example, the content owner would like to restrict the user from copying and re-distributing such content to a second user, at least in a manner that exposes the content outside the bounds of individuals who should be allowed to render the content.","In addition, the content developer may wish to provide various recipients with different levels of rendering rights. For example, the content developer may wish to allow protected digital content to be viewable and not printable with respect to one class of individual, and viewable and printable with respect to another class of individual.","However, and in either scenario, after distribution has occurred, such content owner\/developer has very little if any control over the digital content. This is especially problematic in view of the fact that practically every personal computer includes the software and hardware necessary to make an exact digital copy of such digital content, and to download such exact digital copy to a write-able magnetic or optical disk, or to send such exact digital copy over a network such as the Internet to any destination.","Of course, as part of a transaction wherein the content is distributed, the content owner\/developer may require the user\/recipient of the digital content to promise not to re-distribute such digital content in an unwelcome manner. However, such a promise is easily made and easily broken. A content owner\/developer may attempt to prevent such re-distribution through any of several known security devices, usually involving encryption and decryption. However, there is likely very little that prevents a mildly determined user from decrypting encrypted digital content, saving such digital content in an un-encrypted form, and then re-distributing same.","A need exists, then, for providing a digital rights management (DRM) and enforcement architecture and method that allows the controlled rendering or playing of arbitrary forms of digital content, where such control is flexible and definable by the content owner\/developer of such digital content. More specifically, a need exists for such an architecture that allows and facilitates such controlled rendering, especially in an office or organization environment or the like where documents are to be shared amongst a defined group of individuals or classes of individuals. Even more specifically, a need exists for such an architecture that allows content to be licensed to a user based on the user being a member of a group, where such group membership is determined at least in part based on cached group information.","The aforementioned needs are satisfied at least in part by the present invention in which it is determined whether an element within an organization is a member of one or more target groups pre-defined within the organization. The organization maintains a computer network comprising a plurality of storage devices organized into X levels and storing element-group information. The storage devices include a directory at a higher, more-costly level X and at least one cache. Each cache is at a lower, less-costly level below X and includes at least a portion of the element-group information in the directory. The levels  to X correspond to least-costly to most-costly.","In the method, each target group is validated by searching the levels of storage devices to find an item for the target group and, if the target group is found, placing the target group in a validated target bin (V). In addition, the element is validated by searching the levels of storage devices to find an item for the element, and if the item for the element is found, determining from the item all groups that the element is listed as being a member of and placing such member-of groups in a search bin (S).","Thereafter, it is firstly determined whether any group in (S) matches any group in (V). If so, it is concluded that the element is a member of a target group. If not, the method continues by moving all groups in (S) to a queue (Q) corresponding to the storage device at level  and performing an iterative process to search for a membership path from the element to any target group.","The iterative process comprises, for each level x from  to X, secondly determining whether a queue (Qx) corresponding to the level is empty. If empty, the level is incremented and processing returns to the secondly determining step if x<X or concludes that the element is not a member of any target group if x=X. If not empty, a group is removed from (Qx) and it is determined whether the removed group is already in a discard bin (D).","If in (D), processing returns to the secondly determining step. If not in (D), the process searches for an item corresponding to the removed group in the storage device corresponding to the level. If no such item is found from the search, the removed group is moved to (Q(x+1)) if x<X and is moved to (D) if x=X, and processing returns to the secondly determining step. If such an item is found from the search, each newly discovered group that the removed group is a member of as determined from the found item is placed into (S), the removed group is moved to (D), and processing returns to the firstly determining step.","The iterative process develops all possible paths from the element to any of the validated target groups. In doing so, more costly operations at a higher level storage device do not occur until all possible less costly operations at all lower level storage devices are exhausted.","Computer Environment",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of co-processing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information, cache storage, and disk storage for files. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may interact to implicate authentication techniques of the present invention for trusted graphics pipeline(s).",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 2","FIG. 2"],"b":["10","10","110","110","110","14","10","110"],"i":["a","b","a","b","c"]},"It can also be appreciated that an object, such as , may be hosted on another computing device  or . Thus, although the physical environment depicted may show the connected devices as computers, such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs, televisions, MP3 players, etc., software objects such as interfaces, COM objects and the like.","There are a variety of systems, components, and network configurations that support distributed computing environments. For example, computing systems may be connected together by wireline or wireless systems, by local networks or widely distributed networks. Currently, many of the networks are coupled to the Internet, which provides the infrastructure for widely distributed computing and encompasses many different networks.","In home networking environments, there are at least four disparate network transport media that may each support a unique protocol such as Power line, data (both wireless and wired), voice (e.g., telephone) and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband (e.g., either DSL or Cable modem) and are accessible within the home using either wireless (e.g., HomeRF or 802.11b) or wired (e.g., Home PNA, Cat 5, even power line) connectivity. Voice traffic may enter the home either as wired (e.g., Cat 3) or wireless (e.g., cell phones) and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short, a variety of disparate sources exist for the storage and transmission of data, and consequently, moving forward, computing devices will require ways of protecting content at all portions of the data processing pipeline.","The \u2018Internet\u2019 commonly refers to the collection of networks and gateways that utilize the TCP\/IP suite of protocols, which are well-known in the art of computer networking. TCP\/IP is an acronym for \u201cTransport Control Protocol\/Interface Program.\u201d The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide-spread information sharing, remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services, essentially without restriction.","Thus, the network infrastructure enables a host of network topologies such as client\/server, peer-to-peer, or hybrid architectures. The \u201cclient\u201d is a member of a class or group that uses the services of another class or group to which it is not related. Thus, in computing, a client is a process, i.e., roughly a set of instructions or tasks, that requests a service provided by another program. The client process utilizes the requested service without having to \u201cknow\u201d any working details about the other program or the service itself. In a client\/server architecture, particularly a networked system, a client is usually a computer that accesses shared network resources provided by another computer e.g., a server. In the example of , computers , , etc. can be thought of as clients and computer , , etc. can be thought of as the server where server , , etc. maintains the data that is then replicated in the client computers , , etc.","A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server.","Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example, Hypertext-Transfer Protocol (HTTP) is a common protocol that is used in conjunction with the World Wide Web (WWW). Typically, a computer network address such as a Universal Resource Locator (URL) or an Internet Protocol (IP) address is used to identify the server or client computers to each other. The network address can be referred to as a Universal Resource Locator address. For example, communication can be provided over a communications medium. In particular, the client and server may be coupled to one another via TCP\/IP connections for high-capacity communication.","Thus,  illustrates an exemplary networked or distributed environment, with a server in communication with client computers via a network\/bus, in which the present invention may be employed. In more detail, a number of servers , , etc., are interconnected via a communications network\/bus , which may be a LAN, WAN, intranet, the Internet, etc., with a number of client or remote computing devices , , , , , etc., such as a portable computer, handheld computer, thin client, networked appliance, or other device, such as a VCR, TV, oven, light, heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process, store or render secure content from a trusted source.","In a network environment in which the communications network\/bus  is the Internet, for example, the servers  can be Web servers with which the clients , , , , , etc. communicate via any of a number of known protocols such as HTTP. Servers  may also serve as clients , as may be characteristic of a distributed computing environment. Communications may be wired or wireless, where appropriate. Client devices  may or may not communicate via communications network\/bus , and may have independent communications associated therewith. For example, in the case of a TV or VCR, there may or may not be a networked aspect to the control thereof. Each client computer  and server computer  may be equipped with various application program modules or objects  and with connections or access to various types of storage elements or objects, across which files may be stored or to which portion(s) of files may be downloaded or migrated. Thus, the present invention can be utilized in a computer network environment having client computers , , etc. that can access and interact with a computer network\/bus  and server computers , , etc. that may interact with client computers , , etc. and other devices  and databases .","Digital Rights Management (DRM) Overview","As is known, and referring now to , digital rights management (DRM) and enforcement is highly desirable in connection with digital content  such as digital audio, digital video, digital text, digital data, digital multimedia, etc., where such digital content  is to be distributed to users. Upon being received by the user, such user renders or \u2018plays\u2019 the digital content with the aid of an appropriate rendering device such as a media player on a personal computer  or the like.","Typically, a content owner or developer (hereinafter \u2018owner\u2019) distributing such digital content  wishes to restrict what the user can do with such distributed digital content . For example, the content owner may wish to restrict the user from copying and re-distributing such content  to a second user, or may wish to allow distributed digital content  to be played only a limited number of times, only for a certain total time, only on a certain type of machine, only on a certain type of media player, only by a certain type of user, etc.","However, after distribution has occurred, such content owner has very little if any control over the digital content . A DRM system , then, allows the controlled rendering or playing of arbitrary forms of digital content , where such control is flexible and definable by the content owner of such digital content. Typically, content  is distributed to the user in the form of a package  by way of any appropriate distribution channel. The digital content package  as distributed may include the digital content  encrypted with a symmetric encryption\/decryption key (KD), (i.e., (KD(CONTENT))), as well as other information identifying the content, how to acquire a license for such content, etc.","The trust-based DRM system  allows an owner of digital content  to specify license rules that must be satisfied before such digital content  is allowed to be rendered on a user's computing device . Such license rules can include the aforementioned temporal requirement, and may be embodied within a digital license or use document (hereinafter \u2018license\u2019)  that the user\/user's computing device  (hereinafter, such terms are interchangeable unless circumstances require otherwise) must obtain from the content owner or an agent thereof. Such license  also includes the decryption key (KD) for decrypting the digital content, perhaps encrypted according to a key decryptable by the user's computing device.","The content owner for a piece of digital content  must trust that the user's computing device  will abide by the rules and requirements specified by such content owner in the license , i.e. that the digital content  will not be rendered unless the rules and requirements within the license  are satisfied. Preferably, then, the user's computing device  is provided with a trusted component or mechanism  that will not render the digital content  except according to the license rules embodied in the license  associated with the digital content  and obtained by the user.","The trusted component  typically has a license evaluator  that determines whether the license  is valid, reviews the license rules and requirements in such valid license , and determines based on the reviewed license rules and requirements whether the requesting user has the right to render the requested digital content  in the manner sought, among other things. As should be understood, the license evaluator  is trusted in the DRM system  to carry out the wishes of the owner of the digital content  according to the rules and requirements in the license , and the user should not be able to easily alter such trusted element for any purpose, nefarious or otherwise.","As should be understood, the rules and requirements in the license  can specify whether the user has rights to render the digital content  based on any of several factors, including who the user is, where the user is located, what type of computing device the user is using, what rendering application is calling the DRM system, the date, the time, etc. In addition, the rules and requirements of the license  may limit the license  to a pre-determined number of plays, or pre-determined play time, for example.","The rules and requirements may be specified in the license  according to any appropriate language and syntax. For example, the language may simply specify attributes and values that must be satisfied (DATE must be later than X, e.g.), or may require the performance of functions according to a specified script (IF DATE greater than X, THEN DO . . . , e.g.).","Upon the license evaluator  determining that the license  is valid and that the user satisfies the rules and requirements therein, the digital content  can then be rendered. In particular, to render the content , the decryption key (KD) is obtained from the license  and is applied to (KD(CONTENT)) from the content package  to result in the actual content , and the actual content  is then in fact rendered.","Publishing Digital Content",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 3"},"Three entities in particular are employed to publish secure digital content: a content preparation application  that executes on the client  and prepares the content for publishing, a digital rights management (DRM) applications program interface (API)  that also resides on the client device , and a DRM server  that is communicatively coupled to the client  via a communication network  such as the Internet, a local or wide area network, or a combination thereof.","The content preparation application  can be any application that produces digital content. For example, the application  can be a word processor or other publisher that produces digital text files, digital music, video, or other such content. The content could also include streamed content, such as streamed audio\/video of a live or taped event, or example. The application  is provided with a cryptographic key to encrypt the digital content, thus forming an encrypted digital content file , and the user provides rights data to be tightly associated with the encrypted content in the digital content file . The rights data includes an identity for each entity that has rights in the digital content, and a set of rights and conditions for each identified entity.","Such an entity can be, for example, an individual, a class of individuals, or a device. Such rights can include the right to read, edit, copy, print, etc, the digital content. Conditions may include minimum system requirements, date and time limitations, play counts, and the like.","The client API  passes the encrypted digital content and the rights data to the DRM server . Using a process that is described in detail below, the DRM server  determines whether it can enforce the rights data and if so the DRM server  signs the rights data to form a signed rights label (SRL) . In general, however, any trusted entity can sign the rights data, preferably using a key trusted by the DRM server . For example, a client can sign the rights data using a key provided to it by the DRM server .","The rights label  can include data representing the rights description, the encrypted content key, and the digital signature over the rights description and the encrypted content key. If the DRM server  is signing the right label, it passes the signed rights label  back to the client through the client API , which stores the signed rights label  on the client device . The content preparation application  then associates the signed rights label  with the encrypted digital content file , such as for example by concatenation to form a rights managed content file . Note, though, that the SRL  could be stored in a known location separate from the content file  with a reference to the SRL  concatenated to the content file  to form the content file .","Referring now to , one method for publishing rights managed digital content is shown. At step , the application  generates a content key (CK) that is used to encrypt the digital content. The content key (CK) is typically a symmetric key although any key can be used to encrypt the digital content. As is known, a symmetric key is employed by a symmetric key algorithm both to encrypt and decrypt. Accordingly, (CK) should be well-hidden when shared between a sender and a receiver.","At step , the application  encrypts the digital content with (CK) to form encrypted digital content  (i.e., (CK(content))). Additionally, rights data corresponding to (CK(content)) is generated, either by the publisher of the content or by another entity. Note that such rights data may be custom rights data or rights data as obtained from a pre-defined template. As was discussed above, the rights data can include a list of entities that will be entitled to consume the content, the specific rights that each of the entities possesses with respect to the content, and any conditions that may be imposed on those rights.","At step , the API  generates a second encryption key (DES), which is used to encrypt the content key (CK). Preferably, (DES) is also a symmetric key. At step , the API  encrypts (CK) with (DES) to result in (DES (CK)). At step , the API  discards (CK), with the result being that (CK) can now be obtained only by decrypting (DES (CK)). To ensure that (CK(content)) is protected to a central DRM server  and that all \u201clicense requests\u201d for the content are done centrally in accordance with the rights data, the API , at step , contacts the provided DRM server  and retrieves the public key (PU-DRM) thereof. At step , the API  encrypts (DES) with (PU-DRM) to result in (PU-DRM (DES)). Thus, (CK) can be protected to (PU-DRM)) to ensure that the DRM server  is the only entity that will be able to get access to (CK), as is required to decrypt (CK(content)). At step , the API  encrypts the rights data (i.e., the list of authorized entities and the respective rights and conditions associated with each authorized entities in the list) with (DES) to result in (DES(rightsdata)).","In an alternative embodiment, (CK) can be used to directly encrypt the rights data to result in (CK(rightsdata)), and (PU-DRM) can be used to directly encrypt (CK) to result in (PU-DRM(CK)), thereby foregoing the use of (DES) completely. However, using (DES) to encrypt the rights data and (CK) allows such (DES) to conform to any particular algorithm that might be amenable to the DRM server, whereas (CK) might be specified by an entity independent from the DRM server and might not be as amenable thereto.","At step , the content protection application  submits (PU-DRM(DES)) and (DES(rightsdata)) to the DRM server  as a rights label for signing. Alternatively, the client itself can sign the rights data in the manner set forth below. If the rights data is being submitted to the server for signing, then, at step , the DRM server  accesses the rights data and verifies that it can enforce the rights and conditions in the submitted rights label. To verify that it can enforce the rights data, the DRM server  applies the private key (PR-DRM) corresponding to (PU-DRM) to (PU-DRM(DES)) to result in (DES), and then applies (DES) to (DES (rightsdata)) to result in the rights data in the clear. The server  can then do any policy checks to verify that the users, rights, and conditions specified in the rights data are within any policy enforced by the server . The server  signs the originally submitted rights label including (PU-DRM(DES)) and (DES (rightsdata)) to result in the signed rights label (SRL) , where the signature is based on the private key of the DRM server  (PR-DRM), and returns the SRL  back to the API , which then presents the returned SRL  to the client application .","The SRL  is a digitally signed document, which makes it tamper-resistant. Additionally, the SRL  is independent of the actual key type and algorithm used to encrypt the content but maintains the strong 1\u20141 relation to the content it is protecting. Referring now to , in one embodiment of the present invention, the SRL  may include information on the content that is the basis of the SRL , including perhaps an ID of the content; information on the DRM server that signs the SRL , including (PU-DRM(DES)) and referral information such as a URL for locating the DRM server on a network and fall-back information if the URL fails; information describing the SRL  itself; (DES(rightsdata)): (DES(CK)); and a digital signature (S (PR-DRM)), among other things.","By ensuring that a trusted entity signs the rights data to create a signed rights label , the DRM server  is asserting that it will issue licenses for the content in accordance with the terms set forth by the publisher as described in the rights data of the rights label . As should be appreciated, a user is required to obtain a license to render the content, especially inasmuch as the license contains the content key (CK). When a user wants to obtain a license for the encrypted content, the user can present a license request including the SRL  for the content and a certificate verifying the user's credentials to the DRM server  or other license issuing entity. The license issuing entity can then decrypt (PU-DRM(DES)) and (DES (rightsdata)) to produce the rights data, list all the rights granted by the author (if any) to the license requesting entity, and construct a license with only those specific rights.","As set forth above, upon the application  receiving the SRL , such application  concatenates the signed rights label  with the corresponding (CK(content))  to form rights managed digital content. Alternatively, the rights data is stored in a known location, with a reference to that location provided with the encrypted digital content. Thus, a rendering application that is DRM-enabled can discover the signed rights label  via the piece of content the rendering application is attempting to render. This discovery triggers the rendering application to initiate a license request against the DRM licensing server . Publishing application  can store a URL to the DRM licensing server , for example, or the DRM licensing server  can embed its own URL as a piece of metadata into the rights label before digitally signing it, so that the DRM client API  called by the rendering application can identify the correct DRM licensing server .","Obtaining a License for the Published Content","Referring now to , a system and method for licensing rights managed digital content is shown. \u201cLicensing,\u201d as that term is used herein, refers to a process that an application or service follows to request and receive a license that will enable an entity named in the license to consume the content in accordance with the terms specified in the license. Inputs to the licensing process can include the signed rights label (SRL)  associated with the content for which a license is being requested, and the public key certificate(s) of the entity(s) for which the license is being requested. Note that the entity requesting a license need not necessarily be the entity for which the license is being requested. Typically, a license includes the rights description from the SRL , an encrypted key that can decrypt the encrypted content, and a digital signature over the rights description and the encrypted key to assert legitimacy and prevent tampering.","Preliminarily, the client API  forwards the signed rights label  of the rights managed content  to the DRM server  via the communication network . As described above, the rights label  contains the content key (CK) encrypted according to the public key of the DRM server  (PU-DRM) (i.e., (PU-DRM(CK))). In the process of issuing a license, then, the DRM server  applies (PR-DRM) to (PU-DRM(CK)) to obtain (CK). It then uses the public key (PU-ENTITY) in the public key certificate that is passed up in the license request to re-encrypt (CK) (i.e., (PU-ENTITY(CK))). The newly encrypted (PU-ENTITY(CK)) is then placed into the license. Thus, the license can be returned to the caller without risk of exposing (CK), since only the holder of the private key (PR-ENTITY) corresponding to (PU-ENTITY) can recover (CK) from (PU-ENTITY(CK)). The client API  then uses (CK) to decrypt the encrypted content to form decrypted digital content . The client application  can then use the decrypted digital content  according to the rights that are provided in the license.","Alternatively, and as set forth below in more detail, a client such as the publishing client can for example issue a use license to itself to consume the content.","Turning now to , a method for licensing rights managed digital content is shown. At step , a license issuing entity such as a DRM server  receives a license request including either a public key certificate or an identity for each of one or more requested licensees. Presumably, if am identity is specified, the DRM server  can procure a corresponding public key certificate from a directory, a database, or the like. If a license is requested for only one licensee, only one certificate or identity is named. If a license is requested for a plurality of licensees, a certificate or an identity can be named for each potential licensee. At step , the requesting entity (i.e., the entity making the license request) is authenticated, if desired. At step , it is determined whether the entity is allowed to request a license, again if desired.","If, at step , the issuing entity determines that the public key certificate is not included in the license request, then the issuing entity uses the specified identity to perform a lookup in a directory service or database for the appropriate public key certificate. If, at step , the issuing entity determines that the certificate is in the directory, then, at step , the certificate is retrieved. If a certificate cannot be found for a given potential licensee, either in the request or in the directory, then the license server does not generate a license for that potential licensee and, at step , an error is returned to the requesting entity.","Assuming the DRM server  has a public key certificate for at least one potential licensee, then, at step , such DRM server  validates the trust of each licensee certificate. If not validated, the DRM server  determines that the issuer of the licensee certificate is not in the list of trusted issuers, then the request fails for that licensee, and an error is generated at step . Thus, any potential licensee whose certificate is not issued by a trusted issuer would not receive a license.","Additionally, the DRM server  preferably performs digital signature validation on all entities in the certificate chain going from the trusted issuer certificates to the individual licensee public key certificates. The process of validating the digital signatures in a chain is a well-known algorithm. If the public key certificate for a given potential licensee does not validate, or a certificate in the chain does not validate, the potential licensee is not trusted, and a license, therefore, is not issued to that potential licensee. Otherwise, at step , a license can issue. The process repeats at step  until all entities for which a license has been requested have been processed.","As shown in , the DRM server  proceeds to validate the signed rights label  that is received in the license request. In one embodiment, the DRM server  has a master copy of every rights label signed thereby. At license time (at step ), then, the DRM server  may retrieve a copy of the master rights label. The master rights label could be more up to date than the copy of the rights label sent in the license request, and therefore will be the rights label employed to produce the requested license. If no master rights label is found the DRM server , at step , determine according to pre-defined policy whether to issue a license based on the rights label in the request. If the policy does not allow, the license request fails at step , and an error is returned to the API  at step .","At step , the DRM server  validates the SRL  and specifically the digital signature thereof. If the SRL  does not validate, the license request fails at step , and an error is returned to the API  at step .","After all the validations have occurred, the DRM server constructs a license for each approved license based on the SRL . At step , the DRM server  generates a respective rights description for the license to be issued to each licensee. For each licensee, the DRM server  evaluates the identity named in the public key certificate of that licensee against the identities named in the rights description in the rights label. At step , the DRM server  obtains (PU-DRM(DES)) and (DES (CK)) from the SRL  and applies (PR-DRM) to obtain (CK). The issuing entity then re-encrypts (CK) using (PU-ENTITY) from the licensee's public key certificate to result in (PU-ENTITY(CK)). At step , the DRM server  concatenates the generated rights description with (PU-ENTITY(CK)) and digitally signs the resulting data structure using (PR-DRM) (i.e., S (PR-DRM)). The signed data structure is thus the license for this particular licensee.","At step , the DRM server  determines that there are no more licenses to generate for the particular request. The generated licenses are then returned to the requesting entity, at step , along with an appropriate certificate chain that ties the licenses back to a trusted authority.","Licensing by Way of a Directory","When issuing a license for protected content, the license issuing entity (hereinafter \u2018licensor\u2019) consults the sent SRL  from the content to determine which users\/groups\/clusters\/divisions\/platforms\/etc. (hereinafter \u2018entities\u2019) are to be provided with rights, and the sent certificate to identify the license requester. Based thereon, the licensor determines which rights of those listed in the SRL  are to be issued to the requester. Conceptually, the licensor inspects the entities listed in the SRL  and compares such entities with the requestor. Thus, if the SRL  specifies that a particular group is to receive a license and the requester is a member of such group, the requestor is granted a license with rights as set forth for the group in the SRL . Likewise, if the SRL  specifies that a particular user is to receive a license and the requester is such user, the requestor is granted a license with rights as set forth for such user in the SRL . As may be appreciated, a particular SRL  may list several entities and rights therefor, and a particular requestor may be granted a license based on being a member of one or more entities.","In one embodiment of the present invention, and as seen in , the requestor is identified in the sent certificate  by way of an identifier , where the identifier  may for example be an alias through which the requestor is identified in an organizational directory . Correspondingly, the SRL  lists therein each rights-entitled entity therein according to such an identifier . Thus, and as part of processing a request for a license , a licensor , which is typically a DRM server , obtains the identifier  of the requestor from the certificate  and compares the obtained identifier  to all identifiers  as listed in the sent SRL . If a match is found, the licensor  issues a license  to the requestor with the rights specified in the SRL  for the identifier  of such requestor.","Moreover, with the availability of the directory , the licensor  may also determine whether the requestor is a member of any other entity listed in the SRL , presuming that the directory  contains appropriate cross-referencing information that would reflect the requestor's membership status in each such other entity. Typically, a directory  lists for each requestor not only the identifier  thereof but also the identifier  of each group\/cluster\/division\/platform\/other entity\/etc. that the requestor is a member of. Note that the directory  may include identifiers  such as a mail address, an alternate mail address, an ID, an alternate ID, a group membership, a historic identifier, and\/or the like.","With the certificate  received from the requestor with the identifier  thereof therein and with the rights data from the SRL  received from the requester, then, and generally speaking, the licensor  issues a license  to the requestor if, among other things, it can be determined from the directory  that the requester is a member of any entity listed in the SRL . If so, and assuming all other conditions for licensing are satisfied, the licensor  issues the license  to the requestor with the rights and conditions specified for the listed entity as obtained from the SRL .","In one embodiment of the present invention, an entity listed in the SRL  represents a group or cluster or some other collection of individuals (hereinafter \u2018group\u2019) where such group is appropriately represented within the directory . Such group could include a mail-enabled group such as a distribution list or a mail alias, or a security group such as may defined in connection with a network operating system or the like.","Notably, specifying rights in an SRL  according to a group and issuing a license  to a requestor according to group membership thereof effectuates digital rights management in an enterprise or organizational setting. For example, a document or email could be DRM-protected so that all members of a given department have rights to read the document or email. Assuming that a group (e.g. email alias) for such a department exists in the directory  of the organization, which is most often the case, the author of the document or email would grant rights based on the group rather than individuals. As may be appreciated, advantages to such group-wise rights granting include ease of use for the author in specifying classes of individuals that have rights. In addition, by specifying rights according to a group, the specified rights do not become \u2018stale\u2019 as new individuals join the group and old individuals leave the group. Instead, all current members of the group are capable of exercising the rights as long as the membership of such group is kept up to date in the organizational directory .","Determining Whether a Requestor is a Member of a Group","Typically, the directory  is a repository of useful information that is of interest to the organization or a portion thereof. In particular, the directory  holds several important pieces of information about each user in the organization, including every group that the user holds membership in. In fact, such memberships for a user may be defined at least in part by being listed in the directory  according to the user.","Note that in the situation where the organization is especially large or otherwise so requires, computing therein may divided in some logical fashion into a plurality of divisions or \u2018forests\u2019. Each forest may for example be geographically based, such as for example if the organization has one office in Wilkes-Barre, Pa. and another office in Boynton Beach, Fla., in which case each such office is provisioned with a separate forest. Alternately, each forest may for example be functionally based, such as for example if the organization has an accounting department and a production department, in which case each such department is provisioned with a separate forest. Of course, forests may be defined according to any other criteria without departing from the spirit and scope of the present invention.","Significantly, it is presumed to be the case that each forest has its own directory  or group of directories  (hereinafter \u2018directory \u2019), and each forest has at least one DRM server . Referring now to , two forests, forest A and forest B, are shown for an organization, where forest A has a directory A and a DRM server A, and where forest B has a directory B and a DRM server B. As is to be appreciated, each forest acts as a protective enclave within which the corresponding directory and DRM server is deployed. Thus, DRM server A within forest A should be able to access information within directory A with relative ease, at least from a security point of view, while DRM server B within forest B is nearly as able to access information within directory A within forest A with such relative ease, again at least from a security point of view. Note, though, that multiple forests that have a need to inter-operate typically replicate information therebetween and optionally can set up explicit trust relationships therebetween.","Group Membership Determination Within a Forest","Assuming for the moment that the totality of the organization is represented by forest A of  and that forest B of  does not exist, it is to be appreciated that directory A of forest A maintains all directory information relevant to the organization, including all users and all groups that the users belong to. Note, here, that such groups may actually comprise multiple layers of groups. Thus, and as seen in , it may be the case that a group  has as direct members a group  and a group , and group  may have as direct members a user . In such an instance, user  is a direct member of group , an indirect member of group , and not a member of group . As may be appreciated then, if an SRL  lists rights for members of groups  or , user  may obtain a license  based on such rights, assuming all other conditions are met, while if the SRL  lists rights for members of group  only, user  may not obtain such a license . Put more generally, a user that is a direct or indirect member of a group named in an SRL  can obtain a license  with whatever rights and conditions are granted to such group.","As seen in , the record objects\/records in the directory A for each of groups  through  and user  are shown. Note that, as is typical, each record is in the form of a listing for the respective entity that includes both all direct members of the entity, assuming the entity is a group, and all direct memberships that the entity possesses, whether the entity is a user or a sub-group of another group. Thus, group  has groups  and  as direct members and is not a direct member of any other group, group  has no members and is a direct member of group , group  has user  as a direct member and is a direct member of group , and user  as a user has no members but is a direct member of group . Of course, directory A as shown in  is grossly over-simplified and therefore would in reality very likely be much larger with many more users and groups. Nevertheless, such directory A as shown is suitable for purposes of describing the present invention.","In the course of user  submitting an SRL  to DRM server A, where the submitted SRL  lists one or more groups and rights therefor, then, the DRM server A decides whether to issue a license  to user  at least in part by referring to directory A to determine whether user  is a direct or indirect member of any of the groups listed in the SRL . As may be appreciated, such a determination may be performed in one of two general manners\u2014from the listed groups to the user, or from the user to the listed groups.","Performing the determination from the groups to the user is a more straight-forward process, typically, but since groups can have many members, it is likely that a relatively large amount of time must be spent examining all found users to determine whether a match exists. Performing the determination from the user to the groups is a less straight-forward process, typically, but since a user usually is not a member of too many groups, it is likely that a relatively small amount of time must be spent examining all found groups to determine whether a match exists. In any case, it has been found at least empirically that performing the determination from the user to the groups is more economical and desirable overall.","Still referring to , and also now referring to , to make a group membership determination with regard to whether user  is a member of group , then, the DRM server A proceeds as follows. Preliminarily, the DRM server A asks directory A whether group  exists (step ). As may be appreciated, if the response to such an inquiry shows that group  does not exist, then the process is done inasmuch as user cannot be a member of a group that does not exist (step ). Thus, despite the fact that the determination is performed from the user to the group, the preliminary step of asking whether the group exists is performed to avoid performing any additional steps if unnecessary.","Of course, as shown, group  does indeed exist, so the response would in actuality be yes. Thus, the DRM server A asks directory A for all groups that user  is a member of and directory A returns with the information that user  is a member of group  (steps ,). Of course, group  is not group , so the DRM server A has not as yet determined whether user  is a member of group  (step ). Nevertheless, the DRM server A must continue if it is the case that user  might later be found to be an indirect member of group  by way of being a direct member of group  and group  being a direct or indirect member of group .","The DRM server A thus continues by asking directory A for all groups that group  is a member of and directory A returns with the information that group  is a member of group  (steps , ). As a result, DRM server A has determined that user  is in fact an indirect member of group  by way of being a member of group  (step ).","As should now be appreciated, the DRM server A may have to recursively query through many more groups and many more iterations to finally determine that user  is in fact a member of group . Alternatively, if it were the case that user  was not in fact a member of group , the DRM server A would have to query through the entirety of all possible group membership for user , direct and indirect, before finally determining that user  is not a member of group . As will be described in more detail below, because such querying can be expensive and may be performed on a continuing basis, the results of such exploration may be stored in one or more caches.","Group Membership Determination Across Forests","When an organization has multiple forests deployed and the user and group membership information needs to be available across forest boundaries, there is no straightforward way to determine group membership of a user with regard to a particular group, especially when the querying DRM server  is in a forest that does not natively hold the required information in the directory thereof. Instead, the DRM server  must consult another forest where such information is indeed natively held.","In particular, of special interest is the situation where a DRM server  such as DRM server A of  is asked to issue a license to a user based on an SRL  that lists a group, where the group is not native to forest A within which DRM server A resides. Instead, such group is native to forest B and therefore has a record in directory B of forest B. As a result, a group membership determination with regard to whether the user at issue is a member of the group at issue must be made with respect to directory B of forest B inasmuch as such directory B has the record for the group at issue with the group information for such group.","However, and significantly, DRM server A of forest A typically cannot directly query directory B of forest B to obtain substantive directory information since such cross-forest querying is usually limited or prevented out of security concerns. Instead, and in one embodiment of the present invention, DRM server A asks DRM server B of forest B to query directory B of forest B and to report back to DRM server A with the results of the query. Note that the DRM server B to directory B query is not a cross-forest query and therefore does not suffer the limitations thereof.","It must be appreciated, though, that the DRM server A prior to asking DRM server B to perform the query must actually know that DRM server B is in fact the proper DRM server  to perform the query inasmuch as the group at issue is native to forest B. Put more simply, DRM server A must know that the group at issue is native to forest B prior to asking DRM server B to query directory B. However, DRM server A can only query directory A and therefore would not know of the native forest of the group at issue unless such directory A has such information.","Accordingly, and in one embodiment of the present invention, directory A indeed does have such information, as is seen in . In particular, directory A has a pointer object for the group at issue that directs any querying entity with regard to the group at issue to forest B. Such pointer object may for example include an address of forest B that is returned to querying DRM server A upon such DRM server A requesting information about the group at issue. Presumably, directory B of forest B has a record object for the group at issue. Thus, DRM server A may employ such address to find forest B and proceed from there.","In one embodiment of the present invention, the address of forest B is in particular the address of directory B within forest B. Such DRM server A with such address then contacts such directory B based thereon. However, since DRM server A is in forest A and directory B is in forest B, and as was alluded to above, directory B does not normally provide any substantive information across forests to DRM server A. Nevertheless, directory B can provide to DRM server A the address of DRM server B.","Accordingly, and in one embodiment of the present invention, DRM server A receives the address of DRM server B from directory B, and based thereon asks DRM server B to query directory B on behalf of DRM server A. In particular, DRM server A requests DRM server B to query directory B whether the user at issue is a member of the group at issue, and to return the answer to DRM server A. Presumably, such request includes some sort of identification of DRM server A as a DRM server  within the DRM universe, such as for example an identifying certificate with a certificate chain leading back to a trusted root of authority as recognized by DRM server B. Accordingly, DRM server B executes the query of directory B on behalf of DRM server A only if the identifying certificate verifies.","Presuming DRM server B indeed executes the query of directory B on behalf of DRM server A, such as in the manner set forth above with regard to , DRM server B eventually determines whether the user at issue is a member of the group at issue and returns such information to DRM server A as the response to the request therefrom.","Note that when DRM server B asks directory B if the user at issue is a member of the group at issue, such user at issue must be represented within directory B, at least by a pointer object if not by a record object. Moreover, such pointer object must include information regarding each group that the user at issue is a member of, especially inasmuch as such member-of information is referenced when the group membership information is determined from the user to the group, as was described above.","Turning now to , and to recap, DRM server A and DRM server B on behalf of DRM server A perform the following steps to determine group membership across forests:","Preliminarily, DRM server A receives a request from a user for a use license  corresponding to a piece of content (step ). The request includes a certificate identifying the user and the SRL  associated with the content. In response, and assuming the SRL  identifies a group therewithin, and also assuming appropriate cached information is not present, DRM server A queries directory A to return any object for the identified group (step ). The present scenario assumes that the group is native to forest B so such group is in fact represented within directory A as a pointer object pointing to forest B, and DRM server A receives the pointer object pointing to forest B from directory A, thus signifying that the group is native to forest B (step ), and retrieves the address of forest B from the received pointer object (step ).","Thereafter, DRM server A employs the retrieved address to query directory B in forest B for the address of DRM server B and directory B returns such address to DRM server A in response thereto (steps , ). The particular mechanism of getting the address of DRM server B is known or should be apparent to the relevant public and therefore need not be discussed herein in any detail. Thus, any appropriate mechanism may be employed without departing from the spirit and scope of the present invention.","With the address of DRM server B, DRM server A then requests DRM server B to query directory B whether the user is a member of the group (step ). Again, the particular mechanism employed by DRM server A to deliver the request to DRM server B is known or should be apparent to the relevant public and therefore need not be discussed herein in any detail. Thus, any appropriate mechanism may be employed without departing from the spirit and scope of the present invention.","As with DRM server A, and again assuming appropriate cached information is not present, DRM server B queries directory B to return any object for the identified group (step ). The present scenario assumes that the group is native to forest B so such group is in fact represented within directory B as a record object, and DRM server B receives the record object from directory B, thus signifying that the group is native to forest B (step ). Note that DRM server B may at this point review the members of the group as set forth in the received object to determine whether the user is a direct member of the group (step ). If so, the determination is positive and DRM server B reports same to DRM server A (step ). If not, DRM server B queries directory B to return any object for the user and thus proceeds to determine whether the user is a member of the group by attempting to traverse within directory B from the user to the group in a manner akin to that shown in connection with  (step ). Upon finishing the attempted traversal, DRM server B will have determined whether a member relationship exists between the user and the group, and reports same to DRM server A (step ).","Of course, based on such determination, DRM server A decides whether to honor the request from the user as received at step  (step ). As may be appreciated, if the user is not a member of the group, the request is denied, unless of course it is found that the user is a member of another group identified in the received SRL . Likewise, if the user is a member of the group, the request is honored, presuming that all other conditions for so honoring are met.","Determining User Group Membership by Way of Cached Information","As thus far described above, a DRM server  in the course of issuing a license  to a user based on an SRL  can determine whether the user is a member of a group identified in the SRL  by referring to a directory  within the forest of the DRM server  or in another forest. As may be appreciated, though, referring to a directory  each time a determination is to be made can become relatively expensive and cumbersome, especially in terms of the additional network traffic and the work necessary to be performed by the directory , and especially if the number of determinations made becomes relatively high.","Accordingly, and in one embodiment of the present invention, user-group information as derived from one or more directories  is cached at one or more locations that are accessible to the DRM server . In addition, and in one embodiment of the present invention, the DRM server  when making a user-group determination employs a lowest-cost-first algorithm to review multiple cache locations in order of lowest cost to highest cost prior to referring to a directory . Thus, higher cost operations are postponed for as long as possible, determination speed is increased, and network traffic is reduced.","Caching User-Group Information","In the course of determining from a directory  whether a user is a member of a group, such as was disclosed in connection with , a DRM server  potentially locates at least some other groups that the user is a direct or in indirect member of. Note that inasmuch as the traversal stops once a membership path is in fact found, it is likely that not all groups of the user are found. For example, if in examining the record object for the group at issue it is found that the user is a direct member of such group, then no other groups that the user is a direct or indirect member of are found. Likewise, if it is necessary to traverse from the user to the group in an attempt to find a membership path therebetween, then at least the groups that the user is a direct member of are found, but some indirect groups may not be found because a membership path was found beforehand. Nevertheless, in one embodiment of the present invention, the DRM server  stores whatever knowledge it has of the user and all direct or indirect group membership thereof in one or more caches for future reference should that be necessary.","Referring now to , multiple entries  of a cache  are seen. In particular, it is seen from one entry  in the cache  that for a user , it has been found that such user  is a member, either directly or indirectly, of groups , , and , and that group  is a member of groups  and . Similarly, it is seen from another entry  in the cache  that for a user , it has been found that such user  is a member of group  only. Whether such users  and  and group  are direct or indirect members of such groups is believed to be immaterial and accordingly is not delineated, although such information may so be delineated if found to be necessary or useful. What is material is that all group memberships for a user\/group are cached as any particular user-group relationship may be useful at some later time to establish a user-group relationship for the same or different user\/group.","As may be appreciated, information in the cache  as obtained from the directory  can become \u2018stale\u2019 after a period of time. That is, over time, users can become deleted from the directory , additional groups and group memberships can be defined, and the like, and yet the cache  is not automatically updated to reflect such changed information. Accordingly, and as seen from , each entry  of the cache  includes a time of creation. Based on such creation time, then, any querying entity querying the cache  can decide whether the entry  is too old to be relied upon. In addition or in the alternative, the cache  may on its own delete each entry  therein that is deemed too old based on the creation time thereof.","Turning now to , it is seen that the cache  of  may be implemented in a number of configurations. In one configuration, each license-issuing DRM server  in a forest has a cache  that is a relatively basic light-weight in-memory cache, and the forest also has a dedicated cache server  () with a cache  that is a relatively extended heavier-weight in-memory cache. In addition, the dedicated cache server  may employ a database cache , and\/or may perform queries on the directory  on behalf of the license-issuing DRM servers .","In another configuration, each license-issuing DRM server  in a forest has a cache  that is a relatively extended heavier-weight in-memory cache (), and performs queries on the directory . No dedicated cache server  is present, although a database cache  may be shared among all license-issuing DRM servers  in the forest. In any configuration, each basic cache  has user information only, while each extended cache  has user and group information.","Lowest-Cost-First Algorithm","Regardless of the configuration of the caches , a DRM server  seeking to determine whether a user is a member of a group employs the lowest-cost-first algorithm of the present invention to search the caches  and the directory  in the order of lowest-cost to highest cost. Presumptively, the cache  associated with the DRM server  has the lowest cost associated therewith, the cache  associated with a dedicated cache server  and the database cache  have a higher cost associated therewith, and the directory  has the highest cost associated therewith. Of course, cost can be subjective and at any rate a particular entity may have any particular cost without departing from the spirit and scope of the present invention.","Turning now to , it is seen that the main characteristic of the algorithm is that an operation believed to have a higher cost is not attempted before all operations believed to have a lower cost have been exhausted. Generally, the operations in the order of increasing cost are look-up in the in-memory cache  of the licensing DRM server , look-up in the database cache  or the cache  of the dedicated cache server , and look-up in the AD. In performing the algorithm, a user and one or more target groups are submitted, and a determination is made of whether the user is a member, either directly or indirectly, of any of the target groups. Essentially, the algorithm traverses from the user to any of the target groups by way of all available membership information from the caches  and the directory , again always performing a lower-cost operation before performing a higher-cost operation. The algorithm returns as a result a \u201cyes\u201d if the user is a member of one of the target groups, a \u201cno\u201d if the user is not a member of any of the target groups, a \u201cuser not found\u201d if the user is not in the directory , and a \u201cno target groups are found\u201d if none of the target groups are found in the directory .","As seen in , the process begins by defining the user at issue and the target group or groups (step ). Assuming for the moment that the DRM server  has a local cache  and has access to a remote cache  (which may be the dedicated cache server  or the database cache ) and the directory , the algorithm as employed by the license-issuing DRM server  employs a number of bins and queues, including:\n\n","Thus, the algorithm proceeds by validating the target group or groups, by, for each target group in the target bin, searching to find a record or entry  for the target group. Since essentially the same process is performed with regard to each storage device (S, corresponding to the local cache ; S, corresponding to the remote cache ; and S, corresponding to the directory ), such process need only be described with reference to a generic storage Sx.","In particular, the algorithm first looks at the S, the local cache , and for each target group in the target bin (T), if such target group is found as an entry  in the local cache , the target group is removed from (T), and the target group is placed in the validated target bin (V) and the entry  thereof is placed in any lower-level caches , which in this instance do not exist (step ). Thereafter, the algorithm repeats step  with respect to S, the remote cache , and for each target group remaining in (T), if such target group is found as an entry  in the remote cache , the target group is removed from (T), and the target group is placed in (V) and the entry  thereof is placed in any lower-level caches , which in this instance is the local cache . Finally, the algorithm again repeats step  with respect to S, the directory , and for each target group still remaining in (T), if such target group is found as a record in the directory , the target group is removed from (T), and the target group is placed in (V) and the entry  thereof is placed in any lower-level caches , which in this instance are the local and remote caches .","Upon performing step  for each storage device, then, the validated target bin (V) should contain all target groups that have been found to exist either in a cache  or the directory . All target groups remaining in the target bin, then, can be assumed to be bad or no longer in existence, and therefore can be ignored. If it is the case that (V) is empty, the algorithm ends as no validated target groups exist, and the algorithm returns a \u201cno target groups are found\u201d (step ). As should be noted, by copying a record or entry  from the directory  or remote cache  to all lower level caches , such lower level caches  become charged with cache information that may be employed for future determinations of whether a user is a member of a group.","Thereafter, presuming at least one validated target group exists in (V), the algorithm validates the user. In particular, the algorithm searches for a record or entry  for the user at issue (step ), first by looking at S, the local cache , then at S, the remote cache , and then at S, the directory. Upon finding a record or entry  (hereinafter, \u2018item\u2019) for the user at any iteration of step , the algorithm places each group that the user is a member of into the search bin (S) (step ), and in addition populates all lower level caches  with an entry  for the user (steps ). Note that if no item for the user is found from any iteration of step , the algorithm ends as no validated user exist, and the algorithm returns a \u201cuser not found\u201d (step ) As may be appreciated, step  is iterated in the order perceived to correspond to the lowest-cost operation to the highest-cost operation, which in this case is with regard to S, then S, then S. Accordingly, once a user is validated, higher-cost operations are avoided. Note that the user may be validated prior to the target group or groups without departing from the spirit and scope of the present invention.","Presuming that a validated user is found that is a member of at least one group as represented by such group being in (S), and at least one validated target group is found as represented by a corresponding item in (V), and turning now to , the algorithm continues by determining from (S) and (V) whether any group in (S) matches any group in (V) (i.e., the validated target group or groups) (step ). If indeed a group in (S) is found to match an item in (V), the algorithm ends with a match, and the algorithm returns a \u201cyes\u201d (step ). Otherwise, the algorithm continues by moving all groups in (S) to the local queue (Q) (step ).","Thereafter, the algorithm performs an iterative process to search for a membership path from the user to any target group. The iterative process requires multiple searches in the local and remote caches  and the directory  to determine group memberships. Since essentially the same process is performed with regard to each of the queues (Q, corresponding to the local cache ; Q, corresponding to the remote cache ; and Q, corresponding to the directory ), such process need only be described with reference to a generic (Qx) and a generic storage Sx, as is shown in , where S is the local cache ; S the remote cache , and S the directory .","In particular, and assuming for the moment that (Qx) and Sx in  are (Q) and S, the local cache , a determination is first made whether (Q) is empty (step ). Of course, (Q) should not initially be empty, but since the process is iterative, there may come a point at which (Q) is indeed empty. Assuming that (Q) is not initially empty, then, but instead has a group therein, such a group is selected and removed from (Q) and it is determined whether such group is already in the discard bin (D) (step ). Initially, of course, the group selected and removed from (Q) is not in (D) inasmuch as the group has not already been processed, but as the process iterates other groups may be placed into (Q), including perhaps groups that have been previously processed, and as each group is processed it will indeed be moved into (D).","If the group selected and removed from (Q) has already been processed and is therefore in (D), the algorithm returns to step (), where it is again determined whether (Q) is empty. However, if the group selected and removed from (Q) has not already been processed and is therefore not in (D), the algorithm continues by searching for an entry  for the selected group in the cache  or directory  corresponding to (Q), which in this case is the local cache  (step ).","If no such entry  for the selected group is found in the local cache , the process continues by moving the group from (Q) to the remote queue (Q) (step ), and then returning to step (), where it is again determined whether (Q) is empty. However, if such an entry  for the selected group is found in the local cache , the algorithm places each newly discovered group that the selected group is a member of into the search bin (S) and moves the selected group to the discard bin (D) (step ), and in addition populates all lower level caches  with an entry  corresponding to the selected group (step ). Note, of course that with regard to (Q) and the local cache , no such lower level caches  exist. Thereafter, the algorithm continues by returning to step , where it is determined whether any group in (S) (i.e., the newly discovered group(s)) matches any group in (V) (i.e., the validated target group or groups). Of course, if indeed a group in (S) is found to match an item in (V), the algorithm ends with a match, and the algorithm returns a \u201cyes\u201d as at step . Otherwise, the algorithm continues by moving all groups in S to the local queue (Q) as at step , and the algorithm continues.","In so doing, the algorithm by way of (Q) develops all possible paths from the user to any of the validated target groups to the extent possible with the local cache . As may now be appreciated, assuming a match is not found, (Q) fills up with more newly discovered groups as the process iterates and empties until all groups in (Q) are processed by way of the local cache  either to the discard bin (D) or to (Q) to be processed by way of the remote cache . Thus, operations at the remote cache , which are presumed to be more costly, do not occur until all possible operations at the local cache  are exhausted, as occurs when (Q) is found to be empty at step .","When in fact (Q) is found to be empty at step , processing then turns to the remote queue (Q) in a manner similar to that which occurs with regard to (Q). In particular, and assuming now that (Qx) and Sx in  are (Q) and S, the remote cache , a determination is first made whether (Q) is empty (step ). Here, (Q) is likely not initially empty, although such an event could occur in the case where the local queue  can itself process all groups from (Q). Assuming that (Q) is not initially empty, then, but instead has a group, such a group is selected and removed from (Q) and it is determined whether such group is already in the discard bin (D) as having been processed (step ).","If the group selected and removed from (Q) has already been processed and is therefore in (D), the algorithm returns to step (), where it is again determined whether (Q) is empty. However, if the group selected and removed from (Q) has not already been processed and is therefore not in (D), the algorithm continues by searching for an entry  for the selected group in the cache  or directory  corresponding to (Q), which in this case is the remote cache  (step ).","If no such entry  for the selected group is found in the remote cache , the process continues by moving the group from (Q) to the directory queue (Q) (step ), and then returning to step (), where it is again determined whether (Q) is empty. However, if such an entry  for the selected group is found in the remote cache , the algorithm places each newly discovered group that the selected group is a member of into the search bin (S) and moves the selected group to the discard bin (D) (step ), and in addition populates all lower level caches  with an entry  corresponding to the selected group (step ). Note, of course that with regard to (Q) and the remote cache , only local cache  need be so populated. Thereafter, the algorithm continues by returning to step , where it is determined whether any group in (S) (i.e., the newly discovered group(s)) matches any group in (V) (i.e., the validated target group or groups). Of course, if indeed a group in (S) is found to match an item in (V), the algorithm ends with a match, and the algorithm returns a \u201cyes\u201d as at step . Otherwise, the algorithm continues by moving all groups in S to the local queue (Q) as at step , and the algorithm continues back with (Q) being processed.","In so doing, the algorithm by way of (Q) develops all possible paths from the user to any of the validated target groups to the extent possible with the remote cache . As may now be appreciated, assuming a match is not found, (Q) fills up with more newly discovered groups as the process iterates and empties until all groups in (Q) are processed by way of the remote cache  either to the discard bin (D) or to (Q) to be processed by way of the directory . Thus, operations at the directory , which are presumed to be more costly, do not occur until all possible operations at the remote cache  are exhausted, as occurs when (Q) is empty.","Significantly, any groups newly discovered by way of (Q) and the remote cache  are first processed by way of (Q) and the local cache . Thus, and again, operations at the remote cache , which are presumed to be more costly, do not occur with regard to the newly discovered groups until all possible operations at the local cache  are exhausted, as occurs when ((Q) is empty.","When in fact (Q) is found to be empty at step , processing then turns to the directory queue (Q) in a manner similar to that which occurs with regard to (Q) and (Q). In particular, and assuming now that (Qx) and Sx in  are (Q) and S, the directory , a determination is first made whether (Q) is empty (step ). Here, and again, (Q) is likely not initially empty, although such an event could occur in the case where the local and remote queues  can themselves process all groups from (Q) and (Q). Assuming that (Q) is not initially empty, then, but instead has a group, such a group is selected and removed from (Q) and it is determined whether such group is already in the discard bin (D) as having been processed (step ).","If the group selected and removed from (Q) has already been processed and is therefore in (D), the algorithm returns to step (), where it is again determined whether (Q) is empty. However, if the group selected and removed from (Q) has not already been processed and is therefore not in (D), the algorithm continues by searching for an entry  for the selected group in the cache  or directory  corresponding to (Q), which in this case is the directory  (step ).","If no such entry  for the selected group is found in the directory , the process continues by moving the group out of (Q) to (D) (step ), and then returning to step (), where it is again determined whether (Q) is empty. Note that since there is no next queue after (Q), the selected group cannot be further processed. However, if such an entry  for the selected group is found in the remote cache , the algorithm places each newly discovered group that the selected group is a member of into the search bin (S) and moves the selected group to the discard bin (D) (step ), and in addition populates all lower level caches  with an entry  corresponding to the selected group (step ). Note, of course that with regard to (Q) and the directory , local and remote caches  need be so populated. Thereafter, the algorithm continues by returning to step , where it is determined whether any group in (S) (i.e., the newly discovered group(s)) matches any group in (V) (i.e., the validated target group or groups). Of course, if indeed a group in (S) is found to match an item in (V), the algorithm ends with a match, and the algorithm returns a \u201cyes\u201d as at step . Otherwise, the algorithm continues by moving all groups in S to the local queue (Q) as at step , and the algorithm continues back with (Q) being processed.","In so doing, the algorithm by way of (Q) develops all possible paths from the user to any of the validated target groups to the extent possible with the directory . As may now be appreciated, assuming a match is not found, (Q) fills up with more newly discovered groups as the process iterates and empties until all groups in (Q) are processed by way of the directory  to the discard bin (D).","Significantly, any groups newly discovered by way of (Q) and the directory  are first processed by way of (Q) and the local cache . Thus, and again, operations at the directory , which are presumed to be more costly, do not occur with regard to the newly discovered groups until all possible operations at the local and remote caches  are exhausted, as occurs when (Q) and (Q) are empty.","When in fact (Q) is found to be empty at step , processing can go no further inasmuch as there is no (Q) in this particular scenario, and is therefore complete. In particular, the algorithm ends without a match, and the algorithm returns a \u201cno\u201d (step ).","It should now be appreciated that the algorithm of the present invention is designed to perform the lowest-cost operation first before performing any higher cost operation. As should be appreciated, the algorithm although disclosed in terms of three levels of storage (i.e., the local and remote caches  and the directory ) could instead be applied to any other number of levels of storage, including 2, 4, 5, 6, 7, and the like, by defining a like number of queues. Accordingly, the algorithm of the present invention may be applied to any multi-level storage arrangement of cached user-group information without departing from the spirit and scope of the present invention.","The programming necessary to effectuate the processes performed in connection with the present invention is relatively straight-forward and should be apparent to the relevant programming public. Accordingly, such programming is not attached hereto. Any particular programming, then, may be employed to effectuate the present invention without departing from the spirit and scope thereof.","In the present invention, a digital rights management (DRM) and enforcement architecture and method allow the controlled rendering or playing of arbitrary forms of digital content, where such control is flexible and definable by the content owner\/developer of such digital content. The architecture allows and facilitates such controlled rendering, especially in an office or organization environment or the like where documents are to be shared amongst a defined group of individuals or classes of individuals. Such architecture allows content to be licensed to a user based on the user being a member of a group, where such group membership is determined at least in part based on cached group information.","It should be appreciated that changes could be made to the embodiments described above without departing from the inventive concepts thereof. For example, although the present disclosure describes determining group membership from the user to the group, such determination may alternatively be made from the group to the user without departing from the spirit and scope of the present invention. It should be understood, therefore, that this invention is not limited to the particular embodiments disclosed, but it is intended to cover modifications within the spirit and scope of the present invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of the embodiments of the present invention, will be better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there are shown in the drawings embodiments which are presently preferred. As should be understood, however, the invention is not limited to the precise arrangements and instrumentalities shown. In the drawings:",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4A","FIG. 4"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 10","FIG. 8","FIG. 9"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 12","FIG. 8"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 13","FIG. 8"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIGS. 15 and 16","FIG. 14"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 17A and 17B","FIG. 8","FIGS. 15 and 16"]}]},"DETDESC":[{},{}]}
