---
title: Automating software security restrictions on system resources
abstract: Security components of managed computers are configured using inoculation data. Inoculation data can be retrieved from an inoculation data provider. The inoculation data provider analyzes unauthorized software applications to develop inoculation data. The inoculation data configures the security component to deny access to resources to unauthorized software applications. Inoculation data can be embedded into a script, which is distributed via a management protocol to one or more managed computers from a management computer. Resources can include files, storage paths, memory, registry keys, processor priority, services, dynamic link libraries, archives, browser cookies, and/or ActiveX controls, Java applets, or classes thereof.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08046831&OS=08046831&RS=08046831
owner: Actiance, Inc.
number: 08046831
owner_city: Belmont
owner_country: US
publication_date: 20060302
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims priority to U.S. Provisional Patent Application Nos. 60\/657,985, filed Mar. 2, 2005 and 60\/657,962, filed Mar. 2, 2005, both of which are incorporated by reference herein for all purposes. Additionally, this application is related to U.S. patent application Ser. No. 11\/368,029, filed Mar. 2, 2006 and entitled \u201cAUTOMATING SOFTWARE SECURITY RESTRICTIONS ON APPLICATIONS\u201d, which is incorporated by reference herein for all purposes.","The present invention relates to the field of computer security, and more particularly, to protecting computers against the installation or execution of unauthorized software. Unauthorized software applications can include self-propagating software applications, such as computer viruses, trojans, and worms; software intended to commercially exploit users, such as spyware or adware; malicious software or malware; surveillance applications such keyloggers, screen capturing programs, and web tracking programs; and software intended to conceal its own existence and\/or the existence of other applications, such as rootkits; as well as any other type of software application, script, macro, or other executable instructions intended to operate on a computer system without the permission of the computer user and\/or a system administrator.","One approach to protecting against the execution of unauthorized software on a computer is to scan the computer periodically for the presence of such software, in memory and on disk. If unauthorized software is found, the software can be removed. There are several problems with this approach. Performing the scan can take a significant amount of system resources (e.g., CPU cycles, disk accesses), even when done in the background. This leads some users to avoid the procedure. Yet to have maximum effect, the scan should be performed frequently. Furthermore, the scan only detects unauthorized software that is already present on the computer. Therefore, unauthorized software may have already caused inconvenience or damage by the time it is detected and removed.","A different approach is to prevent unauthorized software from installing on the computer in the first place. This approach uses security features provided by the operating system. A system administrator can create and deploy software restrictions that prevent unauthorized software from installing, executing, or accessing computer resources.","Existing solutions using this approach require system administrators to gather information about unauthorized software, and to use this information to create software restrictions that protect against the software. Previously, the process used to create and update software restrictions requires the system administrators to manually input information about the unauthorized software. This manual process is inefficient and time-consuming. In some cases, the system administrator must actually have a copy of the software application to create an effective software restriction that blocks this software application. Thus, system administrators are often reacting to unauthorized software applications (and repairing the damage wrought by these applications), rather than preventing them from being executed in the first place. Moreover, the creators of unauthorized software may change these software applications frequently to produce many variants to bypass detection and previous software restrictions. As a result, existing approaches require system administrators to be constantly creating and updating software restrictions to protect against each variant.","It is therefore desirable for a system and method to automatically generate inoculation data to implement software restrictions that prevent authorized software applications from executing and\/or accessing system resources. It is further desirable that the system and method to readily deploy inoculation data to managed computer systems to facilitate software restrictions in response to new or frequently changed unauthorized software applications. It is further desirable that the system and method disable countermeasures and defensive mechanisms of unauthorized software applications to facilitate their removal. It is also desirable for the system and method to implement preventative software restrictions against unauthorized software applications prior to any appearance of the applications on any managed computers.","Security components of managed computers are configured using inoculation data. Inoculation data can be retrieved from an inoculation data provider. The inoculation data provider analyzes unauthorized software applications to develop inoculation data. The inoculation data configures the security component to deny access to resources to unauthorized software applications. Inoculation data can be embedded into a script, which is distributed via a management protocol to one or more managed computers from a management computer. Resources can include files, storage paths, memory, registry keys, processor priority, services, dynamic link libraries, archives, browser cookies, and\/or ActiveX controls, Java applets, or classes thereof.","Security components, which include access control components and other defensive mechanisms of computer systems and their operating systems, protect against unauthorized software applications. Security components may be built into an operating system and\/or may be an application separate from the operating system. Security components typically must be configured to identify and protect against specific unauthorized software applications. Inoculation data is data used to configure one or more security components to protect against unauthorized software applications. The set of inoculation data configuring security components to protect against unauthorized software applications are referred to collectively as software restrictions.","An embodiment of the invention automatically generates inoculation data to prevent unauthorized software applications from executing and from accessing system resources, such as memory; disk storage; processor threads; operating system and program services; configuration databases and files, such as the Windows registry; dynamic link libraries (DLLs) and equivalents; paths, .ZIP, .JAR, .CAB, and other types of archives; browser cookies; ActiveX controls, Java applets, or classes thereof, and processor priority. An embodiment of the invention further enables the deployment and installation of inoculation data on one or more managed computer systems. Scripts facilitate the configuration of security components with inoculation data implementing one or more software restrictions.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["110","105","120","130","140","150","130","140"]},"In an embodiment, data collector software component  is an automated reporting system, analyzer  is includes applications and\/or trained users, and the update software component  is a web-crawler (also known as a spider or a bot). The reporting system receives submissions about suspected or known viruses, adware, spyware, etc. The analyzers review submissions and determine if information collected about a particular software program  is enough to characterize it and to include it in the database . In another embodiment, the analyzer  is a software component.","Data collector software component  can include system monitoring and reporting applications operating on numerous computer systems. Data collector software component  can be built into other anti-spyware, anti-virus, firewall, or other security applications to facilitate gathering information on new unauthorized software applications. Data collector software component  can also be installed on honeypot computer systems, which are systems that are configured to be deliberately exposed to unauthorized software applications to gather information about new unauthorized software applications.","A further embodiment of the data collector software component  can use data extracted from unauthorized software applications with publicly available or private Internet search engines to search for web sites and other network locations hosting the unauthorized software application. These web sites and network locations can be analyzed to identify distribution methods of unauthorized software applications, such as ActiveX controls, Java applets, or classes thereof, as well as potential new unauthorized software applications. Similarly, instant messaging networks, peer-to-peer networks, and other types of overlay and \u201cgray\u201d networks can be monitored for suspicious data payloads.","The description  of unauthorized software stored in the database  includes one or more of the items listed in Table 1. Some of the items describe an unauthorized software program in terms of what it is. That is, these items identify characteristics of the software itself. Some of the items describe the software in terms of what it does when it installs and\/or executes on a computer.",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Item","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ClassId","software needs an identifier in order to install under"]},{"entry":[{},"Windows; chosen by software author"]},{"entry":["Filename","name of the file containing the unauthorized"]},{"entry":[{},"software, or a file used by the software"]},{"entry":["Uniform Resource","software is downloaded from this address"]},{"entry":"Locator"},{"entry":["Directory Location","unauthorized software writes files to this location"]},{"entry":["Service Name","unauthorized software starts this Windows service"]},{"entry":["Registry Key","unauthorized software writes values to this"]},{"entry":[{},"key in the registry"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The script generator  extracts the software descriptions  from the database  to automatically create a script including inoculation data . The script  is a file which describes a software restriction . When applied to one or more managed computers , the software restriction  protects those computers from the installation and\/or execution of the unauthorized software described by the descriptions . (Software restrictions will be discussed in more detail in connection with .)","Advantageously, the generator , produces the script  in a format that is directly usable by the management workstation . Generating a script including inoculation data thus involves translating, or mapping, the descriptions  into a software restriction  using this format. The script format will be described in more detail in connection with . The translation procedure will be described in more detail in connection with .","Once created, the software restriction  in the script  is applied to one or more managed computers  by a system administrator using a management workstation . The script  is downloaded or copied to the workstation . Using a management utility  on the workstation , a system administrator imports the software restriction  from the script , where importing consists of associating a policy with a script file.","In an embodiment, the workstation  and the managed computers  use a version of the Microsoft Windows\u00ae as an operating system, and also use Microsoft ActiveDirectory\u00ae as a directory service to manage network resources. In one embodiment, the utility  is the Group Policy Object (GPO) extension (\u201csnap-in\u201d) to Microsoft Management Console (MMC). In another embodiment, the utility  is the Microsoft SECEDIT program, a utility that allows an administrator to import and apply the script  through command-line arguments or a script rather than through user interaction.","After importing the software restriction , the system administrator applies the restriction to one or more managed computers . The policy can be applied to one computer, any subset of managed computers , or all of the managed computers . The application of the software restriction  to a managed computer  stores the software restriction  in a registry  on that managed computer . The registry  is a configuration database that stores many types of computer-specific and user-specific data associated with a particular managed computer .","Using the script file  to apply the software restriction  greatly simplifies the process of hardening one or more managed computers  against unauthorized software. A script file  contains a description of a particular security policy . Therefore, instead of using a management utility to manually enter all the data in this description (which may contain multiple unauthorized programs), the system administrator simply associates a policy with script file .","The software restriction  protects managed computer  against unauthorized software as follows. As shown in , the managed computer  contains one or more executable programs , such as programs and . One or more of the executable programs  may be considered unauthorized programs. The managed computer  also includes the registry , an operating system , and a security component . In an embodiment, the security component  can be included within the operating system . For example, the Group Policy Management Console component of the Microsoft Windows operating system includes objects, such as group policy objects, adapted to selectively block execution of programs. To implement software restrictions, group policy objects can be installed directly on managed computers or distributed from a management workstation to one or more managed computers via a data communications network, for example using the Microsoft Windows Active Directory replication feature, LDAP, or any other management protocol. Similar access control enforcement mechanisms are available for many other operating systems, such as Unix, Linux, AppleOS, and Solaris, to allow, block, or throttle, or otherwise control access to applications and system resources. System administrators can select all or a portion of the computer systems under their control to receive and install the inoculation data, thereby implementing the software restrictions.","The software restriction  protects managed computer  against unauthorized software as follows. As shown in , the managed computer  contains one or more applications , operating system , and system resources , and controls access to system resources  based on inoculation data settings  within software restriction . In an embodiment, security component  is part of operating system . In embodiments of the invention, the security settings  may be stored in the registry , any other type of store of system configuration information, as part of the security component , and\/or in a separate file or data structure stored by the managed computer ; a management workstation , discussed above; or by any other data storage resource connected with the managed computer  via a data communications network.","In an embodiment, each security setting  defines a specific system resource (e.g., file, directory, Windows service, registry location). Each security setting  further defines permissions for that resource, where a permission specifies an access type (e.g., read, execute, write, create) for one or more users or groups of users. File System Setting A controls access to the file system (files and directories). Registry Setting B controls access to the registry. Services Setting C controls access to Windows services.","For example, the installation procedure for most programs involves copying files and\/or writing to a configuration database known as the registry. A software restriction  protects against the installation of an unauthorized software program  by denying access by unauthorized software applications to the relevant file, directory, or registry location. Software restriction  can provide additional protection against execution of an unauthorized software program  by denying the program permission to execute.","As discussed in connection with , before a software restriction  is created, the unauthorized software  is first characterized, and its description  stored in the database .  is a block diagram illustrating one embodiment of the database . The database  comprises one or more tables , with each table containing rows . Each row  represents a set of one or more attributes describing a particular unauthorized software program . A description  thus comprises one or more rows  of one or more tables.","In the embodiment of , the description  is split among multiple tables A and B. One table (A) contains columns for those items, or attributes, that identify an unauthorized software program  (i.e., what it is). This identifier table A contains a Name column A and a Class Identifier column B. The other table (B) contains columns for those items that do not strictly identify the program, but can be used to detect it based on how it behaves during installation. This detection table B contains a Location column A and a Type column B. Location column A represents a location accessed by the unauthorized software program . The type of location depends on the value in Type column B, e.g., file, directory, registry, service.","A software program has at most one set of identification attributes. However, a particular program may have multiple detection attributes, since it may access multiple locations of various types. Therefore, the complete set of attributes describing a program can include multiple rows from Table B.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 4","FIG. 5"],"b":["130","140","250","175","410","105","105","420","430"]},"In this example, row  describes a program which can be identified by name (\u201cBADBUG.VBS\u201d). This description corresponds to a single inoculation data setting  which protects against this unauthorized program  by denying execution of \u201cBADBUG.VBS\u201d to all users.","In this example, row  describes a program which installs files in the Windows system directory. This description corresponds to inoculation data setting  which protects against this unauthorized program  by denying normal users write\/create access to the Windows system directory.","In this example, row  describes a program that starts the \u201cMessenger\u201d service. This description corresponds to inoculation data setting  which protects against this unauthorized program  by denying users the ability to start the \u201cMessenger\u201d service.","The concepts of identifying a program by attributes such as a filename, path location, contents or a hash or signature thereof, registry keys or other configuration data, residuals, such as data left behind during installation, or any other characteristic are straightforward and embodiments of the database may include entries with data adapted to identify programs using these attribute. The concept of detecting installation of a program by actions on the registry will now be explained in more detail.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 5","FIG. 5"],"b":["195","180","195","180","195","510","510","520","510","530","520","540","550","560","520","510","195","510","520","510","520"]},"Several registry keys are involved in software installation. Software programs store their configuration information as under the HKLM\\Software key (A). Therefore, the installation process for a software program creates a vendor key B (usually the company name), and then under that key, a subkey C for the particular program. In the example registry of , the vendor key is \u201cAcme\u201d and the program subkey is \u201cFoo.\u201d The install process may also create default value entries  under the program subkey.","Another registry key often used during software installation is HKEY_CLASSES_ROOT (HKCR). This subkey is used by Windows software that includes one or more Component Object Model (COM) classes. COM classes are simply pieces of functionality and data that a program can call at runtime to perform a specific task. For example, the behavior of a button on a form might be defined by a COM class. When that button class is invoked by an application and the user clicks the button, the functionality defined by that class is executed.","Classes are identified in the Registry by unique Class Identifiers (CLSIDs), which are represented as a 32-character hexadecimal number. When the installation process installs a Windows COM class, it creates a key for that class under HKCR\\CLSID. In the example registry of , the key is HKCR\\CLSID\\02C7E642-7E04-11D0-9D99-00A0C908DB96.","File associations are also stored under the HKCR key. Thus, if an unauthorized program is associated with a file type, the install process reads the subkeys of HKCR to find one for the appropriate file type, and writes value entries to that subkey.","Further types of rules can be stored in the registry in a similar manner.","In an embodiment, software restriction  can be manually entered into the registry or other configuration database of the managed computer system. In a further embodiment, the utility of a software restriction  is improved by generating and saving the software restriction  as a script  that is directly usable by the registry utility .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 6","b":["170","175","170","190","190","170"]},"In an embodiment, the script  is a text file, divided into headers  and entries . A header  is a string enclosed in brackets. An entry  is a string of comma-separated values. If the string spans more than one line, the lines are separated by a backslash character (\u2018\\\u2019). Each entry  is located below, and associated with, a header . A section  contains a header  and its one or more associated entries .","In one embodiment, the script  contains an introductory section  containing the headers  and entries  shown in Table 2. The entries in introductory section  identify and describe the script format. The $CHICAGO$ signature signifies a format that works with versions of multiple Windows (Windows 95 and later).",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Introductory Section"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Unicode"]},{"entry":[{},"Unicode=Yes"]},{"entry":[{},"Version"]},{"entry":[{},"Signature=\u201c$CHICAGO$\u201d"]},{"entry":[{},"Revision--1"]},{"entry":[{},"[Profile Description]"]},{"entry":[{},"Description=Protecting a system against unauthorized software"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Each of the remaining sections (A, B, and C) corresponds to one of the inoculation data settings discussed in connection with . File System section A corresponds to security setting A, and contains entries that describe user and program permissions for particular files and directories. Registry Key section B corresponds to security setting B, and contains entries that describe user and program permissions for particular registry keys. Services section C corresponds to security setting C, and contains entries that describe user and program permissions for particular Windows services.","The entries in these security settings sections represent three parameters, illustrated in . In an embodiment, there are three parameters separated by commas. The first parameter is the pathname  of the file, directory, or registry key. The second parameter  determines whether or not the permission is inherited by subdirectories\/subkeys: a value of 0 propagates inheritable permissions; a value of 1 prevents the permission from being replaced; and a value of 2 replaces existing subdirectory\/subkey permissions with inheritable permissions. The last parameter  is a discretionary access control list (DACL) which describes the permission.","The DACL parameter  is a string expressed in Microsoft's Security Descriptor Definition Language (SDDL). The format of the DACL string  is illustrated in .","The first portion  of the DACL string is \u2018D: \u2019, which identifies the descriptor as a DACL. The second portion  contains a flag that determines whether or not inheritable permissions are allowed: \u2018AI\u2019 means Automatic Inheritance; \u2018AR\u2019 means Automatic Inheritance Requested; and \u2018P\u2019 means Protect Against Inherited Permissions.","The final portion of the DACL string comprises one or more access control entries (ACEs). Each ACE  is enclosed in parentheses and includes fields A-D which combine to define permissions for a particular type of user account. Permissible values for the ACE_Type field include: A (Allow access); AU (Enables auditing); and D (deny access). Permissible values for the ACE_Flags field include: CI (Subdirectories\/subkeys will inherit this ACE); OI (files will inherit this ACE); and NP (no inheritance).","Permissible values for ACE_Permissions_Mask include: FA (all file permissions); FR (file generic read); FW (file generic write); FX (file generic execute); GA (all generic permissions); GR (generic read); GW (generic write); GX (generic execute); KA (all registry key permissions); KR (registry key generic read); KW (registry key generic write); and KX (registry key generic execute). The ACE_Permissions_Mask is a bitmask, and therefore these values can be used in combination.","Permissible values for User_Account include: AN (anonymous login); AO (account operator); AU (authenticated user); BA (built-in administrator); BG (built-in guest); BU (built-in user); CA (certificate server administrator); DA (domain administrator); DG (domain guest); DU (domain user); IU (interactive user); LA (local administrator); NS (network service account); PU (power user); SO (server operator); SY (local system); and WD (everyone).","The first field A of the ACE string is a type field. The second field B is a flag. The third field C contains permissions. The last field D of the ACE string specifies the type of user account which the ACE  applies to. The fields of the ACE string are separated by semicolons. Two additional semicolons (for a total of three) are used to separate the permission field C and the user account field D.","The script format described in  is used by the script generator . The generator  maps or translates the descriptions  stored in the database  into a script  having this format. An embodiment of the translation process is illustrated in the flowchart of .","The translation process  begins at step , where a text file with the extension \u201cINF,\u201d is opened, and database  is opened. Next, at step , generator  writes an introductory section  to the file. (Introductory section  and its contents were described in connection with .) At step , generator  writes File System section A to the file. At step , generator  writes Registry Keys section B. At step , generator  writes Services section C to the file. Finally, at step , generator  closes script file  and database . Note that the sections of the INF script file can appear in any order. Therefore, the order of steps - is unimportant and can vary.","The flowcharts in  further illustrate the details of writing the various sections to script file  according to embodiments of the invention.  illustrates the WriteRegistryKeysSection (shown in  as step ). The process of writing a section begins with step , where a header is created for Registry Keys section B. This section will now be populated with entries for registry keys associated with unauthorized software, extracted from database .","Detection table B in database  contains various Locations (A) accessed by unauthorized software. A Type (B) is associated with each of the Locations. In step , detection table B is queried to find all rows having a value in the Type column B that indicates the location type is a registry key. For each matching row, step  extract the Location string and appends it to the string \u201cHKLM\\Software.\u201d The result is a full-qualified registry key associated with the unauthorized software.","In step , the resulting string is written as an entry in Registry Key section B. In another embodiment, database  stores the fully-qualified path including \u201cHKLM\\Software\u201d and no appending is necessary. At step , the process determines whether or not more matching rows remain to be processed. If No, the process skips to step . If Yes, steps - are repeated until all rows returned by the query have been processed.","At step , a query is made on identification table A to extract rows with a value in the Class Identifier column B. For each matching row, the Class Identifier string is extracted at step  and appended to the string \u201cHKCR\\ClassId.\u201d The result is a full-qualified registry key associated with the unauthorized software. A DACL string  is appended to the fully-qualified registry key. (The DACL string  was described earlier in connection with .)","In step , the resulting string is written as an entry in Registry Keys section B. In one embodiment, DACL string  is a constant, such that the same DACL string is used for all registry key Locations in identification table A. In another embodiment, another column in identification table A stores a DACL string specific to the particular registry key Location.","At step , the process determines whether or not more matching rows remain to be processed. If No, the process ends. If Yes, steps - are repeated until rows returned by the query have been processed.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 11","FIG. 9","FIG. 7"],"b":["930","1110","640","1120","310","330","1130","730","730"]},"In step , the resulting string is written as an entry in File System section A. In one embodiment, DACL string  is a constant, such that the same DACL string is used for all, file or directory Locations in identification table A. In another embodiment, another column in identification table A stores a DACL string specific to the particular file or directory Location. At step , the process determines whether or not more matching rows remain to be processed. If No, the process is over. If Yes, steps - are repeated until rows returned by the query have been processed.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 12","FIG. 9","FIG. 7"],"b":["950","1210","640","1220","310","330","1230","730","730","1240","640","1250","1260","1220","1240"]},"In various embodiments, a general purpose computer can be used to implement the functionality of generator software . Generally, in terms of hardware architecture, the computer includes a processor, memory, and one or more input or output (I\/O) devices or peripherals that are communicatively coupled via a local interface. The local interface can be, for example but not limited to, one or more buses or other wired or wireless connections, as is known in the art. The local interface may have additional elements (omitted for simplicity), such as controllers, buffers, drivers, repeaters, and receivers, to enable communications. Further, the local interface may include address, control, and data connections to enable appropriate communications among the aforementioned components.","The processor is a hardware device for executing software, particularly that stored in memory. The processor can be any custom made or commercially available processor, a central processing unit (CPU), an auxiliary processor among several processors associated with the computer, a semiconductor based microprocessor (in the form of a microchip or chip set), a microprocessor, or generally any device for executing software instructions.","The memory can include any one or combination of volatile memory elements (e.g., random access memory (RAM, such as DRAM, SRAM, SDRAM, etc.)) and nonvolatile memory elements (e.g., ROM, hard drive, tape, CDROM, etc.). Moreover, the memory may incorporate electronic, magnetic, optical, or other types of storage media. Note that the memory can have a distributed architecture, where various components are situated remote from one another, but can be accessed by the processor.","The software in the memory may include one or more separate programs, each of which comprises an ordered listing of executable instructions for implementing logical functions. In this example embodiment, the software in the memory includes one or more components of the system for communicating abnormal medical findings, and a suitable operating system. The operating system essentially controls the execution of other computer programs and provides scheduling, input-output control, file and data management, memory management, and communication control and related services, operating system may be any operating system, including, but not limited to, Unix, Linux, Windows\u00ae, AppleOS, etc.","The method for automating the creation of scripts including inoculation data is a source program, executable program (object code), script, or any other entity comprising a set of instructions to be performed. When a source program, then the program needs to be translated via a compiler, assembler, interpreter, or the like, which may or may not be included within the memory, so as to operate properly in connection with the operating system.","The peripherals may include input devices, for example but not limited to, a keyboard, mouse, etc. Furthermore, the peripherals may also include output devices, for example but not limited to, a printer, display, facsimile device, etc. Finally, the peripherals may further include devices that communicate both inputs and outputs, for instance but not limited to, a modulator\/demodulator (modem; for accessing another device, system, or network), a radio frequency (RF) or other transceiver, a network device such as a bridge, a router, etc.","If the computer is a personal computer, workstation, or the like, the software in the memory may further include a basic input output system (BIOS). The BIOS is a set of essential software routines that initialize and test hardware at startup, start the operating system, and support the transfer of data among the hardware devices. The BIOS is stored in the ROM so that the BIOS can be executed when the computer is activated.","When computer is in operation, the processor is configured to execute software stored within the memory, to communicate data to and from the memory, and to generally control operations of the computer in accordance with the software.","It should be noted that the method for automating the creation of scripts including inoculation data can be stored on any computer readable medium for use by or in connection with any computer related system or method. In the context of this document, a \u201ccomputer-readable medium\u201d can be any means that can store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, system, or device. The computer-readable medium can be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, system, device, or propagation medium. A non-exhaustive example set of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM, EEPROM, or Flash memory), and a portable compact disc read-only memory (CDROM). Note that the computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via for instance optical scanning of the paper or other medium, then compiled, interpreted or otherwise processed in a suitable manner if necessary, and then stored in a computer memory.","In an alternative embodiment, where the method for automating the creation of scripts including inoculation data is implemented in hardware, it can be implemented with any or a combination of the following technologies, which are each well known in the art: a discrete logic circuit(s) having logic gates for implementing logic functions upon data signals, an application specific integrated circuit(s) (ASIC) having appropriate combinatorial logic gates, a programmable gate array(s) (PGA), a field programmable gate array(s) (FPGA), etc.","The foregoing description has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obvious modifications or variations are possible in light of the above teachings. The embodiments discussed, however, were chosen, and described to illustrate the principles of the invention and its practical application to thereby enable one of ordinary skill in the art to utilize the invention in various embodiments and with various modifications for a variety of uses. Such modifications and variations are within the scope of the invention as determined by the appended claims when interpreted in accordance with the breadth to which they are fairly and legally entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the invention can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the present invention.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 1"],"b":"140"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 4","FIG. 1","FIG. 1"],"b":["140","175"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 6","FIG. 1"],"b":"170"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 8","FIG. 7"],"b":"730"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 9","FIG. 1"],"b":"160"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 10","FIG. 9"],"b":"930"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 11","FIG. 9"],"b":"940"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 12","FIG. 9"],"b":"950"}]},"DETDESC":[{},{}]}
