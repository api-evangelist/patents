---
title: Method and system for administration of storage objects
abstract: An exemplary embodiment of the present invention provides a method of generating a representation of a storage network. The method includes obtaining an request from a client system to view contents of a node in a tree model. The method also includes receiving tree information corresponding to the node and adding the tree information to the tree model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311319&OS=09311319&RS=09311319
owner: Hewlett Packard Enterprise Development LP
number: 09311319
owner_city: Houston
owner_country: US
publication_date: 20090827
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS"],"p":["A business network may include large number of storage objects, such as multiple disk arrays, network-attached storage (NAS) devices, and the like. Moreover, a large network may contain thousands of storage devices. To provide a client system access to the storage network, the storage network may be represented graphically to the client system in the form of a hierarchical tree of folders and subfolders. The client system may view, navigate, and manage all of the folders and files included in the tree.","Typically, an image of the network will be created and maintained by a central server that acquires information from each storage device in the network. The server aggregates all of the storage devices in the network into a single tree model representing the entire network. Maintaining the tree model for the entire network may use significant processing resources.","Exemplary embodiments of the present invention provide techniques for displaying a large number of objects in a hierarchical tree, while reducing the processing resources used by the server that maintains the tree. In exemplary embodiments of the present invention, the server accesses and updates those parts of the storage tree that are currently being viewed by a client system and adds those parts of the tree to a tree model. As used herein, the term \u201ctree model\u201d refers to the representation of the storage network that is stored on the server and used to generate the graphical representation of the storage network that is displayed to a client.","The storage network may include several root nodes or tree sources from which the tree model may be generated. Changes to the files or tree structure of any particular tree source may cause the tree source to send an event to the server that causes the server to update the tree model. In this way, the server retrieves information about nodes that have potentially changed and are actively being viewed by a client system. Thus, the server may generate a smaller tree model that may not include network resources that are not being accessed by a client, and the processing resources devoted to maintaining the tree model may be reduced.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","104","100","104","102","102"]},"The client system  will generally have a processor which may be connected to a display for displaying a graphical user interface (GUI)  containing the tree model. The client system  can also have a keyboard, and one or more input devices, such as a mouse or touch screen. The client system  can have other units operatively coupled to the processor, including one or more tangible, machine-readable storage media, such as a storage system for the long-term storage of operating programs and data, including the programs and data used in exemplary embodiments of the present techniques. Further, the client system  can have one or more other types of tangible, machine-readable media, for example, read-only memory (ROM), random access memory (RAM), or hard drives in a storage system. In exemplary embodiments, the client system  may include a network interface adapter, for connecting the client system  to the server .","The server  may provide the client system access to the storage network . In some exemplary embodiments, the storage network  may be a local area network (LAN), a wide-area network (WAN), or another network configuration. The server may also include tangible, machine-readable media, such as a storage system for the long-term storage of operating programs and data, including the programs and data used in exemplary embodiments of the present techniques.","The server  may be communicatively coupled to a plurality of tree sources . As used herein, the term \u201ctree source\u201d refers to any physical or virtual storage device that handles a hierarchical tree of storage objects. For example, the tree source  may be a storage area network (SAN), network attached storage (NAS), hard disk, redundant array of inexpensive disks (RAID), a disk drive, a drive partition, a flash drive, and the like. Each tree source  provides tree information to the server  regarding the hierarchy of storage objects  accessible through the tree source .","Each tree source  may handle a hierarchy of storage objects , which are labeled in  as \u201cA,\u201d \u201cB,\u201d \u201cC,\u201d \u201cD,\u201d and \u201cE\u201d. The storage objects  may be physical devices, virtual devices, or a combination thereof. For example, the storage objects  may include virtual disk drives, RAID partitions, root directories, file folders, data tables, and the like. Each storage object may store various files and documents, for example, images, video, audio, text documents, applications, and the like. The tree sources  and the storage objects  may be used to store data, and may be referred to as \u201cnodes.\u201d Each tree source  may be referred to as a \u201croot node.\u201d Furthermore, in some embodiments, the tree source  may include more than one root node. For purposes of the present description, a \u201cparent\u201d node is a node that is higher in the tree hierarchy relative a lower or \u201cchild\u201d node and includes the child node. A \u201cchild\u201d node is a node that is lower in the tree hierarchy relative to a parent node and is accessible through the parent node. Each node may have respective parent nodes and child nodes. Each tree source  may send tree information to the server  regarding the respective tree source and its child nodes, as discussed below.","The server  may receive tree information from the tree sources  and generate a hierarchical tree model that represents the nodes included in the storage network . The tree information may include all of the information about the storage network that may be displayed on the GUI  of the client system , for example, the names of files and folders, the hierarchical structure of the tree, and other details about the files or folders such as size, date modified, file type, and the like. The tree model may include some or all of the tree information received from the tree sources .","In exemplary embodiments, only those nodes that are actively viewed by a client system  may be represented in the tree model. Relevant parts of the tree may be communicated to the client system  to enable the client system  to retrieve and store files to the network and manipulate the tree model, such as by adding or removing file folders. To generate the tree model, the server  may include a tree integrator  which generates a tree table. The term \u201ctree table\u201d refers to the table of tree information that is used to determine the currently viewed structure of the storage tree and whether a particular node in the tree has changed. In some exemplary embodiments, the tree sources  are registered in a distributed registry, and the tree integrator  accesses the distributed registry to determine the name and location of all the available tree sources . The distributed registry may be available locally to each server  included in the network . In some embodiments, the distributed registry may also be available locally on the client . The server  may register an available tree source  to a local discovery component, which may be stored on a tangible machine-readable medium included in the server . The local discovery component may distribute that registration to all other members of the discovery group, including the client , and other servers in the network . A client  may access a particular tree source  by performing a lookup on its local discovery component, which may contain entries from the discovery group. Each discovery component may have various algorithms that enable it find other discovery components on a local and wide area network.","The tree integrator  receives tree information from the tree sources  to generate an initial tree table, as discussed below. As various client systems  access additional parts of the storage network , the tree integrator  may obtain tree information from child nodes of the tree sources  and add those nodes to the tree table. The server may use the expanded tree table to generate the tree model. The server  may send the tree model to the client system  to be displayed in the GUI . As discussed above, the network  may include a plurality of servers . In such embodiments, the tree integrator  may be included in only one of the servers . Furthermore, the server  that includes the tree integrator  may or may not include a tree source .","To keep the tree model updated, each node may be associated with tree information packets, referred to herein as a \u201cnode cookies\u201d  and a \u201cchild cookies\u201d . As the tree source  makes changes to the storage network , the tree source  may also change the node cookies  and child cookies  to provide an indication to the tree integrator  that some part of the storage network  may have changed. The cookies  and  may be any sequence of characters that uniquely identify the state of the node. For example, the cookies  and  may include an integer value, which may be incremented for each change, a hash value derived from attributes of the nodes, a time sequences, random numbers, and the like.","The node cookies  may be used to indicate that the respective node has changed, for example, files for folders have been added or deleted. Accordingly, if a node is changed, the respective node cookie for that node may also be changed. The child cookie  may be used to indicate that one or more of a node's child nodes have changed. Accordingly, if any of the node's child nodes are changed, the child cookie of the respective node will also be changed. For example, if a new file is saved to a particular node, that node's node cookie may be incremented to indicate a change in that node. Additionally, the child cookie in the node's parent nodes may also be incremented to indicate a change in a child node of the parent.","In some exemplary embodiments, the node cookies and child cookies may be stored on the respective node to which the cookie is associated. In other exemplary embodiments, some or all of the node cookies and child cookies may be stored on the server  or the respective tree source . Techniques for generating a tree table of the network  may be better understood with reference to .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 3"],"b":["200","202","112","108","112","112"]},"After generating the initial tree model, the method  of  may advance to block , wherein the server  receives an indication to view the contents of a node. When a user of the client system  chooses to view the contents of a node such as by opening a folder corresponding with the node, the tree table and tree model may expand to include the child nodes. Accordingly, the client system  may register a viewing registration for the node with the server . The viewing registration indicates to the server  that one of its client systems  is actively viewing the contents of that node. Conversely, when a client system  closes a node, the client system  unregisters the node with the server , indicating that the client system  is no longer actively viewing the contents of the node.","Next, at block , the server  adds the registered nodes to the tree model or removes unregistered nodes from the tree model. Upon adding a new node to the tree model, the tree integrator  may add the node to the tree table, as discussed further with respect to .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["112","102","108","104","108","108","110"]},"As shown in , the initial tree table may include data for each of the tree sources , such as the current node cookie, current child cookie, prior node cookie, prior child cookie, depth of the node within the tree table, and the node's parent node, which for the tree sources  may be null. Differences between the current cookies and the prior cookies may provide an indication to the server  that the respective node or child node has changed. For example, the prior cookies may represent the state of the tree model from the perspective of the tree integrator , and the current cookies may represent the state of the tree model from the perspective of the tree source . The tree integrator  may store the prior cookies in a tangible machine-readable medium included, for example, on the server . Periodically, or by when triggered by events, the tree integrator  may retrieve the current cookies from each of the tree sources . A mismatch between the prior cookies and current cookies may indicate a change in the storage network  and may trigger the tree integrator  to update the relevant portion of the tree model. After updating the tree model, the updated tree model may be sent to the client system .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["102","1","1","104","112","104","104","108","110","102","100"]},"Additionally, the server  may also use the tree table to update the tree model. For each registered node, the server  will send events to the client system  each time that the node or one of its children has changed. The events sent to the client system  from the server  may cause the client system  to receive an updated view of the tree model. Conversely, when a client system  closes a node, the client system  unregisters the node with the server, in which case, the client server  may stop receiving events for that node. Additionally, when all viewing registrations for a node have been removed the tree integrator  may remove the nodes from the tree table and the server  may remove node from the tree model. Thus, the server  may no longer keep the node and its children updated in the tree model. Methods of keeping the tree model updated may be better understood with reference to .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5","b":["500","502","108"]},"In exemplary embodiments of the present invention, detection of node changes may be performed by the tree sources  rather than the server . Methods of detecting changes may depend on the characteristics of the physical device represented by the tree source . In some embodiments, the tree source  may periodically analyze the portion of the storage network  corresponding to the tree source  to detect differences, for example, file changes and the like. In other embodiments, the storage objects  may provide change flags or events that inform the tree source  that the storage network  has changed. In this way, system resource requirements (CPU, network, communications, memory) of maintaining the entire tree model in memory, or polling for changes, are isolated to the single tree source  that interfaces with the storage objects . Thus, the computing demands on higher levels of the system such as the server  may be reduced. In some embodiments, a change flag or event may be generated by a physical device, such as a disk drive. In other embodiments, the change flag or event may be generated by software, for example, the GUI , an application programming interface (API), and the like.","When the tree source  detects a change in one of its nodes, including the root node, for example, tree source , the tree source  sends the tree integrator  an event that notifies the tree integrator  that a change in the tree has occurred. The tree integrator  may update the tree table, starting at block . In other exemplary embodiments, the tree table and the tree model may be updated periodically and block  may be eliminated.","At block , the tree integrator  receives the current node cookie and current child cookie for each of the root nodes that have a viewing registration. As stated above, changes to a node or a child node may also result in a change to the cookies of that node. Thus, a change in the cookies of the root node may trigger an update of that node in the tree model. Furthermore, if a child cookie has changed, then the tree integrator  may recursively descend through the lower levels of the storage network  and update the tree model until it finds a child cookie that hasn't changed. For purposes of the present description, the term \u201cpresent node\u201d describes the node that is currently being analyzed by the tree integrator . The present node may start as one of the root nodes, for example, one of the tree sources .","At block , the current node cookie and the prior node cookie of the present node are compared to determine whether the present node has changed. If the current node cookie and the prior node cookie are different, the method  advances to block , wherein the server  receives updated tree information for the present node. For example, the server  may obtain file names and details, folder names, subfolder names, and the like. The updated information is saved to the tree model and the server  sends an event to the client server  indicating that one of the nodes visible to the client  has changed. For example, referring to , the current and prior node cookies for node A do not match. Accordingly, in this example, the server  may update node A in the tree model and send an event to the client server  indicating that node A has changed. The method  then advances to block . If the current node cookie and the prior node cookie are the same, the method  skips block  and advances to block .","At block , the current child cookie and the prior child cookie of the present node are compared to determine whether any of the present node's child nodes have changed. If the current child cookie and prior child cookie match for the present node, the process flow may advance to block , wherein the tree integrator  may advance to an adjacent node. The adjacent node may be any node that is at the same or higher level in the tree model compared to the present node. For example, the adjacent node may be another root node.","If the current child cookie and the prior child cookie are different, the process flow of method  advances to block , wherein the tree integrator  receives node information for all of the node's child nodes. If any of the child node's current node cookies are different from the child node's prior node cookies, the server  receives updated tree information for that child node. The updated tree information is saved to the tree model and the server  sends an event to the client system  indicating that a child node has changed. If new nodes are added or nodes are deleted, events may be sent to the client system  indicating these changes to the tree model. Next, the process flow may advance to block , wherein the tree integrator  advances to one of the child nodes of the present node.","After sending the relevant events to the client system , the process flow of method  returns to step , wherein the current and prior node cookies are compared for the next node. In other words, the present node becomes the node that the tree integrator advanced to in blocks  or . In this way, the method  may be applied recursively as it descends the tree model from the root node. The method  may be applied for each node that has an active viewing registration.","In exemplary embodiments of the present invention all of the events sent from the server  to the client  may be sent as they are generated. In some exemplary embodiments, the events may be bundled into transaction units that include several events. For example, the client system  may make a blocking call to a \u201cgetEvents\u201d method that does not return until the server  obtains events for that client system . After the actively viewed nodes have been updated, the tree table will also be updated to reflect that each node has been updated and is now current. In one exemplary embodiment, the prior node cookies and prior child cookies will be set the same value as the respective current node cookies and current child cookies.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 6","FIG. 3","FIG. 6"],"b":["1","1","1","112"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 7","b":["700","700","700","702","704"]},"The various software components discussed herein can be stored on the tangible, machine-readable medium  as indicated in . For example, a first block  on the tangible, machine-readable medium  may store viewing request receiver. The viewing request receiver may obtain a viewing registration from a client system  indicating that the client system  is actively viewing the requested node. A second block  can include a tree model generator adapted to add nodes from the storage tree to the tree model based on the viewing requests received from the client systems. A third block  can include an event generator adapted to send an even to the client system when a node has changed if the client system has a viewing registration for the node. The tangible, machine-readable medium  may also include other software components, for example, a tree table generator that is used to determine which nodes are being viewed and whether nodes of the storage tree have changed. Although shown as contiguous blocks, the software components can be stored in any order or configuration. For example, if the tangible, machine-readable medium  is a hard drive, the software components can be stored in non-contiguous, or even overlapping, sectors."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Certain exemplary embodiments are described in the following detailed description and in reference to the drawings, in which:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
