---
title: System and method to support varying maximum cryptographic strength for common data security architecture (CDSA) applications
abstract: A technique for cryptographic strength selection for at least one application is provided, in accordance with a framework for providing cryptographic support of the at least one application. Data encryption is performed at a first cryptographic strength when the at least one application is privileged to perform encryption at a first cryptographic strength. Data encryption is performed at a second cryptographic strength when the at least one application is not privileged to perform encryption at the first cryptographic strength. The first cryptographic strength is stronger than the second cryptographic strength.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07096505&OS=07096505&RS=07096505
owner: International Business Machines Corporation
number: 07096505
owner_city: Armonk
owner_country: US
publication_date: 20040227
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application is a continuation of U.S. application identified by Ser. No. 09\/533,073, filed Mar. 22, 2000, now U.S Pat. No. 6,715,077, the disclosure of which is incorporated by reference herein.","This application claims the benefit of the filing date of Provisional Application Ser. No. 60\/125,813 filed Mar. 23, 1999, and assigned to the same Assignee as that of the present invention.","This invention relates to cryptographic applications incorporating Common Data Security Architecture (CDSA). More particularly, the invention relates to systems and methods to support varying maximum cryptographic strength for CDSA applications.","Vendors that manufacture applications that require encryption\/decryption incorporate cryptographic libraries in their applications. However, for export, cryptography is controlled by Government regulations. By default, cryptographic strength is constrained to weak crypto (e.g., 56 bit DES.). Special industries, for example, financial, can use \u201cstrong\u201d crypto (e.g., 168 bit DES.). Vendors usually statically link cryptographic libraries into their applications. Vendors cannot easily change from one cryptographic library to another because the Application Programming Interfaces (APIs) vary between different vendors' libraries. The Common Data Security Architecture (CDSA) provides programmable interfaces for cryptographic and digital certificate services using a \u201cplug and play\u201d model. The CDSA Specification is attached as Appendix 1 and is available from the Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, Oreg. 97124-6497. The Specification is also available from cdsa@dbmg.com. With CDSA, security service providers may support varying strengths of cryptographic algorithms. Normally for a given implementation of CDSA, all applications will be allowed to use the union of all algorithms in cryptographic strengths provided by the registered service providers.","However, there is sometimes a need to allow the same implementation of CDSA to support the cryptographic needs of multiple applications, each of which needs to be constrained to a particular maximum cryptographic strength. For example, financial applications in non-U.S. jurisdictions may be allowed to use 168 bit strength cryptography, while non-financial applications may only be allowed to use 56 bit strength cryptography. What is needed is an improved system and a method to allow a single CDSA implementation to control the maximum cryptographic strength of various applications based on a configurable cryptographic control policy enforced by the CDSA framework.","An object of the invention is a system and method to provide an application with varying cryptographic strength based on a configurable cryptographic control policy implemented in the application.","Another object is a system and method creating a crypto context for an application implemented by the CDSA framework.","Another object is a data structure in a CDSA framework identifying exemptions or privileges contained in applications for varying the cryptographic strength of the application.","These and other objects, features and advantages are achieved in an Improved CDSA system (CDSA-I) including a standard CDSA framework coupled via an Application Program Interface to an application requiring cryptographic support. During manufacture, a cryptographic control privilege is incorporated into the application, as part of an exemption mechanism, which exemption may or may not be enforced by the CDSA framework. For maximum cryptographic strength, an application must be signed by a private key controlled by the CDSA framework vendor. Inside the CDSA framework, the corresponding public key is used to verify at runtime those applications that were appropriately signed. The CDSA framework is coupled via a Service Provider Interface (SPI) to a plurality of pluggable modules for performing cryptographic operations, storing signed digital certificates for applications, and trust policies relating to cryptographic strengths. The framework is initialized to provide the cryptographic support for the application at which time it reads a vendor-signed cryptographic control policy file that determines the cryptographic key lengths at which various algorithms are considered cryptographically strong. All APIs for cryptographic operations require a crypto context so the application then requests the CDSA framework to create a crypto context given an algorithm ID, key and key length. By default, all crypto contexts are assigned the default or \u201cweak\u201d level of crypto. If the application has been authorized to use strong crypto by virtue of being signed, it next calls the API to request an exemption. The CDSA framework using a data structure determines if the application is signed or privileged to perform strong crypto according to the crypto context based on the previously read cryptographic control policy file. A flag is set in framework-controlled crypto context data structure if the application is entitled to strong crypto. Otherwise, the flag is not set and the application will be stopped from using strong crypto when the APIs is called to encrypt data.","In , a Common Data System Architecture\u2014Improved system (CDSA-I)  is shown including a CDSA framework  coupled through a CDSA Application Program Interface (API)  to an Independent Software Vendor (ISV) application  into which cryptographic libraries are incorporated for security purposes. The CDSA framework is partially described in Appendix I and includes a Common Security Services Manager (CSSM) interfacing the application  through the API and through Service Provider Interfaces (SPIs)  to add-in or pluggable modules . Applications  request security services through the CSSM which maps API calls to the appropriate pluggable modules. The security services are performed by the pluggable modules which support encryption; digital certificate management; key recovery; trust policy and data storage in the application. These Add-in modules may also be provided by ISVs to augment the set of available security services or as competitive products.","A crypto module  performs cryptographic operations including encryption, decryption, digital signing, keypair generation, key exchange, and random number generation. A Trust Policy module  implements policies defined by authorities and institutions such as VeriSign and MasterCard. Each Trust Policy module embodies the semantics of a trust model based on using digital certificates as credentials. Applications may use a digital certificate as an identity credential and\/or an authorization credential. A Certificate Library  provides format-specific, syntactic manipulations of memory-resident digital certificates and certificate revocation lists. A Data Storage module  provides persistent storage for certificates and certificate revocation lists. Certificate Libraries and Data Storage libraries make up the existence and manipulation of certificates and revocation lists orthogonal to the persistence of those objects. The Add-In modules must implement some or all of the CSSM defined security API .","The (CDSA-I)  supports various modes of security operation, providing different levels of functionality for the applications . To support these various modes, a privilege or exemption mechanism  is implemented within the architecture. The exemption or privilege mechanism  provides differing levels of security services to applications that possess different sets of privileges. The word \u201cprivilege\u201d and \u201cexemption\u201d are used synonymously and interchangeably.","The basic aspects of the privilege mechanism for CDSA-I are:\n\n","Privileges are associated with an application module via a set of signed manifest credentials. The signed manifest credentials are placed in a directory named Meta-INF at the same level as the privileged application module. Thus, if the path name for a privileged application is Alpha\/Beta\/Gamma\/PrivAPP.exe, the credential file resides in the directory, Alpha\/Beta\/Gamma\/Meta-INF\/, and are named PrivAPP.sf, PrivAPP.mf, and PrivAPP.dsa.","The set of signed credentials for a privileged application includes a Manifest File (MF) in which there is a Privileged Vector attribute. The value of this attribute describes the privileges for the related application module. At the time an application module is shipped, a determination is made by a development house in liaison with relevant Government agencies, regarding the set of privileges that may be granted to the application. The application module is then signed with the appropriate set of privileges.","The CDSA architecture implements a number of built-in policy checks for controlled functions of the security services (i.e., compliant with the U.S. Export regulations). Applications may request exemptions from these built-in checks. The exemption is granted if the calling application provides credentials that:\n\n","Exemptions are granted per application thread, if threads are supported in the operating system environment. The exemptions and privileges cannot be inherited by spawned processes or spawned or sibling threads. Each process or thread must present credentials and obtain its own exemption status.","The privilege or exemption mechanism allows the CDSA-I to support various modes of operation providing different levels of services to different application layer modules. The privilege mechanism in its full form is relevant only for the exportable versions of the CDSA framework within CDSA-I. When the CDSA framework contains U.S. domestic cryptographic control policy files, the framework provides a full set of services to all applications. It is not necessary to request or obtain privileges when working with U.S. domestic versions of the CDSA framework. However, in order to maintain compatibility between U.S. domestic and U.S. exportable versions of the CDSA-I architecture, the privileged APIs work as expected in both cases. The only difference being that with a U.S. domestic version of the CDSA framework, the actual credential files are not checked prior to granting of privileges to a requesting application. An application can request and be granted any set of privileges without the framework checking the application credentials.","The CSSM API includes data structures which enable a series of functions to be performed as follows:","1. CSSM_Exemption Mask:\n\n","2. CSSM_RequestsExemption:\n\n","The AppFileName and the AppPathName parameters may be left as null if it is known for sure that the requested exemptions are a subset of the commonly possessed exemptions. In such cases, the actual credentials are not checked by the framework.","(b) Parameters:\n\n","3. CSSM_EXEMPT_ALL:","(a) This is a bit mask that represents all the privileges defined by the CDSA framework. Using this bit mask on the CSSM_RequestExemption API, an application signed with all the privileges could be sure that it received all of the privileges possible in the CDSA framework. Other bitmasks include:\n\n","4. CSSM_CheckCSSMExemption:","(a) This function return exemptions possessed by the current thread. If the exemption returned is non-zero, it implies that the CSSM_RequestExemption API has been called to request a specific set of exemptions.","(b) Parameters:\n\n","5. CSSM_Init: (a) This CDSA API must be called before any other API in order to activate the CDSA framework.","6. CSSM_EncryptData: (a) This CDSA API is the one that actually performs data encryption. It requires a crypto context (discussed previously), an input data buffer containing data to be encrypted and an output data buffer in which encrypted data will be written.","The operation of CDSA-I () will now be described in conjunction with .","In , an encryption sequence  is shown for strong and weak applications. In step , the CDSA framework is initialized. After initialization, the application creates a crypto. context in step . A test is performed in step  to determine if the application is privileged to perform strong crypto. A \u201cno\u201d condition initiates step  in which the application calls the encrypt data from the crypto module . A \u201cyes\u201d condition initiates step  in which the application requests the CSSM_EXEMPT_ALL privilege to allow the application to use strong crypto strengths in subsequent CSSM_EncryptData API calls.",{"@attributes":{"id":"p-0041","num":"0065"},"figref":"FIG. 3","b":["300","12","301","303","305","307","200"]},"In  a create crypto context sequence  is initiated for the application . In step , the application calls the CSSM interface  to create a crypto context with an algorithm ID, key and key length provided by the CDSA framework. In step , the application sets the strong crypto allowed flag to FALSE; this way unprivileged applications will be restricted by default. In step , the framework returns an integer crypto context \u201chandle\u201d to the application. The \u201chandle\u201d includes an integer provided by the CDSA framework which is simply a way for the application to refer to the set of cryptographic parameters (often a large set) in subsequent API calls.","Before describing  some background is necessary. In manufacture an application has either been signed by the CDSA framework vendor using a private key at the vendor's factory or it has not. The CDSA framework program code (a set of binary files distributed to customers) has embedded in it the public key matching the private key held at the factory. Hence, the CDSA framework can verify if an application file and its credential file have been signed at the factory with the vendor's private key by using the public key embedded in the CDSA framework program code.","Now turning to , a process  will now be described for initiating the CSSM_RequestExemption API with a parameter CSSM_EXEMPT_ALL signifying which privileges are being requested. In step , the application  requests the CSSM (another name for \u201cframework\u201d) for the EXEMPT_ALL privilege for a current thread as a part of the encryption sequence  described in . A test  is performed by the CDSA framework to determine if the application credentials are signed. A \u201cno\u201d condition initiates step  in which the framework returns an error code for invalid credentials. A \u201cyes\u201d condition initiates step  to extract the privilege set from the credentials that were signed. A test  is performed to determine if the privilege set includes the privileges in the EXEMPT_ALL privilege set (e.g. represented as a bitmask). A \u201cno\u201d condition initiates step  in which the framework returns an error code that the credentials do not include the privileges in the EXEMPT_ALL privilege set. A \u201cyes\u201d condition initiates step  in which a strong crypto allowed flag is set to a \u201ctrue\u201d state in the crypto context.",{"@attributes":{"id":"p-0045","num":"0069"},"figref":["FIG. 6","FIG. 5","FIG. 1"],"b":["600","500","601","603","605","607","609","21","29","16"]},"Summarizing, in the CDSA-I system  the CDSA framework  enforces the maximum cryptographic strength for each application  taking into account an exemption or privilege mechanism. If an application has no privilege, the CDSA framework will allow only the use of a default maximum cryptographic strength. However, if an application has a \u201cstrong crypto\u201d privilege, the framework allows that application to access the strongest cryptographic strength available. Each application requiring privilege must be signed by a private key that is controlled by the CDSA framework vendor. Inside the CDSA framework, the corresponding public key is used to verify, at run times, that those applications were signed appropriately. The CDSA-I system  provides a dynamic, plug & play framework for varying maximum cryptographic strength for applications taking into account an exemption or privilege mechanism. \n\n\n\n\n\n\n","While the invention has been shown and decribed in conjunction with a specific embodiment, various changes can be made without departing from the spirit and scope of the invention as defined in the appended claims, in which:"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be further understood from a following detailed description of a preferred embodiment, taken in conjunction with an appended drawing, in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 6","FIG. 1"]}]},"DETDESC":[{},{}]}
