---
title: Operating system-independent method and system of determining CPU utilization
abstract: A method and device are provided to monitor clock control signals from a CPU core; and calculate a time period during a sampling interval that the CPU core was used to perform work based on the clock control signals.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07694164&OS=07694164&RS=07694164
owner: Intel Corporation
number: 07694164
owner_city: Santa Clara
owner_country: US
publication_date: 20020920
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION"],"p":["The field of the invention relates generally to central processing units (CPUs). More particularly the field invention relates to determining CPU utilization. Still more particularly, the field of the invention relates to an operating system-independent method and system of determining utilization of a CPU within a data processing system.","In most modern multi-programmed data processing or computer systems, various tasks or user applications contend for processing time to execute on a central processing unit (CPU) or similar processing device. Activity in even the most highly multi-tasking environment tends to be bursty, having periods of latency or inactivity followed by periods of intense processing activity. Accordingly, it is useful to analyze the utilization of CPUs and other similar data processing system devices for a variety of reasons. For example, high processor utilization during periods in which few or no user tasks are scheduled may be an indicia of a virus program or of some correctable fault in task scheduling resulting in thrashing or other inefficient system behavior. In theory, CPU utilization may be determined by accumulating CPU idle time across a sampling interval to determine the percentage of time the processor is inactive. To accomplish this, a list of tasks or threads is maintained by the OS which are ready-to-run, i.e., not waiting for some event to resume execution. When this ready-to-run list is empty, no tasks are being executed and the processor is idle. Accordingly, a CPU-independent timer is read and the processor is essentially deactivated. This is accomplished by putting the processor in a predefined processor performance state such as the C2 or C3 states defined by the well known Advanced Configuration and Power Interface Specification, Revision 2.0, Jul. 27, 2000 (ACPI). In the C2 state clock signals are removed from the functional units of the processor while its memory subsystem remains active and \u201csnoopable\u201d by other devices. In a C3 state, the clock signal is also removed from this memory portion of the data processing system and a so-called \u201cdeep sleep\u201d state is entered. When a new task is added to the ready-to-run list, the processor is placed in an active state (such as the CO ACPI state) and the timer is read again. The difference between the first and second timer reads (multiplied by the timer's period) then represents the CPU's idle time. The accumulation of this time across a sampling interval is then used to determine the CPU utilization (what percentage of the CPU's time is spent idle). Unfortunately, this measure of CPU utilization is difficult to calculate outside of the OS through a supported application programming interface (API). This is because the API is generally unaware of the ready-to-run task list which is known only to the OS.","Reference in this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover, various features are described which may be exhibited by some embodiments and not by others. Similarly, various requirements are described which may be requirements for some embodiments but not other embodiments.","In this description, various terms peculiar to nomenclature used by Intel Corporation of Santa Clara, Calif., will be used to describe signals and architectural components. The use of these terms are intended to be by way of example only and is thus non-limiting.","An operating system-independent method and system of determining utilization of a CPU within a data processing system is disclosed. More particularly, in accordance with one embodiment of the invention, a method for determining CPU utilization is provided which includes monitoring clock signals from a CPU core; and calculating a time period during a sampling interval that the CPU core was used to perform work based on the clock control signals.","In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one of ordinary skill in the art that these specific details need not be used to practice the present invention. In other circumstances, well-known structures, materials, circuits, processes and interfaces have not been shown or described in detail in order not to unnecessarily obscure the present invention.","Referring now to , a conventional data processing system  useable with the present invention is illustrated. Data processing or computer system  is comprised of a system unit , output devices such as display  and printer , and input devices such as keyboard , and mouse . Data processing system  receives data for processing by the manipulation of input devices  and  or directly from fixed or removable media storage devices such as disk  and network connection interfaces (not shown). Data processing system  then processes data and presents resulting output data via output devices such as display , printer , fixed or removable media storage devices like disk  or network connection interfaces.","Referring now to , there is depicted a high-level block diagram of the components of a data processing system  such as that illustrated by . In a conventional computer system, system unit  includes a processing device such as central processing unit (CPU)  connected to a level two (L2) cache  over a processor system bus (PSB) . Processor system bus (PSB)  is in turn coupled to an expansion bus such as local bus  and a memory  via a north bridge circuit . Local bus  may include a peripheral component interconnect (PCI), Video Electronics Standards Association (VESA) bus or the like, tightly coupled to the processor  and the processor system bus  to permit high-speed access to select devices such as display device .","Memory  may include read-only (ROM) and\/or random access (RAM) memory devices such as a synchronous dynamic random access memory (SDRAM) module capable of storing data as well as instructions to be executed by CPU . Access to data and instructions stored within memory  is provided via a memory controller (not shown) within north bridge circuit . L2 cache  is similarly used, typically in a hierarchical manner, to store data and instructions for direct access by CPU . Display device  may include a cathode ray tube (CRT) display such as display , liquid crystal display (LCD), or a similar device for displaying various kinds of data to a computer user. For example, image, graphical, or textual information may be presented to the user on display device . System unit  of data processing system  also features an expansion or \u201ccompatibility\u201d bus  such as the Industry Standard Architecture (ISA) bus, and a south bridge circuit  coupling it to local bus  to facilitate the attachment of other, relatively slower devices to the system . South bridge circuit  includes a universal serial bus (USB) port  as well as other direct connections for devices such as a network interface card , a data storage device, such as a magnetic hard disk drive , and an audio device  such as a speaker or sound card.","Other devices not directly coupled to south bridge  may be connected to the system  via the expansion bus  as illustrated. A floppy disk drive (FDD)  providing additional data storage capacity on removable media storage devices such as disk , and input devices such as a keyboard  and a cursor control device  are each coupled to expansion bus  in this manner to communicate data, instructions, and\/or command selections to central processing unit . Cursor control device  may comprise a conventional mouse such as mouse  of , a trackball, or any other device capable of conveying desired cursor manipulation. Similarly, expansion bus  includes an input\/output (I\/O) controller having standard serial and parallel port functionality for connecting other I\/O devices such as printer  to the system.","The system of the present invention includes software, information processing hardware, and various processing steps, which will be described below. The features and process steps of the present invention may be embodied in machine or computer executable instructions embodied within media such as disk . The instructions can be used to cause a general purpose or special purpose processor such as CPU , which is programmed with the instructions to perform the described methods of the present invention. Alternatively, the features or steps of the present invention may be performed by specific hardware components that contain hard-wired logic for performing the steps, or by any combination of programmed computer components and custom hardware components.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 1"]},"Referring to , the CPU core , north bridge circuit  and main memory  are as shown in  of the drawings. Communications between CPU core  and north bridge circuit  occurs via a data pathway which includes processor system bus (PSB) , a bus interface  and a data input\/output (I\/O) bus .","The bus interface  includes a clock control unit . and a bus performance monitoring (PMON) unit .. The functions of the clock control unit . and the bus PMON unit . in the context of the present invention will be explained below.","The architecture shown in  includes a number of configurable performance monitors  (only one of which has been shown) which can be configured to monitor various performance related aspects of CPU core . The performance monitor  includes an on die register (not shown) that can be accessed via a high privilege or ring 0 application. The performance monitor  communicates with bus PMON unit . and various other PMON units . to . within CPU core  via a performance monitoring bus .","In accordance with the present invention, the performance monitor  is configured to monitor an event type known as CPU_CLKS_UNHALTED. This allows the performance monitor  to monitor clock control signals from CPU core  as described in greater detail below. A clock signal  is generated by a phase locked loop (PLL)  and fed to CPU core  via a clock gate . The purpose of the clock gate  is to gate off or de-assert clock signal  whenever clock control unit . generates a gate signal . The clock signal is also fed directly to CPU core . Most of the components with CPU core  use the gate signal . However, some components use the clock signal .","The generation of the gate signal  by clock control unit . is controlled by CPU core  which sends halt (HLT) signals  and break (BREAK) signals  to clock control unit .. CPU core  sends HLT signals  in order to turn off clocking to one of its functional units. If bus interface  is busy then HLT signals  are ignored, otherwise clock control unit . sends gate signal  to gate clock signal . CPU  asserts BREAK signals  when clock signal  is to be ungated. Bus interface  may ungate clock signal  due to PSB  activity even when break signal  is not asserted. In this case, CPU core  continues to send HLT signals  until the PSB  activity subsides.","Halt signals  may be generated either directly by software (microcode) or indirectly (by sleeping thread counters).","Motherboard logic (not shown) can generate a stop clock (STPCLK#)  signal which passes through bus interface  with minimal processing. Bus interface  is responsible for synchronizing STPCLK# signal  to clock signal  which represents a free-running or system clock.","There may be a number of different reasons why CPU core  asserts HLT signal . These reasons include execution of an Auto Halt instruction, a STPCLK# assertion, internal faults, etc. Events that cause BREAK signal  to be asserted include STPCLK# de-assertion, external interrupts, resets, etc.","Clock control unit . uses HLT signal  and BREAK signal  generated during a clock cycle of the clock signal  to generate a signal  known as PMCPUCLKUNHALTED#. This signal is fed to bus PMON unit ..","In accordance with the techniques of the present invention, a high privilege application in the form of a ring 0 driver is used to configure performance monitor  to monitor an event known as CPU_CLKS_UNHALTED. Whenever the CPU_CLK_UNHALTED event selection is detected bus PMON unit . drives the PMCPUCLKUNHALTED# signal  onto PMON bus . This causes a register of performance monitor  to increment on each core clock that assertion of the PMCPUCLKUNHALTED# signal  is detected.","Thus, in effect, performance monitor  serves as a counter which measures a length of time (or ticks) for which CPU core  has requested clock control unit . to allow clock signal  to be asserted. Since when clock signal  is de-asserted, CPU core  is not performing work (i.e. CPU  is not executing application code), measuring a length of time that the PMCPUCLKUNHALTED# signal  is asserted gives an indication of a length of time in a cycle of the system clock during which CPU core  actually performed work.","Embodiments of the present invention include a utilization application that includes the high privilege or a ring 0 driver to configure and read performance monitor  during a time sampling interval as described above. In addition, the utilization application includes a low privilege or ring 3 application which calculates a utilization for CPU core  using the ring 0 driver to control performance monitor  to monitor the PMCPUCLKUNHALTED# signal .","Referring now to , an architectural system diagram depicting the operation of a data processing system according to the present invention is illustrated. In the illustrated embodiment, a plurality of application programs  such as CPU utilization application  interact with various platform hardware devices  including a CPU  via an operating system  such as the Windows\u2122 operating system from Microsoft Corporation, one or more device drivers , and basic input\/output system (BIOS) code . The illustrated system is interrupt-driven both with respect to the multitasking of the various applications  and communication between applications  and platform hardware .","Accordingly, in one embodiment of the present invention, an application  request for a hardware resource from within platform hardware  can cause an interrupt, such as a System Control Interrupt (SCI) or a System Management Interrupt (SMI) to be generated and an interrupt handler routine to be responsively executed. Interaction between operating system  and platform hardware  is then facilitated by a device driver  and BIOS . In the illustrated embodiment, BIOS  contains information such as physical device addresses of the various devices  attached to the data processing system  and is useful with respect to the actual transmission of data. By contrast, device driver  is typically specific to a particular hardware device and is usually concerned with the translation of data between various device formats.","The utilization application  is a periodically execution applet or application. Each time the applet is executed, a CPU utilization is calculated as described below.","As noted above, performance monitor  increments only when CPU core  is not in an idle state. Thus, in accordance with one embodiment of the present invention, the ring 0 driver application  starts and stops performance monitor  based on a power state of CPU  as illustrated in  of the drawings.","Referring to , at block  platform hardware  is initialized or started. At , hardware  determines if CPU  is in a low power state. If CPU  is not in a low power state then, at , performance monitor  is started. If at any stage during execution of the techniques of the present invention, hardware  determines that CPU  is in a low power state then performance monitor  is stopped, at block .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5","b":"304"},"Referring to , at block  the applet initializes. At block  performance monitor  is configured to monitor the CPU_CLKS_UNHALTED event. At block  a system timer is read and saved as a value called Time.","At block  a periodic call back event is enabled. This allows the operation shown in  of the drawings to be executed periodically, for example every 300 milliseconds. Enabling periodic call back at block  may be implemented in a variety of manners including timer based interrupts, system management events, or operating system directed sleep requests that put a thread to sleep for discrete intervals of time.","Referring now to  of the drawings, at block  the periodic call back event is started. At block , performance monitor  is read and its value is saved as a value known as \u201cTicks\u201d. At block , performance counter  is reset. This is done in order to prevent overflow. At block , the system timer is read and saved as \u201cTime\u201d. At block  an \u201cElapsedTime\u201d is calculated wherein: ElapsedTime=(Time\u2212Time)*TickPeriod, and wherein TickPeriod is the period between each tick of performance monitor .","At block  the time values are updated wherein Time is saved as Time. This ensures that the calculated value for elapsed time is the actual time interval between successive readings of the system timer. At block  an effective frequency is calculated, wherein EffectiveFreq=Ticks\/ElapsedTime. At block , a percentage utilization for CPU  is calculated wherein Percentage_Utilization=(EffectiveFreq\/by Actual Frequency)\u00d7100.","Not all processors have an architecture such as the one now shown in  of the drawings. Thus, utilization applet , in one embodiment of the invention determines a type for a processor of a system on which it is running. If the type is of a predetermined type, then the technique described above for calculating CPU utilization is performed. The predetermined type includes the Pentium 4 family of microprocessors or a higher family and the Banias family of microprocessors. However, if it is determined that the processor is from a family of processors that is lower than the Pentium 4 family of processors, for example the Pentium 3 family of processors then the techniques for calculating CPU utilization described in copending U.S. patent application Ser. No. 09\/750,676 are used to calculate CPU utilization.","For the purposes of this specification, a machine-readable medium includes any mechanism that provides (i.e. stores and\/or transmits) information in a form readable by a machine (e.g. computer) for example, a machine-readable medium includes read-only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g. carrier waves, infra red signals, digital signals, etc.); etc.","It will be apparent from this description the aspects of the present invention may be embodied, at least partly, in software. In other embodiments, hardware circuitry may be used in combination with software instructions to implement the present invention. Thus, the embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","Although the present invention has been described with reference to specific exemplary embodiments, it will be evident that the various modification and changes can be made to these embodiments without departing from the broader spirit of the invention as set forth in the claims. Accordingly, the specification and drawings are to be regarded in an illustrative sense rather than in a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 1B","FIG. 1A"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 2","FIG. 1B"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 4 to 6"}]},"DETDESC":[{},{}]}
