---
title: Open application lifecycle management framework
abstract: Techniques for open application lifecycle management frameworks are described, including using a framework hosted on one or more computers and having one or more services to integrate the one or more services with one or more applications using one or more providers, each of the one or more providers is adapted to at least one of the one or more applications, registering one or more repositories associated with the one or more applications using a location service module, receiving an input creating a project context associated with a project, data associated with the input being stored in a data structure associated with the project, the data structure being stored in a repository associated with the framework, generating a link, after registering the one or more repositories, between one or more element containers associated with the project, the link and the one or more element containers being stored in the repository, and configuring the framework to detect another input indicating interaction with an artifact, other data associated with the interaction being mapped between the one or more repositories and the repository using a domain model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08584112&OS=08584112&RS=08584112
owner: Borland Software Corporation
number: 08584112
owner_city: Austin
owner_country: US
publication_date: 20090714
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application is a U.S. non-provisional patent application that claims the benefit of U.S. Provisional Patent Application No. 61\/080,462, filed Jul. 14, 2008, entitled \u201cMETHODS AND SYSTEMS FOR COLLECTING AND NORMALIZING METRICS FROM MULTIPLE PROJECTS OR PROCESSES,\u201d which is herein incorporated by reference for all purposes.","The present invention relates generally to computer software, computer program architecture, and software development techniques and applications. More specifically, techniques for an open application lifecycle management framework are described.","Conventional software development is traditionally performed using solutions that rely upon the development of functional requirements or specifications (hereafter \u201crequirements\u201d) in order to identify features or functions that should be built or developed into a computer program or application. Typically, disparate computer software, programs, or applications (hereafter \u201capplications\u201d) are often used in conventional techniques to provide different types of features or functions, such as requirements definition, change management, quality control, analysis, business intelligence, or reporting. Given the different types of solutions used, which are typically developed by different organizations or companies, the ability to use cross-product data is limited and often restrictive.","Companies, business, or organizations, large and small, often must rely upon the use of third party applications and development tools in order to build complex software projects. Often a single vendor or provider does not offer all of the tools that are required for a given project. However, when used together, different vendor applications may require extensive integration, development of custom source code in order to integrate applications together using software development kits, application programming interfaces (hereafter \u201cAPIs\u201d), or other techniques. Further, data transferred between these applications often requires frequent development of source code in order for data to be used between different products and platforms. The use of proprietary formats to describe common data elements in different products discourages integration, raises project development times, increases project development costs, and is labor-intensive.","Thus, what is needed is a solution for enabling cross-product data sharing, analysis, and reporting for software development applications without the limitations of conventional techniques.","Various embodiments or examples may be implemented in numerous ways, including as a system, a process, an apparatus, a user interface, or a series of program instructions on a computer readable medium such as a computer readable storage medium or a computer network where the program instructions are sent over optical, electronic, or wireless communication links. In general, operations of disclosed processes may be performed in an arbitrary order, unless otherwise provided in the claims.","A detailed description of one or more examples is provided below along with accompanying figures. The detailed description is provided in connection with such examples, but is not limited to any particular example. The scope is limited only by the claims and numerous alternatives, modifications, and equivalents are encompassed. Numerous specific details are set forth in the following description in order to provide a thorough understanding. These details are provided for the purpose of example and the described techniques may be practiced according to the claims without some or all of these specific details. For clarity, technical material that is known in the technical fields related to the examples has not been described in detail to avoid unnecessarily obscuring the description.","In some examples, the described techniques may be implemented as a computer program or application (\u201capplication\u201d) or as a plug-in, module, or sub-component of another application. The described techniques may be implemented as software, hardware, firmware, circuitry, or a combination thereof. If implemented as software, the described techniques may be implemented using various types of programming, development, scripting, or formatting languages, frameworks, syntax, applications, protocols, objects, or techniques, including ASP, ASP.net, .Net framework, Ruby, Ruby on Rails, C, Objective C, C++, C#, Adobe\u00ae Integrated Runtime\u2122 (Adobe\u00ae AIR\u2122), ActionScript\u2122, FleX\u2122, Lingo\u2122, Java\u2122, Javascript\u2122, Ajax, Perl, COBOL, Fortran, ADA, XML, MXML, HTML, DHTML, XHTML, HTTP, XMPP, PHP, and others. Design, publishing, and other types of applications such as Dreamweaver\u00ae, Shockwave\u00ae, Flash\u00ae, Drupal and Fireworks\u00ae may also be used to implement the described techniques. The described techniques may be varied and are not limited to the examples or descriptions provided.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","102","104","106","108","112","114","116","104","106","108","112","114","104","106","108","112","108","114","114","116","108","110","112","104","106","108","112","114"]},"As shown, clients -, servers -, computing cloud , and\/or a combination thereof may also be used to implement the described techniques as a distributed application. Different techniques may be used to implemented the described techniques as a distributed application, including deployment as software-as-a-service (i.e., SaaS) or as a distributed application in accordance with specifications such as WSDL (i.e., web services distributed language). Other specifications, protocols, formats, or architectures may be used to implement the described techniques, without limitation, and are not limited to the examples shown and described. Further, system  and the above-described elements may be varied and are not limited to those shown and described.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2A","b":["202","204","206","208","212","214","216","222","224","228","230","236","238","240","242","244","246","248","250","252","202","202","202","202","202","236","240","202","230","240","202","202","202","252","202","230","240","204","202","230","240","202"]},"In some examples, an element may include artifacts or items referred to as \u201cwork\u201d (see  below). In other examples, elements may include other data items apart from artifacts or work. Likewise, artifacts may be referred to as a genus of data items that may include, for example, change requests, requirements, tests, tasks, projects, or others. Each of artifact may be a data construct or structure that, when used by domain model  in framework , is used to generate a common data representation of an item from applications -. Thus, if data generated by application , for example, is sent to framework , domain model  maps the data to an artifact type used by framework . As shown, data may be retrieved from application - (and others) in various types of formats and types, including XML, VXML, Java, and others, without limitation.","Data, once reduced to a common data representation by one or more of services - may then be sent to staging database  for transformation by extract, transform, and load (hereafter \u201cETL\u201d) engine  for eventual storage in data warehouse . Any type of ETL engine may be used to convert data for storage in or retrieval from staging database  or data warehouse  and are not limited to any specific example described herein. In order to translate data for use by framework  and for storage, using a common data schema (e.g., star schema) in data warehouse , domain model  is used to provide a map of common data representations.","Data consumed (i.e., used) by applications - may also be used by services -. In some examples, element service  may be an application or program module that provides a mechanism for retrieving key information associated with artifacts (e.g., information about a set of requirements) from data warehouse  or framework repository . Links between projects and containers may be configured within framework repository , linking a project to a container for a given application and further establishing links between applications in the same or different repositories. Generated links may be propagated to data warehouse , thus allowing cross-product and cross-platform reporting because common data representations for data types from different applications have been normalized.","Element service  uses a common property model with user-defined arbitrary requirements in order to identify elements that are associated with other elements provided by applications -. As an example, element service  is integrated with framework  using service implementation layer . Further, project service  may be an application or program module that provides a mechanism to associate containers in a project, enabling artifacts or other elements to be stored in given containers, which are data structures that group artifacts according to a given context. Still further, location service  provides the location of repositories and artifacts stored within them. Application lifecycle management uniform resource indicators (hereafter \u201cALM URIs\u201d) are used to identify artifacts and their location within specific repositories. In some examples, an ALM URI is a unique address that indicates the location or address of an artifact within a repository (e.g., framework repository ).","In some examples, service implementation layer  integrates framework  with services - to provide services (e.g., element service , project service , location service , and others) that may be used to associate common data representations with corresponding data from one or more of applications -. For example, if client  is used to generate a report to find change requests associated with a given version of a software development project (hereafter \u201cproject\u201d), common data representations generated by domain model  may be used to map each artifact from applications - to an artifact format and syntax used by framework . Further, once normalized, data (e.g., artifacts, work, elements, and the like) may be stored in framework repository  and obtained through links that identify the location of each element or artifact. As an example, location server  may be used by client to specify links to a given project that may be created using project service . Upon creation of a project using project service  and specifying a location of items associated with the project and to be stored in framework repository , element service  may be invoked by client  to generate common data representations for individual items (e.g., change requests from application  are mapped to change requests in framework  using domain model , and the like).","In some examples, data may also be extracted from applications - and, when transformed, loaded into data warehouse . The extraction, transformation, and loading of data in proprietary or different formats may be performed using common data representations. As an example, historical data may be retrieved from data warehouse  to provide a cross-product report for artifacts shared between applications -. Further, historical data can be processed in batch, ad hoc, sequential, automatically, manually, or in other ways.","Applications - generate data that ETL engine  extracts, transforms, and loads into staging database . Using a dimensional model (not shown) associated with domain model  and data warehouse , common data representations are used to store data from applications - into data warehouse . As an example, data stored in data warehouse  may be stored, retrieved, or otherwise accessed using formats (i.e., syntax) associated with ALM URIs. In some examples, an ALM URI may include a server path, source project path, or other types of paths to objects (i.e., artifacts, elements, items, containers, folders, and the like) within a given repository. In other examples, an ALM URI may also include a schema, authority (source project), path (source element path), query (version), fragment, or other attribute and is not limited to those set forth above. In still other examples, ALM URIs may be structured based upon specification such as RFC 2396, RFC 3305, or others that are used to define URIs. An exemplary format may follow the general schema:\n\n","As shown, providers - may be used to provide application programming interfaces (hereafter \u201cAPIs\u201d) with applications - in order to retrieve data into framework . In some examples, providers may be individual programs or interfaces that are written using SDKs - and  that may include tools, utilities, widgets, APIs, or other data, information, or applications that enable integration with, for example, applications -. Proprietary standards, structures, interfaces, protocols, or formats associated with applications - may be adapted to framework  using providers - and SDKs -. Providers - may be configured to identify and interpret ALM URIS, which may also be defined by location service . Further, providers - may be used to map SDKs - and  to applications - and, subsequently framework .","Also shown are ETL engines  and  that are configured to extract data from applications - or framework , respectively. In some examples, each of providers - has an ETL engine to put data into staging database , which organizes data using a dimensional model, which is a model of hierarchical relationship that may be similar to those described using domain model . Domain model  and a dimensional model (not shown) used for staging database  or data warehouse  may be implemented as a meta model for generating data structures that organize stored data among containers, folders, elements (e.g., artifacts such as change requests, requirements, tasks, or others)), or the like.","Once extracted, data may be transformed by ETL engines  and  for loading into staging database  or data warehouse . Data may be loaded from framework  using domain model . Data is stored in staging database  using data schemas and common data representations generated by domain model  and a separate ETL engine is not required for data stored, retrieved, or otherwise accessed by framework . Alternatively, data from applications - may be in a proprietary format, standard, protocol, or syntax and ETL engine  is used to ensure that data stored, retrieved, or otherwise accessed from staging database  is in a common data representation format established by domain model  (i.e., framework ). Once data is retrieved from staging database , ETL engine  processes the data for storage, retrieval, or other operations associated with data warehouse , which may use other types of data schema (e.g., star schema, and others, without limitation). Once stored in data warehouse , BI tools module  may be used to evaluate and analyze data used by framework  or applications -, generating reports using common data representations associated with artifacts, regardless of proprietary data formats or types. For example, an artifact such as a change request may be used as the basis for generating a report using BI tools module  for all applications. Using framework  and domain model , BI tools module  may generate a report showing all change requests for a given project that are stored in data warehouse . In other examples, framework  and the above-described elements may be varied and are not limited in function, structure, operation, configuration, or other aspects to those descriptions provided.",{"@attributes":{"id":"p-0038","num":"0041"},"figref":"FIG. 2B","b":["258","260","262","270","272","280","282","284","286","288","292","294","262","270","258","262","270","260","262","270","262","270","272","288","270","288","260"]},"As an example, when data is retrieved from some applications such as application , a pre-staging data model, process, or database (e.g., pre-staging process ) is used to convert data from application  into XML files . Once converted, XML files  are loaded into pre-staging database  and, subsequently, data is transformed from XML files are loaded into domain model  using connectors - into ETL tool data integrator . In some examples, pre-staging process  may be used to detect changes in data generated from application  in order to capture incremental updates or changes to provide rapid updates for reporting or other purposes. In other examples, changes detected may be provided from pre-staging process  to domain model , framework repository , ETL tool data integrator , data warehouse , or other applications or processes beyond those shown and described. As described herein, connectors - may be implemented as a Java program and an ETL engine that is configured to extract data from applications -, transformed into a desirable format, and loaded into domain model , ETL tool data integrator , framework repository , or data warehouse . In other words, a connector may be a source (i.e., application)-specific module that is configured to extract data from a given application using user defined attributes (hereafter \u201cUDAs\u201d). Connectors - may also provide input to a staging database (not shown) that is built around domain model . As used herein, data from applications - may be processed to identify UDAs based on a common definition or a set of common fields or attributes (e.g., name, type, value). As some applications may not be configured to readily identify user defined attributes, generic XML (i.e., eXtensible Markup Language) layer  may be used to integrate a third party application with domain model . For example, third party application  may be a quality control (QC) application that is not configured to readily identify data types, elements, or artifacts in data being generated by it. However, by converting data transferred from the third party application into XML files , generic XML layer  may be used to handle and transform the data for use by domain model  when determining which repository to use for storing the data. In other examples, data retrieved by ETL engines integrated with connectors - may also be transformed using domain model  and loaded into data warehouse . Still further, data may be organized and stored in framework repository  or ETL tool data integrator  and used for various purposes, including by any of applications - (or others), generating reports by ETL tool data integrator , stored in framework repository  for use by domain model  or client  (), or other uses not described herein. In other examples, framework  and the above-described elements may be varied in function, structure, configuration, implementation, or other aspects and is not intended to be limited to the descriptions provided.",{"@attributes":{"id":"p-0040","num":"0043"},"figref":["FIG. 3A","FIG. 3B"],"b":["300","302","304","306","308","312","314","316","300","310","300","310","302","306","308","304","312","310","304","306","308"]},"Referring back to , data that is stored and organized as work  or artifacts - may be generated from roles in an organization. For example, human agents  represents data input by a user, such as a business analyst, system administrator, or the like. Automated agents  may be software or program code that are configured to identify data into various types of elements (e.g., work  vs. artifacts -). In other examples, meta model  may be varied and different data types, inputs, and relationships may be shown and are not limited to those provided and described.",{"@attributes":{"id":"p-0042","num":"0045"},"figref":["FIG. 3B","FIG. 2A","FIG. 2A","FIG. 2A","FIG. 2A"],"b":["320","322","324","326","328","330","202","204","322","230","240","322","324","204","2","252"]},"Hierarchically, artifacts may also be organized based on a relationship to a given project. Projects  may be an artifact that allows data to be organized based on a given information technology (hereafter \u201cIT\u201d) software development project. Other artifacts (e.g., change requests , requirements , tests , tasks , and others) may be associated with projects  and used to organize data, for example, in framework repository . In some examples, tests  may be artifacts that describe tests or testing activities that are performed against a given project. Likewise, tasks  may be open or closed activities to be performed by designated personnel, users, or clients in association with a given project. In other examples, the above-described artifacts may be varied and are not limited to the artifacts and relationships provided.",{"@attributes":{"id":"p-0044","num":"0047"},"figref":["FIG. 4","FIG. 2A","FIG. 2A","FIG. 2A"],"b":["402","404","246","406","250","202"]},{"@attributes":{"id":"p-0045","num":"0048"},"figref":["FIG. 5","FIG. 2A"],"b":["502","504","506","506","504","202","502"]},{"@attributes":{"id":"p-0046","num":"0049"},"figref":["FIG. 6","FIG. 3A","FIG. 3A","FIG. 2A"],"b":["602","604","606","602","604","314","606","316","602","204"]},{"@attributes":{"id":"p-0047","num":"0050"},"figref":["FIG. 7","FIG. 2A","FIG. 2A"],"b":["702","704","706","706","702","250","242","704","706","702","204"]},{"@attributes":{"id":"p-0048","num":"0051"},"figref":["FIG. 8","FIG. 2B"],"b":["802","804","806","808","802","706","804","806","262","270","808","804","802"]},{"@attributes":{"id":"p-0049","num":"0052"},"figref":["FIG. 9","FIG. 7","FIG. 8","FIG. 2A"],"b":["902","904","906","908","902","702","802","902","204","904","906","906","908","902","904","906","908"]},{"@attributes":{"id":"p-0050","num":"0053"},"figref":["FIG. 10","FIG. 2A","FIG. 2A","FIG. 7","FIG. 8","FIG. 2A","FIG. 2A"],"b":["202","1002","212","202","1006","702","802","242","250","1008","202","1010"]},{"@attributes":{"id":"p-0051","num":"0054"},"figref":["FIG. 11","FIG. 2A","FIG. 2A"],"b":["1102","1104","1106","202","216","222","272","280","1108"]},{"@attributes":{"id":"p-0052","num":"0055"},"figref":"FIG. 12","b":["1200","1200","1202","1204","1206","1208","1210","1212","1214","1216","1218"]},"According to some examples, computer system  performs specific operations by processor  executing one or more sequences of one or more instructions stored in system memory . Such instructions may be read into system memory  from another computer readable medium, such as static storage device  or disk drive . In some examples, hard-wired circuitry may be used in place of or in combination with software instructions for implementation.","The term \u201ccomputer readable medium\u201d refers to any tangible medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media and volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as disk drive . Volatile media includes dynamic memory, such as system memory .","Common forms of computer readable media includes, for example, floppy disk, flexible disk, hard disk, magnetic tape, any other magnetic medium, CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, RAM, PROM, EPROM, FLASH-EPROM, any other memory chip or cartridge, or any other medium from which a computer can read.","Instructions may further be transmitted or received using a transmission medium. The term \u201ctransmission medium\u201d may include any tangible or intangible medium that is capable of storing, encoding or carrying instructions for execution by the machine, and includes digital or analog communications signals or other intangible medium to facilitate communication of such instructions. Transmission media includes coaxial cables, copper wire, and fiber optics, including wires that comprise bus  for transmitting a computer data signal.","In some examples, execution of the sequences of instructions may be performed by a single computer system . According to some examples, two or more computer systems  coupled by communication link  (e.g., LAN, PSTN, or wireless network) may perform the sequence of instructions in coordination with one another. Computer system  may transmit and receive messages, data, and instructions, including program, i.e., application code, through communication link  and communication interface . Received program code may be executed by processor  as it is received, and\/or stored in disk drive , or other non-volatile storage for later execution.","Although the foregoing examples have been described in some detail for purposes of clarity of understanding, the above-described inventive techniques are not limited to the details provided. There are many alternative ways of implementing the above-described invention techniques. The disclosed examples are illustrative and not restrictive."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various embodiments or examples (\u201cexamples\u201d) are disclosed in the following detailed description and the accompanying drawings:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
