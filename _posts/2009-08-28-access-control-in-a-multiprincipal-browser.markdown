---
title: Access control in a multi-principal browser
abstract: A principal operating system based-browser controls access to resources. The resources are represented semantically in a resource object model. A browser kernel of the browser mediates resources access calls from principals. In some implementations the principals are web entities and the resources are peripheral devices. The resource object model separates device semantics from physical device access. Resource access control policies are maintained by the browser kernel and separated from device access mechanisms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08266714&OS=08266714&RS=08266714
owner: Microsoft Corporation
number: 08266714
owner_city: Redmond
owner_country: US
publication_date: 20090828
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure describes, in part, access control, while a co-pending patent application describes, in part, resource sharing. The co-pending patent application describing resource sharing is entitled, \u201cResource Sharing in Multi-Principal Browser\u201d, application Ser. No. 12\/550,293, that is filed concurrently on Aug. 28, 2009, and is incorporated by reference for all that it teaches.","The subject matter relates generally to resource management, particularly management of resources accessed with a principal operating system based-browser.","Web browsers have evolved from discrete applications to integral portions of an operating system (OS) and even to independent platforms with characteristics of an OS. Conventional operating systems interact with many different users each with different privileges such as guests or administrators. Operating systems frequently fulfill the role of enforcing security policies, managing competing resource demands, and allocating access to computing resources. The evolution of web browsers has lead to web browsers being called on to function as an OS. Web browsers functioning as OSes will need to fulfill similar roles as conventional OSes.","In the web context the principals (analogous to users) with which browser-based OSes interact are web sites. Allocation of resources, security policy, and similar considerations are analyzed based on the web site accessed by the browser. Web browsers that do not function as a principal operating system based-browser may handle each principal piecemeal without a standardized resource sharing, security, or similar policies. For example, a trusted intranet web site may have privileges analogous to that of a user with administrator privileges whereas an unverified web site may be given only limited privileges similar to a guest user. One of the privileges which may be managed is access to computing resources such as memory, network bandwidth, or peripheral devices.","Currently resource management is handled by conventional operating systems in a number of different ways. Unix-based OSes use file system-based access control. Individual physical devices are mapped to files and the permissions are set accordingly. Drivers, as well as higher-level software that directly accesses devices, directly manipulate access control defaults for each physical device. WINDOWS\u00ae-based OSes use access tokens to describe the privileges of a user account, and use security descriptors to describe the access control list for a securable object. A securable object may be a named WINDOWS\u00ae object, such as files and physical devices, or an unnamed object, such as process or thread objects. These ways of handling resource management may be deficient if, for example, resource management of the operating system is bypassed by a web site directly accessing resources via the browser application.","Resource management in existing web browsers is largely non-existent. Web browsers do not manage computing resources such as CPU, memory, and network connectivity, and web browsers allow a plug-in to bypass any security measures implemented by the web browser and directly access the underlying OS. This design has problems such as leading to multiple and potentially conflicting security policies as well as limiting the ability of browsers to present the types of rich and robust content available to applications running directly on a conventional, commodity OS. Therefore, web browser applications, including web browsers that may function as OSes, lack useful resource management capabilities.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","In view of the above, this disclosure describes techniques for managing resources with a principal operating system-based browser. In particular, managing resources includes controlling access to resources. The resources may include peripheral devices such as cameras, GPS devices, telecom network interface devices, microphones, speakers, dialers, and the like. This disclosure describes a multi-principal browser with a browser kernel that determines whether a system call from a principal (e.g., web application) requesting access to a resource (e.g., peripheral device) is permitted. When the system call is permitted, the system call may be implemented by a system call implementation module within a browser kernel. The system call from the multi-principal browser is communicated to a commodity OS via the browser kernel. The commodity OS provides the browser kernel access to the resource based on the system call and this access is then passed in turn from the browser kernel to the principal.","Resources, such as peripheral devices, that exist within a computer system are modeled in a resource object model tree. The resource object model tree represents resource capabilities as nodes. The nodes in the resource object model include leaf nodes, intermediate nodes, and a root node. When a principal is authorized to access a node the principal is also authorized to access the resources of all respective sub-nodes. This resource object model represents the capabilities of resources on an abstract level allowing the resource management conducted in a browser kernel to occur independent of the details of specific resources accessed by the commodity OS.","Multi-Principal Browser-Based Operating System","A multi-principal browser-based operating system (OS) is a multi-principal OS that supports web applications as the first-class principals. Unlike traditional OSes such as WINDOWS\u00ae which treat users as principals, a multi-principal browser treats web applications or web sites as OS principals, The principal is labeled with the triple of <protocol; domain; port>, just as in the same-origin policy in conventional browsers. Upgrading the browser to the status of an OS allows web applications to have features and rich functionality. Additionally, the security and stability benefits of an OS are realized in the web browser.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","102","104","106","104","108","108","108","110"]},"In the illustrated example, the multi-principal browser  may include a browser kernel . The browser kernel  may include an access control module  to implement resource management, specifically control of access to resources . The access control module  provides access control services to determine access control for a resource by determining which principal(s)  may access the resource.","Accordingly, the system  recognized two types of principals. The commodity OS  recognizes the user  as a principal and the multi-principal browser  recognizes a web entity as a principal . The web entity may be a web page, a web site, a web-hosted application a web service, a process of a web service, etc. In this disclosure, \u201cprincipal\u201d refers to web applications or similar web entity and not to users.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 2"],"b":["200","112","116","112","202","204","202","204","206","208","202","204"]},"Each resource request ,  is communicated to a computing device  executing the multi-principal browser . For example, a web browser is directed to a web site available on the Internet or other network and the web site attempts to access the speakers of the computing device  to play a sound. The browser kernel  in conjunction with the commodity OS  form a total OS that implements the request to access the speakers. The commodity OS  may be customized in such a way that web-application-specific resource management policies may be enabled by using the browser kernel . In one implementation, the CPU scheduling of the commodity OS  is customized. The commodity OS , is now operating as a customized commodity OS. Other types of customization are also possible.","The multi-principal browser  includes a browser kernel . The browser kernel  runs in a separate protection domain and interposes between the browser principals ,  and the commodity OS . The browser kernel  mediates the principals' ,  access to system resources  by functioning as an operating system in conjunction with the customized commodity OS . The browser kernel  handles browser kernel calls  from the principals , . The browser kernel  utilizes the customized commodity OS  to access system resources . The logic for processing web entity (e.g., a runtime library, plug-ins) resides in the principal space with one of the principals , , and resource management function is primarily managed by the browser kernel  with guidance from the access control module . The access control module  provides access control services to determine access control for the resource  by determining which principals ,  may access the resource .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 2","FIG. 1"],"b":["300","116","106","116","210","112","116","202","204","112","302","108","112","116","108","112","108","114","116","108","304","106","106","304","116","210","106","116","210"]},"Responses or any type of data travelling back from the resource  to the principal  may travel over the same path as the calls. Specifically, a response from the resource  is received by the commodity OS  and interpreted according to the device driver calls . The commodity OS  sends operating system calls  to the browser kernel . The operating system calls  are translated in turn by the browser kernel  into browser kernel calls  that ultimately provide the response and\/or data to the principal . For example, if the response is a digital photo, the data representing that image is received by the principal  where the principal  (e.g., a web application for photo editing) may modify the digital photo by adjusting the color.","Systematic Access Control","All principals , such as web entities, should go through the browser kernel  to access any resources . This design enables implementation of a centrally-enforced access control policy. Systematic access control is possible by separating access control policies (i.e., who gets what) from resources access mechanisms (i.e., the driver and device driver calls used to communicate with a digital camera).","Resources may be grouped into three broad categories: basic computing resources, user input devices, and peripheral resources, as shown in Table 1 below. Access control on basic computing resources, such as central processing unit (CPU), memory, display, network bandwidth, and storage, is a matter of principal admittance to a computing device . The browser kernel  may possibly adopt a white-list or black-list-based filter (e.g., for anti-phishing purposes), admitting some and denying some principals from being admitted to the computing device . Once a principal is admitted, it may access all of the basic computing resources. Access to basic computing resources is a binary condition, yes or no, based in some implementations on a white- or black-list.",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Resource characterization for access control"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Access Control"]},{"entry":["Resource Types","Resource Examples","Mechanism"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Basic computing","CPU, memory, display,","Principal admittance in"]},{"entry":["resource","data network, storage","browser kernel"]},{"entry":["User input devices","Mouse, keyboard, touch","Exclusive user access"]},{"entry":[{},"screen"]},{"entry":["Peripheral resources","Camera, GPS device,","Discretionary access"]},{"entry":[{},"telecom network","control"]},{"entry":[{},"interface device,"]},{"entry":[{},"microphone, speaker"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The second broad category of resources, user input devices such as a mouse, a keyboard, or a touch screen, may only be used by the user and cannot be used by any principals (e.g., web entities); otherwise principals could impersonate the user. For example, it would compromise security if a malicious web entity could issue calls that appeared to the commodity OS  as keyboard input. Accordingly, user input devices are subject to exclusive user access. Principals cannot access user input devices.","The third broad category of resources, peripheral resources, is subject to discretionary access control. Examples of peripheral resources include those listed in Table 1. One example of a peripheral resource is the digital camera  shown in . The design and possible implementations of discretionary access control for peripheral resources are discussed below. One aspect of discretionary access control design is separation of access control policies from the implementation of resource-access system calls. As shown above in , the browser kernel  effectuates of this separation by mediating resource calls from the principal  to the resource .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIG. 2"],"b":["400","112","116","108","116","110","108","112","402","116","402","210","112","114","404","406"]},"The access control module  is configured to decide whether a system call from a principal  requesting access to a resource  is permitted. Routing device access system calls  through the access control module  provides a single point of access control: since access control is separated into its own module, this makes access control policies and their implementations less error-prone and easier to validate. In some implementations, the access control module  may decide whether a system call from a principal  is permitted based on a resource object model that provides semantic representations of resources. One example of a resource object model is discussed below with respect to .","In the same or different implementations, the access control module  decides whether a system call from a principal  is permitted based on an attribute. Attributes are assigned to a capability of a resource . For example, a capability may include such things as a speaker (which generates sound), a dialer (which dials a number on a telecom network), and a location (which may be detected by a global positioning system (GPS) device or other device). Attributes indicate how access may be performed on a resource . Attributes may include \u201cuser ask\u201d, \u201cbackground\u201d, \u201clifetime\u201d, and \u201cconcurrent use\u201d. Table 2, below, shows one possible default assignment of attributes to a number of capabilities.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A default list of capabilities handed out to a web entity"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Attributes"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Capabilities","User ask","Background","Lifetime","Concurrent use"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Speaker","Don't ask","Allow","Forever","Yes"]},{"entry":["Location","Ask","Allow","Session","N\/A"]},{"entry":["Photo Camera","Ask","Deny","Session","N\/A"]},{"entry":["Microphone","Ask","Allow","Session","N\/A"]},{"entry":["Dialer","Ask","Deny","One-time","N\/A"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"The user ask attribute instructs the browser kernel  to either ask or not ask the user  to confirm the resource access. The background attribute instructs the browser kernel  to deny or allow resource access when a web entity runs in background tabs of the browser . The lifetime attribute may take the values \u201cone-time\u201d, \u201csession\u201d, \u201cforever\u201d and informs the browser kernel  that the capability lifetime is one-time, the duration of the current browsing session of a particular principal instance, or forever. The concurrent use attribute is for resources  that allow concurrent access from multiple principals : when the value of the concurrent use attribute is \u201cyes\u201d, other principals  are allowed to use the resource  concurrently; when the value of the concurrent use attribute is \u201cno\u201d, other principals  are denied access to the resource  when this principal is using the resource .","The attribute list may be easily extended to support other kinds of generic restrictions, such as an ability to charge money (such as dialing toll numbers on a telecom network). It is to be understood that the attributes which are assignable to a capability may include many more attributes than those listed here and each capability may only have relevance for some of the attributes. For example, concurrent use is not applicable to the capability \u201cdialer\u201d because it is not possible to dial more than one number at a time.","In some implementations, the access control module  decides whether a device access system call  is permitted or not based on user input. Thus, web applications may be allowed to expand their access rights for a resource  with user approval. For example, a web entity that is frequently interacting with the digital camera  might want to avoid asking the user  every time it takes a picture. This could be implemented by asking the user  to authorize changing the user ask attribute for the digital camera  from \u201cask\u201d to \u201cdon't ask.\u201d","In some implementations, a manifest may be used as a mechanism for centralizing all decisions involving user authorization and reducing the number of user prompts to at most one. Any web entity, or other principal , could provide a manifest specifying a required resource functionality; this manifest is presented to the user  when the web application loads. The user  may change the user ask and other attributes by modifying resource functionality specified in the manifest.","However, the user's ability to change access rights may be limited. In some implementations, the user  cannot add attributes for any capability that the web entity did not possess by default. Thus, the user  does not have the ability to issue arbitrary new capabilities to a web entity. The user  may also be prohibited from changing access permissions for a subset of resources which are protected resources. This may protect access to very sensitive resources  where users  might not be trusted with an access decision. For example, user input may not be sufficient to permit web entities operating in the background to access to a dialer that may be used to place expensive phone calls over a toll network. Other possible designs include not allowing user input to add resource access for web entities that are hosted on an untrusted or black-listed domain.","The system call implementation module  is configured to implement the system call when the access control module  decides the system call is permitted and block the system call when the access control module  decides the system call is prohibited. By placing the system call implementation module  after the access control module , the browser kernel  decides whether each system call is permitted in the access control module  before executing that system call. In this regard, the access control module  functions as a reference monitor to enforce access policies.","The device library module  contains an application programming interface (API) for communicating with the commodity OS . The OS-specific implementation lies in the device library module ; the access control module  is OS-independent. Separating the implementation aspects specific to the commodity OS  from other portions of the browser kernel  provides for the advantage of extensibility. New resources  (e.g., peripheral devices) may be added to a computer system without modification to the access control module  or the system call implementation module . Thus, it is possible to add support for a new device to the browser kernel  without implementing access control or understanding the notion of web principals because only modification to the device library module  is necessary.","The commodity OS  is configured to provide the principal access to the resource  based on the device access system call . More specifically, the commodity OS  interacts with the resource based on the API calls received from the device library module . Interaction between the commodity OS  and a resource  may be similar or the same as the device driver calls  discussed in . Because the calls received from the device library module  appear to the commodity OS  as resource calls from a local application, the commodity OS  does not behave differently when interacting with a principal  that is a web entity.","Illustrative Resource Object Model",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIG. 5"],"b":["500","502","504","506","508","510","512","518","500","520","522","506","524","526","508","528","530","532","534","512","536","518","500"]},"Each node of the ROM tree  may be granted to a web application or other principal as a capability; the granting of a node includes all the capabilities represented by leaf nodes in the subtree rooted by that node. For example, a principal  (e.g., a web application) may be granted the camera node  and thus has permission to take photos  and to record videos . Alternatively, if a more fine-grained allocation of resources is desired the principal may only be granted the photo node  including the ability to take still pictures  but lack permission to use the video node  to record video .","The separation of resource semantics (e.g., the node representation) from physical resources (e.g., the actual device) eases extensibility when adding a new physical resource that follows existing resource semantics. For example, upgrading the GPS device  to a newer model with a new driver will not affect the ROM tree  and access control to the GPS device  because the semantics are abstract representations which are not linked to a particular device, driver, or API.","Capabilities possessed by the devices may be implemented as [node ID, unforgeable-token, attributes] triples. The node ID maps to a node on the ROM tree. The unforgeable-token may be tied to a password-capability model and thus include a token that is used by the browser kernel  to prevent web entities from forging capabilities. The capability may have a list of multiple attributes including, but not limited to, the attributes shown above in Table 2.","Illustrative Processes","For ease of understanding, the processes discussed in this disclosure are delineated as separate operations represented as independent blocks. However, these separately delineated operations should not be construed as necessarily order dependent in their performance. The order in which the processes are described is not intended to be construed as a limitation, and any number of the described process blocks may be combined in any order to implement the process, or an alternate process. Moreover, it is also possible that one or more of the provided operations will be omitted.","The processes are illustrated as a collection of blocks in logical flowcharts, which represent a sequence of operations that can be implemented in hardware, software, or a combination of hardware and software. For discussion purposes, the processes are described with reference to the system shown in . However, the processes may be performed using different architectures and devices.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 6","FIG. 2"],"b":["600","602","104","106","210"]},"In block , the peripheral device access system call is compared to a semantic model of peripheral device capabilities. In some implementations, the comparison may be performed by a processor of the computing device . The semantic model of peripheral device capabilities may be a hierarchal resource object model tree similar to that shown in . In other implementations, an alternative semantic model may be used. This comparing identifies whether or not a peripheral device with the requested capability is available and, if such device is available, identifies the semantic representation of the peripheral device.","In block , the browser kernel  running in the browser OS verifies that the web service has authorization to access the peripheral device capability specified by the peripheral device access system call. As discussed above, filtering authorization and permission requests through the browser kernel allows for a consistent security policy and greater level of protection against malicious content.","In block , the semantic model of the peripheral device capabilities specified by the peripheral device access system call is correlated with a physical device  and, in some implementations, a device driver for the physical device . For example, if the access call requests access to a digital camera for the purpose of taking a photograph, the specific model of camera and the device driver for that camera are matched with the semantic model for taking a photograph. As discussed above, this use of a semantic model separates the details of physical device access from abstract representations of device functionalities used by web entities. As discussed above, the physical device  is not limited to a digital camera but may also include such peripheral devices as a GPS device, a telecom network interface device, a microphone, a speaker, or the like.","In block , the device driver operating, if a specific device driver is required, on a commodity OS  accesses the physical device  to provide the requested functionality to the web entity. In some implementations, the capabilities of the peripheral device  are provided to the web entity via the browser kernel .","The browser kernel  that is used to implement a part of this process may serve to mediate not only calls from a web entity but also to mediate communication between a browser plugin and the commodity OS . In contrast, many conventional web browsers allow browser plugins to directly access the commodity OS  operating system. Placing the browser kernel  between all resource calls, whether the call originates from a browser plugin or a web entity, provides the security and consistency discussed above.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 7","b":["116","106","700","702","116","116","110","112"]},"In block  the system call is evaluated in terms of access control policies. In some implementations, a browser kernel  includes an access control module . In the same or different implementations, the access control policies may be implemented similar to the capabilities discussed with respect to Table 2 above. When the system call is not permitted, the process  proceeds along the right side to the \u201cno\u201d branch to block  and blocks access to the commodity OS  and thus also blocks access to the resource .","Returning to block , when the system call is permitted, process  proceeds from block  along the \u201cyes\u201d branch to block  and implements the system call. In some implementations, the system call is implemented by a system call implementation module  such as shown in . At block , the system call is subsequently communicated to the commodity OS  by an application programming interface (API). The API may be the same or similar to an API used by an application (other than the browser ) running on the commodity OS . Alternatively, or in conjunction with the above-mentioned APIs, the browser  may use customized APIs that are recognized by a customized aspect of the commodity OS . In some implementations, the API is contained within a device library module  as shown in .","At block , the resource is accessed by the commodity OS . The commodity OS  in turn provides access to the browser kernel  which provides access to the principal  that issued the initial system call at block .","Illustrative Computing Device",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 8","b":["800","802","802","106","802","804","806","804","804"]},"For example, the computing device  illustrates architecture of these components residing on one system. Alternatively, these components may reside in multiple other locations, servers, or systems. For instance, all of the components may exist on a server side accessed remotely by a user through a remote terminal. Furthermore, two or more of the illustrated components may combine to form a single component at a single location. The illustrated components may also reside in a computing device without a connection to a network, such as a stand-alone database of HTML or XML documents. The computing device  may in various implementations be similar to the computing device  shown in .","Memory  may store programs of instructions that are loadable and executable on the processor of , as well as data generated during the execution of these programs. Depending on the configuration and type of computing device , memory  may be volatile (such as RAM) and\/or non-volatile (such as ROM, flash memory, etc.). The computing device  may also include additional removable storage  and\/or non-removable storage  including, but not limited to, magnetic storage, optical disks, and\/or tape storage. The disk drives and their associated computer-readable media may provide non-volatile storage of computer readable instructions, data structures, program modules, and other data.","Computer-readable storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Memory , removable storage , and non-removable storage  are all examples of computer-readable storage media. Additional types of computer-readable storage media that may be present include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which may be used to store the desired information and which may accessed by the computing device .","Turning to the contents of the memory  in more detail, the memory  may include a commodity OS  and a browser application . As discussed above, the browser application  may include a browser kernel . The browser kernel may in turn include an access control module .","The computing device  may also include input device(s)  such as a keyboard, mouse, pen, voice input device, touch input device, stylus, and the like, and output device(s)  such as a display, monitor, speakers, printer, etc. The computing device  may also include peripheral device(s)  that are themselves input device(s)  or output device(s) . The peripheral device(s)  may include a camera, a global positioning system device, a telecom network interface device, a microphone, a speaker, or a dialer. All these devices are well known in the art and need not be discussed at length.","The computing device  may also contain a communication connection(s)  that allows the device to communicate with other devices such as servers and\/or user terminals. Communication connection(s)  is an example of a mechanism for receiving and sending communication media. Communication media typically embodies computer readable instructions, data structures, and program modules. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media.","The subject matter described above can be implemented in hardware, software, or in both hardware and software. Although implementations of resource access with a multi-principal browser have been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts are disclosed as illustrative forms of illustrative implementations of controlling access to resources. For example, the methodological acts need not be performed in the order or combinations described herein, and may be performed in any combination of one or more acts."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The Detailed Description is set forth with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different figures indicates similar or identical items.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
