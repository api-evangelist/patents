---
title: Statistically-triggered heuristics
abstract: Methods, systems, and computer program products for providing a heuristics service using a generically-consumable, reusable heuristics manager object. This heuristics manager object provides a “black box” approach to statistically-triggered heuristics, and eliminates the need to write application-specific code for compiling statistics and performing complicated analysis of those statistics within each application program. In one embodiment, the heuristics manager object is provided as a web-accessible service, which may be registered in a network-accessible registry such as a UDDI registry. Enterprises may subscribe to this service for monitoring and analyzing statistics pertaining to one or more of the enterprise's applications, thereby providing a novel method of doing business for the provider of the heuristics service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07107596&OS=07107596&RS=07107596
owner: International Business Machines Corporation
number: 07107596
owner_city: Armonk
owner_country: US
publication_date: 20020314
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to a computer system, and deals more particularly with methods, systems, computer program products, and methods of doing business wherein executing application programs can use an external statistically-triggered heuristics monitor.","2. Description of the Related Art","When using processor-intensive calculations, it is a standard practice in the industry to provide algorithms for monitoring system performance, where those algorithms are optimized through use of one or more heuristics. Heuristics typically exist as paper algorithms and formulas, and to apply one or more heuristics to a specific application requires individual implementation in an application program. For example, the typical approach is to write native application support code in which statistics are gathered and compared to heuristics within a loop or called routine. This approach is effective, but it has a number of drawbacks. As one example, it is highly implementation-dependent, providing a solution that is tailored to a particular application. Therefore, existing implementations do not lend themselves to being reused among applications. As another example, programmers who provide these application-specific solutions need to write code that assumes an in-depth understanding of complex mathematical calculations, and programmers having such skills are not widely available. Furthermore, a side-effect of complex code is that program development, testing, and support costs increase, and programs tend to be more error-prone.","Yet, many applications can benefit from statistical monitoring which applies heuristics. Accordingly, what is needed is a solution that provides these benefits but avoids the limitations of prior art approaches.","An object of the present invention is to provide improved techniques for application programs to use heuristics.","Another object of the present invention to provide heuristics in a reusable form that can be leveraged by multiple applications.","Still another object of the present invention is to provide statistically-triggered heuristics that can be accessed as a network-accessible resource.","A further object of the present invention is to provide techniques for application programs to access heuristics which are implemented as external, generically-consumable resources.","Other objects and advantages of the present invention will be set forth in part in the description and in the drawings which follow and, in part, will be obvious from the description or may be learned by practice of the invention.","To achieve the foregoing objects, and in accordance with the purpose of the invention as broadly described herein, the present invention provides methods, systems, and computer program products for providing a heuristics service. In preferred embodiments, this comprises the technique of encapsulating one or more heuristics function in a heuristics object, and deploying the heuristics object as the heuristics service. Preferably, the heuristics object is a generically-consumable object.","The technique may further comprise accessing, by an application program (or by a plurality of application programs), the deployed heuristics object.","In a first preferred embodiment, the accessing may further comprise registering, by a particular application program, as a listener for one or more heuristics events generated by the heuristics functions. In this embodiment, the technique may further comprise the heuristics object asynchronously notifying the registered listeners of occurrence of selected heuristics events.","In a second preferred embodiment, the accessing may further comprise registering a particular application program with the heuristics object.","In either embodiment, the accessing may further comprise submitting, by a particular application program, statistical information to the heuristics object for application of one or more of the heuristics functions. The heuristics functions to be applied are preferably determined by a mapping encapsulated within the heuristics object. The accessing may comprise informing the heuristics object of one or more event types which are of interest to a particular application program, and\/or requesting status information from the heuristics object.","The deploying may further comprise registering the heuristics service in a network-accessible registry. The requests for status information may be submitted by a service consumer which locates the heuristics service using the network-accessible registry. A heuristics service definition specified as a markup language document is preferably used when registering the heuristics service. The registry may be a Universal Description, Discovery, and Integration (\u201cUDDI\u201d) registry and the markup language may be Web Services Description Language (\u201cWSDL\u201d).","Prior to performing the accesses, each of the application programs may programmatically locate the heuristics service in a network-accessible registry and programmatically bind to the located service.","The present invention may also be used for analyzing statistics using heuristics in an embodiment comprising: a data structure providing one or more executable heuristics functions for analyzing statistics, the data structure having an application programming interface (\u201cAPI\u201d) with which application programs can access the executable heuristics functions; receiving, on a computing device where the data structure can be accessed, one or more access requests from application programs; and performing corresponding one of the executable heuristics functions, responsive to receiving access requests.","The present invention may also be used advantageously in methods of doing business. For example, a heuristics monitoring\/analysis service may be provided, where customers (who pay, for example, a subscription fee) can design their application programs to submit statistics to this service for analysis and feedback.","Another embodiment of the present invention may comprise: encapsulating one or more heuristics functions in a heuristics object; registering a heuristics service in a network-accessible registry, wherein the registered service uses the heuristics functions in the heuristics object; programmatically accepting statistical information from application programs; and applying selected ones of the heuristics functions to the accepted statistical information, wherein the selected ones are determined programmatically according to a mapping encapsulated within the heuristics object. This embodiment may further comprise charging owners of the application programs for the application of the selected heuristics functions.","The present invention will now be described with reference to the following drawings, in which like reference numbers denote the same element throughout.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["10","10","12","14","12","10","10","16","12","14","18","20","22","14","24","12","26","14","12","28","30"]},"The device  may communicate with other computers or networks of computers, for example via a communications channel or modem . Alternatively, the device  may communicate using a wireless interface at , such as a cellular digital packet data (\u201cCDPD\u201d) card. The device  may be associated with such other computers in a local area network (\u201cLAN\u201d) or a wide area network (\u201cWAN\u201d), or the device  can be a client in a client\/server arrangement with another computer, etc. All of these configurations, as well as the appropriate communications hardware and software which enable their use, are known in the art.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["40","40","42","44","10"]},"Still referring to , the networks  and  may also include mainframe computers or servers, such as a gateway computer  or application server  (which may access a data repository ). A gateway computer  serves as a point of entry into each network . The gateway  may be coupled to another network  by means of a communications link . The gateway  may also be directly coupled to one or more devices  using a communications link , . Further, the gateway  may be indirectly coupled to one or more devices . The gateway computer  may also be coupled  to a storage device (such as data repository ). The gateway computer  may be implemented utilizing an Enterprise Systems Architecture\/370\u2122 computer available from the International Business Machines Corporation (\u201cIBM\u201d), an Enterprise Systems Architecture\/390\u00ae computer, etc. Depending on the application, a midrange computer, such as an Application System\/400\u00ae (also known as an AS\/400\u00ae) may be employed. (\u201cEnterprise Systems Architecture\/370\u201d is a trademark of IBM; \u201cEnterprise Systems Architecture\/390\u201d, \u201cApplication System\/400\u201d, and \u201cAS\/400\u201d are registered trademarks of IBM.).","Those skilled in the art will appreciate that the gateway computer  may be located a great geographic distance from the network , and similarly, the devices  may be located a substantial distance from the networks  and . For example, the network  may be located in California, while the gateway  may be located in Texas, and one or more of the devices  may be located in New York. The devices  may connect to the wireless network  using a networking protocol such as the Transmission Control Protocol\/Internet Protocol (\u201cTCP\/IP\u201d) over a number of alternative connection media, such as cellular phone, radio frequency networks, satellite networks, etc. The wireless network  preferably connects to the gateway  using a network connection such as TCP or UDP (User Datagram Protocol) over IP, X.25, Frame Relay, ISDN (Integrated Services Digital Network), PSTN (Public Switched Telephone Network), etc. The devices  may alternatively connect directly to the gateway  using dial connections or . Further, the wireless network  and network  may connect to one or more other networks (not shown), in an analogous manner to that depicted in .","In preferred embodiments, the present invention is implemented in software. Software programming code which embodies the present invention is typically accessed by the microprocessor  (e.g. of device  and\/or server ) from long-term storage media  of some type, such as a CD-ROM drive or hard drive. The software programming code may be embodied on any of a variety of known media for use with a data processing system, such as a diskette, hard drive, or CD-ROM. The code may be distributed on such media, or may be distributed from the memory or storage of one computer system over a network of some type to other computer systems for use by such other systems. Alternatively, the programming code may be embodied in the memory , and accessed by the microprocessor  using the bus . The techniques and methods for embodying software programming code in memory, on physical media, and\/or distributing software code via networks are well known and will not be further discussed herein.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3","b":["300","320","340","340","340","360","370","340","350"]},"This first embodiment preferably operates in an asynchronous manner, and implements an interface, referred to in the FIG. as \u201cHeuristicListener\u201d , that understands how to receive an event  from the heuristics manager object. (Typically, an application program  implemented according to the first preferred embodiment will register as a listener for heuristics events. This type of registration and listening scenario is generally known in the art, although its use for statistically-triggered heuristics is not known in the prior art.) The heuristics manager object preferably applies the heuristics in an iterative manner, using a timer-driven or event-driven approach. An example of an event that preferably triggers application of the heuristics to the gathered statistics is receipt of incoming data from an application, as shown at element  of  (and also as element  of , described below with reference to the second preferred embodiment). An event that may, in some implementations, trigger the heuristics analysis is receipt of a status inquiry  from a service consumer  (also described below). An implementation of the heuristics manager object in this first preferred embodiment may choose to support only event-driven analysis, and\/or it may choose to support timer-driven analysis.","The example in  depicts four types of statistics  that are monitored by the heuristics manager object , referring to those statistics abstractly as \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, and \u201cD\u201d. Three types of heuristics , referred to as \u201cX\u201d, \u201cY\u201d, and \u201cZ\u201d, are also depicted. Suppose statistic \u201cC\u201d represents network bandwidth measurements, and according to the mapping , heuristic \u201cZ\u201d analyzes these measurements. (For ease of illustration, mappings have not been shown for the other statistics.) Once a threshold is reached, such as the network delay measurement \u201cC\u201d exceeding some value encoded in heuristic \u201cZ\u201d, the heuristics manager object in this asynchronous model throws an exception. This exception is exemplified in  by \u201cSatisfiedHeuristicEvent\u201d . This exception results in an event  being sent to the application program, through its HeuristicListener interface. (The manner in which the application responds to a generated event when using either of the models shown in  is application-specific, and does not form part of the inventive concepts of the present invention.)",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":"430"},"In this embodiment, an application program  sends  statistics information to heuristics manager object  using the object's service interface (described below with reference to ). The heuristics manager object receives the statistics , compiles them, and in a similar manner to that described for , applies a predetermined heuristic  to each statistic based on the defined mapping  of a statistic class to an appropriate heuristic.","This second preferred embodiment preferably operates in synchronous mode, whereby information is returned responsive to request messages. If a message received from an application program results in a completion event by one or more of the heuristic functions encapsulated in object , a return code is preferably returned  to that application program. The application program may act upon that return code in a variety of application-specific ways, which are outside the scope of the present invention.","The heuristics manager object  may also be accessed by one or more service consumers  to retrieve status information. The service consumers may be taken from the set of application programs  that report statistics. Alternatively, the service consumers may be distinct from this set of application programs. For example, an enterprise-wide management function might access the heuristics manager object in the role of service consumer to obtain information on execution of the enterprise's application programs.","In an optional enhancement, embodiments of the heuristics manager object in either model may compile and monitor statistics for multiple application programs simultaneously. When the heuristics manager object supports more than one application program, an identifier of the application program is preferably associated with the compiled statistics. Such an identifier enables associating the compiled statistics with the application, and in the asynchronous model of , enables selectively notifying application programs of triggered events. (An identifier of the application program submitting statistical information to the heuristics manager may be passed by the application program as part of the submitted message.) The identifier also allows application-specific queries to be requested by service consumers in the web services model of .","(Note that service consumers have not been illustrated in . In this asynchronous model, service consumers are primarily the application programs that register as event listeners. Alternatively, a service consumer may be supported using the same, or similar, interface as the applications that report statistics.).",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 5","FIG. 5"],"b":["500","510","504","514","520","500","502","504","520","522"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5","b":["510","512","514","524","520"]},"Although the sample pseudocode illustrated in  is quite simple, it serves to illustrate how the present invention operates. An actual heuristics function may be much more complicated, and as stated earlier, the details of heuristic algorithms are outside the scope of the present invention.","An application program which accesses a heuristics manager object according to the present invention may be deployed to operate on the same device on which the heuristics manager object is provided, or the application program may execute on one device and the heuristics manager object may be deployed to reside on a different device. In the former case, the present invention may be used in a stand-alone mode without having a network connection. In the latter case, the application program may access the heuristics manager object across a network using a wireline connection or a wireless connection (or perhaps using a combination thereof). Wireline connections are those that use physical media such as cables and telephone lines, whereas wireless connections use media such as satellite links, radio frequency waves, and infrared waves. Many connection techniques can be used with these various media, such as: using the device's modem to establish a connection over a telephone line; using a LAN card such as Token Ring or Ethernet; using a cellular modem to establish a wireless connection; etc. The devices on which the application program and heuristics manager object reside may be any type of computer processor, including laptop, handheld or mobile computers; vehicle-mounted devices; desktop computers; mainframe computers; etc., having processing capabilities (and communication capabilities, when the device is network-connected). These techniques are well known in the art, and the hardware devices and software which enable their use are readily available.","The application programs with which the present invention may be used advantageously may be executing on end-user workstations, mainframes or servers, or any other type of device having computing or processing capabilities (including \u201csmart\u201d appliances in the home, cellular phones, personal digital assistants or \u201cPDAs\u201d, dashboard devices in vehicles, etc.).","When implemented in software, the present invention may be implemented as one or more modules of one or more computer software programs. The software is preferably implemented using an object-oriented programming language, such as the Java\u2122 programming language. In preferred embodiments of the present invention, represented by , the heuristics manager object is preferably implemented as a JavaBean\u2122 and is accessed using a Java API call. (\u201cJava\u201d and \u201cJavaBean\u201d are trademarks of Sun Microsystems, Inc.).","When the present invention is used in a networking environment, the networking environment may be a Web environment, where an application program executing on one device communicates with a heuristics manager object on another device using a protocol such as HTTP to transfer messages, where the two devices are connected through the Internet. Alternatively, the application program and heuristics manager object may be communicating in other non-Web networking environments (using the Internet, a corporate intranet or extranet, or any other network), for example using techniques such as Remote Method Invocation (\u201cRMI\u201d) or Common Object Request Broker Architecture (\u201cCORBA\u201d). Configurations for the environment include a client\/server network, as well as a multi-tier environment. Or, as stated above, the present invention may be used in a stand-alone environment, where the application program and heuristics manager object both reside in the same physical device, in which case a network connection is not required. These environments and configurations are well known in the art.","The second preferred embodiment of the present invention, using a web services model, will now be described in more detail. Web services are intended to facilitate \u201cjust-in-time\u201d application integration via open web-based standards, such as HTTP (\u201cHypertext Transfer Protocol\u201d), SOAP (\u201cSimple Object Access Protocol\u201d) and\/or XML (\u201cExtensible Markup Language\u201d) Protocol, WSDL, and UDDI. HTTP is commonly used to exchange messages over TCP\/IP (\u201cTransmission Control Protocol\/Internet Protocol\u201d) networks such as the Internet. SOAP is an XML-based protocol used to invoke methods in a distributed environment. XML Protocol is an evolving specification of the World Wide Web Consortium (\u201cW3C\u201d) for an application-layer transfer protocol that will enable application-to-application messaging. XML Protocol may converge with SOAP. WSDL is an XML format for describing distributed network services. UDDI is an XML-based registry technique with which businesses may list their services and with which service requesters may find businesses providing particular services.","Thus, when the statistically-triggered heuristics manager object is provided as a web service, an application with statistics to be monitored\u2014and\/or a service consumer that wishes to query the heuristics manager object\u2014may interrogate the UDDI registry to locate this service at run-time, and may dynamically bind to a provider's offering of this service. This preferably occurs using service information which is conveyed in a platform-neutral WSDL format using SOAP\/XML Protocol and HTTP messages. (Hereinafter, references to SOAP should be construed as referring equivalently to semantically similar aspects of XML Protocol. For more information on SOAP, refer to http:\/\/www.w3.org\/TR\/2000\/NOTE-SOAP-20000508, titled \u201cSimple Object Access Protocol (SOAP) 1.1, W3C Note May 08, 2000\u201d. See http:\/\/www.w3.org\/2000\/xp for more information on XML Protocol. More information on WSDL may be found at http:\/\/www.w3.org\/TR\/2001\/NOTE-wsdl-20010315, titled \u201cWeb Services Description Language (WSDL) 1.1, W3C Note 15March 2001\u201d. For more information on UDDI, refer to http:\/\/www.uddi.org\/specification.html\u201d. HTTP is described in Request For Comments (\u201cRFC\u201d) 2616 from the Internet Engineering Task Force, titled \u201cHypertext Transfer Protocol\u2014HTTP\/1.1\u201d (June 1999).)","The sample markup language document  in  shows how a network-accessible heuristics service may be defined, according to the second embodiment of the present invention. As shown therein, a heuristics service includes an interface for registering applications that will interact with the heuristics manager object (see elements  and ); for specifying that one of a known set of events should be monitored (see elements  and ); for logging a specific event or statistic with the heuristics manager object (see elements  and ); and for querying the heuristics manager object for current status information (see elements  and ). As will be obvious, the illustrated messages and operations are merely illustrative of one way in which the heuristics service may be provided.","In the example of , the \u201cregister\u201d operation  has a request message and a response message. As specified at element , the request message identifies the application that is to be registered, preferably by supplying its name as a string value. A host name parameter is preferably supplied to identify the device on which this application program is executing. (The value of this parameter may be a network address.) In preferred embodiments, each application sends its own registration message.","Referring now to , the application registration operation is depicted at , where an application named \u201cApp. 1\u201d sends a registration message to the heuristics manager object. The response message in this example, again referring to element , provides an integer return code.  shows a return code of \u201c0\u201d being returned, which presumably signifies that the registration of \u201cApp. 1\u201dcompleted successfully.","The pseudocode in  illustrates how the heuristics manager object might implement the register service. See element . As shown therein, the heuristics manager object may create a unique key for this application, using (for example) its supplied name and a randomly-generated numeric identifier, and may then store this application key in a table or other repository of registered applications. Preferably, the host name value is also stored in this repository.","The \u201cmonitorEventType\u201doperation  in this example also has a request message and a response message. As specified at element , the request message specifies the type of event and also provides a priority value. The request message also prctbrably identifies the host name and application name for which this request is being submitted. A priority value parameter may be used as a weight on the heuristic analysis for this event type, based on the event type's importance to this particular application. Alternatively, an interface might omit the priority parameter. The event type is depicted as being a string value, although alternatively numeric identifiers might be used, and the priority is preferably an integer value.","An application might submit multiple monitorEventType request messages (e.g. during an application set-up phase), thereby indicating that it is interested in multiple types of events. This is illustrated graphically in  at element , where the application named \u201cApp. 1\u201d is shown as sending monitorEventType request messages for \u201cn\u201d different events. A response message is preferably returned for each such request message, providing an integer return code to indicate whether the monitor request completed successfully.","An illustrative set of event type values is the following set:\n\n","Element  of the pseudocode in  shows how the heuristics manager object might implement the monitorEventType service. As shown therein, the heuristics manager object might add the specified event type to a table or other repository of monitored-event types for this application, and apply the specified priority (for example, by storing it in an object or data structure associated with the present application, for subsequent use when performing heuristics analysis for that application).","The \u201clogEvent\u201d operation  in the example service definition has a request message and a response message. As specified at element  the request message identifies the type of event that is to be logged with the heuristics manager object, preferably by supplying its name as a string value, as well as a magnitude value. The request message also preferably identifies the host name and application name for which this request is being submitted. In the example, the magnitude value depends on the type of event. For the previously-described illustrative set of four event types, the magnitude values are preferably specified in units of: (1) kilobytes; (2) cycles; (3) kilobytes; and (4) microseconds, respectively.","The log operation is depicted at element  of , where the application named \u201cApp. 1\u201d sends a plurality of logEvent messages to the heuristics manager object. (For purposes of illustration only, the application is shown as sending a logEvent message for each of the event types for which it sent a monitorEventType message.) Again, each request message preferably has a corresponding response message to signify whether the log operation completed successfully.","Element  of the pseudocode in  illustrates a representative implementation of the logEvent service. The pseudocode indicates that the event and magnitude arc accepted and passed to one or more appropriate heuristics functions (according to the defined mapping, as described above with reference to ). Preferably, a \u201c0\u201dreturn code is returned on the response message if the event is logged normally, and a non-zero return code (such as \u201c1\u201d) is returned if a completion event is triggered.","The \u201cgetStatus\u201d operation  in the example of  also has a request message and a response message. As specified at element , the request message specifies the host name and application name for which status information is being requested.","The getStatus request messages are typically issued by service consumers, but may also be submitted by application programs if desired. Multiple getStatus request messages might be submitted, for example to sample the status information periodically. An indication of this is provided in , where a first getStatus request  is submitted by a service consumer during the registration phase of application program \u201cApp. 1\u201d; a second getStatus message  is submitted during the application set-up phase, and a third getStatus message  is submitted while the application is executing and sending in logEvent messages.","According to the example service definition, the getStatus response message comprises an XML document that contains, for purposes of illustration, a complete log of the activity which has been logged by the heuristics manager object for this application. Thus, while the SOAP bindings (see element  of ) which are specified in the service definition document  are generally specified as using binary encoding, the binding for the getStatus response message is specified as literal information (see element ) to accommodate the XML document.","Element  of the pseudocode in  shows how the heuristics manager object might implement the getStatus service. As stated therein, the heuristics manager object in this example returns the XML document as has just been discussed.","By providing the heuristics manager function using a generically-consumable object as disclosed herein, the drawbacks of the prior art are avoided. A generically-accessible, reusable object eliminates the application-specific code of prior art approaches, and frees application programmers from the details of writing code for compiling statistics and performing complicated analysis of those statistics within each application program. Instead, the application of heuristics to the compiled statistics according to the present invention is provided using a \u201cblack box\u201d approach. In addition, when the heuristics manager object is provided as a web-accessible service, the present invention additionally defines new revenue channels for a provider of heuristics services. For example, a \u201cstatistically-triggered heuristics\u201d service provider may register its service through a registry such as a UDDI registry, and enterprises may subscribe to this service for monitoring and analyzing statistics pertaining to one or more of the enterprise's applications.","It should be understood that the two embodiments described herein are not limiting of the inventive concepts of the present invention, and alternative implementation strategies may be used without deviating from the scope of the present invention. Furthermore, preferred embodiments are described with reference to receiving statistics from application programs that are \u201cexecuting\u201d. However, the disclosed techniques may also be used advantageously in after-the-fact reporting scenarios, wherein application programs gather statistical information as they execute but do not report this information until they have otherwise completed their processing. Thus, references herein to \u201cexecuting\u201d application programs are intended to be illustrative, and specifically include application programs that continue to execute only for purposes of reporting statistics and other types of shut-down processing.","While perferred embodiments of the present invention have been described, additional variations and modifications in those embodiments may occur to those skilled in the art once they learn of the basic inventive concepts. Therein, it is intended that the appended claims shall be construed to include preferred embodiments as well as all such variations and modifications as fall within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3","FIG. 4"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 6","FIGS. 6A\u20136E"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
