---
title: Access control for an e-commerce application
abstract: A system and method for selectively granting access to a target object. In one embodiment, the system includes an object data store, an access control instruction data store, an action data store, a context, and an access determination engine. The object data store includes a plurality of hierarchically structured target objects and a plurality of hierarchically structured actor objects. The access control instruction data store includes a plurality of hierarchically structured access control instructions. The action data store comprising a plurality action objects. The context includes an actor attribute, an action attribute, and a target attribute. The access determination engine configured to selectively grant access to the target object based on a first set of access control instructions having attributes that match the context and a second set of access control instructions having attributes that are hierarchically broader than the attributes of the context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07120698&OS=07120698&RS=07120698
owner: Sun Microsystems, Inc.
number: 07120698
owner_city: Palo Alto
owner_country: US
publication_date: 20010920
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to a system and method for a hierarchical access determination system and method, and more particularly to a system and method for determining access to a target object based on an actor attribute, an action attribute and a target attribute to determine which access control instructions are relevant to a particular access request.","2. Discussion of the Related Art","Conventional systems and methods are available for protecting resources or target objects from unauthorized access and manipulation. Many current systems have limited inheritance capabilities. For example, although a current directory server may enable an access control instruction (\u201cACI\u201d) to designate a group of targets, it is not possible to implement complex ACIs in which access rights are determined based upon the hierarchical structure of the actor data store, the action data store, and the target data store. Furthermore, current directory servers do not allow an administrator to readily extend the types of actions controlled by the system. For example, conventional directory servers enable an administrator to establish ACIs relating to a set of pre-defined actions: reading, writing, adding, deleting, searching, comparing, and self-writing. However, the systems may not be configured to enforce administrator created actions, such as a \u201cbuy_from_catalog\u201d action.","Additionally, current directory servers are not configured to allow an administrator to establish an implication hierarchy, or a logical hierarchy relating to actions. Other limitations may exist with current access control systems.","Accordingly, the present invention is directed to a hierarchical access determination system and method that substantially obviates one or more of the problems due to limitations and disadvantages of the related art.","Additional features and advantages of the invention will be set forth in the description that follows, and in part will be apparent from the description, or may be learned by practice of the invention. The advantages of the invention will be realized and attained by the structure and method particularly pointed out in the written description and claims hereof as well as the appended drawings.","A system for selectively granting access to a target object is disclosed. The system includes an object data store comprised of a plurality of hierarchically structured target objects and a plurality of hierarchically structured actor objects The system also includes an access control instruction data store comprising a plurality of hierarchically structured access control instructions. The system also includes a context comprising an actor attribute, an action attribute, and a target attribute. The system also includes an access determination engine configured to selectively grant access to the target object based on a first set of access control instructions that have attributes that match the context and a second set of access control instructions having attributes that are hierarchically broader than the attributes of the context.","A method for selectively granting access to a target object is disclosed. The method includes receiving a context comprising an actor attribute, an action attribute, and a target attribute. The method also includes determining a first set of hierarchically broader actor attributes based on the actor attribute. The method also includes determining a second set of hierarchically broader action attributes based on the action attribute. The method also includes determining a third set of hierarchically broader target attributes based on the target attribute. The method also includes determining, based on the actor, action and target attributes and the first, second and third set of hierarchically broader attributes, a set of relevant access control instructions.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of the invention as claimed.","Reference will now be made in detail to the preferred embodiment of the present invention, examples of which are illustrated in the drawings.","According to , access control system  determines whether a requesting or actor object may perform a particular action on a requested or target object. More specifically, access control system  determines whether an actor object may perform an action on a target object based on one or more relevant instructions. The instructions may be known as access control instructions (\u201cACIs\u201d), wherein relevant ACIs are determined based upon a hierarchical structure of the actor, action, and target data stores. For example, access control system  may be used to allow a first actor (\u201cperson X\u201d) of a group (\u201ccompany Y\u201d) to perform a particular action (\u201cread\u201d) on a target (\u201ccompany Y account\u201d) because an ACI establishes that all members of company Y may perform all actions on the company Y account. In addition to the targets and actors having a hierarchical relationship, the actions may have an implication hierarchy in which the granting of permission to perform a first action, such as update, implicitly grants the permission to perform a second action, such as read.","To implement this and other functions, access control system  may be configured as depicted in . Access control system  may comprise object data store , action data store , ACI data store , access determination engine , and context provider . Each of these data stores may be managed by operationally independent companies. For example, action data store  and ACI data store  may be managed by a service-provider company. Additionally, object data store  may be managed by two or more operationally independent companies. For example, object data store  may comprise a first set of objects that is managed by a first company and a second set of objects that is managed by a second company. Each of the data stores may be implemented as a directed acyclic graph in a Lightweight Directory Access Protocol (\u201cLDAP\u201d) server, in a database such as an extensible markup language (\u201cXML\u201d) file, or otherwise stored or determined. Data stores , , , and context provider  may transmit and receive data from access determination engine  by any type of logical or physical communication path, including a system bus, an Internet connection, a virtual private network connection, a local area network connection, a wireless connection, other type of connection, and the like. Each of these components is described in greater detail below.","Object data store  comprises a set of information relating to actors and targets. In one embodiment, object data store  comprises a set of proxy objects for data that is stored and managed outside of object data store . For example, objects may comprise information relating to a buyer, a seller, a pricelist, a location, or other type of entity. Object data store  may comprise one or more logical tree structures, as disclosed in greater detail in relation to . A logical tree structure may relate to a target object in a first access determination process and an actor object in a second access determination process. A target may be defined as an entity or group of entities to which a particular ACI applies. An actor, on the other hand, may be defined as a resource that is attempting to perform an action upon a target. For example, the object may be a proxy for a human user of the system.","Action data store  comprises information relating to a plurality of possible actions that are managed by the present invention. An action may be defined as a specific operation that an actor object may perform on a target. For example, action data store  may include one or more of the following actions: update, read, delete, create, and the like. Additionally, action data store  may comprise additional, user-defined actions. For example, a user may create a new type of action entitled \u201cpurchase\u201d to create ACIs that establish a group of actors that may perform the purchase action on a group of targets. Action data store  may comprise an implication hierarchy in which the granting of permission to perform a first action, such as update, implicitly grants the permission to perform a second action, such as read. This implication hierarchy may be modified based on the attributes of a particular organization. For example, the implication hierarchy may be modified such that an authorization to perform the second action implicitly grants permission to perform the first action. By way of a specific example, a first organization may imply a create access when an update access is provided (e.g., if a user is granted the permission to create objects, the user is implicitly granted permission to update objects), whereas a second organization may not imply a create access when an update access is provided. Additionally, the implication hierarchy may be modified to include actions that are added by a particular organization.","ACI data store  comprises a plurality of ACIs. In one embodiment, ACIs have an actor attribute, an action attribute, and a target attribute. ACI data store  may receive a set of relevant attributes and, based on these attributes, return one or more ACIs. The characteristics of an ACI are explained in greater detail with respect to  below.","Access determination engine  is responsible for selectively determining whether to allow or deny access when a given context is received. Access determination engine  may receive a context from context provider . Additionally, access determination engine  may receive a set of relevant actor, action, and target objects from object and action data stores  and . Furthermore, access determination engine  may receive a set of relevant ACIs from ACI data store . The process by which access determination engine  receives this information and determines whether to allow access is described in greater detail in relation to  below.","Context provider  provides context to access determination engine . For example, context provider  may be an electronic-commerce application. Context provider  also may provide a context comprising an actor attribute, an action attribute, and a target attribute. Additional information may be provided, such as an actor internet protocol address.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["2100","2200","2300","2100","2200","2300","2100","2200","2300","140"]},"By way of example, company organization chart  depicts an organization for Company . Company  includes two divisions, Division (1)  and Division (2) . Division (1)  includes three teams , , and . Additionally, some or all of the teams may have individuals associated with the team (not shown). Similarly, Division (2)  may include additional teams, individuals, or other nodes and\/or leafs that are not shown. Company organization chart  is managed entirely by Company , such that a system receives updates to company organization chart  from Company . Alternatively, company organization chart  comprises a proxy representation of an externally managed data store.","In one embodiment, an access request by an actor may invoke one or more relevant ACIs. Thus, all matching and hierarchically broader ACIs may be relevant to a received context. For example, a context indicating that a transaction between Team (1)  has requested to perform Action (2)  on Target Object (C)  may invoke a hierarchically broader ACI having attributes associated with Division (1) , Action (2) , and Category (A) . The broadest buyer-seller-object rule for the hierarchies depicting in  is between Company , Action (1) , and Catalogue .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIG. 3"],"b":"140"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["400","410","420","430","440","450","460","440","460","460","470","480","490"]},"At step , the system receives a context. This context may be received by access determination engine . For example, access determination engine  may receive a context having the an actor attribute value of .., an action attribute value of ., and a target attribute value of ... This context may be received as a recordset, an XML document, or by other data communication methodology.","At step , the system determines actor, action, and target attributes of the received context. For example, using the context described above, the system may determine that the received context has an actor attribute value of .., an action attribute value of ., and a target value of ... From this received context, the system may determine that the actor object is a child of actor object ., and that actor object . is similarly a child of actor object . These logical tree relationships may be returned to the access determination engine  so that it may determine which rules are relevant, as discussed in greater detail with reference to step .","At step , the system determines relevant ACIs pricing rules. In one embodiment, all matching and hierarchically broader ACIs are relevant rules. A hierarchically broader rule is any rule that applies to the current context due to inheritance based on the data store hierarchy. In the present example, each of the following rules would be relevant as hierarchically broader ACIs:",{"@attributes":{"id":"p-0034","num":"0033"},"b":["1","1","1","2","1","3","1","3"]},{"@attributes":{"id":"p-0035","num":"0034"},"b":["1","1","2","1","3","1","3","1","1","1"]},{"@attributes":{"id":"p-0036","num":"0035"},"b":["1","2","1","3","1","3","1","1","1"]},{"@attributes":{"id":"p-0037","num":"0036"},"b":["1","1","1","2","3","1","3","2","1"]},{"@attributes":{"id":"p-0038","num":"0037"},"b":["1","1","1","2","1","3","1","3","1","3"]},{"@attributes":{"id":"p-0039","num":"0038"},"b":["1","2","3","1","1","1","3","1","3","2","1"]},"There are additional, unlisted hierarchically broader rules. In addition to filtering rules based on actor, action, and target attribute values and hierarchies, other parameters may be used. For example, an otherwise applicable ACI may be inapplicable if an effective date criteria is not satisfied.","At step , the system determines whether there are conflicting ACIs, such as multiple relevant ACIs. Specifically, the system may determine whether any relevant ACIs have conflicting access values, such as allow\/grant or deny, with each other and\/or whether any relevant ACIs have conflicting access values with a default access rule. The default access rule may deny access and any relevant ACI automatically supersedes this default access denial. Explicit access denials, however, are not superseded, and are resolved in accordance with the conflict resolution policy, as disclosed with respect to step .","If there are conflicting ACIs at step , the system proceeds to step  and performs conflict resolution. The conflict resolution strategy may be implemented such that if any relevant rule denies access, access is denied. This conflict resolution strategy denies access even if, for example, an ACI that matches the received context grants access whereas a hierarchically broader ACI denies access. Other conflict resolution policies also may be implemented.","The system then proceeds to step  and determines whether access is allowed. If there are no conflicting rules at step , the system proceeds directly to step . If access is allowed, the system proceeds to step  and allows the actor to perform the requested action on the target. For example, the system may allow a user to update a sales record object. If access is not allowed, the system may generate a flag that access was denied. For example, if several relevant ACIs granted access and one denied access, access is denied and the system throws an exception and logs that the access attempt occurred and was denied. Other actions also may be taken upon the denial of access to a requested target.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5","b":["560","140","140","110","1","1","1","560","2","3","1","3","140","130","560"]},"Any ACI having attributes that match the received context (e.g., .., ., and ..) or having attributes that are broader hierarchically than the received context (. or , , and . or ) may be relevant ACIs. If an ACI has any attribute that fails to match and fails to be broader hierarchically than the received context, such as an ACI having an action . attribute value, the ACI is not relevant. The absence of an attribute in an ACI may indicate that the ACI is unrestricted with respect to that attribute.","Accordingly, as depicted in , relevant ACIs , , , , , and the received context  may be stored in a memory structure  associated with access determination engine . As disclosed above, those ACIs that match the received context  (e.g., relevant ACI  matches the received context ) and those ACIs that are hierarchically broader than the received ACI (e.g., relevant ACIs , , , and  may be broader hierarchically than the received context ) may be provided to memory structure . The present invention may be implemented using query-filters for ACIs and other objects. For example, the list of relevant ACIs based on a received context may be implemented by constructing the appropriate query filter to return relevant ACIs, rather than retrieving all the ACIs and filtering the result set.","To further illustrate the relevant ACI determination process, each of the relevant ACIs depicted in  may be evaluated. Relevant ACI  is relevant because each of the ACI's attribute values are the root values of the hierarchy and, therefore, each is broader hierarchically than the corresponding context attribute value. Accordingly, this ACI establishes that during the effective period, any object in Company may perform action . on any object in Catalogue, subject to any conflicting ACIs. Relevant ACI  is relevant because the actor and action attributes of the ACI match those of the received context, and the target attribute (.) is broader hierarchically than that of the received context (..). Relevant ACI  is relevant because the actor and target attributes of the ACI match those of the received context, and the action attribute is left blank, meaning that the value defaults to the root value which is hierarchically broader than 2.1. Finally, relevant ACI  is relevant because the action attribute matches that of the received context, and the actor and target attributes are broader hierarchically than the received context.","The application programming interface (\u201cAPI\u201d) may be patterned after the security architecture in a java platform with two distinctions\u2014the ability to have multiple security policies concurrently active in an execution context, and a data-object aware API that is based on object handles. Each data object can be identified by a handle. The handle plays the role of java.security.Principal and identifies the caller (i.e., actor in the present invention) whose privileges are to be checked. The exposed programming interface is configured to be as similar as possible with the java security architecture, thereby shielding system administrators from the implementation of the data store subsystems , , and, . For example, data store subsystems , , and,  could be implemented as an LDAP server, a relationship-based attribute server, or a hybrid of the two without changing the API exposed to an administrator. In this way, the present invention may be implemented in a data store agnostic manner.","It is understood that there are two modes of access control enforcement mandatory and advisory. With mandatory access control, all paths to an object are guarded by an ACI. This kind of access control may be enforced by the data store that contains the object. The data store performs the appropriate check before permitting access to the target. Advisory access control is less robust than the mandatory access control. With advisory control, an application guards its advertised paths to the data store. The present invention may be implemented in accordance with either of these access control enforcement schemes. The type of access control enforcement scheme may be determined based on an object definition, thereby enabling the access control enforcement scheme to be changed without modifying any source code.","The present invention may be implemented using groups. A group represents a collection of objects, such as business objects. Each group has a name, a unique identifier, and a collection of objects. While it may be desirable to have an ACI for each pair of objects that make up an actor and a target, several problems, may result such as including the large administrative overhead, large number of ACIs, and the fact that the security administration does not naturally model the business policies. The net result is that such a model does not scale well with the number of targets and actors. Ease of administration is facilitated by using the notion of object groups. Groups are the basic unit of granularity in access control administration.","Access control groups may become self-defeating if there are too many groups relative to the number of objects in the system, or if the groups are not designed with sufficient care. Groups are defined to implement a specified security policy, rather than having to infer the policy based on the ACI and the group distribution. It is possible to specify a group in accordance with the present invention in a number of ways, including: by specifying the object class\/type; by enumerating set of objects (e.g., GUID, or by the pair of object-type, primary-key); by specifying a collection of groups that are aggregated to form this group; and by specifying the relationship with respect to an object; by specifying a \u2018bind rule\u2019\u2014i.e., an applicability condition (the name of a search filter that is known to the system\u2014a SQL query file or an LDAP search filter). Other techniques of specifying groups also may be used. A system administrator may limit the nesting of groups in order to decrease processor load and increase system speed. Groups may establish hierarchy, or may be defined in addition to the existing hierarchy for better definition access control in a particular system.","The present invention may be implemented using object-oriented design patterns and an object oriented programming language. Accordingly, the sequence of acts implemented by the present invention may be modified without departing from the scope of the present invention. By way of specific example, the system may determine which analysis framework is applicable at any time after the transaction has been received.","It will be apparent to those skilled in the art that various modifications and variations can be made in the present invention without departing from the spirit or scope of the invention. Thus, it is intended that the present invention cover the modifications and variations of this invention provided they come within the scope of the appended claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are included to provide a further understanding of the invention and are incorporated in and constitute a part of this specification, illustrate embodiments of the invention and together with the description serve to explain the principles of the invention. In the drawings:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
