---
title: Method and system for building a report for execution against a data store
abstract: A data query and reporting method and system are provided. The method and system allow non-technical computer users to build and execute complex database queries. The method and system accommodate the need for a simple, easy-to-understand interactive and iterative means for generating and validating database queries. The method and system reduce the complexity and costs associated with retrieving useful information for organizations of all sizes, especially smaller businesses. The method and system support a robust security model, enabling organizations to protect sensitive data while providing broad data access.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814093&OS=07814093&RS=07814093
owner: Microsoft Corporation
number: 07814093
owner_city: Redmond
owner_country: US
publication_date: 20030725
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to information processing and more particularly to query and reporting systems and methods related to information processing.","Organizations have always been large collectors of data. During the past two decades, the sharply increasing popularity and advancement of personal computers have introduced many new options and compelling opportunities for amassing great stores of data. Notwithstanding, much of the value in this captured data lies in the ability to retrieve and review it in certain ad hoc selections and presentations in order to discover information contained in the data.","Historically, institutions have generated countless reports an extracts of data to alleviate this problem. In most instances, programmers who understand the systems used to capture data develop these reports and extracts. However, developing suitable extraction and reporting tools for generating ad hoc queries against available data frequently has required too much time and human capital, significantly limiting the usefulness of the data.","Legacy systems have significantly contributed to the problem. In the 1970s, mainframe computers comprised the center of most database systems development. The 1980s brought new mini-computer platforms. The late eighties and early nineties brought the client-server architecture running on personal computer hardware and popular server platforms such as Unix, NetWare and Windows. Despite these changes in platforms, architectures, tools, and technologies, large amounts of data and large numbers of data analysis applications continue to reside in the mainframes of the 1970s. By some estimates, more than 70 percent of existing institutional data still resides on mainframes.","To cope with this problem, several significant technological advances have been made. First, the advent of more powerful personal computers and operating systems has resulted in an explosion of data storage in standardized data stores or databases and desktop tools to manipulate this data. Second, technological advances have resulted in newer enterprise-class applications to manage data and an understanding of the fundamental differences between transactional and analytical systems. These advances have given rise to the \u201cdata warehouse\u201d concept for consolidating resources around data retrieval. Third, display applications have made significant progress in providing users with easier and better access to data.","Although the foregoing technological advances have made significant progress to wards solving the problems associated with extracting useful information from data, several problems still exist. To be truly useful, information needs to be accessible and useable by a broad cross-section of information consumers. Current systems are too complex, too expensive, too rigid and too insecure to support broad access and use of information.","Prior systems are too complex to support access and use by a broad cross-section of information consumers. The bulk of the world's population simply does not have the skills necessary to use them. Most will likely never have the skills necessary to compose and submit database queries. Some have suggested that desktop applications are an answer to this problem. However, desktop database solutions typically result in fragmented data that is oriented towards very specific needs. Moreover, this approach to data management assumes the end user has the time to expend on managing the data in spreadsheets, files, and desktop databases. White some users may be proficient at data management, most undertake these tasks as a necessity. Given the choice, most users find it more efficient to focus on actual analysis.","Moreover, the solutions proffered by prior systems to address this complexity often do not work well. Many require information users to work through experts. However, many information consumers cannot provide specific, accurate requirements to a report writing expert on the first try. Thus, a typical query\/report cycle involves several iterations to get the data and presentation correct and to validate the results.","Typically, prior systems offer few tools, if any, to unsophisticated information consumers for quickly and easily creating reports without programming assistance. Existing tools are limited to simplified wizard and web interfaces that simplify complexity by minimizing the number of options and inputs required of users. However, because designers of these wizards and web interfaces presume that specific types of data will be manipulated, these interfaces may be inflexible and lead to inaccurate tables or cross sections of data when applied to different types of data. They may also restrict the information user from accessing needed information.","Prior systems have often been too expensive to support broad access and use. The emergence of special data warehouses deploying online analytical processing (OLAP) and complex data models requires that data be transformed into multidimensional arrays or cubes, limiting both flexibility and timeliness of the data to some extent and requiting expensive applications and programming support. Because of such, current systems are so complex that they can only be deployed successfully in large enterprises that can afford them. Millions of small-to-midsize institutions also need access to business data for operational and decision-making purposes. While these institutions may not have formal, specialized data warehouses, they do need to perform reporting and analysis functions. Regardless of an organization's size, improving the ability to access and use data is critical to success.","Prior systems have frequently been too rigid to support broad access and use. Current systems limit user interaction with data. Users run reports typically created by experts. Users cannot generally look at fields or relations other than those included by experts. Users generally cannot drill down on data or drill through data to determine if the data makes sense.","Moreover, the various physical data layouts used in analytical systems have diminished the value of the data for many information users. Most transactional systems employ an entity-relationship (ER) data model. ER is a modeling technique that seeks to remove redundancy in data, thus increasing transactional speed. ER removes redundancy by recognizing that pieces or fields of information are related to other fields of information through one-to-one, one-to-many, and many-to-many relationships and by organizing these fields in several interrelated tables. A byproduct of ER modeling is that the relations incorporated into the data model generally embody business or logical relations. These relations are inherently understandable by humans because they are based upon the way humans manage data. Humans inherently know that customers have names, address and phone numbers, and that they place orders. Humans inherently know that orders are shipped through shippers, occur in sales regions, are taken by specific sales personnel and are for certain products.","Because ER-modeled systems result in numerous database tables, analytical systems typically do not handle them very well. As described above, transactional systems are generally modeled for data integrity and transactional speed. Typically, transactional systems only need to handle relatively small amounts of information. Most transactional systems only maintain data for a day, week, month or year. Accordingly, and because they typically utilize an ER data model, retrieving data from a transactional system often requires joining several database tables. Because transactional databases are relatively small, these joins do not require extensive processing power or memory. Analytical systems, however, are built to analyze large quantities of data. Accordingly, analytical systems contain a great deal of data. Frequently, data in analytical systems span several years or the entire life cycle of the associated institution. Because they contain extensive data, executing joins on multiple tables, typically requires a great deal of processing power and memory.","Analytical systems have attempted to overcome excessive processing and memory needs through alternative physical data modeling strategies. Most of the existing data modeling strategies require transformations of transactional data from their ER-modeled structures into more analytically friendly, flat data models. While these efforts are designed to increase processing speeds, they often result in the loss of some data and important business logic.","Because entity-relations are generally not maintained by analytical systems, existing ad hoc data query tools present flat data layouts to users. Typically, a user wishing to create a query against an analytical system is presented with a myriad of fields from which to choose. Sometimes, these fields are grouped into logical groupings. However, in each case the inherent business logic relations among the fields are typically lost. Further, once the user has selected certain fields, existing data query systems either automatically decide what joins to make on the tables associated with the fields, or present the user with a clumsy Boolean interface that itself is not aware of the relations among the selected fields. This can produce inconsistent results as fields are added or removed from a query, and makes generating a meaningful query very difficult. Missing or automatically interpreted join information can cause cross joins to be performed, among other errors, some of which are detected by the query reporting engine, while others are not, transparently returning erroneous results to the user and making report validity and data integrity a major issue for an organization.","Prior systems are also typically too insecure to support broad use. Most organizations cannot provide broad access to analytical data because of a lack of security for the data. Current systems rely on the underlying database system to provide security for the data. However, most database systems enforce security on an entire database or on tables or rows of the database. Therefore, organizations wanting to provide broad access to data are either required to expose sensitive data or restrict data access.","Thus, there is a need for a data query and reporting system that (1) allows non-technical computer users to build complex queries, (2) minimizes the need to have technical computer users build complex database queries by hand; (3) accommodates the need for a simple, easy-to-understand iterative system for generating and validating queries; (4) reduces the complexity and costs associated with retrieving useful information for organizations of all sizes, especially smaller businesses; (5) minimizes data transformations from transactional to analytical systems, preserving data and business logic, and promoting smarter queries; and (6) supports a robust security model, enabling organizations to protect sensitive data while providing broad data access.","According to the present invention, a system and method for building queries for execution against a data store is provided. The system and method empowers novice or casual computer users to easily and iteratively select elements or fields of the data store to create useful reports.","According to one embodiment, the present invention is implemented through a distributed application that runs on multiple computers but is displayed on a graphical user interface (GUT). This GUI, combined with common input devices such as a mouse and keyboard, minimizes the learning curve for use of the present invention. Thus, even a novice or casual user may quickly and easily understand and apply the present invention to a data store.","The present invention provides a simple-to-use data query and reporting system that retrieves data from a data store according to a user's desires in response to simple and efficient input commands. Using the invention, a user may select fields and relations associated with data. A user may also group data records by row, column, or by row and column. The user may also summarize the contents of select numeric or aggregation fields and present the results in the same report. Summary results may be presented for an entire report or for logical groupings of data.","The present invention defines a data store in terms of a relational abstraction. The relational abstraction generally parallels the entity-relationship inherent in transactional relational database management systems. Doing so preserves the business logic associated with such transactional systems for use by users of the invention. One skilled in the art will readily recognize that an entity-relationship abstraction may also be applied to data storage systems that are not in the genre of traditional relational database management systems.","The data store definition describes views, fields and relations of the data store. View definitions identify tabular structures of rows and columns in the data store. Field definitions describe columns of data accessible to the user in a particular view. Relation definitions describe associations between various views. Typically such definitions are associated with one or more tables and columns of a conventional relational database management system. However, one skilled in the art will recognize that any means of providing an entity-relationship view on data may be used as part of the invention.","The power of the present invention comes from empowering users to select a single base view as the starting point for generating a query. This base view is used to constrain the selection and creation of report fields.","The base view is used in the selection and creation of report fields as the starting point of a relation path to a destination view of a report field. Each relation path contains zero or more relationships and is dynamically generated by the invention as a report is built. In building a report, fields are selected or relationships are followed iteratively and recursively. In this fashion, the present invention enforces the cardinality of relations relative to the base view.","If a relation path is empty or includes only to-one relationships, a selected field is considered scalar relative to a row in the base view. If a relation path includes at least one to-many relationship, a selected field is considered aggregate relative to the base view, and must be paired with a function or expression that aggregates its values into a scalar value for each row in the base view.","The present invention improves report filtering and provides a means for quickly and easily constraining data based upon the base view of a report. In similar manner to iteratively and recursively selecting scalar and aggregate fields, fields may be selected as filter fields. As filter fields are selected, logical filter operators may be applied, filter fields may be nested into filter groups, and filter group operators may be applied.","As a user selects fields associated with the base view, an embodiment of the present invention iteratively and recursively captures user input for a report, and automatically generates an SQL query, which upon execution returns the desired result set of data. The SQL query includes a FROM clause based upon the base view's underlying SQL table or view. Fields on the base view with no relation path are selected and filtered directly in the query. Fields with a relation path cause nested subqueries to be generated, which are joined to the view of the outer query using the join keys specified for the relation.","One nested subquery is generated for each relation in the path, each containing a FROM clause for the relation's destination view. The subquery for each level of the relation path is nested within the previous level, similar to the recursive tree structure. Fields with fully or partially matching relation paths may reuse the same nested subqueries. The nested subqueries allow data across to-many relations to be aggregated before being joined with the base view rows. This approach allows reports involving complex aggregation to be returned using a single SQL query, without usage of temporary tables or intermediate processing. The present invention thus provides a means of easily validating reports, as the captured user request closely mirrors the automatically generated SQL query.","According to one embodiment, the present invention provides a robust security model, enabling organizations to protect sensitive data while providing broad data access. According to this embodiment, a person or process knowledgeable about the data contained in a data store and the organizational requirements to protect the data defines one or more security principals who will be given access to information contained in the data. Security principals may be users or groups of users, and the identities of and other information about security principals are typically maintained in a protected file, database or directory.","According to this embodiment of the present invention, the person or process also creates an entry in an access-control list for each element of the data, specifying in the entry if the security principal is to be granted or denied access to the element. The data elements may be course grained, as in the case of entire tables or views, or fine grained, defining permissions for specific fields, ranges of fields, or field aggregates.","According to this embodiment, the person or process also creates a security filter for each report view to be protected. The security filter must include at least one row of the view, otherwise data from the view could not be viewed. The security filter also includes an access control entry denying access to one or more specific data elements that might be specified in the view. Defining the access control entry to deny access permits the security filter to operate in a fashion similar to other filters pertaining to the invention.","Once security principals, access control entries and security filters are defined, access control is enforced on a report by requiring that each security principal be authenticated and by applying the security filters associated with the report according to the permissions associated with the security principal as defined in the access control list and the security filter.","That the invention improves over the drawbacks of prior database query and report applications and accomplishes the advantages described above will become apparent from the following detailed description of preferred embodiments and the appended drawings and claims.","The present invention may be embodied in a computer database query and reporting system that groups and displays selected database data based upon base views, and the fields and relations associated with those base views. Selected database data is displayed on a display surface according to row, column, summary and group criteria chosen by a user. The display surface is typically an active window on a display device of a simple application program, but the display surface may alternately be a window of a web browser or any application program operable for displaying and manipulating data. The display surface is typically a monitor, but may alternately be a printer, flatscreen LCD display, television, and soon.","In one embodiment of the invention, the display surface includes a query construction window and a query reporting window. The query construction window includes a recursive tree structure area, a column drop area, a group drop area and a measures drop area. The recursive tree structure area is a display item used to display database views and associated fields and relations, is typically located at the left of the query construction window and is column-shaped. The group drop area is a display item used for adding fields from the recursive tree structure area to create row groupings of a report, is typically located to the right of the recursive tree structure area, and is column-shaped. The column drop area is a display item used for adding fields from the recursive tree structure area to create columns of a report, is typically located to the right of the group drop area, and is column-shaped. The measures drop area is a display item used for adding fields from the recursive tree structure area to create summary or total fields of a report, is typically located to the right of the column drop area, and is column-shaped. Alternate embodiments may use different means of displaying the names of database fields and relations. Alternative embodiments may use more drop areas, or a single drop area. Alternate embodiments may also change the shape of the drop area display items to fit various displays; for example, the drop areas may be round, square, triangular, or a custom shape as needed, or may be located in a pull-down menu or in some other type of user interface configuration. For example, the drop areas may be located in combined windows on the display screen, or may be represented by icons or buttons rather than blank fields.","According to another embodiment of the invention, the database query and reporting system may add columns to a report. To add columns, a user selects a field from the list of fields in the recursive tree structure area and drops the field in the column drop area by initiating a drag-and-drop command, or, provided the column drop area is active, by double-clicking the desired field, or by clicking an arrow-transfer-button display item. The database query and reporting system captures this action by adding the field to the list of columns and by displaying the selected field name as a column heading name.","Similarly, in another embodiment of the invention, the database query and reporting system may add row groupings to a report. To add row groupings, a user selects a group field from the list of fields in the recursive tree structure area and drops the field in the group drop area by initiating a drag-and-drop command, or, provided the group drop area is active, by double-clicking the desired field, or by clicking an arrow-transfer-button display item. The database query and reporting system captures this action by adding the field to the list of row groupings and by displaying the selected field name as a group heading name.","According to another embodiment of the invention, the database query and reporting system may add numeric summary or aggregation measures to a report. To add measures, a user selects an aggregation or measures field from the list of fields in the recursive tree structure area and drops the field in the measures drop area by initiating a drag-and-drop command, or, provided the measures drop area is active, by double-clicking the desired field, or by clicking an arrow-transfer-button display item. The database query and reporting system captures this action by adding the field to the list of measures and by displaying the selected field name as a measure heading name.","Likewise, according to yet another embodiment of the present invention, the database query and reporting system may add fields from related database views to a report. Typically, the recursive tree structure area will include a list of relations, which are related tables or views. To add fields from a related database view or report, a user initiates a double-click command on a relation. The database query and reporting system will respond by replacing the previously existing list of fields and relations in the recursive tree structure area with a new list based upon the selected relation and the cardinality existing between the base view and the destination view of the relation. The user may then add fields from the recursive tree structure area to the column, group and or measures drop areas, as noted above.","Once a user has selected the desired fields to be grouped and displayed in a report, in one embodiment of the invention, the user may select to view a corresponding report. Typically, a user will view a corresponding report by selecting a view report button. Alternate embodiments may allow a user to review a report by changing focus on a window, or may automatically display a report after each field is added, and so on.","In the present invention, the list of fields and relations displayed in the recursive tree structure area is based upon a base view. Typically, the database query and reporting system will retrieve a list of tables and views from a database server and display them on a display surface. A user may then select one of the tables or views. Based upon the user's selection, the database query and reporting system will generate a hierarchical or entity-relationship map of all tables, views, fields and relations of the selected table or view and the tables and views related to the selected table or view.","In the present invention, access to views, fields and relations is managed by a robust security model, enabling organizations to protect sensitive data while providing broad data access. Security is enforced through the model by using access control lists and security filters. Users and groups of users, or security principals, are defined in the access control lists, and also in security filters.","Furthermore, the described features, structures, or characteristics may be combined in any suitable manner in one or more embodiments. In the following description, numerous specific details are provided, such as examples of programming, user selections, network transactions, database queries, database structures, physical structures, etc., to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other programs, user selections, database queries, database structures, physical structures, etc. In other instances, well-known structures, methods, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","As used herein, a \u201cuser\u201d refers not only to a person using the present invention, but also to a program, application, operating system, function call, or any other entity that may make use of the present invention. Thus, an operating system that manipulates or otherwise employs the present invention is classified as a user.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 1"},"With reference to , according to one embodiment of the present invention, a computer system for implementing the invention includes a conventional Desktop Computer , an Application Server  and a Database Server . Typically, the Desktop Computer , the Application Server  and the Database Server  will operate in a networked environment using logical connections. Although  depicts a system including a Desktop Computer , it will be appreciated by those skilled in the art that other types of computing devices such as a Laptop Computer , or a Personal Digital Assistant , may also be used.","Typically, the Desktop Computer  includes a Processing Unit , System Memory , and a System Bus  that couples the System Memory  to the Processing Unit . The System Memory  includes Read Only Memory (ROM)  and Random Access Memory (RAM) , and a Basic Input\/Output System (BIOS)  that contains the basic routines that help to transfer information between elements within the Desktop Computer , such as during start-up, and the ROM . The Desktop Computer  further typically includes a Hard Disk Drive . The Hard Disk Drive  is connected to the System Bus . The Hard Disk Drive  and its associated computer-readable media provide nonvolatile storage for the Desktop Computer . Although the description of computer-readable media above refers to a hard disk, it will be appreciated by those skilled in the art that other types of storage devices and media that are readable by a computer, such as a removable magnetic disk, a CD-ROM disk, a magnetic cassette, a flash memory card, a digital video disk, Bemoulli cartridge, and the like, may also be used included in, or attached to, the Desktop Computer .","A number of program modules may be stored in the Hard Disk Drive  and the RAM , including an Operating System , one or more Application Programs , a Web Browser Program , and Program Data . These program modules include a Data Query And Reporting User Application (DQR Application)  configured for implementing an embodiment of the present invention. A user may enter commands and information into the Desktop Computer  through conventional input devices such as a Keyboard  or a pointing device such as a Mouse . Other input devices (not shown) may include a pen, touch-operated device, microphone, joystick, game pad, satellite dish, scanner, or the like. A Display Device , such as a display screen, is also connected to the System Bus  via an interface. In addition to the Display Device , desktop computers typically include other peripheral output devices (not shown), such as speakers, scanners or printers.","Application Server  and a Database Server  may be personal computers, minicomputers or mainframe computers, or another common application platform, and may also include many or all of the elements described relative to the Desktop Computer . Typically, the logical connections depicted in  include a Local Area Network (LAN)  running over an Ethernet Network Bus  or a Wide Area Network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. Typically, Database Server  stores and manages data by means of a special set of files or folders, such as an RDBMS Data Store  and makes that data available to other computer programs through Application Programming Interface , which runs in Server Program Memory  of Database Server .","When used in a typical networking environment, the Desktop Computer  is connected to the LAN  through a Network Interface Card . When used in a WAN networking environment, the Desktop Computer  typically includes a Modem  or other means for establishing communications over the WAN , such as the Internet. The Modem , which may be, internal or external, is connected to the System Bus . In a networked environment, Application Programs , or portions thereof may be executed on Application Server  and stored in the server memory and storage devices. These application programs include a Data Query And Reporting Query Generation And Database Interface Application (Query Engine)  configured for implementing an embodiment of the present invention. Typically, the Query Engine  also includes an intermediate mapping or metadata layer that is used when communicating with a database server. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0109","num":"0108"},"figref":["FIG. 2","FIG. 2","FIG. 2","FIG. 2","FIG. 2","FIG. 2"],"b":["100","200","21","30","31","32","33","31","34","33","31","33","35","31","36","34"]},{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 3A","FIG. 3B","FIG. 3C"],"b":["100","200"]},"In the present example metadata, a \u201cCustomer View\u201d Table  depicts a mapping between the sample Northwind database described in  and the DQR Application . Referring to Customer View Table  in , a Company Name Field  is mapped to a CompanyName Field  in the Customers Table  of . Such is denoted by Balloon Number  in . One skilled in the art will readily recognize the mappings between the metadata denoted in ,  and  and the tables, columns and relations of .",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIGS. 3D and 3E","FIG. 3D","FIG. 3D"],"b":["50","01","02"]},"According to one embodiment of the present invention, instances of the objects described in  are implemented through use of extensible Markup Language 1.0 (XML). Table  of  includes an XML description of an instance of the Database object described in the Table  for the Northwind sample database described in . Referring to , note that a dbUtilityTypeName Property  specifies that SQL Server is the access method for the Northwind database. Note also that a coninectionString Property  indicates the Northwind database is located on the local machine and accessed through integrated security. One skilled in the art will readily recognize that different database access service providers and securities interfaces may be used.","As shown in , a Table  includes the XML description of an instance according to the description of the Table  of the Customer View . In one embodiment of the present invention, each view described by the metadata has a corresponding XML object definition. In the Table , the xsi:type=\u201cview\u201d Tag  specifies the object as a view object; the databaseID=\u201c1218\u201d Tag  specifies a shorthand notation referencing the modified Northwind database; and the sourceTable=\u201cCustomers\u201d Tag  indicates that the Customer View is mapped to the Customers Table  in . The <primaryKey keyColumn=\u201cCustomerID\u201d dataType=\u201cText\u201d\/> Tag  indicates that the key field for the Customer View  is the CustomerID Field . The <defaultFields> Tag  enumerates the source fields displayed when the user fails to specify a field after following a relation that terminates on the Customer View . In the present case, the XML Tag <field ref=\u201cnorthwind\\Customer\\Company Name\u201d\/>  references the Company Name Source Field  of . The XML Tag <defaultAggregateFields>  enumerates the source fields containing numeric values associated with the Customer View , which are available for providing numeric summaries of data contained in a report. In the present embodiment, the XML Tag <field ref=\u201c1228\u201d type=\u201caggregate\u201d\/>  references the Customers Aggregation Field  of .","Table  of  provides an XML description of the Address Field  of the Customer View  of  and the Customer View XML Object  in . In one embodiment of the invention, each source field to be exposed for a view is similarly defined. The xsi:type=\u201csavedSourceField\u201d XML Tag  identifies an Address Object  as a data or source field. The sourceolumn=\u201cAddress\u201d XML Tag  identifies the Address Field  as the data source for the Address Object .","As shown in , an Orders relation Object Table  is an instance of a Relation object conforming to the Table , which provides an XML description of the Orders Relation  of . According to one embodiment of the invention, each relation is similarly defined. Referring to the Orders Relation Object Table  of , an xsi:type=\u201crelation\u201d Tag  defines the object as a relation object. The relation definition also includes a ViewID=\u201cnorthwind\\Order\u201d Property , which in the present embodiment indicates that following a relation from the Customer View  to the Order View  will expose the fields and relations associated with the Order View . A reverseID=\u201cnorthwind\\Order\\Customer\u201d Property  indicates, should the Orders Relation  be followed, that the path back to the Customer View  will occur through use of the Customer Relation . A relationType=\u201cOneToMany\u201d Property  indicates that the relation from the Customer View  to the Order View  is one-to-many. The join type and the join keys for the Orders relation Object Table  are specified by a joinType=\u201cLeftOuterJoin\u201d property  and the < joinKey sourceColumn=\u201cCustomerID\u201d destColumn=\u201cCustomerID\u201d dataType=\u201cText\u201d\/>XML Tag , respectively. In this case, because the relationship is identified as a one-to-many relation, the join is specified as a left outer join. A left outer join of the Customer View  and the Order View  will include all records from the Customers Table  and the corresponding records in the Orders Table  where the CustomerID  and the CustomerID A are equal.","A Table  of  includes an XML description of the Customer Relation  of the Order View  of . The Table  represents the reverse path associated with the Orders Relation . In this case, a toViewID=\u201cnorthwind\\Customer\u201d Property  points to the Customer View , a reverseID=\u201cnorthwind\\Customer\\Orders\u201d Property  points to the Orders Relation Object Table , a relationType=\u201cManyToOne\u201d Property  indicates that the relation is many-to-one, and a joinType=\u201cInnerJoin\u201d Property  indicates that the join is an inner join. An inner join will include records from both the Orders Table  and the Customers Table  where the values of the join keys specified by the <joinKey sourceColumn=\u201cCustomerID\u201d destColumn=\u201cCustomerID\u201d dataType=\u201cText\u201d\/> XML Tag  are equal.","One embodiment of the present invention provides a user the means to iteratively generate queries.  depicts a main or initial display Window  of an embodiment of the DQR Application . From this Window , a user of the DQR Application  may select a New Button  to create a new report.",{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 5","b":["94","100","110","111","112","113","114","115","92"]},{"@attributes":{"id":"p-0120","num":"0119"},"figref":["FIGS. 6A and 6B","FIGS. 3A\u20133E","FIG. 6B","FIGS. 3A\u20133C"],"b":["96","96","100","100","200","120","121","121"]},"In the depicted embodiment, views may be organized into subfolders, such as a Lookup Folder . This facility is provided for databases having a large number of defined views. In the depicted embodiment of the present invention, the base view is set by selecting a view from a List  and either selecting a Finish Button  or double-clicking on the selected view. This base view, in conjunction with the associated metadata described in , as exposed by the Query Engine  and the DQR Application , is used in the invention to provide an entity-relationship map of the database relative to the selected base view.","The entity-relationship map of the present invention may be exposed through a database entity-relationship grouping and display system and according to rules of the invention enforcing proper display and element selection and iterative query generation.  depicts a display Window  of the grouping and display system according to one embodiment of the DQR Application . Those skilled in the art will recognize that the Window  is a conventional window of a modern desktop application. However, those skilled in the art will also recognize that other conventional and non-conventional display means, screens and windows could be used. In the depicted embodiment, a Menu,Bar  contains several menu items, including a View Menu Item , which in one embodiment of the invention shows the iterative nature of queries generated. A Toolbar  contains a Filters Button , a Sort Button , an Options Button  and a View Report Button . The Tool bar  and related buttons are used in this embodiment of the invention to display certain windows and build iterative queries.","A Group By Box , a Details Box  and a Measures Box  are standard label boxes. The boxes below the Group By, Details and Measures areas of the display window, numbered respectively ,  and , are drop box areas where a user may drag or locate fields when building queries. Note that in the depicted embodiment, a Details Drop Box Area  has been selected by default, as denoted by the darker gray colored background surrounding the Details Label . With such selection, a user may select from a Selection Area  one or more fields from a Field Group  that pertains to the Employee View , which is the view based upon the Employees Table  of the , as shown in a Look In Drop Down Box  of . In the depicted embodiment and present example, one of the fields directly associated with the Employee View  is a Full Name Source Field , which has been selected according to the present invention as shown in the Details Drop Area . In the present example, a user may also follow relations between the Employee View  and the other views described in , including an Employee Territories Relation , an Orders Relation , a Reports To Relation  and a Subordinates Relation . In the present example, the Reports To Relation  is visually designated as a to one relation, as denoted by a superscripted \u201c1\u201d.",{"@attributes":{"id":"p-0124","num":"0123"},"figref":["FIG. 8","FIG. 3D"],"b":["158","100","160","160","100","49","161","05","162","163"]},{"@attributes":{"id":"p-0125","num":"0124"},"figref":["FIG. 9","FIG. 2","FIG. 3D"],"b":["186","100","170","170","170","49","171","170","172","170","173","170","100","06","170"]},{"@attributes":{"id":"p-0126","num":"0125"},"figref":["FIG. 10A","FIGS. 3A through 3E"],"b":["180","181","182","183","181","182","183"]},"Once a relational abstraction of a data store has been created, reports may be generated. In Step , a view is selected. This is the base view of a report. Based upon that selected base view, fields maybe selected in Step . Such fields may be either directly associated with the base view, or they may be associated with other views defined in, Step . In Step , a relation path from the base view selected in Step  to a destination view is determined by following a series of relations defined in Step . If no relations are followed, the relation path is empty. A relation path indicates whether the cardinality of a related view relative to the base view is to-one to-many.","In Step , a decision is made based upon the relation path determined in Step . If the cardinality of the relation path is to-one, a scalar report field may be created by selecting a field in the destination view, or creating an expression that references one or more fields, as shown in Step . If the cardinality of the relation path is to-many, an aggregate report field may be created by selecting or creating one or more fields whose base view is the last view of the relation path, as shown in Step , and specifying a function or expression for aggregating the values of the nested fields, as shown in Step . Such functions or expressions may be of various types. For example, a function may simply sum the values of a nested field. In the Northwind sample database, such a function might sum the shipping costs of all orders for a particular customer. According to one embodiment of the invention, in Step , a scalar field or expression from step , or a function or expression from Step  is added to a report definition. The field selection process as outlined in Steps  through  is repeated recursively until the report definition meets the requirements of a user, whether that user is a person or a process.",{"@attributes":{"id":"p-0129","num":"0128"},"figref":["FIG. 10B","FIGS. 3A","FIG. 2","FIG. 6"],"b":["201","100","1","3","3","200","2","200","96"]},"In step , the DQR Application  displays the name of the Northwind database described in  and a list of the other available databases in the Look In Drop Down Box  on the Display Device . Step  also displays the metadata views described in , B and C in the View List Box  through the Window B shown in .","In Step , a user sequentially selects the Employee View  from the View Group List  and the Finish Button , which causes the YES branch of Step  to be followed. If a user does not select a view, the NO branch of Step  is followed and the DQR Application  continues to display the Window B of .","In Step , the DQR Application  requests the fields and relations listed in the Employee View  from the Query Engine . In Step , the DQR Application  then displays the list of fields and relations of the Employee View  on the Display Device , displaying the Window  described in .","In Step , the DQR Application  awaits user input in the form of selecting fields, such as those highlighted by the Balloon , or relations, such as those highlighted by Balloon , in . If the View Report Button  is selected, the YES branch of step  is followed to Step . If no fields have been added, the NO branch of Step  is followed to Step , an error is displayed directing the user to select at least one field, and the DQR Application  continues to display the list of fields and relations of the selected view, such as the Employee View . If the user selects a field or relation, the DQR Application  proceeds to Step .","In Step , the DQR Application  monitors detail field selections. If a user does not select a detail field, the DQR Application  continues through the NO branch to Step . If a user selects a detail field, the DQR Application  proceeds through the YES branch to Step . In Step , the DQR Application  adds the name of the selected field to the Details Drop Box Area , and continues to Step  to display the fields and relations associated with the selected view.","In Step , the DQR Application  monitors group field selections. If a user selects a group field, the DQR Application  proceeds through the YES branch to Step . If a user does not select a group field, the DQR Application  continues through the No branch to step .","In Step , the DQR Application  monitors measure field selections. If a user selects a measure field, the DQR Application  proceeds through the YES branch to Step . If a user does not select a measure field, the DQR Application  continues through the NO branch to Step .","In Step , the DQR Application  monitors the selection of relations. If a user selects a relation, the DQR Application  proceeds through the YES branch to Step . If a user does not select a relation, the DQR Application  continues through the NO branch to Step .","In Step , if the cardinality of the relation path ending with the selected relation is to-one, the DQR Application  follows the NO branch of Step  to Step . In Step , the DQR Application  retrieves the fields and relations associated with the followed relation and processing passes to Step . If the cardinality is to-many, the YES branch of Step  is followed to Step  where the DQR Application  limits retrieval of the fields associated with destination view to those fields that have a Field Type Property F (see ) set to \u201caggregate\u201d and then processing is passed to Step . In this manner, the cardinality of the destination view relative to the base view constrains field selection. If the cardinality is to-many, only aggregated values associated with the destination view may be returned, thereby ensuring that each row returned by the DQR Application  represents exactly one row in the base view selected for the report.","In Step , if at least one field has been added to the report, the YES branch is followed to Step , where the DQR Application  verifies and generates a suitable database query and displays the report on the Display Device . In Step , if the Fields Button  is selected, the YES branch is followed to step . Otherwise the process terminates.",{"@attributes":{"id":"p-0140","num":"0139"},"figref":["FIGS. 11A through 11J","FIG. 11A"],"b":["250","251","250","49","252","253","254","255","250","251","100","49","252","49"]},{"@attributes":{"id":"p-0141","num":"0140"},"figref":"FIG. 11B","b":["260","261","260","250","261","251","260","49","262","263","49"]},{"@attributes":{"id":"p-0142","num":"0141"},"figref":["FIG. 11C","FIG. 11B"],"b":["270","271","270","272","270","273","273","274","275","273","276","277","278","263","261","271","261","271"]},{"@attributes":{"id":"p-0143","num":"0142"},"figref":"FIG. 11D","b":["280","281","280","260","281","261","260","280","49","284","49","283","49","286","47","285","281","287","288","49","289","286","47"]},{"@attributes":{"id":"p-0144","num":"0143"},"figref":"FIG. 11E","b":["290","291","290","281","291","290","293","294","290","292","295","47","291"]},{"@attributes":{"id":"p-0145","num":"0144"},"figref":["FIGS. 12A through 12D","FIG. 12A"],"b":["300","301","300","47","47","303","47","306","48","47","40","305","301"]},{"@attributes":{"id":"p-0146","num":"0145"},"figref":["FIG. 12B","FIG. 12C","FIGS. 12A and 12B","FIG. 12D","FIG. 12C"],"b":["310","310","311","312","313","312","314","315","313","316","320","316","318","317","317","318","319","316","320","322","321","322","324","326","328"]},{"@attributes":{"id":"p-0147","num":"0146"},"figref":"FIGS. 13A through 13I"},{"@attributes":{"id":"p-0148","num":"0147"},"figref":"FIG. 13A","b":["330","331","330","47","47","332","47","333"]},{"@attributes":{"id":"p-0149","num":"0148"},"figref":"FIG. 13B","b":["340","300","31","340","340","342","47","340","343","340","344","345"]},{"@attributes":{"id":"p-0150","num":"0149"},"figref":"FIG. 13C","b":["350","344","340","350","351","352","355","352","353","354","355","350","357","356"]},"As depicted in . A Window  illustrates the addition of the All of (AND) Logical Element  from Window . Upon selection, a Text Box  is displayed on a Panel . In addition, an Indented Drop Area  appears, indicating that fields may be dropped there to build a filter group. A Drop Area  also appears, indicating that additional filter groups or items may be added at the top level.","A Window , depicted in , illustrates the addition of the Order Date and Shipper fields of the Order View  to the Window . As fields are added to the Indented Drop Area , fields, operators and applicable window elements displace the Drop Box, and the DQR Application  displays another Drop Box  indicating that additional fields may be added. In the Window  the Order Date field  is followed by a Greater Than Operator , which is aligned with a Calendar Drop Down Box . Selecting the Calendar Drop Down Box  causes the DQR Application  to display a standard monthly calendar for date selection. Likewise, a Shipper Field  is followed by an Equals Operator  that is aligned with a Drop Down Box . Selecting the Drop Down Box  causes the DQR Application  to retrieve and display the list of Shippers from the Shippers Database Table .","As depicted in , a Window  shows the result of the addition of an additional logical element to the Window . In this case, a None of (NOT OR) Logical Element  has been selected. Upon selection, text  is added to a Panel  and a Drop Area  is displayed.","Upon the addition of a field to the None of (NOT OR) Logical Element  of the Window , a Window  is generated as depicted in . According to the present embodiment of the invention, a Ship Country Field  appears below the None of (NOT OR) Logical Element . The Ship Country Field  is also followed by an Equals Operator , which in turn is followed by a Drop Down Box . The Drop down box is linked to the Country table of the Northwind database shown in . In the present case, USA appears selected in the Drop Down Box . As depicted in the Window , the constructed query would return all records in the Orders Table  of  that were shipped outside of the United States using Federal Shipping after 1996.","A Window  depicted in  illustrates the results of running the query created in . Note that the filter constructed in  is displayed in the Window area .",{"@attributes":{"id":"p-0156","num":"0155"},"figref":["FIG. 13I","FIGS. 13A through 13G"],"b":["100","398"]},{"@attributes":{"id":"p-0157","num":"0156"},"figref":"FIGS. 14A through 14F"},{"@attributes":{"id":"p-0158","num":"0157"},"figref":"FIG. 14A","b":["400","100","400","40","401","402","403","403","403","46","40","47","400","37","37","34","404"]},{"@attributes":{"id":"p-0159","num":"0158"},"figref":["FIG. 14B","FIG. 14B"],"b":["405","404","400","405","406","407","406","408","409","409","409","406","410","411","411","411","47","405","412","413","412","100","413","405","400","413"]},"A Window  shown in  displays the window elements associated with selecting the Filters Tab  of the Window . The Window  displays a Text Label , which illustrates the currently selected Orders field, a Filter Operator , which illustrates an In Hotlink  as the filter operator, and a Text Label , which indicates that it can be selected as a means of building a subfilter. A subfilter can be constructed according to the present window because the Orders field is an aggregation field of the Orders Relation , which relation defines a one-to-many relationship from the Customer View  to the Order View . Subfilters are meaningful only where a relationship is to-many and an aggregate field is thus required.","A Window  shown in  depicts a subfilter wizard useful for building subfilters. This Window  results from selecting the Text Label  shown on the Window . The Window  includes several window elements. Window Element  is a radio box that permits the user to create a new subfilter. Window Element  is a list box that contains any subfilters previously defined during the report development session. Window Element  is a radio button that permits a user to select a previously defined and saved Order subfilter. Window Elements  and  permit a user to use a previously saved Order list or report as a subfilter. Window Element  is a button that permits the user to proceed to the next step in creating a subfilter.","A Window  shown in  illustrates the results of first selecting the Window Element  and then the Window Element  of the Window  (see ) and then creating a subfilter. The Window  includes several familiar window elements. The Window Element  includes a List  that includes the fields and relations associated with the Order View . A Window Element  includes the logical elements discussed in connection with . A Window Panel  includes a Label  that results from selecting a Logical Group . An Order Date Label  representing the Order Date field associated with the Order View  has been added to the Logical Filter . The Order Date Label  is connected to Calendar Drop Down Boxes  and  by a Between Operator . A Shipper Label  has been added to the Logical Group  and is connected to a Drop Down Box  by an Equals Operator . As demonstrated by comparison of , when a subfilter has been created and incorporated into a report, an embodiment of the present invention will return a three column report of all customers, including a column showing the number of orders each customer placed in 1997 that were shipped using United Package.","Window  shown in  illustrates the results of running the query generated by the selections made in the process described with reference to in .  disclose the resulting XML report definition and SQL query generated by the DQR Application  in creating the report displayed on the Window .","The process of an automatic drill through according to one embodiment of the present invention is depicted in . Drill through is displaying a report containing the row or rows represented by a field value in the results of another report. The base view concept of the present invention allows drill through reports to be created automatically, using the relation path of the field and any applicable filters, including the report filter, group value filters, and aggregate subfilters as necessary.",{"@attributes":{"id":"p-0165","num":"0164"},"figref":["FIG. 15A","FIG. 15B"],"b":["460","100","460","49","461","470","460","49","471","49","472","47","473"]},"Executing the query resulting from selecting a View Report Button  shown on the Window  results in a Window , depicted in . The report displayed in the Window  has three columns, a Country Column , a Full Name Column  and an Orders Column . The Country Column  was generated because the Country relation of the Employee View  was added to the Group By Drop Area . The Full Name Column  resulted from adding the Full Name field of the Employee View  to the Details Drop Box . The Orders Column  resulted from placing the Orders aggregation field of the Order View  in the Measures Drop Area . Because the Orders Column  is an aggregation field, each of the numbers represented in the Orders Column  represents the count of orders from the Orders Table  for each employee in the Employees Table . In the present example, each of the numbers in the Orders Column  can be left-clicked with a mouse to access a hot spot or link associated with the number. This hot spot capability is traditional in many documents and is available in most web browsers. In the present case, the DQR Application  provides such a hot spot or link capability based upon the allowDrill Field Object Property F according to the Table  of . In the present case, the allowDrill property of the Orders aggregation field of the Order View  is true and accordingly any of the numbers in the Orders Column  can be selected or \u201cdrilled on\u201d as it is typically described.","Selecting the Hot Spot  causes the DQR Application  to generate a Window , as depicted in . The Window  is a report, as denoted by the highlighting of a View Report Button . However, the Window  is not a report based upon the Employee View . Instead, it is a report based upon the Order View . A Tab , which includes the text \u201cOrder\u201d reveals this fact, as does a Label . Columns  through  also evidence this fact. The fields associated with Columns , ,  and  are all from the Order View . However, a label  reveals that the query that generated the Window  includes a filter.","A Window  shown in  results from selecting a Fields Button  of the Window . The Window  is a window associated with the report shown in the Window . This association is highlighted by a Tab , which continues to display \u201cOrders.\u201d The Window  illustrates the group fields, detail fields and measures fields in generating the Window . Several fields have been added to a Details Drop Area . Likewise, several fields have been added to a Measures Drop Area .","The filters associated with the Windows  and  can be seen by selecting a Filters button . Selection of the Filters Button  generates a Window  as depicted in . The Window  illustrates one filter, a Filter . In this embodiment of the invention, the Filter  comprises three elements, a Label  that includes the word \u201cEmployee,\u201d a Label  that includes the \u201cIn\u201d operator, and a Label  that includes the name \u201cBuchanan, Steven.\u201d The Label  refers to the name associated with the Hot Spot or Link  of . Thus, the drill through operation produced a report based upon the Order View , but filtered by the parameters of Employee View  that were selected prior to selecting the Hot Spot .  disclose the XML report definition and SQL query that produced the Windows ,  and .",{"@attributes":{"id":"p-0170","num":"0169"},"figref":"FIGS. 16A through 16F"},{"@attributes":{"id":"p-0171","num":"0170"},"figref":"FIG. 16A","b":["550","100","550","47","551","552","47","553","40","553","554","52","47","52","550","555"]},{"@attributes":{"id":"p-0172","num":"0171"},"figref":"FIG. 16B","b":["560","554","49","560","53","561","560","54","49","47"]},{"@attributes":{"id":"p-0173","num":"0172"},"figref":["FIG. 16C","FIG. 3D"],"b":["570","562","47","570","07","570","47","34","52","49","47","49","54","47","570","571"]},{"@attributes":{"id":"p-0174","num":"0173"},"figref":["FIG. 16D","FIGS. 16A","FIG. 16A","FIG. 16C","FIGS. 16E and 16F"],"b":["581","100","16","16","582","830","34","580","583","585","47","584","40","586","49","587","588","47","54","49","100"]},{"@attributes":{"id":"p-0175","num":"0174"},"figref":"FIG. 17","b":["600","601"]},"In Step , security filters are specified for views that require protection according to organizational needs. In Step , if a security filter is defined on a view, at least one row pertaining to the view is included in the security filter and is enabled for access. In Step , each data element to be protected in a view is included in an access control entry and security principals to be denied or granted access to the data element are included in the access control entry. In Step , security is enforced on a report.","In Step , a security principal desiring to create or execute a report is authenticated. This authentication will typically be accomplished through user authentication means characteristic of computer systems. In Step , assuming that a security principal has been authenticated and attempts to create or run a report, the security filter, as described in the Step , will be applied to the report by comparing the authenticated security principal with the access control entry contained in the security filter for each data element. If the authenticated security principal does not match an access control entry contained in the security filter, the authenticated security principal will be given access the corresponding data.","While specific embodiments and applications of the present invention have been illustrated and described, it is to be understood that the invention is not limited to the precise configuration and components disclosed herein. Various modifications, changes, and variations which will be apparent to those skilled in the art may be made in the arrangement, operation, and details of the methods and systems of the present invention disclosed herein without departing from the spirit and scope of the invention as defined by the following claims.","It will be obvious to those of skill in the art that the invention described in this specification and depicted in the FIGURES may be modified to produce different embodiments of the present invention. Thus, the present invention has several advantages over the prior art without sacrificing any of the advantages of the prior art. Although two embodiments of the invention have been illustrated and described, various modifications and changes may be made by those skilled in the art without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other features and advantages of the present invention will be apparent from the following Detailed Description taken in conjunction with the accompanying Drawings, in which:",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 3A","FIG. 2"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3B","FIG. 2"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 3C","FIG. 2"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3D"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 3E"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 10A"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 10B"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 11C"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 11D"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 11E"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 12A"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 12B"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 12C"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 12D"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 13A"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 13B"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 13C"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 13D"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 13E"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 13F"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 13G"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 13H"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 13I"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 14A"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 14B"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 14C"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 14D"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 14E"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 14F"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 14G"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 15A"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 15B"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 15C"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 15D"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 15E"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 15F"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 15G"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 15H"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 16A"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 16B"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 16C"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 16D"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 16E"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 16F"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
