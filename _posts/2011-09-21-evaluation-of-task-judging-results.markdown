---
title: Evaluation of task judging results
abstract: Embodiments of systems and methods can determine evaluations of the quality of task results provided by judges. Certain embodiments can determine the quality evaluations with relatively little overlap of judges (e.g., two or three judges). The quality evaluations may include determining an error rate or a confidence index for a judge or for a particular judgment made by the judge. Certain embodiments may determine the quality evaluations by intercomparing judging results from multiple judges without requiring human intervention, comparison to evaluation data known (or assumed) to be accurate, or input from an external judge review panel. In some implementations, task results can be combined with a confidence score (based at least in part on the quality evaluation of the judge who provided the task result), and this information can be used as training data to improve performance of machine learning algorithms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08868471&OS=08868471&RS=08868471
owner: Amazon Technologies, Inc.
number: 08868471
owner_city: Reno
owner_country: US
publication_date: 20110921
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION","I. Overview","II. Example Tasks for an Electronic Catalog System","III. Example Task Result Evaluation Engine","IV. Example Task Result Evaluation Algorithms","1. Example Algorithm Assuming Same Error Rate for all Judges","2. Example Algorithm for Determining Individualized Error Rates for Judges","3. Example Algorithm for Determining Individualized Error Rates for Judges that Judge Tasks Having Multiple Outcomes","4. Summary of Example Algorithms for Determining Judge Error Rates","V. Examples of Quality Metrics","VI. Examples of Judge Evaluation Criteria","VII. Examples of Training Data for Use in Machine Learning Algorithms","1. Example Algorithms for Qualifying Training Data with Confidence Scores","VIII. Example Methods for Evaluating Task Results from Multiple Judges","IX. Additional Examples of Task Result Evaluation","X. Conclusion"],"p":["Computer systems can be programmed to automate tasks that may be based on algorithms, flowcharts, equations, formulas, logical expressions, and so forth. The tasks may be expressed as programming instructions that are executed by the computer system. Larger tasks often can be reduced to a set of smaller computer-programmable tasks.","However, some tasks can be difficult for a computer system to perform. For example, pattern recognition, speech or handwriting recognition, image comparison, and Asian language word segmentation can be challenging to automate on a computer system and may require highly complex algorithms that take significant amounts of time to execute on the computer system. Such tasks, however, may be readily performed by humans in many cases. For example, it may be straightforward for a human to describe the differences or similarities between two images, yet very difficult for a computer system to be programmed to perform the same task.","For certain tasks that can be computationally challenging to automate, human judges may reach results with relatively high levels of speed and\/or accuracy. For example, some complex problems can be broken down into a set of tasks that can be posed as questions to the judge for which the answer is a choice between binary options, e.g., \u201cyes\u201d or \u201cno\u201d, \u201ctrue\u201d or \u201cfalse\u201d, is an item \u201cblue\u201d or \u201cyellow\u201d, is an image of an \u201celephant\u201d or a \u201crhinoceros\u201d, and so forth.","As one illustrative example, some Asian languages do not delimit lexical tokens or \u201cwords\u201d by white space. Word segmentation of an unsegmented Asian language phrase can be a precursor to further language processing tasks. For example, a block of Asian characters representing a title of an item (e.g., a book) available from an electronic catalog system may be segmented before an item detail page (e.g., a web page) that displays the title can be generated. Asian language word segmentation is a challenging computational problem in part due to the lack of standard definitions of word boundaries in these languages. However, human judges may be able to segment a block of Asian characters containing no white space relatively quickly and efficiently. For example, the block of characters may be displayed to the judge via a user interface, and the judge may move a cursor along the block of characters. At any point, the judge can indicate a word break by actuating an input on the user interface, e.g., by pressing a particular key on a keyboard. The result of this example task is a yes\/no judgment at each cursor position for whether there is a word break in the block of characters.","In other problems, there may be more than two possible results for a task, e.g., the task may be to determine the color of a an article of footware (e.g., a shoe), and the choice of results may include \u201cblack\u201d, \u201cbrown\u201d, \u201cbeige\u201d, \u201cred\u201d, \u201cnavy\u201d, \u201cwhite\u201d, or \u201csaddle\u201d. Other types of results are possible for other types of tasks.","Human judges may make mistakes (honest or intentional) and may make different judgments on the same task when presented with it at different times or under different conditions. Therefore, certain task result judging systems may have multiple judges (e.g., five, ten, twelve, or more) make a judgment on a given item and then determine a final judgment based on the combined results from the multiple judges. However, not only can this be inefficient (because many judges view the same item) but the final judgment may be subject to error because there may be no way to determine whether \u201cgood\u201d judges (e.g., those who provide accurate and reproducible results) or \u201cpoor\u201d judges (e.g., those who provide inaccurate or irreproducible results) have submitted a judgment on the item.","Accordingly, certain embodiments of the systems and methods disclosed herein can determine evaluations of the quality of the task results provided by judges. Certain such embodiments can determine the quality evaluations with relatively little overlap of judges (e.g., two or three judges). The quality evaluations may include determining an error rate or a confidence index for a judge or for a particular judgment made by the judge. Certain embodiments may determine the quality evaluations by comparing judging results from multiple judges without requiring comparison of the judging results to training data that is known (or assumed) to be accurate or \u201ctrue.\u201d Various embodiments may be used to evaluate the quality of judges (e.g., by determining one or more quality metrics), determine how to compensate judges, or determine which judges to remove or replace. Additionally, in some implementations, task results can be combined with a confidence score (based on the quality evaluation of the judge who provided the task result), and this information can be used as training data for machine learning algorithms (e.g., supervised or semi-supervised learning) to improve the performance of the machine learning algorithm.","As will be further described below, certain examples of the task result judging systems and methods will be described in the context of tasks performed for an electronic catalog or e-commerce system. These examples are intended to be illustrative and not limiting. For example, embodiments of the systems and methods can be used with any system in which certain tasks are outsourced to humans, e.g., crowdsourcing systems, collaborative innovation networks, human-based computation systems, marketplaces for human intelligence tasks (e.g., Mechanical Turk\u00ae), and so forth.","Further, although certain illustrative examples will be described in which the judges of certain tasks are human, this is not a limitation. Embodiments of the systems and methods can be used to evaluate task results made by machines. For example, the task results may be generated as the output of an artificial intelligence program executed by a computer system. Examples of artificial intelligence programs can include machine learning, neural networks, Markov models, support vector machines, Bayesian networks, control theory, and so forth. Therefore, the task results received for evaluation can come from humans, from machines, or from a combination of humans and machines.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100"]},"The electronic catalog system  may be implemented as a computerized system that comprises multiple programmed computing devices (e.g., web server machines, application servers, storage servers, load balancers, etc.) that communicate over one or more networks. The electronic catalog system  can host a web site that provides functionality for users to browse an electronic catalog of items that are available for purchase. The items represented in the catalog may include, for example, physical products (e.g., books, electronics, hardware, apparel, etc.), music downloads, video downloads, electronic books (e.g., eBooks), software applications, magazine subscriptions, mobile service plans, and other types of items that can be purchased, rented, leased, etc. Although described in the context of a web site, the system  can also be implemented in other types of interactive systems, including interactive television systems. Further, although described in the context of products that are available for purchase, the disclosed features are also applicable to other types of items, including services, news articles, blogs, web sites, and television shows.","The electronic catalog system  can include one or more web servers that respond to page requests received over a network  from user computing systems  (e.g., personal computers, portable computing devices, mobile phones, electronic book readers, PDAs, etc.) of end users. The network  may be a global communications network (e.g., the internet), a wide area network, a local area network, or another data network. The system  also includes a repository of catalog content . The catalog content  may include, for example, product images, product descriptions, user ratings and reviews of particular products, price and availability data, seller data, etc. A search engine (not shown) enables users to search the catalog by submitting free-form search strings. The system  can include one or more catalog generation engines  for customizing or personalizing the appearance or content of a display page presented to a user of the system . For example, a display page can include a web page that is displayed by a web browser (or other user interface) when a user visits the web site hosted by the electronic catalog system . Such customized or personalized display pages can include a home or login page (when the user first accesses the website), detail pages for specific items in the electronic catalog, search pages that allow users to search for desired items or services, or recommendation pages that are generated in response to a user's request for recommendations. Display pages can also include popup pages, popovers, hover pages, and so forth that are presented when a user views a web page.","In this example, merchants who wish to make an item (e.g., a product or service) available for acquisition via the electronic catalog system  can submit information about the item using merchant computing systems . The merchant information may include an item identifier for each item, e.g., a stock keeping unit (\u201cSKU\u201d). The electronic catalog system  can maintain a data repository  that stores catalog identification numbers (\u201cCIN\u201d) for each item available from the electronic catalog system . In some cases, the SKU maintained by the merchant and the CIN maintained by the catalog system may be substantially identical or include substantially the same information (e.g., for a book, both may include the International Standard Book Number (ISBN)). In other cases, the CIN and the SKU may be quite different in content or format.","The electronic catalog system  can include a match engine  configured to determine whether item information submitted by a merchant matches an existing item in the catalog. For example, the match engine  can determine whether an item's SKU matches a CIN for an existing product. If a match is found, the item information can be added to the catalog content repository  for display on an item detail page. For example, the item detail page may indicate that the item is available from the merchant and may also indicate the price and number of such items available from the merchant. If a match is not found by the match engine , the item information can be used by the catalog generation engine  to generate a new display page for the item, thereby enabling users of the system  to acquire the item from the merchant.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["104","104","208","100","104","204","208","212","204","208"]},"The example match engine  can include a task result evaluation engine , which will be described below with reference to . In this example, the task result evaluation engine  can provide significant amounts of labeled training data for use by the machine learning module , which may provide significant improvements in learning accuracy of the machine learning algorithm. Further, since obtaining manually labeled training data can be time-consuming and expensive, embodiments of the task result evaluation engine  which can provide labeled training data may advantageously reduce costs, improve efficiency, and enable more accurate learning algorithms to be generated by the machine learning module .","In other implementations, the match engine  can be configured with additional or alternative functionality. For example, the match engine  may be configured to automatically segment blocks of Asian characters into separate words (e.g., to determine a title of an item), to compare images (e.g., to determine whether a merchant's product image matches an image of a product available from the catalog system), or to recognize handwriting (e.g., to identify text, numbers, or a signature in an image of a payment check). The task result evaluation engine  can be used, for example, to provide additional training data for these additional functionalities or to evaluate the quality of the results of human or machine judges who may additionally or alternatively perform or assist with this functionality.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIGS. 1 and 2"],"b":"220"},"The example task result evaluation engine  includes a training data module , a judge evaluation module , a reporting module , and a billing module . The task result evaluation engine  can receive task judging results from one or more judge computing systems  via the network . The task result evaluation engine  can communicate judging results (e.g., via the reporting module) to the judge computing systems via the network . The task result evaluation engine  may also communicate with other components of the electronic catalog system  via the network  or other suitable wired or wireless communication networks. In some implementations, the electronic catalog system  may provide a User Interface (UI) or Application Programming Interface (API) to enable judges or computing systems to communicate information to and from the task result evaluation engine .","In the example shown in , the training data module  can access task results provided by judges for analysis by the judge evaluation module . For example, the training data module  can receive task results from the judge computing systems  and may store the task results in local storage or memory. The training data module  may also communicate training data to the training data repository  for use by the machine learning module .","The judge evaluation module  accesses the task results and analyzes them via one or more algorithms described in further detail in Section IV. The judge evaluation module  may determine one or more quality metrics associated with a judge's task results. For example, the quality metrics may include accuracy, error rate, throughput of accurate results, speed (e.g., throughput per unit time), or a combination (e.g., weighted average) of such metrics. The judge evaluation module  may rank or rate judges based at least in part on the quality metrics. For example, judges may be ranked by error rate (e.g., smaller error rate may imply a better judge), by speed (e.g., higher speed may imply a better judge), or some other metric or combination of metrics. A judge who is ranked as \u201cbetter\u201d under one metric may not rank as highly under a different metric. For example, a judge who has a very low error rate but is very slow to complete tasks may rate more highly when ranked by error rate (or accuracy) than when ranked by speed or throughput. In some implementations, the judge evaluation module  can determine a set of \u201cpoor\u201d judges (e.g., those who are ranked or have a quality metric below a threshold). Such judges might be removed from judging, replaced, or provided additional training or supervision. The judge evaluation module  can determine a set of \u201cgood\u201d judges (e.g., those who are ranked or have a quality metric above a threshold) who might be rewarded (e.g., with an award, a promotion, higher compensation, or additional tasks).","The reporting module  can communicate results (e.g., quality metrics, judge evaluations, etc.) of the judge evaluation module  to the judges themselves, a judge review panel, or to other components of the catalog system . In some implementations, the reporting module  may provide feedback to the judges (e.g., quality metrics, ratings, or rankings) while the judges are working on a task, which may allow the judges to improve performance. The reporting module  may communicate this feedback to the judge computing systems  for display on a UI viewable by the judge. Such feedback may improve judging quality, because it may be motivating for a judge to see that the judge has moved from the 40th most accurate to the 10th most accurate judge. In some cases, the feedback is anonymous so that the judges may not know the particular judge associated with a particular quality metric, rating, or ranking.","The billing module  may determine a compensation rate for the judges based at least in part on the quality metrics, rankings, or ratings determined by the judge evaluation module . For example, a judge may be paid a certain amount or at a certain monetary rate for completing a task (e.g., 10 cents for each merchant item matched to a catalog item). In some implementations, the compensation may be adjusted or modified to account for one or more quality metrics (e.g., the judge may be compensated at least partly based on accuracy, error rate, throughput, or speed).","For some tasks, the judgments made by judges can have strong a priori probabilities. As one example, in an Asian language word segmentation task, a yes\/no judgment is made at every pair of characters (e.g., \u201cyes\u201d this is a word break or \u201cno\u201d this is not a word break). As a majority of judgments generally will be \u201cno\u201d, a judge who simply returned a \u201cno\u201d result for each pair of characters might rate highly when measured in accuracy or error rate, simply because a the \u201cright\u201d answer is generally \u201cno\u201d. Accordingly, some embodiments determine quality metrics (or compensation) based at least in part on the a priori probabilities of the task results. For example, if a \u201cno\u201d is less common than a \u201cyes\u201d, a \u201cno\u201d result may be weighted less than a \u201cyes\u201d result. In some such implementations, a logarithmic (or entropic) type of weighting can be used to provide a ranking measured in bits per judgment. Continuing with the foregoing example, if a \u201cno\u201d is 9 times as common as a \u201cyes\u201d, then a \u201cno\u201d may be worth, for example, \u2212log0.9\u22480.15 bits and a yes may be worth \u2212log0.1\u22483.3 bits. In some such embodiments, the Kullback-Leibler divergence (or relative entropy) can be used to determine the bits per judgment, which corresponds roughly to the amount of information the judge's judgment provides beyond that expected based on the a priori task result probabilities. Thus, in some implementations, a judge may be paid by the \u201cbit\u201d and a judge's throughput may be measured in terms of bits per unit time (e.g., bits per hour) generated by the judge. The total information added by the judge can be determined by multiplying the judge's error rate (in bits per judgment) by the total number of judgments made by the judge. Further, since bits per judgment may reflect the information added by the judge, quality metrics measured in terms of bits per judgment may be effective at identifying judges (human or machine) that simply submit random results or the same result each time (e.g., results that add little or no information). In such cases, appropriate action may be taken (e.g., removing, replacing, or retraining the judge).","Various embodiments of the disclosed systems and methods can implement one or more of the algorithms discussed below. Such embodiments may use the task results obtained from multiple judges to provide an evaluation of each judge. Some such embodiments may enable analysis of the task results from multiple judges to provide judging evaluations in which, in effect, the judges judge themselves, because the judge evaluations (e.g., quality metrics) can be determined without recourse to evaluations from an external rating panel and\/or without recourse to using a set of evaluation data (e.g., data known or assumed to be accurate) with which to compare the judges' task results. In some such embodiments, the algorithm may be based at least in part on assumptions including that \u201cgood\u201d judges tend to agree with other \u201cgood judges\u201d; \u201cgood\u201d judges tend to disagree with \u201cpoor\u201d judges; and \u201cpoor\u201d judges tend to disagree with other \u201cpoor\u201d judges.","In various embodiments, the judge evaluation module  can be programmed to use one or more of the algorithms described below to evaluate task results obtained from multiple judges.","For this example algorithm, it is assumed that all judges make purely random errors, and that although judges may have different quality, no judges return task results with ill intent (e.g., there is no judge who just returns the same task result over and over or somehow tries to \u201cgame\u201d the system).","In this embodiment, during the judging process, the same task data is sent to a pair of judges instead of one judge. The choice of the pair of judges to which the task data is sent may be randomized. In various implementations, a fraction f of the task data is sent to pairs of judges (and used for evaluating the judges), and the remaining fraction (1\u2212f) is sent to a single judge for judgment. It may be advantageous if the judges do not know whether the task data is being duplicated and sent to another judge or whether the task data is just being sent to that particular judge. If the fraction f is too large (e.g., greater than about 50%), the judge evaluation can be inefficient (e.g., if f=1, every task is judged twice). Therefore, certain implementations may use a fraction f that is relatively small, e.g., f=0.01, f=0.05, f=0.10, f=0.15, f=0.20, or f=0.25.","Let e be the irreducible error rate, e.g., the error rate for good judges that is imposed by the inherent ambiguity in making a judgment for a task. In this illustrative example, the error rate e is assumed to be the same for all judges (see below for examples of algorithms that relax this assumption). When two judges judge the same task data, there are four possibilities for the outcomes, which are summarized in the following truth table:",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Judge 1 Incorrect","Judge 1 Correct"]},{"entry":[{},"(probability e)","(probability 1 \u2212 e)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Judge 2 Incorrect","e","e(1 \u2212 e)"]},{"entry":["(probability e)",{},{}]},{"entry":["Judge 2 Correct","e(1 \u2212 e)","(1 \u2212 e)"]},{"entry":"(probability 1 \u2212 e)"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The judge evaluation module  can analyze the results returned from pairs of judges who have judged the same task data (\u201coverlapped judgments\u201d) and determine the judge error rate e. Let N be the number of overlapped judgments in a measurement of judge quality. The judge evaluation module  can determine whether a pair of judges agrees on the result or whether the pair of judges disagrees on the result. If there are D disagreements among the N overlapped judgments, and e<(1\u2212e), then it can be estimated that D=2e(1\u2212e)N, which can be solved for the judge error rate e:",{"@attributes":{"id":"p-0038","num":"0037"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"e","mo":"=","mrow":{"mfrac":{"mrow":{"mn":"1","mo":"-","msqrt":{"mrow":{"mn":"1","mo":"-","mfrac":{"mrow":{"mn":"2","mo":"\u2062","mi":"D"},"mi":"N"}}}},"mn":"2"},"mo":"."}}},{"mrow":{"mo":["(",")"],"mn":"1"}}]}}}},"br":{}},"If 2D>N, then the judges are performing worse than chance overall (e.g., the error rate is above 50%). In this case, the error rate can be determined as:",{"@attributes":{"id":"p-0040","num":"0039"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"e","mo":"=","mrow":{"mfrac":{"mrow":{"mn":"1","mo":"+","msqrt":{"mrow":{"mfrac":{"mrow":{"mn":"2","mo":"\u2062","mi":"D"},"mi":"N"},"mo":"-","mn":"1"}}},"mn":"2"},"mo":"."}}},{"mrow":{"mo":["(",")"],"mn":"2"}}]}}}}},"In some implementations, if 2D>N, the judge evaluation module , instead of returning the error rate from Equation (2), may assume that there may be a fault or problem with the judge evaluation or the task result data.","In this example of a task result judging algorithm, individualized error rates can be determined for the judges from the results of tasks performed by the judges. If there are J judges, the error rate for the ijudge will be denoted by e, where i is an index between 1 and J. The judge evaluation module  can determine the number of disagreements, D, between the ijudge and all other judges given Noverlapped judgments. The total number of disagreements is D, and the total number of overlapped judgments is N.","An error rate e* represents an error rate estimated for all judges excluding the ijudge. In some embodiments, the error rate e* may be determined using algorithms generally similar to those described above in Section IV.1 (see, e.g., Eqns. (1) and (2)). For example,",{"@attributes":{"id":"p-0044","num":"0043"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msubsup":{"mi":["e","i"],"mo":"*"},"mo":"=","mrow":{"mo":"{","mrow":{"mtable":{"mtr":[{"mtd":{"mrow":{"mfrac":{"mrow":{"mn":"1","mo":"-","msqrt":{"mrow":{"mn":"1","mo":"-","mfrac":{"mrow":[{"mn":"2","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mi":"D","mo":"-","msub":{"mi":["D","i"]}}}},{"mi":"N","mo":"-","msub":{"mi":["N","i"]}}]}}}},"mn":"2"},"mo":",","mrow":{"mrow":[{"mn":"2","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mi":"D","mo":"-","msub":{"mi":["D","i"]}}}},{"mi":"N","mo":"-","msub":{"mi":["N","i"]}}],"mo":"\u2264"}}}},{"mtd":{"mrow":{"mfrac":{"mrow":{"mn":"1","mo":"+","msqrt":{"mrow":{"mfrac":{"mrow":[{"mn":"2","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mi":"D","mo":"-","msub":{"mi":["D","i"]}}}},{"mi":"N","mo":"-","msub":{"mi":["N","i"]}}]},"mo":"-","mn":"1"}}},"mn":"2"},"mo":",","mrow":{"mrow":[{"mn":"2","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mi":"D","mo":"-","msub":{"mi":["D","i"]}}}},{"mi":"N","mo":"-","msub":{"mi":["N","i"]}}],"mo":">"}}}}]},"mo":"."}}}},{"mrow":{"mo":["(",")"],"mn":"3"}}]}}}}},"A truth table showing the probabilities of outcomes for overlapped judgments between the ijudge and the jjudge can be estimated as shown in the following table:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},{},"Judge j \u2260 i Incorrect","Judge j \u2260 i Correct"]},{"entry":[{},{},"(probability e*)","(probability 1 \u2212 e*)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Judge i Incorrect","ee*","e(1 \u2212 e*)"]},{"entry":[{},"(probability e)",{},{}]},{"entry":[{},"Judge i Correct","e*(1 \u2212 e)","(1 \u2212 e)(1 \u2212 e*)"]},{"entry":[{},"(probability 1 \u2212 e)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"An estimate for the number of disagreements between the ijudge and all other judges can be written as D=N[e*(1\u2212e)+e(1\u2212e*)] which can be solved to obtain an estimate for the error rate efor the ijudge:",{"@attributes":{"id":"p-0048","num":"0047"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msub":{"mi":["e","i"]},"mo":"=","mrow":{"mfrac":{"mrow":[{"mfrac":{"msub":[{"mi":["D","i"]},{"mi":["N","i"]}]},"mo":"-","msubsup":{"mi":["e","i"],"mo":"*"}},{"mn":"1","mo":"-","mrow":{"mn":"2","mo":"\u2062","msubsup":{"mi":["e","i"],"mo":"*"}}}]},"mo":"."}}},{"mrow":{"mo":["(",")"],"mn":"4"}}]}}}},"br":{},"sub":["i","i","i"],"sup":"th "},"In some implementations, the formulation described herein can be used to determine conditional errors for specific judgments, for example, the error rate given that the judge answered \u201cyes\u201d versus the error rate given that the judge answered \u201cno\u201d to a task question.","In other implementations, the systems and methods may determine individualized error rates, e, based at least in part on an analysis of disagreements among pairs of judges who judge overlapped data. A truth table showing the probabilities of outcomes for overlapped judgments between the ijudge and the jjudge is:",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},{},"Judge j \u2260 i Incorrect","Judge j \u2260 i Correct"]},{"entry":[{},{},"(probability e)","(probability 1 \u2212 e)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Judge i Incorrect","ee","e(1 \u2212 e)"]},{"entry":[{},"(probability e)",{},{}]},{"entry":[{},"Judge i Correct","e(1 \u2212 e)","(1 \u2212 e)(1 \u2212 e)"]},{"entry":[{},"(probability 1 \u2212 e)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{},"sup":"th ","sub":["ij","ij","i","j","j","i","ij","ij ","ij","ji "]},"In other embodiments, assuming that any deviation from the foregoing estimate for Dis random and that there is no collusion among the judges, the errors may be expected to have a Gaussian distribution. In some such embodiments, the individualized error rates for the judges can be determined by reducing (e.g., below a threshold) or minimizing the following sum:",{"@attributes":{"id":"p-0053","num":"0052"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"munder":{"mo":"\u2211","mrow":{"mi":"i","mo":",","mrow":{"mi":["j","i"],"mo":"\u2260"}}},"mo":"\u2062","mrow":{"msup":{"mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["D","ij"]},"mo":"-","mrow":{"msub":{"mi":["N","ij"]},"mo":"\u2061","mrow":{"mo":["[","]"],"mrow":{"mrow":[{"msub":{"mi":["e","i"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"-","msub":{"mi":["e","j"]}}}},{"msub":{"mi":["e","j"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"-","msub":{"mi":["e","i"]}}}}],"mo":"+"}}}}},"mn":"2"},"mo":"."}}},{"mrow":{"mo":["(",")"],"mn":"5"}}]}}}},"br":{}},"The judge evaluation module  can determine the error rates, e, for i=1, . . . , J, by finding values of the error rates ethat minimize (or reduce to a sufficiently small value) the sum in Equation (5). In various embodiments, the judge evaluation module  can be programmed with one or more numerical methods for determining the error rates from Equation (5). For example, optimization algorithms can be used such as, e.g., search algorithms, gradient descent algorithms, to find a minimum (or sufficiently small value) of the sum in Equation (5). In some gradient descent algorithms, the algorithm takes steps of size \u03b3 toward the minimum of the sum. The algorithm can repeat taking steps until the minimum (or a sufficiently small value) of the sum is reached. The values of the eat this point can be returned as the judge error rates.","In some gradient descent algorithms, the value of the step size \u03b3 can be determined as the value that minimizes the squared error |f(e)\u2212\u03b3\u2207f(e)|, where e={e, e, . . . , e}, f(e) is the sum in Equation (5), and \u2207f(e) is the gradient of the sum. This squared-error equation can be reduced to a cubic equation for the step size \u03b3, and in some implementations, the roots for \u03b3 can be found analytically. Because 0\u2266e\u22661 for all i, there may be constraints on the value of \u03b3 that lead to allowable values for the error rates. For example, the step size may be bounded in the closed range [0,\u03b3], where \u03b3is the minimum (over all i) of e\/gif g>0 and (1\u2212e)\/(\u2212g) if g<0, where gis the value of the gradient at e. Each of the values of the step size \u03b3 can be tested to determine which step size returns the smallest value for the sum in Equation (5). This process can be iterated so that the routine \u201cdescends\u201d toward the minimum value of the sum. The process can end when the minimum is reached (which may be indicated by the value \u03b3=0), a sufficiently small value of the sum is reached, or converged values of the eare found.","In this example of a task result judging algorithm, individualized error rates ecan be determined for the J judges who evaluate tasks that have M possible outcomes (or labels). This algorithm may provide advantageous error rate estimates when the probabilities of the different outcomes are different from each other. For example, if the probabilities of the possible outcomes of a task for judging the color of a shoe are 80% for \u201cblack\u201d, 15% for \u201cbrown\u201d, and 5% for \u201cred\u201d, then a judge who simply selects \u201cblack\u201d for every shoe would achieve 80% accuracy simply by virtue of these probabilities. The judge evaluation module  can implement an embodiment of the following algorithm to account for these probabilities.","In this example, the random variable Y is such that P(Y=k) is the prior probability that a randomly drawn task should be designated with outcome k. The random variable Xis such that P(X=k) is the prior probability that judge i, presented with a randomly drawn task, will designate the task with outcome k. Conditional probabilities will be denoted, for example, as P(Y|X), which is the probability for the occurrence of Y given that Xoccurs. Certain embodiments of the algorithm can determine Y, X, P(Y|X), and P(Y|X, X) using only overlapped judgments between pairs of judges.","In the following example, N represents the number of different tasks that are each judged by two different judges. The judge evaluation module  can compute the following counts shown in table:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"c","Total judgments by judge i"]},{"entry":[{},"c","Judgments of k by judge i"]},{"entry":[{},"c","Total joint judgments by judges i and j"]},{"entry":[{},"c","Joint judgments by judges i and j with"]},{"entry":[{},{},"answers k and h, respectively"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"sub":["ij","ji ","ij,kh","ji,hk ","ij","ij,kh","i","i,k","i "],"sup":"2"},{"@attributes":{"id":"p-0060","num":"0059"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["X","i"]},{"mi":["X","j"]}],"mo":","}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":["X","i"]},"mo":"=","mi":"k"},{"msub":{"mi":["X","j"]},"mo":"=","mi":"h"}],"mo":","}}},{"mfrac":{"msub":[{"mi":"C","mrow":{"mi":["ij","kh"],"mo":","}},{"mi":["C","ij"]}]},"mo":"."}],"mo":["\u2248","\u2248"]}},{"mrow":{"mo":["(",")"],"mn":"6"}}]}}}}},"In certain embodiments, the algorithm may assume that for i\u2260j, Xand Xare conditionally independent, given Y. Because of the conditional independence assumption, the probabilities satisfy the following relationships:",{"@attributes":{"id":"p-0062","num":"0061"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["X","i"]},{"mi":["X","j"]}],"mo":","}}},{"munderover":{"mo":"\u2211","mrow":{"mi":"l","mo":"=","mn":"1"},"mi":"M"},"mo":"\u2062","mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["X","i"]},{"mi":["X","j"]}],"mo":[",",","],"mrow":{"mi":["Y","l"],"mo":"="}}}}}],"mo":["=","\u2062"],"mi":{}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":{},"mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"l","mo":"=","mn":"1"},"mi":"M"},"mo":"\u2062","mrow":{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["X","i"]},"mo":",","mrow":{"mrow":{"msub":{"mi":["X","j"]},"mo":"|","mi":"Y"},"mo":"=","mi":"l"}}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["Y","l"],"mo":"="}}}],"mo":"\u2062"}}}}},{"mtd":{"mrow":{"mi":{},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"l","mo":"=","mn":"1"},"mi":"M"},"mo":"\u2062","mrow":{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":{"mi":["X","i"]},"mo":"|","mi":"Y"},"mo":"=","mi":"l"}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":{"mi":["X","j"]},"mo":"|","mi":"Y"},"mo":"=","mi":"l"}}},{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["Y","l"],"mo":"="}}},"mo":"."}],"mo":["\u2062","\u2062"]}}}}}]}}},"br":{},"sub":["i,kh","i","k"]},{"@attributes":{"id":"p-0063","num":"0062"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msub":{"mi":"c","mrow":{"mi":["ij","kh"],"mo":","}},"mo":"\u2248","mrow":{"msub":{"mi":["c","ij"]},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"l","mo":"=","mn":"1"},"mi":"M"},"mo":"\u2062","mrow":{"msub":[{"mi":"a","mrow":{"mi":["i","kl"],"mo":","}},{"mi":"a","mrow":{"mi":["j","hl"],"mo":","}}],"mo":["\u2062","\u2062"],"mrow":{"msub":{"mi":["p","l"]},"mo":"."}}}}}},{"mrow":{"mo":["(",")"],"mn":"7"}}]}}}}},"Some embodiments of the algorithm determine the values for the probabilities by minimizing the following sum:",{"@attributes":{"id":"p-0065","num":"0064"},"maths":{"@attributes":{"id":"MATH-US-00009","num":"00009"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"munder":{"mo":"\u2211","mrow":{"mi":["i","j","k","h"],"mo":[",",",",","]}},"mo":"\u2062","mrow":{"msup":{"mrow":{"mo":["[","]"],"mrow":{"msub":{"mi":"c","mrow":{"mi":["ij","kh"],"mo":","}},"mo":"-","mrow":{"msub":{"mi":["c","ij"]},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"l","mo":"=","mn":"1"},"mi":"M"},"mo":"\u2062","mrow":{"msub":[{"mi":"a","mrow":{"mi":["i","kl"],"mo":","}},{"mi":"a","mrow":{"mi":["j","hl"],"mo":","}},{"mi":["p","l"]}],"mo":["\u2062","\u2062"]}}}}},"mn":"2"},"mo":"."}}},{"mrow":{"mo":["(",")"],"mn":"8"}}]}}}},"br":{}},"Because of the symmetries of the foregoing equations, there can be MJ(J\u22121)\/2 equations, and because",{"@attributes":{"id":"p-0067","num":"0066"},"maths":{"@attributes":{"id":"MATH-US-00010","num":"00010"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mrow":[{"munderover":{"mo":"\u2211","mrow":{"mi":"k","mo":"=","mn":"1"},"mi":"M"},"mo":"\u2062","msub":{"mi":["p","k"]}},{"mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"k","mo":"=","mn":"1"},"mi":"M"},"mo":"\u2062","msub":{"mi":"a","mrow":{"mi":["i","kh"],"mo":","}}},"mo":"=","mn":"1"}],"mo":"="},"mo":","}}},"br":{},"sup":["2","2","2"]},"In some example embodiments, initial conditions that are used to begin searching for the minimum of Equation (8) can be determined by assuming that all J judges are substantially optimal. In some such embodiments, pcan be approximated by c\/N and ccan be approximated as",{"@attributes":{"id":"p-0069","num":"0068"},"maths":{"@attributes":{"id":"MATH-US-00011","num":"00011"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"msub":{"mi":["c","kh"]},"mo":"\u2248","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"l","mo":"=","mn":"1"},"mi":"M"},"mo":"\u2062","mrow":{"msub":[{"mi":["a","kl"]},{"mi":["a","hl"]},{"mi":["p","l"]}],"mo":["\u2062","\u2062"]}}},"mo":","}},{"mrow":{"mo":["(",")"],"mn":"9"}}]}}}},"br":{},"sub":["kh","h","hk","k"]},"Accordingly, in some embodiments, Equation (9) can be solved to provide initial conditions for the solution of Equation (8). In some such embodiments, faster convergence may be achieved by initializing values for each judge under the assumption that all judges are initially equivalent, at which point there are M equations in M unknowns.","In some embodiments, a gradient descent algorithm that uses step sizes \u03b3 to \u201cdescend\u201d toward the minimum can be used. In some such embodiments, possible values for the step size \u03b3 can be determined using concepts generally similar to those described above. For example, some embodiments select possible values of \u03b3 by minimizing:",{"@attributes":{"id":"p-0072","num":"0071"},"maths":{"@attributes":{"id":"MATH-US-00012","num":"00012"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"munder":{"mo":"\u2211","mrow":{"mi":["k","h"],"mo":"\u2264"}},"mo":"\u2062","msup":{"mrow":{"mo":["[","]"],"mrow":{"msub":{"mi":["c","kh"]},"mo":"-","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"l","mo":"=","mn":"1"},"mi":"M"},"mo":"\u2062","mrow":{"mrow":[{"mo":["(",")"],"mrow":{"msub":{"mi":["a","kl"]},"mo":"-","mrow":{"mi":"\u03b3","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["g","kl"]}}}},{"mo":["(",")"],"mrow":{"msub":{"mi":["a","hl"]},"mo":"-","mrow":{"mi":"\u03b3","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["g","hl"]}}}}],"mo":["\u2062","\u2062"],"msub":{"mi":["p","l"]}}}}},"mn":"2"}},"mo":","}}},"br":{},"sub":["kl ","kl"]},"In any of the algorithms disclosed herein, if there is a subset of some highly non-random or collusive judges, the error rate may not, in some cases, converge to be in a range from 0 to 1. In some such cases, the judge evaluation module  may drop a subset of the judges having disagreement ratios that are higher than other judges, and re-run the algorithm on the remaining judges. This process may, in some cases, be repeated until a converged set of error rates (in the range from 0 to 1) is determined.","In some implementations, if there is a fault, problem with the task result data, or some other type of abnormality (e.g., highly non-random judging results), the reporting module  may communicate a report, an alert, or a notification (e.g., electronic mail, text message, etc.) to an appropriate system component, data repository, or system manager indicating the type of problem encountered and that further investigation or intervention may be needed.","Accordingly, the foregoing example algorithms demonstrate that embodiments of the judge evaluation module  can determine the error rate of multiple judges without knowing which particular judgments were made in error. Thus, certain such embodiments can determine the error rate using only the task results received from the judges. In certain such embodiments, the judge error rate may be at least partly based on the disagreement ratio determined between pairs of judges who judge the same task data. Therefore, certain such embodiments can advantageously use the judges' own judgments to enable the \u201cjudges to judge themselves.\u201d Accordingly, the judge error rate may be determined without using a set of evaluation data (e.g., data known or assumed to be accurate) that is compared to the judges' task results to determine the error rate. Further, the judge error rate may be determined without using a (human) review panel to review and provide judgments about the quality of the judges' task results. This may be advantageous in cases in which none or few of the members of a review panel have sufficient expertise or experience to evaluate the performance of the judges (e.g., evaluating search engine results in languages understood by no member of the panel). Therefore, use of embodiments of the foregoing algorithms can enable fully automatic evaluations of multiple judges who provide judgments for one or more tasks.","In some embodiments, the reporting module  can communicate results (e.g., quality metrics, judge evaluations, ratings, rankings, etc.) determined by the judge evaluation module  to the judges themselves, a judge review panel, or to other components of the catalog system . The quality metrics can include, for example, error rate, accuracy rate (e.g., 1\u2212e), throughput, speed, or a combination of such (or similar) metrics. In various implementations, throughput measures the number of tasks judged or the number of tasks judged correctly. In some implementations, throughput is adjusted for the number of tasks judged incorrectly. For example, throughput may measure the number of tasks judged correctly minus the number of tasks judged incorrectly (e.g., so that every incorrect result cancels out a correct result). If the number of tasks judged is n and the error rate is e, this latter measure of throughput may be expressed as n(1\u22122e). Speed may be determined as throughput per unit time (e.g., throughput per hour).","As described above, some implementations may use a logarithmic (or entropic) type of weighting to provide a quality metric that measures the amount of information added by the judge. For example, the quality metric may be measured in bits per judgment. In some such embodiments, the Kullback-Leibler divergence (or relative entropy) between X, and Y can be used to determine the bits per judgment. The billing module  may determine the amount or rate at which judges are paid based partly on the amount of information added by the judge (e.g., paid by the bit).","As described above, in some implementations, the judge evaluation module  analyzes the task results returned from pairs of judges who have judged the same task data (\u201coverlapped judgments\u201d) to determine the judge error rate e (individual or average). In various implementations, one, some, or all of the following considerations can be implemented by the judge evaluation module .","In some implementations, each judge is overlapped with at least one other judge on at least some task data. For example, each judge may be overlapped with about 10%, 20%, 30%, 40%, 50%, 75%, or more of the judges on some task data. In some such implementations, each judge is overlapped with every (or nearly every) other judge on at least some tasks. For example, in some such implementations, if there are J judges, then J(J\u22121)\/2 task judgments can be selected for overlap.","The overlapping can be randomized and made unpredictable so that a judge will not know whether a particular task is being evaluated, with whom the judge is being compared, or whether the judge is the first (or only) judge to judge the task. For example, it may be advantageous not to submit tasks in sequence (e.g., consecutive paragraphs from a book), because a judge may suspect that he or she is being evaluated if a non-sequential task is submitted to the judge. If there is a possibility of collusion among judges, the sense of the task questions asked of certain judges may be reversed as compared to the sense of the question asked of other judges. For example, for a pattern-matching problem where judges are asked if pattern A matches Pattern B, the questions can be randomized as to which questions is to be A and which is to be B. By reversing the sense of the question (and assuming that judges cannot compare the questions received), collusion among judges (e.g., all judges agree to select the first choice) can be reduced or eliminated.","In some implementations, new judges may be overlapped to a relatively high degree (e.g., from about 50% to about 100%) with one, some, or all of the existing or established judges during a probationary period. In some such implementations, the judge evaluation is performed on two sets of judges: a first set including all judges and a second set including only existing or established judges (e.g., not including new judges). Evaluation results from the first set can be used to evaluate the new judges, and evaluation results from the second set can be used to evaluate the existing or established judges. Existing or established judges may be placed on probation if one or more of their quality metrics drops below a threshold level. In some cases, judges on probation may not be paid or may be paid at a reduced rate or amount.","As discussed above with reference to , the match engine  may use a set of training data (accessible from the repository ) that the machine learning module  can use to train machine learning algorithms used, in this example context, to find electronic catalog items that match submitted merchant items. The ability of a machine learning algorithm to learn may depend on the quantity and quality of the training data; therefore, it may be advantageous to provide systems and methods that can provide significant quantities of training data and\/or provide an indication as to the quality of the training data. Embodiments of the judging evaluation systems and methods disclosed herein can be used to generate and\/or qualify training data. The systems and methods disclosed herein are illustrative and are not limited to the context of item matching in an electronic catalog and can generate and\/or qualify training data for any type of machine learning algorithm.","The training data may include sets of paired data comprising an input object, e.g., a SKU for a merchant item, and a desired output value (often referred to as a \u201clabel\u201d), e.g., a CIN that matches the SKU. The training data can be generated as the result of the task judgment process, for example, by associating a particular judge's judgment with the task question (e.g., judge i has determined that a merchant's submission of the \u201cZoomracer Running Shoe\u201d with \u201cSKU=3789\u201d corresponds to the electronic catalog system's item with \u201cCIN=7463\u201d).","In some implementations, a confidence score can be included with the training data. The confidence may include one or more values that represent the quality of the judge's judgment. The confidence score can be determined by the judge evaluation module . In one embodiment, the confidence score may simply be the particular judge's accuracy rate (e.g., 1\u2212e) for the task. Continuing with the above example, if the judge's error rate is 7%, the confidence score may be 93%, and the training data may be that the \u201cZoomracer Running Shoe\u201d with \u201cSKU=3789\u201d corresponds to the electronic catalog system's item with \u201cCIN=7463\u201d with a 93% confidence score. Embodiments of certain machine learning algorithms can utilize the confidence score to provide improved learning based on the training data.","With reference to the example algorithm described in Section IV.3, certain embodiments can qualify training data as follows. If judge i assigns value k to an item, the confidence score can include a set of values (e.g., a vector) that may be representative of the probability distribution of possible outcomes of the judgments made by some or all of the judges. For example, the probability distribution may represent the likelihood of outcomes for the possible values associated with an item. In some embodiments, the confidence score includes values denoted as \u03bd={\u03bd} and can be determined as:",{"@attributes":{"id":"p-0086","num":"0085"},"maths":{"@attributes":{"id":"MATH-US-00013","num":"00013"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mi":["v","h"]},"mo":"=","mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"Y","mo":"=","mrow":{"mrow":{"mi":"h","mo":"|","msub":{"mi":["X","i"]}},"mo":"=","mi":"k"}}}}}}},{"mtd":{"mrow":{"mo":"=","mfrac":{"mrow":[{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["X","i"]},"mo":"=","mrow":{"mrow":{"mi":["k","Y"],"mo":"|"},"mo":"=","mi":"h"}}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["Y","h"],"mo":"="}}}],"mo":"\u2062"},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["X","i"]},"mo":"=","mi":"k"}}}]}}}},{"mtd":{"mrow":{"mo":"=","mrow":{"mfrac":{"mrow":[{"msub":[{"mi":"p","mrow":{"mi":["i","kh"],"mo":","}},{"mi":"p","mrow":{"mi":["i","h"],"mo":","}}],"mo":"\u2062"},{"msub":[{"mi":"c","mrow":{"mi":["i","k"],"mo":","}},{"mi":["c","i"]}],"mo":"\/"}]},"mo":"."}}}}]}}},"br":{},"sub":"h"},"In certain embodiments, tasks are judged by pairs of judges, and the confidence score can represent the probability that an ideal judge would label the item as h given that judge i labeled the item as k and judge j labeled the same item as l. The confidence score values can be determined from:",{"@attributes":{"id":"p-0088","num":"0087"},"maths":{"@attributes":{"id":"MATH-US-00014","num":"00014"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mi":["v","h"]},"mo":"=","mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mi":"Y","mo":"=","mrow":{"mrow":{"mi":"h","mo":"|","msub":{"mi":["X","i"]}},"mo":"=","mi":"k"}},{"msub":{"mi":["X","j"]},"mo":"=","mi":"l"}],"mo":","}}}}}},{"mtd":{"mrow":{"mo":"=","mfrac":{"mrow":[{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":["X","i"]},"mo":"=","mi":"k"},{"msub":{"mi":["X","j"]},"mo":"=","mrow":{"mrow":{"mi":["l","Y"],"mo":"|"},"mo":"=","mi":"h"}}],"mo":","}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["Y","h"],"mo":"="}}}],"mo":"\u2062"},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":["X","i"]},"mo":"=","mi":"k"},{"msub":{"mi":["X","j"]},"mo":"=","mi":"l"}],"mo":","}}}]}}}},{"mtd":{"mrow":{"mo":"=","mfrac":{"mrow":[{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["X","i"]},"mo":"=","mrow":{"mrow":{"mi":["k","Y"],"mo":"|"},"mo":"=","mi":"h"}}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["X","j"]},"mo":"=","mrow":{"mrow":{"mi":["l","Y"],"mo":"|"},"mo":"=","mi":"h"}}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["Y","h"],"mo":"="}}}],"mo":["\u2062","\u2062"]},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":["X","i"]},"mo":"=","mi":"k"},{"msub":{"mi":["X","j"]},"mo":"=","mi":"l"}],"mo":","}}}]}}}},{"mtd":{"mrow":{"mo":"=","mrow":{"mfrac":{"mrow":[{"msub":[{"mi":"p","mrow":{"mi":["i","kh"],"mo":","}},{"mi":"p","mrow":{"mi":["j","lh"],"mo":","}},{"mi":["p","l"]}],"mo":["\u2062","\u2062"]},{"msub":[{"mi":"c","mrow":{"mi":["ij","kh"],"mo":","}},{"mi":["c","ij"]}],"mo":"\/"}]},"mo":"."}}}}]}}}},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 4","b":["400","400","220"]},"At block , the method  can access task results from multiple judges. The task results can include overlapped task data that was judged by more than one judge (e.g., a pair of judges). At block  the method  can determine disagreements among the judges who have judged the overlapped task data. For example, embodiments of the method  can determine disagreement ratios (e.g., D\/N) or the counts from Table 4. At block , the method  can determine the judge error rates based at least in part on one or more of the algorithms described herein. At block , the method  can evaluate the judges by, for example, determining quality metrics, ratings, or rankings of the judges. The judge evaluations can be reported (e.g., via the reporting module ) and payment amounts or rates can be determined (e.g., via the billing module ).","Block  is an optional block and may be used if training data based on the task results accessed from the judges is to be generated. The training data may (optionally) include confidence scores that indicate the quality of the task results. The training data can be stored by the data repository  and used by the machine learning module  to improve the quality of the machine learning algorithms used by the item matching module . Certain such embodiments can advantageously provide improved machine learning algorithms that better identify matches between merchant-submitted item information and item information in the electronic catalog system . Improved machine learning algorithms can reduces costs and improve efficiency of the electronic catalog system in adding new merchant items to the catalog of items available for purchase by users. Cost savings beneficially may be passed on to customers of the electronic catalog system  who purchase items from the catalog.","As discussed above, certain embodiments of the systems and methods described herein use only the task results from the judges to evaluate the judges. Certain such embodiments may determine the evaluations automatically, without human intervention. In other embodiments, additional information may be used to evaluate the judges. For example, in some embodiments, input from a review panel may be used to modify one or more quality metrics, ratings, or rankings. As one such example, the review panel may grade the judges on an evaluation scale (e.g., \u201cnegative\u201d, \u201cneutral\u201d, or \u201cpositive\u201d), and adjust a quality metric, rating, or ranking based at least in part on the grade (e.g., increase metric by 10% for \u201cpositive\u201d grade, reduce metric by 10% for \u201cnegative\u201d grade, and leave metric unchanged for \u201cneutral\u201d grade).","In some implementations, a set of task results that are known (or assumed) to be correct may included in the evaluations. Such task results may be thought of as a \u201cgold\u201d standard with which to evaluate the judges. In some such implementations, the gold standard set is included as if it were another judge to be evaluated. Thus, some or all of the other judges can be compared to the gold standard set as well as to other judges' task results by the judge evaluation module . In some implementations, task results obtained from high-quality judges (e.g., judges having a sufficiently low error rate) can be used to generate the gold standard set for a future project involving same or similar tasks.","Although generally described in the context of an electronic catalog system that evaluates the results of tasks performed by human judges, the features and processes described above can also be implemented in a variety of other environments. As some possible examples, some or all of the disclosed features can be implemented by systems in which certain tasks are outsourced to humans, e.g., crowdsourcing systems, collaborative innovation networks, human-based computation systems, marketplaces for human intelligence tasks (e.g., Mechanical Turk\u00ae), and so forth. Further, as described above, embodiments of the disclosed systems and methods can evaluate the results of tasks performed by humans and\/or by machines. Embodiments of the systems and methods disclosed herein can be used to generate and qualify training data for use by machine learning algorithms.","Each of the processes, methods, and algorithms described in the preceding sections may be embodied in, and fully or partially automated by, code modules executed by one or more computers, computer systems, computer processors, machines, or hardware configured to execute computer instructions. The code modules may be stored on any type of non-transitory computer-readable medium or hardware computer storage device, such as hard drives, solid state memory, RAM, ROM, optical disc, and\/or the like. The systems and modules may also be transmitted as generated data signals (e.g., as part of a carrier wave or other analog or digital propagated signal) on a variety of computer-readable transmission mediums, including wireless-based and wired\/cable-based mediums, and may take a variety of forms (e.g., as part of a single or multiplexed analog signal, or as multiple discrete digital packets or frames). The methods, processes, and algorithms may be implemented partially or wholly in application-specific circuitry, special purpose hardware, or a general purpose hardware computer system programmed to perform the methods, processes, or algorithms pursuant to instructions from program software. The results of the disclosed processes and process steps may be stored, persistently or otherwise, in any type of non-transitory, tangible computer storage such as, e.g., volatile or non-volatile storage.","The various features and processes described above may be used independently of one another, or may be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition, certain method or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence, and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example, described blocks or states may be performed in an order other than that specifically disclosed, or multiple blocks or states may be combined in a single block or state. The example blocks or states may be performed in serial, in parallel, or in some other manner. Blocks or states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example, elements may be added to, removed from, or rearranged compared to the disclosed example embodiments.","Conditional language used herein, such as, among others, \u201ccan,\u201d \u201ccould,\u201d \u201cmight,\u201d \u201cmay,\u201d \u201ce.g.,\u201d and the like, unless specifically stated otherwise, or otherwise understood within the context as used, is generally intended to convey that certain embodiments include, while other embodiments do not include, certain features, elements and\/or steps. Thus, such conditional language is not generally intended to imply that features, elements and\/or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding, with or without author input or prompting, whether these features, elements and\/or steps are included or are to be performed in any particular embodiment. The terms \u201ccomprising,\u201d \u201cincluding,\u201d \u201chaving,\u201d and the like are synonymous and are used inclusively, in an open-ended fashion, and do not exclude additional elements, features, acts, operations, and so forth. Also, the term \u201cor\u201d is used in its inclusive sense (and not in its exclusive sense) so that when used, for example, to connect a list of elements, the term \u201cor\u201d means one, some, or all of the elements in the list. Conjunctive language such as the phrase \u201cat least one of X, Y and Z,\u201d unless specifically stated otherwise, is understood with the context as used in general to convey that an item, term, element, etc. may be either X, Y or Z. Thus, such conjunctive language is not generally intended to imply that certain embodiments require at least one of X, at least one of Y and at least one of Z to each be present.","While certain example embodiments have been described, these embodiments have been presented by way of example only, and are not intended to limit the scope of the inventions disclosed herein. Thus, nothing in the foregoing description is intended to imply that any particular feature, characteristic, step, module, or block is necessary or indispensable. Indeed, the novel methods and systems described herein may be embodied in a variety of other forms; furthermore, various omissions, substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions disclosed herein. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of certain of the inventions disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Throughout the drawings, reference numbers may be re-used to indicate correspondence between referenced elements. The drawings are provided to illustrate example embodiments described herein and are not intended to limit the scope of the disclosure.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
