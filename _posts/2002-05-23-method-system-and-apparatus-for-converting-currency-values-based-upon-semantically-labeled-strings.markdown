---
title: Method, system, and apparatus for converting currency values based upon semantically labeled strings
abstract: A method, system, and apparatus are provided for converting currency values between types of currency. When a string of text is entered into an application program, the string is analyzed to determine whether the string of text includes a currency value. If the string of text includes a currency value, the value is semantically labeled with schema information that identifies the type of currency associated with the value. When a selection is received of the currency value, a list of actions may be provided identifying conversion options available for the value. One of the conversion options may then be selected resulting in the conversion of the selected currency value to the destination type of currency identified by the selected action. The converted currency value may then be inserted into the string of text to replace the selected currency value along with a currency notation corresponding to the destination currency value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07707024&OS=07707024&RS=07707024
owner: Microsoft Corporation
number: 07707024
owner_city: Redmond
owner_country: US
publication_date: 20020523
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"],"p":["Embodiments of the present invention relate to the field of currency conversion. More particularly, embodiments of the invention relate to the field of converting currency values based upon semantically labeled strings.","On Jan. 2, 2002, the new European currency, the Euro, became the official currency of twelve European countries. The countries that adopted the Euro as their official currency are Austria, Belgium, Finland, France, Germany, Greece, Ireland, Italy, Luxembourg, The Netherlands, Portugal, and Spain. After Feb. 28, 2002, the national currencies of these countries were no longer accepted for transactions. With the adoption of the Euro as the official currency of most European nations, a unified economic marketplace of over 300 million people has been created. Denmark, Great Britain, and Sweden may also adopt the Euro as their official currencies sometime in the future, thereby creating an even larger unified economic marketplace.","Although the conversion from national currencies to the Euro officially occurred in 2002, many electronic documents created prior to the conversion still contain references to the former national currencies of the member countries. Therefore, when these types of documents are utilized, it may be necessary to convert referenced currency values from the expressed national currency to the Euro. For instance, a user may need to easily and quickly convert a currency value referenced in a word processing document from French Francs to Euro. A user may also need to convert a Euro currency value to one of the former national currencies. However, converting currency values between national currencies and the Euro, and vice versa, has heretofore been difficult for a user to accomplish easily and quickly.","Previously, if a user wanted to convert a currency value referenced in an electronic document, such as a word processing document, between a national European currency and Euro, or vice versa, the user would first have to copy the currency value to be converted to a clipboard. The user would then paste the value into an external program or Web site capable of converting the currency value to Euro. Once the external program or Web site had completed the conversion, the user would copy the converted currency value to the clipboard and then paste the converted value back into the electronic document. The user might also have to locate the currency symbol for the converted type of currency and insert the symbol into the document.","Although systems such as these do allow a user to convert currency values between national European currencies and Euro, these systems can be difficult to use because of the large number of steps required to complete the conversion. Moreover, these previous solutions require the user to perform the conversion using the user interface language of the conversion program or Web site. This can be extremely frustrating for an international user that does not understand the language of the conversion program or Web site.","Therefore, in light of the above, there is a need for a method, system, and apparatus for easily converting currency values between Euro and the national currencies of the member European countries that do not require the user to utilize an external application or Web site to convert currency values. Moreover, there is a need for a method, system, and apparatus for converting currency values between Euro and the national currencies of the member European countries that can present conversion options to the user in a user-selected user interface language.","Embodiments of the present invention solve the above-described problems by providing a method, system, and apparatus for easily converting currency values between different currency types that do not require the use of an external application or Web site to convert the currency values. Moreover, embodiments of the present invention provide a method, system, and apparatus for converting currency values between different currency types that can present conversion options to the user in a user-selected interface language.","According to one actual embodiment of the present invention, a method is provided for converting currency values that is utilized in a system for creating and editing an electronic document. According to this embodiment of the invention, software modules are executed in conjunction with a software application for creating and editing an electronic document that allow the convenient conversion of currency values to different currency types. When a user types a string of text, such as a paragraph into the software application, the string is analyzed to determine whether the string of text includes a currency value. For instance, a user may type the value \u201c10 F\u201d, which represents ten French Francs. If the string of text includes a currency value, the value is semantically labeled with schema information that identifies the type of currency. For instance, if a string of text includes the currency value \u201c10 F\u201d, schema information will be associated with the currency value indicating that the currency value is expressed in Francs.","Once a currency value has been identified within a string of text, such as a paragraph, the application may display an indication to the user that the currency value has been semantically labeled. This indication also identifies to the user that actions may be performed on the currency value. When a selection is received of the currency value or the indication, a list of actions may be provided to the user identifying conversion options available for the currency value. For instance, if the identified currency value includes a reference to the currency type \u201cF\u201d, for Francs, an action menu item may be displayed to the user for converting the currency value to Euro. Similarly, if the identified currency value is expressed in Euro, an action menu will be presented to the user for converting the value to one of the national European currencies. Other types of conversion options may also be presented to the user for converting the currency value.","According to one embodiment of the invention, a current user interface language setting for the application program is determined prior to providing the list of actions to the user. When the user selects the list of actions, the available actions are displayed to the user in a language specified by the current user interface language setting. In this manner, the user is always presented the conversion options in the current user interface language.","After the list of actions has been displayed to the user, a selection of one of the actions may be received. In response to receiving the selection of a conversion action, a converted currency value may be generated by converting the selected currency value to the destination currency type identified by the selected action. Once the conversion is completed, the converted currency value may be inserted into the string of text to replace the selected currency value. According to various embodiments of the present invention, a document object model supported by the application program may be utilized to insert the converted currency value into the string of text. Alternatively, the converted currency value may be displayed to the user.","According to another embodiment of the present invention, a system is provided for converting a currency value between currency types. The system provided according to this embodiment of the invention, includes a recognizer plug-in capable of receiving a portion of an electronic document as a string of text from an application program. For instance, the recognizer plug-in may receive a paragraph of text from an application program as it is typed by the user. Once the recognizer plug-in has received the string of text, the recognizer plug-in analyzes the string of text to determine whether the string of text includes a currency value. If the string, of text includes a currency value, the recognizer plug-in semantically labels the currency value with schema information identifying the type of currency used to express the currency value. This information is then passed by the recognizer plug-in back to the application program.","The system provided herein according to the various embodiments of the invention may also include an application program for creating, editing, or viewing an electronic document. For instance, the application program may comprise a word processor, a spreadsheet application program, an e-mail application which includes editing functions, a web browser application, or other types of application programs for creating, editing, and viewing electronic documents. According to this embodiment of the invention, the application program is capable of displaying the string of text along with an indication that the currency value has been semantically labeled by the recognizer plug-in. This indication may comprise a user interface object for indicating to a user that the currency value has been semantically labeled and that conversion actions may be performed on the currency value.","The application program may also be operative to receive a selection of the currency value or the indication and to provide a list of actions that may be performed on the currency value to convert the currency value to another currency type. The application may then receive the selection of one of the list of actions and provide the identity of the selection and the currency value to an action plug-in.","The system may also include an action plug-in that is capable of generating a converted currency value by converting the selected currency value to a destination currency type identified by action selected from the list of actions. The action plug-in is also operative to replace the selected currency value with the converted currency value in the destination type of currency. According to one actual embodiment of the invention, the action plug-in may replace the currency value with the converted currency value in the string of text by accessing a document object model provided by the application program. Alternatively, the converted currency value may be displayed to the user in a dialog box or window.","According to various embodiments of the present invention, the system provided herein may also include an action plug-in that is operative to register with the application program prior to performing any conversion functions. As a part of the registration procedure, the action plug-in may provide the list of actions that may be performed on the currency value to convert the currency value to another currency type. Moreover, when creating the list of actions, the action plug-in may determine a current user interface language setting for the application program and generate the action menu items in a language specified by the current user interface language setting.","Other embodiments of the present invention provide a computer-controlled apparatus and a computer-readable medium for converting currency values between currency types. These and other details regarding the various embodiments of the invention will become more apparent from the detailed description that follows.","As described briefly above, embodiments of the present invention provide a method, system, apparatus, and computer-readable medium for converting currency values between currency types. In the following detailed description, references are made to the accompanying drawings that form a part hereof, and in which are shown by way of illustration specific embodiments or examples. These embodiments may be combined, other embodiments may be utilized, and structural changes may be made without departing from the spirit and scope of the present invention. The following detailed description is, therefore, not be taken in a limiting sense, and the scope of the present invention is defined by the appended claims and their equivalents.","Referring now to the drawings, in which like numerals represent like elements through the several figures, aspects of the present invention and the illustrative operating environment will be described.  and the following discussion are intended to provide a brief, general description of a suitable computing environment in which the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer, those skilled in the art will recognize that the invention may also be implemented in combination with other program modules. Additional aspects of an illustrative operating environment and software architecture for implementing the various embodiments of the present invention are described in U.S. patent application Ser. No. 09\/588,411, entitled \u201cMethod and System for Semantically Labeling Strings and Providing Actions Based on Semantically Labeled Strings\u201d, which is expressly incorporated herein by reference.","Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including handheld devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Turning now to , an illustrative computer architecture for a personal computer  for practicing the various embodiments of the invention will be described. The computer architecture shown in  illustrates a conventional personal computer, including a central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the CPU . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer, such as during startup, is stored in the ROM . The personal computer  further includes a mass storage device  for storing an operating system , application programs, such as the application program , and data.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media provide non-volatile storage for the personal computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed by the personal computer .","By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, DVD, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer.","According to various embodiments of the invention, the personal computer  may operate in a networked environment using logical connections to remote computers through a TCP\/IP network , such as the Internet. The personal computer  may connect to the TCP\/IP network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems. The personal computer  may also include an input\/output controller  for receiving and processing input from a number of devices, including a keyboard or mouse (not shown). Similarly, an input\/output controller  may provide output to a display screen, a printer, or other type of output device.","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the personal computer , including an operating system  suitable for controlling the operation of a networked personal computer, such as the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond, Wash. The mass storage device  and RAM  may also store one or more application programs. In particular, the mass storage device  and RAM  may store an application program  for creating, editing, or viewing an electronic document . For instance, the application program  may comprise a word processing application program and the electronic document  may comprise a word processing document. The application program  may also comprise a spreadsheet application program and the electronic document  comprise a spreadsheet. Similarly, the application program  may comprise an electronic mail application program and the electronic document  may comprise an electronic mail message. Likewise, the application program  may comprise a web browser application program and the electronic document  may comprise a web page stored locally on the personal computer  or remotely on the network . Application programs for creating, editing, or viewing other types of electronic documents may also be used with the various embodiments of the present invention.","Embodiments of the present invention provide program modules for use in conjunction with the application program  that convert currency values contained within the electronic document  between currency types. In particular, embodiments of the invention provide a recognizer plug-in  and an action plug-in . As will be described in greater detail below, the recognizer plug-in  recognizes currency values contained within a portion of the electronic document  and labels the currency values with semantic information identifying their type of currency. The recognizer plug-in  then passes this information to the application program  for use by the action plug-in . The action plug-in  performs actions on the recognized currency values for converting to other types of currencies.","According to one embodiment of the invention, the action plug-in  converts currencies between the Euro and the national currencies of the European Union (\u201cEU\u201d) member countries. The fixed conversion ratios for converting between Euros and national currencies, rounding rules, and rules regarding the calculation precision utilized in the conversion process are stored in the Euro conversion rules file . These rules are defined by the European Community regulation No. 1103\/97 and are well known to those skilled in the art. As known to those skilled in the art, EC Regulation Nos. Z866\/98 and 1478\/2000 define the conversion rates.","According to various embodiments of the present invention, the action plug-in  may also generate a list of conversion actions that may be performed on a given currency value. As a part of this process, the action plug-in  may query language settings of the application program  or operating system  to identify the current language settings for the user interface language. The list of actions may then be created in the current user interface language.","According to one embodiment of the invention wherein the application program  comprises a spreadsheet application program, the action plug-in  maintains a per cell undo stack . The per cell undo stack  comprises one or more data structures that maintain a list of recently performed currency conversions. Through the use of the per cell undo stack , the action plug-in  allows a user to \u201cundo\u201d currency conversions on a per cell basis, thereby returning the contents of the cell to its state prior to the conversion. As will be described in greater detail below, the action plug-in may present a menu item to the user for performing a per cell undo operation.","According to the various embodiments of the present invention, the RAM  and the mass storage device  may also store a currency formats file  and a currency notations file . The currency formats file  and the currency notations file  store the format and notations for representing currencies in a variety of different manners. The currency formats file  and the currency notations file  are utilized by the recognizer plug-in  to recognize a wide variety of currency types and formats. Additional details regarding the contents of the currency formats file  and the currency notations file  will be described in below with reference to , respectively.","Referring now to , various aspects of the currency formats file  will be described. As discussed briefly above, the currency formats file  is utilized by the recognizer plug-in . In particular, the recognizer plug-in  utilizes the currency formats file  to recognize currencies expressed utilizing different decimal and thousands separator symbols. This is necessitated by the fact that many different countries utilize contradicting separator symbols. For example, in the United States, a comma is utilized as a grouping separator and a period is utilized as a decimal separator. However, in some European countries, a period is utilized as a grouping separator and a comma is used as a decimal separator. Therefore, if the number \u201c1,000\u201d is entered, the number would be interpreted as one-thousand in the United States and as one in Europe. In order to avoid this confusion, the currency formats file  describes each of the possible currency formats, or combinations of decimal and separator symbols, recognized by the recognizer plug-in .","Turning now to , various aspects of the currency notations file  will be described. As discussed briefly above, the currency notations file  is utilized by the recognizer plug-in . In particular, the recognizer plug-in  utilizes the currency notations file  to identify currencies expressed using a variety of different notations. For instance, the currency value for ten Finnish Markka may be expressed using the following notations: 10 mk, FIM 10, 10 markkaa, or 10 FIM. In order to account for the variations in currency notation, the currency notations file  contains a sequence of possible notations and the countries to which the notations correspond. The recognizer plug-in  uses the sequence of notations to identify currency values expressed using the notations in strings of text, or within a spreadsheet cell. It should be appreciated that the currency formats identified in the currency formats file  and the notations identified in the currency notations file  are merely illustrative and that other formats and notations may be utilized.","Referring now to , an illustrative software architecture for use in conjunction with the various embodiments of the present invention will be described. The architecture shown in  includes an application program , such as a word processor application program, a spreadsheet application program, web browser, or other type of application program for creating, editing, or viewing electronic documents. The application program  is able to communicate with a recognizer dynamically linked library (\u201cDLL\u201d)  and an action DLL . As will be described in greater detail below, the recognizer DLL  controls one or more recognizer plug-ins A-N and the action DLL  controls one or more action plug-ins A-N.","According to one embodiment of the invention, the recognizer plug-ins A-N and the action plug-ins A-N are automation servers. Automation servers are well-known software components that are assembled into programs or add functionality to existing programs running on the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond, Wash. Automation servers may be written in a variety of computing languages and can be plugged and unplugged at runtime without having to recompile the host program.","The recognizer DLL  handles the distribution of text strings from an electronic document being edited by the application program  to the individual recognizer plug-ins A-N. The recognizer plug-ins A-N recognize particular strings in an electronic document, such as a word processing document or a spreadsheet document. The recognizer plug-ins A-N may be packaged with the application program module  or they may be written by third parties to recognize particular strings of interest. Typically, the recognizer DLL  passes strings to the recognizer plug-ins A-N in single paragraphs or cell value increments. However, strings may be passed to the recognizer plug-ins A-N in other sizes and formats.","As part of recognizing certain strings as including semantic information, the recognizer plug-ins A-N determine which strings are to be labeled and how they are to be labeled. After receiving these results from the various recognizer plug-ins , the recognizer DLL  sends semantic categories to the application program module . According to one actual embodiment of the invention, a recognizer plug-in  is provided for recognizing strings as containing currency values. According to this embodiment of the invention, the semantic category comprises schema information that identifies the currency type for the currency value. The schema information may also include information identifying the language in which the string of text is expressed. This information is returned to the recognizer DLL  by the recognizer plug-in  along with other information that may be utilized by a corresponding action plug-in , such as a copy of the currency value and the source currency type. Additionally, the recognizer plug-in  may return information identifying the location of the currency value within the text string, including the length of the text string and the character location of the first letter of the currency value.","It should be appreciated that each of the recognizer plug-ins A-N are executed separately. The recognizer DLL  is responsible for handling the asynchronicity that results from different recognizer plug-ins A-N returning results at different times. In this manner, various types of data may be recognized within a text string and different actions provided for each semantically labeled string. It should also be appreciated that more than one application program  may utilize the services of the recognizer DLL  and the action DLL  concurrently. Additional details regarding the operation of the recognizer plug-in  for recognizing currency values will be described below with reference to .","After a string is labeled by a recognizer plug-in A-N, schema information is sent to the application program module . A user of the application program module  may then execute actions that are associated with the schema information on the recognized string. The action DLL  manages the action plug-ins A-N that are executed in order to perform the actions. As with the recognizer plug-ins A-N, the action plug-ins A-N may be packaged with the application program module  or written by third parties to perform particular actions that are of interest. The action plug-ins A-N provide possible actions to be presented to the user based upon the schema information, or type label, associated with the string. As will be described in greater detail below, the list of actions provided to the user is dynamically generated for each schema type. This information is then provided to the application program  which displays the list of actions to the user when the string is selected.","After an action has been chosen from the list of actions, the action DLL  manages the appropriate action plug-in A-N and passes the necessary information between the action plug-in and the application program module  so that the action plug-in may execute the desired action. Typically, the application program module  sends the action DLL  an automation request to invoke the action the user has selected. As will be described in greater detail below, according to one embodiment of the invention, an action plug-in  is provided that converts recognized currency values to other currency types. Additional details regarding the operation of the action plug-in  will be described in greater detail below with reference to .","Referring now to , an illustrative user interface provided by the various embodiments of the present invention will be described.  illustrate a user interface provided by embodiments of the invention wherein the application program  comprises a word processing application program, such as WORD, from MICROSOFT CORPORATION of Redmond, Wash. As shown in , a currency value  may be typed by a user into an application program , as a part of a string of text. Once the user has provided the string of text, the string of text is provided to a recognizer plug-in  that recognizes currency values contained within the string of text, such as the currency value . The currency value  identified by the recognizer plug-in  is identified to the application program module as a type of semantic information upon which actions may be performed. Therefore, the application program module  provides an indication to the user that actions may be performed on the currency value . This indication may be provided to the user by highlighting the currency value  or providing a user interface indication  in proximity to the currency value .","When the currency value  or the indication  is selected by a user, a list of actions is displayed that may be performed on the currency value to convert the currency value to another type of currency. This list of actions may comprise a dropdown menu  having one or more menu items corresponding to the list of actions that may be performed on the currency value . According to one embodiment of the invention, the contents of the dropdown menu  may be displayed in one of many different languages. The language in which the dropdown menu  is displayed is based on a current user interface language for the application program module  or the operating system . In this manner, international users throughout the world will be displayed a dropdown menu  in their currently installed and active user interface language. The list of actions , therefore, shown in  is displayed English. It should be appreciated, however, that the dropdown menu  would appear in another language if a language other than English was selected as the current user interface language on the personal computer .","As shown in , the dropdown menu  includes an indication of the currency value  to be converted. The dropdown menu  also includes a list of actions  that may be performed to convert the currency value  to another type of currency. According to one embodiment of the invention, the list of actions  displayed in the dropdown menu  includes actions for converting the currency value  to Euro when the currency value is expressed in any other currency other than Euro. For instance, as shown in , the selection of the recognized currency value  of \u201c195.58 DEM\u201d results in the display of a dropdown menu  including an action for converting Deutsche Mark to Euro. According to this embodiment of the invention, if the currency value  is expressed in Euro, the dropdown menu  includes actions for converting the currency value from Euro to other types of currencies. Therefore, as shown in , if a user types the currency value  of \u201c100 EUR\u201d, the dropdown menu  will include actions for converting from Euro to other currency types, such as Australian Schilling, Belgian Franc, Deutsche Mark, and others.","Once the selected conversion has been performed, the currency value  may be replaced in the string of text using a document object model provided by the application program . This process is described in greater detail below. Additionally, as will be discussed in greater detail below, the application program  receives most of the text shown in the dropdown menu  from the action plug-in . This process occurs when the application program  is initially executed and the action plug-in  registers itself with the application program . Additional details regarding this registration process will be described below with reference to .","As also shown in , the application program module  also adds menu items A and B to the dropdown menu . The selection of item A removes the semantic information from a selected string of text and the selection of item B provides a list of user selectable preferences defining the operation and behavior of the recognizer and action plug-ins.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIGS. 3C and 3D","b":"205"},"As shown in , if the entered currency value  is expressed in Euro, the dropdown menu  will include one or more actions for converting to one or more national currencies. As shown in , if the entered currency value  is expressed in any currency other than Euro, the dropdown menu  includes one action for converting the currency value  to the Euro. Once the conversion operation has been performed, the converted currency value may be inserted into the appropriate cell, or the results of the conversion may be displayed to the user in a dialog box.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIGS. 3E and 3F","FIGS. 3E and 3F","FIGS. 3E and 3F"],"b":["205","36","38","32","37"]},"Referring now to , an illustrative routine  will be described for registering the currency conversion software components with the application program . In particular, when the action plug-in  and the recognizer plug-in  for converting currency values are first executed, they are registered with the application program . By registering with the application program , the application program  is made aware of the software components and enabled for use with the schema types recognized by the recognizer plug-in . Moreover, the action items to be displayed to the user corresponding to each schema type are also enumerated to the application program  so that the application program  can display the dropdown menu  when a currency value  or indicator  is selected by a user.","The routine  begins at block , where the current user interface language is identified. As discussed briefly above, the current user interface language may be stored in language settings maintained by the operating system  or the application program . Once the current user interface language has been identified, the routine  continues to block . At block , the action item menu for converting from Euro to national currencies is generated in the current user interface language. The routine  then continues from block  to block .","At block , separate action menus are generated for converting from each national currency to Euro. It should be appreciated that the action menu items are generated on a per source currency type basis. In this manner, many separate dropdown menus  may be generated, one for each source unit name. Moreover, a separate schema name is utilized for each source currency type. Additionally, these menus are also generated in the current user interface language.","From block , the routine  continues to block , where the action menu items for each schema are returned to the application program . According to one embodiment of the invention, the application program  displays the dropdown menu  in response to the selection of a currency value  or an indicator . However, it should be appreciated that the action plug-in  or other software component may be responsible for the display of the dropdown menu . The routine  continues from block  to block , where it ends.","Turning now to , an illustrative routine  will be described for processing the input of a new string at the application program . The routine  begins at block , where the application program  receives a new string, such as when a user enters a new paragraph into an electronic document, edits a previously entered paragraph, or enters a new value into a cell in a spreadsheet. From block , the routine  continues to block  where the application program  passes the new string to the recognizer DLL . As described above, the recognizer DLL  is responsible for communicating with the application program , managing the jobs that need to be performed by the recognizer plug-ins A-N, receiving results from the recognizer plug-ins A-N, and sending schema information to the application program module  for recognized currency values and source currency types. It should be understood that, in one embodiment of the invention, a paragraph is passed to the recognizer DLL  at block . However, in alternative embodiments, a sentence, the contents of a spreadsheet cell, a section of the document, the entire document, etc., may be passed to the recognizer DLL . In other words, it should be appreciated that the embodiments of the present invention are not limited to simply passing a paragraph to the recognizer DLL .","From block , the routine  continues to block , where the recognizer DLL  passes the string to the recognizer plug-ins A-N. The routine  then continues to block  where the recognizer plug-ins are executed on the paragraph to recognize key words or characters within the string. In particular, the recognizer plug-in for converting currency values between currency types is executed on the string. An illustrative routine describing the operation of the recognizer plug-in for currency conversion is described below with reference to . At block , the results from the recognizer plug-in  are received at the recognizer DLL . The routine  then continues to block , where a determination is made by the recognizer DLL  as to whether the paragraph has been edited since the string was transmitted to the recognizer plug-ins A-N. If the paragraph has been edited, the routine  returns to block , where the edited string is passed to the recognizer DLL . If the paragraph has not been edited, the routine  continues to block , where the recognizer DLL  sends the results received from the recognizer plug-in  to the application program . The routine  then continues to block , where it ends.","Referring now to , an illustrative routine  will be described that illustrates the operation of the recognizer plug-in  for converting currency values according to one embodiment of the present invention. The routine  begins at block , where a string of text is received at the recognizer plug-in  from the recognizer DLL . The routine  then continues to block , where a determination is made as to whether the string of text contains numeric digits.","From block , the routine  continues to block , where a determination is made as to whether digits were found in the string of text. If no digits were found, the routine  branches from block  to block , where it returns to block , shown in . If, however, at block , it is determined that digits were found in the string of text, the routine  continues to block .","At block , the format of the digits is examined to determine whether the format matches one of the specified currency formats listed in the currency formats file . In particular, the arrangement of the decimal and separator characters utilized in the currency value may be examined and compared to the formats listed in the currency formats file . The routine  then continues to block .","At block , a determination is made as to whether the recognized currency value is formatted according to one of the recognized formats. If the currency value is not formatted in one of the recognized formats, the routine  branches to block , where it returns to block , shown in . If the currency value is formatted in one of the recognized formats, the routine  continues to block .","At block , a determination is made as to whether the recognized currency value is arranged according to one of the currency notations identified in the currency notations file . In particular, this process may involved scanning the text located prior to and after the digits to identify the notation. Once a notation has been identified, the source type of currency may also be identified. For instance, if the string of text includes the digits \u201c10\u201d, followed by an \u201cF\u201d, the recognizer will recognize this as one of the recognized notations for representing French francs. Schema information corresponding to the source type of currency is then associated with the recognized currency value.","If, at block , it is determined that the recognized currency value is not in one of the recognized notations, the routine  branches to block , where it returns to block , shown in . If, however, the currency value is expressed using one of the recognized notations, the routine  continues to block . At block , schema information is returned to the recognizer DLL . In particular, a schema name associated with the source currency type is returned to the recognizer DLL . Additionally, a \u201cproperty bag\u201d may also be returned to the recognizer DLL . The property bag is an object which stores information about the recognized currency value that may be utilized by the action plug-in . For instance, the property bag may include data identifying the format and notation for the currency value. Additionally, an index to the recognized currency value within the string of text may also be returned to the recognizer DLL . All of the information returned from the recognizer plug-in  to the recognizer DLL  may be subsequently passed to the action plug-in  and used in the conversion process. This is described in greater detail below with respect to . From block , the routine  continues to block , where it returns to block , shown in .","Referring now to , an illustrative routine  will be described for processing the selection of a semantically categorized currency value. As discussed above, once a currency value has been recognized within a string of text by the recognizer plug-in A, the currency value may be highlighted or an indication may be provided to the user indicating that the currency value has been recognized and that actions may be performed on the currency value. Accordingly, at block , a determination is made as to whether the currency value or indicator has been selected by a user. If the currency value has not been selected, the routine  continues to block , where it ends. If, however, the currency value or indicator has been selected, the routine  continues to block .","At block , the application program  displays the list of actions associated with the schema corresponding to the selected currency value. In this manner, the dropdown menu  described above with reference to  is presented to the user. The routine  then continues from block  to block , where a determination is made as to whether the user has selected one of the items from the list of actions. If the user has made the selection of a user interface item other than one of the items from the list of actions, the routine  branches to block , where the list of actions is removed. If, however, the user does select one of the items from the list of actions, the routine  continues to block .","At block , the application program  calls the action plug-in  corresponding to the appropriate schema type and indicates that an action item has been selected. The call from the application program  to the action plug-in  includes the schema name corresponding to the recognized currency value, the item number of the selected menu item, the name of the calling application program , a pointer into an object model provided by the application program  for accessing the document , the property bag described above with reference to , and the text of the recognized currency value. The routine  then continues to block , where the action plug-in for converting currency values is executed. An illustrative routine for executing the action plug-in  for currency conversion is described below with reference to . Once the action plug-in  has completed its execution, the routine  continues from block  to block , where it ends.","Referring now to , an illustrative routine  will be described for executing an action plug-in  for converting currency values. The routine  begins at block , where the action plug-in  receives a call from the action DLL  indicating that the user has selected an action menu item. From block , the routine  continues to block , where the action plug-in  determines the actual value of the recognized currency value in view of the format and notation that the currency value is expressed in. This is necessary because currency values expressed in different languages may include separator characters that have different meanings in different languages. For instance, a currency value may be expressed in French as \u201c1,729\u201d, while in English it would be expressed as \u201c1729.\u201d Therefore, the actual value of the currency value must be determined prior to performing the conversion operation.","From block , the routine  continues to block , where the recognized currency value is converted to the destination currency type according to the selected action menu item. In particular, the Euro conversion rules file  may be utilized to perform the actual conversion, including rounding and determining the appropriate number of significant digits.","From block , the routine  continues to block , where the converted currency value is formatted. The converted currency value may be formatted according to the regional format specified in the language settings of the application  or the operating system . Other types of formatting may also be applied to the converted currency value.","From block , the routine  continues to block  where the currency value in the string of text is replaced with the converted currency value. According to one embodiment of the present invention, the replacement is made by accessing a document object model provided by the application program . Through the document object model, the action plug-in  can directly access the document  and make changes therein. Details regarding the use of such a document object model are well known to those skilled in the art. Alternatively, the converted currency value may be displayed to the user in a dialog box or other type of user interface object. From block , the routine  continues to block , where it returns to block , described above with reference to .","Based on the foregoing, those skilled in the art should appreciate that various embodiments of the present invention provide a method, system, apparatus, and computer-readable medium for converting currency values based upon semantically labeled strings. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 3A-3F"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
