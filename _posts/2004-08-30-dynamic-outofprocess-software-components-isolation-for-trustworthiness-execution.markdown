---
title: Dynamic out-of-process software components isolation for trustworthiness execution
abstract: Preventing uncontrolled access to an execution environment of a first component object by a second component object. A system includes a memory area storing the first component object, the second component object, and one or more predefined properties associated with the second component object. The system comprises a processor configured to receive a request from the first component object stored in the memory area to create the second component object stored in the memory area. The first component object executes in a first execution environment and the request specifies a requested execution environment for the second component object. The processor is also configured for analyzing the predefined properties stored in the memory area to determine an execution environment privilege associated with the second component object. The processor is configured for granting the received request as a function of the determined execution environment privilege.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07587594&OS=07587594&RS=07587594
owner: Microsoft Corporation
number: 07587594
owner_city: Redmond
owner_country: US
publication_date: 20040830
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Embodiments of the present invention relate to the field of reliable execution of computer-executable instructions for processes in an operating system. In particular, embodiments of this invention relate to process isolation to prevent malicious and unreliable computer-executable instructions from disrupting execution of the operating system and other applications.","Component Object Model (COM) is a specification developed by Microsoft Corporation for building software components that can be assembled into programs or that add functionality to existing programs running on various software platforms. The COM specification defines a binary standard for component interoperability. That is, the COM specification does not require or depend on any particular programming language. COM also defines a component object as a piece of compiled code that provides some services to the rest of an operating system or application. By way of example, a component object may be a drag-and-drop component object that first provides a drag function responsive to an end user's selection of one or more icons moving across a display and a drop function responsive to identifying a destination on the display to handle the dragged icon(s).","Also, component objects may interact with other component objects in such a relationship as a server and a client. For example, a COM client refers to computer software that uses the services of other component objects. Consequently, a server component object refers to a component object that provides services to a COM client. In addition, there are known types of execution environments for server component objects, such as in-process, out-of-process or remote. For example, from a server component object's point of view, a server component object may execute either in-process or out-of-process in relation to a client application. An in-process component object requires the operating system to provide a pointer to communicate with the component object. For example, the operating system is required to provide resources, such as memory spaces, or the like, to execute the in-process component object. By way of example and not limitation, a server component object with dynamic-link library (DLL) capability may be considered as an in-process type of component object. On the other hand, an out-of-process type is an executable code that executes in a separate process space from that of a client application and does not share the same resources (e.g., memory space) as the client application. For example, an .EXE file may be considered an out-of-process component object. In addition, a server component object may indicate its execution environment as: in-process or out-of-process with or without preference, in-process only, or out-of-process only.","By way of illustration, a client application may be an application such as an Internet browser application that displays contents of a web page. Also, there may be a server component object that provides a function to display a multimedia file within a web page. When an end user uses the client application to visit a web page with a multimedia file, the client application requests the operating system to create a server component object to display the multimedia file in-process or out-of-process, according to the execution design and implementation of the server component object.","Unfortunately, some server component objects cannot be trusted or are unreliable. For example, non-trusted component objects (e.g., a malicious or a unreliable object) may include computer-executable instructions aimed at disrupting or interfering with the execution of the client application or operating system. Malicious computer-executable instructions or other non-trusted or unreliable component objects may require excess memory space or resources of the operating system, disable other services\/functions of the operating system (e.g., spyware, adware, or the like), corrupt legitimate computer-executable instructions, or alter access privilege rights of users. The results of such interference may include causing the client application or an application to crash and\/or suspending other operations of the operating system. In these situations, an end user is left with no recourse but to terminate the particular application or to reboot the computer.","In current COM implementations, the operating system generally allows the execution of a server component object in response to request from a client application. The operating system is unable to force a server component object to execute in an execution environment other than the execution environment in which the particular server component object has been designed to execute. This disadvantage exposes an operating system and client application to malicious computer-executable instructions or other non-trusted component objects. The operating system thus lacks the ability to prevent the malicious computer-executable instructions or non-trusted component objects from harming operation of an application or the operating system. That is, there is no mechanism to prevent malicious computer-executable instructions of a server component object from executing in-process relative to a client application.","Accordingly, improved out-of-process software components isolation for trustworthiness execution is desired to address at least one or more of these and other disadvantages by allowing the operating system and client application to decide whether a server component object should be executed in a requested execution environment.","Embodiments of the invention expand current COM frameworks and supporting services. Some embodiments allow an operating system and a client application to elect out-of-process execution for a created COM server component object relative to a client application despite the execution environment defined by a creator of the server component object. The invention extends the COM programming model and constructs to allow the operating system to force out-of-process execution for COM server component objects designed to run in-process.","Additionally, embodiments of the invention enable an operating system to execute a COM server component object in an execution environment (e.g., a target execution environment, a designated execution environment, or other determined execution environment) separate from an execution environment of a COM client application after analyzing the properties of the COM server component object. Also, the operating system isolates a COM server component object even if the COM server component object is not designed to be executed in any out-of-process execution environment separate from the client execution environment. Out-of-process execution prevents the unstable, defective, or malicious computer-executable instructions within a COM server component object from disrupting the functionality of processes of an application or of the operating system.","Advantageously, aspects of the invention prevent non-trusted component objects from using the address space of client application that invoke the non-trusted component objects. Embodiments of the present invention include a system and method for dynamically forcing a non-trusted COM component object to execute in a process or execution environment isolated from an execution environment associated with the operating system or another component object. An isolated execution environment protects resources (e.g., an address space) of a client application in the operating system by limiting access to the resources from a server component object. This invention adds an additional level of security for the operating system.","In accordance with one aspect, a method manages trust in an operating system. The method receives a request from a client application to create a server component object. The client application is executable in a client execution environment. The server component object has predefined properties associated therewith and the request specifies a requested execution environment for the server component object. The method analyzes the predefined properties associated with the server component object to determine an execution environment privilege associated with the server component object. The method grants the received request as a function of the determined execution environment privilege to execute the server component object in the determined execution environment.","In accordance with another aspect, one or more computer-readable media have computer-executable components for preventing execution of malicious computer-executable instructions in an operating system. An interface component receives a request from a client application create a server component object. The client application executes in a client execution environment. The server component object has predefined properties associated therewith. The request from the client application specifies a requested execution environment for the server component object. An access component analyzes the predefined properties associated with the server component object to determine a target execution environment for the server component object responsive to the request received by the interface component. An isolation component enables the server component object to execute in the target execution environment determined by the access component.","In accordance with yet another aspect, a system prevents uncontrolled access to an execution environment of a first component object by a second component object. The system includes a memory area and a processor. The memory area stores the first component object, the second component object, and one or more properties associated with the second component object. The processor is configured to execute computer-executable instructions for receiving a request from the first component object stored in the memory area to create the second component object stored in the memory area. The first component object executes in a first execution environment. The request specifies a requested execution environment for the second component object. The processor is also configured to execute computer-executable instructions for determining an execution environment privilege associated with the second component object by analyzing the properties stored in the memory area. The processor is further configured to execute computer-executable instructions for granting the received request as a function of the determined execution environment privilege.","Alternatively, the invention may comprise various other methods and apparatuses.","Other features will be in part apparent and in part pointed out hereinafter.","Corresponding reference characters indicate corresponding parts throughout the drawings.","Referring now to the drawings,  is a block diagram illustrating an embodiment of a system  for executing a server component object  out-of-process according to the invention. In one embodiment, the system  may be implemented in a general purpose computing device, such as a computer  depicted in , or a handheld computing device. The system  has a processor  suitable for the system  or the computer  in . The system  also has a memory area  capable of providing storage in the form of removable and\/or non-removable, volatile and\/or nonvolatile memory for storing data for processing by the processor . An example of the memory area  is the system memory  of .","The memory area  provides memory space (e.g., address space) for an operating system . The operating system  may be any software that controls the allocation and usage of hardware resources, such as the memory area , processor time of the processor , disk space, and peripheral devices, such as an input\/output device. In one embodiment, the operating system  is any operating system that adopts or incorporates the Component Object Model (COM) specification, developed by Microsoft Corporation, on various computer execution platforms. The operating system  also interacts with applications that adopt the COM implementation, such as a first application . The first application  may be any piece of software, computer-executable instructions, code, component object or the like, that provides some functions to an end user and\/or the operating system . In one embodiment, the first application  operates in the operating system  and uses resources provided by the operating system . In another embodiment, the first application  is an Internet browser that enables the end user to browse web pages on the Internet. As an illustration, the first application  is also known as a host application.","The first application  includes any application that implements the COM standard and permits interactions between component objects of the first application  and other component objects from another application, computer-executable instructions, code, or the like. These other component objects provide additional and\/or enhanced functionalities to the existing component objects of the first application . In one embodiment, the first application  has one or more component objects providing one or more functions to the first application . In another embodiment, a second component object  may be any component object that provides additional functions to the first application . In another embodiment, the second component object  may be an instance of a COM server.","Initially, the first application  may be executed or is designed for execution in a first execution environment  provided by the operating system . In one embodiment, the first execution environment  may include address space, pointer assignments, memory storage areas, and\/or other parameters that are necessary for the execution of the first application . In another embodiment, the first execution environment  may be a process or program for the execution of the first application . In yet another embodiment, the first application  may be a client application, a host component object or a host application. Referring to , the first application  (e.g., a client application) executes in the first execution environment  (e.g., a client execution environment) at .","Next, the first application  interacts with a second component object . In one embodiment, such interaction may be that the second component object  provides one or more functions to the first application . By way of example and not limitation, the first application  may be a client application and the second component object  may be a server component object in the sense that the second component object  provides some services to the first application . The second component object  includes predefined properties  containing information, such as information defining a manufacturer associated with the first application or the second component object, information defining a network address associated with the second component object, information defining privileges associated with the first application or the second component object, information identifying whether the second component object is associated with an operating system, information identifying a product associated with the first application or the second component object, date information, and user information associated with the first application or the second component object. The operating system  analyzes one or more of these predefined properties  of the second component objects , which will be described in further detail in .","In one embodiment, the second component object  is designed and\/or defined to execute in a designed execution environment (e.g., in-process or out-of-process). The first application  includes such information in its request to the operating system  when creating the second component object in the operating system .","Initially, the first application  requests the operating system  to create a second component object \u2032 with its associated properties \u2032 for execution in a requested execution environment . By way of example and not limitation, the second component object \u2032 (as shown by the hashed line) may be executed in the requested execution environment  (e.g., sharing resources with the first application  in the first execution environment ) under the current COM specification. Upon receiving a request from the first application , the operating system  may invoke the second component object \u2032 by assigning appropriate memory space, address space, and\/or other resources in the memory area  to prepare for the execution of the second component object \u2032. In one embodiment, when the operating system  receives the request from the first application , the requested execution environment  is an execution environment defined by programmers who designed the second component object .","In contrast, as a result of analyzing the properties  and applying additional restrictions (to be discussed in detail in ), the operating system  may execute the second component object  in a designated execution environment  separate from the requested execution environment . In another embodiment, the operating system  may isolate the second component object  in the designated execution environment  using a memory area \u2032 even if the second component object  is not designed to be executed in the designated execution environment .","Referring to , a flow chart illustrates an exemplary process flow for protecting an operating system  from malicious computer-executable instructions according to an embodiment of the invention. A client application such as the first application  in  executes at  in a client execution environment such as the first execution environment  in . An interface component of the operating system  receives a request from the client application to create at  a server component object such as the second component object  in . At , an access component of the operating system  analyzes the predefined properties \u2032 associated with the server component object to determine an execution environment privilege associated with the server component object. By way of example and not limitations, the access component of the operating system  determines whether to execute the server component object in an execution environment requested by the server component object such as the requested execution environment  in  or in an execution environment different from the requested execution environment (e.g., the designated execution environment  in ). Such determination will be described in further detail in .","At , in analyzing the predefined properties, the access component determines whether to grant the received request from the client application. If the access component grants the request, an isolation component of the operating system  executes the server component object in the requested execution environment. If the access component denies the received request at , the isolation component executes the server component object in an execution environment different from the requested execution environment at . If the server component object cannot be executed out-of-process (e.g., without crashing), the isolation component executes the server component object in a surrogate execution environment which emulates, to the server component object, the in-process execution environment.","In one embodiment, the isolation component may apply additional restrictions to the execution environment of the server component object. Such additional restrictions may include applying a security context of an end user, (e.g., whether an administrator, User A, or User B, is permitted to execute the second component object \u2032 in the requested execution environment ), the ability to disable certain services (e.g., spyware) per process, limiting memory usage in the memory area , and applying communication restrictions between component objects executing in the same process (e.g., two objects from different web sites spawned from the same Internet browser process).","Executing the server component object in an execution environment different from the requested execution environment at  prevents possibly malicious or non-trusted computer-executable instructions in the server component object from executing in the requested execution environment. The possibly malicious computer-executable instructions may attempt to share process spaces and\/or resources in the client execution environment and, as a result of this sharing, the server component object may hinder\/interfere with the execution of the client application and\/or the operating system . By executing the server component object in the execution environment different from the requested execution environment, the operating system  isolates the server component object. The server component object may not override the result of the invention method. That is, the server component object may not reject the decision at .","Referring next to , a flow chart illustrates an exemplary process flow for determining an execution environment privilege associated with a server component object such as the second component object  in  by analyzing predefined properties of the server component object according to an embodiment of the invention. In particular,  illustrates analysis of the predefined properties of the server component object at  in  in further detail.","At , the operating system  determines whether the requested execution environment specifies an in-process execution environment. A server component object may be capable of executing in either an in-process or an out-of-process execution environment. If the in-process execution environment is specified, the operating system  analyzes other predefined properties of the server component object at  to determine whether to grant the request. For example, the operating system  may analyze whether the requested execution environment includes protected aspects of the operating system. If the in-process execution environment is not specified, then the operating system  prepares to deny the request at  by, for example, marking or tagging the server component object for execution in an execution environment different from the in-process execution environment.","Hence, by analyzing the predefined properties associated with the server component object at  and as illustrated in , the invention enables and\/or assists the operating system  in isolating the server component object from executing in the client execution environment. For example, once the operating system  determines that a server component object is privileged or trusted to be executed in a client execution environment, the operating system  grants such a request.","In one embodiment, the invention allows the client application to invoke in-process server component objects that are not related to an operating system. For such server component object, some or all methods of the invention may be performed. For example, such server component object may be allowed to execute in-process unhindered.","The present invention expands current COM implementations by implementing a client extensible model that embodies at least some of the features of the invention. In operation, a client application may be an Internet browser having one or more functions executing in a client execution environment. Initially, when an end user uses the client application to browse web pages on the Internet, the client application uses resources from the operating system in displaying contents of a web page. When the end user browses to a web page that contains a multimedia file, the web page or the multimedia file may contain a second component object for displaying the multimedia file in the client application. The second component object may be designed to execute in-process, as defined by programmers of the second component object.","The client application interacts with the second component object when the end user visits a web page with a multimedia file. The client application requests the operating system to create the second component object so the end user may view the contents of the multimedia file. The operating system analyzes the request and the second component object to determine whether to grant or deny the request. In particular, the operating system determines whether the request is for an in-process execution environment. If the request indicates an out-of-process execution environment rather than an in-process execution environment, the operating system grants the request and executes the second component object out-of-process. If the request specifies an in-process execution environment, the operating system analyzes predefined properties of the second component object, such as information defining a network address of the second component object, and\/or other information. Based on these properties, the operating system determines whether to grant the request from the client application to execute the second component object in the client execution environment (e.g., in-process).","If the request specifies in-process execution and the operating system denies the request based on the analyzed properties, the operating system executes the second component object in an execution environment (e.g., out-of-process) different from the requested execution environment. That is, the second component object does not share the resources with the client application in the client execution environment. In so doing, the operating system isolates the second component object in a separate process. The end user is still able to view the contents of the multimedia file when the operating system isolates the second component object, but if there is a piece of malicious computer-executable instructions in the second component object, the execution in the separate process does not interfere with the execution of the client application or the operating system. In turn, the client application does not share resources with the second component object in its client execution environment and therefore reduces the chance of being crashed by the malicious computer-executable instructions of the second component object.","In some embodiments, the second component object designed for in-process execution may not be capable of out-of-process execution. For such component objects, the operating system creates a surrogate execution environment separate from the in-process execution environment in which to execute the second component object. To the second component object, the surrogate execution environment appears to be the in-process environment. For example, the end user is able to view the contents of the multimedia.","If the request specifies in-process execution and the operating system grants the request, the operating system executes the second component object in the client execution environment (e.g., in-process). That is, the second component object shares the resources of the client application in the client execution environment.","The operating system may also apply additional restrictions such as administrator access privilege and\/or at least other restrictions to the execution environment of the second component object.","Referring to , it shows one example of a general purpose computing device in the form of a computer . In one embodiment of the invention, a computer such as the computer  is suitable for use in the other figures illustrated and described herein. Computer  has one or more processors or processing units  and a system memory . In the illustrated embodiment, a system bus  couples various system components including the system memory  to the processors . The bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically has at least some form of computer readable media. Computer readable media, which include both volatile and nonvolatile media, removable and non-removable media, may be any available medium that may be accessed by computer . By way of example and not limitation, computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. For example, computer storage media include RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal, which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media, such as a wired network or direct-wired connection, and wireless media, such as acoustic, RF, infrared, and other wireless media, are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.","The system memory  includes computer storage media in the form of removable and\/or non-removable, volatile and\/or nonvolatile memory. In the illustrated embodiment, system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. For example,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media.  also shows a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that may be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a non-volatile memory interface, such as interface .","The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components may either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into computer  through input devices or user interface selection devices such as a keyboard  and a pointing device  (e.g., a mouse, trackball, pen, or touch pad). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to processing unit  through a user input interface  that is coupled to system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a Universal Serial Bus (USB). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video interface . In addition to the monitor , computers often include other peripheral output devices (not shown) such as a printer and speakers, which may be connected through an output peripheral interface (not shown).","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. LAN  and\/or WAN  may be a wired network, a wireless network, a combination thereof, and so on. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and global computer networks (e.g., the Internet).","When used in a local area networking environment, computer  is connected to the LAN  through a network interface or adapter . When used in a wide area networking environment, computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device (not shown). By way of example, and not limitation,  illustrates remote application programs  as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Generally, the data processors of computer  are programmed by means of instructions stored at different times in the various computer-readable storage media of the computer. Programs and operating systems are typically distributed, for example, on floppy disks or CD-ROMs. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. The invention described herein includes these and other various types of computer-readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.","For purposes of illustration, programs and other executable program components, such as the operating system, are illustrated herein as discrete blocks. It is recognized, however, that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Although described in connection with an exemplary computing system environment, including computer , the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover, the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, mobile telephones, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","An interface in the context of a software architecture includes a software module, component, code portion, or other sequence of computer-executable instructions. The interface includes, for example, a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include, in one example, application programming interfaces (APIs) such as provided by operating systems, component object model (COM) interfaces (e.g., for peer-to-peer application communication), and extensible markup language metadata interchange format (XMI) interfaces (e.g., for communication between web services).","The interface may be a tightly coupled, synchronous implementation such as in Java 2 Platform Enterprise Edition (32EE), COM, or distributed COM (DCOM) examples. Alternatively or in addition, the interface may be a loosely coupled, asynchronous implementation such as in a web service (e.g., using the simple object access protocol). In general, the interface includes any combination of the following characteristics: tightly coupled, loosely coupled, synchronous, and asynchronous. Further, the interface may conform to a standard protocol, a proprietary protocol, or any combination of standard and proprietary protocols.","The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further, the interfaces may include additional or less functionality than illustrated or described herein.","The order of execution or performance of the methods illustrated and described herein is not essential, unless otherwise specified. That is, elements of the methods may be performed in any order, unless otherwise specified, and that the methods may include more or less elements than those disclosed herein. For example, it is contemplated that executing or performing a particular element before, contemporaneously with, or after another element is within the scope of the invention.","When introducing elements of the present invention or the embodiment(s) thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","In view of the above, it will be seen that the several objects of the invention are achieved and other advantageous results attained.","As various changes could be made in the above constructions, products and methods without departing from the scope of the invention, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
