---
title: Method, apparatus and system for a mobile web client
abstract: A method, system and apparatus for a mobile web client is presented. In one embodiment, the invention is a method of operating a web application. The method includes receiving a request from a client. The method further includes processing the request with a web emulator. The method also includes servicing the request from available data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07962565&OS=07962565&RS=07962565
owner: Siebel Systems, Inc.
number: 07962565
owner_city: San Mateo
owner_country: US
publication_date: 20020924
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF DOMESTIC PRIORITY","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION","System Overview and Overall Architecture","System Framework or Infrastructure","Remote Procedure Call (RPC)","Notifications","General Communication Processes","Alternate Client-Server Embodiments"],"p":["This application claims priority to a previously filed provisional application having serial No. 60\/326,741, entitled \u201cMETHOD, APPARATUS AND SYSTEM FOR A MOBILE WEB CLIENT\u201d and filed on Sep. 29, 2001.","1. Field of the Invention","The present invention relates generally to the field of data processing. More specifically, the present invention relates to a method, apparatus, and system for a mobile web client.","2. Description of the Related Art","As technology continues to advance and the business environments have become increasingly complex and diverse, more and more companies have relied on various customer relationship management (CRM) software and eBusiness applications to conduct and manage various aspects of their enterprise business. In general, eBusiness applications are designed to enable a company or enterprise to conduct its business over an interactive network (e.g., Internet, Intranet, Extranet, etc.) with its customers, partners, suppliers, distributors, employees, etc. eBusiness applications may include core business processes, supply chain, back-office operations, and CRM functions. CRM generally includes various aspects of interaction a company has with its customers, relating to sales and\/or services. At a high level, customer relationship management is focused on understanding the customer's needs and leveraging this knowledge to increase sales and improve service. CRM application and software is generally designed to provide effective and efficient interactions between sales and service, and unify a company's activities around the customer in order to increase customer share and customer retention through customer satisfaction.","Typically, CRM implementation strategy needs to consider the following:","Knowledge Management: one of the important factors of an effective CRM implementation is the acquisition of information about a customer, its analysis, sharing and tracking. Also integral to the use of knowledge for competitive advantage is for employees to know what actions to take as a result of this knowledge.","Database Consolidation: another important aspect of an effective and efficient CRM solution is the consolidation of customer information in a single database and the re-engineering of business processes around the customer. The goal here is to have all interactions with a customer recorded in one place to drive production, marketing, sales and customer support activities.","Integration of Channels and Systems: it is very important for a CRM application\/software to provide the capability to respond to customers in a consistent and high-quality manner through their channel of choice, whether that is the e-mail, the phone, web-based user interfaces, etc. This may require the seamless integration of various communication channels with the customer or enterprise database. It also may require the integration of CRM with other parts of a company's business systems and applications.","Technology and Infrastructure: to enhance customer services, a CRM application\/software may include various tools to automate and streamline online customer service. For example, a self-help model typically can be implemented using a combination of tools (e.g. knowledge bases with an intuitive search capability, agent technology or automated email, etc.).","Generally, eBusiness applications are designed to allow organizations to create a single source of customer information that makes it easier to sell to, market to, and service customers across multiple channels, including the Web, call centers, field, resellers, retail, and dealer networks. Advanced eBusiness applications are typically built on a component-based architecture and are designed to be Web-based and to deliver support for various types of clients on multiple computing platforms including mobile clients, connected clients, thin clients, and handheld clients, etc.","With the recent proliferation of the Web, it is desirable to provide the functionalities of the eBusiness applications in a Web-based environment. Furthermore, it is desirable for the eBusiness applications operating in a Web-based environment to retain the look-and-feel of desktop-based eBusiness applications with which the users are already familiar.","With the advent of web applications, dependency on availability of a network such as an internet or the world wide web for operation of such applications also arrived. However, it will be appreciated that a robust solution for working both in a networked environment or situation and a corresponding non-networked environment or situation may be useful to mobile users of a web application. Such a web application is not immediately available.","A method, apparatus and system for a mobile web client is described. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent, however, to one skilled in the art that the invention can be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to avoid obscuring the invention.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments.","In one embodiment, a system in which the teachings of the present invention are implemented can be logically structured as a multi-layered architecture as shown in . In one embodiment, the logical multi-layered architecture as shown in  provides a platform for common services to support the various applications. These services may include a user interface layer , an object manager layer , a data manager layer , and a data exchange layer .","In one embodiment, the user Interface layer  may provide the applets, views, charts and reports, etc. associated with one or more applications. In one embodiment, various types of clients can be supported via the user interface layer . These various types of clients may include traditional connected clients, remote clients, thin clients over an intranet, Java thin clients or non-Windows-based operating systems, and HTML clients over the Internet, etc.","In one embodiment, the object manager layer  is designed to manage one or more sets of business rules or business concepts associated with one or more applications and to provide the interface between the user interface layer  and the data manager layer . In one embodiment, the business rules or concepts can be represented as business objects. In one embodiment, the business objects may be designed as configurable software representations of the various business rules or concepts such as accounts, contacts, opportunities, service requests, solutions, etc.","In one embodiment, the data manager layer  is designed to maintain logical views of the underlying data and to allow the object manager to function independently of underlying data structures or tables in which data are stored. In one embodiment, the data manager  may also provide certain database query functions such as generation of structure query language (SQL) in real time to access the data. In one embodiment, the data manager  is designed to operate on object definitions in a repository file  that define the database schema. In one embodiment, the data storage services  provide the data storage for the data model associated with one or more applications.","In one embodiment, the data exchange layer is designed to handle the interactions with one or more specific target databases and provide the interface between the data manager layer  and the underlying data sources.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 2"},"In one embodiment, the multi-layered architecture allows one or more software layers to reside on different machines. For example, in one embodiment, the user interface, the object manager, and the data manager can all reside on the dedicated web clients. For other types of clients such as the wireless clients, in one embodiment, the object manager and data manager can reside on a system server. It should be appreciated and understood by one skilled in the art that the system configuration shown in  is for illustrative and explanative purposes and may vary depending upon the particular implementations and applications of the teachings of the present invention.","In one embodiment, the system environment illustrated in  may include more than one database . One or more subsets of the database  can be created or replicated by a replication manager. In addition, mobile web clients can have additional remote databases (also called local databases). In one embodiment, unless the remote or local databases associated with the mobile web clients are defined as read-only databases, these mobile web clients can create and update data locally that will be ultimately propagated up to the primary database when each mobile web client synchronizes with the system server.","In one embodiment, the database  is designed to store various types of data including predefined data schema (e.g., table objects, index objects, etc.), repository objects (e.g., business objects and components, view definitions and visibility rules, etc.), and user's or customer's data. In one embodiment, dedicated web clients and server components, including those that operate in conjunction with the other types of clients, can connect directly to the database  and make changes in real time. In one embodiment, mobile web clients can download a subset of the server's data to use locally, and periodically synchronize with the server database through the system server to update both the local and the server database.","In one embodiment, various tables included in the database  may be logically organized into the following types: data tables, interface tables, and repository tables, etc.","In one embodiment, data tables may be used to store user business data, administrative data, seed data, and transaction data, etc. In one embodiment, these data tables may be populated and updated through the various applications and processes. In one embodiment, data tables may include the base tables and the intersection tables, etc. In one embodiment, base tables may contain columns that are defined and used by the various applications. In one embodiment, the base tables are designed to provide the columns for a business component specified in the table property of that business component. In one embodiment, intersection tables are tables that are used to implement a many-to-many relationship between two business components. They may also hold intersection data columns, which store information pertaining to each association. In one embodiment, intersection tables provide the data structures for association applets.","In one embodiment, interface tables are used to denormalize a group of base tables into a single table that external programs can interface to. In one embodiment, they may be used as a staging area for exporting and importing of data.","In one embodiment, repository tables contain the object definitions that specify one or more applications regarding:\n\n","In one embodiment, the file system  is a network-accessible directory that can be located on an application server. In one embodiment, the file system  stores the physical files created by various applications, such as files created by third-party text editors, and other data that is not stored in the database . In one embodiment, physical files stored in the file system  can be compressed and stored under various naming conventions. In one embodiment, dedicated web clients can read and write files directly to and from the file system . In one embodiment, mobile web clients can have a local file system, which they synchronize with the server-based file system  periodically. In one embodiment, other types of client such as the wireless clients and the web clients can access the file system  via the system server.","In one embodiment, the enterprise server  is a logical grouping of the system servers  that share a common table owner or a database, point to a common gateway Server, and can be administered as a group using server manager . In one embodiment, the connection to the gateway server can be established via TCP\/IP. In one embodiment, the enterprise server  can be scaled effectively by deploying multiple system servers  in the enterprise server , thus providing a high degree of scalability in the middle tier of applications.","In one embodiment, the server  runs one or multiple server programs. It handles the incoming processing requests and monitors the state of all processes on the server. In one embodiment, server programs are designed and configured to perform one or more specific functions or jobs including importing and exporting data, configuring the database, executing workflow and process automation, processing to support mobile web clients for data synchronization and replication, and enforcing business rules, etc. In one embodiment, the server  can be an NT Service (under Windows NT operating system) or a daemon (e.g., a background shell process) under UNIX operating system. In one embodiment, the server  supports both multi-process and multi-threaded components and can operate components in batch, service, and interactive modes.","In one embodiment, the server manager  is configured as a utility that allows common control, administration and monitoring across disparate programs for the servers  and the enterprise server . In one embodiment, the server manager  can be used to perform the following tasks: start, stop, pause, and resume servers , components, and tasks; monitor status and collect statistics for multiple tasks, components, and servers within an enterprise server; and configure the enterprise server, individual servers individual components, and tasks, etc.","In one embodiment, the gateway server can be configured as a logical entity that serves as a single entry point for accessing servers. In one embodiment, it can be used to provide enhanced scalability, load balancing and high availability across the enterprise server. In one embodiment, the gateway server may include a name server and a connection brokering component. In one embodiment, the name server is configured to keep track of the parameters associated with the servers. For example, the availability and connectivity information associated with the servers can be stored in the name server. The various components in the system can query the name server for various information regarding the servers' availability and connectivity. In a Windows NT environment, the name server can be run as a NT service. In a UNIX environment, the name server can run as a daemon process. In one embodiment, the connection brokering component is used to perform load balancing function such as directing client connection requests to an appropriate server (e.g., the least-busy server).","In one embodiment, as illustrated in , the various types of clients that can be supported by the system may include the following clients: dedicated web clients, mobile web clients, web clients, wireless clients, and handheld clients, etc.","In one embodiment, dedicated web clients (also called connected clients) are connected directly to a database server for data access via a LAN or WAN connection. In one embodiment, these connected or dedicated web clients do not store data locally. These dedicated web clients can also access the file system directly. In one embodiment, the user interface, the object manager, and the data manager layers of the multi-layered architecture reside on the dedicated web client.","In one embodiment, the mobile web clients are designed and configured for local data access and thus can have their own local database and\/or local file system. In one embodiment, mobile web clients can interact with other components within the system via the gateway server. Through synchronization, the modifications from the local database and the server database can be exchanged. Mobile web clients are described in more detail below.","In one embodiment, a web client runs in a standard browser format from the client's machine. In one embodiment, the web client can connect to a system server  through a web server. In one embodiment, the system server  is designed and configured to execute business logic and access data from the database  and file system . In one embodiment, the web client described herein is designed and configured in accordance with the teachings of the present invention to operate in an interactive mode. In one embodiment, the interactive web client framework as described herein utilizes dynamically created objects implemented in JavaScript on the browser side that correspond to objects on the server side. In one embodiment, these dynamically created objects on the browser side may include the current view and its corresponding applets, the current business object and the corresponding business components, etc. The web client is described in more details below.","In one embodiment, wireless clients are essentially thin clients enabled on wireless devices. The wireless clients can use a wireless application protocol (WAP)-based user interface to communicate and exchange information\/data with the system server.","The system configuration illustrated in  is described in more details below with references to various structures, databases, tables, file systems, etc. as illustrating examples.",{"@attributes":{"id":"p-0069","num":"0071"},"figref":["FIG. 3","FIG. 3"],"b":["315","310","325","320","330","345","340"]},"In one embodiment, the presentation services  may be designed and configured to support various types of clients and may provide them with user interface applets, views, charts, and reports, etc. As described above, a large variety of clients may be supported including wireless clients, handheld clients, web clients, mobile web clients, and dedicated (connected) clients, etc.","In one embodiment, the application services  may include business logic services and database interaction services. In one embodiment, business logic services provide the class and behaviors of business objects and business components. In one embodiment, database interaction services may be designed and configured to take the user interface (UI) request for data from a business component and generate the database commands (e.g.SQL queries, etc.) necessary to satisfy the request. For example, the data interaction services may be used to translate a call for data into DBMS-specific SQL statements.","In one embodiment, data storage services  may be designed and configured to provide the data storage for the underlying data model which serves as the basis of the various applications. For example, the data model may be designed and configured to support various software products and applications including call center, sales, services, and marketing, etc., as well as various industry vertical products and applications such as eFinance, eInsurance, eCommunications, and eHealthcare, etc.",{"@attributes":{"id":"p-0073","num":"0075"},"figref":["FIG. 4","FIG. 4"]},"In one embodiment, the core services are designed and configured to provide the framework in which the applications execute. In one embodiment, the core services may include the following:\n\n","In one embodiment, application integration services may be designed and configured to allow the various applications built in accordance with this framework to communicate with the external world. In one embodiment, the various types of services in this logical grouping may be designed and configured to provide for real-time, near-real-time, and batch integration with external applications. For example, these integration services may be used to enable communications between external applications and the internal applications using available methods, technologies, and software products. In one embodiment, application integration services allow the systems or applications to share and replicate data with other external enterprise applications. Accordingly, these services allow a particular application or system to be both a client requesting information, and a server having information requested from it.","In one embodiment, business processes services are designed and configured to allow the client to automate business processes through the application. In one embodiment, these various business process services may include the following:\n\n","In one embodiment, creation of these business processes can be done through Run-Time tools such as Personalization Designer, Workflow Designer, SmartScript Designer, Assignment Administration Views, and the Model Builder, etc.","In one embodiment, integration services may be designed and configured to provide the client with user interface and thin client support. In one embodiment, these may include capabilities for building and maintaining web-based applications, providing web support facilities such as user Profile Management, Collaboration Services and Email and Fax services, as well as advanced Smart Scripting, etc.","In one embodiment, design time tools may be designed and configured to provide the services to customize, design, provide integration points, and maintain the application. These various tools provide one common place to define the application.","In one embodiment, admin services are designed and configured provide one place to monitor and administer the application environment. In one embodiment, these services allow the user to administer the application either through a graphic user interface (GUI) or from a command line, etc.",{"@attributes":{"id":"p-0081","num":"0091"},"figref":["FIG. 5A","FIG. 2","FIG. 5B","FIG. 5A"],"b":["500","205","210","500"]},"The framework or infrastructure  can support the interactive web client  (shown in ) and the mobile web client  (also shown in ), and is capable of meeting certain criteria, such as increasing the interactivity and performance of the web client and the mobile web client, and reducing the number of page refreshes for common actions.","The framework or infrastructure  can include objects  that can be dynamically created on the browser to mimic corresponding objects  managed by the object-manager. In one embodiment, the objects  managed by the object manager (OM) can be built using a programming language, such as C+++, supporting the object-oriented paradigm.","As shown in , exemplary objects  managed by the OM can include an object  representing a view, CSSWEView . A view is generally a display panel consisting of a particular arrangement of applets. In one embodiment, one active view can be displayed at any given time. Another exemplary object managed by the OM can be an object  representing an applet, CSSWEApplet . An applet is generally a visual application unit that appears on the screen as part of a view. Other exemplary objects managed by the OM can include an object  representing a business component (CSSBusComp ), an object  representing a business object (CSSBusObj ), and an object  representing a frame (CSSWEFrame ). In one embodiment, the business object may be designed as configurable software representations of the various business rules or concepts such as accounts, contacts, opportunities, service requests, solutions, etc. In this embodiment, the business components typically provide a layer of wrapping over tables, and the applets reference business components rather than the underlying tables. In addition, a frame is generally a sub-component of a view and may comprise of one or more applets.","In one embodiment, objects  on the browser can be built using JavaScript. As shown in , exemplary objects  on the browser side may include JSSBusObj , JSSBusComp , JSSView , and JSSApplet  to respectively mirror CSSBusObj , CSSBusComp , CSSWEView , and CSSWEApplet , which are objects  managed by the OM.","Objects  on the browser and objects  managed by the OM can be configured to reside and operate on one computing device or multiple computing devices.  illustrates an exemplary configuration  in which objects  on the browser and objects  managed by the OM reside and operate on multiple computing devices ,, including a client  and a server .  illustrates an exemplary configuration  in which objects  on the browser and objects  managed by the OM reside and operate on one computing device .","Returning to , objects  on the browser are generally synchronized with corresponding or mirrored objects  managed by the OM. Synchronization can be accomplished through a remote procedure call (RPC) mechanism  and a notification mechanism . The RPC mechanism  and the notification mechanism  will be described below in more details.","Of the objects  on the browser, the JSSApplication object  typically exists throughout a user-session. The JSSApplication object  should be initially loaded initially when the user starts an application. An application would generally be started when the user invokes a subset of the application from an icon on the desktop or from the Start menu. The JSSApplication object  generally performs a role similar to that of the CSSModel object . The CSSModel object  is generally a global session object that provides access to repository objects that are in use, the current business object instance in memory, the relationships between the current business object and the business components contained in it, and the user's global state information. The CSSModel object  generally accesses a repository  to obtain needed information. The repository  is generally a set of object definitions used to define an application or a suite of applications. However, the JSSApplication object  is generally scaled down to track one view, applets associated to the tracked view, one business object, and the business components that are in use in the view.","Unlike the JSSApplication object , the JSSView object , the JSSApplet object , the JSSBusObj object  and the JSSBusComp object  are typically temporary or impermanent entities, and are generally replaced when a page refresh occurs. For example, a request to navigate to a new view may cause a new set of JSSView , JSSApplet , JSSBusObj , and JSSBusComp  objects to be created to run on the browser.","Accordingly, objects  on the browser can be generally described as lightweight representations of mirrored or corresponding objects  managed by the OM. Each object  on the browser would typically include a subset of the functionalities included in corresponding objects  managed by the OM. For example, the JSSView object , similar to a CSSView object , generally represents a collection of applets. The JSSBusObj object , similar to a CSSBusObj object , generally manages the various one-to-many relationships between active business components so that correct relationships are employed when these active business components are populated via queries. The JSSBusObj object  generally exists on the browser for the life of the current view, and should be kept in sync with the corresponding CSSBusObj object .","In one embodiment, when the browser submits a request to navigate to a new view to the web engine , the web engine  would send a response containing the view layout that is devoid of data. Then the web engine  would send a response containing a string of data to populate the view.","The JSSApplication object  generally manages communications flowing into and out from objects on the browser. In one embodiment, a method invoked on an object on the browser would typically be directed to the JSSApplication object  if the invoked method should be retargeted to an object  managed by the OM. The JSSApplication object  would generally use the RPC mechanism  to route the invoked method through the web engine  to the appropriate object  managed by the OM. The web engine  would typically be employed to send return notifications and data from objects  managed by the OM to objects  on the browser. The web engine  would generally use the notification mechanism  to route notifications and data through the JSSApplication object  to objects  on the browser.","The browser objects  generally use the remote procedure calls  to invoke methods on the objects  managed by the OM. These remote procedure calls  are generally packaged as HTTP requests. Responses from the objects  managed by the OM are packaged as HTTP responses containing notifications and associated status information and data. In one embodiment, remote procedure calls are made with blocking enabled to ensure synchronization between the objects  on the browser and the objects  managed by the OM. With blocking enabled, control would typically not be passed back to the calling code until the called remote procedure finishes executing.","The RPC model generally uses the same procedural abstraction as a conventional program, but allows a procedure call to span the boundary between two computers.  illustrates an example of how the RPC paradigm can be used to divide a program  into pieces that can be executed on separate computing devices ,. This figure generally shows a distributed program having multiple procedures. Main( )706, proc1( )708, proc2( )710, proc3( )712, proc5( )714, proc6( )716, and proc7( )718 reside and operate in the first computing device or the client ; and proc4( )720 and proc8( )722 reside and operate in the second computing device or the server . A solid line  from procedure n to procedure m denotes a call from n to m. A dashed line  shows how control passes from one computing device to another computing device during a remote procedure call.",{"@attributes":{"id":"p-0095","num":"0105"},"figref":"FIG. 8","b":["800","724","726"]},"As such, a remote procedure call generally executes a procedure located in a separate address space from the calling code. The RPC model is generally derived from the programming model of local procedure calls and takes advantage of the fact that every procedure contains a procedure declaration. The procedure declaration defines the interface between the calling code and the called procedure. The procedure declaration defines the call syntax and parameters of the procedure. Calls to a procedure should typically conform to the procedure declaration.","Applications that use remote procedure calls look and behave much like local applications. However, an RPC application is divided into two parts: a server, which offers one or more sets of remote procedures, and a client, which makes remote procedure calls to RPC servers. A server and its client(s) generally reside on separate systems and communicate over a network. RPC applications depend on the RPC runtime library to control network communications for them. The RPC runtime library generally supports additional tasks, such as finding servers for clients and managing servers.","A distributed application generally uses dispersed computing resources such as central processing units (CPU), databases, devices, and services. The following applications are illustrative examples of distributed applications:","A calendar-management application that allows authorized users to access the personal calendars of other users;","A graphics application that processes data on CPUs and displays the results on workstations; and","A manufacturing application that shares information about assembly components among design, inventory, scheduling, and accounting programs located on different computers.","RPC software should generally meets the basic requirements of a distributed application including:\n\n","Distributed applications include tasks such as managing communications, finding servers, providing security, and so forth. A standalone distributed application needs to perform all of these tasks itself. Without a convenient mechanism for these distributed computing tasks, writing distributed applications is difficult, expensive, and error-prone.","RPC software typically provides the code, called RPC stubs, and the RPC runtime library that performs distributed computing tasks for applications. The RPC stubs and the RPC runtime library should be linked with client and server application code to form an RPC application.","Table 1 generally shows the basic tasks for the client and server of a distributed application. Calling the procedure and executing the remote procedure, shown in italicized text, are performed by the application code Oust as in a local application) but here they are in the client and server address spaces. As for the other tasks, some are performed automatically by the stubs and RPC runtime library, while others are performed by the RPC runtime library via API calls in the application code.",{"@attributes":{"id":"p-0106","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Basic Tasks of an RPC Application"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Client Tasks","Server Tasks"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"1.","Select network protocols"]},{"entry":[{},{},"2.","Register RPC interfaces"]},{"entry":[{},{},"3.","Register endpoints in"]},{"entry":[{},{},{},"endpoint map"]},{"entry":[{},{},"4.","Advertise RPC interfaces"]},{"entry":[{},{},{},"and objects in"]},{"entry":[{},{},{},"the namespace"]},{"entry":[{},{},"5.","Listen for calls"]},{"entry":["6.","Find compatible servers"]},{"entry":[{},"that offer"]},{"entry":[{},"the procedures"]},{"entry":["7.","Call the remote procedure"]},{"entry":["8.","Establish a binding with"]},{"entry":[{},"the server"]},{"entry":["9.","Convert input arguments"]},{"entry":[{},"into network"]},{"entry":[{},"data"]},{"entry":["10.","Transmit arguments to the"]},{"entry":[{},"server's runtime"]},{"entry":[{},{},"11.","Receive call"]},{"entry":[{},{},"12.","Disassemble network data"]},{"entry":[{},{},{},"and convert input"]},{"entry":[{},{},{},"arguments into"]},{"entry":[{},{},{},"local data"]},{"entry":[{},{},"13.","Locate and invoke the"]},{"entry":[{},{},{},"called procedure"]},{"entry":[{},{},"14.","Execute the remote"]},{"entry":[{},{},{},"procedure"]},{"entry":[{},{},"15.","Convert the output"]},{"entry":[{},{},{},"arguments and"]},{"entry":[{},{},{},"return value"]},{"entry":[{},{},{},"into network data"]},{"entry":[{},{},"16.","Transmit results to the"]},{"entry":[{},{},{},"client's runtime"]},{"entry":["17.","Receive results"]},{"entry":["18.","Disassemble network data"]},{"entry":[{},"and convert output"]},{"entry":[{},"arguments into"]},{"entry":[{},"local data"]},{"entry":["19.","Return results and control"]},{"entry":[{},"to calling code"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0107","num":"0120"},"figref":"FIG. 9","b":["900","904","914","906","916","908","918","910","920","902","904"]},"The RPC client  or the RPC server  typically contains RPC application code segments  and , RPC interfaces  and , stubs  and , and the RPC runtime libraries  and . The RPC application code segments , are generally the code written for a specific RPC application by the application developer. The RPC application code segments , generally implement and call remote procedures, and also calls needed routines or procedures in the RPC runtime library. An RPC stub , is generally an interface-specific code module that uses an RPC interface , to pass and receive arguments. A client  and a server  typically contain complementary RPC stubs , for each shared RPC interface ,. The RPC runtime library , generally manages communications for RPC applications. In addition, the RPC runtime library , should support an Application Programming Interface (API) used by RPC application code to enable RPC applications to set up their communications, manipulate information about servers, and perform optional tasks such as remotely managing servers and accessing security information.","RPC application code segments , usually differ for clients and servers. RPC application code  on the server  typically contains the remote procedures that implement one RPC interface. RPC application code  on the corresponding client  typically contains calls to those remote procedures.","RPC stubs , generally perform basic support functions for remote procedure calls. For instance, RPC stubs , prepare input and output arguments for transmission between systems with different forms of data representation. RPC stubs , use the RPC runtime library , to handle the transmission between the client  and server . RPC stubs  on the client  can also use the local RPC runtime library  to find appropriate servers for the client .",{"@attributes":{"id":"p-0111","num":"0124"},"figref":"FIG. 10","b":["908","1002"]},"Marshalling  generally converts input or call arguments  into a byte-stream format and packages them for transmission. Upon receiving call arguments, a server RPC stub  unmarshalls  them. Unmarshalling  is generally the process by which a stub disassembles incoming network data and converts it into application data using a format that the local system understands. Marshalling , and unmarshalling , both occur twice for each remote procedure call. The client RPC stub  marshalls  input arguments  and unmarshalls  output arguments . The server RPC stub  unmarshalls  input arguments  and marshalls  output arguments . Marshalling and unmarshalling permit client and server systems to use different data representations for equivalent data. For example, the client system can use ASCII data , and the server system can use Unicode data  as shown in .","The IDL compiler (a tool for application development) generates stubs by compiling an RPC interface definition written by application developers. The compiler generates marshalling and unmarshalling routines for platform-independent IDL data types. To build the client for an RPC application, a developer links client application code with the client stubs of all the RPC interfaces the application uses. To build the server, the developer links the server application code with the corresponding server stubs.","In addition to one or more RPC stubs, each RPC server and RPC client should be linked with a copy of the RPC runtime library. The RPC runtime library generally provides runtime operations such as controlling communications between clients and servers and finding servers for clients on request. RPC stubs in the client and the server typically exchange arguments through the RPC runtime library that is respectively local to the client and the server. The RPC runtime library on the client typically transmits remote procedure calls to the server. The RPC runtime library on the server generally receives the remote procedure calls from the client and dispatches each call to the appropriate RPC stub on the server. The RPC runtime library then sends the results of each call to the RPC runtime library on the client.","RPC application code on the server must also contain server initialization code that calls routines in the RPC runtime library on the server when the server is starting up and shutting down. RPC application code on the client can also call RPC runtime library routines for initialization purposes. Furthermore, RPC application code on the server and RPC application code on the client can also contain calls to RPC stub-support routines. RPC stub-support routines generally allow applications to manage programming tasks such as allocating and freeing memory.",{"@attributes":{"id":"p-0116","num":"0129"},"figref":"FIG. 11","b":["904","914","906","916","908","918","910","920","908","1002","906","908","908","1002","910","910","1002","920","918","916","918","1002","914","914","1008","918","918","1008","920","920","1008","910","901","908","1008","904"]},"In one embodiment, remote procedure calls are made with blocking enabled to ensure synchronization between the objects  on the browser and the objects  managed by the OM (shown in ). With blocking enabled, control would typically not be passed back to the calling code until the called remote procedure finishes executing.",{"@attributes":{"id":"p-0118","num":"0131"},"figref":"FIG. 12","b":"1200"},"Designing the application, deciding what procedures are needed and which of the needed procedures will be remote procedures, and deciding how the remote procedures will be grouped into RPC interfaces (block );","Using the Universal Unique Identifier (UUID) generator to generate a UUID for each of the RPC interfaces (block );","Using the Interface Definition Language (IDL) to describe the RPC interfaces for planned data types and remote procedures (block );","Generating the client and server stubs by compiling the IDL description using an IDL compiler (block );","Writing or modifying application code using a programming language that is compatible with the RPC stubs, so that the application code works with the stubs (block );","Generating object code from application code (block ); and","Linking the local RPC runtime library and the object code generated from the application code to generate executable code (block ).",{"@attributes":{"id":"p-0126","num":"0139"},"figref":"FIG. 13","b":["908","904","910","1302","1304","918","1308","914","916","1302","1306"]},"Traditionally, calling code and called procedures share the same address space. In an RPC application, the calling code and the called remote procedures are not linked; rather, they communicate indirectly through an RPC interface. An RPC interface is generally a logical grouping of operations, data types, and constants that serves as a contract for a set of remote procedures. RPC interfaces are typically compiled from formal interface definitions written by application developers using the Interface Definition Language (IDL).","In developing a distributed application, an interface definition should be defined in IDL. The IDL compiler generally uses the interface definition to generate a header file, a client stub file, and a server stub file. The IDL compiler can produce header files in a standard programming language, and stubs as source files or as object file. For some applications, an Attribute Configuration File (ACF) accompanying the interface definition may be defined. If an ACF exists, the IDL compiler interprets the ACF when it compiles the interface definition. Information in the ACF is used to modify the code that the compiler generates.","The header of each RPC interface typically contains a Universal Unique Identifier (UUID), which is a hexadecimal number that uniquely identifies an entity. A UUID that identifies an RPC interface is generally known as an interface UUID. The interface UUID ensures that the interface can be uniquely identified across all possible network configurations. In addition to an interface UUID, each RPC interface contains major and minor version numbers. Together, the interface UUID and version numbers form an interface identifier that identifies an instance of an RPC interface across systems and through time.","Returning to , objects  on the browser are generally synchronized with corresponding or mirrored objects  managed by the OM so that changes can be reflected. Synchronization can be accomplished through a remote procedure call (RPC) mechanism  and a notification mechanism .","The notification mechanism  generally provides the means by which data in an object  on the browser (e.g., JSSBusComp ) can be updated when data or status is changed in a corresponding object  managed by the OM (e.g., CSSBusComp ). In one embodiment, the CSSSWEView object  would collect one or more notifications, and send them to the objects  on the browser at the end of a view show cycle.","In one embodiment, the following exemplary or illustrative notifications can be transmitted. It should be noted that some of the notifications listed below require parameters. In other cases, the framework can understand the context for these notifications by simply knowing its current state.\n\n","As stated above, objects on the browser and objects managed by the OM can be configured to reside and operate on one or multiple computing devices. As shown above,  illustrates an exemplary configuration  in which objects  on the browser and objects  managed by the OM reside and operate on multiple computing devices  and , including a client  and a server .  illustrates an exemplary configuration  in which objects  on the browser and objects  managed by the OM reside and operate on one computing device .",{"@attributes":{"id":"p-0134","num":"0176"},"figref":["FIG. 14","FIG. 6A","FIG. 14"],"b":["1400","502","504","600","1400","1405","1410","1415","1420"],"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":["Continue\u2014This value generally indicate that the server-side applet, CSSWEApplet, has performed its share of handling the invoke method (or has no role to perform), and that the JSSApplet on the browser needs to complete the action. Notifications are provided in the response, but are often empty.","Completed\u2014This value generally indicates that the server-side applet has completed the handling of the invoke method, and that the browser needs to perform no further action other than to respond to notifications provided in the response.","NewPage\u2014This value generally indicates that the response to the invoke request or other command requires a page refresh on the browser, including re-a generation all the temporary browser-side objects. A URL is sent to the browser, so that the new page can be obtained. However, there will no notifications. This value is typically set in cases such as when a drilldown to a different view is requested.","Error\u2014This value generally indicates that the invoke method request failed. Upon receiving an Error status, the JSSApplet would typically display an error page."]}}}},"When a browser-side applet, JSSApplet, calls the server through the RPC, the browser-side applet typically looks at the status flag in the response and then handles it (block ). If the returned status is Error, the browser-side applet would show an error page. If the returned status is Completed, the server is generally indicating that it had already handled the invoke method and that there's nothing left for the browser to do. If the returned status is Continue, the server is generally indicating that it is not handling the invoke method. The browser-side applet would generally respond to a returned status of Continue by redirecting the method to a JSSBusComp object by invoking the method directly on a JSSBusComp object. The JSSBusComp object may be able to satisfy the invoke method request, or may have to send its own RPC call through the JSSApplication to its corresponding server-side business component.",{"@attributes":{"id":"p-0136","num":"0182"},"figref":["FIG. 15","FIG. 15","FIG. 6A"],"b":["1500","1500","1505","1510","1515"],"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":{"@attributes":{"id":"ul0013-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":["Completed\u2014This value generally indicates the server-side business component, CSSBusComp, had generally processed the invoke method successfully. Notifications will typically occur.","Error\u2014This value generally indicates that the server-side business component, CSSBusComp, had unsuccessfully processed the invoke method call. Upon receiving a returned status of Error, the browser would typically display an error page."]}}}},"In block , the client-side business component (JSSBusComp) examines the returned status flag and responds appropriately. It should be noted that the server will be contacted if an invoke method call performs actions that would require synchronization between the browser and server business components. It should be further noted that there could be circumstances where the JSSBusComp object may be able to handle the request locally without needing to contact the server. An example of such circumstances is when the user performs a next record operation and then a previous record operation without changing any data.","Some portions of the following description are presented in terms of components, which may be understood to be components of a system or apparatus, objects of code, other portions of code, portions of a program, or other pieces of a whole which may be expected to function collectively, in some cases with some independence between the pieces.",{"@attributes":{"id":"p-0139","num":"0187"},"figref":"FIG. 16A","b":["1610","1605","1610","1605","1615","1630","1605","1615","1620","1615","1605","1630","1620","1610","1630","1610","1620","1630","1620","1610"]},"Plug-in  recognizes requests from client  and redirects those requests to SWE  through an interface between second machine  and third machine  (such as another world wide web or internet interface for example). Such redirection may include massaging, transforming, or otherwise manipulating data forming the request in question, or it may simply include passing requests on to the SWE  unchanged. SWE  is part of object manager  along with data manager , all of which run on third machine . Typically, requests from client  will result in accesses of data in SQL repository (database) , which is accessible by third machine . Note that web server  and object manager  may be run on a single machine, rather than two separate machines, while still maintaining similar or identical logical relationships.",{"@attributes":{"id":"p-0141","num":"0189"},"figref":["FIG. 16B","FIG. 16A","FIG. 16B","FIG. 16A"],"b":["1605","1645","1680","1610","1605","1650","1630","1650","1610","1630"]},"Plug-in  passes on requests to SWE  which interacts with data manager . Data manager  determines on a frequent (potentially near continuous or alternatively regular) basis whether a connection to third machine  is present. When such a connection is present, data manager  accesses SQL database  on third machine  for purposes of handling requests. When such a connection is not present, data manager  accesses local SQL database  on first machine  for purposes of handling requests.","In one embodiment, local SQL database  is a scaled-down or limited copy of database . In an alternate embodiment, local database  is a copy of database . Note that in either embodiment, synchronization of database  with local database  may be handled with a variety of well-known methods. For example, data manager , in one embodiment, may handle synchronization of database  with database . Such synchronization will necessarily only occur when a link is present between first machine  and third machine . Additionally, while some embodiments may have identical schema between database  and local database , alternate embodiments may have a first schema for database  and a second schema for database .",{"@attributes":{"id":"p-0144","num":"0192"},"figref":"FIG. 17","b":["1710","1740","1740","1720","1710","1740","1730","1710","1750","1775","1710"]},"As will be appreciated, client  and local server  may be portions of the same overall component in some embodiments, or may be separate or distinct components in alternate embodiments. Furthermore, server emulation component  and web emulation component  may be implemented as separate components without the need for an encompassing local server component  in some embodiments. Preferably, the client  is a web browser or similar interface for use by a user, with some customizations as appropriate for use in a particular web application. However, the client  may be a component suitable for use with a variety of user interfaces such as web browsers to provide a web-based application.",{"@attributes":{"id":"p-0146","num":"0194"},"figref":"FIG. 18","b":["1810","1820","1830","1840"]},{"@attributes":{"id":"p-0147","num":"0195"},"figref":"FIG. 19","b":["1910","1920","1940","1930"]},"Note that the network connection or some other interface may or may not have a connection of varying reliability. Furthermore, it will be appreciated that the determination of presence or absence of a connection need not be made for every request, and that the determination may be made based on attempting a request via the network connection and then examining a result, lack thereof, or some form of timeout for example. Servicing requests of web applications may involve retrieval of data, may involve local processing of data already locally present, or may involve local or remote processing of remote data.",{"@attributes":{"id":"p-0149","num":"0197"},"figref":"FIG. 20","b":["2010","2020","2030","2040","2050","2060"]},"Note that disconnection with the network may be handled in a graceful way in some instances, such that synchronization occurs prior to the disconnection. Furthermore, note that synchronization need not occur at all. Alternatively, synchronization between the main database and local database may be accomplished as a background process while operating in network mode. Similarly, any changes in data in the main database during operation in network mode may be effected at essentially the same time in the local database, or on return of an indication that committing such changes to the main database was successful.",{"@attributes":{"id":"p-0151","num":"0199"},"figref":"FIG. 21","b":["2110","2020","2030","2040","2150"]},{"@attributes":{"id":"p-0152","num":"0200"},"figref":"FIG. 22","b":["2210","2050","2060","2270"]},{"@attributes":{"id":"p-0153","num":"0201"},"figref":"FIG. 23","b":["2300","2310","2320","2320","2330","2320","2340","2320","2390"]},"If a network connection is present, the process proceeds from block  to block . At block , a web application request is received. At block , the request is serviced using data from a main database or through other data available through the network connection. At block , a determination is made as to whether operation should cease. If not, the process returns to block  and awaits another request. If operation should cease, the process proceeds to block  and stops.",{"@attributes":{"id":"p-0155","num":"0203"},"figref":"FIG. 24","b":["2410","2415","2020","2030","2040","2490"]},"If the network connection is not present, or not operational, the process proceeds to block . At block , recognition of lack of a network connection or a failure in the network connection occurs. At block , the web application operates in local mode, servicing requests through a local web server utilizing a local database. Finally, when operation is completed, at block , the process stops.","Some portions of the previous detailed descriptions are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","It should be emphasized that functional components, as shown above in the figures and described in the text accompanying the figures, could be implemented using software code segments. If the aforementioned functional components are implemented using software code segments, it should be further emphasized that these code segments can be stored on a machine-readable medium, such as floppy disk, hard drive, CD-ROM, DVD, tape, memory, or any storage device that is accessible by a computing machine.","A method, system and apparatus for a mobile web client is presented. In one embodiment, the invention is a method of operating a web application. The method includes receiving a request from a client. The method further includes processing the request with a web emulator. The method also includes servicing the request from available data.","In some embodiments, the method may further include using a plug-in for a web server as the web emulator, the plug-in passing the request to a web engine, and the web engine servicing the request in conjunction with a data manager. In some embodiments, the method may further include the data manager attempting access to available data over a network. Additionally, the method may include the data manager utilizing available data from the network upon successful access and utilizing available data from local data upon failed access to service the request. Furthermore, the method may involve the request including sending data from the client to the network and the request including receiving data from the network.","In an alternate embodiment, the invention is a method of operating a web application for use in conjunction with a database. The method includes receiving a request from a client, processing the request with a web emulator, and servicing the request from available data in a database.","In alternate embodiments the available data is available over a network in a main database or is available locally in a local database, without access to a network. Similarly, in alternate embodiments, the method may further include attempting access to available data in a main database over a network. The method may also further include: upon successful access over the network, servicing the request utilizes available data from the main database through the network. Similarly, the method may also further include: upon failed access over the network, servicing the request utilizes available data from local data in a local database.","In the foregoing detailed description, the method and apparatus of the present invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the present invention. In particular, the separate blocks of the various block diagrams represent functional blocks of methods or apparatuses and are not necessarily indicative of physical or logical separations or of an order of operation inherent in the spirit and scope of the present invention. For example, the various blocks of  may be integrated into components, or may be subdivided into components. Similarly, the blocks of  (for example) represent portions of a method which, in some embodiments, may be reordered or may be organized in parallel rather than in a linear or step-wise fashion. The present specification and figures are accordingly to be regarded as illustrative rather than restrictive."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the accompanying figures.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5A","FIG. 2"],"b":"500"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 5B","FIG. 5A"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 12","b":"1200"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 14","FIG. 6A"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 16A"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 16B"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 24"}]},"DETDESC":[{},{}]}
