---
title: Apparatus, and system, for efficient and reliable computation of results for mathematical functions
abstract: An apparatus and system are provided for efficient computation of reliable results for mathematical functions. The apparatus may include an interface, a control module, and an error module. The interface receives a mathematical function call. The call includes a plurality of arguments for which a range of computable results for the mathematical function varies with respect to the values for the arguments. The control module determines whether executing the mathematical function using the plurality of arguments will produce a result within the range of computable results. The error module aborts the mathematical function call prior to initiating execution of the mathematical function in response to determining that the values for the plurality of arguments produce a result outside the range of computable results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454455&OS=07454455&RS=07454455
owner: International Business Machines Corporation
number: 07454455
owner_city: Armonk
owner_country: US
publication_date: 20040607
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The invention relates to software for implementing mathematical functions. Specifically, the invention relates to apparatus, systems, and methods for efficient and reliable computation of results for mathematical functions.","2. Description of the Related Art","Generally, processing systems such as computers and calculators are capable of evaluating a set of general purpose mathematical functions, also referred to herein as math functions. Certain math functions are executed hundreds or thousands of times to perform what appear to a user to be simple operations, such as simple animation. The software libraries that implement the math functions are consequently written for very fast execution using a highly optimized form of assembly language or machine code. Generally, these math functions perform well for a large set of values that can be provided as arguments to the math function.","Math functions are considered to provide results within number sets bounded by negative infinity and positive infinity. Conventional computers, however, have natural limits on the maximum value, minimum value, and type of value that can be represented in the computer. Typically, these limits depend on the hardware and software architecture of the processing system that evaluates the math function. Values that fall outside of these limits are referred to herein as unrepresentable values or incomputable results. Similarly, values that fall within these limits are referred to as computable results or representable values. Incomputable results are those for which a valid mathematical result exists, but the result can not be represented due to natural limits of the processing system.","To account for natural limits on results for math functions, conventional systems often check an argument for invalid values. Such invalid values can be of several types, including those for which the result for the math function is undefined (such as division by zero). Certain math functions check in advance for incomputable results. For example, on a computer using the IBM hexadecimal floating point data representation, a routine that evaluates the exponential function exp(X) for a floating point argument X can check that the value of X does not exceed 174.673. If so, an error condition is signaled for an unrepresentable, invalid result. Other functions of a single argument such as exp(x), sinh(x), cosh(x), tan(x), arcsin(x), gamma(x), and the like typically check the argument value against one or two limit values (such as upper and lower bounds) to identify unrepresentable values.","Conventional math functions, however, typically fail to perform such checking for a computable result when the function involves a plurality of arguments. Conventionally, the overhead in determining whether the argument values will provide a computable result causes an unacceptable delay. Consequently, conventional math functions favor speed over reliability in evaluating functions that accept a plurality of arguments. The math functions presume that for the argument values provided the math function will return a representable result. Accordingly, the math function is evaluated using the argument values. The math function evaluation can consume considerable memory and processing resources. If the result of the math functions turns out to be unrepresentable, these resources are wasted.","Consequently, such function argument values are permitted to evaluate until the processing system detects that the result being computed is unrepresentable or noncomputable. Generally, a noncomputable result or an unrepresentable result is one that is a mathematically undefined result for the function, larger than the processing system is designed to represent, smaller than the processing system is designed to represent, or includes an imaginary portion such as with complex numbers when a real (non-complex) result is required.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1","b":["100","102","104","102","104","102","104"]},"The function f(x,y)  maps, or translates, a given x and a given y from the domain  to a proper result in the range . For example, suppose the domain  comprises whole numbers (integers as represented in the computer) and the function  is the mathematical power function f(x,y)=x^y. For most x and y values chosen in the domain , the function returns a valid computable result . If x=2 and y=3, f(x,y) returns the result 8. For certain values of x and y, the mathematical function may be undefined. So, if x=0 and y=0, the function , x^y, maps to a mathematically undefined result .","Other combinations of arguments x and y produce a result  that is either too large, or too small for the processing system evaluating the function  to represented. If the result or an intermediate result is too large, the condition is referred to as overflow. If the result or an intermediate result is too small, the condition is referred to as underflow.","Because the result is unrepresentable, the result is considered incomputable for the particular processing system. For example, suppose the processing system represents numbers as integers in a memory location having thirty-one data bits and one sign bit. Using the same function , x^y, if x=2 and y=31 the result  is larger than the largest positive integer that can be stored in a result memory location of the processing system.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["112","104","112","114","106","114","106"]},"Results  outside of the computable range , including mathematically undefined results , are considered error conditions. Generally, the math function will signal this error condition. However, the math function typically does not identify the error condition until large amounts of time, memory, and processing power are expended.","Unfortunately, conventional math functions do not determine whether the given arguments will produce a computable result . One reason for this is the variation between arguments that can dramatically alter whether the result is within the computable range . For example, a given x and y value may produce a computable result . But changing one argument or the other can produce an incomputable result , . Keeping the same x value and using y\u2032 produces an undefined result . Keeping the same y and using x\u2032 produces incomputable result  due to overflow or underflow.","The interrelationships between the arguments and the function  and the affect of these relationships on the result falling within the range of computable results  make detecting such error conditions for values of a plurality of arguments very difficult. The range of computable results  varies depending on which values are provided for the arguments. Furthermore, the range of computable results  is shifted based on the value of a first argument in relation to the value of a second argument. Conventional math functions avoid such testing of arguments for a particular function because the overhead (which introduces a delay in function execution) in conducting such tests is expected to outweigh the benefit of preventing wasted computing resources.","From the foregoing discussion, it should be apparent that a need exists for an apparatus and system for efficient and reliable computation of results for mathematical functions. Beneficially, such an apparatus and system would operate accurately and very quickly in testing a plurality of math function arguments to determine whether present argument values produce a result within the range of computable results. Beneficially, the apparatus and system would incur minimal overhead in testing the arguments. In addition, the apparatus and system would prevent wasting computing resources evaluating a function for which the plurality of arguments would produce an incomputable result.","The various embodiments of the present invention have been developed in response to the present state of the art, and in particular, in response to the problems and needs in the art that have not yet been met for efficient and reliable computation of results for mathematical functions. Accordingly, the various embodiments have been developed to provide an apparatus and system method for efficient and reliable computation of results for mathematical functions that overcomes many or all of the above-discussed shortcomings in the art.","An apparatus according to one embodiment includes an interface, a control module, and an error module. The interface receives a mathematical function call that includes a plurality of arguments for which a range of computable results for the mathematical function of the function call varies with respect to the values for the arguments. The control module determines whether executing the mathematical function using the plurality of arguments will produce a result within the range of computable results.","Preferably, the control module makes this determination by comparing one argument value with boundary values for the other argument values. The boundary values are predefined values that for a given first argument value, if the second argument value crosses the boundary (is greater than or less than, as appropriate), the result of the function will be outside the range of computable results. If the control module determines that the values for the plurality of arguments produce a result outside the range of computable results, the error module aborts the mathematical function call prior to initiating execution of the mathematical function.","Preferably, one function argument is the index, lookup, or key value. Using the index value for the one function argument, a one or more boundary values corresponding to each additional function argument may be referenced to determine whether argument values for those additional function arguments cross an associated boundary value. Each function argument that is not the index value may have a boundary value for an upper bound and a boundary value for a lower bound.","In certain embodiments, the control module may include a reader module, a lookup module, and a comparison module. The reader module reads a first value associated with a first argument of the mathematical function and a second value associated with a second argument. The lookup module retrieves a boundary value from a repository of predefined boundary values defined for the mathematical function over a domain of the first argument, the boundary value retrieved using the first value. The comparison module determines whether the second value satisfies the boundary value.","Whether the second value satisfies the boundary value may depend on the type of boundary value. In certain embodiments, the comparison module uses a maximum boundary value. If the second value exceeds the maximum boundary value, the current set of function values will produce a result outside the range of computable results.","Similarly, in one embodiment, the comparison module uses a minimum boundary value. If the second value is less than the maximum boundary value, the current set of function values will produce a result outside the range of computable results. Still other embodiments may use both a minimum boundary and a maximum boundary. In these embodiments, to produce a computable result (a result within the computable range), the second value should be between the minimum boundary and the maximum boundary. By quickly testing the function arguments against predefined boundary values, certain embodiments are capable of rapidly determining whether evaluation of the function should be aborted to preserve computing resources. The overhead incurred to perform this simple comparison with the boundary values is minimal in terms of space and time required.","In another embodiment, the repository of predefined boundary values may be configured to optimally provide accurate tests of arguments and balance the time and space required to access and maintain the repository. In certain embodiment, the computable range may depend on various machine specific factors such as the size of memory structures used to store atomic values during math function execution, the way numbers are represented in the storage of atomic values, and the numeric types accepted as valid arguments for the function. For example, the range of computable results can change dramatically based on whether the function operates on integer types, floating point types, or a combination of these. Those of skill in the art will recognize various implementation tradeoffs in designing the size and configuration of the repository of predefined boundary values.","A method for efficient and reliable computation of results for mathematical functions is also presented. In one embodiment, the method includes receiving a mathematical function call, the call comprising a plurality of arguments for which a range of computable results for the mathematical function of the function call varies with respect to the values for the arguments. A determination is then made whether executing the mathematical function using the plurality of arguments will produce a result within the range of computable results. Lastly, the method aborts the mathematical function call prior to initiating execution of the mathematical function in response to determining that the values for the plurality of arguments produce a result outside the range of computable results.","In certain embodiments, the method reads a first value associated with a first argument of the mathematical function and a second value associated with a second argument. Next, a boundary value is retrieved from a repository of predefined boundary values defined for the mathematical function over a domain of the first argument. Of course any argument for the mathematical function may serve as the first argument.","In one embodiment, the boundary value is retrieved using the first value. Then, a determination is made whether the second value satisfies the boundary value condition or conditions. If so, computing the result for the mathematical function using the first and second values will produce a result within the range of computable results.","Various embodiments for efficient and reliable computation of results for mathematical functions may be arranged as a system and machine-readable instructions that comprise substantially the same functionality as the components and steps described above in relation to the apparatus and method. The one embodiment provides a fast test for math functions with a plurality of arguments. The test imposes minimal overhead on computations for values that produce results in the range of computable results. Beneficially, one embodiment prevents evaluation of math functions for arguments that will produce a result outside the range of computable results. In this manner, math functions are optimized and fewer computing resources are wasted. The features and advantages of different embodiments will become more fully apparent from the following description and appended claims, or may be learned by the practice of embodiments of the invention as set forth hereinafter.","It will be readily understood that the components of embodiments of the present invention, as generally described and illustrated in the Figures herein, may be arranged and designed in a wide variety of different configurations. Thus, the following more detailed description of the embodiments of the apparatus and system of the present invention, as presented in the Figures, is not intended to limit the scope of the invention, as claimed, but is merely representative of selected embodiments of the invention.","Many of the functional units described in this specification have been labeled as modules, in order to more particularly emphasize their implementation independence. For example, a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices or the like.","Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions which may, for instance, be organized as an object, procedure, function, or other construct. Nevertheless, the executables of an identified module need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the module and achieve the stated purpose for the module.","Indeed, a module of executable code could be a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices, and may exist, at least partially, merely as electronic signals on a system or network.","Reference throughout this specification to \u201ca select embodiment,\u201d \u201cone embodiment,\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases \u201ca select embodiment,\u201d \u201cin one embodiment,\u201d or \u201cin an embodiment\u201d in various places throughout this specification are not necessarily all referring to the same embodiment.","Furthermore, the described features, structures, or characteristics may be combined in any suitable manner in one or more embodiments. In the following description, numerous specific details are provided, such as examples of programming, software modules, user selections, user interfaces, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware chips, etc., to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the embodiments of the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the various embodiments.","The illustrated embodiments of the invention will be best understood by reference to the drawings, wherein like parts are designated by like numerals throughout. The following description is intended only by way of example, and simply illustrates certain selected embodiments of devices, systems, and processes that are consistent with the invention as claimed herein.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 2","b":["200","200","202","204","206","202","204","206","202","204","206"]},"The memory  may comprise a non-volatile memory such as a hard disk drive, Compact Disk Read Only Memory CDROM drive, a read-only memory device, or a random access volatile memory (RAM). Alternatively, the memory  may comprise a combination of ROM and RAM. For example, certain data may be stored in ROM that serves as a cache. In certain embodiments, the memory  is on a chip that implements the processor .","The processor  comprises any processor suitable for evaluating math functions. The processor  may comprise a general purpose processor such as a Central Processing Unit (CPU) of a computer or a special purpose processor of an Application Specific Integrated Circuit (ASIC).","The I\/O module  may receive inputs from a user or another device. Similarly, the I\/O module  may send output to one or more output devices such as a monitor or a printer. In one embodiment, the I\/O module communicates results of math functions to a user and\/or error messages associated with error conditions for the math functions.","Preferably, the system  includes a function range test module  and a set of boundary values . Preferably, the processor  executes the function range test module  prior to evaluating object code to perform a math function .","In one embodiment, the processor  transmits substantially all math function calls to the function range test module . If the function range test module  is configured to test arguments for the particular function call, the function range test module  returns a value to the processor  indicating whether proceeding with evaluation of the function call will produce a computable result. If the function range test module  is not configured to test the particular function, control is returned to the processor  which then evaluates the function  with the given arguments.","Alternatively, the function range test module  is integrated into one or more select math functions . For example, math functions  that use a plurality of arguments or complex numbers for one or more arguments may include the function range test module . Examples of math functions  that may utilize the function range test module  include a power function (x^y), a Bessel function, a Jacobi function. In addition, functions for computing well-known constants may also use the function range test module . For example, a function to compute C, C(n,m), which computes the number of combinations of n items taken m at a time. In addition, a function to compute the \u201cStirling Numbers,\u201d S(n,x) may also use the function range test module .","The function range test module  determines whether the values for function calls that include a plurality of arguments or at least one complex number argument will produce a result within the range of computable results for the particular function . The function range test module  references the set of boundary values in order to make a rapid determination based on the particular function call and the specific values provided for the function arguments.","The set of boundary values  may include one or more subsets of boundary values specific to a particular function. Alternatively, the memory  comprises a different set of boundary values  for each function  supported by one embodiment. The sets of boundary values  are preferably structured such that for a given value or index one or more corresponding boundary values can be referenced.","In one example, the system  is initiated when a software program issues a mathematical function call. In one embodiment, the processor  or a math co-processor for the processor directs the function call and the argument values for the call to the function range test module . The function range test module  determines whether the function argument values will produce a result within the range of computable results for the particular function. Details of this determination are explained below.","If the result is computable, the processor  then evaluates the math function . If not, the processor  communicates the error condition to the application  or directly to a user using the I\/O module . In this manner, the system  prevents wasted computing resources attempting to compute a result which is incomputable. Furthermore, the function range test module  performs the test so quickly that overhead in performing test is minimal. Consequently, the benefit in performing the test provides fast reliable results that outweighs the risk of wasting computing resources or continuing computations with an erroneous result.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","208","300"]},"The apparatus  includes an interface , a control module  and an error module . The interface , control module , and error module  cooperate to determine whether the function arguments will produce a computable result  (See ). The interface , control module , and error module  preferably communicate using conventional software techniques such as function calls, pointers, and the like.","The interface module  receives a mathematical function call. In one embodiment, the interface module  comprises an Application Programming Interface (API) that facilitates use of the services provided by the function range test module  to various software modules. The function call identifies the function that is to be evaluated as well as the argument values for the function. Preferably, the function call is one that includes a plurality of arguments for which the range of computable results  (See ) varies with respect to the values of the arguments. This means that given a first argument value, the result produced for a given second argument value may or may not fall within the range of computable results .","Of course function calls involving more than two arguments may also be evaluated in the same manner as described below. Furthermore, function calls having a single argument that comprises a complex number, z, such that z=x+iy (where i=square root of \u22121), can also be used with the function range test module . Examples of such functions include trigonometric functions of a complex variable including sin(z), cos(z), tan(z), sinh(z), cosh(z), tanh(z), and others.","The interface module  communicates an identifier of the function and the argument values to the control module . The control module  determines whether evaluation or execution of the math function using the provided argument values will produce a result within the range of computable results . Preferably, the control module  makes this determination by examining each of the argument values provided and determining whether each argument value is within certain limits, referred to herein as boundaries. The boundaries for each argument value change based on the other argument values.","Computing these boundaries may incur a prohibitive delay. Consequently, predefined boundaries may be included that are referenced by the control module  to make the determination. If all the argument values fall within the boundaries, the result is within the range of computable results.","The boundaries are marked by one or more boundary values . Typically, each set of boundary values  is directly related to a particular function. While the variability of a second argument affects the range of computable results , a boundary value for the second value is known and predefined. If the second value crosses the boundary value (is greater than or less than the boundary value, as appropriate) the result is known to be outside the range of computable results .","To facilitate examination of boundary values in relation to argument values, the control module  may include a reader module , a lookup module  and a comparison module . The reader module  reads a first value associated with a first argument of the mathematical function and a second value associated with a second argument. One of the arguments is used as an identifier for referencing the boundary values . In other words, the argument is a key or index into a data structure that stores the boundary values.","The lookup module  uses the value for the key or index argument, the first value, to retrieve a boundary value from a repository  of predefined boundary values . The repository  may comprise substantially any data structure capable of returning one or more boundary values  in response to a specific index or key value. For example, the repository  may comprise a list of key-value pairs. Alternatively, the repository  may comprise a hash table or other similar data structure.","In one embodiment, the repository  comprises a table of data in a row format. The table may be referred to as a lookup table because the table is typically predefined and used just for reference and not for changing and storing disparate data. Each row in the table may include one or more boundary values specific to a particular argument value. The first value read by the reader module  may serve as an index in locating a row in the table.","Preferably, the set of boundary values  includes at least one boundary value for each first value within a domain of the first argument. In building the predefined set of boundary values , certain values for the first argument will reach a natural limit, an upper boundary and a lower boundary, for which a higher or lower value of the first argument will produce an incomputable result for the function. The values for the first argument between the lower boundary and the upper boundary comprise the domain of the first argument. Consequently, boundaries for the first argument may be checked by the presence or absence of a boundary value for a given first value.","Alternatively, the domain of the first argument may comprise an infinite number of possible values. Consequently, the set of boundary values  may comprise a reasonable subset of the domain of the first argument. In this manner, the size of the set of boundary values  is kept within design parameters for the repository . In one embodiment, first values that do not include a corresponding boundary value in the set of boundary values  may automatically cause the function range test module  to permit evaluation of the function. In another embodiment, these first values may automatically cause the function range test module  to signal an error condition. The behavior implemented depends largely on the makeup and design of the set of boundary values .","The lookup module  provides the one or more retrieved boundary values to the comparison module . The comparison module compares the second value to the one or more retrieved boundary values. Depending on the type of boundary value(s), the comparison module  determines whether the second value satisfies the boundary values.","Typically, boundary values are of two types, a maximum boundary value and a minimum boundary value. If the boundary value is a maximum boundary value, second values greater than the maximum boundary value fail to satisfy the boundary value. If the boundary value is a minimum boundary value, second values less than the minimum boundary value fail to satisfy the boundary value. If both a maximum boundary value and a minimum boundary value are provided, the second value should be between the maximum boundary value and the minimum boundary value to satisfy the boundary value test.","If the second value satisfies the boundary value, the comparison module  signals that based on the first value and second value the function will provide a result  (See ) within the range of computable results . If not, the comparison module  signals an error condition. If the comparison module  determines that the function will provide a computable result  and more than two arguments exist, the reader , lookup module , and comparison module  cooperate to compare each additional argument value to corresponding boundary values in the set of boundary values . Preferably, the same first value is used as the index to retrieve the proper boundary values from the set of boundary values . In certain embodiments, this process is repeated until all argument values have been compared with a corresponding boundary value in the repository . In one embodiment, a subsequent set of boundary values for a next argument may depend on the value of the second argument being properly validated.","If an error condition is signaled, the comparison module  communicates with the error module . Typically, an error condition comprises any combination of argument values for the function that will produce a result ,  (See ) outside the range of computable results . As mentioned above, error conditions may include overflow errors, underflow errors, and mathematically undefined results for the given set of argument values. The error module  aborts the mathematical function call prior to a processor  (See ) initiating execution of the mathematical function . In one embodiment, based on a return value from the function range test module  signaling an error condition, the processor  may then not evaluate the math function . Instead, the processor  may facilitate communication between the error module  and the I\/O module  such that an error message is presented. Alternatively, a return code signaling an error condition may be returned to the function or object code that initiated the function call.","Advantageously, the apparatus  provides a fast, efficient, function range test module  for determining whether a given function call having a plurality of arguments will produce a computable result . The predefined boundary values in the repository  provide quick access for high speed comparisons to rapidly determine whether execution of the function call should continue and will produce a computable result. In addition, the comparison quickly determines whether executing the function with the given argument values would waste computing resources because of the incomputable results , .",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 4","FIG. 3","FIG. 1"],"b":["400","400","402","302","404","304","406","114","204","212","108"]},"If not, the error module  signals  an error condition. The error condition may be communicated to the processor , and I\/O module , a software module that initiated the math function call, or the like. Preferably, the error condition signaled  by the error module  prevents execution of the math function  before computing resources are wasted. Once an error condition is signaled or the processor  begins evaluating the math function , the method  ends .",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 5","b":["500","114","110","112","114","308","502","202"]},"In one embodiment, the control module  is configured to conduct special checks for certain argument values that produce well-known and well-defined results. Certain arguments may produce a particular result regardless of the values for the other arguments or may lead to a well-known undefined result for the function. Consequently, the control module  may perform these special tests prior to continuing the method .","For example, suppose the function is x^y. The x value is 0 and the y value is 0. The result is mathematically undefined. The control module may test the x and y values for 0. If x and y are 0, the control module  may cause the error module to signal the error condition, without performing any more of the steps of method  described below.","In certain embodiments, where a function has more than two arguments the read module  may read all the arguments and store the corresponding values in temporary storage locations in memory . In another embodiment, for functions that accept one or more complex numbers, the read module  may divide a complex number value into its real part and imaginary part. Each part may then be stored in particular temporary storage locations. Of course a math function may comprise arguments having a homogeneous or heterogeneous set of numeric types including integer, floating point, and complex.","Next, a lookup module  retrieves  at least one boundary value. Preferably, the boundary value is located using the first value as an identifier, a key or index into a set of boundary values . In certain embodiments, the first value is used directly for the index. In other embodiments, the first value is used as a basis for computing the index. For example, suppose the indexes are whole numbers. If the first value is a decimal or non-integer number, the first value may be rounded according to various rounding techniques to produce a whole number corresponding to the proper index.","Preferably, the set of boundary values  are organized in a table with the boundary values serving as columns and the rows corresponding to values within the domain of the first argument. The rows indexed by the values of the first argument contain boundary values that will allow evaluation of a computable result . Consequently, if the lookup module  fails to find a row in the table corresponding to the index derived from the first value, the first value may be considered a value that will produce a result for the function outside the range of computable results . Accordingly, execution of the function call is aborted.","Next, the comparison module  determines  whether second value satisfies the boundary value. Satisfaction of the boundary value means the second value and the first value together will produce a result for the function within the range of computable results .","If the boundary value is satisfied, the control module  may determine  whether the function includes more than two arguments. If so, the method  returns to step  where a value for the next argument is read. In certain embodiments, a boundary value is retrieved  for the value of the next argument using the first value. Alternatively, a row of the table may include a plurality of boundary values that each correspond to a different argument such that the row can be retrieved  just once. Alternatively, a row of the table may include an index or pointer to another row of the table depending on the values of previously validated arguments.","If no more function arguments exist, the processor  computes  the result for the function. If a second or subsequent value fails to satisfy its corresponding boundary value(s), the error module  signals  an error condition as described above in relation to .",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 6","b":["600","114","110","112","114","600","500"]},"As in method , a read module  reads  a first value and a second value. Also as in method , a lookup module  retrieves  one boundary value. This boundary value may comprise a maximum boundary value. Next, the lookup module  may retrieve  a minimum boundary value again using the first value. Preferably, the maximum boundary value and minimum boundary value are both stored in the same repository  of boundary values . In addition, the maximum boundary value and minimum boundary value are both referenced using the first value either as a direct index or to derive an index into the repository . As with the maximum boundary value, the minimum boundary value is defined for the function over a domain of the first argument.","The maximum boundary value defines an upper bound. If the second value is greater than this upper bound the math function result will be outside the range of computable results. The minimum boundary value defines an lower bound. If the second value is less than this lower bound the function result is also outside the range of computable results.","Accordingly, the comparison module  determines  determines whether second value satisfies the maximum boundary value and the minimum boundary value. If the second value is between the maximum boundary value and the minimum boundary value, the math function result will be inside the range of computable results.","As described in more detail in relation to , if the math function result will be inside the range of computable results, the function result is similarly computed . If not, an error condition is similarly signaled .",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 7A","FIGS. 7A-7C"],"b":["700","314","210","314"]},"For example in , suppose the function is the power function, f(x,y)=x^y. Further suppose, that x and y are integers represented in a processing system by 32-bit binary values. In addition, the power function may be configured to perform validity tests on the argument for special values such as x or y equal to zero. Other special cases for which the result is limited by the use of integers include x=\u00b11, y being a negative value, and the like. As mentioned above, the power function itself may be programmed to test and respond to these special cases. Positive values for y>1 and x\u22601, 0, or \u22121 incur such an overhead that function range test module  may be used to optimally determine whether the result is computable prior to attempting to compute the result.","Consequently, the repository  of boundary values  for this example may be organized as set forth in table . The table  includes two columns, one for y values, and one for maximum x values. Preferably, the number of columns corresponds to the number of arguments for the function. Those of skill in the art will recognize that use of y values and maximum x values is an implementation design decision. A similar table may be used in which one column is x values and the other column is maximum y values. Similarly, whether maximum values or minimum values are used depends on the type of function and the representation for the arguments and result.","The table  is preferably predefined such that the data values of the table  may be readily stored in high-speed and compact memory  (See ) such as a cache. Values in the \u201cExponent y\u201d column may comprise a sequential listing of y values other than the special cases discussed above. In , the y values begin at 2 and end at .","As discussed above, one of the function arguments may be used as an index into the table . In addition, the table may comprise a finite number of entries. In certain embodiments, depending on the function, values of y not found within the y column may be known to produce incomputable results regardless of the value of x. Consequently, if a given y value is not within the table , the function range test module  may report an error condition.","The maximum x values are predefined using an inverse of the function and the value y of the row. In this example, because the result is stored in a memory data structure of a 32-bit binary value, the upper limit on representable numbers for the processing system is known. In this example, presuming 31 bits of binary data and a single sign bit, the maximum value the 32-bit result can hold is 2,147,483,647. Each maximum x value is determined by taking the y-th root of the maximum number that the 32-bit result can hold, 2,147,483,647, and truncating any fractional part of the square root to obtain the required maximum x value.","The table  illustrates that as y increases the maximum value for x rapidly decreases. If y is greater than 30 and x is any positive value besides 1, the result is greater than the value the 32-bit result can hold. The value is outside the range of computable results . An overflow condition would occur. Similarly, if y is 18 and x is a value greater than 3 an overflow condition would occur.","By quickly looking a y value up in the table , the function range test module  rapidly determines whether the x value is within the boundary value, maximum x. If not, evaluation of the function is aborted before computing resources are wasted. In addition, the function range test module  operates very rapidly such that the delay in evaluating a function having valid arguments is minimized.","The table  also illustrates how the size and numeric representation for the arguments and result can affect the range of computable results . The maximum x values defined depend in part on the fact that the function and\/or processing system is designed to handle strictly integers. Those of skill in the art will recognize that the table  may be revised for functions that accept all floating point arguments and produce a floating point result or that handle a mixture of floating point and integers values.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 7B","b":["702","702"]},"Typically, in a signed magnitude representation, the word  comprises 31 data bits  and one sign bit . Alternatively, in a two's-complement representation, a sign bit is still used but negative values are represented by the one's complement of the data bits  plus one. In yet another alternative, data in the word  may be represented using the offset binary representation. Those of skill in the art will readily recognize that the type of representation used by a processing system to represent the atomic values used in the math function affects the range of the computable results. If the one representation allows for a larger value to be stored and represented, the range of computable results  is similarly affected. The converse is also true. Consequently, different manners for representing the values may affect what values are included in the repository  and\/or whether addition special tests are included for special values of arguments.","Furthermore, if the processing system executing the function uses larger words , the maximum and minimum representable values also increase. For example the word  may comprise sixty-four bits. Alternatively, in certain processing systems the word may comprise sixteen bits. Consequently, the size of the word  used to represent atomic values (single independently represented values) affects the scope of the range of computable results .",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 7C","b":["708","314","210","708","710","712","714","716","714","716","710"]},"One embodiment operates using the table  as described above. If a floating point x value falls within the values for the maximum x column  and minimum x column  for a given y value, the function will produce a result within the range of computable results . In this example, again suppose the function is the power function f(x,y)=x^y and that x, y, and the result can be floating point or non-integer values. Because floating point values can be very small, an almost infinite number of possible values exist for the value of y. Consequently, the number of rows in the table  could be very large. Consequently, depending on the expected frequency that certain values of y will be provided as arguments and the type of function, the number of entries or rows in the table  may be set to a finite number. In this manner, the size of the table  can be kept minimal such that the benefits of using the table are not outweighed by space or retrieval delay requirements.","To reference the table , the lookup module  preferably uses an index or key using techniques similar to those described above. Typically, the argument value is used directly or as a basis to derive the index. Consequently, how consecutive values for the argument value are selected for entries in the table  affects the granularity for testing certain values of the argument value.","In table , suppose that rows for successive y values are used in increments of one-fourth (0.25). Further suppose that the function accepts any floating point value for the y value. The y values supplied to the function are not limited to values that exactly match the selected increments of y values  in the table . In certain embodiments employing the table , a fast, simple rounding function such as the one described above may be applied to the y value to derive the index. In this manner, various floating point values of y can be tested and the ranges for the maximum x  and minimum x  more accurately define the range of computable results .",{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 8","b":["800","114","800","802","804","806","808","810"]},"The boundary values  stored in the repository  facilitate identifying whether a result will fall above or below the curve  for a given first argument value. Those of skill in the art will recognize that depending on how y values are selected for entries in the repository , the curve may be more accurately approximated. Consequently, certain embodiments more accurately determine whether a computable result is possible. However, those of skill in the art will also recognize the tradeoff between closely approximating this curve  and the overhead required to store and reference a larger repository . As the curve is more closely approximated, the number of entries in the repository  increases.","If the indexed function argument has almost an infinite number of possible values, those implementing a certain embodiment can determine how the indexed function argument value is to be rounded, up or down, to derive an index for the desired boundary values. In , if the indexed function argument is y, rounding up may involve applying the ceiling of y, rounding down may comprise taking the floor of y. These ceiling and floor operations can create index values of any desired granularity, depending on the implementation tradeoffs described above. Those of skill in the art will recognize that the granularity of the index values will be determined in part by the behavior of the mathematical function in various argument ranges.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 8","b":"810"},"Alternatively, if rounding up to Ceiling(y) is selected, certain values of x greater than the \u201cRound Up Boundary\u201d value are not allowed to proceed to evaluation of the function even though there is a chance that the y value will cause the result to fall within the shaded Area A, below the curve. Thus, some values of y and x that lead to valid computable results could be excluded as invalid. Those of skill in the art will readily recognize the benefits and costs of making these tradeoffs.","Advantageously, various embodiments of the present invention provide for efficient and reliable computation of results for mathematical functions. Certain embodiments accurately and quickly test a plurality of math function arguments to determine whether present argument values produce a result within the range of computable results. Certain embodiments impose minimal overhead in evaluating math functions and saves considerable computing resources that otherwise would be wasted evaluating a function for which the plurality of arguments would produce an incomputable result.","The embodiments of the present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of different embodiments of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order that the advantages of the different embodiments of the invention will be readily understood, a more particular description of the embodiments briefly described above will be rendered by reference to specific embodiments that are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the embodiments will be described and explained with additional specificity and detail through the use of the accompanying drawings, in which:",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
