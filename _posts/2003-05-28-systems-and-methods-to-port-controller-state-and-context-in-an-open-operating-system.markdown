---
title: Systems and methods to port controller state and context in an open operating system
abstract: The present invention relates to systems and methods to port controller state and context via non-volatile portable memory to controllers employing an open operating system. The present invention provides for saving a controller's state and context, for example after the controller has been suitably configured. The saved image can then be employed for subsequent controller startups to resume a particular state and context, utilized during maintenance to return a controller to a previously saved state and context, and employed to efficiently configure similar controllers via porting and/or loading the saved image to the similar controllers, which mitigates manual controller configuration. The present invention can be employed in connection with various industrial controller designs, memory configurations, and data transfer techniques. In addition, the present invention provides for serial and/or concurrent state and context transfers between controllers and memory devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07050859&OS=07050859&RS=07050859
owner: Rockwell Automation Technologies, Inc.
number: 07050859
owner_city: Mayfield Heights
owner_country: US
publication_date: 20030528
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation-in-part application of U.S. patent Ser. No. 10\/261,649, now U.S. Pat. No. 6,901,298 filed Sep. 30, 2002 entitled SAVING & RESTORING CONTROLLER STATE & CONTEXT IN AN OPEN OPERATING SYSTEM, which is hereby fully incorporated by reference.","The present invention generally relates to industrial control systems, and more particularly to systems and methods to port an industrial controller's state and context via non-volatile, portable memory.","The programmable logic controller (\u201cPLC\u201d or \u201ccontroller\u201d) is commonly used in industry in connection with electrical, mechanical, hydraulic and pneumatic systems and processes to control the systems and processes. Control is typically achieved via virtual relays, contactors, counters, timers and other electromechanical devices, for example. The controller can encapsulate the virtual devices and functionality through hardware, software and firmware that can be configured by a user (e.g., user written, application specific code).","Typically, a User Interface (UI) is utilized to configure a controller, for example to write and download user programs. For example, the UI can be employed to customize a controller for a particular process. Customization can be applied through control software that can be stored in the controller's memory and\/or by changing the hardware configuration of the controller. Employing configurable controllers provides the user with a customizable control mechanism that can be employed to semi-automate and\/or automate a factory, which can reduce operating cost, mitigate maintenance and increase flexibility.","The basic controller comprises a plurality of modules such as a control module(s), an interface module(s) and an I\/O module(s), for example, that can be interchangeable (e.g., hot swapping) and replaceable. The modules additionally can provide access between the controller and the environment. For example, the I\/O module can be employed to interact with other controllers and devices, and various other stimuli. For example, an input channel of the I\/O module can be employed to receive analog and digital signals through sensors, switches and the like that provide information indicative of state(s) (e.g., on\/off) and\/or relating to a process(s). The received input can be stored in memory and utilized to determine a next state. For example, programmable code running in system memory can execute instructions (e.g., in a sequential manner) and can employ the saved input to determine the next state. An output channel of the I\/O module can then be employed to convey the next state to an instrument under the control of the controller.","The industrial controller differs from a conventional (e.g., general purpose) computer in several aspects. For example, unlike conventional computers, an industrial controller is designed to operate in an industrial environment with varying temperatures, humidity, pressure, electrical noise, mechanical vibration and particulates in the air. Moreover, the controller can be designed for quick access for installation, maintenance and troubleshooting by plant personnel, and to operate within often-harsh operating conditions indicative of a manufacturing environment.","A single controller can be employed to control an individual device or multiple devices. Likewise, multiple controllers can be employed to control an individual device or multiple devices. Employing multiple controllers provides for distributed control in a plant, wherein control can be delineated amongst various controllers that can be operative to a similar backplane and\/or coupled through one or more communication links, and can be selectively employed. However, configuring multiple controllers can be time inefficient. For example, independently setting-up a plurality of controllers with a substantially similar configuration can be time consuming. In addition, replacing a controller and\/or controller hardware typically entails configuring the replacement and\/or the modified controller with the previous configuration, which can increase maintenance cost and plant downtime.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is intended to neither identify key or critical elements of the invention nor delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","The present invention relates to systems and methods to save a state and context associated with a controller employing an open operating system, and subsequently utilize the saved state and context as a startup image for the controller and\/or similar controllers. In general, a controller can be setup for a particular application such as controlling one or more devices. In many instances, it can be advantageous to save a mirror image of the controller state and context and customer programs in a non-volatile, portable memory device. For example, the saved image can then be employed to mitigate manual configuration (e.g., re-configuration) of the controller and\/or manual configuration of the similar controllers. Thus, the foregoing can reduce the amount of time, and thus cost, associated with restoring\/resuming the controller's configuration and\/or configuring a plurality of similar controllers. In addition, the foregoing can eliminate manual entry errors that can result in incorrect operation and time spent to correct the problems.","In one aspect of the present invention, a system comprising an information management component and a portable storage component (e.g., portable memory) is illustrated. The system can be employed in connection with an industrial controller and\/or PLC employing an open operating system. The information management component can interface the controller and the portable storage component, and can be employed to copy a controller state and context (e.g., operating system context) to the portable storage component and\/or load a saved state and context from the portable storage component to the controller. The foregoing provides for saving a controller's state and context such that it can be employed as a startup image for subsequent controller startups, to return a controller to a particular state and context (e.g., after maintenance) and to configure similar controllers.","In another aspect of the present invention, a method to save controller state and context to portable memory is illustrated. The method comprises interfacing a portable memory such as flash memory to a controller. After the controller is suitably configured, a manual and\/or automatic mechanism (e.g., on-demand) can be employed to initiate a save request. Upon receiving the save request, any portable memory operative to the controller is identified via techniques including polling for devices and\/or intelligent identification. If no portable memory is located, then the save request is aborted and\/or the operator can be notified. However, if portable memory is located, then the integrity of the portable memory is verified. Then, the current state and context, customer applications, and a signature (e.g., electronic) can be copied to the portable memory. The signature can provide a mechanism to mitigate porting the saved state and context to non-compatible controllers via providing and\/or denying access to the image. Optionally, verification and validation can be subsequently employed to ensure the integrity of the saved state and context.","In another aspect of the present invention, a method to load a saved controller state and context is illustrated. After interfacing a portable memory with a saved state and context with a controller, a manual and\/or automatic mechanism can be employed to provide a load request. The load initiates a search for portable memory coupled to the controller. Portable memory that is located can be scrutinized to determine whether a valid state and context image exists. If a valid image does not exist, then the load request can be aborted and\/or the operator can be notified. However, if a valid image exists, then the signature can be checked to ensure that the image and controller are compatible. After verification, the state and context can be transferred from the portable memory to the controller, and employed by the controller.","In yet another aspect of the present invention, a method to employ a saved controller state and context as a startup image is illustrated. Upon controller startup, portable memory operative to the controller is identified and searched for valid state and context, and a signature indicative of the compatibility. If a compatible and valid image exists, the image is loaded and employed by the controller. Optionally, the controller can be cycled through a warm boot in order to load the state and context in the controller's flash memory, if such memory exists. If portable memory is not located, then the controller's non-volatile memory is searched for a saved state and context. If a valid image exists, the image is loaded and employed by the controller. Similar to the above, the controller can be warm booted to facilitate updating the controller. If it is determined that a compatible and valid image is not accessible, then the controller can be cycled through a cold boot, wherein a default, or minimal configuration, can be loaded and\/or the operator can provide a manually loaded configuration.","Additional aspects of the present invention provide for transferring state and context between one or more controllers and one or more memories, while employing various components to facilitate the transfers. Furthermore, exemplary controllers are provided that can employ the novel aspects of the invention. Moreover, the exemplary controllers can be associated with various data transfer techniques and memory configurations, including the employment of magnetoresistive random access memory (MRAM).","The following description and the annexed drawings set forth in detail certain illustrative aspects of the invention. These aspects are indicative, however, of but a few of the various ways in which the principles of the invention may be employed and the present invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It may be evident, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate describing the present invention.","As used in this application, the term \u201ccomponent\u201d is intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a computer component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers. A thread is the entity within a process that the operating system kernel schedules for execution. As is well known in the art, each thread has an associated context, which is the volatile data associated with the execution of the thread. A thread's context includes the contents of system registers and the virtual address belonging to the thread's process. Thus, the actual data comprising a thread's context varies as it executes.","The present invention relates to systems and methods to save and port a controller's state and context. Saving the state and a context can provide an image that can be loaded (e.g., employed as a system startup image) during subsequent startups (e.g., application restarts, system boots and power cycles). Thus, the image can be employed to facilitate restoring the state and the context of a controller, for example after system maintenance and\/or component replacement. Saving the state and the context to portable medium provides an image that can be ported to a similar system and employed as the similar system's startup image. The foregoing can facilitate configuring a plurality of similar systems, which can reduce setup costs and conserve time.","Referring to , a system  that facilitates generating and\/or porting a startup image comprising at least a state and context is illustrated in accordance with an aspect of the present invention. The system  comprises an information management component  to facilitate the transfer of state and context and a portable storage component  to store state and context. The system  can be utilized in connection with a process control device (not shown) such as an industrial controller and\/or a programmable logic controller (PLC) employing an open operating system, for example.","The information management component  can be utilized to copy the device's state and context (e.g., including operating system context) to the portable storage component . For example, after device configuration or setup, the information management component  can be employed to access the device's memory (e.g., flash), mirror the state and context and any executing application code, and concurrently and\/or subsequently write the mirrored image to the portable storage component .","In one aspect of the present invention, the information management component  can be manually activated (e.g., on demand) by an external and\/or internal stimulus. For example, after the device has been setup and is running in a suitable manner, a user can launch the information management component  to save the device's state and context. The launching mechanism can be electro-mechanically based, such as a switch, a lever, a button, and\/or voice activation, for example, and\/or software based, such as an option within a software application and\/or menu executing on the device. In another example, the saving mechanism can be automatically initiated, for example after an event, an interrupt, a control signal and the like that is deployed by the device. In yet another example, the information management component  can be executed based on a preset time interval, a statistical inference and\/or by another device such as a master device.","It is to be appreciated that the information management component  can additionally be utilized to save state and context at any time during configuration. For example, a user can decide to save state and context during configuration, halt or postpone configuration, and resume configuration at a later time. In addition, a corrupt state and context can be saved that can be utilized for troubleshooting the device and\/or debugging code. For example, a library can be constructed from corrupt state and context, and utilized by a diagnostic component (not shown) to analyze a malfunctioning device.","Additionally, the information management component  can be utilized to copy state and context from the portable storage component  and to facilitate loading the device with the copied state and context. For example, as noted above, the device's state and context can be saved to the portable storage component , for example after the device is configured and operating in a suitable manner. The saved state and context can then be employed as a startup image for subsequent device startups in order to return the device to a particular state and context. Thus, the present invention mitigates manual device re-configuration (e.g., re-programming) after startup via providing a novel mechanism to efficiently return the device to a particular state and context. Additionally, the saved state and context can be ported via the portable storage  to a similar device(s), and utilized as the startup image for the similar device, as described in detail below.","Similar to saving the state and context to the portable storage component , the information management component  can be user and\/or automatically activated (e.g., as described previously) to load the state and context from the portable storage component  to the device. For example, a toggle mechanism (e.g., a switch and a lever) can be employed to enable\/disable the employment of the stored image after a device startup. For example, the mechanism can be configured such that the stored image is available. Then, the information management component  can access the portable storage component  during a device restart in order to load the saved state and context to the flash memory of the device, for example. In another example, the mechanism can be configured to disable access to the portable storage component . Under such circumstances, the saved state and context will not be loaded after restarting the device. Instead, a default state and context, such as a minimal set of parameters, and\/or a configuration utility can be employed.","The portable storage component  is typically non-volatile storage, for example flash memory. However, it is to be appreciated that the portable storage component  can be volatile storage interfaced with a power source (e.g., a rechargeable battery) to sustain memory content and\/or magnetic random access memory (MRAM) (e.g., described infra in connection with ). As such, the portable storage component  can be decoupled from the information management component , wherein the saved state and context remain stored on the portable storage component . The portable storage component  can then be interfaced with an information management component and\/or other suitable component employed in connection with at least one other device. The state and context residing on the portable storage component  can then be loaded as a startup image for the at least one other device.","The interface between the information management component  and the portable storage component  can be a high-speed data\/control link. Such links can be uni-directional and\/or bi-directional, and can convey information serially and\/or in parallel. In addition, data and control can be transmitted over shared and\/or dedicated channels. Moreover, such paths can be, for example, electrical and\/or optical, and can include protocols such as Ethernet (e.g., Gigabyte), Fire Wire and\/or other known high-speed communication protocols.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIGS. 2\u20134"},"Proceeding to , a methodology  that can be employed to store controller state and context to portable memory (e.g., portable storage component ) is illustrated in accordance with an aspect of the present invention. At reference numeral , a request to save state and context is received. Typically, before a request is submitted, the controller is configured and is operating in a suitable manner, and portable memory is interfaced to the controller. Furthermore, it is to be appreciated that the controller's system memory can comprise at least the portable memory, and thus removing the portable memory can render the controller inoperable. In other configurations, the controller's system memory can include local memory and\/or flash memory, and the portable memory can be utilized to save and port state and context, as described in detail below.","As noted supra, a save request in accordance with the invention can be manual and\/or automatic. For example, a controller can be configured for a particular applications and\/or basic operation. Then, a manual mechanism such as an on-demand control (e.g., hardware and software) can be employed to initiate saving the controller's state and context. In another example, ending, halting and\/or completing controller configuration can automatically initiate saving the controller's state and context. For example, discontinuing configuration (e.g., prior to and\/or after completion) can elicit an electrical and\/or optical signal, the toggling of a bit, a flag, and\/or an interrupt request, for example.","After receiving the save request, portable memory is detected at  to determine whether portable memory is available. In one aspect of the present invention, plug-and-play based technology can be employed, wherein merely coupling (e.g., via a bus, a network, an interface and a proprietary protocol) portable memory with the controller can facilitate establishing the existence of the memory. In another aspect of the present invention, a polling technique can be employed to identify any and all of the devices, including memory modules, coupled to the controller. The polling technique can be based on a time interval, on-demand and\/or manually initiated.","If portable memory cannot be detected, then at  the save request can be aborted. For example, portable memory may not be present. For example, in one aspect of the invention, the controller state and context can be saved to the portable memory, and then the portable memory can be removed. In another aspect of the present invention, the portable memory may be installed incorrectly such that it cannot be identified. In yet another example, the portable memory may be defective and\/or the state and context may be corrupt.","After ensuring portable memory exists, then at  the portable memory can be scrutinized to determine whether the memory is corrupt and\/or whether a valid image currently resides on the memory. For example, the portable memory can be inspected to ensure the integrity via performing small and large data write\/read tests, validating checksums and scrutinizing the physical medium cell-by-cell. In addition, a controller's state and context may have been previously saved to the portable memory. The saved image may or may not be valid for the controller. In another example, the controller may have been employing a saved image residing within the portable memory that has become obsolete due to a change in the controller's state and context. In yet another example, the state and context from a similar controller(s) may have been stored on the portable memory.","If it is determined that a valid image is not stored on the portable memory, then at  the current state and context, and optionally any executing applications, can be copied from the controller to the portable memory. In addition to the state and context, an identifier such as a hardware and\/or firmware signature can be saved to associate the state and context with devices that can employ the state and context. For example, if a controller recognizes the portable memory and that the portable memory includes a valid image, then the signature can be employed to provide and\/or deny access to the valid image. For example, the image can be valid, but may not be compatible with the hardware and\/or firmware. In another example, the signature can be employed as a security mechanism to selectively determine which devices can employ the image.","If a valid image is stored on the portable memory, then at  a decision is rendered as to whether the save should be aborted or continued. For example the user can be prompted that a valid image already exists. The prompt can include an error and\/or warning message, and can provide information such as the date the image was saved, the signature, hardware releases, software versions, and\/or other information indicative of the state and context. The user can then determine whether to continue or abort the save. In another example, the controller utilizes the foregoing information and renders the decision to continue or abort. The controller can employ \u201cintelligence\u201d to facilitate the decision. For example, a neural network, Bayesian theory and\/or other learning techniques can be employed to facilitate the decision.","Determining to abort concludes the save process at reference numeral . Determining to continue initiates the transfer of an image of the state and context, including a signature, to the portable memory. Optionally, a verification and validation can be subsequently employed to ensure the integrity of the saved state and context. For example, techniques such as error checking and a data comparison between the controller's state and context and the copy can be employed. If errors are located, then the transfer can be retried and\/or the user can be notified.","It is to be appreciated that prior to saving the information, any valid image that was previously stored on the portable memory can be removed, invalidated, or tagged to prevent its utilization. In addition, the existing image can be moved to an archive location for a historical record and\/or a back-up image. In another aspect of the present invention, the current state and context can be saved, or written over the existing image.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 3","b":["300","310","200"]},"At reference numeral , any portable memory coupled to the controller is identified to determine whether a valid state and context image exists. As noted previously, various techniques can be employed to detect portable memory. For example, polling techniques and\/or intelligent techniques (e.g., plug-and-play technology) can be employed. If valid portable memory is not located, then loading can be aborted or halted. In addition, a message can be provided to the operator to facilitate mitigating halting subsequent loading prior to completion. For example, the message can indicate a solution that will allow loading to continue.","If portable memory is detected, then at  the portable memory is inspected to ensure memory and image integrity. For example, the inspection can employ techniques to determine whether the memory is corrupt, the image is valid and\/or the image is compatible. Similar to the above, corrupt memory, an invalid image, and\/or an inaccessible image can result in aborting the load request, and can elicit an error and\/or warning message. In other aspects of the invention, loading is aborted without any notification. Such techniques can be utilized to reduce overhead and can be employed when the quantity of memory is limited. After verifying the memory is not corrupted and that the image is valid, the signature can be checked to determine whether the image is compatible with the controller.","Then at , the saved image (e.g., state and context, and customer applications) can be transferred from the portable memory to the controller's memory (e.g., flash) at reference numeral , and employed by the controller. Additionally, the controller can cycle through a warm boot to facilitate operation (e.g., update the controller's flash memory).","It is to be appreciated that the portable memory can remain interfaced with the controller for subsequent image loads, for example during subsequent startups, as described in detail below. Additionally, the image can be transferred to local memory within the controller, and then loaded from the controller's local memory instead of the portable memory. In other aspects of the invention, the image stored on the portable memory can be written over and\/or deleted via a subsequent state and context save, and\/or utilized in connection with another controller to port the state and context to the other controller.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 4","b":["400","410"]},"If portable memory is not detected, then the controller can be searched for memory that can store state and context, as described below. If portable memory is detected, then the portable memory can be searched for a valid state and context at reference numeral . When the portable memory does not include a valid image, then again the controller can be searched for memory with state and context (described below). However, if the portable memory includes a valid image, then at , the compatibility of the state and context is determined.","If the state and context is deemed incompatible via a signature, for example, then again the controller can be searched for memory with state and context. As briefly noted, the saved image can include a signature. The signature can be utilized to mitigate employing an incompatible state and context by providing access to the state and context when the signature is compatible with the controller. Upon discerning a compatible image at , the saved state and context can be loaded into the controller at , and employed as the controller's state and context. In addition, the controller can cycle through a warm boot at  to facilitate controller configuration, wherein the memory content (including the state and context) is sustained during the warm boot. Typically, a cold boot will alter the content of the working memory, which can remove and\/or corrupt the state and context stored therein.","As noted above, if portable memory, a valid image on the portable memory, or a compatible image on the portable memory is not detected, then at  the controller is searched for system memory with a saved state and context. If such memory is not located, then a cold boot is employed at . The cold boot can be utilized to set the controller's state and context to a default and\/or provide the operator with a mechanism to configure the controller's state and context. If such memory is located, then at  the memory is searched for a valid state and context, and if a valid state and context is present, then the state and context is loaded and the controller can proceed through a warm boot at . Otherwise, the controller is cycled through a cold boot at .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 5","b":["500","500","510","520","520","520","530","530","530","520","520","520","530","530","530"],"sub":["1","2","N","1","2 ","N","1","N ","1","N "]},"The control unit  can be an individual computational system such as a computer and a workstation, for example, that can interface to the controllers  and\/or the portable storage devices  via a bus, a network and\/or any known data and control communication protocols, including USB (Universal Serial Bus), RS-232, Ethernet (e.g., utilizing category 5, shielded, twisted pair cable) and Firewire, for example. In addition, the control unit  can comprise at least one microprocessor, local memory, registers, buffers, a logic unit, a power supply, and other components that are typically associated with devices that can process programmable code, control bus traffic and manage devices. Furthermore, the control unit  can interface with components such as a display, a mouse (e.g., optical, a rollerball and wireless), a keyboard, a keypad, a CD read\/write, a DVD player, an optical drive, a tape drive, and other input\/output (I\/O) components. In another aspect of the present invention, the control unit  can be a component operatively coupled to a computational system (as described above), wherein the combination of the control unit  and the computational system can provide the ability to save and load state and context.","The control unit  can be employed to manage the transfer of state and context between the controllers  and the portable storage devices . For example, after configuring the controllers , the associated state and context can be copied to the corresponding portable storage devices . Likewise, stored state and context can be ported from the portable storage devices  to the controllers .","In one aspect of the present invention, the controllers  and the corresponding portable storage devices  can then be provided to customers, wherein the state and context stored on the portable storage devices  can be employed by the customer to facilitate customer configuration of the controllers . In another aspect of the present invention, the controllers  can be replaced with similar controllers, and the saved state and context can be ported from the portable storage devices  to the similar controllers. Thus, one of a plurality of similar controllers can be manually configured, and the remaining similar controllers can be configured via porting the saved state and context to the other similar controllers. In yet another aspect of the present invention, a saved state and context can be ported to one of the controllers  wherein the state and context can be modified and then subsequently saved to the corresponding portable storage device  to replace the previously saved state and context.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 6","b":["600","600","610","620","630","640","650"]},"The storing unit  can be employed to interface the portable memory  with the controllers \u2013 and facilitate state and context copying. The storage unit  can comprise internal logic to manage the transfer of the controllers \u2013 state and context to the portable memory . For example, the storage unit  can allocate, or designate memory for each of the controllers \u2013 within the portable memory . In addition, the storing unit  can determine which of the controllers \u2013, including none and all, can write to the portable memory .","In one aspect of the present invention, the portable memory  comprises at least enough storage space to save the state and context of the controllers \u2013 and indicia identifying which state and context image corresponds to which controller. After storing the state and context of the controllers \u2013 to the portable memory , the portable memory  can be employed to port the saved state and context, for example via the system  described next.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 7","b":["700","700","710","620","630","610","710","620","630","650","710","630","650","710","630","650","710","630","650"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 8","b":["800","800","800","810","820","830","840","850","860","870","800","800"]},"The CPU  can facilitate data reads and writes, perform operations and execute instructions in connection with the controller . The input module  and the output module  can be employed to convey information between the controller  and the environment. The on-board power supply  can be employed to convert and distribute power to at least one other component of the controller . The system memory  can be utilized to store application code, instructions, data, addresses, user programs, variables, data tags and tables.","Typically, the state and context of the controller  resides in the system memory , which can comprise volatile and non-volatile memory such as synchronous dynamic RAM (SDRAM), dynamic RAM (DRAM), fast page RAM (FPRAM) and extended data-out RAM (EDORAM), for example. The volatile RAM is commonly utilized by for the operating system, run time applications and user programs. The non-volatile memory typically retains its contents, even without power. Examples of non-volatile memory include flash memory, hard disk, programmable read only memory (PROM) and ROM. Flash and hard disk memory are read\/write; That is, they can be written to and read from multiple times. PROM memory exists in write-once form. Once the write is performed, then the memory can only be read. Two variations of PROM are erasable programmable ROM (EPROM), which can be erased with the aid of WV light before programming, and electrically erasable programmable ROM (EEPROM), which can be electrically written over. ROM is typically strictly read only. For controllers, ROM is commonly the area where the basic input\/out system (BIOS) and OS are located.","As depicted, the controller  can be interfaced to the portable memory . The portable memory can be employed to save the state and context of the controller  in a sustainable memory for subsequent start-ups, and\/or to port a particular state and context to similar controllers. The similar controllers can then employ the state and context as a start-up image.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 9","b":["900","900","910","920","920","910"]},"In one aspect of the present invention, the operating state and context of the controller can reside in a memory bank , within the system memory , that comprises memory Data_SM\u2013Data_SM. After receiving a save state and context request, the controller's state and context can be copied from the memory bank  to the memory bank  within the portable memory . For example, Data_SMcan be copied to Data_PM, Data_SMcan be copied to Data_PM, and Data_SMcan be copied to Data_PM. Thus, after saving the controller's state and context, the portable memory data bank  can comprise a copy of system memory data bank . In addition, the portable memory  can further include overhead , which can include, for example, information relating to the saved state and context.","It can be appreciated that a similar scheme can be employed to port and\/or load state and context from portable flash memory  to the system memory , for example, after receiving a load request. For example, Data_PMcan be copied to Data_SM, Data_PMcan be copied to Data_SM, and Data_PMcan be copied to Data_SM. Thus, after porting the saved state and context, the system memory data bank  can comprise an operating copy of the state and context.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 10","b":["1000","1000","1010","1020","1030"]},"In general, the MRAM  can be constructed similarly to integrated DRAM, wherein cells can be arranged in substantially parallel row lines and column lines. The parallel row lines are typically transversely aligned to the column lines. Typically, each of the memory cells is wired between one of the row lines and one of the column lines, and electrically connected to the respective column line and row line. The column lines can be connected to an amplifier that reads the data signal of the memory cells. Reading can be accomplished by measuring a detectable current on the column line.","Unlike DRAM, the MRAM  generally does not include diodes or transistors to connect memory cells to respective column lines for addressing. Thus, the MRAM  can provide for various memory cell arrangements such as stacking cells, for example. One advantage of the foregoing is that the MRAM  can be constructed within a smaller footprint. The size reduction additionally provides for constructing MRAM that is similar in size to DRAM and\/or flash memory, but includes more memory bits per chip.","The MRAM  additionally provides memory that does not require power to operate and\/or sustain its content. Thus, employing the MRAM  as a removable, or portable memory device provides the ability to save controller state and context and employ the saved image as a start-up image for the controller and\/or port the saved image to substantially similar controllers. Thus, the MRAM  can be utilized in a manner similar to the portable and flash memory described herein.","What has been described above includes examples of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications, and variations that fall within the spirit and scope of the appended claims.","In particular and in regard to the various functions performed by the above described components, devices, circuits, systems and the like, the terms (including a reference to a \u201cmeans\u201d) used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., a functional equivalent), even though not structurally equivalent to the disclosed structure, which performs the function in the herein illustrated exemplary aspects of the invention. In this regard, it will also be recognized that the invention includes a system as well as a computer-readable medium having computer-executable instructions for performing the acts and\/or events of the various methods of the invention.","In addition, while a particular feature of the invention may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes,\u201d and \u201cincluding\u201d and variants thereof are used in either the detailed description or the claims, these terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
