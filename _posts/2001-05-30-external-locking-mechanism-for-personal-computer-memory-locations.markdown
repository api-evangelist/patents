---
title: External locking mechanism for personal computer memory locations
abstract: A method and system for providing an external locking mechanism for memory locations. The memory includes a first plurality of storage locations configured with BIOS data and a second plurality of storage locations. The second plurality of storage locations includes a first plurality of blocks readable only in SMM and a second plurality of blocks readable in SMM and at least one operating mode other than SMM. The computer system includes a bus, a memory coupled to the bus, and a device coupled to access the memory over the bus. The memory includes a plurality of storage locations, divided into a plurality of memory units. The device includes one or more locks configured to control access to one or more of the plurality of memory units.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07149854&OS=07149854&RS=07149854
owner: Advanced Micro Devices, Inc.
number: 07149854
owner_city: Austin
owner_country: US
publication_date: 20010530
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF INVENTION","MODE(S) FOR CARRYING OUT THE INVENTION"],"p":["This invention relates generally to computing systems, and, more particularly, to an external locking mechanism for controlling access to memory locations, e.g. the ROM BIOS, in a personal computer system.",{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1A","b":["100","100","102","104","106","108","110","112","114","116","118","120","122","104","112","100"]},"The processor  is coupled to the north bridge . The north bridge  provides an interface between the processor , the memory , the AGP memory , and the PCI bus . The south bridge  provides an interface between the PCI bus  and the peripherals, devices, and subsystems coupled to the IDE interface , the USB interface , and the LPC bus . The battery  is shown coupled to the south bridge . The Super I\/O\u2122 chip  is coupled to the LPC bus .","The north bridge  provides communications access between and\/or among the processor , memory , the AGP memory , devices coupled to the PCI bus , and devices and subsystems coupled to the south bridge . Typically, removable peripheral devices are inserted into PCI \u201cslots\u201d (not shown) that connect to the PCI bus  to couple to the computer system . Alternatively, devices located on a motherboard may be directly connected to the PCI bus .","The south bridge  provides an interface between the PCI bus  and various devices and subsystems, such as a modem, a printer, keyboard, mouse, etc., which are generally coupled to the computer system  through the LPC bus  (or its predecessors, such as an X-bus or an ISA bus). The south bridge  includes the logic used to interface the devices to the rest of computer system  through the IDE interface , the USB interface , and the LPC bus .",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1B","b":["112","113","125","112","126","128","125","126","126","126","126","129","127","112","125","132","133","134","134","134","134"]},"Time and date data from the clock circuit  are stored as the clock data  in the RTC RAM B. The checksum data  in the RTC RAM B may be calculated based on the CMOS RAM A data and stored by BIOS during the boot process, such as is described below, e.g. block , with respect to . The CPU interface  may include interrupt signal controllers and processor signal controllers. The power and system management units  may include an ACPI (Advanced Configuration and Power Interface) controller.","System Management Mode (SMM) is a mode of operation in the computer system that was implemented to conserve power. The SMM was created for the fourth generation x86 processors. As newer x86 generation processors have appeared, the SMM has become relatively transparent to the operating system. That is, computer systems enter and leave the SMM with little or no impact on the operating system.","Referring now to the drawings, and in particular to , a flowchart of a prior art method of initializing a computer system using code stored in the BIOS  is shown. During initialization of the power supply, the power supply generates a power good signal to the north bridge, in block . Upon receiving the power good signal from the power supply, the south bridge (or north bridge) stops asserting the reset signal for the processor, in block .","During initialization, the processor reads the default jump location in block . The default jump location in memory is usually at a location such as FFFF0h. The processor performs a jump to the appropriate BIOS code location (e.g. FFFF0h) in the ROM BIOS, copies the BIOS code to the RAM memory, and begins possessing the BIOS code instructions from the RAM memory, in block . The BIOS code, processed by the processor, performs a power-on self test (POST), in block .","The BIOS code next looks for additional BIOS code, such as from a video controller, IDE controller, SCSI controller, etc. and displays a start-up information screen, in block . As examples, the video controller BIOS is often found at C000h, while the IDE controller BIOS code is often found at C800h. The BIOS code may perform additional system tests, such as a RAM memory count-up test, and a system inventory, including identifying COM (serial) and LPT (parallel) ports, in block . The BIOS code also identifies plug-and-play devices and other similar devices and then displays a summary screen of devices identified, in block .","The BIOS code identifies the boot location, and the corresponding boot sector, in block . The boot location may be on a floppy drive, a hard drive, a CDROM, a remote location, etc. The BIOS code next calls the boot sector code at the boot location to boot the computer system, such as with an operating system, in block .","It is noted that for a cold boot or a hard (re)boot, all or most of the descriptions given in blocks \u2013 may occur. During a warm boot or a soft (re)boot the BIOS code usually jumps from block  into block , skipping the POST, memory tests, etc.","In , a flowchart of a prior art method of operating a computer system in SMM using code stored in the BIOS  is shown. An interrupt controller receives a request for SMM, in block . The interrupt controller signals the request for SMM to the processor by asserting a system management interrupt (SMI#) signal, in block .","The processor recognizes the request for SMM and asserts an SMI ACTive (SMIACT#) signal, in block . The system recognizes the SMIACT# signal, disables access to the system RAM, and enables access to system management RAM (SMRAM) space, in block .","The current processor state is saved to SMRAM, in block . The processor resets to the SMM default state and enters SMM, in block . The processor next reads the default pointer and jumps to the appropriate place in SMRAM space, in block . In block , the source and\/or nature of the SMI request is identified.","An SMI handler services the SMI request, in block . After servicing the SMI request, the SMI handler issues a return from SMM (RSM) instruction to the processor, in block . Upon operating on the RSM instruction, the processor restores the saved state information and continues normal operation, in block .","From a hardware point of view, an x86 operating environment provides little for protecting user privacy, providing security for corporate secrets and assets, or protecting the ownership rights of content providers. All of these goals, privacy, security, and ownership (collectively, PSO) are becoming critical in an age of Internet-connected computers. The original personal computers were not designed in anticipation of PSO needs.","From a software point of view, the x86 operating environment is equally poor for PSO. The ease of direct access to the hardware through software or simply by opening the cover of the personal computer allows an intruder or thief to compromise most security software and devices. The personal computer's exemplary ease of use only adds to the problems for PSO.","In one aspect of the present invention, a computer system is provided. The computer system includes a bus, a memory coupled to the bus, and a device coupled to access the memory over the bus. The memory includes a plurality of storage locations, divided into a plurality of memory units. The device includes one or more locks configured to control access to one or more of the plurality of memory units. In various embodiments, the locks may include a plurality of registers. One or more entries in one or more of the plurality of registers may indicate an access control setting for one or more of the memory units.","In another aspect of the present invention, a memory is provided. The memory includes a first plurality of storage locations configured with BIOS data; and a second plurality of storage locations. The second plurality of storage locations includes a first plurality of blocks readable only in SMM and a second plurality of blocks readable in SMM and at least one operating mode other than SMM.","In still another aspect of the present invention, a method for operating a computer system is provided. The method includes requesting a memory transaction for one or more memory addresses and determining a lock status for the one or more memory addresses. The method also includes returning the lock status for the one or more memory addresses and determining if the lock status for the one or more memory addresses can be changed if the lock status indicates that the memory transaction for the one or more memory addresses is not allowed. The method also includes changing the lock status of the one or more memory addresses to allow the memory transaction if the lock status of the one or more memory addresses can be changed.","In still another aspect of the present invention, another method of operating a computer system is provided. This method includes issuing a request from a first device for a memory transaction for a memory location and receiving the request for the memory transaction at a second device that does not include the memory location or a copy of the contents of the memory location. This method also includes returning a response from the second device to the first device issuing the request for the memory transaction.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof have been shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the description herein of specific embodiments is not intended to limit the invention to the particular forms disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the scope of the invention as defined by the appended claims.","Illustrative embodiments of the invention are described below. In the interest of clarity, not all features of an actual implementation are described in this specification. It will, of course, be appreciated that in the development of any such actual embodiment, numerous implementation-specific decisions must be made to achieve the developers' specific goals, such as compliance with system-related and business-related constraints, which will vary from one implementation to another. Moreover, it will be appreciated that such a development effort might be complex and time-consuming, but would nevertheless be a routine undertaking for those of ordinary skill in the art having the benefit of this disclosure. The use of a letter in association with a reference number is intended to show alternative embodiments or examples of the item to which the reference number is connected.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 3","b":["260","205","210","210","215","100","215","220","225","230"]},"According to one aspect of the present invention, the drivers  and the hardware  are part of a secure execution box configured to operate in a secure execution mode (SEM) . Trusted privacy, security, and ownership (PSO) operations, also referred to simply as security operations, may take place while the computer system is in SEM . Software calls propagated from the user I\/O  and\/or the applications  may be placed into the secure execution box in SMM  via an SMM initiation register B (or SMM initiator A) discussed below with respect to  (or ). Parameters may be passed into and out of the secure execution box in SEM  via an access-protected mailbox RAM , also discussed below with . The software calls have access to the secure execution box in SEM  to various security hardware resources, such as described in detail below.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["100","370","330","305","330","370","365","134","134","365","102","134","315","118","330","134","305","118","310","305","310","355","305"]},"The security hardware  in the south bridge  may be operable to provide an SMI interrupt request to the IC  for the processor . The security hardware  may also interact with the crypto-processor . Access to the BIOS  is routed through the crypto-processor . The crypto-processor  is configured to accept and transfer access requests to the BIOS . The crypto-processor  therefore may understand the address mappings of the BIOS . According to one aspect of the present invention, the security hardware  allows the computer system  to become an embodiment of the secure execution box  shown in . It is noted that the IC  may be included in the processor instead of the south bridge . The IC  is also contemplated as a separate unit or associated with another component of the computer system . It is also noted that the operations of the LPC bus  may correspond to the prior art Low Pin Count Interface Specification Revision 1.0 of Sep. 29, 1997. It is further noted that the USB interface logic C may couple to the LPC BIL D is any of a variety of ways, as is well known in the art for coupling different bus interface logics in a bridge.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIGS. 5A and 5B","FIG. 5A"],"b":["330","370","330","370","365","370","402","420","100","402","410","415","425"]},"As shown in , the control logic  is coupled to control operation of the SMM access controller A and the SMM initiator A. Input and output (I\/O) to the security hardware A pass through the SMM access filters  and are routed through the control logic A.","The SMM timing controller A includes the duration timer A, which measures how long the computer system  is in SMM. The kick-out timer A, also included in the SMM timing controller A, counts down from a predetermined value while the computer system  is in SMM. The control logic A is configured to assert a control signal (EXIT SMM ) for the processor to exit SMM, such as in response to the expiration of the kick-out timer A. The restart timer , included in the SMM timing controller A, starts counting down from a predetermined value after the kick-out timer A reaches zero. The SMM indicator , also included in the SMM timing controller A, is operable to monitor the status of one or more signals in the computer system, such as the SMI# (System Management Interrupt) signal and\/or the SMIACT# (SMI ACTive) signal to determine if the computer system is in SMM. The SMM access controller A includes the SMM access filters , which are configured to accept input requests for the sub-devices within the security hardware A. When the computer system  is in SMM, the SMM access filters are configured to pass access requests (e.g. reads and writes) to the control logic A and\/or the target sub-device. When the computer system  is not in SMM, the SMM access filters are configured to respond to all access requests with a predetermined value, such as all \u20181\u2019s. The SMM access controller A also includes the mailbox RAM . In one embodiment, the mailbox RAM  includes two banks of RAM, such as 512 bytes each, for passing parameters into and out of the secure execution box . Parameters passed to or from the sub-devices included within the security hardware  are exchanged at the mailbox RAM . One bank of RAM , an inbox, is write-only to most of all of the computer system in most operating modes. Thus, parameters to be passed to the sub-devices included within the security hardware  may be written into the inbox. During selected operating modes, such as SMM, both read and write accesses are allowed to the inbox. Another bank of RAM , an outbox, is read-only to most of all of the computer system in most operating modes. Thus, parameters to be received from the sub-devices included within the security hardware  may be read from the outbox. During selected operating modes, preferably secure modes, such as SMM, both read and write accesses are allowed to the outbox.","The SMM initiator A may advantageously provide for a convenient way to request that the computer system  enter SMM. A signal may be provided to the SMM initiator A over the request (REQ) line. The signal should provide an indication of the jump location in SMM memory. The SMM initiator A is configured to make a request for SMM over the SMM request (SMM REQ) line, for example, by submitting an SMI# to the interrupt controller . The SMM initiator A is also configured to notify the control logic A that the request for SMM has been received and passed to the interrupt controller .","In , the south bridge B includes the security hardware B. The IC  is shown external to the south bridge B. The security hardware B includes an SMM access controller B and control logic B. The SMM access controller B includes SMM access filters  and mailbox RAM . An SMM initiation register B is shown external to the south bridge B.","As shown in , the control logic B is coupled to control operation of the SMM access controller B. Input and output (I\/O) signals to the security hardware B pass through the SMM access filters  and are routed through the control logic B. The control logic B is also coupled to receive an indication of a request for SMM from the SMM initiation register B. The SMM access controller B includes the SMM access filters , which are configured to accept input requests for the sub-devices within the security hardware B. When the computer system  is in SMM, the SMM access filters are configured to pass access requests (e.g. reads and writes) to the control logic B and\/or the target sub-device. When the computer system  is not in SMM, the SMM access filters may be configured to respond to all access requests with a predetermined value, such as all \u20181\u2019s. The SMM access controller B also includes the mailbox RAM , described above with respect to .","The SMM initiation register B may advantageously provide for a convenient way to request that the computer system  enter SMM. A signal may be provided to the SMM initiation register B over the request (REQ) line. The signal should provide an indication of the jump location in SMM memory. The SMM initiation register B is configured to provide the indication to the control logic B. The control logic B is configured to make a request for SMM over the SMM request (SMM REQ) line, for example, by submitting an SMI# to the interrupt controller .","It is noted that in the embodiment illustrated in , the SMM initiator A includes internal logic for handling the SMM request. In the embodiment illustrated in , the SMM initiation register B relies on the control logic B to handle the SMM request. It is also noted that the SMM initiator A is part of the security hardware A, while the SMM initiation register B is not part of the security hardware B.   ",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 6","FIGS. 5A and 5B"],"b":["330","370","370","402","420","430","440","455","470","450","445","402","460","410","401","402","420"]},"The embodiment of the SMM access controller  illustrated in  includes the one or more access locks  within the SMM access filters . The access locks  provide a means of preventing (or locking) and allowing (or unlocking) access to one or more of the devices within the security hardware C. Various embodiments for the one or more access locks  are shown in  and described with reference thereto.","In one embodiment, the access locks  are open at reset (OAR), allowing the BIOS software access to the security hardware . The BIOS software then closes the access locks  prior to calling the boot sector code, shown in block  in . In various embodiments, the access locks  may be opened by software or hardware to allow for access to the security hardware . For example, the access locks  may be opened by a signal from the IC  or the processor  or the control logic . The access locks  may be opened in response to an SMI# or in response to the processor  entering SMM. Additional information on the access locks  may be obtained from one or more of the methods A\u2013C described below with respect to .","The TCO counter (or timer)  may include a programmable timer, such as a count-down timer, that is used to detect a lock-up of the computer system . Lock-up may be defined as a condition of the computer system  where one or more subsystems or components do not respond to input signals for more than a predetermined period of time. The input signals may include internal signals from inside the computer system  or signals from outside the computer system , such as from a user input device (e.g. keyboard, mouse, trackball, biometric device, etc.). It is also noted that the lock-ups may be software or hardware in nature. According to various aspects of the present invention, the TCO counter  may be programmed and read from inside SMM. The TCO counter  is preferably programmed with value less than a default duration for the kick-out timer . In one embodiment, the TCO timer  generates an SMI# upon a first expiration of the TCO timer , and the TCO timer  generates a reset signal for the computer system upon a second, subsequent expiration of the TCO timer .","In one embodiment, the TCO timer  may be accessed by the computer system  or software running in the computer system  for the computer system  to recover from lock-ups when the computer system is not in SMM. In another embodiment, the TCO timer  may be accessed by the computer system  both in and out of SMM.","The scratchpad RAM  includes one or more blocks of memory that are available only while the computer system  is in certain operating modes, such as SMM. It is also contemplated that other sub-devices of the security hardware  may use the scratchpad RAM  as a private memory. One embodiment of the scratchpad RAM  includes 1 kB of memory, although other amounts of memory are also contemplated. In one embodiment, the scratchpad RAM is open at reset to all or most of the computer system , while in another embodiment, the scratchpad RAM is inaccessible while the computer system is booting.","The random number generator (RNG)  is configured to provide a random number with a number of bits within a predetermined range. In one embodiment, a new random number with from 1 to 32 bits in length is provided in response to a request for a random number. It is noted that restricting access to the RNG, such as only in SMM, may advantageously force software to access the RNG through a standard API (application programming interface), allowing for increased security and easing hardware design constraints.","The OAR locks  may include a plurality of memory units (e.g. registers), which include associated programming bit (or lock bits) that lock the memory (or memories) used to store BIOS information or other data, for example, BIOS ROM  and SMM ROM  in  below. Each memory unit may have, by way of example, three lock bits associated with it. In one embodiment, four 8-bit registers may store the lock bits for each 512 kB ROM-page, one register for every two 64-kB segment. With sixteen blocks of four registers, a maximum of 8 MB of ROM may be locked. Addressing may be as follows:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["64-kB segment","Register","ADDRESS"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0, 1","Register 0","FFBx,E000h"]},{"entry":["2, 3","Register 1","FFBx,E001h"]},{"entry":["4, 5","Register 2","FFBx,E002h"]},{"entry":["6, 7","Register 3","FFBx,E003h"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The lock registers from the OAR locks  may include:",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Register\\Bits","7","OAR Lock 6:4","3","OAR Lock 2:0"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register 0","Reserved","Segment 1","Reserved","Segment 0"]},{"entry":["Register 1","Reserved","Segment 3","Reserved","Segment 2"]},{"entry":["Register 2","Reserved","Segment 5","Reserved","Segment 4"]},{"entry":["Register 3","Reserved","Segment 7","Reserved","Segment 6"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, one bit controls write access, one bit controls read access, and one bit prevents the other two bits from being changed. In one embodiment, once the locking bit is set (also described as the state being locked down), the write access bit and read access bit cannot be reprogrammed until the memory receives a reset signal. The layout of each register may include:",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"35pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"9","align":"center","rowsep":"1"}}},{"entry":["Bit","7","6","5","4","3","2","1","0"]},{"entry":{"@attributes":{"namest":"1","nameend":"9","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Value","Rsvrd","Lock 2","Lock 1","Lock 0","Rsvrd","Lock 2","Lock 1","Lock 0"]},{"entry":{"@attributes":{"namest":"1","nameend":"9","align":"center","rowsep":"1"}}}]}}}}},"With a decode of the three lock bits including:",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},"Read Lock","Lock-Down","Write Lock",{}]},{"entry":["Decode","Data 2","Data 1","Data 0","Resulting block state"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0 \u00d7 00","0","0","0","Full access"]},{"entry":["0 \u00d7 01","0","0","1","Write locked (default state)"]},{"entry":["0 \u00d7 02","0","1","0","Lock open (full access locked down)"]},{"entry":["0 \u00d7 03","0","1","1","Write locked down"]},{"entry":["0 \u00d7 04","1","0","0","Read locked"]},{"entry":["0 \u00d7 05","1","0","1","Read and write locked"]},{"entry":["0 \u00d7 06","1","1","0","Read locked down"]},{"entry":["0 \u00d7 07","1","1","1","Read and write locked down"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"The embodiment of the security hardware C illustrated in  also includes the OAR override register . The OAR override register  provides a mechanism for allowing (or unlocking) and preventing (or locking) access to one or more of the devices within the security hardware C. The OAR override register  also provides a mechanism to override the access locks . In one embodiment, the OAR override register  includes a first indicator that the access locks  are to be ignored, with access to the security hardware locked by the access locks  either always available or never available, as implemented. The OAR override register  may also include a second indicator that the status of the first indicator may be changed, or not. If the second indicator shows that the first indicator may not be changed, then the device including the OAR override register  preferably needs reset for the second indicator to be changed. In other words, the second indicator is preferably OAR, similar to one embodiment of the access locks .","Methods that include using the access locks  and\/or the OAR override indicators are described below with respect to . Various embodiments for the one or more access locks  are shown in  and described with reference thereto, and an embodiment of the OAR override register  is shown in  and described with reference thereto.","In one embodiment, the access locks  are open at reset (OAR), allowing the BIOS software access to the security hardware . The BIOS software then closes the access locks  prior to calling the boot sector code, shown in block  in . In various embodiments, the access locks  may be opened by software or hardware to allow for access to the security hardware . For example, the access locks  may be opened by a signal from the IC  or the processor  or the control logic . The access locks  may be opened in response to an SMI# or in response to the processor  entering SMM. Additional information on the access locks  may be obtained from one or more of the methods A\u2013C described below with respect to .","It is noted that in one embodiment, all of the security hardware  (and the SMM initiation register B are inside the RTC battery well . In other embodiments, selected sub-devices of the security hardware  are excluded from the RTC battery well . In one embodiment, only a portion of the scratchpad RAM  is inside the RTC battery well  with the remaining portion outside the RTC battery well . For example, in one embodiment, the mailbox RAM  is outside the RTC battery well .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIGS. 7A and 7B","FIG. 7A","FIG. 7B"],"b":["355","550","118","305","610","355","118","555","118","555","355","550"]},"BIOS ROM  memory space in the computer system  may include anywhere from 128 kB to 4 MB, divided into 64 kB segments. An additional one or more 4 MB of SMM ROM  memory space may be addressed via a paging mechanism, for example, where the second page of ROM memory space is within separate chips and selected by an additional set of identification select (IDSEL) pins. Each segment of the BIOS ROM  memory space and the SMM ROM  memory space may be lockable, and open at reset. In one embodiment, the access protection mechanism (i.e. the lock) is not implemented in the BIOS ROM  or SMM ROM , but, for example, in the south bridge C in the security hardware C, as previously described with respect to .","In one embodiment, the BIOS ROM  includes 4 MB of memory space. Read access to the BIOS ROM  memory space may be unrestricted at any time. Write locks on the BIOS ROM  memory space may be OAR and cover the memory space from FFFF,FFFFh to FFC0,0000h, in 32-bit address space on the LPC bus .","In one embodiment, the crypto processor  is a specialized processor that includes specialized cryptographic hardware. In another embodiment, the crypto processor  includes a general-purpose processor programmed with cryptographic firmware or software. In still another embodiment, the crypto processor  includes a general-purpose processor modified with specialized cryptographic hardware.","Other embodiments are also contemplated. For example, the BIOS ROM  may be coupled to the LPC bus , and the crypto processor  may be coupled between the SMM ROM  and the LPC bus . Also, the crypto processor  may be coupled between the extended BIOS ROM  and the LPC bus .",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIGS. 8A and 8B","FIG. 8A"],"b":["355","550","355","608","610","606"]},"As shown in , the SMM ROM  may be divided into a plurality of SMM ROM blocks \u2013, a stored secret D, a plurality of public ROM blocks \u2013, one or more reserved ROM blocks , and one or more registers .","The plurality of SMM ROM blocks \u2013 may include an SMM ROM  block , an SMM ROM  block , and an SMM ROM  block . The plurality of public ROM blocks \u2013 may include a public ROM block   and a public ROM block  . One embodiment of access rights, lock status, and 32-bit address ranges in the LPC bus  space are given here in table form.",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["ROM","READ","WRITE","ADDRESS"]},{"entry":["BLOCK","ACCESS","LOCK","RANGE"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SMM ROM 0","SMM","Write Once","FFBx,1FFFh: FFBx,0000h"]},{"entry":["615","Only"]},{"entry":["SMM ROM 1","SMM","Never Erase","FFBx,3FFFh: FFBx,2000h"]},{"entry":["616","Only"]},{"entry":["SMM ROM 2","SMM","None","FFBx,5FFFh: FFBx,4000h"]},{"entry":["617","Only"]},{"entry":["Public 0","Unrestricted","Write Once","FFBx,9FFFh: FFBx,8000h"]},{"entry":["625",{},"In SMM"]},{"entry":["Public 1","Unrestricted","Never Erase,","FFBx,BFFFh: FFBx,A000h"]},{"entry":["630",{},"Write in SMM"]},{"entry":["Reserved","N\/A","N\/A","FFBx,DFFFh: FFBx,C000h"]},{"entry":"635"},{"entry":["Registers","N\/A","N\/A","FFBx,FFFFh: FFBx,E000h"]},{"entry":"640"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The \u2018x\u2019 in the address ranges given in the table may denote the strapping pin decode or their inverse. In one embodiment, the ROM blocks \u2013 and \u2013 in the table are each 64 kB in size. In one embodiment, the computer system may support up to 8 MB of extended BIOS ROM  storage, divided into sixteen pages of 512 kB each. In another embodiment, the memory address range from FFBx,FFFFh down to FFBx,0000h includes the plurality of SMM ROM blocks \u2013, the plurality of public ROM blocks \u2013, and the one or more registers . The one or more reserved ROM blocks  may be used for future expansion. The one or more registers  may store additional data, as needed.","FIGS. A\u2013G illustrate flowcharts of embodiments of methods A\u2013G that attempt to access the security hardware , which may be locked, according to various aspects of the present invention.  shows a method A of locking the security hardware  as a part of the boot (or cold reboot) process.  shows a method B of unlocking and later locking the security hardware  as a part of a reboot (or warm boot) process.  shows a method C of checking for rights to lock or unlock the security hardware  and checking a bit to disable changing the rights.  shows a method D of attempting to use the security hardware  while the computer system  is not in SMM.  shows a method E of checking and\/or setting the lock on the OAR access locks  and checking the bit to disable changing the lock.  shows a method F of unlocking and later locking the security hardware  while the computer system  is in SMM.  shows a method G of checking for rights to unlock and later lock the security hardware  while the computer system  is in SMM.","Referring now to , the method A includes the processor executing the BIOS code instructions from SMM space in the RAM memory, in block . The BIOS code, executed by the processor, performs a power-on self test (POST), in block . The method A includes accessing the security hardware , in block . The accesses to the computer hardware  may initiate an unlocking of the security hardware , if the security hardware  is not open-at-reset. The accesses to the security hardware  may be by the BIOS code or other device or subsystem in the computer system , or from outside the computer system , if allowed. The method A may optionally include entering a BIOS management mode, in block . The BIOS management mode could allow for, for example, remote booting instructions, remote or secure permission to continue the boot sequence, other remote operations or remote hardware accesses or set-ups, or choosing between or among boot choices, such as hardware configurations and\/or operating systems or other software choices.","The BIOS code next looks for additional BIOS code, such as from a video controller, IDE controller, SCSI controller, etc. and displays a start-up information screen, in block . As examples, the video controller BIOS is often found at C000h, while the IDE controller BIOS code is often found at C800h. The BIOS code may perform additional system tests, such as a RAM memory count-up test, and a system inventory, including identifying COM (serial) and LPT (parallel) ports, in block . The BIOS code also identifies plug-and-play devices and other similar devices and then displays a summary screen of devices identified, in block .","The method includes closing the access locks to the security hardware, in block . The BIOS code or another device or agent in the computer system  may close the access locks. The BIOS code identifies the boot location, and the corresponding boot sector, in block . The boot location may be on a floppy drive, a hard drive, a CDROM, a remote location, etc. The BIOS code next calls the boot sector code at the boot location to boot the computer system, such as with an operating system, in block .","Referring now to , the method B includes opening the access locks to the security hardware, in block . The processor executes the BIOS code instructions from SMM space in the RAM memory, in block . The computer system accesses the security hardware  while in SMM, while booting, in block . The method B may optionally include entering a BIOS management mode, in block .","The BIOS code next looks for additional BIOS code, such as from a video controller, IDE controller, SCSI controller, etc. and displays a start-up information screen, in block . As examples, the video controller BIOS is often found at C000h, while the IDE controller BIOS code is often found at C800h. The BIOS code also identifies plug-and-play devices and other similar devices and then displays a summary screen of devices identified, in block .","The BIOS code closes the access locks to the security hardware, in block . The BIOS code identifies the boot location, and the corresponding boot sector, in block . The boot location may be on a floppy drive, a hard drive, a CDROM, a remote location, etc. The BIOS code next calls the boot sector code at the boot location to boot the computer system, such as with an operating system, in block .","Turning now to , the method C includes deciding whether to set the OAR-lock, in decision block . The OAR-lock in decision block  may correspond to the first indicator described above with respect to . The OAR-lock in decision block  may also correspond to setting the OAR lock override bit  described below with respect to . If the decision is made to set the OAR-lock, then, according to one embodiment, all access to the security hardware  is blocked, in block . If the decision is made not to set the OAR-lock, then the method C moves to decision block . In decision block , the method C decides whether to set the OAR-lock change bit. The OAR-lock change bit in decision block  may correspond to the second indicator described above with respect to . The OAR-lock change bit in decision block  may also correspond to setting the change OAR lock override bit  described below with respect to . If the decision is made to set the OAR-lock change bit, in decision block , then, according to one embodiment, the OAR-lock cannot be changed, thereafter, as changes to the OAR-lock are themselves locked out, in block .","Turning now to , the method D includes a processor, such as processors , , etc., operating in a mode that is not SMM, in block . In block , code being processed by the processor attempts to access any part of the security hardware , or other hardware whose access may require a check of an access lock similar to the access locks . The method checks, at decision block , to see if the security hardware  is available. If the security hardware  is not available, at decision block , then the method D exits or returns. If the security hardware  is available, at decision block , then the method D accesses the security hardware , at block . The method, optionally, closes the access locks to the security hardware, if necessary, at block 950.","Turning now to , the method E includes an embodiment of decision block  from . The method E includes checking if access to all security hardware is locked out, i.e. forbidden, at decision block . If access to all security hardware is locked out, then at decision block  the method E moves to decision block . If access to all security hardware is not locked out, then the method E moves to decision block . In decision block , the method E checks if the requested security hardware is locked out (e.g. separately using one or more access locks).","If the requested security hardware is locked out, then the method E moves to decision block . If the requested security hardware is not locked out, then the method E moves directly to block . In decision block , the method E checks if the access lock for the requested security hardware can be changed, e.g., unlocked. If the access lock for the requested security hardware cannot be changed, then in decision block  the method E aborts the access to the security hardware. If the access lock for the requested security hardware can be changed, then in decision block  the method E requests authorization, such as from a user, to change the access lock for the requested security hardware, in decision block . If the authorization to change the access lock for the requested security hardware is not given, then the method E aborts the access to the security hardware. If the authorization to change the access lock for the requested security hardware is not given, then the method E moves to block  and changes the lock to allow access to the requested security hardware.","It is noted that any authorization method may be used in decision block 993. Any authorization methods known in the art that have security properties in the presence of an observer may be used.","Turning now to , the method F includes the processor loading code instructions into SMM space in the RAM memory, in block . For example, loading code instructions into SMM space may occur in response to an SMI#. The access locks to the security hardware are opened in block . The opening of the access locks may be through the SMM code instructions or through a hardware mechanism, or both.","The processor processes the code instructions from SMM space in the RAM memory, in block . The method F includes accessing the security hardware , in block . As the computer system is in SMM and the access locks have been opened, in block , the security hardware is available to most or all of the subsystems of the computer system , as desired.","The method F includes closing the access locks to the security hardware , in block . The processor reloads the previous state and continues operating, in block . It is noted that the processing of the SMM code instructions, in block , may continue while the actions described in block  occurs. Preferably, the actions described in block  occur after the processing of the SMM code instructions, in block , has ceased.","Turning now to , the method G includes the processor loading code instructions into SMM space in the RAM memory, in block . For example, the loading of code instructions into SMM space may occur in response to an SMI#. The method G next checks if the security hardware is available, in decision block . If the security hardware is not available, then in decision block  the method G aborts the access to the security hardware. If the security hardware is available, then the method G continues with block .","The processor executes the code instructions from SMM space in the RAM memory, in block . The method F includes accessing the security hardware , in block . As the computer system is in SMM and the access locks are open, as determined in decision block , the security hardware is available to most or all of the subsystems of the computer system , as desired.","The method G includes closing the access locks to the security hardware , in block . The processor reloads the previous state and continues operating, in block . It is noted that the executing of the SMM code instructions, in block , may continue while the actions described in block  occurs. Preferably, the actions described in block  occur after the processing of the SMM code instructions, in block , has ceased.","It is noted that other processes of locking and unlocking the security hardware , other than the access locks, may be used. The methods A\u2013G are intended to extend to those other processes.","For the purposes of this disclosure, the computer system is considered to have two operating modes, normal and SMM. There are boot phases that are not in SMM, but they are, by definition, as trusted as SMM, and therefore considered equivalent to SMM herein. The boot code configures and arranges how SMM will work. SMM derives its trustworthiness from the trustworthiness of the boot code. It is contemplated that the standard boot sequence could be varied. Variations include a transition to a setup environment where the user may have the opportunity to input parameters. The input parameters may, for example, modify the BIOS code. Most setup environments return to reset before loading the operating system and operating in normal mode. This is a form of maintenance mode that is an alternative to loading the operating system and is not part of the normal mode. As contemplated, the access locks would not be set in this mode. It would be part of the boot process and as trusted as SMM, although security measures could be used if remote accesses are possible inside the setup environment.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIGS. 10A","FIG. 6","FIG. 10D","FIG. 6","FIG. 10A","FIG. 10B","FIG. 10C"],"b":["10","10","460","460","460","460","455","460","460","1005","1005","460","460","370","1005","460","1015","1015","370"]},"In , the OAR override  includes an OAR-lock override register  that stores at least one OAR-lock override bit, and a change OAR-lock override register  that stores at least one change OAR-lock override bit. According to one embodiment of the present invention, if the OAR-lock override bit is not set, then access to the security hardware  is determined by the settings of the access locks . If the OAR-lock override bit is set, then the access locks  are ignored in favor of the security hardware  being either always available or never available, based on the implementation. Preferably, the security hardware is never available when the OAR-lock override bit is set. The setting of the OAR-lock override bit may be changed in SMM (or with authorization) unless the change OAR-lock override bit is set. Preferably, the change OAR-lock override bit is OAR, similar to one embodiment of the access locks , and may be set, in various embodiments, with the access locks  at boot time, such as in block .  illustrates a prior art flowchart of an SMM program A. The prior art SMM program A starts at , includes one or more instructions for execution in SMM, in block A, and ends at  without interruption. In other words, prior art SMM program A is uninterruptible and has no other entry points than the start at . There are also no reasonable exit points, barring processor failure, other than the stop at .",{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 18B","b":["1800","1800","1800","1805","1810","1815","1820","1895"]},"Also in contrast to the prior art SMM program A,  illustrates an embodiment of operation of a computer system running the interruptible and re-enterable SMM program B, according to one aspect of the present invention. The operations C of the computer system includes a start . The operations also include receiving a request to enter SMM, at  and saving the system state at . The method checks, at , for a saved SMM state, as could be found from exiting the SMM program B at . If no saved SMM state is found at , then load the requested default SMM state at . If a saved SMM state is found at , then load the saved SMM state, at .","The method C executes the loaded SMM state, at , either the default state from  or the saved state at . If the SMM processing is finished, at , then the method moves to  and exits SMM. If the SMM processing is not finished, then the method continues execution of the SMM state, if no exit request is received at . If the exit request is received at , then the method saves the current SMM state at  and exits SMM at . The saved system state is reloaded at , and the method ends at the stop .","While only one entry\/exit point  is shown in the embodiment of , other embodiments may include two or more entry\/exit points  in an SMM program B or the operations of the method C shown in . In these embodiments, each entry\/exit point  would have one or more instructions for execution in SMM, similar to blocks B and , both before and after the entry\/exit point .","For example, in one embodiment, block B includes one instruction for execution in SMM, followed by an entry\/exit point A. Entry\/exit point A is followed by another single instruction for execution in SMM, in block A. Block A is followed by another entry\/exit point B. Entry\/exit point B is followed by another single instruction for execution in SMM, in block B. Block B is followed by the stop . While a single instruction in blocks B, A, and B may be small, the concept of regularly spaced Entry\/exit points  is illustrated. In other embodiments, two, three or more instructions for execution in SMM may be substituted for the single instructions. In still other embodiments, there may be a variable number of instructions for execution in SMM in blocks B, and . The number of instructions may depend on the execution times for each set of instructions, so that SMM may be interruptible every so often during execution.","It is noted that forced exits from SMM, as are taught herein in one aspect of the present invention, for example, with respect to , and re-entry into SMM, as is also taught herein in another aspect of the present invention, for example, with respect to , are but two examples of how interruptible, re-enterable SMM code could be implemented or used. Those of skill in the art of computer programming with full appreciation of this disclosure will appreciate that many programming techniques used with non-SMM code that used interruptible, re-enterable code flow will now be available in SMM code.",{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIGS. 19A","b":["19","19","3000","3000","3000","355","805","330","805","330","3010","3005","305","355","805","330","3010","3005","805","355","330"]},"In , embodiment A shows the processor  coupled to one part (A) of the boot switch . Part A of the boot switch  is open, as would occur after booting. The control logic  is coupled to the boot switch  to control the operations of the boot switch . The south bridge  is coupled to Part B of the boot switch . Part B of the boot switch  is closed, again as would occur after booting. The south bridge  is shown coupled to the bus to which the BIOS is coupled, shown as being through the crypto-processor . Other hardware A and B are also shown coupled to the bus, which may be an LPC bus , or another bus.","In , embodiment B shows the processor  coupled to one part (A) of the boot switch  through an instance of LPC bus interface logic (BIL) D. Part A of the boot switch  is closed, as would occur during booting. The processor  is coupled to a north bridge  through a local bus . The north bridge  includes the control logic , coupled to the boot switch  to control the operations of the boot switch . The north bridge  is further coupled to the south bridge  through a PCI bus . The south bridge  is coupled to Part B of the boot switch  through another instance of LPC BIL D. Part B of the boot switch  is open, again as would occur during booting. The south bridge  is shown coupled to an LPC bus to which the BIOS  is coupled, shown as being through the crypto-processor . Other hardware A and B are not shown in this embodiment, but may be present. The connection between Part A of the boot switch  and Part B of the boot switch  is shown as an LPC bus segment .","As illustrated, during the booting process, the processor  is operable to use an LPC bus protocol to access the BIOS  directly, without going through the north bridge  or the south bridge . By providing a more direct connection between the processor  and the BIOS ROM , the computer system B may advantageously boot or reboot faster than using more usual methods of accessing the BIOS ROM . After booting, accesses to the BIOS ROM  are through the south bridge  using the LPC bus .","In , embodiment C shows the processor  coupled to one part (A) of the boot switch  through the local bus . Part A of the boot switch  is closed, as would occur during booting. The processor  is also coupled to the north bridge  through the local bus . The processor  includes the control logic , coupled to the boot switch  to control the operations of the boot switch . The north bridge  is further coupled to the south bridge  through a PCI bus . The south bridge  is coupled to the LPC bus  an instance of LPC BIL D. Part B of the boot switch  is coupled to the LPC bus . Part B of the boot switch  is open, again as would occur during booting. The BIOS ROM  is coupled through the crypto-processor  to the local bus  when Part A of the boot switch  is closed and to the LPC bus  when Part B of the boot switch  is closed. The crypto-processor  may include bus interface logic for the local bus  and the LPC bus , or the crypto-processor  may be configured to translate the bus protocols as necessary to pass bus cycles to the BIOS ROM . Other hardware A and B are not shown in this embodiment, but may be present.","As illustrated, during the booting process, the processor  is operable to use the local bus protocol to access the BIOS  directly, without going through the north bridge  or the south bridge . By providing a more direct connection between the processor  and the BIOS ROM , the computer system C may advantageously boot or reboot faster than using more usual methods of accessing the BIOS ROM . After booting, accesses to the BIOS ROM  are through the south bridge  using the LPC bus .","It is noted that the control logic  may be signaled to or configured to operate the boot switch  at times other than booting to allow for faster access to the BIOS ROM , the crypto-processor  (when present), or, for example, other hardware  on the LPC bus.","In various embodiments of the present invention, the security of SMM is assumed. It is noted that one or more so-called \u201cbackdoors\u201d may exist that could be exploited to compromise the security of SMM. The issues contemplated include misuse of the hardware debug test (HDT) mode of the processor  as well as the ability of the processor  to load and replace microcode. Illustrated in  are various embodiments A, B, C, D of the processor , each of which includes various security protections against one or more backdoor attacks.","In , the processor A includes HDT control logic A, HDT reset logic A, and one or more registers, including an HDT enable register  and non-volatile random access memory (NVRAM) . As shown, the HDT control logic A is coupled to receive a plurality of input signals through a plurality of HDT pins . The HDT control logic A is further coupled to the HDT enable register . The HDT reset logic A is coupled to receive a RESET signal over a line  and to access (i.e. read and write) the HDT enable register  and the NVRAM .","In , the processor B of  includes HDT control logic B, HDT reset logic B, and two registers, including the HDT enable register  and an HDT enable lock register . As shown, the HDT control logic B is coupled to receive a plurality of input signals through the plurality of HDT pins . The HDT control logic B is further coupled to the HDT enable register  and the HDT enable lock register . The HDT reset logic B is coupled to receive the RESET signal over the line  and a signal, such as over a line , through a pull-up (or pull-down) resistor .","In , the processor C includes microcode control logic , microcode loader enable reset logic , and one or more registers, including a microcode loader enable register . As shown, the microcode control logic  is coupled to receive a plurality of input signals through a plurality of microcode input pins . The microcode control logic  is further coupled to the microcode loader enable register . The microcode loader enable reset logic  is coupled to receive the RESET signal and to access the microcode loader enable register .","In , the processor D includes HDT control logic  integrated with the microcode control logic , the HDT reset logic , and the MLE reset logic  to form control\/reset logic . The HDT enable register  and the microcode loader enable register  are integrated into a multibit lock register . A plurality of inputs  are shown to the control\/reset logic . The plurality of inputs  may include the HDT inputs , the microcode inputs , and\/or the reset signaling means. Other embodiments (not shown) integrate only the HDT control logic  and the microcode control logic , or just the HDT reset logic  and the MLE reset logic .","According to various embodiments of the present invention, the registers , , and , as well as the NVRAM  include storage space for one or more bits. In one embodiment, each register is configured to store a single bit. It is noted that the enable registers  and  may also be integrated into a single lock register, and the HDT enable lock register  may be used as a microcode enable lock register. It is contemplated that the registers , , , and\/or  could be included in the SMM MSRs .","In various embodiments, the HDT enable register  is configured to store one or more HDT enable bits signifying whether HDT mode is enabled or disabled. The HDT reset logic  is configured to set the one or more HDT enable bits to a default state upon a reset of the processor .","Multiple embodiments for controlling the HDT modes are contemplated, such as those illustrated in . In one embodiment, the HDT mode is enabled as the default on non-production processors  used for engineering and testing. The HDT mode may be disabled as the default in standard production processors . In another embodiment, illustrated in , the default state may be stored in and read from the NVRAM . In this embodiment, the default state may be changeable, but in the illustrated embodiment, the default state is set to disabled. In still another embodiment, illustrated in , the default state is set using a strapping option. The default value is provided to the HDT reset logic B through the pull-up (or pull-down) resistor .","Multiple embodiments for controlling the microcode loader modes are also contemplated, such as those illustrated in . In one embodiment, not illustrated, the microcode update mode is enabled as the default on non-production processors  used for engineering and testing. The microcode update mode may be disabled as the default in standard production processors . In another embodiment, similar to that illustrated in , the default state may be stored in and read from the NVRAM . In this embodiment, the default state may be changeable, but in the illustrated embodiment the default state is set to disabled. In still another embodiment, illustrated in , the default state is using a strapping option. The default value is provided to the MLE reset logic  through the pull-up (or pull-down) resistor .","Turning now to , a method  for initiating the HDT mode is shown. In response to receiving a request to enter the HDT mode (step ), the HDT control logic  checks the status of the one or more HDT enable bits to see if the HDT mode is enabled or disabled (step ). If the HDT mode is enabled (step ), then the HDT control logic  initiates the HDT mode (step ). If the HDT mode is disabled (step ), then the HDT control logic  will not initiate the HDT mode.","Turning now to , a method  for changing the HDT mode enable status, which includes an HDT mode lock, is shown. In response to receiving a request to enter the HDT mode (step ), the HDT control logic  checks the status of the one or more HDT enable lock bits to determine if the HDT lock mode is locked or unlocked (step ). If the HDT lock mode is unlocked (step ), then the HDT control logic  initiates HDT mode (step ). If the HDT lock mode is locked (step ), then the HDT control logic  requests authorization to change the HDT lock mode status (step ). If the change is authorized (step ), then the HDT control logic  changes the HDT mode lock bit to unlocked (step ). If the change is not authorized (step ), then the HDT control logic  does not change the HDT mode lock bit.","In various embodiments, the HDT enable status may be changed by setting or resetting the one or more HDT enable status bits. For example, the HDT mode may be disabled, but inside SMM, a predetermined input to the HDT control logic  may signal the HDT control logic  to change the HDT mode status to enabled. In the embodiment of , for example, once signaled, the HDT control logic  would change the status of the HDT enable bit from disabled to enabled.","Referring back to the embodiment of , for example, in response to receiving a request to change the HDT mode status, the HDT control logic  checks the status of the one or more HDT enable lock bits to see if the HDT lock mode is enabled or disabled. If the HDT lock mode is disabled, then the HDT control logic  may change the HDT mode status. If the HDT lock mode is enabled, then the HDT control logic  will not change the HDT mode status.","It is noted that the method  may alternatively terminate if the microcode update lock status is locked (step ), instead of requesting authorization to change the microcode update lock status (step ). The method  may also include receiving a request to change the microcode update lock status (not shown) prior to the method  requesting authorization (step ).","Turning now to , a method  for initiating the microcode loader is shown. In response to receiving a request to initiate the microcode update mode (step ), the microcode control logic  checks the status of the one or more microcode enable bits to see if microcode update mode is enabled or disabled (step ). If the microcode update mode is enabled (step ), then the microcode control logic  initiates the microcode update mode (step ). If the microcode update mode is disabled (step ), then the microcode control logic  will not initiate the microcode update mode.","Turning now to , a method  for changing the microcode update mode enable status, which includes a microcode mode lock, is shown. In response to receiving a request to enter the microcode mode (step ), the microcode control logic  checks the status of the one or more microcode enable lock bits to see if the microcode mode is locked or unlocked (step ). If the microcode lock mode is unlocked (step ), then the microcode control logic  initiates the microcode mode (step ). If the microcode lock mode is locked (step ), then the microcode control logic  requests authorization to change the microcode mode lock status (step ). If the change is authorized (step ), then the microcode control logic  changes the microcode mode lock bit to unlocked (step ). If the change is not authorized (step ), then the microcode control logic  does not change the microcode mode lock bit.","In various embodiments, the microcode enable status may be changed by setting or resetting the one or more microcode enable status bits. For example, the microcode mode may be disabled, but inside SMM, a predetermined input to the microcode control logic  may signal the microcode control logic  to change the microcode mode status to enabled. In the embodiment of , for example, once signaled, the microcode control logic  will change the status of the one or more microcode enable bits from disabled to enabled.","In response to receiving a request to change the microcode mode status, the microcode control logic  may check the status of the one or more microcode enable lock bits to determine if the microcode lock mode is enabled or disabled. If the microcode lock mode is disabled, then the microcode control logic  may change the microcode mode status. If the microcode lock mode is enabled, then the microcode control logic  will not change the microcode mode status.","It is noted that the method  may alternatively terminate if the microcode update lock status is locked (step ), instead of requesting authorization to change the microcode update lock status (step ). The method  may also include receiving a request to change the microcode update lock status (not shown) prior to the method  requesting authorization (step ).]",{"@attributes":{"id":"p-0134","num":"0133"},"figref":["FIGS. 11A","FIG. 11A","FIG. 11B","FIG. 12","FIG. 13"],"b":["11","12","13","1100","1100","1110","1120","1100","1100","1110","1120"]},"Turning to , the method A includes the security device receiving a transaction request for a storage location associated with the storage device connected to the security device (block A). The security device provides access control for the storage device (block A). One embodiment of the access control shown in block A is illustrated by the method B shown in .","According to the method A, the security device maps the storage location in the transaction request according to the address mapping of the storage device (block A). The security device provides the transaction request to the storage device (block A). Under normal circumstances, the storage device will perform the requested transaction (block A).","In various embodiments, the security device associated with the method A may include a crypto processor or a block of logic configured to provide security for the storage device. The storage device may include an electronic storage medium like a memory or a magnetic or optical storage medium like a hard drive or an optical drive. The memory may include a RAM, a ROM, or a flash memory. The hard drive or optical drive may be fixed or removable. The transaction request may include, for example, a read request, a write request, or a combination of read and write requests. It is noted that in various embodiments, the memory (or the storage device) may include further security hardware of its own.","Turning to , the method B includes the crypto-processor receiving a transaction request for a memory location associated with the memory connected to the crypto-processor (block B). The crypto-processor provides access control for the memory (block B). One embodiment of the access control shown in block B is illustrated in .","According to the method B, the crypto-processor maps the memory location in the transaction request according to the address mapping of the memory (block B). The crypto-processor provides the transaction request to the memory (block B). Under normal circumstances, the memory will perform the requested transaction (block B).","Turning to , the method A includes the security device determining if a lock is in place for the storage location (block ). A transaction request may have been received for the storage location. If the lock is not in place (block ), then the method A moves past the authentication portion. If the lock is in place (block ), then the security device provides a challenge for the storage location (block ). The challenge may be associated with the storage location or with the storage device that includes the storage location. The challenge may be in response to the transaction request. Next, the security device receives a response to the challenge (block ). The security device evaluates the response by comparing the response to an expected response (block ). If the evaluation is not correct (block ), then the method ends. If the evaluation is correct (block ), then the method proceeds with the security device providing the transaction request to the storage device (block ).","In various embodiments, the security device associated with the method A may include a crypto processor or a block of logic configured to provide security for the storage device. The storage device may include an electronic storage medium like a memory or a magnetic or optical storage medium like a hard drive or an optical drive. The memory may include a RAM, a ROM, or a flash memory. The hard drive or optical drive may be fixed or removable. The transaction request may include, for example, a read request, a write request, or a combination of read and write requests.","Turning to , the method  includes storing a secret in a storage device (block ). The storage device may include only a portion of a physical device. The storage device itself may be embodied as any storage device known in the art. The method  may also include storing data in the storage device (block ) and storing code in the storage device (block ). The method  may also include providing a lock (e.g. a lock bit or bits) to secure data stored in the storage device or the storage device itself (block ). Note that the above steps of method  (blocks \u2013) may be performed relatively proximate in time, such as when the storage device is manufactured, installed, or initialized.","The method  also includes reading the secret from the storage device (block ), such as, for example, when the computer system including the storage device or coupled to communicate with the storage device is booted. For the secret to remain secure, the reading of the secret preferably occurs when the storage device is in a secure or trusted configuration. The method  may also read the code from the storage device (block ). The method  stores the secret in a secure location (block ) and also may store the code in the secure location (block ). The secure location may be in the SMM memory space previously described, or in a secure memory, register, or other storage location in the computer system , such as in the processor  or in the south bridge .","In various embodiments, the storage device associated with the method  may include an electronic storage medium like a memory or a magnetic or optical storage medium like a hard drive or an optical drive. The memory may include a RAM, a ROM, or a flash memory. The hard drive or optical drive may be fixed or removable. A read in method  may describe any transaction request, such as, for example, a read request, a write request, or a combination of read and write requests.","For the purposes of this disclosure, references to ROM are to be construed as also applying to flash memory and other substantially non-volatile memory types. Note that while the methods of the present invention disclosed herein have been illustrated as flowcharts, various elements of the flowcharts may be omitted or performed in different order in various embodiments. Note also that the methods of the present invention disclosed herein admit to variations in implementation.","Some aspects of the invention as disclosed above may be implemented in hardware or software. Thus, some portions of the detailed descriptions herein are consequently presented in terms of a hardware implemented process and some portions of the detailed descriptions herein are consequently presented in terms of a software-implemented process involving symbolic representations of operations on data bits within a memory of a computing system or computing device. These descriptions and representations are the means used by those in the art to convey most effectively the substance of their work to others skilled in the art using both hardware and software. The process and operation of both require physical manipulations of physical quantities. In software, usually, though not necessarily, these quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantifies. Unless specifically stated or otherwise as may be apparent, throughout the present disclosure, these descriptions refer to the action and processes of an electronic device, that manipulates and transforms data represented as physical (electronic, magnetic, or optical) quantities within some electronic device's storage into other data similarly represented as physical quantities within the storage, or in transmission or display devices. Exemplary of the terms denoting such a description are, without limitation, the terms \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining,\u201d \u201cdisplaying,\u201d and the like.","Note also that the software-implemented aspects of the invention are typically encoded on some form of program storage medium or implemented over some type of transmission medium. The program storage medium may be magnetic (e.g., a floppy disk or a hard drive) or optical (e.g., a compact disk read only memory, or \u201cCD ROM\u201d), and may be read only or random access. Similarly, the transmission medium may be twisted wire pairs, coaxial cable, optical fiber, or some other suitable transmission medium known to the art. The invention is not limited by these aspects of any given implementation.","The particular embodiments disclosed above are illustrative only, as the invention may be modified and practiced in different but equivalent manners apparent to those skilled in the art having the benefit of the teachings herein. Furthermore, no limitations are intended to the details of construction or design herein shown, other than as described in the claims below. It is therefore evident that the particular embodiments disclosed above may be altered or modified and all such variations are considered within the scope of the invention. Accordingly, the protection sought herein is as set forth in the claims below."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may be understood by reference to the following description taken in conjunction with the accompanying drawings, in which like reference numerals identify similar elements, and in which:",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 1A","FIG. 1B"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 7A and 7B"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 8A and 8B"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 9A","b":["9","9","9","9","9","9"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIGS. 10A","FIG. 6","FIG. 10D"],"b":["10","10","460"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIGS. 11A","b":["11","12","13"]}]},"DETDESC":[{},{}]}
