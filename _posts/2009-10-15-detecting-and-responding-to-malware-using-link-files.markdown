---
title: Detecting and responding to malware using link files
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for monitoring the generation of link files by processes on a computer and performing protection processes based on whether the link files target malicious objects or are generated by malicious processes. In one aspect, a method includes monitoring for a generation of a first file that includes a target path that points to an object; in response to monitoring the generation of the first file: determining whether the target path is a uniform resource locator; in response to determining that the target path is a uniform resource locator, identifying a process that caused the first file to be generated; determining whether the process is a prohibited process; in response to determining that the process is a prohibited process, performing one or more protection processes on the process and the first file; in response to determining that the process is not a prohibited process, determining whether the uniform resource locator is a prohibited uniform resource locator; in response to determining that the uniform resource locator is a prohibited uniform resource locator, performing one or more protection processes on the process and the first file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08863282&OS=08863282&RS=08863282
owner: McAfee Inc.
number: 08863282
owner_city: Santa Clara
owner_country: US
publication_date: 20091015
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This specification relates to malware protection software.","Malware is any kind of malicious software such as, for example, a computer virus, Trojan horse, spyware, and malicious active content. Malware can spread via infected email attachments, shared files, or malicious websites. Malware can also spread inconspicuously via link files that cause malicious activities to be performed, such as downloading malware.","Malware can attach to files so when the infected file executes, the malware also execute and, for example, self-replicate without user knowledge or permission. Other malware target a computer's memory and infect files as the computer opens, modifies, or creates files. Some malware can lie dormant and not show any signs of existence, e.g., key capture software, monitoring software, etc.","Malware protection software generally operates by scanning a computer's memory and disk drives for malicious code. Scanning may be performed by comparing signatures of files with signatures of known malware. If the malware protection software lacks updated signatures, however, malicious processes and links may go undetected. Further, links may be used to download new malware for which signatures do not exist, but from locations nevertheless known to be dangerous. In such situations and others, malware protection software fails to prevent damage to the computer system.","This specification describes technologies relating to detecting and preventing damage from malware based on monitoring link files and the processes that create them.","In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of monitoring for a generation of a first file that includes a target path that points to an object; in response to monitoring the generation of the first file: identifying a process that caused the first file to be generated; determining whether the process is a prohibited process; in response to determining that the process is a prohibited process, performing one or more protection processes on the prohibited process and the first file; in response to determining that the process is not a prohibited process, determining whether the target path is a uniform resource locator; in response to determining that the target path is a uniform resource locator, determining whether the uniform resource locator is a prohibited uniform resource locator; in response to determining that the uniform resource locator is a prohibited uniform resource locator, performing one or more protection processes on the first file. Other implementations of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer-readable storage devices.","Another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of monitoring for a generation of a first file that includes a target path that points to an object; in response to monitoring the generation of the first file: determining whether the target path is a uniform resource locator; in response to determining that the target path is a uniform resource locator, identifying a process that caused the first file to be generated; determining whether the process is a prohibited process; in response to determining that the process is a prohibited process, performing one or more protection processes on the process and the first file; in response to determining that the process is not a prohibited process, determining whether the uniform resource locator is a prohibited uniform resource locator; in response to determining that the uniform resource locator is a prohibited uniform resource locator, performing one or more protection processes on the process and the first file. Other implementations of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer-readable storage devices.","Another innovative aspect of the subject matter described in this specification can be embodied in a computer storage medium encoded with a computer program, the program comprising instructions that when executed by data processing apparatus cause the data processing apparatus to perform operations comprising: monitoring a generation of a first file that generates a request based on a uniform resource locator; in response to monitoring the generation of the first file: identifying a process that caused the first file to be generated; determining whether the process is a prohibited process; in response to determining that the process is a prohibited process, performing one or more protection processes on the process and the first file; in response to determining that the process is not a prohibited process, determining whether the uniform resource locator is a prohibited uniform resource locator; in response to determining that the uniform resource locator is a prohibited uniform resource locator, performing one or more protection processes on the process and the first file.","Particular implementations of the subject matter described in this specification may be implemented so as to realize one or more of the following advantages. Link files generated by computer processes are detected and it is determined whether the link file or the computer process that generated it is malware. Such malware will be prevented from causing damage to the computer system. Link files that target malware but are otherwise generated by non-malware computer processes will also be prevented from causing damage to the computer system.","The details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.","Like reference numbers and designations in the various drawings indicate like elements.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},"As illustrated in , a dropper process  generates a link file . The dropper process  is a computer process that is an instance of a dropper file . A \u201cdropper file,\u201d as used herein, is any kind of file or binary code comprising computer-executable instructions that includes instructions for generating another file, such as a link file. A \u201clink file,\u201d as used herein, is any kind of file or binary code that contains a target path pointing to another object, or that generates a request to another object when selected, accessed, or instantiated. The target path  contained in the link file  may be a uniform resource locator (URL). A uniform resource locator identifies the location of a resource, such as a file located on a computer. The resource to which the URL corresponds may be located on a computer that is located on a network . The network  may be an external network such as the Internet or a local area network on which the computer device  is located. Thus, the link file  may contain a target path  comprising a URL corresponding to a file located on the Internet or on a local network  on which the computer device  is located. Alternatively, the target path  may comprise a URL corresponding to a local file stored on the computer device .","As further illustrated in , a malware protection program  contains a monitoring and protection module . The monitoring and protection module  monitors  for the generation of a link file . The monitoring and protection module  can be embodied in software code and, for example, form part of the malware protection program or run independently as a separate program with its own processes, services, etc. In response to detecting  the generation of a link file , the monitoring and protection module  collects information on the dropper process  and the dropper file . This information may include the identity of the dropper process , the location of the dropper file , and the location of the link file .","The monitoring and protection module  determines whether the dropper process  or the object to which the link file  points, or for which the link file generates a request for, is prohibited, as illustrated, by way of example, in  and . The monitoring and protection module  determines if the dropper process  is prohibited based on data descriptive of the dropper process including, for example, data descriptive of the executable machine code, i.e., the dropper file , associated with the dropper process . The monitoring and protection module  may base the determination on a comparison of the data descriptive of the dropper process and data descriptive of known, prohibited processes or files, as illustrated, by way of example, in .","Additionally, the monitoring and protection module  determines if the object to which the link file  points, or for which the link file generates a request for, is prohibited based on data descriptive of the object, including, for example, a URL. The monitoring and protection module  may base the determination on a comparison of the data descriptive of the object and data descriptive of known, prohibited objects, as illustrated, by way of example, in . Depending on the outcome of these determinations, the monitoring and protection module  may terminate the dropper process  and perform other protection processes on the dropper file  and the link file , as further illustrated, by way of example, in  and .",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["200","112"]},"The process  detects the generation of a link file (). For example, the generation of a link file by a computer process can be detected by monitoring for the generation of a file with a \u201c.lnk\u201d extension. In Windows, for example, the process  may install \u201chooks\u201d that intercept Windows API (application programming interface) calls to generate files. When a process generates a file, the process  may detect the generation () by intercepting the Windows API \u201cCreateFile\u201d call.","The process  identifies the process that generated the link file (). The process  may identify the process that generated the link file, as in the example above, by intercepting a Windows API call and collecting information on the process that generated the Windows API call. For example, the process  may collect information on the process that generated the \u201cCreateFile\u201d Windows API call, such as that process's ID, name, and file path.","The process  determines whether the process is a prohibited process (), as further illustrated, by way of example, in . The process may be identified as a prohibited process based on whether the file from which the process is created is prohibited.","In response to determining that the process is prohibited, one or more protection processes are performed () on the process, files associated with the process, and the link file generated by the process. Protection processes can include, for example, terminating the process and deleting, renaming, or quarantining one or more files associated with the process and the link file. Terminating the process may involve terminating the process only or terminating the process and all other processes directly and\/or indirectly initiated by the process. Files associated with the process may include the file containing the executable machine code from which the process is instantiated. In addition to deleting this file, and the link file, the files may be renamed such that they become unusable until they are manually cleaned, deleted, or otherwise handled. Quarantining may involve safely isolating and neutralizing the file from which the process is instantiated and the link file until future action can be taken. One example of quarantining can involve encrypting a file, renaming it, and moving it to a quarantine directory or folder.","Alternatively, if it is determined that the process is not prohibited, a determination is made as to whether the link file targets a target URL (). The process  determines if the link file targets a target URL by, for example, parsing the link file and searching for text strings or code indicative of a URL. A text string indicative of a URL, for example, may begin with \u201chttp:\/\/.\u201d","In another implementation, if it is determined that the process is not prohibited, a determination is made as to whether the link file generates a request to a URL or based on a URL. For example, the file can be parsed as described above, or the file can be selected, accessed, or instantiated, e.g., executed, in a protected emulation space to determine whether the link file generates a request to a URL or based on a URL.","In response to determining that the link file contains a target URL, the process  determines whether the URL is prohibited or references a prohibited object (), as further illustrated, by way of example, in . The URL may be prohibited if, for example, the URL addresses a malicious website or file. If the process  determines that the URL is prohibited or references a prohibited object, one or more protection processes are performed (), as described above.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","112"]},"The process  detects the generation of a link file (). The generation of a link file can be detected, as in the example above, by monitoring for the generation of a file with a \u201c.lnk\u201d extension, or by monitoring for the location of a file that generates a request to a URL or a request based on a URL. In response to detecting the generation of a link file (), the process  determines whether the link file includes a target URL (). In response to determining that the link file includes a target URL, the process  identifies the process that generated the link file (). The process  may identify the process that generated the link file, as in the example above, by intercepting a \u201cCreateFile\u201d Windows API call and collecting information on the process that generated the Windows API call.","The process  determines whether the process is a prohibited process (), as further illustrated, by way of example, in . The process may be identified as a prohibited process based on whether the file from which the process is created is prohibited. If the process  determines that the process is prohibited, one or more protection processes are performed on the process and the link file. Protection processes performed on the process that generated the link file can include, for example, terminating the process and deleting, renaming, and quarantining the file from which the process is instantiated and one or more other files associated with the process. Protection processes performed on the link file can include, for example, deleting, renaming, and quarantining the link file.","If the process  determines that the process is not prohibited, the process  determines whether the URL is prohibited or references a prohibited object (), as further illustrated, by way of example, in . If the process  determines that the URL is prohibited or references a prohibited object, one or more protection processes are performed () on the process that generated the link file and the link file.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["100","112","114"]},"In this example implementation, the data  descriptive of the process is sent to a remote computer  that contains a database or other stored compilation of data descriptive of prohibited processes . The remote computer  may be maintained by the provider of the malware protection program. The remote computer  returns data  indicative of whether the process is a prohibited process. The monitoring and protection module  determines whether the process is a prohibited process based on the data  received by the remote computer .","A signature  is one example of data descriptive of the process in accordance with one example implementation of the present invention. A signature is a data pattern\u2014often a simple string of characters or bytes\u2014that can be used to identify a particular file, process, or other electronic data. Examples of signatures include hashes of a file or hashes of portions of the file. Malware protection programs can use signatures, for example, to detect and locate specific malware such as viruses, or otherwise identify services, processes, or files.","As illustrated in , the signature  descriptive of the process is generated by the monitoring and protection module  and sent to the remote computer . The remote computer  compares the received signature  to data descriptive of prohibited processes contained in the database or other stored compilation  and returns data  indicative of whether the process is a prohibited process. Data descriptive of prohibited processes contained in the database or other stored compilation may include signatures of prohibited files. Based on the received data , a determination is made by the monitoring and protection module  as to whether the process that generated the link file is a prohibited process.","The signature  is one example of data descriptive of the process that generated the link file. Other data can be generated and used to make the determination of whether the process is a prohibited process, including even a complete data copy of the one or more files associated with the process, e.g., the executable machine code associated with the process such as the file from which the process is instantiated.","In other implementations, the database or other stored compilation of data descriptive of approved processes  can be stored locally on the computer device  on which the process and malware protection program are running That is, the signature  can be generated and compared to a locally stored database or other locally stored compilation of signatures of prohibited processes such as known malware.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["100","112","114"]},"In this example implementation, the data  descriptive of the process is sent to a remote computer  that contains a database or other stored compilation of data descriptive of prohibited objects . The remote computer  may be maintained by the provider of the malware protection program. The remote computer  returns data  indicative of whether the object is a prohibited object. A determination is made as to whether the object is a prohibited process based on the data  received by the remote computer .","A URL  is one example of data descriptive of the object in accordance with one example implementation of the present invention. As illustrated in , the URL  is sent by the monitoring and protection module  to the remote computer . The remote computer  compares the received URL  to data descriptive of prohibited objects contained in the database or other stored compilation  and returns data  indicative of whether the object is a prohibited object. Data descriptive of prohibited objects contained in the database or other stored compilation may include URLs. Based on the received data , a determination is made by the monitoring and protection module  as to whether the object targeted by the link file is prohibited.","In other implementations, the database or other stored compilation of data descriptive of approved processes  can be stored locally on the computer device  on which the process that generated the link file and malware protection program are running That is, the URL  can be compared to a locally stored database or other locally stored compilation of prohibited URLs.","Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).","The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.","The term \u201cdata processing apparatus\u201d encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.","A computer program (also known as a program, software, software application, script, or code) embodying the processes and logic flows described in this specification can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.","To provide for interaction with a user, such as user prompt  illustrated in , implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.","Implementations of the subject matter described in this specification can be implemented in a computing system that includes clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.","Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","Thus, particular implementations of the subject matter have been described. Other implementations are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
