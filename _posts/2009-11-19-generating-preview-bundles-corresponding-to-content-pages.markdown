---
title: Generating preview bundles corresponding to content pages
abstract: Disclosed are various embodiments for generating and/or processing a preview bundle. Embodiments include receiving a request from a client to generate a preview network page that corresponds to a production network page generated in a production environment. Embodiments further include specifying at least a portion of the preview network page as a user developed portion. Embodiments also include generating the preview network page that is based at least upon the production network page and by replacing source elements of the production network page associated with the user developed portion with at least one data structure element that contains the data elements referenced by the source elements of the corresponding production network page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08041764&OS=08041764&RS=08041764
owner: Amazon Technologies, Inc.
number: 08041764
owner_city: Reno
owner_country: US
publication_date: 20091119
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Merchants or other entities often outsource development of an electronic commerce presence on the Internet or other networks. These tasks can be outsourced to entities with expertise in development and management of an electronic presence. A merchant or other entity may wish to develop source code for generating user interfaces to be deployed on infrastructure maintained by another entity. However, the entity may not wish to grant access to the merchant to proprietary services that may be utilized to generate content or retrieve data for the layouts or user interfaces. Likewise, an entity may wish to outsource the development of layouts or user interfaces to be deployed on its infrastructure without granting access to its proprietary services as described above.","The various embodiments described herein relate to facilitating development of source code for a user interface, templates, content pages, network pages, web pages, or other content that is generated by a content server. A content server can facilitate an electronic commerce system, search system, publishing system, or other content system as can be appreciated. A content server may also rely at least in part upon proprietary services, application programming interfaces (APIs) or other proprietary applications in order to retrieve or generate data displayed to a client.","To this end, a content server can encode or render user interfaces developed in various languages. As a non-limiting example, the content server can employ a web application framework that processes documents authored in languages including JavaServer Pages (JSP), Active Server Pages (ASP), PHP, or other languages as should be appreciated. User interfaces written in these languages and executed within a web application framework can facilitate the rendering of a presentation language viewable by a client. For example, a JSP page can direct a web application framework to generate hypertext markup language (HTML) pages viewable in a browser on a client.","Additionally, user interfaces written in a web application framework language may invoke functions, API calls, web services, or other services in order to retrieve or generate data to populate within other various user interface or source elements generated by the web application framework. As a non-limiting example, in the case of a content server implementing an electronic commerce system, a user interface may include instructions that retrieve data from an electronic repository regarding products available from a merchant and place the data in a HTML formatted table. As another non-limiting example, in the case of a content server implementing a search engine, a user interface may include instructions that retrieve search results from a search application to deliver relevance based search results and place them within HTML formatted tags in a content page or web page.","Accordingly, the source code of user interfaces of such web based applications may invoke certain functions, APIs, web services, etc., that are proprietary, trade secret, or otherwise confidential in nature. As a non-limiting example, certain portions of the source code of an application that generates a user within a web application framework may include functions that authenticate the identity of a user or manipulate other sensitive information. Additionally, certain functions, APIs, web services, etc., may only be accessible by certain users based upon their identity, while within a certain network, behind a firewall, etc. Therefore, a user that does not meet certain criteria cannot develop a user interface, even if it is desired that they do so. As a non-limiting example, if certain services invoked by a user interface require presence behind a firewall, it may not be feasible to easily outsource development of certain portions of a user interface.","Therefore, it may be desirable to facilitate development of a user interface by certain users who either cannot access all data, functions, APIs, etc., that are necessary for a user interface to be encoded or generated for transmission or viewing on a client. Likewise, it may also be desirable to facilitate development of a user interface by certain users while preventing these users from accessing proprietary services and\/or sensitive information that may be employed in generating the user interface.","Accordingly, with reference to , shown is a networked environment  according to various embodiments of the disclosure. The networked environment  includes a computing device  implementing a content server . The depicted example shows an embodiment of a computing device  implementing a content server  that can facilitate an electronic commerce system, search engine, etc., and it should be appreciated that alternative embodiments of the disclosure can be implemented in the context of other types of applications in which content is delivered to a client . The computing device  is in data communication with one or more clients  by way of a network . The network  includes, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.","The computing device  may comprise, for example, a server computer or like system. The computing device  may represent multiple devices arranged, for example, in one or more server banks or other arrangements. The computing device  may be located in a single installation or may be dispersed among many different geographical locations. As a non-limiting example, data stores or electronic repositories  depicted within the computing device  may be implemented in a first installation while one or more of the remaining logical components of the computing device  may be implemented in a second installation, with the two installations in data communication with one another. For purposes of convenience, the computing device  is referred to herein in the singular. However, in one embodiment, the computing device  can represent a plurality of devices arranged as described above.","A client  may be configured to execute various applications such as a browser and\/or other applications. The browser may be executed in a client , for example, to access content pages , network pages, and\/or web pages provided by the content server . In other embodiments, the functionality performed by the client  and the computing device  may be performed in a single computer system such as, for example, a standalone kiosk.","As noted above, the computing device  is configured to implement a content server  that is configured to generate content served to clients. To this end, the content server  can execute various applications such as, for example, a web application framework server  that can generate content for clients communicating with the content server  via the network . The content server  can also include at least one electronic repository  that can store various data depending on the type of content that is provided to a client . The electronic repository  can also represent external data services that access a repository accessible via a network through which data is generated or retrieved by the web application framework server  in order to generate content.","As one non-limiting example, in the case of an electronic commerce system implemented by the content server , the electronic repository  may be used to store product data and other data related to products in an electronic commerce system. Product data may include many fields of data regarding each item, such as, but not limited to, the following: product category, title, keywords, description, price, weight, shipping methods, related images, reviews, similar items, meta data, hidden text, a list of merchants selling the item, stock number, other associated categories, page view history, etc. The electronic repository  can also include other data related to products as can be appreciated, but are not necessary to discuss herein for an understanding of the various embodiments of the disclosure.","Accordingly, the web application framework server  can process templates, pages, and\/or source code, etc. written in a programming language that is configured to generate a user interface in a format viewable by a client . In one embodiment, the web application framework server  can encode HTML documents for display on a browser on a client . To this end, as directed by a source code processed by the web application framework server , data can be retrieved from the electronic repository  or other sources that can be presented to a client  in a user interface viewable on a client . As a non-limiting example, a JSP page processed by the web application framework server  can generate HTML tags with content that is at least in part retrieved from the electronic repository . Although the above examples (and other examples herein) are discussed with reference to a JSP web application framework as well as an HTML user interface encoded for a client , it should be appreciated that various web application framework languages and various user interface formats can be employed in accordance with embodiments of the disclosure.","Continuing the above non-limiting example, a client  can interact with an electronic commerce system implemented by the content server  and cause various JSP pages (which can also be stored on and\/or retrieved from an electronic repository ) to initiate the generating of various user interfaces employed in the electronic commerce system via the web application framework server . For example, if a user desires to search the electronic commerce system for a product, a JSP page configured to handle this search request from the user can invoke search functions, APIs, web services, etc., in order to cause a search of the electronic repository  to be initiated. Accordingly, the JSP page can further be configured encode a user interface (e.g., HTML document) in which to present the search results such that they are viewable, for example, in a browser on a client .","In addition, a user may then desire to purchase a product from the electronic commerce system. Accordingly, a JSP page configured to handle such a request from a client  can invoke payment functions or payment services that enable a user to purchase a product in the electronic commerce system as well as encode HTML tags to display various user interface elements with which a user may interact on a client  in order to complete the payment process. It should also be appreciated that other user interfaces can be encoded by the web application framework server  for a client  in this way, and that the above examples are non-limiting.","The web application framework server  can execute various applications in order to provide content to a client  which can include, but are not limited to, a web server  and other proprietary services  that can be implemented within the web application framework server . A client  can interface with the web application framework server  via a web server  and cause the web application framework server  to generate a content page  or user interface to a client . As noted above, the proprietary services  provided by the web application framework server  can include various functions, APIs, web services, or other services provided in a content server  that can be employed by the web application framework server  in order to encode a user interface for a client .","As noted above, a content page  or user interface generated by the content server  and transmitted to a client  may rely on proprietary services  provided in or accessible to the content server . Additionally, it may be desirable to facilitate third party development of templates, source code, and\/or content pages , etc., for processing by the web application framework server  for generating a user interface for a client  without providing access to these proprietary services . As one non-limiting example, the proprietary services  can include functions, APIs, web services, etc., that may be confidential in nature, trade secret, or may involve the manipulation of sensitive data, etc. As an additional example, access to these proprietary services  may require access to a private network, presence behind a firewall, or other restricted access as can be appreciated. Additionally, a user wishing to develop a user interface for a content server  may not have access to electronic repositories  from which data is retrieved in order to encode a user interface.","Accordingly, third party development of templates, source code, content pages , etc., can be facilitated by the preview bundle application , which can be executed by the web application framework server  and\/or content server . The preview bundle application  can generate a preview bundle  that corresponds to a content page  provided to a client  in a production environment. In other words, a preview bundle  corresponds to and is based upon a content page  or user interface that a browser on a client , for example, would render for display.","Preview bundles  can be generated for various use cases so that third party user interface development can be accomplished for a variety of content pages  encoded for display on a client . As a non-limiting example, in the case of an electronic commerce system implemented by a content server , preview bundles  can be generated for a shopping cart user interface, product search user interface, user check out, etc., and other user interfaces as can be appreciated that may be generated by a content server .","In order to facilitate third party development of user interfaces, a preview bundle  can include data elements that are provided in a corresponding content page  but without visual elements or source elements (e.g., HTML tags) that are encoded in the content page  in a production environment. In other words, the preview bundle application  can, in one embodiment, generate a preview bundle  by removing source elements from a production content page  that are encoded in order to present the data elements and replacing them with the data elements in a data structure. By presenting the data elements in a data structure, third party development of user interfaces is facilitated because source code, templates, etc., can be developed external to the content server  without needing access to proprietary services  and\/or the electronic repository . In other words, third party iterative development of user interfaces can be accomplished using a preview bundle  because the data elements that would be retrieved in a production environment (e.g., for generating a content page ) are present in the preview bundle . The preview bundle  can also include supporting files that may be referenced by a production content page  that are inaccessible outside a content server , private network, etc., such as, but not limited to, images, style sheets, etc.","The preview bundle  can also designate a portion of a production content page  as a user developed portion, while designating a remainder of the content page  as a static portion. In other words, the preview bundle application  can generate visual elements of the static portion of the preview bundle  corresponding to a content page  just as they would appear in the corresponding production content page . The preview bundle application  can then remove the visual elements or source elements (e.g., HTML tags) from the production content page  corresponding to the preview bundle  and insert a data structure containing the data elements that appeared in the user developed portion of the content page .","As a non-limiting example, a preview bundle  corresponding to a content page  in a production environment can designate a header and\/or footer of the content page  as a static section, because it is not desired that third party user interface development occur in these portions of the content page . In contrast, the remainder of a content page  upon which a preview bundle  is based can be designated as a user developed portion because it may rely on data retrieved from the electronic repository  and\/or proprietary services . As an example of the above scenario, if a content page  in an electronic commerce system implemented by the content server  corresponds to a shopping cart of a user, the product data encoded for display by the web application framework server  can include product data retrieved from the electronic repository .","Reference is now made to , which depicts one non-limiting example of a portion of a preview bundle that can be generated by the preview bundle application  (). As noted above, the preview bundle can correspond to a content page  () or network page that is generated in a production environment. The preview bundle can be generated in order to facilitate third party development of templates, source, etc., with which a web application framework server  () can encode a user interface (e.g., HTML).",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 1"],"b":["121","201","121","205","207","121","205","121","105","121","207","109"],"i":["a ","a ","a ","a ","a "]},"A remainder of the preview bundle is a static portion as described above. In the depicted example, the static portion of the preview bundle is represented by HTML elements that do not require any further processing by the web application framework server  in order to generate a user interface that is viewable by a client . Source element  references an image to be rendered in a user interface on a client . Accordingly, the preview bundle can also include the image file or other supporting files (e.g., image, style sheet, etc.) referenced by the content page  corresponding to the depicted preview bundle ","In the depicted example, the user developed portion  includes a serialized data structure containing the data elements referenced by the source code and\/or template employed by a content server  to generate a user interface. The data structure can reference data elements in the same manner as they would be referenced as if they were retrieved from a electronic repository  or proprietary services  in a production environment so that third party development of source code for the web application framework server  can be accomplished without deviation from how the web application framework server  would behave in a production environment.","In other words, the data elements in the depicted data structure in the user developed portion  of the preview bundle can have the same variable names in the preview bundle as they would have in a production environment so that source code developed based upon a preview bundle would behave the same as it would in a production environment on a content server  of . A data structure as described above can be represented in various formats. In the depicted example, the data structure is formatted in JavaScript Object Notation (JSON) format. It should be appreciated that the data structure can be represented in various formats, including, but not limited to extensible markup language (XML), or other data representation formats as can be appreciated.","The depicted preview bundle can be processed by a layout preview server  () that mimics the behavior of a content server  in the way that a user developed template is processed and a content page  generated. The layout preview server  as well as how it can process the user developed portion , the taglib tag , and include tag  of the preview bundle is discussed in greater detail hereinbelow. An additional, alternative depiction of a preview bundle  according to an embodiment of the disclosure will now be discussed.","Reference is now made to , which depicts an example of a content page generated by a content server  (). In the depicted example, an electronic commerce system implemented by a content server  displays product information. It should be appreciated that the data elements in the depicted content page can be retrieved from an electronic repository  () or via proprietary services  () as noted above.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 3","FIG. 1","FIG. 3","FIG. 4","FIG. 1","FIG. 2"],"b":["121","106","121","106","106","105","106","121","105","121","106","103","201","121","105","201","201","121"],"i":["b ","a ","b ","a ","a","a ","b ","b ","a ","b ","b. "]},"Reference is now made to , which depicts one non-limiting example of a computing device . The depicted computing device implemented a layout preview server  according to an embodiment of the disclosure. As referenced above, a preview bundle can be processed by a layout preview server  that mimics the behavior of a content server  () in the way that a user developed template is processed and a content page  () generated.","Using the depicted non-limiting preview bundle of  as an example, the layout preview server  can process the preview bundle and apply a user generated template  to the preview bundle in order to generate a preview content page  that corresponds to a content page  in a production environment. As depicted in , the layout preview server  allows a user generated template  corresponding to source code of a user generated portion  of a preview bundle to be developed without access to electronic repositories  () and\/or proprietary services  () that are provided in a content server  in a production environment.","To accomplish this, the layout preview server  processes the preview bundle by encoding for display in a client  () the source elements of the static portion of the preview bundle as the content server  in a production environment would. It should be appreciated that because the static portion of the preview bundle do not require any additional processing by a web application framework server  () or engine, the layout preview server  does not have to take any additional encoding steps in reference to the static portion of the preview bundle . In this respect, when processing the preview bundle line by line, the layout preview server  will allow the static portion to \u201cpass through\u201d to the preview content page .","Upon encountering the taglib tag  () of the preview bundle , the layout preview server  is alerted that preview bundle elements are located within the preview bundle document as well as a tag prefix that is employed for preview bundle elements. In the depicted example of , the loadDataElements command that follows instructs the layout preview server  to load the data elements in the following JSON data structure into its memory. In a corresponding production environment, source code corresponding to a content page  may include invocation of proprietary services  or instructions to interact with an electronic repository  that loads data elements in the memory of a content server .","In this way, the layout preview server  accomplishes the same task as a content server  in a production environment in that the data elements required in order to process source code of a user interface and generate a user interface viewable by a client  are loaded into memory. Next, upon countering the include tag  () of the preview bundle of , the layout preview server  can invoke a user generated template  that can reference the data elements loaded into memory by the loadDataElements tag in order to generate a user interface viewable by a client .","Upon completion of processing the preview bundle , the layout preview server  can then generate a preview content page  that corresponds to a content page  generated by a content server  in a production environment. Accordingly, the layout preview server  permits at least one portion of a production content page  to be designated as a user developed portion  and a corresponding preview bundle  generated. This facilitates third party development of a template or source code in a web application framework language, which can be applied to a preview bundle to generate a preview content page .","The layout preview server  can also allow a user to interact with the various user interfaces generated by the content server  and retrieve a preview bundle  corresponding to a particular content page or user interface as they are needed. In this way, the preview server  can mimic interaction with a content server  via a variety of user interfaces by retrieving a preview bundle  corresponding to a content page when a user wishes to view the content page via the layout preview server . For example, a user can access a shopping cart user interface via the layout preview server , which can retrieve and process a corresponding preview bundle  from the content server . Accordingly, a user may wish to view the shopping cart user interface in a variety of ways in order to test a user generated template. For example, a user may wish to view a preview content page  with a corresponding preview bundle  via the layout preview server  after adding several items to a shopping cart. As another example, a user generated template may modify a portion of a content page that is common to various user interfaces. In this example, a user may wish to browse through various user interfaces by manipulating user interface elements on a preview content page . Accordingly, the layout preview server  can retrieve an appropriate preview bundle  corresponding to a content page when a user attempts to access a preview content page . In other words, the layout preview server  can dynamically generate a preview content page  depending on a content page generated by the content server  that a user attempts to access.","Additionally, the layout preview server  may also retrieve and store a plurality of preview bundles  to achieve a similar objective. In one example, a user may develop a user generated template in an \u201coffline\u201d environment and desire to test the user generated template in a variety of scenarios by employing a variety of preview content pages . Accordingly, the layout preview server  can store multiple preview bundles  corresponding to multiple content pages, allowing the user to view multiple preview content pages  without the need to separately download a preview bundle  corresponding to each.","Referring next to , shown is a flowchart that provides one example of the operation of the preview bundle application  () according to an embodiment of the present disclosure. Alternatively, the flowchart of  may be viewed as depicting steps of an example method implemented in the computing device  () to generate a preview bundle  () corresponding to a content page  () in a production environment. The preview bundle application  generates a preview bundle  that facilitates user interface development such that a third party or user can develop source code for generating a user interface without having access to proprietary services  (), an electronic repository  (), or other aspects of a content server  ().","Beginning with box , a request to generate a preview bundle  is received by the preview bundle application . In box , a portion of a content page  corresponding to a preview bundle  can be designated as a user developed portion (). In box , the preview bundle , which is based at least upon a content page  in a production environment, is generated. In one embodiment, content page  source elements (e.g., HTML tags) can be copied into the preview bundle . In box , source elements of the content page  upon which a preview bundle  is based that correspond to a designated user developed portion  are replaced with a data structure.","In one embodiment, the data structure can include a serialized or textual data structure that includes the data elements that would have been loaded into memory by the web application framework server  in a production environment. Accordingly, in box , the data structure is populated with data elements present in the content page  in a production environment. Finally, in box , the preview bundle  can be transmitted to a client .","Referring next to , shown is an example of one embodiment of the one or more computing devices  according to various embodiments. The computing device  may include a processor circuit having a processor  and a memory , both of which are coupled to a local interface . The local interface  may comprise, for example, a data bus with an accompanying control\/address bus as can be appreciated. To this end, each computing device  may comprise, for example, a computer system or other system with like capability. Such computer systems may be configured to optimally perform as a content server  () as can be appreciated.","Various components may be stored in the memory  and are executable by the processor  including, for example, an operating system  and the web application framework server . In some embodiments, the computing device  can execute a layout preview server  (). In addition, other applications may be stored in the memory  and executable by the processor  as can be appreciated. The electronic repository  can be accessible by the processor circuit of the computing device  so as to access the various data stored therein. Alternatively, the electronic repository  may be stored in locations other than within the computing device  or on other computing devices.","The operating system  and web application framework server  are described as being stored in the memory  and executable by the processor . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory  and run by the processor , or source code that may be expressed in proper format such as object code that is capable of being loaded into a of random access portion of the memory  and executed by the processor , etc., An executable program may be stored in any portion or component of the memory  including, for example, random access memory, read-only memory, a hard drive, compact disk (CD), floppy disk, or other memory components.","The memory  is defined herein as both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, floppy disks accessed via an associated floppy disk drive, compact discs accessed via a compact disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","In addition, the processor  may represent multiple processors and the memory  may represent multiple memories that operate in parallel. In such a case, the local interface  may be an appropriate network  that facilitates communication between any two of the multiple processors , between any processor  and any one of the memories , or between any two of the memories , etc.","The functionality of the preview bundle application  as depicted by the example flowchart of  or other applications described herein may be implemented, for example, in an object oriented design or in some other programming architecture. Assuming the functionality is implemented in an object oriented design, each block represents functionality that may be implemented in one or more methods that are encapsulated in one or more objects. The preview bundle application  may be implemented using any one of a number of programming languages such as, for example, C, C++, JAVA, or other programming languages.","With reference to , although the preview bundle application  is described as being embodied in software or code executed by general purpose hardware above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, the same can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The flowchart of  shows the functionality and operation of an implementation of the preview bundle application . If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the flow chart of  shows a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in  may be executed concurrently or with partial concurrence. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present invention.","Also, where the preview bundle application , layout preview server , and\/or web application framework server  comprises software or code, it can be embodied in any computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present invention, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the preview bundle application , layout preview server , and\/or web application framework server  for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as, for example, electronic, magnetic, optical, electromagnetic, infrared, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, or compact discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 7","FIG. 1"]}]},"DETDESC":[{},{}]}
