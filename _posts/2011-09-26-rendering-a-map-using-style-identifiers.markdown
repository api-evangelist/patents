---
title: Rendering a map using style identifiers
abstract: A map server generates vector descriptors and corresponding style identifiers for rendering a map image. Each vector descriptor indicates a geometry of a respective map element in accordance with a vector graphics format, and each style identifier identifies a style according to which the corresponding map element is rendered. The map server then causes map data including the vector descriptors and the style identifiers to be transmitted to the client device via a communication network. When the map server receives a request for style data for modifying a map image at the client device, the map server generates a description of visual characteristics for one or more styles identified by the style identifiers included in the map data previously provided to the client device and causes the description of visual characteristics to be transmitted to the client device for applying to the vector descriptors at the client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08681176&OS=08681176&RS=08681176
owner: Google Inc.
number: 08681176
owner_city: Mountain View
owner_country: US
publication_date: 20110926
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE DISCLOSURE","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation of and claims priority to U.S. application Ser. No. 13\/237,830, filed Sep. 20, 2011, entitled \u201cRendering a Map Using Style Identifiers,\u201d the entire disclosure of which is hereby expressly incorporated by reference herein.","The present disclosure relates to map rendering systems, such as electronic map display systems, and more specifically to a map rendering system that renders map elements using style data separated from content data.","The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent it is described in this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.","Today, maps of geographic regions may be displayed by software applications running on a wide variety of devices, including mobile phones, car navigation systems, hand-held Global Positioning System (GPS) units, and computers. Depending on the application and\/or user preferences, maps may display topographical data, street data, urban transit information, traffic data, etc. Further, some applications display maps in an interactive mode, so that a user may operate various controls (radio buttons, scrollbars, etc.) to change the zoom level or pan the \u201ccamera\u201d to a new location, for example. A user in some cases also may select or unselect the display of certain information. For example, the user may operate the appropriate control to turn on the display of bicycle trails.","To render a map image, a device typically receives raster images from a dedicated server. For example, a map server may operate on the Internet and provide images in a Portable Network Graphics (PNG) format to various client devices for the specified geographic regions. While raster images are relatively easy to render at a client device, raster image data typically requires a large amount of storage space for a comprehensive map. Also, it is difficult to efficiently manipulate raster images at a client device. For example, to zoom in on a selected region, either new raster image data is retrieved from the server, or the available raster image data is enlarged with a noticeable loss in quality.","In an embodiment, a method for providing data to a client device for rendering a map image at the client device is implemented in a map server. The client device is coupled to the map server via a communication network. The method includes generating vector descriptors that indicate geometry of map elements in accordance with a vector graphics format, generating, for each vector descriptor, a respective style identifier that identifies a style according to which the corresponding map element is rendered, and causing map data that includes the vector descriptors and the style identifiers to be transmitted to the client device. The method also includes receiving, from the client device, a request for style data for modifying a map image to which the map data corresponds, generating a description of visual characteristics for one or more styles identified by the style identifiers included in the map data in response to receiving the request for the style data, and causing the description of visual characteristics to be transmitted to the client device for applying to the plurality of vector descriptors at the client device.","In another embodiment, instructions stored on a tangible non-transitory computer-readable medium are executed on a processor of a client device to cause the processor to receive, from a user interface, a request to generate a map image for a selected geographic region corresponding to a selected map type. The instructions further cause the processor to generate a request for map data corresponding to the selected geographic region and the selected map type, such that the request includes (i) an indication of the selected map type and (ii) style identifiers that identify respective styles for use in rendering the map data. The instructions also cause the request for the map to be transmitted to a map server via a communication network and receive the map data in a vector graphics format from the map server. In particular, to receive the map data, the instructions cause the processor to receive vector descriptors that describe respective map elements associated with the selected geographic region and receive a description of visual characteristics for the styles identified in the request for map data. Further, the instructions cause the processor to generate the map image using the received plurality of vector descriptors, including use the received description of visual characteristics to render the plurality of vector descriptors.","In yet another embodiment, a method for providing data to a client device for rendering a map image is implemented in a map server that is coupled to the client device via a communication network. The method includes providing vector descriptors to the client device, where each of the plurality of vector descriptors describes a respective map element in accordance with a vector graphics format. Further, the method includes receiving, from the client device, a request for style data corresponding to several styles to be applied to the plurality of vector descriptors at the client device, including receiving a respective style identifier for each of the plurality of styles, determining which of the styles identified by the style identifiers share visual characteristics, and providing the style data to the client device. In particular, providing the style data includes providing a single instance of a description of visual characteristics shared by two or more styles and providing an indication that the two or more styles share the visual characteristics.","In another embodiment, a method in a map server for providing data to a client device, where the client device uses the data to render a map image, includes receiving, from the client device, a request for map data corresponding to a selected geographic region. The method also includes generating a description of map content in a vector graphics format and generating an indication of a plurality of styles to be applied to the map content when rendering the map image, such that each of the plurality of styles is associated with a respective set of visual characteristics. The method further includes providing the description of map content and the indication of the plurality of styles to the client device in response to the request for map data without providing a description of the visual characteristics of the plurality of styles. Still further, the method includes providing the description of the visual characteristics of the plurality of styles to the client device in response to receiving a request for style data.","Embodiments of systems and methods for efficiently transferring map data from a map server to a client device are discussed below. To render a map image in a web browser or another application, the client device may request map data from the map server via a communication network, and the map server in response may provide vector data and, in some cases, text data that describes map content as well as style data that indicates how the vector data and the text data should be rendered. More particularly, vector data may specify various geometric shapes (e.g., using mathematical descriptions) and indicate how these shapes should be positioned for rendering various map elements such as roads, buildings, parks, bodies of water, etc., while style data may describe such visual characteristics or properties as line thickness (e.g., width in pixels), line color, one or more fill colors, etc. for various visual styles that may be applied to the vector data. Text data may specify map labels to be displayed for individual or aggregate map elements, for example, and style data may be applied to the text data to render the text using a particular size, color, font, etc. The map server also may specify which visual styles the client device should apply to various vector-based descriptions of map elements (also referred to herein as vector descriptors or simply vectors).","In some embodiments, the map server indicates which visual style applies to a vector-based description of a map element for a particular map type, such as terrain, transit, traffic, bicycle trail, etc. To this end, several styles, each identified by a respective unique style identifier, may be defined. Each style may correspond to one or several visual styles for rendering map elements and\/or labels according to different map types. For example, a style with style identifier Smay correspond to visual style VSfor rendering a map element as a part of a basic map, visual style VSfor rendering the same map element as a part of a terrain map, and visual style VSfor rendering the same map element as a part of a traffic map or a transit map. As another example, a style with style identifier Smay correspond to visual style VSfor all map types. The map server may assign style identifiers to vector descriptors when providing map data to the client. In this manner, the map server may provide a certain vector descriptor to the client device only once, and the client may simply re-style the corresponding vector data and\/or text data when necessary, e.g., when a user of the client device changes the map type for a certain region. Moreover, the map server in some embodiments may recognize that certain styles correspond to same visual styles for a certain map type. As discussed in more detail below, to reduce the amount of data transmitted via the communication network, the map server may provide shared visual characteristics for several styles and indicate which styles share the visual characteristics for one or several map types.","Referring to , techniques for efficiently transferring map data may be implemented in a system . In an embodiment, the system  includes a map server , a client device  communicatively coupled to the map server  via a network , and a map database  communicatively coupled to the map server . The network  may be a wide area network (WAN) such as the Internet, a local area network (LAN), or any other suitable type of a network. Depending on the embodiment, the map database  is coupled to the map server  via the network  or via another communication link as illustrated in . For simplicity, only one instance of the map server , the client device , and the map database  is illustrated in . However, in other embodiments, the system  may include more than one map server , more than one client device , and\/or more than one map database .","The map server  may include a processor  and a computer-readable memory  that stores a map controller  in the form of computer instructions, for example, that may be executable on the processor  directly (e.g., as compiled code) or indirectly (e.g., as a script interpreted by another application executing on the processor ). The computer-readable memory  may include volatile memory to store computer instructions and data on which the computer instructions operate at runtime (e.g., Random Access Memory or RAM) and, in an embodiment, persistent memory such as a hard disk, for example. In an embodiment, the map controller  includes a dynamic feature controller  that generates vector data for various map elements that are provided as map content to the client device . As used herein, a map feature (or simply feature) may correspond to an individual map element such as a building or an aggregation of several map elements such as several buildings, a park, and several pedestrian paths of a college campus. In general, a map feature may be described using one or more vector descriptors.","In addition to vector data, the dynamic feature controller  may generate text data such as descriptions of map labels in the American Standard Code for Information Interchange (ASCII) format, a Unicode format, or any other suitable alphanumeric or character format. A map label may be displayed next to or on top of an individual map element such as a building, a park, or a street segment, or an aggregation of several map elements such as a village, a city, or a city neighborhood. In general, a map label may be displayed using characters of a particular color, font, size, etc. Similar to properties of map elements, these and similar properties of a label may correspond to a particular style.","The map controller  also includes a dynamic style controller  to provide style data to the client . According to various scenarios discussed below, the dynamic style controller  may provide style data along with vector and text data provided by the dynamic feature controller  in response to various events: receiving a request for map data including map content and style data from the client device , receiving a request for specified styles from the client device , detecting that a different map type has been selected at the client device , etc. The dynamic style controller  may utilize and, in some embodiments, manage a style table  that indicates visual characteristics for various styles. An example implementation of a style table that may be used as the style table  is discussed in more detail with reference to . In an embodiment, the dynamic style controller  uses the style table  to determine which of the styles to be applied to vector and\/or text data at the client device  share visual characteristics (or a visual style) for one or more types of map data and generates an appropriate indication for the client device .","With continued reference to , the client device  may include a processor  to execute instructions and a memory  to store instructions and data. The client device  also may include an input device  and an output device  to receive input from a user and provide output to the user, respectively. The input device  may include one or more of a keyboard, a mouse, and a touchscreen, and the output device  may include a touchscreen or another type of a monitor, for example. The client device  may include various software components, such as device drivers, operating system (OS) event handlers, etc. to control the input device  and the output device  so as to implement an interactive user interface. Further, software applications executing on the processor  may utilize these software components to provide an application-specific user interface.","In an embodiment, the client device  is a so-called thin client that depends on another computing device for certain computing and\/or storage functions. For example, in one such embodiment, the memory  includes only volatile memory such as RAM, and a program and\/or storage unit having persistent memory is external to the client device . In another embodiment, the memory  includes both volatile and persistent memory components.","A browser application  may include a set of computer-readable instructions that execute on the processor . In general, the browser application  accesses web pages that include content such as text, images, embedded video, etc. and instructions in a mark-up language such as Hypertext Markup Language (HTML), and renders the content on the output device  according to the instructions in the mark-up language. To this end, the browser application  may implement functions for generating and processing data packets that conform to the Hypertext Transfer Protocol (HTTP), parse HTML content, encode data according to the Secure Socket Layer (SSL) protocol, request and verify digital certificates, etc., as well as user interface functions for receiving various user commands related to navigation, rendering, and managing web page data. In some embodiments, the browser application  is configured to interpret instructions in a scripting language (e.g., Javascript) provided in a web page.","A dynamic map rendering engine  may execute as a component of the browser application . Depending on the embodiment, the dynamic map rendering engine  may be a plugin (e.g., a set of compiled instructions that extends the functionality of the browser application  and executes on the processor ), a script (e.g., a set of instructions in a scripting language interpreted by the browser application  at runtime), or another suitable software component. According to one example scenario, the dynamic map rendering engine  is downloaded when a user operating the client device  visits a web page that includes an embedded interactive map. More specifically, the web page may include a first hyperlink to an online map server and a certain geographic location as well as a second hyperlink to a copy of the browser application , which is required for rendering map data received from the online map server according to the first hyperlink.","During operation, the dynamic map rendering engine  may receive vector data, text data, and style data from the map server , generate corresponding map images using the received vector data and the style data, and cause the map image to be displayed within a certain region allocated by the browser application . For example, the browser application  may create an HTML5 Canvas element for displaying map images. The dynamic map rendering engine  may also store available style data in a style table , which is disposed in the memory .","In at least some of embodiments, the dynamic map rendering engine  receives vector data that specifies geometric shapes using mathematical descriptions of points and paths connecting the points. For example, rather than specifying each pixel that makes up a raster image of a line segment, vector data may specify the two endpoints of the line segment and indicate that the two endpoints are connected by a straight line. The dynamic map rendering engine  then may apply style data as appropriate to the specified line segment, so that the line segment is displayed with a particular color, width, etc. As another example, the vector data may specify the contour of a triangle, and the corresponding style data may specify the color of the contour lines, the width of the contour lines, and the color of the interior region of the triangle. In other words, rather than receiving raster images from the map server , the dynamic map rendering engine  may receive instructions for drawing a map image on the output device  and execute the instructions so as to generate a raster map image. In some cases, however, vector data also may include raster images as certain component elements that cannot be easily represented in a vector format.","For simplicity, the client device  is illustrated with a single processor . However, the client device  in other embodiments may include additional processing units (not shown) such as a graphics processing unit (GPU) configured to facilitate image rendering on the output device , for example. Further, in an embodiment, the browser application  may utilize a library of graphics functions for efficiently generating a map image. For example, the browser application  may utilize a software library that supports 3D graphics, such as WebGL, for example. As another example, the memory  may store a plugin, such as an OpenGL\u00ae or Direct3D\u00ae library, having functions for rendering graphics which various applications executing on the client , including the browser application , may access via an application programming interface (API). Also, in some embodiments, the memory  stores additional software components that facilitate efficient rendering of images via the output device . For example, the memory  may store an Adobe\u00ae Flash\u00ae plugin or an O3D plugin.","Now referring to , a map controller  may operate in the map server  of , for example. According to an embodiment, the map controller  is implemented as a set of instructions that are stored on a computer-readable medium and executable on one or more processors. For example, referring back to , the map controller  may be stored in the memory unit  and execute on the processor .","According to an embodiment, the map controller  includes a dynamic style controller , a dynamic feature controller , a map tile generator , and a map request processor . Generally speaking, the components , , , and  may be distributed among one or several servers in any suitable manner. For example, the dynamic style controller  and the dynamic feature controller  may operate in a first server, while the map tile generator  and the map request processor  may operate in a second server coupled to the first server via a network connection.","The map request processor  may be configured to process requests from client devices, such as the client device , for map data corresponding to a specified geographic regions. Each request may correspond to a single electronic message or a series of electronic messages, depending on the scenario and\/or embodiment. For example, the map request processor  may receive a request for map data corresponding to a two-mile-wide region centered at latitude 41\u00b0 52\u2032 43\u2033 and longitude \u221287\u00b0 38\u2032 11\u2033. The request may also indicate a zoom level for which map data is being requested. In general, zoom level may correspond to the apparent distance to a map image or a portion of the map image (e.g., as a result of changing the elevation of the viewpoint). In an embodiment, the map request processor  is configured to process requests that indicate a zoom level within a certain predefined range, with a lower zoom level corresponding to a larger distance or elevation. Still further, the request may indicate that map data is being requested for rendering a transit map. The request in this case may include a map type indication field set to the appropriate value. Further, as discussed in more detail with reference to , the map request processor  may receive a request for style data as well as map data. Depending on the scenario, the map request processor  may receive a request for map data and a request for style data in a single electronic message, e.g., a single HTTP message, or separately in respective electronic messages.","After the map request processor  receives a request for map data and\/or style data from a client device, the map controller  provides appropriate data to the client device via one or more electronic messages. In an embodiment, the map tile generator  generates map data as a set of map tile descriptors, such that each map tile descriptor describes a map tile, i.e., a portion of a map image of a certain size (e.g., 256 by 256 pixels). The size of a geographic region represented by an individual map tile depends on the zoom level with which the map tile is associated, so that a single map tile at a lower zoom level illustrates a larger geographic area than a single map tile at a higher zoom level. The map tile generator  may generate each map tile descriptor according to a vector graphics format, and a client device, such as the client device  of , may locally generate a raster image for each tile. In an embodiment, the map tile generator  retrieves the requested data from a map database such as the map database  illustrated in , for example.","When providing map data to a client device, the map controller  may separate map content from style data. The map content in general can include vector data only, vector data along with text data, and, according to some scenarios, text data only. In some cases, the map controller  may provide vector data and\/or text data that describes map content without providing the corresponding style data to the client device at the same time (if, for example, the client device already has the necessary style data) or, conversely, may provide style data without providing the vector data and\/or the text data for map content to which the style data applies (for re-rendering the available map content using updated style data, for example). Further, in some scenarios, the map controller  provides vector data, text data, and style data at the same time (e.g., in a same electronic message or a series of electronic messages), with each of the vector data, text data, and the style data selected in view of the vector data, text data, and the style data already available at the client device.","More particularly, the dynamic feature controller  may be communicatively coupled to the map tile generator  and configured to determine which map elements are associated with the requested map data and generate vector-based descriptions of these map elements. For example, the dynamic feature controller  may determine that, in response to a request for map data corresponding to zoom level Zfor a certain geographic region, vector descriptors corresponding to interstate highways, large bodies of water, etc. must be generated, whereas in response to another request for map data corresponding to zoom level Zfor the same geographic region, additional vector descriptors corresponding to local roads and buildings must be generated. The dynamic feature controller  in some cases also may determine that additional labels must be generated. Further, in some cases, the dynamic feature controller  generates different sets of vector descriptors for different map types. For example, a terrain map may include map elements that are not included in a basic map for the same geographic region and zoom level.","The dynamic style controller  also may be coupled to the map tile generator  and configured to determine what style data, if any, should be transmitted to a client device in response to a request for map data. In some scenarios, a request for map data indicates the map type (terrain, traffic, etc.) according to which a map image is to be generated as well as the styles for which style data is already available for the indicated map type. If, for example, a request for map data indicates that the client device already stores style data for transit maps for styles S, S, and S, and the dynamic style controller  determines that the client device requires styles Sand Sto render a transit map for the region identified in the request for map data, the dynamic style controller  may provide only the necessary style data for styles Sand S. In another embodiment, the request for map data explicitly identifies the styles Sand Sto request that appropriate style data be provided to the client device for rendering a transit map.","With continued reference to , the dynamic style controller  may manage and use a style table  that indicates various attributes for styles used in rendering maps at client devices. In general, the style table  may be implemented in any suitable manner, including the example illustrated in , according to which the style table  is indexed by the style identifier S and includes several component tables. In another embodiment, the style table  includes a single component table indexed by style identifier S.","According to an embodiment, the style table  includes a metadata table , which stores indexes to visual styles for various map types (base map, terrain map, etc.), an indication of a type of a map feature to which the style applies (road, building, etc.), and fields storing information specific to certain map features. The table  also may include fields that specify styles that apply to labels of a particular type or, alternatively, labels of all types, depending on the implementation. The metadata table  includes a priority field to associate style S, which applies to roads, with priority  (which may correspond to HIGHWAY), to consider just one example. Some of the entries in the metadata table  may include indexes VS, VS, etc. into a visual style table . The visual style table  may store visual characteristics for visual styles VS, VS, . . . VS. For example, a record within the visual style table  may store color, thickness, fill color, stroke type, etc. In an embodiment, the visual style table  stores values that are used both by the map server that implements the map controller  and client devices to which the map server provides style data. For example, colors may be identified by integers. According to some scenarios, several entries in the metadata table  refer to the same visual style, such as visual style with an identifier VS, for example.","Next, to better illustrate operation of a map server and a client device in the system of  or a similar environment, several scenarios are considered with reference to the interaction diagrams illustrated in , followed by a discussion of example map images in .","Referring first to , an example message exchange  involves a user interface , included in or otherwise associated with a client device (such as the client  of ), a dynamic rendering engine  operating in the client device, and a server  (such as the map server  of ). Referring back to , the user interface may be provided by the browser , while the dynamic rendering engine  and the server  may be implemented in the components  and , respectively.","In response to a user command, the user interface  may generate a request  for terrain map data for a certain region Rand provide the request to the dynamic rendering engine . The request  may be transmitted as an electronic message internal to the client device in which the components  and  are implemented, for example. The dynamic rendering engine  in turn may generate a request  for terrain map data, to be transmitted via a network communication to the server . The request  may specify the region Rusing latitude and longitude (which may be obtained using a GPS device, for example) or in any other suitable manner. Further, the request  may include a map type indication to specify that map data is being requested for rendering a terrain map. Still further, in some embodiments, the request  indicates which styles are already available at the client device that implements the components  and . In another embodiment, the client device provides a style identifier as well as one or more map type indications for the corresponding style. For example, the client device may indicate that style data is already available for transit and traffic types corresponding to style S.","In response to the request , the server  may generate a response  that provides map data for rendering several tiles T, T, . . . T. In general, however, map data may be provided for any number of tiles, including a single tile. For each tile, the response  may describe various features F, F, etc., each of which may be specified using one or several vector descriptors in accordance with a suitable vector graphics format. The response  also may include text data to specify labels that apply to features or groups of features. The response  may also indicate which styles apply to various features and\/or labels. In the example of , the response  specifies that in tile T, features Fand Fare associated with style S, feature Fis associated with style S, etc. In some embodiments, the response  also includes a description of visual characteristics for styles Sand Sapplicable to terrain maps. Upon receiving the response , the dynamic rendering engine  may generate map tiles in accordance with the received vector descriptors, text data, and style data (using an appropriate graphics library, for example), and generate an event  to cause the corresponding map image to be rendered via the user interface . To properly style various map features, the dynamic rendering engine  may utilize one or both of the style data included in the response  and the style data already available in the local style table (such as the style table  illustrated in ).","In the scenario of , the user decides to change the map type from terrain to transit without changing the geographic coordinates and activates the appropriate control via the user interface . In response, the user interface  generates a request  for transit map data and forwards the request  to the dynamic rendering engine . Rather than requesting new map tile data, the dynamic rendering engine  may determine which styles, if any, are required for re-rendering the features described in the response  to display a transit map. For example, the dynamic rendering engine  may determine that style data related to transit maps is required for styles S, S, and Sand generate a request  for style data including the corresponding style identifiers.","In an embodiment, the server  provides the requested style data in a response  that includes, for example, a description of relevant visual characteristics such as line color, interior color, line thickness, etc. In an embodiment, the response  provides style data for a certain style in terms of visual styles for which the visual characteristics are already available at the client device. For example, the style data for style Sincluded in the response  may include an identifier of visual style VSbut not include a definition of the visual style VSif the map server  determines that such data is already available at the client device. Also, the response  need not include any new vector descriptors or labels (however, in some scenarios, the response  may also include vector descriptors for features and\/or labels that are displayed in a transit map of the region Rbut are not displayed in a terrain map of the region R). Upon receiving the response , the dynamic rendering engine  may apply the received style data as appropriate to update the map tiles and generate an event  to cause the corresponding map image to be re-rendered via the user interface . Additionally, the dynamic rendering engine  may store the received style data in style table of the client device that implements the dynamic rendering engine .","In other embodiments, a request for style data, such as the request , does not include an explicit indication of which styles are required at the client device. In other words, the request for style data does not include style identifiers of the styles for which visual characteristics are required to re-render a map image according to a new map type. In one such embodiment, for example, the map controller  provides an indication of which styles are already available at the client device, and the server  uses this information to automatically identify style data to be provided in the response .","Referring to , rather than modifying a map type for the same region R, a user in another scenario  may wish to see a map of the same type (terrain) for another region, R, after a terrain map image is displayed at the client device for region R. The user interface  provides a request  for terrain map corresponding to region Rto the dynamic rendering engine , according to an embodiment. In response, the dynamic rendering engine  may generate a request  for new map features and\/or labels to be displayed in the region R, and the server  may provide new tile data in a response . In an embodiment, the response  is similar to the response  discussed with reference to  and includes vector descriptors and text data along with the respective style identifiers. More specifically, the response  may specify the geometry and positioning of map elements according to a vector graphics format, labels according to a text format, and include style identifiers for some or all vector identifiers and labels. In some embodiments, the response  may omit a description of visual characteristics for these styles. In other embodiments, however, the response  may include a description of visual characteristics for some or all of the styles.","Upon receiving the response , the dynamic rendering engine  may determine for which of the styles referenced in the response  the dynamic rendering engine  does not yet store style data. For example, the dynamic rendering engine  may determine that the style table at the client device already stores style data for most of the styles referenced in the response  but does not yet have style data for styles Sand S. Accordingly, the dynamic rendering engine  may generate a request  for style data corresponding to a terrain map and styles Sand S. The server  may provide the requested style data in a response , and the dynamic rendering engine  may cause new map tiles to be rendered using the vector descriptors received in the response , the new style data received in the response , and the previously received style data (e.g., style data received during an exchange similar to the messages  and  illustrated in ). The dynamic rendering engine  then may then generate an event  to cause the updated map image to be displayed via the interface . In this manner, the server  may efficiently provide map data to the dynamic rendering engine  without re-transmitting same style data for various geographic regions.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 4","FIG. 5"],"b":["250","156","154","154","252","252","252","252","156","156","156","256"],"sub":["A","B","C","A","B","C ","B ","C ","A ","B ","C","A ","B ","B ","C ","C"]},"To further illustrate the techniques discussed above,  depict maps that correspond to the same geographic region and are displayed according to the basic map type and the transit map type, respectively. A map server (such as the map server  of ) may provide map content independently of style data to a client device (such as the client device  of ) for rendering map images via a user interface of the client device. In particular, a map image  of a basic map, as illustrated in , includes map elements such as roads of several types, with each road being rendered using the corresponding description in a vector format and the corresponding style data. For example, roads  and  may be described in a vector format using straight lines or Bezier curves, with the width, color, and visual characteristics of the roads  and  being specified by the corresponding styles. A user may select the map type using an interactive dialogue box .","After the user may changes the map type to \u201ctransit,\u201d the map image  is modified to reflect transit information, as illustrated in . In this example, certain map features are rendered in the same manner for both the basic map type and the transit map type. The roads  and  of , however, are re-rendered as roads  and , respectively. More specifically, the roads  and , as well the roads  and , are rendered using same vector descriptors but different styles. In an example scenario, the vector descriptors are obtained once for rendering the basic map illustrated in , and style data for re-rendering the roads  and  as roads  and  is obtained separately after the user modifies the map type via the interactive dialogue box .","Next, several example methods that may be implemented in computing devices operating in the system of  or a similar environment are discussed with reference to . These methods may be implemented as computer programs developed in any suitable programming language and stored on the tangible, non-transitory computer-readable medium (such as one or several hard disk drives) and executable on one or several processors. More specifically, the methods of  may be implemented in the map server , and the method of  may be implemented in the client device . Although the methods of  can be executed on individual computers, such as servers or personal computers (PCs), it is also possible to implement at least some of these methods in a distributed manner using several computers, e.g., in a cloud computing environment.","Referring first to , an example method  for processing a request for map data may be implemented in a map server, for example. At block , a request for map data is received from a client device. The request for map data may specify some or all of a geographic region for which map data is being requested, a zoom level, a map type, an indication of style data already available at the client device, etc. In general, the request for map data may be an electronic message that conforms to any suitable format (e.g., HTTP layered over TCP\/IP).","At block , the request is processed and a list of map features is generated in accordance with the requested map type, zoom level, and other parameters. For example, the list of map features for a basic map may include, at a certain zoom level, buildings, roads, parks, bodies of water, etc. For a transit map, the list may also include bus routes, subway lines, etc. Next, vector descriptors are provided for the generated list of features at block . Referring back to , for example, blocks , , and  may be implemented in the components , , and , respectively.","At block , a list of styles applicable to the requested map data is generated. In an embodiment, the list generated at block  includes each style identifier used with one or more vector descriptors generated at block . Next, at blocks -, style data to be provided to the client device is selected. First, at block , it is determined whether the client device has requested the definition for a certain style included in the generated list. As discussed above, a request for map data or style data (such as the one received at block ) may specify styles explicitly by including style identifiers for styles unavailable at the client device, for example, or implicitly by providing a list of styles already available at the client device. If it is determined that the client device has requested style data for the given style, a set of visual characteristics is provided at block , and the flow proceeds to block . Otherwise, if it is determined that the client device has not requested style data for the given style, the flow proceeds directly to block .","If the list of styles is not yet exhausted, the flow returns from block  to block . Otherwise, if it is determined at block  that all styles in the list generated at block  have been processed, the flow proceeds to block , where one or more map tiles are generated. In particular, the data provided at blocks  and  may be organized according to the corresponding map tiles and included in one or several electronic messages to be transmitted to a client device. Referring back to , for example, the data for each map tile may include vector descriptors for the map elements to be rendered in the map tile as well as style identifies for the styles to be applied to these vector descriptors.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 8","FIG. 1"],"b":["450","400","450","12","452","454","456","458"],"sub":["5 ","9 ","3","5","5 ","9 "]},"Now referring to , an example method  for retrieving map data from a map server may be implemented in a client device such as the client device  of , for example. More specifically, the method  is implemented in a dynamic map rendering engine similar to the component  of  or the component  of , according to an embodiment.","At block , a user request to generate a map image for a certain geographic region is received from a user interface, for example. The user request may be generated in response to the user activating an interactive control such as a button or, in some scenarios, simply loading a web page that includes an embedded map. In addition to an indication of a geographic area, the user request may specify a map type and indicate a zoom level. In an embodiment, the default map type may be set to a basic map.","A request for map content and style data for the specified map type may be generated at block . In some embodiments, the request for style data is generated in view of the style data already available at the client device. For example, the request generated at block  may include style identifiers for those styles that are stored in a style table of the client device for the specified map type. In another embodiment, the request for map content and style data does not explicitly identify the requested styles.","At block , the requested map content is received in the form of vector data, e.g., as vector descriptors corresponding to map features. The vector descriptors may be provided along with respective style identifiers to indicate, to the client device, how the map features should be rendered. Next, style data is received at block . In some embodiments, the map content and the style data are received in a single message. In other embodiments, the map content and the style data are received separately. At block , a map image is generated using the received map content and one or both of the style data received at block  and style data previously made available at the client device. Further, in an embodiment, an additional request for style data is generated as an additional step (not shown) following block  or , for example.","The following additional considerations apply to the foregoing discussion. Throughout this specification, plural instances may implement components, operations, or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations, one or more of the individual operations may be performed concurrently, and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements fall within the scope of the subject matter herein.","Certain embodiments are described herein as including logic or a number of components, modules, or mechanisms. Modules may constitute either software modules (e.g., code embodied on a machine-readable medium or in a transmission signal) or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments, one or more computer systems (e.g., a standalone, client or server computer system) or one or more hardware modules of a computer system (e.g., a processor or a group of processors) may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations as described herein.","Unless specifically stated otherwise, discussions herein using words such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining,\u201d \u201cpresenting,\u201d \u201cdisplaying,\u201d or the like may refer to actions or processes of a machine (e.g., a computer) that manipulates or transforms data represented as physical (e.g., electronic, magnetic, or optical) quantities within one or more memories (e.g., volatile memory, non-volatile memory, or a combination thereof), registers, or other machine components that receive, store, transmit, or display information.","As used herein any reference to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular element, feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","Some embodiments may be described using the expression \u201ccoupled\u201d and \u201cconnected\u201d along with their derivatives. For example, some embodiments may be described using the term \u201ccoupled\u201d to indicate that two or more elements are in direct physical or electrical contact. The term \u201ccoupled,\u201d however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other. The embodiments are not limited in this context.","As used herein, the terms \u201ccomprises,\u201d \u201ccomprising,\u201d \u201cincludes,\u201d \u201cincluding,\u201d \u201chas,\u201d \u201chaving\u201d or any other variation thereof, are intended to cover a non-exclusive inclusion. For example, a process, method, article, or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process, method, article, or apparatus. Further, unless expressly stated to the contrary, \u201cor\u201d refers to an inclusive or and not to an exclusive or. For example, a condition A or B is satisfied by any one of the following: A is true (or present) and B is false (or not present), A is false (or not present) and B is true (or present), and both A and B are true (or present).","In addition, use of the \u201ca\u201d or \u201can\u201d are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the invention. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.","Upon reading this disclosure, those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for generating map data through the disclosed principles herein. Thus, while particular embodiments and applications have been illustrated and described, it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications, changes and variations, which will be apparent to those skilled in the art, may be made in the arrangement, operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIGS. 3-5","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 6A","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 6B","FIG. 6A"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 9","FIG. 1"]}]},"DETDESC":[{},{}]}
