---
title: Systems and methods for providing a fine to coarse look ahead in connection with parametrization metrics in a graphics system
abstract: Systems and methods are provided for providing a fine-to-coarse look ahead in connection with parametrization in a graphics system. The use of a variety of parametrization metrics may be supplemented and improved by the fine-to-coarse look ahead techniques of the invention. First, the metric of a parametrization is minimized using a coarse-to-fine hierarchical solver, and then accelerated with a fine-to-coarse propagation. The resulting parametrizations have increased texture resolution in surface regions with greater signal detail at all levels of detail in the progressive mesh sequence.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06982714&OS=06982714&RS=06982714
owner: Microsoft Corporation
number: 06982714
owner_city: Redmond
owner_country: US
publication_date: 20020501
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE AND PERMISSION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","CONCLUSION"],"p":["A portion of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document: Copyright\u00a9 2001, Microsoft Corp.","The present invention relates to systems and methods for providing a fine-to-coarse look ahead in connection with a parametrization metric utilized in connection with a parametrization process in a graphics computing system.","Texture mapping lets a color signal be imaged onto geometry, giving the appearance of detail on coarse triangle meshes. Using textures is generally more efficient than refining the carrier geometry to represent the signal per vertex. While rasterization hardware has supported basic texture mapping for many years, it has recently begun to offer more powerful features. Multitexturing lets several textures contribute to a pixel fragment, and shader expression trees combine these textures using complex operations. In particular, the trend is towards more general programmability.","With this increased rasterization functionality, many surface signals other than color can be used to achieve new rendering effects, including bump mapping (where surface normals are the signal), displacement mapping (geometry), irradiance shading (spherical harmonics), and self-shadowing (horizon maps). These techniques provide further motivation to compress signals defined with vertex attributes into textures parametrized over the mesh.","There are numerous parametrization techniques. For example, Eck et al. propose the discrete harmonic map, which assigns non-uniform springs to the mesh edges. Duchamp et al. investigate multiresolution solution methods for computing harmonic maps. Floater proposes a similar metric with a different edge-spring weighting that guarantees an embedding for convex boundaries. Haker et al. compute conformal maps onto the sphere. Hormann and Greiner propose the MIPS parametrization, which attempts to preserve the ratio of singular values over the parametrization.","Maillot et al. base their metric on mesh edge springs of nonzero rest length, where rest length corresponds to edge length on the surface. Levy and Mallet use a metric that combines orthogonality and isoparametric terms.","Commonly assigned U.S. patent appln. Ser. No. 10\/138,751 (the '751 application) teaches a parametrization technique that focuses on making textures as small as possible for an unknown surface signal. The geometric-stretch metric taught therein minimizes undersampling by integrating the sum of squared singular values over the map. Intuitively, this measures how distances in the domain get stretched when mapped onto the surface.","Thus, many schemes for flattening a surface chart into 2D minimize some form of a geometric distortion metric. Many of these distortion metrics are tailored for the authoring problem of mapping an existing image onto a surface mesh, rather than the problem of sampling a given surface signal.","In addition to geometric distortion metrics, there has also been some work in exploiting knowledge of the surface signal in optimizing parametrization schemes.","With respect to existing works in the area of signal-specialized chart parametrization, given an existing parametrization, Sloan et al. warp the square texture domain onto itself to more evenly distribute a scalar importance field. Terzopolous and Vasilescu approximate a 2D image using a warped grid of sample values. The warping is achieved using a dynamic simulation where grid edge weights are set according to local image content. Hunter and Cohen compress an image as a set of texture-mapped rectangles, obtained by k-d tree subdivision of the image based on frequency content.","With respect to the use of multi-chart parametrization, to avoid excessive distortion, an arbitrary mesh is generally parametrized using multiple charts. At the limit, distortion can be driven to zero by making each triangle its own chart. However, partitioning the surface into many charts has drawbacks. Such partitioning constrains mesh simplification, requires more inter-chart gutter space, leads to mipmap artifacts, and fails to exploit continuity across charts. Thus, a balance should be made between parametrization distortion and the drawbacks of charts. Several existing approaches, such as Eck et al., Garland et al., Krishnamurthy et al., Maillot et al. and Sander et al., directly partition the original mesh, while other schemes, such as Cignoni et al., Lee et al. and Sander, Gu et al., define the charts using mesh simplification. For an interactive 3D painting system, for example, Igarashi and Cosgrove construct charts based on the history of drawing operations. The texture resolution on a surface region is selected using the viewing resolution at the time the region was last painted. Commonly assigned copending U.S. patent appln. Ser. No. 10\/138,289 (the '289 application) discloses a technique that provides improved parametrization optimized in accordance with a surface signal metric for efficient and accurate graphics reconstruction, wherein the technique automatically adapts to the content of the signal, and scales the charts based on this content.","Existing Parametrization techniques involve tradeoffs, and may be selected for various reasons. For example, the geometric approaches of Sloan et al., Terzopolous and Vasilescu, and Hunter and Cohen do not take any knowledge of the signal on the surface into account, fail to adequately capture information about signal directionality, which allows the parametrization to squash in the direction across the signal gradient and\/or restrict the chart boundary to be a square. Some prior art approaches do not provide continuous solutions that adequately adapt to high frequencies along diagonal directions. Some approaches are too computationally intensive, or are impractically applied.","One application for parametrization schemes of all kinds, utilizing all sorts of metrics, some of which are describe above, is to create a progressive mesh (PM) representation, which encodes an arbitrary mesh as a simple base mesh Mand a sequence of n refinement operations called vertex splits. The PM defines an array {M. . . M} of level-of-detail (LOD) approximations, and supports geomorphs and progressive transmission. Unlike multiresolution frameworks based on subdivision, the meshes in a PM have irregular connectivities that can accurately model sharp features (e.g., creases and corners) at all scales.","One challenge in the PM framework is handling texture maps. Hardware rasterization features, including bump maps, normal maps, and multitexturing, allow fine detail to be captured in texture images parametrized over the mesh. Processes that implicate sources for textures include sampling detailed scanned meshes, evaluating solid textures, ray tracing, and 3D painting. In this regard, there are various problems associated with parametrizing texture images over all meshes in a PM sequence. One particular problem is that sometimes the transition from a coarse mesh to a fine mesh is not smooth. For example, there may be, relatively speaking, very few samples devoted to a portion of high detail in a coarse mesh, which, when transitioning to the corresponding finely detailed mesh having, relatively speaking, a lot of samples devoted to the same portion of high detail in the fine mesh, causes artifacts as the switchover is made from relatively few samples in the coarse mesh to the relatively high number of samples in the fine mesh.","However, present approaches do not take this into account because earlier approaches represent the detail simply by storing signal values at the mesh vertices. The problem with such an approach is that in a coarser more simplified mesh, there are many fewer vertices, so the detail defined on the fine mesh cannot be accurately represented using just signal values at the vertices. Hormann, Greiner and Campagna provide techniques relating to hierarchical parametrizations of triangulated surfaces. Their techniques solve a sequence of progressively more refined parametrization problems, e.g., a progressive mesh sequence, but their techniques do not gather any information about finer levels when parametrizing the coarser meshes. Accordingly, it would be desirable to provide a technique for use in connection with the generation of a progressive mesh sequence, whereby if there is a lot of detail in a region of the fine surface, additional samples are allocated in parametrizing that same region on the coarser meshes.","In view of the foregoing, the present invention relates to systems and methods for providing a fine-to-coarse look ahead in connection with parametrization in a graphics system. The use of a variety of parametrization metrics may be supplemented and improved by the fine-to-coarse look ahead techniques of the invention. First, the metric of a parametrization is minimized using a coarse-to-fine hierarchical solver, and then accelerated with a fine-to-coarse propagation. The resulting parametrizations have increased texture resolution in surface regions emphasized by the selected parametrization metric at all levels of detail in the progressive mesh sequence.","Other features and embodiments of the present invention are described below.","Overview","As described in the background, there are a number of pre-existing techniques for parametrizing a mesh for later reconstruction. For instance, the techniques of Hormann, Greiner and Campagna solve a sequence of progressively more refined parametrization problems; however, their techniques do not gather any information about finer levels when parametrizing the coarser meshes, and thus provide no \u201clook ahead\u201d as provided in accordance with the invention. The present invention provides a technique that improves on the use of pre-existing parametrization metrics in connection with the generation of an array of level of detail approximations of the surface mesh.","A main contribution of the invention is the provision of efficient parametrization algorithm(s) to minimize a parametrization metric using a multiresolution hierarchy in connection with which (1) the metric values are computed on the fine mesh triangles, and propagated fine-to-coarse in the hierarchy and (2) the chart is parametrized using a coarse-to-fine optimization, by transforming and evaluating the metric values.","The algorithm(s) are incorporated in a system for creating parametrizations of meshes. By allocating greater texture density to surface regions that have the characteristic(s) looked for by the parametrization metric, the resulting parametrizations reduce signal approximation error for the characteristic(s) for a given texture size or permit smaller textures for a given approximation error.","Exemplary Networked and Distributed Environments","One of ordinary skill in the art can appreciate that a computer or other client or server device can be deployed as part of a computer network, or in a distributed computing environment. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes, which may be used in connection with a parametrization process. The present invention may apply to an environment with server computers and client computers deployed in a network environment or distributed computing environment, having remote or local storage. The present invention may also be applied to standalone computing devices, having programming language functionality, interpretation and execution capabilities for generating, receiving and transmitting information in connection with remote or local services.","Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information, cache storage, and disk storage for files. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may implicate a parametrization process that may utilize the techniques of the present invention.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 1A","FIG. 1A"],"b":["10","10","110","110","110","14","10","110"],"i":["a","b","a","b","c"]},"In a distributed computing architecture, computers, which may have traditionally been used solely as clients, communicate directly among themselves and can act as both clients and servers, assuming whatever role is most efficient for the network. This reduces the load on servers and allows all of the clients to access resources available on other clients, thereby increasing the capability and efficiency of the entire network. Parametrization services in accordance with the present invention may thus be distributed among clients and servers, acting in a way that is efficient for the entire network.","Distributed computing can help businesses deliver services and capabilities more efficiently across diverse geographic boundaries. Moreover, distributed computing can move data closer to the point where data is consumed acting as a network caching mechanism. Distributed computing also allows computing networks to dynamically work together using intelligent agents. Agents reside on peer computers and communicate various kinds of information back and forth. Agents may also initiate tasks on behalf of other peer systems. For instance, intelligent agents can be used to prioritize tasks on a network, change traffic flow, search for files locally or determine anomalous behavior such as a virus and stop it before it affects the network. All sorts of other services may be contemplated as well. Since graphical object(s) may in practice be physically located in one or more locations, the ability to distribute parametrization services is of great utility in such a system.","It can also be appreciated that an object, such as , may be hosted on another computing device  or . Thus, although the physical environment depicted may show the connected devices as computers, such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs, televisions, MP3 layers, etc., software objects such as interfaces, COM objects and the like.","There are a variety of systems, components, and network configurations that support distributed computing environments. For example, computing systems may be connected together by wireline or wireless systems, by local networks or widely distributed networks. Currently, many of the networks are coupled to the Internet, which provides the infrastructure for widely distributed computing and encompasses many different networks.","In home networking environments, there are at least four disparate network transport media that may each support unique protocol such as Power line, data (both wireless and wired), voice (e.g., telephone) and entertainment media. Most home control devices such as light switches and appliances may use Power line for connectivity. Data Services may enter the home as broadband (e.g., either DSL or Cable modem) and are accessible within the home using either wireless (e.g., HomeRF or 802.11b) or wired (e.g., Home PNA, Cat 5, even Power line) connectivity. Voice traffic may enter the home either as wired (e.g., Cat 3) or wireless (e.g., cell phones) and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short, a variety of disparate sources exist for the storage and transmission of data, and consequently, moving forward, computing devices will require ways of sharing data, such as data accessed or utilized incident to the parametrization of graphics object(s) in connection with the present invention.","The Internet commonly refers to the collection of networks and gateways that utilize the TCP\/IP suite of protocols, which are well-known in the art of computer networking. TCP\/IP is an acronym for \u201cTransport Control Protocol\/Interface Program.\u201d The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide-spread information sharing, remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services, essentially without restriction.","Thus, the network infrastructure enables a host of network topologies such as client\/server, peer-to-peer, or hybrid architectures. The \u201cclient\u201d is a member of a class or group that uses the services of another class or group to which it is not related. Thus, in computing, a client is a process, i.e., roughly a set of instructions or tasks, that requests a service provided by another program. The client process utilizes the requested service without having to \u201cknow\u201d any working details about the other program or the service itself. In a client\/server architecture, particularly a networked system, a client is usually a computer that accesses shared network resources provided by another computer e.g., a server. In the example of , computers , , etc. can be thought of as clients and computer , , etc. can be thought of as the server where server , , etc. maintains the data that is then replicated in the client computers , , etc.","A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server.","Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example, Hypertext-Transfer Protocol (HTTP) is a common protocol that is used in conjunction with the World Wide Web (WWW). Typically, a computer network address such as a Universal Resource Locator (URL) or an Internet Protocol (IP) address is used to identify the server or client computers to each other. The network address can be referred to as a URL address. For example, communication can be provided over a communications medium. In particular, the client and server may be coupled to one another via TCP\/IP connections for high-capacity communication.","Thus,  illustrates an exemplary networked or distributed environment, with a server in communication with client computers via a network\/bus, in which the present invention may be employed. In more detail, a number of servers , , etc., are interconnected via a communications network\/bus , which may be a LAN, WAN, intranet, the Internet, etc., with a number of client or remote computing devices , , , , , etc., such as a portable computer, handheld computer, thin client, networked appliance, or other device, such as a VCR, TV, oven, light, heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process graphical object(s).","In a network environment in which the communications network\/bus  is the Internet, for example, the servers , , etc. can be Web servers with which the clients , , , , , etc. communicate via any of a number of known protocols such as HTTP. Servers , , etc. may also serve as clients , , , , , etc., as may be characteristic of a distributed computing environment. Communications may be wired or wireless, where appropriate. Client devices , , , , , etc. may or may not communicate via communications network\/bus , and may have independent communications associated therewith. For example, in the case of a TV or VCR, there may or may not be a networked aspect to the control thereof. Each client computer , , , , , etc. and server computer , , etc. may be equipped with various application program modules or objects  and with connections or access to various types of storage elements or objects, across which files may be stored or to which portion(s) of files may be downloaded or migrated. Any computer , , , , etc. may be responsible for the maintenance and updating of a database  or other storage element in accordance with the present invention, such as a database or memory  for storing graphics object(s) or intermediate graphics object(s) processed according to the invention. Thus, the present invention can be utilized in a computer network environment having client computers , , etc. that can access and interact with a computer network\/bus  and server computers , , etc. that may interact with client computers , , etc. and other like devices, and databases .","Exemplary Computing Device",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1B"},"Although not required, the invention can be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application software that operates in connection with the parametrization of graphics object(s). Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network\/bus or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices, and client nodes may in turn behave as server nodes.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1B","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable, nonvolatile memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable, nonvolatile memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked or distributed environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks\/buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Exemplary Distributed Computing Frameworks or Architectures","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web-enabled interface for applications and computing devices, making computing activities increasingly Web browser or network-oriented.","For example, MICROSOFT\u00ae's .NET platform includes servers, building-block services, such as Web-based data storage and downloadable device software. Generally speaking, the .NET platform provides (1) the ability to make the entire range of computing devices work together and to have user information automatically updated and synchronized on all of them, (2) increased interactive capability for Web sites, enabled by greater use of XML rather than HTML, (3) online services that feature customized access and delivery of products and services to the user from a central starting point for the management of various applications, such as e-mail, for example, or software, such as Office .NET, (4) centralized data storage, which will increase efficiency and ease of access to information, as well as synchronization of information among users and devices, (5) the ability to integrate various communications media, such as e-mail, faxes, and telephones, (6) for developers, the ability to create reusable modules, thereby increasing productivity and reducing the number of programming errors and (7) many other cross-platform integration features as well.","While exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of the invention may also be implemented via an operating system, application programming interface (API) or a \u201cmiddle man\u201d object between a coprocessor and requesting object, such that parametrization services may be performed by, supported in or accessed via all of NET's languages and services, and in other distributed computing frameworks as well.","Fine To Coarse Look Ahead","As discussed above, there are many different existing parametrization metrics that can be used in connection with computer graphics. In accordance with the invention, first, the metric of a parametrization is minimized using a coarse-to-fine hierarchical solver, and then accelerated with a fine-to-coarse propagation. The resulting parametrizations have increased texture resolution in surface regions emphasized by the selected parametrization metric at all levels of detail in the progressive mesh sequence.","It is often difficult to create a parametrization as a single unfolding, and so generally, a surface can be partitioned into charts, each of which is parametrized onto a region of the domain. Using such a parametrization, the surface signal is sampled into a texture image of the appropriate resolution. Then, at runtime, hardware rasterization reconstructs the signal on each pixel fragment, typically using bilinear interpolation of the texture samples, and possibly with mipmapping and anisotropic filtering.","At the outset,  illustrate the results of two different parametrization schemes. The parasaur of  was generated from a pure geometric-based metric blind to the surface signal, such as taught by the '751 application whereas the parasaur of  was generated from a signal-specialized parametrization, such as taught by the '289 application. In each case, the surface signal is captured into a 128\u00d7128 texture. Intuitively, one can observe the tradeoffs between these two parametrization metrics. One can observe, for example, that the geometric-based technique attempts to minimize geometric-stretch of the image, thereby attempting to give extra mesh detail to those areas where geometry rapidly and\/or abruptly changes, e.g., at the mouth of the parasaur; however, where geometry is not rapidly and\/or abruptly changing, but there is nonetheless a great amount of detail in the signal on the surface, the geometric based metric performs poorly at reconstruction. For instance, at the bandana, and the edges of the eye patch, the geometry of the parasaur head is relatively smooth, but the signal is rapidly changing, and thus the geometric metric has not performed as well whereas the signal specialized metric reproduces the detail of the signal better.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIGS. 2C and 2D","FIGS. 2A and 2B","FIG. 2D","FIG. 2C"]},"Affine Transformation Rule for a Parametrization Metric","The parametrization results can be modified in an affine transform of each mesh triangle, such that a new parametrization metric value for a transformed triangle can be computed from its original parametrization metric value. The original parametrization metric values can be pre-computed on the original mesh faces with respect to canonical face parametrizations. During optimization, an affine transform rule can be provided depending upon the particulars of the parametrization metric implicated in order to quickly evaluate the modified parametrization metric.","Chart Parametrization Algorithm Utilizing a Parametrization Metric","An exemplary chart parametrization algorithm may be implemented as follows. After obtaining some initial chart parametrization, the parametrization metric may be minimized by repeatedly updating individual vertex (s,t) coordinates using line searches in the domain. To prevent parametric folding, each vertex may be constrained to remain in the kernel of its neighbors.","With respect to the parametrization metric, parametrization metric values are first computed on each triangle. Then, any perturbation of a vertex during optimization induces an affine transform on each of its adjacent faces. The sum of the parametrization metric values on these affinely transformed triangles are then minimized.","However, optimizing the chart parametrization using a uni-resolution algorithm has slow convergence, and often converges to bad local minima, depending upon the parametrization metric selected.","Thus, both the speed and result of optimization are improved with the invention using a novel multiresolution optimization algorithm. In this regard, a hierarchy is established over the chart using a progressive mesh (PM) representation. This PM is constructed by simplifying the chart mesh using a sequence of half-edge collapses, with a quadric error metric that seeks to preserve the characteristics of the original mesh worked upon by the selected parametrization metric.","Then, as described in more detail below, this PM sequence is used (1) to propagate the parametrization metric values fine-to-coarse from the original mesh to all coarser meshes, and (2) to apply a coarse-to-fine parametrization algorithm that uses these parametrization metric values.","Fine-to-Coarse Metric Propagation","For the hierarchical optimization technique of the invention, the parametrization metric values defined on triangles of the fine mesh are redistributed to the triangles of the coarser meshes in the PM sequence. This redistribution is generally inexact, because the triangles in the meshes at different resolutions lack any nesting property on the surface.","For the parametrization metric values to be transferred between faces, they are expressed with respect to a common coordinate system. The invention utilizes the current parametrization for this purpose. The parametrization metric values in the fine mesh triangles are affinely transformed from their canonical frames to their shapes in the current parametrization.","Then, for each half-edge collapse in the PM sequence, the parametrization metric values are redistributed using the simple scheme illustrated in , whereby for each coarse triangle of a coarse mesh originating from, or associated with, two or more finer triangles of a finer mesh, the sum of the parametrization metric values for each finer triangle is assigned to the coarse triangle. This heuristic scheme has the property that the sum of parametrization metric values over mesh triangles is maintained at all levels of detail. Also, the redistribution weights are independent of the current parametrization. In other embodiments, more complex redistribution weights based on parametric overlap areas could be utilized, however, these alternate embodiments generally do not perform as well because the parametrization can initially be poor, i.e., contain highly stretched triangles. In this regard, because the parametrization metric value associated with each subsequent mesh triangle of a coarser mesh than the previous mesh embodies at least one parametrization metric value of the previous mesh for that portion of the mesh, sampling information from the finest level of detail approximation is propagated through to the coarser level of detail approximations. In this way, the invention provides a fine-to-coarse (FTC) propagation of the finest level of detail approximation to the coarser level of detail approximations, to preserve sampling proportionality for regions of fine detail even at coarse levels of detail.","Coarse-to-Fine Parametrization","The coarse-to-fine algorithm of the invention is performed as follows. First, an initial embedding is created for the few faces in the PM base mesh using a brute-force optimization, but also using the parametrization metric values propagated from the fine mesh. Then, for each vertex split refinement operation in the PM sequence, the newly added vertex is placed at the centroid of the kernel of its neighborhood polygon. The placement of the added vertex and its neighbors is then optimized using parametrization metric values. The following exemplary non-limiting pseudocode describes an embodiment of the invention:",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Parametrize the newly added vertex and its neighbors."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"procedure optimizevertexsplit(Vertex vnew)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ obtain initial (s,t) such that the neighborhood is an embedding"]},{"entry":[{},"vnew.st:=centroid(kernel(Neighborhood(vnew)))"]},{"entry":[{},"optimizevertexparametrization(vnew)"]},{"entry":[{},"repeat vertexniter times"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for (v \u03b5 Neighbors(vnew))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"optimizevertexparametrization(v)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"optimizevertexparametrization(vnew)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In case the selected parametrization metric can have zero gradient, e.g., where the characteristic of the mesh measured by the parametrization metric is locally constant on a region of the surface, as a regularizing term, the invention may add a tiny fraction of another characteristic of the mesh, such as a geometry term, to the minimized energy functional. This prevents the formation of degenerate triangles, and ensures that new vertices find non-degenerate neighborhood kernels.","Iterated Multigrid Strategy","The coarse-to-fine (CTF) optimization thus creates a new parametrization of the fine mesh. The new parametrization modifies the transformed parametrization metric values on the fine mesh triangles. These transformed parametrization metric values can be propagated fine-to-coarse (FTC), to be used in another iteration of CTF optimization. This process is similar to the V-cycle commonly used in multigrid optimization, but applied here to irregular, non-nested grids. In classical multigrid, the coarse-level operation is uniquely defined using a restriction operation. In our setting, the mapping g is given at the fine resolution only. Thus, the energy on some coarse mesh can be defined given some pointwise mapping between the fine and coarse meshes. The invention thus obtains this mapping implicitly by solving for a parametrization at the finest level and using this parametrization to propagate Integrated Metric Tensors (IMT) fine-to-coarse. Thus, the current fine-level solution is actually used to define the coarse-level problem.","To bootstrap this iterative optimization process, an initial parametrization is utilized to transform the parametrization metric values on the finest mesh. This initial parametrization may be obtained using a CTF optimization with a metric that considers the geometry of the mesh. Since parametrization metric values are not yet present, the CTF optimization makes reference to the geometry of the coarse meshes, i.e., x, y, z at each vertex. The intuition represented by this is that a simplified mesh forms a good geometric approximation, and therefore its parametrization is a good starting state for parametrizing a finer mesh.","The high-level algorithm can be summarized with the following exemplary non-limiting pseudocode:",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"procedure optimizechartparametrization"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Pre-compute canonical parametrization metric values on fine mesh faces."},{"entry":"Construct progressive mesh of chart."},{"entry":"\/\/ Initialize the parametrization:"},{"entry":"CTF optimize geometric metric without parametrization metric values."},{"entry":"\/\/ iteratively optimize using parametrization metric:"},{"entry":"repeat ftcctfniter times"},{"entry":"Transform fine mesh parametrization metric values using current"},{"entry":"parametrization."},{"entry":"FTC propagate parametrization metric values to all PM meshes."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Fine-to-Coarse Metric Propagation"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CTF optimize signal-stretch using parametrization metric values."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Coarse-to-Fine Parametrization"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"It is noted that one may use CTF optimization directly on the per-vertex characteristic(s) of the mesh measured by the parametrization metric instead of on the parametrization metric values. However, a problem with such a technique is that the characteristic(s) may vary too much. For example, unlike a geometric signal, a surface signal is not well approximated on a coarser mesh. As an example, a color-map signal usually zigzags across the unit Red Green Blue (RGB) cube many times as one traverses the surface. Thus, an optimized coarse mesh often fails to adequately \u201creserve\u201d space in the parametric domain for signal detail present in the finer meshes. Thus, the parametrization metric values and their FTC propagation provide this look ahead capability.","Chart Boundary Optimization","To improve the parametrization quality, chart boundary vertices are allowed to move in the texture domain in accordance with the invention, at all levels of the coarse-to-fine optimization algorithm. For this to work, the invention overcomes the following two problems.","First, the geometric-stretch and signal-stretch metrics are not scale-invariant. These functionals go to zero as the chart becomes infinitely large. Scale-invariance is achieved by the invention by multiplying the functionals by total chart area. This is preferable to multiplying per-triangle stretch by per-triangle area because it is computationally more stable.","Second, it is possible for the optimized chart boundary to self-intersect. To prevent this, when optimizing a chart boundary vertex, the invention tests for intersections between the two adjacent boundary edges and the remaining boundary edges. Since there are typically \u221a{square root over (m)} boundary elements for a chart of m vertices, this brute-force testing is not unduly cumbersome.","One limitation of allowing the chart boundary to take on an arbitrary shape in D is that it imposes constraints on subsequent mesh simplification. More vertices need to be retained on the simplified mesh to represent the boundaries, because their irregular parametric shapes are difficult to approximate with coarse polygons. The approach of the invention is thus to simplify the mesh prior to parametrizing it.","Growth to Bounding Rectangle","For a single chart, the invention embeds its parametrization into a square texture image. For multi-chart meshes, the invention finds the tightest bounding rectangle around each chart, and packs these rectangles within the texture. In either case, some texture regions within the bounding square or rectangle are left unused. To reduce these wasted regions, the invention encourages the chart to grow into the unused space, which is achieved using an additional FTC-CTF iteration where the chart area penalty is removed, but the chart boundary is constrained to remain within the original bounding rectangle.","A multiresolution algorithm was introduced herein that accumulates the variation of the characteristic(s) looked for by a selected parametrization metric onto the faces of coarser meshes, to provide \u201clook ahead\u201d during coarse-to-fine optimization. Such a look ahead technique can be applied to any parametrization process because a look at fine detail helps to parametrize at the coarse level of detail such that there is a smooth, efficient transition from a coarse level of detail to a fine level of detail, and vice versa.","The invention thus takes the finest level of detail into account while constructing parametrization(S) on the coarser levels of mesh detail, so that the solutions obtained on coarser meshes accurately predict the final parametrization solution obtained at the end of the coarse-to-fine refinement process.","If there is a lot of detail in a region of the fine surface, additional space is thus allocated in parametrizing that region on the coarser meshes. Prior art approaches represented the detail by storing signal values at the mesh vertices. The problem with such approaches has been that in a coarser (simplified) mesh, there are much fewer vertices, so the detail defined on the fine mesh cannot be accurately represented using atomic signal values at the vertices. The invention thus provides a solution by storing information on the mesh faces that sums up, or integrates, the presence of detail in the fine mesh, in order to adequately reserve space on the coarse mesh parametrization for detail not yet added during the refinement process.","As mentioned above, while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system in which it is desirable to reconstruct signals from point samples with minimal error. Thus, the techniques for providing improved signal processing in accordance with the present invention may be applied to a variety of applications and devices. For instance, the algorithm(s) of the invention may be applied to the operating system of a computing device, provided as a separate object on the device, as part of another object, as a downloadable object from a server, as a \u201cmiddle man\u201d between a device or object and the network, as a distributed object, etc. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same, similar or equivalent parametrization achieved by the invention.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the signal processing services of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, a video recorder or the like, or a receiving machine having the signal processing capabilities as described in exemplary embodiments above becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally, any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example, while exemplary network environments of the invention are described in the context of a networked environment, such as a peer to peer networked environment, one skilled in the art will recognize that the present invention is not limited thereto, and that the methods, as described in the present application may apply to any computing device or environment, such as a gaming console, handheld computer, portable computer, etc., whether wired or wireless, and may be applied to any number of such computing devices connected via a communications network, and interacting across the network. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Still further, the present invention may be implemented in or across a plurality of processing chips or devices, and storage may similarly be effected across a plurality of devices. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The file of this patent includes at least one drawing executed in color. Copies of this patent with color drawings will be provided by the United States Patent and Trademark Office upon request and payment of the necessary fee.","The system and methods for providing a fine-to-coarse look ahead in connection with a parametrization in accordance with the present invention are further described with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIGS. 2C and 2D","FIGS. 2A and 2B"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
