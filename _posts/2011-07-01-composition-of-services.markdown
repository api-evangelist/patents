---
title: Composition of services
abstract: A method of generating a set of composite services is provided herein. The method includes receiving standardized service descriptions of a set of component services from service providers. The standardized description of a component service may be translated to an automaton-based description. A specified goal associated with the set of component services may be received. The set of composite services may be generated based on the automaton-based description and the specified goal. Each of the generated composite services may accomplish the specified goal.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009281&OS=09009281&RS=09009281
owner: Hewlett-Packard Development Company, L.P.
number: 09009281
owner_city: Houston
owner_country: US
publication_date: 20110701
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["A service is a software application that is made available over a communication network, such as a cloud computing network. Any organization may avoid the expense of developing customized software by using services. In this way, ready-to-run software may be provided for various entities, such as organizations conducting business on the Internet. An example of a service may be software that enables a company to take credit payments over the Internet. Further, services can be aggregated to form a composite service. The services that comprise a composite service are called component services. Typical service composition methods use service models that describe the semantics of the component services. Based on service models, service composition can be automated.","Services are accompanied by service description models. If a service is composite, it has a service composition model. Service description models describe available services. Service composition models describe component services that are composed to create composite services. These models also describe how their composition works. Typically, service composition approaches make assumptions on how models describe the component services, and then design composition algorithms that support a specific service description model. With various standards for service models available, it may be challenging for service vendors and consumers to compose services that are described using the various available models.","Service description and composition models use various description languages and technical frameworks. Frameworks for service composition usually fall into two categories: automatic or manual composition. Manual composition frameworks may use languages such as the Web Services Business Process Execution Language WS-BPEL (Business Process Execution Language), which is an industrial standard for describing service composition models.","In one embodiment, a service composition approach supports the various types of service description models. Using a holistic framework, services described using various description language types may be composed from a repository where the models are described using a universal description language. The framework may automatically translate services described in existing service models into a universal service description model. The universal model may be data-driven. Being data driven may make the universal model simple and more suitable for composition than typical models. Additionally, a method may be used to compose component services in the universal model into a composite.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1","b":["100","100","102","104","106","102","108","110","112"]},"Services  may provide functionality such as area code lookup, currency converter, shipping fee calculator, etc. Services  may be described in terms of states and operations. The state may describe a condition of a service component, and an operation may be a function invoked via an API call. Operations are also referred to herein as transitions, because operations typically modify a state of a service component. For example, a service  may be used to make a purchase with a credit card. Before the purchase, the credit card may be in a \u201cchargeable\u201d state, meaning the credit card references an account with enough credit to cover the purchase cost. An operation to charge the cost to the credit card may change the state to \u201ccharged,\u201d meaning funds from the account may be transferred to the retailer. Typically, each service  consists of a set of APIs or operations, denoted as solid squares.","Model building  may be a process that translates the models of the cloud services  into models that are described universally. These universal models  may be provided via the service repository . The universal models  may be represented as automata. As used herein, automata are finite state machines consisting of states and transitions.","The universal models  of the repository  may be used to generate composite services . A service composition process  may use a composition goal  to find a set of relevant component services in the universal models . The composition goal  may describe a desired state of the service . The service composition process may further compose these relevant component services into a composite service . The composite service  may also be represented as an automaton. In one embodiment, the service composition process  may use a parallel product operation based on the composition goal .",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2","b":["200","202","204","204","206","202","206","208","210","212","208","208","210","210","212","202"]},"In one embodiment, a model translation process  may translate the various types of service models  to generate a universal repository . The universal repository  may include universally described models, based on finite state automata. In the universal models, there are states and transitions between them. The states signify the different states of the service . The transitions may be atomic operations from the service  that take the service  from one state to another.","The model translation process  may provide an automated approach to translate service descriptions in standard languages such as WSDL and OWL-S into universal models based on automata. The transitions in the universal models may represent operations of services . States may have different meanings depending on the service descriptions. In the case of translated I\/O models, an automaton state in the translated universal model may represent the availability of input or output data. In the case of translated P\/E models, the automaton state may represent the value of state literals or variables used in preconditions and effects. For translated stateful models, automaton-based descriptions may be used directly. Typically, stateful models  include representations that are equivalent to automaton of the universal model. For example, a reachability graph represents all reachable states of a Petri net and the transition relationships among these states. A Petri net is a bipartite graph that is frequently used to model concurrent systems. The reachability graph for a bounded Petri net is an automaton that represents its dynamics.","For translating the I\/O models , one principle in building the automata may involve making available all the data in the input set of a given operation, o. After making all the data in the input set available, the execution of operation, o, may be allowed. Accordingly, for each piece of data, d, in the input set, a transition may be built with two states (an entry and end state) in the universal model. The entry state may represent the case where the data, d, is not available. When d is not available, an operation may be executed that generates d as one of its output. Accordingly, the automaton may be moved to the end state where d is available. Only at the end state, may operations be executed that take d as input. An automaton constructed accordingly may ensure that an operation that generates d precedes any operation that uses d as input.","For translating the P\/E models , an automaton may be constructed for each literal in the P\/E model . The literal represents the state of the service or the state of the external world, for example, \u201clight on\u201d can be the literal for the service of light switch, it represents the status of the light. For each literal, l, two states may be added that represent the true or false values that the literal, l, may have. Operations that have literal, l, in their positive or negative effect set may move the automaton to the corresponding states. Operations that use the literal, l, as a precondition, and do not negate it after execution, may only be executed when the literal, l, is true. In practice, enumeration variables, which also describe the state of the service or the external world, but takes values more than \u201ctrue\u201d and \u201cfalse\u201d, are often used in preconditions and effects. For example, if the state of an order is \u201cchargeable\u201d, a \u201ccharge\u201d operation may be executed, the effect of which is to change the state to \u201ccharged.\u201d If the state is \u201ccharged\u201d, a \u201cshipping notification\u201d operation may be executed. While it is possible to encode these conditions into multiple propositional literals, it may be more efficient to use one automaton for the enumeration variable. Propositional literals can take only binary values (true or false), which are essentially a special case of enumeration variables. More specifically, each state (possibly more than two) in the automaton may represent a possible value of the enumeration variable, and operations may represent API calls that change the enumeration variable value.","For translating stateful models , services already modeled by automata may be incorporated into directly into the universal repository . For other stateful models , off-the-shelf algorithms and tools may be used for translation into universal models based on automata. For example, the reachability graph of a bounded Petri net is an automaton. Further, workflows may be modeled by Petri nets, and subsequently converted into automata. As such, existing workflows may be used as services for the composition process . It is noted that because models based on automata do not capture parallelism, the internal concurrency of a service  may be lost after the translation.","A service composition process  may use a composition goal  to find and compose a set of relevant component services from the universal repository  into a composite service . The composite service  may include multiple paths to reach a goal state. A user may select from among the alternatives in the composite service . After translation, the universal repository  may contain uniform automaton models. Transitions in these automata may represent operations or API calls of different services . As such, a parallel product operation may be used for service composition. The parallel product operation (also referred to herein as synchronous product) may synchronize different automata based upon shared transitions. Non-shared (local, private) transitions may only follow the dynamics of its own model. Depending on the given composition goal , the service composition process  may only integrate relevant automata from the repository  through the parallel product operation. The composite service  generated by the parallel product operation may include automata that fulfills the composition goal . After the service composition process , there may be an execution phase that operates on the composite service , and controls its execution to reach certain objectives.","Since each component automaton in the universal repository  may represent the life cycle of a data attribute, the composition goal  may be specified as pairs of initial and goal states for a specified subset of component automata. The composite service  may involve more component automata than specified in the composition goal  because the parallel product operation synchronizes automata on shared events. Therefore, automata that share events with those in the task specification may be included in the composite service . Algorithm 1 may represent one embodiment of the service composition process :",{"@attributes":{"id":"p-0024","num":"0023"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ALGORITHM 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"INPUT: Universal repository 206 and a composition task specified as pairs"},{"entry":"of initial and goal states on a subset of automata G\u2032 \u2282 G"},{"entry":"OUTPUT: Parallel product automaton"},{"entry":"Initialize stack T = G\u2032, and result set S = G\u2032"},{"entry":"while T \u2260 \u00d8 do"},{"entry":"\u2003\u2003g = T.pop( )"},{"entry":"\u2003\u2003for every h \u03b5 G that shares events with g do"},{"entry":"\u2003\u2003\u2003\u2003if h \u2209 S then"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003add h to S"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003T.push(h)"},{"entry":"\u2003\u2003\u2003\u2003end if"},{"entry":"\u2003\u2003end for"},{"entry":"end while"},{"entry":"build parallel product for automata in S"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Algorithm 1 takes the composition goal  as the input, selects relevant automaton models from universal repository , and uses parallel product to build the composite service that achieves the goal . Since each component automaton in the repository  represents the life cycle of some data attribute, the composition task may be specified as pairs of initial and goal states for a subset of component automata. The final composition could involve more component automata since parallel product synchronizes automata on shared events. Therefore, automata that share events with those in the task specification may be included in the composite services .","The computational complexity of the service composition algorithm that is based on the parallel product operation may depend on the size of the composite service . The parallel product operation constructs the Cartesian product for the state sets of all automata involved in an operation, which dominates the computation. The composite services  are represented as automatons. The automatons may have multiple alternative paths to reach the composition goal  from a start state. In one embodiment, an extraction operator may be used to extract a subset of alternative paths to the composition goal . Each of these extracted automata is a composite service . Extraction may result in a smaller composite service . Additionally, composite services  may be selected based on non-functional criteria, such as cost, response time, etc. Depending on the extraction operator, the composite services  may include exactly one composite service , or a set.","Extraction may provide an advantage because not every transition in the automaton may be controllable. For example, in credit card services , a credit card charge may be denied. As such, the customer may cancel the order. Accordingly, it is not always possible to follow a predetermined path, such as fulfilling an order and shipping it. Multiple paths may improve the flexibility for an execution engine. An execution engine is a software program that controls the execution of composite services.","In some cases, the service  may be described by reference documents instead of standard I\/O, P\/E or stateful models. However, the semantics of such APIs may be captured by an automaton model. Further, the translation from reference documents to automata may be automated if a standardized syntax and structure are added to the reference documents. Otherwise, some services may take four weeks or more to be composed manually.","One example financial service helps merchants manage payments from customers. The service makes calls to checkout APIs using XML messages sent using HTTP POST. Many of the checkout APIs provide simple stateless calculation. Such APIs may be captured by I\/O service models using the APIs' inputs and outputs. In this way, an I\/O model  may be constructed. The I\/O model  may be automatically translated into automata, as described above. For example, shipping cost and tax calculations are stateless APIs. In these APIs, the shopping cart is the input, the cost is the output. Other, more complex APIs, may involve order processing and financial commands. Such APIs may have their own, respective status variables, such as an order fulfillment status and a financial status. Order processing and financial command APIs may change the values of the two variables, respectively. Table 1 shows a list of example financial states for a customer's order:",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Financial Status State","Permitted Operations","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["REVIEWING","None","REVIEWING is the default"]},{"entry":[{},{},"financial state for all new"]},{"entry":[{},{},"orders . . . The service"]},{"entry":[{},{},"provider updates the"]},{"entry":[{},{},"financial status to"]},{"entry":[{},{},"CHARGEABLE."]},{"entry":["CHARGEABLE","authorize-order","The CHARGEABLE state"]},{"entry":[{},"cancel-order","indicates that the customer"]},{"entry":[{},"charge-and-ship-order","may be charged for an order"]},{"entry":[{},{},"with the charge-and-ship-"]},{"entry":[{},{},"order operation. The order"]},{"entry":[{},{},"may be cancelled with the"]},{"entry":[{},{},"cancel-order operation."]},{"entry":["CHARGING","None","The service provider"]},{"entry":[{},{},"updates the financial status"]},{"entry":[{},{},"to CHARGED"]},{"entry":["CHARGED","authorize-order","The CHARGED state"]},{"entry":[{},"charge-and-ship-order","indicates the customer has"]},{"entry":[{},"refund-order","been fully or partially"]},{"entry":[{},{},"charged for an order. For"]},{"entry":[{},{},"the partially charged"]},{"entry":[{},{},"customer, the order remains"]},{"entry":[{},{},"chargeable until the"]},{"entry":[{},{},"customer is charged for the"]},{"entry":[{},{},"full amount."]},{"entry":["PAYMENT_DECLINED","cancel-order","This state indicates that the"]},{"entry":[{},{},"service provider's effort to"]},{"entry":[{},{},"authorize or charge the"]},{"entry":[{},{},"customer's credit card"]},{"entry":[{},{},"failed."]},{"entry":["CANCELLED","None","The CANCELLED state"]},{"entry":[{},{},"indicates that either the"]},{"entry":[{},{},"buyer or the merchant"]},{"entry":[{},{},"canceled the order."]},{"entry":["CANCELLED_BY_PROVIDER","None","No further status update to"]},{"entry":[{},{},"this state."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In some of these states, no operations are permitted to be performed. As shown in the description of the REVIEWING, CHARGING, CANCELLED, and CANCELLED BY PROVIDER states, only the service provider updates the financial order status for orders in these states. For some of these states, a list of valid operations may be performed.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["300","302","304","300","306","306","306"]},"An embodiment may also provide other advantages, such as a comprehensive service composition framework where service vendors can use various service models to describe their services. These models may be translated into a universal service model based on finite state automaton, which is a more valuable representation than that provided by other service model types. The embodiment uses a data-driven approach instead of an operation-centric approach, which provides the advantage of clarifying where data is produced and consumed, rather than what services are called and consumed in the composition. Further, services from different models may be composed together.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIG. 4"],"b":["400","400"]},"The system  may include servers  for consumers of services. The servers  may be in communication with service providers  over a network . The servers  may include a processor , which may be connected through a bus  to a display , a keyboard , an input device , and an output device, such as a printer . The input devices  may include devices such as a mouse or touch screen. The servers  may also be connected through the bus  to a network interface card . The network interface card  may connect the servers  to the network . The network  may be a local area network, a wide area network, such as the Internet, or another network configuration. The network  may include routers, switches, modems, or any other kind of interface device used for interconnection. In one example embodiment, the network  may be the Internet.","The servers  may have other units operatively coupled to the processor  through the bus . These units may include non-transitory, computer-readable storage media, such as storage . The storage  may include media for the long-term storage of operating software and data, such as hard drives. The storage  may also include other types of non-transitory, computer-readable media, such as read-only memory and random access memory.","The storage  may include the machine readable instructions used in embodiments of the present techniques. In an embodiment, the storage  may include a translator  and a composer . The translator  may take as input standardized model descriptions, such as I\/O, P\/E, and stateful, among others. These inputs may be translated into an automaton-based model, and stored in a universal repository. The composer  may, based on a specified goal, select a set of relevant services in the universal repository. The selected services may be composed into a set of composite services. The consumer of the services may select preferred services from the composite set.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5","b":"500"},"The non-transitory, computer-readable medium  may correspond to any typical storage device that stores computer-implemented instructions, such as programming code or the like. For example, the storage device may include a hard disk drive, a magnetic disk drive, e.g., to read from or write to a removable magnetic disk, or an optical disk drive, e.g., for reading a CD-ROM disk or to read from or write to other optical media. Further, other types of media that are readable by a computer system and that are suitable to the desired end purpose may be used, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like.","The storage device may be connected to a system bus by a storage device interface, such as a hard disk drive interface, a magnetic disk drive interface, or an optical drive interface. For example, the storage device may be the storage  discussed with respect to .","When read and executed by a processor  via a communication path , the instructions stored on the non-transitory, computer-readable medium  are adapted to cause the processor  to generate a set of composite services according to an example embodiment, as described herein. The non-transitory, computer-readable medium  may include a translator , and a composer .","The translator  may translate a standardized service description of a service to an automaton-based description. The standardized service description may be one of an I\/O model description, a P\/E model description, and a stateful model description. The composer  may generate the set of composite services based on the automaton-based description and a specified goal. The specified goal may describe an initial state and a goal state for the service. The set of composite services may change the initial state to the goal state."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Certain embodiments are described in the following detailed description and in reference to the drawings, in which:",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
