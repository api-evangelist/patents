---
title: Instream loader
abstract: A method of downloading data to a receiver/decoder comprises the steps, at the receiver/decoder, of: receiving a bitstream including the data; downloading a loader for loading the data from the bitstream into the receiver/decoder, and downloading said data from the bitstream using said loader.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06970960&OS=06970960&RS=06970960
owner: Thomson Licensing SA
number: 06970960
owner_city: Boulogne-Billancourt
owner_country: FR
publication_date: 20000331
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This is a continuation of International Application PCT\/IB98\/01613, with an international filing date of Oct. 5, 1998.","This invention relates to:\u2014\n\n","The term \u201creceiver\/decoder\u201d used herein may connote a receiver for receiving either encoded or non-encoded signals, for example, television and\/or radio signals, which may be broadcast or transmitted by some other means. The term may also connote a decoder for decoding received signals. Embodiments of such receiver\/decoders may include a decoder integral with the receiver for decoding the received signals, for example, in a \u201cset-top box\u201d, such a decoder functioning in combination with a physically separate receiver, or such a decoder including additional functions, such as a web browser, a video recorder, or a television.","The advent of digital transmission systems intended primarily for broadcasting television signals, in particular but not exclusively satellite television systems, has opened up the possibility of using such systems for other purposes. One of these is to provide interactivity with the end user. As used herein, the term \u201cdigital transmission system\u201d includes any transmission system for transmitting or broadcasting for example primarily audiovisual or multimedia digital data. Whilst the present invention is particularly applicable to a broadcast digital television system, the invention may also be applicable to a fixed telecommuunications network for multimedia internet applications, to a closed circuit television, and so on.","One way of doing this is to run an application on the receiver\/decoder through which the television signal is received. The code for the application could be permanently stored in the receiver\/decoder. However, this would be rather limiting. Preferably, the receiver\/decoder should be able to download the code for a required application. In this way, more variety may be provided, and applications can be updated as required without any action on the part of the user.","In an MPEG system, application code may be downloaded in MPEG tables transmitted in an MPEG bitstream. The term MPEG refers to the data transmission standards developed by the International Standards Organisation working group \u201cMotion Pictures Expert Group\u201d and in particular but not exclusively the MPEG-2 standard developed for digital television applications and set out in the documents ISO 13818-1, ISO 13818-2, ISO 13818-3 and ISO 13818-4. In the context of the present patent application, the term includes all variants, modifications or developments of MPEG formats applicable to the field of digital data transmission.","Software for downloading the MPEG tables must be stored permanently in the receiver\/decoder. In order to download data such as application code or an updated version of a run time engine, complex software is required, this software typically taking up a large amount of memory. However, such software may only be used sporadically, if at all, and so a large amount of memory may be taken up by software which is redundant for a long period of time.","Software stored in the receiver\/decoder for downloading data from the bitstream is commonly referred to as a \u201cBootstrap\u201d loader. The Bootstrap loader is preferably adapted to download most forms of data, including software from the bitstream for storage, for example, in the Flash memory volume of the receiver\/decoder. Thus, the Bootstrap loader tends to have a somewhat \u201cbasic\u201d structure, having minimal functionality, so that all forms of software can be downloaded.","The Bootstrap loader is typically stored in a ROM memory volume of the receiver\/decoder, and is not erasable therefrom. As the Bootstrap loader cannot be modified once it has been written in the ROM memory volume, processing errors which may occur should the Bootstrap loader become corrupted cannot be corrected. In addition, the functionality of the Bootstrap loader is \u201cfixed\u201d once it has been written in ROM; it cannot be updated, for example, in such a manner as to improve the time taken to download data from the bitstream. Thus, software having an improved, or new, structure which is unrecognisable to the Bootstrap loader cannot be downloaded from the bitstream.","If a portion of data stored in the receiver\/decoder becomes corrupted, the Bootstrap loader can be used to download a complete uncorrupted version of this data. If only a very small portion of the data has become corrupted, this can result in a significant amount of time being spent downloading the portions of the data which have not become corrupted.","The present invention seeks to solve these and other problems.","In a first aspect, the present invention provides a method of downloading data to a receiver\/decoder, comprising the steps, at the receiver\/decoder, of:\n\n","In one embodiment, the downloaded data loader comprises a data loading program. At least part of the data loader, preferably most of, or even all of the data loader, may be in the form of native code. As used herein, the term \u201cnative code\u201d includes hardware specific code, code which is specific to a particular hardware platform of the receiver\/decoder, code which is non-interpretive, and\/or code which is directly executable by a microprocessor of the receiver\/decoder. Thus, the structure taken by a piece of native code to be downloaded by a receiver\/decoder will depend on the particular apparatus used in the hardware platform of that receiver\/decoder. This is in contrast to \u201cinterpretive code\u201d, such as that known as \u201cp-code\u201d to the applicants, which requires interpretation by software stored in the receiver\/decoder so that it may be executed by the microprocessor, and which therefore is functional over a wide range of hardware platforms. The data downloaded by the data loader may be in the form of native code, p-code, or any other suitable form, such as data tables.","By means of the above, a loader for loading the data from the bitstream is downloaded from the bitstream and stored in, preferably temporarily in RAM of, the receiver\/decoder. Following downloading using the data loader of the required data from the bitstream, the downloaded data loader is preferably deleted from the receiver\/decoder. Thus, once the downloaded data loader has served its purpose, the storage capacity of the RAM is effectively increased for the time when the downloading of data is not required.","It is of course not essential to delete the downloaded data loader once it has downloaded all of the required data from the bitstream. On the contrary, the data loader may subsequently be stored in non-volatile memory of the receiver\/decoder, such as a Flash memory volume. This can enable the receiver\/decoder to download further data using the stored data loader without having to reload the data loader from the bitstream, thereby decreasing the time taken to download that data. Thus, a plurality of different data loaders may be stored at any one time in the receiver\/decoder.","As a data loader written specifically for the downloading of one particular data item can be downloaded from the bitstream as required by the receiver\/decoder, improved functionality of the receiver\/decoder may be provided, as data with an updated or revised structure, which is different to the structure of data which can be downloaded by the Bootstrap loader, can be downloaded and stored in the receiver\/decoder.","In one preferred embodiment, the downloading of the data is performed by the downloaded data loader. Thus, for the downloading of data, the Bootstrap loader is effectively temporarily replaced by the downloaded data loader, thus enabling an updated or otherwise improved data loader to be used by the receiver\/decoder.","Preferably, a portion only of data stored in the receiver\/decoder is replaced by a corresponding portion of data downloaded by the downloaded data loader. For example, if a portion of the stored data becomes corrupted or out of date, an uncorrupted or updated version of that portion of the data only can be downloaded by the receiver\/decoder, the downloaded data loader \u201cpatching\u201d the downloaded portion of data into the stored data where appropriate. Thus the downloaded data loader does not download an entire version of the data stored in the receiver\/decoder. This can provide for a significant improvement in the time taken to repair or update stored data, as the downloading of uncorrupted portions of data is not required. In an alternative embodiment, a portion of data stored in the receiver\/decoder is replaced by a corresponding portion of, for example, a section of data transmitted with the downloaded data loader.","The bitstream may comprise at least one data loader, and, accordingly, the method may further comprise the steps, at a transmitting system, of:\n\n","Thus, the bitstream may include a plurality of data loaders and associated data. This can enable receiver\/decoders having different hardware platforms to download the appropriate versions of the data loader and associated data. Data, such as an application, may conveniently be made up of a number of modules, which can be downloaded, and if appropriate run, as required.","The method may further comprise the steps, at the transmitting system, of:\n\n","It is preferred that an MPEG protocol is used and, if so, the downloading steps may comprise downloading module MPEG tables.","The tables may have respective different TID-extensions other than a predetermined TID-extension; and the method may further comprise the step, at the transmitting system, of generating a respective directory table for the or each plurality of modules having the same TID, the or each directory table having said predetermined TID-extension and that TID, the directory table containing for each of the modules a name of that module and the respective TID-extension.","The method may further comprise the steps, at the receiver\/decoder, of:\n\n","By these features, the directory table can be readily identified because it has a particular TID-extension, and once it has been downloaded it can enable the receiver\/decoder to identify the module tables of the data loader from their respective TID-extensions.","The method may further comprise the step, at a transmitting system, of generating a directory table having a predetermined table identification (\u201cTID\u201d) and containing, for each of a plurality of version identifications of a receiver\/decoder, a respective TID associated with that version identification.","If so, the method may further comprise the steps, at the receiver\/decoder, of:\n\n","Preferably, the version identification includes a code assigned to the manufacturer of the receiver\/decoder and a code assigned to the version of the receiver\/decoder.","It is expected that receiver\/decoders may be designed and manufactured by various different manufacturers. Each manufacturer may produce a number of different versions of the receiver\/decoder. Receiver\/decoders may therefore have various different hardware designs, though they will of course all conform to the same functional specification. It is therefore important that data, such as an application, behaves in the same way on every receiver\/decoder, and that a receiver\/decoder should execute all applications in the same, correct manner.","In order to ensure that the data is compatible with a particular version of a receiver\/decoder, the bitstream may include a data loader and data for each version identification of the receiver\/decoder, and the directory table having the predetermined TID can enable the TID of the modules of the data loader and data for each version identification of the receiver\/decoder to be easily identified.","Preferably, the method further comprises the steps, at the transmitting system, of:\n\n","The Bootstrap loader may be instructed, for example, by an application, periodically to download the directory table to determine whether the directory version identification of the previously downloaded directory table has changed. This can ensure that the receiver\/decoder downloads promptly any updated data from the bitstream.","In order to avoid overwriting resident data stored in the receiver\/decoder with identical received data, an application requesting updating of the resident data can choose to abort the downloading of data if a table directory is the same as that used in a previous updating of resident data.","Preferably, at least one of the module tables is formatted as a plurality of sections which are transmitted separately in the bitstream, each of the sections containing in a predetermined portion thereof an identification of that section in the table and an indication of the number of the sections in a table.","The method may further comprise the step, at the transmitting system, of cyclically transmitting the tables in a bitstream.","The method may further comprise the step, in a transmitting system, of:\n\n","By this feature, the downloading can be aborted prior to erasing the resident software and\/or commencing the downloading of the received data if the data version identification of the received data is the same as that of resident data stored in the receiver\/decoder.","Preferably, the step of determining whether the data version identification of the received data is more recent than the data version identification of currently stored data is conducted after determining that the data version identification of a currently transmitted directory table is more recent than the data version identification of a previously downloaded directory table having the same TID as the currently transmitted directory table.","In another preferred embodiment, the downloaded data loader modifies means stored in the receiver\/decoder for downloading the data loader, so that the data can be downloaded by the modified downloading means. Thus, the downloading means can be modified conveniently by a data loader downloaded from the bitstream so that, for example, data with a different structure may be downloaded by the downloading means.","Preferably, the method comprises the steps, at a transmitting system, of;\n\n","In one embodiment, the second data loader is provided by another data loading program, at least part of the second loader preferably being in the form of native code.","This can enable downloading of a data loader to be avoided by using a different data loader previously downloaded from the bitstream. Thus, it is not necessary to download a data loader from the bitstream every time fresh or revised data is to be downloaded if a previously downloaded data loader is able to download the data as efficiently as the data loader. This can reduce significantly the time taken to download fresh or revised data from the bitstream. The second data loader may provide improved functionality over the first-mentioned data loader, for example, the second data loader may be able to download computer programs.","In a second aspect, the present invention provides a receiver\/decoder comprising:\n\n","In one preferred embodiment, the downloading means is provided by a boot program stored in the receiver\/decoder.","The receiver\/decoder may further comprise means for deleting the downloaded data loader from the storage means after the data has been downloaded from the bitstream. The deleting means may be provided by a central processor and associated software stored in the receiver\/decoder.","The receiver\/decoder may be arranged to download tables. If so, the downloading means may be arranged to download a table having a table identification (\u201cTID\u201d) and a predetermined table identification extension (\u201cTID-extension\u201d) so as to download a directory table, to determine from the content of the directory table the TID-extensions of module tables having the same TID as the directory table, and to download the module tables having the same TID as that of the downloaded directory table and TID-extensions determined from the downloaded directory table so as to download said loader.","The downloading means may be arranged to download a directory table having a predetermined TID and containing, for each of a plurality of version identifications of a receiver\/decoder, a respective TID associated with that version identification, to determine the version identification of the receiver\/decoder, and to download a directory table having a TID associated with the version number of the receiver\/decoder and the predetermined TID-extension.","In a preferred embodiment, the downloading means is arranged to determine whether a version identification of a currently transmitted directory table is more recent than the version identification of a previously downloaded directory table having the same TID as the currently transmitted directory table, and if not, to abort the downloading of said loader.","The receiver\/decoder may further comprise a parallel port and\/or a serial port arranged to receive data formatted as at least one table.","Preferably, said downloading means is arranged to download a second data loader included in said bitstream for downloading one of the first-mentioned data loader and the data.","In a third aspect, the present invention provides a transmission system comprising:\n\n","Preferably, the transmission system further comprises:\n\n","The formatting means may be conveniently provided by the data server.","The tables may have respective different TID-extensions other than a predetermined TID-extension, and the system may further comprise means for generating a respective directory tables for the or each plurality of modules having the same TID, each directory table having that TID and said predetermined TID-extension, the directory containing for each of the modules a name of that module and the respective TID-extension.","The transmission system may further comprise:\n\n","The transmission system may further comprise means for including in each transmitted table a version identification therefor.","Each of the aforementioned means may conveniently be provided by the data server.","A fourth aspect of the present invention provides a combination of a receiver\/decoder as described above and a transmission system as described above.","A fifth aspect of the present invention provides a signal comprising at least one loader for loading data into a receiver\/decoder, and data associated with the or each data loader, the or each data loader being divided into a plurality of modules and the data associated with the or each data loader being divided into a respective plurality of modules.","All the features of the method aspect of the invention can be applied to the apparatus and signal aspects as appropriate, and vice versa.","An overview of a digital television system  is shown in . The digital television system  includes a mostly conventional digital television system  which uses the known MPEG-2 compression system to transmit compressed digital signals. In more detail, MPEG-2 compressor  in a broadcast centre receives a digital signal stream (typically a stream of video signals). The compressor  is connected to a multiplexer and scrambler  by linkage . The multiplexer  receives a plurality of further input signals, assembles one or more transport streams and transmits compressed digital signals to a transmitter  of the broadcast centre via linkage , which can of course take a wide variety of forms including telecommunications links. The transmitter  transmits electromagnetic signals via uplink  towards a satellite transponder , where they are electronically processed and broadcast via notional downlink  to earth receiver , conventionally in the form of a dish owned or rented by the end user. The signals received by receiver  are transmitted to an integrated receiver\/decoder  owned or rented by the end user and connected to the end user's television set . The receiver\/decoder  decodes the compressed MPEG-2 signal into a television signal for the television set .","A conditional access system  is connected to the multiplexer  and the receiver\/decoder , and is located partly in the broadcast centre and partly in the decoder. It enables the end user to access digital television broadcasts from one or more broadcast suppliers. A smartcard, capable of deciphering messages relating to commercial offers (that is, one or several television programmes sold by the broadcast supplier), can be inserted into the receiver\/decoder . Using the decoder  and smartcard, the end user may purchase commercial offers in either a subscription mode or a pay-per-view mode.","An interactive system , also connected to the multiplexer  and the receiver\/decoder  and again located partly in the broadcast centre and partly in the decoder, enables the end user to interact with various applications via a modemmed back channel .",{"@attributes":{"id":"p-0079","num":"0110"},"figref":"FIG. 2","b":["4000","1000"]},"For example, the interacting system  allows an end user to buy items from on-screen catalogues, consult local news and weather maps on demand and play games through their television set.","The interactive system  comprises in overview four main elements:\u2014\n\n","The interactive television system operates using \u201capplications\u201d which control the functions of the receiver\/decoder and various devices contained therein. Applications are represented in the engine  as \u201cresource files\u201d. A \u201cmodule\u201d is a set of resource files and data. A \u201cmemory volume\u201d of the receiver\/decoder is a storage space for modules. Modules may be downloaded into the receiver\/decoder  from the MPEG-2 transport stream.","Physical interfaces of the receiver\/decoder  are used for downloading data. With reference to , the decoder  contains, for example, six downloading devices; MPEG flow tuner , serial interface , parallel interface , modem  and two card readers . The receiver\/decoder  may also include a display .","For the purposes of this specification, an application is a piece of computer code for controlling high level functions of preferably the receiver\/decoder . For example, when the end user positions the focus of a remote controller  (as shown in more detail in ) on a button object seen on the screen of the television set  and presses the validation key, the instruction sequence associated with the button is run.","An interactive application proposes menus and executes commands at the request of the end user and provides data related to the purpose of the application. Applications may be either resident applications, that is, stored in the ROM (or FLASH or other non-volatile memory) of the receiver\/decoder , or broadcast and downloaded into the RAM (or FLASH) of the decoder .","Examples of applications are:\u2014\n\n","Applications are stored in memory locations in the receiver\/decoder  and represented as resource files. The resource files comprise graphic object description unit files, variables block unit files, instruction sequence files, application files and data files.","The graphic object description unit files describe the screens, the man-machine interface of the application. The variables block unit files describe the data structures handled by the application. The instruction sequence files describe the processing operations of the applications. The application files provide the entry points for the applications.","The applications constituted in this way can use data files, such as icon library files, image files, character font files, colour table files and ASCII text files. An interactive application can also obtain on-line data by effecting inputs and\/or outputs.","The engine  only loads into its memory those resource files it needs at a given time. These resource files are read from the graphic object description unit files, instruction sequence files and application files; variables block unit files are stored in memory following a call to a procedure for loading modules and remain locked there until a specific call to a procedure for unloading modules is made.","With reference to , a module , such as a tele-shopping module, is a set of resource files and data comprising the following:\n\n","The concept of modules  together with the concept of downloading small pieces of code allows the easy evolution of applications. They can be downloaded into permanent FLASH memory of the decoder  as resident software or broadcast in order to be downloaded into the RAM of the decoder  only when needed by the end user.","In the case of MPEG flow, one module  is transported in one single MPEG table. In the case of modules transmitted to the MPEG tuner , the long MPEG-2 format is used, with a long header and a CRC code. This is also the case with the five other interfaces (serial interface , parallel interface , modem  and two card readers ), except that the \u201cshort\u201d MPEG-2 format with a shorter header and no. CRC is used.","Referring in particular to , as is known, the MPEG-2 bitstream includes a programme access table (\u201cPAT\u201d)  having a packet identification (\u201cPID\u201d) of 0. The PAT contains references to the PIDs of the programme map tables (\u201cPMTs\u201d)  of a number of programmes. Each PMT contains a reference to the PIDs of the streams of the audio MPEG tables  and video MPEG tables  for that programme. A packet having a PID of zero, that is the programme access table , provides the entry point for all MPEG access.","In order to download applications and data for them, two new stream types are defined, and the relevant PMT also contains references to the PIDs of the streams of application MPEG tables  (or sections of them) and data MPEG tables  (or sections of them).","Referring to , in order to download an application , the application is divided into modules  each formed by an MPEG table, some of which are made up by a single section , and others of which may be made up by a plurality of sections . A typical section  has a header , which includes a one-byte table identification (\u201cTID\u201d) , the section number  of that section in the table, the total number  of sections in that table and a two-byte TID extension . Each section also includes a data part  and a CRC . For a particular module\/table , all of the sections  making up that table  have the same TID  and the same TID extension . For a particular application , all of the tables  making up that application  have the same TID , but different respective TID extensions.","The authentication of an MPEG table will now be described with reference to . The table  includes data  (typically comprising header , TIED , TID extension  and data part ), a key identification  and a cipher area . The key identification  comprises a 1-byte identification of a particular private key to be used to encrypt the block. The cipher area  comprises a block of 96 bytes of data. The first byte  is zero. A 16 byte signature  begins at an offset of typically between 0 and 31 bytes after the first byte. The signature  is produced using the known MD5 signature generating process on the data . Dummy data  is inserted between the first byte and the signature  and the block is encrypted using a known encryption process and the private key to which the key identification  corresponds.","If a plurality of MPEG tables are to be authenticated, then a directory listing the names of the tables and the signatures of those tables is included in the carrier signal. In the case of MPEG flow, this directory is transported in one single MPEG table, typically having a TID extension  of zero. The directory table is authenticated with the mechanism described above. Once the directory has been downloaded from the carrier signal it is possible for the application to download one or more of the MPEG tables listed in the directory.","The operation of the receiver\/decoder  in dealing with signatures and decryption during downloading of an application will now be described. Referring to , the receiver\/decoder  includes EEPROM , FLASH , ROM  and RAM . The EEPROM  includes a protected region  which is used by the virtual machine, and where only the virtual machine (and not a normal application) can write. The protected region  includes a key validation bitmap  of 16 or 256 bits, and an offset bitmap  of 32 bits. The ROM  includes, in one embodiment, sixteen public keys , in which case a 16-bit key validation bitmap is employed, and in another embodiment  public keys, in which case a 256-bit key validation bitmap is employed. The public keys are identified by their physical locations in the ROM , or they may alternatively be included in a lookup table, whereby a particular key identification will yield the corresponding public key. The RAM  may be used to store a temporary key .","When an application is to be downloaded, firstly the directory table having the predetermined TID for that application and a TID extension of zero is downloaded. The key identification  is then extracted from the directory table and a check is made of the key validation bitmap  in the protected memory  that the bit corresponding to the extracted key identification  is set. If it is not, then further downloading of the application is aborted. However, if the appropriate key is set, then a public key  is selected from the ROM  corresponding to the extracted key identification . The selected public key and a known decryption process are then used to decrypt the encrypted block  in the directory table  to produce a decrypted block. The offset contained in the offset bitmap  in the protected memory  is looked up, or, if more than one offset bit is set, each offset bit is looked up in turn, and sixteen bytes of data are extracted from the decrypted block starting with the looked-up offset. For the or each looked-up offset, the 16 bytes are treated as the signature transmitted with the directory table . The signature of the entries in the directory  of the directory table  is calculated using the known MD5 process, and this calculated signature is compared with the signature extracted from the decrypted block. If the two signatures for the or each looked-up offset do not match, then further downloading of the application is aborted. However, if one of the signatures matches, then downloading of the modules specified in the directory  can proceed. As mentioned above, in order to download a particular module, the TID extension for that module is obtained from the directory , and the MPEG table  or sections  with the same TID as the directory table and with the obtained TID extension is downloaded. Once the module MPEG table has been downloaded, the receiver\/decoder  calculates the signature of the downloaded table using the known MD5 process and then compares that calculated signature with the signature contained in the directory entry. If the signatures match, then the module is accepted, but if they do not match, then the module is rejected.","All of the modules of the application can thus be downloaded in the manner specified above, and the application can be run by the receiver\/decoder .","The downloading of data into the receiver\/decoder  will now be described in more detail with reference to .","The receiver\/decoder  includes loader , referred to as a \u201cBootstrap\u201d loader , which is used primarily to download a loader for downloading software, such as manufacturer firmware, the run time engine  and applications, present in the MPEG datastream for storage in the FLASH memory  of the receiver\/decoder . The Bootstrap loader  is stored in the FLASH memory  of the receiver\/decoder  and typically is not erasable therefrom. The Bootstrap loader  functions under the control of the hardware of the receiver\/decoder  and software stored therein.","Writing\/updating of software stored in the receiver\/decoder may be performed:\n\n","To determine whether resident software has become corrupted, software written by the manufacturer of the receiver\/decoder  and stored therein calculates a checksum on the resident software data and compares this to a checksum written in the resident software. If the two values of the checksum are not equal, the resident software has become corrupted.","The FLASH memory  and EEPROM  of the receiver\/decoder  contain parameters which enable the Bootstrap loader  to download a loader in the form of native code from the bitstream. Parameters may be stored in the Bootstrap loader  itself, that is, in FLASH memory , or in EEPROM . Examples of parameters which may be stored in the FLASH memory  include:\n\n","Examples of parameters stored in the EEPROM , and which may be updated by an application stored in the receiver\/decoder , include:\n\n","These parameters are stored in respective parameter fields in the FLASH memory  or EEPROM . With reference to , each parameter field  includes a length , a reserved byte , a set of parameters  and a Longitudinal Redundancy Code (LRC) checksum . The checksum comprises CRL , which is an exclusive-OR of the preceding bytes of the parameter field , and NCRL , which is the 1's complement of the CRL . If an application stored in the receiver\/decoder  wishes to update the parameters stored in a parameter field, for example, to update a PID, it calculates an LRC checksum for the field and compares that with the LRC checksum  stored in the field. If the two values match, then updating of the parameter field is enabled; if not, the updating of the parameter field is aborted.","The MPEG bitstream including the data to be downloaded into the receiver\/decoder  carries native code, at least part of which includes an additional loader, referred to as an \u201cInstream\u201d loader. The Bootstrap loader  downloads the Instream loader from the MPEG bitstream into RAM  of the receiver\/decoder , and it is this Instream loader which downloads the data from the MPEG bitstream, for example, in order to update the resident software.","The software downloaded into the FLASH memory  of the receiver\/decoder  may also contain a loader, referred to as a \u201cResident\u201d loader. This loader should at least be able to perform a writing\/update of software from the MPEG bitstream, and may offer other features, such as updates from local ports, and may allow the video and audio data in the MPEG bitstream to be decoded. The Resident loader is loaded from the bitstream at the request of an application, for example, to complement the loader which performs the downloading of the Instream loader, or for loading data from the bitstream. For example, if writing\/updating is requested by an application stored in the receiver\/decoder  and the resident software is not corrupted, the Resident loader is used to perform the update instead of an Instream loader. This can reduce the time taken to update software in the receiver\/decoder. At least part of the Resident loader is in the form of native code.","The various MPEG tables included in the MPEG bitstream which allow a receiver\/decoder  to locate and download the required software will now be described with reference to .","The MPEG bitstream includes at least one hardware directory table  and a plurality of loader directories .","A hardware directory table  enables the Bootstrap loader  to locate the correct versions of the Instream loader and the software to be downloaded for a number of different versions of the receiver\/decoder . With reference to , a hardware directory table  includes a TID  of DO and a TID extension  of 0000, which values are previously stored in the EEPROM  of the receiver\/decoder  to enable, for example, the Bootstrap loader  to locate and download the hardware directory table .","The hardware directory table  includes:\n\n","The HVN  of the receiver\/decoder is 4 bytes in length. One byte is reserved for future use, two bytes include a code for the version number of the hardware in the receiver\/decoder, and one byte includes a code for the manufacturer of the receiver\/decoder. This enables the Bootstrap loader to download the version of the Instream loader which is compatible with the hardware platform of the receiver\/decoder.","Having downloaded the hardware directory table , the Bootstrap loader  searches the table  for an entry corresponding with the HVN  of the receiver\/decoder . If a match does not occur, the downloading is aborted. If a match occurs, the Bootstrap loader  identifies from the table  the TID  that has been assigned to the loader directory  associated with the HVN  of the receiver\/decoder , the Instream loader and the software to be downloaded.","With reference to , each loader directory  associated with the HVN  of the receiver\/decoder  includes:\n\n","During the updating a report is compiled, containing, inter alia, details on each step of the writing\/updating process, for example, whether the step was successfully completed or not, so that the step at which writing\/updating may have failed may be later identified. For example, the report includes:\n\n","The report also includes the reason as to why writing\/updating was performed, for example, at the request of an application, the number of software inconsistencies detected and the number of upgrade failures.","When updating resident software with software present in the MPEG bitstream at the request of an application, the receiver\/decoder  is arranged to compare the SVERS  of the software identified in the freshly downloaded loader directory table  with the version number of the resident software. If the SVERS  is later, then the modules associated with the resident software are erased from the FLASH memory  and the modules of the updated software are downloaded and mounted.","A front panel LED display  of the receiver\/decoder  is adapted to display messages to the user of the receiver\/decoder  during the downloading of data. For example, the four following messages are specified in a parameter field stored in the FLASH memory  of the receiver\/decoder :\n\n","As an alternative to static messages, messages in the form of an animated cartoon may be displayed on the receiver\/decoder.","The steps in, for example, the updating of the resident software will now be described with reference to .","In step S of , software stored in the receiver\/decoder checks the integrity of any resident software by performing the checksum calculation and comparing the result of that calculation with the value of the checksum stored in the resident software. If the two values are different, then updating continues in the native state; if the two values are the same, or if no resident software is located, then updating continues in the normal state.","In this native state, it is then determined whether a previous update request is still pending in step S. If such an update request from an application is pending, that request is erased in step S and step S is repeated. If no such update request is still pending, the report of the previous updating is erased in step S and initialised in order to commence the logging of this updating. The report logs the reason for the updating request, that is, to replace corrupted software.","Following step S, the NATIV message is displayed on the display  of the receiver\/decoder  in step S.","In step S, the parameters stored in the parameter fields of the EEPROM and FLASH memory  are checked. If the tuning parameters and\/or the PID parameter are not defined, the display  is caused to display the OOO message and the updating is aborted.","If these parameters are defined in the parameter field, the updating proceeds to step S, in which the Bootstrap loader  tunes the MPEG tuner  to the transponder  in accordance with the parameters stored in the parameter fields. If the tuning fails, the updating is aborted and the ERRL message is displayed.","If the tuning is successful, the Bootstrap loader  downloads and authenticates the hardware directory  in step S. If the hardware directory  is not downloaded before the time-out is reached, or if the hardware directory  is not authenticated (as an error has occurred during the downloading), the updating is aborted and the ERRL message displayed.","Referring to , if such an entry is located, the Bootstrap loader  reads the TID  of the MPEG tables used for the loader directory  associated with that HVN , the Instream loader and the software to be downloaded and, in step S, downloads and authenticates the correct loader directory . If the loader directory  is not downloaded before the time-out is reached, or if the loader directory is not authenticated (as an error has occurred during the downloading), the updating is aborted and the ERRL message displayed.","If downloading and authentication are successful, the Bootstrap loader  downloads the Instream loader from the MPEG bitstream into the RAM  of the receiver\/decoder  in step S. If the Instream loader is not downloaded before the time-out is reached, or if the Instream loader is not authenticated (as an error has occurred during the downloading), the updating is aborted and the ERRL message displayed.","If the Instream loader is successfully loaded and authenticated, the Instream loader is executed in step S and, in step S, the corrupted portion of the resident software is erased and the segments of the software to be downloaded are downloaded by the Instream loader, authenticated and written in the appropriate address location in FLASH memory . If the software is not downloaded before the time-out is reached, or if the software is not authenticated (as an error has occurred during the downloading) or if an error occurs during the writing of the software into the FLASH memory , the updating is aborted and the ERRL message displayed.","If the resident software is successfully updated, the writing of the report is stopped in step S and the receiver\/decoder  reset to enable a further updating to be commenced.","In any steps at which the updating is aborted, the step may alternatively be reperformed a prescribed number of times until successfully completed or until a time-out for performing that step is reached.","Referring to , if updating is to proceed in the normal state, the Bootstrap loader  determines in step S whether an update request from an application is already pending. If not, the updating continues as normal. If there is already a pending update request then the pending request is processed first.","The report of the previous updating is erased in step S and initialised in order to commence the logging of this updating. The report logs the reason for the updating request, for example, at the request of an application, and any updating options that are selected by the application.","It is then determined, in step S, whether a Resident loader is stored in the FLASH memory  of the receiver\/decoder . If such a loader is stored in the receiver\/decoder, it is determined in step S whether the Resident loader has been executed in response to a command from software stored in the receiver\/decoder .","If the Resident loader has been executed, then the Resident loader performs subsequent steps in the updating process that would normally be carried out by the Bootstrap loader .","If the Resident loader is not present, or has not been executed, then the Bootstrap loader  is used. It is also possible for the software stored in the receiver\/decoder  to force the Bootstrap loader  to continue the updating process even if a Resident loader is stored in the FLASH memory .","The LOAD message is displayed on the display  of the receiver\/decoder  in step S.","In step S, the parameters stored in the parameter fields of the EEPROM and FLASH memory  are checked. If the tuning parameters and\/or the PID parameter are not defined, the display  is caused to display the OOO message and the updating is aborted.","Referring to , if these parameters are defined in the parameter field, the updating proceeds to step S, in which the Bootstrap or Resident loader tunes the tuner  to the transponder  in accordance with the parameters stored in the parameter fields. If the tuning fails, the updating is aborted and the ERRL message is displayed.","If the tuning is successful, the Bootstrap or Resident loader downloads and authenticates the hardware directory  in step S. If the hardware directory  is not downloaded before the time-out is reached, if the hardware directory is not authenticated (as an error has occurred during the downloading) or, depending on an option selected by the application requesting the updating, if a successful updating has been carried out using a hardware directory having the same HVERSION , the updating is aborted and the ERRL message displayed.","If downloading and authentication are successful and the updating is enabled by the application, the Bootstrap or Resident loader searches for an HVN  corresponding to the version number of the receiver\/decoder , as defined in a parameters field. If such an HVN is not located, the updating is aborted and the ERRL message displayed.","If such an entry is located, the Bootstrap or Resident loader reads the TID  of the MPEG tables used for the loader directory  associated with that HVN , the Instream loader and the software to be downloaded and, in step S, downloads and authenticates the correct loader directory .","If the loader directory  is not downloaded before the time-out is reached, if the loader directory is not authenticated (as an error has occurred during the downloading), or, depending on an option selected by the application requesting the updating, if a successful updating has been carried out using a loader directory having the same LVERS , the updating is aborted and the ERRL message displayed.","If downloading and authentication are successful and the updating is enabled by the application, the Bootstrap loader  downloads the Instream loader from the MPEG bitstream into the RAM  of the receiver\/decoder  in step S. If the Instream loader is not downloaded before the time-out is reached, or if the Instream loader is not authenticated (as an error has occurred during the downloading), the updating is aborted and the ERRL message displayed.","If the Instream loader is successfully loaded and authenticated, the Instream loader is executed in step S and, in step S, the version number SVERS  of the software in the MPEG bitstream is compared to that of the resident software.","If the version numbers are the same, the writing of the software into the FLASH memory  is not performed and the application update request is erased. If the version numbers are different, the resident software is erased and the segments of the software to be downloaded are downloaded by the Instream loader, authenticated and written in the FLASH memory  in step S.","If the software is not downloaded before the time-out is reached, or if the software is not authenticated (as an error has occurred during the downloading) or if an error occurs during the writing of the software into the FLASH memory , the updating is aborted and the ERRL message displayed.","If the resident software is successfully updated, the writing of the report is stopped in step S, the pending update request is erased and the receiver\/decoder  reset to enable a further updating to be commenced.","As in the native state, in any steps at which the updating is aborted, the step may alternatively be reperformed until successfully completed.","It will be understood that the present invention has been described above purely by way of example, and modifications of detail can be made within the scope of the invention.","Each feature disclosed in the description, and (where appropriate) the claims and drawings may be provided independently or in any appropriate combination. In the aforementioned preferred embodiments, certain features of the present invention have been implemented using computer software. However, it will of course be clear to the skilled man that any of these features may be implemented using hardware. Furthermore, it will be readily understood that the functions performed by the hardware, the computer software, and such like are performed on or using electrical and like signals."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"p":["Preferred features of the present invention will now be described, purely by way of example, with reference to the accompanying drawings, in which:\u2014",{"@attributes":{"id":"p-0063","num":"0094"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0064","num":"0095"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0065","num":"0096"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0066","num":"0097"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0067","num":"0098"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0068","num":"0099"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0069","num":"0100"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0070","num":"0101"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0071","num":"0102"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0072","num":"0103"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0073","num":"0104"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0074","num":"0105"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0075","num":"0106"},"figref":"FIGS. 13"}]},"DETDESC":[{},{}]}
