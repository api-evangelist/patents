---
title: Sharing of downloaded resources
abstract: In a described implementation, a production device, such as a computer, produces a shared resources container that includes shareable resources. Each resource of the shared resources container includes a part name and corresponding data. The production device downloads the shared resources container to a utilization device. The production device also formulates a job container, such as a print job. The production device analyzes resource usage of the job container during processing thereof. If a resource relevant to the job container is included in the shared resources container, the resource is excluded from the job container in lieu of a resource reference that is insert therefor. The production device also downloads the job container to the utilization device. At the utilization device, the job container is processed using the resource reference. Specifically, the resource reference is used to retrieve the associated resource from the shared resources container.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07634775&OS=07634775&RS=07634775
owner: Microsoft Corporation
number: 07634775
owner_city: Redmond
owner_country: US
publication_date: 20040910
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE(S) TO RELATED APPLICATION(S)","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This nonprovisional patent application claims the benefit of priority from co-pending provisional patent application No. 60\/568,071, filed on May 3, 2004, entitled \u201cSharing of Downloaded Resources\u201d. This nonprovisional patent application hereby incorporates by reference herein the entire disclosure of provisional patent application No. 60\/568,071.","This disclosure relates in general to the sharing of downloaded resources and in particular, by way of example but not limitation, to the sharing of resources downloaded into the memory of a device across different pages, tasks, files, jobs, and\/or downloads.","Computers and printers jointly print many different types of documents. Documents may be pamphlets, newspapers, catalogs, magazines, reports, and so forth. Such documents may exhibit black and white, grayscale, and\/or color items. Such items may be text, graphics, pictures, and so forth.","In operation, a computer under the direction of a user creates a document that is to be printed. The document, or at least a printer-compatible file version thereof, is sent to a printer. The document that the computer sends to the printer includes all of the text, graphics, pictures, etc. information on a page-by-page basis that the printer needs to render the document in hardcopy form. When the user wishes to print a subsequent document, the computer again sends to the printer all of the information on a page-by-page basis that the printer needs to render this subsequent document.","Accordingly, there is a need for schemes and\/or techniques that can accelerate document printing and\/or facilitate efficient computer-printer interaction.","A production device, such as a computer, produces a shared resources container that includes shareable resources. The production device downloads the shared resources container to a utilization device. The production device also formulates a job container, such as a print job. During processing of the job container, the production device analyzes the resource usage thereof. If a resource relevant to the job container is included in the shared resources container, the resource is excluded from the job container in lieu of a resource reference that is inserted therefor. The production device also downloads the job container to the utilization device. At the utilization device, the job container is processed using the resource reference. Specifically, the resource reference is used to retrieve the associated resource from the shared resources container.","In an alternative implementation, shared resources can be downloaded from the production device to the utilization device in job containers. For example, a shared resource can be included along with job-specific resources in a job container, but the shared resource is marked or otherwise identified as a resource to be retained for possible future sharing. The shared resource can be retained by including it in a shared resources container stored at the utilization device.","In a described implementation, each resource of the shared resources container includes a part name and corresponding data. Additionally, the resource reference of the job container and the part name of the shared resources container comprise uniform resource identifiers (URIs). Generally, utilization devices may print, display, distribute, and\/or archive, etc. downloaded job containers.","Other method, system, approach, apparatus, device, media, procedure, arrangement, etc. implementations are described herein.","Introduction","In a computer and printer implementation example, a computer produces a shared resources container that includes one or more resources. The computer downloads the shared resources container to the printer. The printer stores the shared resources container for subsequent reference thereto. The computer may thereafter produce a job container that represents a document to be printed by the printer. The job container includes at least one resource reference that points to a resource included in the shared resources container in lieu of embedding the actual resource in the job container. Alternatively, shared resources can be downloaded from a computer to a printer in job containers by using appropriate shared resource identifications.","The computer also downloads the job container to the printer. When processing the job container for printing of the document thereof, the printer uses the at least one resource reference to retrieve a resource included in the shared resources container. Other job containers may likewise include resource references to the one or more shared resources of the shared resources container. In this manner, resources that are used repeatedly in the printing of multiple documents may be downloaded once.","Example of Environments for Downloaded Resource Sharing",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","102","104","112","102","112","102","112","104","114","104"]},"As illustrated, each of production device  and utilization device  include one or more processors , at least one media , and a communication interface  that is coupled to communication channel . Specifically, production device  includes a processor (PD), media (PD), and a communication interface (PD). Similarly, utilization device  includes a processor (UD), media (UD), and a communication interface (UD).","Media  typically includes processor-executable instructions that are executable by processor  to effectuate functions of devices  and . Media  may be realized as storage or transmission media, volatile or non-volatile media, removable or non-removable media, some combination thereof, and so forth. For example, media  may be realized as (i) a volatile random access memory (RAM), (ii) a non-volatile disk-based memory, (iii) a transmission medium, and\/or (iv) a propagating signal. Communication channel  may be comprised of one or more wireless and\/or wired links that directly interconnect communication interfaces  or that indirectly interconnect them across one or more networks (not explicitly shown). Additional details and examples of devices, processors, media, communication mechanisms, and so forth are described further below with reference to .","In a described implementation, file package  includes a standardized visual representation , a private application-specific representation , and other information . Standardized visual representation  and private application-specific representation  can exist in parallel within a single file package . Standardized visual representation  includes data that enables display of the content in a platform independent manner using, for example, a platform-independent application viewer (not shown). Private application-specific representation  includes data that enables display (and manipulation) of the content using, for example, a proprietary internal format. When the various parts of file package  are bundled into a single file, such a single file may be considered a container.","Although shown separately as discrete units, standardized visual representation  and private application-specific representation  may actually be at least partially overlapping, interrelated, and even interdependent. In other words, they may share content information and\/or formatting data. Other information  represents any additional information and\/or metadata included in file package  that may be useful for or related to: authorship information, version monitoring, content change tracking, routing information, compatibility information, other visual or non-visual representations, printing information, digital rights management (DRM), and so forth.","As illustrated, production device  produces file package (PD). Production device  transmits file package (PD), including a copy thereof, across communication channel  via communication interface (PD). File package (CC) propagates along communication channel . Utilization device  receives file package (UD) through communication channel  via communication interface (UD). Upon receipt, utilization device  may utilize file package (UD) depending on the intended or stipulated use and\/or capabilities of utilization device . For example, utilization device  may be capable of printing, displaying\/viewing, distributing, archiving, etc. file package (UD). Although not so illustrated, an application (e.g., a file-package-capable viewer) on production device  may utilize file package  in lieu of or in addition to utilization at utilization device .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["200","102","112","104","214","104","214","104","104","104","104","104","214","104"]},"As illustrated, production device  includes an application , a file package component , and a utilization device subsystem . Production device  also includes a device port (PD-DP) implementation of a communication interface (PD). By way of utilization device subsystem , production device  sends file package , or at least a version or portion thereof, to utilization devices  over communication channel  via device port (PD-DP).","In a described implementation, application  is an application of an independent software vendor (ISV), at least with respect to file package , file package component , and related features. Consequently, application  generates  file package  using file package component . For example, application  may make one or more calls to application programming interfaces (APIs)  of file package component  in order to generate  standardized visual representation  of file package , other information  (of ), and\/or additional parts of file package . APIs  may alternatively be implemented fully or partially separately from file package component , including as part of utilization device subsystem . Although not explicitly indicated in , application  may access file package  after generation  thereof.","Standardized visual representation  of file package  is represented diagrammatically as a back square  in block diagram . When file package  is to be provided to a utilization device  (e.g., as requested by application  as per a command input by a user), file package component  accesses file package . In this example, file package component  extracts standardized visual representation  from file package  and forwards standardized visual representation  to utilization device subsystem . Alternatively, file package component  may forward other or additional parts, including all parts or the entirety, of file package  to utilization device subsystem . The forwarding may also be effectuated directly by application  using APIs .","Generally, utilization device subsystem  is capable of handling file packages , or at least standardized visual representations . Specifically, utilization device subsystem  is adapted to provide at least a portion of file package  to a given utilization device  in dependence on the corresponding usage case (A), (PA), or (L). To this end, utilization device subsystem  includes a modifier module  and a converter module .","File-package-aware utilization device (A) is capable of understanding and handling file package  technology. In other words, file-package-aware utilization device (A) is capable of consuming or properly digesting file packages , or at least standardized visual representations . Consequently, utilization device subsystem  sends at least standardized visual representation  to file-package-aware utilization device (A) without changes thereto via device port (PD-DP) and across communication channel .","However, one or more changes to standardized visual representation  are made prior to forwarding it to partially file-package-aware utilization device (PA). Partially file-package-aware utilization device (PA) is capable of understanding and handling a subset of and\/or non-standard file package  technology. Specifically, modifier module  modifies standardized visual representation  to produce a modified standardized visual representation \u2032. Modifier module  is adapted to rearrange information of file package , to remove information to create a backward-compatible version of standardized visual representation , some combination thereof, and so forth. This modified standardized visual representation \u2032 is sent from utilization device subsystem  at production device  to partially file-package-aware utilization device (PA) via device port (PD-DP) and across communication channel .","On the other hand, some utilization devices  can neither understand nor otherwise handle file packages , or even standardized visual representations  thereof. For example, legacy utilization device (L) is incompatible with file package . Consequently, utilization device subsystem  uses converter module  to convert standardized visual representation  to a device-specific format representation  that is compatible with legacy utilization device (L). Device-specific format representation  is sent from utilization device subsystem  at production device  to legacy utilization device (L) via device port (PD-DP) and across communication channel . For this usage case (L), legacy utilization device (L) is typically unaware that device-specific format representation  originated from part of a file package .","In these manners, file packages  can be effectively utilized directly or indirectly by various utilization devices (A,PA,L) of various usage cases (A,PA,L). Although not so illustrated in , file package component  (including the APIs  thereof) may alternatively be implemented as part of application  and\/or utilization device subsystem  (e.g., as part of a driver). Additionally, a file-package-capable viewer or similar application (not separately shown) on production device  may utilize file package  by presenting to a user a viewable image thereof from standardized visual representation , possibly by interfacing with file package component  (including by calling the APIs  thereof).","Generally, utilization devices  may be displaying\/viewing devices, archiving devices, distributing devices, printing devices, some combination thereof, and so forth. However, in a described implementation, utilization devices  are printing devices. In a printing device  implementation, application  may be a word processing program, a spreadsheet program, a slide show program, some combination thereof, and so forth. Additionally, utilization device subsystem  may be realized as a printing subsystem (e.g., as a printer spooler and\/or printer driver), and device port (PD-DP) may be realized as a parallel port, a Universal Serial Bus (USB) port, an IEEE 1394 \u201cFirewire\u201d port, or a wireless\/wired network interface, and so forth. Accordingly, device-specific format  may be realized as a Postscript file, a printer control language (PCL) file, or a rasterized bit map information file, and so forth.","Examples of Downloaded Resource Sharing",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 3","FIG. 5"],"b":["304","306","300","102","104","310","102","1","2","3","4","300","302","304"]},"Shared resources container  and job container  are two examples of a file package . However, all three parts (standardized visual representation , private application-specific representation , and other information ) of file package  (as shown in ) are not necessarily included in shared resources container  or job container .","In operation of a described implementation, at phase (), production device  collects (shareable) resources  and assembles them into shared resources container  (e.g., possibly in a manner that is analogous to construction of a library). At phase (), shared resources container  is sent from production device  to utilization device . For example, production device  may transmit shared resources container  via communication interface (PD) over communication channel  to utilization device , which receives shared resources container  via communication interface (UD).","At phase (), job container  is sent from production device  to utilization device . For example, production device  may transmit job container  via communication interface (PD) over communication channel  to utilization device , which receives job container  via communication interface (UD). Job container  serves to request a utilization job from utilization device .","In a described implementation, phase () precedes phase (); however, phases () and () may be effectuated in any order, including partially or fully overlapping. Nevertheless, shared resources container  and job container  are separate containers or files. In a printing device implementation of utilization device , for example, shared resources container  and\/or job container  may be formatted and sent as print jobs (e.g., in accordance with a page description language (PDL) and\/or a job control language(JCL)) to a printing device. Examples of JCLs include the printer job language (PJL), the publishing markup language (PML), and so forth. Generally, shared resources container  and job container  may be formatted at least similarly.","At phase (), job container  is processed by utilization device  using resources  of shared resources container . Specifically, job container  references  resources  of shared resources container . In other words, at least one resource that is to be used to process job container  at utilization device  is referenced  by job container  to be retrieved from resources  of shared resources container . For example, a resource (*) (not separately indicated in ) is retrieved from resources  of shared resources container  using a reference (*) of job container .","Examples of resources  include images, color tables, backgrounds, clip art, fonts, letterheads, catalog items, company logos, headers\/footers, all or a portion of a graphic, a color separation, an entire page for multi-page documents, watermarks, some combination thereof, and so forth. These various types of resources may be treated in a uniform manner with a uniform resource referencing mechanism as described herein. In a described implementation, references  comprise uniform resource identifiers (URIs). Resources retrieved from resources  of shared resources container  using references  are used by utilization device  when processing job container  (e.g., when displaying, archiving, printing, distributing, etc. the document of job container ).","Although only one shared resources container  and one job container  are illustrated, multiple such containers  and  may actually be present within production device  and\/or utilization device . Furthermore, multiple job containers  may each reference resources  of a single shared resources container , and a single job container  may reference multiple shared resources containers .","In these manners, resources need not be replicated in each container for each job. Additionally, there are specific scenarios, such as variable data printing (VDP), that are especially likely to benefit from the sharing of frequently used resources. An example of VDP is the customization of catalogs for each individual targeted consumer (e.g., based on historical buying patterns and\/or demographics). Moreover, the total size of containers sent from production device  to utilization device  can be reduced by using shared resources container .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4","b":["400","306","308","302","304","304","302","304","302","1","302","302","302"]},"More specifically, resource (*) as illustrated includes part name  and corresponding data . Each part name  may be unique. Resource (*), in this example, is an image resource in JPEG format. Part name  is \u201c\/images\/img2jpg\u201d, and corresponding data  is some JPEG-formatted image corresponding thereto. In a described implementation, each part name  comprises a URI. However, part names  may be realized in alternative manners.","Job container  is a document that is being processed (e.g., by a utilization device ). As illustrated, job container  includes at least one page, which is denoted as \u201c\/page1.xaml\u201d in . Each page may be described using a declarative fixed markup language or similar, for example. Job container  also usually includes one or more embedded resources  (some of which may be for \u201c\/page 1.xaml\u201d). Embedded resources  are described further herein below with reference to .","Furthermore, job container  includes one or more resource references , some of which may be for other pages (if present). Resource references  may reference resources that are located within (internal to) job container  or that are located outside of (external to) job container . For example, resource references  may reference resources  that are part of shared resources container . Shared resources container  may be located within utilization device , at a central server for multiple such utilization devices , across a network (e.g., a local area network (LAN), an internet, etc.), some combination thereof, and so forth.","A given resource reference (*) refers to resource (*) of shared resources container . As illustrated, resource reference (*) identifies a resource by including a pointer \u201c\/\/SRC\/images\/img2.jpg\u201d, where \u2018SRC\u2019 refers to a particular shared resources container . Resource reference (*) is associated with and points to resource (*). Furthermore, resource reference (*) enables a related resource (*) to be located and retrieved for use in the processing of job container . In a described implementation, resource reference (*) also comprises a URI.","In operation, a production device  formulates or prepares job container  with knowledge of an existing shared resources container  (if any) and with consideration as to whether any resources should be added to resources  of an existing shared resources container  (or, alternatively, whether a new shared resources container  should be created). If a desired resource is to be retrieved from a shared resources container , production device  inserts into job container  a resource reference  pointing to the associated resource  of shared resources container  instead of embedding the actual resource. During processing of a job container  by a utilization device , relevant resources are retrieved from external locations using inserted resource references , including possibly from resources  of shared resources container .","This described resource location and retrieval mechanism is independent of resource type. Resources are identified (e.g., with URIs) independently of resource type. For example, resources, regardless of type, that are used for the processing of job container  may be referred to by URI within job container . Thus, the URI may point outside of job container . This pointing may be to a shared resources container , as illustrated in . Alternatively, the pointing may be to an external device (not shown) such as a directly-connected storage device, a network server that is accessible over a network (e.g., a LAN, an internet, etc.), and so forth.","Examples of Methods for Downloaded Resource Sharing",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 5","FIGS. 1-4"],"b":["500","500","13","502","526","500","102","502","526","104"]},"At block , a current job container is created. For example, an application  may create a file package  and then request that file package component  send file package , or at least standardized visual representation  thereof, to a utilization device , thus establishing a request for a job container . The actions of flow diagram  may be performed fully or partially by file package component  and\/or utilization device subsystem ; nevertheless, the actions are described below in the context of only file package component  for the sake of clarity.","At block , the resource usage for the current job container is analyzed. For example, file package component  may analyze the resource usage of job container . (Alternatively, utilization device subsystem  alone or in cooperation with file package component  may analyze the resource usage of job container .) The resources to be utilized by job container  are analyzed to determine an interrelationship between job container  and shared resources container . The actions of blocks - are a detailed example of such a resource analysis process. In blocks -, resources of the current job container are considered individually and sequentially; however, the resources may alternatively be analyzed simultaneously.","At block , it is ascertained if a particular resource has been previously downloaded so as to be accessible by the utilization device. For example, it may be ascertained if a resource (*) has been previously downloaded in a shared resources container  so as to be accessible by utilization device  by comparing resource (*) to those resources listed in database of downloaded shared resources  to see if it is recognized. If \u201cYes\u201d the particular resource has been previously downloaded (as ascertained at block ), then at block  a reference to the downloaded resource is inserted into the current job document. For example, a resource reference (*), which points to resource (*) in shared resources container , is inserted into job container .","At block , the particular resource is excluded from the current job container; the exclusion may be effectuated by omitting any embedding thereof (if not already present in the job container) or by removing the resource (if already present in the job container). For example, embedding of an embedded resource  into job container  may be omitted, or such an embedded resource  may be removed from job container . An internal reference to such an embedded resource , if the internal reference is already present in a page of job container , is also removed from job container .","At block , it is checked whether there are more resources in the current job container to analyze. For example, it may be checked whether there are any additional resources (e.g., already or previously embedded resources ) in job container  that have yet to be analyzed. If \u201cNo\u201d, then the method continues at block , which is described further herein below. If \u201cYes\u201d, on the other hand, there are additional resources in the current job container to analyze (as checked at block ), then the method continues again at block .","In this iteration of analyzing resource usage for the current job container (starting at block ), it is ascertained at block  that \u201cNo\u201d the particular resource under consideration has not been previously downloaded. At block , it is determined if the particular resource is likely to be reused. For example, it may be determined if a resource is likely to be used again in a subsequent job container \u2032. For instance, file package component  may determine on a heuristic basis, using predetermined algorithms, through end-user intent as specified by parameters that are stipulated by user input(s), or using some other suitable mechanism which resources are likely to be used again and are thus candidates to be shared.","If \u201cYes\u201d the particular resource is determined (at block ) to be likely to be reused, then at block  the particular resource is added to the shared resources container. For example, resource (*) may be added to shared resources container . This may be accomplished by amending a current shared resources container  or by creating a new shared resources container , as is described further herein below with reference to block . Thereafter, the method continues at blocks  and  (as described above) in order to insert into the current job container a reference to the particular resource, which is downloaded via a shared resources container mechanism, and to exclude the particular resource from the current job container.","If, on the other hand, it is determined (at block ) that \u201cNo\u201d the particular resource is not likely to be reused, then at block  the particular resource is included in the current job container; the inclusion may be effectuated by embedding the resource (if not already present in the job container) or by omitting any removal thereof (if already present in the job container). For example, the actual resource may be embedded into job container  as an embedded resource , or such an already embedded resource  may be left in job container . An internal reference to such an embedded resource , if the internal reference is already present in a page of job container , is also left in job container . After including the particular resource, the method of flow diagram  continues at block  (as described above) by checking whether there are any additional resources to analyze.","At block , the memory capacity of the utilization device is managed. For example, the capacity of a memory portion of media (UD) of utilization device  may be managed by production device . For instance, if file package component  detects that utilization device  has insufficient available memory to store additional shared resources , file package component  instructs utilization device  (e.g., through some suitable job control mechanism) to discard specifically enumerated previously-downloaded (e.g., older) shared resources . Selection of the specific older shared resources  may be made with a least recently used (LRU) or other algorithm. Although many of the actions of the method of flow diagram  are optional, the action(s) of block  are particularly optional inasmuch as these action(s) depend on the usable memory capacity of the relevant utilization device, which may not typically be exhausted.","At block , the shared resources container (including updates thereof) is downloaded to the utilization device. For example, production device  may download shared resources container  to utilization device  using an appropriate job control mechanism to instruct utilization device  to retain shared resources container  without immediately utilizing it as a separate job. The downloaded shared resources container  (i) may then exist alongside previously (and any subsequently) downloaded shared resources containers or (ii) may then be combined with an already existing amalgamated shared resources container as an amendment thereto and update thereof.","At block , the current job container is downloaded to the utilization device. For example, production device  may download job container  to utilization device . At block , a database of shared resources that have been sent to the utilization device is retained for use in resource analyses of subsequent utilization jobs. For example, database of downloaded shared resources  includes a listing of resources  that have been sent (e.g., at block ) to utilization device . Database of downloaded shared resources  is retained at production device  for resource use analysis of subsequent job containers in the action(s) of block .",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 6","FIGS. 1-4"],"b":["600","600","10","602","620","600","104","602","620","102"]},"At block , a downloaded container is received. For example, utilization device  may receive a downloaded container (e.g., a shared resources container  or a job container ) from production device . At block , it is determined if the downloaded container is a shared resources container. For example, a shared resources container  may be differentiated from a job container  with additional job control information (e.g., a shared resources indicator) that is provided to utilization device  from production device .","If \u201cYes\u201d, the received container is determined to be a shared resources container (at block ), then at block  the downloaded shared resources container is stored for subsequent use. For example, a downloaded shared resources container  may be stored by utilization device  at media (UD) for use in processing subsequently-received job containers . Media (UD) may be RAM, a mass storage device, some combination thereof, and so forth. This storing may entail storing a first shared resources container , storing an additional shared resources container  along with other previously-received shared resources containers , or adding the resources of a just-received shared resources container  to a preexisting, amalgamated shared resources container .","At block , device-specific pre-processing of resources is performed for resource representation. For example, a resource may be pre-rendered prior to actual use or even prior to arrival of a job container  that requests the resource in order to save time during the processing of job containers . For instance, utilization device  may perform device-specific optimizations of resource representations and store them in a manner that facilitates rapid retrieval. Although many of the actions of the method of flow diagram  are optional, the action(s) of block  are particularly optional inasmuch as these action(s) may be performed only when convenient and\/or when storage requirements for a given post-processed resource impact a utilization device  less than repeated processing of the given resource upon request.","If \u201cNo\u201d, on the other hand, the received container is not determined to be a shared resources container (at block ), then at block  the downloaded job container is processed (e.g., printed, distributed, displayed, and\/or archived). For example, utilization device , such as a printing device, may begin to process downloaded job container , which may be a print job.","At block , it is indicated that the actions of blocks - are repeated for each relevant resource. For example, for each resource to be used when processing job container , the actions of blocks - are repeated by utilization device . These actions may also be performed fully or partially in parallel for each of the different resources.","At block , it is ascertained if a particular resource is present in the downloaded job container. For example, utilization device  may ascertain if a particular resource is represented in job container  as an actual, embedded resource  or if a resource reference  is present instead.","If \u201cYes\u201d the particular resource is ascertained (at block ) to be present in the job container, then at block  the utilization job is processed using the embedded resource. For example, utilization device  may use embedded resource  when processing job container .","If \u201cNo\u201d, on the other hand, the particular resource is not ascertained (at block ) to be present in the job container, then at block  a resource is retrieved using a resource reference of the downloaded job container. For example, a resource (*) may be retrieved from shared resources container  using a resource reference (*) extracted from job container . A pre-processed version of the resource is retrieved if available. At block , the utilization job is then processed using the retrieved resource. For example, utilization device  may process job container  using resource (*) as retrieved from shared resources container .","The implementations described above with reference to  relate to downloading shared resources  in a shared resources container  primarily separately from job containers . However, in an alternative implementation, shared resources  are downloaded from a production device  to a utilization device  along with job-specific resources  (e.g., embedded resources ) in job containers . These shared resources  are marked or otherwise identified within job containers  as being shared resources  that should be retained for possible future use (e.g., in a shared resources container  that is stored at utilization device ).","For example, a shared resources container  may exist in utilization device  but not necessarily in production device . In such an implementation, job container  includes resources  that are discovered by production device  to be shareable in the resource usage analysis of . Hence, these resources are not stripped from job container  by production device ; instead, utilization device  adds them to shared resources container  after receiving them in job container .","To this effect, production device  assigns a unique name to each shared resource  (e.g., using a globally unique identifier (GUID)) and includes it in job container . For example, although each resource may still be named with a URI, part of the URI may be constructed using a GUID in order to avoid resource name conflicts with resources already stored in a device. Production device  may optionally keep a copy of a shared resources container  along with the identifying GUIDs for later reference in a resource usage analysis for a subsequent job container . This is not a requirement, however, as long as production device  can identify recurring resources and match them to the previously-assigned GUIDs.","For this alternative implementation, an example job container  may include the following example parts:",{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Job Container:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/SHARED_RES\/Unique1.jpg"]},{"entry":[{},"\/SHARED_RES\/Unique2.jpg"]},{"entry":[{},"\/Non_Shared_res\/image.jpg"]},{"entry":[{},"\/pages\/page1.xaml:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"references"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/Non_Shared_res\/image.jpg,"]},{"entry":[{},"\/\/SRC\/SHARED_RES\/Unique1.jpg,"]},{"entry":[{},"\/\/SRC\/SHARED_RES\/Unique2.jpg"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"When a utilization device  receives such an example job container , it strips resources  from the shared resources section (e.g., \/SHARED_RES\/) and adds them to a shared resources container  (e.g., \/\/SRC\/SHARED_RES\/). Job container  can then be processed as described above with reference to . More specifically, with reference to flowchart , actions analogous to those of blocks  and  are performed for each job container  that includes shared resources by the stripping or extraction thereof. The remainder of job container  may then be processed with actions similar to those of blocks  and  (which includes blocks -). A utilization device  may alternatively process the entirety of job container  and then extract and retain those resources  that are indicated as being shareable for subsequent job containers .","Continuing with the example for this alternative implementation, an example subsequent job container  (having the same page content for the sake of clarity) may include the following example parts:",{"@attributes":{"id":"p-0085","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Subsequent Job Container:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/Non_Shared_res\/image.jpg"]},{"entry":[{},"\/pages\/page1.xaml:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"references"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/Non_Shared_res\/image.jpg,"]},{"entry":[{},"\/\/SRC\/SHARED_RES\/Unique1.jpg,"]},{"entry":[{},"\/\/SRC\/SHARED_RES\/Unique2.jpg"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"When a utilization device  receives such an example subsequent job container , utilization device  can access a shared resources container  and extract therefrom any relevant shared resources . Specifically, both \/\/SRC\/SHARED_RES\/Unique1.jpg and \/\/SRC\/SHARED_RES\/unique2.jpg reference resources  that were previously contained in another job container . As described above, they were moved to, and are now located at, shared resources container .","In this alternative implementation but with reference to block  of flowchart  of , a production device  instead includes the shareable resource  in the current job container  with a shareable identification such as a GUID. The action(s) of block  may be omitted because the shared resources  are included in the current job container  that is downloaded at block .","The devices, actions, aspects, features, procedures, components, etc. of  are illustrated in diagrams that are divided into multiple blocks. However, the order, interconnections, interrelationships, layout, etc. in which  are described and\/or shown is not intended to be construed as a limitation, and any number of the blocks can be modified, combined, rearranged, augmented, omitted, etc. in any manner to implement one or more systems, methods, devices, procedures, media, apparatuses, arrangements, etc. for the sharing of downloaded resources. Furthermore, although the description herein includes references to specific implementations (including the general device of  below), the illustrated and\/or described implementations can be implemented in any suitable hardware, software, firmware, or combination thereof and using any suitable device architecture(s), referencing element(s), resource data structure organization(s), communication protocol(s), content representation format(s), and so forth.","Example Operating Environment for Computer or Other Device",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 7","b":["700","700"]},"Example operating environment  is only one example of an environment and is not intended to suggest any limitation as to the scope of use or functionality of the applicable device (including computer, network node, entertainment device, mobile appliance, general electronic device, etc.) architectures. Neither should operating environment  (or the devices thereof) be interpreted as having any dependency or requirement relating to any one or to any combination of components as illustrated in .","Additionally, the sharing of downloaded resources may be implemented with numerous other general purpose or special purpose device (including computing system) environments or configurations. Examples of well known devices, systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, thin clients, thick clients, personal digital assistants (PDAs) or mobile telephones, watches, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set-top boxes, programmable consumer electronics, video game machines, game consoles, portable or handheld gaming units, network PCs, minicomputers, mainframe computers, network nodes, computer and\/or electronic peripherals, distributed or multi-processing computing environments that include any of the above systems or devices, some combination thereof, and so forth.","Implementations for the sharing of downloaded resources may be described in the general context of processor-executable instructions. Generally, processor-executable instructions include routines, programs, protocols, objects, interfaces, components, data structures, etc. that perform and\/or enable particular tasks and\/or implement particular abstract data types. Downloaded resource sharing, as described in certain implementations herein, may also be practiced in distributed processing environments where tasks are performed by remotely-linked processing devices that are connected through a communications link and\/or network. Especially but not exclusively in a distributed computing environment, processor-executable instructions may be located in separate storage media, executed by different processors, and\/or propagated over transmission media.","Exemplary operating environment  includes a general-purpose computing device in the form of a computer , which may comprise any (e.g., electronic) device with computing\/processing capabilities. The components of computer  may include, but are not limited to, one or more processors or processing units , a system memory , and a system bus  that couples various system components including processor  to system memory .","Processors  are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example, processors  may be comprised of semiconductor(s) and\/or transistors (e.g., electronic integrated circuits (ICs)). In such a context, processor-executable instructions may be electronically-executable instructions. Alternatively, the mechanisms of or for processors , and thus of or for computer , may include, but are not limited to, quantum computing, optical computing, mechanical computing (e.g., using nanotechnology), and so forth.","System bus  represents one or more of any of many types of wired or wireless bus structures, including a memory bus or memory controller, a point-to-point connection, a switching fabric, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures may include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus, some combination thereof, and so forth.","Computer  typically includes a variety of processor-accessible media. Such media may be any available media that is accessible by computer  or another (e.g., electronic) device, and it includes both volatile and non-volatile media, removable and non-removable media, and storage and transmission media.","System memory  includes processor-accessible storage media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules\/instructions that are immediately accessible to and\/or being presently operated on by processing unit .","Computer  may also include other removable\/non-removable and\/or volatile\/non-volatile storage media. By way of example,  illustrates a hard disk drive or disk drive array  for reading from and writing to a (typically) non-removable, non-volatile magnetic media (not separately shown); a magnetic disk drive  for reading from and writing to a (typically) removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d); and an optical disk drive  for reading from and\/or writing to a (typically) removable, non-volatile optical disk  such as a CD, DVD, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are each connected to system bus  by one or more storage media interfaces . Alternatively, hard disk drive , magnetic disk drive , and optical disk drive  may be connected to system bus  by one or more other separate or combined interfaces (not shown).","The disk drives and their associated processor-accessible media provide non-volatile storage of processor-executable instructions, such as data structures, program modules, and other data for computer . Although exemplary computer  illustrates a hard disk , a removable magnetic disk , and a removable optical disk , it is to be appreciated that other types of processor-accessible media may store instructions that are accessible by a device, such as magnetic cassettes or other magnetic storage devices, flash memory, compact disks (CDs), digital versatile disks (DVDs) or other optical storage, RAM, ROM, electrically-erasable programmable read-only memories (EEPROM), and so forth. Such media may also include so-called special purpose or hard-wired IC chips. In other words, any processor-accessible media may be utilized to realize the storage media of the exemplary operating environment .","Any number of program modules (or other units or sets of instructions\/code) may be stored on hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of general example, an operating system , one or more application programs , other program modules , and program data .","A user may enter commands and\/or information into computer  via input devices such as a keyboard  and a pointing device  (e.g., a \u201cmouse\u201d). Other input devices  (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to processing unit  via input\/output interfaces  that are coupled to system bus . However, input devices and\/or output devices may instead be connected by other interface and bus structures, such as a parallel port, a game port, a universal serial bus (USB) port, an infrared port, an IEEE  (\u201cFirewire\u201d) interface, an IEEE . wireless interface, a Bluetooth\u00ae wireless interface, and so forth.","A monitor\/view screen  or other type of display device may also be connected to system bus  via an interface, such as a video adapter . Video adapter  (or another component) may be or may include a graphics card for processing graphics-intensive calculations and for handling demanding display requirements. Typically, a graphics card includes a graphics processing unit (GPU), video RAM (VRAM), etc. to facilitate the expeditious display of graphics and performance of graphics operations. In addition to monitor , other output peripheral devices may include components such as speakers (not shown) and a printer , which may be connected to computer  via input\/output interfaces .","Computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . By way of example, remote computing device  may be a peripheral device, a personal computer, a portable computer (e.g., laptop computer, tablet computer, PDA, mobile station, etc.), a palm or pocket-sized computer, a watch, a gaming device, a server, a router, a network computer, a peripheral device, a peer device, another network node, or another device type as listed above, and so forth. However, remote computing device  is illustrated as a portable computer that may include many or all of the elements and features described herein with respect to computer .","Logical connections between computer  and remote computer  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, the Internet, fixed and mobile telephone networks, ad-hoc and infrastructure wireless networks, mesh networks, other wireless networks, gaming networks, some combination thereof, and so forth. Such networks and logical and physical communications connections are additional examples of transmission media.","When implemented in a LAN networking environment, computer  is usually connected to LAN  via a network interface or adapter . When implemented in a WAN networking environment, computer  typically includes a modem  or other component for establishing communications over WAN . Modem , which may be internal or external to computer , may be connected to system bus  via input\/output interfaces  or any other appropriate mechanism(s). It is to be appreciated that the illustrated network connections are exemplary and that other manners for establishing communication link(s) between computers  and  may be employed.","In a networked environment, such as that illustrated with operating environment , program modules or other instructions that are depicted relative to computer , or portions thereof, may be fully or partially stored in a remote media storage device. By way of example, remote application programs  reside on a memory component of remote computer  but may be usable or otherwise accessible via computer . Also, for purposes of illustration, application programs  and other processor-executable instructions such as operating system  are illustrated herein as discrete blocks, but it is recognized that such programs, components, and other instructions reside at various times in different storage components of computing device  (and\/or remote computing device ) and are executed by processor(s)  of computer  (and\/or those of remote computing device ).","Although systems, media, devices, methods, procedures, apparatuses, techniques, schemes, approaches, procedures, arrangements, and other implementations have been described in language specific to structural, logical, algorithmic, and functional features and\/or diagrams, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or diagrams described. Rather, the specific features and diagrams are disclosed as exemplary forms of implementing the claimed invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like and\/or corresponding aspects, features, and components.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
