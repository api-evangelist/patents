---
title: System for overriding interpreted byte-code with native code
abstract: In a method of executing a program on an interpreted bytecode language, a plurality of interpreted bytecode modules (each having an associated name) is loaded. A pointer is directed from each method entry to a different interpreted bytecode module. A native code module library is loaded and includes a native code module (also having an associated name) that implements a function corresponding to an interpreted bytecode module. When the name of an interpreted bytecode module corresponds to the name of a native code module, the pointer directed to the interpreted bytecode module is redirected to the corresponding native code module. Each interpreted bytecode module and native code module pointed to by the each method entry in the method table is executed according to an application-controlled order of execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08683453&OS=08683453&RS=08683453
owner: Motorola Mobility LLC
number: 08683453
owner_city: Libertyville
owner_country: US
publication_date: 20061130
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to computational systems and, more specifically, to a system that runs modules written in an interpreted bytecode language.","2. Background of the Invention","Bytecode is computer object code that is processed by a program, referred to as a virtual machine, rather than directly by the actual processor on which the processed code runs. A virtual machine converts each bytecode instruction into specific machine-dependant instructions that are executable on the processor. Most high level computer languages employ a different compiler for each different type of operating system. Compiling a bytecode program into a virtual machine language allows a developer to compile the bytecode program only once, even though it may be executed on many different types of processors employing different operating systems.","Programming instructions written in a bytecode are designed to be executed by a virtual machine rather than directly by dedicated hardware. The virtual machine acts as an interface layer between the bytecode and the actual processor on which the bytecode is executed. Interpreted bytecode computer languages provide program developers with a platform-independent language. It is the virtual machine that is adapted for execution of specific computer platforms, rather than the bytecode compiler.","Bytecode languages are used by programming language implementations to reduce dependence on specific hardware since the same binary code can be executed across several different platforms. Compared to machine-specific source code, bytecodes tend to be less abstract and more compact. Since a bytecode program is normally executed by parsing the instructions one at a time using an interpreter, bytecode programs tend to be highly portable. While the underlying virtual machine may not be portable between platforms, the bytecode itself remains highly portable.","Frequently, different parts of an interpreted bytecode program are stored in separate files, similar to object modules. Many language implementations execute a program in two phases, first compiling the source code into bytecode, and then passing the bytecode to the virtual machine. Thus, may object modules are often written in a source code that is compiled into a bytecode, which is then interpreted by a virtual machine.","One commonly used bytecode language is Java\u2122, which uses a bytecode interpreter to translate the bytecode to machine code before execution. Java is an object-oriented programming language with a built-in application programming interface (API) that can handle graphics and user interfaces and that can be used to create applications. Since there is an extensive set of available Java\u2122 API's, Java\u2122 is used extensively by developers, especially those creating Internet applications.","However, because they are interpreted run time, rather than compiled before run time, bytecode implementations often do not execute the functions of a program in the most efficient manner. Sometimes it is desirable to substitute certain modules in a bytecode program with code written in the native language of a machine. This is especially true for modules that are computationally intensive. Modules written in a native language, on the other hand, can be written in the most efficient manner without having to incur the penalties associated with interpreting the bytecode.","The ability to supplement bytecode applications with native code is desirable for a number of reasons. First, computationally-complex operations can usually be performed faster when implemented in native code instead of bytecode. Second, support for native code permits the reuse of algorithms and applications that have been written in existing compiled language for other platforms.","The Java\u2122 language specification does include the ability to declare a method as being implemented in a native language. Native method support as defined in the Java\u2122 language does not provide a way in which a default Java\u2122 implementation can be provided for a native method. If for some reason the native code cannot be used (e.g. due to incompatible hardware, security permissions, etc.), then the method is entirely unusable and the application will not function. Other bytecode based systems may provide a mechanism for packaging both a bytecode and native version of a given method in a single load and the operating system will use the native version if possible, but can default to the bytecode version if needed. However, such a \u2018fat binary\u2019 approach packages both implementations as part of a single module. In these systems, native implementations cannot be developed, tested and deployed separately.","In the Java\u2122 language specification, a native method modifier is used to indicate that a particular method is implemented natively. The presence of this modifier indicates to the virtual machine (VM) that the method will be linked to appropriate native code instead of a block of bytecode. Until the library is loaded and linking occurs, the method has no code associated with it and cannot be invoked without an error occurring. When the corresponding library is loaded, the VM updates the method table so that the native methods point to their corresponding functions in the native library.","Typical existing systems, as shown in , will load a bytecode library  from which it generates a method table . The method table includes a plurality of method entries, each of which points to either a bytecode module or to a native method module. At execution, the virtual machine will execute the modules pointed by the method table as requested by the application. If a native method is pointed to by the method table  (as is the case with native methods  and , in the case shown), the method entries will point to code modules that have been previously loaded on the system. If one of the native method modules is unavailable or is not functioning properly, then the system will enter an error condition, as there is not a bytecode module to replace it.","Therefore, there is a need for a system that allows an interpreted bytecode module to be replaced with a native method module, while preserving the interpreted bytecode module.","The disadvantages of the prior art are overcome by the present invention which, in one aspect, is a method of executing a program on an interpreted bytecode language virtual machine that is operable on a digital computer that stores a method table that includes a plurality of method entries. A plurality of interpreted bytecode modules is loaded. Each interpreted bytecode module is written in the interpreted bytecode and has a name associated therewith. A pointer is directed from each method entry in the method table to a different interpreted bytecode module of the plurality of interpreted bytecode modules so that each method entry points to a corresponding interpreted bytecode module. A first native code module library is loaded. The first native code module library includes at least one first native code module that implements a function corresponding to a selected interpreted bytecode module of the plurality of interpreted bytecode modules. The first native code module also has a name associated therewith that corresponds to the selected interpreted bytecode module. When the name of an interpreted bytecode module corresponds to the name of a native code module, the pointer from the method entry corresponding to the interpreted bytecode module is redirected so that the pointer points to the native code module corresponding to the interpreted bytecode module. Each interpreted bytecode module and native code module pointed to by the each method entry in the method table is executed according to an application-controlled order of execution.","In another aspect, the invention is a method of executing interpreted bytecode that operable on a digital computer that stores a method table that includes a plurality of method entries, each method entry corresponding to a predetermined code module. The method determines whether each method entry corresponds to an interpreted bytecode module or a native language module. If a method entry corresponds to a native language module, the native language module is executed. Otherwise, the interpreted bytecode module is executed.","In yet another aspect, the invention is a system for executing interpreted bytecode, that includes a computer-readable memory and a processor. The computer-readable memory stores a plurality of interpreted bytecode modules, a method table and a native code module library. The method table includes a plurality of method entries. Each method entry points to a selected one of either an interpreted bytecode module stored in the plurality of interpreted bytecode modules or to a native code module in the native code module library. The processor is configured to execute each interpreted bytecode module and native code module pointed to by the plurality of method entries in the method table as requested by an application.","These and other aspects of the invention will become apparent from the following description of the preferred embodiments taken in conjunction with the following drawings. As would be obvious to one skilled in the art, many variations and modifications of the invention may be effected without departing from the spirit and scope of the novel concepts of the disclosure.","A preferred embodiment of the invention is now described in detail. Referring to the drawings, like numbers indicate like parts throughout the views. As used in the description herein and throughout the claims, the following terms take the meanings explicitly associated herein, unless the context clearly dictates otherwise: the meaning of \u201ca,\u201d \u201can,\u201d and \u201cthe\u201d includes plural reference, the meaning of \u201cin\u201d includes \u201cin\u201d and \u201con.\u201d","One embodiment is a system that controls behavior by overriding specific methods in existing software with new versions that offer different behaviors. A base implementation of the software provides a set of default behaviors via a plurality of methods. One or more \u201coverlays\u201d can be used to update a bytecode library at runtime as needed. Each overlay contains replacement implementations of one or more of the methods.","As shown in , one embodiment employs a technique that may be referred to as \u201cnative method patching\u201d of bytecode. Instead of relying on explicit native method declarations within the class file, the native method patching technique utilizes the native library to control which methods are natively implemented and the bytecode module itself contains no information suggesting the use of native code. That information is provided exclusively by the presence of a suitable function in the corresponding native library.","As shown in , upon loading of a bytecode section , all of the methods in the method table  have a corresponding code block providing a pure bytecode implementation. When the native library is then loaded, the virtual machine (VM) compares the class's methods with the functions provided by the native library. As shown in , using a standardized naming convention, the native function names can be mapped to specific methods in the bytecode language class. If a suitable match is found, the VM can then update the class's method table  by substituting the existing bytecode implementation with a pointer to the native function.","Optionally, as shown in  the original bytecode implementation may also be discarded to save memory. Thus, a bytecode method is never explicitly declared as being native, but it can be replaced by native code if the VM loads suitable native code that implements it. The linkage between a bytecode module and native code is established after class loading is completed, and therefore after both off-line and runtime verification steps are unaware that native code will be used to implement methods in a class.","Whenever an application attempts to use a native code library, the operation might fail for a variety of reasons including: (1) The application lacks security permissions to use native code; (2) The library is incompatible with the device's processor or operating system; or (3) The library has unsatisfied dependencies caused by the absence or incompatibility of other native code. With a conventional native method declaration, any failure to load the native code will cause an error to occur when the method is invoked. While it is possible to catch such errors and invoke alternative code, this technique must be applied explicitly by the developer on each method call.","With native method patching, a method's bytecode block will continue to function normally until it is replaced by a valid piece of native code. Thus, if native code is unavailable for any reason, the default bytecode implementation of the method remains as a back-up without requiring special steps from the developer. This ability to provide multiple versions of the same code allows an application to run on multiple devices without the need for separate releases to be distributed.","If application size is more important than portability, the developer may chose to implement bytecode methods with simple stubs that do not implement functionality and must be patched with native code. In such cases the overhead of providing multiple implementations is almost eliminated, but with the caveat that the application may be inoperable if the native library fails to load.","The native method patching technique also offers the developer greater flexibility when deciding which parts of an application should be implemented with native code. With traditional native methods, the developer is forced to select the methods that require native implementation explicitly and any changes to that set require modifications to the bytecode class file. However, the native method patching technique allows the set of native methods to be controlled arbitrarily by the contents of the native library, thereby allowing the developer to change the set more easily. In addition, the set of native methods may be varied between devices by changing the contents of the corresponding native libraries, thereby allowing greater reuse of the same bytecode.","Furthermore, as shown in , multiple native libraries (e.g., Native Library\u2014A  and Native Library\u2014B ) may be included to provide the user to modify the function of a system using a bytecode language. In one example, the user (or developer) can choose between a first native library  and a second native library , depending on the functionality desired. In another example, the user can select different modules from both libraries to fine tune the functionality of the system. (In the example shown, the user has elected to use Native Module  from Native Library\u2014A  and Native Modules  and  from Native Library\u2014B ).","As shown in , in one embodiment, the interpreted bytecode modules are loaded onto the system  and a pointer is directed from each method entry in the method table to a different interpreted bytecode module of the plurality of interpreted bytecode modules so that each method entry points to a corresponding interpreted bytecode module . The native code module library (or libraries) is loaded . For each native code module in the native code library, the system determines  if there is a corresponding native code module in the native code library. If so, the pointer to the bytecode module is redirected to the corresponding native code module . Optionally, the corresponding interpreted byte code module may be deleted  to reduce overhead. The code is then executed .","In one embodiment, as shown in , the native methods can be thought of as overlays  that can operate on top of a default library  of bytecode modules. If an overlay  is present (indicating a substitute native method), then the API will execute the native methods in the overlay . Otherwise, the API will execute the modules in the default library . An overlay  can update the existing implementation in the default library  on a method-by-method basis. As shown in , several overlays  can be combined to replace a larger set of behaviors. Overlays  can be applied in a specific sequence to control which version of a given method is used. Also, overlays  do not have a binary dependency on each other or on the modules in the default library .","This system has the advantage of reducing the amount of code that needs to be rebuilt and tested to implement a change or customization, thereby reducing the overall effort and time required. Another advantage is that arbitrary customizations can be made after the product has shipped and changes can be combined arbitrarily. Also, this system has the ability to reduce the code size of the default implementation by deleting unused modules.","The disclosed techniques provide a mechanism by which a regular bytecode method's implementation can be replaced by a native implementation at runtime. By using this approach, a default implementation written in, for example Java\u2122, is always available to run on any device, so portability is preserved. However, the default implementation can be overridden with native code when available.","In one experimental embodiment, a reference implementation was developed using the Java\u2122 CLDC 1.1 Reference Implementation (RI). The Linux\u2122 version of the RI was used in this instance, but the general approach could be easily applied to other operating systems that provide APIs for dynamic library loading.","Since System.loadLibrary is not available in CLDC, an alternative API was needed for loading native code. In addition, the process of patching method tables would be quite slow if methods for all of the loaded classes had to be compared against the contents of the native library, plus there would be additional complexity if the library contained code for classes that had not yet been loaded.","Therefore, a new API was added as part of the set of system classes. The Loader class provides the developer with a mechanism to load native code for a specific Class object, thereby expediting the patching process and ensuring that the relevant Class data is already loaded into the VM. The Loader class cannot be instantiated and has a single static method:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public static int load(java.lang.String libraryPath,"},{"entry":"java.lang.Class target)"},{"entry":"throws java.io.IOException"},{"entry":"Parameters:"},{"entry":"libraryPath - Path of the library contained in the application's Jar file"},{"entry":"target - Reference to the Class for which the appropriate methods should"},{"entry":"be patched"},{"entry":"Returns:"},{"entry":"The number of methods for which a bytecode implementation was"},{"entry":"replaced with a native code implementation"},{"entry":"Throws:"},{"entry":"java.io.IOException - if the native library cannot be fully loaded"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This method loads the specified library and substitutes the corresponding Java methods in the specified class. The format of the library must be compatible with the underlying operating system. Upon loading, all dependencies are fully resolved before method patching begins.","For the reference implementation, this method was implemented as a native method in kvm\/VmCommon\/src\/nativeCore.c. and compiled as part of the VM along with the other CLDC API classes, according to the following:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"void Java_com_name_nativelib_Loader_load(void)"},{"entry":"{"},{"entry":"\u2003CLASS target = popStackAsType(CLASS);"},{"entry":"\u2003STRING_INSTANCE libNameStr ="},{"entry":"popStackAsType(STRING_INSTANCE);"},{"entry":"\u2003\/* Handle to the dynamic library once loaded *\/"},{"entry":"\u2003void* handle;"},{"entry":"\u2003\/* Attempt to load the requested library *\/"},{"entry":"\u2003if ((handle = dlopen (getStringContents(libNameStr), RTLD_NOW)) !="},{"entry":"NULL) {"},{"entry":"\u2003\u2003pushStack(patchMethods(target, dlsym, handle));"},{"entry":"\u2003} else {"},{"entry":"\u2003\u2003\/* Raise an exception with relavent dlopen error info *\/"},{"entry":"\u2003\u2003raiseExceptionWithMessage(IOException, dlerror( ));"},{"entry":"} }"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This method uses the dlopen and dlsym calls provided by the Linux\u2122 operating system to open a library and resolve symbols to a suitable function pointer. Use of the RTLD_NOW option ensures that all dependencies are resolved when the library is loaded; otherwise, dependency issues may not become apparent until after method patching has occurred, thereby leaving the application in an unusable state. In this implementation the library path is treated as an absolute file path in the Linux\u2122 file system; however, a real implementation would need to interpret the path as being relative to the contents of a specific Jar file.","If the library is successfully loaded, a handle to the library along with a suitable callback function (in this case dlsym) and a reference to the class are passed to the VM's patchMethods function.","The patchMethods function is added in kvm\/VmCommon\/src\/native.c. and is OS-agnostic but very VM-specific. The purpose of this function is to pair up methods in the class with native functions in the library and bind them together. Understandably, this function must be implemented for a specific VM since it accesses and manipulates various data structures that are closely tied to its inner workings. As the code iterates through the class's method list, it generates the corresponding KNI-style native function name for each method. The name is comprised of a Java_prefix, followed by the fully qualified class name and method name, with underscores used as the delimiting character. For example, a hypothetical native implementation for the wait method in java.lang.Object would be named \u201cJava_java_lang_Object_wait.\u201d","For each native method name, the code uses the symbolLookupFunc callback function to get a pointer to the corresponding function in the native library (which in this case is dlsym). If a null value is returned, a native implementation does not exist and the method is left unchanged. However, if a valid function pointer is obtained, the method information is updated with the function pointer and its access flags are changed to indicate it new status as a natively implemented method, according to the following:",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"short patchMethods(CLASS theClass, void* (*symbolLookupFunc)(void*, char*),"},{"entry":"void *handle) {"},{"entry":"\u2003\/* String containing the symbol name for the current method *\/"},{"entry":"\u2003char *symbolName;"},{"entry":"\u2003\/* Location in the symbol name where the method name starts *\/"},{"entry":"\u2003char *methodNameStart;"},{"entry":"\u2003\/* Pointer to the native implementation for the current method *\/"},{"entry":"\u2003void *func;"},{"entry":"\u2003char *ptr;"},{"entry":"\u2003\/* Number of methods in the class *\/"},{"entry":"\u2003short methodCount = ((INSTANCE_CLASS)theClass)>methodTable>length;"},{"entry":"\u2003\/* Pointer to the current method *\/"},{"entry":"\u2003METHOD thisMethod ="},{"entry":"((INSTANCE_CLASS)theClass)>methodTable>methods;"},{"entry":"\u2003\/* Number of methods that have been patched *\/"},{"entry":"\u2003short patchCount = 0;"},{"entry":"\u2003\/* Make sure we have at least one method *\/"},{"entry":"\u2003if (methodCount > 0) {"},{"entry":"\u2003\u2003START_TEMPORARY_ROOTS"},{"entry":"\u2003\u2003\/* Allocate space to store the symbol names *\/"},{"entry":"\u2003\u2003DECLARE_TEMPORARY_ROOT(char*, symbolName, mallocBytes(80));"},{"entry":"\u2003\u2003\/* Start the symbol name with the \u2018Java_\u2019 prefix *\/"},{"entry":"\u2003\u2003strcpy(symbolName, \u201cJava_\u201d);"},{"entry":"\u2003\u2003\/* Append the fullyqualified class name and record where the method name will"},{"entry":"start *\/"},{"entry":"\u2003\u2003methodNameStart = getClassName_inBuffer(theClass, &symbolName[5]);"},{"entry":"\u2003\u2003\/* Replace any slashes with underscores *\/"},{"entry":"\u2003\u2003ptr = strchr(&symbolName[5], \u2018\/\u2019);"},{"entry":"\u2003\u2003while (ptr != NULL) {"},{"entry":"\u2003\u2003\u2003*ptr = \u2018_\u2019;"},{"entry":"\u2003\u2003\u2003ptr = strchr(ptr + 1, \u2018\/\u2019);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/* Append an extra underscore before the method name (no need to null"},{"entry":"terminate the string since we'll be appending the method names anyway) *\/"},{"entry":"\u2003\u2003*(methodNameStart++) = \u2018_\u2019;"},{"entry":"\u2003\u2003\/* Process each of the class's methods *\/"},{"entry":"\u2003\u2003do {"},{"entry":"\u2003\u2003\u2003\/* Update the symbol name with the current method's name *\/"},{"entry":"\u2003\u2003\u2003strcpy(methodNameStart, methodName(thisMethod));"},{"entry":"\u2003\u2003\u2003\/* Try to obtain a function pointer with the symbol *\/"},{"entry":"\u2003\u2003\u2003if ((func = symbolLookupFunc(handle, symbolName)) != NIL) {"},{"entry":"\u2003\u2003\u2003\u2003\/* If found, update the method entry by setting its native function"},{"entry":"pointer and ORing its access flags with NATIVE *\/"},{"entry":"\u2003\u2003\u2003\u2003thisMethod->u.native.code = func;"},{"entry":"\u2003\u2003\u2003\u2003thisMethod->accessFlags |= ACC_NATIVE;"},{"entry":"\u2003\u2003\u2003\u2003patchCount++;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003thisMethod++;"},{"entry":"\u2003\u2003\u2003methodCount--;"},{"entry":"\u2003\u2003} while (methodCount > 0);"},{"entry":"\u2003\u2003END_TEMPORARY_ROOTS"},{"entry":"\u2003}"},{"entry":"return patchCount;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"An alternative approach would be to iterate through the native library's functions and attempt to locate a matching method in the class. However, given the organization of class data within this particular VM, this approach would require an additional lookup step: in addition to locating the method name in the constant pool, it would also be necessary to find the resulting constant index in the method table.","A simple test application was created to demonstrate the basic operation of the invention. The TestApp class performs a bubble sort on a list of 1000 random integers. Though a bubble sort is usually not the most efficient sorting algorithm, it represents a repeatable operation that is subject to some of the inherent performance constraints of Java\u2122 (e.g. array index bounds checking), and therefore provides a good example of how this technique might be used to improve execution performance.","The bubble sort algorithm is implemented using Java\u2122 in the class's bubbleSort method, as follows:",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static void bubbleSort(int[ ] a) {"]},{"entry":[{},"\u2003int 1 = a.length;"]},{"entry":[{},"\u2003int swaps;"]},{"entry":[{},"\u2003do {"]},{"entry":[{},"\u2003\u2003swaps = 0;"]},{"entry":[{},"\u2003\u2003for (int n=a.length 1; n> 1; n) {"]},{"entry":[{},"\u2003\u2003\u2003if (a[n] < a[n1]) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003int temp = a[n];"]},{"entry":[{},"\u2003\u2003\u2003\u2003a[n] = a[n1];"]},{"entry":[{},"\u2003\u2003\u2003\u2003a[n1] = temp;"]},{"entry":[{},"\u2003\u2003\u2003\u2003swaps++;"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003} while (swaps > 0);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The same sort algorithm is also implemented as a native function in mylib.c, which is compiled using gcc to emit a standard Linux shared library named libmylib.so:",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void Java_TestApp_bubbleSort(void) {"]},{"entry":[{},"\u2003ARRAY theArray = popStackAsType(ARRAY);"]},{"entry":[{},"\u2003int *firstElement = ((SHORTARRAY)theArray)>sdata;"]},{"entry":[{},"\u2003int length = theArray>length;"]},{"entry":[{},"\u2003int n;"]},{"entry":[{},"\u2003int *ptr;"]},{"entry":[{},"\u2003int temp;"]},{"entry":[{},"\u2003int swaps = 0;"]},{"entry":[{},"\u2003int totalSwaps = 0;"]},{"entry":[{},"\u2003do {"]},{"entry":[{},"\u2003\u2003ptr = firstElement + length 1;"]},{"entry":[{},"\u2003\u2003swaps = 0;"]},{"entry":[{},"\u2003\u2003for (n=length 2; n > 0; n) {"]},{"entry":[{},"\u2003\u2003\u2003if (*ptr < *(ptr)) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003temp = *ptr;"]},{"entry":[{},"\u2003\u2003\u2003\u2003*ptr = *(ptr + 1);"]},{"entry":[{},"\u2003\u2003\u2003\u2003*(ptr + 1) = temp;"]},{"entry":[{},"\u2003\u2003\u2003\u2003swaps++;"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003} while (swaps > 0);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The native function is coded slightly differently from the Java version and makes extensive use of pointers to improve performance. Seemingly subtle techniques such as these can offer significant performance improvements and demonstrate the value of native code access. The TestApp class also defines a runBenchmark method to create a clone of a pre-defined list of random numbers and sort it by calling the bubbleSort method:",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public static long runBenchmark( ) {"},{"entry":"\u2003\/* Create a copy of the unsorted list. We cannot run the benchmark"},{"entry":"\u2003* on the original list since it could not be unsorted afterward"},{"entry":"\u2003*\/"},{"entry":"\u2003int[ ] workingList = new int[LIST_SIZE];"},{"entry":"\u2003System.arraycopy(unsortedList, 0, workingList, 0, LIST_SIZE);"},{"entry":"\u2003long t = System.currentTimeMillis( );"},{"entry":"\u2003bubbleSort(workingList);"},{"entry":"\u2003return System.currentTimeMillis( ) t;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The main method first runs the benchmark, and then attempts to load the native library and run the benchmark again (note that the same bubbleSort method is being called both times, but in reality different code is being invoked), according to the following:",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public static void main(String[ ] args) {"},{"entry":"\u2003\/\/ Run the benchmark with the Java implementation of bubbleSort"},{"entry":"\u2003System.out.println(\u201cTime to sort (Java implementation) = \u201d + runBenchmark( ));"},{"entry":"\u2003\/\/ Try to replace the Java implementation of bubbleSort with a native"},{"entry":"\u2003\/\/ implementation"},{"entry":"\u2003try {"},{"entry":"\u2003\u2003\/\/ Load the libmylib.so library and use its functions to patch this class"},{"entry":"\u2003\u2003int s = Loader.load(\u201c\/mnt\/hgfs\/natlib\/libmylib. so\u201d, Class.forName(\u201cTestApp\u201d));"},{"entry":"\u2003\u2003System.out.println(\u201cPatched \u201d + s + \u201c native methods\u201d);"},{"entry":"\u2003\u2003\/\/ Rerun the benchmark with the native implementation of bubbleSort"},{"entry":"\u2003\u2003System.out.println(\u201cTime to sort (native implementation) = \u201d + runBenchmark( ));"},{"entry":"\u2003}catch (Throwable e) {"},{"entry":"\u2003\u2003e.printStackTrace( );"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"When executed, the test application produces the following results:\n\n","It should be noted that the CLDC RI is a non-optimized, interpreted VM, so such impressive results are to be expected. Nevertheless, native code still yields significant performance gains on highly optimized VM's that utilize Just-In-Time (JIT) compilers.","The above described embodiments, while including the preferred embodiment and the best mode of the invention known to the inventor at the time of filing, are given as illustrative examples only. It will be readily appreciated that many deviations may be made from the specific embodiments disclosed in this specification without departing from the spirit and scope of the invention. Accordingly, the scope of the invention is to be determined by the claims below rather than being limited to the specifically described embodiments above."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 2A-2C"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 5A-5C"}]},"DETDESC":[{},{}]}
