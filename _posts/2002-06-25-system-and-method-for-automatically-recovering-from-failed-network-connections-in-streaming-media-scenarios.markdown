---
title: System and method for automatically recovering from failed network connections in streaming media scenarios
abstract: Automatically recovering from broken network connections in streaming media scenarios. Server software executing on the server communicates with client software executing on the client during the streaming media session. If the streaming media session is interrupted, the server software and the client software exchange messages to associate the client with a client state stored by the server and to re-synchronize playback of the content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08117328&OS=08117328&RS=08117328
owner: Microsoft Corporation
number: 08117328
owner_city: Redmond
owner_country: US
publication_date: 20020625
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates to the field of streaming media. In particular, this invention relates to a system and method for automatically recovering from failed network connections in streaming media scenarios.","Content streaming includes the streaming of audio, video, and\/or text data from a network server to a client computer on an as-needed basis. The client computer renders the data as it is received from the network server. For example, audio, video, or audio\/visual coverage of noteworthy events can be broadcast with streaming multimedia over a network such as the Internet as the events unfold. Similarly, television and radio stations can transmit live content over the network as streaming multimedia.","Streaming media over diverse networks poses a variety of technical challenges. The network connection between the server and the client is often subject to adverse conditions such as congestion, packet loss, varying latencies, IGMP\/ICMP errors, rebooting routers or other networking devices, rebooting servers, inadvertent reset of TCP connections, lost modem connections, and temporarily unplugged network cables. Depending on the severity of the issue, some streaming media players encounter such adverse conditions and subsequently post a critical error to the user interface. The error is critical in that the user must manually intervene and re-establish the streaming session. Unfortunately, in the case of on-demand content, this also means the user must manually seek to the position in the content that was last being viewed, if seeking in the content is allowed, after the connection is re-established. Further, when this streaming link is disconnected, all the clients and servers that are downstream from the disrupted connection are terminated. The abnormal termination of all downstream clients can result in significant lost revenue.","For these reasons, a system for automatically recovering from a failed streaming media session is desired to address one or more of these and other disadvantages.","The invention includes a method of streaming media content from a server to at least one client. In particular, the invention includes server software executing on the server communicating with client software executing on the client. If the streaming is interrupted, the server software and the client software exchange messages to re-map a state of the client and re-synchronize playback of the content.","The invention addresses network problems experienced between the client(s) and the server. In addition, the invention addresses network problems experienced by server-to-server and encoder-to-server distribution scenarios, where the server is actually a client streaming from another source. The software of the invention allows a streaming media client player to automatically attempt to recover from a variety of connection problems with a server without user intervention. Furthermore, the invention software allows the client playing on-demand media to continue after re-connection at roughly the same point in the media program when the connection was lost. The client networking code uses the software of the invention to act upon unexpected errors that are not the direct action of an administrator. The invention includes software on both the server and the client as well as software for a protocol-specific implementation using real-time streaming protocol (RTSP) and hypertext transfer protocol (HTTP).","With the invention, servers can withstand longer network outages without terminating clients. The invention improves the end-user experience by preventing the user from having to manually recover from connectivity problems. The fault tolerant functionality improves the end user experience for streaming media by more closely mimicking other content delivery metaphors such as television, radio, video cassette recorders, digital versatile disk players, etc.","In accordance with one aspect of the invention, a method streams media content from a server to at least one client. The method includes establishing a streaming media connection between the server and the at least one client and streaming the media content from the server to the client. The method further includes receiving, by the client, the streamed media content from the server. The method includes sending a reconnect request from the client to the server if the streaming is interrupted. The method also includes receiving, by the server, the reconnect request from the client and re-establishing the streaming media connection with the client. The method includes continues with the server streaming the media content and the client receiving the streamed media content.","In accordance with another aspect of the invention, a method stream media content to at least one client. The method includes establishing a streaming media connection with at least one client and streaming the media content to the client. The method also includes receiving a reconnect request from the client if the streaming is interrupted. The method further includes re-establishing the streaming media connection with the client and continuing to stream the media content.","In accordance with yet another aspect of the invention, a method receives media content streamed from a server. The method includes establishing a streaming media connection with the server and receiving the media content streamed from the server. The method also includes transmitting a reconnect request to the server if the receiving is interrupted. The method further includes re-establishing the streaming media connection with the server and continuing to receive the streamed media content.","In accordance with yet another aspect of the invention, one or more computer-readable media having computer-executable components in a system wherein a server streams media content to at least one client. The components include a server component and at least one client component. The server component and the client component include computer-executable instructions for exchanging one or more messages to re-map the state of the client and to re-synchronize playback of the content if the streaming is interrupted.","In accordance with yet another aspect of the invention, one or more computer-readable media store a data structure representing a reconnect request transmitted by a client to a server to re-establish an interrupted streaming media session. The data structure includes a session identifier identifying the interrupted streaming media session and a stream identifier identifying a media stream streamed by the server to the client in the interrupted streaming media session.","Alternatively, the invention may comprise various other methods and apparatuses.","Other features will be in part apparent and in part pointed out hereinafter.","Corresponding reference characters indicate corresponding parts throughout the drawings.","Software of the invention provides a mechanism for automatically re-connecting a streaming server with a client if streaming is interrupted during a streaming media session as illustrated in . This invention includes software executing on both the client and one or more servers. In particular, the invention includes server software executing on the server communicating with client software executing on the client. If the streaming is interrupted, the server software and the client software exchange messages to re-map a state of the client and re-synchronize playback of the content.","Referring to , an exemplary block diagram illustrates a streaming media scenario. The invention software is operable in a system having an optional encoder , an origin server , one or more downstream servers  such as downstream server # through downstream server #N, an edge server , and one or more clients  such as client # through client #M. The origin server , the downstream servers , and the edge server  each execute a server software component  while the clients  execute a client software component . The server component  and the client component  include computer-executable instructions for exchanging one or more messages to re-map the state of the client  and to re-synchronize playback of the content if the streaming is interrupted. Separate state repositories  such as a state repository stored by the origin server , a state repository stored by the downstream servers , and a state repository stored by the edge server  store a state of the downstream server  or client . For example, the edge server  stores a state of the client . In addition, each of the downstream servers  and the origin server  store a state for downstream servers acting as clients. For example, the downstream server # stores a state of the edge server . Similarly, the origin server  stores a state of the downstream server #N.","The origin server  is the first server the content flows through on the way to the client . The origin server  generally receives content from either a file system  at  or a feed from the encoder  at . The encoder  stores the encoded content in the file system  at . If the origin server  receives content from the encoder , the file system  may be bypassed, or the encoded content may be concurrently stored in the file system  at . The downstream servers  generally receive data from the origin server . In complex distribution scenarios involving multiple levels of servers, the downstream servers  may receive and forward content from another server that is sourcing content from the origin server . Since the data flows from the origin server  to the client , a server is considered downstream from previous servers. The edge server  is generally the last server in a distribution scenario. The edge server  is downstream from all other servers in the distribution chain. The edge server  is intended to have direct client connections. For clarity and simplicity, the edge server  will be referred to herein as server , noting that the invention is operable with any configuration and\/or number of servers , , .","In addition, the edge server  maintains a state repository storing a client viewer state of each of the clients  (e.g., storing logging statistics). The clients  transmit their states to the edge server  for storage. The state of each client  is maintained for a preset time period after a network failure or other interruption in the streaming.","In one embodiment, the origin server  streams the media content from the file system . In an alternative embodiment, the encoder  also executes the server component  to stream content to the origin server  as it is encoded. In such an embodiment, the file system  may be bypassed, or the encoded content may be concurrently stored in the file system . Those skilled in the art will appreciate that the invention is not limited to the exemplary block diagram of . Instead, it is contemplated by the inventors that the software of the invention is operable in various other client-server streaming media scenarios not specifically described herein.","The clients  may render or otherwise display or process the received content via a media player user interface (UI). Clients  receiving streamed media content for long periods of time often encounter a variety of network problems that result in the server-to-client connection or session being lost. With other systems, a lost connection requires user intervention to re-establish the link. With the software of the invention, the clients  and the servers  attempt to automatically reconnect. If the server  was streaming stored content (e.g., from a computer-readable medium) prior to the session failure, the client  can resume playback at the location in the stream when the failure occurred using statistics saved prior to the failure. If the server  was streaming live content (e.g., directly from the encoder ) prior to the session failure, the client player UI may not receive and render the content that was streamed during the reconnection process. If the reconnection process occurred relatively quickly, the server  may have buffered a small amount of the live content, and will deliver that buffered content to the client  if reconnection is successful. As such, a user may experience minimal disruption in the playback.","In one embodiment, communication between the servers  and client  in  is implemented using a real-time streaming protocol (RTSP) and a session description protocol (SDP). RTSP, as described in the Internet Engineering Task Force (IETF) RFC 2326, the entire disclosure of which is incorporated herein by reference, is an application-level protocol for control of the delivery of data with real-time properties. RTSP provides an extensible framework to enable controlled, on-demand delivery of real-time data, such as audio and video. Sources of data can include both live data feeds and stored clips. This protocol is intended to control multiple data delivery sessions, provide a means for choosing delivery channels such as a user datagram protocol (UDP), a multicast UDP and a transmission control protocol, and provide a means for choosing delivery mechanisms based upon a real-time transport protocol.","For example, the Real-time Transport Protocol (RTP), as described in the IETF RFC 1889, the entire disclosure of which is incorporated herein by reference, provides end-to-end network transport functions suitable for applications transmitting real-time data, such as audio, video or simulation data, over multicast or unicast network services. RTP does not address resource reservation and does not guarantee quality-of-service for real-time services. The data transport is augmented by a control protocol (RTCP) to allow monitoring of the data delivery in a manner scalable to large multicast networks, and to provide minimal control and identification functionality. RTP and RTCP are designed to be independent of the underlying transport and network layers.","SDP, as described in the IETF RFC 2327, the entire disclosure of which is incorporated herein by reference, is an application level protocol intended for describing multimedia sessions for the purposes of session announcement, session invitation, and other forms of multimedia session initiation. SDP can be used in conjunction with RTSP to describe and negotiate properties of the multimedia session used for delivery of real-time data.","The invention software supports automatic reconnection logic ,  for various protocols such as HTTP (see ), RTSP (see ), and any proprietary protocols in the client component  and the server component . The invention software also logs the first segment of information received following a successful reconnect (e.g., as a status code of ). The invention software supports broadcast and on-demand modes of operation. The automatic reconnection logic ,  can be tuned\/disabled in the server  (e.g., to act as a distribution client) and in the client . The invention software staggers the client reconnect attempt requests over time to prevent the server  from being overwhelmed by thousands of simultaneous reconnect requests. The reconnecting client  is authenticated and authorized if corresponding security is enabled. The reconnecting client  resumes at the same point of a seekable on-demand playlist element. In one embodiment, the server  maintains a client viewer state if data has actually been streamed. This check increases the difficulty of developing a denial of service attack. A disconnection resulting from a client inactivity timeout on the server  does not result in an error immediately displayed on the client . Instead, the client  attempts to re-open the file at the beginning of the playlist once play is pressed. In one embodiment, a seek is not possible because the client viewer state on the server  for the previous connection will no longer be present. In embodiments lacking a client viewer state present on the server , seeking to the previous playlist entry element in a server-side playlist may be disabled. An error displays on the client  if the re-open attempt is unsuccessful.","In one embodiment, the invention software does not attempt to automatically reconnect when an administrator for the server  terminates a connection, when the server  denies access due to an authentication failure, when playing content from a web server, or when the server  denies access due to an authorization failure.","In operation, client  and server  computers such as computer  execute computer-executable instructions such as those illustrated in  and  to re-establish a streaming media connection between the server  and the client . The server  streams the media content to the client . The client  receives the streamed media content from the server . If the streaming is interrupted, the client  sends a reconnect request to the server . The server  receives the reconnect request from the client . The server  and the client  re-establish the streaming media connection. Re-establishing includes the server  mapping a reconnecting client  with a state maintained by the server . Alternatively, re-establishing includes creating a new session for streaming if no maintained state corresponds to the client . The server  continues streaming the media content to the client  over the re-established streaming media connection.","Client Component Software","Referring next to , an exemplary flow chart illustrates operation of client component autoreconnect software  the invention. The client component software  acts upon unexpected errors at  that are not the direct action of an administrator. The client component software  operates if the client  has successfully streamed from the server  previously at  and the error is handled by reconnect logic  at .","If thousands of clients  attempt to auto-reconnect at exactly the same time, the server  may not be able to process any of them successfully. Also, repeated reconnect attempts can tax the client's processor. Therefore, the software of the invention spreads out the timing of the auto-reconnect requests by clients . To prevent all clients  from overwhelming a streaming media server  with a flood of reconnect requests at exactly the same time, the client  employs software to sleep at  between reconnect attempts. The sleep duration involves a random component to help spread reconnect requests when multiple clients  are disconnected at the same time. The sleep software is also used to minimize the amount of client processing required to successfully reconnect. For example, if a client  continuously reconnects while waiting for a router to reboot, it could adversely affect the client processor load. By delaying the transmission of the reconnect request to the server  for a preset time period between reconnect attempts, both the client  and the server  are optimized. For example, the client software may wait for five seconds between failed reconnect attempts and increment a reconnect counter for each attempt. In one embodiment, the client  attempts to reconnect twenty-five times before halting. That is, if the reconnect counter exceeds a preset threshold at , the client software halts the reconnect attempt and logs an error at .","The number of attempts the client  retries to connect is fully configurable through a client application programming interface (API) and also a uniform resource locator (URL) modifier. A URL modifier allows a content provider or other encoder such as encoder  to control the number of reconnect attempts made by the client  so that it is appropriate for the environment. An example of the URL modifier follows.\n\n","There are several mechanisms that trigger the client  to attempt a reconnect. A network error detected from the local protocol stack or the error signal sent by the server  or prolonged no data period (e.g., a starvation timeout) will potentially trigger the reconnect logic . If the error signal sent by the server  denotes that the server  intended to disconnect the client  deliberately, the client  will not attempt to reconnect. The client  will attempt to reconnect even in a paused state in order to maintain the client viewer status active at the server . The player code fires events to update the status of the player user interface to indicate when the client  has started (and finished) reconnecting.","The client  does not attempt to automatically reconnect with the server  under various conditions such as when the client component  and\/or the server component  is disabled at . In one embodiment, the client  does not attempt to automatically reconnect with the server  when the server  is a World Wide Web Consortium server at . Under such conditions, the client  and the server  do not automatically reconnect at  and reconnect processing exits at .","In a server distribution or a cache\/proxy scenario where one server is receiving content from the origin server , the downstream server  is essentially a client such as client  in that it is streaming content from the origin server . In this scenario, the downstream server  can employ auto-reconnect software to connect back to the origin server  using software similar to the software  used by the client .","Referring next to , an exemplary block diagram illustrates the client  sending a reconnect request  to the server  to re-establish an interrupted streaming media session. In the exemplary embodiment of , the reconnect request  is a data structure including a stream identifier  and a session identifier . The session identifier identifies the interrupted streaming media session. For example, the session identifier may be a 64-bit or a 32-bit value generated by the server  and identifies the client-server relationship. The stream identifier identifies a media stream streamed by the server  to the client  in the interrupted streaming media session. For example, the stream identifier may be a 32-bit value generated by the server  to identify a particular stream in the media content.","Server Component Software","Referring next to , an exemplary flow chart illustrates operation of the server component autoreconnect software  of the invention. During the period in which the server  does not detect at  that the client  has disconnected abnormally, the server  continues streaming at  and waiting for commands from the client . If the server  detects at  that the client  has disconnected abnormally, the server  employs a variety of mechanisms to allow the client  to reconnect. These mechanisms are described below.","The client  periodically transmits state data (e.g., logging statistics) to the server  for storage. In addition, the server  tracks the status of each client viewer state and allows an administrator of server  to determine the state of any client . The state data includes a session identifier and a stream identifier corresponding to the current client-server session and the streams being delivered, respectively. The server  pauses the client state and maintains the client viewer state for a pre-determined (e.g. configurable) duration or time period at . The client viewer state may be stored or cached in the state repository, a timeout queue, or the like. Since the client viewer state consumes server resources, the server  will not maintain the state indefinitely. After determining that the configurable duration expired at , the server  removes the client viewer state at , frees the associated resources, logs an error at , and ends processing at  for the current session. For example, logging an error at  includes the server  generating a log on behalf of the client  because the reconnecting client  will not submit a log (e.g., with status code ) for content rendered before the reconnect event.","If the client  attempts to re-connect or otherwise re-establish a connection while the client viewer state is present on the server  at , the client  end-user experience is optimal. If the server  determines at  that the client  attempting to reconnect is associated with a cached client state, the server  processes at  the reconnect sequence of messages from the client .","The server  accepts logging information at  from the previous session from the clients  that re-connect. For example, a client such as client  that streams content for one hour loses its connection to the server  prior to successfully submitting logging information. Through the invention software, the client  reestablishes the connection back to the server  and submits the logging information for the previous segment in addition to continuing with the streaming process. Logging information is data that describes the characteristics of the client  and the rendering information associated with the streaming session. Logging information includes, but is not limited to, packet loss statistics and frame rate rendered. See Appendix C for an exemplary list and discussion of logging statistics.","For example, if the client viewer state is available at the server  by the time the client  recovers the connection, and if the client  is reconnecting in streaming status, the client  will submit a log with status code . Apart from the status code, the content of the log is the same as a regular log sent after playback. If the preset time period has elapsed, the server component  deletes the client viewer state. After accepting the log from the client  at , the server  resumes streaming at .","If the disconnection was the specific intention of the server  and not due to an unforeseen fault, the server  will inform the client  before disconnecting so that the client  does not try to reconnect unnecessarily. An example of this might be when an administrator for server  terminates a broadcast program normally. If the specific client viewer state was for the content which requires authentication, the server  will re-challenge the reconnecting client .","Referring next to , an exemplary flow chart illustrates the interaction between the client  and the server  during reconnection via a real-time streaming protocol. In the embodiment illustrated in , the software of the invention is implemented with RTSP. If an RTSP client such as client  is attempting to reconnect at  in streaming status, the RTSP client  sends at  multiple SETUP messages (e.g., reconnect requests  with the session identifier  and the stream identifier ) for SelectStreams to re-configure the data ports and stream parameters. If there is an RTSP proxy, some of the parameters may get reset. Attempting to re-establish the session includes the server  searching for the received session identifier in the state repository. If the received session identifier is found at  within the state repository, the server  searches at  for the received stream identifier within the state repository. If SelectStreams succeeds (e.g., the session identifier and stream identifier are found within the state repository), the server responds at  indicating that the selection was successful. In addition, the client  sends a PLAY command at  to restart streaming at . If the original viewer state could be retrieved, the client  sends a log message at  (e.g., with a status of ) to report the play status before reconnect after the PLAY command completes. The streaming resumes at  at the approximate point in the content where the disconnect or other error occurred.","If the received stream identifier is not found within the state repository, the server  transmits at  one or more other stream identifiers to the client  for selection by the client . The other stream identifiers include the stream identifiers for any content available from the server , including the streams that may have been streaming during the failed session. The client  transmits at  a playback request to the server  where the playback request specifies at least one of the other stream identifiers. The server  then streams the media content associated with the stream identifiers selected by the client .","If the server  does not have the viewer state for the requested session at  (e.g., the session identifier is not in the state repository), the server  responds with an error to indicate the session was lost. In this case, the client  attempts to re-establish the connection by submitting a DESCRIBE command at  to retrieve the most recent streaming description and then submits a SelectStream command at  and a Play command at  based on the new description. If the viewer status is available at the server  but the streaming description that the client  retrieved before being disconnected is no longer current, the server  pushes the most recent information of the requested URL by submitting Announce right after accepting Play. If an RTSP client  is reconnecting in paused status, it sends SelectStreams to re-configure data ports and stream parameters. The client  sends periodic GET_PARAMETERs for KeepAlives to keep the viewer state active until the user wants to play again. The command SelectStream may fail if the requested session on the server  was gone, in which case client  will submit DESCRIBE and retrieve the most recent streaming description. In this specific example, there will be no  log message report after reconnect. When streaming begins at , the client  has successfully reconnected. In the case of on-demand content, the streaming starts from the beginning of the content.","Referring next to , an exemplary flow chart illustrates the interaction between the client  and the server  during reconnection via a hypertext transfer protocol. The flow in  is generally similar to that described in . In the embodiment illustrated in , the software of the invention is implemented in HTTP. If an HTTP client such as client  is attempting to reconnect at  in streaming status, the client  sends one GET command at  that contains both SelectStreams and Play information along with the session identifier  and the stream identifier . The server  attempts to associate the maintained client viewer state with the client  sending the reconnect request . If the server  determines that the original viewer state on the server  still exists (i.e., the session identifier  is present on the server  at  and the stream identifier  is present on the server  at ), the server  responds to the client  indicating that the selection was successful at . Streaming begins at . The client  sends a log message at  (e.g., with a  status code) to report the play status before the reconnect event. Whether the requested viewer state is available or not, the server  does not return an error as in the RTSP implementation. If the requested viewer state is not available, the server  handles the request  based on the most recent streaming description of the requested URL. The server  includes the most recent streaming description and the viewer state information in the response so that the client  can detect the current status of the server . That is, the server  responds with new header information at . The client  submits a select stream and play command in one message at  and streaming begins at .","If the HTTP client  is reconnecting in a paused status, the client  sends OPTIONS for KeepAlives to keep the viewer state active until the user wants to play again. In this exemplary implementation, there are no log messages (e.g., with a status code of ) reported after reconnect.","If the client viewer state is in the state repository accessible by the server , the client  attempts to automatically reconnect to the same session when the connection is reestablished, as shown in the network trace listed in Appendix A.","When a client  attempts to automatically reconnect to the same session after a network outage, the session may have expired at . In this case, the client  makes a new attempt to connect, this time without including the session identifier. That is, the client  submits a DESCRIBE command at . The server  creates a new session and returns the identifier, as shown in the network trace listed in Appendix B. The client  submits a new select stream command and play command in one message at  and streaming begins at . The client  has successfully reconnected at . In the case of on-demand content, the streaming starts from the beginning of the content.","Errors Handled by Auto-Reconnect Software","Errors handled by the auto-reconnect software include, but are not limited to, the following errors. If any of the errors listed below initially occur, the reconnect software will be triggered:\n\n","If any of the errors below occur during a reconnect attempt, the reconnect software is repeated (assuming the maximum number of attempts has not been reached):\n\n","The auto-reconnect software ,  is not invoked for a variety of other errors. The list of errors or conditions that do not result in a reconnect attempt against the server  includes, but is not limited to, a publishing point limit is reached, the client  fails authentication, the title is not found, the server  or publishing point is denying new connections, the publishing point is stopped, the server  does not initially respond in time, the administrator for the server  terminates the client , the server  inactivity timeout feature disconnects the player, the reconnect software is disabled, and the server  is a World Wide Web Consortium server.","Logging During an Auto-Reconnect","Logging statistics are used by content distribution networks (CDNs) to bill customers. As a result, accurate logging statistics are critically important for the CDNs to maximize their revenue opportunities. See Appendix C for an exemplary list and discussion of logging statistics. A complete log entry (e.g., defined by the status code  or ) reflects what the client  actually rendered. There are several possible cases that may occur during the streaming of media such as described in the following examples. Those skilled in the art will note that the status codes are merely exemplary, and do not limit the logging aspects of the invention in any way.","The content may be streamed successfully without the loss of the connection between the server  and the client . In this case, the auto-reconnect software is not used and a normal log entry is written.","In another scenario, a server-client connection or a distribution connection may be temporarily lost for a short period of time, but then automatically re-established. In this case, two log entries are written. One log entry contains the information regarding the content received and played by the client  prior to the disconnect event. For example, this log entry has a status code of . The client  information for this log entry is submitted during the handshake for the reconnect request . Another log entry occurs following the successful completion of the content. This log entry includes information for the duration of the clip streamed immediately after the reconnect occurred. For example, this log entry has a normal status code of .","In another example, the server-client connection or the distribution connection may be lost and auto-reconnect software ,  is either disabled or unable to reconnect within the allotted number of attempts. This situation results in one log entry with the status code of . The entry includes information regarding the segment of content played prior to the disruption.","Distribution Outages and Client Buffering","In an alternate scenario of the invention, during a distribution outage, the clients  do not receive any streamed data. As a result, the starvation timer on the clients  may eventually fire and ultimately result in all the clients  attempting to reconnect to the server . This situation is undesirable because it greatly increases the load on the server  and lengthens the time required for the clients  to recover from the outage. To preclude this situation, software of the invention operating on the server  fakes a stream switch that places the clients  in a waiting state to prevent starvation during a distribution outage. When the distribution connection recovers, the server software  sends another stream header before streaming the content. This mechanism allows the clients  to resume playing.","Configurable Settings","In one embodiment, the server  namespace is used to configure the duration a client state is maintained on the server  after an abnormal disconnect. The following exemplary namespace parameters tune these timeout values.\n\n","Additionally, the software exposes a property (e.g., AutoReconnectLimit). A value of zero disables the auto-reconnect logic . A value of (\u22121) results in autoreconnect software attempting to reconnect forever. In addition, the client software  fires events such as WMT_RECONNECT_START and WMT_RECONNECT_END, during the reconnect process. This information is available to the higher level player application for display in the UI.","Client Options","The client software exposes an object model property (e.g., AutoReconnect). The object model property is adjustable from the default player UI. In one embodiment, the default value for this property is three. A value of zero disables the auto-reconnect software and a value of (\u22121) results in auto-reconnect software attempting to reconnect forever. In addition, the player UI processes events such as WMT_RECONNECT_START and WMT_RECONNECT_END during the reconnect process. This information is then displayed in the player UI.","Exemplary Operating Environment",{"@attributes":{"id":"p-0067","num":"0094"},"figref":"FIG. 7","b":["130","130","130","132","134","136","134","132","136"]},"The computer  typically has at least some form of computer readable media. Computer readable media, which include both volatile and nonvolatile media, removable and non-removable media, may be any available medium that can be accessed by computer . By way of example and not limitation, computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. For example, computer storage media include RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed by computer . Communication media typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal, which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media, such as a wired network or direct-wired connection, and wireless media, such as acoustic, RF, infrared, and other wireless media, are examples of communication media. Combinations of the any of the above are also included within the scope of computer readable media.","The system memory  includes computer storage media in the form of removable and\/or non-removable, volatile and\/or nonvolatile memory. In the illustrated embodiment, system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. For example,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media.  also shows a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or mites to a removable, nonvolatile optical disk  such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a non-volatile memory interface, such as interface .","The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into computer  through input devices or user interface selection devices such as a keyboard  and a pointing device  (e.g., a mouse, trackball, pen, or touch pad). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to processing unit  through a user input interface  that is coupled to system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a Universal Serial Bus (USB). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video interface . In addition to the monitor , computers often include other peripheral output devices (not shown) such as a printer and speakers, which may be connected through an output peripheral interface (not shown).","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and global computer networks (e.g., the Internet).","When used in a local area networking environment, computer  is connected to the LAN  through a network interface or adapter . When used in a wide area networking environment, computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device (not shown). By way of example, and not limitation,  illustrates remote application programs  as residing on the memory device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Generally, the data processors of computer  are programmed by means of instructions stored at different times in the various computer-readable storage media of the computer. Programs and operating systems are typically distributed, for example, on floppy disks or CD-ROMs. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. The invention described herein includes these and other various types of computer-readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.","For purposes of illustration, programs and other executable program components, such as the operating system, are illustrated herein as discrete blocks. It is recognized, however, that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Although described in connection with an exemplary computing system environment, including computer , the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover, the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","The following scenarios illustrate operation of the software of the invention.","On-Demand Content","In a server  to client  network interruption scenario, one or more clients such as clients  viewing on-demand content have their network connection interrupted. Automatic reconnect logic ,  minimizes the impact to each viewer affected by the temporary network outage. The reconnect logic ,  allows the client  to restart at the point the connection was lost by seeking to that point in the file upon successfully reconnecting to the server . If the content is not seekable, the program element shall be restarted at the beginning.","In a source to server network interruption scenario, all clients  that are streaming on-demand content obtained from another location by the edge server  will be affected. Automatic reconnect logic ,  minimizes the impact to all viewers affected by the temporary network outage. The reconnect logic ,  allows the client  to restart at the point the connection was lost by seeking to that point in the file upon successfully reconnecting to the server . If the content is not seekable, the program element shall be restarted at the beginning.","Broadcast Content","A source to server network interruption scenario is routinely encountered by large CDNs. In this scenario, all clients  that are streaming content obtained from another location by the edge server  are affected. If the source content is live, the customer may experience a gap in the program even when automatic reconnect logic ,  is successful. However, automatic reconnect logic ,  minimizes the impact to all viewers affected by the temporary network outage.","In a server  to client  network interruption scenario, one or more clients such as clients  viewing broadcast content have their network connection interrupted. Due to the nature of a broadcast, the customer experiences a gap in the program even when automatic reconnect logic ,  is successful. However, automatic reconnect logic ,  minimizes the impact to the specific viewer(s) affected by the temporary network outage.","The following examples illustrate specific embodiments of the invention.","Content Distribution Network Scenario","Some CDNs have complicated distribution scenarios involving combinations of origin and distribution servers such as server  using the Internet for some of their distribution feeds. When temporary problems on the Internet result in the distribution connection being severed, all downstream clients  that are streaming the content are disconnected. This results in the loss of thousands of clients  (and subsequent lost revenue opportunities often dependent upon on successful usage logging statistics) when a network feed is temporarily interrupted.","The automatic client reconnection software reduces the scenarios where clients  are dropped due to distribution network interruptions. For example, some platforms shall support a temporary distribution network outage of at least 90 seconds before clients  are terminated by the servers  downstream from the distribution network interruption. Furthermore, assuming the reconnection attempt is successful, the logging usage information for clients  is complete. Lost revenue due to network problems will be reduced.","Listening to an Internet Radio Station all Day","In one example, a user loves to listen to an Internet sports radio station all day at work while working on a computer. Unfortunately, the LAN is notoriously unreliable (e.g., routers are often rebooted). In addition, the firewall often times out TCP connections and resets them. The ISP is also unreliable. Network interruptions often exceed 10 seconds. As a result, the user often gets disconnected from the Internet radio station server, and an annoying dialog pops up forcing a manual reconnect. Sometimes, the user has to try a few times before reconnecting back to the Internet radio.","The automatic reconnect software of the invention addresses the problem the user is currently experiencing. The player employs software to attempt to reconnect multiple times before popping up an error dialog. A configuration option in the player allows the user to set the number of attempts. With the invention, the user is able to leave the player running indefinitely.","Movie Scenario","In another example, the user recently subscribed to a video-on-demand trial in an assisted-living apartment. The user typically watches 2-4 action movies per week with friends. When the user orders a new movie, the CDN precedes the start of the movie with trailers for other action movies that the user might be interested in. Because the CDN mixes and matches these trailers with other customers, the trailers are separate files (e.g., advanced streaming format files). The trailers and movie are tied together sequentially by using a server-side playlist dynamically generated in response to the movie order.","The user has a cable modem connection that is susceptible to occasional temporary outages. Sometimes, while watching movies, the temporary network outage causes the TCP connection to be reset or the starvation timer on the client  to fire. With the reconnect software of the invention, the user only experiences a pause in the playback of the movie. The user's player does not display an error requiring user intervention. The user does not lose the connection or the location in the server-side playlist. As such, the user does not need to search through a server-side playlist or view error messages. The user simply views the movie without noticing any of the network outages.","When introducing elements of the present invention or the embodiment(s) thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","In view of the above, it will be seen that the several objects of the invention are achieved and other advantageous results attained.","As various changes could be made in the above constructions, products, and methods without departing from the scope of the invention, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
