---
title: Command tracking for direct access block storage devices
abstract: Described embodiments provide tracking and processing of commands received by a storage device. For each received command, the storage device determines one or more requested logical block addresses (LBAs), including a starting LBA and a length of one or more LBAs of the received command. The storage device determines whether command reordering is restricted. If command reordering is not restricted, the storage device processes the received commands. Otherwise, if command reordering is restricted, the storage device conflict checks each received command. If no conflict is detected, the storage device tracks and processes the received command. Otherwise, if a conflict is detected, the storage device queues the received command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08321639&OS=08321639&RS=08321639
owner: LSI Corporation
number: 08321639
owner_city: Milpitas
owner_country: US
publication_date: 20091230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The subject matter of this application is related to U.S. patent application Ser. No. 12\/436,227 filed May 6, 2009, Ser. No. 12\/475,710 filed Jun. 1, 2009, Ser. No. 12\/475,716 filed Jun. 1, 2009, Ser. No. 12\/477,996 filed Jun. 4, 2009, Ser. No. 12\/478,013 filed Jun. 4, 2009, Ser. No. 12\/508,879 filed Jul. 24, 2009, Ser. No. 12\/508,915 filed Jul. 24, 2009, and Ser. No. 12\/643,471 filed Dec. 21, 2009, the teachings of all of which are incorporated herein in their entireties by reference. The subject matter of this application is also related to U.S. patent application Ser. No. 12\/649,490 filed Dec. 30, 2009, Ser. No. 12\/722,828 filed Mar. 12, 2010, Ser. No. 12\/730,627 filed Mar. 24, 2010, Ser. No. 12\/731,631 filed Mar. 25, 2010, Ser. No. 12\/767,985 filed filed Apr. 27, 2010, Ser. No. 12\/768,058 filed Apr. 27, 2010, Ser. No. 12\/769,882 filed Apr. 29, 2010 and Ser. No. 12\/769,910 filed Apr. 29, 2010.","1. Field of the Invention","The present invention relates to direct access block memory storage devices, and, in particular, to command tracking and conflict checking for solid state disks (SSDs).","2. Description of the Related Art","Flash memory is a type of non-volatile memory that is electrically erasable and re-programmable. Flash memory is primarily used in memory cards and USB flash drives for general storage and transfer of data between computers and other digital products. Flash memory is a specific type of electrically erasable programmable read-only memory (EEPROM) that is programmed and erased in large blocks. One commonly employed type of flash memory technology is NAND flash memory. NAND flash memory forms the core of the flash memory available today, especially for removable universal serial bus (USB) storage devices known as USB flash drives, as well as most memory cards. NAND flash memory exhibits fast erase and write times, requires small chip area per cell, and has high endurance. However, the I\/O interface of NAND flash memory does not provide full address and data bus capability and, thus, generally does not allow random access to memory locations.","There are three basic operations for NAND devices: read, write and erase. The read and write operations are performed on a page by page basis. Page sizes are generally 2bytes, where N is an integer, with typical page sizes of, for example, 2,048 bytes (2 kb), 4,096 bytes (4 kb), 8,192 bytes (8 kb) or more per page. Pages are typically arranged in blocks, and an erase operation is performed on a block by block basis. Typical block sizes are, for example, 64 or 128 pages per block. Pages must be written sequentially, usually from a low address to a high address. Lower addresses cannot be rewritten until the block is erased.","A hard disk is addressed linearly by logical block address (LBA). A hard disk write operation provides new data to be written to a given LBA. Old data is over-written by new data at the same physical LBA. NAND flash memories are accessed analogously to block devices, such as hard disks. NAND devices address memory linearly by page number. However, each page might generally be written only once since a NAND device requires that a block of data be erased before new data is written to the block. Thus, for a NAND device to write new data to a given LBA, the new data is written to an erased page that is a different physical page than the page previously used for that LBA. Therefore, NAND devices require device driver software, or a separate controller chip with firmware, to maintain a record of mappings of each LBA to the current page number where its data is stored. This record mapping is typically managed by a flash translation layer (FTL) in software that might generate a logical-to-physical translation table. The flash translation layer corresponds to the media layer of software and\/or firmware controlling an HDD.","Since an HDD or SSD might receive one or more commands such as read, write or erase operations, before a previously received command has completed, a queue might generally maintain a list of commands received while a previous command is being processed. In storage devices operating in accordance with the Small Computer System Interface (SCSI) standard, a control field, such as the SCSI Queue Algorithm Modifier (QAM) field, might be employed to indicate whether reordering of the queue of received commands is permitted. For example, the SCSI Primary Commands specification (SPC-3, Section 7.4.6, pg. 285, 2005, included by reference herein) defines the QAM field. As defined, when the QAM field has a value of zero, command reordering is restricted, and queued commands must be processed in the order in which they are received. When the QAM field has a value of one, command reordering is permitted, and the storage device may process queued commands in any order.","When commands are received, an HDD or SSD might generally perform conflict checking between the received command and any outstanding or queued commands. One solution is to track commands by adding every received command to a linked list. The linked list is searched for conflicts every time a new command is received. Although easy to implement and generally not requiring much memory space, adding every command to a linked list can require a long execution search time when the list of commands is long.","Another solution is to add received commands to a balanced binary tree, sorted by the starting LBA of the command (the search key). A binary tree is a tree data structure in which each parent node has at most two children or subtrees (left and right). Binary trees are commonly implemented with the left subtree of a node containing nodes with search keys less than the parent node's key, and the right subtree of a node containing nodes with search keys greater than the parent node's key. A balanced binary tree is a binary tree where all branches have a predictable depth that can differ by no more than one. The depth of a binary tree is equal to the integer value of log(n), where n is the number of nodes of the tree.","A balanced binary tree can require a large amount of code memory space because it is a relatively complex data structure to maintain. Further, long execution time might be required to add or remove commands from the data structure due to the complex nature of a balanced binary tree. Searches might require long execution time due to the added complexity that commands generally affect ranges of LBAs, not just the starting LBA (i.e. the search key). Therefore, there is a need for command tracking and conflict checking that is easy to implement, does not require much memory space, and provides fast execution time.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Described embodiments provide tracking and processing of commands received by a storage device. For each received command, the storage device determines one or more requested logical block addresses (LBAs), including a starting LBA and a length of one or more LBAs of the received command. The storage device determines whether command reordering is restricted. If command reordering is not restricted, the storage device processes the received commands. Otherwise, if command reordering is restricted, the storage device conflict checks each received command. If no conflict is detected, the storage device tracks and processes the received command. Otherwise, if a conflict is detected, the storage device queues the received command.","In accordance with embodiments of the present invention, tracking and conflict checking of outstanding access requests (e.g. host reads\/writes\/etc.) to a direct access block storage device such as, for example, SSDs, HDDs, or hybrid magnetic and solid state storage systems, are provided. Commands might be tracked and checked for conflicts only when command reordering is restricted, such as indicated by the SCSI Queue Algorithm Modifier (QAM) field. Embodiments of the present invention might provide separate tracking of \u201clarge\u201d versus \u201csmall\u201d commands. For example, commands accessing more than a predefined number of blocks of the storage device might be considered to be large commands and, thus, be tracked separately than smaller commands. Small commands might be tracked by individual LBAs or by LBA ranges. Exclusive and non-exclusive commands might be allowed to overlap in an LBA range when not affecting the same LBA. A command that is queued for access to one LBA might be allowed to continue for one or more other LBAs that do not have access conflicts. Thus, as will be described herein, embodiments of the present invention might generally provide increased performance of a storage system by providing fast, efficient checks for command conflicts.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","100","102","100","104","114","118","102","100","102"]},"Media controller  controls transfer of data between flash media  and an external device coupled to communication link . Media controller  might be implemented as a system-on-chip (SoC). Media controller  might include internal RAM buffer  and might also be coupled to additional external memory, shown as external RAM buffer . In an exemplary embodiment, internal RAM buffer  comprises 128 kB of static RAM (SRAM) and external RAM buffer  comprises 512 MB of double data rate version 2 dynamic RAM (DDR2 DRAM). RAM buffer  might act as a cache for processor , while RAM buffer  might act as a read\/write buffer between flash media  and communication link . Processor  includes software and\/or firmware as needed for operation, including for tracking and conflict checking of outstanding access requests in accordance with exemplary embodiments of the present invention, as described subsequently. Although shown in  as a single processor, processor  might be implemented with multiple processors. For embodiments having multiple processors, inter-processor communication might be employed, such as described in related U.S. patent application Ser. No. 12\/436,227.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 2"],"b":["116","104","202","102","104","202","102","208","208","118","100","208","210","210","202","118","102","114","112","208","118","212","212","118","208","208","118","202","210","208"]},"For example, media controller  receives one or more requests for flash media access, such as read or write operations, from one or more external devices via communication link . Such requests for access to flash media  generally include at least one logical block address (LBA) where data should be read or written. For example, the requests might be to read from or write to a i) single flash address, ii) a group of contiguous flash addresses, or iii) a group of non-contiguous flash addresses. Received requests are processed by host layer . Host layer  i) controls host interface-specific commands (e.g. SAS commands), ii) coordinates host-side data transfers and command execution, and iii) processes any other host commands (e.g. status updates). Host layer  is in communication with buffer layer . FTL  translates the LBA into a physical address of the desired data. FTL  also interfaces with buffer layer . Since data transfers between communication link  and flash media  are temporally stored in buffer memory, buffer layer  generally directs the data traffic between host layer  and FTL . For example, if an external host (not shown) provides, via communication link , data to be written to flash media , buffer layer  might coordinate temporary storage of the data in buffer  until FTL  coordinates writing the data to flash media . Similarly, if the external host requests to read data from flash media , buffer layer  might temporarily store the data in buffer  until host layer  coordinates sending the data to the host via communication link .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3","b":["118","212","118","304","1","304","212","306","1","306","212","302","1","302","304","1","304","304","1","304","304","1","304"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 4","FIG. 2","FIG. 2","FIG. 4"],"b":["402","410","412","414","208","118","208","402","404","404","102","404"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 5","FIG. 1","FIG. 5","FIG. 5"],"b":["500","210","100","500","118","118","210","202","502","504","210","118"],"sup":"N "},"At step , buffer layer  allocates buffer space for one or more chunks in the current segment of the read operation for which data is to be read. Buffer layer  might allocate buffer space for the entire read and transfers all of the chunks from flash media . At step , buffer layer  requests data from FTL , corresponding to at least a portion of the data requested by the read request received at step , to be transferred from flash media . At step , FTL  provides the chunk data to buffer layer  and, at step , buffer layer  temporarily stores the data in buffer . At step , buffer layer  requests that host layer  retrieve the chunk data stored in buffer  at step . At step , host layer  transfers the chunk data to communication link . At step , buffer layer  deallocates the space in buffer  that was allocated in step  for the current group of one or more chunks. At step , if there are more chunks to transfer, processing returns to step  for buffer layer  to allocate buffer space for the next group of one or more chunks to be processed. If there are no more chunks to be transferred, processing continues to step , where the read operation ends.","As will be described in greater detail with regard to ,  and , embodiments of the present invention might perform host-side operations, for example steps  and  of , for a first group of one or more chunks, and media-side operations, for example steps - of , for a subsequent group of one or more chunks, in parallel. For example, by segmenting the read operation into chunks, a first set of chunks might be transferred between FTL  and buffer layer  (step ), and host layer  might then transfer the first set of chunks to communication link  (step ). Concurrently with one or more of the host-side operations for the first set of chunks, a second set of chunks for the same read operation might be transferred from FTL  to buffer layer  (step ), and so on, until all chunks for the read operation are transferred. Thus, embodiments of the present invention provide the ability to perform host side and media side transfers in parallel.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 6","FIG. 1","FIG. 6","FIG. 6","FIG. 6","FIG. 2"],"b":["210","100","600","118","118","602","202","102","604","210","606","210","608","210","202","610","202","210","612","210","114"]},"At step , buffer layer  provides data for the one or more chunks to FTL . At step , FTL  writes one or more pages of the chunk data to flash media . At step , buffer layer  deallocates the space in buffer  allocated at step  for the current chunks. At step , if there are additional chunks having data to be written, processing returns to step . If there are no additional chunks to be written, at step , the write operation is ended. As described above with regard to the read operation of , and as will be described in greater detail with regard to ,  and , embodiments of the present invention might perform host-side operations, for example steps - of , for a first group of one or more chunks, and media-side operations, for example steps  and  of , for a subsequent group of one or more chunks, in parallel.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 7","FIG. 1","FIG. 2","FIG. 7","FIG. 7","FIG. 8"],"b":["702","702","102","118","702","118","102","210","702","210","702","704","1","704","4","702","704","1","704","4","706","1","706","4","702"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 8","FIG. 2","FIG. 1","FIG. 1","FIG. 2"],"b":["800","800","210","112","114","800","1","810","2","812","800","104","210","3","800","1","810","2","812","704","1","704","4"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 9","FIG. 1"],"b":["800","902","1","704","1","1","810","1","903","904","1","704","1","2","906","1","704","1","904","1","704","1","118","904","905","2","704","2","2","812","904","1","810","3","704","3","908","3","909","908","905","907","2","704","2","118"]},"In some embodiments of the present invention, a physical buffer (e.g. buffer  and buffer ) is reused within virtual circular buffer  as soon as the buffered data is transferred to its destination (for example, flash media  in the example of ). This minimizes the effect of large data transfers on the buffer space available in buffers  and  for other operations of media controller . Alternatively, media controller  might be configured to replace the physical buffers of virtual circular buffer  with alternate physical buffers in between handling of chunks for a large data transfer. This might allow buffer layer  flexibility in configuring and allocating buffer space such as, for example, selectably increasing or decreasing the number of physical buffers for a virtual circular buffer, as described with regard to .","Embodiments of the present invention provide multiple virtual circular buffers (e.g. virtual circular buffer  of ) operating simultaneously to support parallel processing of multiple large data transfers. For example, referring back to , buffer layer  employing N virtual circular buffers allows processing of multiple large data transfers in parallel because data is transferred in parallel between the N virtual circular buffers and the N flash dies ()-(N). Further, the number of virtual circular buffers in operation might be selectable by buffer layer . For example, if media controller  is under a heavy workload for large data transfers, buffer layer  might allocate an additional virtual circular buffer to provide parallel processing of the large data transfers. Virtual circular buffers are useful for skip-read and skip-write operations, such as described in related U.S. patent application Ser. No. 12\/508,915.","Embodiments of the present invention provide tracking and conflict checking of outstanding access requests (e.g. host reads\/writes\/etc.) to a storage device (e.g. flash media ). As described herein, commands are received by media controller  from one or more host devices in communication with communication link . In general, a queue of received commands is maintained. Received commands generally include a starting logical block address (LBA) and a range of LBAs for the command. In general, a write command might require exclusive access to the LBAs affected by the command. Read commands might request exclusive access to the LBAs affected by the command, or might request non-exclusive access to the LBAs affected by the command. When read commands are non-exclusive, one or more read commands might simultaneously access a given LBA.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 10","b":["1000","104","1002","104","102","1004"]},"At step , if the SCSI QAM field is set such that command reordering is permitted, the received command is actively processed at step . Embodiments of the present invention do not track potential command conflicts when command reordering is permitted. Step  might process active commands substantially similarly as described with regard to  for read commands, and  for write commands. When all received commands have been processed at step , command processing routine  ends at step .","At step , since command reordering is allowed and command tracking is not necessary, the received command will be completed as soon as possible. In general, embodiments of the present invention might maintain a list of all active commands. When command reordering is permitted, all active commands proceed toward completion as quickly as possible without regard to the order in which the commands were received. For example, as described herein, one or more commands might be processed in parallel. For example, as described with regard to , portions of one or more commands might be completed in parallel where one or more flash dies are employed in parallel. As described with regard to , host-side and media-side operations for one or more commands might be processed in parallel. Further, the chunks of data described with regard to  could be interleaved chunks corresponding to one or more commands. Alternatively, two or more small commands might be combined into one larger command.","If, at step , the SCSI QAM field is set such that command reordering is restricted, command tracking and conflict checking process  is performed. Command tracking and conflict checking process  is described with regard to . Once command tracking and conflict checking is complete, active commands are processed at step . Step  might be performed in substantially the same manner as step , with the exception that one or more commands might be queued due to a conflict with a prior command. When an active command is completed, command completion process  is performed. Command completion process  is described with regard to . When a received command has been completed, command processing routine  ends at step .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 10","FIG. 13"],"b":["1000","1010","1012","1008","1012","210"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 11","FIG. 10","FIG. 12","FIG. 11","FIG. 13","FIG. 10","FIGS. 14 and 15","FIG. 11"],"b":["1008","1114","1012"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 14","b":["1","2","1402","1404","1402","1404","1402","1402","1","1402","128","1402","1","1402","128","1402","1404","1404","1","1404","128","1404","1","1404","128","1404","1402","1404","104","116","1402","1404"]},"Embodiments of the present invention might employ one or more command tracking segments such as shown in  to track conflicts for \u201csmall\u201d commands. A \u201csmall\u201d command might be any command that requests access to less than a predetermined number of LBAs, for example, 128 or fewer LBAs. A \u201csmall\u201d command can have up to two command tracking segments, depending on the alignment of the starting LBA within the first command tracking segment (e.g. ), since in embodiments of the present invention the maximum number of blocks for a \u201csmall\u201d command matches the size of the command tracking segments.","In embodiments of the present invention, the total number of command tracking segments available might be selected to support the maximum queue depth of media controller . The queue depth is the maximum number of active commands allowed at one time in media controller . Thus, embodiments of the present invention having a queue depth of 32 might generally employ 64 total tracking segments, to support a worst case where all 32 active operations are small operations that span 2 tracking segments each, and no two commands are tracked by the same segment. Embodiments of the present invention might alternatively employ fewer tracking segments and queue commands that cannot be allocated a tracking segment.","In general, write commands require exclusive access to an LBA, while read commands do not necessarily require exclusive access. Non-exclusive locks allow multiple read commands to access the same LBA. Embodiments of the present invention might generally employ one or more command tracking segments such as shown in  to track \u201csmall\u201d commands requiring exclusive locks to the LBAs affected by the command. For example, any of bit fields ()-() and ()-() of command tracking segments  and , respectively, that are equal to 1, might indicate that the corresponding LBA is locked by an active exclusive access command. Any of bit fields ()-() and ()-() set to 0 might indicate that no active exclusive access command exists for that LBA.","In embodiments of the present invention, tracking segments, such as  and , might be managed in a hash table sorted by starting LBA of each tracking segment. As described in greater detail with regard to , when a command is received, the one or more tracking segments in the hash table might be checked for conflicts between the received command and prior commands. If no conflict is detected, the affected bit fields ()-() and ()-() of command tracking segments  and , respectively, are updated and the received command is processed. As will be described in greater detail in regard to , if a conflict is detected, the received command might be added to a queue. The conflict check for a \u201csmall\u201d command can be performed quickly for a given LBA range because the tracking segments can be easily located via the hash table based on the starting LBA. Although all LBAs of media  can tracked using tracking segment objects, in embodiments of the present invention only a limited number are tracked at one time, which allows the tracking of \u201csmall\u201d commands to make efficient use of memory space.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 14","FIGS. 11 and 12","FIG. 14"],"b":["1402","1404","1","2","1","1402","1402","2","1402","3","1","1404","1404","6","1404","125","1404","128","1402","1404","1","1402","123","1402","128","1404","1","1404","3","1402","1404","2","2","1402","123","1402","128","1404","1","1404","3","1","2"]},"Although not shown in , a non-exclusive lock counter might be employed to track \u201csmall\u201d commands requiring non-exclusive locks to the LBAs affected by the command. In some embodiments of the present invention, the non-exclusive lock counter might track non-exclusive commands for the overall range of the respective tracking segment, rather than for each individual LBA. In such an embodiment, a command requiring an exclusive lock cannot access an LBA in the range of the tracking segment until the non-exclusive lock counter is equal to 0 (i.e. no other commands are active in the LBA range). In other embodiments of the present invention, each LBA included in a tracking segment might have a corresponding non-exclusive lock counter, which allows one or more exclusive locks and one or more non-exclusive locks to occur in the LBA range covered by the tracking segment, so long as an exclusive lock does not overlap with any other commands. As will be described in greater detail in regard to , commands that encounter a conflict are queued.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 15","FIG. 15","FIG. 15"],"b":["1500","1500","1500","1504","1","1504","104","1504","1","1504","1502","1506","1500","1500","1504","1","1504"]},"Embodiments of the present invention might employ a general command queue (GCQ) to queue, if necessary, received commands. The GCQ might generally have a structure similar to the linked list shown in , however, the GCQ maintains the order of received commands. In embodiments of the present invention, the GCQ is a first-in, first-out (FIFO) queue. The GCQ might generally serve as a list of all queued commands for media controller . As will be described in greater detail with regard to , commands stored in the GCQ are processed in the order they are received.","Embodiments of the present invention might also maintain a segment command queue (SCQ) corresponding to each tracking segment. The SCQ might be implemented substantially similarly as the GCQ, but might support fewer entries. The SCQ might generally be employed to queue \u201csmall\u201d commands separately from \u201clarge\u201d commands and \u201csmall\u201d commands that would require the re-allocation of tracking segments for use with new ranges of LBAs. Further, the SCQ allows for one or more commands to be queued in only one segment, while still being actively processed in other segments. Thus, the efficiency of processing \u201csmall\u201d commands might be increased.","Referring back to , an exemplary embodiment of command tracking and conflict checking process  of  is shown. Command tracking and conflict checking process  starts at step . At step , the general command queue (GCQ) is checked. At step , if the GCQ is not empty (i.e. one or more commands are in the queue) and no conflict tracking data objects are available to track the current command, processing continues to step . At step , the current command is added to a command queue. Queuing operation  is described in greater detail with regard to . Once queuing operation  is complete for the received command, at step , processing returns to step  to process active commands. As described with regard to , processing of queued commands occurs as conflicting prior commands are completed. At step , if the GCQ is empty and conflict tracking data objects are available for use with the current command, processing continues to step . At steps  and , the command tracking data objects are checked for conflicts between previously received commands and the current command.","At step , the hash table of \u201csmall\u201d command tracking segments is searched for conflicts between the received command and any prior \u201csmall\u201d commands. As described herein, a received command generally includes a starting LBA and a length of the command. Based on the starting LBA and length, the hash table of \u201csmall\u201d command tracking segments can be searched to determine if a tracking segment, such as shown in , has been allocated for any LBAs affected by the received command. If a tracking segment has been allocated for one or more of the LBAs affected by the received command, the segment command queue (SCQ) corresponding to the tracking segment is checked. If prior commands are queued for the LBAs of the tracking segment, the received command is added to the tail end of the SCQ. Otherwise, if no commands are queued for the LBAs of the tracking segment, the bit fields of the affected LBAs are checked for conflicts between the received command and any prior exclusive commands. For write operations, the non-exclusive lock counter corresponding to the affected LBAs is also checked to determine whether conflict exists. In embodiments of the present invention, for read operations, the non-exclusive lock counter might not be checked. Alternatively, the non-exclusive lock counter might be checked to determine whether a maximum number of allowed non-exclusive commands has been exceeded.","At step , the \u201clarge\u201d command lists are searched for conflicts between the received command and any prior \u201clarge\u201d commands. As shown in , the \u201clarge\u201d command lists include the starting LBA and length of each active \u201clarge\u201d command. Thus, the \u201clarge\u201d command lists can be searched for entries affecting the requested LBAs of the received command. As described herein, a first \u201clarge\u201d command list might include exclusive commands, and a second \u201clarge\u201d command list might include non-exclusive commands. A conflict might exist if an exclusive command overlaps with the affected LBAs of the received command, or if any operation overlaps with the LBAs of the received command when the received command requires an exclusive lock. A conflict might also exist if there is not an available entry to track the received command, for example if there is not an available tracking entry in appropriate one of the exclusive and non-exclusive \u201clarge\u201d command lists (i.e. the number of allowed exclusive or non-exclusive commands has reached a maximum).","At step , if a received command encounters a conflict in at least one of steps  and , processing proceeds to step , where the received command is queued until the conflict(s) are resolved. Step  is described in greater detail with regard to . After the received command is queued at step , at step  processing returns to step  to process active commands in media controller , which does not include the received command because it is queued due to a conflict. The processing for the queued received command is ceased until one or more conflicting commands are completed. If, at step , no conflict was detected in steps  and , then the received command can be actively processed.","At step , if the received command is a \u201csmall\u201d command, processing continues to step . If tracking segment(s) do not already exist for the LBAs affected by the received command, at step  one or two tracking segments, as needed, are allocated for the LBAs. At step , if the received command requires an exclusive lock on the affected LBAs, processing continues to step  where the bit fields in the tracking segments are set to indicate that an exclusive command is active for the corresponding LBAs. If, at step , the received command does not require an exclusive lock, processing continues to step  where the non-exclusive lock counter is incremented for the LBAs affected by the received command. After the appropriate tracking data is updated at one of steps  and  corresponding to the received command, processing continues to step , where the process returns to step  to process the active commands, which now includes the received command.","At step , if the received command is a \u201clarge\u201d command, processing continues to step . At step , if the received command requires an exclusive lock, then at step  an entry is allocated in the exclusive \u201clarge\u201d command list to correspond to the received command. At step , the allocated entry is updated to include the starting LBA and length of the received command. If, at step , the received command does not require an exclusive lock, then at step  an entry is allocated in the non-exclusive \u201clarge\u201d command list to correspond to the received command. At step , the allocated entry is updated to include the starting LBA and length of the received command. After the allocated entry is updated in either step  or step , processing continues to step , where the process returns to step  to process the active commands, which now includes the received command.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 12","FIG. 11","FIG. 11","FIG. 12","FIG. 14","FIG. 15"],"b":["1114","1114","1106","1112","1202","1114","1204","1208","1206","1208","1208","1214","1214","1216","1116","1208","1210"]},"At step , a test determines whether the received \u201csmall\u201d command is blocked in only one tracking segment or in the maximum of two tracking segments. If the received command is only blocked in one tracking segment, at step , the received command is added to the segment command queue (SCQ) for that segment. In a first instance, if the received command only affects LBAs in one tracking segment, then at step , the entire command is queued, for example in the SCQ for that segment. In a second instance, if the received command affects LBAs across more than one tracking segment, the received command is only queued for the LBAs in the blocked tracking segment. After the blocked segment is queued, at step , processing returns to step . If, at step , the received command is blocked across both tracking segments, the received \u201csmall\u201d command is added to the tail end of the GCQ at step .","If, at step , there are no tracking objects available to be allocated to the received command, or the GCQ was not empty, then at step  the received command is added to the tail end of the general command queue (GCQ). At step , the process returns to step  of . As described in greater detail with regard to , commands are processed from the GCQ in the order they are received. When a command is completed, the next command in the GCQ is retrieved and checked for conflicts, until all commands on the GCQ have been completed.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 13","b":["1012","10","1012","1302","1012","1304","1306","1322"]},"At step , the entry for a completed \u201clarge\u201d command is removed from the corresponding \u201clarge\u201d command tracking list. At step , if the GCQ is empty, processing continues to step , where the process returns to step  of . If the GCQ is not empty, at step , the head entry of the GCQ is retrieved, but the ordering of the GCQ is not changed. At step , command conflict checking operation  (shown in ) is performed for the retrieved command, and the ordering of the GCQ is maintained. At step , if the retrieved command did not have a conflict, the entry for the command is removed from the head of the GCQ at step , and at step  the command is actively processed at step . Once the command is added to the actively processing commands, the process returns to step . At step , if the retrieved command does have a conflict, at step  the retrieved command is placed (or retains its place) at the head end of the GCQ. Thus, as shown in , once a command is completed, steps - perform a loop that processes commands queued on the GCQ until either i) a conflict is encountered at step , or ii) the GCQ is empty at step .","At step , if the completed command was a \u201csmall\u201d command, processing continues to step . At step , the tracking segment(s) of the completed command are checked. At step , if the segment command queue (SCQ) corresponding to the tracking segment is empty, processing continues to step . If the SCQ is not empty, processing continues to step . For \u201csmall\u201d commands the affected LBAs across two tracking segments, step  might be performed twice for one completed command, once for each tracking segment.","If, at step , the SCQ for the corresponding segment is not empty, at step  the head entry of the SCQ is retrieved. At step , command conflict checking operation  (shown in ) is performed. If, at step , no conflict is detected, at step , the entry for the command is removed from the head of the SCQ. At step  the retrieved \u201csmall\u201d command is actively processed at step , and the process returns to step  to check the next entry of the SCQ. If, at step , a conflict is detected, at step  the command is returned to the head end of the SCQ, and the process continues to step  to determine if a command queued on the GCQ can be processed. Similarly as steps - perform a loop for processing any commands queued on the GCQ, steps , ,  and  perform a loop that processes \u201csmall\u201d commands queued on an SCQ until either i) a conflict is encountered at step , or ii) the SCQ for the corresponding segment(s) are empty at step .","If, at step  the SCQ for the corresponding segment is empty, at step , buffer layer  checks whether there are any other active commands being tracked in the segment. If there are no other active commands for the segment, at step  the tracking segment is deallocated and is available for use in processing other commands. If there are other active commands, step  is bypassed since the tracking segment is still in use and cannot yet be deallocated. Processing then continues to step  to determine if a command queued on the GCQ can be processed.","As described herein, embodiments of the present invention provide command tracking and conflict checking where i) commands are tracked differently based on the command size, ii) \u201csmall\u201d commands might be queued in one segment while actively processing in other segments, iii) \u201csmall\u201d commands are tracked using bit fields and counters that are arranged in a hash table sorted by starting LBA of each tracking segment, iv) \u201clarge\u201d commands are tracked using linked lists having entries including the starting LBA and length of each \u201clarge\u201d command, v) exclusive and non-exclusive commands are tracked separately, and vi) the command conflict tracking overhead is bypassed when command reordering is not restricted.","Reference herein to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments necessarily mutually exclusive of other embodiments. The same applies to the term \u201cimplementation.\u201d","While the exemplary embodiments of the present invention have been described with respect to processing blocks in a software program, including possible implementation as a digital signal processor, micro-controller, or general purpose computer, the present invention is not so limited. As would be apparent to one skilled in the art, various functions of software may also be implemented as processes of circuits. Such circuits may be employed in, for example, a single integrated circuit, a multi-chip module, a single card, or a multi-card circuit pack.","The present invention can be embodied in the form of methods and apparatuses for practicing those methods. The present invention can also be embodied in the form of program code embodied in tangible media, such as magnetic recording media, optical recording media, solid state memory, floppy diskettes, CD-ROMs, hard drives, or any other non-transitory machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. The present invention can also be embodied in the form of program code, for example, whether stored in a non-transitory machine-readable storage medium, loaded into and\/or executed by a machine, or transmitted over some transmission medium or carrier, such as over electrical wiring or cabling, through fiber optics, or via electromagnetic radiation, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code segments combine with the processor to provide a unique device that operates analogously to specific logic circuits. The present invention can also be embodied in the form of a bitstream or other sequence of signal values electrically or optically transmitted through a medium, stored magnetic-field variations in a magnetic recording medium, etc., generated using a method and\/or an apparatus of the present invention.","It should be understood that the steps of the exemplary methods set forth herein are not necessarily required to be performed in the order described, and the order of the steps of such methods should be understood to be merely exemplary. Likewise, additional steps may be included in such methods, and certain steps may be omitted or combined, in methods consistent with various embodiments of the present invention.","As used herein in reference to an element and a standard, the term \u201ccompatible\u201d means that the element communicates with other elements in a manner wholly or partially specified by the standard, and would be recognized by other elements as sufficiently capable of communicating with the other elements in the manner specified by the standard. The compatible element does not need to operate internally in a manner specified by the standard.","Also for purposes of this description, the terms \u201ccouple,\u201d \u201ccoupling,\u201d \u201ccoupled,\u201d \u201cconnect,\u201d \u201cconnecting,\u201d or \u201cconnected\u201d refer to any manner known in the art or later developed in which energy is allowed to be transferred between two or more elements, and the interposition of one or more additional elements is contemplated, although not required. Conversely, the terms \u201cdirectly coupled,\u201d \u201cdirectly connected,\u201d etc., imply the absence of such additional elements. Signals and corresponding nodes or ports may be referred to by the same name and are interchangeable for purposes here.","It will be further understood that various changes in the details, materials, and arrangements of the parts which have been described and illustrated in order to explain the nature of this invention may be made by those skilled in the art without departing from the scope of the invention as expressed in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other aspects, features, and advantages of the present invention will become more fully apparent from the following detailed description, the appended claims, and the accompanying drawings in which like reference numerals identify similar or identical elements.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 13","FIG. 10"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 14","FIG. 12"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 15","FIG. 12"]}]},"DETDESC":[{},{}]}
