---
title: Programmable graphics processing engine
abstract: A fully programmable graphics processing engine is provided. The graphics processing engine includes three independent, programmable processors that run independent sets of instructions from independent instruction storage facilities. Graphics processing tasks may be distributed among the serially pipelined processors to allow for load balancing and parallel processing. The graphics processing engine may be a graphics co-processing core within a larger, general purpose computing system. Register files and storage units may be addressable by the system host processor. Each processor accepts incoming data for state or context updates. Each processor may execute a specific graphics processing function by executing a set of instructions when a predetermined memory address is accessed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07388588&OS=07388588&RS=07388588
owner: International Business Machines Corporation
number: 07388588
owner_city: Armonk
owner_country: US
publication_date: 20040909
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Technical Field","The present invention relates to data processing and, in particular, to three-dimensional graphics processing. Still more particularly, the present invention provides a fully programmable three-dimensional graphics engine.","2. Description of Related Art","Three dimensional (3-D) graphics is the creation, display, and manipulation of objects in a computer in three dimensions. 3-D graphics programs allow objects to be represented with width, height, and depth. As 3-D entities, objects may be moved, scaled, rotated and viewed from all angles. 3-D graphics may also allow lighting, texture mapping, and shading to be applied automatically in the rendering stage. 3-D graphics may be implemented using hardware or software or a combination of both.","A graphics accelerator is a high-performance display adapter that provides graphics functions in hardware. When functions are executed on the graphics adapter, the host processor is relieved of much of the processing to render the images on screen. Many display adapters include some acceleration. For 3-D graphics, the operations may include texture mapping, Gouraud shading, and the like.","Many current graphics accelerators use fixed function macros that implement the various graphics vertex and pixel processing tasks in non-programmable, specific logic. Other solutions use both programmable elements and fixed function elements whereby some graphics tasks are implemented in programmable processors while others are relegated to non-programmable, specific hardware logic macros. Currently, the programmable solutions are limited by instruction set size, memory constraints, and the capability of increasing the working set of data elements beyond the size of the intial input data set.","One drawback to the fixed function approach is a lack of flexibility. Fixed function solutions, which can achieve high performance, fail to accommodate new requirements as the graphics Application Programming Interfaces (APIs) evolve. Thus, there is a desire for programmability within the 3-D graphics pipeline, as seen with the industry trend toward \u201cvertex shaders\u201d and \u201cpixel shaders,\u201d existing across the spectrum of graphics offerings available today. These systems must often be redesigned to incorporate new graphics features.","Generally, 3-D graphics accelerators include specific hardware that is costly, consume a large amount of power, and generate a great deal of heat. On the other hand, software acceleration typically places too much of the processing burden on the host processor using compute cycles otherwise reserved for the host application and ultimately not achieving rendering performance typical to hardware graphics accelerators.","The present invention recognizes the disadvantages of the prior art and provides a fully programmable graphics processing engine. In one preferred embodiment, the graphics processing engine of the present invention includes three independent, programmable processors that run independent sets of instructions from independent instruction storage facilities. Graphics processing tasks may be distributed among the serially pipelined processors to allow for load balancing and parallel processing. The graphics processing engine may be a graphics co-processing core within a larger, general purpose computing system. Register files and storage units may be addressable by the system host processor. Each processor accepts incoming data for state or context updates. Each processor may execute a specific graphics processing function by executing a set of instructions when a pre-determined memory address is accessed.","The present invention provides a programmable three-dimensional graphics engine. The three-dimensional graphics processing engine may be implemented in a stand-alone computing device to perform various aspects of the present invention. Therefore, the following  is provided as an exemplary diagram of a data processing environment in which the present invention may be implemented. It should be appreciated that  is only exemplary and is not intended to assert or imply any limitation with regard to the environment in which the present invention may be implemented. Many modifications to the depicted environment may be made without departing from the spirit and scope of the present invention.","With reference now to the figures and in particular with reference to , a pictorial representation of a data processing system in which the present invention may be implemented is depicted in accordance with a preferred embodiment of the present invention. The data processing system shown in  may include a system on chip (SoC) architecture in which the main components of the data processing system are embodied on a single chip, SoC . While a SoC architecture is shown in the depicted example, other data processing system architectures may be used within the scope of the present invention.","In the depicted example, the data processing system employs a bus architecture including processor bus  and peripheral bus  connected by bus bridge . Central processing unit , memory controller , graphics accelerator , and peripheral component interface (PCI)  are connected to processor bus . Floating point unit (FPU)  is connected to CPU . Memory controller  connects to on-chip system memory . Graphics accelerator  connects to liquid crystal display (LCD) controller , which may be embodied off the chip . LCD controller  provides control for LCD display . PCI interface  connects to a PCI bus off chip.","Universal serial bus (USB) interface , universal asynchronous receiver transmitter (UART) interface , and read-only memory (ROM) controller  are connected to peripheral bus . USB interface  connects to a USB port off chip. Similarly, UART interface  connects to a UART port off SoC . ROM controller  connects to ROM , which is off chip.","An operating system runs on processor  and is used to coordinate and provide control of various components within the data processing system in . The operating system may be a commercially available operating system such as Windows XP\u2122, which is available from Microsoft Corporation, Linux\u2122, or Palm OS\u00ae. An object oriented programming system, such as the Java\u2122 programming system, may run in conjunction with the operating system and provides calls to the operating system from Java\u2122 programs or applications executing on the data processing system. \u201cJAVA\u201d is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as ROM , and may be loaded into system memory  for execution by processor .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash memory, equivalent non-volatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the present invention may be applied to a data processing system that is embodied as multiple components connected to a motherboard.","The depicted example in  and above-described examples are not meant to imply architectural limitations. For example, the data processing system may be a personal digital assistant (PDA), which is configured with flash memory to provide non-volatile memory for storing operating system files and\/or user-generated data. In another example, the data processing system also may be a desktop computer, a tablet computer, laptop computer, or telephone device in addition to taking the form of a PDA. More specifically, the data processing system may be a cellular telephone, for example, and a digital signal processor (DSP) may be connected to processor bus .","In accordance with a preferred embodiment of the present invention, graphics accelerator  is a fully programmable 3-D graphics processing engine. Graphics accelerator  may include three independent, programmable processors, running independent programs from independent instruction storage utilities. Each processor may include register files and storage units that are addressable by system CPU . Each processor may accept incoming data consisting of state, context, and 3D data updates. A predetermined memory address may be defined for each graphics processing function for each processor. When a predetermined address is accessed, a processor may execute an associated set of instructions from local instruction storage. If an address does not refer to local register file and does not correspond to a an instruction in local instruction storage, the address and any associated data are passed to the next processor in the pipeline. Thus, the 3-D graphics processing engine of the present invention provides a level of flexibility while still allowing the graphics accelerator to perform specific graphics processing functions.","Referring to , a graphics core architecture, such as graphics accelerator  in , is depicted in accordance with a preferred embodiment of the present invention. The graphics core architecture includes three independent, programmable processors that run independent sets of instructions from independent instruction storage facilities. First, with reference to , bus interface unit (BIU) logic  connects to a processor bus, such as processor bus  in . BIU first-in\/first-out (FIFO) buffer  stores data and addresses received from the processor bus.","A first geometry processor, G0 , includes G0 decoder , G0 instruction storage , G0 arithmetic logic unit (ALU) , and G0 FIFO . Decoder  decodes addresses and determines whether a received address refers to local registers, storage, or instructions. Instruction storage  stores sets of instructions for graphics processing functions for the G0 geometry processor . Decoder  may pass a program counter, addresses, and write data to instruction storage . Decoder  may receive instructions from instruction storage  if an address from the system processor corresponds to a set of instructions for a graphics processing function in instruction storage .","ALU  performs arithmetic functions for geometric processor G0 . Decoder  passes write indices, read indices, and control information to ALU . Decoder  also passes data to ALU  for processing. ALU  returns condition data to decoder  and sends data to G0 FIFO . In addition, decoder  may pass addresses and data to FIFO  so that addresses and data may be passed down the pipeline to other processors.","Turning to , a second geometry processor, G1 , includes G1 decoder , G1 instruction storage , G1 ALU , and G1 FIFO . Decoder  decodes addresses and determines whether a received address refers to local register file or local instruction store. Instruction storage  stores sets of instructions for graphics processing functions for the G1 geometry processor . Decoder  may pass a program counter, addresses, and write data to instruction storage . Decoder  may receive instructions from instruction storage  if an address from the system processor corresponds to a set of instructions for a graphics processing function in instruction storage .","ALU  performs arithmetic functions for geometric processor G1 . Decoder  passes write indices, read indices, and control information to ALU . Decoder  also passes data to ALU  for processing. ALU  returns condition data to decoder  and sends data to G1 FIFO . In addition, decoder  may pass addresses and data to FIFO  so that addresses and data may be passed down the pipeline to another processor.","With reference now to , a rasterization processor, R , includes R decoder , R instruction storage , and R ALU . Decoder  decodes addresses and determines whether a received address refers to local register file or local instruction store. Instruction storage  stores sets of instructions for graphics processing functions for the R rasterization processor. Decoder  may pass a program counter, addresses, and write data to instruction storage . Decoder  may receive instructions from instruction storage  if an address from the system processor corresponds to a set of instructions for a graphics processing function in instruction storage .","ALU  performs arithmetic functions for rasterization processor R. Decoder  passes write indices, read indices, and control information to ALU . Decoder  also passes data to ALU  for processing. ALU  returns condition data to decoder  and sends color write data, alpha write data, and Z write data to frame buffer , which will be described in further detail below. In addition, decoder  may pass addresses and data to frame buffer  to provide display information from any of the processors to a display controller (not shown).","Frame buffer  includes a first color storage buffer , a second color storage buffer , alpha storage buffer , Z storage buffer , and texture storage buffer . Buffers ,  store pixel data for every pixel within the display area. While the pixels in R color 0 buffer , for example, are being rendered on the display, the graphics processor may begin processing pixels for the next frame of the display and store these pixels in R color 1 buffer . Then, when the next frame is rendered from buffer , the processor may begin processing pixels for the next frame of the display and store these pixels in buffer , and so on. Using two color storage buffers is not necessary, but provides a more consistent transition between frames, which ensures a smoother video image.","Alpha storage buffer  is used for transparency effects when blending an incoming pixel color with what is already present in the frame buffer. For example, an alpha value of 1.0 may indicate complete opacity, while a value of 0.0 may indicate complete transparency. A value in between may result in a blending of the two colors. Also, alpha values may be used in a test to mask out certain pixels while accepting others\u2014a fragment-level filtering function. This may be accomplished with a mask of 1.0 and 0.0 values, although an arbitrary value may serve as a reference and then each incoming fragment's alpha may be compared to the reference to determine whether to accept or reject the fragment.","Z storage buffer  stores information for objects in a third dimension. That is, if the display space of a two-dimensional display device represents the X and Y dimensions, then the Z dimension is represented in Z storage buffer . An object or fragment may then be displayed in front of or behind another object based on the Z values stored in buffer . The Z coordinate generally represents the distance a vertex is from the viewer's position. Texture storage buffer  stores texels, which are elements of texture images that may be superimposed or modulated onto objects in the 3-D processor. For example, a wall may be represented on the display as a flat object or may have a texture, like stone, wallpaper, or brick. The texels that make up the texture are stored in buffer .","Geometric processors ,  may be, for example, floating-point processors that include complex instructions, such as dot product and inverse square root. Rasterization processor  may be, for example, a fixed-point processor that includes complex instructions, such as a reciprocal function. In the context of low power graphics processing, rasterization processor  is preferably a fixed-point processor, due to constraints on chip size and power, as typically required by low power devices. However, all of processors , ,  allow for the accuracy and computing power that is necessary for 3-D graphics processing.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIGS. 3A and 3B","FIG. 3A"],"b":["302","304","310","312","314","312","314","304","310"]},"Turning now to , an example configuration for a data\/arithmetic processor, such as one of processors -, is shown. The data\/arithmetic processor includes register file, G_RF , addition unit , multiplication unit , and compare unit . Addition unit  can perform addition and subtraction functions and multiplication unit  can perform multiplication functions. Compare unit  can perform comparison functions, such as greater than, less than, and equal to functions.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIGS. 4A-1","FIGS. 4A-1"],"b":["4","4","3","402","404","410","412","434","404","434"]},"Turning now to  and B-, an example configuration for a data\/arithmetic processor, such as one of processors -, is shown. The data\/arithmetic processor includes register file, R_RF , multiplication unit , addition unit , compare unit , and reciprocal unit . Addition unit  can perform addition and subtraction functions and multiplication unit  can perform multiplication functions. Compare unit  can perform comparison functions, such as greater than, less than, and equal to functions. Reciprocal unit  can perform a multiplicative inverse function that determines, for a value X, a number that, when multiplied by X, yields one.","With reference now to , an example configuration for a data\/arithmetic processor, such as one of processors -, is shown. The data\/arithmetic processor includes register file, R_RF , and addition unit . Addition unit  can perform addition and subtraction functions.","The examples shown in , A, B, and A-C are exemplary. Modifications may be made to the illustrated examples within the spirit and scope of the present invention. For example, in the depicted examples, the two geometry processors are floating-point processors, while the rasterization processor is a fixed-point processor. However, other combinations of processor types and architectures may be used. For example, the graphics processor may include three floating-point processors depending upon the implementation.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5","b":["502","504","502","510","502","510","510","510","520"]},"Geometric processor  has instruction storage . At initialization, CPU , under control of system software , stores sets of instructions for graphics processing functions in instruction storage . Geometric processor  has one or more predetermined addresses that activates processing from instruction storage  such that a subsequent access to one of the predetermined addresses serves as an indicator for the processor to begin executing the graphics processing function, by executing the set of instructions from instruction storage . Upon completion of the graphics processing function, geometric processor  encounters a wait instruction from instruction storage , which indicates that the processor can begin processing graphics context and state updates from system processor .","Similarly, if the address references registers or local storage in geometric processor , then geometric processor  updates state or context data. Otherwise, if the address does not reference registers or local storage in geometric processor , then geometric processor passes the address and data to rasterization processor . In addition, geometric processor  has instruction storage  that may store sets of instructions for graphics processing functions in instruction storage . Geometric processor  has one or more predetermined addresses activates processing from instruction storage  such that a subsequent access to one of the predetermined addresses serves as an indicator for the processor to begin executing the graphics processing function, by executing the set of instructions from instruction storage .","Rasterization processor  may update state or context data in local registers and\/or storage. In addition, rasterization processor  has instruction storage  that may store sets of instructions for graphics processing functions. Rasterization processor  has one or more predetermined addresses that activates processing from instruction storage  such that a subsequent access to one of the predetermined addresses serves as an indicator for the processor to begin executing the graphics processing function, by executing the set of instructions from instruction storage .","Rasterization processor  passes data to frame buffer  for presentation on a display, such as LCD  in . Display data may be passed through the pipeline from geometric processor  or geometric processor , or may be generated by rasterization processor . Display controller  reads display data for presentation from display buffer .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":"602"},"If an exit condition does not exist in block , a determination is made as to whether an address and data are received (block ). If an address and data are received, the processor decodes the address (block ) and a determination is made as to whether the address is a predetermined address corresponding to a set of instructions in local instruction storage (block ). If the address is a predetermined address, the processor runs instructions from the processor instruction storage (block ). Thereafter, a determination is made as to whether a wait instruction is encountered (block ). If a wait instruction is not encountered, operation returns to block  to run instructions from the processor's local instruction storage; otherwise, operation returns to block  to determine whether an exit condition exists.","Returning to block , if the address is not a predetermined address, a determination is made as to whether the address references local registers or storage (block ). If the address does not reference local registers or storage, the processor sends the data and address to the next processor in the pipeline (block ). If the processor is the last processor in the pipeline, such as rasterization processor  in , the data is sent to the frame buffer. Then, operation returns to block  to determine whether an exit condition exists. If the address does reference local registers or storage in block , the processor performs a state or context update (block ). Thereafter, operation returns to block  to determine whether an exit condition exists.","Thus, the present invention solves the disadvantages of the prior art by providing a fully programmable graphics processing engine. The three-dimensional graphics processing engine provides flexibility. The graphics processing engine also incorporates a frame buffer, which provides higher performance and lower power compared to an off-core frame buffer, which involves shared, higher loaded busses with more arbitration and latency. Additionally, the graphics processing engine also has complex instructions, such as dot product, inverse square root, and reciprocal, which can be used to accelerate particularly computationally intensive, frequently used operations in the geometry and pixel processing pipelines. In doing so, the processing engine is able to achieve some of the performance advantages of fixed-function hardware while retaining the programmability of general-purpose hardware. This approach allows for higher performance for its size and power consumption than a fixed-function solution would yield.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 2A-2C"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 4A-1","b":"4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
