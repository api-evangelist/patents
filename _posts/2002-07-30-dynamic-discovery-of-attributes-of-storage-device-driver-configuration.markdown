---
title: Dynamic discovery of attributes of storage device driver configuration
abstract: A method, computer program product and system that enables dynamic determination of device attributes and dynamic configuration of device drivers for storage devices in a heterogeneous storage environment. Attributes of a device are dynamically determined by an application program, and those attributes are used by the application program to configure the device driver. The application program and the storage device being configured remain operational during the reconfiguration process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07711677&OS=07711677&RS=07711677
owner: Symantec Operating Corporation
number: 07711677
owner_city: Mountain View
owner_country: US
publication_date: 20020730
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["Portions of this patent application contain materials that are subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document, or the patent disclosure, as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever.","As businesses increasingly rely on computers for their daily operations, managing the vast amount of business information generated and processed has become a significant challenge. Most large businesses have a wide variety of application programs managing large volumes of data stored on many different types of storage devices across various types of networks and operating system platforms. These storage devices can include tapes, disks, optical disks, and other types of storage devices and often include a variety of products produced by many different vendors. Each product typically is incompatible with the products of other vendors. Because of these complexities in managing a heterogeneous storage environment, specialized storage management applications have been developed to assist network and information administrators in managing storage resources.","Storage devices have become increasingly sophisticated, providing such capabilities as allowing input and output to be scheduled through multiple paths to a given disk within a disk array. Such disk arrays are referred to herein as multi-path arrays. Often, vendors of storage devices provide their own application programming interfaces (APIs) and\/or command line utilities for using the specialized features of their own storage devices, but these APIs and command line utilities are not compatible from vendor to vendor. Implementing the ability to use these features in application programs, such as storage management applications, is complicated by the fact that detailed attribute information from the storage device is needed. For example, to make use of a multi-path disk array, the type of the disk array is needed. This attribute information is typically not available to an application program, because it is not used by, and therefore not available from, the underlying operating system.","Typically, the storage devices available to a host computer system are determined at boot time by the operating system. Determining that a new device has been added or providing a modified driver for a storage device requires rebooting the host computer system or using an operating system command line utility. These operating system operations typically require shutting down application programs running on the host system, including storage management applications, thereby disrupting business operations. With today's 24\u00d77 operating environments, such shutdowns can be very costly. The ability to make configuration changes to storage environments dynamically while application programs are running is needed.","For example, to add a new type of storage device to a storage environment, a vendor of a storage management application often must modify an existing version of the storage management application code, as well as add a new storage device driver or modify an existing storage device driver. The new storage device is tested by storage management application vendor personnel and incorporated into a later release of the storage management application.","This process for making new storage devices available has proven costly for vendors of storage management applications, as support for each new storage device requires a new release, a costly and time-consuming project. Furthermore, the release process has proven untimely for the vendors of storage devices, as support for their products depends upon the release schedules for storage management applications in which their products are used, slowing time to market for storage devices.","What is needed is the ability to dynamically add or modify support for a storage device in a storage management application.","The present invention relates to a method, system, application programming interface, and computer program product that enable dynamic determination of device attributes and dynamic configuration of device drivers for storage devices in a heterogeneous (e.g., multi-vendor) storage environment. Attributes of a device are dynamically determined by an application program, and those attributes are used by the application program to configure the device driver. The application program and the storage device being configured remain operational during the configuration process.","In one feature, a method includes defining a first command of an application programming interface definition, wherein the first command dynamically discovers an attribute of a storage device. The method can further include defining a second command to determine a device support library that claims the storage device.","In another feature of the invention, a system includes discovering means for dynamically discovering an attribute of a storage device. The system can further include configuring means for dynamically configuring a driver for the storage device using the attribute.","In another feature of the invention, a computer program product includes discovering instructions to dynamically discover an attribute of a storage device and a computer-readable medium to store the discovering instructions.","In another feature of the invention, a system includes a dynamic discovery component to dynamically discover an attribute of a storage device, and a dynamic configuration component to dynamically configure a driver for the storage device using the attribute. The system can further include an application programming interface definition comprising a command to enable an application to determine a device support library that the application can call to configure the driver.","In another feature of the invention, an application programming interface definition includes a first definition for a command to dynamically discover an attribute of a storage device. The application programming interface definition can further include a second definition for a command to determine a device support library that claims the storage device.","The use of the same reference symbols in different drawings indicates similar or identical items.","For a thorough understanding of the subject invention, refer to the following Detailed Description, including the appended Claims, in connection with the above-described Drawings. Although the present invention is described in connection with several embodiments, the invention is not intended to be limited to the specific forms set forth herein. On the contrary, it is intended to cover such alternatives, modifications, and equivalents as can be reasonably included within the scope of the invention as defined by the appended Claims.","In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent, however, to one skilled in the art that the invention can be practiced without these specific details.","References in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover, various features are described which may be exhibited by some embodiments and not by others. Similarly, various requirements are described which may be requirements for some embodiments but not other embodiments.","Introduction","The present invention provides a method, system, computer program product, and application programming interface definition for discovering storage device attributes and dynamically configuring a device driver for the storage device.","The present invention is explained herein in terms of providing support for multi-path disk arrays, although the invention is also useful for supporting disk arrays that have only a single path. Multi-path disk arrays are used to illustrate the usefulness of the invention, although one of skill in the art will recognize that the invention is not limited to support for multi-path disk arrays. In contrast, the invention can be used for any type of storage device for which the operating system cannot provide information about the detailed attributes needed to dynamically configure a device driver to use the storage device.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","100","110","120","130","140","150","110","100","140","140","160","110","140","140","140","150","160","140","150"]},"Dynamic discovery layer  is a service provided to a configuration daemon  of storage management application . Configuration daemon  corresponds to a process responsible for discovering the attributes of storage devices, such as multi-path attributes of disks and disk arrays. Configuration daemon  also discovers enclosure information, if available, from the disk arrays. The enclosure attribute can be used by storage management application  to determine an appropriate storage device in which to store data and\/or metadata.","In one embodiment, dynamic discovery layer  uses SCSI commands to discover attributes of different disk arrays. Since the procedure to discover different attributes is different for different types of storage devices, dynamic discovery layer  uses a set of device support libraries . Each device support library in set of device support libraries  is a storage device-specific dynamically loadable library.","Dynamic discovery layer  gathers attributes of the storage devices connected to a host through device support libraries, such as device support library A, and configures a driver  for a storage device, such as storage device , so that storage management application  can access and use the device. Configuration of driver  enables features, such as multiple paths, within corresponding device  to be used for input and output.","Dynamic discovery layer  enables device support layers, such as device support library A, to be added or removed from a running storage management application, such as storage management application . Support for a particular type of storage device may be added (or removed) dynamically from storage management application  without stopping storage management application  or rebooting the host system. If a disk array contains active volumes, the disk volumes remain available during and after the addition or removal of the support. No change to the code for storage management application  is needed to add or remove support for a type of storage device.","In one embodiment, dynamic discovery layer  supports both Active\/Active (A\/A) arrays that support simultaneous inputs and outputs on the paths and Active\/Passive (A\/P) arrays that allow inputs and outputs on the primary (active) path. The secondary (passive) path is used upon failure of the primary path.","Examples of attributes to support a multi-path disk array are provided below:\n\n","The above set of attributes applies for disk arrays generally. For A\/P arrays, an example of an additional attributes includes the following:\n\n","Actions . through . of  are described below.","Referring to , a flowchart is shown of the actions taken upon startup of a host computer system in storage environment , such as the host (not shown) for storage management application . Upon host startup, represented by Host Startup step , a storage management application, such as storage management application , can be started, as shown in Start Storage Management Application step . In Load Device Support Libraries step , dynamic discovery layer  loads each device support library, such as device support library A, in set of device support libraries , so that the storage management application can access all supported types of storage devices. In Perform Device Discovery to Obtain Attributes step , attributes for each supported device are determined. Perform Device Discovery to Obtain Attributes step  is described in further detail with reference to .",{"@attributes":{"id":"p-0038","num":"0043"},"figref":["FIG. 3","FIG. 2","FIG. 1"],"b":["100","310","230","240","320","150","140"]},{"@attributes":{"id":"p-0039","num":"0044"},"figref":"FIG. 4","b":["410","420","130","120","134","130","134","120"]},"After all device support libraries are checked, control proceeds to Corresponding DSL Exists decision point . If a device support library claims the device, control proceeds to Obtain Attributes step , where the attributes are obtained from the device support library and provided to, for example, dynamic discovery layer  for use by storage management application . For example, a call to vendor_info API A of device support library A returns attribute information, such as the information needed to find different input\/output paths for a given disk in a disk array. Vendor_info API A also returns information specific to the disk array, such as LUN ownership information for an A\/P array. In one embodiment, obtain_vendor_info API A returns name\/value pairs to enable a variable set of disk attributes to be returned.","From Obtain Attributes step , control proceeds to More Devices decision point , which is described in further detail below.","If no device support library is found in Corresponding DSL Exists decision point  (in the example above, no device support library has returned a value of \u201cclaimed\u201d), control proceeds to Device has Feature decision point . Device has Feature decision point  represents the contingency that a particular storage device visible to a host may not possess the feature for which dynamic attribute discovery is needed. For example, a particular disk array may not support multiple paths to a storage device and would not need a corresponding dynamic support library. If at Device has Feature decision point , the visible device does not have the feature, control returns to More Devices decision point  to determine whether additional devices are visible to the host system.","If at Device has Feature decision point , the visible device has the feature, no corresponding device support library has been found and the device can be assigned to a default category in Assign to Default Category step . For example, in one embodiment, if no device support library can be found to claim a particular disk array, the disk array can be assigned to a JBOD (\u201cjust a bunch of disks\u201d) category. This categorization is made when more than one path can be found to the disk array. In such a situation, a particular disk array may have a unique disk serial number that can be obtained using SCSI commands, such as the inquiry command or the mode_sense command. A default device support library may be established to support JBOD devices, or an alternative set of default attributes may be assumed.","After Assign to Default Category step , control transitions to More Devices decision point , where a determination is made whether additional storage devices are visible to the host system. If so, control transitions back to Select Visible Device step , where another visible device is selected. If not, device discovery is completed for the particular host of interest.","Returning to , actions . through . illustrate the operation of the components of storage environment  in obtaining storage device attributes and configuring a device driver for the storage device dynamically. In action ., storage management application  requests dynamic configuration of a given storage device, in this example, storage device . In action ., the request is passed to dynamic discovery layer .","In action ., dynamic discovery layer  requests default device attributes of the given storage device from set of device support libraries . A device support library within set  is queried in action . to determine the corresponding device support library for the given device, here storage device . For example, as described above, a corresponding vendor_info API, such as vendor_info API A of device support library A, may be used to query each device support library. When the corresponding device support library is determined, the corresponding vendor_info API is used to obtain the default device attributes applicable to storage devices of the type of the given storage device .","In action ., vendor_info API A provides the default device attributes back to dynamic discovery layer . Using the default device attributes, a specific device support library supporting device  is determined in action .. In action ., the specific device support library is queried using claim_device API A to determine specific attributes applicable to the given storage device . In action ., the specific attributes are provided to dynamic discovery layer . In action ., configuration daemon  uses the device attributes to dynamically configure a driver, such as driver , for the storage device. Configuration of driver  may include adding information to, or updating, dynamic multi-pathing facility .","In one embodiment, an administrative utility is provided for adding, removing or listing the types of storage devices supported. The administrative utility supports dynamic reconfiguration of array libraries for participating in device discovery.","In one embodiment, some attributes may be set by both the vendor_info and the claim_device functions. When both the functions try to set the same attribute, claim_device( ) takes priority. Vendor_info( ) may set the default attributes of the disks belonging to the array, while claim_device( ) may dynamically change these depending on how the array is configured. For example, consider a library which handles a series of similar disk arrays, some of which are A\/P and some A\/A. The function vendor_info( ) may set the default attributes of such arrays to be A\/P, while claim_device( ) may dynamically discover that the array is configured as A\/A type and set the ATYPE attribute accordingly. Dynamic discovery layer  manages the array as an A\/A array. A similar array may still be found as of the default type, and the claim_device( ) may not pass ATYPE attribute back to dynamic discovery layer . Such an array will be treated as A\/P array by dynamic discovery layer .","In a particular embodiment, storage management application  allows operating system-independent naming of disks. The name is generated from an array specific string and an instance number of the array. The string prefix may be supplied by the corresponding dynamic support library through the attribute ANAME.","In one embodiment, a special attribute NR_DEVICE is used to force dynamic discovery layer  to invoke claim_device( ) before issuing any SCSI command on the device. This attribute is useful for the arrays where the normal SCSI command (generally accompanied by test-unit-ready command) is not advisable for all devices within an array.","In an embodiment, a TPD_CONTROLLED attribute is set to indicate that the disk array is controlled by third party driver. If such a driver suppresses the multiple paths to the device, then a TPD_SUPPRESSED attribute also is set.","Operations discussed herein may consist of (or be initiated by) directly entered commands by a computer system user or by steps executed by application specific hardware modules, but the preferred embodiment includes steps executed by software modules. The functionality of steps referred to herein may correspond to the functionality of modules or portions of modules.","The operations referred to herein may be implemented as modules or portions of modules (e.g., software, firmware or hardware modules). For example, although the described embodiment includes software modules and\/or includes manually entered user commands, the various example modules may be application specific hardware modules. The software modules discussed herein may include script, batch or other executable files, or combinations and\/or portions of such files. The software modules may include a computer program or subroutines thereof encoded on computer-readable media.","Additionally, those skilled in the art will recognize that the boundaries between modules are merely illustrative and alternative embodiments may merge modules or impose an alternative decomposition of functionality of modules. For example, the modules discussed herein may be decomposed into submodules to be executed as multiple computer processes, and, optionally, on multiple computers. Moreover, alternative embodiments may combine multiple instances of a particular module or submodule. Furthermore, those skilled in the art will recognize that the operations described in example embodiment are for illustration only. Operations may be combined or the functionality of the operations may be distributed in additional operations in accordance with the invention.","Alternatively, such actions may be embodied in the structure of circuitry that implements such functionality, such as the micro-code of a complex instruction set computer (CISC), firmware programmed into programmable or erasable\/programmable devices, the configuration of a field-programmable gate array (FPGA), the design of a gate array or full-custom application-specific integrated circuit (ASIC), or the like.","Each of the actions described herein may be executed by a module (e.g., a software module) or a portion of a module or a computer system user using, for example, a computer system such as the storage router previously mentioned, or a similar network element. Thus, the above described method, the operations thereof and modules thereof may be executed on a computer system configured to execute the operations of the method and\/or may be executed from computer-readable media. The method may be embodied in a machine-readable and\/or computer-readable medium for configuring a computer system to execute the method. Thus, the software modules may be stored within and\/or transmitted to a computer system memory to configure the computer system to perform the functions of the module.","Such a computer system normally processes information according to a program (a list of internally stored instructions such as a particular application program and\/or an operating system) and produces resultant output information via I\/O devices. A computer process typically includes an executing (running) program or portion of a program, current program values and state information, and the resources used by the operating system to manage the execution of the process. A parent process may spawn other, child processes to help perform the overall functionality of the parent process. Because the parent process specifically spawns the child processes to perform a portion of the overall functionality of the parent process, the functions performed by child processes (and grandchild processes, etc.) may sometimes be described as being performed by the parent process.","Such a computer system typically includes multiple computer processes executing \u201cconcurrently.\u201d Often, a computer system includes a single processing unit which is capable of supporting many active processes alternately. Although multiple processes may appear to be executing concurrently, at any given point in time only one process is actually executed by the single processing unit. By rapidly changing the process executing, a computer system gives the appearance of concurrent process execution. The ability of a computer system to multiplex the computer system's resources among multiple processes in various stages of execution is called multitasking. Systems with multiple processing units, which by definition can support true concurrent processing, are called multiprocessing systems. Active processes are often referred to as executing concurrently when such processes are executed in a multitasking and\/or a multiprocessing environment.","The software modules described herein may be received by such a computer system, for example, from computer readable media. The computer readable media may be permanently, removably or remotely coupled to the computer system. The computer readable media may non-exclusively include, for example, any number of the following computer readable storage media: magnetic storage media including disk and tape storage media, optical storage media such as compact disk media (e.g., CD-ROM, CD-R, etc.) and digital video disk storage media, nonvolatile memory storage memory including semiconductor-based memory units such as FLASH memory, EEPROM, EPROM, ROM or application specific integrated circuits, volatile storage media including registers, buffers or caches, main memory, RAM, etc. In a UNIX-based embodiment, the software modules may be embodied in a file which may be a device, a terminal, a local or remote file, a socket, a network connection, a signal, or other expedient of communication or state change. Other new and various types of computer-readable storage media may be used to store the software modules discussed herein. An example of such a computer system is computer system  of  described below.","An Example Computing and Network Environment",{"@attributes":{"id":"p-0061","num":"0066"},"figref":"FIG. 5","b":["510","510","512","510","514","516","518","520","522","524","526","528","530","532","533","534","536","538","540","542","546","512","528","547","512","530","548","512"]},"Bus  allows data communication between central processor  and system memory , which may include both read only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded and typically affords at least 66 megabytes of memory space. The ROM or flash memory may contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system  are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk ), an optical drive (e.g., CD-ROM drive ), floppy disk unit  or other storage medium. Additionally, applications may be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem  or interface .","Storage interface , as with the other storage interfaces of computer system , may connect to a standard computer readable medium for storage and\/or retrieval of information, such as a fixed disk drive . Fixed disk drive  may be a part of computer system  or may be separate and accessed through other interface systems. Modem  may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface  may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface  may provide such connection using wireless techniques, including digital cellular telephone connection, Cellular Digital Packet Data (CDPD) connection, digital satellite data connection or the like.","Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., bar code readers, document scanners, digital cameras and so on). Conversely, it is not necessary for all of the devices shown in  to be present to practice the present invention. The devices and subsystems may be interconnected in different ways from that shown in . The operation of a computer system such as that shown in  is readily known in the art and is not discussed in detail in this application. Code to implement the present invention may be stored in computer-readable storage media such as one or more of system memory , fixed disk , CD-ROM , or floppy disk . Additionally, computer system  may be any kind of computing device, and so includes personal data assistants (PDAs), network appliance, X-window terminal or other such computing device. The operating system provided on computer system  may be MS-DOS\u00ae, MS-WINDOWS\u00ae, OS\/2\u00ae, UNIX\u00ae, Linux\u00ae or other known operating system. Computer system  also supports a number of Internet access tools, including, for example, an HTTP-compliant web browser having a JavaScript interpreter, such as Netscape Navigator\u00ae 8.0, Microsoft Explorer\u00ae 8.0 and the like.","Moreover, regarding the signals described herein, those skilled in the art will recognize that a signal may be directly transmitted from a first block to a second block, or a signal may be modified (e.g., amplified, attenuated, delayed, latched, buffered, inverted, filtered or otherwise modified) between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next, other embodiments of the present invention may include modified signals in place of such directly transmitted signals as long as the informational and\/or functional aspect of the signal is transmitted between blocks. To some extent, a signal input at a second block may be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved (e.g., there will inevitably be some attenuation and delay). Therefore, as used herein, a second signal derived from a first signal includes the first signal or any modifications to the first signal, whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and\/or final functional aspect of the first signal.","The foregoing described embodiment wherein the different components are contained within different other components (e.g., the various elements shown as components of computer system ). It is to be understood that such depicted architectures are merely examples, and that in fact many other architectures can be implemented which achieve the same functionality. In an abstract, but still definite sense, any arrangement of components to achieve the same functionality is effectively \u201cassociated\u201d such that the desired functionality is achieved. Hence, any two components herein combined to achieve a particular functionality can be seen as \u201cassociated with\u201d each other such that the desired functionality is achieved, irrespective of architectures or intermediate components. Likewise, any two components so associated can also be viewed as being \u201coperably connected\u201d, or \u201coperably coupled\u201d, to each other to achieve the desired functionality.",{"@attributes":{"id":"p-0067","num":"0072"},"figref":"FIG. 6","b":["600","610","620","630","640","510","650","640","660","1","640","670","670","680","1","640","610","620","630","650"]},"With reference to computer system , modem , network interface  or some other method can be used to provide connectivity from computer system  to network . Client systems ,  and  are able to access information on storage server  using, for example, a web browser or other client software (not shown). Such a client allows client systems ,  and  to access data hosted by storage server  or one of storage devices ()-(N) or ()-(N).  depicts the use of a network such as the Internet for exchanging data, but the present invention is not limited to the Internet or any particular network-based environment.","While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims.","The present invention is well adapted to attain the advantages mentioned as well as others inherent therein. While the present invention has been depicted, described, and is defined by reference to particular embodiments of the invention, such references do not imply a limitation on the invention, and no such limitation is to be inferred. The invention is capable of considerable modification, alteration, and equivalents in form and function, as will occur to those ordinarily skilled in the pertinent arts. The depicted and described embodiments are examples only, and are not exhaustive of the scope of the invention.","The foregoing described embodiments include components contained within other components. It is to be understood that such architectures are merely examples, and that in fact many other architectures can be implemented which achieve the same functionality. In an abstract but still definite sense, any arrangement of components to achieve the same functionality is effectively \u201cassociated\u201d such that the desired functionality is achieved. Hence, any two components herein combined to achieve a particular functionality can be seen as \u201cassociated with\u201d each other such that the desired functionality is achieved, irrespective of architectures or intermediate components. Likewise, any two components so associated can also be viewed as being \u201coperably connected,\u201d or \u201coperably coupled,\u201d to each other to achieve the desired functionality.","The foregoing detailed description has set forth various embodiments of the present invention via the use of block diagrams, flowcharts, and examples. It will be understood by those within the art that each block diagram component, flowchart step, operation and\/or component illustrated by the use of examples can be implemented, individually and\/or collectively, by a wide range of hardware, software, firmware, or any combination thereof.","The present invention has been described in the context of fully functional computer systems; however, those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of signal bearing media include recordable media such as floppy disks and CD-ROM, transmission type media such as digital and analog communications links, as well as media storage and distribution systems developed in the future.","The above-discussed embodiments may be implemented by software modules that perform certain tasks. The software modules discussed herein may include script, batch, or other executable files. The software modules may be stored on a machine-readable or computer-readable storage medium such as a disk drive. Storage devices used for storing software modules in accordance with an embodiment of the invention may be magnetic floppy disks, hard disks, or optical discs such as CD-ROMs or CD-Rs, for example. A storage device used for storing firmware or hardware modules in accordance with an embodiment of the invention may also include a semiconductor-based memory, which may be permanently, removably or remotely coupled to a microprocessor\/memory system. Thus, the modules may be stored within a computer system memory to configure the computer system to perform the functions of the module. Other new and various types of computer-readable storage media may be used to store the modules discussed herein.","The above description is intended to be illustrative of the invention and should not be taken to be limiting. Other embodiments within the scope of the present invention are possible. Those skilled in the art will readily implement the steps necessary to provide the structures and the methods disclosed herein, and will understand that the process parameters and sequence of steps are given by way of example only and can be varied to achieve the desired structure as well as modifications that are within the scope of the invention. Variations and modifications of the embodiments disclosed herein can be made based on the description set forth herein, without departing from the scope of the invention.","Consequently, the invention is intended to be limited only by the scope of the appended claims, giving full cognizance to equivalents in all respects."],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Other Embodiments"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
