---
title: Virtual printer with asynchronous job and device status
abstract: A flexible and extensible virtual printer architecture is provided. According to one aspect of the present invention final status associated with a presentation job (e.g., a fax job or a print job) is made available to an output server. One or more host processing threads or processes are spawned for each new presentation job received by the output server. Then, the presentation job is submitted to a presentation device for which the presentation job is destined by way of an instance of a wrapper process that is capable of communicating bi-directionally with the presentation device. After submitting the presentation job, a host job status thread or process waits for status pertaining to the presentation job. Ultimately, a final status associated with the presentation job is received by the wrapper process and the wrapper process reports the final status to the host job status thread or process. According to another aspect of the present invention, job and device status may be reported asynchronously. One or more host processing threads or processes are spawned for each new presentation job received. A first presentation job is submitted to a presentation device for which the presentation job is destined by way of a first instance of a wrapper process that communicates bi-directionally with the presentation device. Subsequently, a second presentation job is submitted to the presentation device by way of a second instance of the wrapper process. A first and second job status thread or process wait for status pertaining to the first and second presentation jobs, respectively. A final status associated with the second presentation job is received by the second instance of the wrapper before a final status associated with the first presentation job is received by the first instance of the wrapper. Then, the second instance of the wrapper process reports the final status to the second job status thread or process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07095523&OS=07095523&RS=07095523
owner: International Business Machines Corporation
number: 07095523
owner_city: Armonk
owner_country: US
publication_date: 20021212
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Contained herein is material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction of the patent disclosure by any person as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all rights to the copyright whatsoever.","1. Field of the Invention","The invention relates generally to driving heterogeneous devices from an output server. More particularly, the invention relates to a flexible mechanism which allows jobs containing formatted data, such as image data, to be submitted to arbitrary devices.","2. Description of the Related Art","Print servers, such as the IBM\u00ae InfoPrint\u00ae Manager, traditionally provide for central management of a printing environment. A simplified printing scenario in a local area network (LAN) environment will briefly be described with reference to . In this example, a personal computer workstation  is coupled to a print server  via a LAN . The print server  includes a spooler  for controlling the spooling of data files and presentation services  for generating appropriate commands to drive an attached printer. The print server  may also include other components that are not shown for performing basic tasks, such as monitoring and configuring attached printers, and providing print job management. At any rate, when the PC workstation  has data to print, it sends print data to the print server . Among the functions typically provided by a print server is the conversion of the data stream containing the print data to a data stream supported by the printer to which the print data is destined. In this example, the print server  is coupled to a first printer  and a second printer . The two printers  and  may each respond to different data streams. For instance, the first printer  may accept the Intelligent Printer Data Stream (IPDS) and the second printer  may accept PostScript. Therefore, the print server  must provide a means for converting between the various input data streams that may be received and the two data streams accepted by the printers  and . While in this simplified example only two types of printers have been shown, it should be appreciated that real world printing environments may include many different types of printers.","Increasingly, this is the case in professional printing environments, such as commercial and production printing environments which are becoming more and more diverse. While print servers typically support diverse printing environments, such support is costly in terms of the development effort required to modify the print server software in existing inflexible architectures. For example, in order to accommodate a new data stream, it is common to add a new complex printer driver to the print server. In existing print server architectures, these print drivers must typically be developed from scratch to incorporate the rich set of features that users have come to expect. This rewriting of code is required because typically the print server's capabilities and transforms are coded for a particular type of data stream and for a particular path through the print server. Also impacting the development efforts, is the inherent difficulty in manipulating the complex data streams that are received by print servers and transforming them into equally complex data streams required by printers. In view of the foregoing, it is desirable to provide a flexible and extensible architecture that allows support for new output devices to be added easily and inexpensively.","Another problem associated with existing print servers is the limited range of output devices supported. It is often desirable to present or deliver information in a form other than printer hard copy. Therefore, it would be advantageous to provide a mechanism to support output to destinations including fax and email, for example.","Prior art output servers also have other significant limitations which perplex end users. Fax servers report the fact that they have successfully transmitted a fax job. However, there is no indication of the success or failure of the job being received and\/or handled at the destination. Often, unwary end users are surprised to discover that their \u201csuccessful\u201d job was not successful at the receiving end. Similar limitations exist in printer control protocols that only report the success or failure of a print job being converted to image. Therefore, it is desirable to provide a mechanism by which additional job and device status may be provided to the end user.","A flexible and extensible virtual printer architecture is described. According to one aspect of the present invention final status associated with a presentation job is made available to an output server. One or more host processing threads or processes are spawned for each new presentation job received by the output server. Then, the presentation job is submitted to a presentation device for which the presentation job is destined by way of an instance of a wrapper process that is capable of communicating bi-directionally with the presentation device. After submitting the presentation job, a host job status thread or process waits for status pertaining to the presentation job. Ultimately, a final status associated with the presentation job is received by the wrapper process and the wrapper process reports the final status to the host job status thread or process. Advantageously, in this manner, a mechanism is supplied by which additional job and device status may be provided to the end user.","According to another aspect of the present invention, a method of recovering from presentation job errors is provided. A data stream generator establishes a bi-directional communication link between itself and an intermediate process. The data stream generator transmits a data stream comprising a presentation job to the intermediate process by way of the bi-directional communication link. Status information is received by the data stream generator, including an indication of a device error if the presentation device was unable to complete the presentation job. Subsequently, the presentation job may be restarted at the point of failure by the data stream generator.","According to yet another aspect of the present invention, job and device status may be reported asynchronously. One or more host processing threads or processes are spawned for each new presentation job received. A first presentation job is submitted to a presentation device for which the presentation job is destined by way of a first instance of a wrapper process that communicates bi-directionally with the presentation device. Subsequently, a second presentation job is submitted to the presentation device by way of a second instance of the wrapper process. A first and second job status thread or process wait for status pertaining to the first and second presentation jobs, respectively. A final status associated with the second presentation job is received by the second instance of the wrapper before a final status associated with the first presentation job is received by the first instance of the wrapper. Then, the second instance of the wrapper process reports the final status to the second job status thread or process.","Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.","A flexible and extensible virtual printer architecture is described. According to various embodiments of the present invention, a virtual printer is interposed between an output server and a heterogeneous group of presentation devices, such as printers, fax servers, email servers, pagers, televisions, file viewers, copiers, and other devices, which may or may not natively support the data stream provided by the output server, thereby providing a common interface to the heterogeneous group of presentation devices. Advantageously, in this manner, the output server is not burdened with having to handle device-specific information for each presentation device. Rather, the output server and the virtual printer may communicate via a single, well-defined presentation device data stream (also referred to as a presentation device control protocol). Therefore, the addition of new presentation devices behind the virtual printer has a relatively trivial impact upon the output server compared with the effect of such a change in prior printing environment architectures. Additionally, as will be explained in more detail below, by removing the device dependencies from the output server and placing them further down stream, future enhancements to the output server, such as new transforms or other new data stream manipulations, are automatically inherited by presentation devices that are supported by the virtual printer architecture.","According to one aspect of the present invention, the virtual printer may present itself to the output server as an Intelligent Printer Data Stream (IPDS) device while converting the input data stream to other formats that are natively supported by presentation devices. In this manner, the virtual printer acts as an IPDS proxy for the presentation devices thereby allowing them to take advantage of the rich set of capabilities and data stream transforms provided by IPDS.","According to another aspect of the present invention, a logical channel is provided for conveying device status and various levels of job status through the virtual printer and back to the output server. Additionally, a mechanism is provided for reporting asynchronous job and device status. In this manner, the end user may be provided with job and device status information that is not communicated to the end user by existing printing solutions.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances, well-known structures and devices are shown in block diagram form.","The present invention includes various steps, which will be described below. The steps of the present invention may be performed by hardware components or may be embodied in machine-executable instructions, which may be used to cause a general-purpose or special-purpose processor programmed with the instructions to perform the steps. Alternatively, the steps may be performed by a combination of hardware and software.","The present invention may be provided as a computer program product which may include a machine-readable medium having stored thereon instructions which may be used to program a computer (or other electronic devices) to perform a process according to the present invention. The machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnet or optical cards, or other type of media\/machine-readable medium suitable for storing electronic instructions. Moreover, the present invention may also be downloaded as a computer program product, wherein the program may be transferred from a remote computer to a requesting computer by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection).","For convenience, embodiments of the present invention will be described with reference to a particular data stream, i.e., the Intelligent Printer Data Stream (IPDS). In alternative embodiments, alternative data streams may be employed, such as PostScript, Hewlett Packard Printer Control Language (PCL), Hewlett Packard Graphics Language (HPGL), Printer Job Language (PJL), or Apple Talk Printer Access Protocol (PAP). However, preferably, the data stream employed is both architected and bi-directional. By \u201carchitected\u201d what is meant is, a standardized set of controls transmitted with raw data which specifies how the data is to be presented. By \u201cbi-directional,\u201d what is meant is a synchronization mechanism is provided between the host (e.g., a printer server or other data stream generator) and the server (e.g., a printer or other output device) allowing them to synchronize at various points in the data stream. For example, the host and server may be able to synchronize at a command or page-level according to an acknowledgment protocol which provides for the exchange of host initiated queries and server reply information. Also, while embodiments of the present invention will be described with reference to a particular transport level protocol (also referred to as a carrying protocol or a communication protocol), i.e., transmission control protocol (TCP), other protocols that provide an error free, bi-directional byte stream between two endpoints may be employed, such as Xerox Network Systems (XNS), S\/370 Parallel Channel Host Attachment, or the like. Finally, while only a limited number of presentation devices are specifically referred to herein, such as printers, fax servers, email servers, and pagers, the method and apparatus described herein are equally applicable to other destinations and presentation devices that are capable producing character shapes, graphics pictures, images, or other symbols on a physical medium, such as paper, a display device, or a disk. Additionally, the method and apparatus described herein are applicable to destinations and\/or presentation devices that are capable of retransmission, such as a base station for satellite or cellular communications or a paging system, for example.","An Exemplary Software Architecture",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2"},"According to the embodiment depicted, a presentation environment architecture includes the following components: an output server , a virtual printer , one or more wrapper functions , , one or more presentation devices , , a status database application programming interface (API) , and a status database . In various embodiments, more or less components may be employed by combining or excluding one or more of the above-referenced components or adding additional components. Importantly, the components may reside on the same computer system or be distributed across several different computer systems on a local area network, for example.  illustrates one possible distribution of components in which the dashed lines represent a physical separation between components. When the components are physically separated, bi-directional communication links may be established and maintained among the components via a TCP\/IP, sockets-based interface, for example.","In one embodiment, the output server  may comprise a current or future release of InfoPrint Manager, Print Services Facility (PSF), e.g., PSF\/MVS or PSF\/400, or other IPDS enabled print server. In the present example, the output server  receives presentation jobs (e.g., print jobs, fax jobs, and other output jobs) and user-specified job attributes from a workstation, for example, and returns job and\/or device status. The output server  may support outputting the data received to a plurality of heterogeneous presentation devices ,  by wrapping, in an object container, destination control information (e.g., an email address for sending the presentation job to an email server, a phone number for sending the presentation job to a fax server) provided in the user-specified job attributes. The object container may then proceed transparently through the output server processing and continue down stream where it may be used at the appropriate point during the processing of the presentation job in the virtual printer  or wrappers , . Those skilled in the art will recognize the wrapper as a generalization of a print mechanism which no longer needs to be physically contained within a printer. Importantly, forms of the verbs \u201cprint\u201d and \u201coutput\u201d in the context of this application, refer broadly to the act of communicating a data stream containing data that is destined for a presentation device or something capable of retransmitting the job to a presentation device. These definitions include, but are not limited to, the traditional meaning of print, e.g., sending data to a printer in order to produce character shapes, graphics pictures, images, or other symbols with ink, toner, or the like on a physical medium, such as paper. According to these definitions, data may be said to be \u201cprinted\u201d or \u201coutput\u201d to a fax server or a pager, for example.","At any rate, returning to the embodiment depicted, the output server  includes a spooler  and presentation services . The presentation services  may include one or more drivers  configured to generate commands suitable for driving various presentation devices, one of which is configured to interface with the virtual printer .","In the preferred embodiment, the presentation device control protocol exchanged between the output server  and the virtual printer  is the Intelligent Printer Data Stream (IPDS). IPDS is an architected, bi-directional printer data stream that contains both data and controls defining how the data is to be presented. Additionally, the IPDS architecture provides an extensive acknowledgment protocol at the data stream level which provides for exchange of query-reply information and allows the return of detailed exception information. IPDS data streams are independent of the carrying communications protocol. This allows the transmission of the same data stream to presentation devices attached to channels, controllers, local area networks, and any other type of networking link that supports the transparent transmission of data. IPDS transfers data and controls through commands that describe the presentation of data and provide for dynamic management of resident fonts and of downloaded resources, such as overlays, page segments, and loaded fonts. Additionally, IPDS commands allow control of device functions such as duplexing, media-bin selection, and output finishing. Further background and information regarding the IPDS architecture may be found in a publication entitled, \u201cIntelligent Printer Data Stream Reference,\u201d Order Number S544-3417, published March 1996, which is available from IBM Printing Systems Company of Boulder, Colo.","Importantly, while this embodiment is described with reference to a output server supplying a printer data stream, such as IPDS, to the virtual printer , the present invention is not limited to receipt of a printer data stream from any particular type of device. In alternative embodiments, the data stream may be received directly or indirectly from a workstation or other data stream generator or may be read from a scripted file, for example.","In the embodiment depicted, the virtual printer  includes an attachment layer  and one or more formatters . The attachment layer  and one or more of the drivers  establish a bi-directional communication link between the output server  and the virtual printer  through which communication may occur. Typically, the output server  will provide logical pages of arbitrarily complex source data embedded in a data stream and corresponding user-specified job attributes (potentially for each logical page). The source data may include, for example, text, image, graphics and\/or other embedded objects, such as sound or video. At any rate, responsive to the data stream, the attachment layer  may provide the output server  with such things as page counters (e.g., received page count, committed page count), status and other error conditions relating to the processing of the data stream by the virtual printer . As will be described in detail below, embodiments of the virtual printer architecture may provide various levels of job status, thereby allowing the output server  to recover from certain data stream and device errors, for example.","Preferably, to leverage existing code, the attachment layer  may receive an architected, bi-directional printer data stream from an existing printer driver. In one embodiment, the virtual printer  is capable of acting like a particular printer, such as one of many different IPDS printers (e.g., InfoPrint 60 or InfoPrint 4000), by performing the bi-directional communications as the particular printer would. In this manner, the virtual printer  may act as a proxy for presentation devices that may or may not natively support the data stream received by the virtual printer . Ultimately, the output server  (or other data stream generator) is essentially made to believe that it is communicating directly with a printer rather than an intermediate entity behind which a heterogeneous group of presentation devices may reside.","The attachment layer  employs one or more formatters , which may operate in parallel, to reduce the data stream received from the output server  to a simple format. The formatters  receive the data stream from the attachment layer  and convert the data stream to a widely supported, simple format, such as a bit map, text, a frame of video, or one of many other well-defined interchange formats, thereby facilitating subsequent re-packaging in a device-dependent manner by the appropriate wrapper function , . In embodiments employing presentation devices that accept imaged data, at least one of the formatters  may comprise a rasterizer. In this case, if the rasterized image is bi-level it can be compressed, for example, via International Telecommunications Union-Telecommunications Standardization Sector (ITU-TSS) T.6 Group 4 two dimensional coding standard for facsimile. Other compression algorithms or formats may be used. For example, the rasterizer may convert to other image formats to accomodate color. Then, the resulting image data and associated controls may be packaged by the wrapper function, one presentation unit at a time to build a job for submission to a presentation device. The presentation unit is a block of data whose size is device dependent. For example, the presentation unit for a pager might be a screen full of text, while the presentation unit for a printer may be one or two sides of a sheet. In other embodiments, which may communicate with text-based presentation devices such as pagers, at least one of the formatters  may comprise a text extractor. Numerous alternative formatters are possible depending upon the characteristics of the presentation devices supported.","The wrapper functions ,  abstract the device dependent details from the virtual printer . In general, wrapper functions receive data in a device independent format, transform it into a device-specific format, and drive the appropriate presentation device. Importantly, depending upon the particular implementation wrappers may be defined for a particular type of presentation device (e.g., a InfoPrint 60 IPDS printer, a Lotus Notes email server), for presentation device families (e.g., fax servers, email servers, PostScript printers, PCL printers, IPDS printers), or for various groupings of presentation device families. In one embodiment, the wrapper functions ,  include a device independent portion and a device dependent portion (not shown). The device independent portion of the wrapper receives control object containers and data from the formatter in a fixed format and is essentially the same for each wrapper function , . However, the device dependent portion has knowledge of the data stream supported by the presentation devices with which it is associated, knowledge of how to apply the control information to the formatted data, knowledge of how to interpret and utilize the destination control information supplied to the output server , knowledge of the job ticket format required, if any, for job submission to its presentation devices, etc. The wrapper functions ,  essentially receive device independent material, e.g., the formatted data from the formatters  and control information that describes the presentation of the data, and makes it device dependent based upon the control information and\/or characteristics of the targeted presentation device. For example, the device dependent portion of the wrapper function may parse the destination control information and residual control information from the data stream and perform image operations, such as scaling, cropping and resolution modification, to accommodate various features and limitations of the targeted presentation device. Alternatively, depending on the specificity of the wrapper, it may be able to make the formatted data device dependent without reference to the destination control information. Importantly, as a result of device dependencies only being encoded in a portion of the wrapper and in the user specified destination control information, virtual printer support for new presentation devices may be accomplished by simply providing new wrapper functions and support for any new user-specified job attributes to be contained in the object containers.","Referring now to the status database application programming interface (API) , as will be described further below, it tracks job and device status for the output server . The status database API  may run independent of the output server  as a daemon process or other independent processing thread or process and may employ a status database  to store the job status information (e.g., stacked page count) and device status information (e.g., device failures, such as paper jam, out of toner, etc.). In one embodiment, communications between the status database API , the output server , and other processes may be accomplished via remote procedure calls.","Data Flow Through an Exemplary Software Architecture",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 2"],"b":["380","325","335","340","355","365","380","305","305","310","325","325","315","315","320"]},"The input  to the presentation services  includes pages of the common data format, their corresponding object containers, and formatting information. The presentation services  include transformations for applying the formatting information to the pages and for transforming the common data format to a data stream , such as IPDS. Importantly, the input data stream received by the output server  may be any of a number of formats, including but not limited to: PDF, PostScript, TIFF, GIF, JPEG, PCL, SAP, and ASCII. The output data stream  produced by the presentation services is equally flexible.","The virtual printer , parses the data stream  received from the presentation services , feeds destination device control information  extracted from the object containers to the wrapper function , and feeds the IPDS logical pages  to the rasterizer . The rasterizer  transforms the IPDS data stream  to a bitmap representation. Preferably, the bitmap representation is a compressed image format, such as that produced by ITU-TSS T.4 Group 3 two dimensional coding standard for facsimile (also referred to as G3) or ITU-TSS T.6 Group 4 two dimensional coding standard for facsimile (also referred to as G4).","The wrapper function  receives both destination device control information  and bitmaps  and presents device-specific control information , such as a fax job ticket, and a device-specific data stream  to the presentation device .","It should be appreciated that the above-described software architecture extends the functionality of the output server , including the transformations to and from MODCA, and the formatting capabilities of IPDS, to virtually any presentation device. For example, this architecture provides the ability to send N-up facsimiles. Advantageously, any new features added to either MODCA or IPDS are automatically inherited by presentation devices that are supported by the architecture.","An Exemplary Computer Architecture","Having briefly described one embodiment of the virtual printer architecture and how data flows through such an architecture, a computer system  representing an exemplary workstation, host, or server in which features of the present invention may be implemented will now be described with reference to . Computer system  comprises a bus or other communication means  for communicating information, and a processing means such as processor  coupled with bus  for processing information. Computer system  further comprises a random access memory (RAM) or other dynamic storage device  (referred to as main memory), coupled to bus  for storing information and instructions to be executed by processor . Main memory  also may be used for storing temporary variables or other intermediate information during execution of instructions by processor . Computer system  also comprises a read only memory (ROM) and\/or other static storage device  coupled to bus  for storing static information and instructions for processor .","A data storage device  such as a magnetic disk or optical disc and its corresponding drive may also be coupled to computer system  for storing information and instructions. Computer system  can also be coupled via bus  to a display device , such as a cathode ray tube (CRT) or Liquid Crystal Display (LCD), for displaying information to an end user. For example, graphical and\/or textual depictions\/indications of job and device status, previews of presentation jobs, and other data types and information may be presented to the end user on the display device . Typically, an alphanumeric input device , including alphanumeric and other keys, may be coupled to bus  for communicating information and\/or command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display .","A communication device  is also coupled to bus . Depending upon the particular presentation environment implementation, the communication device  may include a modem, a network interface card, or other well known interface devices, such as those used for coupling to Ethernet, token ring, or other types of physical attachment for purposes of providing a communication link to support a local or wide area network, for example. In any event, in this manner, the computer system  may be coupled to a number of clients and\/or servers via a conventional network infrastructure, such as a company's Intranet and\/or the Internet, for example.","High Level Output Processing",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 5","b":["510","200","220","215","215","200","245","520","200","530","540","530","215","215","550","215","560","570","580","590"]},"An Exemplary Output Server Thread or Process",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 6","b":["610","620","630","650","660","670","690","202"]},"A new unique job ID is assigned to the presentation job at step . The status database is notified of the new presentation job, at step , by way of a remote procedure call to an interface to the status database, for example. Therefore, the virtual printer  and\/or the wrapper functions ,  may report the presentation job's status to an entity that resides outside the bi-directional channel established between the output server  and the presentation device. Importantly, in this manner, the independent job status recording means provides a non-blocking approach for reporting asynchronous job and device status to the output server .","At step , the data stream received by the output server  is transformed into a common data format. In this manner, rather than coding user-specified formatting options for each of many possible input data stream formats, such formatting need only be coded for the common data format. At step , the user-specified formatting options, such as impositioning, are applied to the common data format. After applying the formatting options, at step , the common data format is transformed to the data stream format that is output by the output server . The presentation job is then submitted, at step , by providing the output data stream to the virtual printer . After the job is submitted, at least one output server thread or process, referred to herein as the status thread or process, waits for the final job status to be reported.","At step , it is determined whether or not the presentation job's status has been received. If so, processing continues with step ; otherwise, the status thread or process continues to wait. Importantly, while the embodiment illustrated appears to be a polling loop, as indicated above, status may be provided by way of a callback function that is called by the status database interface after it receives the presentation job's final status. According to this embodiment, when the presentation job's status is finally received job queues are updated and the originating workstation is notified of the status by steps  and , respectively.","Virtual Printer Processing",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 7","b":["710","215","720","220","220","220","200","225","730","220","750","740","740","225"]},"At step , a wrapper of the type necessary for communicating to the target presentation device is instantiated. The wrapper takes device independent data and produces presentation unit-level device-specific data and device-specific control information in the form of a data stream that can be submitted to the presentation device. For example, an email wrapper function may wrap bitmap images (from a rasterizer, for example) in a page description language (PDL), such as PDF, before submitting the data to the email server. Similarly, a fax wrapper may wrap bitmap images in TIFF for submission to a fax server. Importantly, as indicated above, a single wrapper function may support various groupings of presentation device families, therefore, a single wrapper may support both email and fax presentation devices. To distinguish between the two types of input, such a wrapper may examine the destination control information, for example. A phone number specified as the destination would be indicative of input destined to a fax or fax server, while an email address would be indicative of data destined for an email server.","At step , the presentation job is submitted to the appropriate presentation device(s) in the form of a device dependent data stream. In cases where bi-directional communication may be established with the presentation device, the wrapper may wait for a final job status to be returned from the presentation device(s) at step . Otherwise, the wrapper may itself determine the final job status upon successfully transmitting the job to the presentation device. When the job status is determined, it is reported to the status database interface, at step . Importantly, in order to facilitate error recovery processing and delivery of jobs to multiple destinations, the wrapper may spool the data to a file.","Status Processing",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 8","b":"805"},"A request for a new status record is typically made by the output server  to establish a new device or job record. A status notification is typically made by a wrapper function, but may also be made by one of the virtual printer components or the presentation services . Importantly, any component with knowledge of the presentation job ID can communicate with the status database interface to report errors, thereby permitting the output server  to restart the job from the point of failure.","Status inquiries are typically associated with the output server  as presentation status threads or processes poll for the status of their presentation jobs. Finally, a clear request is usually the result of an output server call to delete a record that no longer needs to be tracked.","At step , the type of request is determined. If the request is for a new status record, processing continues with step . If the request is a status notification, processing continues with step . If the request is a status inquiry, the processing continues with step . Otherwise, if the request is a clear request, processing continues with step .","At step , depending upon the type of record requested, a new job or device record is created and initialized. At step , the newly created record is stored in the status database.","At step , the job or device record relating to the status notification (as determined by the job\/device ID) is located in the status database. The record corresponding to the request is updated at step .","At step , the job or device record relating to the status inquiry (as determined by the job\/device ID) is located in the status database. The record corresponding to the request is retrieved and the status is returned to the caller at step . As mentioned above, while the embodiment illustrated illustrates a mechanism by which status may be polled, it may be desirable to provide a mechanism by which interested processes may be notified when a status change occurs. According to one embodiment, therefore, the status database interface may use a subscription list, for example, and perform a callback to the interested processes as status notifications are received.","At step , the job or device record relating to the status notification (as determined by the job\/device ID) is located in the status database. The record corresponding to the request is deleted at step .","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
