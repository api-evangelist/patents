---
title: Driver based wireless USB
abstract: Wireless USB connection techniques are described. In one or more implementations, a Universal Serial Bus (USB) device includes one or more modules configured to communicate data over a wireless USB connection to another USB device. The wireless USB connection is implemented by mimicking a wired USB connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08006023&OS=08006023&RS=08006023
owner: Marvell International Ltd.
number: 08006023
owner_city: Hamilton
owner_country: BM
publication_date: 20090506
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Overview"],"p":["This application claims priority under 35 U.S.C. \u00a7119(e) to U.S. Provisional Application Ser. No. 61\/053,520, filed on May 15, 2008 and to U.S. Provisional Application Ser. No. 61\/075,578, filed on Jun. 25, 2008, the disclosures of both provisional applications are hereby incorporated by reference in their entirety.","Universal Serial Bus (USB) functionality has been adopted by a wide range of devices to provide communicative coupling. For example, a personal computer (PC) may use USB to connect to input devices such as keyboards and cursor control devices and output devices such as printers and speakers. Use of USB has also expanded beyond PCs to digital cameras, personal music players, game consoles, wireless phones, and so on. Thus, the functionality provided by USB may be found in a wide range of devices for a variety of situations that may range from business to personal uses. However, conventional USB is limited to wired applications which may limit the convenience of USB.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Wireless USB connection techniques are described. In one or more implementations, a Universal Serial Bus (USB) device includes one or more modules configured to communicate data over a wireless USB connection to another USB device. The wireless USB connection is implemented by mimicking a wired USB connection.","In one or more implementations, an interface is provided that is configured to be accessible to one or more applications to provide communicative coupling via a universal serial bus (USB) connection to a USB device. Data is communicated via the USB connection wirelessly to the USB device without making the one or more applications aware that the communicative coupling to the USB device is wireless.","In one or more implementations, a Universal Serial Bus (USB) host includes one or more modules to initiate a USB enumeration procedure to simulate a USB attach operation when a connect command is received wirelessly from a USB device or to simulate a USB detach operation when a disconnect command is received from the USB device via a wireless USB connection.","The range of devices that are able to connect via USB is quite diverse. For example, devices such as PCs, cameras, modems, mass storage devices, card readers, and so on may each use USB to connect to another device. However, conventional USB is limited to wired connections, thereby limiting the convenience of USB to users.","Techniques are described to provide USB connectivity via a wireless connection. In an implementation, a USB cable that was previously utilized to connect USB devices is replaced with a wireless connection, e.g., a wireless connection in accordance with IEEE 802.11 (i.e., WiFi) or other wireless technologies, such as cellular technologies (e.g., 3G), Bluetooth, and so on. Additionally, this wireless connection may leverage underlying functionality used to provide USB to increase efficiency of a device and expand usefulness of the wireless connection. In this way, traditional applications and devices may leverage the wireless USB connection without being aware that a wireless connection is being used. For instance, the wireless USB connection may be configured such that drivers, firmware, and so on established for providing a conventional USB connection may also be used for the wireless USB connection without being reconfigured. Further discussion of a wireless USB connection and devices that may employ the wireless USB connection may be found in relation to the following sections.","In the discussion that follows, example operating environments are described that may incorporate the wireless USB connection techniques. Example methods are also described that may be employed in the example operating environments, as well as other environments. Thus, in instances in the discussion of the methods, reference will be made to the environments by way of example. Therefore, implementation of the methods is not limited to the environments and use of the devices is not limited to the methods.","Example Operating Environment",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","102","104","106","102","104","108","110"]},"USB follows a \u201chost controlled\u201d topology in which a single host (e.g., USB host ) is responsible for control of the USB, e.g., to undertake transactions and schedule bandwidth. In some implementations, the USB may support a host negotiation protocol such that two or more devices may negotiate for the role of host. For example, the USB host  may be configured as a digital camera and the USB device  may be configured as a mobile phone that may negotiate for the role of a host. Once a host is determined, the device assuming the role of host is responsible for transactions and bandwidth usage of the USB.","Accordingly, the USB host  may be configured in a variety of ways, such as a desktop computer, server, laptop computer, a peripheral device (e.g., printer), and so on. Likewise, the USB device  may also be configured in a variety of ways. For example, device functionality of the USB device  may be configured to provide data storage (e.g., a USB data storage dongle), printing (e.g., as a photo printer), image capture (e.g., as a digital camera), input (e.g., as a keyboard or mouse), and so on. Thus, the use of the term USB host  denotes the role of the underlying device in forming and\/or maintaining a USB connection.","Although a USB host  and a single USB device  are illustrated, additional USB devices may also leverage the wireless USB connection , directly or indirectly. For example, the USB host  may include other USB devices that are connected to a USB of the USB host  directly via a wired connection. Accordingly, the USB module  of the USB device  may negotiate with the USB module  of the USB host  to communicate with one of the other USB devices. Once permission is granted, the USB device  may communicate with the other USB devices of the USB host  directly via the USB. The USB device  may also communicate indirectly through the USB module  of the USB host  with other devices that are not configured for communication via the USB, such as a processor and memory of the USB host .","The USB modules ,  are further illustrated as including respective wireless modules ,  that are representative of functionality to provide the wireless USB connection . For example, the wireless modules ,  may include hardware (e.g., transmitters, receivers, antennas) and software (e.g., drivers) that are configured to provide wireless communication according to one or more protocols, such as, IEEE 802.11. By including the wireless modules ,  within the functionality of the USB modules , , the wireless functionality may be provided without specially configuring devices and applications that are configured to avail themselves of USB. In other words, the USB modules ,  may provide functionality of the wireless USB connection  without exposing particular protocols and other functionality used to provide the connection, further discussion of which may be found in relation to .","Generally, any of the functions described herein can be implemented using software, firmware (e.g., fixed logic circuitry), or a combination of these implementations. The terms \u201cmodule,\u201d \u201cfunctionality,\u201d and \u201clogic\u201d as used herein generally represent software, firmware, or a combination of software and firmware. In the case of a software implementation, the module, functionality, or logic represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices. The features of the wireless USB techniques described below are platform-independent, meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1"],"b":["200","102","104","102","104","202","204","206","208","210","212","214","216"]},"The USB drivers and firmware ,  on the USB host  and USB device  may be implemented to simulate conventional USB functionality thereby ensuring backward compatibility by mimicking a conventional wired USB connection. For instance, the virtual USB-wireless bus drivers ,  may implement a similar application programming interface (API) as would a legacy USB driver thereby appearing as a conventional wired USB connection to devices and\/or software that are to utilize the connection even though a wireless connection is being utilized to communicate the data between devices. Likewise, the virtual USB-wireless bus drivers ,  may implement a state machine to address a simulated USB enumeration procedure, e.g., to attach or detach the USB device  from the USB host , such that formation of a wireless connection appears similar to formation of a conventional wired USB connection to software and\/or devices that are to utilize the wireless connection. A variety of other examples are also contemplated, such as, simulated read\/write operations and so on.","The virtual USB-wireless manager  on the USB host  is configured to generate a corresponding attach or detach command to the virtual USB-wireless bus driver  to start a USB enumeration procedure as previously described. For instance, when the virtual USB-wireless manager  receives the \u201cconnect\u201d or \u201cdisconnect\u201d command from the USB device , the corresponding command may be generated. In an implementation, the virtual USB-wireless manager  verifies the validity of the command, such as via an encryption key that was previously provided to the USB device . Further discussion of the encryption key may be found in relation to .","The virtual USB-wireless manager  on the USB device  may be configured to implement an interface that mimics (e.g., substantially matches) an interface of a legacy USB driver. For example, the virtual USB-wireless manager  may implement a state machine to provide a simulated USB enumeration procedure as previously described. Additionally, the virtual USB-wireless manager  may call a corresponding wireless related read\/write operation of the wireless driver  to complete a USB read\/write operation issued from the USB drivers and firmware .","The virtual USB-wireless manager  on the USB device  may be configured to output a user interface to provide a variety of functionality. For example, the user interface may be used to allow an end user to specify the USB host  from a plurality of other available USB hosts. This may be done in a variety of ways, such as by specifying a host name, IP address with a port number by which a TCP\/IP connection may be established, and so on. The user may also input an encryption key to allow some security check when trying to connect to the USB host .","In an implementation, the USB device  includes a connect button (which may be implemented in hardware and\/or in a display of a user interface) that is operable to initiate the wireless connection. The process may simulate a USB attach, thereby initiating the USB enumeration procedure. Additionally, a user may identify which port the USB host  \u201cshould listen to\u201d to form the wireless connection with the USB device .","After the USB enumeration procedure is initiated, the USB host  may recognize the USB device . When a user decides to disconnect the USB device  (e.g., by pressing a dedicated disconnect button, by repressing the attach button, and so on), a USB \u201cdetach\u201d may be simulated. Thus, a user at the USB host  may see the USB device  disappear from a user interface output at the USB host . In this implementation, the command may be sent via the wireless USB connection  such that the virtual USB-wireless bus driver  may interpret the commands and react accordingly.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3","b":["302","212","104","302","304","104","102","104"]},"The user interface  also includes a portion to specify a particular IP address, a port, and an encryption key as previously described for forming the wireless connection. The encryption key may be entered in a variety of ways, such as manually by a user, automatically by device, and so on. For example, the user interface  may output an option via which the user may manually specify a particular encryption key. In another example, the encryption key may be automatically generated by the USB device .","Additionally, the illustrated user interface  includes a display of connect  and disconnect  buttons to initiate and terminate the wireless USB connection  of , respectively. As previously described, a variety of other implementations are also contemplated, such as, dedicated hardware buttons, sharing of a single button (e.g., press to connect and press again to disconnect), and so on. A variety of different types of data may leverage the wireless USB connection described herein, an example of which may be found in relation to the following section.","Media Implementation Example",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 1"],"b":["400","106","102","104","106"]},"In the illustrated example, a RTP (Real Time Protocol) is selected to transport different media streams over USB. Additionally, since the wireless USB connection  may act as a USB wire replacement, UDP (User Datagram Protocol) may be used as a layer 3 protocol such that an RTP header is communicated over the UDP. In an implementation, separate streams are used for audio and video data between the USB host  and the USB device , which are illustrated as a video stream  and an audio stream .","RTCP (Real Time Control Protocol) may also be used with RTP. For example, RTCP may be utilized to determine a quality of service (QoS) of the RTP streams, gather statistics and a source description, and so on. However, the wireless connection may also be implemented without this functionality.","The video stream  is illustrated as communicating a packet that includes an RTP header , an RTP extension  and a video payload . Likewise, the audio stream  is illustrated as communicating a packet that includes an RTP header , an RTP extension  and an audio payload . Further discussion of the RTP header  and the RTP extension  may be found in relation to the following figures.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 5","FIG. 4","FIG. 5"],"b":["406","406"]},"Version (V) : 2 Bits","This field identifies the version of RTP, which is set to 2 in the illustrated example.","Padding (P) : 1 Bit","If the padding field is set, the packet contains one or more additional padding octets at the end which are not part of the payload, otherwise the bit is set to 0.","Extension (X) : 1 Bit","If the extension field is set, the fixed header is followed by a single header extension, e.g., the bit is set to 1.","CSRC Count (CC) : 4 Bits","The CSRC count contains the number of CSRC identifiers that follow the fixed header, otherwise the CSRC count  field is set to 0.","Marker (M) : 1 Bit","The interpretation of the marker is defined by a traffic profile. For JPEG, this is set to 1 when the packet contains the EOI (End of Image).","Payload Type (PT) : 7 Bits","This field identifies the format of the RTP payload and determines its interpretation by the application. In this example, the payload type  is set to a type that is not assigned to other previously-defined types, e.g., to 34.","Sequence number : 16 Bits","The sequence number  increments by one for each RTP data packet sent. The sequence number  has a variety of different uses, such as for use by a receiver to detect packet loss and to restore packet sequence. The initial value of the sequence number may be set as 0.","Timestamp : 32 Bits","The timestamp  reflects a sampling instance of a first octet in an RTP data packet. The sampling instance may be derived from a timestamp of a clock of a JPEG codec.","SSRC : 32 Bits","The SSRC  field identifies a synchronization source. This identifier may be chosen randomly to increase a likelihood that two synchronization sources within the same RTP session do not have the same SSRC  identifier. It should be readily apparent that a variety of different RTP headers  may be employed to provide the USB wireless connection techniques. Accordingly, the previous fields of the RTP headers  above are but a few of a variety of contemplated examples.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 6","FIG. 4","FIG. 4","FIG. 5"],"b":["408","406","406","408"]},"Payload Type : 8 Bits","The payload type  field may be defined in the same way as the payload types  defined for RTP header . For a JPEG frame, for instance, the value is 26. For audio frames, the payload type  may depend on a codec used.","Length : 16 Bits.","The length  field describes a number of bits included in the RTP extension . For example, the length  may be determined by counting a number of 32-bit words in the RTP extension , excluding a four-octet extension header (therefore zero is a valid length).","SOI  and EOI ","The Start of Image (SOI)  field indicates a start of a payload and the End of Image (EOI) field indicates an end of the payload, which is an image in this instance. It should be readily apparent that a variety of different RTP extensions  may be employed to provide the USB wireless connection techniques. Accordingly, the previous portions of the RTP extensions  above are but a few of a variety of contemplated examples.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 7","b":["700","700","702","704","706","708","710","712","714","716","704","702","718","716","720"]},"The USB driver  communicates with the client software  via a USB driver interface . The USB driver  is configured to ensure that a desired device configuration may be accommodated on the USB . The USB driver  may also be configured to approve an endpoint, packet size, transfer type, transfer period, and so on. In an implementation, the USB driver  is configured specific to the operating system .","The host controller driver  communicates with the USB driver  via a host controller driver interface . The host controller driver  is configured to add I\/O Request Packets  from a respective transaction  in the transaction list . When an IRP has completed transfer, the host controller driver  informs the client software .","The host controller  in the illustrated example is implemented in hardware. The host controller  is configured to control a USB protocol utilized over the USB , e.g., to handle packet  retries, transfers, CRC, and so on. Thus, in this example, the host controller driver  and the host controller  provide the hardware\/software interface  between the USB  and the client software .",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 8","b":["800","800","800"]},"An example format of the video header  as illustrated in  includes the following fields. The header length  is the length of the header in bytes. The FID  is a bit toggles at start of each frame and is used to determine a start of a new frame for use by a higher layer protocol. The EOF  (End of Frame) is used by a higher layer protocol. The PTS  indicates presence of a presentation time stamp. The SCR  indicates presence of a source clock. The RES  field is reserved. The STI  field indicates whether the payload is a still image. ERR  is an error bit field, with EOH  indicating an end of the header.","The PTS - (presentation time stamps) are time stamps provided by a source clock at the start of a video frame and remain the same for each packet of that frame. At least one of the SCR - (source clock timestamps) contain a timestamp of the source clock before the packet was transmitted over the USB. Another one of the SCRs - may contain a 1 Khz counter value. This field is typically used by chipset implementations that can trigger on SOF but cannot accurately obtain a frame number.","When the packet is to be transmitted using a layer 3 protocol, the USB video header may be removed before sending the packet to a next stage in the data path. For example, a video header associated with a video payload may be replaced with a protocol header obtained from a protocol stack. The protocol header may then be used to transfer the payload over a wireless interface. In another implementation, however, the video header may be retained, e.g., appended to the protocol header, as a part of the payload, and so on. Although replacement of the USB header has been described in relation to video data, a variety of different types of headers may be replaced.","Example Methods",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 9","b":"900"},"An interface is provided that is configured to be accessible to one or more applications to achieve communicative coupling via a universal serial bus (USB) to a USB device (block ). For example, the USB driver  may provide a USB driver interface  to applications such as client software , an operating system , and so on.","In an implementation, the USB driver interface  mimics a conventional wired USB interface. In this way, applications (e.g., the client software ) that are configured to communicate with a conventional wired USB interface may interact with the USB driver interface  without being specially configured to do so. Thus, the USB driver interface  may achieve backward compatibility with conventional devices and applications.","Data, which is received via the interface, is communicated via the USB wirelessly to the USB device without making the one or more applications aware that the communicative coupling of the USB to the USB device is wireless (block ). Continuing with the previous example, because the USB driver interface  mimics a conventional wired USB interface from a point-of-view of the client software , interaction with the wireless USB may be performed using commands, protocols, and procedures of a conventional wired USB interface with the benefits of a wireless connection. Thus, the client software  may avail itself of a wireless connection without being aware that the connection is wireless. A variety of other examples are also contemplated as previously described.","Device Implementation Example",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 10","b":["1000","1000","1002","1004","1002","1004","1006","1008","1000"]},"USB may be utilized to transmit different amounts of data, including high bandwidth applications such as video data being transmitted from a capturing device (e.g., a web camera) and sent over USB to a display or storage device, e.g., a personal computer. Although an example SoC  is illustrated, it should be readily apparent that the techniques described herein may be implemented in a variety of other way, such as by multiple integrated circuits, software, and so on.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The detailed description is described with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different instances in the description and the figures may indicate similar or identical items.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 6","FIG. 4"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
