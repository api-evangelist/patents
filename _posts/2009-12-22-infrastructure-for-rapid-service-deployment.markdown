---
title: Infrastructure for rapid service deployment
abstract: A controller is used to provide a sharable, programmable and composable infrastructure. The controller includes a user manager to take input of user application programming interface calls that correspond to actions accepted from users. A physical manager fulfills requests from the user manager by manipulating distributed physical resources and logical devices in a network controlled by the controller. A configuration effector implements configuration changes to the physical resources and logical devices. A device monitor determines a status of the physical resources and logical devices, propagates the status to the physical manager for detecting a failure of the physical resources and logical devices in real-time, and mitigates the failure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566653&OS=08566653&RS=08566653
owner: AT&T Intellectual Property I, L.P.
number: 08566653
owner_city: Atlanta
owner_country: US
publication_date: 20091222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["1. Field of the Disclosure","The present disclosure relates to the field of computer networks. More particularly, the present disclosure relates to a sharable, programmable and composable infrastructure, consisting of carrier-grade equipment.","2. Background Information","New network services, service features and operational tools, are deployed by service providers from time to time. Modern networks are, however, used to provide a variety of services, while changes may be implemented at any time for fewer than all services provided using a network. There are primarily three drivers for changes in modern service provider networks. First, growth demands are fueled by an increase in broadband subscribers and media rich content, and traffic volumes on the Internet continue to show double digit growth rates year after year. Second, customers continually demand new and better service offerings, from application-level services like Voice Over Internet protocol (\u201cVoIP\u201d) and Internet Protocol Television (\u201cIPTV\u201d), connectivity services like Virtual Private Network (\u201cVPN\u201d) and IPv4\/IPv6 transport, traffic management services like Denial of Service (\u201cDDoS\u201d) mitigation or Content Distribution Networks (\u201cCDNs\u201d), or more mundane service features like the ability to signal routing preferences to the provider or load balancing features. Third, growing demands on operational procedures result from increasing use of IP networks for business critical applications. As an example of the third driver, end-user applications are often very intolerant of even the smallest network disruption, leading to the deployment of methods to decrease routing convergence in the event of network failures. Similarly, availability expectations, in turn driven by higher level business needs, make regularly planned maintenance events problematic, leading to the development of sophisticated operational methods to limit the impact of such maintenance.","For any network change, especially for new services and service features, corresponding changes may be made to a variety of operational support systems. Additionally, the introduction of new services or service features typically involves long deployment cycles. For example, configuration changes to network equipment are lab-tested before staged deployments are performed in an attempt to reduce the potential of any negative impact on existing services. However, testing in a lab environment is difficult due to the challenge of artificially recreating realistic network conditions in a lab setting.","In view of the foregoing, the present disclosure, through one or more of its various aspects, embodiments and\/or specific features or sub-components, is thus intended to bring out one or more of the advantages as specifically noted below.","According to the present disclosure, a controller provides a sharable, programmable and composable infrastructure. The controller may comprise a user manager to take input of user application programming interface calls that correspond to actions accepted from users. The controller may also comprise a physical manager to fulfill requests from the user manager by manipulating distributed physical resources and logical devices in a network controlled by the controller. The controller may further comprise a configuration effector to implement configuration changes to the physical resources and logical devices. The controller may additionally comprise a device monitor to determine a status of the physical resources and logical devices, propagate the status to the physical manager for detecting a failure of the physical resources and logical devices in real-time, and mitigate the failure.","A method provides a sharable, programmable and composable infrastructure using a controller. The method may comprise taking input, at a user manager, of user application programming interface calls that correspond to actions accepted from users. The method may further comprise fulfilling requests, at a physical manager, from the user manager, by manipulating distributed physical resources and logical devices in a network controlled by the controller. The method may also comprise implementing configuration changes, at a configuration effector, to implement configuration changes to the physical resources and logical devices. The method may further comprise determining, at a device monitor, a status of the physical resources and logical devices, propagating the status to the physical manager for detecting a failure of the physical resources and logical devices in real-time, and mitigating the failure.","A computer readable medium provides a sharable, programmable and composable infrastructure using a controller. The computer readable medium may comprise an input taking code segment that takes input, at a user manager, user application programming interface calls that correspond to actions accepted from users. The computer readable medium may also comprise a request fulfilling code segment that fulfills requests, at a physical manager, from the user manager by manipulating distributed physical resources and logical devices in a network controlled by a controller. The computer readable medium may additionally comprise a change implementing code segment that implements configuration changes, at a configuration effector, to the physical resources and logical devices. The computer readable medium may comprise may further comprise a determining code segment that determines, at a device monitor, a status of the physical resources and logical devices, propagates the status to the physical manager for detecting a failure of the physical resources and logical devices in real-time, and mitigates the failure.","This disclosure introduces a platform called ShadowNet, which may be used to exploit the strong separation provided by modern computing and network equipment between logical functionality and physical infrastructure. ShadowNet may allow logical topologies of computing servers, network equipment and links to be dynamically created, and then instantiated to and managed on the physical infrastructure. ShadowNet is a sharable, programmable and composable infrastructure, which may consist of carrier-grade equipment. ShadowNet is a fully operational network that may be connected to, but remain functionally separate from the provider production network. By exploiting the strong separation support, ShadowNet may allow multiple technology and service trials to be executed in parallel in a realistic operational setting, without impacting the production network. The present disclosure describes the ShadowNet architecture as well as the control framework designed for its operation, and illustrates the utility of the platform. The disclosure also presents a prototype implementation and demonstrates the effectiveness of the platform through extensive evaluation.","ShadowNet is an operational trial\/test network consisting of ShadowNet nodes which may be distributed throughout the backbone of a tier-1 provider. Each ShadowNet node may be composed of a collection of carrier-grade equipment, such as for example routers, switches and servers. Each node may in turn be connected to the Internet as well as to other ShadowNet nodes via a virtual backbone.","ShadowNet provides a sharable, programmable and composable infrastructure to enable the rapid trial or deployment of new network services or service features, or evaluation of new network management tools in a realistic operational network environment. Specifically, via the Internet connectivity of each ShadowNet node, traffic from arbitrary end-points can reach ShadowNet. ShadowNet connects to and interacts with the provider backbone much like a customer network would. As such, the provider backbone may be isolated from the testing and experimentation that can take place within ShadowNet. In the first instance, ShadowNet is capable of providing the means for testing services and procedures for subsequent deployment in a separate production network. However, it is also anticipated that ShadowNet functionality will be provided by the production network itself to directly enable rapid yet safe service deployment.","ShadowNet utilizes virtualization and\/or partitioning capabilities of equipment to enable platform sharing between different, concurrently running trials\/experiments. The equipment in ShadowNet nodes is programmable to enable experimentation and the introduction of new functionality. ShadowNet allows the dynamic composition of test\/trial topologies.","The functionality disclosed herein is provided in an operational network on carrier-grade equipment to enable a rapid service deployment\/evaluation platform in which technology or service trials performed in ShadowNet closely mimic the technology used in the provider network.","One aspect of the control framework is that the control framework provides a clean separation between the physical-level equipment in the testbed and the user-level slice specifications that can be constructed within a physical platform. A slice, which encapsulates a service trial, is essentially a container of the service design, including device connectivity and placement specification. Once instantiated, a slice also contains the physical resources allocated to the service trial. Despite this clean separation, the partitioning capabilities of the underlying hardware allow virtualized equipment to be largely indistinguishable from the physical counterparts of this equipment, except that the virtualized equipment contains fewer resources. The ShadowNet control framework provides a set of interfaces allowing users to programmatically interact with the platform to manage and manipulate the users' slices.","The present disclosure presents a network control framework that allows users to manipulate the users' slices and\/or the physical resource contained therein with a simple interface. The present disclosure additionally describes physical-level realizations of user-level slice specifications using carrier-grade equipment and network services\/capabilities. The present disclosure further presents a prototype implementation and evaluation of the presently-disclosed architecture.","In embodiments, ShadowNet may serve as a platform for rapid and safe network change. In yet further embodiments, ShadowNet may also allow for the rapid composition of distributed computing and networking resources. Such computing and networking resources may further be contained in a slice and realized in carrier-grade facilities, and may be utilized to introduce and test new services or network management tools. The ShadowNet control framework allows the network-wide resources that make up each slice to be managed either collectively or individually.","In the first instance, ShadowNet limits new services to the set of resources allocated, i.e., to those contained in a slice. Limiting new services in this way would be a sufficient solution for testing and trying out new services in a realistic environment before introducing such services into a production network. Longer term, however, the base functionality provided by ShadowNet may be used in the production network and allow resources and functionality from different slices to be gracefully merged under the control of the ShadowNet control framework.","The present disclosure describes the ShadowNet architecture and how the ShadowNet architecture can be used to realize a sophisticated service. Further, the present disclosure compares ShadowNet with several experimental network platforms, and shows that ShadowNet is unique in terms of its ability to provide realistic network testing. Finally, the present disclosure describes the architecture of the ShadowNet controller.","As discussed earlier, new operational solutions are increasingly more sophisticated and automated. ShadowNet may provide the means for safely testing such functionality in a realistic environment. ShadowNet enables the development of mechanisms and network management primitives that would allow new services and operational tools to be safely deployed directly in production networks.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 1","b":["100","100","100","100","101"]},"In a networked deployment, the computer system may operate in the capacity of a server or as a client user computer in a server-client user network environment, or as a peer computer system in a peer-to-peer (or distributed) network environment. The computer system  can also be implemented as or incorporated into various devices, such as a personal computer (PC), a tablet PC, a set-top box (STB), a personal digital assistant (PDA), a mobile device, a global positioning satellite (GPS) device, a palmtop computer, a laptop computer, a desktop computer, a communications device, a wireless telephone, a land-line telephone, a control system, a camera, a scanner, a facsimile machine, a printer, a pager, a personal trusted device, a web appliance, a network router, switch or bridge, or any other machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. In a particular embodiment, the computer system  can be implemented using electronic devices that provide voice, video or data communication. Further, while a single computer system  is illustrated, the term \u201csystem\u201d shall also be taken to include any collection of systems or sub-systems that individually or jointly execute a set, or multiple sets, of instructions to perform one or more computer functions.","As illustrated in , the computer system  may include a processor , for example, a central processing unit (CPU), a graphics processing unit (GPU), or both. Moreover, the computer system  can include a main memory  and a static memory  that can communicate with each other via a bus . As shown, the computer system  may further include a video display unit , such as a liquid crystal display (LCD), an organic light emitting diode (OLED), a flat panel display, a solid state display, or a cathode ray tube (CRT). Additionally, the computer system  may include an input device , such as a keyboard, and a cursor control device , such as a mouse. The computer system  can also include a disk drive unit , a signal generation device , such as a speaker or remote control, and a network interface device .","In a particular embodiment, as depicted in , the disk drive unit  may include a computer-readable medium  in which one or more sets of instructions , e.g. software, can be embedded. A computer-readable medium  is a tangible article of manufacture, from which sets of instructions  can be read. Further, the instructions  may embody one or more of the methods or logic as described herein. In a particular embodiment, the instructions  may reside completely, or at least partially, within the main memory , the static memory , and\/or within the processor  during execution by the computer system . The main memory  and the processor  also may include computer-readable media.","In an alternative embodiment, dedicated hardware implementations, such as application specific integrated circuits, programmable logic arrays and other hardware devices, can be constructed to implement one or more of the methods described herein. Applications that may include the apparatus and systems of various embodiments can broadly include a variety of electronic and computer systems. One or more embodiments described herein may implement functions using two or more specific interconnected hardware modules or devices with related control and data signals that can be communicated between and through the modules, or as portions of an application-specific integrated circuit. Accordingly, the present system encompasses software, firmware, and hardware implementations.","In accordance with various embodiments of the present disclosure, the methods described herein may be implemented by software programs executable by a computer system. Further, in an exemplary, non-limited embodiment, implementations can include distributed processing, component\/object distributed processing, and parallel processing. Alternatively, virtual computer system processing can be constructed to implement one or more of the methods or functionality as described herein.","The present disclosure contemplates a computer-readable medium  that includes instructions  or receives and executes instructions  responsive to a propagated signal, so that a device connected to a network  can communicate voice, video or data over the network . Further, the instructions  may be transmitted or received over the network  via the network interface device .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIGS. 2(","FIG. 2(","FIG. 2(","FIG. 2("],"i":["a","b","a","b","b"],"b":["2","208","200","206","200","206","210","216","118"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["300","302","304","306","308","322","308","318","310","316","310","318","308","316"]},"As depicted in , central to ShadowNet functionality is the ShadowNet Controller . The Controller  facilitates the specification and instantiation of a service trial in the form of a slice owned by a user. The Controller  provides a programmatic access  to ShadowNet users , allowing them to create the topological setup of the intended service trial or deployment. Alternatively users  can access ShadowNet through a Web-based portal , which in turn will interact with the ShadowNet Controller via the User API . The ShadowNet Controller  keeps track of the physical devices , ,  that make up each ShadowNet node  by constantly monitoring them, and further manages and manipulates those physical devices , ,  to realize the user-level APIs, while maintaining a clean separation between the abstracted slice specifications and the way they are realized on the physical equipment. As would be readily understood by those of ordinary skill in the art, the user-level APIs  also enable users to dynamically interact with and manage the physical instantiation of the users' slices. Specifically, users  can directly access and configure each instantiated logical device.","ShadowNet allows a user to deactivate individual devices in a slice or the slice as a whole, by releasing the allocated physical resources , , . ShadowNet decouples the persistent state from the instantiated physical devices, so that the state change associated with a device in the specification is maintained even if the physical instantiation is released. Subsequently, the device in the specification can be re-instantiated (assuming that sufficient resources are available) and the saved state restored thereby leaving the user perceived slice intact. For example, the configuration change made by a user  to a logical router can be maintained and applied to a new instantiated logical router , even if the physical placement of the logical device is different.","In non-limiting embodiments, ShadowNet may be used to run a customer trial of a load-aware anycast Content Distribution Network (CDN).  depicts how all the components of such a CDN can be realized on the ShadowNet platform. Specifically, a network, complete with provider edge (PE) , , ,  and , and core routers , , ,  and , can be dynamically instantiated to represent a small backbone network. Further, servers in a subset of the ShadowNet nodes can be allocated and configured to serve as content caches. A load-aware anycast CDN utilizes route control to inform BGP selection based on the cache load, i.e., using BGP, traffic can be steered away from overloaded cache servers. In ShadowNet, this BGP speaking route control entity can be instantiated on either a server or a router depending on the implementation. Appropriate configuration\/implementation of BGP, flow-sampling, and server load monitoring complete the infrastructure picture. Finally, actual end-user requests can be directed to the ShadowNet infrastructure, e.g., by resolving a content URL to the anycast address(es) associated with and advertised by the CDN contained in the ShadowNet infrastructure.","In embodiments, several capabilities required of the ShadowNet infrastructure to enable such realistic service evaluation can be identified: (i) to gain confidence in the equipment used in the trial, the ShadowNet infrastructure should be the same as, or similar to, equipment used in the production network (production-grade devices); (ii) to thoroughly test load feedback mechanisms and traffic steering algorithms, the ShadowNet architecture requires participation of significant numbers of customers (realistic workloads); (iii) having significant numbers of customers, in turn, requires sufficient network capacity (high capacity backbone); (iv) realistic network and CDN functionality require realistic network latencies and geographic distribution (geographic coverage); (v) finally, the CDN control framework could dynamically adjust the resources allocated based on the offered load (dynamic reconfiguration).","In embodiments, ShadowNet is capable of dynamically changing slice specifications, thereby enabling machines for content caches and network links to be dynamically spawned or removed in response to increased or decreased client requests.","Additionally, ShadowNet is built upon a production ISP network having its own virtual backbone with bandwidth and latency guarantees, thereby pushing the tested service closer to the core of the ISP network where the actual production service would be deployed.","In embodiments, the ShadowNet controller  consists of a user-level manager , a physical-level manager , a configuration effector  and a device monitor , as shown in . Each component is described below. In one particular non-limiting embodiment, the ShadowNet design utilizes a centralized controller that interacts with and controls all ShadowNet nodes.","In embodiments, the user-level manager  is designed to take the input of user-level API calls . Each API call  corresponds to an action that the users of ShadowNet are allowed to perform. A user can create a topological specification of a service trial, instantiate the specification to physical resources, interact with the allocated physical resources, and deactivate the slice when the test finishes. The topology specification of a slice  may stored by the user-level manager in persistent storage , so that the slice can be retrieved, revived and modified over time. The user-level manager also helps maintain and manage the saved persistent state from physical instantiations. By retrieving saved states and applying them to physical instantiations, advanced features, like device duplication, may be enabled.","The user-level manager is essentially a network service used to manipulate configurations of user experiments. The user-level manager may be accessed from within the experiment, facilitating network control in a closed-loop fashion. In the embodiment shown in , the route control component may dynamically add content caches ,  when user demand is high by calling the user-level API  to add more computing and networking resources via the user-level manager .","In embodiments, the physical-level manager  fulfills requests from the user-level manager  in the form of physical-level API calls  by manipulating the physical resources  in ShadowNet. To fulfill the requests, the physical-level manager maintains three types of information: 1) \u201cstatic\u201d information, such as the devices in each ShadowNet node and the capabilities of those devices; 2) \u201cdynamic\u201d information, e.g., the online status of all devices and whether any interface modules are not functioning; and 3) \u201callocation\u201d information, which is the up-to-date usage of the physical resources.","Static information is changed when new devices are added or old devices are removed. Dynamic information is constantly updated by the device monitor . The physical level manager  may configure physical devices to spawn virtualized device slivers for the instantiation of user-level devices and user-level connectivities, manage the states of these physical, and delete existing instantiated slivers. A sliver is a share of the physical resource, e.g., a virtual machine or a sliced physical link. The physical-level manager  may handle requests, such as creating a VM, by figuring out the physical device  to configure and how to configure it. The actual management actions may be performed via the configuration effector .","In non-limiting embodiments, the configuration effector  specializes in realizing configuration changes to physical devices . Configlets  are parameterized configuration or script templates, saved in the persistent storage  and retrieved on demand. To realize the physical-level API calls , the physical-level manager  may decide on the appropriate configlet  to use and generates parameters based on the request and the physical resource information . The configuration effector  executes the configuration change on target physical devices .","In further embodiments, a device monitor  actively or passively determines the status of physical devices  or components and propagates \u201cdynamic\u201d information to the physical-level manager . Effectively, the device monitor  detects any physical device failures in real time. As the physical-level manager  receives the update, it can perform appropriate actions to mitigate the failure and to minimize any inconsistency of physical instantiation and user specifications. Device or component recovery can be detected as well, and, as such, the recovered resource can again be considered usable by the physical-level manager .","The three layers embedded in a slice , and the interactions S, S, S and S among them, are depicted in . In embodiments, a user of ShadowNet may create a service topology in the form of a slice , which is manipulated through the user level API calls supported by the ShadowNet controller. This section outlines user-exposed functionalities that the APIs implement.","To create a new service trial in non-limiting embodiments, an authorized user of ShadowNet may create a slice. As a basic support, the user specifies the topological setup through the user-level API S (a in ). , for example, depicts one embodiment of a topology of a hypothetical slice and the API call sequence that creates it.","In embodiments, the slice  created acts like a placeholder for a collection of user-level objects, including devices and connectivities. Three generic types of user-level devices (UsrDevice) are supported: router (UsrRouter), machine (UsrMachine), and switch (UsrSwitch). Two UsrDevices can be connected to each other via a user-level link (UsrLink). User-level interfaces (UsrInt) can be added to a UsrDevice explicitly by the slice owner. In some cases, however, they may be created implicitly when a UsrLink is added to connect two UsrDevices.","A UsrMachine  represents a generic computing resource where the user can run service applications. A UsrRouter  may run routing protocols, forward and filter packets, etc. Further, UsrRouters are programmable, allowing for custom router functionality. A UsrLink  ensures that when the UsrDevice on one end sends a packet, the UsrDevice on the other end will receive it. A UsrSwitch  provides a single broadcast domain to the UsrDevices connecting to it. ShadowNet provides the capability and flexibility of putting geographically dispersed devices on the same broadcast domain. For example, UsrMachines, such as  and , although specified in different locations, are all connected to UsrSwitch . Besides internal connectivity among UsrDevices, ShadowNet can drive live Internet traffic to a service trial by allocating a public IP prefix for a user-level interface, Usrint, on a UsrDevice. For example, UsrLink  is used to connect UsrRouter  to the Internet, allocating an IP prefix of 141.212.111.0\/24, as illustrated in .","Besides creating devices and links, a user of ShadowNet may also associate properties with different objects, e.g., the OS image of a UsrMachine and the IP addresses of the two interfaces on each side of a UsrLink. As a distributed infrastructure, ShadowNet allows users to specify location preference for each device as well, e.g., California for M , M  and R . This location information is used by the physical layer manager when instantiation is performed.","As illustrated in , step b, represented by reference S, one embodiment permits a user to instantiate some or all objects in the user's slice  onto physical resources. From this point on, the slice  not only contains the abstracted slice specification , but also has associated the physical resources to which the instantiated objects (i.e., physical instantiations ) in the specification S are mapped.","ShadowNet provides a number of types of instantiation strategies. In one embodiment, a user may design a full specification for the slice and instantiate all the objects in the specification together. In a second embodiment, user-level objects in the specification may be instantiated upon request at any time. For example, the user-level objects can be dynamically instantiated as they are added to the service specification. Dynamically instantiating user-level objects is useful in situations requiring building a slice interactively and\/or modifying the slice over time, e.g., extending the slice resources based on increased demand.","ShadowNet may also limit the number of shares (slivers) a physical resource provides, thereby simplifying the resource allocation problem to a straightforward availability check.","In embodiments, ShadowNet allows a user to access the physical instantiation of the UsrDevices and UsrLinks in the user's slice, e.g., logging into a router or tapping into a link, as shown in step c S in . This support may be necessary for a number of reasons. First, a user may want to install software on UsrMachines or UsrRouters and\/or configure UsrRouters for forwarding and filtering packets. Second, purely from an operational point of view, operators may desire direct access to the devices (e.g., a terminal window on a server or command line access to a router).","In embodiments, for UsrMachines and UsrRouters, users may be permitted to log into the device and make any changes they want. For UsrLinks and UsrSwitches, packet dump feeds may be provided upon request. This support is crucial for service testing, debugging and optimization since such support can give the capability and flexibility of sniffing packets at any place within a service deployment without installing additional software on end-points.","Enabling device access may also enable users to change the persistent state of the physical instantiations, such as for example, files installed on disks and configuration changes on routers. In embodiments, ShadowNet decouples the persistent state from the physical instantiation. When the physical instantiation is modified, the changed state also becomes part of the slice, as shown in step d S in .","In embodiments, the instantiated user-level objects in the specification of a slice  may be deactivated, releasing the physical instantiations of the objects from the slice by giving them back to the ShadowNet infrastructure. For example, a user may choose to deactivate an under-utilized slice as a whole so that other users can test their slices when physical resources are scarce. While releasing the physical resource, the persistent state is extracted and stored as part of the slice, as shown in step f S in . As a result, when the user decides to revive a whole slice or an object in the slice, new physical resources may be acquired and the stored state may be associated with the object applied to it, as shown in step e S in . Operationally speaking, a user is able to deactivate a slice and reactivate it later, most likely (but not necessarily) on a different set of resources but still functioning like before.","Abstracting the persistent state from the physical instantiation enables other useful primitives in the context of service deployment. If, for example, a new UsrDevice is instantiated and the state of an existing UsrDevice is applied to it, the existing UsrDevice is effectively duplicated. In such an example, a user may instantiate a new UsrMachine with only the basic operating system (\u201cOS\u201d) setup, log into the machine to install necessary application code, and configure the OS. With the support provided by ShadowNet, the user is then able to spawn several new UsrMachines and apply the state of the first machine. Spawning new UsrMachines and applying the state of the first machine eases the task of creating a cluster of devices serving similar purposes. From the ShadowNet control perspective, this separation allows sophisticated techniques to hide physical device failures. For example, if a physical router hosting numerous logical routers experiences a power failure, only new instantiations on other available devices of the same type need to be created before the states are applied to them. During the whole process, the slice specification, which is what the user perceives, remains intact.","In embodiments, the slice specification instantiation  may be performed by the ShadowNet controller in a fully automated fashion. The methods to instantiate on two types of resource are described as follows.","ShadowNet currently utilizes UsrMachines and UsrRouters. Each Virtual Machine (\u201cVM\u201d) and logical router created is considered a device sliver. To instantiate a UsrRouter or a UsrMachine, a ShadowNet node is chosen based on the location property specified. Matching physical devices on the node are then enumerated for availability checking, i.e., whether a router is capable of spawning a new logical router. When there are multiple choices, usage may be distributed across devices in a round-robin fashion. Location preference may be unspecified, such as in situations where the instantiation of UsrDevice is immaterial to the user. Such situations may, but do not necessarily, include, for example, when the user is testing a router configuration option. In such a case, the ShadowNet node chosen is the one where that type of device is least utilized. When no available resource can be allocated, an error is returned.","The production network associated with ShadowNet provides both Internet connection and virtual backbone connectivity to each ShadowNet node. A logical router, called the head router of the ShadowNet node, may be configured to terminate these two connections. With the ShadowNet backbone connectivity provided by the ISP, all head routers form a full-mesh, serving as the core routers of ShadowNet. For Internet connectivity, the head router may interact with the ISP's border router, by, for example, announcing BGP routes.","Connecting device slivers on the same ShadowNet node can be handled by the switching layer of that node. The head routers are used when device slivers across nodes need to be connected. ShadowNet makes use of Carrier-Supporting-Carrier (CsC) capabilities provided by MPLS-enabled networks. CsC utilizes the VPN service provided by the ISP, and stacks on top of it another layer of VPN services, running in parallel with, but isolated from, each other. For example, layer-2 VPNs (so called pseudo-wire) and Virtual Private Local Area Network Service (\u201cVPLS\u201d) VPNs can be stacked on top of a layer-3 VPN service.","The approach described in this disclosure has a number of key benefits. First, each layer-2 VPN or VPLS instance encapsulates the network traffic within the instance, thus providing strong isolation across links. Second, the approach of this disclosure offers off-the-shelf production-grade services, which are much more efficient than manually configured tunnels. Third, the approach of this disclosure is more realistic for users because there is no additional configuration needed in the logical routers they use. The layer-2 VPN and VPLS options heavily used in ShadowNet provide layer-2 connectivity. In other words, with router programmability, any layer-3 protocol besides IP can run on top of it.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 8"},"UsrLink: To instantiate a UsrLink, the instantiations of the two UsrDevices on the two ends of the UsrLink are first identified. shows three cases.","1) Two slivers are on the same physical device. For example, VM  and VM  are on the same server; LR  and Head  are on the same router. In this case in which two slivers are on the same physical device, local bridging is used to realize the UsrLink.","2) Two slivers are on the same ShadowNet node, but not the same device. For example, VM  and LR , LR  and LR . A dedicated VLAN on that node is used for each UsrLink of this type in which two slivers are on the same ShadowNet node, but not on the same device, e.g., LR  will be configured with two interfaces, joining two different VLAN segments, one for the link to VM  and the other one to LR .","3) Two slivers are on different nodes. For example, LR  and LR . In this case in which two slivers are on different nodes, each sliver is first connected to its local head router ( and , respectively) using the two methods described above. Then the head router creates a layer-2 VPN to bridge the added interfaces, effectively creating a cross-node tunnel connecting the two slivers.","In each scenario above, the types of the physical interfaces that should be used to enable the link are decided, the selected physical interfaces are configured, and the resource usage information of the interfaces is updated.","Those having ordinary skill in the art would readily understand that MPLS-VPN technologies achieve much higher levels of realism over software tunnels because almost no configuration is required at the end-points that are being connected. Accordingly, to enable the direct link between LR  and LR , the layer-2 VPN configuration only happens on Head  and Head . As a result, if the user logs into the logical router LR  after its creation, the user would only see a \u201cphysical\u201d interface setup in the configuration, even without IP configured, yet that interface leads to LR  according to the layer-2 topology.","User-view switches: ) shows virtual machines VM  and VM , logic routers LR , LR  and LR , and head nodes Head  and Head . Unlike for UsrMachines and UsrRouters, ShadowNet does not allocate user-controllable device slivers for the instantiation of UsrSwitches, but rather provides an Ethernet broadcasting medium.","Referring to ), to instantiate a UsrSwitch connecting to a set of UsrDevices instantiated on the same ShadowNet node, a dedicated VLAN-ID on that node is allocated and those device slivers are configured to join the VLAN (i.e., LR  and LR ). If the device slivers mapped to the UsrDevices distribute across different ShadowNet nodes, the slivers are first recursively bridged on the same node using VLANs, and then one VPLS-VPN instance on each head router (i.e., Head  and Head ) is configured to bridge all those VLANs. Recursively bridging and then configuring each head router in this way puts all those device slivers (i.e., VM , LR , LR ) onto the same broadcast domain, thereby achieving a high degree of realism. For example on LR  and LR , the instantiated logical router only shows one \u201cphysical\u201d interface in its configuration.","Internet access: It is assumed that ShadowNet nodes can use a set of prefixes to communicate with any end-points on the Internet. The prefixes can either be announced through BGP sessions configured on the head routers to the ISP's border routers, or statically configured on the border routers.","To instantiate a UsrDevice's Internet connectivity, the UsrDevice's instantiation is first connected to the head router on the same node. Then the head router is configured so that the allocated prefix is correctly forwarded to the UsrDevice over the established link and the route for the prefix is announced via BGP to the ISP. For example, a user specifies two UsrRouters connecting to the Internet, allocating them with prefix 136.12.0.0\/24 and 136.12.1.0\/24. The head router should in turn announce an aggregated prefix 136.12.0.0\/23 to the ISP border router.","As a shared infrastructure for many users, ShadowNet attempts to minimize the interference among the physical instantiation of different slices. Each virtual machine is allocated with its own memory address space, disk image, and network interfaces. However, some resources, like the CPU, for example, are shared among virtual machines, so that one virtual machine could potentially drain most of the CPU cycles.","Those having ordinary skill in the art would readily understand that a logical router has its own configuration file and maintains its own routing table and forwarding table. However, control plane resources, such as CPU and memory are shared among logical routers.","The isolation of packets among different UsrLinks is guaranteed by the physical device and routing protocol properties. Router support is leveraged for packet filtering and shaping to prevent IP spoofing and bandwidth abusing. The corresponding configuration is made on head routers, where end-users cannot access. For each UsrLink, a default rate-limit (e.g., 10 Mbps), which can be upgraded by sending a request via the userlevel API, is imposed. Rate limiting is achieved via hardware traffic policers and Linux kernel support.","Console or remote-desktop access: For each VM running on VirtualBox, a port is specified on the hosting server to enable Remote Desktop protocol for graphical access restricted to that VM. If the user prefers command line access, a serial port console in the VMimages is enabled and mapped to a UNIX domain socket on the hosting machine's file system. On a physical router, each logical router can be configured to be accessible through Secure Shell (\u201cSSH\u201d) using a given username and password pair, while confining the access to be within the logical router only.","Though the device slivers of a slice can be connected to the Internet, the management interface of the actual physical devices in ShadowNet should not be. For example, the IP address of a physical server should be contained within ShadowNet rather than accessible globally. By having the IP address of a physical server contained within ShadowNet, users are able to access the device slivers through one level of indirection via the ShadowNet controller.","Sniffing links. To provide packet traces from a particular UsrLink or UsrSwitch, a SPAN port on the switching layer of a ShadowNet node is dynamically configured so that a dedicated server or a pre-configured VM can sniff the VLAN segment that the UsrLink or UsrSwitch is using. The packet trace can be redirected through the controller to the user in a streaming fashion or saved as a file for future downloading. There are cases where no VLAN is used, e.g., for two logical routers on the same physical router connected via logical tunnel interfaces. In this case, the tunnel interfaces are deactivated and the UsrLink is reinstantiated using VLAN setup to support packet capture. This deactivating and re-instantiating action, however, happens at the physical-level and is thus transparent to the user-level, as the slice specification remains intact.","To extract the state of an instantiated UsrMachine, which essentially is a VM, the hard drive image of the virtual machine is maintained. The configuration file of a logical router is considered as the persistent state of the corresponding UsrRouter. Reviving stored state or a UsrMachine can be done by attaching the saved disk image to a newly instantiated VM. On the other hand, UsrRouter state, i.e., router configuration files, needs additional processing. For example, a user-level interface may be instantiated as interface fe-0\/1\/0.2 and thus appears in the configuration of the instantiated logical router. When the slice is deactivated and instantiated again, the Usrint may be mapped to a different interface, say ge-0\/2\/0.1. To deal with this complication of the Usrint being mapped to a different interface, the retrieved configuration is normalized and physical-dependent information is replaced with user-level object handles, which is then saved as the state.","Unexpected physical device failures can occur, and, in embodiments, ShadowNet tries to mitigate failures as quickly as possible to reduce user perceived down time. One benefit of separating the states from the physical instantiation is that a new physical instantiation can be replaced with the saved state applied without affecting user perception. Once a device or a physical component is determined to be offline, the ShadowNet controller identifies all instantiated user-level devices associated to it. New instantiations are created on healthy physical devices and saved states are applied if possible. Note that certain users are specifically interested in observing service behavior during failure scenarios. Users are allowed to specify whether they want physical failures to pass through, which disables the failure mitigation functionality. On the other hand, failure can be injected by the ShadowNet user-level API, for example tearing down the physical instantiation of a link or a device in the specification to mimic a physical link-down event.","For physical routers, the device monitor performs periodic retrieval of the current configuration files, preserving the states of UsrRouters more proactively. When a whole physical router fails, the controller creates new logical routers with connectivity satisfying the topology on other healthy routers and applies the saved configuration, such as BGP setup. If an interface module fails, the other healthy interfaces on the same router are used instead. Note that the head router is managed in the same way as other logical routers, so the ShadowNet can also recover from router failures where head routers are down.","A physical machine failure can be catastrophic because recovering files from a failed machine can be challenging and particularly infeasible in the case of duplicating large files, such as VM images, to the controller. One potential solution is to deploy a distributed file system among the physical machines within one ShadowNet node.","In this section, one non-limiting embodiment representing a prototype implementation of the ShadowNet infrastructure, including the hardware setup and management controller, is briefly described. To evaluate the architecture, two ShadowNet nodes are built and deployed locally.","In embodiments, each prototype node has two routers, one switch, and four servers. The routers are equipped with one or two PICs (Physical Interface Cards), Fast Ethernet PIC, and tunneling capability. Each server has two Ethernet interfaces and a virtualization package is used to host the virtual machines. The switch is capable of configuring VLANs and enabling SPAN ports.","In the local deployment, two routers act as an ISP backbone. MPLS is enabled on the routers to provide layer-3 VPN service as the ShadowNet backbone. BGP sessions are established between the head router of each node and its adjacent router, enabling external traffic to flow into ShadowNet. The network management interface fxp0 of the routers and one of the two Ethernet interfaces are connected to a dedicated and separate management switch. These interfaces are configured with private IP addresses, and used for physical device management only, thereby mimicking the out-of-band access which is common in ISP network management.","In embodiments, the ShadowNet controller runs on a dedicated machine, sitting on the management switch. In embodiments, the controller may be implemented in Perl. A Perl module, with all the user-level APIs, can be imported in Perl scripts to create, instantiate and access service specifications, similar to the code shown in . In embodiments, a mysq1 database runs on the same machine as the controller, serving largely, though not entirely, as the persistent storage connecting to the controller. The database stores physical device information, user specifications, and normalized configuration files, etc. In embodiments, a different set of tables is used to maintain physical-level information, e.g., phy_device_table, and user-level information, e.g., usr_table. The Perl module retrieves information from the tables and updates the tables when fulfilling API calls.","In non-limiting embodiments, the configuration effector of the ShadowNet controller is implemented within the Perl module as well. The NetConf XML API exposed by the routers may be used to configure and control them. Configlets in the form of parametrized XML files may be stored on the controller. The controller may periodically retrieve the configuration of the physical router in XML format and when UsrRouters are deactivated. In embodiments, a specialized XML parser may be used to extract individual logical router configurations and normalize relative fields, such as interface-related configurations. The normalized configurations may be serialized in text format and stored in the mysq1 database associating to the specific UsrRouter.","Shell and Perl scripts, which wrap the virtualization software package management interface, may be executed on the hosting servers to automatically create VMs, snapshot running VMs, and stop or destroy VMs. In embodiments, the configuration effector may be configured to log into each hosting server and execute those scripts with the correct parameters. On the servers, low-priority cron jobs may be executed to maintain a fair amount of default VM images of different OS types. In this case, the request of creating a new VM can be fulfilled fairly quickly, amortizing the overhead across time. In embodiments, the following steps may be used to direct the traffic of an interface used by a VM to a particular VLAN. First, tunct1 is run on the hosting server to create a tap interface, which is configured in the VMM to be the \u201cphysical\u201d interface of the VM. Second, 802.1 Q kernel module is used to create VLAN interfaces on the hosting server, like eth1.4, which participates in VLAN4. Finally brct1 is used to bridge the created tap interface and VLAN interface.","Instead of effecting one configuration change per action, the changes to the physical devices may be batched and executed once per device, thus reducing authentication and committing overheads. Additionally, all devices may be manipulated in parallel.","In embodiments, the device monitor module may run as a daemon on the controller machine. SNMP trap messages may be enabled on the routers and sent over the management channel to the controller machine. Ping messages may be sent periodically to all devices. The two sources of information may be processed in the background by the monitoring daemon. When failures are detected, the monitoring module may call the physical-level APIs in the Perl module, which in response may populate configlets, and execute on the routers to handle failures. An error message may also be automatically sent to the administrators.","In this section, various aspects of ShadowNet are evaluated based on two example slices instantiated on one embodiments of the presently claimed invention. The user specifications in one non-limiting embodiment are illustrated on the left side of ; the physical realization of that specification is on the right. In Slice, two locations are specified, namely LA and NY. On the LA side, one UsrMachine (M) and one UsrRouter (R) are specified. R is connected to M through a UsrLink. R is connected to the Internet through L and to R directly via L. The setup is similar on NY side. To enable the correct forwarding between M and M, minimum IP and OSPF configuration is used. Slice has essentially the same setup, except that the two UsrRouters do not have Internet access.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 9","b":["900","1","938","1","946","1","906","1","907","1","904","5","918","1","946","2","964","950","968"]},"Using one approach, the ShadowNet controller spends 82 seconds on the physical routers alone by making 13 changes, resulting in a 94-second execution time in total. For machine configuration, two scripts are executed for creating the virtual machines, and two for configuring the link connectivity. With the two simple optimization heuristics described earlier, the total execution time is reduced to 7.4 seconds. The router and machine configurations are also parallelized, to yield a total equal to DB+max(Router, Machine). Parallelization ensures that the total time to create a slice does not increase linearly with the size of the slice. It is estimated that the creation time for most slices is within 10 seconds.","Various stress tests are performed to examine ShadowNet's capability and fidelity. In one non-limiting embodiment, L  is made the bottleneck link and different link constraints are set using the router's traffic policer. The observed bandwidth that M  and M  can achieve on the link is tested by sending packets as fast as possible. Packets are dropped from the head of the queue. The results demonstrate that ShadowNet can closely mimic different link capacities.","When no constraint is placed on L , the throughput achieved is around 94.8 Mbps, which is close to maximum because the routers used as ISP cores are equipped with Fast Ethernet interfaces, which have a 100 Mbps capacity, and the VM is specified with 100 Mbps virtual interface. Physical gigabit switches are usually not the bottleneck, since two physical machines on the same physical machines connected via VLAN switch can achieve approximately 1 Gbps bandwidth.","Because evaluation is performed on a local testbed, the jitter and loss rate is almost zero, while the delay is relatively constant.","To understand the impact of a stressed control plane on other logical routers, software routers are run on both M  and M . In embodiments, the two software routers may be configured to peer with the BGP processes on LR  and LR . The software routers may be loaded with BGP routing tables of different sizes, transferred to LR  and LR . The BGP event log on the physical router may then be analyzed by measuring the duration from the first BGP update message to the time when all received routes have been processed.","In ), the bottom line shows the processing time of the BGP process on LR  to process all the routes if LR  is BGP-inactive. The top line shows the processing time for LR  when LR  is also actively processing the BGP message stream. Both processing times increase linearly with the number of routes received. As can be seen in ), the two lines are almost parallel, signifying that the delay is proportional to the original processing time. The difference of receiving 10 k routes is about 13 seconds, 73 seconds for 50 k routes. CPU usage is 100% even if only LR  is BGP-active. Two physical machines are also used to peer with LR  and LR  to confirm that the bottleneck is due to the router control processor.","In non-limiting embodiments, L  and L  share the same physical interfaces, eth1 on Server , and ge-0\/1\/0 on Router . The bandwidth usage of both L  and L  are restricted to 1 Mbps by applying traffic policer on the ingress interfaces on LR  and LR . From the perspective of a given UsrLink, say, L , two aspects are evaluated regardless of the amount of traffic sent on L : (1.) L  can always achieve the maximum bandwidth allocated (e.g., 1 Mbps given a 100 Mbps interface); and (2.) L  can always obtain its fair share of the link. A traffic policer is applied on the ingress interfaces (ge-0\/1\/0) on LR  and LR , restricting the bandwidth of L  and L  to 1 Mbps. Simultaneous traffic is sent from M  via L  to M , and from M  via L  to M .",{"@attributes":{"id":"p-0114","num":"0113"},"figref":["FIG. 11(","FIG. 11("],"i":["a","b"],"b":["2","914","1","906","3","922","1","904","6","924","1","904","2","914"]},"The recovery time in response to a hardware failure in ShadowNet is evaluated. While Slice is running, M  continuously sends packets to M  via L . The Ethernet cable on the Ethernet module ge-0\/1\/0 is physically disconnected, triggering SNMP LinkDown trap message and the subsequent reconfiguration activity. A separate interface (not shown in the figure) is found to be usable, then automatically configured to resurrect the down links. ) shows the packet rate that M  observes. The downtime is about 7.7 seconds, mostly spent on effecting router configuration change. Failure detection is fast due to continuous SNMP messages, and similarly controller processing takes less than 100 ms. The short downtime and controller processing times exemplifies the benefit of strong isolation in ShadowNet, as the physical instantiation is dynamically replaced using the previous IP and OSPF configuration, leaving the user-perceived slice intact after a short interruption. To further reduce the recovery time, the ShadowNet controller can spread a UsrLink's instantiation onto multiple physical interfaces, each of which provides a portion of the bandwidth independently.","Although the invention has been described with reference to several exemplary embodiments, it is understood that the words that have been used are words of description and illustration, rather than words of limitation. Changes may be made within the purview of the appended claims, as presently stated and as amended, without departing from the scope and spirit of the invention in its aspects. Although the invention has been described with reference to particular means, materials and embodiments, the invention is not intended to be limited to the particulars disclosed; rather the invention extends to all functionally equivalent structures, methods, and uses such as are within the scope of the appended claims.","While the computer-readable medium is shown to be a single medium, the term \u201ccomputer-readable medium\u201d includes a single medium or multiple media, such as a centralized or distributed database, and\/or associated caches and servers that store one or more sets of instructions. The term \u201ccomputer-readable medium\u201d shall also include any medium that is capable of storing, encoding or carrying a set of instructions for execution by a processor or that cause a computer system to perform any one or more of the methods or operations disclosed herein.","In a particular non-limiting, exemplary embodiment, the computer-readable medium can include a solid-state memory such as a memory card or other package that houses one or more non-volatile read-only memories. Further, the computer-readable medium can be a random access memory or other volatile re-writable memory. Additionally, the computer-readable medium can include a magneto-optical or optical medium, such as a disk or tapes or other storage device to capture carrier wave signals such as a signal communicated over a transmission medium. Accordingly, the disclosure is considered to include any computer-readable medium or other equivalents and successor media, in which data or instructions may be stored.","Although the present specification describes components and functions that may be implemented in particular embodiments with reference to particular standards and protocols, the disclosure is not limited to such standards and protocols. For example, standards for Internet and other packed switched network transmission, such as for example VoIP, DDoS, BGP and MPLS, represent examples of the state of the art. Such standards are periodically superseded by faster or more efficient equivalents having essentially the same functions. Accordingly, replacement standards and protocols having the same or similar functions are considered equivalents thereof.","The illustrations of the embodiments described herein are intended to provide a general understanding of the structure of the various embodiments. The illustrations are not intended to serve as a complete description of all of the elements and features of apparatus and systems that utilize the structures or methods described herein. Many other embodiments may be apparent to those of skill in the art upon reviewing the disclosure. Other embodiments may be utilized and derived from the disclosure, such that structural and logical substitutions and changes may be made without departing from the scope of the disclosure. Additionally, the illustrations are merely representational and may not be drawn to scale. Certain proportions within the illustrations may be exaggerated, while other proportions may be minimized. Accordingly, the disclosure and the figures are to be regarded as illustrative rather than restrictive.","One or more embodiments of the disclosure may be referred to herein, individually and\/or collectively, by the term \u201cinvention\u201d merely for convenience and without intending to voluntarily limit the scope of this application to any particular invention or inventive concept. Moreover, although specific embodiments have been illustrated and described herein, it should be appreciated that any subsequent arrangement designed to achieve the same or similar purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all subsequent adaptations or variations of various embodiments. Combinations of the above embodiments, and other embodiments not specifically described herein, will be apparent to those of skill in the art upon reviewing the description.","The Abstract of the Disclosure is provided to comply with 37 C.F.R. \u00a71.72(b) and is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, various features may be grouped together or described in a single embodiment for the purpose of streamlining the disclosure. This disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter may be directed to less than all of the features of any of the disclosed embodiments. Thus, the following claims are incorporated into the Detailed Description, with each claim standing on its own as defining separately claimed subject matter.","The above disclosed subject matter is to be considered illustrative, and not restrictive, and the appended claims are intended to cover all such modifications, enhancements, and other embodiments which fall within the true spirit and scope of the present disclosure. Thus, to the maximum extent allowed by law, the scope of the present disclosure is to be determined by the broadest permissible interpretation of the following claims and their equivalents, and shall not be restricted or limited by the foregoing detailed description.","Although the invention has been described with reference to several exemplary embodiments, it is understood that the words that have been used are words of description and illustration, rather than words of limitation. Changes may be made within the purview of the appended claims, as presently stated and as amended, without departing from the scope and spirit of the invention in its aspects. Although the invention has been described with reference to particular means, materials and embodiments, the invention is not intended to be limited to the particulars disclosed; rather the invention extends to all functionally equivalent structures, methods, and uses such as are within the scope of the appended claims.","While the computer-readable medium is shown to be a single medium, the term \u201ccomputer-readable medium\u201d includes a single medium or multiple media, such as a centralized or distributed database, and\/or associated caches and servers that store one or more sets of instructions. The term \u201ccomputer-readable medium\u201d shall also include any medium that is capable of storing, encoding or carrying a set of instructions for execution by a processor or that cause a computer system to perform any one or more of the methods or operations disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2(","i":"a"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2(","i":"b"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10(","i":"a"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10(","i":"b"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11(","i":"a","b":"6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11(","i":"b","b":"6"}]},"DETDESC":[{},{}]}
