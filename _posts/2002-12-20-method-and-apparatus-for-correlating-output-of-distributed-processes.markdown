---
title: Method and apparatus for correlating output of distributed processes
abstract: A method for correlating output of distributed processes includes receiving certain information at a first process of multiple distributed processes that perform one computer application. The information includes a unique identifier for a particular instance of the application that is different from any other identifier for any other instance of the application. The unique identifier is included in data written by the first process to a first data structure. Based on the unique identifier, the data in the first data structure is correlated with data in a different, second data structure written by a different, second process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454761&OS=07454761&RS=07454761
owner: Cisco Technology, Inc.
number: 07454761
owner_city: San Jose
owner_country: US
publication_date: 20021220
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The present invention generally relates to distributed processing of computer applications. The invention relates more specifically to correlating output of distributed processes related to a particular application.","The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not admitted to be prior art to the claims in this application merely by inclusion in this section.","Computer programs are sets of instructions for controlling processors in computing devices. Computer programs typically are written in one or more high level languages that are human readable. These source language statements then typically are compiled by a compiler program and converted to coded instructions, which often correspond to the actual operations performed by a processor in a computer device.","Frequently the coded instructions are not identical to the native instructions for the processor, but, instead, are instructions for a particular virtual machine. A virtual machine is a process that interprets coded instructions and executes them. The virtual machine itself is an executable sequence of instructions in the native language of the processor. Virtual machines sometimes act as source language interpreters. As used herein, the term \u201cmachines\u201d includes virtual machines interpreting virtual machine instructions, operating systems interpreting operating system instructions, and processors executing native instructions.","In general, coded instructions from one or more modules can be linked to form an executable program. Modules can consist of source language statements, coded instructions for a particular virtual machine, runtime executables, or some combination of these, with or without associated data. Modules in a high-level source language may be compiled by a run time compiler to produce corresponding modules in coded instructions.","It is becoming more common to create programs that include heterogeneous modules. For example, a program may include a machine-executable module, a module executable by a first type of virtual machine, and a module executable by a second type of virtual machine. During execution of the program, a routine in the machine-executable module may call a routine in the module running in a first type of virtual machine, and that routine may call another routine in the module running in a second type of virtual machine.","In addition, it is common for programs executing on different processors to interact with each other. For example, an application program, such as a network management program, runs as a first process on one processor on one device on a network. While running, the first process may make a request of a device management server program (the \u201cserver\u201d), a second process executing separately on a second device on the network, to provide management information about the second device. In turn, the second process may launch a local configuration program as a third process executing separately on the second device or invoke a user authentication program executing on a separate third device. The local configuration program determines properties of the local device by either getting the current status of the local device or changing the status or both. In many situations, the interacting programs will be written by different programmers in different organizations for different types of virtual machines on the different processors. For example, one will be a Java program, while the other is a C language program. The operations described in this paragraph represent just one example context in which similar problems may be encountered.","Some host computers and operating systems divide a program into multiple threads that can be executed separately. Multiple threads may be swapped, in turn, between memory and each processor of a host computer. In host computers with several processors, several threads may be executed simultaneously, each one on a different one of the several processors.","As used herein a \u201cprocess\u201d refers to any program or any portion of a program that can run independently, including one or more threads, one or more modules, one or more clients, one or more servers, and combinations of one or more clients and servers and other program portions.","Each process that runs can log certain events in a log file written specifically for that process. Logged events might include, for example, reaching certain milestones in the processing of data, encountering particular user actions, invoking separate processes, receiving results from separate processes, invocations by separate processes, returning results to separate processes, and encountering an error or interruption in processing. The log files are often important in determining what an instance of a process spawned from a module actually does when a particular user under particular circumstances executes the instructions in the module. Sometimes what an instance of a process does contrasts with what the process was designed to do because of equipment failures, external problems, or because some circumstances were unanticipated by the programmers of the process. The log files help developers of each process determine the actual performance of instances of processes. Typically, the log files are specific to a process; the events are identified and event properties are represented in ways specifically designed by the developers of the process.","A problem arises when it becomes useful to correlate data across log files written by interacting processes spawned from separately developed modules, often executing on different processors or in different threads. For example, an error encountered by the third process causes an error event to be entered in the log file for the third process along with data about the error of concern to developers of the third module, the local configuration program or the authentication agent program. The error is identified in the third log file by some error code, X, determined by the developers of the third module. The third process may then enter other information into the log file.","As a result of the error, the third process sometimes returns control to the calling process, the second process, with some indication of error. The error indication returned by the third process to the second process causes an error event to be entered in the log file for the second process along with data about the error of concern to developers of the second module, the device management server. The error is identified in the second log file by some error code, Y, determined by the developers of the device management server and may be unrelated to X, the code that identifies the error in the third log file. The second process may then enter other information into the second log file.","As a result of the error, the second process sometimes returns control to the calling process, the first process, with some indication of error. The error indication returned by the second process to the first process causes an error event to be entered in the log file for the first process along with data about the error of concern to developers of the first module, the network management program. The error is identified in the first log file by some error code, Z, determined by the developers of the network management program and may be unrelated to the way the error is identified in the second log file.","A user of the first process will find it difficult to retrieve information about the error event stored in the log file for the third process. The error identification, X, used in the third log file is unknown to the user of the first process.","In one approach, each current process passes the error identification in the current process, determined by the developers of the module for the current process, to the calling process that called the current process. The current process stores the error code returned from a called process in the log file along with the error identification. For example, the second process stores the value X along with the value Y in the second log file and passes the value Y to the first process. Then, the first process stores the value Y along with the value Z in the first log file. A user of the first process can retrieve information about the error event stored in the third log file by tracking backwards through the second log file. For example, the user finds in the first log file that the error Z is associated with the error Y; then searches the second log file to find that the error Y is associated with the error X; then searches the third log file to find the error X and the information about the error X.","One problem with this approach is that a user must track the error through all the log files of the intervening processes. Another problem is that the error codes may not be unique. For example, the error code X might appear several times in the third log file, every time the third process encounters the same problem; or, the error code Y might appear several times in the second log file; or both error codes might appear several times in their respective log files. There might not be sufficient information to determine which error identification is associated with the event of interest to the user.","Another approach is to require each current process to identify an error in the current process by the error identification returned from a called process, to use the same error identification in the log file, and to pass the same error identification to the calling process. For example, the second process stores the value X in the second log file, and passes the value X to the first process. Then, the first process stores the value X in the first log file. A user of the first process can retrieve information about the error event stored in the third log file by going directly to the third log file. For example, the user finds in the first log file that the error identification is X, then searches the third log file to find the error X and the information about the error X. The user does not have to search the log files of all the intervening processes.","One problem that remains is that the error codes may not be unique. For example, the error code X might appear several times in the third log file, every time the third process encounters the same problem. There might not be sufficient information in the third log file to determine which error identification is associated with the event of interest.","Timestamps can be used to associate events in the different log files. However, use of timestamps does not definitively determine which instance of error code X in the third log file is associated with the event in the first log file. If the processes that write the log files are on different devices, the clocks on the different devices should be synchronized to define a time window in which events are considered correlated. This suffers from the disadvantages that synchronization involves management of clock drift among various processors, requires definition of a time window, consumes system resources, and consumes software development resources. Furthermore, it is often problematic to determine a duration for the time window and to determine whether events are correlated if one of the events falls on or near the boundary of the time window.","Another approach is to generate a unique context identification (\u201ccontext ID\u201d) for the error or event encountered in the third process, to include this unique context ID in the log file, and to pass this unique context ID to the calling program. The calling program then also includes the unique context ID with any data written to its log file. In this way, data entered in all log files related to the same event include the same context ID.","One disadvantage of this approach is that the context ID does not appear in all log files related to an event unless and until the context ID is returned to all calling processes up to the top process in the hierarchy. Therefore there is inherently a delay in correlating data in one log file to data in another log file, until the context ID is propagated back up to the root calling process. Also, because of the nature of the error or the types of interactions, it might not be possible to pass the context ID back through all the calling processes. For example, a client process may send a request message to an independent server process that only sends a return message upon completion of a service. In that case, the context ID will not appear in all log files of processes that are affected by the event, no matter how long a user waits.","Based on the foregoing, there is a clear need for correlating data through multiple log files, each log file written specifically for one process among multiple processes employed for an instance of an application, that does not suffer the deficiencies described above. More generally, there is a clear need for correlating output associated with multiple processes employed for an instance of an application, that does not suffer the deficiencies described above. Output associated with a process include log files written by the process, other data (such as message, web pages and configuration files) output by the process, and entities, such as threads and other processes, generated from the process.","A method and apparatus are described for correlating output of distributed processes related to a computer application. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Embodiments are described herein according to the following outline:",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1.0","General Overview"]},{"entry":[{},"2.0","Structural and Functional Overview"]},{"entry":[{},{},"2.1 \u2003\u2002Structural Overview"]},{"entry":[{},{},"2.2 \u2003\u2002Functional Overview"]},{"entry":[{},"3.0","Method of Correlating Data in Log files"]},{"entry":[{},{},"3.1 \u2003\u2002Process of Writing Log files"]},{"entry":[{},{},"3.2 \u2003\u2002Process of Viewing Data in Log files"]},{"entry":[{},"4.0","Implementation Mechanisms\u2014Hardware Overview"]},{"entry":[{},"5.0","Extensions and Alternatives"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The needs identified in the foregoing Background, and other needs and objects that will become apparent for the following description, are achieved in the present invention, which comprises, in one aspect, a method for correlating output of distributed processes related to a computer application. Certain information is received at a first process of multiple distributed processes that perform one computer application. The information includes a unique identifier for a particular instance of the application that is different from any other identifier for any other instance of the application. The unique identifier is included in data written by the first process to a first data structure. Based on the unique identifier, the data in the first data structure is correlated with data in a different, second data structure written by a different, second process.","In another aspect, a method of correlating output of distributed processes related to a computer application includes receiving first data at an output viewing process from output of a first process of multiple distributed processes that perform one computer application. The first data includes a first unique identifier for a first instance of the application. The first unique identifier is different from any other identifier for any other instance of the application. Second data is also received at the output viewing process from output of a second process of the distributed processes. The second data includes a second unique identifier for a second instance of the application. The second unique identifier is different from any other identifier for any other instance of the application. It is determined whether the first data is correlated with the second data based on whether the first unique identifier is the same as the second unique identifier.","In other aspects, the invention encompasses a computer apparatus, and a computer readable medium, including a carrier wave, configured to carry out the foregoing steps.","Embodiments are described in the following sections in the context of data written to event log files by separate processes, which processes are invoked directly or indirectly by a particular application. However, the invention is not limited to this context. Other embodiments include other output associated with multiple processes. For example, some embodiments include correlating data in multiple web pages written by different web servers that execute on one or more different host machines connected to a network. As another example, some embodiments include correlating configuration data for multiple network devices written by different device management servers that execute on one or more different network devices. Other embodiments include correlating operations, such as data packet forwarding operations, at multiple network devices configured by different device management servers that execute on one or more different network devices.","2.0 Structural and Functional Overview","To illustrate correlating data across multiple log files, it is assumed that an application program begins when a user launches Process A, which interacts with Process B, which interacts with Process C. Each of the processes writes a log file to record information about the progress of its processing. In other embodiments, each process may interact with more or fewer processes. In the illustrated embodiment, Process B returns control to the invoking Process A; therefore Process B is called a \u201creturn process.\u201d In the illustrated embodiment, Process C does not return control to invoking Process B, but proceeds independently; therefore Process C is called a \u201cnon-return process.\u201d For example, process C is a server process that does not send a response back to Process B.","2.1 Structural Overview",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 1","FIG. 5"],"b":["112","110","110","120","130","140","120","130","140","110"]},"Each process , ,  writes a log file , , , respectively, to record its progress, as indicated by solid arrows with straight segments. The log files may include indications of various events, such as reaching certain milestones in the processing of data, encountering particular user actions, invoking separate processes, receiving results from separate processes, invocation by separate processes, returning results to separate processes, and encountering an error or interruption in processing. In some embodiments, each instance of each process writes to a different log file. In some embodiments, several instances of the same process write to the same log file. For example, two instances of process  write to the same log file . In other embodiments, one or more of the processes , ,  does not write a log file. For example, in another embodiment, process  does not write log file .","The curved arrows indicate that an instance of process  (Process A), the main process of the application program, invokes an instance of process  (Process B) which invokes an instance of process  (Process C).","Executing on the one or more hosts  is a correlation viewer process (\u201ccorrelation viewer\u201d) , according to some embodiments. The correlation viewer is described in more detail in a later section with reference to .","For purposes of illustrating a simple example,  shows only three instances of processes and three log files. However, embodiments are not limited to this example, and a practical system may have two or more instances of processes and log files.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2","FIG. 1"],"b":["250","260","270","222","232","242","122","132","142"]},"As in conventional log files, the instance information , ,  includes an event identification field established for the individual process (\u201clocal event ID\u201d) fields , , , for each event recorded by each instance. Ellipses , ,  represent zero or more other local event fields for events recorded in information , , . For example, the local event ID field  for an invocation of Process B by an instance of process  (Process A) contains a code indicating an invocation and a reference to Process B, designated hereinafter by the symbol \u201cCallB.\u201d Similarly, the local event ID field  for an invocation of Process C by an instance of process  (Process B) contains a code indicating an invocation and a reference to Process C, designated hereinafter by the symbol \u201cCallC.\u201d For purposes of illustration, it is assumed that the local event ID field  for an error encountered by Process C contains a code indicating an error type, designated hereinafter by the symbol \u201cErrorX.\u201d","According to the illustrated embodiments, the instance information , ,  in each log file includes field , , , respectively, for a unique identification for the instance of the application for which all the processes were invoked (hereinafter, \u201capplication instance unique ID\u201d or \u201cAIUI\u201d). A value for the AIUI is unique for each instance of the applications among all instances of the application. Instance information associated with the same instance of the application is given the same value of the AIUI in the log file of every process involved in the application. For example, if the values are identical in AIUI fields , , , then the instance information , ,  is all associated with the same instance of the application. For purposes of illustration, each instance of the application is assumed to correspond to a separate instance of Process A.","Various methods for generating a unique ID for each instance of an application may be used. An embodiment for generating a unique ID is described in more detail below with reference to .","In some embodiments, one or more of the instance information portions of the log files includes a field for a unique identification of the instance of a process writing to the log file. For example, instance information  for Process B includes writing process instance unique ID field  in log file  of Process B. Similarly, instance information  for Process C includes writing process instance unique ID field  in log file  of Process C.","In some embodiments, the instance information includes a field for the unique identification of instances of intervening processes between the instance of the application and the instance of the process writing the log file. For example, instance information  for Process C includes intervening process instance unique ID field .","2.2 Functional Overview","Using the instance unique IDs in the instance information written to each log file, data in multiple log files can be correlated. For example, instance information , ,  are correlated based on sharing the same value in AIUI fields , , . In some embodiments, instance information ,  also are correlated based on sharing the same value in process instance unique ID fields , .","In order to have the same value in the AIUI fields , , , the value of the AIUI passes from Process A, which generates the value and writes log file , to Process B which writes log file , to Process C, which writes log file . Such passing of the value is indicated in  by a curved arrow that connects field  to field  and a curved arrow that connects field  to field . The passing of the value is described in more detail below with reference to .","Similarly, in order to have the same value in the intervening process instance unique ID field  and the writing process instance unique ID field  indicating an instance of Process B, the value of the instance unique ID for Process B passes from Process B, which generates it and writes it to field , to Process C, which writes it to field .","3.0 Method of Correlating Data in Log Files","An illustrated embodiment of a method for correlating data in multiple log files is described below with reference to  and . Although steps are depicted in a particular order, in other embodiments the steps can be performed in a different order or overlapping in time.","3.1 Process of Writing Log Files",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 3","FIG. 3"],"b":"300"},"In step  the user launches an instance of Process A. For purposes of illustration, it is assumed that Process A manages multiple devices on a network, but in other embodiments Process A may perform any desired function.","In step , Process A generates a first unique ID for the application and stores the first unique ID in the AIUI field of its log file along with data for events associated with this instance of Process A in the instance information for Process A. For example, process  writes instance information  that includes the AIUI in field , one or more local event IDs in field , and information related to those local events.","Any method can be used to generate a unique ID for the instance of the application. In some embodiments a timestamp is used to generate the application instance unique ID. For example, a unique ID for an instance of the application that manages network devices may include a name of the application (e.g., \u201cNMS\u201d), a host name (e.g., a media access control, \u201cMAC,\u201d number), a user identification (\u201cuser ID\u201d), a date, hour, minute, second when the instance of the application is started. In some embodiments a timestamp is not used. For example, in an embodiment involving an automatic teller machine (ATM) transaction, the unique ID may be composed from concatenating the values of an operation type (e.g., \u201cwithdrawal\u201d), an operation site (e.g., \u201cFirstBankATM789\u201d), an account owner (e.g., \u201cJohnDoe\u201d), an account number (e.g., \u201c555555555\u201d), a current amount in the account (e.g., \u201c123.45\u201d), and an amount withdrawn (e.g., \u201c23.04\u201d). Alternatively, a random number generator is used or a hash function is used to generate the unique ID.","The granularity of the unique ID can be selected based on the kinds of data to be correlated. For example, if there is no desire to correlate all operations performed by a user with the NMS, but only a desire to correlate operations related to using the application to perform a particular operation, then the unique ID may include data indicating the operation. For example, to correlate log files written as a result of configuration operations, data indicating configuration may be added to the unique ID. In this case, the \u201cone application\u201d associated with the distributed processes are the configuration operations of the network management program.","Correlations can also be performed on several levels of granularity simultaneously, by generating a unique ID for each level of granularity. For purposes of illustration, it is assumed that correlations are desirable at the levels of the Process A, Process B and Process C. Assume also that the value of the Process A AIUI is for a network management system (NMS) started by user with UserID 9999 on Jan. 23, 2002 at 10 seconds after 2:13 PM on a host with MAC number 7654321; and, is given by:","AIUI-A=\u201cNMS7654321999920020123141310\u201d","In this example, process  writes into log file  instance information  that includes the value \u201cNMS7654321999920020123141310\u201d in field , one or more local event IDs, including \u201cCallB\u201d in field , and information related to those local events, such as the values of data sent to Process B while invoking Process B.","In step , Process A invokes Process B. The invocation can be performed in any manner known when an embodiment is implemented. For example, the invocation can take the form of a procedure call that causes Process B to be launched from a module of instructions with parameters values sent according to an application programming interface (API), or a remote procedure call that causes Process B to be launched from a module of instructions on a separate host according to the remote procedure API. In other embodiments, invocation involves sending a message to a process that is already running, such as a server process. For purposes of illustration, assume that Process B is a network management server that is already executing on a particular network device and manages the particular network device. Process A sends the value of AIUI to Process B. For example, process  sends AIUI-A to process .","In step , Process B receives the first AIUI of Process A and stores the first AIUI in the AIUI field of its log file in the instance information for Process B, along with data for events associated with the instance of Process B executed in response to the invocation by the current instance of Process A. For example, process  writes into log file  instance information  that includes the value \u201cNMS7654321999920020123141310\u201d in field , one or more local event IDs, including \u201cCallC\u201d in field , and information related to those local events, such as the values of data sent from Process A, and the values of data sent to Process C while invoking Process C.","In the illustrated embodiment, correlations at the granularity of Process B are also desired. Therefore Process B is configured to generate a unique ID for this instance of Process B. In essence, Process B is the application at this second level of granularity. The unique ID for this instance of Process B is called hereinafter \u201cAIUI-B.\u201d For purposes of illustration, it is assumed that the value of the AIUI-B is for a network device management server (NDMS) started for user with UserID 9999 on Jan. 23, 2002 at 55 seconds after 2:22 PM on a network device with MAC number 1098765 is given by:","AIUI-B=\u201cNDMS1098765999920020123142255\u201d","In this example, process  also includes in instance information  written into log file  the value \u201cNDMS1098765999920020123142255\u201d in field . Field  holds the unique ID for the instance of the process writing the log file; field  is called the \u201cwriting process instance unique ID field.\u201d Though shown as two separate fields ,  in , in other embodiments the two unique IDs may be combined into one field (\u201ccorrelation field\u201d). In some embodiments, the two unique IDs are separated in the correlation field by a delimiter character, such as \u201c\/\u201d, which is not used in generating any unique ID.","In other embodiments, correlations at the granularity of Process B are not desired and Process B does not generate a value AIUI-B, and writing process instance unique ID field  is omitted from instance information .","In step , Process B invokes Process C. The invocation can be performed in any manner known when the embodiment is implemented. For purposes of illustration, it is assumed that Process C is an authentication agent program that prompts a user to enter a password. Process B sends the value of the AIUI to Process C. For example, process  sends AIUI-A to process  as a parameter of a procedure call or as a portion of a message.","In the illustrated embodiment, correlations at the granularity of Process B are desired. Therefore, Process B also sends the value of the unique ID for this instance of Process B to Process C. For example, process  sends the value AIUI-B to process  along with the value of AIUI-A. In some embodiments, the values of AIUI-A and AIUI-B are sent as separate parameters or portions of a message; alternatively, the values of AIUI-A and AIUI-B are sent in a combined parameter or portion of a message.","In step , Process C receives the first AIUI of Process A and stores the first AIUI in the AIUI field of its log file in the instance information for Process C, along with data for events associated with this instance of Process C executed in response to the invocation by Process B. For example, process  writes into log file  instance information  that includes the value \u201cNMS7654321999920020123141310\u201d in field , one or more local event IDs, and related information, such as data sent from Process B.","In the illustrated embodiment, correlations at the granularity of Process B are also desired; therefore Process C also receives the second AIUI of Process B and stores the second AIUI in field  for intervening process instance unique IDs in instance information . For example, process  includes in instance information  in log file  the value \u201cNDMS1098765999920020123142255\u201d in field .","In the illustrated embodiment, correlations at the granularity of Process C are also desired. Therefore Process C is configured to generate a unique ID for this instance of Process C. In essence, Process C is the application at this third level of granularity. The unique ID for this instance of Process C is called \u201cAIUI-C.\u201d For purposes of illustration, it is assumed that the processor executing process C is unsynchronized with the processor executing Process B, and therefore that Process C appears to start before it is called by Process B. It is further assumed that the value of the AIUI-C is for a network authentication server (NAS) started for user with UserID 9999 on Jan. 23, 2002 (apparently) at 51 seconds after 2:22 PM on a network device with MAC number 4567890 is given by: AIUI-C=\u201cNAS4567890999920020123142251\u201d In this example, process  also includes in the instance information  written into log file  the value \u201cNAS4567890999920020123142251\u201d in writing process instance unique ID field . Though shown as three separate fields , ,  in , two or more of the three unique IDs may be combined into one correlation field.","In other embodiments, correlations at the granularity of Process B or Process C or both are not desired and Process B or Process C does not generate a value AIUI-B or AIUI-C, respectively, and intervening process instance unique ID field  or writing process instance unique ID field  or both are omitted from instance information .","During step , Process C encounters an event. In the illustrated example, Process C encounters an error event associated with authentication failure. For example, a user has failed to enter a proper password within a certain amount of time or number of tries. Assume that such a failure is designated by error number X101 according to the developers of Process C. Process C records local event ID for the event along with other data for the event in instance information  in log file . For example, Process C stores the error number \u201cX101\u201d in the local event ID field . Assume that the other information associated with the event that is stored in the instance information  includes data indicating the number of attempts made, the passwords used, and the amount of time waited after each prompt for a response from the user. For example, it is assumed that the user made two attempts with two different passwords but did not respond to a third prompt in a maximum time allotted for a response, such as two minutes; and, it is assumed that this information is stored in the instance information  outside the local event ID field .","In step  a user correlates data across log files using the values in the correlation fields, including AIUI fields , , , the writing process instance unique ID fields , , and the intervening process instance unique ID field . An embodiment of step  is described below with reference to . Step  may be performed even though Process C does not return information to Process B. In other embodiments in which Process C does return information to Process B, step  may be performed before Process C returns information to Process B and before Process B returns information to Process A.","Although AIUI fields , ,  are distinguished from fields , ,  in  and the above discussion for purposes of a concrete example, in practice any of the fields can be considered an AIUI field. Which field represents the application, and which field represents a super-application process or a sub-application process, such as a writing process or intervening process, is purely a matter of the granularity of the correlation that is sought. When the correlation is sought at the granularity of Process B, Process B can be considered the application and fields  and  can be considered the AIUI fields. In this case, fields , ,  represent unique IDs for instances of a super-application process; field  represents a unique ID for an instance of a sub-application process.","3.2 Process of Viewing Data in Log Files",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 4","FIG. 3"],"b":["340","340","340"],"i":["a ","a "]},"With a conventional system, when a user tries to determine what led to a fault during Process A, the user examines a large amount of data in log files , ,  and determine which entries are associated with events of Process A, as described in the Background section. It may be impossible to determine which event information in log file  is associated with an event in log file . For example, based on timestamps of unsynchronized processors, it may be difficult to correlate data in instance information  with data in instance information , because from the unsynchronized timestamps the instance information  appears associated with an instance of Process C that started before the instance of Process C invoked by the instance of Process B described in the instance information .","According to the illustrated embodiment, the user only need determine the AIUI value from the log file for Process A, and then find that same value in any of the other log files to find additional information correlated with the same instance of the application. For example, the correlation viewer determines from log file  that the failed instance of Process A has the AIUI value \u201cNMS7654321999920020123141310,\u201d and then finds that same value in any of the other log files, e.g., in field  of log file , to find additional information correlated with the same instance of the application.","In step , a user launches a correlation viewer process . In other embodiments, the viewer process  is already executing on one or more of the hosts , and the user merely sends a message indicating a desire to view data associated with an instance of an application. Step  includes indicating the instance of a process with which the data to be viewed is correlated. For example, the user indicates that data correlated with the instance of network management program, \u201cNMS7654321999920020123141310,\u201d are of interest.","In step , the correlation viewer reads data from any log file. For example, the event viewer reads data for Process C from the Log file .","In step , the correlation viewer determines whether the data includes an AIUI value that matches the instance of interest. For example, the correlation viewer  determines whether AIUI field  of log file  has NMS7654321999920020123141310 for the instance of interest. If not, control passes back to step  to read data from another log file. If so, control passes to step .","In step , the correlation viewer presents some or all of the information from the log file to the user. For example, the correlation viewer  displays a list of events in instance information  of log file  that are correlated with the instance of Process A described in instance information .","Similarly, correlation viewer  displays a list of events in instance information  of log file  that are correlated with the instance of Process B described in instance information . The instance information  is determined to be correlated with the instance information  without determining a time difference between a first timestamp associated with the instance information  and a second timestamp associated with the instance information . Such a difference would be negative, and would present a problem for determining whether information for an instance of Process B is correlated with information from an instance of Process C that started before Process B invoked Process C.","In the illustrated embodiments, correlated data is found in output of several distributed processes that implement a single application.","4.0 Implementation Mechanisms\u2014Hardware Overview",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 5","b":["500","500","502","504","502","500","506","502","504","506","504","500","508","502","504","510","502"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (\u201cCRT\u201d), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, trackball, stylus, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for correlating output of several distributed processes that implement an application. According to one embodiment of the invention, correlation of output of several distributed processes is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (\u201cISDN\u201d) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (\u201cLAN\u201d) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (\u201cISP\u201d) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the invention, one such downloaded application provides for correlating output of distributed processes as described herein.","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","5.0 Extensions and Alternatives","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
