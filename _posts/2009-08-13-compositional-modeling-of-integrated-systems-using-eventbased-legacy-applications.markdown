---
title: Compositional modeling of integrated systems using event-based legacy applications
abstract: The compositional event based modeling of integrated applications (CINEMA) tool provides a way to extend a modeling environment using legacy event based applications, such as Graphical User Interface (GUI) APplications (GAPs). CINEMA allows modelers to extend the toolbox of the modeling environment by creating modeling elements that represent GUI objects of GAPs. CINEMA generates source code that allows an integrated system to control and manipulate the GUI objects of GAPs represented by the modeling elements used to create a model of the integrated system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08479150&OS=08479150&RS=08479150
owner: Accenture Global Services Limited
number: 08479150
owner_city: Dublin
owner_country: IE
publication_date: 20090813
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Technical Field","This disclosure relates to a tool for extending a modeling environment using legacy event based applications. In particular, this disclosure relates to a tool that allows modelers to create modeling elements for a modeling environment toolbox from Graphical User Interface (GUI) APplications (GAPs), and generate source code to control and manipulate GUI objects of the GAPs represented by the modeling elements.","2. Background Information","Integrated systems are composed of components that exchange information, also referred to as interoperating components. Components of integrated systems may include different legacy event-based applications such as Graphical User Interface (GUI) APplications (GAPs). Organizations use legacy GAPs to assist business operations to automate business processes, for example, increasing the speed and effectiveness of information exchange.","Organizations find reengineering GAPs into programming components difficult because of brittle legacy architectures, poor documentation, significant programming effort, and subsequently, the large cost of these projects. Because businesses use successful GAPs for decades, managers are reluctant to authorize changes to source code that may break GAPs and disrupt well-established business services. Many organizations explore how to include legacy GAPs in new integrated systems, in order to improve business processes by increasing interoperability of GAPs with new components, such as web services.","Organizations often rely on modelers to develop models of new integrated systems. Modelers may use a unified modeling language (UML) diagramming application (e.g., the ArgoUML\u2122 application) that provides a set of graphical notation techniques to create models that describe a new integrated system. However, modelers find modeling new integrated systems that include GAPs difficult, because many GAPs are closed and monolithic and do not expose any programming interfaces or data in known formats. Although modelers desire to use GAPs as components in integrated systems, modelers find capturing the functionality and interfaces of GAPs as elements of UML-based models (e.g., classes and interfaces) difficult. Modelers find capturing properties of and dependencies between GUI objects a difficult exercise, because GUI models are often unavailable for legacy applications.","Currently, modelers use a manual, laborious, and error-prone process to study GAPs and translate GUI objects into elements of UML as abstractions of the functionalities of these GAPs. Modelers find using GAPs in modeling environments difficult, since many legacy GAPs do not expose any programming interfaces. Modelers find capturing properties of and dependencies between GUI objects a difficult exercise because GUI models are often not available for legacy applications.","Theoretically, GUI models can be extracted from the source code of GAPs, however, two fundamental limitations exist. First, the source code of GAPs often may be unavailable. For example, modeling may be outsourced to external organizations to who the source code of legacy applications may not be shared. Thus, the external organizations do not have the ability to derive precise GUI models from source code. Second, even if the external organization possesses or has access to the source code, limitations that render approaches of deriving GUI models from source code ineffective exist. For example, the Microsoft Windows\u2122 Application Programming Interface (API) call CreateWindow, used in a large number of GAPs, takes a number of parameter variables including a string variable that holds the value of the type of a GUI object, which often may be known only at runtime.","In addition, deriving models from the source code of GAPs depends on knowing the precise semantics of API calls that create and manipulate GUI objects (e.g., CreateWindow), building appropriate parsers and analyzers for languages used to create GUI applications, and developing Integration Development Environment (IDE)-specific tools that extract GUI models from IDE GUI resource repositories. The number of tuples measures in terms of tens of thousands in the Cartesian product of API calls\u00d7programming languages\u00d7IDEs, increasing the difficulty of identifying an approach that would work with source codebases of different GUI applications.","A fundamental limitation of using GUI objects in UML models is that GUI objects are not programming objects that can be modeled using standard elements of UML. GUI objects are created within corresponding GAPs using the underlying GUI frameworks, and the GUI objects are not part of any modeling environment. Some GUI objects require users to perform multiple actions on GAPs before the GUI objects are instantiated. Without embedding these actions in UML elements, modelers find creating UML models that can be transformed into source code that uses these GUI objects difficult.","GAPs are written in many different languages and run on many different platforms. Many platform and language specific techniques for extracting data from GAPs exist. However, implementing these specific techniques in tools for different modeling platforms and languages results in multiple versions of the source code for the respective tools, increased costs to maintain the tools, and difficulties in maintaining and evolving different codebases.","Finally, modelers find generating source code from UML models that include elements describing GUI objects difficult. Classes that represent GUI objects should contain code that accesses and manipulates these GUI objects, since these GUI objects are created dynamically in the GAPs processes and the contexts of the underlying GUI frameworks (e.g., MS-Windows\u2122 or Java\u2122 SWT\u2014standard widget tool kit). Since models do not reflect the contexts in which GUI objects exist, modelers find maintaining and evolving these models with respective GAPs difficult.","None of the techniques noted about are sufficiently uniform, non-invasive, and efficient. Therefore, a need exists to address the problems noted above and other problems previously experienced.","ComposItioNal Event-based Modeling of integrated Applications (CINEMA) efficiently and non-invasively extends a UML modeling environment by defining modeling elements for the functionalities of GAPs and GUI objects of GAPs. CINEMA allows a user to model integrated systems that include legacy GAPs by navigating to GUI objects, selecting the GUI objects, and dragging and dropping the GUI objects onto a modeling canvas in order to create models. Because of the wide applicability of CINEMA, CINEMA uses a language-neutral underlying technology common to major computing platforms for controlling and manipulating GAPs. CINEMA disentangles UML modeling environments from GUI structures and hides connections between models and GAPs within CINEMA. CINEMA (1) facilitates users to create models of integrated systems using GAPs, (2) captures the structures and states during user's interactions with the GAP, and (3) specifies the type and the name of GUI objects used in models and subsequently deployed in a resulting integrated system.","CINEMA may be used for data integration, GAP reuse, collaborative computing, and application migration to new platforms. Using CINEMA, modelers expend minimal development efforts to model integrated systems. CINEMA offers, for example, an attractive alternative to rewriting legacy applications by simply reusing the legacy applications in integrated systems. CINEMA provides an efficient and non-invasive way to allow engineers to use existing GAPs to create composite models that CINEMA uses to extend the modeling environment. CINEMA combines a nonstandard use of accessibility technologies for accessing and controlling GAPs. CINEMA extends a UML modeling environment, and allows modelers to create models of integrated systems using the features of GAPs. CINEMA reverses standard modeling direction from requirements to applications (e.g., GAPs to requirements) by allowing engineers to use existing GAPs from which to create composite models.","CINEMA allows a user (e.g., modeler) to model GAPs as programming objects and GUI objects of these GAPs as fields of these programming objects, and perform actions on these programming objects by invoking methods on the programming objects. Unfortunately, integrated systems and modeling environments (IS\/MEs) may not access and manipulate GUI objects as pure programming objects, because GUI objects only support user-level interactions. Accessibility technologies expose a special interface whose methods can be invoked and the values of whose fields can be set and retrieved to control the GUI objects.","CINEMA combines a nonstandard use of accessibility technologies in order to access and control GAPs in a uniform way. CINEMA uses a visualization mechanism that enables users to create models of integrated systems composing GUI objects of GAPs by performing point-and-click and drag-and-drop operations on GAPs. CINEMA uses an accessibility layer and hooks to inject event listeners into GAPs. The event listeners respond to events that CINEMA records in order to create modeling elements that extend a UML modeling environment (e.g., Eclipse\u2122 software\u2014released under the Eclipse Public License (EPL) 1.0 open source license).","Accessibility technologies provide different aids to disabled computer users. Some of the aids provided by accessibility technologies include screen readers for the visually impaired, visual indicators or captions for users with hearing loss, and software to compensate for motion disabilities. Most computing platforms include accessibility technologies, since electronic and information technology products and services are required to meet the Electronic and Information Accessibility Standards. For example, Microsoft\u2122 Active Accessibility (MSAA\u2122) technology is designed to improve the way accessibility aids work with applications running on MS-Windows\u2122, and Sun Microsystems\u2122 Accessibility technology assists disabled users who run software on top of the Java Virtual Machine (JVM\u2122). Accessibility technologies are incorporated into computing platforms, as well as libraries, and applications in order to expose information about user interface elements. Accessibility technologies provide a wealth of sophisticated services required to retrieve attributes of GUI objects, set and retrieve values for the GUI objects, and generate and intercept different events. For example, MSAA\u2122 for Windows\u2122 may be used, although, using a different accessibility technology will yield similar results. Although no standard for accessibility Application Programming Interface (API) calls exists, different technologies offer similar API calls, suggesting a slow convergence towards a common programming standard for accessibility technologies. Accessibility technologies exploit the fact that GUI objects expose a well-known interface that exports methods for accessing and manipulating the properties and the behavior of these objects. For example, a MS-Windows\u2122 GUI object that implements the IAccessible\u2122 interface allows the GUI object to be accessed and controlled using MSAA\u2122 API calls. Accessibility technologies allow programmers to write code to access and control GUI objects as standard programming objects. Using accessibility technologies, programmers can also register callback functions for different events produced by GUI objects thereby obtaining timely information about states of the GUI objects. For example, if a GUI object receives an incorrect input and the GAP shows an error message dialog informing the user about the mistake, then a previously registered callback can intercept the event that signals the creation of the error message dialog, dismiss the event, and send an \u201cillegal input\u201d message to the tool and\/or programming instructions that control the GAP.","Hooks are user-defined libraries that contain callback functions (or simply callbacks), which are written in accordance with certain rules dictated by accessibility technologies. When a target GAP is started, the accessibility layer loads predefined hook libraries in the process space of the GAP and registers addresses of callbacks that may be invoked in response to specified events. Since hooks \u201clive\u201d in the process spaces of GAPs, the hooks' callbacks can affect every aspect of execution of these GAPs. Hooks enable users to extend the functionality of GAPs, specifically to integrate hooks with GAPs without changing the source code of the GAP. Writing hooks does not require any knowledge about the source code of GAPs. A hook library may be generic for all GAPs. A hook is injected into a GAP, listens to events generated by the GAP, and executes instructions received from integrated systems. As an example instruction, a hook may disable a button until a certain event occurs. Hook libraries allow programmers to change the functionalities of existing GAPs without modifying the source code of the GAPs. The functions of a generic hook include receiving commands to perform actions on GUI objects, reporting events that occur within GAPs, and invoking predefined functions in response to certain commands and events.","Some of the concepts presented above may be described in more detail in the following U.S. patent applications, including: Ser. No. 11\/710,681, Publication Number 2008\/0209356, entitled \u201cGraphical Unit Interface Based Application to Web Services Conversion System,\u201d to Mark Grechanik et al., filed on Feb. 23, 2007; Ser. No. 11\/710,233, Publication Number 2008\/0209348, entitled \u201cComposing Integrated Systems Using GUI-Based Applications and Web Services,\u201d to Mark Grechanik et al., filed on Feb. 23, 2007; Ser. No. 11\/710,680, Publication Number 2008\/0209446, entitled \u201cDesign Tool for Converting Legacy Applications to Web Services,\u201d to Mark Grechanik et al., filed on Feb. 23, 2007; Ser. No. 11\/888,970, Publication Number 2009\/0037896, entitled \u201cLegacy Application Decommissioning Framework,\u201d to Mark Grechanik et al., filed on Aug. 2, 2007; Ser. No. 11\/824,373, Publication Number 2009\/0007066, entitled \u201cRefactoring Monolithic Applications into Dynamically Reconfigurable Applications,\u201d to Mark Grechanik et al., filed on Jun. 29, 2007, the entire disclosure of each of these U.S. patent applications of which are hereby incorporated by reference.","CINEMA enables modelers to create models of integrated systems that employ legacy GAPs using a high-degree of automation. Models created using CINEMA may represent integrated systems capable of providing functionality in large-scale distributed enterprise environments that orchestrate different GAPs located on different computers and running on different platforms (e.g., operating systems and system configurations). CINEMA provides a non-invasive way to create models and generate source code to control GAPS. CINEMA allows modelers to create models using GUI objects with only a basic knowledge of how to interact with GAPs in order to accomplish business tasks. CINEMA allows modelers to create models using GUI objects without writing code for the models, knowledge of the source code of components, parsing any source code, and without writing complicated code to change program executables.","Other systems, methods, features and advantages will be, or will become, apparent to one with skill in the art upon examination of the figures and detailed description. All such additional systems, methods, features and advantages are included within this description, are within the scope of the claimed subject matter, and are protected by the following claims.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["100","102","100","102","104","106","108","100","100","110","112","114","116","118","172","112","116","118"]},"The memory  stores compositional event-based modeling (CINEMA) instructions  that when executed by the processor  cause the processor to receive, through the user interface , a graphical user interface (GUI) object definition  of a GUI object  of an external GUI application (GAP) . The user  selects the GUI object  from the external GAP . The GUI object definition  includes a GUI object properties set .","In one implementation, CINEMA  may invoke the external GAPs . The external GAPs  are separate from CINEMA . In other words, the external GAPs  may run without CINEMA  running and\/or without CINEMA  invoking the external GAPs . In one implementation, external GAPs  run in a separate process space and shares no variables with CINEMA . In another implementation, external GAPs  run in the process space of CINEMA  when CINEMA  invokes the external GAPs . In still another implementation, the user  may configure CINEMA  to operate with external GAPs  running in one of three isolation modes, including a low isolation, medium isolation, and high isolation mode. In the low isolation mode, an external GAP  runs in the same process space as CINEMA  when CINEMA  invokes the external GAPs . In the medium mode, multiple GAPs  run in one process space, while CINEMA  runs in a separate process space. In the high isolation mode, each of the multiple GAPs  run in separate process spaces, and CINEMA  runs in still another separate process space. The user  may select the isolation mode based on the system computing resources available to the CINEMA system configuration  and\/or the particular GAPs  the user  desires to use for modeling.","CINEMA  includes a modeling element palette  that includes an existing modeling element , and a modeling canvas . CINEMA  allows the user  to create, in the modeling element palette , a new modeling element  from the GUI object definition  by generating a modeling element class  for the GUI object  to obtain the new modeling element . CINEMA  generates the modeling element class  by defining an action  performed by the GUI object , a modeling element type , a data type , and a function  performed by a method  of the GUI object . In one implementation, the user  defines the action , element type , data type , and function  for the modeling element class  for the new modeling element . In one implementation, CINEMA  generates the new modeling element  by transcoding the GUI object definition to obtain a modeling element representation for the GUI modeling element.","CINEMA  generates code that mimics a human-driven procedure of interacting with the GAPs , referred to as transcoding. CINEMA  transcodes the GUI object properties set  into transcoded GUI object instructions  (e.g., programming instructions) that a resulting integrated system and\/or composite integrated system (e.g., ,  and ) may execute to control and manipulate GUI objects  of GAPs . In one implementation, the compositional event-based modeling instructions  cause the processor to transcode the GUI object properties set  to obtain transcoded GUI object instructions  configured to locate, manipulate and control the GUI object . CINEMA  may also generate exception handling code that handles exceptions that may be thrown while controlling GAPs  (e.g., showing a message box informing users about incorrectly formatted input). The compositional event-based modeling instructions  may further cause the processor to bind  the transcoded GUI object instructions  to obtain processor  executable model instructions  that cause the processor  to manipulate the GUI object  according to a model  created using the new modeling element .","Referring briefly to , the GUI object properties set  includes: a GUI object access method  that determines how to access the GUI object , and GUI object navigation information  that captures how to navigate to the GUI object  in the GAP . The GUI object properties set  further includes: GUI object identifier information ; geometry information ; access rights ; read and write constraints ; input parameters ; transient values ; and return parameters . In one implementation, CINEMA  transcodes the GUI object properties set  in order to create the new modeling element  and generates programming instructions (e.g., transcoded GUI object instructions ) for an integrated system and\/or composite integrated system (e.g., ,  and ) to use to control and manipulate GAPs  and other components (e.g., web services and other GAPs), discussed in detail below.","Returning to , the GUI object properties set  provides CINEMA  information about the structure of the GAP  and the GUI object  using accessibility-enabled interfaces  (e.g., accessibility API calls), that CINEMA  records while the user  interacts (e.g., user interactions) with the GAP , GUI object , and the sequence of GUI screens  of the GAP . In one implementation, CINEMA  uses the accessibility API calls  and hooks  (e.g., event listeners) in GAPs  to receive the GUI object properties set . The hooks  respond to events that CINEMA  captures as the GUI object properties set . Discussed in further detail below, CINEMA may use the GUI object properties set  to generate source code (e.g., model instructions ) of a chosen programming language (e.g., language selection ) from the model , and compile and execute the source code (e.g., model instructions ). CINEMA  may generate exception handling code  that handles exceptions that may be thrown while controlling GAPs  (e.g., showing a message box informing users about incorrectly formatted input) using the model instructions .","Table 1 shows how CINEMA , in one implementation, creates a GUI object class (e.g., new modeling element ) for a GUI object .",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Create a GUI Object Class (e.g., a New Modeling Element)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/** Reference refers to a GAP from which CINEMA creates a new GUI object class"},{"entry":"(e.g., new modeling element) **\/"},{"entry":"public \u2003class \u2003Reference \u2003implements \u2003CINEMAEventProvider<Reference>,"},{"entry":"CINEMAEventListener<SmartClass>, IPropertySource {"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Suffix for service class name bindings."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private static final String CLASS_NAME_SUFFIX = \u201c\u201d;"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Package prefix for generated services."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private static final String PACKAGE_PREFIX ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ccom.companyABC.techlabs.smart\u201d;"},{"entry":"\u2003private static final String PROPERTY_NAME = \u201cPROPERTY_NAME\u201d;"},{"entry":"\u2003private static final String PROPERTY_HOST = \u201cPROPERTY_HOST\u201d;"},{"entry":"\u2003private static final String PROPERTY_PORT = \u201cPROPERTY_PORT\u201d;"},{"entry":"\u2003private static final String PROPERTY_DESCRIPTION ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cPROPERTY_DESCRIPTION\u201d;"},{"entry":"\u2003private static final Logger LOGGER = Logger.getLogger(Reference.class);"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Determines if a proposed service name is valid."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @param name"},{"entry":"\u2003\u2009* The proposed name of the service."},{"entry":"\u2003\u2009* \u2003\u2003\u2003@return True if the service name is valid; false otherwise."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public static boolean isValidReferenceName(String name) {"},{"entry":"\u2003\u2003boolean valid = false;"},{"entry":"\u2003\u2003if (name != null) {"},{"entry":"\u2003\u2003\u2003if (name.length( ) > 0 && !\u201c\u201d.equals(name)) {"},{"entry":"\u2003\u2003\u2003\u2003\/\/ verify that we have a valid name"},{"entry":"\u2003\u2003\u2003\u2003RegularExpression regEx = new RegularExpression(\u201c{circumflex over (\u2009)}[A-Z]{1}[A-Za-z0-"},{"entry":"9]*$\u201d);"},{"entry":"\u2003\u2003\u2003\u2003if (regEx.matches(name)) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003valid = true;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003return valid;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* The description of the reference."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private String description_;"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Delegate that handles property change events."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private \u2003SmartEventProviderHelper<Reference>\u2003eventProvider=\u2003new"},{"entry":"SmartEventProviderHelper<Reference>( );"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* The reference's CINEMA host."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private String host= null;"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* The name of the reference."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private String name= null;"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* A list of classes available on this reference."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private List<SmartClass> smartClasses= new ArrayList<SmartClass> ( );"},{"entry":"\u2003private Application application_;"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* The port of the CINEMA host."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private int port= \u22121;"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* List of property descriptors."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private IPropertyDescriptor[ ] propertyDescriptors_;"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Create an instance of Reference."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @param name"},{"entry":"\u2003\u2009* \u2003\u2003\u2003The name of the reference."},{"entry":"\u2003\u2009* @param description"},{"entry":"\u2003\u2009* \u2003\u2003\u2003The description of the service."},{"entry":"\u2003\u2009* @param host"},{"entry":"\u2003\u2009* \u2003\u2003\u2003The host to connect to."},{"entry":"\u2003\u2009* @param port"},{"entry":"\u2003\u2009* \u2003\u2003\u2003The port to connect on."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public Reference(String name, String description, String host, int port) {"},{"entry":"\u2003\u2003name= name;"},{"entry":"\u2003\u2003description= description;"},{"entry":"\u2003\u2003host= host;"},{"entry":"\u2003\u2003port= port;"},{"entry":"\u2003}"},{"entry":"\u2003public Reference(String name, String description) {"},{"entry":"\u2003\u2003\u2003name= name;"},{"entry":"\u2003\u2003\u2003description= description;"},{"entry":"\u2003}"},{"entry":"\u2003\/** {@inheritDoc} *\/"},{"entry":"\u2003public void addEventListener(CINEMAEventListener<Reference> listener) {"},{"entry":"\u2003\u2003eventProvider_.addEventListener(listener);"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Creates a new smart class on this reference."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @return The new smart class."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public SmartClass createClass( ) {"},{"entry":"\u2003\u2003String className = \u201cScreen\u201d + (smartClasses_.size( ) + 1);"},{"entry":"\u2003\u2003LOGGER.debug(\u201ccreateClass( ) name: \u201d + className);"},{"entry":"\u2003\u2003SmartClass smartClass = new SmartClass(this, className);"},{"entry":"\u2003\u2003smartClasses_.add(smartClass);"},{"entry":"\u2003\u2003if (application!= null) {"},{"entry":"\u2003\u2003\u2003application_.addSmartClass(smartClass);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003LOGGER.debug(\u201csmart class created: \u201d + smartClass);"},{"entry":"\u2003\u2003notifyListeners( );"},{"entry":"\u2003\u2003return smartClass;"},{"entry":"\u2003}"},{"entry":"\u2003public Application getApplication( ) {"},{"entry":"\u2003\u2003\u2003return application_;"},{"entry":"\u2003}"},{"entry":"\u2003public void setApplication (Application app) {"},{"entry":"\u2003\u2003\u2003application= app;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Gets the class name for this reference."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @return The class name for this service."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public String getClassName( ) {"},{"entry":"\u2003\u2003return this.getName( ) + CLASS_NAME_SUFFIX;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Gets the description of the service."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @return the description of the service."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public String getDescription( ) {"},{"entry":"\u2003\u2003return description_;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Gets the value of host."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @return the host"},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public String getHost( ) {"},{"entry":"\u2003\u2003return host_;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Gets the name of the service."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @return The name of the service."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public String getName( ) {"},{"entry":"\u2003\u2003String name = name_;"},{"entry":"\/* \u2003\u2003if (getSmartClasses( ) != null && getSmartClasses( ).get(0) != null) {"},{"entry":"\u2003\u2003\u2003name = getSmartClasses( ).get(0).getName( );"},{"entry":"\u2003\u2003}"},{"entry":"*\/"},{"entry":"\u2003\u2003return name;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Creates an iterator over the list of operations in this service."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @return Returns an iterator of the operations."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public List<SmartClass> getSmartClasses( ) {"},{"entry":"\u2003\u2003return new ArrayList<SmartClass>(smartClasses_);"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Gets the package name for this service."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @return The Java package name for this service."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public String getPackageName( ) {"},{"entry":"\u2003\u2003return PACKAGE_PREFIX;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Gets the value of port."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @return the port"},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public int getPort( ) {"},{"entry":"\u2003\u2003return port_;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Determines if the service can be published or not."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @return True if the service and its operations are in a publishable"},{"entry":"\u2003\u2009* \u2003\u2003state; False otherwise."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public boolean isPublishable( ) {"},{"entry":"\u2003\u2003boolean readyToPublish = true;"},{"entry":"\u2003\u2003\/\/ must have a none null service name"},{"entry":"\u2003\u2003if (getName( ) == null || getName( ).length( ) == 0) {"},{"entry":"\u2003\u2003\u2003readyToPublish = false;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ make sure that each operation is publishable"},{"entry":"\u2003\u2003if (smartClasses!= null && smartClasses_.size( ) > 0) {"},{"entry":"\u2003\u2003\u2003for (SmartClass theClass : smartClasses_) {"},{"entry":"\u2003\u2003\u2003\u2003readyToPublish = readyToPublish & theClass.isPublishable( );"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003} else {"},{"entry":"\u2003\u2003\u2003readyToPublish = false;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003return readyToPublish;"},{"entry":"\u2003}"},{"entry":"\u2003\/** {@inheritDoc} *\/"},{"entry":"\u2003public void propertyChanged(SmartClass model) {"},{"entry":"\u2003\u2003\/\/ when the underlying operations change, the service changed!"},{"entry":"\u2003\u2003notifyListeners( );"},{"entry":"\u2003}"},{"entry":"\u2003\/** {@inheritDoc} *\/"},{"entry":"\u2003public void removeEventListener(CINEMAEventListener<Reference> listener) {"},{"entry":"\u2003\u2003eventProvider_.removeEventListener(listener);"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Removes the class from the reference."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @param theClass"},{"entry":"\u2003\u2009* \u2003\u2003The smart class to remove."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public void removeClass(SmartClass theClass) {"},{"entry":"\u2003\u2003if (theClass != null) {"},{"entry":"\u2003\u2003\u2003smartClasses_.remove(theClass);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003notifyListeners( );"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Sets the description of the service."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @param description"},{"entry":"\u2003\u2009* \u2003\u2003\u2003The description of the service."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public void setDescription(String description) {"},{"entry":"\u2003\u2003if (description!= description && !description_.equals(description)) {"},{"entry":"\u2003\u2003\u2003description= description;"},{"entry":"\u2003\u2003\u2003notifyListeners( );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Set the value of host."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @param host"},{"entry":"\u2003\u2009* \u2003\u2003\u2003The host to set."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public void setHost(String host) {"},{"entry":"\u2003\u2003host= host;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Set the value of name."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @param name"},{"entry":"\u2003\u2009* \u2003\u2003\u2003The name to set."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public void setName(String name) {"},{"entry":"\u2003\u2003if (name== null || !name_.equals(name)) {"},{"entry":"\u2003\u2003\u2003if (isValidReferenceName(name)) {"},{"entry":"\u2003\u2003\u2003\u2003name_= name;"},{"entry":"\u2003\u2003\u2003\u2003notifyListeners( );"},{"entry":"\u2003\u2003\u2003} else {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003\u2003throw","new"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"IllegalArgumentException(generateInvalidReferenceNameMessage(name));"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* TODO Describe method generateInvalidServiceNameMessage."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @param name"},{"entry":"\u2003\u2009* @return"},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private String generateInvalidReferenceNameMessage(String name) {"},{"entry":"\u2003\u2003return \u201cService names must start with a capital letter and may only contain"},{"entry":"alphanumeric characters.\u201d;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Set the value of port."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @param port"},{"entry":"\u2003\u2009* \u2003\u2003\u2003The port to set."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public void setPort(int port) {"},{"entry":"\u2003\u2003port= port;"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Notifies all service listeners that an event has occurred."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private synchronized void notifyListeners( ) {"},{"entry":"\u2003\u2003eventProvider_.notifyListeners(this);"},{"entry":"\u2003}"},{"entry":"\u2003\/** {@inheritDoc} *\/"},{"entry":"\u2003public Object getEditableValue( ) {"},{"entry":"\u2003\u2003\/\/ TODO Auto-generated method stub"},{"entry":"\u2003\u2003return null;"},{"entry":"\u2003}"},{"entry":"\u2003\/** {@inheritDoc} *\/"},{"entry":"\u2003public IPropertyDescriptor[ ] getPropertyDescriptors( ) {"},{"entry":"\u2003\u2003if (propertyDescriptors== null) {"},{"entry":"\u2003\u2003\u2003PropertyDescriptor nameDescriptor ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new PropertyDescriptor(PROPERTY_NAME, \u201cName\u201d);"},{"entry":"\u2003\u2003\u2003nameDescriptor.setDescription(\u201cThe name of the reference.\u201d);"},{"entry":"\u2003\u2003\u2003nameDescriptor.setCategory(\u201cReference\u201d);"},{"entry":"\u2003\u2003\u2003nameDescriptor.setAlwaysIncompatible(true);"},{"entry":"\u2003\u2003\u2003PropertyDescriptor descDescriptor ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2009new PropertyDescriptor(PROPERTY_DESCRIPTION, \u201cDescription\u201d);"},{"entry":"\u2003\u2003\u2003descDescriptor.setDescription(\u201cThe description of the reference.\u201d);"},{"entry":"\u2003\u2003\u2003descDescriptor.setCategory(\u201cReference\u201d);"},{"entry":"\u2003\u2003\u2003descDescriptor.setAlwaysIncompatible(true);"},{"entry":"\u2003\u2003\u2003propertyDescriptors= new IPropertyDescriptor[ ] {"},{"entry":"\u2003\u2003\u2003\u2003\u2003nameDescriptor, descDescriptor"},{"entry":"\u2003\u2003\u2003};"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003return propertyDescriptors_;"},{"entry":"\u2003}"},{"entry":"\u2003\/** {@inheritDoc} *\/"},{"entry":"\u2003public Object getPropertyValue(Object id) {"},{"entry":"\u2003\u2003if (PROPERTY_NAME.equals(id)) {"},{"entry":"\u2003\u2003\u2003return getName( );"},{"entry":"\u2003\u2003} else if (PROPERTY_DESCRIPTION.equals(id)) {"},{"entry":"\u2003\u2003\u2003return getDescription( );"},{"entry":"\u2003\u2003} else if (PROPERTY_HOST.equals(id)) {"},{"entry":"\u2003\u2003\u2003return getHost( );"},{"entry":"\u2003\u2003} else if (PROPERTY_PORT.equals(id)) {"},{"entry":"\u2003\u2003\u2003return getPort( );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003return null;"},{"entry":"\u2003}"},{"entry":"\u2003\/** {@inheritDoc} *\/"},{"entry":"\u2003public boolean isPropertySet(Object id) {"},{"entry":"\u2003\u2003\/\/ TODO Auto-generated method stub"},{"entry":"\u2003\u2003return false;"},{"entry":"\u2003}"},{"entry":"\u2003\/** {@inheritDoc} *\/"},{"entry":"\u2003public void resetPropertyValue(Object id) {"},{"entry":"\u2003\u2003\/\/ TODO Auto-generated method stub"},{"entry":"\u2003}"},{"entry":"\u2003\/** {@inheritDoc} *\/"},{"entry":"\u2003public void setPropertyValue(Object id, Object value) {"},{"entry":"\u2003\u2003if (PROPERTY_NAME.equals(id)) {"},{"entry":"\u2003\u2003\u2003if (value instanceof String) {"},{"entry":"\u2003\u2003\u2003\u2003setName((String) value);"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003} else if (PROPERTY_DESCRIPTION.equals(id)) {"},{"entry":"\u2003\u2003\u2003if (value instanceof String) {"},{"entry":"\u2003\u2003\u2003\u2003setDescription((String) value);"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* TODO Describe method update."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public void update( ) {"},{"entry":"\u2003\u2003notifyListeners( );"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2","b":["200","200","202","204","206","208","120","106","200","154","208","102","126","204","210","211","112","210","158","212","214","124","158","216","218","102","204","220","102","126","136","222","224","124"]},"Table 2 shows an example of how CINEMA , in one implementation, captures operations (e.g., functions and\/or methods) for a new modeling element  for a GUI object . CINEMA  identifies the GAP  (e.g., state machine) and GUI object  from which the user  captures operations for a new modeling element  (e.g., referred to as className in Table 2 and Table 3 below). The user  performs actions on the GUI object  in order to capture the operations (e.g., functions and\/or methods) for the new modeling element . The user  drags and drops the GUI object  onto the modeling canvas  and CINEMA creates the new modeling element  in the modeling palette .",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Capture Operations for a New Modeling Element"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/** SmartClass captures the operations (e.g., function and\/or method) of a GUI object"},{"entry":"for a new modeling element. **\/"},{"entry":"\u2003private List<DragAndDrop> dragAndDropElements="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new ArrayList<DragAndDrop> ( );"},{"entry":"\u2003private Reference reference_;"},{"entry":"\u2003\u2002\/**"},{"entry":"\u2003\u2002* The GAP (e.g., state machine) that enables the operation of interest"},{"entry":"\u2003\u2002*\/"},{"entry":"\u2002private List<ApplicationStateMachine> stateMachines="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new ArrayList<ApplicationStateMachine>( );"},{"entry":"\u2003private List<Parameter> variables_;"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* A list of methods for the class"},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private List<Method> methods;"},{"entry":"\u2003public SmartClass(Reference reference, String className) {"},{"entry":"\u2003\u2003if (!isValidClassName(className)) {"},{"entry":"\u2003\u2003\u2003throw new IllegalArgumentException(\u201cThe name [\u201c + className + \u201d] \u201c"},{"entry":"\u2003\u2003\u2003\u2003\u2003+ \u201dis not valid. SmartClass names must start with a letter and\u201c"},{"entry":"\u2003\u2003\u2003\u2003\u2003+ \u201d may only contain alphanumeric characters.\u201d);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003name= className;"},{"entry":"\u2003\u2003reference= reference;"},{"entry":"\u2003\u2003variables= new ArrayList<Parameter>( );"},{"entry":"\u2003\u2003\/\/ add the default void return type"},{"entry":"\u2003\u2003Parameter defaultReturn = new Parameter(\u201c\u201d, \u201cvoid\u201d, ParameterUsage.Return);"},{"entry":"\u2003\u2003variables_.add(defaultReturn);"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Adds the specified action to the list of actions to be performed as a"},{"entry":"\u2003\u2009* part of this operation."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @param application"},{"entry":"\u2003\u2009*\u2003\u2003\u2003The application on which to perform the action."},{"entry":"\u2003\u2009* @param action"},{"entry":"\u2003\u2009*\u2003\u2003\u2003The action to perform."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public void performAction(Application application, ApplicationAction action) {"},{"entry":"\u2003\u2003ApplicationStateMachine stateMachine ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003getStateMachineForApplication(application);"},{"entry":"\u2003\u2003if (stateMachine != null) {"},{"entry":"\u2003\u2003\u2003stateMachine.performAction(action);"},{"entry":"\u2003\u2003\u2003notifyListeners( );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003public void performAction(Application application, ApplicationGuiElement element)"},{"entry":"{"},{"entry":"\u2003\u2003\u2002ApplicationStateMachine stateMachine ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003getStateMachineForApplication(application);"},{"entry":"\u2003\u2003\u2003DragAndDrop dragElement = (DragAndDrop) element;"},{"entry":"\u2003\u2003\u2003addDragAndDropElements(dragElement);"},{"entry":"\u2003\u2003if (stateMachine != null) {"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2002stateMachine.performAction(new ApplicationAction(dragElement,"},{"entry":"dragElement.getAction( )));"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002if (dragElement.getFunctions( ).indexOf(Function.ActionProducer) != \u22121"},{"entry":"|| dragElement.getFunctions( ).indexOf(Function.InputDataAcceptor) != \u22121) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/send action to engine"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003stateMachine.performAction(new"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ApplicationAction(dragElement, dragElement.getAction( )));"},{"entry":"\u2003\u2003\u2003\u2003Display.getDefault( ).asyncExec(new Runnable( ) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\/** {@inheritDoc} *\/"},{"entry":"\u2003\u2003\u2003\u2003\u2003public void run( ) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002try {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003SmartClass theClass ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003SmartPalette.getCurrentReference( ).createClass( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003SmartPalette.getDispatcher( ).setSmartClass(theClass);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\/\/ open the editor"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003IEditorInput input = SmartScreenEditorInput.createInput(theClass);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003IDE.openEditor(PlatformUI.getWorkbench( ).getActiveWorkbenchWindow( ).getActive"},{"entry":"Page( ), input, SmartScreenEditor.ID);"},{"entry":"theClass.addApplication(SmartPalette.getCurrentReference( ).getApplication( ));"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2002\/\/ wait a moment..."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003synchronized (this) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003this.wait(1000);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003} catch (InterruptedException e) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/ TODO Auto-generated catch block"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003e.printStackTrace( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002} catch (PartInitException e) {"},{"entry":"\u2003\u2003\u2002MessageDialog.openError(PlatformUI.getWorkbench( ).getActiveWorkbenchWindow( ).getShell( ),"},{"entry":"\u201cError\u201d, \u201cError opening view:\u201d + e.getMessage( ));"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002}"},{"entry":"\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003});"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002\/\/performStateTransition( );"},{"entry":"\u2003\u2003\u2002}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002notifyListeners( );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Performs a state transition by taking the set of actions on the current"},{"entry":"\u2003\u2009* state, performing them, and recording the new state of the application."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003public void performStateTransition( ) {"},{"entry":"\u2003\u2003if (stateMachines!= null) {"},{"entry":"\u2003\u2003\u2003for (ApplicationStateMachine stateMachine : stateMachines_) {"},{"entry":"\/\/\u2003\u2003\u2003\u2002stateMachine.performStateTransition(dispatcher_);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002stateMachine.performStateTransition(getDispatcher( ));"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003notifyListeners( );"},{"entry":"\u2003}"},{"entry":"\u2003\u2003public List<DragAndDrop> getDragAndDropElements( ) {"},{"entry":"\u2003\u2003\u2003return dragAndDropElements_;"},{"entry":"\u2003}"},{"entry":"\u2003public void addDragAndDropElements(DragAndDrop element) {"},{"entry":"\u2003\u2003\u2003boolean matchedElement = false;"},{"entry":"\u2003\u2003\u2003for (DragAndDrop element: dragAndDropElements_) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if (element.getUniqueId( ).equals(element_.getUniqueId( ))) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003matchedElement = true;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003if (!matchedElement)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003dragAndDropElements_.add(element);"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["102","134","216","218","112","114","102","114","102","112","124","114","134","216","218","302","114","112","102","102","166","168","160","112","124","114","158","112","124","304","114","124","112","306","114","124","124","308","310","102","156","126","124","102","112","102","136","222","234","136","222","234","146","226","112","124","124","112","124","114","124","126","124","114","124","124","208","312","114","124","102","134","216","218","134","216","218","124","112","314","102","134","216","218","128","204","154"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4"],"b":["400","124","102","112","402","404","406","408","124","410","412","414","416","418","112","124","124","402","124","402","124","124","410","402","404"]},"Under the GUI object state activated , the GUI object may be visible and available for user interactions. The GUI object  may transition (e.g.,  and ), between the GUI object states deactivated  and activated , an indefinite number of times during the lifetime of the GUI object . For example, going back and forth between multiple screens (e.g., ) in a GAP  hides (deactivates) one screen containing GUI objects  and activates another screen. Switching between the GUI object states deactivated  and activated  may not change the values that the GUI object  holds. Even so, a user  may not act on the GUI object  in the GUI object state deactivated . The GUI object state may transition (e.g.,  and ) to destroyed , for example when the GAP stops. CINEMA  receives and\/or captures actions (e.g., the operations and transition states) that describe the states of the GAP  in order to determine how the new modeling element  may be used in a model .","Referring briefly to , the user  may model a particular screen  for the model  by selecting a corresponding screen  tab in the CINEMA UI . CINEMA UI  displays the modeling canvas  that corresponds to the screen the user  desires to design for the model . The user  may specify the functions  that each GUI object  performs in the model . For example, the user  may specify which GUI objects (e.g.,  and ) receive values and\/or serve as inputs and which GUI objects produce output results (e.g.,  and ). Using CINEMA , a user  creates a model  using the modeling elements (e.g.,  and ) by dragging and dropping the modeling elements (e.g.,  and ) onto the modeling canvas .  shows a diagrammatic representation of the new modeling elements (e.g.,  and ) as object classes (e.g.,  and , respectively). The user  connects the modeling elements (e.g., object classes  and ) using connectors (e.g., , , ) that specify dependencies between the modeling elements (e.g., object classes). When the user  completes the model , the user  may generate model instructions  that cause the processor  to manipulate the GUI object  according to a model  created using the new modeling element .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 5","b":["102","152","124","154","102","156","126","124","502","102","134","126","124","504","114","154","134","506","134","208","200","114","138","140","142","144","136","134","508","154","134","130","114","238","240","208","234","222","510","238","240","208","242","250"]},"CINEMA  generates code that mimics a human-driven procedure of interacting with the GAPs , referred to as transcoding. In one implementation, compositional event-based modeling instructions  use the GUI object properties set , the modeling element class  and modeling dependencies  to transcode the new modeling element  into programming instructions (e.g., transcoded GUI object instructions ) (). An integrated system and\/or composite integrated system (e.g., ,  and ) may execute the transcoded GUI object instructions to locate, control and manipulate GUI objects  of GAPs .","CINEMA  records the states of a GAP  using the hook , listener (e.g., proxy ) and dispatcher . GAPs  may be represented by a tree structure that includes GUI screens  and GUI objects  within each GUI screen , along with the attributes of each GUI screen  and GUI object , and GUI object  functions (e.g., methods). CINEMA  traverses the GUI tree of the GAP  post-order, using accessibility technology, in order to capture the GUI object properties set . For each node of the GUI tree of the GAP , CINEMA  emits code for a GUI object class (e.g.,  and ) for a GUI object . A user  may retrieve data from and enter data into the GUI objects  of the GAP . The user may initiate transitions (e.g., GUI object state changes) by causing some actions (e.g., select a menu item or click on a button). A GAP  may perform some computations based on the user's  actions and present different GUI screens . The user  may continue the cycle until the user  has allowed CINEMA  to capture all the desired actions of the GAP .","Table 3 shows a declaration of a transcoded GUI object class (e.g.,  and ) for a GUI object . CINEMA  links generated GUI object classes (e.g., ,  and ) to GUI objects . The transcoded GUI object instructions  may include a GUI object class declaration, as shown in Table 3. The GUI object class declaration includes methods for locating the given GUI object  in the GAP , setting and getting the values for the GUI object , and performing an action on the GUI object . GUI objects  include semantically meaningful types of the data that users  use to model the GUI objects  as new modeling elements  (e.g.,  and ). CINEMA  allows users  to type GUI objects  and bind names to the GUI objects . Using CINEMA, a user  captures the properties of GUI objects  and assigns names and types to the GUI objects . For example, a user  may assign different names but the same type to different GUI objects  that hold values of the same semantic concept (e.g., addresses or credit card numbers) even though the GUI objects  may be hosted by different GAPs .",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"An example Declaration of a GUI Object Class"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Line 1 \u2002public class ClassName {"]},{"entry":[{},"Line 2 \u2003\u2003\u2003\u2003private int ElementId = 0x41;"]},{"entry":[{},"Line 3 \u2003\u2003\u2003\u2003private void Locate ( int ProcId ) { ... }"]},{"entry":[{},"Line 4 \u2003\u2003\u2003\u2003ClassName( int ProcId ) {"]},{"entry":[{},"Line 5 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002Locate(ProcId);... }"]},{"entry":[{},"Line 6 \u2003\u2003\u2003\u2003public void Set ( type var ) { ... }"]},{"entry":[{},"Line 7 \u2003\u2003\u2003\u2003public type Get( ) { ... }"]},{"entry":[{},"Line 8 \u2003\u2003\u2003\u2003public void Dolt(String act }{ ... }}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"When a GAP  starts, the operating system assigns a positive integer number to each window (e.g., a particular GUI object ) that identifies the order number in which a GUI object  takes focus when navigating through GUI screens . The GUI order number is represented by the private variable ElementId, which is initialized with a negative number (shown in line 2 of Table 3). The private method Locate takes the process identifier of the GAP  as a parameter and retrieves the ElementId for a given GUI object  for the GAP  (shown in line 3 of Table 3). When CINEMA  emits the code for the Locate method, CINEMA  uses the accessibility API functions to obtain information (e.g., the GUI object properties set ) about GUI objects  in the GUI tree that lie in the path to the given GUI object . When CINEMA  executes the method Locate in the constructor (shown in lines 4-5 of Table 3), the method Locate uses the location information (e.g., the GUI object properties set ) to navigate to the GUI object  and obtain the GUI object's identifier, which CINEMA  uses in methods setValue, getValue, and Dolt (shown in lines 6, 7 and 8 of Table 3) to access the GUI object .","Methods setValue and getValue (shown in lines 6 and 7 of Table 3) set and retrieve values of GUI objects . By default, the type of the data is string, unless the user specifies the type as integer or float. The code for setValue and getValue methods uses the accessibility API functions with the ElementId to locate the GUI object  in the GUI screen  and set or retrieve the value of the GUI object . The method Dolt (shown in line 8 of Table 3) takes an argument that specifies an action taken relating to the GUI object , and where the argument for the method Dolt is null, a default action provided by the accessibility API function is executed. CINEMA  generates exception handling code  that handles exceptions that may be thrown while controlling GAPs  (e.g., showing a message box informing users about incorrectly formatted input) using the methods.","In one implementation, when the user  completes the design of the model , the user  generates the model instructions  by selecting the generate model source  selection on the CINEMA UI . CINEMA  may prompt the user  to select a source code language to use in order to generate source code of a chosen language from the model  (), and compile and execute the source code .","CINEMA binds the transcoded GUI object instructions  to obtain the processor executable model instructions  that an integrated system (e.g.,  and ) and\/or composite integrated system  may execute to locate, control, and manipulate the GUI objects  (). Binding GUI object classes (e.g., transcoded GUI object instructions ) to instances of the GUI objects  using the operator \u201cnew\u201d is a straightforward procedure in modern Object Oriented () languages such as Java\u2122. However, the semantics of the \u201cnew\u201d operation is complicated when the operation involves GUI objects created by GAPs. From the modeler's (e.g., user ) perspective, GUI objects appear asynchronously and GAPs  change the states of the GUI objects  as a result of internal computations. Although, a user  may not specify how to manage the lifecycle of GUI objects  using an integrated system, a user  may use CINEMA  to deploy GUI objects  as programming objects (e.g., transcoded GUI object instructions ) in the source code of integrated systems and\/or composite integration systems (e.g., , , and ).","CINEMA  defines bindings between programming objects (e.g., transcoded GUI object instructions ) in models  and GUI objects . Recall that GUI objects  exist within the contexts of corresponding GAPs , and programming objects (e.g., a modeling element GUI object class , , and ) in models  represent corresponding GUI objects . CINEMA  serves as a connector between models  and GAPs  that enables the programming objects to bind to respective GUI objects . Using CINEMA , the lifecycle of a programming object may be tightly linked to the lifecycle of a GUI object  to which the programming object represents. However, some operations do not make sense when performed on programming objects, e.g., using the operator new to create objects. Thus, bindings between programming objects (e.g., transcoded GUI object instructions ) and GUI objects  determine what operations may be performed on programming objects, so that the programming objects do not throw runtime exceptions.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 6","b":["600","124","112","102","124","112","134","216","218","154","134","216","218","112","124","154","152","154","102","136","222","234","124","102","124","602"]},"The \u2018GUI Object Instantiation Time\u2019  indicates at what point in the execution of a GAP  the GAP  instantiates a GUI object  hosted by the GAP . The \u2018GUI Object Instantiation Time\u2019  identifies three time frames, including: past , current , and future . A GUI object  may be instantiated in the past , which indicates that the GUI object  was previously available to users to perform actions on the GUI object  up to some point during the execution of the GAP . A currently available (e.g., current ) GUI object  allows users to perform different actions, and some GUI object  may be instantiated at some point in the future . A user  may find predicting the values held by a GUI object  instantiated in future difficult. CINEMA  allows the user  to set the values of a GUI object  using programming object counterparts, so that when the GAP  instantiates the GUI object  the values of the GUI object  may be set.","Three types of bindings may be used, including active , passive , and static . The active  binding between a GUI object  and programming object indicates the GUI object  is activated (e.g., ) on a GUI screen . In contrast, the passive  binding indicates the GUI object  is in a deactivated state (e.g., ). The static  binding indicates the GUI object  may be considered a static variable, such as in Java\u2122. A static variable is activated when the variable's scope is reentered. In some situations, a GUI object  exists on a screen that is overshadowed by another screen (e.g., layers in web browsers), and even though the GUI object  is not accessible by a user , operations may be performed on the GUI object . In such situations, the binding for the GUI object  may be considered static rather than passive.","Operations for three combinations of instantiation time and binding specifiers are prohibited, including: past and active ; current and passive ; and future and active . The symbol \u2018X\u2019 (e.g., , , and ) indicates prohibited operations for particular combinations of instantiation time and binding specifiers. A GUI object  cannot have an active  binding when the GUI object was instantiated in the past . Similarly, a GUI object  instantiated at some point in time in future  may not have an active  binding. A GUI object  that is currently available (e.g., ) cannot be considered passive .","Three types of operations may be performed on a GUI object , including reading values from, writing values into, and invoking methods (e.g., actions, operations and\/or functions) on the GUI object . For a GUI object  instantiated in the past  with the passive  bindings, only the operation of reading the values of the GUI object  may be performed. When a GUI object  is deactivated, the values of the GUI object  are retrieved and stored, so that the values of the GUI object  may be retrieved at a later time. For a GUI object  instantiated in the future  with the passive  binding, only the operation of writing values to the GUI object may be performed. In other words, the values of the GUI object  may be set, even if the GUI object  is not yet instantiated by a GAP . The set value for the GUI object  may be stored so that when the GUI object  is created and activated, the GUI object's  value will be set.","Table 4 shows how CINEMA , in one implementation, generates a web service from a model .",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Generating a Web Service from a Model"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/** Generate web service from model **\/"},{"entry":"\u2003\u2003public class SmartClassesGenerator implements IRunnableWithProgress {"},{"entry":"\u2003\u2003private static final String BUILD_XML_TEMPLATE = TEMPLATES_DIRECTORY"},{"entry":"+ \u201c\/build.xml.vm\u201d;"},{"entry":"\/**"},{"entry":"\u2003\u2009* Location of the {ServiceName}BindingImpl.java template."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private static final String CLASS_IMPL_TEMPLATE = TEMPLATES_DIRECTORY"},{"entry":"+ \u201c\/ElementClass.java.vm\u201d;"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* The Service object used to generate a web service."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private Reference reference= null;"},{"entry":"public SmartClassesGenerator(Reference reference) {"},{"entry":"\u2003\u2003reference= reference;"},{"entry":"\u2003}"},{"entry":"\u2003public void run(IProgressMonitor monitor)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003throws InvocationTargetException, InterruptedException {"},{"entry":"\u2003\u2003setError(null);"},{"entry":"\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\/\/ export the service"},{"entry":"\u2003\u2003\u2003exportSmartClass(monitor);"},{"entry":"\u2003\u2003} catch (IOException e) {"},{"entry":"\u2003\u2003\u2003setError(new GeneratorException(\u201cUnable to export service.\u201d, e));"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Clears the generated output folder. This is needed in case we want to"},{"entry":"\u2003\u2009* regenerate or update an existing service."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private void clearFolder( ) {"},{"entry":"\u2003\u2003File folder = new File(getOutputFolder( ));"},{"entry":"\u2003\u2003if (folder.exists( )) {"},{"entry":"\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003\/\/ do the equivalent of \u201crm -r *\u201d"},{"entry":"\u2003\u2003\u2003\u2003FileUtils.deleteDirectory(folder);"},{"entry":"\u2003\u2003\u2003} catch (IOException e) {"},{"entry":"\u2003\u2003\u2003\u2003LOGGER.error(\u201cUnable to delete [\u201c + getOutputFolder( ) + \u201d] due to:\u201d, e);"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ make the empty directories"},{"entry":"\u2003\u2003folder.mkdirs( );"},{"entry":"\u2003}"},{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Creates the \u201cbuild.xml\u201d files and deploy the file."},{"entry":"\u2003\u2009*"},{"entry":"\u2003\u2009* @throws IOException"},{"entry":"\u2003\u2009* \u2003\u2003\u2003If there is an error creating the file."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private void createBuildXml( ) throws IOException {"},{"entry":"\u2003\u2003String filePath = getOutputFolder( );"},{"entry":"\u2003\u2003String fileName = \u201cbuild.xml\u201d;"},{"entry":"\u2003\u2003createFile(filePath, fileName, BUILD_XML_TEMPLATE);"},{"entry":"\u2003}"},{"entry":"\u2003private void createFile(String folderPath, String fileName, String templateFilePath)"},{"entry":"throws IOException {"},{"entry":"\u2003\u2003\/\/ make the file and create a stream"},{"entry":"\u2003\u2003File exportedFolder = new File(folderPath);"},{"entry":"\u2003\u2003exportedFolder.mkdirs( );"},{"entry":"\u2003\u2003File exportedFile\u2003=\u2003new\u2003File(exportedFolder.getAbsolutePath( )\u2003+ \u201c\/\u201d\u2003+"},{"entry":"fileName);"},{"entry":"\u2003\u2003exportedFile.createNewFile( );"},{"entry":"\u2003\u2003FileWriter fileWriter = new FileWriter(exportedFile);"},{"entry":"\u2003\u2003\/\/ translate the service to a Java file"},{"entry":"\/\/\u2003\u2003templateEngine_.translate(reference_, fileWriter, templateFilePath);"},{"entry":"\u2003\u2003\/\/ cleanup and close the stream"},{"entry":"\u2003\u2003fileWriter.flush( );"},{"entry":"\u2003\u2003fileWriter.close( );"},{"entry":"\u2003\u2003\/\/ debug"},{"entry":"\u2003\u2003LOGGER.debug(\u201cExported\u2003service's\u2003binding\u2003implementation\u2003to:\u2003[\u201c\u2003+"},{"entry":"exportedFile.getAbsolutePath( ) + \u201d]\u201d);"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Table 5 shows how CINEMA , in one implementation, generates Java\u2122 code from the GUI object class.",{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"An example of Creating Java\u2009\u2122 code from the GUI Object Class"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"private void createJavaImplementation( ) throws IOException {"},{"entry":"\u2003for (SmartClass theClass : reference_.getSmartClasses( )) {"},{"entry":"\u2003\u2003\u2003String packageDirectory = theClass.getPackageName( ).replace(\u201c.\u201d, \u201c\/\u201d);"},{"entry":"\u2003\u2003\u2003LOGGER.debug(\u201cwrite to package:\u201d + packageDirectory);"},{"entry":"\u2003\u2003\u2002for (DragAndDrop element : theClass.getDragAndDropElements( )) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003String filePath = getOutputFolder( ) + \u201c\/src\/\u201d + packageDirectory + \u201c\/\u201d;"},{"entry":"\u2003\u2003\u2003\u2003\u2003String fileName = element.getAlias( ) + \u201c.java\u201d;"},{"entry":"\u2003\u2003\u2003\u2003\u2003LOGGER.debug(\u201cthe\u2003\u2003file\u2003\u2003is\u2003\u2003written\u2003\u2003to\u2003\u2003:\u2003\u2003\u201d\u2003\u2003+"},{"entry":"System.getProperty(\u201cuser.dir\u201d) + \u201c\\\\\u201d + filePath + \u201c\\\\\u201d + fileName);"},{"entry":"\u2003\u2003\u2003\u2003\u2003createElementClass(filePath,\u2003\u2003fileName,\u2003\u2003theClass,\u2003\u2003element,"},{"entry":"CLASS_IMPL_TEMPLATE);"},{"entry":"\u2003\u2003\u2002}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003private void createElementClass (String folderPath, String fileName, SmartClass"},{"entry":"theClass, DragAndDrop element, String templateFilePath) throws IOException {"},{"entry":"\/\/ make the file and create a stream"},{"entry":"\u2003\u2003File exportedFolder = new File(folderPath);"},{"entry":"\u2003\u2003exportedFolder.mkdirs( );"},{"entry":"\u2003\u2003File exportedFile\u2003=\u2003new\u2003File(exportedFolder.getAbsolutePath( )\u2003+\u2003\u201c\/\u201d\u2003+"},{"entry":"fileName);"},{"entry":"\u2003\u2003exportedFile.createNewFile( );"},{"entry":"\u2003\u2003FileWriter fileWriter = new FileWriter(exportedFile);"},{"entry":"\u2003\u2003LOGGER.debug(\u201cwrite to file: \u201d + exportedFile.getAbsolutePath( ));"},{"entry":"\/\/\u2003\u2003\u2003\u2003\u2003createElementJavaFile(fileWriter, theClass, element);"},{"entry":"\u2003\u2003\u2003\u2003templateEngine_.translate(theClass, element, fileWriter, templateFilePath);"},{"entry":"\u2003\u2003\/\/ cleanup and close the stream"},{"entry":"\u2003\u2003fileWriter.flush( );"},{"entry":"\u2003\u2003fileWriter.close( );"},{"entry":"\u2003\u2003\/\/ debug"},{"entry":"\u2003\u2003LOGGER.debug(\u201cExported\u2003service's\u2003binding\u2003implementation\u2003to:\u2003[\u201c\u2003+"},{"entry":"exportedFile.getAbsolutePath( ) + \u201d]\u201d);"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Table 6 shows how CINEMA , in one implementation, generates XML for a GAP .",{"@attributes":{"id":"p-0069","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Generating XML from a GAP"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/**"},{"entry":"\u2003\u2009* Converts a GAP (e.g., state machine) into XML."},{"entry":"\u2003\u2009*\/"},{"entry":"\u2003private void createStateMachineXml( ) {"},{"entry":"\u2003\u2003String filePath = getOutputFolder( );"},{"entry":"\u2003\u2003if (reference_.getSmartClasses( ) != null) {"},{"entry":"\u2003\u2003\u2003for (SmartClass theClass : reference_.getSmartClasses( )) {"},{"entry":"\u2003\u2003\u2003\u2003if (theClass.getStateMachines( ) != null) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003for\u2003\u2003\u2003\u2003\u2003(ApplicationStateMachine\u2003\u2003\u2003\u2003\u2003\u2002stateMachine :"},{"entry":"theClass.getStateMachines( )) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003String fileName = \u201cstateMachine-\u201d + theClass.getName( ) + \u201c-\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003+ stateMachine.getApplication( ).getAlias( ) + \u201c.xml\u201d;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/ make the file and create a stream"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003File exportedFolder = new File(filePath);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003exportedFolder.mkdirs( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003File exportedFile = new File(exportedFolder.getAbsolutePath( ) + \u201c\/\u201d"},{"entry":"+ fileName);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003exportedFile.createNewFile( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003FileOutputStream fileOutputStream ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new FileOutputStream(exportedFile);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/ translate the state machine to an xml file"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003StateMachineWriter stateMachineWriter ="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003new StateMachineWriter( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003stateMachineWriter.write(stateMachine, fileOutputStream);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/ cleanup and close the stream"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003fileOutputStream.flush( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003fileOutputStream.close( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\/\/ debug"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003LOGGER.debug(\u201cExported\u2003state\u2003machine\u2003for\u2003operation\u2003[\u201c\u2003+"},{"entry":"theClass.getName( ) + \u201d] to: [\u201c"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003+ exportedFile.getAbsolutePath( ) + \u201d]\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003} catch (IOException e) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003LOGGER.error(\u201cUnable to state machine due to:\u201d, e);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003private void createReplayScript( ) throws IOException{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002String\u2003\u2003filePath\u2003\u2003=\u2003\u2003getOutputFolder( )\u2003\u2003+\u2003\u2003\u201c\/src\/\u201d\u2003\u2003+"},{"entry":"reference_.getPackageName( ).replace(\u201c.\u201d, \u201c\/\u201d) + \u201c\/ReplayScript\u201d ;"},{"entry":"\u2003\u2003\u2003File exportedFolder = new File(filePath);"},{"entry":"\u2003\u2003exportedFolder.mkdirs( );"},{"entry":"\u2003\u2003File exportedFile\u2003=\u2003new\u2003File(exportedFolder.getAbsolutePath( )\u2003+\u2003\u201c\/\u201d\u2003+"},{"entry":"\u201cReplayScriptAdvisor.java\u201d);"},{"entry":"\u2003\u2003exportedFile.createNewFile( );"},{"entry":"\u2003\u2003FileWriter fileWriter = new FileWriter(exportedFile);"},{"entry":"\u2003\u2003\u2002templateEngine_.translate(reference_, fileWriter,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002REPLAYSCRIPT_IMPL_TEMPLATE);"},{"entry":"\u2003\u2003\/\/ cleanup and close the stream"},{"entry":"\u2003\u2003fileWriter.flush( );"},{"entry":"\u2003\u2003fileWriter.close( );"},{"entry":"\u2003}"},{"entry":"\u2003private\u2003\u2003void\u2003\u2003exportSmartClass(IProgressMonitor\u2003\u2003monitor)\u2003\u2003throws"},{"entry":"InterruptedException, IOException {"},{"entry":"\u2003\u2003if (reference!= null) {"},{"entry":"\u2003\u2003\u2003templateEngine= new VelocityTemplateEngine( );"},{"entry":"\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003\/\/ create all of the steps"},{"entry":"\u2003\u2003\u2003\u2003steps= new LinkedList<String>( );"},{"entry":"\u2003\u2003\u2003\u2003steps_.add(\u201cCleaning output...\u201d);"},{"entry":"\u2003\u2003\u2003\u2003steps_.add(\u201cCreating Java implementation\u201d);"},{"entry":"\/\/\u2003\u2003\u2003\u2003steps_.add(\u201cGenerating State Machine for each operation\u201d);"},{"entry":"\u2003\u2003\u2003\u2003\/\/steps_.add(\u201cCreating Ant file\u201d);"},{"entry":"\u2003\u2003\u2003\u2003steps_.add(\u201cCreating Replay Script\u201d);"},{"entry":"\/\/\u2003\u2003\u2003\u2003steps_.add(\u201cCopying dependencies and SMART framework\u201d);"},{"entry":"\u2003\u2003\u2003\u2003steps_.add(\u201cComplete!\u201d);"},{"entry":"\u2003\u2003\u2003\u2003monitor.beginTask(\u201cExporting SMART Class \\\u201c\u201d + reference_.getName( ) +"},{"entry":"\u201d\\\u201c\u201d, steps_.size( ));"},{"entry":"\u2003\u2003\u2003\u2003\/\/ clear the existing generated files (if any)"},{"entry":"\u2003\u2003\u2003\u2003step(monitor);"},{"entry":"\u2003\u2003\u2003\u2003clearFolder( );"},{"entry":"\u2003\u2003\u2003\u2003\/\/ create the java implementation"},{"entry":"\u2003\u2003\u2003\u2003step(monitor);"},{"entry":"\u2003\u2003\u2003\u2003createJavaImplementation( );"},{"entry":"\u2003\u2003\u2003\u2003\/\/ generating state machine xml"},{"entry":"\/\/\u2003\u2003\u2003step(monitor);"},{"entry":"\/\/\u2003\u2003\u2003createStateMachineXml( );"},{"entry":"\u2003\u2003\u2003\u2003\/\/ copy the build.xml to the new service folder"},{"entry":"\u2003\u2003\u2003\u2003step(monitor);"},{"entry":"\u2003\u2003\u2003\u2003\/\/createBuildXml( );"},{"entry":"\u2003\u2003\u2003\u2003createReplayScript( );"},{"entry":"\u2003\u2003\u2003\u2003\/\/ set marker to done"},{"entry":"\u2003\u2003\u2003\u2003step(monitor);"},{"entry":"\u2003\u2003\u2003} catch (IOException e) {"},{"entry":"\u2003\u2003\u2003\u2003throw e;"},{"entry":"\u2003\u2003\u2003} finally {"},{"entry":"\u2003\u2003\u2003\u2003monitor.done( );"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 7","b":["700","102","112","112","102","112","102","112","112"]},"The measurements , refer to one example implementation of CINEMA , that included Windows XP Pro\u2122 on a computer with Intel Pentium\u2122 IV 3.2 GHz CPU and 2 GB of RAM. The \u2018GAP name state no.\u2019  column lists the names of the GAPs (e.g., ) and the comma-separated GAP state identifier  that is the sequence number of the GUI screens . The visible, invisible and used columns (e.g., ,  and ), shown under the \u2018number of GUI elements\u2019 , indicate the number of visible and invisible GUI elements (e.g., GUI objects ) and the number of GUI elements including the parents of the GUI elements in the hierarchy that were used as parameters and\/or action targets in web services. The state XML bytes column  illustrates the size of the XML generated by CINEMA  to describe the given state of the GAP . The time sec column  illustrates the amount of time taken to generate and parse the state XML.","The effort required to create web services using CINEMA  was compared with the programming effort to create the same service by using the source code of GAPs . An application was built with accounting functionality. Using approximately nine hours to create and test the accounting GAP. Then, a web service was created using Microsoft\u2122 Visual Studio 2005, which has the state-of-the-art support for automating tasks for building web services. Within approximately one hour the user extracted the code from the accounting GAP, moved the code to the web service project, and compiled and debugged the code using the Studio. In contrast to the above scenarios, using CINEMA , a user spent less than ten minutes to generate a web service.","Alternatives to CINEMA  include the UniFrame\u2122 framework is a framework for building integrated systems by assembling pre-developed heterogeneous and distributed software components. The glue\/wrapper code that realizes the interoperation among distributed and heterogeneous software components can be generated from a descriptive model. However, the UniFrame\u2122 framework requires users to write code for models and possess the knowledge of the source code of components.","In another approach, a web browser-shell approach, a modeler may use a web browser-shell that integrates a command interpreter into the browser's location box to automate HTML interfaces. A browser-shell wraps legacy CLPs with an HTML\/CGI graphical interface. The web browser-shell approach depends heavily upon parsing HTML and extracting data from the command line input\/output.","Code patching and binary rewriting techniques modify the binary code of executable programs in order to control and manipulate them when integrating these programs into composite systems. However, code patching and binary rewriting techniques are platform-dependent and require programmers to write complicated code to change program executables. Programmers find using code patching and binary rewriting techniques difficult and error prone, and often cause applications to become unstable and crash.","Extracting information from GAPs and GUI elements, using the various other unworkable techniques may be referred to as screen-scraping. Macro recorders use this technique by recording the user's mouse movements and keystrokes, then playing them back by inserting simulated mouse and keyboard events in the system queue.","The logic, circuitry, and processing described above may be encoded or stored in a machine-readable or computer-readable medium such as a compact disc read only memory (CDROM), magnetic or optical disk, flash memory, random access memory (RAM) or read only memory (ROM), erasable programmable read only memory (EPROM) or other machine-readable medium as, for examples, instructions for execution by a processor, controller, or other processing device. The medium may be implemented as any device that contains, stores, communicates, propagates, or transports executable instructions for use by or in connection with an instruction executable system, apparatus, or device. Alternatively or additionally, the logic may be implemented as analog or digital logic using hardware, such as one or more integrated circuits, or one or more processors executing instructions; or in software in an application programming interface (API) or in a Dynamic Link Library (DLL), functions available in a shared memory or defined as local or remote procedure calls; or as a combination of hardware and software.","In other implementations, the logic may be represented in a signal or a propagated-signal medium. For example, the instructions that implement the logic of any given program may take the form of an electronic, magnetic, optical, electromagnetic, infrared, or other type of signal. The systems described above may receive such a signal at a communication interface, such as an optical fiber interface, antenna, or other analog or digital signal interface, recover the instructions from the signal, store them in a machine-readable memory, and\/or execute them with a processor.","The systems may include additional or different logic and may be implemented in many different ways. A processor may be implemented as a controller, microprocessor, microcontroller, application specific integrated circuit (ASIC), discrete logic, or a combination of other types of circuits or logic. Similarly, memories may be DRAM, SRAM, Flash, or other types of memory. Parameters (e.g., conditions and thresholds) and other data structures may be separately stored and managed, may be incorporated into a single memory or database, or may be logically and physically organized in many different ways. Programs and instructions may be parts of a single program, separate programs, or distributed across several memories and processors."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The system may be better understood with reference to the following drawings and description. The elements in the figures are not necessarily to scale, emphasis instead being placed upon illustrating the principles of the system. In the figures, like-referenced numerals designate corresponding parts throughout the different views.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
