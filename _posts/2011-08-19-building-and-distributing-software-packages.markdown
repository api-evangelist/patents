---
title: Building and distributing software packages
abstract: Embodiments relate to systems and methods for building and distributing software packages. A package manager generation tool can interface with a set of stages of a development environment to receive source code configured for a software package build. The package manager generation tool can further receive a configuration file from a web user interface, wherein the configuration file can comprise a set of commands that, when executed, can build a software package from the source code. A distribution schedule can indicate one or more distribution systems to which to distribute the software package. The package manager generation tool can distribute the software packages to the distribution systems specified by the distribution schedule.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990771&OS=08990771&RS=08990771
owner: Red Hat, Inc.
number: 08990771
owner_city: Raleigh
owner_country: US
publication_date: 20110819
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND OF RELATED ART","DESCRIPTION OF EMBODIMENTS"],"p":["The present teachings relate to systems and methods for building and distributing software packages, and more particularly, to platforms and techniques for configuring a build of data received from a development environment into a software package.","Users of physical or virtual machines commonly install software packages, including package updates, to physical or virtual machines. The software packages can contain a set of related files chosen to perform a given application or task, such as, for example, a group of software applications, drivers, and\/or other resources used to install and use messaging or media applications. In instances, a software package can contain application software, operating system software, drivers, patches, and\/or other software components grouped as a logical set. In implementations, the package can be stored or encoded as a single file or data object.","Software package update managers exist to help a user initiate and perform software package updates, such as, for example, the \u201cyum\u201d (Yellowdog update manager) package update manager and the Red Hat Network Satellite systems management platform, both available from Red Hat, Inc., Raleigh, N.C., and others. In general, available software package managers are configured to interact with the set of installed packages on a client and with one or more software package repositories, to directly connect to those databases and download available package updates.","Before gaining access to or receiving a software package update, the software package is generated by an integration tool or similar component. For example, the \u201cBuildbot\u201d software development continuous integration tool is a system that automates the compile\/test cycle sometimes required by software projects to validate code changes. For further example, the \u201cJenkins\u201d extendible open source continuous integration server can perform similar functionalities. As used herein, any continuous integration tool or server, such as Buildbot and Jenkins, can be referred to as \u201cbuild system.\u201d In particular, a build system is configured to build and test source code when the source code changes, or in other situations, to allow developers to remedy errors that the developers may not otherwise have been aware.","However, developers or other entities can have difficulty in actually providing source code to a build system or other tools to be built into a software package. Further, once the source code is provided to the build system or other tools, generating the configurations required for the build can prove difficult. Therefore, it may be desirable to provide systems and methods for building and distributing software packages. Further, it may be desirable to provide systems and methods for receiving locations of source code to be built into software packages and generating configuration commands for the build of the software packages.","Embodiments of the present teachings relate to systems and methods for building and distributing software packages. More particularly, embodiments relate to platforms and techniques for configuring a build of data received from a development environment into a software package. In embodiments, a package manager generation tool or other logic can receive an indication of source code available from a development environment or similar resource. The package manager generation tool can detect a location of the source code and retrieve the source code for configuration.","Further, in embodiments, a configuration file can be received from a web user interface or other resource, and can specify commands that can be used to build a software package from the source code. For example, a user can access the web user interface and input commands or other data for translation by the web user interface. The package manager generation tool or other logic can be configured to execute the configuration file to build the software package, and distribute the software package to one or more distribution systems. For example, the package manager generation tool or other logic can examine a distribution schedule or similar data to determine which of the distribution systems are to receive the software package.","Reference will now be made in detail to exemplary embodiments of the present teachings, which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","105","120","120","105","120","125","130","135","140","120","120","105","112"]},"In embodiments, the development stage  can refer to the stage in which source code relating to a software package is programmed, coded, or otherwise developed, by, for example, end customers, developers, or other entities. Further, in embodiments, the QA stage  can refer to the stage in which the source code is tested or monitored to ensure function and quality. In embodiments, the staging stage  can refer to the stage in which the source code and\/or applications associated with the source code can be executed, consumed, or monitored in a mirrored or similar environment to a production environment. In embodiments, the production stage  can refer to the stage in which the source code and\/or applications associated with the source code can be served to end users, clients, or customers.","As shown in , the system  can further comprise a client  configured to store, execute, and otherwise host a variety of resources including a package manager  and a package distribution module . In embodiments, the package manager  can be or can include a software application, a utility, an application programming interface (API) to an operating system of the client , a service, and\/or other local or remote logic or resources. According to embodiments, the package manager  can access and manage a set of software packages  for the client , and other hardware, software, and resources, to run, edit, update, configure, and otherwise manage the set of software packages in software package repositories  to be installed on or already installed on target machines of stages in the development environment . In embodiments, the package manager  can be or can include one or more commercially and\/or publicly available package manager applications or resources, such as the \u201cyum\u201d package update manager available from Red Hat, Inc., Raleigh, N.C., and others, based on or compatible with platforms such as the Red Hat package manager (RPM) platform, the \u201cDEB\u201d package platform as used by debian and ubuntu, or others. As used herein, the packages used by various platforms can be referred to as \u201csoftware packages.\u201d","In embodiments, the software packages in the software package repositories  can be or include packages comprising various types of applications, such as, for example, messaging applications, spreadsheet or modeling applications, social networking applications, word processing applications, and\/or other applications or utilities, and can in embodiments include an operating system, drivers, and\/or components. The software packages in the software package repositories  can have an associated set of package attributes which can record file names, versions, dates, software requirements, and\/or other attributes related to software package updates installed on the target machines of the development environment  and reflected in software packages in the software package repositories .","The package manager  can communicate with a network interface configured to connect to one or more networks , such as the public Internet or other public or private networks, to deliver the set of software packages  to the target machines of the development environment . Further, the package manager  can connect to one or more package distribution modules  hosting software package repositories  including software package updates, and\/or other software or resources.","In embodiments, the package manager  can communicate with the package distribution module . In embodiments, the package distribution module  is separate from the package manager , and can manage the development of software packages, such as set of software packages , within the development environment . The package manager  can also interact and\/or communicate with the set of software packages  and the one or more software package repositories  to initiate, configure, test, update, and\/or otherwise manage the set of software packages  operating on the client  and the target machines in the development environment . The package distribution module  can, for example, provide a user with a set of package update options displayed via a user interface (not shown in figures), such as a graphical user interface or others, to select various test, configuration, and\/or other management activities on the set of software packages . For example, a user can select to initiate an update on one or more of the set of software packages  or install a new package update on the target machines of the development environment  via the network .","According to the present embodiments, the build system  can be configured to receive source code  from the development environment  via the network  or other connections. In embodiments, the source code  can be a software package or any type of data configured to be built into a software package for distribution. Further, the source code  can correspond to data distributed to the development environment  from the package manager  of the client . In embodiments, the source code  can be received from any of the stages (, , , and ) of the development environment .","In embodiments, an owner or administrator associated with the build system  or another entity can receive an indication that the source code  is available to be built into a software package. For example, the indication can be a uniform resource locator (URL), memory location, or any other type of address or location indication that can specify a location at which the source code  is stored or otherwise available. In response to receiving the indication, the build system  can be configured to retrieve the source code  from the development environment , or access the source code  directly from the development environment .","According to embodiments, a web user interface  can be configured to interface with the build system  or other entities of the system . For example, the web user interface  can be the \u201cloki\u201d tool available from Red Hat, Inc., Raleigh, N.C., and others, that can be used to manage the build system . In embodiments, the web user interface  can be configured to receive input from a user, owner, administrator, or other entity. For example, the input can be commands that can be used to generate a configuration file associated with building and distributing software packages. The web user interface  can translate or convert any input received into configuration data  that can be, for example, any data comprising code, commands, or other forms of data that can be accessed and\/or executed by the build system . The web user interface  can be configured to provide the configuration data  to the build system  for associated processing. In embodiments, the web user interface  can be configured to provide the received input to the package manager generation tool  for translation or conversion by the package manager generation tool .","To configure a build of a software package, according to embodiments, the package manager generation tool  of the build system  can be configured to receive the configuration data  from the web user interface . In embodiments, the configuration data  can be received from a network such as a local network, the public Internet, or other public or private networks. In further embodiments, the package manager generation tool  can be configured to store the configuration data  in local or remote storage, such as a repository  as shown in .","The package manager generation tool  can be configured to execute the configuration data  in conjunction with the source code  received from the development environment  to generate a build of a software package  (\u201cSP\u201d). In particular, the configuration data  can specify a set of steps, commands, instructions, or the like, that are necessary to build the software package  from the code . It should be appreciated that other formats associated with a software package build are envisioned.","According to embodiments, once the software package  is generated, the package manager generation tool  can be configured to transmit, transport, send, or otherwise provide the software package  to one or more distribution systems , , . In embodiments, the one or more distribution systems , ,  can be located remote from or in general proximity to the build system . For example, the one or more distribution systems , ,  can be connected to the build  via a local network, the public Internet, or other public or private networks.","In embodiments, the package manager generation tool  can be configured to examine a distribution schedule that can outline or indicate particular distribution systems to which to send the software package . In embodiments, an owner, administrator, or other entity associated with the build system , the one or more distribution systems , , , or other entities can create, manage, or otherwise update the distribution schedule, which can be stored in the repository  or other resources associated with the system . In other embodiments, the owner, administrator, or other entity, can manually or directly specify which of the one or more distribution systems , ,  are to receive the software package . The package manager generation tool  or other logic can proceed to send one or more copies of the software package  to any or all of the one or more distribution systems , , , according to the distribution schedule, or other inputs or factors. In embodiments, the one or more distribution systems , ,  can receive the software package  and avail the software package  for downloading or accessing by users, entities, or other resources.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["105","105","202","204","210","210","202","208","110","208","202","206","212","202","110","105"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["302","304","306"]},"In , inputs can be received via a web interface. In embodiments, the inputs can be received from a user accessing the web interface, and can specify how the source code is to be built into a software package. In , the inputs received from the web interface can be translated into a configuration file. In embodiments, the configuration file can be generated by the web interface and provided to the package manager generation tool, or other logic. In , the configuration file can be executed to build a software package from the source code. In embodiments, the configuration file can convert the source code into the software package in a format of a distribution system. In , a distribution schedule associated with a set of distribution systems can be accessed. In embodiments, an owner or administrator associated with the package manager generation tool, or other logic or entities, can create and update the distribution schedule. In , the software package can be distributed to one or more of the set of distribution systems according to the distribution schedule. In embodiments, the owner or administrator can explicitly select which of the set of distribution system are to receive the software package. In , processing can end, repeat or return to any of the previous stages.","The foregoing description is illustrative, and variations in configuration and implementation may occur to persons skilled in the art. For example, while embodiments have been described in which a unitary package manager generation tool is configured to manage software package development, in embodiments, multiple modules or software can interact to control the downloading, installation, generation, distribution, and other management of software packages. While embodiments have been described in which package update activity is conducted on one client , in other embodiments, multiple local or remote targets, clients, and\/or other machines can register to package manager , package distribution module , and\/or other logic or resources to receive or perform package update activity. Other resources described as singular or integrated can in embodiments be plural or distributed, and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate embodiments of the present teachings and together with the description, serve to explain the principles of the present teachings. In the figures:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
