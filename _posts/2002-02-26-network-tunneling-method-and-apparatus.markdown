---
title: Network tunneling method and apparatus
abstract: Method and apparatus for tunneling any existing data-, control-, or routing-related protocol through a generic Internet protocol (IP) transport are described. The method includes providing a generic messaging structure that includes at least a transport protocol, a message buffer, a source-address field and one or more data fields for transparent routing of a user protocol over the IP transport and also providing an application program interface to the generic messaging structure, the interface including a mechanism for a user to choose a desired transport and associated protocol for transparently routing the user protocol over the transport in accordance with the chosen transport protocol within the one or more data fields. Alternatively or additionally, the method includes creating a base class library including plural defined source and header files and further providing a mechanism for deriving a transaction-based protocol-specific class that is compatible with the base class library. The apparatus is an application programming interface (API), preferably coded in C/C++, for transparently routing data between sockets in such an IP transport. The API includes a message buffer data structure defining a protocol-generic parent class, message, source-address and data fields; a message creation mechanism for creating a message and adding it to the message buffer data structure; and a protocol creation mechanism for deriving a protocol-specific child class that renders new protocol-specific sub-fields of the protocol field of the message buffer data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07395343&OS=07395343&RS=07395343
owner: Cisco Technology, Inc.
number: 07395343
owner_city: San Jose
owner_country: US
publication_date: 20020226
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE EMBODIMENTS","MsgBuff EXAMPLES","Outgoing TCAP Message","Outgoing ISUP Message","Outgoing MAC Message","Incoming Generic Message","Child Class Derivation","MsgBuff EXAMPLES","Outgoing FOO Message","Incoming FOO Message"],"p":["1. Field","This invention relates generally to tunneling methods and apparatus for transporting messages across a network interface. More particularly, it concerns an extensible application programming interface that provides access and control mechanisms for use in encapsulating any existing data-, control-, or routing-related protocol within a generic transport protocol.","2. Background","A method is needed for transporting Signaling System  (SS) messages across a Unix domain protocol\/internet protocol (UDP\/IP) interface. The method should accommodate other \u201capplication control\u201d messages. To this end, a new protocol is needed that can wrap any type of \u201cexisting\u201d protocol into a packet and deliver the encapsulated packet across the interface.","Method and apparatus for tunneling an existing protocol through a generic Internet protocol (IP) transport are described. The invented method includes providing a generic messaging structure that includes at least a transport protocol, a message buffer, a source-address field and one or more data fields for transparent routing of a user protocol over the IP transport and also providing an application program interface to the generic messaging structure, the interface including a mechanism for a user to choose a desired transport and associated protocol for transparently routing the user protocol over the transport in accordance with the chosen transport protocol within the one or more data fields. Alternatively or additionally, the invented method includes creating a base class library including plural defined source and header files and further providing a mechanism for deriving a transaction-based protocol-specific class that is compatible with the base class library.","The invented apparatus is an application programming interface (API), preferably coded in C\/C++, for transparently routing data between sockets in such an IP transport. The API includes a message buffer data structure defining a protocol-generic parent class, message, source-address and data fields; a message creation mechanism for creating a message and adding it to the message buffer data structure; and a protocol creation mechanism for deriving a protocol-specific child class that renders new protocol-specific parameters for use within the message buffer data structure.","A C\/C++ application programming interface (API) is proposed that allows any existing protocol to be routed between transmission control protocol (TCP) or UDP sockets. The invented API, referred to herein as MsgBuff, consists of specialized (for SS purposes) headers containing such information as linked and circuit identification code (CIC). This information is then followed by between zero and any (typically large) integer number of \u201ctag-length-value\u201d (TLV) trios. These trios may contain any type of data. In one embodiment, these data are byte representations of SS ISUP message parameters. In addition, several \u201capplication control\u201d trios are created that are specific to illustrative embodiments of the invention.","The API may be rendered, for example, on a Solaris Sparc, Solaris x86 and Windows platform. Those of skill in the art will appreciate that other platforms, within the spirit and scope of the invention, may be used.","The primary advantage to the MsgBuff API is one of extensibility and non-reliance on the encapsulated protocol. In fact, the data that are encapsulated need not be a defined protocol at all. The API allows further use by any IP or SS protocol. Additional protocols are supported by deriving parameter objects from a generic base object. For example, transaction-based protocols such as a session-initiated protocol (SIP), a simple gateway monitoring protocol (SCMP), etc., may be provided in accordance with, and within the spirit and scope of, the invention. Other (non-protocol) data can be used directly by using the construction method described and illustrated herein.","The invented API can be used in any IP environment where a defined protocol is needed to send any encapsulated data stream. In accordance with one embodiment of the invention, the API requires the supported C\/C++ header files as well as the platform-appropriate library. Those of skill in the art will appreciate that the data are transmitted over the Internet transparent to the transport protocol. Thus, the invention may be thought of as involving novel tunneling method and apparatus.","The invention thus represents a novel tunneling protocol.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["10","10","12","14","16","18","20","20","10","22","12","10","24","26","14","12","20","20","28","30","32"],"i":["a","b","a","b "]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2","b":["200","202"]},"Still referring to , the method in accordance with a second embodiment includes c) at , creating a base class library including plural defined source and header files, and d) at , providing a mechanism for deriving a transaction-based protocol-specific class that is compatible with the base class library.","Those of skill in the art will appreciate that the two methods may be combined, as indicated by the dashed line between blocks  and  in , in accordance with a preferred embodiment of the invention described in detail below. Those of skill in the art also will appreciate that the methods may be implemented in alternative ways to those described in detail below, within the spirit and scope of the invention.","The MsgBuff library consists of a base C++ class named MsgBuff. The primary purpose of the base class is to provide a structured approach to defining a mechanism for tunneling any existing protocol over an IP transport. This is accomplished by deriving a new protocol-specific class from the base MsgBuff class and overriding appropriate structures and methods where necessary. First, the Msgbuf class will be described in detail. Second, an example of how a protocol class may be created using the MsgBuf class will be described.","The MsgBuff library consists of several C++ source and header files, to be described in detail below. Current implementations exist on the Solaris Sparc, Solaris x86 and Windows platform. As the source and header files conform to ANSI-specifications, the library can be compiled on any platform using an ANSI-compliant compiler.","The library was created specifically to tunnel Signaling System  (SS) protocols across a pair of Unix Domain Protocol (UDP) sockets. However, it is designed more generally to provide tunneling\/transport functionality using any industry- or user-defined protocol. For example, the library has been extended to support Telephone User Part (TUP) and Transaction Capabilities Application Part (TCAP). In addition, it has been used to derive a protocol, available from Cisco Systems, Inc., useful for controlling telephony bearer circuits. While these embodiments so far have been SS- and telephony-centered protocols, the base MsgBuff class, within the spirit and scope of the invention, are extensible for use with any transaction-based protocol. Examples include Session Initiated Protocol (SIP), Simple Gateway Monitoring Protocol (SGMP), etc.","The following annotated C\/C++ source code is further illustrative of message buffer data structure . Those of skill in the art will appreciate that the annotations are set off from the source code by the standard double-backslash (\/\/) followed by the annotation","typedef struct buff {",{"@attributes":{"id":"p-0024","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["int protocolType;\/\/Will be one of MsgBuffProtocolTypes enum","long mtype; \/\/ Will be protocol specific msg type","int seqNum;","int mlength;","int processId;","short int offsetHash[MAX_HASH_VALUES];","int numPayloadPresent; \/\/ How many TLVs are present","char ipAddr[MAX_IP_ADDR_LENGTH];","unsigned char mdata[MAX_DATA];\n\n}msgBuffer;\n","Each of these fields will be described briefly below.\n\nprotocolType:\n"]}}}},"This field identifies the protocol of which this buffer is a part. A central enumeration is kept containing any defined protocols.","typedef enum {",{"@attributes":{"id":"p-0026","num":"0000"},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["IsupSvc,","TcapSvc, TupSvc,","MediaSvc\n\n}MsgBuffProtocolTypes;\n\nmtype:\n"]}}}},"This field identifies the protocol-specific message contained within the buffer. Values for this field are typically an enumerated definition. For example:\n\n","This field provides a basic sequencing mechanism for incoming and outgoing messages.","mlength:","This field indicates the overall length of the data buffer.","processId:","This field provides space to identify the identifier sending application.","offsetHash:","This field is used internally by the MsgBuff-derived classes to mark individual parameter units within the data array.","numPayloadPresent:","This field is a simple count of the encapsulated parameter data units within the data array.","ipAddr:","This identifies the IP address of the sending machine in a X.X.X.X format","mdata:","This is the data buffer used for holding 0 or more protocol-specific data parameters. Its basic format is shown below:",{"@attributes":{"id":"p-0035","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TAG","LENGTH","VALUE","TAG","LENGTH","VALUE","etc"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"7"},"The base MsgBuff class consists of base class constructors (virtual, copy, and assignment) and generic access methods for the private data. The main data component consists of a structure containing addressing, protocol, and message-specific parameters. Additionally, a variable length array is provided for transporting multiple protocol-specific data units. These units are used to form a TLV trio that is then inserted at the end of the data array within the buffer structure.","The following source code illustrates an ISUP message type and how easily a particular message type is enumerated in accordance with the invention.","typedef enum {","regApp,","deregApp,","isuplam,","isupAcm,","etc.","}IsupMsgTypes;","The following source code illustrates a TCAP message type.","typedef enum {","tcapRegApp,","tcapDeregApp,","tcapQueryWithPermission,","tcapQueryWithoutPersimission,","tcapConversationWithPermission,","tcapConversationWithoutPermission,","tcapResonse,","tcapUniDirectional","}TcapMsgTypes;","The following source code illustrates a media access control (MAC) message type.","typedef enum {","macRegApp,","macDeregApp,","macQtst,","macCcot,","macLpbk,","macStop,","macRsrv,","macUsrv,","macErrm,","macApng,","macVxml,","macXfer,","macXfrs,","}MacMsgTypes;","The following source code illustrates various payload types that would be carried as a TLV. Those of skill in the art will appreciate that they represent ISUP, TCAP and MAC tag values, in that order. The illustrated cic and linkset enumerations are examples of header information.","typedef enum {","\/\/ The following would have their own access methods defined","cic,","linkset,","\/\/ The rest would be accessed using the generic payload methods","accessDelivery,","backwardCallingIndicators,","etc.","}IsupTagValues;","typedef enum {","\/\/ These would be accessed using the generic payload methods","tInfoEntity,","dialogEntity,","componentEntity","}TcapTagValues;","typedef enum {","\/\/ The following would have their own access methods defined","asmid,","startCircuit,","endCircuit,","msgStatus,","serviceState,","iiDigit,","uui,","\/\/ The rest would be accessed using the generic payload methods","errorMarg,","ani,","dnis,","dest,","macEntity1,","macEntity2,","etc.","}MacTagValues;","The following source code illustrates generic size definitions for message header and maximum message buffer size, in that order.","#define MSGHDRSIZE (sizeof(msgBuffer)\u2212MAX_DATA)","#define MAX_MSGBUFF_SIZE (MSGHDRSIZE+MAX_DATA)","The following source code illustrates the base message buffer class and how straightforwardly API  permits certain parameters to be initialized or established, in the form of questions that might be asked of, or demands that might be placed on, the interface. In other words, the following source code illustrates in detail one implementation of the method blocks shown in . Those of skill in the art will appreciate that alternative implementations and equivalent methods are contemplated as being within the spirit and scope of the invention.","classMsgBuff","{","public:","MsgBuff(msgBuffer*);","virtual\u02dcMsgBuff( );","The following source code illustrates how API  facilitates various functions including, for example, a determination of how many TLVs are in a message, which protocol is represented by a message and what the message control is.","\/\/ How many TLVs are there?","inline getNumPayload( ) const\n\n","\/\/ Get the raw msgBuffer structure.","inline msgBuffer*getBuffer( )\n\n","\/\/ What kind of protocol does this buffer represent?","inline void setProtocol(int type)\n\n","inline int getProtocol( )\n\n","\/\/What kind of ISUP, TCAP, MAC, etc message in this?","\/\/Could be isuplam, tcapUniDirectional, macCcot, etc.","inline int getMsgType( ) const\n\n","inline int getProcessId( ) const\n\n","inline void setProcessId(int id)\n\n","inline void setIpAddr(char*addr)\n\n","inlinechar*getIpAddr( ) const\n\n","inline void setSeqNum(int i)\n\n","inline int getSeqNum( ) const\n\n","\/\/ Pure virtual parent functions","virtual void addPayload(int type, void*payload, int size)=0;","virtual int getPayload(int index, void** returned PayloadPointer)=0;","virtual int getPayloadType(int index)=0;","private:","msgBuffer buff;","int tlvOffset;","};","The following source code illustrates a typical Child ISUP message buffer class.",{"@attributes":{"id":"p-0121","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class IsupMsgBuff : public MsgBuff"]},{"entry":[{},"{"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IsupMsgBuff(unsigned int type, unsigned int ls,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int circuitId1, circuitId2 = 0);"]},{"entry":[{},"\/\/ Here, \u2018type\u2019 might be isupIam, isupRel, etc."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IsupMsgBuff(msgBuffer *);"]},{"entry":[{},"inline unsigned int getLinkSet( ) const"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int val;"]},{"entry":[{},"memcpy((void *)val,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(void *)(buff.mdata + LS_OFFSET,"]},{"entry":[{},"SIZE_OF_INT);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return(val);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"inline void setResponse(bool resp)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(void *)&resp,"]},{"entry":[{},"SIZE_OF_BOOL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"buff.mlength += SIZE_OF_BOOL;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"\/\/ Same kind of thing for getResponse"]},{"entry":[{},"\/\/ ISUP parameter specific methods"]},{"entry":[{},"int getParmType(int) const;"]},{"entry":[{},"int getParam(int, auto_ptr<Param> &) const;"]},{"entry":[{},"void addParam(auto_ptr<Param> &);"]},{"entry":[{},"void addParam(int, ParameterTransportStrtict **);"]},{"entry":[{},"void setMsgSpecifics(unsigned int type,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"unsigned int linkset,"]},{"entry":[{},"int circuitId1,"]},{"entry":[{},"int circuitId2 = 0);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Parent virtual functions defined for child"]},{"entry":[{},"\/\/ In ISUP implementation may instead of the following use"]},{"entry":[{},"the existing"]},{"entry":[{},"\/\/addParam, getParmType, and getParam methods"]},{"entry":[{},"void addPayload(int type, void *payload, int size);"]},{"entry":[{},"int getPayload(int index, void **payload);"]},{"entry":[{},"int getPayloadType(int index);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following source code illustrates a typical Child TCAP message buffer class.",{"@attributes":{"id":"p-0123","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class TcapMsgBuff : public MsgBuff"]},{"entry":[{},"{"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TcapMsgBuff(msgBuffer *);"]},{"entry":[{},"TcapMsgBuff(int packageType);"]},{"entry":[{},"\/\/ TCAP parameter specific methods"]},{"entry":[{},"inline unsigned int getPackageType( ) const"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int val;"]},{"entry":[{},"memcpy((void *)val,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(void *)(buff.mdata + PKGTYPE_OFFSET,"]},{"entry":[{},"SIZE_OF_INT);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return(val);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"\/\/ The tInfo, dialog, and component pieces would be added to"]},{"entry":[{},"the buffer"]},{"entry":[{},"\/\/ using the payload access methods below"]},{"entry":[{},"\/\/ Parent virtual functions defined for child"]},{"entry":[{},"void addPayload(int type, void *payload, int size);"]},{"entry":[{},"int getPayload(int index, void **payload);"]},{"entry":[{},"int getPayloadType(int index);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private:"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following source code illustrates a typical Child MAC message buffer class.",{"@attributes":{"id":"p-0125","num":"0156"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class MacMsgBuff : public MsgBuff"},{"entry":"{"},{"entry":"public:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MacMsgBuff(msgBuffer *);"]},{"entry":[{},"MacMsgBuff(unsigned int opCode, int asmId,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"short status, short serviceState,"]},{"entry":[{},"short iidigit, short uui,"]},{"entry":[{},"short startCircuit, short endCircuit = 0);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Here \u2018opCode\u2019 would be macQtst, macCcot, etc."]},{"entry":[{},"\/\/ MAC parameter specific methods"]},{"entry":[{},"inline short getAsmId( ) const"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"short val;"]},{"entry":[{},"memcpy((void *)val,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(void *)(buff.mdata + ASMIID_OFFSET,"]},{"entry":[{},"SIZE_OF_SHORT);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return(val);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"\/\/ Other parameter access methods would follow, similar to getAsmId"]},{"entry":[{},"\/\/ Could also add set methods for each if needed"]},{"entry":[{},"\/\/ The ani, dnis, and dest items would be added as TLVs using"]},{"entry":[{},"\/\/ the addPayload method"]},{"entry":[{},"\/\/ The error message char array that is part of the"]},{"entry":[{},"\/\/ MacMsg structure would be another TLV"]},{"entry":[{},"\/\/ Parent virtual functions defined for child."]},{"entry":[{},"\/\/ in the MAC case, these can be stubbed."]},{"entry":[{},"void addPayload(int type, void *payload, int size);"]},{"entry":[{},"int getPayload(int index, void **payload);"]},{"entry":[{},"int getPayloadType(int index);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"private:"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The following source code illustrates the creation of message buffers.","TcapMsgBuff*tcapMb=new TcapMsgBuff(tcapQueryWithPermission);","tcapMb\u2192addPayload(tInfoEntity, &InforStruct, sizeof(TInforStruct));","tcapMb\u2192addPayload(componentEntity, &firstComponentStruct,\n\n","tcapMb\u2192addPayload(componentEntity, &secondComponentStruct,\n\n","tcapMb\u2192addPayload(dialogEntity, &dialogStruct, sizeof(DialogStruct));","msgBuffer*buff=tcapMb\u2192getBuffer( );","retCode=socket\u2192send((void*)&buff, MSGHDRSIZE+buff\u2192mlength);","IsupMsgBuff*isupMb=newIsupMsgBuff(isupIam, Is, cic);","auto_ptr<Param>parm(creator\u2192CreateParam(forwardCallingIndicators));","isupMb\u2192addParam(parm);","msgBuffer*buff=isumMb\u2192getBuffer( );","retCode=socket\u2192send((void*)&buff, MSGHDRSIZE+buff\u2192mlength);","MacMsgBuff*macMb=new MacMsgBuff(macQtst, asmId, status, serviceState,\n\n","macMb\u2192addPayload(ani, &aniStruct, sizeof(AniStruct));","macMb\u2192addPayload(dnis, &dnisStruct, sizeof(DnisStruct));","msgBuffer*buff=macMb\u2192getBuffer( );","retCode=socket\u2192send((void*)&buff, MSGHDRSIZE+buff\u2192mlength);",{"@attributes":{"id":"p-0144","num":"0178"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"msgBuffer incomingBuffer;"},{"entry":"retCode = socket\u2212>read((void*)&incomingBuffer,"},{"entry":"MAX_MSGBUFF_SIZE);"},{"entry":"MsgBuff*b = new MsgBuff(&incomingBuffer);"},{"entry":"switch(b\u2212>getProtocol( ))"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case TcapSrv:"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"msgType = b\u2212>getMsgType( ); \/\/Would be something like"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/tcapUniDirectional"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"entityType = b\u2212>getPayload(0, &tInfoStruct);\/\/ Assumes tinfo is"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/the first payload"]},{"entry":[{},"\/\/item"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for(int idx = 1; idx<MAX_COMPONENTS_ALLOWED; idx++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"type = b\u2212>getPayloadType(idx);","\/\/ Something like"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ dialogEntity or"]},{"entry":[{},"\/\/ componentEntity"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"switch(type)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case componentEntity:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retCode = b\u2212>getPayload(idx,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"componentStruct);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case dialogEntity:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"retCode = b\u2212>getPayload(idx, dialogStruct);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"case IsupSrv:"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"msgType = b\u2212>getMsgType( ); \/\/ Would be something like isupIam"]},{"entry":[{},"ls = b\u2212>getLinkSet( );"]},{"entry":[{},"cic1 = b\u2212>getCic( );"]},{"entry":[{},"cic2 = b\u2212>getCicRangeEnd( );"]},{"entry":[{},"for(int idx = int(0), type = b\u2212>getParmType(idx);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"type !=\u22121;"]},{"entry":[{},"type = b\u2212>getParmType(++idx))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"auto_ptr<Param>prm(creator\u2212>CreateParam(type));"]},{"entry":[{},"retCode = b\u2212>getParam(idx, prm);"]},{"entry":[{},"}"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"case MediaSrv:"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"msgType = b\u2212>getMsgType( ); \/\/ Would be something like macQtst"]},{"entry":[{},"asmId = b\u2212>getAsmId( );"]},{"entry":[{},"for(int idx = 0 idx < MAX_HASH_VALUES; idx++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"switch(b\u2212>getPayloadType(idx))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case errorMsg:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"retCode = b\u2212>getPayload(idx, errorStruct);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case ani:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"retCode = b\u2212>getPayload(idx, aniStruct);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"etc. . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The following source code illustrates the enumeration of the various illustrative MsgBuff protocol types including ISUP, TCAP, TUP, MEDIA and FOO, in that order.","typedef enum","{","IsupSvc,","TcapSvc,","TupSvc,","MediaSvci,","Foo","} MsgBuffProtocolTypes;","When a new protocol is to be created, the MsgBuff object is used to derive the protocol-specific child class. For instance, the base MsgBuff class may be used to create a ISDN User Part (ISUP) child IsupMsgBuff class that is used to transport SS ISUP messages over UDP sockets. Each child class receives base class functionality that supports protocol identification, message type specification, and addressing information. These are not to be overridden by the child class. In addition, the base class specifies several virtual methods that must be overridden by the protocol-specific child class. These methods are primarily data-related and are customized to support the new protocol.","An example of a generic \u2018FOO\u2019 protocol implementation is presented below:","typedef enum {","firstParameter,","sceondParameter,","thirdParameter,","} FooTagValues;","typedef enum {","fooMessage1,","fooMessage2,","fooMessage 3,","}FooMsgTypes;","class FooMsgBuff:public MsgBuff","{","public:","FooMsgBuff(msgBuffer*);","FooMsgBuff(int packageType);","\/\/ Example FOO parameter specific method","inline unsigned int getPackageType( ) const","{\n\n","};","\/\/Parent virtual functions define for child FOO","void addPayload(int type, void*payload, int size);","int getPayload(int index, void**payload);","int getPayloadType(int index);","private:","};","These examples show how various protocol messages can be created using the MsgBuff-derived protocol classes for transport over a generic UNIX socket.","\/\/ Create a new FOO-specific MsgBuff object of message type fooMessage1","FooMsgBuff*fooMb=new FooMsgBuff(fooMessage1);","\/\/ Add various FOO-specific structures to the base MsgBuff data buffer","foo Mb\u2192addPayload(firstParameter, &firstParmStruct, sizeof(FirstParmStruct));","fooMb\u2192addPayload(secondParameter, &secondComponentStruct,\n\n","fooMb\u2192addPayload(thirdParameter, &thirdComponentStruct ,\n\n","\/\/ Extract the buffer transport structure and send over the outgoing UNIX socket","msgBuffer*buff=fooMb\u2192getBuffer( );","retCode=socket\u2192send((void*)&buff, MSGHDRSIZE+buff\u2192mlength);","This code example shows how an application can receive and decode an incoming generic MsgBuffer data array received over a UNIX socket:",{"@attributes":{"id":"p-0180","num":"0219"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"msgBuffer incomingBuffer;"},{"entry":"\/\/ Receive the data from the inbound socket"},{"entry":"retCode = socket\u2212>read((void *)&incomingBuffer,"},{"entry":"MAX_MSGBUFF_SIZE);"},{"entry":"\/\/ Create a generic MsgBuff object with the received data"},{"entry":"MsgBuff *b = new MsgBuff(&incomingBuffer);"},{"entry":"\/\/ Determine the protocol of the received message"},{"entry":"switch(b\u2212>getProtocol( ))"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case Foo:"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Get the message type of the inbound data"]},{"entry":[{},"\/\/ Will be something like fooMessage1 or fooMessage2"]},{"entry":[{},"msgType = b\u2212>getMsgType( );"]},{"entry":[{},"for(int idx = 1; idx <b\u2212>getNumPayload ( ); idx++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"type = b\u2212>getPayloadType(idx);\u2003\u2003\/\/ Something like"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ firstParameter or"]},{"entry":[{},"\/\/ secondParameter"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"switch(type)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case firstParameter:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Read the data into the indicated structure"]},{"entry":[{},"retCode = b\u2212>getPayload(idx,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&firstParmStruct);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case secondParameter:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retCode = b\u2212>getPayload(idx,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&secondParmStruct);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case thirdParameter:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retCode = b\u2212>getPayload(idx,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&thirdParmStruct);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case. . .","\/\/ Other cases defined for any potential incoming protocol"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Table I immediately below illustrates the ISUP message types that may be enumerated in accordance with one embodiment of the invention.",{"@attributes":{"id":"p-0182","num":"0221"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE I"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"ISUP Message","IsupMsgTypes Enumeration"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Address Complete Message","isupAcm"]},{"entry":[{},"Answer Message","isupAnm"]},{"entry":[{},"Blocking Acknowledgement","isupBla"]},{"entry":[{},"Blocking Message","isupBlo"]},{"entry":[{},"Call Modification Completed","isupCmc"]},{"entry":[{},"Call Modification Rejected","isupCmrj"]},{"entry":[{},"Call Modification Request","isupCmr"]},{"entry":[{},"Call Progress Message","isupCpg"]},{"entry":[{},"Charge Information Message","isupCrg"]},{"entry":[{},"Circuit Query Message","isupCqm"]},{"entry":[{},"Circuit Query Response","isupCqr"]},{"entry":[{},"Circuit Reservation","isupCra"]},{"entry":[{},"Acknowledgement"]},{"entry":[{},"Circuit Reservation Message","isupCrm"]},{"entry":[{},"Circuit Validation Response","isupCvr"]},{"entry":[{},"Circuit Validation Test","isupCvt"]},{"entry":[{},"Confusion Message","isupCfn"]},{"entry":[{},"Connect Message","isupCon"]},{"entry":[{},"Continuity Check Request","isupCcr"]},{"entry":[{},"Continuity Message","isupCot"]},{"entry":[{},"Facility Accepted Message","isupFaa"]},{"entry":[{},"Facility Information Message","isupFai"]},{"entry":[{},"Facility Message","isupFac"]},{"entry":[{},"Facility Rejected Message","isupFrj"]},{"entry":[{},"Facility Request Message","isupFar"]},{"entry":[{},"Forward Transfer Message","isupFot"]},{"entry":[{},"Information Message","isupInf"]},{"entry":[{},"Information Request Message","isupInr"]},{"entry":[{},"Initial Address Message","isupIam"]},{"entry":[{},"Loopback Acknowledgement","isupLpa"]},{"entry":[{},"Pass Along Message","isupPam"]},{"entry":[{},"Release Complete Message","isupRlc"]},{"entry":[{},"Release Message","isupRel"]},{"entry":[{},"Reset Circuit Message","isupRsc"]},{"entry":[{},"Resume Message","isupRes"]},{"entry":[{},"Subsequent Address Message","isupSam"]},{"entry":[{},"Suspend Message","isupSus"]},{"entry":[{},"Unblocking Acknowledgement","isupUba"]},{"entry":[{},"Unblocking Message","isupUbl"]},{"entry":[{},"Unequipped Circuit","isupUcic"]},{"entry":[{},"Identification Code Message"]},{"entry":[{},"User To User Information","isupUsr"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0183","num":"0222"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE II"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Valid For"]},{"entry":["Parameter Type","IsupParmTag Enumeration","Message Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Access Delivery","accessDelivery","ACM"]},{"entry":["Access Transport","accessTransport","IAM, INF,"]},{"entry":[{},{},"ACM, ANM,"]},{"entry":[{},{},"REL, CPG,"]},{"entry":[{},{},"USR"]},{"entry":["Automatic Congestion","autoCongestionLv1","REL"]},{"entry":"Level"},{"entry":["Backward Call Indicators","backwardCallingIndicators","ACM, ANM,"]},{"entry":[{},{},"CPG"]},{"entry":["Business Group","businessGroup","IAM, INF,"]},{"entry":[{},{},"ACM, ANM,"]},{"entry":[{},{},"CPG"]},{"entry":["Call Diversion Information","callDiversionInfo","ACM"]},{"entry":["Call Modification Indicator","callModificationIndicators","CMR, CMC,"]},{"entry":[{},{},"CMRJ"]},{"entry":["Call Reference","callReference","IAM, INR,"]},{"entry":[{},{},"INF, ACM,"]},{"entry":[{},{},"CON, FOT,"]},{"entry":[{},{},"ANM, REL,"]},{"entry":[{},{},"SUS, RES,"]},{"entry":[{},{},"CMR, CMC,"]},{"entry":[{},{},"CMRJ, FAR,"]},{"entry":[{},{},"FAA, FRJ,"]},{"entry":[{},{},"DRS, CPG,"]},{"entry":[{},{},"USR"]},{"entry":["Called Party Number","calledPartyNumber","IAM, INE"]},{"entry":["Calling Party Number","callingPartyNumber","IAM"]},{"entry":["Calling Party's Category","callingPartysCategory","IAM, INF"]},{"entry":["Carrier Identification","carrierIdentification","IAM"]},{"entry":["Carrier Selection","carrierSelectionInfo","IAM"]},{"entry":"Information"},{"entry":["Cause Indicator","causeIndicator","ACM, REL,"]},{"entry":[{},{},"FRJ, CPG,"]},{"entry":[{},{},"CFN"]},{"entry":["Charge Number","chargeNumber","IAM, INF,"]},{"entry":[{},{},"REL"]},{"entry":["Circuit Group","circuitGroupCharacteristics-","CVR"]},{"entry":["Characteristics Indicator","Ind"]},{"entry":["Circuit Assignment Map","circuitAssignmentMap","IAM, CQM"]},{"entry":["Circuit Identification Name","circuitIdentificationName","CVR"]},{"entry":["Circuit State Indicator","circuitStateIndicators","CQM, CQR"]},{"entry":["Circuit Validation Response","circuitValidationResponse","CVR"]},{"entry":"Indicator"},{"entry":["Common Language","clli","CVR"]},{"entry":"Location Id"},{"entry":["Connected Number","connectedNumber","CON"]},{"entry":["Connection Request","connectionRequest","IAM, INR,"]},{"entry":[{},{},"INF, ACM,"]},{"entry":[{},{},"CON, ANM"]},{"entry":["Continuity Indicators","continuityIndicators","COT"]},{"entry":["CUG Interlock Code","cugInterlockCode","IAM"]},{"entry":["Echo Control Information","echoControl","ACM"]},{"entry":["Egress Service","egressService","IAM"]},{"entry":["Event Information","eventInformation","CPG"]},{"entry":["Facility Indicator","facilitylndicators","FAR, FAA,"]},{"entry":[{},{},"FRJ"]},{"entry":["Forward Call Indicators","forwardCallingIndicators","IAM"]},{"entry":["Generic Address","genericAddress","IAM, REL"]},{"entry":["Generic Name","genericName","IAM"]},{"entry":["Generic Notification","genericNotifInd","IAM, ACM"]},{"entry":"Indicator"},{"entry":["Generic Number","genericNumber","IAM"]},{"entry":["Generic Reference","genericReference","IAM"]},{"entry":["Hop Counter","hopCounter","IAM"]},{"entry":["Information Indicators","informationIndicators","INF, ACM,"]},{"entry":[{},{},"ANM, CPG"]},{"entry":["Information Request","informationRequest-","IAM, INR"]},{"entry":["Indicators","Indicators"]},{"entry":["Jurisdiction Information","jurisdictionInfo","IAM"]},{"entry":["Location Number","locationNumber","IAM"]},{"entry":["MLPP Precedence","mlppPrecedence","IAM"]},{"entry":["Nature Of Connection","natureOfConnection-","IAM, CRM"]},{"entry":["Indicators","Indicators"]},{"entry":["Network Specific Facility","networkSpecFacil","IAM, INR,"]},{"entry":[{},{},"ACM"]},{"entry":["Network Transport","networkTransport","IAM, INR,"]},{"entry":[{},{},"ACM, ANM,"]},{"entry":[{},{},"CPG"]},{"entry":["Notification Indicators","notificationIndicators","ACM, CPG"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The following source code illustrates a driver that may be used to create, send and read a message over a socket.",{"@attributes":{"id":"p-0185","num":"0224"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#include <iostream>"},{"entry":"#include \u201cTupMsgBuff.h\u201d"},{"entry":"#include \u201cTupParam.h\u201d"},{"entry":"#include \u201cSocket.h\u201d"},{"entry":"using namespace std;"},{"entry":"int"},{"entry":"main(int argc, char **argv)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ First, create a new MsgBuff of some msg type and put a couple of"]},{"entry":[{},"\/\/ parameters in it"]},{"entry":[{},"int linkset = 1;"]},{"entry":[{},"int cic = 1;"]},{"entry":[{},"TupMsgBuff *t = new TupMsgBuff(tupIam, linkset, cic);"]},{"entry":[{},"\/\/ These are all the available TUP parameters"]},{"entry":[{},"IAMMessageInd imi;"]},{"entry":[{},"AddrSigs as;"]},{"entry":[{},"LineID li;"]},{"entry":[{},"ClosedUserGroup cug;"]},{"entry":[{},"AnswerType at;"]},{"entry":[{},"Respind ri;"]},{"entry":[{},"MsgInd mi;"]},{"entry":[{},"TupAutoCongLvl acl"]},{"entry":[{},"TrunkID ti;"]},{"entry":[{},"ChargeInfo ci;"]},{"entry":[{},"Cause C;"]},{"entry":[{},"PointCode pc;"]},{"entry":[{},"Range r;"]},{"entry":[{},"t\u2212>addParam(tupIamMsgInd, (void *)&imi,"]},{"entry":[{},"SIZE_OF_IAM_MSG_IND);"]},{"entry":[{},"t\u2212>addParam(tupClosedUserGroup, (void *)&cug,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"SIZE_OF_CLOSED_USER_GROUP);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"t\u2212>addParam(tupLineId, (void *)&li, SIZE_OF_LINE_ID);"]},{"entry":[{},"msgBuffer *mb;"]},{"entry":[{},"mb = t\u2212>getBuffer( );"]},{"entry":[{},"socket\u2212>sendMsg((char *)mb,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mb\u2212>mlength + MSGHDRSIZE,"]},{"entry":[{},"someIpAddr,"]},{"entry":[{},"somePort);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Now clean up the object"]},{"entry":[{},"delete t;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Now assume a new message has come in over a socket"},{"entry":"msgBuffer receiveMb;"},{"entry":"ret = socket \u2212>receiveMsg(&address, (char *) &receiveMb,"},{"entry":"MAX MSGBuff SIZE);"},{"entry":"IF (RECEIVEmB.PROTOCOLtYPE == tUPsVC)"},{"entry":"{"},{"entry":"\/\/ Create a new TupMsgBuff object using the received data"},{"entry":"t = new TupMsgBuff(&receivedMb);"},{"entry":"cic = t\u2212>getCic( );"},{"entry":"int cicEnd = t\u2212>getCicRangeEnd( );"},{"entry":"linkset = t\u2212>getLinkSet( );"},{"entry":"\/\/ Now find out what type of message it is"},{"entry":"int msgType = t\u2212>getMsgType( );"},{"entry":"switch(msgType)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case tupIam:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"printf(\u201cgot IAM\\n\u201d);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case tupGrs:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"printf(\u201cgot GRS\\n\u201d);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"default:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"printf(\u201cUnknown msg type\\n\u201d);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/ And finally, get the parameter structures out of the received buffer"},{"entry":"int parmType;"},{"entry":"ParameterTransportStruct *p;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for(int index = 0, type = t\u2212>getParmType(0);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"type !=\u22121;"]},{"entry":[{},"type = t\u2212>getParmType(++index))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"parmType = t\u2212>getParmStruct(index, &p);"]},{"entry":[{},"switch(parmType)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case tupIamMsgInd:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"printf(\u201cGot IAM Msg Ind structure\\n\u201d);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case tupClosedUserGroup:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"printf(\u201cGot ClosedUserGroup structure\\n\u201d);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case tupLineId:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"printf(\u201cGot Line ID\\n\u201d);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"default:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"printf(\u201cError\\n\u201d);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"delete t;"]},{"entry":[{},"exit(0);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0186","num":"0225"},"figref":["FIG. 3","FIG. 3"],"b":["10","34","36","38","40","42","44","34","10"]},"Finally, those of skill in the art will appreciate that the invented method and apparatus described and illustrated herein may be implemented in software, firmware or hardware, or any suitable combination thereof. Preferably, the method and apparatus are implemented in software, for purposes of low cost and flexibility. Thus, those of skill in the art will appreciate that the method and apparatus of the invention may be implemented by a computer or microprocessor process in which instructions are executed, the instructions being stored for execution on a computer-readable medium and being executed by any suitable instruction processor. Alternative embodiments are contemplated, however, and are within the spirit and scope of the invention.","Having illustrated and described the principles of our invention in a preferred embodiment thereof, it should be readily apparent to those skilled in the art that the invention can be modified in arrangement and detail without departing from such principles. We claim all modifications coming within the spirit and scope of the accompanying claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 3","FIG. 1","FIG. 2"]}]},"DETDESC":[{},{}]}
