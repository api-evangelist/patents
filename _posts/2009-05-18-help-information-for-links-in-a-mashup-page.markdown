---
title: Help information for links in a mashup page
abstract: A mashup page presents link help information for logical links that pass context between widgets on the mashup page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09171076&OS=09171076&RS=09171076
owner: International Business Machines Corporation
number: 09171076
owner_city: Armonk
owner_country: US
publication_date: 20090518
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates to the field of computers, and specifically to webpages generated on computers. Still more particularly, the present disclosure relates to webpages that are generated as mashups.","A mashup page (\u201cmashup\u201d) is a webpage that incorporates content from different resources into a single webpage. The term \u201cmashup\u201d has its etymological basis in popular music, in which music from one genre (e.g., hip-hop) uses music from another genre (e.g., classic rock) as a background\/backdrop to a lead rap vocal. In an analogous manner, a mashup webpage takes content from different sources and displays that content on a single page.","With the advent of Web 2.0, businesses are becoming more reliant on the use of mashup technologies as a way to resolve unique business needs more quickly and dynamically or to perform their daily tasks and activities. Mashups create situational applications by allowing an end user to place different components together onto a single page. A standardized design that allows for loose coupling of components allows these different pieces to work together as a single application, even though they were not explicitly designed to work with one another.","A mashup page presents link help information for logical links that pass context between widgets on the mashup page.","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method, or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer-usable program code embodied in the medium.","Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java (JAVA is a registered trademark of Sun Microsystems, Inc. in the United States and other countries), Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The present invention is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","With reference now to the figures, and in particular to , there is depicted a block diagram of an exemplary computer , which may be utilized by the present invention. Note that some or all of the exemplary architecture, including both depicted hardware and software, shown for and within computer  may be utilized by software deploying server , content providers , and\/or mashup host . Note computer  and\/or mashup host  may be utilized as mashup site  shown below in , and that the architecture shown for computer  may be utilized by content providers  shown in  and by content providers -shown in .","Computer  includes a processor unit  that is coupled to a system bus . Processor unit  may utilize one or more processors, each of which has one or more processor cores. A video adapter  drives\/supports a display , which is an output display that is also coupled to system bus . In one embodiment, a switch  couples the video adapter  to the system bus . Alternatively, the switch  may couple the video adapter  to the display . In either embodiment, the switch  is a switch, preferably mechanical, that allows the display  to be coupled to the system bus , and thus to be functional only upon execution of instructions (e.g., mashup management program\u2014MMP  described below) that support the processes described herein.","System bus  is coupled via a bus bridge  to an input\/output (I\/O) bus . An I\/O interface  is coupled to IFO bus . IFO interface  affords communication with various I\/O devices, including a keyboard , a mouse , a media tray  (which may include storage devices such as CD-ROM drives, multi-media interfaces, etc.), a printer , and (if a VHDL chip  is not utilized in a manner described below) external USB port(s) . While the format of the ports connected to I\/O interface  may be any known to those skilled in the art of computer architecture, in a preferred embodiment some or all of these ports are universal serial bus (USB) ports.","As depicted, computer  is able to communicate with a software deploying server  and content providers  via network  using a network interface . Network  may be an external network such as the Internet, or an internal network such as an Ethernet or a virtual private network (VPN).","A hard drive interface  is also coupled to system bus . Hard drive interface  interfaces with a hard drive . In a preferred embodiment, hard drive  populates a system memory , which is also coupled to system bus . System memory is defined as a lowest level of volatile memory in computer . This volatile memory includes additional higher levels of volatile memory (not shown), including, but not limited to, cache memory, registers and buffers. Data that populates system memory  includes computer 's operating system (OS)  and application programs .","OS  includes a shell , for providing transparent user access to resources such as application programs . Generally, shell  is a program that provides an interpreter and an interface between the user and the operating system. More specifically, shell  executes commands that are entered into a command line user interface or from a file. Thus, shell , also called a command processor, is generally the highest level of the operating system software hierarchy and serves as a command interpreter. The shell provides a system prompt, interprets commands entered by keyboard, mouse, or other user input media, and sends the interpreted command(s) to the appropriate lower levels of the operating system (e.g., a kernel ) for processing. Note that while shell  is a text-based, line-oriented user interface, the present invention will equally well support other user interface modes, such as graphical, voice, gestural, etc.","As depicted, OS  also includes kernel , which includes lower levels of functionality for OS , including providing essential services required by other parts of OS  and application programs , including memory management, process and task management, disk management, and mouse and keyboard management.","Application programs  include a renderer, shown in exemplary manner as a browser . Browser  includes program modules and instructions enabling a world wide web (WWW) client (i.e., computer ) to send and receive network messages to the Internet using hypertext transfer protocol (HTTP) messaging, thus enabling communication with software deploying server  and other described computer systems.","Application programs  in computer 's system memory (as well as software deploying server 's system memory) also include a mashup management program (MMP) . MMP  includes code for implementing the processes described below, including those described in . In one embodiment, computer  is able to download MMP  from software deploying server , including in an on-demand basis. Note further that, in one embodiment of the present invention, software deploying server  performs all of the functions associated with the present invention (including execution of MMP ), thus freeing computer  from having to use its own internal computing resources to execute MMP .","Also stored in system memory  is a VHDL (VHSIC hardware description language) program . VHDL is an exemplary design-entry language for field programmable gate arrays (FPGAs), application specific integrated circuits (ASICs), and other similar electronic devices. In one embodiment, execution of instructions from MMP  causes VHDL program  to configure VHDL chip , which may be an FPGA, ASIC, etc.","In another embodiment of the present invention, execution of instructions from MMP  results in a utilization of VHDL program  to program a VHDL emulation chip . VHDL emulation chip  may incorporate a similar architecture as described above for VHDL chip . Once MMP  and VHDL program  program VHDL emulation chip , VHDL emulation chip  performs, as hardware, some or all functions described by one or more executions of some or all of the instructions found in MMP . That is, the VHDL emulation chip  is a hardware emulation of some or all of the software instructions found in MMP . In one embodiment, VHDL emulation chip  is a programmable read only memory (PROM) that, once burned in accordance with instructions from MMP  and VHDL program , is permanently transformed into a new circuitry that performs the functions needed to perform the process described below in .","The hardware elements depicted in computer  are not intended to be exhaustive, but rather are representative to highlight essential components required by the present invention. For instance, computer  may include alternate memory storage devices such as magnetic cassettes, digital versatile disks (DVDs), Bernoulli cartridges, and the like. These and other variations are intended to be within the spirit and scope of the present invention.","With reference now to , an exemplary mashup system , as contemplated for use by the present invention, is presented. The three main components of mashup system  are content providers -(where \u201cn\u201d is an integer, and content providers -are analogous to the content providers  shown in ), mashup site  (which is analogous to computer  and\/or mashup host  shown in ), and client's web browser  (analogous to browser  shown in ). Content providers -are the (sometimes unwitting) providers of the content being mashed. To facilitate data retrieval, providers often expose their content through Web protocols such as representational state transfer (REST), really simple syndication (RSS), and\/or an XML-based Web content and metadata syndication format such as Atom. However, many data sources do not expose application program interfaces (APIs), including links that logically couple different widgets used in the mashup.","Mashup site  is where the mashup is hosted. It may be on the computer in which it is actually executed (e.g., computer  shown in ), or it may be hosted on a remote server (e.g., mashup host  shown in ). In one embodiment, mashups can be implemented similarly to traditional Web applications using server-side dynamic content generation technologies like servlets, common gateway interface (CGI), personal home page (PHP), or active server pages (ASP). Alternatively, mashed content can be generated directly within the client's browser through client-side scripting or applets. This client-side logic is often the combination of code directly embedded in the mashup's Web pages as well as scripting API libraries or applets (furnished by the content providers) referenced by these Web pages. Mashups using this approach can be termed rich internet applications (RIAs), meaning that they are very oriented towards the interactive user-experience. Rich internet applications are one hallmark of what's now being termed \u201cWeb 2.0\u201d. Client-side mashing requires less overhead on behalf of the mashup server (data can be retrieved directly from the content provider) and a more seamless user-experience (pages can request updates for portions of their content without having to refresh the entire page). Often mashups use a combination of both server and client-side logic to achieve their data aggregation. Many mashup applications use data that is supplied directly to them by their user base, making (at least) one of the data sets local. Note that the present invention enables the mashup site  to provide a user with an additional overlay of link helps, as described in detail herein.","The client's web browser  is where the mashup application is rendered graphically and where user interaction takes place. As described above, mashups often use client-side logic to assemble and compose the mashed content.","With reference now to , consider an exemplary mashup page  as presented in accordance with the present invention. Displayed within mashup page  are multiple widgets -(where \u201cd\u201d is any integer, even though only four widgets are depicted in mashup page ). Widgets -represent logic that presents information, from disparate resources, on the mashup page . For example, the \u201cA information\u201d presented by widget may be a geographical map, the \u201cB information\u201d presented by widget may be addresses for certain restaurants that are located at addresses represented by the geographical map, the \u201cC information\u201d from widget may be menus for selected restaurants found in the \u201cB information,\u201d etc. Each widget may be logically interconnected by the passage of context. These context passages can be viewed conceptually as links. That is, when context (i.e., active control) passes from one widget to another, this context passage is performed by a logical link, which in one embodiment is an application program interface (API), a calling routine, and\/or other software\/hardware logic that logically links the functionality\/operations of a second widget to a first widget in response to some activity taking place within the first widget. For example, link  logically connects widget with widget when some specific action is taken at widget (resulting in a change of context from widget to widget ). An example of such a context-changing action may be clicking a marker (e.g., the letter \u201cB\u201d surrounded by a circle) that is displayed on the geographical map presented by widget . Clicking this marker causes the display of the address of the restaurant located where the circled-letter B is shown on the geographic map. Another marker on the map could be a circled-letter \u201cD\u201d, which is shown at a location of a hardware store depicted on the geographic map. Clicking the circled-letter \u201cD\u201d would result in link  pulling up the address of that hardware store out of \u201cD information.\u201d As suggested by link , clicking the address of the restaurant may pull up \u201cC information,\u201d such as the daily lunch menu being served at that restaurant.","The actions taken by the links and their associated context passage are specific and defined by the mashup's author. However, the end user (or a subsequent mashup programmer) may not understand what the links do or how they work. To address this issue, the present invention provides fine-grained help assistance. In one embodiment of the present invention, this help assistance covers the topics of \u201cInputs acceptable\u201d; \u201cOutputs produced\u201d; \u201cActions applied to the different inputs received\u201d; and \u201cActions that trigger the different outputs to be sent.\u201d","\u201cInputs acceptable\u201d describes the type of data that a widget can accept. For example, continue to assume that widget contains restaurant addresses for a particular chain of restaurants. The only type of input that is acceptable to widget may be global positioning system (GPS) coordinates that are reflected by the map that widget displays. If widget were to attempt to send the name of the restaurant, this may or may not be acceptable to widget ","\u201cOutputs produced\u201d describe what information is produced by a particular widget in response to an acceptable input. Continuing with the restaurant example, this output may be a street address, phone number, link to the restaurant's webpage, etc.","\u201cActions applied to the different inputs received\u201d is a high-level description of how a widget handles an acceptable input. For example, widget may access a database located at a particular server identified by a certain uniform resource locator (URL). The action may pull up information about the particular restaurant, cause the production of a bill to the restaurant owner for providing this information to the user, etc.","\u201cActions that trigger the different outputs to be sent\u201d define what conditions must exist for an output to be sent. Examples of such actions include, but are not limited to, 1) what occurs in another \u201cupstream\u201d widget (e.g., what must occur in widget for widget to respond in accordance with link ); 2) what internal conditions must exist within widget for widget to produce an output (e.g., has widget updated its database within the past six months?); 3) what is the current state of context passage (e.g., is there a current, valid and authorized link  between widget and widget before widget will produce an output\u201d), etc.","Each element (inputs, outputs, actions applied, trigger actions) described above has its own help snippet. That is, rather than only providing global and generic help information for each widget, additional help snippets are provided that describe information about the links between widgets and how linked widgets respond\/operate in response to the above-described links\/context passers. In one embodiment, the new types (chunks) of help information are directly tied in with a registration mechanism for the inputs and outputs themselves. For example, if there is an XML representation used to register or classify an output message, it will also have: 1) an XML help property to describe the action that triggers the output, and 2) an XML help property that points to some text to describe the output data itself. Optimally, standard translation mechanisms should be leveraged. Thus, rather than the XML property containing the help text inline, it could be a reference to the properties file and key, or a resource bundle and key, etc.","Not all help content registered will be used when generating the help for a particular instance of a page. Only the help content registered that is applicable to how the different widgets on the page have been wired together (linked to promote context passages) will be leveraged. Thus, the help content for each widget is chunked up in a standard (link-centric) way so that the mashup maker service (e.g., mashup site  shown in ) can then pull in the help text provided by the widget associated with the inputs, outputs, and actions that correspond with the current configuration that it knows about (e.g. how an instance of the widget is wired on a page).","There are multiple embodiments in which link\/context passage help information is provided to a user. One method is to simply provide a help page that includes a lengthy and detailed description of how different widgets are linked, and how this linkage affects their operations. This method is useful for programmers, who may need extensive information about the operations of the widgets\/links in order to modify the mashup page.","In one embodiment of the present invention, a help page that includes a lengthy and detailed description that dovetails the standard help information for the individual widgets on the page with the help information for how those different widgets are linked, and how this linkage affects their operations, is provided to the user. This embodiment provides end users of the page with a global understanding of how to use all the elements available to them on the current page. This embodiment also shields the user from awareness that these widgets were developed independently, and instead provides for a seamless end user experience.","An embodiment of the present invention provides help content for each individual widget on the page that includes a description that dovetails the standard help information for that widget with the help information for how that widget is linked to different widgets on the current page, and further describes how this linkage affects that widget's operations.","Another embodiment for providing help information about the widgets\/links is to provide such information graphically and in less detail. For example, consider mashup page  again. Initially, mashup page  may be presented to a user as simply the geographic map described above. However, by clicking a link help button , the underlying logic of how the different widgets -are linked together is displayed. By hovering over a particular link (e.g., link ), a pop-up help window  may appear. Within the help-window  are sub-topics that, when clicked, present detailed information about the widget at the terminal end of the depicted link (e.g., information for widget is associated with link ).","With reference now to , a high-level flow chart of exemplary steps taken to present help data for links in a mashup page is presented. Note that in one embodiment, one or more of these steps are performed by a specific processor or computer. After initiator block , widgets to be used in a mashup page are identified by a mashup architect (block ). Each widget is logic that is capable of displaying disparate types of information from different remote sources (e.g., content providers -that provide information that is in different formats, such as graphical information, database information, etc.) on a mashup page. Note that the operations of one or more of the widgets are dependent on their linkage to another widget used by the same mashup page. The mashup architect then defines what type of help information is to be displayed for the links that pass context between the widgets (block ). Note that block  is presented in dashed lines, since this step is optional. That is, in one embodiment, the type of help information that is to be displayed is set to a default setting, such that all mashup pages show the same type of help information (e.g., the four categories described above) for each link\/context passage.","Suitable programmed hardware logic (e.g., processor  using MMP  or VHDL emulation chip  shown in ) then logically links widgets in the mashup page. This logical linkage makes the different widgets dependent upon one another, and also directly affects how the widgets operate. Thus, in the example presented above, widget is dependent upon widget to provide needed information about the restaurants depicted by the map that widget generates, and the operation of providing addresses for these restaurants by widget is dependent on the logic (widget definition) and user-operations (e.g., clicking) associated with widget ","As described above, help information for each link used in the mashup page is then presented to the user on the mashup page (block ). As described above, in one embodiment this help information (for each link) comprises help information about \u201cInputs acceptable\u201d; \u201cOutputs produced\u201d; \u201cActions applied to the different inputs received\u201d; and \u201cActions that trigger the different outputs to be sent\u201d described above.","One embodiment of the present invention, as described above, thus creates help for the user of a page instance with widgets that have been wired together. In one embodiment, when administrators are wiring the widgets together, the help content additionally is still displayed for all the widgets ins (acceptable inputs) and outs (produced output), regardless of whether they are being used. This verbose text is helpful to administrators, because of the type of task they are performing. End users of the resulting page, however, benefit more from the simplified graphically-supported help information described above.","Thus, one or more embodiments of the present invention provide the ability to dynamically combine information about how the different components on a page have been wired together as well as help data provided by the components themselves. Each of the component register help snippets are associated with the behavior of each of the ins and outs that it publishes for loosely coupling itself to other components. The help for an individual widget on the page that has had the help action invoked on it can dynamically generate the help context that describes how that view is interacting with the other views on the page, (i.e., what views it is passing context to and any manipulation that may be involved with the context).","As described herein, one embodiment of the present invention provides help information for links that pass context from one widget to another. This embodiment departs from established processes in a new and uniquely challenging way, since help information for information on a webpage in the prior art was conventionally directed to autonomous components. That is, help information was typically presented for each component that currently holds context on a webpage, with no regard as to how that component is context-linked to another component. For example, help information that was provided for a map was ignorant of, and was agnostic to, how that map interacted with any other component\/widget on the webpage. Thus, prior to the discovery of the present invention, there was no motivation to try to associate help information from various widgets, since such help information was static and unrelated to context-linked other widgets. The presently described process, however, provides link help information, rather than just component\/widget help information. This link help information results in dynamically adjusted help information that can be applied to widgets according their context-linkage to other widgets. This link help information has resulted in the new and unexpected benefit of allowing an end-user to more fully understand the dynamics between various widgets located on a mashup webpage, rather than following the traditional notion of help information that is static for individual widgets.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of various embodiments of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","Note further that any methods described in the present disclosure may be implemented through the use of a VHDL (VHSIC Hardware Description Language) program and a VHDL chip. VHDL is an exemplary design-entry language for Field Programmable Gate Arrays (FPGAs), Application Specific Integrated Circuits (ASICs), and other similar electronic devices. Thus, any software-implemented method described herein may be emulated by a hardware-based VHDL program, which is then applied to a VHDL chip, such as a FPGA.","Having thus described embodiments of the invention of the present application in detail and by reference to illustrative embodiments thereof, it will be apparent that modifications and variations are possible without departing from the scope of the invention defined in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
