---
title: Flexible interface module
abstract: An interface module for a local application provides a user interface to solicit user input for an configuring invocation. The user input solicited by the user interface includes a name of an external query to be executed and an input variable name for the external query. The interface module receives the user input for the configuring invocation; stores the invocation; and receives a trigger, with an input value for the external query, to launch the invocation. In response to receiving the trigger, the interface module executes the invocation to provide, to another interface module for a remote application, a request to execute the external query. The interface module receives, from the other interface module, an output value for the external query and process the output value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08595251&OS=08595251&RS=08595251
owner: Verizon Patent and Licensing Inc.
number: 08595251
owner_city: Basking Ridge
owner_country: US
publication_date: 20111116
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["In many instances, applications may rely on information from other applications\/systems to perform requested tasks. When developing software code to exchange information between dissimilar systems, software code must be created for both systems to process a request and provide a response from one system to another. This development process can be time-consuming and inefficient.","The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.","Systems and\/or methods described herein may provide a software module that allows two systems to exchange data without a code change in one or both systems. The flexible interface module may run on each of the two systems. The flexible interface module may be capable of inter-module communication, which is abstracted from users (e.g., software developers). The users can write formatted queries using a user interface (e.g., a graphical user interface (GUI)) of a local flexible interface module and package multiple queries into an invocation. To exchange data, a user may communicate their invocation name, input and output parameters.","In one implementation, an interface module for a local application may provide a user interface to solicit user input for configuring an invocation. The user input solicited by the user interface may include a name of an external query to be executed and an input variable name for the external query. The interface module may receive the user input for configuring the invocation; store the invocation; and receive a trigger, with an input value for the external query, to launch the invocation. In response to receiving the trigger, the interface module may execute the invocation to provide, to another interface module for a remote application, a request to execute the external query. The other interface module may execute the external query (e.g., on the remote application) and may send an output value to the interface module for the local application. The interface module may receive the output value for the external query and process the output value (e.g., by executing a local query to integrate the output value into the local application).","As used herein the term \u201cquery\u201d may refer to a command string that can be run to fetch results for variables and send the results back to the requestor. A query may be either internal or external. An internal query may be run locally (e.g., within a single application); while an external query may be run on an application separate (or remote) from the requesting application. As used herein the term \u201cinvocation\u201d may refer to a collection of queries. Invocations can execute the collection of queries in a sequence. In some instances, the collection of queries may be included within one or more sub-invocations. Thus, an invocation can be comprised of queries, sub-invocations, or a combination of both. The queries\/invocations within the collection can either be internal or external.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","1","110","2","110","110","115","110","120","1","120","2","130","1","130","2","110","140","1","140","2","140","140"]},"User device  may include one or more devices capable of storing\/executing applications and sending\/receiving information (e.g., data, broadband applications, etc.). User device  may include, for example, a personal computer, a computer workstation, a tablet computer, a smart phone, a laptop computer, a portable gaming system, or other types computation\/communication devices.","Network  may include, for example, a local area network (LAN), a private network (e.g., a company intranet), a wide area network (WAN), a metropolitan area network (MAN), or another type of network that enables communication between user devices .","User device  may include one or more stored applications  with various functionalities, such as functionalities associated with provisioning, order processing, transactions management, social media, dictionary\/reference, currency\/mathematical conversions, travel, traffic, weather, sports, news, etc. In one implementation, user device  may store and execute a particular type of application  that requires information from another system or application . For example, application - may be a provisioning system that requests order information from an ordering system -.","Flexible interface module  may include a software module that allows applications  to exchange information with each other. Flexible interface module  may be installed in both user devices  such that one flexible interface module  (e.g., flexible interface module -) may communicate with another flexible interface module  (e.g., flexible interface module -). Flexible interface module  may be included as part of the same container as its host application (e.g., application ) and customized for that particular application to enable the host application to execute query commands from flexible interface module . In an exemplary implementation, flexible interface module  may be deployed in a Java 2 Enterprise Edition (J2EE) platform. As described further herein, each flexible interface module  may provide a user interface, such as a GUI or text-based interface, to enable users  (e.g., software developers) to write formatted queries and package the formatted queries into an invocation.","Each flexible interface module  may locally store respective formatted queries (e.g., associated with a corresponding application ). Upon receiving a trigger from a user  (e.g., via the user interface) or from a local application , a local flexible interface module  (e.g., flexible interface module -) may invoke the remote query on the other flexible interface module  (e.g., flexible interface module -). The other flexible interface module  may execute the remote query and return an output value to the local flexible interface module . In one implementation, flexible interface module  may support a web service or another communication interface to enable machine-to-machine communications.","Users  may include developers who may be required to permit machine-to-machine communications between applications  residing on user devices . According to implementations described herein, use of flexible interface modules  may simplify software development and reduce a required level-of-effort to provide required communications from other systems without complex code changes to existing systems.","In operation, applications incorporating flexible interface modules  may exchange data using simplified instructions without requiring internal coding changes to local applications. Internal queries would not be exposed directly to external systems. Instead the internal queries can be encapsulated in an invocation. That is, a local application (e.g., application -) can execute an external invocation in a remote application (e.g., application -) by passing the invocation name\/input variables; but the local application may not have visibility to the query in the remote system, since all the local application would know would be the invocation name, input parameters, and output parameters.","Although  shows example components of environment , in other implementations, environment  may contain fewer components, different components, differently arranged components, or additional components than depicted in .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["110","110","210","220","230","240","250","260","110","110"]},"Bus  may include a path that permits communication among the components of user device . Processing unit  may include any type of processor or microprocessor (or groups of processors or microprocessors) that interprets and executes instructions. In other embodiments, processing unit  may include an application-specific integrated circuit (ASIC), a field-programmable gate array (FPGA), or the like.","Input device  may include a device that permits a user to input information into user device , such as a keyboard, a mouse, a pen, a, a remote control, a touch-screen display, etc. Output device  may include a device that outputs information to the user, such as a display, a speaker, etc. Output device  may also include a vibrator to alert a user.","Input device  and output device  may allow the user to activate a particular service or application. Input device  and output device  may allow the user to receive and view a menu of options and select from the menu options, such as options included in a GUI. The menu may allow the user to define and\/or select various functions or services associated with applications executed by user device .","Communication interface  may enable user device  to communicate with other devices and\/or systems. Communication interface  may include a transmitter that may convert baseband signals to radio frequency (RF) signals and\/or a receiver that may convert RF signals to baseband signals. Alternatively, communication interface  may include a transceiver to perform functions of both a transmitter and a receiver. Communication interface  may be coupled to an antenna for transmission and reception of the RF signals. Communications interface  may include a network interface card, e.g., Ethernet card, for wired communications or a wireless network interface (e.g., a WiFi) card for wireless communications. Communication interface  may also include, for example, a universal serial bus (USB) port for communications over a cable, a Bluetooth\u2122 wireless interface for communicating with Bluetooth devices, a near-field communication (NFC) interface, etc. Communication interface  may implement a wireless communication protocol, e.g., LTE, GSM, CDMA, WCDMA, GPRS, EDGE, etc. Communications interface  may also receive, transmit and\/or process digital or analog audio inputs\/outputs and\/or digital or analog video inputs\/outputs.","Memory  may include a random access memory (RAM) or another type of dynamic storage device that may store information and instructions, e.g., an application, for execution by processing unit ; a read-only memory (ROM) device or another type of static storage device that may store static information and instructions for use by processing unit ; and\/or some other type of magnetic or optical recording medium and its corresponding drive (e.g., a hard disk drive (HDD), flash drive, etc.), for storing information and\/or instructions. Consistent with implementations described herein, memory  may include application  and flexible interface module .","As described herein, user device  may perform certain operations in response to processing unit  executing software instructions contained in a computer-readable medium, such as memory . A computer-readable medium may include a non-transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into memory  from another computer-readable medium or from another device via communication interface . The software instructions contained in memory  may cause processing unit  to perform processes described herein. Alternatively, hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus, implementations described herein are not limited to any specific combination of hardware circuitry and software.","Although  shows example components of user device , in other implementations, user device  may contain fewer components, different components, differently arranged components, or additional components than depicted in . Alternatively, or additionally, one or more components of user device  may perform one or more other tasks described as being performed by one or more other components of user device .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIG. 3","FIGS. 1 and 2"],"b":["300","100","300","120","1","120","2","130","1","130","2","140","1","140","2","120","130","140"]},"Communications describe in connection with  represent a sample use case of a first application (e.g., application -) being configured to obtain information from a second application (e.g., application -) given certain information from application -. As shown in , user - may provide requirements  to user - (e.g., via out-of-band communications, such as email, voice, etc.). Requirements  may include, for example, a description of the information needed from application -.","User - may receive requirements  and may use flexible interface module - to write a formatted query  with new variable names. Formatted query  may be written, for example, using a GUI of flexible interface module - and may include new variables to reflect fields needed to meet requirements . It should be understood that a queries described herein (e.g., formatted query ) are not limited to only retrieving data. Instead, a formatted query may include different types of Structured Query Language (SQL) statements that may include, for example, insert, delete, and\/or update statements. Flexible interface module - may assign a query identifier (e.g., a unique string) to formatted query .","User - may provide the query identifier and the new variable names to user - (e.g., via out-of-band communications, such as email, voice, etc.), as indicated by reference number . User - may, in turn, supply the query identifier to flexible interface -, as indicated by reference number . User - may also create (e.g., as prompted by flexible interface module -) an invocation to run the query provided by communication .","When application - is ready to request\/retrieve information from application -, application - may invoke the query identifier or query name using flexible interface -, as indicated by reference number . In addition to direct user inputs, the query may be invoked by automated applications running on user device , as well as in cases where the user input is indirectly received (such as order data input). For example, in an existing order flow, an invocation can be dynamically created and plugged in to use unused data elements in the order. Application - may supply the variable names (as defined by user -) and associated values (obtained from execution of application -, user -, or another application) to flexible interface -, which in turn passes them to flexible interface -.","Flexible interface - may cause application - to run the requested query using the variables and values provided by flexible interface -. Application - may provide the query results to flexible interface -, which in turn may send query output  to flexible interface -. Flexible interface - may forward query output  to application -. Application - may then perform additional processing based on the received query results . Additional processing may include, for example, running an additional local query to integrate the query output into application -.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 4","FIG. 2","FIG. 4"],"b":["130","110","130","410","420","430","440","450","460"]},"GUI  may provide a user interface to create and\/or edit queries, create\/edit invocations, execute queries\/invocations, and present status information for one or more queries\/invocations. As shown in , in one implementation, GUI  may include an invocation\/query creation GUI , an invocation\/query summary status GUI , and an invocation\/query execution GUI .","Invocation\/query creation GUI  may provide a user interface to allow writing, editing, and\/or deleting of formatted queries. Invocation\/query creation GUI  may solicit user input to generate query names and\/or generate unique identifiers. In one implementation, invocation\/query creation GUI  may provide a distinct set of input screens for invocations and another distinct set of input screens for queries. Invocation\/query creation GUI  may allow a user to specify the nature of the query (e.g., internal\/external; number of rows of data expected to be returned (e.g., 1, >1, 0 rows); number of times query can be executed in a day; a source system which to execute the query, etc.). Each invocation may include one or more queries that may be ordered in a sequence defined by a user.","In one implementation, invocation\/query creation GUI  may provide one or more input screens to collect invocation information from a user (e.g., user ). For example, invocation\/query creation GUI  may collect multiple local query identifiers\/names, or invocation names, one after the other. Invocation\/query creation GUI  may allow users to change of the order of running the queries. Invocation\/query creation GUI  may also collect an owning system name (e.g., of a host application  that performs a query locally) for the query or invocation. The owning system name may be related to an internal invocation\/query or an external query\/invocation. Invocation\/query creation GUI  may also solicit whether each query\/invocation is expected to return multiple records. If multiple records are expected, invocation\/query creation GUI  may also solicit a listing order for the multiple records. Invocation\/query creation GUI  may also solicit whether the results of the query\/invocation will be iterated by subsequent queries\/invocations. The input screen(s) of invocation\/query creation GUI  may also solicit, for example, whether each input is a query or an invocation; the number of times an invocation can be invoked by a given external application (e.g., in an hour, day, week, etc.); and a list of external system names\/acronyms that can be used to trigger the invocation.","Invocation\/query creation GUI  may permit several different types of invocation operations. For example, invocation\/query creation GUI  may allow a user to conduct a search by Invocation Name, by Invocation ID, or by System Name. Invocation\/query creation GUI  may also allow a user to update an existing invocation (e.g., alter the list and sequence of query\/invocations) or delete an invocation altogether.","In another implementation, invocation\/query creation GUI  may provide one or more input screens to collect query information from a user (e.g., user ). For example, invocation\/query creation GUI  may solicit user input to create a query along with other supporting data. The input screen may solicit for example, a formatted query, a list of input parameters, and a list of output parameters. Each input\/output parameter may be listed as a single parameter or multiple parameters. Invocation\/query creation GUI  may also solicit user input concerning a number of times a query can be run and\/or an invocation name(s) associated with the query. In some instances a query can be created without an invocation name. Additionally, or alternatively, the same query can be present in multiple invocations triggered locally or externally.","Invocation\/query creation GUI  may permit several different types of query operations. For example, invocation\/query creation GUI  may allow a user to conduct a search by Query Name, Query ID, or System Name. Invocation\/query creation GUI  may also allow a user to update an existing query (e.g., change properties of a query) or delete a query altogether.","Invocation\/query summary status GUI  may provide a user interface to present information about invocation transactions and\/or query transactions. Invocation\/query summary status GUI  may provide, for example, a status of invocation\/query execution results generally, a status invocations\/queries invoked\/executed in a given timeframe, or statistics related to particular invocations\/queries and\/or timeframes.","In one implementation, invocation\/query summary status GUI  may include a user interface screen to allow a user to inquire about invocation transactions. The user interface screen may allow a user to search on running invocations with an invocation transaction identifier. For example, a simple search by invocation name or invocation identifier will show all running invocations. For running invocations, invocation\/query summary status GUI  may show the real-time progress of each particular invocation. For example, if there are ten queries and two invocations, the state of each query and invocation will be displayed. Once all the queries\/invocations are complete, output parameters can be populated. The user interface screen may also allow a user to search on completed invocations by name, invocation transaction identifier, and\/or time frame. Search results may be displayed with associated detail for each completed invocation.","In another implementation, invocation\/query summary status GUI  may include a user interface screen to allow a user to inquire about query transactions. Invocation\/query summary status GUI  may include a user interface screen to allow a user to inquire about query transactions. For example, invocation\/query summary status GUI  may allow users to search on running queries with any of an invocation transaction identifier, an invocation name, a query identifier, or a query name. For running queries, invocation\/query summary status GUI  may show the real-time progress of the query and the query results. For completed queries, invocation\/query summary status GUI  may allow a user to sort by name, query transaction identifier, or time frame. Search results may be displayed with associated detail for each completed query.","Invocation\/query execution GUI  may provide a user interface to initiate an invocation\/query or to configure automatic initiation of an invocation\/query. Invocation\/query execution GUI  may allow local or remote queries\/invocations to be invoked with appropriate variables and values. In one implementation, invocation\/query execution GUI  may display final and intermediate results for each query.","In one implementation, invocation\/query execution GUI  may include a user interface screen to allow a user to run invocations with input and output parameters. Invocation\/query execution GUI  may display a list of available internal\/external invocations and allow for searches on the invocations. When a user selects a particular invocation, invocation\/query execution GUI  will display the list of input parameters with an option to input as per the data type. Invocation\/query execution GUI  may include a submit option, the selection of which will result in execution of the invocation. Selection of a submit option can also cause invocation\/query execution GUI  to generate an invocation transaction identifier. After the selected invocation is executed, invocation\/query execution GUI  may display the result to the user using GUI . If the invocation involves multiple queries\/transactions, invocation\/query execution GUI  may present of status of each query\/transaction in real time.","In one implementation, invocation\/query execution GUI  may include a user interface screen to allow a user to run queries with input and output parameters. Invocation\/query execution GUI  may display a list of available internal\/external queries and allow for searches on the queries. When a user selects a particular query, invocation\/query execution GUI  will display the list of input parameters for the query with an option to input as per the data type. Invocation\/query execution GUI  may include a submit option, the selection of which will result in execution of the query. After the selected query is executed, invocation\/query execution GUI  may display the result to the user using the GUI.","Returning to , flexible interface module  may include database . Database 420 may include a variety of tables to reflect stored queries\/invocations and results of actual data exchanges between applications . Each of the tables may be implemented as a part of a relational database management system (RDBMS) or another data structure (e.g., hash table, a linked list, etc.). Features of database  are described further in connection with FIG. .","As shown in , database  may include transaction details table , query tables , and invocation tables . Transaction details table  may include transaction information for inbound and\/or outbound query execution. In one implementation, transaction details table  may include separate sections for inbound queries (e.g., queries that may be executed locally) and outbound queries (e.g., queries that may be executed remotely). For inbound queries, transaction details table  may include a list of actual queries executed and the query results. The listed inbound queries may include the variables and values used to construct each query and any associated invocation details. For outbound queries, transaction details table  may include a list of the actual query name and\/or query identifier that has been invoked and the query results. The listed outbound queries may include the variables and values sent with each query, the target system, and any associated invocation details.","Query tables  may generally include tables related to particular queries. Features of query tables  are described further in connection with . As shown in , query tables  may include a query table , an input parameters table , an output parameters table , and a history table .","Query table  may include format information for each available query. Query table  may include a variety of fields for each query. Fields for query table  may include, for example, a query identifier, a query name, the actual formatted query, an owning system for the query, expected results (e.g., single\/multi instance), a query version, a date (e.g., of creation\/modification of the query), and a user (e.g., person who created\/modified the query).","Input parameters table  may include fields relating to input parameters for particular queries. Each query can have multiple input parameters. Fields for input parameters table  may include, for example, a query identifier, an input parameter (e.g., variable name, length, etc.), a data type (e.g., integer, character string, etc.), and a format.","Output parameters table  may include fields relating to output parameters for particular queries. Each query can have multiple output parameters. Fields for output parameters table  may include, for example, a query identifier, an output parameter, a data type, and a format.","History table  may include a cumulative data structure of query results, input values, times, or other information from any of query table , input parameters table , and output parameters table . In one implementation, history table may include a particular size or date range that may automatically overwrite older data.","Returning to , invocation tables  may generally include tables related to particular invocations. Features of invocation tables  are described further in connection with . As shown in , invocation tables  may include an invocation table , invocation components , an input parameters table , an output parameters table , and a history table .","Invocation table  may include format information for each available invocation. Invocation table  may include a variety of fields for each invocation. Fields for invocation table  may include, for example, an invocation identifier, an invocation name, an external\/internal indicator (e.g., \u201ce\u201d or \u201ci\u201d), an owning system for the invocation, expected results (e.g., single\/multi instance), an invocation version, a date (e.g., of creation\/modification of the invocation), and a user (e.g., person who created\/modified the invocation).","Invocation components table  may include component information for each available invocation. Fields for invocation components table  may include, for example, a master invocation identifier, a query identifier (e.g., associated with the master invocation identifier), an invocation identifier (e.g., for any sub-invocations associated with the master invocation identifier), a component type (e.g., either \u201cinvocation\u201d or \u201cquery\u201d), a sequence number (e.g., designating an order of execution within the master invocation), a date (e.g., of creation\/modification of the master invocation), and a user (e.g., person who created\/modified the master invocation).","Input parameters table  may include fields relating to input parameters for particular invocations. Each invocation can have multiple input parameters. Fields for input parameters table  may include, for example, an invocation identifier, an input parameter, a data type, and a format.","Output parameters table  may include fields relating to output parameters for particular invocations. Each invocation can have multiple output parameters. Fields for output parameters table  may include, for example, an invocation identifier, an output parameter, a data type, and a format.","History table  may include a cumulative data structure of invocation results, triggers, times, or other information from any of invocation table , invocation components table , input parameters table , and output parameters table . In one implementation, history table may include a particular size or date range that may automatically overwrite older data.","Returning to , flexible interface module  may include communications module . Communications module  may manage communications and session management between flexible interface modules . For example, communications module  may permit one flexible interface module  to request execution of an external query on another flexible interface module . Similarly, communications module  may permit one flexible interface module  to provide output from the external query to the other flexible interface module  In one implementation, communication module  may implement a web service interface and\/or Java application programming interface (API).","Query parser  may translate a formatted query (e.g., received from GUI ) into specific instructions for an application (e.g., application ) to perform the query function.","Query\/Invocation validator  may validate a query or invocation created by a user. Query\/Invocation validator  may verify user input to ensure consistency with input\/output parameters. For example, in any given invocation, a query's or a sub-invocation's input parameters must also be one of the invocation's input parameters, or any of the predecessor query's output parameters, are any of the predecessor invocation's output parameters.","Query\/invocation processor  may manage execution of local\/remote queries and invocations based on local\/inbound triggers. For example, query\/invocation processor  may initiate a particular query upon receiving an external query request from a remote flexible interface module . Additionally, or alternatively, query\/invocation processor  may initiate an invocation in response to local user input or receipt of a particular input variable value. Query\/invocation processor  may process query results and\/or triggers subsequent actions based on the query results. Query\/invocation processor  may also support creation and management of query\/invocation inventory (e.g., for database ).",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIGS. 9A and 9B","FIGS. 10A and 10B","FIGS. 9A and 9B","FIGS. 10A and 10B"],"b":["900","900","900","110","120","130","900","110"]},"Assume in  that a provisioning application , given a particular tracking information number (TIN), is required to associate a particular order manager (OM) name with the TIN. Assume further that the data to cross reference OM names associated with TINs reside on another system, accessed by an ordering application .","As illustrated in , process  may include providing, by a first software developer for a first application, requirements for an exchange between remote systems (block ); receiving, by a second software developer for a second application, the requirements (block ); and writing a formatted query via a local flexible interface module (block ). For example, in the scenario shown in connection with , a developer of provisioning application  may send exchange requirements to provide an OM name given a TIN (e.g., \u201chave TIN, need OM name\u201d). The developer of ordering application  may receive the exchange requirements and, in response may write a formatted query using a GUI (e.g., invocation\/query creation GUI ) of flexible interface module -. As shown in , the query may be in the form of \u201cSelect \u201cOM_NAME\u201d omname from ordering_appl where TIN=:TIN:\u201d where OM_NAME is variable for an order manager's name and where \u201c:TIN:\u201d represents a variable for tracking information number. The developer of ordering application  may select a name for the query (i.e., \u201cOM-NAME-BY-TIN\u201d), and flexible interface module - may assign a unique identifier (i.e., \u201coapp1.89237\u201d).","Returning to , process  may include providing, by the second software developer for the second application, a query identifier and variable names (block ). For example, in the scenario shown in connection with , the developer of ordering application  may send to the developer of provisioning application  the new query name (i.e., \u201cOM-NAME-BY-TIN\u201d) and\/or the unique identifier (i.e., \u201coapp1.89237\u201d), along with the variable name assigned to the source variable (e.g., \u201cTIN\u201d) for the new query.","As further shown in , process  may include receiving, by the first software developer for the first application, the query identifier and variable names (block ), and invoking, by the first developer for the first application, the query via a local flexible interface module (block ). For example, in the scenario shown in connection with , the developer of provisioning application  may receive the new query name, unique identifier, and variable name. In turn, the developer of provisioning application  may generate an invocation to execute the query. In the example of , provisioning application  may require an additional query to process information received from ordering application . The developer of provisioning application  may write a formatted query using a GUI (e.g., invocation\/query creation GUI ) of flexible interface module -. As shown in , the query may be in the form of \u201cUpdate PC_ORDER set contact=:OM_NAME: where order_number=\u201c:TIN:\u201d\u201d where PC_ORDER represents a data set to associate a TIN with the OM name. The developer of provisioning application  may select a name for the query (i.e., \u201cUPD-NAME-BY-TIN\u201d), and flexible interface module - may assign a unique identifier (not shown).","Still referring to , the developer of provisioning application  may write an invocation using the GUI of flexible interface module -. The invocation may incorporate both the OM-NAME-BY-TIN query (e.g., to retrieve the OM name from application ) and the UPD-NAME-BY-TIN query (e.g., to incorporate the retrieved OM name into application ). As shown in  the invocation (i.e., \u201cGet and Update OM, Input: TIN, Output: OM\u201d) may invoke the two queries by indicating a sequence (i.e., \u201c1.\u201d and \u201c2.\u201d), a source (i.e., \u201cOAPPL.\u201d for the external query by application , and \u201cPC.\u201d for the internal query by application ), a query name (i.e., \u201cOM-NAME-BY-TIN\u201d and \u201cUPD-NAME-BY-TIN\u201d), and the variable name (i.e., \u201cTIN\u201d).","Referring to , the flexible interface module of the first application may receive a query trigger (block ) and may pass the variable names and values for the query to the flexible interface module of the second application (block ). For example, in the scenario shown in connection with , the developer of provisioning application  may trigger execution of the queries \u201cOM-NAME-BY-TIN\u201d and \u201cUPD-NAME-BY-TIN\u201d using a GUI (e.g., invocation\/query execution GUI ) of flexible interface module -. For example, application  may be configured to trigger the invocation \u201cGet and Update OM, Input: TIN, Output: OM\u201d upon receiving a new TIN. In response to the trigger, flexible interface module - may initiate the first query in the invocation sequence (i.e., \u201cOM-NAME-BY-TIN\u201d) by sending the query name and the new TIN value to flexible interface -.","Referring back to , the flexible interface module of the second application may receive the variable names and values for the query (block ), may run the query using the variable values (block ), and may provide the query results via the flexible interface module (block ). For example, in the scenario shown in connection with , flexible interface module - may receive the query name (i.e., \u201cOM-NAME-BY-TIN\u201d) and the value for the new TIN. Flexible interface - may communicate with application  to execute the \u201cOM-NAME-BY-TIN\u201d query and obtain an operations manager's name that corresponds to the TIN value. Flexible interface - may communicate with flexible interface - to provide the query result (i.e., \u201cOM name\u201d) to application .","Referring again to , the flexible interface module of the first application (e.g., flexible interface module -) may receive the query results (block ), and may process the query results (block ). For example, in the scenario shown in connection with , flexible interface module - may receive the OM name and may initiate the second query in the invocation sequence (i.e., \u201cUPD-NAME-BY-TIN\u201d). Flexible interface - may communicate with application  to locally execute the \u201cUPD-NAME-BY-TIN\u201d query to update a local table with the operations manager's name that corresponds to the TIN value.","While examples described herein have included a simple query with a single variable, in other implementations a formatted query can have more than one variable name as an input and provide more than one element\/records as the output. Additionally, the output of one query\/invocation can be used by subsequent queries\/invocations.","Systems and\/or methods described herein may provide, by an interface module of a first application, a user interface to solicit user input for a query, wherein the user input solicited by the user interface includes a formatted query, a query name, and an input variable name. The systems and\/or methods may store, in a memory associated with the first application, the formatted query, the query name, and the input variable name. The systems and\/or methods may receive, from an interface module of a second application, a request to execute the formatted query, wherein the request includes the query name and an input value associated with the input variable name, and may execute, by the first application, the query to obtain an output value based on the input value. The systems and\/or methods may send, by the interface module of the first application, the output value to the interface module of the second application. The systems and\/or methods may simplify a development and testing cycle for exchanging data between disparate systems in, for example, an enterprise environment.","The foregoing description of implementations provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention.","For example, while a series of blocks has been described in connection with , the order of the blocks may be modified in other implementations. Further, non-dependent blocks may be performed in parallel.","It will be apparent that different aspects of the description provided above may be implemented in many different forms of software, firmware, and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects is not limiting of the invention. Thus, the operation and behavior of these aspects were described without reference to the specific software code\u2014it being understood that software and control hardware can be designed to implement these aspects based on the description herein.","Further, certain portions of the invention may be implemented as a \u201ccomponent\u201d that performs one or more functions. These components may include hardware, such as an ASIC or a FPGA, or a combination of hardware and software.","Even though particular combinations of features are recited in the claims and\/or disclosed in the specification, these combinations are not intended to limit the disclosure of the invention. In fact, many of these features may be combined in ways not specifically recited in the claims and\/or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim, the disclosure of the invention includes each dependent claim in combination with every other claim in the claim set.","No element, act, or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article \u201ca\u201d and \u201cone of\u201d is intended to include one or more items. Further, the phrase \u201cbased on\u201d is intended to mean \u201cbased, at least in part, on\u201d unless explicitly stated otherwise."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0004","num":"0003"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 6","FIG. 4"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIGS. 10A and 10B","FIGS. 9A and 9B"]}]},"DETDESC":[{},{}]}
