---
title: Information management server, information processing system, communication method and program
abstract: An embodiment of the invention includes an information management server with a registration unit that registers a status change condition of a database and a notification action so that they are associated with each other. Also, the information management server includes a communication unit that receives an acquisition request for a status change notification via database connection established with respect to a client and a change detection unit that detects a status change satisfying the condition of the acquisition request and invokes the notification action associated therewith. According to aspect of the invention, a notification unit causes the communication unit to send a notification including a result of the notification action via the database connection as a response to the acquisition request, and returns control of the connection to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08301607&OS=08301607&RS=08301607
owner: International Business Machines Corporation
number: 08301607
owner_city: Armonk
owner_country: US
publication_date: 20090715
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY OF AN EMBODIMENT OF THE INVENTION","DETAILED DESCRIPTION"],"p":["Embodiments of the invention relate to the database field, and more specifically relates to mechanism for notifying a database client of a change in a database status.","In recent years, government and municipal offices, companies and the like have widely constructed a large scale database system to manage enormous volumes of data generated with various operations. The usage of such database also has been diversified, including a general business database as well as a workflow management system of recording plans and actual achievement of an operation so as to manage the progress of a project, for example. A database system further has been utilized to realize a traceability system of recording various types of operation histories of manufacturing, shipping and transaction, thus enabling the prompt access to the information if required.","For the above-stated usage for the workflow management and traceability, there is a demand to generate a certain action in response to a status change in the database (insert, update, or delete), for example. For the workflow management use, for example, there is a demand to generate a new operation followed in response to the completion of one operation. For the traceability use, to keep up with the database state changing momentarily, there is a demand to display an alert in response to the registered event generation. There is another demand for a client GUI (Graphical User Interface) application, which is for displaying in response to a database status, to reflect a status change promptly.","In association with the above-stated actions conducted in response to a status change in a database, a conventional database management system (DBMS) is equipped with a trigger function that invokes processing designated beforehand in response to a status update of the database registered beforehand (insert, update, or delete). This function is used for processing of reflecting a change made to one of a plurality of databases and tables, having contents operatively associated with each other, on the other databases and tables.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 12","FIG. 12A","FIG. 12B"]},"Meanwhile, as mechanism of letting a database client (hereinafter referred to as a DB client) detect such a status change in the database, a polling system is available, for example, which issues a SQL statement regularly to acquire data and checks whether or not insert, update or delete has been conducted with respect to the data. As another mechanism of detecting a status change in a database, an event notification system using external mechanism is available, which utilizes the trigger function of DBMS and a MQ (Message Queuing) function that provides a communication function among applications to detect a status change in a database (insert, update or delete) using a trigger of the database, and sends a message to a client by using the external MQ. An application-compatible system also is available, which enables a closer linkage among a plurality of applications that use a database so that an application that conducted insert, update or delete of data can notify another application that should execute the following action in response to the status change.","In response to an acquisition request for a status change notification of a database received from a client via database connection, the information management server detects generation of the status change registered, and sends as a response a notification including a result of the notification action invoked to the client via the database connection while returning control of the connection to the client. A notification action is registered in association with a status change in the database serving as a trigger thereof.","According to another aspect of an embodiment of the invention, the information management server further may include a cancellation unit that gives an acquisition error of the status change notification as the result in response to generation of an event serving as a trigger of canceling execution of acquisition processing of the status change notification. Thereby, even before detecting the status change satisfying acquisition request conditions, if the notification becomes unnecessary, the client can withdraw the acquisition request, thus making it possible to release the database connection kept for the status change notification to different processing.","According to one embodiment the cancellation unit may be a timer unit that starts to operate in response to an acquisition request for the status change notification, and gives expiration of acquisition time-limit of the status change notification in response to the expiration as the result. The cancellation unit may be an interruption unit that gives acquisition interruption of the status change notification as the result in response to an interruption instruction received via different database connection. The cancellation unit may be the communication unit gives acquisition interruption of the status change notification as the result in response to disconnection of database connection having a dependence relationship designated with the status change notification. Thereby, even before detecting the status change satisfying the acquisition request, the client can withdraw an acquisition request with a high degree of flexibility at various timings such as at a timing designated explicitly by an interruption request, at a timing when it reaches a predetermined timeout limit, and a timing when database connection with a dependence relationship designated beforehand is disconnected.","According to another aspect of an embodiment of the invention, the information management server may include: a creation unit that defines a status change notification including a status change serving as a trigger and a notification action and causes the status change notification to be stored persistently; a start unit that reads out the definition, sets the status change serving as the trigger as a target of detection by the change detection unit, and starts processing operation of the status change notification; and a deletion unit that erases the definition and deletes the status change notification.","In response to a start request for the status change notification defined beforehand that is received via the database connection, the start unit secures an identifier for identifying the client, a key indicating the existence or not of the status change rewritten by the change detection unit, and a storage region for storing a result of the notification action, so as to start the operation of the required status change notification processing. The status change in the database stated above may include insert, update or delete of elements with respect to a table of the database.","The following describes the present invention by way of embodiments, which are not intended to limit the present invention thereto. In the following embodiments, a database system (hereinafter referred to as a DB system) is exemplified as an example of the information processing system, including a database server (hereinafter referred to as a server) as an information management server that manages a database and a database client (hereinafter referred to as a client) connected with the server via a network.","Firstly, the following describes the hardware and software configuration of the server  making up the DB system of the present embodiment.  illustrates an embodiment of the hardware configuration of the server . The server  shown in  is roughly configured as a computer device  such as a personal computer, a work station, or a main frame. The computer device  illustrated in  includes: a central processing unit (CPU) ; a cache memory  having levels such as L1 and L2 enabling high-speed access to data used by the CPU ; and a system memory  made up of a solid-state memory element such as a RAM or a DRAM enabling the processing by the CPU .","The CPU , the cache memory  and the system memory  are connected with other devices and drivers such as a graphics driver  and a network interface card (NIC)  via a system bus . The graphics drive  is connected with an external display  via a bus, thus making it possible to display a processing result by the CPU  on a display screen. The NIC  allows the connection of the server  with a network using appropriate communication protocol such as TCP\/IP at a physical layer level and a data link layer level.","Connected further to the system bus  is an I\/O bus bridge . On the downstream side of the I\/O bus bridge , a hard disk  is connected via an I\/O bus  such as PCI by means of IDE, ATA, ATAPI, serial ATA, SCSI, USB or the like. The hard disk  provides a storage region for storing data of the database of the present embodiment. Connected further to the I\/O bus  is an input device  such as a keyboard and a pointing device like a mouse via a bus such as USB, and the input device  provides user interface. An operator may use the input device  or conduct remote access via the NIC  to instruct the computer device  to conduct operations such as a maintenance operation of the database and an operation of defining an event notification trigger described later.","As the CPU  of the computer device , any single core processor or multicore processor may be used, more specifically including a CISC or RISC chip such as Xeon\u00ae, Itanium\u00ae, POWER5\u2122, POWER6\u2122 or POWER PC\u00ae.","The server  may be controlled by an operating system (hereinafter referred to as OS) such as WINDOWS\u00ae 200X, UNIX\u00ae, z\/OS, or LINUX\u00ae, which implements a database management system (DBMS) that manages a database such as a relational database, an object relational database, a hierarchical database, a network database, or an XML (extensible Markup Language) database. The client also can be implemented with a hardware configuration similar to that illustrated in .","The following describes the functional configuration of the DB system of the present embodiment.  illustrates a functional block  of the DB system embodied on the server  and the client  of the present embodiment. The functional block  illustrated in  includes the functional configuration of the server  and the client . The server  and the client  communicate with each other via a network  such as a local area network (LAN) in accordance with communication protocol of Ethernet\u00ae or TCP\/IP.","The server  includes a database management system (hereinafter referred to as DBMS)  and a database storage unit . The following describes an example using a relational database for convenience in description. The database storage unit  includes the hard disk  illustrated in , which stores data in the format accessible by a computer. The DBMS  is an application for operating and managing a database, which is provided with a database language such as SQL, controls transaction processing with the client  in accordance with ACID characteristics, and provides the client  with access to data within the database storage unit .","The DBMS  of the present embodiment includes a communication service component  that controls communication with the client  and provides database connection, and an event notification trigger component group  that embodies an event notification trigger function of the present embodiment. The communication service component  is implemented as a communication unit of the present embodiment on the computer together with hardware resource such as the NIC  illustrated in . The event notification trigger function refers to a function of notifying the client  of an event in response to a database status change event serving as a trigger such as an operation of INSERT, UPDATE, or DELETE of data with respect to a table or the like on the database. In the DB system of the present embodiment, a plurality of event notification triggers can be registered, each including a status change event serving as a trigger and an action to be invoked in response thereto as a pair.","The server  further includes an event notification trigger definition registration unit  that stores data to define the registered event notification triggers so as to register the event notification triggers. The event notification trigger definition registration unit  includes a storage region provided by the hard disk  and the like, which stores the definition data so as to be accessible by each component of the event notification trigger component group  and is implemented on the computer as a registration unit of the present embodiment.","In order to enable remote access to the DBMS  of the server , the client  is equipped with a database connection API (hereinafter referred to as DB connection API)  configured as a common interface (Application Programming Interface; API) such as JDBC or ODBC (Open Database Connectivity) or other APIs specific to each DBMS, thus making it possible to access to the database. An application , which is executed on the client  and uses data on the database, accesses the database via the API. More specifically, the application  includes a function unit  that handles business logic and a user interface function unit . In the present embodiment, the function unit  and the user interface function unit  execute processing that requires notification on a database status change.","The application  uses the DB connection API  to access the server , thus establishing database connection with the DBMS  and issuing a statement written in a database language such as SQL via the database connection. Returning now to the description on the server , the DBMS  interprets the statement issued by the application , executes processing required using various components, and sends a response to the client  including a result of the processing.","More specifically, the above-stated event notification trigger component group  includes a trigger creation component  that creates an event notification trigger and a trigger deletion component  that deletes the created event notification trigger from the system. The event notification trigger component group  further includes a trigger start component  that starts an operation of the created event notification trigger and a trigger stop component  that stops the operation of the started event notification trigger.","The event notification trigger component group  further includes a trigger data acquisition component  and an event processing component . The trigger data acquisition component  receives an acquisition request for event notification received from the client  via the database connection, with respect to the event notification trigger during operation. When insert, update, or delete is conducted to data concerning any table of the database, the event processing component  receives notification of such, and judges whether or not the event is a status change event serving a trigger of the started event notification trigger. After the event processing component  detects the generation of a status change event as the trigger, the trigger data acquisition component  conducts event notification with respect to the client  via the database connection and returns the connection control to the client .","The event notification trigger component group  further can include a trigger interruption component . With respect to the event notification trigger to which an acquisition request has been already issued, the trigger interruption component  can interrupt the acquisition processing of the event notification in response to the interruption request from the client  even before the event processing component  detects the generation of the status change event, makes the trigger data acquisition component  execute an error response, and returns the database connection control to the client .","When the client  issues an acquisition request for event notification, the database connection used assumes a wait-state for response until a response to the issue is received. In the present embodiment, although described later in detail, the execution of acquisition processing of event notification can be cancelled at various timings, for example, acquisition processing can be interrupted upon receipt of a request from the client , and the database connection control can be returned to the client.","For instance, the above-stated event notification trigger component group  further can include a timer component (not illustrated in ). The timer component starts to operate in response to an acquisition request for event notification, and measures a time from the starting. Then, in response to the expiration of a predetermined time period, the timer component can cancel the acquisition processing of the event notification, make the trigger data acquisition component  execute an error response, and return the connection control to the client .","Alternatively, in response to a disconnection request for database connection having a dependence relationship with the event notification trigger designated beforehand, the above-stated communication service component  may disconnect the database connection corresponding to the disconnection request, while canceling the execution of acquisition processing of the event notification having the dependence relationship, make the trigger data acquisition component  execute an error response, and return the control of the database connection corresponding to the acquisition request to the client .","The respective functional units of the server  illustrated in  may be implemented on the server  by deploying a program on the system memory  of the server , executing the program by the CPU  to operate and control the respective hardware resource. The above-stated trigger creation component , trigger start component , trigger data acquisition component , trigger deletion component , trigger stop component , event processing component , trigger interruption component  and timer component are implemented on the computer as a creation unit, a start unit, a notification unit, a deletion unit, a stop unit, a change detection unit, an interruption unit, and a timer unit, respectively. Similarly, the respective functional units of the client  also may be implemented on the client  by deploying a program on the system memory of the client , executing the program by a CPU to operate and control the respective hardware resource.","It should be noted here that the present embodiment has been exemplified as the DB system having a two-layer client server structure, which does not preclude the use of a multi-layer client server structure such as a three-layer client server structure where the above-stated user interface function unit  that an end-user actually uses is implemented on still another personal component (not illustrated). The present embodiment has been exemplified so that the server function is implemented on a single server computer, which does not preclude the use of distributed database architecture where individual DBMS processes are allowed to cooperate on a cluster including a plurality of server computers connected via a network to virtually realize a single DBMS function.","The following is a more detailed description of the event notification trigger function of the present embodiment.","(A) Brief Description of Event Notification Trigger Function","In the DB system of the present embodiment, the event notification trigger function is provided as follows: (1) firstly, as advance preparation, an event notification trigger is created using the trigger creation component , and definition data thereof is registered in the event notification trigger definition registration unit . During actual operation, (2) an application  requiring event notification issues a start request command of a trigger, and in response to the command, the trigger start component  reads out the definition to start the operation of the event notification trigger. (3) Subsequently, the application  issues an acquisition request command of the event notification via the database connection, and after the generation of the event, the trigger data acquisition component  conducts event notification in response to the acquisition request command.","(4) When the event notification of the trigger becomes unnecessary during operation, the application  issues a stop request command of trigger, and in response to the command, the trigger stop component  stops the operation of the event notification trigger. When the defined event notification trigger itself becomes unnecessary, (5) the definition of the event notification trigger is erased from the event notification trigger definition registration unit  using the trigger deletion component  to delete the registration from the system. The following is more detailed description on the event notification trigger function for each component of the server .","(B) Trigger Creation Component",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3","FIG. 3"],"b":["60","300","300","300","300","50","300","60","60","300","58","300","300","300"],"i":["a ","b ","b ","b ","b "]},"An event notification trigger definition table  illustrated in  is stored in the event notification trigger definition registration unit , which includes a field for inputting a trigger designation, and a field for inputting contents thereof, thus registering an event notification trigger. In the example of , an entry is created using the CREATE CLIENT TRIGGER syntax in which the definition corresponding to the designation and the contents is input. The thus created event notification trigger is perpetually registered in the event notification trigger definition table  unless it is deleted by a deletion request, which will be referred to when the operation of the event notification trigger is started or when the action of the event notification is invoked.","(C) Trigger Start Component",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 4"],"b":["62","64","70","62","302","302","50","62","62","200","58","210"]},"The operation trigger registration table  illustrated in  includes a field , a field , a field , and a field , where the field is for inputting a client ID that identifies a client that issues a start request, the field is for inputting a designation of the started trigger, the field is for inputting a status value of a lock key and the field is for inputting a pointer to result output data  of the action. The result output data  is configured as a temporary table on the memory or the database, which is secured for storing a result output from the action invoked in response to event generation as a trigger. The above-stated lock key keeps a value corresponding to a lock state or an unlock state, where it is set as the lock state during standby before event generation, while being set as the unlock state in response to the generation of the corresponding status change event.","In the example of , the START CLIENT TRIGGER syntax causes the insertion of the client ID \u201c1\u201d and the trigger designation \u201cct1\u201d to an entry . In the field and the field of the newly inserted entry , a lock key with a \u201clock state\u201d set thereto as an initial value and a pointer to a null temporary table for keeping a trigger processing result are input, respectively. The thus created entry of the event notification trigger keeps information on the event notification trigger during operation in the operation trigger registration table  until the processing is stopped by a stop request, the connection with the client that issues the request is disconnected by a DISCONNECT request or the like, or the processing has been completed. It should be noted here that the present embodiment is configured so that the event notification trigger during operation is identified in accordance with the client ID or the trigger designation, and a common event notification trigger can be used for operation among a plurality of clients.","(D) Trigger Data Acquisition Component","The processing by the trigger data acquisition component  will be described below.  illustrates a pseudo statement instructing to acquire event notification of an event notification trigger having a trigger designation \u201cct1\u201d using a GET CLIENT TRIGGER syntax. The DBMS  receives the statement from the client  via the database connection, and invokes the trigger data acquisition component  to pass the processing thereto.","The trigger data acquisition component  monitors a lock key field in the corresponding entry in the operation trigger registration table , and waits for unlock. When it is detected that the lock key field is rewritten to be the unlock state by the event processing component  described later, the trigger data acquisition component  acquires the result output data  using the pointer of the filed , and returns the event notification including the result output data  in response to the above-stated statement to the client .  illustrates a response to the statement . After the event notification, the trigger data acquisition component  rewrites the lock key field in the corresponding entry to be a lock state again in preparation for the following processing, and erases the contents of the corresponding result output data .","(E) Event Processing Component","The following describes the processing by the event processing component . When insert, update, or delete of data has been conducted with respect to any table of the database, the event processing component  is notified of such. The event processing component  checks the event notification trigger definition table  as to whether or not the table subjected to the operation is used by the action as the trigger, and checks the operation trigger registration table  as to whether or not the corresponding trigger is started by one or more clients. If the definition of the corresponding trigger exists and if the trigger is started, then the action is executed, data obtained as a result of the execution is added to the result output data  managed by the field , which corresponds to all clients that start the trigger, and unlocks the lock key . Herein, the processing of detecting the generation of the status change event by the event processing component  itself can be conducted using mechanism similar to the conventional DBMS trigger function.","(F) Event Notification Processing","The following describes event notification processing implemented cooperative operation of the trigger start component , the trigger data acquisition component , and the event processing component . In response to a start request for the operation of the event notification trigger from the client , such as the statement  of , the trigger start component  inserts an entry to the operation trigger registration table . Thereby, the generation of the status change event corresponding to the trigger will be detected by the event processing component . Meanwhile, in response to an acquisition request of the event notification from the client  such as the statement of , the trigger data acquisition component  starts to monitor a lock key field in the corresponding entry of the operation trigger registration table  and assumes a wait-state for unlock.","When there is a request for the operation to a table such as a statement  of , the event processing component  (1) refers to the event notification trigger definition table  to confirm the definition of the trigger corresponding to the generated status change event, (2) further refers to the operation trigger registration table  to confirm that the trigger corresponding to the status change event is started and judges that the status change event corresponding to the trigger is generated, and (3) invokes the action corresponding to and defined in the contents , acquires a result output and inserts the result output to the result output data  if data of 1 record or more exists as the output. At this time, even when a plurality of clients start a common trigger, the event processing component  inserts the result output to the result output data  of all clients that issue a request by the execution of the action conducted once for each event. After data insertion, (4) the event processing component  rewrites the field in the corresponding entry of the operation trigger registration table  from a lock state to an unlock state.","The trigger data acquisition component  waiting for unlock (5) detects the rewriting of the field to be the unlock state, (6) acquires the corresponding result output data , and (7) conducts event notification including the result output data  to the client  that issues the acquisition request. Herein, since the event processing component  detects generation of a status change event concerning the event notification trigger from the beginning of the operation of the event notification trigger, the result output data  may be already inserted and rewritten as the unlock state prior to the acquisition request for the event notification. In this case, in response to the acquisition request for the event notification, the event notification including the result output data  will be immediately conducted.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 6","FIG. 6"],"b":["101","103","201","210"]},"In the example of , at Step S, the client  issues a trigger start request using a START CLIENT TRIGGER statement via database connection established beforehand. At Step S, in response to the trigger start request, the trigger start component  reads out definition data of the designated event notification trigger from the table  adds an entry to the operation trigger registration table , and at Step S returns a response to the start request to the client  via the same database connection. As a result of the processing from Step S to Step S, the operation of the designated event notification trigger is started, so that the status change event corresponding to the started trigger becomes a target of the detection by the event processing component , thus assuming a status capable of receiving an acquisition request for the event notification.","The following describes the event notification processing in response to the acquisition request for the event notification. In the example of , at Step S, the client  issues an acquisition request for event notification using a GET CLIENT TRIGGER syntax via the database connection established beforehand. At Step S, the trigger data acquisition component  starts to monitor the lock key in the corresponding entry in response to the acquisition request, and waits for unlock. The event processing component  detects event generation at step S, and invokes an action and inserts a result of execution to the result output data  at step S. At Step S, the event processing component  rewrites the field in the corresponding entry of the operation trigger registration table  from a lock state to an unlock state.","At Step S as the timing after event generation, the trigger data acquisition component  monitors the lock key, and at Step S detects unlock. The trigger data acquisition component  acquires the result output data  at Step S, and returns event notification including the acquired result output data  via the same database connection in response to the acquisition request to the client at Step S. At Step S, in order to handle the following acquisition request for event notification, the trigger data acquisition component  clears the contents of the result output data  and rewrites the lock key field in the corresponding entry of the operation trigger registration table  to be a lock state again.","(G) Trigger Stop Component",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 5","FIG. 5","FIG. 5"],"b":["66","68","68","308","308"]},"Upon receipt of the statement  from the client , the DBMS  invokes the trigger stop component  to pass the processing thereto. The trigger stop component  searches the corresponding entry in the operation trigger registration table  based on the client ID and the trigger designation, and deletes the entry and the corresponding result output data  to stop the operation of the designated event notification trigger.","The processing from Step S to Step S illustrated in  corresponds to the stop processing of the event notification trigger. In the example of , at Step S, the client  issues a trigger stop request using a STOP CLIENT TRIGGER statement via database connection established beforehand. At Step S, in response to the trigger stop request, the trigger stop component  deletes entry of the designated event notification trigger from the operation trigger registration table , and at Step S returns a response to the stop request to the client  via the same database connection. As a result of the processing from Step S to Step S, resource secured by the event notification trigger during operation is released. If event notification becomes necessary again, the client  will issue a start request for trigger again.","(H) Trigger Deletion Component","The following describes the processing by the trigger deletion component .  illustrates a pseudo statement  instructing to delete the operation of an event notification trigger having a designation of \u201cct1\u201d using a DROP CLIENT TRIGGER syntax. Upon receipt of the statement  from the client , the DBMS  interprets the statement  and invokes the trigger deletion component  to pass the processing thereto. The trigger deletion component  deletes the corresponding entry from the table  of the event notification trigger definition registration unit . The deletion processing by the trigger deletion component  causes the perpetuated event notification trigger to be deleted and the secured resource to be released.","(I) Cancellation of Event Notification Processing by Interruption Request","As described above, when the client  issues an acquisition request for event notification, the database connection used assumes a wait-state. In the present embodiment, at various timings in addition to the timing when the event notification is conducted in response to event generation and the connection control is returned, execution of acquisition processing can be cancelled and the connection control can be returned to the client .  schematically illustrates the processing executed by the trigger data acquisition component , the trigger interruption component , and the timer component . Firstly, the interruption operation of event notification processing by the trigger interruption component  will be described below.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 7","FIG. 7"],"b":["312","212","212","212","212","212","212","212","212","220","212","62","210","72","74"],"i":["a ","a ","b ","c ","d ","e ","f "]},"The DBMS  receives the statement from the client  via database connection, and invokes the trigger data acquisition component  to pass the processing thereto. In response to the acquisition request for event notification like the statement of , the trigger data acquisition component  assumes a wait-state for unlock as stated above.","During the wait-state of the database connection used for the acquisition request for event notification, the client  can issue a statement  illustrated in  via different database connection. Upon receipt of the statement , the DBMS  invokes the trigger interruption component  to pass the processing thereto. Note here that the statement  of  is a pseudo statement instructing to interrupt the event notification acquisition from the designated client (client ID), which is written using a BREAK CLIENT TRIGGER syntax.","Upon receipt of the processing, the trigger interruption component  (1-1) receives the interruption instruction, (1-2) sets \u201cerror\u201d in the status field and \u201creason\u201d in the reason field (e.g., \u201cinterruption by another client (ID=xx)\u201d). After they have been set, (1-3) the trigger interruption component  rewrites the field in the corresponding entry of the operation trigger registration table  from a lock state to an unlock state.","The trigger data acquisition component  waiting for unlock (4) detects the rewriting of the field to be the unlock state, (5) acquires the values of the status field and the reason field , and (6) if the status field shows \u201cerror\u201d, conducts error notification including the reason input to the reason field to the client  that issues the acquisition request.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 8","FIG. 8","FIG. 6","FIG. 8"],"b":["101","103","401","412"]},"In the example of , at Step S, the client  issues an acquisition request for event notification using a statement in a GET CLIENT TRIGGER syntax via first database connection established beforehand. At Step S, in response to the acquisition request, the trigger data acquisition component  starts to monitor the lock key in the corresponding entry and waits for unlock.","In the example of , at Step S, the client  issues an interruption request for event notification using a statement in a BREAK CLIENT TRIGGER syntax via second database connection established additionally. At Step S, the trigger interruption component  receives the interruption instruction, and at Step  conducts error processing by setting predetermined values in the status field and the reason field . At Step , the trigger interruption component  rewrites the field in the corresponding entry of the extended operation trigger registration table  to be an unlock state, and at Step S returns a response to the statement in the BREAK CLIENT TRIGGER syntax.","At Step S, the trigger data acquisition component  monitors the lock key, and at Step S detects unlock. At Step S, the trigger data acquisition component  refers to the status field in the corresponding entry. When it is detected that the value shows \u201cerror\u201d, then the trigger data acquisition component  acquires error information in the field . At Step S the trigger data acquisition component  returns error notification as a response to the acquisition request via the first database connection used for the acquisition request.","At Step S, in order to handle the following acquisition request for event notification, the trigger data acquisition component  clears the status field and the reason field , and rewrites the lock key field in the corresponding entry of the operation trigger registration table  to be a lock state again.","(J) Cancellation of Event Notification Processing by Timer","Referring again to , the interruption processing of the event notification processing by the timer component  will be described below.  illustrates a pseudo statement  setting a time-out time for the acquisition processing of the event notification of the event notification trigger using a SET CLIENT TRIGGER TIMEOUT syntax.  further illustrates a timer setting table  referred to by the timer component  when the timer is operated. The timer setting table  includes a field for inputting a client ID, and a field for inputting a timer value of the event notification in association with the client. Upon receipt of the statement  from the client , the DBMS  rewrites a value of the entry corresponding to the client issuing the request in the timer setting table  of the event notification trigger. Herein, the field includes a default value set thereto, which can be controlled for change when the client designates explicitly using a SET CLIENT TRIGGER TIMEOUT syntax.","Further, upon receipt of the statement from the client  via database connection, the DBMS  invokes the trigger data acquisition component  and passes the processing thereto. The trigger data acquisition component  assumes a wait-state for unlock in response to the acquisition request for event notification from the client . In response to the acquisition request for event notification from the client , the timer component  refers to the timer setting table  to acquire the timer value in the entry corresponding to the client  issuing the request, and makes the timer operate while setting the acquired timer value as expiration limit.","While the database connection used for the acquisition request for the event notification assumes a wait-state, the timer component  keeps time until the timer is expired or interrupted, or an event is generated. If the timer is expired before the event processing component  detects the generation of a status change event and before the trigger interruption component  receives the above-stated interruption request, the timer component  (2-1) detects the expiration of the timer, and (2-2) sets \u201cerror\u201d in the status field and the reason (e.g., \u201ctimer (10 sec. expiration)\u201d) in the reason field of the operation trigger registration table . After they have been set, (2-3) the timer component  rewrites the field in the corresponding entry of the operation trigger registration table  from a lock state to an unlock state.","The trigger data acquisition component  waiting for unlock (4) detects the rewriting to be the unlock state, (5) acquires the values of the status field and the reason field , (6) if the status field shows \u201cerror\u201d, conducts error notification as a response including the reason input to the reason field to the client  that issues the acquisition request, and then the timer component  stops. When the event processing component  detects the generation of a status change event, or when the trigger interruption component  receives an interruption request, the above-stated processing corresponding to each case is conducted, thus making the timer component  stop.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 9","FIG. 9","FIG. 6","FIG. 9"],"b":["101","103","501","511"]},"In the example of , at Step S, the client  issues an acquisition request for event notification using a statement in a GET CLIENT TRIGGER syntax. At Step S, the timer component  makes the timer operate in response to the acquisition request. At Step S, the trigger data acquisition component  starts to monitor the lock key in response to the acquisition request and waits for unlock.","In the example of , the timer component  detects the timer expiration at Step S, and sets predetermined values in the status field and the reason field of the operation trigger registration table  to conduct error processing at Step S. At Step S, the timer component  rewrites the field in the corresponding entry to be an unlock state. At Step S, the trigger data acquisition component  monitors the lock key field , and at Step S detects unlock. At Step S, the trigger data acquisition component  detects that the status field in the corresponding entry shows \u201cerror\u201d, and acquires error information in the field . At Step S, the trigger data acquisition component  returns, to the client , error notification as a response to the acquisition request via the database connection used for the acquisition request.","At Step S, in order to handle the following acquisition request for event notification, the trigger data acquisition component  clears the contents of the status field and the reason field and rewrites the lock key field in the corresponding entry of the operation trigger registration table  to be a lock state again.","(K) Cancellation of Event Notification Processing Depending on Disconnection of Database Connection","Referring now to , the interruption operation of the event notification processing by the communication service component  will be described below.  schematically illustrates the processing executed by the communication service component  and the trigger data acquisition component .  illustrates a pseudo statement  instructing to start the operation of the event notification of the event notification trigger having a designation \u201cct1\u201d, which depends on designated database connection, using a START CLIENT TRIGGER syntax.","Upon receipt of the statement  from the client  via the database connection, the DBMS  invokes the trigger start component  to pass the processing thereto. The trigger start component  reads out the corresponding contents in the event notification trigger definition table , and adds an entry in an extended operation trigger registration table  to prepare a data region for the processing in response to an acquisition request for event notification.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 10","FIG. 8","FIG. 10"],"b":["214","214","214","214","214","214","214","214","214","214","62","214"],"i":["a","c","d","e","f","g ","b ","h "]},{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 10","FIG. 10","FIG. 10"],"b":["318","1","2","318","90","50","64","90","318","64"],"i":["a ","a ","a "]},"During the wait-state for response of the database connection used for the acquisition request for event notification, the client  further can issue a statement  instructing to disconnect the database connection using a DISCONNECT syntax illustrated in  via different database connection (client ID: 1). Upon receipt of the statement , the DBMS  invokes the communication service component  to pass the processing thereto.","Upon receipt of the processing, the communication service component  refers to the operation trigger registration table  to detect the event notification trigger having a dependence relationship with the database connection to which the disconnection is requested, and (1) detects the disconnection of the dependency connection. The communication service component  further (2) sets \u201cerror\u201d in the status field and \u201creason\u201d in the reason field (e.g., \u201cdisconnection with the dependence client (ID=1)\u201d). After they have been set, (3) the communication service component  rewrites the field in the corresponding entry of the operation trigger registration table  from a lock state to an unlock state.","The trigger data acquisition component  waiting for unlock (4) detects the rewriting to be the unlock state, (5) acquires the values of the status field and the reason field , and (6) if the status field shows \u201cerror\u201d, conducts error notification including the reason input to the reason field to the client  that issues the acquisition request.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 11","FIG. 11"],"b":["601","603","702","712"]},"In the example of , at Step S, the client  issues a trigger start request depending on the database connection (client ID=1) using a START CLIENT TRIGGER statement via database connection established beforehand (client ID=2). At Step S, in response to the trigger start request, the trigger start component  reads out definition data from the table , adds an entry including the ID for the dependence connection to the extended operation trigger registration table , and at Step S returns a response to the start request to the client  via the database connection (client ID=2). Then, the status change event corresponding to the started trigger becomes a target of the detection by the event processing component .","At Step S, the client  issues an acquisition request for event notification using a statement in a GET CLIENT TRIGGER syntax via the database connection (client ID=2). At Step S, the trigger data acquisition component  starts to monitor the lock key in the corresponding entry in response to the acquisition request, and waits for unlock.","At Step S, the client  issues a disconnection request for database connection using a statement in a DISCONNECT syntax via the database connection (client ID=1). The communication service component  detects disconnection of the dependence connection at Step S, conducts error processing by setting predetermined values in the status field and the reason field at Step S. At Step , the communication service component  rewrites the field in the corresponding entry of the operation trigger registration table  to be an unlock state, and at Step S returns a response to the statement in the DISCONNECT syntax, while conducting disconnection processing.","Since the processing from Step S to Step S is similar to the processing from S to S illustrated in , the detailed description thereof has been omitted. The trigger data acquisition component  detects unlock at Step S, acquires the error information at Step S, and returns error notification to the client as a response to the acquisition request via the database connection used for the acquisition request at Step S. At Step S, the trigger data acquisition component  clears the error information in the operation trigger registration table  and rewrites the lock key field to be a lock state again.","As described above, in an embodiment of the present invention, when event notification of a database status change is required, the client  issues a start request for operation of event notification trigger and subsequently issues an acquisition request for the event notification. Thereby, the client  can receive the event notification in response to the generation of the status change event as requested using the database connection used for the acquisition request. At this time, there is no need for the server  to open a port for the event notification separately, there is no need to process the polling from the client , and there is no need of close cooperation among applications on the client  side. Thus, mechanism can be realized, capable of notifying of a client requiring the notification of a status change event of database, while keeping a low workload, high security, and high application independency.","According to the server  of the present embodiment, the trigger interruption component , the timer component , and the communication service component  function to end in cancellation of the acquisition processing of an event notification in response to the generation of an event serving a trigger of canceling the execution of the acquisition processing of the status change event notification, such as reception of an interruption request, timer expiration, and disconnection with dependence connection. Thus, even before detecting the status change satisfying acquisition request conditions, the client  can withdraw an acquisition request with a high degree of flexibility at various timings such as at a timing designated explicitly by an interruption request, at a timing when it reaches a predetermined timeout limit, and a timing when database connection with a dependence relationship designated beforehand is disconnected, thus making it possible to return the database connection control to the client .","As described above, an embodiment of the invention can provide an information management server that implements event notification mechanism for notifying, in response to a database status change such as insert, update or deletion of data, a client of such status change while keeping a low workload, high security, and high application independency, and can provide an information processing system including such an information management server, and a communication method and a program that the information management server executes.","To ensure the ease in understanding of the embodiments of the invention, each functional unit and the processing by each functional unit have been described above. However, instead of the execution of certain processing by the above-stated certain functional unit, a function for executing the above-stated processing may be assigned to any functional unit with consideration given to the processing efficiency and the implementation efficiency for programming.","The above-described functions may be embodied by a program that is executable by an apparatus and written in an object-oriented programming language such as, but not limited to, C++, Java\u00ae, Java\u00aeBeans, Java\u00aeApplet, Java\u00aeScript, Perl, or Ruby, or a database language such as SQL, which may be distributed or be transmitted for distribution by storing it in a device readable recording medium.","While the present invention has been described by way of specific embodiments, the present invention is not limited to the embodiments, and another embodiment, addition, change and deletion are all possible."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
