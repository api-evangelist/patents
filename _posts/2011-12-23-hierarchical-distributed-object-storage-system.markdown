---
title: Hierarchical, distributed object storage system
abstract: The invention concerns a distributed object storage system () that comprises a spreading module () which makes a selection of a number of storage elements () being larger or equal to a desired spreading width by means of a spreading policy that comprises rules for selecting storage elements () in function of a first hierarchy level identifier () and/or a second hierarchy level identifier ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08433849&OS=08433849&RS=08433849
owner: Amplidata NV
number: 08433849
owner_city: Lochristi
owner_country: BE
publication_date: 20111223
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENT(S)"],"p":["The benefit of provisional patent application No. 61\/427,339 filed Dec. 27, 2010 is claimed.","The present invention generally relates a distributed data storage system. Typically, such distributed storage systems are targeted at storing large amounts of data, such as objects or files in a distributed and fault tolerant manner with a predetermined level of redundancy. The present invention relates more particularly to a distributed object storage system.","The advantages of object storage systems, which store data objects referenced by an object identifier versus file systems, such as for example US2002\/0078244, which store files referenced by an inode or block based systems which store data blocks referenced by a block address in terms of scalability and flexibility are well known. Object storage systems in this way are able to surpass the maximum limits for storage capacity of file systems in a flexible way such that for example storage capacity can be added or removed in function of the needs, without degrading its performance as the system grows. This makes such object storage systems excellent candidates for large scale storage systems.","Such large scale storage systems are required to distribute the stored data objects in the object storage system over multiple storage elements, such as for example hard disks, or multiple components such as storage nodes comprising a plurality of such storage elements. However as the number of storage elements in such a distributed object storage system increase, equally the probability of failure of one or more of these storage elements increases. To cope therewith it is required to introduce a level of redundancy into the distributed object storage system. This means that the distributed object storage system must be able to cope with a failure of one or more storage elements without data loss. In its simplest form redundancy is achieved by replication, this means storing multiple copies of a data object on multiple storage elements of the distributed object storage system. In this way when one of the storage elements storing a copy of the data object fails, this data object can still be recovered from another storage element holding a copy. Several schemes for replication are known in the art. In general replication is costly as the storage capacity is concerned. This means that in order to survive two concurrent failures of a storage element of a distributed object storage system, at least two replica copies for each data object are required, which results in storage capacity overhead of 200%, which means that for storing 1 GB of data objects a storage capacity of 3 GB is required. Another well-known scheme is referred to as RAID systems of which some implementations are more efficient than replication as storage capacity overhead is concerned. However, often RAID systems require a form of synchronisation of the different storage elements and require them to be of the same type and in the case of drive failure require immediate replacement, followed by a costly and time consuming rebuild process. Therefor known systems based on replication or known RAID systems are generally not configured to survive more than two concurrent storage element failures. Therefor it has been proposed to use distributed object storage systems that are based on erasure encoding, such as for example described in WO2009135630 or US2007\/0136525. Such a distributed object storage system stores the data object in encoded sub blocks that are spread amongst the storage elements in such a way that for example a concurrent failure of six storage elements out of minimum of sixteen storage elements can be tolerated with a corresponding storage overhead of 60%, that means that 1 GB of data objects only require a storage capacity of 1.6 GB.","Current erasure encoding based distributed object storage system for large scale data storage still require extensive static configuration activities when for example certain storage elements need to be replaced, powered down or added.","Therefor there still exists a need for a simple configuration facility that is able to cope with the dynamic nature of large scale distributed object storage systems.","According to a first aspect of the invention, there is provided a distributed object storage system comprising:\n\n","Characterized in that","each of said plurality of redundant storage elements comprises a unique storage element identifier, said storage element identifier comprising:\n\n","said spreading module making a selection of said number of said storage elements being larger or equal to said desired spreading width by means of a spreading policy that comprises rules for selecting storage elements in function of said first hierarchy level identifier and\/or said second hierarchy level identifier.","This enables a distributed object storage system with a hierarchical configuration that can be easily implemented in a dynamic system in which on a continuous basis storage elements are added, replaced or removed. It does this in a way that requires less configuration then any prior art system while not compromising efficiency in implementing a redundancy policy and allowing for augmented data security with a spreading policy. The only configuration that is required is providing the storage element with a unique storage element identifier that provides it with information concerning its position in the hierarchical configuration.","Furthermore the dependent claims disclose various performance enhancements made possible by the hierarchical distributed object storage system according to the invention.",{"@attributes":{"id":"p-0025","num":"0038"},"figref":["FIG. 1","FIG. 1"],"b":["1","10","1","10","1","20","30","1","30","40","20","30","10"]},"According to alternative embodiments of the distributed object storage system could comprise any other suitable number of storage nodes  and for example two three or more controller nodes  also connected to these storage nodes . These controller nodes  and storage nodes  can be built as general purpose computers, however more frequently they are physically adapted for arrangement in large data centres, where they are arranged in modular racks  comprising standard dimensions. Particular controller nodes  and storage nodes , such as for example the Amplistor AS20 storage node as manufactured by Amplidata, are dimensioned to take up a single unit of such rack , which is generally referred to as 1 U.","As shown in  several storage nodes  can be grouped together, for example because they are housed in a single rack . For example storage nodes .-.; .-.; . . . ; and .-. each are respectively grouped into racks ., ., . . . .. Controller node  could for example be located in rack .. These racks are not required to be located at the same location, they are often geographically dispersed across different data centres, such as for example rack .-. can be located at a data centre in Europe, .-. at a data centre in the USA and .-. at a data centre in China.",{"@attributes":{"id":"p-0028","num":"0041"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":["30","30","1","310","320","330","340","350","360","370","300","1","300","10","310","30","1","320","330","320","320","340","30","1","350","360","30","1","30","20","370","310","300","300","30","1","300","1","300","10","30","1","1","30","2","30","40","30","1","1"]},"Taking into account  the distributed object storage system  comprises a plurality of redundant storage elements . The storage nodes  each comprise a share of these storage elements . As shown in  storage node . comprises ten storage elements .-.. Other storage nodes  could comprise a similar amount of storage elements, but this is however not essential. Storage node . could for example comprise eight storage elements .-.. As will be explained in further detail below with respect to , the distributed object storages system  is operable to store and retrieve a data object  comprising data , for example 64 MB of binary data and a data object identifier  for addressing this data object , for example a universally unique identifier such as a globally unique identifier (GUID). Storing the data offered for storage by the application  in the form of a data object, also referred to as object storage, has specific advantages over other storage schemes such as conventional block based storage or conventional file based storage, such as scalability and flexibility, which are of particular importance in a distributed object storage system  that is directed to large scale redundant storage applications, sometimes also referred to as cloud storage.","The storage elements  are redundant and operate independently of one another. This means that if one particular storage element  fails its function can easily be taken on by another storage element  in the distributed storage system. However as will be explained in more detail further below, there is no need for the storage elements  to work in synchronism, as is for example the case in many well-known RAID configurations, which sometimes even require disc spindle rotation to be synchronised. Furthermore the independent and redundant operation of the storage elements  allows to use any suitable mix of types storage elements  to be used in a particular distributed object storage system . It is possible to use for example storage elements with differing storage capacity, storage elements of differing manufacturers, using different hardware technology such as for example conventional hard disks and solid state storage elements, using different storage interfaces such as for example different revisions of BATA, PATA and so on. All this results in specific advantages for scalability and flexibility of the distributed object storage system  as it allows to add or remove storage elements  without imposing specific requirements to their design in correlation to other storage elements  already in use in that distributed object storage system .",{"@attributes":{"id":"p-0031","num":"0044"},"figref":"FIG. 3","b":["20","20","210","220","230","240","250","210","20","220","230","220","320","240","20","250","260","20","30","20"]},"According to an alternative embodiment the controller node  could have an identical design as a storage node , or according to still a further alternative embodiment one of the storage nodes  of the distributed object storage system could perform both the function of a controller node  and a storage node . According to still a further embodiment the device on which the application  runs is a controller node .","As schematically shown in , controller node  comprises four modules: an encoding module ; a spreading module ; a clustering module ; and a decoding module . These modules , , ,  can be implemented as programming instructions stored in local memory  of the controller node  for execution by its processor .","The functioning of these modules , , ,  will now be explained to . The distributed object storage system  stores a data object  offered by the application  in function of a reliability policy which guarantees a level of redundancy. That means that the distributed object storage system  must for example guarantee that it will be able to correctly retrieve  even if a number of storage elements  would be unavailable, for example because they are damaged or inaccessible. Such a reliability policy could for example require the distributed object storage system  to be able to retrieve the data object  in case of six concurrent failures of the storage elements  it comprises. In large scale data storage massive amounts of data are stored on storage elements  that are individually unreliable, as such redundancy must be introduced into the storage system to improve reliability. However the most commonly used form of redundancy, straightforward replication of the data on multiple storage elements  is only able to achieve acceptable levels of reliability at the cost of unacceptable levels of overhead. For example, in order to achieve sufficient redundancy to cope with six concurrent failures of storage elements , data objects  would need to be replicated six times and stored on redundant storage elements . This means that next to the master copy of a data object  stored on one storage element , six replica's must be stored on six other storage elements. As such storing 1 GB of data objects in this way would result in the need of 7 GB of storage capacity in a distributed object storage system, this means an increase in the storage cost by a factor of seven or an additional storage overhead of 600%, Therefor the distributed object storage system  according to the invention makes use of erasure coding techniques in order to achieve the requirements of the reliability policy with considerably less overhead. As will be explained in further detail below when using an erasure encoding with a rate of encoding r=10\/16 six concurrent failures of storage element  can be tolerated, which only require a storage overhead of 60% or a storage cost by a factor of 1.6. This means that storing 1 GB of data objects in this way only results in the need of 1.6 GB of storage capacity in the distributed object storage system . Some erasure encoding techniques make use of Reed-Solomon codes, but also fountain codes or rateless erasure codes such as online codes, LDPC codes, raptor codes and numerous other coding schemes are available.",{"@attributes":{"id":"p-0035","num":"0048"},"figref":"FIG. 5","b":["1","300","500","1","10","500","510","520","500","400","20","400","500","600","510","300","600","500","300","600","500","400","600","1","600","12800","600","600","1","500","600","1","600","1","1","500","600","400","400","500","600","1","600","12800","1","12800","600","600","1","600","12800","500","600","600","1","600","4000","600","8001","600","12000","1","500"]},"Subsequently, as shown in , the spreading module  will store the predetermined number x*n=800*16=12800 of encoded redundant sub blocks .-. on a number of storage elements  which corresponds to said desired spreading width n=16, such as for example storage elements .-.. The spreading module  will store on each of these storage elements .-. said predetermined multiple x=800 of these sub blocks , As shown in  sub blocks .-. are stored on storage element ., the next x=800 of these sub blocks are stored on storage element . and so on until the last x=800 of these sub blocks - are stored on storage element .. As shown in  storage elements .-. are arranged in storage node . and storage elements .-. are arranged in storage node ..","According to an alternative embodiment the sub blocks could be spread by the spreading module  on a number of storage elements  which is larger than said desired spreading width n=16, for example n+1=16+1=17 storage elements . This could be implemented by for example storing sub blocks .-. on storage element . and storing sub blocks .- on storage element .. It is clear that this would still allow for the storage system  to cope with f=6 concurrent failures of storage elements . Alternative methods for determining the share of sub blocks to be stored on specific storage elements  are well known to the person skilled in the art and are for example described in WO2009135630.","It is clear that according to alternative embodiments of the invention other values could have been chosen for the parameters x, f, k, n=k+f and r=k\/n mentioned in embodiment above, such as for example x=400, f=4, k=12; n=k+f=12+4=16 and r=12\/16; or any other possible combination that conforms to a desired reliability policy for redundancy and concurrent failure tolerance of storage elements  of the distributed object storage system .","According to still a further alternative there could be provided a safety margin to the number of concurrent failures f that a distributed object storage system  needs to be able to cope with. In such an embodiment some of the efficiency is traded in for some additional redundancy over what is theoretically required. This preventively increases the tolerance for failures and the time window that is available for a repair activity. However according to a preferred embodiment this safety margin will be rather limited such that it only accounts for an increase in sub blocks that must be generated and stored of for example approximately 10% to 30%, such as for example 20%.",{"@attributes":{"id":"p-0040","num":"0053"},"figref":["FIG. 6","FIG. 5","FIG. 6"],"b":["1","300","500","1","10","500","510","520","20","600","600","1","600","12800","300","1","300","16","420","600","300","1","300","16","20","30","2","600","1","600","8000","600","1","600","8000","430","500","10","600","500","430","500"]},"As shown in the embodiment according to the invention in  the storage nodes  of the distributed object storage system as shown in  are arranged in a specific hierarchical configuration. The hierarchical configuration in this embodiment aligns with the physical allocation of the storage nodes . In this embodiment there are provided two distinct data centres . and . each housing five racks .-. and .-. respectively. As explained above these racks  each house a plurality of storage nodes , which comprise themselves a plurality of storage elements . In the embodiment of  in this way the distributed object storage system  comprises 320 storage elements .-.. Some of the storage nodes  comprise ten storage elements , such as for example storage node . comprising storage elements .-., or storage node . comprising storage elements .-.. Other storage nodes comprise only six storage elements, such as for example storage node . comprising storage elements .-., or storage node . comprising storage elements .-.. In this way there are arranged thirty two storage elements .-. across four storage nodes .-. in rack . of data centre .. For the sake of simplicity the other four racks .-. of data centre . and the five racks .-. of data centre . have a similar configuration as their storage nodes  are concerned. Rack . additionally comprises a controller node  that is connected to all storage nodes  of the distributed object storage system  as explained above. Data centre . and data centre . could be arranged at distinct geographical locations. They could for example be located in different cities, different countries or different continents.","The desired reliability policy for redundancy and concurrent failure tolerance of storage elements  of the distributed object storage system  according to the invention can be supplemented with a spreading policy that comprises rules for selecting storage elements  in function of their respective hierarchical configuration, This means that in addition to the parameters x, f, k, n=k+f and r=k\/n, which according to the embodiment of  were x=800, f=6, k=10, n=k+f=16 and r=k\/n=10\/16, additional parameters are provided codifying further redundancy and failure tolerance on a higher hierarchical level than the storage elements . Such an additional parameter could be for example the number of concurrent failures of storage nodes  that the distributed object storage system  must be able to cope with, this parameter we will refer to as h. Another parameter could be for example the number of concurrent failures of racks  that the distributed object storage system must be able to cope with, this parameter we will refer to as h. According to an embodiment of the invention these additional parameters of the reliability policy that determine the supplemental spreading policy could for example be h=2 and h=1; which means that it is required for the distributed object storage system  to be able to cope with a concurrent failure of two storage nodes  and a failure of one entire rack .","If the spreading module  would apply the spreading policy as described above for the embodiment of , then all encoded sub blocks  of the data object  would have been stored on storage elements .-. which are arranged in storage nodes . and . of rack ., this would not fulfill the requirements of the supplemental spreading policy mentioned above, because when for example storage nodes . and . would concurrently fail, or when the entire rack . would become unavailable, there would not be enough sub blocks  retrievable in order to allow for decoding the stored data object  during a subsequent retrieval operation.","Therefor the spreading module  of the distributed object storage system  according to the invention must take into account the parameters of the supplemental spreading policy for selecting suitable storage elements  for spreading the sub blocks  of a data object  during a storage operation. In order to accomplish this the spreading module  must be able to identify the respective hierarchical configuration of the storage elements  of the distributed object storage system .  shows a schematic representation of the hierarchical configuration of the embodiment of the distributed object storage system  shown in . As shown in  the different levels of the hierarchical configuration of the storage elements  of the distributed object storage system  form a tree structure. At the first level of the hierarchy ., the storage elements  are grouped according to their respective storage nodes . At the second level of the hierarchy . these storage nodes  are once again grouped according to their respective racks . At the third level . of the hierarchy these racks  are grouped according to their corresponding data centres .","Each of the storage elements  comprises a corresponding unique storage element identifier . As can be seen in  the unique storage element identifier  of storage element . is [1,1,1,1], that of storage element . is [1,1,1,2], that of storage element . is [1,1,2,2], that of storage element . is [2,5,4,1], etc. It is clear that in this embodiment the unique storage element identifier  comprises several identifiers that identify the corresponding hierarchical configuration of each specific storage element . As represented in  and in more detail in , the unique storage element identifier  comprises an array of four numerals. The left most or first numeral in the array provides a third hierarchy level identifier ., the second numeral provides a second hierarchy level identifier ., the third numeral provides a first hierarchy level identifier . and the fourth and right most numeral provides an additional identifier such that the storage element identifier  as a whole for each of the storage elements  is unique. In this embodiment this means that each storage element identifier  has a unique sequence of these four numerals.","It is clear that, according to the embodiment of the distributed object storage system  as shown in ,  and , that the first hierarchy level identifier . provides an identifier for the storage node  comprising the specific storage element  that is identified by this unique storage element identifier . For example it is clear from the above explanation that storage element . identified by the unique storage element identifier [2,1,2,6] as shown in  and that this storage element identifier immediately also identifies its specific position in the hierarchical configuration. The right most numeral \u201c2\u201d shows that this storage element . is located in the second data centre . of the distributed object storage system, the second number \u201c1\u201d identifies the first group of storage nodes arranged in rack ., the third numeral \u201c2\u201d identifies the fourth storage node . of this group of storage nodes  and the last numeral identifies the tenth storage element . of this storage node ..","It is also clear that instead of the sequence of integers used in the embodiment of  alternative selections of numerals or other suitable identifiers such as suitable identifiers that can be coded into a binary form, such as alphanumerical characters, hexadecimal numbers, binary codes, . . . .","According to a further alternative embodiment the hierarchical part of the unique storage element identifier  according to the invention could be limited to a first level hierarchical identifier . identifying the storage element  and a second level hierarchical identifier which identifies a group of storage elements , for example a group storage elements  arranged in the same data centre . According to this embodiment whether the storage elements are for example grouped in a same rack is not taken into account in the hierarchical configuration. Such an embodiment in which the hierarchical part of the unique storage element identifier  is limited to the first and second level hierarchical identifiers, is for example shown in . It is further not required for the hierarchic configuration to have a link to physical structure such as a rack  or a data centre , it could also be determined on the basis of a specific grouping of storage elements  based on for example an arbitrary selection of storage nodes .","According to still a further alternative embodiment the hierarchical part of the unique storage element identifier according to the invention could be the hierarchical part of the unique storage element identifier  could comprise still a fourth level hierarchical identifier ., as for example shown in , that for example identifies a group of data centres  that are located in the same country or on the same continent. It is clear that still further levels of hierarchical identifiers could be comprised in the unique storage element identifier.","The distributed object storage system  according to the invention is configured to take into account the hierarchical configuration when the spreading module  is making a selection of storage elements . As explained above the spreading module will during a storage operation select a number of storage elements  being equal to said desired spreading width n=16 by means of a reliability policy supplemented by a spreading policy that comprises rules for selecting storage elements  in function of their hierarchical configuration as identified by their storage element identifier . Therefor in the example described above in which the parameter for concurrent failures of storage nodes  was h=2 and the parameter for concurrent failures of racks  was h=1, the spreading module  will take into account this supplemental spreading policy so that the sub blocks  to be stored will be suitably spread. In the context of the example described above with a reliability policy where n=16 and f=6 this means that the spreading module will select  storage elements of which only a maximum of f\/h=6\/1=6 storage elements  are arranged in the same rack  and that only f\/h=6\/2=3 storage elements are arranged in the same storage node . The spreading module  accomplishes this by determining during the selection of suitable storage elements  to which storage node  and rack  they belong by analysing respectively the first hierarchy level identifier . and the second hierarchy level identifier . of their unique storage element identifier . As soon as the spreading module  has for example selected 3 storage elements  of which it has detected that they belong to the same storage node by analysing their hierarchical configuration, it will no longer add candidate storage elements  that belong to that specific storage node , but will continue selecting other storage elements  that belong to another storage node while continuously checking that not more than 3 storage elements  of the same storage node  are selected. This means that, in the embodiment according to , when comparing the storage elements identifiers  of the candidate storage elements  for selection by the spreading module only a maximum of 3 of these candidate storage elements will be selected that have the same combination of hierarchical identifiers of the first level ., second level . and third level .. During this selection activity of suitable storage elements  the spreading module will concurrently monitor the fact that only a maximum of 6 of these storage elements  are arranged in the same rack . This means that, in the embodiment according to , when comparing the storage elements identifiers  of the candidate storage elements  for selection by the spreading module only a maximum of 6 of these candidate storage elements will be selected that have the same combination of hierarchical identifiers of the second level . and third level .. It is clear that if a different scheme for providing hierarchical identifiers was used, for example a scheme in which the hierarchical identifiers are identified by a continuous series of unique numerals, instead of restarting the numbering at 1 every time a new higher hierarchical grouping is started, the analysis could be accomplished by only analysing the first hierarchy level identifier . or the second hierarchy level identifier  respectively.","According to a further embodiment in the case that the storage element identifier  further comprises a third level identifier . and\/or further level identifiers, the spreading policy will further comprise rules for selecting storage elements  in function of this third hierarchy level identifier . and\/or this further hierarchy level identifiers. This could for example be implemented by using a spreading policy that takes into account additional parameters for determining the selection of suitable storage elements  for storing sub blocks  during a storage operation. Such additional parameters could for example codify rules such as the distributed object storage system  must be able to survive loss or unavailability of one data centre, the distributed object storage system must be able to survive loss of 25% of the data centres on each continent, etc. It is also possible to make any suitable combination of rules that involve multiple levels of the hierarchical configuration of the distributed object storage system according to the invention, such as for example, the distributed object storage system must be able to survive the loss of an entire rack and one additional node.","It is further clear that the spreading policy could be based on any suitable combination of hierarchy level identifiers and does not require usage of all available hierarchy level identifiers available in the storage element identifier . This means that for example the spreading policy could take into account the second hierarchy level identifier . and the fourth hierarchy level identifier ., while disregarding the first hierarchy level identifier . and the third hierarchy level identifier ..","The distributed object storage system  in this way allows for a dynamic setup of the system, this means that storage elements , storage nodes  or even complete racks  or data centres  can be added, removed or reconfigured in the distributed object storage system  without the need for extensive manual configuration of the system. In a system with a static configuration of which from most of the storage elements  already a considerable amount of the storage capacity is being used, when a new storage node  comprising a plurality of storage elements  is added to this distributed object storage system, then a spreading policy that only takes into account available storage capacity on the storage nodes  will normally store most of the sub blocks  on the new storage elements  of the new storage node , which presents an increased risk in the scenario where this new storage node  would break down. The distributed object storage system  according to the invention  mitigates this risk by means of the use of the unique storage elements identifiers  comprising the hierarchy level identifiers as discussed above for a supplemental spreading policy and does this in a way that only requires minimal configuration as the only configuration activity that needs to be performed is assigning a new storage node  the correct hierarch level identifiers, the storage node  can then preferably automatically generate a unique storage element identifier  for all the storage elements  it contains. For example when adding storage node . upon assigning it these hierarchy level identifiers [1,1,1, . . . ] it can generate the unique storage element identifiers for the storage elements .-. it comprises as [1,1,1,1]-[1,1,1,16] as shown in the embodiment according to .","According to an alternative embodiment of the distributed object storage system  the spreading module  is operable to differentiate the selection of the number of storage elements . This means that in function of the spreading policy, the spreading module  will determine for one or more of the respective levels of the hierarchy on how many storage elements  the sub blocks need to be stored in order to fulfill both the reliability policy as well as the supplemental spreading policy. This can be implemented in a simple manner by determining the number of storage elements  to be selected by the spreading module according to one or more of their respective hierarchy level identifiers (., ., ., .) in function of the spreading policy. For example in an alternative embodiment similar to that of  in which a first rack  comprises 4 storage nodes , and a second rack  comprises 20 storage nodes , each of these storage nodes  comprising 10 storage elements . During a storage operation with a reliability policy where n=16 and f=6, the spreading module will need to spread the sub blocks across at least 16 storage elements . If there is a supplemental spreading policy that requires the system to be able to survive the failure of one storage node  for each rack . Then the sub blocks  must be spread by the spreading module amongst storage elements  from at least the four storage nodes  of the first rack  and at least 12 of the storage nodes  of the second rack . When one storage node  of each rack  fails, then 3 storage nodes  from the first rack  and at least 11 storage nodes  from the second rack  will still be available and the amount of sub blocks  on their storage elements  will allow for successful retrieval of the stored data object  as explained above. It is clear that the predetermined number of sub blocks  could be spread in equal amounts across all the selected storage elements, but alternatively the sub blocks  could also be spread in an unbalanced manner across the selected storage elements . This means that the 4\/16of the predetermined number of sub blocks  are stored on the storage elements  each of the 4 storage nodes  of the first rack  and 12\/16of the predetermined number of sub blocks  are spread amongst the storage elements  of 12 or more, for example 16 of the storage nodes  of the second rack , which means that the storage elements  of the second rack  would only need to store \u00be of the amount of sub blocks  per storage node  when compared to the amount of sub blocks  stored  per storage node  of the first rack . This thus allows to store less data per storage element  if more storage elements  are available in a specific part of the hierarchical configuration, while still fulfilling the requirements of the reliability policy and the supplemental spreading policy.","The distributed object storage system  according to the invention is able to reduce the impact of storage elements  that are unresponsive during a storage operation, this means that the storage element  responds slow when compared to for example the average responsiveness of the storage elements  or a predetermined expected level of responsiveness or does not respond at all, by means of an advantageous implementation of the spreading module  as described below. In prior art systems a storage operation is only marked complete when all of the encoded sub blocks  are successfully stored on the storage elements . As such, one unresponsive storage element  could present the risk of seriously degrading the performance of the storage operation and thus the distributed object storage system as a whole. Therefor the spreading module  according to this advantageous embodiment of the invention is operable to store the predetermined number of the redundant sub blocks  on a number of said storage elements  being larger or equal to said desired spreading width in two distinct phases. In the first phase the required share of sub blocks ) is stored on a number of said storage elements  which corresponds to a safety threshold. This safety threshold should be larger than or equal to said minimal spreading requirement. In the example described above with n=16, f=6 and thus k=10, this that the required amount of sub blocks  must be stored on at least k=10 storage elements  before this safety threshold is reached. In this way the sub blocks  will be stored first on the fastest storage elements  and this safety threshold will be reached much faster than the completion of the overall storage operation. In a subsequent second phase the remaining sub blocks  are then stored on the remaining unresponsive storage elements . This means that the required share of sub blocks  is stored on the number of remaining storage elements  so that the total number of storage elements  reaches said number being larger or equal to said desired spreading width. In the example described above with n=16; f=6 and k=10 this means then that the total number of storage elements  must be completed to n=16 after the first phase and thus still at least 6 of the storage nodes  of the distributed object storage system  need to be provided with the required sub blocks  in order to fulfill the requirements of the reliability policy. It is clear that the safety threshold can be any number as long as it is larger than the minimal spreading requirement and smaller than the total number of storage elements  selected by the spreading module  for storing all sub blocks  during a storage operation. A spreading module  configured in this way enables to distributed object storage system  to handle the critical part of the storage operation in a first time period which will be considerable shorter than the time period necessary for the overall completion of the storage operation. The requirements for performing the remaining part of the overall storage operation can as such be more relaxed and can be performed in for example a configurable predetermined time period after initiation of the storage operation, for example 1 or 2 days, as in the meantime, although the data object  is still not stored according to the required reliability policy it will be retrievable if the chances of the distributed object system  suffers such concurrent failures of storage elements  in this predetermined time period are sufficiently low. In this way the storage operation can be significantly sped up as the critical part of the storage operation is performed first, making available resources for other storage operations much faster and subsequently the less critical part of the storage operation is performed afterwards, preferably when the resources of the distributed object storage system  are less loaded, with only a minimal impact on the reliability of the system. It is clear that it is not required to determine before the initiation of the storage operation which of the storage elements  are unresponsive. The spreading module  can simply initiate storage of the sub blocks on the required storage elements  and abort this operation for the unresponsive storage elements  as soon as the safety threshold is reached.","According to a preferred embodiment of the invention the spreading module  keeps track of the storage elements  that are unresponsive during a storage operation. If such storage elements  repeatedly show unresponsive behaviour they can be ignored for a predetermined time period. Optionally this time period can be adapted incrementally, for example using an exponential back off scheme, if these storage elements  show unresponsive behaviour. By keeping track of the unresponsive storage elements , all applications  making use of the distributed object storage system  will benefit from the reduced impact on the storage operation response times.","According to still a further embodiment the spreading module  will temporarily store the predetermined amount of sub blocks  on the fastest storage elements  and move them to the unresponsive storage elements  later. In this way, by temporarily adding additional data to the data already stored in the first phase as described above, this provides the storage operation with additional reliability until the unresponsive storage nodes are reached with a minimal impact on the performance of the storage operation. This means that in the first phase to store the predetermined number of redundant sub blocks , all sub blocks are stored entirely on the first number of storage elements  and then in the subsequent second phase the required share of said sub blocks  are moved to the second number of remaining storage elements . As such after completion of the first phase of the storage operation all required sub blocks  are already stored on storage elements  of the distributed object storage system  and only the spreading needs to be adapted in order to fully comply with the reliability policy during the second phase.","Although unresponsive behaviour of storage elements  in the above described embodiments has always been determined on the level of a single storage element , it is clear that overall performance of a group of storage elements  as identified by their respective hierarchy level identifiers can be determined and subsequently be used by the spreading module  according to the invention in order to determine the performance of storage elements based on their unique storage element identifier and their corresponding position in the hierarchical configuration of the distributed object storage system .","According to still a further embodiment of the distributed object storage system  the effect of unresponsive storage elements  during a retrieval operation is mitigated in a simple and effective way. Instead of retrieving sub blocks  from all relevant storage elements  in sequential order, or in parallel in an equal amount. The clustering module  according to this embodiment of the invention will retrieve at least said predetermined multiple of said minimal spreading requirement of said redundant sub blocks  with a preference for the most responsive storage elements . In this way the retrieval operation will not be slowed down by the performance of the most unresponsive storage element .","According to a beneficial implementation of the clustering module  this can even be done in an iterative way without requiring the performance of the storage elements  to be assessed beforehand. The method used by the clustering module  during such a retrieval operation is shown in . This illustrates the method applied to the read request of the example discussed with regard to the retrieval operation as shown in . When executing the retrieval operation the clustering module  will issue a read request for the x*n=16*800=12800 sub blocks .-. of the data object  stored on the storage elements .-.. This read request will be transformed into a parallel process, one for each of the storage elements .-., for retrieving iteratively a predetermined share of the sub blocks  stored on them. In this example there are stored  sub blocks on each of the storage elements .-. and the predetermined share that is retrieved during the iterative process is for example \u00bc of the stored sub blocks , which means in this example  sub blocks. These parallel processes will as such iteratively retrieve sub blocks  from the storage elements  until the predetermined multiple of said minimal spreading requirement x*k=800*10=8000 of these sub blocks  is reached, such that the decoding module  can subsequently successfully assemble the data object  as explained above. It is clear that the iterations for the most responsive storage elements  will complete faster than those for the unresponsive storage elements . As such while executing the retrieval operation, more iterations will be performed on the most responsive storage elements then on the unresponsive storage elements and as such when the requirement of the predetermined multiple of said minimal spreading requirement x*k=800*10=8000 is met more sub blocks will have been retrieved from the most responsive storage elements , while still allowing for a contribution of the unresponsive storage elements  to the performance of the overall retrieval operation.","According to still a further alternative embodiment so that the clustering module  can prioritize the iterative processes on the storage elements  that have the highest performance. This can be done by analysing the performance of their respective iterative operations, but alternatively storage elements that have similarities in their hierarchical configuration that resemble those of fast storage elements  could for example be prioritized with regard to the execution of their corresponding iterative operations. This does not only provides a simple and fast retrieval operation, but in many cases storage elements  that are in close in their hierarchical configuration, for example, in the same storage node , in the same rack , in the same data centre , provide also for the cheapest solution bandwidth-wise.","According to still a further alternative embodiment, the effect of an unresponsive storage element  can be mitigated by applying the same principles as explained above during a storage operation. In that case instead of storing sub blocks  for all relevant storage elements  in sequential order, or in parallel in an equal amount. The spreading module  according to this embodiment of the invention will retrieve at least said predetermined multiple of said minimal spreading requirement of said redundant sub blocks  with a preference for the most responsive storage elements . In this way the storage operation will not be slowed down by the performance of the most unresponsive storage element .","According to a beneficial implementation of the spreading module  this can even be done in an iterative way without requiring the performance of the storage elements  to be assessed beforehand. The method used by the spreading module  during such a storage operation is shown in . This illustrates the method applied to the storage request of the example discussed with regard to the storage operation as shown in . When executing the storage operation the spreading module  will issue a storage request for the x*n=16*800=12800 sub blocks .-. of the data object  to be stored on the storage elements .-.. This storage request will be transformed into a parallel process, one for each of the storage elements .-., for storing iteratively a predetermined share of the sub blocks  to be stored on them. In this example there need to be stored 800 sub blocks on each of the storage elements .-. and the predetermined share that is to be stored during the iterative process is for example \u00bc of the sub blocks  to be stored, which means in this example  sub blocks. These parallel processes will as such iteratively store sub blocks  on the storage elements  until the predetermined multiple of said minimal spreading requirement x*k=800*10=8000 of these sub blocks  is reached, such that the decoding module  during a subsequent retrieval operation can successfully assemble the data object  as explained above. It is clear that the iterations for the most responsive storage elements  will complete faster than those for the unresponsive storage elements . As such while executing the storage operation, more iterations will be performed on the most responsive storage elements then on the unresponsive storage elements and as such when the requirement of the predetermined multiple of said minimal spreading requirement x*k=800*10=8000 is met more sub blocks will have been stored on the most responsive storage elements , while still allowing for a contribution of the unresponsive storage elements  to the performance of the overall storage operation.","According to a preferred embodiment of the distributed object storage system  unresponsive storage elements  that remain unresponsive for a time period that exceeds a predetermined sleep time period threshold, for example longer than one or two days or storage elements  that store data objects  with a frequency of retrieval below a predetermined sleep frequency threshold, for example less retrieval than once per month, are powered down. In this way the distributed object storage system  can provide large power savings while still providing the same reliability threshold. Specific branches of the hierarchical configuration of the distributed object storage system  can be marked to contain unresponsive or low access storage elements  so that during a storage operation low access data objects , such as for example backup data or redundant data, can preferably be stored on these storage elements .","Although the present invention has been illustrated by reference to specific embodiments, it will be apparent to those skilled in the art that the invention is not limited to the details of the foregoing illustrative embodiments, and that the present invention may be embodied with various changes and modifications without departing from the scope thereof. The present embodiments are therefore to be considered in all respects as illustrative and not restrictive, the scope of the invention being indicated by the appended claims rather than by the foregoing description, and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein. In other words, it is contemplated to cover any and all modifications, variations or equivalents that fall within the scope of the basic underlying principles and whose essential attributes are claimed in this patent application. It will furthermore be understood by the reader of this patent application that the words \u201ccomprising\u201d or \u201ccomprise\u201d do not exclude other elements or steps, that the words \u201ca\u201d or \u201can\u201d do not exclude a plurality, and that a single element, such as a computer system, a processor, or another integrated unit may fulfill the functions of several means recited in the claims. Any reference signs in the claims shall not be construed as limiting the respective claims concerned. The terms \u201cfirst\u201d, \u201csecond\u201d, third\u201d, \u201ca\u201d, \u201cb\u201d, \u201cc\u201d, and the like, when used in the description or in the claims are introduced to distinguish between similar elements or steps and are not necessarily describing a sequential or chronological order. Similarly, the terms \u201ctop\u201d, \u201cbottom\u201d, \u201cover\u201d, \u201cunder\u201d, and the like are introduced for descriptive purposes and not necessarily to denote relative positions. It is to be understood that the terms so used are interchangeable under appropriate circumstances and embodiments of the invention are capable of operating according to the present invention in other sequences, or in orientations different from the one(s) described or illustrated above."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0028"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0029"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0030"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0018","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0034"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0022","num":"0035"},"figref":"FIGS. 9-11"},{"@attributes":{"id":"p-0023","num":"0036"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0024","num":"0037"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
