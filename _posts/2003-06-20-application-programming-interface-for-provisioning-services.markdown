---
title: Application programming interface for provisioning services
abstract: An invention is provided for provisioning services to client devices. In one embodiment, discovery transactions are included that allow an adapter software component to retrieve information regarding services available to a client device from a provisioning application. A service comprises a plurality of content files capable of being installed on the client device. Also included are subscription transactions that allow an adapter software component to manage content in service directories. A service directory comprises a plurality of services. In addition, delivery transactions are included that allow an adapter to facilitate downloading of data related to services to the client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07444386&OS=07444386&RS=07444386
owner: Sun Microsystems, Inc.
number: 07444386
owner_city: Santa Clara
owner_country: US
publication_date: 20030620
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is related to U.S. patent application Ser. No. 10\/600,281, filed Jun. 20, 2003, and entitled \u201cProtocol Method for Provisioning Services,\u201d which is incorporated herein be reference.","1. Field of the Invention","This invention relates generally to computer networking, and more particularly to an application programming interface for provisioning services using limited defined atomic units.","2. Description of the Related Art","Current mobile computing environments allow computer users great variety in digital services, which can vary from device to device depending on the type of client device used and the needs of the user. Typically, mobile client devices obtain digital services via a provisioning server as illustrated in .",{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","102","104","102","102","102","102","102"],"i":["a","c ","a","c ","a ","b","c. "]},"The provisioning server  is a network resource from which the client devices -can obtain access to new digital services and update existing digital services. As illustrated in , one approach to implementing the provisioning server  is an adapter\/application model. In this approach, the provisioning server  includes a plurality of provisioning adapter modules -, which facilitate communication between the client devices -and a provisioning application . The provisioning application  generally is a generic and more device independent application that includes the business logic for the provisioning service.","Each provisioning adapter -is designed to communicate with a specific type of client device, and \u201ctranslate\u201d the client device communication into a form understandable by the provisioning application . For example, provisioning adapter can be designed to communicate with the telematics client device . In this case, the provisioning adapter receives commands from the telematics client device and translates the received commands into commands acceptable by the provisioning application . Similarly, the provisioning adapter receives and translates commands from the mobile phone client device , and the provisioning adapter receives and translates commands from the desktop computer client device ","As can appreciated, each provisioning adapter -also facilitates command and content delivery from the provisioning application  to each client device -. That is, the provisioning adapter receives commands from the provisioning application  and translates the received commands into commands acceptable by the telematics client device . Similarly, the provisioning adapter receives and translates commands from provisioning application  and delivers them to the mobile phone client device , and the provisioning adapter receives and translates commands for delivery to the desktop computer client device ","Generally, the provision server  keeps track of users using a database , which stores user information, service content, and other data usable by the provisioning application . In this manner, different services can be provided to different users based on their user information. For example, a particular user can pay for a service and a record of payment can be stored in the user information for that particular user. Thereafter, the user can access the services and other content bought.","Unfortunately, prior art provisioning servers  do not have a standard mechanism for communication between the adapters -and the provisioning applications. Hence, different provisioning applications  can require different interface programming. Moreover, each adapter -can implement commands to the provisioning application  in different manners. Thus, a prior art provisioning application  executed on a prior art provisioning server  generally is designed to operate with specific provisioning adapters -that are designed along with the provisioning application . As a result, new provisioning adapters generally cannot be added to the provisioning server  without altering the provisioning application . That is, the provisioning application  generally must be altered if a further provisioning adapter is added at a later date to facilitate communication with another client device. Although improved client provisioning mechanisms have been developed, the flexibility and scope of these improvements are very limited.","In view of the foregoing, there is a need for a method for provisioning services that provides a standard communication mechanism for provisioning applications and provisioning adapters. The method should provide provisioning services using limited defined atomic units that can be utilized for a wide variety of applications and client devices.","Broadly speaking, the present invention fills these needs by providing an application programming interface for provisioning services that provides a standard mechanism for communication between provisioning adapters and a more generic provisioning application. In one embodiment, the application programming interface (API) includes discovery transactions that allow an adapter software component to retrieve information regarding services available to a client device from a provisioning application. A service comprises a plurality of content files capable of being installed on the client device. The API also includes subscription transactions that allow an adapter software component to manage content in service directories. As will be described in greater detail below, a service directory comprises a plurality of services. In addition, delivery transactions are included in the API that allow an adapter to facilitate downloading of data related to services to the client device. In one aspect, the discovery transactions can include a service discovery transaction that allows an adapter to obtain information regarding a particular service, and a service directory discovery transaction that allows an adapter to obtain information regarding a particular service directory.","A method for provisioning services is disclosed in an additional embodiment of the present invention. The method includes providing discovery transactions that allow an adapter software component to retrieve information regarding services available to a client device from a provisioning application. Also, subscription transactions are afforded that allow an adapter software component to manage content in service directories, and delivery transactions are provided that allow an adapter to facilitate downloading of data related to services to the client device. In one aspect, the subscription transactions can include a service subscription transaction that allows a service to be added to a service directory, and an unsubscribe transaction that allows a service to be removed from a service directory.","In a further embodiment of the present invention, a system for provisioning services is disclosed. The system includes a provisioning server executing a provisioning application. In communication with the provisioning application is a provisioning API. As above, the provisioning API includes discovery transactions that allow an adapter software component to retrieve information regarding services available to a client device from a provisioning application. The provisioning API also includes subscription transactions that allow an adapter software component to manage content in service directories, and delivery transactions that allow an adapter to facilitate downloading of data related to services to the client device. Further included in the system is at least one adapter software component in communication with the provisioning application via the provisioning API. The adapter software component is also in communication with a client device. In one aspect, the delivery transactions of the provisioning API can include an update transaction that allows an adapter to obtain a provisioning update comprising a list of services that should be installed on the client device. The delivery transactions can further include a notification transaction that allows the provisioning application to request an adapter to perform an update transaction, and a delivery transaction that allows an adapter to obtain a link to data, the link facilitating downloading of the data. Other aspects and advantages of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","An invention is disclosed for a method for provisioning services. Generally, embodiments of the present invention provide an application programming interface for provisioning services that provides a standard mechanism for communication between provisioning adapters and a more generic provisioning application. In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances, well known process steps have not been described in detail in order not to unnecessarily obscure the present invention.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 1","FIG. 2"],"b":["200","200","202","202","204","202","202","202","202","202","204","202","202","20","204","202","202","202","202"],"i":["a","c ","a","c ","a ","b","c","a","c ","a","c ","a","c "]},"Similar to above, the provisioning server  is a network resource from which the client devices -can obtain access to new digital services and update existing digital services. The provisioning server  includes a plurality of provisioning adapters modules -, which facilitate communication between the client devices -and a provisioning application . As above, the provisioning application  is a generic and device independent application that includes the business logic for the provisioning system . In use, the provisioning application  receives and provides commands to the provisioning API , which facilitates communication with the provisioning adapters -","The provisioning server  is a highly available network resource that can be embodied on a single computer or on a plurality of computers. For example, to increase availability, scalability, and manageability, the provisioning server  can be embodied on a collection of tightly coupled computers. However, from the point of view of the client devices -, the provisioning server  generally appears as a single logical entity.","As will be described in greater detail subsequently, the provisioning server  of the embodiments of the present invention provides discovery, subscription, and delivery functionality for the client devices -. Broadly speaking, the provisioning server  provides discovery functionality allowing a user of a client device -to discover services and contents that are available to the particular client device. Subscription functionality is provided by allowing a user of a client device -to manage the content of services directories, described in greater detail below. The provisioning server's  delivery functionality allows a client device -to receive content that has become available to the device or content that should be removed from the device. In addition, delivery functionality allows a client device -to download available content.","Each provisioning adapter -is designed to communicate with a specific client device, and \u201ctranslate\u201d or \u201cmap\u201d the client device communication into a form specified by the provisioning API . For example, provisioning adapter can be designed to communicate with the telematics client device . In this case, the provisioning adapter receives commands from the telematics client device and translates the received commands into commands acceptable by the provisioning API . Similarly, the provisioning adapter receives and translates commands from the mobile phone client device , and the provisioning adapter receives and translates commands from the desktop computer client device ","As can appreciated, each provisioning adapter -also facilitates command and content delivery from the provisioning API  to each client device -. That is, the provisioning adapter receives commands from the provisioning API  and translates the received commands into commands acceptable by the telematics client device . Similarly, the provisioning adapter receives and translates commands from provisioning API  and delivers them to the mobile phone client device , and the provisioning adapter receives and translates commands for delivery to the desktop computer client device ","The provisioning API  defines several specific roles a provisioning adapter -may play with respect to the provisioning application . More specifically, the provisioning API  defines a common set of abstractions for sharing information between the provisioning adapters -and the provisioning application . In addition, the provisioning API  of the embodiments of the present invention defines a precise set of adapter\/application interactions, which allow the mapping of a wide range of client specific provisioning models to a generic provisioning application .","In this manner, the provisioning API  supports provisioning models where the provisioning server  plays a central role in managing which services and content are accessible and delivered to each client device -. This is important, for example, in fleet management. For example, a corporation may deploy a large population of client devices -, but want to retain strict control over the software configuration of each client device -. It should be noted that the method for provisioning services of the embodiments of the present invention can be implemented in a plurality of manners, of which the provisioning API  is one.","As mentioned above, the provisioning server  provides services and content to client devices -. In the following description, a service is defined as a collection of one or more downloadable content files that are installed on a client device -in order to provide the user of the client device with a particular functionality. Services can also be utilized to customize the user experience of existing functionality present on the client device. A content file can be an executable file, media files, property files, archive files, or any other file that may be required to provide a particular functionality on a client device. For example, exemplary content files can be executable Java byte code files, sound files, a Video files, and image files. Services provide a product-level view of content that is usable by client device users, while individual content files represent a resource-level view that may or may not be exposed to the client device user.","In addition to individual services, embodiments of the present invention also process service directories. A service directory is an identifiable collection of services. A service directory also can be associated with a collection of nested service directories. In use, service directories can be defined for a plurality of administrative purposes. For example, a service directory can be utilized for presentation and navigation of service categories, and tracking of subscriptions and service deployment. Generally, the provisioning application  manages the content of a service directory. For example, the provisioning application  can manipulate a service directory as a result of a dynamic calculation or using a database  representation.","A bundle is defined as a physical downloadable component. Bundles are parts of services, and are generally used during delivery. When a service is being delivered to a client device, all the required bundles corresponding to that service are downloaded to the client device. In one embodiment, a bundle includes two parts, a descriptor file and an actual content file. Generally these parts may be downloaded separately, however, the descriptive information for each bundle in a service can also be aggregated in the service description (service object). A bundle can also include a URL property, which is utilized for downloading.","In one embodiment, client objects can be utilized to store specific client device data during calls to the provisioning application . In this embodiment, when an adapter  calls the provisioning application , the adapter  provides a client device object along with the request. The client device object can be utilized to store information specific to that particular call, and will be returned \u201cas is\u201d to the adapter  in the reply to the call. In this manner, an adapter  can retrieve the stored information upon receiving the reply, which may be needed when the adapter instance that sent the request is not the same adapter instance that receives the reply from the provisioning application .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3","FIG. 3"],"b":["222","222","300","302","304","222"]},"Thus, the provisioning API  defines three roles a provisioning adapter can play with respect to the provisioning application. Viewed from the provisioning application these are discovery, subscription, and delivery adapters. However, from the client perspective, a single adapter may play alternate roles, depending on the client specific provisioning model supported. Therefore, although a particular implementation of an embodiment of the present invention may define three different types of adapters, this is not a restriction imposed by the invention. Thus, embodiments of the present invention define a set of transactions for the interaction between the provisioning application and an adapter in each of the three roles.","The discovery transactions  are used by adapters to retrieve information about services available to particular client devices and users, based on available contextual information. It should be noted that discovery transactions  can be utilized to retrieve information regarding services available to client devices that are different from the client device used to perform discovery. Subscription transactions  are utilized to manage the content of service directories. The name subscription refers to the fact that within the confines of most provisioning models these transactions are most commonly used to manipulate the content of a service directory modeling the set of services that have been subscribed to a particular client device. Delivery transactions  are used to discover content files that need to be either installed or removed from a client device. In addition, delivery transactions  can also be used to obtain download identifiers for content files.","In one embodiment, the above transactions are initiated by an adapter and comprise one request and one reply. Typically, a transaction is committed by the adapter upon receipt of the reply and by the provisioning application upon sending the reply. Although, a general purpose provisioning application generally supports all of the transactions described, a special purpose provisioning service can also be utilized with the embodiments of the present invention. For example, a special purpose provisioning server, which is only required to support a limited set of client specific provisioning models, may only need to implement a subset of these transactions.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["300","300","400","402"]},"The service directory discovery transaction  facilitates service directory discovery requests. In use, an adapter makes a call to the provisioning application via the provisioning API requesting information about a service directory matching particular search criteria. In reply, the provisioning application provides information about a matching service directory (or an error) to the requesting adapter, or another instance of the requesting adapter. In one embodiment, the provisioning API has a method that receives a client device object and a directory object, representing a desired service directory. The provisioning application can write appropriate directory information, such as a list of services and service directories contained in the requested service directory, and the adapter can query the directory object returned from the provisioning application to obtain the service directory information. Thereafter, the adaptor codes the service directory information into a client specific protocol and sends it to the client.","The service discovery transaction  facilitates service discovery requests. In use, an adapter makes a call to the provisioning application via the provisioning API requesting information about a service matching particular search criteria. In reply, the provisioning application provides information about a matching service (or an error) to the requesting adapter, or another instance of the requesting adapter. In one embodiment, the provisioning API has a method that receives a client device object and a service object, representing a desired service. The provisioning application can write appropriate service information, such as an extended list of service properties, and the adapter can query the service object returned from the provisioning application to obtain the service information. Thereafter, the adaptor codes the service information into a client specific protocol and sends it to the client.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5","b":["302","302","500","502"]},"The service subscription transaction  facilitates service subscription requests. In use, an adapter makes a call to the provisioning application via the provisioning API requesting that one or more services be added to an identified service directory. In reply, the provisioning application adds the service or services to the identified service directory and returns a success or failure of the subscription operation to the requesting adapter, or other instance of the requesting adapter. In general, the request to subscribe includes a client device reference to the client device whose subscription will be modified, and a list of services that are to be added to the client device subscription.","The unsubscribe transaction  facilitates service unsubscribe requests. In use, an adapter makes a call to the provisioning application via the provisioning API requesting that one or more services be removed from an identified service directory. In reply, the provisioning application removes the service or services from the identified service directory and returns a success or failure of the unsubscribe operation to the requesting adapter, or other instance of the requesting adapter. In general, the request to unsubscribe includes a client device reference to the client device whose subscription will be modified, and a list of services that are to be removed from the client device subscription.","Upon execution of a subscription operation by the provisioning application, a reply is generated and is sent back to the client device. In one embodiment, the adapter includes a method that receives a client device object, a list of services objects, and an array of return values. Each return value should stand for corresponding service, so they align. Upon receiving the reply from the provisioning application, the adapter converts the reply to a client specific protocol, and sends the information to the client indicating which services were processed successfully or not, depending on the return code.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["304","304","600","602","604"]},"The notification transaction  is utilized by the provisioning application to initiate a provisioning cycle. More particularly, the notification transaction  allows the provisioning application to send a notification to an adapter. The notification causes the adapter to execute an update transaction . In one embodiment, a notification method receives a client device object as an argument and causes the client device or adapter to query the provisioning server for an update. For example, in one embodiment, the adapter can forward the notification to the client device. Alternatively, the adapter can execute an update transaction  on behalf of the client device, and push content files to the client device as required.","The update transaction  is utilized to calculate the provisioning update for a client device. As mentioned above, a provisioning update is a list of services that a client device should have installed. It should be noted that the application view of that provisioning update list may be different from corresponding adapter's view of the provisioning update list, since the device client may have specific mechanisms for installing an application or keeping an application installed. For example, a particular client device may not have an ability to possess more than one application at a time in the client device's storage. The provisioning application calculates the provisioning update using the subscribed and deployed special service directories for the corresponding client device.","In one embodiment, a method for calculating an update has a list of service objects as a parameter. This service objects list may be specified by the adapter or client device for synchronization purposes. If the service objects list is present as an argument, the application will ignore it's own knowledge of currently deployed services, and will use the service objects list as a deployed list of services. In this manner, the service objects list can be passed to the provisioning application if the client device or adapter believes that the client device and provisioning database are out of synchronization.","On reply, the provisioning application calls a method on the adapter side to send the provisioning update back to the client device. The response can contain a client device id, status code, list of services that client device misses, and the list of services that client device should not have anymore. A status code shows whether the application believes that client is out of synchronization or not. The status code may also indicate an error condition. If the provisioning application has decided that client device and database are out of synchronization, the adapter can query the client device to send the list of deployed services. If this information is unavailable from either the client or adapter, the adapter can call the provisioning application specifying an empty set instead of the service objects list. In this case, the provisioning application will respond with the list of services that a client device should have.","The delivery transaction  is utilized to download bundles to the client device. In use, the adapter requests a particular bundle using a bundle identifier obtained using the update transaction . Optionally, the bundle identifier can be obtained using a discovery transaction, depending on the particular implementation. In reply, the provisioning application provides a URL from which the requested bundle can be downloaded using the adapter, or optionally, the client device.","In one embodiment, a method is included in the delivery transaction  that the provisioning application can call in reply to receiving a deliver request. This method provides the bundle URL to the adapter and passes the client device object along. In this manner, the adapter will be aware of where to download the bundle. This method also includes a status code, which can be implementation specific, that indicates whether or not the URL is valid. Although the status code is implementation specific, one embodiment utilizes HTTP response codes. Upon receiving a status code that shows that the URL download has failed, adapter can notify the client about the failure instead of uploading the data.","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention, together with further advantages thereof, may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
