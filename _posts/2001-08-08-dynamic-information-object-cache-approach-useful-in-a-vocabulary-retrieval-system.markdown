---
title: Dynamic information object cache approach useful in a vocabulary retrieval system
abstract: A concept cache useful in a vocabulary management system stores references to individual information objects that can be retrieved and dynamically assembled into electronic documents. Information objects are organized in one or more hierarchical trees, and references to nodes in the trees are cached. A query processor receives a cache query from a delivery engine that is attempting to dynamically construct an electronic document with content that matches the query. For example, a common Web site query contains a concept and an information type. The cache is searched to identify one or more rows that match the query concept and the query information type. An intersection of the rows is determined, yielding a result set of rows. Index pointers in the rows of the result set lead to stored information objects, which are passed to the delivery engine. The delivery engine assembles the electronic document using the information objects. Unlike past approaches that cache static pages, rapid delivery of dynamic pages is facilitated. Vocabularies and relationships are cached with their references to other objects, as needed, facilitating speed of execution of both the logic of constructing a document and in finding the appropriate cached version of an information object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07139973&OS=07139973&RS=07139973
owner: Cisco Technology, Inc.
number: 07139973
owner_city: San Jose
owner_country: US
publication_date: 20010808
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application is related to and claims domestic priority from prior U.S. Provisional application Ser. No. 60\/252,378, filed Nov. 20, 2000, the entire disclosure of which is hereby incorporated by reference as if fully set forth herein. This application is related to U.S. Pat. No. 6,665,662 issued on Dec. 16, 2003, entitled \u201cQuery Translation System for Retrieving Business Vocabulary Terms\u201d by inventors M. Kirkwood et al.; U.S. patent application Ser. No. 09\/823,819, filed on Mar. 30, 2001, entitled \u201cBusiness Vocabulary Data Storage Using Multiple Inter-Related Hierarchies\u201d by inventors M. Kirkwood et al.; U.S. patent application Ser. No. 09,908,947, filed on Jul. 18, 2001, entitled \u201cBusiness Vocabulary Data Retrieval Using Alternative Forms\u201d by inventors M. Kirkwood et al.; U.S. patent application Ser. No. 09\/909,108, filed on Jul. 18, 2001, entitled \u201cTechniques for Forming Electronic Documents Comprising Multiple Information Types\u201d by inventors M. Kirkwood et al.; and U.S. patent application Ser. No. 09\/925,204, filed Aug. 8, 2001, entitled \u201cMultiple Layer Information Object Repository\u201d by inventors M. \u201cMultiple Layer Information Object Repository\u201d by inventors M. Kirkwood et al., the entire disclosures of all of which are hereby incorporated by reference for all purposes as if fully set forth herein.","The present invention generally relates to data processing in the field of electronic document creation. The invention relates more specifically to a dynamic information object cache approach useful in a vocabulary retrieval system or ontology-based system.","Through economic growth, mergers and acquisitions, business enterprises are becoming ever larger. Further, large business enterprises in the field of high technology now offer ever larger numbers of products and services that derive from an increasingly large variety of technologies.","In this environment, managing the creation, use, and maintenance of the company's intellectual assets, such as products and technologies is an acute problem. As an enterprise grows, maintaining consistent usage of names of products and services throughout the enterprise becomes even more challenging. When an enterprise derives its business opportunities from research and development into new technologies or improvements of existing technologies, maintaining consistent usage of technology designations is a challenge, especially when there is disagreement or confusion about the uses, advantages or benefits of a particular technology. Such confusion can arise whether disagreements arise or not, as when there is no communication between different teams within an enterprise.","The World Wide Web is one communication medium that exacerbates the problem, by showing internal information to the enterprise's partners and customers. Large enterprises that own or operate complex Web sites or other network resources that contain product and technology information face a related problem. Specifically, ensuring consistent usage of product names and technology terms across a large, complicated Web site is problematic. A particular problem involves maintaining consistent use of terms when different parts or elements of the Web site applications are created or content is authored by different individuals or groups.","Based on the foregoing, there is a clear need for improved ways to manage one or more vocabularies of all company business practices and pertaining to all business terminology (\u201cconcept\u201d), including but not limited to product names and technology terms.","In particular, there is a need for a way to structure stored information about those concepts so that it can be located and navigated easily regardless of who authored the information and where the information resides.","There is also a need for a system that can rapidly and efficiently select vocabulary concepts and related information from among a large volume of stored information that is inter-related by overlapping hierarchies, and deliver the selected information to another system for use in assembling electronic documents based on the selected information.","There is also a need for a way to deliver information distributed over one or more networks that is relevant to a user query based on the vocabulary information to individuals who are distributed among many groups of a large enterprise, or who are outside the enterprise.","There is also need for a system that is extensible or adaptable when new business practices, products or technologies are developed by diverse, distributed groups in a large business enterprise.","A system that meets the foregoing needs is useful for managing highly complex Web sites and similar information resources that can store, retrieve and deliver vast amounts of information to clients. Moreover, the information that is delivered can be provided in a personalized manner. Based on a client query, dynamic pages are constructed from individual information object components, and delivered in assembled form, with content responsive to the query. While such systems are powerful, they are also extremely complex and are required to rapidly deliver large amounts of information.","Accordingly, there is a need for a system having the foregoing characteristics that can provide improved performance. Specifically, a complex Web site based on the foregoing is required to perform as fast as possible to improve customer satisfaction and experience.","Past approaches involve caching Web site pages. An example of a commercial product series representing such past approaches is the Cisco 500. Series Cache Engine, e.g., the Cisco 550. Cache Engine. However, in these past approaches, electronic documents or Web site pages are created in advance in a fixed form (\u201cstatic pages\u201d) and therefore are easily stored in a cache and delivered from the cache to clients. But when virtually all the pages delivered from the Web site are dynamic, and are created based on individual component information objects, use of traditional caching approaches is impossible because there is no way to cache a dynamically constructed page.","Another deficiency of such prior approaches is that they cannot cache multiple versions of electronic documents that are only slightly different, such as pre-rendered Web site pages that are \u201cpersonalized\u201d by association with a specific client.","Thus, there is a need for a way to cache dynamically generated electronic documents, such as Web site pages.","There is a particular need for a way to efficiently cache the information objects that form components of dynamically constructed electronic documents, in a manner that is compatible with the foregoing characteristics, so that requested information objects are rapidly and efficiently delivered from a data store that holds the information objects.","The foregoing needs, and other needs and objects that will become apparent from the following description, are achieved in the present invention, which comprises, in one aspect, a method of expressing knowledge electronically. One example of this aspect involves dynamically generating an electronic document, such as a Web document.","In one aspect, a method of dynamically generating an electronic document involves receiving a request to generate an electronic document containing information responsive to a user query based on one or more information objects that are organized in one or more hierarchical trees, wherein the query contains a concept and an information type that is part of a document, or document type. A cache of information objects is searched to identify one or more rows that match the query concept, the information type, and the document type. An intersection of the rows is determined, yielding a result set of rows. Matching information types are retrieved based on following index pointers in the rows of the result set, which point to an information object in an information object repository. Information objects logically represent any content, in any location. The electronic document is automatically created using the matching information objects and delivering the electronic document in response to the user query.","According to another aspect, a concept cache useful in a vocabulary management system stores references to individual information objects that can be retrieved and dynamically assembled into electronic documents. Information objects are organized in one or more hierarchical trees, and references to nodes in the trees are cached. A query processor receives a cache query from a delivery engine that is attempting to dynamically construct an electronic document with content that matches the query. Alternatively, one or more programmatic function calls defined in an application programming interface are called to process a query. The query contains a concept and an information type. The cache is searched to identify one or more rows that match the query concept and the query information type. An intersection of the rows is determined, yielding a result set of rows. Index pointers in the rows of the result set lead to stored information objects, which are passed to the delivery engine. The delivery engine assembles the electronic document using the information objects. The information objects may represent any type of original object, e.g., Web services, HTML, images, applications, templates, etc.","Unlike past approaches that cache static pages, rapid delivery of dynamic pages is facilitated.","According to one feature, cache searches are also constrained by other factors, such as whether rows match a template type of an output document template, whether a particular class of user who issued the query is entitled to read the rows, language, etc.","In another aspect, the method includes managing a plurality of information chunks in one or more content management systems. Each chunk of the plurality of information chunks comprises a unit of data for storage and retrieval operations. A vocabulary database is also managed. The vocabulary database includes data structures describing atomic concepts among names in an enterprise-specific vocabulary, and a plurality of data structures describing relationships among the atomic concepts. The data structures describing atomic concepts include a first information object having data indicating a first reference to a first chunk in the content management system. The data structures describing relationships include a first relationship between the first information object and a second concept of the atomic concepts. All the foregoing are represented in a single cache.","In other aspects, the invention encompasses computer readable media, and systems configured to carry out the foregoing steps.","A method and apparatus for storing business vocabulary data using multiple inter-related hierarchies are described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","1.0 Business Vocablary Data Processing","Business vocabulary terms are used to name products, product lines, technologies, people, processes, development efforts and other business activities of an enterprise. Some of the vocabulary terms are used only internally and some are used for interaction with the public to establish brand name recognition or to support precise communication of customer interests and orders. Terms related in meaning or form are used to associate related business products and activities in the minds of the users of those terms. For example, a device sold by an enterprise might be named Perseus, after a hero of Greek mythology, and a software program for executing on that device might be named Pegasus, after the winged horse Perseus rode. Similarly, different models of the Perseus device might be called AlphaPerseus and BetaPerseus, to show they are part of the same product line, while different versions of each model may be numbered, such as BetaPerseus 2.0 and BetaPerseus 2.4.","The present invention is based in part on a recognition that the business terms of an enterprise constitute an important type of business data that should be included in the automated data processing that the enterprise performs. This vocabulary data about the products, services and activities of a business is a form of metadata for the products, services and activities of the enterprise. Those terms can be used to categorize the products, services and activities and to retrieve other data about those products, services and activities. The data structures employed to store, retrieve and process this metadata should account for the associations in meaning and form and support rapid associative or inferential search and retrieval.","2.0 Vocabulary Development Framework","According to the present invention, the various terms that constitute the business vocabulary of an enterprise are modeled as nodes in a hierarchy called the MetaData Framework (MDF) or the Vocabulary Development Framework (VDF). In this framework, any business term that is derived from another particular business term is positioned in the hierarchy at a node that branches from the node of that particular business term from which it is derived. When the hierarchy is embodied in stored data with appropriate data structures and software programs, it is extremely useful in naming products and associating products with product lines.","For example,  shows a hypothetical product type hierarchy for a hypothetical enterprise that manufactures and sells network devices. In this hierarchy, node  is a root node representing network device products sold by the enterprise. Node  has three child nodes, , ,  that are connected by arrows . The parent\/child relationship is denoted by an arrow pointing from parent to child in . A relationship statement can be obtained reading from arrow head to arrow tail by the words \u201cis a child of\u201d or read in the opposite direction by the words \u201cis a parent of.\u201d Thus node  is a child of node . Node  is a parent of node . In the product type hierarchy of , arrow  represents the product type parent\/child relationship.","Node  represents the devices named \u201cPerseus.\u201d In this embodiment, the name of node  includes \u201cPerseus.\u201d Nodes ,  represent devices named \u201cHercules\u201d and \u201cJason,\u201d respectively.  shows that the Perseus device comes in three models, \u201cAlphaPerseus,\u201d \u201cBetaPerseus\u201d and \u201cGammaPerseus,\u201d represented by the three nodes , , , respectively. The BetaPerseus model has evolved over time through versions 1.0, 2.0 and 3.0, represented by nodes , , , respectively. The names of these nodes are \u201cBetaPerseus 1.0,\u201d \u201cBetaPerseus 2.0,\u201d and \u201cBetaPerseus 3.0,\u201d respectively. BetaPerseus 2.0 also experienced some evolutions called \u201cBetaPerseus 2.4\u201d and \u201cSuperPerseus,\u201d which are represented by nodes , , respectively.","This hierarchy consists of binary relationships; that is, each relationship requires one parent and one child. The product type relationships of  are constrained by a rule that each child may have only one parent. There is no rule restricting the number of children a parent may have in this hierarchy.","Various applications use the information in the VDF implementation to perform different functions for the enterprise. In one application, the VDF relationships in the illustrated hierarchy are used to determine that the product named \u201cSuperPerseus\u201d is actually a version of the BetaPerseus model that is based on version 2.4. In another application, the VDF names are used to help provide names for products as new products are developed by automatically including the product type and model name and by preventing the re-use of an existing version number. Embodiments of this application enforce a rule that each name shall be unique. The enterprise uses the VDF with other embodiments of such an application to enforce other naming rules, such as requiring the model name shall be part of the device name. In this case the ambiguous name \u201cSuperPerseus\u201d is not allowed, and is discarded in favor of the automatic name, \u201cBetaPerseus 2.5\u201d, or some allowed variation of that, which is stored as the name of node .","The vocabulary data framework (VDF) captures simultaneous multiple relationships among names, products, solutions, services, documentation and activities for an enterprise. In particular, the VDF allows other relationships to be established between nodes simultaneously with the product type relationship. Furthermore, the VDF allows any of these new relationships to involve more than the two nodes of the binary parent-child relationship already described. For example, it allows a trinary relationship among a father node, a mother node, and a child node. In general, the VDF allows N-ary relationships among nodes, where N is any integer equal to or greater than one and specifies the number of participants in the relationship.","In the more general realm of the VDF, the enterprise is considered a data domain that includes many atomic concepts that may be related. Atomic concepts include any data item involved in the enterprise that is not subdivided into separately referenced storage units. These atomic concepts include the business vocabulary for the enterprise data that is the subject of the present invention. Concepts include product type names, as in the above example, but also comprise names of projects and departments and references to paragraphs, chapters, documents, images, multimedia files, database records, database queries, network resources, citations, and network addresses, among other things. The concepts and relationships are captured in conceptual graphs which are organized primarily by a partial-order relationship, commonly known as a type hierarchy. The concepts are nodes in the graph and the relationships are connections between two or more nodes. Both concepts and relationships have enumerated characteristics in some embodiments.","The graph of  is an example of a conceptual graph ordered by its product type hierarchy of binary (parent-child) relationships. Whereas this is one example based on a product type hierarchy, the VDF allows for simultaneous and inter-related multiple type hierarchies, as is explained in more detail in the following sections.","2.1 Multiple Hierarchies","As seen above in , concepts are related in a graph depicting product types. All the concepts in this graph are associated with one category of information in the enterprise data. That category is device product types, and that hierarchy relates concepts for products that are related in development history, structure or function. However, enterprise data may include other categories or relationships. In general, multiple categories encompass the enterprise data. For example, some of the enterprise data for an enterprise that manufactures and sells network devices are related to equipment solutions for common networking problems encountered by customers of the enterprise. Products of the enterprise that are unrelated by the hierarchy of  nevertheless may be useful to solve the same kind of customer problem. Thus, such products relate to the same solution. To reflect these relationships, enterprise data also are placed in a category called networking solutions in one embodiment, and are organized in a solutions hierarchy that exists concurrently with the product type hierarchy.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 2A","FIG. 2A","FIG. 2A","FIG. 1"],"b":["212","214","216","202","205","105"]},"As shown in the example of , the product GammaPerseus, at node , is part of the equipment solution for single server local networks of node . Both AlphaPerseus, at node  and Jason at node  are part of the equipment solution for wide area networks connecting two sites, at node . BetaPerseus 2.0, at node , and Hercules, at node , are part of the equipment solution for private wide area networks connecting three to eight sites represented by node . Nodes  and  represent software products Pegasus 3.3 and a graphical user interface (GUI) upgrade that are installed on the BetaPerseus 2.0 device in addition to the default software that comes with that device.","The concepts at nodes , , ,  maybe placed in a category called networking solutions. The concepts , , , ,  have already been placed in a category called enterprise device products; but they may also be placed in the category networking solutions. The concepts at nodes ,  may be placed in a category called software products and also in the networking solutions category.  demonstrates that hierarchies of concepts in categories of enterprise data may be defined in addition to the hierarchy of concepts in the product type category, and demonstrates that categories may overlap.","Alternatively, non-overlapping categories are used in other embodiments. In such an embodiment, the relationship represented by arrow  is expressed as a relationship of a sub-component to a component of a networking solution, in which the sub-component may be a different category than the component. Rules can be expressed for the relationship. One possible rule is: software can be a sub-component of hardware, but not the other way around. The relationship type enforces this rule by specifying the role for a category participant. Similarly, a product can be a sub-component of a networking solution category but not the other way around.","2.2 Non-Binary Relationships",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 2B"},"The characteristics of the relationship type describe the number of participants and their category or categories. In this example the relationship type includes characteristics that indicate there are three participants, one from the user category, one from the technology category and one from the product device category. In addition, the characteristics of this relationship include at least one relationship value for storing the quality of expertise (unknown, poor, average, good, excellent). More details on defining and storing concepts and relationships are given in a later section.","The conceptual graph of this relationship in  shows three nodes , ,  representing the three concepts, e.g., product BetaPerseus 2.0, technology private wide area network, and technician Jane, respectively. The three nodes are connected by a three-way, non-directional link . The link  includes an attribute named \u201cquality\u201d that takes on a value such as \u201cgood,\u201d indicating that Jane's expertise is good for using BetaPerseus 2.0 in private, wide area networks.","2.3 Documentation Category","Another category of concepts that is extremely useful to an enterprise, for both internal and external users, is documentation concepts, which encapsulate elements of electronic or tangible documents. Concepts within a documentation category include headings, sections, paragraphs, drawings, images, information type, and document type, among others. Information type concepts express the type of content in terms of what it says; for example, information type concepts include but are not limited to \u201cIntroduction,\u201d \u201cFeatures & Benefits,\u201d \u201cProduct Photo,\u201d \u201cExternal Article Section\u201d etc. Documentation concepts may be organized in a document type hierarchy that facilitates automatically generating accurate, complete, up-to-date visual or printed documentation pertaining to a particular product or service. Document type hierarchies include, for example, \u201cData Sheet,\u201d \u201cProduct Home Page,\u201d \u201cPress Release,\u201d \u201cOperator's Manual,\u201d and \u201cExternal Article.\u201d For example, a device, like the hypothetical Beta Perseus 2.0, can be linked by a relationship to a document type hierarchy describing the device, such as a \u201cPerseus 2.0. Operator's Manual.\u201d As another example, a device, like the Beta Perseus 2.0, can be linked by a relationship to a section concept in a document type hierarchy describing the networking solutions of which the device is a component, such as a \u201cSmall Business Networking Press Release.\u201d More examples of document categories of concepts are given in a later section.","2.4 Multiple Inter-Related Hierarchies","As seen in the above examples, a single concept, such as the device product BetaPerseus 2.0 may appear in several separate hierarchies. According to one embodiment, information defining the concept is stored only once in the VDF and relationships are defined to all other nodes to which the concept is adjacent in all the hierarchies.","Hierarchies may be implemented using a variety of programming techniques and data storage. One advantage of this approach is that changes to the concept can be made in only one location in the VDF and all hierarchies immediately become up-to-date and reflect the changes. This is also achievable at the database layer by using normalized tables. Further, all information generated based upon the hierarchies, such as documentation or screen displays, automatically reflects the changes.","Another advantage is that applications that retrieve the data can navigate one of the hierarchies to a particular concept and then immediately find the other hierarchies in which that concept occupies a node. Thus, a customer who has purchased a particular device product for one networking solution can determine other solutions that use that same device. The customer follows the current solution to the product and then reviews the relationships with other networking solutions of interest to the customer that utilize the device. When a networking solution of interest is found using the device, the newly found solution can be navigated above and below the node representing the device concept in order to determine what software and other devices, if any, are components and sub-components of the new solution. Further, the customer can search by solution and identify multiple products that can satisfy the solution. The customer can then inspect each of the products, obtain its documentation, and determine which product is best suited to the customer's particular needs. In some embodiments, such information is synchronized with the customer's online profile so that it is available for later reference and can be personalized.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 3","FIG. 1","FIG. 2A","FIG. 2B","FIG. 1","FIG. 2A"],"b":["302","304","306","308","390","310","312","301","322","324","390","332","334","321","391","390","346","356","346","344","342","341","356","354","352","351"]},"The BetaPerseus 2.0 concept at node  is linked to the following nodes in multiple inter-related hierarchies. The BetaPerseus 2.0 concept at node  is a product type child of the BetaPerseus 1.0 concept at node , as represented by arrow . The BetaPerseus 2.0 concept at node  is a product type parent of the BetaPerseus . concept at node , as represented by arrow , and the BetaPerseus 3.0 concept at node , as represented by arrow . The BetaPerseus 2.0 concept at node  is further a solutions type sub-component of the private wide area net (3 to 8 sites) concept at node , as represented by arrow . The BetaPerseus 2.0 concept at node  has solutions type sub-components of the Pegasus 3.3 software tools concept at node , as represented by arrow , and the management software GUI upgrade concept at node , as represented by arrow . The BetaPerseus 2.0 concept at node  has two companion expertise type participants as represented by link ; one at Jane represented by node  and one at private wide area networks represented by node . In all, the example concept at node  has 6 binary relationships and one ternary relationship with eight nodes in four hierarchies (product type, equipment solutions, users and technologies). Each of the concepts and relationships may be represented using stored data in a database or appropriate programmatic data structures.","Many of the other nodes in  may have relationships with other hierarchies in addition to the relationships shown. These other relationships are omitted so that  and this discussion are more clear. Multiple relationships similar to the examples listed for node  may be defined for these other nodes.","2.5 Root Concepts","At the top of each hierarchy for each category is a category root node representing the category root concept from which all the other concepts in the category branch. For convenience in navigating from one category to the next, each of the category root nodes is made a child of an enterprise data root node representing a top-level pseudo-concept for the enterprise data. In one embodiment, the pseudo-concept is \u201cVocabulary,\u201d and every node related to the Vocabulary concept by a direct \u201cchild of\u201d relationship is a root node representing a root concept for one category.","2.6 Implementation of the VDF",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 4A"},"According to one embodiment, the VDF is implemented in the form of one or more software elements that programmatically observe the following rules. The desired attributes of the VDS are derived from the Ontology model wherein the real world Objects are modeled as atomic concepts and relationships among the concepts.\n\n","In one embodiment, the VDS is configured in a way that offers good performance in terms of support for a large volume of simultaneous requests, extensibility and adaptability to new business requirements. The VDS provides security and internationalization support for concepts and relationships.","One embodiment uses a rule-base and declarative computation approach to express the concepts, relationships and rules of the VDF. This approach may be implemented using a high level computer programming language. In one embodiment, the approach is implemented using a logical processing language such as PROLOG\u2122. The high level logical processing language translates statements declaring types and statements expressing rules about combining types into another language, such as the C programming language, that can be compiled and run on a large variety of general-purpose computer platforms. This approach relies on the inference power of a declarative engine and reduces coding and implementation that may impose a performance penalty.","In another approach, the taxonomy of hierarchical concepts and their relationships can be modeled as an in-memory tree data structure.  is a diagram of a binary tree representation that can be modeled using one or more data structures stored in computer memory. This model captures the business logic and is supplemented with constraints placed on the data model as programming logic. One example of such rule could be \u201ca child concept should have one and only one parent.\u201d This approach is fast and efficient but has limitation that it uses up the main memory considerably. A file based or database based LRU (Least Recently Used) algorithm implementation would overcome this limitation.","Referring now to , each of the top-level nodes  under the Vocabulary pseudo concept node  is a Category node, which implements the additional business logic and facilitates fast lookup and retrieval of concept nodes. Similarly, Relation type node  implements additional constraints on the relationship instances and facilitates fast responses to queries of n-ary relationships. A performance response of approximately less than 1 millisecond is achieved by having appropriate indices in the Category and Relation Type nodes , . A simple Hash Map or a balanced tree data structure could model the in-memory index.","An example for retrieval could be as follows. Assume that the system receives a query getparticipants( ) with a set of arguments the identify participants in a set of relationships. The system is expected to return the matched relationship instances. One approach would be to go through each of the relationship instances and check for the match. When there are millions of instances, this would be slow. Accordingly, in a preferred approach, the following steps are followed to retrieve the information fast and efficient.","The system maintains an array of relationship instances for each of the participants on the system. The array of instances that have minimum index length is chosen given the query participants. Each element in the array is checked for a match by comparing the query participants and the relationship participants. This is quick and involves less computation. As an example, referring again to , a fictitious hierarchical model is shown. The Relation1 is a relation type that has index for each of the participant for all the relation instances. Example indices but provided few and the names are given as numbers for explanation.",{"@attributes":{"id":"p-0098","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Participant","Instances"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","54001, 54002, 54011, 54202, 54301, 54042"]},{"entry":["4","54000, 54001, 54042"]},{"entry":["8","54001, 54202, 54900, 54301, 56899, 63629"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Embodiments also provide flexibility and adaptability to the new requirement by having an Object Oriented Data Model, which can be implemented in any Object Oriented Language like C++ or Java.  is a diagram of a class hierarchy of an example object-oriented model, in which a class \u201cVDFNode\u201d is the base class that models the tree data structure. Because all the other nodes are inherited from VDFNode, flexibility is provided. For example, causing a Relation Type to have another Relation Type as participant, could be done by having the type participant as VDFNode.","The core classes of an example implementation of the VDS in the Java language are described here. The implementation is shown in Java language, however the implementation could be done in any higher-level programming language, e.g., C, C++, etc.","A ConceptName represents the name of a Concept, as in this code example:",{"@attributes":{"id":"p-0102","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public interface ConceptName extends Name {"]},{"entry":[{},"}"]},{"entry":[{},"public interface Name {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public String getName(\u2009);"]},{"entry":[{},"public void setName(String name);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"An Attribute class encapsulates a (Name, Value) pair, as in:"]},{"entry":[{},"public interface Attribute {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public Name getName(\u2009);"]},{"entry":[{},"public void setName(Name n);"]},{"entry":[{},"public Object getValue(\u2009);"]},{"entry":[{},"public void setValue(Object v);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A VDFNode class implements tree data structure and provides the basic tree operations. It also provides all the get, add and set APIs for attributes. However the set APIs pushes the action upwards in the tree hierarchy, which allows the calls to be trapped by the root level nodes, CategoryNode and RelationTypeNode for enforcing business logic and Access Control. An addChild method goes all the way up until it finds a Node that does checks and calls the actual add implementation_addChild( ) in VDFNode.",{"@attributes":{"id":"p-0104","num":"0138"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public abstract class VDFNode {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private VDFNode parent=null;"]},{"entry":[{},"private VDFNode firstKid=null;"]},{"entry":[{},"private VDFNode sibling=null;"]},{"entry":[{},"private int nodeID;"]},{"entry":[{},"private Set attributes=null;"]},{"entry":[{},"public void changeAttribute(Attribute attr) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ some implementation"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void addAttribute(Attribute attr) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ some implementation"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ more attribute related APIs"]},{"entry":[{},"public void addChild(VDFNode n) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setChild(this, n);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void setChild(VDFNode parent, VDFNode child) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VDFNode p=getParent( );"]},{"entry":[{},"if (p==null)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new Exception(\u201cbusiness logic not found in"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"the hierarchy\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"p.setChild(this, child);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"protected void _addChild(VDFNode n) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ imple.."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"protected void _removeChild(VDFNode child) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VDFNode prev=null;"]},{"entry":[{},"if (firstKid==child)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"firstKid=child.sibling;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else if ((prev=child.getPrevSibling( ))!=null)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"prev.sibling=child.sibling;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"child.sibling=null;"]},{"entry":[{},"child.parent=null;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/more APIs"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"A ConceptNode is a VDFNode and has a Normalized Name. Again a call to a set\/add method pushes the call up to the root node which sets\/adds the Object after the constraint checks.",{"@attributes":{"id":"p-0106","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public class ConceptNode extends VDFNode {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Concept concept=null;"]},{"entry":[{},"public void setConcept(Concept c) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setConcept(this, c);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void setConcept(ConceptNode node, Concept c) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VDFNode p=getParent(\u2009);"]},{"entry":[{},"if (p==null)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new Exception(\u201cbusiness logic not found in the"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"hierarchy\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (p.getType(\u2009)!=Constants.ConceptNode)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new Exception(\u201cInvalid node in the hierarchy\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"p.setConcept(node, n);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"protected void_setConcept(Concept c) {"]},{"entry":[{},"\/\/ this.concept=c;"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"A CategoryNode is a root node in taxonomy of concepts. It implements the business rules related to Concepts as stipulated in VDS rules. Here is an example: the setConcept( ) method is implemented here to check for duplicate Concept Name and to set the concept to the target ConceptNode, node. The root node implementation in CategoryNode and RelationTypeNode uses Read\/Write Lock Object for efficiency that allows multiple reader threads to go through, instead of Java synchronization that allows single reader thread to pass through the critical path.",{"@attributes":{"id":"p-0108","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public class CategoryNode extends ConceptNode implements Comparator {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"protected ReadWriteLock rwLock=new ReadWriteLock(\u2009);"]},{"entry":[{},"protected boolean ignoreCase=true;"]},{"entry":[{},"protected TreeMap concepts=null;"]},{"entry":[{},"public void setConcept(ConceptNode node, Concept c) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"rwLock.writeLock(\u2009);"]},{"entry":[{},"try {"]},{"entry":[{},"if (!concepts.contains(c.getName(\u2009))) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"concepts.put(c.getName(\u2009), node);"]},{"entry":[{},"node._setConcept(c);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"throw new Exception(\u201cConcept duplicate.\u201c);"]},{"entry":[{},"} finally {rwLock.releaseLock(\u2009);}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"RelationParticipant has a reference to a VDFNode and role name for the reference."},{"entry":"public class RelationParticipant {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private VDFNode participant=null;"]},{"entry":[{},"private String roleName=null;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"A RelationNode is the base class the relationship classes. It captures set Relation Participants with their Role Names. The field \u2018role_participants\u2019 is 2 dimensional array of (Role name, VDFNode). The class provides all the APIs for setting and getting the values in the collection.",{"@attributes":{"id":"p-0110","num":"0144"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public abstract class RelationNode extends ConceptNode {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private HashMap role_participants=null;"]},{"entry":[{},"public void addParticipant(RelationParticipant part) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setParticipant (this, part);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void setParticipant(RelationNode node, RelationParticipant"]},{"entry":[{},"part) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VDFNode p=getParent( );"]},{"entry":[{},"if (p==null)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new Exception(\u201cbusiness logic not found in"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"the hierarchy\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (p.getType( )!=Constants.RelationNode)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"throw new Exception(\u201cInvalid node in the"]},{"entry":[{},"hierarchy\u201d);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"p. setParticipant (node, part);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"protected void _setParticipant(RelationParticipant part) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ role _participants.put(part.getRole( ), part);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public class RelationTypeNode extends RelationNode {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private ReadWriteLock rwLock=new Read WriteLock( );"]},{"entry":[{},"private HashMap relations=new HashMap( );"]},{"entry":[{},"public void setParticipant (RelationNode node, RelationParticipant"]},{"entry":[{},"part) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"rwLock.writeLock( );"]},{"entry":[{},"try {"]},{"entry":[{},"List list=node.getParticipants( );"]},{"entry":[{},"list.add(part);"]},{"entry":[{},"if (existsRelation(list))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"throw new Exception(\u201crelation already exists with"]},{"entry":[{},"same participants.\u201d);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"node._setParticipant(part);"]},{"entry":[{},"VDFNode p=participant.getParticipant( );"]},{"entry":[{},"\/\/ build cache in advance"]},{"entry":[{},"List plist=(List)relations.get(p);"]},{"entry":[{},"plist.add(part);"]},{"entry":[{},"} finally {rwLock.unlock( );}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"2.6.1 Defining Concepts","In one embodiment, a statement declaring that the phrase BetaPerseus 2.0 is a concept is presented in a high level logical processing language by the expression:\n\n","The concept may have several attributes besides the phrase that defines it. For example the concept may have a creation date and an author. Attributes of a concept are presented with the following expression:\n\n","2.6.2 Defining Relationships","The relationships that constitute a hierarchy connect one concept to one or more other concepts. Relationships are defined with the following expression:\n\n","2.6.4 Persistent Data Storage","Changes in the VDS system need to be recorded on a permanent store for recovering and backup. VDS uses RDBMS for its persistent storage.  is a diagram of a data representation schema in the form of a fixed set of normalized tables that may be stored in persistent storage. The arrangement of  offers flexibility to model n-ary relationships and m by n level hierarchy. VDS system generates unique ID for each of the nodes as they are created in the system through adding a concept or relationship. These IDs are used as the primary keys in the database tables. The implementation commits the changes to the persistent store at specified interval as a batch update for enhancing performance. This must be accomplished at greater care to avoid loosing changes. This achieved by having a separate Thread that maintains the changes so as to update them to the persistent store at regular interval. The changes are written to transaction.dat, which accumulates the events as they happen in the system, and transaction_history.dat, which maintains the history of transaction files that are to be merged, and that are already merged successfully to the database. The format of the transaction.dat is: command!argument[!argument]* as shown below:",{"@attributes":{"id":"p-0118","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1018!270560607!status_date!2001 06 14 16:56:56"]},{"entry":[{},"1016!570560601!REL1!2"]},{"entry":[{},"1017!570560601!57067223"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"sub":"\u2014"},{"@attributes":{"id":"p-0119","num":"0160"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"+1018!270560607!deploy_status_date!2001 06 14 16:56:56"]},{"entry":[{},"+1016!570560601!Prod_PCR!2"]},{"entry":[{},"+1017!570560601!57067223"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0120","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"+\/opt\/httpd\/root\/apps\/mdf-sr\/7213copy\/2001\/6\/14\/16_56_yacs_tran.dat"},{"entry":"+\/opt\/httpd\/root\/apps\/mdf-sr\/7213copy\/2001\/6\/14\/17_57_yacs_tran.dat"},{"entry":"\u2009\u2009\/opt\/httpd\/root\/apps\/mdf-sr\/7213copy\/2001\/6\/14\/18_58_yacs_tran.dat"},{"entry":"\u2009\u2009\/opt\/httpd\/root\/apps\/mdf-sr\/7213copy\/2001\/6\/14\/19_58_yacs_tran.dat"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The Vocabulary Development Server (VDS) is one or more processes that provide management of and access to the enterprise data in the vocabulary database to other processes in an enterprise data processing system. Herein, the vocabulary database is also called the VDS Concept Database.",{"@attributes":{"id":"p-0122","num":"0163"},"figref":["FIG. 4A","FIG. 4F"]},"MAP is designed for performance enhancement over RMI based approach. MAP is language neutral protocol wherein the request and response are transmitted over TCP\/IP as tokens. The client application must know to assemble the tokens into the desired return result. The request format is:",{"@attributes":{"id":"p-0124","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Command_Identifier!Arguments_separated_by_!"]},{"entry":[{},"Example"]},{"entry":[{},"getChildConcepts!Category1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The response format is:"]},{"entry":[{},"If Request succeeds, the format is:"]},{"entry":[{},"+OK command_code"]},{"entry":[{},"<responses in single or multiple lines>"]},{"entry":[{},"<CRLF>"]},{"entry":[{},"If Request is failed, the format is:"]},{"entry":[{},"\u2212ERR!error_code!error_message_in single line"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"@"]}]}}]}}},"VDS is a knowledge repository for storing and establishing Cisco's standard for concept categorization and their relationships. To provide a controlled access and modification to the vocabulary, VDS implements two levels of security, Authentication and Authorization.","For Authentication, VDS supports simple username\/password authentication mechanism and will service MAP over SSL in the future. It can be configured to use LDAP service to validate the user. The server also supports generic accounts (for which usernames do not exist in LDAP) through its internal authentication module.","For Authorization, VDS supports access control on all the nodes. Access Control List (ACL) is modeled within VDS as a set of categories and relation types.  is a diagram illustrating relationships among an access control list and nodes of a tree of the type shown in . Permission on a node is granted to an action provided one the following is true:\n\n","2.6.6 Internationalization","The VDS system stores the names in double-byte character set. This achievable if the implementation language supports (like Java) or by taking care of it in the implementation by storing the name in appropriate data structure.","2.6.7 VDS Events","Events are the best way to have asynchronous communication to external parties like deploy process or client adapters. VDS uses an event mechanism to notify the registered clients about any change in the vocabulary data.  is a block diagram of a class hierarchy that may be used to implement an event mechanism, in one embodiment.","3.0 Information Object Repository (IOR)","According to one embodiment, the concept application  is an information object repository application. An information object repository (IOR) holds content for documents. For example, in this embodiment, the marketing document described above at URL address \u2018http:\/\/\/www.Enterprise.com\/Hello\/Chap2\/\u2019 is in the IOR. The content is stored and retrieved in units of data herein called information chunks. An IOR application produces documents, such as operating manuals, marketing documents, and Web pages for a Web site by combining one or more information chunks in the IOR. One or more IOR processes employed by the IOR application manage the IOR by relating the content in the IOR to one or more concepts in the concept database  and determine the information chunks to incorporate into documents based on one or more relationships in the concept database .","Using this technique, content originally unrelated and authored over time by many different persons and organizations can be related using the business vocabulary concepts and relationships in the VDS. Thus a person wishing to learn about the BetaPerseus 2.0 can use an IOR application to find all the manuals, press releases, and articles that describe it no matter when or by whom the document was written, as long as the content is registered with the IOR.","As another example, a system put together by a joint venture can produce a system document that uses descriptions of the components originally written independently by the joint venture partners. In addition, the information chunks supplied to a requestor can be tailored to the person making the request, for example, by providing more technical information to a technical user than to a marketing user. Furthermore, information chunks can easily be reused in several documents. For example, an introductory paragraph for the BetaPerseus 2.0 written for a marketing document can be used in a press release, a data sheet, and the home page for the BetaPerseus 2.0 on the Web site of the enterprise.","Embodiments are described herein in the context of examples involving generation of electronic documents in the form of Web pages. Embodiments are applicable to generation of any form of electronic document, and are not limited to use with Web sites or Web pages.","3.1 IOR Creation Layer","One set of IOR processes are used to manage the registration of information chunks into the IOR and the concept database. This set of IOR processes and the data storage for the IOR comprise the creation layer of the IOR, herein designated IOR-C.  is a block diagram illustrating the IOR-C of the IOR according to one embodiment.","In this embodiment, the IOR processes are invoked through an interface  for the IOR-C . For example, an application programming interface of the IOR-C interface  is invoked by a content generation application . In another example, an IOR administrator performs administration of the IOR through an administrator user interface of the IOR-C interface . In other embodiments the IOR processes execute under control of a standalone IOR batch or user-interactive application.","The IOR-C interface  includes methods to access the business vocabulary development server (VDS)  of the enterprise through the concept access API . As shown in , this embodiment of the VDS has an external concept access API  which uses a concept cache server  to speed retrievals from the VDS . The concept cache server  uses a cache memory to temporarily store a subset of the concepts and relationships in the concept database of the VDS ","The IOR-C interface  includes methods to store and retrieve information chunks in a content management system (CMS) such as in a local CMS  or over the network  in a remote CMS . A CMS includes persistent storage where an information chunk is stored. For example, persistent content store  includes information chunk .","A CMS is capable of managing a variety of types of information in each information chunk. For example an information chunk may comprise a block of text, an application program, a query for a database, a vector graphic, an image, audio data, video data, and other binary data. The block of text may be text that represents code for a compiler, such as C code, and formatted text, such as text in the Hypertext markup language (HTML) or in the extensible markup language (XML), as well as unformatted text using one of several character codes, such as ANSI one byte and Unicode four byte codes.","In some embodiments, the CMS comprises the local operating system directory structure. For example, different information chunks are simply kept in different files with different file extensions for the different types of data, and the files are organized into one or more directories in a hierarchy of directories and files. In another embodiment, the CMS is a database server for managing a database of information chunks.","It is not necessary that all the information chunks be in a single CMS on one computer device. Data integration tools  are commercially available for associating data in one CMS, such as CMS , with data in another CMS, such as remote CMS . Appropriate data integration tools also can associate data that is in any other location that can be referenced, i.e., any object that exists, whether it is in a CMS or not, i.e., LDAP directories, Web services, application versioning, network addresses from DNS, physical objects such as bar codes, etc. In the depicted embodiment, the methods of the IOR-C interface access the data integration tools . In an embodiment with all the information chunks stored in a single local CMS, the data integration tools  are not included, and the methods of the IOR-C interface access the local CMS  directly.","Each information chunk in the CMS is identified uniquely by an information chunk reference . Depending on the CMS employed, the reference may be a file name, a file name including one or more directories in the hierarchy of directories, a network resource address, a universal resource locator (URL) address, a record identification in a predetermined database, or a record identification in a predetermined content management system.",{"@attributes":{"id":"p-0146","num":"0190"},"figref":"FIG. 4B","b":["470","480","402","410","454","470"]},"The IOR-C interface  includes methods to manage the IOR by relating the information chunks in the CMS to one or more concepts in the concept database . The IOR-C interface includes methods to generate and retrieve information object concepts in the concept database associated with the information chunks. The IOR-C interface also includes methods to generate and retrieve relationships between the information object concepts and other concepts in the concept database.","3.2 Information Objects and Relationships","For each information chunk that is registered in the IOR  by a method of the IOR-C interface , a particular information object concept is added to the concept database of the VDS . In one embodiment, an information object category is added to a Vocabulary Table. The particular information object is a child of the information object category and is represented as a new row in an Information Object Table. The concept cache server  or concept access API  is invoked by the IOR-C method to add this concept to the database.","Table 1 lists sample entries in a hypothetical Information Object Table according to this embodiment. In this embodiment, the information object concept has a name that is the unique reference for the corresponding information chunk in the CMS. As shown in Table 1, the unique reference is a URL in this embodiment.",{"@attributes":{"id":"p-0151","num":"0195"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The Information Object Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Description","Creation Date"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["http:\/\/www.Enterprise.com\/","marketing document","Sep. 19, 2000"]},{"entry":["literature\/devices\/","for Perseus routers"]},{"entry":"catalog\/Chap2\/"},{"entry":["http:\/\/www.Enterprise.com\/","marketing document","Sep. 20, 2000"]},{"entry":["Hello\/Chap2\/","for Perseus routers"]},{"entry":["ftp:\/\/Enterprise.com\/","BetaPerseus introductory","Dec. 12, 2000"]},{"entry":["literature\/devices\/","paragraph for"]},{"entry":["Perseus\/Intro17.txt\/","silver partner"]},{"entry":[{},"marketing person"]},{"entry":["ftp:\/\/Enterprise.com\/","BetaPerseus 2.0","Apr. 12, 2000"]},{"entry":["literature\/devices\/","introductory paragraph"]},{"entry":["Perseus\/Intro5.txt\/","for technical person"]},{"entry":["http:\/\/Enterprise.com\/","BetaPerseus 2.0","Apr. 12, 2000"]},{"entry":["datasheets\/DS33\/","data sheet table"]},{"entry":["http:\/\/Enterprise.com\/","Jason data sheet table","Apr. 12, 2000"]},{"entry":"datasheets\/DS12\/"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Adding the information object concept to the concept database links the concept database to an information chunk in the CMS, but this action alone does not relate one information chunk to another. Once a particular information object concept has been added to the concept database, a relationship is formed with one or more other concepts in corresponding other hierarchies. As each information chunk has an information object concept added to the database and linked to another concept, relationships between the information chunks are implied by the relationships between the corresponding concepts.","For example, an instance of a \u201chas info object\u201d relationship type is added to the database to relate at least one product concept to each information object added. These relationships relate the first and second information objects in Table 1 to the Perseus concept in the product hierarchy, the third information object to BetaPerseus concept, the fourth and fifth information objects to the BetaPerseus 2.0 concept, and the sixth information object to the Jason concept in the product hierarchy. Since both the fourth and fifth information objects are related to the same product concept, by implication the information objects are related to each other. In this way, the information chunks referenced by URLs \u201cftp:\/\/Enterprise.com\/literature\/devices\/Perseus\/Intro5.txt\/\u201d and http:\/\/Enterprise.com\/datasheets\/DS33\/are related by implication, and can reasonably be placed in the same document in some circumstances. In this example, the two information chunks referenced by the fourth and fifth information objects are closely related even though those two information chunks reside in the CMS in entirely different levels of different subdirectories in the Enterprise.com directory.","Similarly, since BetaPerseus 2.0 is a child of BetaPerseus and BetaPerseus is a child of Perseus in the product hierarchy, the corresponding information objects are implied to share this same hierarchical relationship. Thus one can navigate among the information objects, and their associated information chunks, using the relationships among the concepts related to the information objects. These techniques allow the rich collection of relationships in the concept database to provide organization for the information chunks stored in the CMS.",{"@attributes":{"id":"p-0155","num":"0199"},"figref":"FIG. 5"},"A particular information object concept  is a child of information object category  by the information object child of relationship indicated by arrow . The particular information object  is a participant in a 5-ary \u201chas info object\u201d relationship indicated by the five-pronged connection . This \u201chas info object\u201d relationship involves a concept  of the product hierarchy as in the above example, but also involves other concepts. The \u201chas info object\u201d relationship also involves a concept  in an information type hierarchy and two concepts in a \u201cuser profile\u201d hierarchy, one a child concept  of a job role concept , and the other a child concept  of a partner level concept . These other concepts and hierarchies are described in more detail next. The 5 participant \u201chas info object\u201d relationship specifies that a particular information chunk provides a particular information type about a particular product in the product hierarchy of interest to a person playing a particular job role for a particular level of partner to the enterprise.","Introduction concept  is a child of an \u201cinfo type\u201d category  by the \u201cinfo type child of\u201d relationship indicated by arrow . According to this embodiment, various documents generated from the information chunks use or reuse one or more concepts of the \u201cinfo type\u201d category. The \u201cinfo type\u201d hierarchy is a one level hierarchy below the \u201cinfo type\u201d category as the root concept. Every different info type concept is a child of the \u201cinfo type\u201d root concept. The \u201cinfo type\u201d concepts include \u201cIntroduction,\u201d \u201cFeatures and Benefits,\u201d \u201cProduct Photo,\u201d \u201cSchematic Drawing,\u201d \u201cOperational Properties,\u201d \u201cData Sheet Table,\u201d and \u201cExternal Article Section,\u201d among others.","Each concept of the \u201cinfo type\u201d hierarchy is related to one or more concepts in a \u201cdocument type\u201d hierarchy by a \u201chas_docinfo\u201d relationship indicated in  by the double arrow . A \u201cposition\u201d attribute of the \u201chas_docinfo\u201d relationship indicates where the information chunk corresponding to the information object is placed relative to information chunks corresponding to other information objects in the document. The \u201cdocument type\u201d hierarchy is a one level hierarchy below the \u201cdocument type\u201d category as the root concept. Every different document type concept is a child of the \u201cdocument type\u201d root concept. The \u201cdocument type\u201d concepts include \u201cMarketing Document,\u201d \u201cProduct Home Page,\u201d \u201cData Sheet,\u201d \u201cPress Release,\u201d \u201cOperator's Manual,\u201d and \u201cExternal Article,\u201d among others.","The \u201chas_docinfo\u201d relationship, such as , provides a specific organization of information chunks to produce a particular document of a given document type. For example, a product marketing document type is a participant in four \u201chas_docinfo\u201d relationships, one each with a \u201cProduct Photo\u201d information type concept having a position attribute value \u201cfirst,\u201d an \u201cIntroduction\u201d information type concept having a position attribute value \u201csecond\u201d, a \u201cFeatures and Benefits\u201d information type having a position attribute value \u201cthird\u201d and an \u201cOrdering\u201d information type having a position attribute value \u201cfourth.\u201d For another example, a product home Web page document type is a participant in five \u201chas_docinfo\u201d binary relationships, one each with a \u201cProduct Name Heading\u201d information type in a first position, a \u201cIntroduction\u201d information type in a second position, a \u201cList of Other Info Types for Concept\u201d information type in a third position, a \u201cList of Other Documents for Concept\u201d information type in a fourth position, and a \u201cList of Next Concepts in Hierarchy\u201d information type in the fifth position. The last three information type concepts do not need information objects to provide the content for the Web page document type, because these lists can be derived from the relationships in the VDS for a given concept. By tying information object concepts indirectly to document type concepts through information type concepts, a particular information chunk can be reused in more than one document.","Marketing role concept  is a child of a \u201cjob role\u201d concept  which is a child of a \u201cuser profile\u201d category  by the \u201cuser profile child of\u201d relationship indicated by arrows and , respectively. According to this embodiment, the content in an information chunk for a particular information type for a particular product depends on the job role of the person who is reading the document. The content is expected to be different for a person in a marketing role, concept , than one in a technical role, concept , or even one in a sales role, concept , which may represent some mixture of the content provided for the two other roles. These other job roles are also children of the job role concept . Still other job role children concepts are defined in other embodiments. For example, a \u201cdefault\u201d concept child of the \u201cjob role\u201d concept  is used for a person who does not play a particular role. This person is treated as an uninitiated member of the general public.","Silver partner concept  is a child of a \u201cpartner level\u201d concept  which is a child of a \u201cuser profile\u201d category  by the \u201cuser profile child of\u201d relationship indicated by arrows and , respectively. According to this embodiment, the content in an information chunk for a particular information type for a particular product depends on the kind of partner to the enterprise is the corporate employer of the person who is reading the document. A gold partner, represented by concept , is an entity or affiliate treated as any other member of the enterprise itself. A silver partner, represented by concept , has some favorable access to information. A default partner, represented by concept , has no formal relationship with the enterprise and is treated as a member of the general public. The content is expected to be different for partners at the different levels. These particular partner levels are all children of the \u201cpartner level\u201d concept . Still other children concepts are defined in other embodiments.","Table 2 gives the entries in the relationship type table for the relationship depicted in  by connection . Table 3 gives the entries in the participant type table for the relationship depicted in  by connection .",{"@attributes":{"id":"p-0163","num":"0207"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The \u201cHas Info Object\u201d Entries in Relationship Types Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Relationship",{},"Number of",{}]},{"entry":["Type Name","Description","Participants","Creation Date"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["has_info_object","references content","5","Apr. 12, 2000"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0164","num":"0208"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The \u201cHas Info Object\u201d Entries in Participant Types Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Relationship Name","Role","Participant Type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"has_info_object","info_object","info_object"]},{"entry":[{},"has_info_object","info_type","info_type"]},{"entry":[{},"has_info_object","concept","Vocabulary"]},{"entry":[{},"has_info_object","job_role","job_role"]},{"entry":[{},"has_info_object","partner_level","partner_level"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The particular instance of the \u201chas info object\u201d relationship depicted in  specifies that a particular information chunk referenced by a particular information object  provides an \u201cIntroduction\u201d info type about the BetaPerseus 2.0 product of interest to a person playing a marketing role for a silver level partner to the enterprise.","To manage a plurality of information chunks, the IOR-C interface provides methods for defining the information object type, for setting the attributes of a concept of the information object type, for defining the \u201chas info object\u201d relationship type involving the information object type, and for setting the attributes of a particular relationship of the type.","5.3 Method of Managing Information Objects",{"@attributes":{"id":"p-0168","num":"0212"},"figref":"FIG. 6A","b":"601"},"In step , a method of the IOR-C interface receives an information chunk, such as a block of text. In step , the information chunk is sent to the content management system (CMS) for storage and a unique identification for the chunk is returned by the CMS to use as a reference for retrieving the information chunk from the CMS. For example, the reference may be the URL of a file in which the information hunk is stored.","In step , the method of the IOR-C invokes a method of the concept access API or the concept cache server to instantiate a particular information object of the information object category with a name of the unique reference. A description attribute of the particular information object is set to a text string that describes the information in the information chunk or left blank.","In step  the information chunk is associated with a concept in the concept database, an information type, a job role and a partner level. In one embodiment, a user, such as a subject matter expert, is prompted for this information. In another embodiment, the information is provided with the information chunk itself. In yet another embodiment this information is derived from information provided with the information chunk or in the information chunk by the content generation application ( in ). In one embodiment, the description attribute of the particular information object concept is edited to reflect this information.","In step  the method of the IOR-C interface invokes a method of the concept access API or the concept cache server to instantiate a particular relationship of the \u201chas info object\u201d relationship type in the concept database of the VDS .",{"@attributes":{"id":"p-0173","num":"0217"},"figref":"FIG. 6B","b":"620"},"In step  the method receives a request for a particular information type for a particular concept. For example, the request includes data indicating an \u201cIntroduction\u201d information type is desired for the \u201cBetaPerseus 2.0\u201d product.","In step  the method generates a string naming the relationship type that has an information object as a participant. In this example that string contains the relationship type named \u201chas_info_object.\u201d","In step  the method of the IOR-C interface invokes a method of the concept access API or the cache server to get participants of each instance of the relationship involving the concept. For example, the method of the IOR-C interface invokes a method named \u201cgetParticipants\u201d of the concept access API to get participants of each instance of the \u201chas_info_object\u201d relationship involving the concept \u201cBetaPerseus 2.0.\u201d In step  the method receives an array of strings giving the relationship instance identification (rID) and the participant concepts in the relationship instance. For example, the array of three instances of the \u201chas_info_object\u201d relationship listed in Table 4 is received.",{"@attributes":{"id":"p-0177","num":"0221"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Instances of \u201chas_info_object\u201d Relationship Returned"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["RID","Role","Participant"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["1117","info_object","ftp:\/\/Enterprise.com\/literature\/devices\/Perseus\/"]},{"entry":[{},{},"Intro5.txt\/"]},{"entry":["1117","info_type","Introduction"]},{"entry":["1117","concept","BetaPerseus 2.0"]},{"entry":["1117","job_role","Technical"]},{"entry":["1117","partner_level","Default"]},{"entry":["4567","info_object","http:\/\/Enterprise.com\/datasheets\/DS33\/"]},{"entry":["4567","info_type","Data Sheet Table"]},{"entry":["4567","concept","BetaPerseus 2.0"]},{"entry":["4567","job_role","Default"]},{"entry":["4567","partner_level","Default"]},{"entry":["9877","info_object","ftp:\/\/Enterprise.com\/literature\/devices\/Perseus\/"]},{"entry":[{},{},"Intro27.txt\/"]},{"entry":["9877","info_type","Introduction"]},{"entry":["9877","concept","BetaPerseus 2.0"]},{"entry":["9877","job_role","Marketing"]},{"entry":["9877","partner_level","Silver"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In step , this list is filtered to remove those relationships not involving the information type indicated in the request. For example, the relationship instance with rID equal to 4567 is removed because it is not an \u201cIntroduction\u201d information type concept specified in the example request. In step  the filtered instances of the relationship are returned to the requesting process. For example, the array of Table 16 is returned with the lines for rID of 4567 absent.",{"@attributes":{"id":"p-0179","num":"0223"},"figref":"FIG. 6C","b":["640","642"]},"In step  the method  invokes a method to return the participants in the relationship instances involving an information object concept, the specified concept, and the specified information type concept. As a result, an array of participants for any instances of such a relationship is returned. For example, the method  invokes the method  to return the participants in the \u201chas_info_object\u201d relationship instances involving the \u201cBetaPerseus 2.0\u201d concept and the \u201cIntroduction\u201d information type concept. As a result the array listed in Table 16, excluding the rows with rID of 4567, is returned.","In step , the returned array is filtered to remove instances that do not match the user associated with the request. For example, the rows of Table 16 having an rID of 1117, which involve the technical job role, are eliminated because the user associated with the request is a marketing person, not a technical person. Only the rows with an rID of 9877 remain.","In step , the references to the information chunks are taken from the particular information object participants in the filtered instances. For example, the URL \u201cftp:\/\/Enterprise.com\/literature\/devices\/Perseus\/Intro27.txt\/\u201d is obtained from the information object participant in the only remaining relationship instance, the instance having rID 9877.","In step , the method of the IORC interface requests the information chunk having the reference from the content management system. For example, the IOR-C interface requests from the CMS the information chunk having the URL \u201cftp:\/\/Enterprise.com\/literature\/devices\/Perseus\/Intro27.txt\/.\u201d In step , the retrieved information is received and returned to the requesting process.","As described above, the IOR-C interface provides methods for storing information content, for generating and storing an information object associated with the information content, for retrieving an information object, and for retrieving the information content associated with an information object. As described below, other layers of the IOR are generated and used with other interfaces to support fast, dynamic document production based on the concepts and relationships in the vocabulary development server (VDS) and the content in the content management system (CMS).","5.4 Multiple Layer IOR",{"@attributes":{"id":"p-0186","num":"0230"},"figref":"FIG. 7","b":["782","782","782","784","784"],"i":["a ","b ","c ","a","b"]},"Transform process  obtains information from the IOR-C layer  using the IOR-C layer interface  and generates the IOR-M layer using the IOR-M layer interface . The IOR-M layer includes a content cache , a concept cache , and a concept cache server . A management layer tool  also uses the IOR-M interface to allow a user to view and edit the information chunks, concepts and relationships in the IOR-M ","The content cache is a data store that includes a subset of the information chunks stored in the CMS of the IOR-C layer. Information chunks that have become obsolete or that are not yet released are excluded from the content cache . Also excluded are information chunks that are not used by the electronic documents to be produced. Some information chunks of the CMS are combined into a single chunk in the content cache , if doing so is expected to enhance efficiency of use. For example, information chunks that are always used together in the documents to be produced may be combined into a single information chunk in the content cache ","The concept cache is a data store that includes a subset of the concepts and relationships stored in the concept database. The concept data from the concept database is de-normalized in the concept cache to improve speed of retrieval by allowing a concept that participates in more than one relationship to be stored more than once in the concept cache. For example, an information type concept is stored with other information type concepts in the information type hierarchy and again with each document type that includes the information type. Thus, when a document is generated, a full description of the information types is with the document type, reducing time needed to retrieve such data from the concept cache.","The management layer concept cache server provides access to the concepts and relationships in the management layer concept cache . The cache servers  in all the layers support the same methods provided by the concept access API, but each cache server  operates on the concept cache  in the same layer.","The deploy process  obtains information from the IOR-M layer using the IOR-M layer interface and generates the IOR-S layer using the IOR-S layer interface . The IOR-S layer includes a second content cache , a second concept cache , and a second concept cache server . A quality assurance application, such as the model electronic document generator , uses the IOR-S interface to allow a user to test the IOR-S layer for its suitability for generating documents to be provided in a later stage. For example, the IOR-S layer is tested using the IOR-S interface to ensure that all information chunks in the content cache have an information object concept in the concept cache and that the information object concept has a relationship with at least an information type concept. As another example, authors use the IOR-S interface to view the information chunks and determine that the information is correct for the concepts to which the information chunks are related by a corresponding information object.","A model electronic document generator  also uses the IOR-S interface to allow a Web site developer to generate, view and edit the electronic documents to be provided by the Web server. In the course of operations the model electronic document generator  produces a search index , a directory structure for storing electronic documents produced, and static electronic documents that do not depend on the user profile of the user viewing the page.","The replicate process  obtains information from the IOR-S layer and reproduces it in a fast, Web server layer, IOR-F, on each of one or more Web servers, such as Web server . The IOR-F layer includes a third content cache copied from the second content cache , a third concept cache copied from the second concept cache , and a third concept cache server . The search index , directory structure and static pages are also replicated as search index , directory structure and static pages , respectively, on each of the Web servers, such as Web server .","An electronic document generator  produces electronic documents  in response to requests from client . The electronic document generator  uses the search index , the directory structure , the static pages , and the IOR-F layer in any combination to produce the electronic documents . As described in more detail in the next section, when a user selects a concept with content that depends on the user profile, the electronic document generator uses the concept cache server to determine information types in the electronic document type, and the information objects related to the information types for the selected concept. The electronic document generator then retrieves the information chunks from the content cache using the URL reference from the information object.","Also shown on Web server  is a web application  that may be requested through the electronic documents .","In the following sections, the use of the IOR-F layer is first described to illustrate the dynamic document production to be supported by the multiple layer IOR. Then the use of the IOR-M and IOR-S layers are described to show how those layers support the formation of the IOR-F layer.","5.5 IOR Web Server Layer (Fast Layer)",{"@attributes":{"id":"p-0198","num":"0242"},"figref":"FIG. 8A","b":["810","782"],"i":"c "},"In step , a user profile is obtained, such as when a client  operated by a user contacts the Web server  and logs on. A default user profile is used if the Web server does not require or provide a user log-in process. A list of concept categories available through the site is presented on a static electronic document returned to the client. The static electronic document is found using the directory structure of the Web server .",{"@attributes":{"id":"p-0200","num":"0244"},"figref":"FIG. 8B","b":"820"},"In step  data is received from the client process indicating a concept selected by the user. The concept selected is the concept whose home electronic document is to be produced. For example, the data may indicate the user has selected a Product root concept so that a Product root concept home Web page is to be produced. In an alternative example, the data may indicate the user has selected the BetaPerseus 2.0 concept so that a BetaPerseus 2.0 home Web page is to be produced. In one embodiment, the electronic document generator finds the information types that constitute a concept home page document from the concept cache server and finds that it includes five information types, as listed above; namely, a \u201cProduct Name Heading\u201d information type in a first position, an \u201cIntroduction\u201d information type in a second position, a \u201cList of Other Info Types for Concept\u201d information type in a third position, a \u201cList of Other Documents for Concept\u201d information type in a fourth position, and a \u201cList of Next Concepts in Hierarchy\u201d information type in the fifth position.","In step , the information chunks for the page are retrieved. For example, the information chunk associated with the \u201cIntroduction\u201d information type for the BetaPerseus 2.0 concept for the job role and partner level in the user profile of the user is retrieved. In one embodiment the method  illustrated in  is invoked from the concept cache server in the IOR-F layer.","In another embodiment, the concept cache server determines the information object related to the concept, information type and user and returns the URL of the information chunk from the information object, and the electronic document generator retrieves the information chunk based on the URL returned. For example the concept cache server returns the URL \u201cftp:\/\/Enterprise.com\/literature\/devices\/Perseus\/Intro27.txt\/\u201d and the electronic document generator retrieve the information chunk stored at that URL.","In the example embodiment, the Product Name Heading information type is based on the concept name and does not require an information chunk be retrieved. Similarly, the list of other information types and other documents for the concept and user depend on information in the concept cache and also do not require an information chunk be received.","In step  the other information types for this concept that have information objects are retrieved from the concept cache server based on the concept cache to supply the list of other information types for the electronic document. The user may later be allowed to retrieve any of the information chunks for the information types listed on this page. For example, the other information types that have information objects for BetaPerseus 2.0 for the silver partner marketing user are returned, such as a \u201cData Sheet Table\u201d and a \u201cFeatures and Benefits\u201d information type. If an information object is not related to an information type, that information type is not listed. For example, if a \u201cProduct Photo\u201d is not available for this product for this user, then the \u201cProduct Photo\u201d is not included in the list of available information types.","In step  the other document types for this concept that have information objects are retrieved from the concept cache server based on the concept cache to supply the list of other documents for the electronic document. The user may later be allowed to retrieve any of the documents listed on this page. For example, the other document types that have information objects for BetaPerseus 2.0 for the silver partner marketing user are returned, such as a \u201cData Sheet\u201d and a \u201cMarketing Document\u201d document type. If an information object is not related to every information type of a document type, that document type is not listed. For example, if a \u201cPress Release\u201d is not available for this product for this user, then the \u201cPress Release\u201d is not included in the list of available document types.","In step  an electronic document  is generated for the concept home electronic document and sent to the client . This step includes finding the next concepts in the hierarchy by requesting them from the concept cache server. The concept home electronic document comprises a concept name as a title, information from the information chunk associated with the \u201cIntroduction\u201d information type, a selectable list of other information types, a selectable list of other document types, and a selectable list of the next concepts in the hierarchy. For example, the BetaPerseus 2.0 home electronic document includes the title \u201cBetaPerseus 2.0\u201d, the Introduction information chunk stored in URL \u201cftp:\/\/Enterprise.com\/literature\/devices\/Perseus\/Intro27.txt\/\u201d, a list of other available info types including \u201cData Sheet Table\u201d and \u201cFeatures and Benefits,\u201d a list of available document types including \u201cData Sheet\u201d and \u201cMarketing Document,\u201d and a list of the next concepts in the Product hierarchy, \u201cBetaPerseus 2.4\u201d and \u201cBetaPerseus 3.0.\u201d",{"@attributes":{"id":"p-0208","num":"0252"},"figref":"FIG. 8C","b":"840"},"In step , the method receives data indicating a user selection of a particular information type for the concept. In step , the method uses the concept cache server to find the information object related to the concept, user, and information type. The concept server cache returns the information object identified by the unique URL reference to the information chunk in the content cache. For example, the concept cache server is used to find the information object related to a \u201cFeatures & Benefits\u201d information type for the \u201cBetaPerseus 2.0\u201d concept for a marketing role person of a silver partner. The concept server cache returns an information object identified by the URL, such as \u201cftp:\/\/Enterprise.com\/marketing\/Fand B44.txt\/\u201d, the unique reference to the information chunk in the content cache.","In step , the URL returned to the electronic document generator is used to retrieve the information chunk. For example, the information chunk in \u201cftp:\/\/Enterprise.com\/marketing\/Fand B44.txt\/\u201d is retrieved. In step , an electronic document is generated that includes the information chunk, and the electronic document is sent to the client process. For example an electronic document  showing the features and benefits of the BetaPerseus 2.0 of interest to a marketing person of a silver partner is produced and sent to client .",{"@attributes":{"id":"p-0211","num":"0255"},"figref":"FIG. 8D","b":"860"},"In step , the method receives data indicating a user selection of a particular document type for the concept. In step  the method uses the concept cache server to find the information types included in this document type. For example, the Data Sheet document type includes the \u201cIntroduction\u201d information type and the \u201cData Sheet Table\u201d information type. In step , the method uses the concept cache server to find the information objects related to the concept, user, and information types. The concept server cache returns the information objects identified by the unique URL references to the information chunks in the content cache. For example, the concept cache server is used to find the information objects related to an \u201cIntroduction\u201d information type and a \u201cData Sheet Table\u201d information type for the \u201cBetaPerseus 2.0\u201d concept for a marketing role person of a silver partner. If a information object is not available for the specific role or partner a default role or partner or both is used in this embodiment. The concept server cache returns information objects identified by their URLs, such as \u201cftp:\/\/Enterprise.com\/literature\/devices\/Perseus\/Intro25.txt\/\u201d and \u201chttp:\/\/Enterprise.com\/datasheets\/DS33\/\u201d, the unique references to the information chunks in the content cache.","In step , the URLs returned to the electronic document generator are used to retrieve the information chunks. For example, the information chunks in \u201cftp:\/\/Enterprise.com\/literature\/devices\/Perseus\/Intro25.txt\/\u201d and \u201chttp:\/\/Enterprise.com\/datasheets\/DS33\/\u201d are retrieved. In step , an electronic document representing the document is generated that includes the information chunks, and the electronic document is sent to the client process. For example a Data Sheet electronic document showing the Introduction for the BetaPerseus 2.0 and a Data Sheet Table for the BetaPerseus 2.0 of interest to a marketing person of a silver partner is produced and sent to client ",{"@attributes":{"id":"p-0214","num":"0258"},"figref":"FIG. 8E","b":"880"},"In step , the method receives the search term from a particular user having a user profile, such as a visitor profile. In step , the electronic document generator uses the search index to find the search term. The index provides a list of information objects in the concept cache for each term. Use of index is one option to translate a search query that may have alternative forms. Alternatively, such translation may occur through one or more programmatic function calls to methods of an application programming interface. In step , if the search term is found in the index, then the information objects listed for the found term are retrieved by the electronic document generator.","In step , the concept cache server is used to determine the concepts and users related to the found information objects, and the information objects are filtered to remove the information objects related to users that do not match the user profile of the user requesting the search. In this context, an information object for a default job role or default partner match the role and partner, respectively, of the user making the request.","In step , the electronic document generator produces an electronic document displaying the search term and listing the concepts related to the filtered information objects, and for each concept lists the names of the filtered information objects related to the concept. In an alternative embodiment, the information types related to the filtered information objects are listed in lieu of or along with the names of the filtered information objects.","For example, a search on the term \u201cSuperPerseus\u201d may find the term in the index along with a particular information object associated with the information chunk containing the section of the article that coined the term. If the particular information object were generated and related to users in default job roles and default partner levels in the IOR-C level, then the electronic document produced would display the search term \u201cSuperPerseus\u201d and display the concept \u201cBetaPerseus 2.5\u201d and list the information object, such as \u201chttp:\/\/TechJournal.com\/V9\/Issue11\/article2\/\u201d, and an information type, such as \u201cExternal Article Section.\u201d",{"@attributes":{"id":"p-0219","num":"0263"},"figref":"FIG. 8F","b":"891"},"In step , the electronic document generator receives data from the client  indicating the user's selection of a particular information object. In step , the electronic document generator retrieves the information chunk stored in the content cache at the URL address of the information object. In step , the electronic document generator produces an electronic document displaying a concept name, an information type name, and the information chunk and sends the electronic document to the client process  for display to the user. This step may include retrieving the concept and information type related to the information object from the concept cache server. For example, if the user selects the \u201chttp:\/\/TechJournal.com\/V9\/Issue11\/article2\/\u201d information object on the search results electronic document, the user is then presented with an electronic document showing \u201cBetaPerseus 2.5\u201d \u201cExternal Article Section\u201d and one or more formatted paragraphs from the article coining the phrase \u201cSuperPerseus.\u201d","Using the IOR-F layer, an electronic document generator can produce dynamic electronic documents tailored to a particular user based on content in the content cache, arranging the content on the electronic document based at least in part on data in the concept cache.","5.6 IOR Management Layer",{"@attributes":{"id":"p-0223","num":"0267"},"figref":["FIG. 9A","FIG. 7","FIG. 7"],"b":["772","772","773"]},"In step , data indicating a range of users, dates and categories of concepts are received that help determine which documents are to be generated in the IOR-F layer. For example, the data received may indicate that only documents about products and services will be produced in the IOR-F layer, not documents about research projects or joint ventures. This information helps determine the subset of concepts and content to be moved to the management layer.","In step , the next concept is retrieved from the IOR-C layer interface , which invokes a method of the concept access API ( in ) or the concept cache server ( in FGI. B). In the alternative embodiment shown, the transform process accesses the concept cache server  directly rather than through the IOR-C layer interface . In an embodiment using the management tool  the next concept is retrieved by invoking a method of the IOR-M layer interface . The first time step  is performed a first concept retrieved from the IOR-C layer interface is the \u201cnext\u201d concept.","In step , the information chunks associated with the concept are retrieved from the IOR-C layer interface . In one embodiment this involves invoking a method of interface  that returns all the participants in a \u201chas_info_object\u201d relationship with the concept. Then, the unique reference in each info object participant is used to retrieve the associated information chunk.","Step  represents a branch point at which it is determined whether the information chunk is beyond the range of users, dates and categories of concepts that are the topics for the documents to be produced in the IOR-F layer. Step  also represents the branch point for determining whether the information chunk is obsolete or not yet released for distribution in documents to users. If all the information chunks are beyond the range or obsolete or pre-release, then control passes to step . Otherwise control passes to step .","In step  the concept is added to the management layer concept cache as part of a hierarchy of concepts in a denormalized mode, such as by repeating the same concept for each relationship that involves the concept. Control then passes back to step  to process the next concept.","In step , the subset of information chunks that are not out of range or obsolete or pre-release are added to the management layer content cache . The position of the information chunk is likely changed; therefore the reference that uniquely identifies the chunk for retrieval has likely changed also. In some cases two or more information chunks from the IOR-C layer are combined into a single information chunk for the management layer content cache. Each information chunk of the subset is stored with its new references, e.g. its new ID, in the content cache.","In step , the concept is added to the management layer concept cache as part of a hierarchy of concepts in a denormalized mode. An information object concept is added using the new ID as a new reference. One or more relationships involving the information object and another concept are also added to the management layer concept cache.","In step  a search index is generated with a variety of terms from the information chunk. For each term in the information object a term is found in the index, or added to the index if not already there. Then the name of the information object is added to a list of information objects for the found term, or starts the list of information objects for the added term. In many embodiments, the information object name is the unique reference to the associated information chunk. In other embodiments, the search index is not generated in the transform process  but is performed using the management tool . In still other embodiments, the search index is not generated in the IOR-M layer, but instead in the IOR-S layer.","After step , control passes back to step  to retrieve the next concept.","Using these techniques, streamlined subsets of the information chunks in the CMS and the concepts and relationships in the concept database of the VDS are formed and managed, including being viewed and edited, to expedite the dynamic production of documents.","5.7 IOR Staging Layer",{"@attributes":{"id":"p-0235","num":"0279"},"figref":"FIG. 9B","b":["774","782","944","740","784","946","778","784"],"i":["b","a ","a","a ","a"]},"In step  the information chunk is stored using the IOR-S layer interface in the staging area content cache with a new unique reference in the form of a relative URL in a directory structure. In other embodiments, the URL is an absolute URL address for the intended storage when replicated to a IOR-Fast layer on one or more Web servers. In still other embodiments, the relative URL is assigned in a separate process, such as the model electronic document generator process , after the information chunks are stored in the IOR-S layer . In step , the current concept is stored in its concept hierarchy in the staging layer concept cache and the information object with the new reference is also stored in the staging layer concept cache using the IOR-S layer interface ","If a search index was generated with the data in the management layer, that index is also copied in step , changing the information object name to reflect the new unique reference, such as the new information chunk ID, in some circumstances.",{"@attributes":{"id":"p-0238","num":"0282"},"figref":["FIG. 9C","FIG. 9C"],"b":["775","782"],"i":"b"},"In step  a model electronic document generating process generates and previews Web pages for the Web site, including forming a directory structure that can be replicated to each of the Web servers that host the Web site, and a search index , if one has not yet been formed. The content for these model pages are obtained from the IOR-S layer using the IOR-S layer interface for modifying the content and concept caches, and using the concept cache server to retrieve the relationships and concepts that define documents and that point to the information chunks in the content cache.","In step , static pages for the Web site are generated. The static pages do not depend on the user profile of the user operating the client process  requesting the page. The content for these model pages are obtained from the IOR-S layer using the IOR-S layer interface for modifying the content and concept caches, and using the concept cache server to retrieve the relationships and concepts that define documents and that point to the information chunks in the content cache.","In step , the IOR-S layer interface is used to determine that every information chunk in the content cache has an information object in the concept cache and is related to at least one other concept in the concept cache. An information chunk can be orphaned, e.g., left without an information object and relationship, if a concept or information object is deleted from the concept cache. If orphaned, an information object referencing the chunk and at least one relationship to another concept are added to the concept cache using the IOR-layer interface.","In step , information chunks are viewed by authors or experts and edited if incorrect or insufficient for the information type, concept or user to which they are related, using the IOR-S layer interface.","In step , the computational resources employed to dynamically generate Web pages for the Web site are measured to determine if a new arrangement of concepts in the concept cache or information chunks in the content cache is worthwhile.","In step , the index entries in the search index are tested for currency and edited by authors or experts if no longer deemed appropriate for the edited content cache or concept cache.","Using these techniques, the content cache, concept cache, search index, directory structure, and static pages are formed, reviewed and honed in the IOR-S layer for supporting the correct, rapid, and dynamic production of Web page based documents.","Once generated, reviewed, and edited as deemed fitting, the content cache, the concept cache, and the concept cache server, the static pages, the search index, and the directory structure of files are replicated to one or more Web servers, as indicated in  by the replicate process . These replicated structures provide content and functionality to a Web page generating process installed on each of the one or more Web servers. The content cache, the concept cache, and the concept cache server constitute the IOR Web server layer, i.e., the IOR fast layer, IOR-F, . The content cache provides content to the Web page generating process. The concept cache and concept cache server provide the arrangement of the content to the Web page generating process. The number and location of Web servers are determined by load balancing considerations using any method known in the art at the time of the replication.","4.0 Cache for information objects including vocabulary Information","According to an embodiment, a high-performance, multi-threaded, distributed caching system is disclosed that can process a high volume of client requests for accessing and querying concepts, relationships and information objects. In one specific embodiment, the caching system features a unified tree data structure that represents vocabularies, relationships and information objects in memory. The information objects serve as proxies to actual stored information chunks. Persistent storage is provided for storing the in memory data structure. A de-normalized table facilitates fetching information objects faster, and features caching the information objects using a least-recently-used algorithm. The information objects may comprise vocabulary information, attribute information, relationship information, etc. Thus, a caching system is provided that features high performance, optimum memory use by in memory data structure, support for large number of simultaneous requests, intelligent caching strategies at deployment, layers across distributed tiers and systems, scalability, stability, and adaptability to changing requirements.",{"@attributes":{"id":"p-0249","num":"0293"},"figref":"FIG. 11A"},"A client  is communicatively coupled to a network . At a server side of the network , input data from subject matter experts (represented by block ) is received into the vocabulary development server . In this context, subject matter experts are individuals associated with the enterprise that owns or operates vocabulary development server  and who have knowledge about particular products, services, solutions, technologies, or other information using vocabulary terms that are managed by the vocabulary development server, or managed by associated tools or processes that interface with application programming interfaces of the vocabulary development server. Thus, the subject matter experts act as arbiters of what vocabulary terms are correct, alternatives, incorrect, etc., and store such information in the vocabulary development server . The subject matter experts may do so by processing through workflow steps and actions that are based on their access level and other relationships to the concepts, attributes and relationships.","A concept cache server  is communicatively coupled to vocabulary development server , and the cache server also has access to tables in persistent content store , which comprise persistently stored cache data.","The cache server  communicates with external applications and servers through a concept access application programming interface (API) . Calls to the API and results from the API are provided to an interface  to a delivery engine library. A preview server acting as a delivery engine, represented by block , is communicatively coupled from the interface  to network . The delivery engine  dynamically generates electronic documents in response to requests of client , and can allow updates to system information from clients. In particular, the delivery engine  determines a format of an electronic document that is responsive to the client request, and queries concept cache server  through concept access API  to obtain one or more information objects that form components of the dynamically generated electronic document. The information objects provide all things required to generate the document, including content, applications, images, templates, code, etc. When the electronic document is fully assembled, the delivery engine  delivers the document to the client  through network .","Use of interface  and delivery engine  improves scalability by enabling the cache server  to respond to a large number of clients  wherein data presentation and delivery are controlled by delivery engine . Further, this arrangement enables concept cache server  to cache information objects, vocabulary trees, relationship instances, or other components of electronic documents that are dynamically generated by the delivery engine . Unlike past approaches that involve caching static pages, delivery engine  can search the cache server  to obtain needed information objects in the process of assembly a dynamically generated electronic document. If the requested information objects are not in the cache of the cache server , the cache server can query the persistent content store  to obtain the requested objects. The cache server also can query any other logical store or network resource to obtain the requested objects, e.g., an LDAP directory, database server, etc.","Further, delivery engine  is not required to interact directly with the persistent content store  or any other repository. Unlike past approaches, delivery engine  is not required to carry out operations with the content store that involve substantial overhead, such as establishing a database connection each time that the delivery engine needs a particular information object, querying the database, finding the correct object, retrieving the information objects from relatively slow disk storage of the database, etc. Such queries would be required frequently, because a complete page would become invalidated often as a result of changes in data underlying one or more information objects that make up the page. By caching individual information objects rather than entire pages, a substantial performance bottleneck is avoided. Further, because all the vocabularies and information objects are connected, the system can determine which pages use a particular information object and use such data to rebuild only those pages.","Use of a vocabulary tree as defined herein in combination with the information object model defined herein introduces dependencies among objects, which in turn allows for predictive caching and query optimization. Predictive caching involves caching an object based on an expectation of what information a user will next request, based on the information that has been requested.","Arranging the cache server at approximately the same logical layer as the delivery engine also results in improved performance because socket calls or other relatively slow communication mechanisms are not required between the delivery engine and the cache server. Instead, the delivery engine can directly call the cache using programmatic calls. If the cache needs to obtain different information objects from the database, then socket calls may be used, but this arrangement pushes the slower connection mechanism lower in the logical structure so that its performance impact is reduced.",{"@attributes":{"id":"p-0257","num":"0301"},"figref":"FIG. 11B","b":["440","440","440","440","440","440","506","506","506","1116","440","440","440","1110","1116","440","440","440"]},"In this configuration, the cache system provides a stable system, using a distributed model that allows not only scalability but also load balancing and fail-over.",{"@attributes":{"id":"p-0259","num":"0303"},"figref":["FIG. 12","FIG. 12"],"b":"440"},"In general,  depicts an arrangement that facilitates rapid retrieval of information objects from a cache, using an indexing method that is optimized for use with hierarchical trees of information objects, and n-ary relationships among such objects, as disclosed herein. In this arrangement, a hierarchical tree of information objects is viewed as a flat table comprising a plurality of columns. However, because of the potential size of the object trees\u2014which may contain on the order of tens of millions of information objects\u2014a memory optimization arrangement is provided that reduces the amount of memory needed to store the flat tables. In particular, a way of traveling through the nodes of the trees is provided, by carrying out a lookup and then caching the result set. In prior approaches, a database table lookup returns a result set of rows, and those rows and their associated column values are cached \u201cas is.\u201d In the approach herein, only the index values of result set rows are cached. Since the index values are numeric, the amount of memory needed to cache result sets is greatly reduced by omitting large or complex column values that are associated with rows in the result sets. Thus, in the disclosed arrangement, minimum memory usage and rapid retrieval are achieved.","Requests for information objects are received from a client  at a query processor . Each client request is presented in the form of a query. For example, a query might encapsulate the request, \u201cShow me an electronic document that describes the Features & Benefits of Product 7500.\u201d In this context, client requests may be issued programmatically from one or more software applications that are executed by client . For example, a client request may be formulated and generated by a Web application that the client uses to interface to a complex enterprise Web site.","The example query above involves three database columns: the category Product; the concept \u201c7500\u201d; and the information type \u201cFeatures & Benefits.\u201d The desired result of the query is an information object of type \u201cFeatures & Benefits\u201d that matches the concept \u201c7500\u201d and the Product category.","Cached content  provides basic cached storage of vocabulary information relating to information objects that may satisfy the client request. In one embodiment, cached content  is structured as a flat table having a plurality of rows. Each row has column values that comprise a row identifier, a concept value, an information type value, and an index pointer value. In one embodiment, the index pointer values reference specific information objects among a plurality of stored content chunks . The stored content chunks  are organized according to the hierarchical tree structure described herein with reference to  or . Each such hierarchy and its relationships may be represented in memory of a computer system as a logical tree using object-oriented programming techniques, such that each node of the tree is an object with attributes and relationships.","Stored content chunks  serve as a local cache for information objects that are persistently stored in object repository . Stored content chunks  may be stored in a file system, database, etc. Least-recently-used information objects in stored content chunks  are removed according to a conventional LRU algorithm. Use of an LRU process ensures that the amount of memory required by stored content chunks  remains within a specified reasonable limit.","Additions, deletions, and changes to stored content chunks  are received from a vocabulary index builder  that communicates with cached content . The vocabulary index builder is manipulated by an administrative user who can retrieve master copies of content objects from an object repository  through a database access API.","Cached content  is managed by software elements that ensure that the least-recently-used (LRU) cache entries are regularly deleted from the cache. This controls the cache size.","In operation, query processor  parses a client request. Query processor  then searches result cache  to determine whether a result set value is present that matches the concept and information type in the query. The result set identifies one or more rows in cached content that contain index pointers to information objects in stored content chunks , or in object repository , that are responsive to the user query. If a result set is present, then the information objects that are referenced in the result set index pointers are obtained from either stored content chunks , or object repository , and returned to client .","If result cache  does not contain a matching result set, then cached content  is searched according to the following process. Query processor  generates and sends one or more index lookup requests to cached content . In response to the lookup requests, cached content  is searched and one or more interim result sets, represented by first interim results A and second interim results B, are generated.","Each set of interim results comprises a table of rows having a plurality of column values. In first interim results A, the column values comprise a concept identifier, and a set of row identifiers for rows of cached content  that match the associated concept identifier. In second interim results B, the column values comprise an information type value, and a set of row identifiers for rows of cached content  that match the associated information type value. Thus, each of the interim results A, B functions as an index into the cached content .","The interim results are combined by the cache according to logical rules within the query to result in creating and storing raw results from cache . For example, raw results from cache  represents the logical intersection of interim results A, B.","Query processor  receives the raw results from cache  and stores them in the result cache  in the form of a final result set B. Query processor  then delivers final result set B to client .","As one specific example of operation, assume that cached content  contains data organized as follows:",{"@attributes":{"id":"p-0273","num":"0317"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["ROWID","PRODUCT","INFO OBJ TYPE","CHUNK PATH"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","p1","intro","\/a.cnk"]},{"entry":["1","p1","bene","\/b.cnk"]},{"entry":["2","p1","intro","\/c.cnk"]},{"entry":["3","p2","intro","\/d.cnk"]},{"entry":["4","p2","bene","\/e.cnk"]},{"entry":["5","p2","intro","\/f.cnk"]},{"entry":["6","p1","intro","\/g.cnk"]},{"entry":["7","p2","bene","\/h.cnk"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Each of the product values and information object values is a reference to a node object in the tree described above. The value \u201cintro\u201d refers to an \u201cIntroduction\u201d information object type that is associated with information that gives an introduction to a product; the value \u201cbene\u201d identifies a \u201cFeatures & Benefits\u201d information type. Assume further that client  issues a request for all \u201cFeatures and Benefits\u201d information objects for product p1, and the request has the form: SELECT (\u201cp1\u201d, \u201cbene\u201d). Thus, the request means, \u201cselect from the cache all objects that are for product p1 and contain Features and Benefits (\u201cbene\u201d) information.\u201d In response to this query, the cache generates interim results as follows:",{"@attributes":{"id":"p-0275","num":"0319"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"FIRST INTERIM RESULTS"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"p1","0, 1, 2, 6"]},{"entry":[{},"p2","3, 4, 5, 7"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"SECOND INTERIM RESULTS"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"intro","0, 2, 3, 5, 6"]},{"entry":[{},"bene","1, 4, 7"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Thus, the product attribute (\u201cp1\u201d, \u201cp2\u201d) and the information object type attribute (\u201cintro\u201d, \u201cbene\u201d) are index values, and the interim results comprise lists of all rows corresponding to all attribute values. When the interim results are received, the cache combines them according to the query such that one or more common rows of the cached content are identified. For example, the cache applies the Boolean rule \u201cp1 AND bene\u201d to the interim results and determines that the content with ROWID=1 satisfies the Boolean rule. Only the object with ROWID=1 is found in both of the interim results. Accordingly, result set B includes only information identifying row 1.","Row 1 of cached content  identifies content chunk \u201c\/b.cnk.\u201d Therefore, query processor  returns that content chunk to the client as the result of the query. Client  may be the delivery engine . Thus, in response to receiving the result of the query, comprising one or more content chunks or information objects, delivery engine  can dynamically construct an electronic document that contains the information objects and is responsive to the user query.","If client  issues a second query in the same form (seeking information matching \u201cp1\u201d and \u201cbene\u201d), the result cache  is first searched for matching information. In the example given, the result cache has the values \u201cp1,\u201d \u201cbene,\u201d and \u201c1.\u201d Thus, a search of the result cache  yields a result set matching the query, so no inquiry to cached content  or generation of interim result sets is needed. The row values in the client (\u201c1\u201d in this example) are immediately returned to the client.","In this configuration, retrieval of complex information content is carried out using highly efficient data storage. For example, cached content  may be created using as few as 13 bytes per row to store a ROWID, attribute values, and chunk references. Actual information object content chunks are stored outside the cache core, as stored content chunks , which are accessed only when a cache hit occurs, as indicated by information in result set B. In contrast, object repository  typically uses far greater storage for object references.","A cache system as described herein is optimized for operation in connection with data representing vocabulary concepts, relationships, and information objects, in this embodiment. Lookup time is minimized by using a cascading lookup scheme that first involves querying result cache . Cached content  and object repository  are queried, and result sets are constructed, only if necessary.","In one embodiment, object repository  and persistent content store  are configured as a set of tables in a relational database management system.  is a diagram of an example schema of tables that may be used in an embodiment. Boxes represent tables, and connecting lines represent primary keys into other tables. Elements identifies as \u201cNumber\u201d each are 4 bytes long and \u201cString\u201d elements are 256 characters, in an embodiment. The ID values are generated by cache servers .","Such a schema is highly optimized in terms of table size and memory usage. Each table has relatively few columns. A vocabulary table  defines primary keys for a Relation Type table , Relation Type Participant table , a Relation Participant table , and an Attribute table . Relation types refer to relationships among information objects, e.g., one vocabulary item in Vocabulary table  may have a \u201chas_doc\u201d relation with a particular information object, which indicates that the vocabulary item has a document associated with it. Information objects that are referenced in Info Object table  may be stored in a content management system (CMS) , in an LDAP directory , or in a file system , as indicated by an object ID value  that uniquely identifies an object. Thus, the repository may reference any number of different information storage mechanisms. Ultimately, this enables a dynamically constructed electronic document based on such information objects to have a richer variety of information.","When a cache server  starts up, it reads these tables to build a representation or data model in memory. Further, each cache server  also periodically merges the changes that are applied on the in-memory data with the persistent store.","Each cache server  also may include an event manager and may generate events during its operations. For example, events may be generated when tree nodes are changed, or when the cache re-indexes, or upon the occurrence of any other event of interest. The event manager provides registration APIs and an event dispatch mechanism.","Each cache server  also may provide an administrative subsystem to support administrative functions such as stopping and starting the cache server, distribution of physical copies of data, changing configuration parameters at runtime, log management, load balancing, mirroring, etc.","Stored content chunks  and object repository  may be distributed over multiple machines. For example, one hierarchical tree of information objects (such as the \u201cProduct\u201d category tree) may be stored in one physical computing machine and other trees may be stored in other machines. Alternatively, one category may be replicated in part or whole, and may be integrated with an event manager to maintain consistency and integrity of data and relationships.",{"@attributes":{"id":"p-0287","num":"0331"},"figref":"FIG. 14","b":["1402","1404","1406","1408","1410","1406","1418","1412","1418","1420","1422"]},"Similarly, Technology proxy root node  and Solution proxy root node  reference a distributed root node  in a second machine  in which both a Technology root node  and Solution root node  are rooted. Thus, one or more hierarchies, trees or branches may reside on a machine.","As a further performance enhancement, hierarchies of nodes may be mirrored. For example, a hierarchy of nodes may be stored as a first copy of the hierarchy and a second copy of the hierarchy. The first copy is used only for high-volume, fast read operations and the second copy is used only for slower, synchronized write operations that use node-level locking, etc., for write consistency. Periodically, the copies are synchronized to one another. For example, the second copy is replicated, the replicated second copy is designated as the read copy, and the first copy is discarded. Such synchronization may be carried out at any convenient interval, e.g., every hour, every several hours, based on subscription to events, etc. Constraints may determine, on a node-specific level, rules for replication, as all vocabularies may have unique requirements.","Thus, a high-performance, multi-threaded, distributed caching server that handles high-volume client requests for accessing and querying concepts, relationships and info-objects is provided. Unlike prior approaches that cache static pages only and cannot account for page personalization or dynamic content, the cache disclosed herein caches components of pages that are frequently used. A delivery engine queries the cache to obtain components of pages that the delivery engine is assembling for delivery to a client. Unlike prior approaches, the delivery engine is never required to query a database or repository of content information. The de-normalized table for fetching information objects provides a composite index into the information objects, facilitating quick look-up and avoiding walking through the tree data structure.","In this embodiment, the de-normalized table implements a LRU algorithm to control the cache size of in-memory chunks. In addition, relationships and constraints in the model may affect other events that provide logic other than an LRU scheme, or in addition to it, for making the decision on what vocabularies, relationships, and information objects to cache at what layers or distributed services.","According to other features, an Event Manager notifies interested applications about what is happening in the caching system. The cache may generate events, for example, when values of tree nodes are changed, when index updates are carried out, when hierarchies are re-synchronized, etc. As a specific example, when an information object value changes, an event is published. The delivery engine  subscribes to such events so that it can request a new copy of the changed information object when it next generates an electronic document that contains such information object. Examples of events that can be published include Node Added; Node Removed; Node Attribute Added; Node Attribute Removed; Relation Type Added; Relation Type Removed; Relation Attribute Added; Relation Attribute Removed; Relation Instance Added; Relation Instance Removed.","Administrative services enable remote administration of the caching system for fine-tuning its operation and ordering its operations to stop or start. An Update Manager manages synchronization with master copies of data that are stored in a persistent repository.","The structures described herein may be implemented in one or more servers, programs, processes or other software elements, machines or other hardware elements. In one embodiment, each concept cache server  is implemented as a plurality of Java\u00ae classes, methods and other program elements that are compiled and linked with appropriate communication libraries, data access libraries, and similar elements to form a machine-executable system having the logical structure and functions disclosed herein.","Vocabularies and relationships are cached with their references to other objects, as needed, facilitating speed of execution of both the logic of constructing a document and in finding the appropriate cached version of an information object. The intelligence in the data model allows numerous embodiments of more and more complex caching scenarios based on evolving architectural needs. Even a simple example configuration, as disclosed herein, solves an unmet challenge in data access today in a new and highly scalable way.","5.0 Hardware Overview",{"@attributes":{"id":"p-0296","num":"0340"},"figref":"FIG. 10","b":["1000","1000","1002","1004","1002","1000","1006","1002","1004","1006","1004","1000","1008","1002","1004","1010","1002"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (\u201cCRT\u201d), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for a vocabulary development server and information object repository. According to one embodiment of the invention, a vocabulary development server is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (\u201cISDN\u201d) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (\u201cLAN\u201d) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (\u201cISP\u201d) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the invention, one such downloaded application provides for an information object repository API as described herein.","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","6.0 Extensions and Alternatives","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2A","FIG. 1"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4D"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4E"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4F"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 4G","FIG. 4C"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4H"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 8C"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 8D"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 8E"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 8F"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 9C"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
