---
title: Automatically upgradeable extension of software
abstract: Methods and apparatus, including computer program products, for implementing extensions for computer program applications. A program according to one aspect of the invention has instructions to receive an application call to an extension method defined in an extension object definition, the extension object definition having associated extension object implementations, the extension object implementations providing extension method implementations of the extension method; instructions operable to obtain results by calling multiple extension method implementations of the extension method; and instructions operable to respond to the application call using the results obtained from the extension method implementations. A method according to another aspect includes the steps of deploying multiple extension method implementations for an extension method; and executing the multiple extension method implementations to determine the results of calling the extension method.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07406695&OS=07406695&RS=07406695
owner: SAP Aktiengesellschaft
number: 07406695
owner_city: Walldorf
owner_country: DE
publication_date: 20030117
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to data processing by digital computer, and more particularly to extending a standard application.","A standard software application is developed by an application developer to satisfy the requirements of multiple customers of the standard application. Specific customers of a standard software application may need to extend the standard application to add customer-specific features that are not implemented by the standard application. In addition, customers of the standard application may also need to customize the features of the standard application by providing customer-specific extensions for the features implemented by the standard application. Modification of the standard application is one of the approaches for providing application extensions for a standard application. The modification approach can require the generation of multiple versions of the standard application. A version of the standard application generated for a specific customer can include all the application extensions required by the specific user. A standard application using the modification approach to implement application extensions can be difficult to maintain because each version of the standard application must be generated whenever the standard application is upgraded.","Business Add-Ins, defined by SAP R\/3, available from SAP AG of Walldorf (Baden) Germany, represent another approach allowing customers to provide application extensions for a standard application. Business Add-Ins are defined parts within a standard SAP application where an application extension can be used to add additional code without modifying the standard SAP application. In order to extend the standard SAP application, a Business Add-In (BAdI) is defined by the application developer for the standard application. The application developer also defines an interface for the BAdI. The defined interface for the BAdI is used to create an adapter class for implementing the BAdI. The adapter class is used by the extension developer developing the application extension to provide an implementation of the BAdI. The application developer extends the standard application by creating an instance of the adapter class in the standard application and calling the corresponding methods of the adapter class at the appropriate time. In order to use a BAdI, an extension developer must provide his own implementation of the BAdI by implementing the enhancements defined by the BAdI and activating the implementations of the enhancements. The enhancements provided by the BAdI implementation are then called at runtime.","A Java\u2122 application can be extended at the design level using specific Design Patterns, including, Observer, Factory, Decorator, Visitor, and Interceptor patterns. A Factory method provides a simple decision making class which returns one of several possible subclasses of an abstract base class depending on data it is provided. In the Decorator pattern, a class that surrounds a given class adds new capabilities to the given class and passes all the unchanged methods to the underlying class. The Observer pattern defines the way a number of classes can be notified of a change. The Visitor pattern can be used to add new operations for an arrangement of classes without changing the individual class definitions. An Interceptor pattern can be used to provide a simple place holder for a class that can be implemented later in the development cycle.","Java also provides extension approaches at the architecture level using object oriented frameworks, replacement of components, application programming interface (API) approaches, messaging techniques and declarative approaches (e.g., the Apache Jakarta framework Struts). In addition to these approaches Java also provides byte code enhancement techniques, such as AspectJ, HyperJ, or JMangle, which can be used to extend Java applications. Extensions to a Java application can also be implemented through dynamic proxy classes, using the dynamic proxy API. A dynamic proxy class is a class that implements a list of interfaces specified at runtime when the class is created. A method invocation through one of the interfaces on an instance of a dynamic proxy class is encoded and dispatched to another object through a uniform interface. A dynamic proxy class can be used to create a type-safe proxy object for a list of interfaces without requiring pre-generation of the class prior to compilation.","The present invention provides methods and apparatus, including computer program products, for implementing extensions for computer program applications.","In general, in one aspect, the invention provides methods and apparatus, including computer program products, for extending computer program applications. A program according to this aspect has instructions operable to receive an application call to an extension method defined in an extension object definition, the extension object definition having associated extension object implementations, the extension object implementations providing extension method implementations of the extension method; instructions operable to obtain results by calling multiple extension method implementations of the extension method; and instructions operable to respond to the application call using the results obtained from the extension method implementations.","Advantageous implementations of the invention include one or more of the following features.","The extension object definition is associated with an extension registry; and the program has instructions to check the extension registry to determine extension object implementations providing registered extension method implementations of the extension method, and instructions to call the registered extension method implementations to obtain results of calling the extension method implementations of the extension method.","The program also has instructions to identify extension object implementations providing extension method implementations of the extension method; to generate a proxy for the identified extension object implementations, the proxy being operable to call multiple extension object implementations; and to call the proxy to obtain results of calling the extension method implementations of the extension method provided by the identified extension object implementations.","The proxy is generated at a compile time or deploy time. Alternatively, the proxy is a dynamic proxy generated dynamically at run time. The program can also have instructions for an extension factory to generate a proxy object.","The extension object implementations have associated filter attribute values; and the program also has instructions to call exactly those extension method implementations having associated filter attribute values satisfying one or more predetermined criteria. The filter attribute values can be stored in a central repository.","The extension object implementations have an associated sorter; and the program also has instructions to obtain results by calling extension method implementations are operable to call the extension method implementations in an order determined by the sorter.","The extension object implementations have an associated logger; and the program also has instructions to log the calls to the extension method implementations using the logger.","The extension object implementations have an associated result handler; and the program also has instructions to use the result handler to receive extension results obtained by calling the extension method implementations, and to determine the results using the extension results. The associated result handler can be a default result handler. If there is no associated result handler, the extension method implementations can be called in sequence, a first extension method implementation being called first, a last extension method implementation being called last; and the instructions to obtain results by calling extension method implementations are operable to return the results obtained by calling the last extension method implementation.","In general, in another aspect, the invention provides methods and apparatus, including program products, for deploying extensions to computer program applications. A method according to this aspect includes the steps of deploying multiple extension method implementations for an extension method; and executing the multiple extension method implementations to determine the results of calling the extension method.","Advantageous implementations of the invention further include one or more of the following features.","The multiple extension method implementations are deployed into a runtime environment that generates a dynamic proxy for the multiple extension method implementations; and the dynamic proxy is executed to execute the multiple extension method implementations to determine the results of executing the extension method.","The multiple extension method implementations have associated filter attribute values; and exactly those extension method implementations having associated filter attribute values satisfying one or more predetermined criteria are executed to determine the results of executing the extension method.","The multiple extension method implementations have an associated sorter that determines the order of executing the extension method implementations.","The multiple extension method implementations have an associated logger that the calls to the extension method implementations.","The multiple extension method implementations have an associated result handler that receives extension results obtained by calling the extension method implementations and determines the results of the extension method using the extension results. The result handler can be a default result handler. If there is no associated result handler, the extension method implementations are executed in sequence, a first extension method implementations being executed first, and a last extension method implementation being executed last; and the results obtained by executing the last extension method implementation are used.","The invention can be implemented to realize one or more of the following advantages. Standard Java application can be modified as part of a future release without requiring any specific modifications to support existing application extensions. Multiple implementations can be supported for each application extension, and result of calling the multiple implementations can be evaluated using sorting, logging, and result processors. The application extensions can be activated and deactivated at runtime and they can be monitored at runtime. A future release of a standard application need not be aware of existing extensions and need not implement existing extensions in the future release. One implementation of the invention provides all of the above advantages.","The details of one or more implementations of the invention are set forth in the accompanying drawings and the description below. Further features, aspects, and advantages of the invention will become apparent from the description, the drawings, and the claims.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","100","115","105","110","115","105","105","110"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["200","215","100","220","215","105","220","110","215","205","200","115","220","115","220","105","210","220","215","205","220","210"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3","b":["100","105","115","110","115","105","320","325","330","105","300"]},"In , the dynamic proxy for the extension object interface  can include interfaces to a sorter  and a logger  for the extension object if a sorter and logger are implemented by the extension object. The dynamic proxy for the extension object interface can also include interfaces to call the concrete methods of the extension object. The standard application calls a concrete method implemented by the extension object using the dynamic proxy for the extension object interface . The sorter  can be used to sort through the implementations of the extension object and determine the order in which the implementations should be called. The sorter uses the values of one or more implementation attributes associated with the implementations to determine the order in which the implementations should be called. The implementation attributes can be predefined implementation attributes provided by the development environment. The application developer can also define additional implementation attributes to be used by the sorter. The logger  can be used to log the result of calling the multiple implementations of the extension object. The dynamic proxy for the extension object interface  also includes an interface to a result handler  if a result handler is implemented by the extension object. The result handler  is called after all the implementations of the extension object have been called. The result handler  evaluates the results from the multiple implementations of the application extension and determines the results that are returned to the standard application.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4","b":["400","405","410","415","420","425","430","405","435"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 5","FIG. 3","FIG. 3","FIG. 1"],"b":["305","500","505","510","315","515","520","520","110","525","530","535","515","540","545"]},"In the scenario of , the application developer can assign a sorter, logger, and result handler for the extension object. The application developer can also allow the extension developer to assign a sorter, logger, and result handler for the extension object. If a sorter is not assigned for the extension object, the extension object implementations are called in what to the extension developer is a random order. If a logger is not assigned for the extension object, the entry method (step ) and leave method (step ) are not called, and the calls to the extension object implementations are not logged. If multiple implementations of the extension object are called and a result handler is not assigned for the extension object, the dynamic proxy for the extension object returns the result obtained from the last extension object implementation called.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 6","b":["600","605","600","630","615","630","660","600","615","610","605","620","615","630","600","655","655","630","660","645","610","635","650","645","645","630","665","645","610"]},"The invention can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The invention can be implemented as a computer program product, i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device or in a propagated signal, for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","Method steps of the invention can be performed by one or more programmable processors executing a computer program to perform functions of the invention by operating on input data and generating output. Method steps can also be performed by, and apparatus of the invention can be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in special purpose logic circuitry.","The invention can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the invention, or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), e.g., the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","The invention has been described in terms of particular embodiments. Other embodiments are within the scope of the following claims. For example, the steps of the invention can be performed in a different order and still achieve desirable results."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
