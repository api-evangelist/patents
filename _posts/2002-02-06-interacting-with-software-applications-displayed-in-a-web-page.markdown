---
title: Interacting with software applications displayed in a web page
abstract: The invention enables the display of application-output data within application-output windows embedded in a web browser window. The application-output windows can be dynamically moved, resized and otherwise manipulated within the web browser window even when the application program providing the source of the application-output data is non-web enabled (e.g., legacy applications). The invention receives window attribute information associated with the application-output windows via a first virtual channel and displays application-output data received via a second virtual channel within the application-output windows, which are formed and/or modified using the window attribute information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06950991&OS=06950991&RS=06950991
owner: Citrix Systems, Inc.
number: 06950991
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20020206
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This claims priority to co-pending U.S. patent application Ser. No. 09\/086,898, filed May 29, 1998; co-pending U.S. patent application Ser. No. 08\/855,977, filed May 14, 1997; and co-pending U.S. patent application Ser. No. 09\/247,220, filed Feb. 10, 1999, the entirety of which are incorporated herein by reference.","The present invention relates to the display of information in a communications network and more specifically to displaying the output of executing application programs in a web page.","Businesses in today's fast-paced global marketplace strive to improve their productivity and profitability by providing their employees with access to business-critical applications and data at fixed locations within the workplace as well as at mobile locations. The popularity of web-based computing, combined with the need to expedite information access for mobile users, has spurred adoption of enterprise portals. Enterprise portals are company web sites that aggregate, personalize and serve applications, data and content to users, while offering management tools for organizing and using information more efficiently. In some companies, portals have replaced traditional desktop software with browser-based access to a virtual workplace that is easy to use, convenient and ubiquitous. Companies that implement portals also benefit from a fast return on investment due to increased worker productivity and greater efficiency in their information technology infrastructure.","True desktop software replacement requires that a portal offer a full complement of information resources. Business applications are, arguably, the most vital information resource that workers need to access. Business applications also typically represent a major investment, and often a competitive advantage, which must not be lost when moving to web-based systems. From the standpoint of productivity, application access via the portal is needed so that users are not forced to switch back and forth between the browser and the desktop to do their work. With a split browser\/desktop system, it is more difficult to locate and coordinate material from various sources. Users are also typically tied to the desktop device because it provides key applications that may not be accessible via the browser.","These business drivers provide compelling motivation to include existing and upcoming applications in portal implementations. However, few applications have been developed specifically for web-based delivery and those that have often provide reduced functionality as compared to their equivalent desktop applications. Although it is possible to use existing applications in a portal by re-engineering them for web publication using HTML, scripting, Java\u2122 and other proprietary means, this approach is time-consuming and expensive and may delay portal implementation. Likewise, such implementations may experience reduced functionality and\/or may not be feasible because the \u201cdownload and run\u201d model of application execution is too resource-intensive.","Accordingly, methods and systems are desired that enable efficient deployment of legacy applications in enterprise portals without undertaking expensive development efforts that may be marginally effective and which dilute the return on investment of the portal.","The present invention overcomes these shortcomings by applying web-enablement technology to legacy applications so that these applications remain in their original form, with the same user interface and full functionality to which their users are already accustomed, while allowing such viewers to interact with the applications via application-output windows displayed within a web page.","In one embodiment, the invention provides a method of displaying application-output data within one or more application-output windows positioned within a web browser window. The application-output data can be generated by a web enabled application program and\/or a non-web enabled application program that is unmodified (e.g., so called \u201clegacy applications\u201d). The application programs that provide the source of the application-output data can reside on different application servers and the application-output data from these different application servers is displayed within one or more application-output windows in the same web browser window. In one aspect, the application-output windows are child windows of the web browser window. In one embodiment, the application-output windows are relocatable beyond the boundaries of the web browser window. In another aspect, window attribute information associated with the application-output windows is received via a first virtual channel and application-output data (e.g., graphical data) is received via a second virtual channel. In yet another aspect, the window attribute information of the application-output windows displayed within the web browser window is modifiable independently of the web browser that formed the web browser window. The invention displays the application-output data in the application-output window in accordance with the window attribute information.","In one embodiment, the invention provides a client agent that monitors and responds to events associated with the application-output windows, such as detecting a resize event input by a viewer of the web browser window and in response resizing an affected application-output window. The client agent performs these functions independently of the web browser. In one embodiment, the client agent is executed\/instantiated in response to an application object (e.g., an ActiveX control) embedded in the web page displayed in the web browser window. In this embodiment, the client agent uses the window attribute information of the application-output windows received via the second virtual channel to modify at least one property of the application object, where the modified property triggers a corresponding change in the associated application-output windows. In a further aspect, the client agent establishes the first and second virtual channels independently of the web browser.","In this manner, the invention avoids expensive development and user training costs, and provides access to the full functionality of the original legacy application at mobile locations that have web access.","Portals and other web-based implementations capable of displaying application-output data to remote users are, preferably, implemented using a server-based computing model. Server-based computing is analogous to enterprise portals, which improve user productivity through single-point access to information resources (e.g., application programs), in that server-based computing enhances the overall efficiency of the portal via single-point application administration.","In server-based computing models, application processing, administration, support and deployment are typically based on one or more central servers, which may be geographically distant from a user's display device. Remote users interact with particular applications hosted on these application servers by sending keystrokes, mouse movements, and other input\/output actions to the application servers via data communication networks (e.g., LAN, MAN, WAN, Internet, Intranet, etc.) and receive screen\/window updates, files and other data therefrom. Because much, if not all, of the application processing takes place on the server, the user's display device operates essentially as a thin client and thus requires few resources (e.g., processing power, nonvolatile memory, volatile memory, etc.) to display the application-output data of what may be a compute-intensive application. Further, by reducing the overall quantity of data that travels across the network, significant improvements can be realized in application performance and security.","Coupling this server-based computing model with web-based implementations of application programs (e.g., portals) enables users to access business critical applications on virtually any device connected to the web, including home computers, laptop computers, computer workstations, wireless and handheld communication devices, and information appliances running on a wide array of platforms. Device and platform flexibility allows mobile workers to move seamlessly from one device to another and receive a consistent, personalized information set, which includes access to the full functionality of business-critical, legacy applications.","In brief overview, a user of a device connected to the web requests access to one or more application programs from a web server. After authenticating the user's credentials, the web server accesses user-specific and application-specific parameters from a memory coupled to the web server. The web server subsequently communicates these parameters to one or more application execution servers hosting the requested application programs, and software processes operating on the application execution servers execute and initialize the requested application programs using the communicated parameters. In this manner, each instance of the application programs is personalized for a particular requesting user. The particular network addresses of the application execution servers hosting these personalized application programs are then forwarded to the user's device, which establishes a communications link and client-server session therewith.","Commands, events, graphical data, and window attribute information associated with the executing application programs are communicated between the user device and the application execution servers during the client-server session to ensure that the application-output data is displayed seamlessly on the desktop of the user device. Seamless display of the application-output data refers to the presentation of the data on the user desktop in a manner that is consistent with how locally-executing applications are presented and manipulated in the local desktop of the user device. In other words, a user views and interacts with the application-output data generated by the remote application programs as if the application programs were being executed locally.","In one embodiment, the output of the application programs is displayed in one or more application-output windows positioned within a web page displayed by a web browser of the user's device. In a further embodiment, the attributes of the application-output windows can be modified so that the application-output windows are moveable and resizeable within the boundaries of the web page. In another embodiment, the application-output windows initially appear within the boundaries of the web page and are subsequently moveable so that they are positioned outside the boundaries of the web page and thus give the appearance that the application-output windows correspond to locally-executing applications rather than to remotely-executing applications. In yet another embodiment, the application-output windows initially appear outside the boundaries of the web page and thus also appear to correspond to locally-executing applications. In one embodiment, the application output displayed in the application-output windows and the attributes of the application-output windows themselves are communicated and manipulated by software processes on the user's device and on the application execution servers, without involvement of the web server or web browser that initially provided access to the application programs.","In more detail and with reference to , a server-based computing architecture , capable of providing remote users with web-access to the full functionality of web and legacy applications (e.g., unmodified application programs that are not designed for web-based delivery), includes a client device  (e.g., any digital data processing device), a web server , one or more application execution servers  that are either standalone or clustered within a server farm  and which are preferably protected by a firewall , and a data communications network  (e.g., Internet, Intranet, etc.) that provides the necessary connectivity to enable each of these elements to communicate with each other.","In operation and also with reference to , a user of the client device  directs a browser  executing on the client device  to submit a request for access to particular web page content  accessible via the web server  (step ). In one embodiment, the user enters a universal resource locator (\u201cURL\u201d) address into the browser . The URL is associated with the web page content  hosted by the web server  and the browser  responds by transmitting the request for access to the appropriate URL address. The web server  receives the request for access, which typically includes user credential information (e.g., user ID, password, group\/project membership identifier, etc.), and authenticates the user to the server farm  or to the individual servers  that provide at least some of the web page content  (step ).","The web server  authenticates the user by accessing an authentication process that compares the credentials entered by the user with previously-assigned credentials. In one embodiment, the authentication process and database of previously-assigned credentials are stored and maintained on the web server . In other embodiments, the previously-assigned credentials can be stored in the server farm , on individual application execution servers , and\/or on an administrative server (not shown) that is coupled to the web server  via the Internet or other data communication network.","In the scenario where the web page content  corresponds to an enterprise portal, which provides access to an application set  (e.g., the set of application programs that have been personalized for the user by a portal administrator), the web server  accesses one or more application objects  (e.g., COM-compliant Java objects, ActiveX objects, HTML tags, etc.) that call web server-side scripts to authenticate the user (step ) and\/or to obtain the application set  information associated with the portal and user from the server farm  (step ). The application objects  also include properties that are associated with the user and\/or the particular applications  in the application set  that are provided via the portal. The user properties include, for example, group\/project information that identifies the particular applications  and data that the user needs to access in order to allow the user to collaborate with other members of the group\/project. The application properties include, for example, the user's preferences for each of the applications  in the application set .","The scripts called by the application objects  establish a network session between the web server  and the server farm  via, for example, a central administrative process (not shown), which monitors and controls each server  in the server farm . The administrative process selects one or more servers, which host the application programs  in the application set  specified by the application objects , based, for example, on a server and\/or network performance basis. The desired application set  can be provided entirely by a single server  by selecting\/allocating each application  in the application set  from a plurality of applications , hosted on the server . Alternatively, the application set \u2032 can be provided by a plurality of servers  with each of the plurality of servers  hosting at least one of the application programs in the application set \u2032. A more detailed description of server farms and their administration\/operation can be found in International Patent Application No. PCT\/US01\/14314, which is incorporated herein by reference in its entirety.","The administrative process launches one or more server agents  on the selected\/allocated servers  in response to the scripts called by the application objects . Server agents  are software processes that execute, initialize, and interact with each of the application programs  in the application set  in accordance with the properties specified by the application objects . In one embodiment, there is a server agent  for each application program  in the application set . In other embodiments, there is a single server agent  for the application set , to the extent that all of the application programs  are hosted on the same server . In yet another embodiment, there is a single server agent  for each server . The server agents  then provide the output of the application programs  in the application set  as well as any other information relating to the application set  to the web server , which subsequently formats the application set information into the web page content  (step ). The web page content  can include application icons corresponding to one or more of the application programs  in the application set  as well as application-output data from one or more of the application programs . In one embodiment, the application-output data provided by the application programs  corresponds to graphical data that is formatted to fit into a window, which exhibits attributes (e.g., window position on the web page, size, style, z-order, etc.) as initially specified by the properties of the application objects .","In one illustrative embodiment and with reference to , the browser  receives and displays the web page content  within a browser window , which includes many possible graphical user interface (\u201cGUI\u201d) elements (e.g., menu , local window , etc.) that form the client desktop  displayed on a display device coupled to the client device  (step ). In this particular embodiment, the web page content  is displayed within a web page  displayed by the browser  and includes one or more application icons  and\/or one or more application-output windows , which are associated with the application set . In one embodiment, one or more of the application objects  also form part of the web page content  of the web page  and can therefore set the initial attributes (size, z-order, position) of the application-output windows . The initial orientation, size, position, and z-order of each of the application-output windows  displayed on the web page  can be modified, as described below, so that the application-output windows  exhibit different orientations, sizes, positions, and z-orders relative to the web page  and\/or relative to the client desktop .","The application objects  can be any data constructs which indicate to the browser  displaying the web page content  that an application-output window  should be displayed at a particular location in the web page . The application objects  may include additional information, such as the height, width, border style, background color or pattern in the application-output window , along with indicia of which applications  may be displayed in the window , how often the output display should be updated, or any other additional information that is useful to enhance the display of the application output.","In one illustrative embodiment, the application objects  are window tags that are embedded in an HTML file, examples of such tags are delineated below.",{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ActiveX tag"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<object classid=\u201cclsid:238f6f83-b8b4-11cf-8771-00a024541ee3\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"data=\u201c\/ica\/direct.ica\u201d CODEBASE=\u201c\/cab\/wfica.cab\u201d"]},{"entry":[{},"width=436 height=295>"]},{"entry":[{},"<param name=\u201cStart\u201d value=\u201cAuto\u201d>"]},{"entry":[{},"<param name=\u201cBorder\u201d value=\u201cOn\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/object>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Netscape Plugin tag"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<embed src=\u201chttp:\/\/www.citrix.com\/ica\/direct.ica\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pluginspage=\u201chttp:\/\/www.citrix.com\/plugin.html\u201d"]},{"entry":[{},"height=295 width=436 Start=Auto Border=On>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<embed>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"JAVA tag"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<applet code=JICA.class width=436 height=295>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<param name=Address","value=\u201c128.4.1.64\u201d>"]},{"entry":[{},"\u2003<param name=InitialProgram","value=Microsoft Word 7.0>"]},{"entry":[{},"\u2003<param name=Start","value=Auto>"]},{"entry":[{},"\u2003<param name=Border","value=On>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/applet>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In each case above, the tag indicates that an application-output window  having a height of 295 pixels and a width of 436 pixels should be drawn to receive output data from the application program . Each tag also specifies that the application program  should automatically start execution and that the application-output window  in which the application output is displayed should be drawn with a border. The ActiveX and Netscape Plugin tags have the properties of the remote application  specified in the file \u201cdirect.ica\u201d located in the directory \u201c\/ica.\u201d The JAVA tag specifies the properties of the remote application  directly. In the example above, the address of the server  hosting the application program  is specified as well as the name of the application program  to be executed.","In one embodiment, the application program  executes substantially at the same time as the display of the web page . In another embodiment, the application program  executes when instructed to do so by the server agent , as part of providing web page content  to the web server . In yet another embodiment, the application program executes in response to a signal, such as a user-specified input (e.g., selecting an application icon  on the web page . Once execution of the application program  is commenced, the browser  instantiates a client agent  on the client device  (step ). Alternatively, the client agent  is instantiated substantially at the same time as the display of the web page  or in response to user-specified inputs.","The client agent  comprises one or more software processes, which execute on the client device  and which are configured to interact with the server agent , browser , application-output window , and\/or web server . In one embodiment, the client agent  is spawned as a child process of the browser . In other embodiments, the client agent  is a peer process of the browser  or a dynamically linked library associated with the browser . In one embodiment, a client agent  is instantiated for each application-output window  displayed in the web page . In another embodiment, a single client agent  is instantiated for one or more application-output windows  associated with a particular one of the application programs  in the application set . In yet another embodiment, a single client agent  is instantiated for each server agent , which contributed to the web page content . In yet another embodiment, a single client agent  is instantiated for the entire application set .","The browser  passes the properties of the application objects  relating to particular application programs  in the application set  to the client agent  associated with those same application programs . Additionally, the browser  may pass a handle for an application-output window  to the client agent  or the client agent  may query the browser  to retrieve the handle for the application-output window . Application properties, which are not specified by either the browser  or the application objects , may be set to default values. The client agent  may also have certain property defaults hard-coded, or the client agent  may access a file which contains property defaults.","The client agent  uses the name of the application program  and the address of the application execution server , which are both provided as part of the properties of the application objects , to establish a communications link and initiate a client-server session with the server agent  associated with the server  and application program  (step ). The client agent  passes some or all of the properties of the application objects  to the server agent  along with any necessary default values. Alternatively, the server agent  may have already received some or all of the properties of the application objects  from the web server  prior to contributing to the web page content , which was subsequently displayed in the web page . If a particular property is not passed to the server agent , the server agent  may request it from the client agent  if it is a necessary property to which it has no default value (e.g., user ID) or the server agent  may provide its own default value for the property (e.g., execution priority).","The server agent  uses the properties received from the client agent  to authenticate the client agent  and to execute the desired application program  if it has not previously been started. Once the application program  is executing and the client agent  has been authenticated, the application program  communicates through the server agent  directly with the client agent , without intervention of the browser  or web server . The client agent  receives output data from the application program  and displays the output data in the appropriate application-output window  in the web page . The client agent  also detects input events, such as mouse clicks and keyboard inputs, associated with the application-output window  and forwards any such input events to the application program  via the server agent . This type of client-server session is repeated for each application program  in the application set  that is selected by the user and thus enables the user to interact with all of the resources in the application set  (step ).","The data exchanged between the client agent  and server agent  during the client-server session includes not only input events and the graphical output data of the application program , but also window attribute information (e.g., window position, z-order, size, style, color, etc.). The window attribute information of the application-output windows  is initially specified by the application objects  embedded in the web page . For example, the application objects  can include an ActiveX control, which specifies and controls the window attributes of the application-output windows  during the client-server session. In one embodiment, the application-output windows  exhibit the same dimensions as the corresponding ActiveX controls.","The client agent  communicates the initial window attributes of the local application-output windows  to the server agent  along with information relating to the client desktop  (e.g., size, resolution, etc.). The server agent  responds by conforming the size of its server desktop to that of the client desktop  and by conforming the window attributes of local server windows to those of the application-output windows  on the client desktop . The application-output windows  on the client desktop  and the server windows on the server desktop thus exhibit the same window attributes and display the same graphical output data that is generated by the application . Note that the server desktop can correspond to either an offscreen surface contained within the server's video memory or to an onscreen surface displayed on a display device coupled to the server .","The user of the client device  can move, resize, and\/or alter the z-order or other initial window attributes of the application-output windows  during the client-server session, by entering an input event that is detected by the client agent  and then communicated to the server agent . The server agent  conforms its desktop and\/or windows to be consistent with the input event and then transmits updated graphical output data and window attribute information, corresponding to the input event, to the client agent  with instructions to update the application-output windows  so that they match the windows on the server .","For example, if the user of the client device  resizes one of the application-output windows  from that originally specified by the application objects  (such as by clicking with the mouse and dragging the border of the application-output window  to the desired location\/size), the client agent  detects the input event generated by the mouse action and communicates it to the server agent , which effects the same resize event in the on or offscreen surfaces of the server . The server agent  then sends repaint and resize command messages to the client agent  along with updated graphical output data and window attribute information. In response, the client agent  modifies the appropriate application object  affected by the resize event (e.g., the ActiveX control discussed above) so that the corresponding application-output window  is resized and the updated graphical output data is painted within the borders of the application-output window .","The invention thus enables the window attributes of the application-output window  to be modified so that the application-output window  can be moved, resized, etc., within the boundaries of the browser window . With reference to FIG.  and by way of nonlimiting example, application-output window B\u2032  can be resized using the methodology described above to form application-output window B\u2033 , which overlaps (thus exhibiting a different z-order from) application-output window F . Alternatively, the application-output window  can be moved or resized to extend beyond or be entirely outside of the browser window . By way of nonlimiting example and with reference to , application-output window J  lies within the boundaries of the browser window , while application-output window K  extends beyond the boundaries of the browser window  and application-output window L  is entirely outside the browser window . Note that the application-output windows can exhibit varying z-orders with respect to other elements in the client desktop . For example, local window  exhibits a z-order between that of the browser window  and application-output window L . In this embodiment, the client agent  instructs the operating system of the client device  to draw the desired application-output window  in response to command messages received from the server agent , without having to first modify the properties of the application objects  embedded in the web page , which initially established the window attributes of the application-output window .","In one embodiment, each input event affecting the application-output window  is transferred to and processed by the server agent , which then instructs the client agent  to effect corresponding changes in the application-output window . In another embodiment, one or more input event types (e.g., click and drag mouse actions directed at moving the application-output window  to another grid location on the web page ) are processed entirely by the client agent  and not reported to the server agent , where the graphical output data displayed within the application-output window  remains unchanged.","In more detail and with reference to , the client agent  comprises a monitor process , a command process , a message receiving process , and a message transmission process . In one embodiment, each process , , ,  is a separately functioning code segment that operates independently of the other processes. For example, the message receiving process  and the command process  can be implemented as separate threads, which communicate with each other via a named pipe or shared memory. Use of a common data set allows the message receiving process  and the message transmission process  to be synchronized.","The message receiving process  receives graphical data, window attribute information, and commands from the server agent  via the communications link that provides the connectivity between the client agent  and server agent  during the client-server session. The communications link preferably includes a first virtual channel  and a second virtual channel . Command, event, and window attribute information is passed between the client agent  and the server agent  via the first virtual channel , while graphical data corresponding to the graphical contents of the application-output windows  is passed via the second virtual channel . The message receiving process  informs the command process  of the commands, window attributes, and graphical data received from the server agent  and the command process  further processes this data.","In one embodiment, the command process  processes the commands received from the server agent  by instructing the client operating system  to form and\/or modify affected application-output windows  in accordance with the window attributes specified by the server agent . The command process  also instructs the client operating system  to display the graphical data provided by the server agent  in the appropriate application-output windows . In one embodiment, the command process  implements changes to the application-output windows  in the client desktop  by issuing GDI commands. In other embodiments, the command process  issues commands directly to an associated graphics subsystem or via graphics API commands.","The command process  also instructs the monitor process  to periodically monitor the client desktop  in order to detect changes affecting the application-output windows . In one embodiment, the monitor process  instructs the client operating system  to return information relating to the client desktop  at predetermined polling intervals. In other embodiments, the monitor process  monitors the message queue maintained by the client operating system  in order to detect changes affecting the application-output windows. The monitor process  communicates some or all of the detected desktop changes to the command process  for further processing.","In one embodiment, the command process  instructs the message transmission process  to transmit all of the changes detected by the monitor process  to the server agent  via the first virtual channel. In another embodiment, the command process  instructs the message transmission process  to transmit a subset of the detected changes, such as changes which only affect the graphical data and\/or window attributes of the application-output windows . The server agent  receives the detected changes along with any commands from the command process  and any input events made by the user of the client device  that triggered the detected changes. The server agent  then modifies its local desktop to accommodate the detected changes and transmits associated commands, window attributes, and graphical data back to the client's message receiving process . In this manner, the present invention ensures that desktop elements, such as the application-output windows , that are common in the client and server desktops remain in lock step.","The command process  of the client agent  ensures that analogous\/common elements in the client and server desktops remain in lock step by maintaining a common window list. The common window list includes the window attribute information for each window in the client desktop  and for each corresponding window in the server desktop. In embodiments, in which a plurality of client agents are executing on the client device , the command process  of a single client agent  has primary responsibility for maintaining the common window list. If the single client agent  terminates, while other client agents remain in operation, the remaining client agents will elect another primary client agent to maintain the common window list.","The present invention also enhances the performance of the client-server session by preferably using the techniques described in co-owned, International Patent Publication No. WO 01\/92973, which is incorporated herein by reference, to reduce the amount of graphical data transmitted between the client and server agents. In one embodiment, the invention encodes the data into relatively small representations that repeat within the protocol stream transmitted between the client agent  and the server agent . In this manner, the invention minimizes the size of each discrete data element that must be transmitted and increases the repeatability of the data within the protocol stream so that compression algorithms that operate more efficiently on repetitive encoded data can realize a greater degree of compression efficiency. The invention uses a number of techniques to realize this enhanced compression, including the following: scanning a command queue for later-issued commands which supercede earlier-issued commands; disk-caching techniques that improve compression of data that has been previously encountered during a client-server session; transmission of relative coordinates using quantized regions to avoid sending both endpoints and\/or the angle of an associated strip (i.e., series of consecutive pixels exhibiting a common angle); and manipulation of off-screen surfaces to enhance performance during the client-server session. The invention also reduces the frequency of overscroll problems encountered when there is a performance mismatch between a fast server and a relatively slow network or client device.","Having described certain embodiments of the invention, it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the invention may be used. Therefore, the invention should not be limited to certain embodiments, but rather should be limited only by the spirit and scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention is pointed out with particularity in the appended claims. The advantages of this invention described above, and further advantages, may be better understood by reference to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
