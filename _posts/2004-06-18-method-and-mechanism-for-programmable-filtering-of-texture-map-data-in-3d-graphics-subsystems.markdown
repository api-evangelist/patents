---
title: Method and mechanism for programmable filtering of texture map data in 3D graphics subsystems
abstract: A system, method and apparatus to provide flexible texture filtering. A programmable texture filtering module is introduced into the graphics processing pipeline of a graphic coprocessor and graphic processor integrated with the host. A program from a defined instruction set may then be loaded into texture processing cores to process texture data consistent with the program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07133047&OS=07133047&RS=07133047
owner: Intel Corporation
number: 07133047
owner_city: Santa Clara
owner_country: US
publication_date: 20040618
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. application Ser. No. 10\/747,966, filed Dec. 29, 2003, currently pending.","1. Field of the Invention","The embodiments of the invention relate to computer graphics. More specifically, embodiments of the invention relate to processing of texture map data.","2. Background","Graphics applications, and particularly three dimensionally (3D) graphics applications have long been one of the most processing intensive activities performed by personal computers. To improve graphics processing capabilities, graphics co-processors have proliferated and are widely available on most modern day personal computers. Graphics coprocessors are specialized integrated circuits designed to quickly perform processing intensive tasks required by graphic applications.","The transformation of scene information (source data) into 3D images (display output) requires a number of operations. These operations in aggregate are referred to as a 3D graphics rendering pipeline. The operations performed by the pipeline can be grouped into certain fundamental functionalities. One of these functionalities is texture mapping. Texture mapping is a process in which the one, two or three dimensional image representing an object surface properties (such as appearance, reflectivity, or other such properties) is applied to a three dimensional mesh representing the object in a final rendering. While a two dimensional image is most commonly used, other dimensionalities are possible.","It is frequently the case when a texture image is applied to an object in a final rendering, there is disparity between a number of sample texture elements (texels) and the source texture image and the number of picture elements (pixels) to which the image is mapped. When the number of texels in a given range is less than the number of pixels, then the texture is required to be upsampled. When upsampling a texture, a scheme must be used to fill intermediate values. This scheme is referred to herein as \u201ctexture filtering\u201d and has largely been performed by a fixed function state machine.","Most current graphics coprocessor support four types of texture filtering; point sampling, bilinear filtering, trilinear filtering and anisotropic filtering. As the filtering methods become increasingly complex, the state machine required to perform them becomes increasingly complex and requires increased real estate within the graphics coprocessor. This coupled with the fact that uses for texture data continues to expand, for example, texture data is being used for lighting and other surface properties in addition to color, renders the commonly employed linear interpolation inefficient or even insufficient.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1A","b":["100","102","104","106","102","106","104","112","112","104","108","110","108","104","106","120","120","122","124","126","128","122"],"sub":["u","v","u ","v "]},"Vertex processing module does three-dimensional transformations on 3D positional data conveyed, and may, for example, apply lighting. The processed vertices are passed to the primitive assembly module, which receives connectivity data. The connectivity data may include indices to permit assembly of primitives, typically triangles, based on the vertices and indices received.","The primitives are passed to the fragment processing module  which processes the primitives to identify fragments and apply texture data to build an output. As used herein, \u201cfragment\u201d refers to a pixel or group of contiguous pixels that are to be consistently processed to generate the output. The fragment processing exchanges data relating to texture mapping the fragments with a texture filter module .","The texture filter module  communicates with fragment processing module  to supply texels for application to the pixels. In one embodiment, texture filter module  is programmable. In this context, programmable is deemed to mean capable of executing a software program consisting of one or more instructions from a defined instruction set. One example of an instruction set is set forth below in Table 1.",{"@attributes":{"id":"p-0019","num":"0018"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Instruction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ADD A, B","Adds A and B operands"]},{"entry":["SUB A, B","Subtracts B from A"]},{"entry":["MUL A, B","Multiples A by B"]},{"entry":["RCP A, B","Makes A the reciprocal of B"]},{"entry":["CMP A, B, X","Compares A, B according to immediate X,"]},{"entry":[{},"places result in A"]},{"entry":["MIN A, B","Compares A, B leaves minimum of two values in A"]},{"entry":["MAX A, B","Compares A, B leaves maximum of two values in A"]},{"entry":["MOV A, B","Moves B into A"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Alternative instruction sets, either shorter or longer, may be employed in various embodiments of the invention.","In one embodiment, texture filter module  includes a plurality of texture processing cores (TPCs)  (16 TPC are shown in ). Other embodiments may have more or fewer TPCs. In one embodiment, a single TPC exists. In one embodiment, each TPC  is capable of processing a pixel in parallel with each of the other TPC . Each core  may be provided with a register set  which may include various types of registers such as control registers, source registers, temporary registers and an output register.","In one embodiment, the control registers include a sampling register, a status register, an address register, an offset register, and a plurality of fraction registers. In one embodiment, the sampling register has one bit corresponding to each source registers indicating whether the source register should be sampled or not. For example, if there are sixteen source registers, the sampling register may be a sixteen bit register with one bit corresponding to each of the sixteen source registers. In one embodiment, the status register is used to indicate the status of the TPC after certain conditions, such as overflow, divide by zero, etc. In one embodiment, the address register may be a 32 bit register containing the address of the texture map data. In one embodiment, this register may be accessible only by an application programming interface (API) rather than providing direct access to a programmer. The offset register may be used to provide an offset into the texture data corresponding to the nearest texel coordinate. Fraction registers may be used to hold the fractional coordinate between the texel samples in each dimensionality. In one embodiment, these would be provided by the fragment processing module . In one embodiment above, where V=X, Y, Z, T, T, RGB; Tand Tcorrespond to a pixel to be texture mapped would be provided to the texture filtering module. As one example, an eight pixel one dimensional texture coordinate of 0.175 would fall between the second (0.125) and third (0.25) texel. It would equate to a fraction of 0.2. The fraction in this embodiment is found as (0.175\u22120.125)\/0.125 or more generally, the coordinate less the closest lower increment divided by the increment value.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1B","sub":["u","v ","u","v ","u","v "],"b":["5","6","9","10","5","6","9","10"]},"Temporary registers may be provided for optional use by a programmer performing intermediate calculations on sample data. An output register is provided to store the output once the filtering operation is complete. In one embodiment, a 32 bit register is provided to receive the final result. Larger registers may be employed, however, in some embodiments a 32 bit ARGB (alpha red green blue) value is deemed sufficient.","The actual filtering may be performed by the texture filtering module  by loading a desired filtering program into a textured processing core. The filtering program corresponds to a fragment to be processed. Within a region of an image, it may be desirable to apply various effects to the texture data accordingly. Thus, for a particular graphic image, there may be numerous filtering programs employed.","For example, the filter program applied to a shiny part of a leather jacket on an image would likely to be different than the filter program applied to a scuffed part of a leather jacket. By using different programs in the texture filter module, the different effect can be accommodated. The usage of several filter programs during the course of rendering a given scene image is analogous to how, under the current-day fixed-function schemes, the rendering of a given scene may involve switching between the different fixed-function filtering states for different parts of the scene.","The program employed will influence which of the e.g. 16 texels are actually sampled to perform the texture filtering. In one embodiment, texture data may be arranged in memory to optimize access to the texels likely to be sampled. For example, if the sampling register indicates every fourth texel value is active, the texture data may be stored so that points , ,  and  are contiguous in memory, points , , , etc. are contiguous. As another example, where every second texel is active, , , , , etc. are contiguous and , , , etc. are contiguous. This arrangement in memory may be performed by the host processor  or the graphic coprocessor .","Arranging memory requires a certain amount of processor resources, in one embodiment, a determination is made when the likely use of the texture data exceeds a threshold cost required to rearrange it. Thus, where the usage of the textured data justifies the cost to rearrange it, in one embodiment, the textured data is rearranged in memory to facilitate access. The threshold may be selected based on objective guidelines such as number of texels to be processed with a given program.","Once texture filtering is complete and the output generated, the output value may then be passed back to fragment processing module  to permit the output fragment to be built. The output built by the fragment processing module  is passed to framebuffer processing module . Framebuffer processing module  combines the pixels received with the existing framebuffer for output to display .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["202","204","206","208","210"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["302","304","306","308","310","312","314","316"]},"Although the above flow diagrams are arranged in a particular order, it should be understood that some of the operations may be performed in parallel or in a different order than depicted. Accordingly, such parallization or rearrangement is within the scope and contemplation of the embodiments of the invention. It should also be noted that while in only one embodiment, a single texture processing core may be present in the texture filter module, embodiments with multiple texture processing cores, pixels may be processed in parallel with each core following the flow depicted in .","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the invention are illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. It should be noted that different references to \u201can\u201d or \u201cone\u201d embodiment in this disclosure are not necessarily to the same embodiment, and such references mean at least one.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
