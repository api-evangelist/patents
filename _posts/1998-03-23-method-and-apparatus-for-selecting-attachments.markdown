---
title: Method and apparatus for selecting attachments
abstract: A method and apparatus for selecting attachments. When a sender indicates in an e-mail application or applet that an attachment is to be associated with an e-mail message, an attachment chooser window is presented. The attachment chooser window provides a browser-based graphical user interface (GUI) which allows a sender to browse data resources, such as HTML documents and associated links. An attachment mechanism is provided by which a sender can choose a currently displayed data resource for attachment in an e-mail message. In one embodiment, the attachment mechanism allows a user to select whether the attachment is retrieved and attached to an e-mail message as a resource locator (such as a URL) of the chosen data resource, or whether source data of the data resource is retrieved and attached to the e-mail message as one or more source files.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06859213&OS=06859213&RS=06859213
owner: Sun Microsystems, Inc.
number: 06859213
owner_city: Santa Clara
owner_country: US
publication_date: 19980323
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COMPUTER PROGRAM LISTING APPENDIX","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Appendix A to this specification is a computer program listing appendix provided on compact disc and is incorporated herein by reference. Appendix A provides Documentation for the Document Stack Bean and the HotJava HTML Component referred to in the specification. Appendix A is provided on two CD-R compact discs entitled \u201cCopy 1\u201d and \u201cCopy 2\u201d, each containing one file named \u201cAPPENDIX A.txt\u201d, created on Mar. 6, 2001, and having a size of 43,116 bytes.","1. Field of the Invention","This invention relates to the field of computer software, and, more specifically, to electronic mail applications.","Portions of the disclosure of this patent document contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever. Sun, Sun Microsystems, the Sun logo, Java, JavaBeans, HotJava and all Java-based trademarks and logos are trademarks or registered trademarks of Sun Microsystems, Inc. in the United States and other countries.","2. Background Art","With the proliferation of personal computers and communications networks, electronic mail, commonly referred to as \u201ce-mail,\u201d has become a popular mechanism for the exchange or distribution of information among individuals, and within or between enterprises, for both private and commercial purposes. An e-mail message may be generated by a \u201csender\u201d using an email application on the sender's computer system, and transmitted over a communications network to a \u201creceiver\u201d on another computer system. The receiver is able to view the e-mail message using his own e-mail application.","One utility of many e-mail systems is the ability to \u201cattach\u201d previously authored information to an e-mail message. These \u201cattachments\u201d are transmitted with the e-mail message. Common forms of attached information include text files, graphics files and other forms of bounded data. With the development of the World Wide Web (WWW), also referred to simply as \u201cthe web\u201d, e-mail attachments have expanded to include web pages (e.g., HTML (hypertext markup language) documents) and URL's (universal resource locators) for web pages. These attachments are typically identified during construction of an e-mail message by typing or pasting the name of the file or the URL of the web page in a dialog entry window, or by perusing a file directory in order to select a file from a hierarchical list. Unfortunately, there is no mechanism within the e-mail application for previewing an attachment prior to selection, or for browsing for an attachment. This presents a particular disadvantage when selecting attachments associated with the World Wide Web, as a hierarchical list of linked web pages is typically not available and a user may not know the URL of a specific web page offhand. E-mail applications and the associated drawbacks may be better understood from an overview of electronic mail with reference to a known e-mail application.","Electronic Mail","An e-mail message may be analogized to a posted letter or piece of mail. However, instead of a physical object that is itself physically transported from a sender to a receiver, an e-mail message is an electronic representation that is communicated electronically through a communications network. Examples of communications networks used for communicating e-mail messages include, but are not limited to, tel-com networks, wide area networks (WANs), local area networks (LANs), the Internet, the World Wide Web, intranets, extranets, wireless networks, and other networks over which electronic, digital, and\/or analog data may be communicated.","E-mail messages are created, sent, received, and read using a communications program, often referred to as a \u201cmail\u201d or \u201ce-mail\u201d application program. An image of an interface of one e-mail program is illustrated in FIG. . The example is the interface of the mail module of Netscape Communicator, an internet browser application. The interface consists of a window  with a row of control buttons - across the top, headers - below the buttons, and a field that displays a list of messages. In the example of , the list indicates a single message  represented by an icon with adjacent text indicating the subject, namely \u201cMeeting on the 20th\u201d, from \u201cSender\u201d and created at 9:20 PM.","The buttons are used to create and modify messages. Button , \u201cGet Msg\u201d is used to open a message that has been selected in the list (messages can also be opened by double clicking on them). Button , \u201cNew Msg\u201d is used to create a new message form that can be completed and mailed to a receiver. \u201cReply\u201d button  is used to generate a reply form to a message that is currently in view. When activated, a message form is generated that has as its address the address of the sender of the message being viewed. Optionally, the reply message may include the entire text of the sender's message. \u201cForward\u201d button  generates a message form that includes the sender's message, but with a blank address, so that the message may be optionally annotated and forwarded to another receiver.","Button , \u201cFile\u201d, is used to save a message into a file in a text or other format. Button , \u201cPrint\u201d, is activated to print the message on an attached printer. \u201cSecurity\u201d button  activates security options for a message such as encryption, use of a digital certificate, or digital signature features, for example. Messages can be deleted by the \u201cDelete\u201d button . \u201cStop\u201d button  is used to interrupt or stop operations.","Headers above the message list indicate such information as \u201cSubject\u201d , \u201cTo\/From\u201d , \u201cDate\u201d , and \u201cPriority\u201d . Messages in the list can be sorted by subject, by sender or receiver, by ascending or descending date, by urgency, or by any combination thereof.","An e-mail message generated using the example mail program of  is illustrated in FIG. . The e-mail message  includes a palette of buttons -, along with buttons  and  from FIG. . An address field  indicates that the message is being sent to \u201cReceiver@receiver.com\u201d. A subject field  shows the subject as \u201cMeeting on the 20th\u201d. The body of the message is displayed in field .","The \u201cSend\u201d button  is activated to initiate the transmission of the message from the sender to the receiver. The \u201cQuote\u201d button  is used to insert the body of the text from a previous message into the body  of a current message. The \u201cAddress\u201d button  prompts the sender to enter an address of the receiver or to select an address from some stored address book. The \u201cSpelling\u201d button  performs a spell check on the message text, and the \u201cSave\u201d butt on  is used to save a message as a text file.","The \u201cAttach\u201d button  is used to attach one or more electronic files to the e-mail message. Often a sender wishes to send one or more files to a receiver. One method of sending a file to a receiver would be to copy the information from the file (e.g. the text from a text file) and paste that information into the message field  of an e-mail message. If the file is large, this may not be possible. Some e-mail systems have limitations on the size of the body of an e-mail message so that some files may be too large to be entered into the body of an e-mail message. In other cases, the files represent non-text data, such as sound, images, or movies, for example, that cannot be easily pasted into an e-mail message. In such circumstances, the attach feature is used.","When the attach button  is activated, a dialogue box appears that allows the sender to navigate through a file system and select files to be attached to the e-mail message. Navigation is typically performed using a hierarchical list of file names. After one or more files are selected, the sender transmits the e-mail message and attached file(s) to a receiver. When the receiver reads the message, there is an indicator that one or more files are attached. The receiver activates the attach button and is presented with a dialogue box that enables the receiver to retrieve the attached file or files and place them somewhere in the receiver's file system.","When a sender wishes to attach HTML documents and other web-based information to an e-mail message, the sender uses the hierarchical list of file names to locate the desired document, or the sender specifies, such as through a text entry mechanism, a URL for each HTML document. Each web page is comprised of one or more separate files in a file system. These files can include, for example, an HTML document and text, graphics and sound files identified by \u201ctags\u201d within the HTML document. Web pages are typically linked to other web pages via embedded URL's. In many cases, dozens of web pages are linked to each other to form a related presentation of data. To send such linked pages using e-mail, each page is attached to an e-mail message for sending to a receiver.","A method and apparatus for selecting attachments is described. When a sender indicates in an e-mail application or applet that an attachment is to be associated with an e-mail message, an attachment chooser window is presented. The attachment chooser window provides a browser-based graphical user interface (GUI) which allows a sender to browse data resources, such as HTML documents and associated links. An attachment mechanism is provided by which a sender can choose a currently displayed data resource for attachment in an e-mail message. In one embodiment, the attachment mechanism allows a user to select whether the attachment is retrieved and attached to an e-mail message as a resource locator (such as a URL) of the chosen data resource, or whether source data of the data resource is retrieved and attached to the e-mail message as one or more source files.","In an embodiment of the invention, an attachment chooser software component is instantiated by an e-mail application. The attachment chooser software component is configured to provide the graphical user interface for selecting a web-based attachment, and comprises the following components: a menu component configured to control how an attachment is added to an e-mail message, e.g., as a resource locator or as source data; an editable \u201cgo-to\u201d text field component configured to identify the resource locator of the currently viewed data resource; a toolbar component providing the basic navigation controls for browsing data resources such as web pages; a browsing component configured to perform parsing and rendering of data resources; and one or more button components configured to receive input to attach a currently viewed data resource to an e-mail message or to cancel an attachment session.","The invention is a method and apparatus for selecting attachments. In the following description, numerous specific details are set forth to provide a more thorough description of embodiments of the invention. It will be apparent, however, to one skilled in the art, that the invention may be practiced without these specific details. In other instances, well known features have not been described in detail so as not to obscure the invention.","An embodiment of the present invention provides for navigation and browsing of data resources, such as text, graphics and audio source data, when selecting attachments for an e-mail message. These data resources may also include source data containing data written in a markup language (e.g., HTML) that may be rendered by a browsing mechanism, and source data containing links such as embedded resource locators (e.g., URL's or other location references to data resources) that may be used by a browsing mechanism to navigate from one data resource to another. Data resources may contain source data in the form of one or more files, documents, streams and other sources of electronic information, or portions thereof.","By providing the ability to view the contents of prospective attachments before they are attached, a sender is able to confirm that the attachment contains the data expected. Also, via the browsing feature, a sender using an embodiment of the invention has access to advanced search engines on the web to further assist in the location of desired attachments. Advanced search features are not available in e-mail systems of the prior art.","In an embodiment of the invention, linked data resources can be traversed through standard browsing operations in order to locate a desired attachment. This is an advantage over navigation of a hierarchical list of file names, because a hierarchical file list does not provide information regarding possible embedded links to other files that may exist for web pages and other types of compound or linked documents. Further, web links via URL typically have little or no correspondence to particular file system hierarchies and often transcend single file systems, necessitating, in systems of the prior art, that the sender have knowledge of the particular URL's or the respective file names and directories for the web page or pages that are to be attached to an e-mail message.",{"@attributes":{"id":"P-00034","num":"00034"},"figref":"FIG. 7","b":["700","701"]},"In step , the sender uses the browser capability of the GUI interface to navigate through the web using a navigation tool set or by selecting links within displayed data resources such as HTML documents. The browsable web may include the World Wide Web or it may comprise a constrained local web.","If the desired web page or other data resource is not found in step , the sender selects \u201ccancel\u201d from the GUI interface in step  and dismisses the GUI interface. If a desired web page or other data resource is found in step , the sender selects \u201cattach\u201d from the GUI interface and the selected attachment is attached to the e-mail message. If the sender does not wish to select any further attachments in step , the user selects \u201ccancel\u201d in step  to dismiss the GUI interface. However, if further attachments are desired in step , the method returns to step .","The following description discloses embodiments of apparatus for implementing the method of selecting attachments disclosed above with respect to FIG. . Description is provided of a GUI interface in accordance with an embodiment of the invention. The discussion of the GUI interface embodiment is followed by description of software apparatus configured to implement the GUI interface and provide for selection of attachments in accordance with an embodiment of the invention. First, however, description is given below of an embodiment of computer apparatus suitable for providing an execution environment for the software apparatus of the invention.","Embodiment of Computer Execution Environment (Hardware)","An embodiment of the invention can be implemented as computer software in the form of computer readable code executed on a general purpose computer such as computer  illustrated in , or in the form of bytecode class files executable within a Java\u2122 runtime environment running on such a computer. A keyboard  and mouse  are coupled to a bi-directional system bus . The keyboard and mouse are for introducing user input to the computer system and communicating that user input to processor . Other suitable input devices may be used in addition to, or in place of, the mouse  and keyboard . I\/O (input\/output) unit  coupled to bi-directional system bus  represents such I\/O elements as a printer, A\/V (audio\/video) I\/O, etc.","Computer  includes a video memory , main memory  and mass storage , all coupled to bi-directional system bus  along with keyboard , mouse  and processor . The mass storage  may include both fixed and removable media, such as magnetic, optical or magnetic optical storage systems or any other available mass storage technology. Bus  may contain, for example, thirty-two address lines for addressing video memory  or main memory . The system bus  also includes, for example, a 32-bit data bus for transferring data between and among the components, such as processor , main memory , video memory  and mass storage . Alternatively, multiplex data\/address lines may be used instead of separate data and address lines.","In one embodiment of the invention, the processor  is a microprocessor manufactured by Motorola, such as the 680\u00d70 processor or a microprocessor manufactured by Intel, such as the 80\u00d786, or Pentium processor, or a SPARC\u2122 microprocessor from Sun Microsystems\u2122, Inc. However, any other suitable microprocessor or microcomputer may be utilized. Main memory  is comprised of dynamic random access memory (DRAM). Video memory  is a dual-ported video random access memory. One port of the video memory  is coupled to video amplifier . The video amplifier  is used to drive the cathode ray tube (CRT) raster monitor . Video amplifier  is well known in the art and may be implemented by any suitable apparatus. This circuitry converts pixel data stored in video memory  to a raster signal suitable for use by monitor . Monitor  is a type of monitor suitable for displaying graphic images.","Computer  may also include a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling via a network link  to a local network . For example, if communication interface  is an integrated services digital network (ISDN) card or a modem, communication interface  provides a data communication connection to the corresponding type of telephone line, which comprises part of network link . If communication interface  is a local area network (LAN) card, communication interface  provides a data communication connection via network link  to a compatible LAN. Wireless links are also possible. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals which carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to local server computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals which carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer , are exemplary forms of carrier waves transporting the information.","Computer  can send messages and receive data, including program code, through the network(s), network link , and communication interface . In the Internet example, remote server computer  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accord with the invention, one such downloaded application is the apparatus for selecting attachments described herein.","The received code may be executed by processor  as it is received, and\/or stored in mass storage , or other non-volatile storage for later execution. In this manner, computer  may obtain application code in the form of a carrier wave.","Application code may be embodied in any form of computer program product. A computer program product comprises a medium configured to store or transport computer readable code, or in which computer readable code may be embedded. Some examples of computer program products are CD-ROM disks, ROM cards, floppy disks, magnetic tapes, computer hard drives, servers on a network, and carrier waves.","The computer systems described above are for purposes of example only. An embodiment of the invention may be implemented in any type of computer system or programming or processing environment.","Embodiment of an Attachment Chooser Graphical User Interface (GUI)","In an embodiment of the invention, a sender initiates an attachment session by pressing a button or selecting an item from a menu (e.g., an \u201cattach\u201d button or menu item) presented by an e-mail application during composition of an e-mail message. The pressing of the button or selecting of the menu item in the e-mail application generates an event which initiates an attachment session and triggers the presentation of a new window or frame providing an attachment chooser GUI interface. Other mechanisms configured to invoke the attachment chooser GUI interface may be used as well.","An embodiment of an attachment chooser GUI interface in accordance with an embodiment of the invention is illustrated in FIG. . The attachment chooser GUI interface (\u201cchooser interface\u201d) is configured as a web browser. To facilitate browsing, the chooser interface contains display region  in which the rendered data, such as HTML data, for a current web page is displayed. Display region  is configured as a scrollable display with vertical scrollbar A and horizontal scrollbar B. A \u201cGoTo\u201d field  is provided on the chooser interface which contains the resource locator (e.g., URL) of the current web page. \u201cGoTo\u201d field  is editable, permitting the sender to specify a particular resource locator. Entering a resource locator into \u201cGoTo\u201d field  causes the chooser interface to display the associated data resource (e.g., an associated web page is displayed in display region ).","The chooser interface further comprises navigation toolbar , which is configured with basic navigation controls in the form of \u201cprevious page\u201d button , \u201cnext page\u201d button , \u201chome\u201d button , \u201creload\u201d button  and \u201cstop\u201d button . Menu  provides a mechanism by which the sender can specify whether attachments selected with the chooser interface are to be attached as a simple resource locator or as the source data of the data resource associated with the resource locator. Menu  is configured with selectable states, with the currently selected state indicating the form an attachment will take (i.e., the \u201cattachment type\u201d). The current state of menu  in  specifies that attachments are to be attached as URL's.","Several control buttons are also provided on the chooser interface. \u201cAttach\u201d button , when activated, is configured to return an attachment associated with the currently displayed data resource to the e-mail application for attachment to the e-mail message being composed. The state of menu  is queried, when \u201cattach\u201d button  is activated, to determine how the attachment is to be returned to the e-mail application, e.g., as a URL or as an input stream containing the bits of the source data associated with the URL. \u201cCancel\u201d (or \u201cDone\u201d) button  is configured to dismiss the chooser interface when activated, ending the attachment session. A \u201chelp\u201d button (not shown) may also be provided which, when activated, causes a web page containing chooser interface-related help information to be displayed in display region .","When the chooser interface is first displayed, the sender's home page (as specified in user preferences or by a default URL) is displayed in display region . Because there is no resource locator history when the attachment session begins, the previous\/next page navigation buttons  and  are disabled. At this point, the sender can either type a new resource locator into \u201cGoTo\u201d field , or select a resource locator link contained in the displayed home page. When a link is selected, the chooser interface automatically displays the page or data resource associated with the selected link. The resource locator is extracted, and \u201cGoTo\u201d field  is updated.","When \u201cprevious page\u201d button  is activated (e.g., when a mouse button is depressed while a mouse cursor is above button ), a resource locator history is accessed to change the currently displayed data resource to the previously displayed data resource. Similarly, when \u201cnext page\u201d button  is activated, the resource locator history is accessed to change the currently displayed data resource to the next data resource. \u201cPrevious page\u201d button  is enabled once a resource locator history is established by browsing at least two data resources. When \u201cprevious page\u201d button  is used to navigate backward through a resource locator history, \u201cnext page\u201d button  is enabled to permit navigation forward through the resource locator history.","\u201cHome\u201d button  is configured to cause the sender's home page to be displayed in display region . \u201cReload\u201d button  is configured to reload the current web page (or other current data resource). Reloading is particularly useful when the current web page contains data that is dynamically updated. \u201cStop\u201d button  is configured to halt the loading of the current web page. \u201cStop\u201d button  can be used to halt the download of large, undesired graphics files, or to stop animated graphics.","Embodiment of Software Apparatus for Selecting Attachments","An embodiment of the invention includes software apparatus comprising a component or collection of components configured to support an attachment chooser GUI interface, such as the chooser interface previously described with reference to FIG. . The components may be implemented as instances of object classes in accordance with known object-oriented programming practices, or the components may be implemented under one or more component model definitions. Several component model definitions are currently available, such as COM, CORBA, and the Java\u2122 component scheme referred to as JavaBeans\u2122.","Each component model provides for encapsulation of related functions and data structures into individual components, similar to what occurs under a standard object-oriented programming (OOP) approach. The particular mechanisms by which the components are managed and interact are defined according to the respective component model. Bridges (e.g., ActiveX) may be constructed which allow components designed under different component model definitions to interact within a single application. Interaction is typically performed through a set of methods implemented by the component. These sets of methods are referred to as \u201cinterfaces\u201d in some component models. The public methods by which OOP object classes interact are often presented in the form of application programming interface (API) definitions.","To provide a better understanding of encapsulation of related data structures and methods, an overview of object-oriented programming is provided below.","Object-Oriented Programming","Object-oriented programming is a method of creating computer programs by combining certain fundamental building blocks, and creating relationships among and between the building blocks. The building blocks in object-oriented programming systems are called \u201cobjects.\u201d An object is a programming unit that groups together a data structure (one or more instance variables) and the operations (methods) that can use or affect that data. Thus, an object consists of data and one or more operations or procedures that can be performed on that data. The joining of data and operations into a unitary building block is called \u201cencapsulation.\u201d","An object can be instructed to perform one of its methods when it receives a \u201cmessage.\u201d A message is a command or instruction sent to the object to execute a certain method. A message consists of a method selection (e.g., method name) and a plurality of arguments. A message tells the receiving object what operations to perform.","One advantage of object-oriented programming is the way in which methods are invoked. When a message is sent to an object, it is not necessary for the message to instruct the object how to perform a certain method. It is only necessary to request that the object execute the method. This greatly simplifies program development.","Object-oriented programming languages are predominantly based on a \u201cclass\u201d scheme. The class-based object-oriented programming scheme is generally described in Lieberman, \u201cUsing Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems,\u201d OOPSLA 86 Proceedings, September 1986, pp. 214-223.","A class defines a type of object that typically includes both variables and methods for the class. An object class is used to create a particular instance of an object. An instance of an object class includes the variables and methods defined for the class. Multiple instances of the same class can be created from an object class. Each instance that is created from the object class is said to be of the same type or class.","To illustrate, an employee object class can include \u201cname\u201d and \u201csalary\u201d instance variables and a \u201cset_salary\u201d method. Instances of the employee object class can be created, or instantiated for each employee in an organization. Each object instance is said to be of type \u201cemployee.\u201d Each employee object instance includes \u201cname\u201d and \u201csalary\u201d instance variables and the \u201cset_salary\u201d method. The values associated with the \u201cname\u201d and \u201csalary\u201d variables in each employee object instance contain the name and salary of an employee in the organization. A message can be sent to an employee's employee object instance to invoke the \u201cset_salary\u201d method to modify the employee's salary (i.e., the value associated with the \u201csalary\u201d variable in the employee's employee object).","A hierarchy of classes can be defined such that an object class definition has one or more subclasses. A subclass inherits its parent's (and grandparent's etc.) definition. Each subclass in the hierarchy may add to or modify the behavior specified by its parent class. Some object-oriented programming languages support multiple inheritance where a subclass may inherit a class definition from more than one parent class. Other programming languages support only single inheritance, where a subclass is limited to inheriting the class definition of only one parent class. The Java\u2122 programming language also provides a mechanism known as an \u201cinterface\u201d which comprises a set of constant and abstract method declarations. An object class can implement the abstract methods defined in an interface. Both single and multiple inheritance are available to an interface. That is, an interface can inherit an interface definition from more than one parent interface.","An object is a generic term that is used in the object-oriented programming environment to refer to a module that contains related code and variables. A software application can be written using an object-oriented programming language whereby the program's functionality is implemented using objects. As previously discussed, the encapsulation provided by objects in an object-oriented programming environment may be extended to the notion of components under a component model definition.","Implementation in the Java\u2122 Programming Language","An embodiment of the software apparatus of the invention is implemented in the Java\u2122 programming language. The Java\u2122 programming language is an object-oriented programming language with each program comprising one or more object classes. Unlike many programming languages, in which a program is compiled into machine-dependent, executable program code, Java\u2122 classes are compiled into machine independent bytecode class files. Each class contains code and data in a platform-independent format called the class file format. The computer system acting as the execution vehicle supports the Java\u2122 runtime environment. The runtime environment contains a program called a virtual machine, which is responsible for executing the code in Java\u2122 classes.","Applications may be designed as standalone Java\u2122 applications, or as Java\u2122 \u201capplets\u201d which are identified by an applet tag in an HTML document, and loaded by a browser application. The class files associated with an application or applet may be stored on the local computing system, or on a server accessible over a network. Each class is loaded into the Java\u2122 runtime environment, as needed, by the \u201cclass loader.\u201d","Java\u2122 classes are loaded on demand from the network (stored on a server), or from a local file system, when first referenced during an application or applet's execution. The runtime environment locates and loads each class file, parses the class file format, allocates memory for the class's various components, and links the class with other already loaded classes. This process makes the code in the class readily executable by the virtual machine.","Java\u2122 classes may also be incorporated into Java\u2122 components referred to as \u201cJavaBeans\u2122\u201d. JavaBeans\u2122 are designed in accordance with the JavaBean\u2122 API Specification to allow for component-based application building. Bridges (e.g., ActiveX bridges) may be used with JavaBeans\u2122 to allow JavaBeans\u2122 to be used in other component model environments, such as OLE\/COM and CORBA.","Support for features such as \u201cintrospection,\u201d \u201ccustomization,\u201d \u201cevents,\u201d \u201cproperties\u201d and \u201cpersistence\u201d is provided within the JavaBean\u2122 framework to facilitate application building and component use. \u201cIntrospection\u201d permits builder tools to analyze how a particular bean works. \u201cCustomization\u201d permits an application builder to customize the appearance and behavior of a bean. \u201cEvents\u201d provide a simple communication metaphor that can be used to connect a bean with other application components or beans. \u201cProperties\u201d are used for bean customization and programmatic use. \u201cPersistence\u201d allows for a bean to have its customized state saved and reloaded later. These features are discussed in the JavaBean\u2122 API Specification, Version 1.01, by Sun Microsystems (1997), which is available on the World Wide Web at the URL, \u201chttp:\/\/java.sun.com\/beans\/spec.html\u201d, and is incorporated herein by reference.","Embodiments of the software apparatus may be implemented using standard OOP object classes or using components under a known component model definition. For the purposes of the following description, references to components may refer to instances of OOP object classes or components under a known component model.","Implementation of Software Apparatus",{"@attributes":{"id":"P-00077","num":"00077"},"figref":"FIG. 5A","b":["501","502","500","502","500"]},"Attachment mechanism  is configured to respond to user input selecting a currently displayed data resource for attachment by retrieving the attachment from browsing mechanism , and providing the attachment to e-mail application . The attachment may be retrieved in the form of different attachment types. For example, the attachment may be retrieved as a resource locator associated with the currently displayed data resource, or as all of or a subset of the source data of the currently displayed data resource. Attachment mechanism  may be further configured to respond to user input to select the attachment type.","An embodiment of the apparatus of  is illustrated in  in the form of software components. In the embodiment of , attachment mechanism is implemented as attachment chooser , whereas browsing mechanism  is implemented as HTML browsing component . The embodiment of  is directed to HTML-based data resources, though it will be obvious to one skilled in the art that embodiments of the invention may be similarly implemented for other forms of data resources.",{"@attributes":{"id":"P-00080","num":"00080"},"figref":"FIG. 5B","b":["500","501","500","501","501","502","510","501","511","514","500","501","501"]},"The individual components of attachment chooser component  comprise multiple button components -, - and - corresponding to the displayed buttons on the chooser GUI interface illustrated in FIG. . The button components receive a \u201cbuttonPushed\u201d event when the corresponding graphic representation of the button on the chooser GUI interface is clicked (i.e., a mouse button is pressed while a cursor is within the bounds of the button representation). Receipt of the buttonPushed event can be used to trigger a particular action or set of actions. For the case of browser-related button components - and -, the buttonPushed event is used to invoke a corresponding method of HTML browsing component , wherein methods for navigating the web and for parsing and rendering HTML data are implemented.","Component  is an \u201cattach\u201d menu in support of element  of FIG. . \u201cAttach\u201d menu  allows a user to select a current menu state from a set of possible menu states. For this embodiment, the set of possible menu states include \u201cURL\u201d and \u201cInputStream\u201d (or \u201cSource\u201d), which define the form an attachment is to take (i.e., the \u201cattachment type\u201d) when the attachment is selected. \u201cAttach\u201d menu  includes an access method by which attachment chooser component  can query the menu state at the time an attachment is selected.","Component  is an editable \u201cgoto\u201d textfield in support of element  of FIG. . Textfield  displays the URL of the current web page. In order to update the displayed URL, textfield  receives events from HTML browsing component  when the web page displayed by HTML browsing component  changes, for example, through selection of a link within a displayed web page. Also, textfield  can receive user input specifying a new URL, in which case, textfield  invokes an access method of HTML browsing component , such as setDocumentURL(URL url), to update the current document property in the HTML browsing component . Invoking the access method of HTML browsing component  causes the browsing component to navigate to the new URL.","Component  is a callback list that includes each component or application that registers with attachment chooser component  as an \u201cActionListener.\u201d Callback list  is used by \u201cattach\u201d button  to deliver events when the \u201cattach\u201d button  (supporting element  of ) is activated by a buttonPushed event. For this embodiment, e-mail application  is part of callback list , and is therefore informed through a callback event when the \u201cattach\u201d button is activated. E-mail application  responds to the callback event by retrieving the attachment from attachment chooser component  through an API call.","Component  is a \u201ccancel\u201d button in support of element  of FIG. . When a buttonPushed event is received, \u201ccancel\u201d button  dismisses attachment chooser component , removing the chooser GUI interface from display. In some embodiments, \u201ccancel\u201d button  may also be used to initiate a shutdown of attachment chooser component , including the release of memory allocated to attachment chooser component  and its associated underlying components.","As previously stated, methods for navigating and for parsing and rendering HTML data are implemented within HTML browsing component . In , an HTML parsing and rendering component  and a document stack component  cooperate to form HTML browsing component . HTML parsing and rendering component  derives from a scrollable panel class and is configured to support the display region  and scrollbars A and B of FIG. . Document stack  maintains the browser history in the form of a stack of URL's, providing the record necessary for the forward and back navigation familiar to web browsers. When a link is selected within a web page, HTML parsing and rendering component  navigates to the new web page designated by the link, and sends an event to document stack , so that document stack  knows to push the URL of the new web page onto the stack.","Component  is a \u201cprevious\u201d button in support of element  of FIG. . \u201cPrevious\u201d button  is set to activate a previousDocument() method of document stack  when a buttonPushed event is received. In response, document stack  sends an event to HTML parsing and rendering component  indicating that it should go to the previous web page. Component  is a \u201cnext\u201d button in support of element  of FIG. . \u201cNext\u201d button  is set to activate a nextDocument() method of document stack  when a buttonPushed event is received. In response, document stack  sends an event to HTML parsing and rendering component  indicating that it should go to the next web page. Properties within document stack  indicate whether a \u201cprevious page\u201d or a \u201cnext page\u201d are available. Access methods for these properties may be used to control the enablement of \u201cprevious\u201d button  and \u201cnext\u201d button .","Components - are a \u201chome\u201d button, \u201creload\u201d button and \u201cstop\u201d button in support of elements ,  and , respectively, of FIG. . Similarly to buttons  and , buttons - are set to activate corresponding methods within HTML browsing component  when a buttonPushed event is received. Specifically, button  invokes the setDocumentURL(URL url) method, designating the sender's home page URL; button  invokes a reload() method; and button  invokes a stop() method. In this embodiment, the setDocumentURL(), reload() and stop() methods are implemented in HTML parsing and rendering component .","In an embodiment of the invention, the button, menu and textfield components may be implemented using pre-defined object classes from the Java\u2122 Abstract Windowing Toolkit (AWT) package, including a textfield class, a menu class, and a button class. Also, in an embodiment of the invention, the HTML parsing and rendering component  and document stack  may be implemented with the HotJava\u2122 HTML Component and the Document Stack Bean specified for the HotJava\u2122 Browser. Documentation for the Document Stack Bean and the HotJava HTML Component are provided herein as Appendix A. The respective API's of the Document Stack Bean and the HotJava HTML Component may be referenced therein. It will be obvious to one skilled in the art that other known or user-defined components or combinations of components may also be used to implement the components of the software apparatus illustrated in FIG. B.","Attachment chooser component  presents the following API to e-mail application :\n\n","The addActionListener() and removeActionListener() are methods available to e-mail application  (and other components) to subscribe or unsubscribe to callback list . Those components that are registered as an ActionListener will receive a callback event when \u201cattach\u201d button  is activated. Receipt of the callback event generated by \u201cattach\u201d button  indicates that the sender has selected the current web page as an attachment.","The getAttachment() method is used by e-mail application  to retrieve an attachment after receipt of a callback event from \u201cattach\u201d button . When getAttachment() is called, attachment chooser component  queries the menu state of \u201cattach\u201d menu  to determine the attachment type. If the menu state indicates \u201cURL,\u201d then attachment chooser component  invokes the getDocumentURL() method of HTML browsing component  to extract and return the URL of the current web page. If the menu state indicates \u201cInputStream\u201d (or \u201cSource\u201d), then attachment chooser component  invokes the getDocumentSource() method of HTML browsing component  to extract and return the source data of the current web page as an input stream. This scheme can be expanded to similarly include attachments in the form of selections from a web page (e.g., user highlighted portions of a page), or in the form of indicated elements whose value is a link under a cursor.","The getName() method is used by e-mail application  to extract the name or title of a current document to associate with an attachment previously extracted using the getAttachment() method. The setURL() method provides a mechanism by which the e-mail application can specify a URL to be viewed.",{"@attributes":{"id":"P-00104","num":"00104"},"figref":"FIG. 6","b":["600","600","601","602","603"]},"At step , the e-mail application waits for receipt of a callback event from the attachment chooser component. After the callback event is received, indicating that the sender has selected an attachment, the e-mail application retrieves the attachment from the attachment chooser component in step , for example, by invoking a getAttachment() method. In step , a branching occurs based on whether the retrieved attachment object is an object of type URL or an object of type InputStream. If the attachment is a URL object, in step , the attachment is included as a URL in the e-mail message under composition. If the attachment is an InputStream object, in step , the attachment is included as source files in the e-mail message.","Thus, a method and apparatus for selecting attachments has been described in conjunction with one or more specific embodiments. The invention is defined by the claims and their full scope of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 5A"},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 5B"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
