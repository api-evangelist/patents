---
title: Methods and apparatus for performing database management utility processes
abstract: In one general aspect, a computer-readable storage medium can be configured to store instructions that when executed cause a processor to perform a process. The instructions can include instructions to identify, at a mainframe computing environment during an initiation phase associated with a management utility process, a set of tasks for implementing the management utility process, and instructions to send, to a non-mainframe computing environment, a description identifying at least a portion of the set of tasks. The instructions can also include instructions to receive an indicator, at the mainframe computing environment, that processing based on the at least the portion of the set of tasks associated with the management utility process has been completed, and instructions to execute a termination phase of the management utility process at the mainframe computing environment in response to the indicator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09104429&OS=09104429&RS=09104429
owner: BMC SOFTWARE, INC.
number: 09104429
owner_city: Houston
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The subject matter of the present disclosure relates to handling of database management utility processes.","A database management system (DBMS) can be configured to manage large databases and provide an operational environment in which stored information can be accessed (e.g., retrieved) and\/or modified (e.g., updated). In one type of DBMS, which can be referred to as a relational database system, information can be stored in tables where each table can have one or more columns and one or more rows. Each column in a table can be referred to as an attribute of the table, and each row in a table can be referred to as a record. One known example of a relational database management system is a DB2 database system.","Various types of database management utility processes can be used to manipulate data stored in one or more DB2 database systems. In known systems, these database management utility processes can consume a significant quantity of processing resources (e.g., hardware resources, software resources) of a mainframe computing system that can be measured in millions of instructions per second (MIPS). Because the processing resources of known mainframe computing systems can be relatively expensive (relative to non-mainframe computing resources), operating database management utility processes at these mainframe computing systems can be expensive. As processing needs continue to increase, customers are continually seeking for ways to reduce the costs associated with operation of mainframe computing resources. Thus, a need exists for systems, methods, and apparatus to address the shortfalls of present technology and to provide other new and innovative features.","In one general aspect, a computer-readable storage medium can be configured to store instructions that when executed cause a processor to perform a process. The instructions can include instructions to identify, at a mainframe computing environment during an initiation phase associated with a management utility process, a set of tasks for implementing the management utility process, and instructions to send, to a non-mainframe computing environment, a description identifying at least a portion of the set of tasks. The instructions can also include instructions to receive an indicator, at the mainframe computing environment, that processing based on the at least the portion of the set of tasks associated with the management utility process has been completed, and instructions to execute a termination phase of the management utility process at the mainframe computing environment in response to the indicator.","In another general aspect, an apparatus can include a mainframe computing device including an initiation manager configured to identify a database object processing task associated with a management utility process. The apparatus can also include a non-mainframe computing device configured to execute the database object processing task, and configured to send, to the mainframe computing device, an indicator that execution of the database object processing task has been completed. The mainframe computing device can include a termination manager configured to receive the indicator that the database object processing task has been completed, and configured to terminate the management utility process in response to the indicator.","In yet another general aspect, a computer-readable storage medium can be configured to store instructions that when executed cause a processor to perform a process. The instructions can include instructions to receive, at a non-mainframe computing environment, an identifier of a database object and a description of a task for processing the database object, and instructions to access the database object at a storage device via a storage interface. The instructions can also include instructions to process the database object at the non-mainframe computing environment based on the task, and instructions to send an indicator, to a mainframe computing environment, that processing based on the task has been completed.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","110","120","120","140","130","130","110","130","140","140"]},"In some embodiments, the database management system  can be any type of database system (e.g., a database system using a storage interface ) such as a DB2 database system, a non-DB2 database system, an Information Management System (IMS) database system, a database\/storage system based on various type of z\/OS file formats (e.g., virtual storage access method (VSAM) file formats, basic sequential access method (BSAM) file formats), and so forth. The mainframe computing environment  can be referred to as a mainframe computing environment because the mainframe computing environment  is based on a mainframe platform. For example, the mainframe computing environment  can be configured to operate based on a 32-bit operating system, or a 64-bit operating system for a mainframe computer such as z\/OS.","In contrast, the non-mainframe computing environment  can be referred to as a non-mainframe computing environment because the non-mainframe computing environment  is based on a non-mainframe platform. For example, the non-mainframe computing environment  can be configured to operate based on a Windows operating system, a LINUX operating system, and\/or a UNIX operating system. In this embodiment, the non-mainframe computing environment  includes multiple resources (e.g., computing resources, processing resources) shown as resource A and resource B. In some embodiments, each of the resources can be referred to as a non-mainframe computing device. In some embodiments, the non-mainframe computing environment  can include more or less resources than shown in ","As shown in , the mainframe computing environment  includes a management utility module . The management utility module  is configured to manage processing (e.g., processing cycles) of a management utility process. The management utility module  is configured to delegate (e.g., offload) at least some portions of the processing (e.g., processing cycles) related to a management utility process to the non-mainframe computing environment . In some embodiments, the management utility process can include any type of utility process related to management of data within the database management system . Specifically, the management utility process can be configured to process (e.g., access, manipulate, modify) one or more objects stored in the storage device . In some embodiments, the objects stored in the storage device  can be referred to as data objects or as database objects. In some embodiments, the objects can be stored in files. If the database management system  is a DB2 system for z\/OS, the object can be managed using z\/OS file services implemented by, for example, a DB2 subsystem (e.g., subsystem ).","For example, in some embodiments, a management utility process can be, or can include, an UNLOAD process (e.g., an UNLOAD management utility process) configured to read, process, and\/or produce a flat file from a database object (e.g., a DB2 database object) stored in the storage device . In some embodiments, a management utility process can be, or can include a LOAD process (e.g., a LOAD management utility process) configured to read a flat file and produce a database object (e.g., a DB2 database object) for storage in the storage device . In some embodiments, a management utility process can be, or can include a REORG process (e.g., a REORG management utility process) that can be a combination of an UNLOAD process and a LOAD process, or vice versa. In some embodiments, a management utility process can be, or can include, a CHECK process (e.g., a CHECK management utility process) configured to identify (e.g., check) data integrity issues related to objects stored in the storage device . In some embodiments, one or more management utility processes can be triggered by a user (e.g., an administrator) of the database management system , generated by one or more applications operating in conjunction with the database management system , generated based on a schedule of management utility processes to be executed at the database management system , and\/or so forth. In some embodiments, other types of management utility processes (e.g., a COPY management utility process, a RECOVER management utility process, a LOG management utility process, etc.) can be handled by the database management system  (e.g., managed by the mainframe computing environment ) shown in .","Because the mainframe computing environment  can be configured to delegate processing (at least a portion of processing) to the non-mainframe computing environment , computing resources (e.g., processing resources, hardware resources, software resources, execution cycles measured in millions of instructions per second (MIPS)) associated with the non-mainframe computing environment  can be used instead of computing resources associated with the mainframe computing environment  to perform (e.g., execute, complete) one or more management utility processes. In other words, the computing resources of the non-mainframe computing environment  can be used instead of the computing resources of the mainframe computing environment  to handle processing related to a management utility process. Said differently, a ratio of processing performed at the non-mainframe computing environment  and performed at the mainframe computing environment  within the database management system  can be changed (e.g., increased).","Accordingly, the computing resources of the mainframe computing environment  are not used and can be reserved for other types of processing. In some implementations, the computing resources of the mainframe computing environment  can be relatively expensive (e.g., expensive from a computing resource perspective, expensive from a cost perspective) to operate compared with the computing resources of the non-mainframe computing environment . Thus, by offloading processing from mainframe computing environment  to the non-mainframe computing environment , the overall cost of operation of the database management system  can be reduced compared with scenarios where processing is not offloaded from the mainframe computing environment  to the non-mainframe computing environment .","In this embodiment, the mainframe computing environment  can be configured to manage processing of (e.g., execution of) a management utility process in phases. Specifically, management of one or more management utility processes can be handled during an initiation phase, a distribution phase, and a termination phase. During the initiation phase, various types of information for initiation of a management utility process is retrieved (e.g., collected) and\/or defined within the mainframe computing environment . During the distribution phase, processing related to the management utility process (based on the information for initiation of the management utility process) can be delegated from the mainframe computing environment  to the non-mainframe computing environment . During the termination phase, the mainframe computing environment  can be configured to terminate processing related to the management utility process after processing related to the distribution phase has been completed at the non-mainframe computing environment . During the initiation phase, the distribution phase, and\/or the termination phase, the mainframe computing environment  and\/or the non-mainframe computing environment  can be configured to update database catalog information (e.g., DB2 catalog information), manage database objects and\/or file structures, and\/or so forth. In some embodiments, access to one or more database objects (e.g., DB2 objects) during the initiation phase, the distribution phase, and\/or the termination phase can be serialized or performed in parallel.","An initiation manager  of the management utility module  can be configured to perform various functions during an initiation phase related to a management utility process. The initiation manager  includes a management utility process identifier  configured to receive one or more indicators (e.g., requests) that a management utility process is to be executed. In some embodiments, the indicator(s) can include, or can be included in, a description of the management utility process. For example, the one or more indicators can include, for example, an identifier of a type of management utility process to be executed (such as an UNLOAD, LOAD, REORG, and\/or CHECK management utility process), a name of the management utility process, an owner of the management utility process, a schedule (e.g., a date-time stamp) for executing management utility process, and\/or so forth. In some embodiments, the indicator can be generated by a user (e.g., an administrator) operating the database management system , generated by one or more applications operating in conjunction with the database management system , generated based on a schedule of management utility processes to be executed at the database management system , and\/or so forth.","During the initiation phase, one or more objects (e.g., database objects) to be processed based on the management utility process can be identified by an object identifier  of the initiation manager . In some embodiments, a description of the management utility process received by the management utility process identifier  can include one or more indicators of an object to be processed based on the management utility process. In some embodiments, the one or more indicators can include, for example, a location (e.g., a memory location, an address) of the object, an identifier (e.g., a name) of the object, a size of the object, a description of data stored as the object, a structure of the object, a format (e.g., a storage format, a file format) of the object, and\/or so forth","In some embodiments, the object identifier  can be configured to perform various types of processing to identify one or more objects to be processed based on the management utility process. For example, the management utility process identifier  can be configured to determine that an UNLOAD management utility process is to be executed with respect to an object stored in the storage device . The object identifier  can be configured to determine the specific object to be processed (e.g., accessed, retrieved) based on the UNLOAD management utility process. The object identifier  can be configured to access the storage device  to identify a location, a format, and\/or so forth of the object.","A task generator  of the initiation manager  can be configured to identify one or more tasks (which can be referred to as a set of tasks) associated with (e.g., for implementing) the management utility process. The management utility process can be divided into discrete tasks, that when executed, can result in completion of the management utility process. For example, a first task associated with an UNLOAD management utility process can include reading data of an object having a particular format, and a second task associated with the UNLOAD management utility process can include translating or transferring the data to an object have being a different format. As another example, multiple tasks such as reading several objects from the storage device  can be performed in parallel, and the several objects that are read in parallel can later be combined into another object (based on another task). Accordingly, in some embodiments, one or more tasks associated with management utility process can be tasks that can be performed in parallel or can be tasks that are to be performed serially. In some embodiments, a task can be referred to as a database object processing task.","In some embodiments, a task associated with management utility process can be referred to as an attached task. In some embodiments, an attached task is a task that can be configured for execution on the mainframe computing environment  to perform a management utility process on one or more database objects (e.g., one or more DB2 objects in parallel). In this embodiment, the attached task can be delegated by the mainframe computing environment  to the non-mainframe computing environment  for processing (e.g., for execution).","As shown in , the initiation manager  includes a computing resource detector . The computing resource detector  is configured to identify resources within the non-mainframe computing environment  to process one or more tasks associated with the management utility process. In some embodiments, the computing resource detector  can be configured to query the non-mainframe computing environment  about resources available for (or that will be available for) processing related to a management utility process, and can be configured to receive (in response to the query) one or more indicators (e.g., responses) of resources that are available for processing related to the management utility process.","After the initiation phase associated with a management utility process has been completed, processing associated with a distribution phase can be started. During the distribution phase, a distribution manager  of the management utility module  is configured to send one or more parameter values in a delegation instruction (also can be referred to as an execution instruction) to the non-mainframe computing environment  so that the non-mainframe computing environment  can perform processing associated with a management utility process. The delegation instruction(s) can be an instruction(s) configured to trigger the non-mainframe computing environment  to perform a specific task.","For example, after the task generator  has identified one or more tasks associated with a management utility process during an initiation phase, the computing resource detector  can be configured to identify resources within the non-mainframe computing environment  available to process the one or more tasks. The distribution manager  can be configured to assign a specific task for processing at a specific resource (e.g., a specific device, a specific processor) of the non-mainframe computing environment  in one or more delegation instructions. In other words, a task can be specifically delegated to a particular resource of the non-mainframe computing environment . Although not shown in , in some embodiments, the distribution manager  can include a delegation instruction generator configured to define one or more delegation instructions.","For example, a first database object can be accessed from the storage device  and modified by the non-mainframe computing environment  (or resource thereof) based on a task description included in a delegation instruction. A second database object, which can be a result of the accessing and modifying, can be stored in the storage device . In some embodiments, the second database object can be referred to as a resulting database object or as a modified version of the database object. In some embodiments, the second database object can be a different database object type (e.g., a flat file database object type, a DB2 database object type) and\/or can be stored using a different storage format (e.g., a count key data (CKD) storage format, any type of z\/OS storage format, a fixed block architecture (FBA) storage format) than the first database object. More details related to handling of objects types and\/or storage formats are described after .","An example of parameter values to be sent to the non-mainframe computing environment  in a delegation instruction from the mainframe computing environment  to trigger processing associated with a management utility process at the non-mainframe computing environment  are shown in . As shown in , a delegation instruction  can include various types of parameter values that can be defined and sent from the distribution manager  to the non-mainframe computing environment  during a distribution phase. Processing can be performed at the non-mainframe computing environment  based on the parameter values included in the delegation instruction . In this example embodiment, the delegation instruction  includes a non-mainframe computing (NMC) resource identifier , a task description , and a database object identifier . The task description  can be a description of a task associated with a management utility process and to be processed at the mainframe computing environment . The non-mainframe computing resource identifier  can be an identifier of the resource to be used to execute the task described in the task description . The database object identifier  can be an identifier of a database object to be processed based on the task described within the task description .","Although not shown in , the delegation instruction  can include additional parameter values. For example, the delegation instruction  can include a schedule for executing a task included in the task description , a time frame within which to perform processing, a storage format and\/or location for storing the database object identified by the database object identifier  within the storage device , a time frame within which completion processing is to be reported, and\/or so forth. In some embodiments, the delegation instruction  can include parameter values related to multiple tasks to be performed in parallel and\/or serially, multiple non-mainframe computing resources to perform one or more tasks, multiple identifiers of database objects, and\/or so forth. In other words, multiple instructions can be included in a single delegation instruction. In some embodiments, the distribution manager  can be configured to define multiple delegation instructions (similar to delegation instruction ) for one or more management utility processes.","Referring back to , in some embodiments, processing associated with a distribution phase of a management utility process can overlap with the processing associated with an initiation phase of the management utility process. For example, a first portion of tasks associated with a management utility process can be identified during an initiation phase by the initiation manager . A first delegation instruction associated with the first portion of tasks can be defined and sent from the distribution manager  during a distribution phase of the management utility process even though a second portion of tasks associated with the management utility process have not yet been identified during the initiation phase by the initiation manager . Accordingly, the initiation phase can have some overlap with the distribution phase of the management utility process. After the second portion of tasks associated with the management utility process, the initiation phase can be completed and the distribution manager  can be configured to define a second delegation instruction associated with the second portion of tasks during the distribution phase.","As shown in , a termination manager  of the management utility module  is configured to perform one or more functions associated with a termination phase of a management utility process. Specifically, the termination manager  includes a completion detector  configured to receive one or more indicators that processing at the non-mainframe computing environment  associated with one or more tasks of a management utility process have been completed. The termination manager  can be configured to terminate processing associated with a management utility process after all tasks delegated for processing at the non-mainframe computing environment  have been completed. In some embodiments, an indicator that a task has been completed can be referred to as a completion indicator.","For example, a set of tasks associated with a management utility process (e.g., a CHECK management utility process) can be delegated for processing at the non-mainframe computing environment  from the mainframe computing environment  (during an initiation phase and a distribution phase). In response to receiving indicators (e.g., completion indicators) at the completion detector  that all of the tasks from the set of tasks have been completed, the termination manager  can be configured to terminate (e.g., closeout) processing associated with management utility process.","In some embodiments, the termination manager  can be configured to terminate processing associated with a management utility process even though a completion indicator associated with a particular task of the management utility process has not been received. For example, the termination manager  can be configured to terminate processing associated with a management utility process when a time period for completing the management utility process has been expired. In other words, the termination manager  can be configured to terminate processing (e.g., release an object (and file) after processing has been completed, deserialize an object (and file)) associated with the management utility process in response to a timeout being triggered.","By delegating processing from the mainframe computing environment  to the non-mainframe computing environment , the computing resources of the mainframe computing environment  are not used and can be reserved for other types of processing. The processing rate (related to a management utility process) of the mainframe computing environment  can be decreased relative to the processing rate (related to a management utility process) of the non-mainframe computing environment  in response to the transition from the initiation phase to the distribution phase. Similarly, the processing rate (related to a management utility process) of the mainframe computing environment  can be increased relative to the processing rate (related to a management utility process) of the non-mainframe computing environment  in response to the transition from the distribution phase to the termination phase.","As shown in , the non-mainframe computing environment  can be configured to access storage device  via a storage interface . The storage interface  can be configured to translate (e.g., convert) one or more database objects (e.g., database files) stored in the storage device  from a first format (e.g., a mainframe computing environment storage format, a mainframe computing environment database object format, a count key data (CKD) storage format) to a second format (e.g., a non-mainframe computing environment storage format, a non-mainframe computing environment database object format, a fixed block architecture (FBA) storage format).","Specifically, the storage interface  can be configured to translate one or more of the database objects from a first storage format to a second storage format. In some embodiments, the non-mainframe computing environment  may be configured to compatibly process one or more database objects based on a first storage format, but may not be configured to compatibly process one or more database objects based on a second storage format. Accordingly, the storage interface  can be configured to translate (e.g., convert) one or more database objects based on the second storage format into the first storage format so that the non-mainframe computing environment  may perform processing on the one or more database objects. In some embodiments, the database objects can be flat file objects, DB2 database objects, and\/or so forth, stored using one or more storage formats.","As a specific example, the non-mainframe computing environment  can be configured to receive a delegation instruction that can include a description of the task for processing a database object. The database object can be stored in the storage device  based on a mainframe storage format that is compatible with the mainframe computing environment  and incompatible with the non-mainframe computing environment . The database object may be a database object that is typically processed by the mainframe computing environment , which can compatibly process the database object based on the mainframe storage format. Because processing associated with the task is being delegated to the non-mainframe computing environment  from the mainframe computing environment , the database object can be a database object that is incompatible with the non-mainframe computing environment . Accordingly, the non-mainframe computing environment  can be configured to trigger the storage interface  to access the database object, which may not be directly accessed by the non-mainframe computing environment  because of the incompatibilities. After the database object has been accessed for the non-mainframe computing environment  via the storage interface , processing of the database object based on the description of the task can proceed. After processing based on the description of the task has been completed, the non-mainframe computing environment  can be configured to store a resulting database object via the storage interface . In some embodiments, the resulting database object can be stored using a storage format compatible with the non-mainframe computing environment  and\/or compatible with the mainframe computing environment . Accordingly, the resulting database object can be stored using a variety of storage formats.","As another specific example, the non-mainframe computing environment  can be configured to receive a delegation instruction that can include a description of the task for processing a database object. The database object can be stored in the storage device  based on a non-mainframe storage format that is compatible with the non-mainframe computing environment  and incompatible with the mainframe computing environment . Because the database object is stored based on a compatible non-mainframe storage format, the non-mainframe computing environment  can be configured to directly access the database object from the storage device  without using the storage interface . After processing the database object, the non-mainframe computing environment  to trigger the storage interface  to store the database object based on a storage format that is compatible with the mainframe computing environment  (i.e., based a mainframe storage format).","Database objects stored using a first storage format are represented as portion  of the storage device , and database objects stored using a second storage format are represented as portion  of the storage device . In some embodiments, database objects stored using (e.g., based on) a first storage format or a second storage format can be stored physically within any location within the storage device . In some embodiments, a delegation instruction can include instructions (within a task) related to a storage format in which a database object (before being modified or after being modified) should be accessed and\/or stored.","In some embodiments, the storage interface  can be configured to translate different database object types (e.g., a flat file database object type, a DB2 database object type). For example, in some embodiments, the storage interface  can be configured to translate a flat file into a DB2 database object, and vice versa.","As shown in , the initiation manager  can include a data integrity manager  configured to handle various types of signaling and\/or processing related to data integrity so that objects stored in the storage device  can be processed in a desirable fashion (e.g., with data consistency, without collisions by processing by performed other processes). For example, the data integrity manager  can be configured perform and\/or request serialization, which can include, for example, queuing of processing (or processes), locking of objects for processing, creation of mirrored\/shadowed copies, and\/or so forth. In some embodiments, serialization can be performed with respect to a portion of an object or on file associated with (e.g., including) the object.","In some embodiments, a subsystem  can be configured to manage serialization related to one or more objects stored in the storage device . In some embodiments, the subsystem  can be a z\/OS environment or a portion thereof (e.g., a DB2 subsystem operating within the z\/OS environment of the mainframe computing environment ). In some embodiments, one or more requests related to serialization can be sent from the data integrity manager  to the subsystem  (e.g., a DB2 subsystem), which can be configured to actually perform one or more steps related to data integrity (e.g., serialization). The management utility module  (e.g., the initiation manager ) can be configured to request that the subsystem  manage the data integrity (e.g., serialization) a particular fashion.","For example, the initiation manager  can be configured to request that a particular objects stored in the storage device  (e.g., stored in portion  of the source device ) be reserved (e.g., locked, allocated) for processing based on a management utility process (e.g., an UNLOAD management utility process, a LOAD management utility process, a REORG management utility process, a CHECK management utility process, a COPY management utility process, a RECOVER management utility process, a LOG management utility process) by the management utility module . Accordingly, when processing associated with management utility process is delegated to the non-mainframe computing environment , the object will be available for (e.g., will be locked and in a location for) processing based on the management utility process. Thus, other components (e.g., modules, processes) attempting to modify (e.g., access, write to) the object may not be permitted to do so.","In some embodiments, a subsystem  can be configured to delegate certain rights related to an object stored in the storage device  based on processing to be performed on the object. For example, in some embodiments, the subsystem  may delegate read-only access to a management utility process targeted for processing of an object. In some embodiments, the subsystem  can be configured to grant rights for processing of an object based on a management utility process commensurate with the scope of the management utility process.","In some embodiments, the data integrity manager  of the initiation manager  can be configured to request a particular type of access (or right) to an object stored in the storage device . For example, the initiation manager  can be configured to request read-only access to an object stored in storage device  in conjunction with the management utility process. In such embodiments, write access related to the object may not be allocated during processing based on the management utility process (which can be delegated to the non-mainframe computing environment  from the mainframe computing environment ).","In some embodiments, other processes that are associated with, for example, applications operating within the subsystem  may be accessing objects that are the target of a management utility process being managed by the management utility module . In such embodiments, the subsystem  can be configured to manage (e.g., queue) the management utility process with respect to the other processes (to maintain data integrity).","As a specific sample, the data integrity manager  of the initiation manager  can be configured to request access to an object (or a portion thereof (e.g., a set of pages of the object)) for processing based on a management utility process while processing of the object (or a portion thereof) by an application operating at the subsystem  is already in progress. The object (or a portion thereof) may be temporarily stored in a memory  (e.g., a random-access memory, a local memory, a remote memory) of the subsystem  from the storage device  so that processing by the application may be performed. In response to the request to access the object (or a portion thereof) from the data integrity manager , the subsystem  may interrupt (e.g., pause, terminate) processing performed by the application and move the object (or a portion thereof) temporarily stored in the memory  of the subsystem  back into the storage device  where processing based on the management utility process can be performed by, for example, the non-mainframe computing environment .","In some embodiments, in response to the request to access the object (or a portion thereof) from the data integrity manager , the subsystem  may allow the application to complete processing performed by the application before the object (or a portion thereof) is moved from the memory  of the subsystem  back into the storage device  where processing based on the management utility process can be performed by, for example, the non-mainframe computing environment . In response to the request to access the object (or a portion thereof) from the data integrity manager , the subsystem  may move a copy of the object (or a portion thereof) into the storage device  where limited processing based on the management utility process can be performed by, for example, the non-mainframe computing environment  so that processing by the application at the subsystem  may continue. For example, the copy of the object (or a portion thereof) can be moved to the storage device  so that reading (but not writing) of the object can be performed by the management utility process.","In some embodiments, the movement of one or more objects (or portions thereof) from the memory  back into the storage device  can be referred to as externalization (which can be a type of data integrity processing). In some embodiments, externalization of one or more objects (or portions thereof) can be requested by the data integrity manager  of the initiation manager  so that the object(s) can be processed based on a management utility process managed by the management utility module .","In some embodiments, the non-mainframe computing environment  and\/or the storage device  can include a data integrity manager, such as the data integrity manager , so data integrity processing such as serialization, externalization, and\/or so forth can be handled outside of the mainframe computing environment . For example, when processing of an object is requested by the non-mainframe computing environment , the storage device  can be configured to perform or a request that the mainframe computing device  (e.g., the subsystem  of the mainframe computing device ) perform data integrity processing such as serialization and\/or externalization with respect to the object. Similarly, when processing of an object is requested by the non-mainframe computing environment , the non-mainframe computing environment  can be configured to perform or a request that the mainframe computing device  (e.g., the subsystem  of the mainframe computing device ) perform operations such as serialization and\/or externalization with respect to the object.","In some implementations, the mainframe computing environment  and\/or the non-mainframe computing environment  can be configured to operate at a host device. In such implementations, the mainframe computing environment  and\/or the non-mainframe computing environment  can communicate through a network (not shown). In some embodiments, the functionality of the mainframe computing environment  and\/or the functionality of the non-mainframe computing environment  can be called and\/or executed on an on-demand basis. In some implementations, the mainframe computing environment  and\/or the non-mainframe computing environment  can function as a background application operating within the database management system . In some implementations, the mainframe computing environment  and\/or the non-mainframe computing environment  can function as an application (or service) that can be accessed via an application programming interface (API).","The mainframe computing environment  and\/or the non-mainframe computing environment  can be, or can include, any type of hardware and\/or software configured to operate within the database management system . In some implementations, one or more portions of the components shown in the mainframe computing environment  and\/or the non-mainframe computing environment  in  can be, or can include, a hardware-based module (e.g., a digital signal processor (DSP), a field programmable gate array (FPGA), a memory), a firmware module, and\/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer). For example, in some implementations, one or more portions of the mainframe computing environment  and\/or the non-mainframe computing environment  can be, or can include, a software module configured for execution by at least one processor (not shown). In some implementations, the functionality of the components can be included in different modules and\/or different components than those shown in . For example, although not shown, the functionality of the management utility module  can be included in a different module than the management utility module , or can be divided into several different modules.","Although not explicitly shown in , the mainframe computing environment  and\/or the non-mainframe computing environment  can include various types of hardware and\/or software components to facilitate processing. For example, the mainframe computing environment and\/or the non-mainframe computing environment  can include one or more input\/output (I\/O) ports, a communication manager configured to handle various communication protocols (e.g., transmission control protocol (TCP)\/Internet protocol (IP) protocol), a message manager configured to handle notifications (e.g., notifications to a user, alarms), a persistent processor configured to monitor various indicators, requests, and\/or signaling, a compression and\/or expansion manager configured to handle data (e.g., data of database object) compression and\/or expansion (e.g., decompression), a translation manager configured to translate file formats and\/or data formats, and\/or so forth. In some embodiments, the mainframe computing environment and\/or the non-mainframe computing environment  can include a data management component configured to handle, for example, extensible mark-up language (XML) data, a large object (LOB) data manager, an indexer configured to handle indexing of the storage device  (e.g., database storage), a file manager configured to handle file systems, and\/or so forth.","Although not shown, in some implementations, the mainframe computing environment  and\/or the non-mainframe computing environment  (or portions thereof) can be configured to operate within, for example, a data center (e.g., a cloud computing environment), a computer system, one or more server\/host devices, and\/or so forth. Thus, the mainframe computing environment  and\/or the non-mainframe computing environment  (or portions thereof) and\/or the DB2 database environment  (or portions thereof) can be configured to function within various types of network environments that can include one or more client devices and\/or one or more server devices. For example, the network can be, or can include, a local area network (LAN), a wide area network (WAN), and\/or so forth. The network can be, or can include, a wireless network and\/or wireless network implemented using, for example, gateway devices, bridges, switches, and\/or so forth. The network can include one or more segments and\/or can have portions based on various protocols such as Internet Protocol (IP) and\/or a proprietary protocol. The network can include at least a portion of the Internet.","The mainframe computing environment  and\/or the non-mainframe computing environment  can be configured to operate based on one or more platforms (e.g., one or more similar or different platforms) that can include one or more types of hardware, software, firmware, operating systems, runtime libraries, and\/or so forth. In some implementations, the mainframe computing environment  and\/or the non-mainframe computing environment  can each represent a cluster of devices (e.g., a server farm). In such an implementation, the functionality and processing of the mainframe computing environment  and\/or the non-mainframe computing environment  and\/or the DB2 database environment  can be distributed to several devices of the cluster of devices.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 3","b":["310","320","330","340"]},"As shown in , initiation phase processing  is performed at a mainframe computing environment . The initiation phase processing  can include identifying a management utility process to be executed, identifying one or more objects to be processed based on the management utility process, identifying tasks associated with (e.g., attached to) the management utility process, triggering data integrity processing, and\/or identifying computing resources to perform the tasks associated with the management utility process.","As shown in , a delegation instruction  is sent from the mainframe computing environment  to the non-mainframe computing device . Distribution phase processing  is performed in response to the delegation instruction  being sent from the mainframe computing environment  to the non-mainframe computing environment  (or resource thereof).","In some embodiments, the delegation instruction  can include parameter values (e.g., identifiers of database objects, task descriptions) that can be used to delegate processing of one or more tasks from the mainframe computing environment  to the non-mainframe computing environment . In some embodiments, the delegation instruction  can be defined during the initiation phase processing  at the mainframe computing environment .","The non-mainframe computing environment  (or resource thereof) can be configured to receive and parse the delegation instruction  during delegation instruction processing . In response to the delegation instruction , the non-mainframe computing environment  can be configured to access a database object (identified within the delegation instruction ) from a storage device  via a storage interface . Specifically, the non-mainframe computing environment  can be configured to request the database object (DO) 11, and can later receive the database object . The signaling associated with accessing of the database object is illustrated as access processing .","As shown in , database object processing  is performed in response to receipt of the database object . In some embodiments, the database object can be processed based on the description of the task included in the delegation instruction . For example, in some embodiments, the data included in the database object can be deleted, added, combined with data included in another database object, reformatted, structurally modified, and\/or so forth.","After the database object has been processed based on the description of the task, a modified version of the database object can be sent for storage in the storage device  via the storage interface . An acknowledgment  that the modified version of the database object has been stored can be received at the non-mainframe computing environment . In some embodiments, the modified version of the database object can be referred to as a database object result or as a resulting database object. The signaling associated with storage of the modified database object is illustrated as result storage .","In some embodiments, accessing of the storage device  may be performed directly between the non-mainframe computing environment  and the storage device . In some embodiments, accessing of the storage device  may be performed directly between the non-mainframe computing environment  and the storage device  during the access processing  or during the result storage . In other words, the storage interface  may be bypassed during a portion of the distribution phase processing .","As shown in , after acknowledgement , completion processing  can be performed at the non-mainframe computing environment . In some embodiments, during the completion processing , a completion indicator  can be defined and sent from the non-mainframe computing environment  to the mainframe computing environment .","In response to the completion indicator  being received at the mainframe computing environment , termination phase processing  can be performed. During the termination phase processing , the management utility process (or a task thereof) can be terminated (or closed out).","In some embodiments, the distribution phase processing  can be performed with respect to several resources included in the non-mainframe computing environment . For example, multiple delegation instructions (such as delegation instruction ) can be sent in parallel or serially to several resources included in the non-mainframe computing environment . One or more of the resources included in the non-mainframe computing environment  can be configured to access one or more storage devices (e.g., storage device ) via one or more storage interfaces (e.g., storage interface ).",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 4","FIG. 1"],"b":"100"},"As shown in , a set of tasks for implementing the management utility process are identified at a mainframe computing environment during an initiation phase associated with a management utility process (block ). In some embodiments, the task generator  of the initiation manager  can be configured to identify at least a portion of the set of tasks after the management utility process has been identified by the management utility process identifier  of the initiation manager  shown in .","A description identifying at least a portion of the set of tasks can be sent to a non-mainframe computing environment (block ). In some embodiments, the distribution manager  shown in  can be configured to define a delegation instruction including the description identifying the set of tasks during a distribution phase associated with the management utility process. In some embodiments, the distribution manager  can be configured to assign (during the distribution phase) at least a portion of the set of tasks to one or more resources included in the non-mainframe computing environment and identified (during the initiation phase) by the computing resource detector  shown in .","An indicator that processing based on the at least the portion of the set of tasks associated with the management utility process has been completed is received at the mainframe computing environment (block ). In some embodiments, the indicator can be a completion indicator. In some embodiments, the termination manager  shown in  can be configured to receive the indicator.","A termination phase of the management utility process is executed at the mainframe computing environment in response to the indicator (block ). In some embodiments, at least a portion of the termination phase of the management utility process can be executed by the completion detector  of the termination manager  shown in . In some embodiments, at least a portion of the set of tasks can be performed in parallel or serially at one or more resources of the non-mainframe computing environment.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 5","FIG. 1"],"b":"100"},"An identifier of a database object and a description of a task for processing the database object are received within a non-mainframe computing environment (block ). In some embodiments, the database object and the description of the task can be included in a delegation instruction received at the non-mainframe computing environment. In some embodiments, the task generator  of the initiation manager  can be configured to identify the task after the management utility process has been identified by the management utility process identifier  of the initiation manager  shown in .","The database object is accessed at a storage device via a storage interface (block ). In some embodiments, the storage interface can be similar to the storage interface  shown in . In some embodiments, the storage device can be configured to store database objects using various storage formats.","The database object is processed at the non-mainframe computing environment based on the task (block ). In some embodiments, the database object can be processed using one or more resources of the non-mainframe computing environment. In some embodiments, the task can be performed in parallel or serially with another task using one or more resources of the non-mainframe computing environment.","An indicator that processing based on the task has been completed is sent to a mainframe computing environment (block ). In some embodiments, the indicator can be a completion indicator. In some embodiments, the termination manager  shown in  can be configured to receive the indicator. In some embodiments, at least a portion of the termination phase of the management utility process can be executed by the completion detector  of the termination manager  shown in .","Implementations of the various techniques described herein may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Implementations may implemented as a computer program product, i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device (e.g., a computer-readable medium, a tangible computer-readable medium) or in a propagated signal, for processing by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. In some implementations, a tangible computer-readable storage medium can be configured to store instructions that when executed cause a processor to perform a process. A computer program, such as the computer program(s) described above, can be written in any form of programming language, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be processed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by, and an apparatus may be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the processing of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer also may include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in special purpose logic circuitry.","To provide for interaction with a user, implementations may be implemented on a computer having a display device, e.g., a cathode ray tube (CRT), a light emitting diode (LED), or liquid crystal display (LCD) display device, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.","Implementations may be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation, or any combination of such back-end, middleware, or front-end components. Components may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.","While certain features of the described implementations have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the scope of the implementations. It should be understood that they have been presented by way of example only, not limitation, and various changes in form and details may be made. Any portion of the apparatus and\/or methods described herein may be combined in any combination, except mutually exclusive combinations. The implementations described herein can include various combinations and\/or sub-combinations of the functions, components and\/or features of the different implementations described."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
