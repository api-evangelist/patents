---
title: File system architecture requiring no direct access to user data from a metadata manager
abstract: A system, method and computer program product for implementing a distributed file system architecture requiring no direct access to user data from a metadata manager in a data storage network. Metadata operations requiring user volume access are performed via a proxy on a storage manager server that is a distributed file system client. Management of metadata can be isolated from user data because the metadata manager requires no capability to see the storage for user volumes. This allows for a distributed file management system to support heterogeneous environments without requiring any single point in the system to see all the storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07617321&OS=07617321&RS=07617321
owner: International Business Machines Corporation
number: 07617321
owner_city: Armonk
owner_country: US
publication_date: 20040507
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to data storage networks, and especially networks implementing SAN (Storage Area Network) functionality. More particularly, the invention concerns data storage networks in which heterogeneous network hosts need to access heterogeneous network storage devices using a distributed file system.","2. Description of the Prior Art","By way of background, data storage networks, such as SAN systems, provide an environment in which data storage devices are managed within a network environment. Access to the data storage devices is provided via one or more storage manager servers that handle data storage requests (e.g., copy, backup, etc.) from data client nodes (data clients) via conventional LAN (Local Area Network) or WAN (Wide Area Network) connections.","The storage manager servers are programmed data processing platforms that maintain network interface connections to the client nodes and to the storage devices that define the data storage network's pool of peripheral storage. They are commonly implemented as database servers, file servers, application servers, and for other purposes.","The data network storage devices may include any number of interconnected data storage subsystems comprising magnetic disk drive arrays, optical disk drive arrays, magnetic tape libraries, etc. In some cases, the data storage network is superimposed on the LAN or WAN that hosts the client nodes, such that the network carries both data storage traffic (e.g., TCP\/IP-encapsulated i-SCSI packets) and conventional client traffic (e.g., TCP\/IP). More commonly, the data storage network is a dedicated network that carries only data storage traffic. In all but the smallest dedicated data storage networks, the required inter-connectivity is provided by way of high speed arbitrated loop arrangements or switching fabrics implementing the Fibre Channel protocol, with the latter being more common. Typical inter-connectivity components include copper or fiber optic cables, hubs, bridges, gateways, switches, directors, and other telecommunication equipment designed for high speed data transfer between and among all of the interconnected storage manager servers and storage devices that comprise the data storage network. Dedicated Ethernet data storage networks may also be implemented using conventional Ethernet hardware and the i-SCSI protocol (i.e., wherein block I\/O and SCSI commands are encapsulated in TCP\/IP packets).",{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 1","FIG. 1"],"b":["2","4","6","8","10","4","8","12","14","16","14","16","8","10","4","6"]},"The data storage devices found in a data storage network such as that shown in  are in many cases comprised of a heterogeneous assortment of equipment from different vendors. Similarly, the storage manager servers can be implemented using heterogeneous data processing platforms running different operating systems. Thus, in , the data storage devices  and  might be RAID (Redundant Array of Inexpensive Disks) subsystems from two different vendors, or one might be a RAID array subsystem while the other is a JBOD (Just a Bunch Of Disks) subsystem. Similarly, the storage manager server  might be implemented using an Intel x86 processor running a Microsoft Windows\u00ae operating system, while the storage manager server  might comprise a PowerPC\u00ae processor running an IBM AIX\u00ae operating system.","Historically, the interoperability between data storage equipment from different vendors has been weak. One way to accommodate such incompatibilities in a data storage network is to partition the network storage devices into homogeneous groups or \u201cislands,\u201d and to assign such partitions to compatible storage manager servers. Each storage manager server runs its own file system and is allotted its own set of storage devices for its exclusive use within the data storage network. For example, in , storage manager server  might be allocated to data storage device  while storage manager server  is assigned to data storage device .","The foregoing approach can be limiting from a data storage network user's point of view because data is managed on a server-by-server basis instead of at a network-wide level. To address this concern, the concept of a distributed file system has been proposed. The goal of a distributed file system in a data storage network is to provide benefits such as a global namespace for files, shared access from any storage manager server to any network storage device, and centralized, policy-based management. This guarantees that data network clients will be able to access their files using the same filenames regardless of which storage manager server is used to retrieve the data, and no matter which storage device stores the data.","A distributed file system also facilitates what is referred to in the data storage art as \u201cout-of-band storage virtualization.\u201d The IBM TotalStorage\u00ae SAN File System is an exemplary distributed file system that is based on this approach. The term \u201cout-of-band storage virtualization\u201d means that user data and metadata are stored in different places. In the data storage art, the term \u201cuser\u201d data refers to files and their information contents, whereas the term \u201cmetadata\u201d (literally \u201cdata about data\u201d) refers to the information needed to manage and maintain such files. This includes file names, ownership, access permissions, physical location, and other characteristics. Metadata in an out-of-band storage virtualization environment is handled by a dedicated metadata server that cooperates with the storage manager servers to implement data storage and retrieval operations the data storage network. In , a metadata server (hereinafter metadata \u201cmanager\u201d) is shown by reference numeral . The metadata manager  communicates with the storage manager servers  and  via a dedicated control network , using TCP\/IP packet communication or the like. The connectivity infrastructure of the data storage network , or the LAN\/WAN , could also support this communication. The metadata handled by the metadata manager  is stored in data storage devices within the data storage network . Thus, in , the data storage devices  and  could each have one or more data volumes dedicated to the storage of metadata.","The metadata manager  processes metadata requests from the storage manager servers  and , which may be thought of as \u201cclients\u201d of the metadata manager's server functions. When a data file transfer request is made to one of the storage manager servers  or , it queries the metadata manager  to determine the file's location, and other control information. Once the storage manager server  or  has obtained access to the file, it performs the required data transfer operation without further intervention by the metadata manager .","One of the implications of a distributed file system with out-of-band storage virtualization is that incompatibilities arising from the use of heterogeneous equipment within a data storage network become an issue that must be addressed. Among other things, the metadata manager  requires access to both user data and metadata in order to support various management functions, such as commissioning and decommissioning data volumes, and moving files between different volumes or between different storage pools (i.e., volume groups), and restore and backup. If the user data and the metadata of a data storage network are located on heterogeneous storage devices, as is the case in FIG. , the metadata manager  must be capable of accessing those devices, and the devices must be capable of handling requests from both the metadata manager  and the storage manager servers  and . Incompatibilities between products from various vendors can severely limit the implementation of these functions.","It is to improvements in distributed file system implementation that the present invention is directed. In particular, what is needed is a distributed file system architecture that supports a data storage network comprising heterogeneous equipment.","The foregoing problems are solved and an advance in the art is obtained by a system, method and computer program product for implementing a distributed file system architecture requiring no direct access to user data from a metadata manager in a data storage network. Metadata operations requiring user volume access are performed via a proxy on a storage manager server that is a distributed file system client. Management of metadata is isolated from user data because the metadata manager requires no capability to see the storage for user volumes. This allows for a distributed file system to support heterogeneous environments without requiring any single point in the system to see all of the storage.","Prior to describing exemplary embodiments of the invention, it will be helpful to continue the background discussion above to more specifically illuminate the problems facing the implementation of distributed file system-based data storage networks.  shows additional details of the distributed file system components in the data storage network  of . In particular,  illustrates the operating system, file system, network stack, and network interface components of the storage manager servers  and , and the metadata manager . Again, the network fabric components are not shown, but it is assumed for the sake of example only that the data storage network  is a Fibre Channel implementation. As such, the network interface adaptors of the storage manager servers  and , as well as the metadata manager , are shown as being HBAs (Fibre Channel Host Bus Adaptors) and the adaptor device drivers are shown as being HBA drivers.","Conventional multipathing software (for managing multiple paths to storage devices) is shown to reside in the network stack above each HBA driver. Above the multipathing software is an operating system and a distributed file system (DFS) instance. In the storage manager servers  and , a client component of the distributed file system is installed. By way of example only, the client-side DFS can be implemented as an IBM TotalStorage\u00ae SAN File System driver for the Linux operating system. A server component of the distributed file system is installed in the metadata manager . The server component can be implemented using the IBM TotalStorage\u00ae SAN File System Server product. This software can be implemented as an application that runs with support from an underlying operating system.","It will be appreciated that any conventional operating system that supports the proxy functions to be described hereinafter can be employed on the storage manager servers  and , and the metadata manager . The same operating system may be used for each of these entities, or they may all be different, depending on design choice, convenience and compatibility.","The data storage devices  and  can be implemented using the same or different types of storage subsystems. By way of example only,  illustrates a heterogeneous configuration in which the storage devices  and  are different storage subsystem types. Each data storage device contains a user data volume and a metadata volume. An administration console  is also shown in . It is conventionally used for issuing data storage network administrative commands to the metadata manager .","There are problems associated with running a distributed file system in a heterogeneous data network storage environment as shown in . This is particularly true if the data storage managers  and , and the metadata manager , do not all run the same type of operating system, networking software, or networking hardware. These problems stem from two requirements that are inherent in a distributed file system environment as shown in :\n\n","The first requirement poses a problem because conventional data storage devices are not always designed to interoperate well with different network hosts running different operating systems, network stacks and network adaptors. Moreover, many storage devices suffer a performance penalty when they are accessed from multiple paths (physical links) connected to different storage device controllers, which would be necessary to allow access from plural heterogeneous hosts.","The second requirement poses a problem because conventional hosts in a data storage network are not easily adapted to access heterogeneous storage devices. For example, most hosts implement multipath redundancy using some form of multipathing software to manage the HBA ports that connect to the physical links. Most multipathing software supports only a single vendor's storage and is unable to share an HBA adaptor with other multipathing software that supports a different vendor's storage. The ability to access different storage devices also requires that hosts use different versions of device drivers for a given brand\/model of HBA, and device drivers do not like to share devices. These issues effectively mandate that separate HBA\/device driver\/multipathing software combinations be used for each data storage system accessed from a particular host. As such, the configuration of  would actually require multiple stacks rather than the single stack shown on each host; one stack for each type of storage device that a host needs to access. A further complication is that some operating systems only allow for a single version of a device driver for a particular type of HBA, so a host running such an operating system may require HBAs from different vendors to create a viable heterogeneous storage access implementation.","As set forth by way of summary above, the foregoing problems can be overcome by implementing a distributed file system architecture requiring no direct access to user data from the metadata manager  in the data storage network . Metadata operations requiring user volume access are performed via a proxy on each storage manager server  and  (or any other network host that is a distributed file system client of the metadata manager ). The management of metadata can thus be completely isolated from user data because the metadata manager  requires no capability to see the storage for user volumes. This solution allows a distributed file system to support heterogeneous environments without requiring any single point in the system to see all the storage. Such an architecture allows the network user complete freedom to divide the data storage network  into homogeneous islands or to be homogeneous in one area of the file system and heterogeneous in another area, based on user needs and configurations supported by storage vendors.","The metadata manager  would typically need to access user data volumes for a variety of administrative purposes, including the following:\n\n","In accordance with the invention, each of the above administrative operations (and possibly others) can be performed by the metadata manager  in cooperation with one of the storage manager servers  or  (or other distributed file system client) that has access to the required user data volume(s). Note that although the storage manager servers  and  will be used for the required user data volume access, the metadata manager  can still continue to coordinate the administrative operations. Thus, functions that are intrinsic to the metadata manager's software internals, such as locking, logging, and maintaining transaction semantics for administrative operations, can continue to be handled in conventional fashion.","Turning now to , an exemplary administrative operation involving the commission\/decommission of volumes in accordance with the invention will now be described. Note that  illustrates the above-described data network , but the storage manager server  is not shown to facilitate clarity. In addition, all metadata volumes in the example of  are now located on a single storage device (storage subsystem ) that is accessible by the metadata manager . Finally, the distributed file system software instances in each of the storage manager server  and the metadata manager  are enhanced to implement the latter's use of the former as a proxy for accessing user data volumes. In particular, the storage manager server  is provided with a proxy function and the metadata manager  is provided with a proxy request function.","The numbered arrows in  represent an exemplary sequence of operations to be performed when it is desired to commission a new data volume in the data storage network . It is assumed that the user data volume  situated in the storage device  is the volume to be added, and that this data volume is accessible to the storage manager server . The volume commission operation will normally be initiated from the administrative console , either by a human operator or an automated software program that monitors resources in the data storage network . It is assumed that the administrative console  has previously queried the metadata manager  to identify uncommissioned user data volumes that are available for commissioning, and that the metadata manager has identified user data volume  as being available by querying the storage manager server  (using the proxy request technique of the invention). Step  of the commissioning operation entails the administrative console  instructing the metadata manager  to commission user data volume . Initially, the metadata manager  performs conventional internal management associated with the commissioning operation. Then in step , the proxy requestor in the metadata manager  issues a proxy request to the storage manager server  to write a volume label to the user data volume . This request passes parameters that identify the data user volume  and specifies a distributed file system label to be written. In step , the proxy in the storage manager server  responds to the proxy request by causing the volume label to be written to the user data volume . This step can be performed by the proxy utilizing the storage manager server's existing data storage device access functions (e.g., via an API (Application Programming Interface) call, an operating system call, etc.).","There are various ways that the above-described proxy mechanism can be implemented by the metadata manager server  and the storage manager server . One approach is to use conventional remote procedure call (RPC) tools of the type provided by many operating systems. If a conventional RPC model is used, the metadata manager's proxy requester component can be implemented as an RPC client that invokes RPC client stub functions. The storage manager server's proxy component can in turn be implemented as an RPC server that invokes RPC server stub functions. Any other suitable inter-process communication technique that allows the metadata manager  to invoke data storage device access functions in the storage manager server  could also be used to implement the proxy mechanism of the invention.","Note that in the foregoing operation, the actual user data volume picked for commissioning is chosen from the viewpoint of the storage manager server . This choice is not of concern to the metadata manager . The metadata manager  simply needs to know that the chosen volume has been assigned the specified volume identifier and label to write for the commission. The procedure for decommissioning a data volume is essentially the inverse of the commissioning procedure. The metadata manager  instructs the storage manager server  as to which label to erase for decommission, and the storage manager server carries out the requested operation.","Turning now to , an exemplary volume drain operation in accordance with the invention will now be described. As in the case of ,  illustrates the above-described data network , but the storage manager server  is not shown to facilitate clarity. All metadata volumes in the example of  are also located on a single storage subsystem (storage device ) that is accessible by the metadata manager . Finally, the distributed file system software instances in each of the storage manager server  and the metadata manager  are enhanced to implement the latter's use of the former as a proxy for accessing user data volumes. In particular, the storage manager server  is provided with a proxy function and the metadata manager  is provided with a proxy request function.","The numbered arrows in  represent an exemplary sequence of operations to be performed when it is desired to perform a volume drain or move data operation in the data storage network . It is assumed that the data volumes involved in the transaction are user volumes  and , and that they are accessible to the storage manager server . It is further assumed that user data volume  is in a first data pool  and that user volume  is in a second data pool . As such, a volume drain from user data volume  to user data volume  may also be considered a data move operation.","The core operations to access the user data volumes  and  are a read from data volume  and a write to user data volume . The volume drain operation will normally be initiated from the administrative console , either by a human operator or an automated software program that monitors resources in the data storage network . In Step  of the volume drain operation, the administrative console  issues a command instructing the metadata manager  to perform a volume drain from user data volume  to user data volume  using the storage manager server . Initially, the metadata manager  performs conventional internal management associated with the volume drain operation. Then in step , the proxy requestor in the metadata manager  issues a proxy request (using any suitable inter-process communication technique, as discussed above) to the storage manager server  to read from user data volume  and write to user data volume . The request passes parameters that identify the user data volume , the disk offset of the data to be read, the user data volume , the disk offset of the data to be written, and the size of the data to be transferred. In step , the proxy in the storage manager server  responds to the request by causing the data to be read from user data volume . In step , the proxy in the storage manager server  causes this data to be written to user data volume . Again, the storage manager server's existing data storage device access functions can be used by the proxy to implement steps  and  (e.g., via an API call, an operating system call, etc.).","It will be appreciated that there are several advantages associated with use of the invention to perform administrative functions without access by the metadata manager  to user data. One is that storage manager server-based virtualization, including the use of logical volume managers (LVMs), can be implemented in a distributed file system environment. All that is required is that the metadata manager  be capable of cooperating with the storage manager server  or  that runs the logical volume manager to write a distributed file system label on the virtualized volume, and that it know the size of the volume. Otherwise, the fact that the volume is virtualized at the storage manager server  or  is irrelevant to the metadata manager's ability to manage space allocation for it.","Another advantage provided by the invention is that it facilitates data storage network scalability. It is a present goal of distributed file systems to support access to petabytes of data, which could involve several thousand volumes (depending on volume size). Requiring the metadata manager  to access such a large number of volumes would be problematic because the metadata manager would need to scan all of the storage devices on network startup and as configurations change.","A further advantage of the invention is provided in the area of network security. Data storage network users are accustomed to creating multiple zones in their storage networks, providing only necessary access paths to storage based on application needs. The current approach that requires a metadata manager to access all user data volumes forces a zone that includes all volumes in the system, which may be uncomfortable to many users. By no longer requiring the metadata manager  to access user data volumes, users are given flexibility in how narrow or broad their data storage network zoning needs to be based on application needs.","Accordingly, a file system architecture requiring no direct access to user data from a metadata manager has been disclosed. It will be appreciated that the inventive concepts may be variously embodied in any of a data processing system, a machine implemented method, and a computer program product in which programming means are recorded on one or more data storage media for use in controlling a data processing system to perform the required functions. Although various embodiments of the invention have been described, it should be apparent that many variations and alternative embodiments could be implemented in accordance with the invention. For example, in addition to operations such as volume commissioning, volume decommissioning, volume drain, and data move, other operations, such as data backup and restore, could also be performed in accordance with the principles of the invention. It is understood, therefore, that the invention is not to be in any way limited except in accordance with the spirit of the appended claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other features and advantages of the invention will be apparent from the following more particular description of exemplary embodiments of the invention, as illustrated in the accompanying Drawings, in which:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 4","FIGS. 1 and 2"]}]},"DETDESC":[{},{}]}
