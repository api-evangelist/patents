---
title: Online business method, system and apparatus based on open application programming interface
abstract: The present disclosure introduces a method, a system and an apparatus of implementing online transaction according to Open API. In one aspect, a method includes: receiving a first invocation request to invoke an Open API from a third party development server according to a user's transaction request; determining an ISP server corresponding to the Open API as requested to be invoked in the invocation request; sending the first invocation request to the determined ISP server; receiving a service page returned by the ISP server according to the first invocation request; and sending the service page to the third party development server for processing the service page and sending the processed service page to the user, the processing comprising embedding the service page into a page corresponding to the transaction request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146786&OS=09146786&RS=09146786
owner: Alibaba Group Holding Limited
number: 09146786
owner_city: Grand Cayman
owner_country: KY
publication_date: 20110517
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED PATENT APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE PRESENT DISCLOSURE","SUMMARY OF THE DISCLOSURE","DETAILED DESCRIPTION"],"p":["This application is a national stage application of an international patent application PCT\/US11\/36813, filed May 17, 2011, which claims priority from Chinese Patent Application No. 201010200821.1, filed Jun. 10, 2010, entitled \u201cOnline Business Method, System and Apparatus Based on Open Application Programming Interface,\u201d which applications are hereby incorporated in their entirety by reference.","The present disclosure relates to the field of network communication and, more specifically, to a method of implementing network transactions based on Open Application Programming Interface (API), and a system and an apparatus thereof.","Open API is a common application interface under the Software as a Service (SaaS) model. An Internet Service Provider (ISP) embeds its available website services as a series of APIs and opens them to a third party developer, for example an Independent Software Vendor (ISV), and the ISV employs the corresponding business through its ISV server. Such a method is called an Open-website API, and the opened API is referred to as Open API.","More and more, ISVs intend to develop applications based on Open API provided by the ISP which in turn receive more network traffic flows and market shares. For ISVs, a great amount of investment in hardware and techniques is not necessary to meet the requirements of its business, and hence the investment cost is reduced. Accordingly, as the development base of internet online services, Open API has become a good choice for more and more internet enterprises to develop services and has potential for further development.","Due to the application prospects of Open API, the ISPs of international and domestic websites release their own Open API websites (i.e., the websites of online business based on Open API). Currently, the popular Open API is Representational State Transfer (REST) API, which is based on the REST interface. While implementing online business through the REST API, REST services are sent to business implementation servers by adopting HTTP GET through the Internet. Business implementation servers respond to REST services by adopting POST. The business implementation servers take the structural data, such as XML, Jason, etc., as the returned result to respond to REST services.","The above solution of implementing online business based on the REST API has some disadvantages. First, the structural data, as the returned result, is easy to read for ISVs. However, it is not desirable that the business data provided by general business implementation servers be obtained by any third party (e.g., the ISVs) other than the users. Thus, concerning the business implementation servers, security of data related to an online business implemented by the above solution is low. Second, most of the current online businesses involve complicated business logic operations which require multiple interactions between the user and the service provider. In the conventional method of implementing online business, a REST API can only implement one single interaction between the user and the service provider, such as inquiry, data update, etc. For complicated online business, an ISV needs to construct multiple REST APIs to implement a complete flow, which requires the ISV to analyze the business logics among multiple API invocations. However, this makes the method hard to use. This, coupled with the differences of analysis capability between different ISVs, renders it difficult to achieve guaranteed consistency in business. Consequently, the controllability of business is poor for business implementation servers.","Given the above, for online business based on existing API, the security of business data is not guaranteed and the controllability is poor.","The present disclosure introduces a method of implementing network transactions based on Open API, and a system and an apparatus thereof are also introduced. Some disadvantages in the conventional technology, such as poor security of business data and poor controllability of business, are eliminated by adopting the present disclosure.","In one aspect, a method of implementing network transactions based on Open API may comprise receiving a first invocation request to invoke an Open API from a third party development server according to a user's transaction request; determining an ISP server corresponding to the Open API as requested to be invoked in the invocation request; sending the first invocation request to the determined ISP server; receiving a service page returned by the ISP server according to the first invocation request; and sending the service page to the third party development server for processing the service page and sending the processed service page to the user, the processing comprising embedding the service page into a page corresponding to the transaction request. The transaction request may, in one implementation, pertain to a business request.","In an event that the Open API as requested to be invoked comprises a plurality of Open APIs, then before sending the first invocation request to the determined ISP server, the method may further comprise determining an invocation relationship among the plurality of Open APIs; and sending the first invocation request to the determined ISP server. The act of sending may comprise, in an event that an invocation sequence exists among the plurality of Open APIs according to the invocation relationship, sending the first invocation request to an ISP server corresponding to a first Open API which is first-ranked in the invocation sequence of the plurality of Open APIs; and in an event that an invocation sequence does not exist among the plurality of Open APIs according to the invocation relationship, sending the first invocation request to a plurality of ISP servers each of which corresponding to a respective one of the plurality of Open APIs.","In an event that an invocation sequence exists among the plurality of Open APIs according to the invocation relationship, then before sending the service page to the third party development server, the method may further comprise embedding in the service page the invocation sequence of the plurality of Open APIs.","The method may further comprise receiving a second invocation request to invoke a second Open API which is after the first Open API according to the invocation sequence and embedded in the service page; sending the second invocation request to an ISP server corresponding to the second Open API; receiving a service page from the ISP server corresponding to the second Open API according to the second invocation request; and sending the service page to the third party development server to process the service page by the third party development server and send the processed service page to the user.","Before sending the second invocation request to an ISP server corresponding to the second Open API, the method may further comprise determining, according to the invocation relationship among the plurality of Open APIs, that the second Open API needs to be invoked through the first Open API; sending the second invocation request to the ISP server corresponding to the second Open API; and receiving a service page from the ISP server corresponding to the second Open API in response to the second invocation request The receipt of the service page may be achieved, for example, by sending, from an ISP server corresponding to the first Open API, the sending invocation request to the ISP server corresponding to the second Open API; and receiving a processed service page from the ISP server corresponding to the first Open API, the service page being received by the ISP server corresponding to the first Open API from the ISP server corresponding to the second Open API, the service page being embedded in a service page of the ISP server corresponding to the second Open API.","Embedding the service page into a page corresponding to the transaction request may comprise embedding the service page in the page corresponding to the transaction request in a form of Iframe.","Before determining an ISP corresponding to the Open API as requested to be invoked in the invocation request, the method may further comprise authenticating the user who sends the transaction request.","Authenticating the user who sends the transaction request may comprise creating a user login identification when the user logs in successfully; and determining whether the user login identification is valid when the user login identification is updated each time when the user sends a respective transaction request.","In an event that the determined ISP server corresponding to the Open API as requested to be invoked in the invocation request comprises a plurality of ISP servers, sending the first invocation request to the determined ISP server may comprise employing a random route algorithm to locate one of the determined ISP servers; and sending the first invocation request to the located one of the determined ISP servers.","In another aspect, an apparatus of implementing network transactions based on Open API may comprise a first receiving unit that receives an invocation request to invoke an Open API sent by a third party development server according to a user's transaction request; a first ISP invocation unit that determines an ISP server corresponding to the Open API as requested to be invoked in the invocation request received by the first receiving unit, and sends the invocation request to the determined ISP server; a first invocation result feedback unit that receives a service page returned from the ISP server according to the invocation request sent by the first ISP invocation unit, and sends the service page to the third party development server for processing the service page and sending the processed service page to the user, the processing comprising embedding the service page into a page corresponding to the transaction request.","The first ISP invocation unit may comprise an invoke relationship determination module that determines an invocation relationship among a plurality of Open APIs in an event that the Open API as requested to be invoked in the invocation request received by the first receiving unit comprises the plurality of Open APIs; a first invocation execution module that sends the invocation request to an ISP server corresponding to a first Open API which is in a first place of an invocation sequence of the plurality of Open APIs in an event that the invoke sequence is determined to exist among the plurality of Open APIs according to the invocation relationship determined by the invocation relationship determination module; and a second invocation execution module that sends the invocation request to a plurality of ISP servers individually corresponding to the plurality of Open APIs in an event that the invocation sequence is determined not to exist among the plurality of Open APIs according to the invocation relationship determined by the invocation relationship determination module.","The apparatus may further comprise an invoke relationship embedding unit that embeds the invocation relationship among the plurality of Open APIs to the service page in an event that the invocation sequence is determined to exist among the plurality of Open APIs according to the invocation relationship, and provides the embedded and processed service page to the first invocation result feedback unit.","The apparatus may further comprise a second receiving unit that receives an invocation request to invoke a second Open API which is after the first Open API and is triggered according to the invocation sequence embedded in the service page returned by the first invocation result feedback unit; a second ISP invocation unit that sends the invocation request received by the second receiving unit to an ISP server corresponding to the second Open API; and a second invocation result feedback unit that receives a service page returned from the ISP server corresponding to the second Open API according to the invocation request according to the second ISP invoke unit, and sends the service page to the third party development server for processing the service page and sending the processed service page to the user.","The second ISP invocation unit may comprise an invocation relationship analysis module that determines whether the second Open API should be invoked through the first Open API according to the invocation relationship among the plurality of Open APIs before sending the invocation request received by the second receiving unit to an ISP server corresponding to the second Open API; and an invocation request sending module that forwards the invocation request to an ISP server corresponding to the second Open API in an event that an analysis result of the invocation relationship analysis module is positive. The second invocation result feedback unit may comprise a receiving module that receives a service page processed and returned by the ISP server corresponding to the first Open API, wherein the service page is the service page returned by the ISP server corresponding to the second Open API and received by the ISP server corresponding to the first Open API which embeds in the service page provided by the first Open API; a feedback module that sends the service page received by the receiving module to the third party development server for processing the service page and sending the processed service page to the user.","The apparatus may further comprise an authentication unit that authenticates the user who sends the transaction request, and instructs the first ISP invocation unit to determine an ISP corresponding to Open API as requested to be invoked in the invocation request.","The authentication unit may comprise an authentication module that determines the user authentication in an event that the user meets a setting condition; and an instruction module that instructs the first ISP invocation unit to determine an ISP corresponding to the Open API as requested to be invoked in the invocation request in an event that the authentication module determines the user is authenticated. The setting condition may comprise creating a user login certification when the user logs in successfully; and determining the user login certification is valid. The user login certification may be updated each time when the user sends a transaction request.","The first ISP invoke unit may comprise an ISP server determination module that determines a quantity of ISPs corresponding to the Open API as requested to be invoked in the invocation request; an ISP server selection module that employs a random route algorithm to locate an ISP server in a plurality of ISP servers if the ISP determined by the ISP server determination module comprises the plurality of ISPs, and sends the invocation request to the located ISP server.","In yet another aspect, a system of implementing network transactions based on Open API may comprise a third party development server; a transaction implementation server; and an ISP server. The third party development server may send an invocation request to an Open API to the transaction implementation server according to a user's transaction request, receive a service page returned from the transaction implementation server, and embed the service page into a page corresponding to the transaction request before providing to the user. The transaction implementation server may determine an ISP server corresponding to the Open API as requested in the invocation request in response to the invocation request, send the invocation request to the determined ISP server, receive a service page returned by the ISP server, and send the service page to the third party development server. The ISP server may return a corresponding service page to the transaction implementation server according to the invocation request sent by the transaction implementation server.","According to the present disclosure, concerning the security of data, it is more secure to return service data to a third party development server through a service page than directly returning structural data to the third party development, as with a conventional method. Besides, the third party development server does not need to analyze the business logics as all controllability to business is implemented by the servers between the third party server and the ISPs, and consequently the controllability is enhanced.","In order to provide a solution that enhances both data security and controllability for business, the present disclosure provides an online business method, system and apparatus based on Open API. The techniques described below can be utilized in implementing online transactions in the form of a method or an apparatus. These transactions may be business in nature, such as those used in online e-commerce. Preferred embodiments are described below with reference to the figures for illustrative purpose but not to limit the scope of the present disclosure.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 1"},"Stage : a transaction implementation server receives an invocation request for Open API from a third party development server. The request is sent based on a user's transaction request. As noted, the transaction request may, in certain implementations, pertain to a business request for transacting business, such as that used in e-commerce, and hence the transaction implementation server may be further be considered as a business implementation server.","Stage : the business implementation server determines an ISP corresponding to the Open API as requested to be invoked in the invocation request and sends the invocation request to the determined ISP server.","Stage : the business implementation server receives a service page returned from the ISP server according to the invocation request.","Stage : the business implementation server sends the service page to the third party development server, and the third party development server processes the service page and sends it to the user.","In stage , the third party development server processes the service page by embedding the service page into a page corresponding to the business request.","The method of implementing online business described above can be applied in various network environments in which the business implementation server may be a server installed in a corresponding network environment and used for controlling and managing the business implemented in the network environment. The third party development server may be an ISV server.","In one embodiment, if the Open API as requested to be invoked in the invocation request includes a plurality of Open APIs, then before sending the invocation request to the determined ISP server, i.e., before stage , the method may further determine an invocation relationship between the plurality of Open APIs.","The invocation relationship among the plurality of Open APIs indicates whether an invocation sequence exists among the plurality of Open APIs. According to one embodiment, the plurality of Open APIs may include Open APIs having an invocation sequence and may also include an independent Open API which shares invocation sequence with other Open APIs.","After determining the invocation relationship among the plurality of Open APIs, stage  of the process shown in  sends the invocation request to the determined ISP server, as shown in , which includes a number of stages as described below.","Stage : determining whether an invocation sequence exists among the plurality of Open APIs according to the invocation relationship that exists among the plurality of Open APIs. If an invocation sequence exists, the process proceeds to stage ; otherwise, the process proceeds to stage .","Stage : sending the invocation request to an ISP server corresponding to a first Open API which is in the first place of the invocation sequence of the plurality of Open APIs, and proceeding to stage  of .","Stage : sending the invocation request to a plurality of ISP servers each of which corresponding to a respective one of the plurality of Open APIs, and proceeding to stage  of .","According to one embodiment, if the Open API as requested to be invoked in the invocation request includes a plurality of Open APIs and an invocation sequence exists among the plurality of Open APIs, a plurality of invocations are to be performed according to business logics until the last Open API of the invocation sequence is invoked. After performing the first invocation according to the invocation sequence and before sending the service page to the third party development server, i.e., before stage  of , the process may further embed the invocation sequence among the plurality of Open APIs in the service page.","By performing the stages above, the invocation sequence among the Open APIs is embedded in the service page returned to the user, and the user can trigger the next Open API invocation flow, the process of which includes a number of stages as described below and as shown in .","Stage : the business implementation server receives an invocation request of a second Open API, which is after the first Open API, as triggered by the user according to the invocation sequence embedded in the service page.","Stage : sending the invocation request to an ISP server corresponding to the second Open API.","Stage : receiving a service page, returned from the ISP server corresponding to the second Open API, according to the invocation request.","Stage : sending the service page to the third party development server which in turn processes the service page and sends it to the user.","According to the process shown in , the business implementation server implements the invocation process for the invocation request according to the next Open API invocation request triggered by the user. According to one embodiment, after the user triggers the invocation process for the next Open API, inter-invoking between the ISP servers corresponding to different Open APIs may be supported. For example, for complicated businesses involving the interactions among a plurality of ISP servers, after invoking the business provided by the ISP server corresponding to the first Open API, the business provided by the ISP server corresponding to the second Open API may need to be invoked. However, the ISP server corresponding to the second Open API may only support access by certain ISP servers. Generally, these certain ISP servers are the ISP servers corresponding to the Open API which are invoked for the first time. Under such circumstances, the ISP server corresponding to the second Open API needs to be invoked through the ISP server corresponding to the first Open API, so as to obtain the business provided by the ISP server corresponding to the second Open API. Specifically, the business implementation server implements the invocation process of the invocation request according to the invocation request of the next Open API triggered by the user, which is shown as .","Stage : the business implementation server receives an invocation request for the second Open API, which is after the first Open API, as triggered by the user according to the invocation sequence embedded in the service page.","Stage : determining whether the second Open API needs to be invoked by the first Open API according to the invocation relationship among the plurality of Open APIs. If the second Open API needs to be invoked through the first Open API, then the process proceeds to stages \u02dc; otherwise, the process proceeds to stages \u02dc.","In stage , when an inter-invocation relationship exists between the first Open API and the second Open API, the invocation of the second Open API needs to be accomplished through the first Open API.","Stage : forwarding the invocation request to the ISP server corresponding to the second Open API through the ISP server corresponding to the first Open API.","Stage : receiving a processed service page returned from the ISP server corresponding to the first Open API, then proceeding to stage .","In stage  the ISP server corresponding to the first Open API receives a service page returned from the ISP server corresponding to the second Open API, and embedding the received service page into a service page of its own service page.","Stage : sending the invocation request to the ISP server corresponding to the second Open API.","Stage : receiving a service page returned from the ISP server corresponding to the second Open API according to the invocation request, and then proceeding to stage .","Stage : sending the service page to the third party development server which in turn processes the service page and sends it to the user.","According to one embodiment, embedding the service page returned from the ISP into the page corresponding to the business request may include embedding the service page in the page corresponding to the business request in the form of Iframe (Inner Frame).","The page being embedded in the form of Iframe is an Iframe element, which can be understood as a floating frame in the page. A set of frames provides the access authority to the content of Iframe. In actual implementations, the set of frames can be used to read and write the elements contained in the Iframe.","Iframe, also known as Inner Frame, is a technique of embedding a web page into an existing web page. The embedded web page is shown in a designated frame position of the existing web page. However, from the perspective of a user, it should not be discernible that the present web page comes from two different web pages. Thus, an embodiment of the present disclosure uses features of Iframe to render the web of the ISP service open, thus guaranteeing the security and quality of user experience.","According to an embodiment of the present disclosure, in order to enhance the security and controllability of business implementation, before determining an ISP corresponding to an Open API as requested to be invoked in the invocation request, i.e., stage  of the process shown in , the process may further authenticate the user who sends the business request, and perform stage  after the user passes the authentication.","Specifically, the authentication of the user who sends the business request can be performed in different ways, for example, by returning a login interface to the user, requesting the user submit a registered account and password through the login interface if the user is a registered user, requesting the user register first through the login interface if the user is not a registered user, and permitting the user's login after verifying the registered information.","In practical business implementations, generally speaking multiple interactions between the user and the network server are involved. In order to guarantee the validity of user's login, according to an embodiment of the present disclosure, after the user logs in successfully the process may further verify whether the user's login certification, which is updated each time when the user sends a business request, is valid. If it is valid, the user passes the authentication; otherwise, the user's business request is rejected. The user's login certification is created when the user logs in successfully. In practical business implementations, the creation and update of the user login certification may be implemented in the following way:","In some embodiments, the business implementation may be generally sent based on browsers. After the business implementation server verifies the user login, the cookie of the user's login certification which is generated in this login process, along with the time information of the cookie, is written into the browser. When the user accesses (for example, invoking Open API) again, while verifying the validity of the cookie, not only the existence of the user's identification will be verified but also a time interval between the current access and the last time the cookie was written into the browser so as to verify whether the time interval is within a predetermined time interval. In other words, the business implementation server can verify the cookie and refreshes the cookie every time when the Open API is invoked. If the user does not invoke an Open API for a long time, then next time the user will need to re-login in order to enhance the security of business.","According to an embodiment of the present disclosure, if the determined ISP server corresponding to the Open API as requested to be invoked in the invocation request comprises a plurality of ISP servers, then the invocation request is sent to the determined one or more ISP servers. This may comprise sending the invocation request to any one of the determined plurality of ISP servers.","Preferably, the act of sending the invocation request to any one of the determined plurality of ISP servers can be implemented by a random route algorithm. In other words, the invocation request is sent to any one ISP server of the determined plurality of ISP servers according to the random route algorithm. In the meantime, a \u201cheartbeat\u201d test of the ISP server may be performed, and a random list of ISPs is dynamically updated according to the ISP's status. For example, if the test result of an ISP indicates abnormal status of the ISP, the ISP will be deleted from the random list and the next time the invocation request will not be sent to the corresponding server. If the test result of the ISP indicates normal status of the ISP, the ISP will be added back to the random list and the next time the invocation request may be sent to the corresponding server.","In one embodiment, the ISP that provides business can be identified from a plurality of ISP servers through HTTP soft load.","HTTP soft load may be implemented based on a middleware Config Server (i.e., the business implementation server). Each ISP server registers HTTP service to Config Server. The client side of Config Server randomly connects ISP servers and sends HTTP requests based on the registered address of the Config Server. Each ISP service publishes its address information to the Config Server through a server side target, and each client side subscribes to the necessary service of the Config Server through a client side target. The Config Server pushes a list of all new and available services to the client side, and the client side selects one service address for invocation through a route algorithm (could be a random route algorithm). Specifically, the list of addresses sent to the Config Server can be presented by character strings.","According to an embodiment of the present disclosure, the service page returned from the ISP server can optionally be in two forms as described below.","Form 1: The ISP server returns a service page, and the ISV embeds the service page returned from the ISP into its own service page. The final resulting page returned to the user is presented in a domain name corresponding to an ISP Application, i.e., software developed by a developer. In other words, the domain name of the ISP application is embedded in the results page returned to the user to render the domain name visible to the user being the domain name of the ISP application.","Form 2: The ISP server renders the service page according to the link between the page head and page tail as obtained, elaborates the service page, and returns the web page to the business implementation server. The final resulting page returned to the user is presented as the domain name corresponding to the business implementation server. The link between the page head and page tail is the parameter information inputted by ISV's application by invoking API, and elaborating the service page comprises generating a complete page based on the parameter information.","According to an embodiment of the present disclosure, the present disclosure can meet different business requirements. For example, there may be some business needs that require the domain name of the business implementation server to be presented to the user in order for the business process to proceed further. As an illustration, in a refund operation the user is asked to input the user's password. In order to minimize security loophole and any consequential disputes, the window for the user to input the user's password needs to be presented below the page corresponding to the domain name of the business implementation server. The user inputs the password after confirming that the domain name is correct, so as to prevent the password from being stolen by a third party.","To facilitate better understanding of the techniques provided by the embodiments of the present disclosure, details of the embodiments are described in conjunction with specific examples of the business implementation server controlling the business implementation.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 5","FIG. 5"]},"The invocation request issued by the ISV may include a page API invocation (i.e., invoking a plurality of Open APIs which have an invocation relationship) and a REST API invocation (i.e., invoking one or more Open APIs which do not have any invocation relationship with other Open APIs).","The business implementation server is responsible for the security of business implementation and flow control. As shown in , the business implementation server functions as a connector between one or more ISVs and one or more ISPs, and forwards an invocation request of invoking Open API from an ISV to a corresponding ISP. An API process comprises a plurality of operations of interactions with one or more ISPs, which may contain operations of page interactions and operations of regular REST API. Similarly, while processing a process flow page API, an ISP can invoke services provided by other ISPs, embed one or more pages provided by other ISPs into its own page, and return its page back to the business implementation server for the business implementation server to forward it to the ISV.","The authentication component is responsible for different authentication processes such as, for example, the business implementation server's authentication of an ISV, an ISP's authentication of the business implementation server, etc.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 6"},"Stage : The user issues a business request to the ISV.","In this stage, the business request issued by the user may include bidding requests, refund requests, etc. The user needs to log in before issuing such business requests.","Stage : The ISV issues an invocation request to Open API through an application APP.","In this stage, the invocation request comprises necessary parameters for invoking API and signature information for these parameters.","Stage : The business implementation server verifies the user login information and cookies after receiving the request. If the verification passes, the process proceeds to the next stage; otherwise, the user's request is rejected (not shown).","Stage : The business implementation server verifies the access authority of the ISV. This may involve verifying whether the ISV is authorized to invoke the API and to control the flow. If the verification passes, the process proceeds to the next stage; otherwise, the invocation request is rejected (not shown).","Stage : The business implementation server determines whether to support ISP1 of the Open API by analyzing the invocation request, and forwards the invocation request to the ISP1 server.","Stage : The ISP1 server verifies the signature of the business implementation server after receiving the invocation request. If the signature passes the verification, the process proceeds to the next stage; otherwise, an error message is returned (not shown).","Stage : The ISP1 server returns the service page to the business implementation server.","Stage : The business implementation server embeds the service page returned from ISP1, and returns it back to the ISV's APP.","Stage : The ISV's APP embeds the returned service page into its own application page and presents it to the user.","Stage : The user clicks on the returned service page and triggers a request for a second step of the process. The request is sent to the business implementation server directly.","Stage : The business implementation server authenticates the user after receiving the request. If the authentication passes, the process proceeds to the next stage; otherwise, an error message is returned (not shown).","Stage : The business implementation server forwards the request to the ISP1 server upon analyzing the invocation request.","Stage : The ISP1 server verifies the signature of the business implementation server after receiving the invocation request. If the signature passes the verification, the process proceeds to the next step; otherwise, an error message is returned (not shown).","Stage : The ISP1 server determines that it needs to invoke the service provided by ISP2 upon analyzing the request, and sends a request of invoking ISP2 to the ISP2 server.","Stage : The ISP2 verifies the user's identification through the authentication component which verifies the user's cookie. If the verification passes, the verified result is returned to the ISP2 server and the process proceeds to the next stage; otherwise, the process jumps to the user login page to ask the user to re-login (not shown).","Stage : The ISP2 server returns the service page to the ISP1 server in response to the service request.","Stage : The ISP1 server embeds the service page returned from the ISP2 server into its own page and returns its own page to the business implementation server.","Stage : The business implementation server embeds and forwards the service page returned from the ISP1 server to the ISV's APP.","Stage : The ISV's APP embeds the returned page into its own service page and presents its service page to the user.","Stage : The user clicks on the returned service page and initiates a third operation of the process. The request is sent to the business implementation server directly.","Stage : The business implementation server authenticates the user after receiving the request. If the authentication passes, the process proceeds to the next stage; otherwise, an error message is returned (not shown).","Stage : The business implementation server forwards the request to the ISP1 server upon analyzing the invocation request.","Stage : The ISP1 server verifies the signature of the business implementation server after receiving the invocation request. If the signature passes the verification, the process proceeds to the next stage; otherwise, an error message is returned (not shown).","Stage : The ISP1 returns its own service page to the ISV's APP.","Stage : The ISV's APP embeds the results page according to the result information returned from the ISP1 server, and presents the results page to the user.","In the above process, the business implementation server serves the functions of transition, forwarding, controlling and monitoring. When an external ISV issues a request to the business implementation server, the business implementation server verifies whether the ISV is authorized to access the page in response to receiving the request. If the verification result is positive, the business implementation server sends the request to an ISP and takes the ISP's verification of signature, analyzes data returned from the ISP, and returns the data to the external ISV. In one embodiment, HTTP may be adopted for invocation between the business implementation server and the ISP, i.e., the ISP may provide the HTTP service. The business implementation server accesses an ISP page through HTTP client side, and the ISP outputs the content of the ISP page to the business implementation server directly. In some embodiments, the business implementation server may perform a number of determinations after receiving an invocation request to invoke an Open API, as described below.","The business implementation server may determine whether the cookie in a browser is valid.","The business implementation server may determine whether the Sign parameter is legitimate. The Sign parameter is used for verifying the data introduced from the ISV user. The Sign parameter is generated according to an algorithm agreed by both the ISV and the business implementation server before the ISV invokes API, and is introduced during API invocation.","The business implementation server may determine whether the Appkey parameter is legitimate, and whether the Appkey parameter has the access authority to the current page API. The certification and key of the application of accessing every API is referred to as the Appkey parameter (including Appkey and APP Secret) and is used to certify and control the security for each application. The Appkey parameter is introduced when the ISV invokes the API.","The business implementation server may determine whether the Session parameter corresponds to the user of the cookie. When the application developed by the ISV obtains the information provided by the business implementation server, it is necessary for the user to log in before obtaining the information if the information is private information of the user. The user obtains the Session parameter (the Session key) after logging in to indicate that the data is reachable under the user's authorization. The information is generated when the user logs in and is introduced during API invocation.","The business implementation server may determine whether a time interval between the Timestamp parameter and the current time is within 30 minutes. The Timestamp parameter is used to control the number of times the ISV application accesses the API, and is generated by the business implementation server. It is written into the user's browser cookie, and the user reads the cookie to obtain it when accessing API through a page visit.","The business implementation server may determine whether the user corresponding to the Session parameter has the authorization to access the corresponding Appkey parameter.","If any of the aforementioned determinations yields a negative result, authentication of the user does not pass.","Furthermore, in the above process, the authentication component provides a unified function of login verification. In some embodiments, the authentication component may exist as an independent server, which means the authentication component may use a domain name different from those of the business implementation server and the ISP. A cookie is written into the domain of the business implementation server. When authenticating other ISPs, it is only necessary to determine whether the cookie exists in the domain of the business implementation server. To allow other domains to access the cookie in the domain of the business implementation server, a P3P header may be used during the access.","The process of using an authentication component for authentication is shown in , and may include a number of stages as described below.","Stage : A user sends a login request to an ISV.","Stage : The ISV forwards the login request to a business implementation server through APP and sends its own authentication parameter(s) to the business implementation server.","Stage : The business implementation server forwards the login request to an authentication component after receiving the request.","Stage : The authentication component jumps to the user login page after receiving the login request from the business implementation server. The user inputs the user's username and password. If the verification passes, the process proceeds to the next stage; otherwise, the process returns to the login page (not shown).","Stage : The authentication component issues a request for writing a cookie to the business implementation server.","Stage : The business implementation server performs security verification according to one or more parameters of the request after receiving the request. If the verification passes, the business implementation server writes the cookie.","Stage : The business implementation server returns a response on result of writing the cookie to the authentication component.","The process of implementing online business based on Open API may be implemented as a system. As shown in , a network topology corresponding to a system of implementing online business based on Open API provided by the embodiment of the present disclosure is provided. The system may comprise: a third party development server , a business implementation server , and an ISP server . In some embodiments there may be a plurality of ISP servers. For convenience, only two ISP servers are shown in .","The user of the business implementation server  deploys and controls the online business. Specifically, each server accomplishes respective functions as described below.","The third party development server , according to a user's business request, sends an invocation request to invoke an Open API to the business implementation server . The third party development server  receives a service page returned from the business implementation server  and embedding the service page into a page corresponding to the business request for sending to the user.","The business implementation server , according to the invocation request sent by the third party development server , determines an ISP server  corresponding to the Open API requested to be invoked in the invocation request, and sends the invocation request to the determined ISP server . The business implementation server  receives a service page returned by the ISP server  and sends the service page to the third party development server .","The ISP server  returns a corresponding service page to the business implementation server  according to the invocation request sent by the business implementation server .","The process of implementing network business based on Open API can be implemented as an apparatus. As shown in , an apparatus of implementing online business based on Open API corresponding to the aforementioned process and the embodiments of the present disclosure is provided. The apparatus may comprise: a first receiving unit , a first ISP invocation unit , and a first invocation result feedback unit .","The first receiving unit  receives an invocation request to invoke an Open API sent by a third party development server according to a user's business request.","The first ISP invocation unit  determines an ISP server corresponding to the Open API as requested to be invoked in the invocation request received by the first receiving unit , and sends the invocation request to the determined ISP server.","The first invocation result feedback unit  receives a service page returned from the ISP server according to the invocation request sent by the first ISP invocation unit , and sends the service page to the third party development server. The third party development server processes the service page and sends the processed service page to the user. The third party development server processes the service page by embedding the service page into a page corresponding to the business request.","As shown in , according to one embodiment of the present disclosure, the first ISP invocation unit  may further comprise: an invocation relationship determination module A, a first invocation execution module B, and a second invocation execution module C.","The invocation relationship determination module A determines an invocation relationship among a plurality of Open APIs in an event that the Open API as requested to be invoked in the invocation request received by the first receiving unit  comprises the plurality of Open APIs.","The first invocation execution module B sends the invocation request to an ISP server corresponding to a first Open API, which is in a first place of an invocation sequence of the plurality of Open APIs in the event the invocation sequence is determined to exist among the plurality of Open APIs according to the invocation relationship determined by the invocation relationship determination module A.","The second invocation execution module C sends the invocation request to a plurality of ISP servers individually corresponding to the plurality of Open APIs, in the event that an invocation sequence is determined not to exist among the plurality of Open APIs according to the invocation relationship determined by the invocation relationship determination module A.","As shown in , according to an embodiment of the present disclosure, the apparatus shown in  may further comprise an invocation relationship embedding unit .","The invocation relationship embedding unit  embedding the invocation relationship among the plurality of Open APIs to the service page in the event that an invocation sequence is determined to exist among the plurality of Open APIs according to the invocation relationship. The invocation relationship embedding unit  then provides the embedded and processed service page to the first invocation result feedback unit .","As shown in , according to an embodiment of the present disclosure, the apparatus shown in  may further comprise: a second receiving unit , a second ISP invocation unit , and a second invocation result feedback unit .","The second receiving unit  receives an invocation request to invoke a second Open API, which is after the first Open API and is triggered according to the invocation sequence embedded in the service page returned by the first invocation result feedback unit .","The second ISP invocation unit  sends the invocation request received by the second receiving unit  to an ISP server corresponding to the second Open API.","The second invocation result feedback unit  receives a service page returned from the ISP server corresponding to the second Open API according to the invocation request according to the second ISP invocation unit , and sends the service page to the third party development server. The third party development server processes the service page and sends the processed service page to the user.","As shown in , according to an embodiment of the present disclosure, the second ISP invocation unit  in the apparatus shown in  may further comprise: an invocation relationship analysis module A and an invocation request sending module B.","The invocation relationship analysis module A determines whether the second Open API should be invoked through the first Open API, according to the invocation relationship among the plurality of Open APIs before sending the invocation request received by the second receiving unit  to an ISP server corresponding to the second Open API;","The invocation request sending module B forwards the invocation request to an ISP server corresponding to the second Open API, if an analysis result of the invocation relationship analysis module A is positive.","Correspondingly, in one embodiment, the second invocation result feedback unit  in the apparatus shown in  may further comprise: a receiving module A and a feedback module B.","The receiving module A receives a service page processed by and returned from the ISP server corresponding to the first Open API. The ISP server corresponding to the first Open API receives the service page returned from the ISP server corresponding to the second Open API, embeds the service page in its own service page, and returns its own service page to the receiving module A.","The feedback module B sends the service page received by the receiving module A to the third party development server, which processes the service page and sends the processed service page to the user.","As shown in , according to an embodiment of the present disclosure, the apparatus shown in  may further comprise an authentication unit .","The authentication unit  authenticates the user who sends the business request, and instructs the first ISP invocation unit  to determine an ISP corresponding to the Open API as requested to be invoked in the invocation request.","As shown in , according to an embodiment of the present disclosure, the authentication unit  in the apparatus shown in  may further comprise: an authentication module A and an instruction module B.","The authentication module A determines the user authentication if the user meets a setting condition. The setting condition comprises: creating a user login certification when the user logs in successfully; and determining the user login certification is valid, wherein the user login certification is updated each time when the user sends a business request.","The instruction module B instructs the first ISP invocation unit  to determine an ISP corresponding to the Open API as requested to be invoked in the invocation request, if the authentication module A determines the user is authenticated.","As shown in , according to an embodiment of the present disclosure, the first ISP invocation unit  in the apparatus shown in  may further comprise: an ISP server determination module D and an ISP server selection module E.","The ISP server determination module D determines the quantity of ISPs corresponding to the Open API as requested to be invoked in the invocation request.","The ISP server selection module E employs a random route algorithm to locate an ISP server in a plurality of ISP servers if the ISP determined by the ISP server determination module D comprises the plurality of ISPs, and sends the invocation request to the located ISP server.","A detailed description of the specific methods and\/or means for implementing the function of the apparatus of implementing online business based on Open API provided by the embodiments of the present disclosure will not be provided as they have been explained in details in the corresponding stages of the processes described above.","The apparatus implementing online business based on Open API provided by the embodiments of the present disclosure may be independent standalone apparatus. In various applications, concerning simplification of network structures, the functions implemented by the apparatus may be integrated in the business implementation server. For example, the apparatus may be added in the business implementation server to act as a unit of implementing the aforementioned functions. Besides, the apparatus implementing online business based on Open API provided by the embodiments of the present disclosure may be implemented by computer-executable instructions. Persons of ordinary skill in the art can appreciate that the aforementioned modules can be defined or divided differently as long as the apparatus has the aforementioned functions and are protected by the claims of the present disclosure.","The present disclosure is described according to the flow charts and\/or block diagrams of the method, apparatus (system) and computer-executable instructions of the embodiments. It should be understood that each process and\/or block of the flow charts and\/or block diagrams, and the combination of the processes and\/or blocks of the flow charts and\/or block diagrams, can be implemented by computer-executable instructions. These computer-executable instructions may be implemented on one or more general-purpose computers, one or more special-purpose computers, one or more embedded processors, or one or more other processors of programmable data processing equipment, so that an apparatus for implementing a process or multiple processes and\/or a designated function of a block or multiple blocks in block diagrams can be generated by using computers or other processors of programmable data processing equipment to perform instructions.","These computer-executable instructions may be stored in one or more computer-readable storage media which may cause computers or other programmable data processing equipment to operate in a certain way. The instructions stored in the one or more computer-readable storage media of the computer can implement a process or multiple processes and\/or a designated function of a block or multiple blocks depicted in the block diagrams.","These computer-executable instructions can be installed in one or more computers or one or more other programmable data processing equipment, so that a series of operations can be performed in the one or more computers or the one or more other programmable data processing equipment to implement the processes described above. Accordingly, the instructions performed in the one or more computers or the one or more other programmable data processing equipment provide steps of implementing a process or multiple processes and\/or a designated function of a block or multiple blocks in depicted in the block diagrams.","By employing at least one of the aspects provided by the present disclosure, when implementing online business, a method may comprise: receiving, from a third party development server, an invocation request to invoke an Open API according to a user's business request; determining an ISP server corresponding to the Open API as requested to be invoked in said invocation request; sending said invocation request to said determined ISP server; receiving a service page returned from said ISP server according to said invocation request; sending said service page to said third party development server for processing said service page and sending the processed service page to said user, wherein said processing comprises embedding said service page into a page corresponding to said business request. Accordingly, concerning the security of data it is more secure to return service data to a third party development server through a service page than directly returning structural data to the third party development as is the case with conventional methods. Besides, the third party server does not need to analyze the business logics as all controllability to business is implemented by the servers between the third party server and the ISPs, and consequently the controllability is enhanced.","The present disclosure provides a limited number of exemplary embodiments. However, the present disclosure is not limited by these examples, and any changes proposed by persons ordinarily skilled in the art will be considered under the protection of the present disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":"1"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":"1"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4","b":"2"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 6","b":"2"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 9","b":"1"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 10","b":"1"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 11","b":"2"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 12","b":"3"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 14","b":"4"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 16","b":"2"}]},"DETDESC":[{},{}]}
