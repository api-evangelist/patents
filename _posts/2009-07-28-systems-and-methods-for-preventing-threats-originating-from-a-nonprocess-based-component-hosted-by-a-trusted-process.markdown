---
title: Systems and methods for preventing threats originating from a non-process based component hosted by a trusted process
abstract: A computer-implemented method for preventing threats originating from a non-process based component hosted by a trusted process is described. The loading activity of the trusted process is monitored. A trust level associated with the trusted process is altered when an unverified component is loaded into the trusted process. Events performed by the trusted process are monitored. An unverified component that originated the event is identified. The trusted process is terminated based on a security risk associated with the unverified component that originated the event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08205257&OS=08205257&RS=08205257
owner: Symantec Corporation
number: 08205257
owner_city: Mountain View
owner_country: US
publication_date: 20090728
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["The use of computer systems and computer-related technologies continues to increase at a rapid pace. This increased use of computer systems has influenced the advances made to computer-related technologies. Indeed, computer systems have increasingly become an integral part of the business world and the activities of individual consumers. Computer systems may be used to carry out several business, industry, and academic endeavors. The wide-spread use of computers has been accelerated by the increased use of computer networks, including the Internet. Many businesses use one or more computer networks to communicate and share data between the various computers connected to the networks. The productivity and efficiency of employees often requires human and computer interaction.","The need for reliable security techniques to secure data stored within a computer system has also increased dramatically. Malicious software has been developed to infiltrate and avoid these security techniques. This malicious software (commonly known as \u201cmalware\u201d) may be designed to cause harm or data loss. For example, some malware has been designed to destroy files on a hard disk, or to corrupt the file system of a computer by writing invalid data. Malware has also been designed for profit-driven motives. For example, some malware is designed to take control of a users' computer. Malware may also be designed to monitor users' web browsing, display unsolicited advertisements, etc.","The creators of these various forms of malware desire the malware to remain undetected by the security techniques implemented by a computer system. Malware designers may attempt to hide or bury the malware in applications or functions on the computer system that remain unchecked by the security techniques. As shown by the above discussion, benefits may be realized by providing improved systems and methods for preventing threats originating from a malware component that is hosted by a trusted process that is not monitored by the security techniques implemented by the computer system.","A computer-implemented method for preventing threats originating from a non-process based component hosted by a trusted process is described. The loading activity of the trusted process is monitored. A trust level associated with the trusted process is altered when an unverified component is loaded into the trusted process. Events performed by the trusted process are monitored. An unverified component that originated the event is identified. The trusted process is terminated based on a security risk associated with the unverified component that originated the event.","In one embodiment, the unverified component that originated the event is deleted. The unverified component may be a non-process based dynamic link library (\u201cDLL\u201d). In one configuration, a trust level may be assigned on an image file to the unverified component. The trust level assigned to the unverified component may be based on a digital signature of the component.","A monitored event may include a system configuration setting modification, a portable executable (\u201cPE\u201d) file modification, a PE file deletion, or a PE file creation. In one embodiment, execution call sequence tracing may be performed to identify the unverified component that originated the event.","In one example, the security risk associated with the identified unverified component may be evaluated based on a run time event associated with the unverified component. In another example, the security risk associated with the identified unverified component may be evaluated based on static characteristics possessed by the unverified component in a static file format. The unverified component may include a non-process based plug-in or a non-process based extension to the trusted process.","A computer system configured to prevent threats originating from a non-process based component hosted by a trusted process is also described. The computer system may include a processor and memory in electronic communication with the processor. The computer system may also include a security module configured to monitor loading activity of the trusted process, and alter a trust level associated with the trusted process when an unverified component is loaded into the trusted process. The module may be further configured to monitor events performed by the trusted process, and identify an unverified component that originated the event. The module may be further configured to terminate the trusted process based on a security risk associated with the unverified component that originated the event.","A computer-program product for preventing threats originating from a non-process based component hosted by a trusted process is also described. The computer-program product may include a computer-readable medium having instructions thereon. The instructions may include code programmed to monitor loading activity of the trusted process, and code programmed to alter a trust level associated with the trusted process when an unverified component is loaded into the trusted process. The instructions may also include code programmed to monitor events performed by the trusted process, and code programmed to identify an unverified component that originated the event. The instructions may further include code programmed to terminate the trusted process based on a security risk associated with the unverified component that originated the event.","Features from any of the above-mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments, features, and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.","While the exemplary embodiments described herein are susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather, the instant disclosure covers all modifications, equivalents, and alternatives falling within the scope of the appended claims.","An increasing variety of malicious software (\u201cmalware\u201d) are infiltrating and damaging computing systems. One form of infiltration involves the malware dropping non-process based components into a trusted process (i.e., trusted software) installed on a computer system. Malware may inject the non-process components into a trusted process by registering the components as an extension of the trusted process. In addition, the malware may insert the components via a direct code injection technique. After the components have been injected into the trusted process, the process may act as a host for these non-process based components. Infiltrating trusted processes presents a major challenge to the security of a computer system. Computer systems may use a security mechanism (such as security software) to monitor the activities on the system. The mechanism may challenge a process running on the system if suspicious activity appears to be originating from the process. Trusted processes, however, are typically not challenged by the security mechanism for any activity they perform on a system. In other words, non-processed based components hosted by a trusted process may execute malicious activities on the computer system without being challenged by the security mechanism.","Examples of non-process based components may include dynamically linked libraries (\u201cDLLs\u201d). The DLLs may be injected into a trusted process and the security software that monitors the trusted process is not likely to monitor or challenge malicious behavior on behalf of the trusted process. The chances of DLLs surviving the challenges presented by security software are significantly increased. For example, many varieties of malware inject DLLs as extensions for Winlogon, browsers, etc. These DLLs may be injected under the guise of providing a DLL service. The DLLs may be injected into a trusted process such as \u201csvchost.exe\u201d. In other words, svchost.exe may act as the host and cause the DLLs to run on the computer system. These DLLs may go undetected and unchallenged by the security software because they are injected into and hosted by a trusted process.","In one embodiment, the present systems and methods may combat threats originating from non-process based components by altering the security software to monitor (and challenge) trusted processes. For example, the security software may begin to monitor a trusted process when the security software observes the trusted process loading external suspicious components. The security software may then trace back malicious activity to the suspicious components to detect and convict the components when a security risk to the computer system has risen to a predetermined level.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["102","102"]},"In one configuration, the client  may include a security module . The client  may also include a process . In one example, the security module  may monitor certain attributes and actions associated with the process .","In one embodiment, the client  may communicate with additional devices or modules via the Internet . In one example, a suspicious module  may communicate with the client  via the internet . The suspicious module  may include malware or some other type of malicious software. The suspicious module  may inject an unverified component  into the process  through the Internet connection . In one configuration, the process  may load the unverified component  through the Internet connection .","In one example, the process  may be a verified or trusted process whereas the unverified component  may a non-process based component that has not been previously verified by the security module . An example of a non-process based component may be a DLL, a plug-in, an extension, etc.","In another embodiment, a server  may include the security module  that monitors the process . For example, the security module  on the server  may monitor the process  running on the client  via a network connection .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["202","202","204","206","206","204","206"]},"In one example, the security module  may include a trust level module . The trust level module  may include a trust level  for the process , as well as a trust level  for an unverified component . For example, a trust level above a certain threshold may indicate that the security module  does not monitor or challenge the activities of the entity associated with the high trust level. Conversely, the security module  may monitor (and challenge) the activities of an entity with a trust level below the threshold. The trust level module  may include a level altering module . In one example, the module  may alter the trust level  for the process  by either decreasing the trust level  or increasing the trust level . For example, the trust level  of the process  at time T may be above a certain threshold and the security module  may not monitor the activities of the process . At a time T, however, the altering module  may decrease the trust level  of the process  so that the level  is below the threshold. With the trust level  of the process  below the threshold, the security module  may alter its monitoring procedures and begin to monitor (and challenge) the activities and behavior of the trusted process .","In one configuration, the unverified component  may be loaded into the trusted process . The component  may be disguised as an extension, plug-in, etc. for the process , and the process  may load the component  under these false pretenses. In another embodiment, the unverified component  may be injected into the code of the trusted process  via direct code injection techniques.","In one embodiment, the security module  may include a monitoring module  that may monitor certain characteristics and behaviors of the process . In addition, the security module  may include a tracing module . The tracing module  may determine the origin of a particular event or behavior. For example, the unverified component  may cause a particular event or activity to be engaged. The tracing module  may trace the origin of this event or activity back to the unverified component .","The security module  may further include an evaluation module . The module  may continuously evaluate a security risk level associated with the process  and the unverified component  that is loaded on the process . The evaluation module  may determine when the security risk posed by the unverified component  reaches a predetermined threshold. In one embodiment, a termination module  may terminate the process  when the security risk surpasses the predetermined threshold. In addition, the termination module  may delete or remove the unverified component  and its associated settings from the client  when the process  is terminated.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["300","300","104"]},"In one example, the loading activity of a verified (or trusted) process may be monitored . For example, the security module  may monitor  the verified process for non-process based components being loaded to the verified process. A determination  may be made as to whether an unverified component is loaded into the process. For example, a determination  may be made as to whether the verified process loads an untrusted or unverified component. In addition, a determination  may be made as to whether an unverified component is injected into the code of the verified process.","If it is determined  that an unverified component has not been loaded into the verified process, the method  may return to continue monitoring  the loading activity of the verified process. If, however, it is determined  that the an unverified component has been loaded into the verified process, the behavior of the verified process may be monitored . In other words, when an unverified component is loaded into the process, the behavior, events, etc., originating from the verified process may be monitored . Before an unverified non-process based component is loaded into the verified process, the security software may not monitor the behavior, activity, etc. of the verified process.","In one embodiment, a determination  may be made as to whether suspicious activity is detected. For example, suspicious activity may include modifying a system configuration setting, modifying a portable executable (\u201cPE\u201d) file, deleting a PE file, creating a PE, etc. If suspicious activity has not been detected, the method  may return to continue monitoring  the behavior of the verified process. If, however, suspicious activity has been detected, the origin of the suspicious activity may be determined .","An additional determination  may be made as to whether the origin of the suspicious activity creates a security risk that is above a predetermined threshold. If it is determined  that the security risk is not above the predetermined threshold, the method  may return to continue monitoring  the behavior of the verified process. If, however, the security risk has risen above a predetermined threshold, the verified process may be terminated .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4","b":["400","400","104"]},"In one embodiment, the loading activity of a verified process may be monitored . For example, the security module  may monitor the verified process for the loading of dependencies, components, plug-ins, extensions, etc. A determination  may be made as to whether an unverified component has been loaded into the process. In one embodiment, components loaded into a trusted process may be assigned a level of trust. For example, the level of trust may be determined from a digital signature or by any other means. The level of trust may be included on an image file associated with an unverified component. An unverified component may have a trust level that is below a \u201ctrust threshold\u201d. In other words, an unverified component may be a component that is not trusted by the security module .","If an unverified component (i.e., a component that is not trusted) has not been loaded into the process, the method  may return to continue monitoring  the loading activity of the verified process. If, however, an unverified component is loaded into the verified process, a trust level associated with the verified process may be altered . In one embodiment, before an unverified component is loaded into a verified process, the trust level of the process may be above a threshold such that the behavior and events originating from the verified process are not monitored and\/or challenged. If, however, an unverified component is loaded into a verified process, the trust level of the verified process may be decreased below a threshold. With a decreased trust level below the threshold, the behavior and events of the verified process may now be monitored  by the security module . In one configuration, more than one unverified components may be loaded into the verified process.","A determination  may be made as to whether suspicious activity is detected. For example, the security module  may determine  whether the verified process performs a suspicious activity or event. If suspicious activity has not been detected, the method  may return to continue monitoring  the behavior and events of the verified process. If suspicious activity has been detected, the suspicious activity may be traced  back to the originating unverified component. In other words, once suspicious activity is detected, the origin of the suspicious activity may be determined. The origin of the suspicious activity may be traced by performing execution call sequence tracing. In one example, the suspicious activity may originate from one of the unverified components hosted by a verified process. In one embodiment, the Windows Operating System (\u201cOS\u201d) may provide application programming interfaces (\u201cAPIs\u201d) that allow code execution to be traced  back to various address spaces belonging to different unverified components hosted by the verified process.","In one embodiment, the security risk of the unverified component that originated the suspicious activity may be evaluated . For example, the security risk may be evaluated  based on various run time events associated with the unverified component. In addition, the security risk of the originating unverified component may be evaluated  based on static characteristics possessed by the unverified component in a static file format. A determination  may be made as to whether the security risk has risen above a predetermined threshold. If the security risk has not risen above the threshold, the method  may return to continue monitoring  the behavior of the verified process. If, however, the security risk has risen above the predetermined threshold, the verified process may be terminated . In addition, the unverified component and its corresponding settings may be deleted . In other words, the verified process may be terminated  from running on a client computing devise . In addition, the unverified component hosted by the verified process and the associated settings of the unverified component may also be deleted  from the client computing device . In one embodiment, terminating the verified process and the unverified component with its corresponding settings may terminate the influence the unverified component has over the behavior of the verified process. Malicious components hosted in trusted software\/processes may be detected and the potential harm from these components may be prevented.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5","b":["510","510","512","510","514","517","518","520","522","524","526","528","530","532","533","534","537","538","535","590","535","539","540","542","546","512","528","547","512","530","548","512"]},"Bus  allows data communication between central processor  and system memory , which may include read-only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. For example, the security module  to implement the present systems and methods may be stored within the system memory . Applications resident with computer system  are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk ), an optical drive (e.g., optical drive ), a floppy disk unit , or other storage medium. Additionally, applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem  or interface .","Storage interface , as with the other storage interfaces of computer system , can connect to a standard computer readable medium for storage and\/or retrieval of information, such as a fixed disk drive . Fixed disk drive  may be a part of computer system  or may be separate and accessed through other interface systems. Modem  may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface  may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface  may provide such connection using wireless techniques, including digital cellular telephone connection, Cellular Digital Packet Data (CDPD) connection, digital satellite data connection or the like.","Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., document scanners, digital cameras and so on). Conversely, all of the devices shown in  need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in  is readily known in the art and is not discussed in detail in this application. Examples of the computer system  may include smart phones, personal digital assistants (PDAs), and other mobile internet devices (MIDs) and netbooks, any of which may host an email client. Code to implement the present disclosure can be stored in computer-readable storage media such as one or more of system memory , fixed disk , optical disk , or floppy disk . The operating system provided on computer system  may be MS-DOS\u00ae, MS-WINDOWS\u00ae, OS\/2\u00ae, UNIX\u00ae, Linux\u00ae, or another known operating system.","Moreover, regarding the signals described herein, those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block, or a signal can be modified (e.g., amplified, attenuated, delayed, latched, buffered, inverted, filtered, or otherwise modified) between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next, other embodiments of the present disclosure may include modified signals in place of such directly transmitted signals as long as the informational and\/or functional aspect of the signal is transmitted between blocks. To some extent, a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved (e.g., there will inevitably be some attenuation and delay). Therefore, as used herein, a second signal derived from a first signal includes the first signal or any modifications to the first signal, whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and\/or final functional aspect of the first signal.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["600","610","620","630","640","640","510","650","104","610","620","630","640","660","1","640","660","1","640","640","670","670","680","1","640","640","610","620","630","650","690","670"]},"With reference to computer system , modem , network interface  or some other method can be used to provide connectivity from each of client computer systems ,  and  to network . Client systems ,  and  are able to access information on storage server A or B using, for example, a web browser or other client software (not shown). Such a client allows client systems ,  and  to access data hosted by storage server A or B or one of storage devices A()-(N), B()-(N), ()-(N) or intelligent storage array .  depicts the use of a network such as the Internet for exchanging data, but the present disclosure is not limited to the Internet or any particular network-based environment.","While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","Furthermore, while various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","The foregoing description, for purpose of explanation, has been described with reference to specific embodiments. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present systems and methods and their practical applications, to thereby enable others skilled in the art to best utilize the present systems and methods and various embodiments with various modifications as may be suited to the particular use contemplated.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving,\u201d as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
