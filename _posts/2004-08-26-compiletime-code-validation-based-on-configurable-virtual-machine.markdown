---
title: Compile-time code validation based on configurable virtual machine
abstract: The current invention describes a virtual machine designed to run on a variety of platforms of varied capabilities, and in particular describes support in the coding and development environment for assessing and managing the variation in capability and performance among the platforms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07913237&OS=07913237&RS=07913237
owner: Ensequence, Inc.
number: 07913237
owner_city: Portland
owner_country: US
publication_date: 20040826
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application claims the benefit from U.S. Provisional Patent Application No. 60\/498,218 filed Aug. 26, 2003 whose contents are incorporated herein for all purposes.","1. Field of the Invention","This invention relates to the creation and validation of software applications intended for execution by an interpretive virtual machine.","2. Description of the Prior Art","Computers and computing devices have become a ubiquitous aspect of modern life. In the 1960s and '70s, a computer was a room-sized mainframe which ran a few specialized programs for business or scientific applications. The introduction of the personal computer in the 1980s began to change the perception and use of the computer\u2014thousands of applications were created to serve a wide variety of commercial, business, educational and entertainment functions. More recent advances in semiconductor technology allow computing power to be incorporated into an ever-expanding array of other consumer devices\u2014telephones, automobiles, kitchen appliances, personal digital assistants, and television receivers. The current invention, while focused on the last category, has broader applicability to this range of non-traditional computational systems.","Conventional analog television broadcast is being superceded by digital encoding and broadcast. This development has several promised benefits, including greater picture fidelity and higher audio quality. A prerequisite for successful digital reception is a computing engine capable of receiving, decrypting, decoding and displaying the digitized television video and audio signals. The computation requirements for the various sub-functions are highly asymmetric\u2014the decoding function in particular requires specialized computational hardware, but the other functions can be performed by conventional microprocessors. In fact, contemporary microprocessors are sufficiently powerful that significant surplus computational capability is available beyond the relatively simple functions of managing or performing reception, decryption and display. Accordingly, digital television receivers (often called set-top boxes or STBs) are provided with the capability for reprogramming, for executing custom applications provided to the STB via the broadcast stream or other means. In some ways, the STB is just another computer in the household available for useful or entertaining computational work.","In some very significant ways, however, the STB is unlike the typical PC. In the early days of cable, the cable box was supplied by the cable system provider, and was rented by the viewer through a monthly payment often buried in the cable bill. The viewer did not, and generally could not, purchase a cable receiver. Eventually as cable spread, televisions and video recorders began to incorporate \u2018cable-ready\u2019 capabilities. But as long as the cable provider was supplying the cable box, economics dictated utilizing the installed boxes as long as possible to maximize return (since maintenance was generally negligent). As digital cable becomes available, the same market dynamic is being applied.","The STB is an appliance, and like the television set it accompanies, is perceived to have a relatively long useful life. An eight-year-old computer is generally considered nearly useless\u2014an eight-year-old television set (or cable box) is not. Computer capabilities and standards change rapidly and continuously, while television standards do not. The PC is purchased by the consumer, who shops for features and price, whereas the STB has traditionally been supplied by the cable operator, who dictates features and price. The consumer of an STB or satellite receiver is generally interested in entertainment, and has not to date been enticed by enhanced capabilities of interactivity provided by one platform versus another.","Thus an enormous economic incentive exists for the cable provider to maximize the lifetime and utility of installed STBs. As computer components and systems have become more powerful and less expensive, these capabilities have been built into newer model STBs, but legacy boxes remain in use and will continue to be supported until appropriate economic factors dictate their replacement.","The continuing utilization of legacy STBs becomes of particular relevance when considering the evolution of software languages used in digital receiver systems. In general computing, scores of software languages have been created since the first digital computers were introduced. Each had some benefit or utility which justified its development. Some languages were appropriate only to a single machine or system architecture, while others were intended to be appropriate over a broad, or universal, range of computational platforms. Languages come and go; the software community sense of what language is most useful or appropriate changes over time, and languages are not static. Today, web development uses the HTML standard, but the more recent XML standard will likely supercede HTML and become the future standard. HTML is often supplemented by additional algorithm functionality; initially this was provided by JavaScript, but various browsers also support Visual Basic, Java, and most recently .NET.","This evolution of languages is seen in the STB hardware\/software arena as well. To reduce costs, cable providers fostered competition among STB manufacturers, allowing various hardware designs to support a common application language. Various application languages, commonly called middlewares, were developed, each supported by a variety of hardware configurations. Because the technology built from the bottom up, there were no standards for these middlewares, and features and capabilities varied widely. Each middleware developer created proprietary tools for coding applications, and the quality of these tools also varied widely. Learning to use the tools and to craft applications for a particular middleware required significant investment, and the cost of application development was high, even for a single middleware. Because of the disparities among the systems, each separate middleware required duplicate investment of time and effort, so that development and proliferation of interactive television (ITV) applications was slow and costly.","Recognizing these problems, industry representatives began to press for standard development languages and systems. These efforts took two directions. First, standards were developed which intended to provide interactivity on even the simplest and least capable platforms. The Multimedia Hypermedia Experts Group (MHEG) standard is an example of such a standard. However, the limited capabilities of this standard, and its arcane nature, have prevented widespread use. The second direction was to select a common development language and feature set for future platforms. The Java language is a popular medium for programming in a distributed and heterogeneous computing environment and is by its nature well suited to development for embedded systems. Thus Java became the basis for two of these emerging ITV specifications, the Digital Video Broadcast-Multimedia Home Platform (DVB-MHP) and Open Cable Application Platform (OCAP) standards. Java source code is compiled to a common byte-code format which can be interpreted on a wide variety of platforms. By the addition of appropriate television-specific objects and functions, Java can provide a fully-featured execution vehicle for ITV applications.","The use of Java as the development and execution language does however bring significant costs. The complexity of the language requires significant memory, and acceptable levels of performance require significant computation power in the platform. Both of these requirements obviate the use of Java as a solution to the problem of legacy STBs, since memory and CPU capabilities are well below the minimum requirements, and upgrades are infeasible. Thus, while Java may unify application development for future STBs, it does not impact the problem of practical ITV application development and deployment to legacy boxes.","What is desired is a software language, with an associated development and execution environment, which can support the development of ITV applications on both legacy and future digital television platforms, which takes advantage of the variety of capabilities of these platforms without limitation to the lowest common level of service provided by all platforms. Additionally, the language and associated development tools must support display and evaluation of the developed applications and ultimately work with the potential multiplicity of target systems.","The current invention describes a virtual machine designed to run on a variety of platforms of varied capabilities, and in particular describes support in the coding and development environment for assessing and managing the variation in capability and performance among the platforms.","The foregoing and other objects, features and advantages of the invention will become more readily apparent from the following detailed description of a preferred embodiment of the invention that proceeds with reference to the accompanying drawings.","The following description relates the invention to applicant's TVScript language but those knowledgeable in the art would appreciate that the invention can be expanded to work using other such computer programming languages and methods.","Assignee of the current application has approached the challenge of supporting legacy and future hardware by creating a simplified virtual machine which shares many of the benefits of the Java virtual machine, but presents a greatly-reduced set of capabilities carefully trimmed to a level appropriate to ITV applications. This virtual machine language, called TVScript, is an object-based language with a simple set of standard objects, each with properties and functions necessary for its use. The objects fall into three classes.\n\n","The TVScript language specification stipulates the properties and functions associated with each of these objects; the language also includes system functions, and the option for user-defined custom functions. Functions, both pre-defined and custom, can be used as event handlers for the various viewer-and system-driven events which can occur during the execution of an application. Custom functions support a range of algorithmic capabilities for creating conditional programmatic behavior.","Because the TVScript language was intended for use on a variety of legacy systems, the specification makes specific note of the potential differences in performance among the divergent STBs on which the TVScript interpreter, called \u2018on-Q Client\u2019, may execute. For each of such differences, alternate behaviors are specified where appropriate. For example, the properties of the Screen object include settings for video positioning and scaling. Horizontal and vertical scaling factors can nominally be set in one-percent increments from 1 to 1000 percent inclusive. However, on any particular STB, scaling may or may not be supported; when supported, the hardware may only support a fixed set of scaling values. On such hardware systems, scaling is performed so that the actual scaling proportion is set to the supported value which is \u2018closest\u2019 to that set by the TVScript code.","The current invention deals with design-time support for this platform variation. A desirable feature of a development tool or environment which supports the creation of ITV applications using the TVScript language is the capability to alert the author to elements of the application which may exceed the specifications of a particular platform or set of platforms on which the application may execute. The TVScript language and the behavioral specification for on-Q Client which interprets TVScript applications specify that all valid language statements shall be executed without error on every supported platform; however, the result of execution of a statement may be a result which varies from the optimal or desired behavior of the most capable or nominal execution platform. In some cases the execution of a TVScript function or statement may result in no effect on a particular platform, although the application will continue to function in the absence of that particular aspect of TVScript functionality. For instance, the display of a graphical element which is intended to be semi-transparent, but which is actually opaque, does not constitute failure of the ITV application, but does represent a variation from the desired application behavior envisioned by the author.","To support this capability, the development tool for TVScript performs several functions in addition to the conventional tasks of a high-level language compiler. A first task is the identification of object classes which are not supported on the target platform. The prime example of this is the Transaction object, which is responsible for return-path interaction between the STB and a central server. Obviously, if the STB has no return path communication capability, this object will not serve any useful purpose in the application when executed on that STB. Note that the language specification permits such complete lack of support, with appropriate error notification, using standard event techniques, should the application attempt to make use of the functionality.","Another task is the comparison of values assigned to object properties and function arguments, to the valid range for those properties or arguments. The Java virtual machine supports runtime validation of such parameters. The on-Q Client virtual machine also performs runtime validation, for the same reasons of consistency and correctness as the Java virtual machine, but the additional step of performing such validation when possible at design time provides additional support to the application author to ensure that the desired behavior is achieved.","Still another task is to verify that object and system functions utilized in the ITV application are supported on the target platform. In some cases individual functions are not supported on the platform, or provide functionality different from the nominal behavior. While such alternate performance is within the specification of TVScript, the variation may be of significance to the author.","In all cases, this validation is performed against a database of capabilities which stipulates the variant behavior of each of a multiplicity of platforms. Since the range of STB hardware is so great, even for a single supported middleware, the database may contain entries specific to a particular software and hardware combination. For each potentially-variant aspect of on-Q Client behavior, the database contains an entry for each platform, signaling whether and how the platform behavior varies from the nominal or optimal behavior.","When using the platform validation feature, the author specifies a desired target platform from the database. The development tool then searches through the code and data for the application, determining for each item whether the application utilizes a feature or function of TVScript for which the platform exhibits variant behavior. The author is warned of each such variation, and is afforded the opportunity to modify the application code or data, or to accept the variant behavior. The flowchart shown in  illustrates how such testing is performed.","The platform behavior database contains a number of elements for specifying the deviation in behavior from the nominal specified behavior. Several classes of variation are described:\n\n",{"@attributes":{"id":"p-0031","num":"0038"},"figref":"FIG. 2"},"An important feature of the use of the platform capability database is that the author can select among the platforms in the database at any time during development, so that an application may be validated against a number of different platforms in a single work session. The structure of the validation process described in this disclosure makes such flexible validation simple, while retaining the full design power of the TVScript language.","The author may select a number of platforms simultaneously, and be presented with warnings which stipulate only the variations among those platforms for the given application. For instance, if each of a number of platforms permits only a single full-color still image to be displayed, the author may not be interested in seeing warning messages for this feature of the application. However, if one of the number of platforms does not permit full-color image display, then this fact would be highlighted to the author.","Having described and illustrated the principles of the invention in a preferred embodiment thereof, it should be apparent that the invention could be modified in arrangement and detail without departing from such principles. We claim all modifications and variation coming within the spirit and scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
