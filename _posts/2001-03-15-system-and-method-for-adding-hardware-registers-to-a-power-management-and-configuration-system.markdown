---
title: System and method for adding hardware registers to a power management and configuration system
abstract: A system for adding multiple GPE blocks (in addition to the system/root GPE block device) to a computing system by creating a device entry in the ACPI namespace, and using a _CRS object to describe the system resources consumed by the device is described. The GPE block device may then access associated hardware devices through a well known mechanism (either I/O or Memory Mapped accesses). By creating additional GPE block devices within the ACPI namespace, general purpose events may be delivered using more traditional hardware interrupt mechanisms than with existing systems (e.g., wiring GPE blocks together). Moreover, by putting GPE block devices in the ACPI namespace, hardware components having hardware registers may be “hot plugged” to the computing system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06907474&OS=06907474&RS=06907474
owner: Microsoft Corporation
number: 06907474
owner_city: Redmond
owner_country: US
publication_date: 20010315
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO PRIOR APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application claims the benefit of U.S. Provisional Patent Application No. 60\/233,296, filed Sep. 15, 2000.","The present invention relates generally to computing devices, and more particularly to power management and configuration in computing devices.","ACPI (Advanced Configuration and Power Interface) is an open industry specification that defines a flexible and extensible interface for computer power management and related control operations. In general, the interface enables and supports power management through improved hardware and operating system coordination. ACPI allows the operating system to control the power states of many ACPI-supported hardware components, and\/or to pass information to and from some hardware components.","The ACPI Specification describes how a system vendor can use General Purpose Events (GPEs) to inform the operating system that some event occurred, such as a laptop lid being closed or a thermal alert. Typically, a hardware device issues a notification to a hardware register, which in turn surfaces the GPE event. The hardware register is represented to the operating system by a software object commonly called a \u201cGPE block.\u201d A GPE block is a logical construct that represents a set of GPE pins on the hardware register. The hardware signals that are connected to those pins are arbitrary in nature (within some guidelines outlined by the ACPI specification). The operating system sees the GPE block as containing two register sets: one to control whether or not a particular pin is enabled, and another to determine if a particular pin is asserted. If the operating system detects that a pin is both enabled and asserted, then it runs an ACPI control method associated with the pin to handle the event. Until now, an ACPI-compliant system supported only a single GPE block. Moreover, the one supported GPE block had a fixed location in I\/O space, which is a limited resource in most modern computing systems.","More specifically, the ACPI 1.0 specification provides that 0, 1, or 2 GPE hardware registers can be present in the system, with each GPE hardware register having a different I\/O base address. Most operating system developers treat those GPE hardware registers as one \u201clogical\u201d device (the GPE block). The hardware registers that form a GPE block (in ACPI Version 1.0 parlance) share the same address space. That is, if Pin XX is defined for use by GPE (the 1st GPE hardware register in the ACPI 1.0 specification), then that same Pin XX cannot be used by GPE (the 2nd GPE hardware register in the ACPI 1.0 specification). For these reasons, operating system and computing system developers have been limited to a single logical GPE block, or two GPE hardware registers.","As modem computing systems become more complex, the limitation of one GPE block has proved to be a nuisance to the design and creation of larger computing systems having physically separated hardware components. In short, if a system vendor builds a large computer by connecting four smaller computers, and where each smaller computer has its own GPE block device, then complicated wiring would be required to represent the large computer within the ACPI namespace having only a single GPE block device. For instance, the system vendor may have run the signals from the GPE block devices in each of the smaller computers together to give the illusion that there was a single GPE block device within the large computer. The problems with that solution include that the address space defined by a GPE Block device is finite. A GPE Block can support from 0 to 256 signals. So, for a truly large computer which might have more than 256 signals, it would probably not be possible to wire up all the signals to appear to come from a single GPE block. Sharing signals is possible in some instances but impossible in others and would introduce yet more expensive circuitry to the system. Thus, until now, there has been no way to include multiple GPE block devices in a single computing system.","Briefly described, the present invention provides for multiple GPE blocks (in addition to the GPE block device defined in the ACPI Specification Version 1.0) by creating a device entry in the ACPI namespace, and using a _CRS object to describe the system resources consumed by the device. The GPE block device may then access associated hardware devices through a well known mechanism (either I\/O or Memory Mapped accesses). By creating additional GPE block devices within the ACPI namespace, general purpose events may be delivered using more traditional hardware interrupt mechanisms than with existing systems (e.g., wiring GPE blocks together). Moreover, by creating GPE block devices as devices in the ACPI namespace, they may be dynamically loaded or unloaded from the namespace. In addition, the GPE block devices may be moved from one location within the namespace to another location within the namespace.","These and various other features and advantages, which characterize the present invention, will be apparent from a reading of the following detailed description in conjunction with the associated drawings.","Exemplary Operating Environment","FIG.  and the following discussion are intended to provide a brief general description of a suitable computing environment in which the invention may be implemented. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types.","Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer  or the like, including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . On an ACPI system, as described herein, the vendor provided ACPI Machine Language (AML) code, generally referred to as the ACPI BIOS, is also ordinarily stored within the ROM.","The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD-ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system  (such as Microsoft Corporation's Windows\u00ae 2000 operating system). The computer  includes a file system  associated with or included within the operating system , such as the Windows NT\u00ae File System (NTFS), one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in FIG. . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","While the present invention is primarily described with respect to the Windows\u00ae 2000 operating system, those skilled in the art will appreciate that other operating systems and\/or file systems may implement and benefit from the present invention.","Illustrative Configuration Management System","Referring to , there is shown a general, exemplary architecture underlying the present invention. In the sample system shown in , a number of hardware devices connect to one of two host bridges ,  (e.g., a PCI bridge), wherein PCI power management supports wake events generated by functions on the PCI bus. The devices that are connected may include a network card , a mouse , a laptop lid switch , keyboard , and so forth. Each of the two host bridges ,  is connected to one of two distinct GPE blocks ,  (respectively).","Each GPE block contains a status register , and an enable register , . The hardware devices are connected (via a host bridge ,  ) to the status registers of the GPE blocks , . Each hardware device signals general purpose events to the system by sending a power management event signal (PME#) to the status register of its associated GPE block , . The ACPI driver  (described below) owns the general-purpose event registers , , and other than the hardware device signaling the input pins of the Status register , , the register bits are only manipulated by the ACPI driver . Thus, the ACPI driver  manages the bits in the GPE blocks ,  directly, although the source of those events is not directly known and is connected to the system by control methods.","Two GPE blocks ,  are shown in  to illustrate that the invention allows for multiple GPE blocks to be connected to a computing system, and although only two are shown, many more could be easily added to support additional hardware devices. In addition, as described above, one GPE block (e.g., GPE block ) may actually be composed of two pairs of hardware registers (i.e., two status registers and two enable registers ). If a machine vendor included two pairs of hardware registers to represent a single GPE block, the registers could be referred to as GPE_STA, GPE_EN, GPE_STA, GPE_EN. If a GPE block does include two pairs of hardware registers, both pairs are treated logically as a single GPE block in the ACPI namespace  (described later), and share the same addressing space within a single GPE block namespace.","Turning to , a functional block diagram of an ACPI system  as implemented in the computer system  of  is shown. The ACPI system  illustrated is one example of a configuration management system that may benefit from the present invention. The present invention is primarily described herein with reference to the ACPI configuration management system, however, there is no intention to limit the present invention to ACPI. Rather, the present invention is intended to operate with and provide benefits with any operating system, architecture, and\/or configuration management system.","As shown, the application programs  may interface with a kernel , which is a part of the operating system , generally via application programming interface (API) calls or the like. The kernel  can be generally considered as one or more software modules that are responsible for performing many operating system functions. One such function is passing information between the application programs  and the lower level components of the ACPI system , such as the ACPI driver  (described below) and various device drivers (e.g., device driver  ).","The kernel  also interfaces with Operating System Power Management (OSPM) system code . The OSPM system code  comprises one or more software modules that may be a part of the operating system  and that may be used to modify the behavior of certain components of the computer system , typically to conserve power in accordance with pre-configured power conservation settings. As is generally known, the various device drivers  interface with and generally control the hardware installed in the computer system . A driver communicates with other drivers and the operating system components (e.g., an I\/O manager), for example in the Windows\u00ae 2000 (and Windows NT\u00ae) operating systems, by passing I\/O request packets, or IRPs.","In general, the ACPI driver  is a module that controls the functioning of much of the ACPI system . The ACPI driver  may be supplied as part of the operating system  or as a separate component. In the described system, the ACPI driver  is loaded during system start-up at the base of a tree of devices, where it acts as an interface between the operating system  and the BIOS . The responsibilities of the ACPI driver  include support for plug and play (PnP) and, in keeping with the present invention as described below, power management. The ACPI driver  is responsible for initiating and maintaining the ACPI system , such as by populating an ACPI namespace  (represented in FIG.  and described below) at system startup, loading and unloading description blocks from the ACPI namespace , handling certain generic events triggered by ACPI-compliant hardware, and handing off other events to modules registered to handle those events.","The ACPI driver  makes use of several components when performing the functions of the ACPI system . One component is the ACPI BIOS , which refers to the portion of system firmware that is compatible with the ACPI specification. Generally stated, the ACPI BIOS  is part of the code that boots the machine (similar to the BIOS present in most conventional computer systems) and implements interfaces for power and configuration operations, such as sleep, wake, and some restart operations. The ACPI BIOS  contains definition blocks used to construct ACPI Tables , as is described in greater detail below. Note that although the BIOS  and the ACPI BIOS  are illustrated as separate components in , they may be (and typically are) implemented as one component in the computer system .","The ACPI Tables , generally known as Differentiated Definition Blocks (DDBs), are composed of as few as one, but may have more than one, definition block that contains data and\/or control methods. The definition blocks are written in an interpreted language called ACPI Machine Language (AML), the interpretation of which is performed by an AML interpreter  within the ACPI driver . Generally, each set of data and\/or control methods defines and provides access to a respective hardware device. The tables include header data structures that contain information about what the block contains, for example, whether it is a Differentiated System Description Table (DSDT) or a Secondary System Descriptor Table (SSDT). Each table (SSDT or DSDT) contains only one Definition Block. One such definition block, known as a Differentiated System Description Table (DSDT) describes the base computer system, that is, the DSDT contains a Differentiated Definition Block (DDB), which describes the root system. Often, the DSDT includes a root (or legacy) GPE block device and may include others. Alternatively, although not preferred, all or some GPE blocks may be included in SSDTs. Other definition blocks may be provided to describe additional ACPI devices, such as additional GPE block devices.","As mentioned, the definition blocks may contain control methods. A \u201ccontrol method\u201d is a software module that defines how the ACPI system  performs a hardware-related task. For example, the ACPI system  may invoke a control method to read the temperature of a thermal zone, change the device power state of a modem, and so forth. Control methods are written in AML, are stored in the definition blocks within the ACPI BIOS , and are loaded into the ACPI namespace  (FIG. ), typically at system boot up. Once in the ACPI namespace , the control methods may be invoked by other components in the ACPI system , such as device drivers or the like, and are then interpreted and executed by a virtual machine in the ACPI driver .","In accordance with this implementation of the invention, the ACPI tables  include AML code to construct GPE block devices when inserted into the ACPI namespace , a root or legacy GPE block device and one or more additional GPE block devices. State information about the GPE blocks is stored in some data structure or memory location, for example in a device extension associated with the GPE block or even in the context field of a callback function. Where the state information is stored is a design consideration and may be implemented in any functional way.","As any additional GPE block devices that are described in the ACPI tables  are loaded in the ACPI namespace , they may be added to a global list identifying the GPE block devices. The following is one sample of ASL code that may be included in the ACPI tables and used to create an additional GPE block device:",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ ASL example of a non-root GPE block"},{"entry":"Device(\\_SB.PCI0.ISA0.GPE1) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name(_HID,\u201cACPI0006\u201d)"]},{"entry":[{},"Name(_UID,2)"]},{"entry":[{},"Name(_CRS,Buffer( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IO(Decode16, FC00, FC00, 1, 2,) \/\/ Status register at FC00-FC01"]},{"entry":[{},"IO(Decode16, FC02, FC02, 1, 2,) \/\/ Enable register at FC02-FC03"]},{"entry":[{},"IRQ( Level, ActiveHigh, Shared,) { 5 }"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Method(_L12) { ... }"]},{"entry":[{},"Method(_E13) { ... }"]},{"entry":[{},"Method(_PRS) { ... }"]},{"entry":[{},"Method(_SRS) { ... }"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Shown in  is one illustrative ACPI namespace , containing a namespace root, several illustrative branches under the root, and several other objects of various types. For example, under the root is a system bus tree \\_SB. The \\_SB namespace includes namespace objects that define ACPI-compliant components attached to the system bus. One example of such a namespace object is the PCI bus namespace object . Each namespace object may have other objects as children thereof, such as data objects, control methods, or other namespace objects (e.g., ISA device object). The objects having a _PVR child are those with wakeup capabilities, and the pin number in the ACPI register to which they are wired is specified therein, along with wakeup information, e.g., the \u201cdeepest\u201d system state from which the device can wake the computer.","Several control methods may be loaded in the ACPI namespace in connection with various objects, including the methods run on detection of wakeup events in the \\_GPE namespace. For example, as shown in , a notify control method will execute on a network card (NIC) event wired to pin  of the hardware register . The \\_GPE namespace includes additional control methods to handle other general purpose events (including wakeup events) triggered by ACPI-aware components in the ACPI system . Any control methods associated with the pins of the underlying GPE register exist as children of the GPE block device, not within the \\_GPE namespace (as had previously been done). For GPE events, the ACPI driver  executes the control method of the name \\_GPE._Exx and \\_GPE._Lxx, where, as used herein, \u2018E\u2019 indicates an edge-triggered event, \u2018L\u2019 indicates a level-triggered event, and xx represents a hex value format of the event that needs to be handled.","In accordance with this particular implementation of the present invention, the hardware register (GPE block)  defined in the ACPI Specification Version 1.0 is continued, and, in addition, support for multiple hardware registers is also supported. Thus, a machine vendor can add additional GPE hardware registers (e.g., more than a single GPE block) to a system and then expose those additional GPE registers to the operating system by adding them as GPE block devices to the ACPI namespace . When more than one GPE block is included in a computing machine, one may be identified as the traditional or legacy GPE block that is expected in accordance with the ACPI Specification Version 1.0. In this way, the operating system can identify which GPE block, if any, is required to boot the computer. That is, by keeping the ACPI Specification Version 1.0 method of describing a GPE block, the operating system guarantees that one GPE Block will always be active. This could be important in getting a system to boot. For example, the ACPI embedded controller requires a GPE block device to be loaded to execute properly, and in turn, the ACPI driver requires access to the embedded controller to properly determine the configuration of the machine.","The legacy GPE block is illustrated in  as device GPE. Additional GPE blocks may either be included as additional tables within the DSDT or added to the ACPI namespace  through tables within an SSDT that describes the additional GPE blocks. By following a description convention, such as the convention described herein, the ACPI tables  can be used to define one or more new devices within the ACPI namespace, such as device GPE (FIG. ). The following description is but one example of a description convention that may be used to add GPE blocks to the ACPI namespace  and others will become apparent to those skilled in the art upon reading the teachings of the invention.","As mentioned above, ACPI tables  are added to define new GPE block devices having the following characteristics. First, a table associated with a device having a hardware ID that indicates the device is a GPE block is created. Typically, a table may use the _HID object to define the devices hardware ID. As is known to those skilled in the art, the _HID object is used to supply the operating system with the device's Plug and Play Hardware ID. When describing a platform, use of any _HID objects is optional. However, a _HID object must be used to describe any device that will be enumerated by the ACPI driver . The ACPI driver  only enumerates a device when no bus enumerator can detect the device ID. For example, devices on an ISA bus are enumerated by the ACPI driver. In one embodiment, the hardware ID \u201cACPI0006\u201d may be used to indicate a new GPE block.","Next, the GPE block device (as defined in the ACPI tables ) should include a _CRS object to describe which resources are used to access the GPE block, except that a single GPE block device (e.g., GPE) omits the _CRS object to identify itself as the legacy GPE block device. To represent the GPE block associated with the FADT, a GPE block device only includes the ACPI0006 device in the tree, without any _CRS, _PRS, _SRS, or other GPE-specific methods. Any GPE block device that does not represent the legacy GPE block device contains the _Lxx, _Exx, _CRS, _PRS, or _SRS methods required for that block. To uniquely identify which GPE device is the legacy GPE block device, the operating system picks the first GPE block device having a hardware ID of ACPI0006 and without a _CRS.","The _CRS object evaluates to a byte stream that describes the system resources currently allocated to the GPE block device . The resource data is provided as a series of data structures, with each of the resource data structures having a unique tag or identifier. The resource descriptor data structures specify the standard PC system resources, such as memory address ranges, I\/O ports, interrupts, and DMA channels.","A device having the above description may be used to specify a GPE block to handle hardware-surfaced events. For instance, optional methods can be added under the GPE block device  to handle different hardware-surfaced events. In the described example, the method _L may be used to handle a level-triggered event generated by the keyboard. Similarly, the method _E may be used to handle an edge-triggered event surfaced by the mouse. Any number or combination of methods may be used in accordance with the teachings of the present invention.","Also, optionally, a _PRS object may be used to specify the GPE block device's  possible resource settings, and a _SRS control method to set the device's settings to those possible resource settings. In this way, the GPE block device  may be programmed to resource settings other than the original resource settings.","The GPE block devices described in the context of the present invention each have their own unique address space, unlike the GPE hardware registers described in the ACPI 1.0 Specification. Thus, in accordance with the invention, if Pin XX is used by one GPE block, that Pin XX could also be used by another GPE Block in the system (including those as defined in the ACPI 1.0 Specification).","The benefits realized by the present invention are many. For example, the present invention allows multiple GPE Blocks to be present within a computer, which has, before now, not been possible. In addition, the present invention allows GPE block devices to use Memory Mapped accesses, which were not supported in the ACPI 1.0 Specification. Since I\/O address space is more limited then the Memory Address space, particularly in large machines, this makes it easier to design such a system. In addition, more standard interrupt mechanisms may be used to surface signals generated by hardware components because the present invention eliminates the need for complex wiring to represent multiple GPE blocks as a single hardware device to the ACPI system. And moreover, the present invention allows the GPE block device to be relocatable in memory. This gives the operating system the flexibility of placing the GPE Block Device at some address that maximizes system resource availability.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 5","b":["92","93"]},"At block , the ACPI system loads the ACPI tables that include differentiated definition blocks defining the several ACPI-compliant components of the computing system. Loading those ACPI tables causes the ACPI driver to begin the enumeration of the devices in the ACPI Namespace. At block , the ACPI driver begins to build ACPI device extensions for the ACPI namespace objects that were enumerated at block .","At decision block , a determination is made whether a current ACPI device is a GPE block device. If not, the process returns to block  until a device extension indicating a GPE block device is encountered. At that point, the process proceeds to decision block , where a determination is made whether the GPE block device contains a \u201c_CRS\u201d object. The absence of that object indicates that the GPE block is the root GPE block, and, therefore, at block , the device extension created for that device is replaced with the one pointed to by the RootGPEExtension. The replaced device extension can safely be destroyed. Finally, at block , the device extension for the current GPE block device is added to the GPE List. The process then terminates.","The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
