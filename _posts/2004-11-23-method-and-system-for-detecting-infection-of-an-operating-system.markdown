---
title: Method and system for detecting infection of an operating system
abstract: A method and system for detecting that a software system has been infected by software that attempts to hide properties related to the software system is provided. A detection system identifies that a suspect operating system has been infected by malware by comparing properties related to the suspect operating system as reported by the suspect operating system to properties as reported by another operating system that is assumed to be clean. The detection system compares the reported properties to the actual properties to identify any significant differences. A significant difference, such as the presence of an actual file not reported by the suspect operating system, may indicate that the suspect storage device is infected.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07627898&OS=07627898&RS=07627898
owner: Microsoft Corporation
number: 07627898
owner_city: Redmond
owner_country: US
publication_date: 20041123
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION(S)","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/590,478, entitled \u201cMETHOD AND SYSTEM FOR DETECTING INFECTION OF AN OPERATING SYSTEM,\u201d filed Jul. 23, 2004, which application is incorporated by reference herein in its entirety.","The described technology relates generally to detecting that an operating system has been modified.","Although the Internet has had great successes in facilitating communications between computer systems and enabling electronic commerce, the computer systems connected to the Internet have been under almost constant attack by hackers seeking to disrupt their operation. Many of the attacks seek to exploit vulnerabilities of the application programs, operating systems, and other computer programs executing on those computer systems. One of the most destructive methods of attacking a computer system has been to modify portions of the operating system that is stored on a boot storage device with software that may perform many of the same functions of the operating system, but also includes malicious functions. These modifications can be either to replace portions of the operating system or to add new programs that are automatically started by the operating system. Such software is referred to as \u201cmalware\u201d because of its malicious nature. Once malware is installed on a boot storage device, the operating system is \u201cinfected\u201d and the malware can control all aspects of the computer system. Such malware includes RootKits, Trojans, keystroke loggers, and so on. For example, the malware could intercept keystrokes that a user enters (e.g., a password) and report them to another computer system. As another example, the malware could be a worm that launches a self-propagating attack that exploits a vulnerability of a computer system by taking control and using that computer system to find other computer systems with the same vulnerability and launch attacks (i.e., sending the same worm) against them.","To prevent detection, malware often uses advanced stealth techniques to make executable files or data files (e.g., recorded keystroke files) \u201cinvisible.\u201d Once malware is started, it may intercept all file queries at a very low level (e.g., kernel mode) and use filtering to ensure that a chosen subset of files is never revealed to any file query operations by any program running on the infected computer system. For example, a keystroke logger may intercept all requests from programs for file listings and delete the name of its log file from the list that is returned to the programs. The keystroke logger may even intercept requests for available disk space and add the size of the log file to the available disk space to make it difficult to detect the presence of the log file. These stealth techniques can defeat both experienced system administrators who use common operating system utilities, such as WINDOWS Explorer, a directory list command, a registry editor, a task manger, and so on, to search the file system and configuration files (e.g., registry files) for suspicious entries, and commonly used malware scanning tools that are based on known malware file signatures.","Many different techniques have been used to help detect the presence of such malware; unfortunately, detection of some malware has proved to be difficult. One technique attempts to identify the presence of malware by the presence of an open port. Malware may install a backdoor so that the computer system can be accessed at a later time. The backdoor opens a port through which another computer system can gain access to the infected computer system. The technique can initiate a port scan from another computer system to detect the presence of an open port. If, however, the malware only opens a port at designated times, then the scanning may not detect the open port. Another technique may compare the files of the infected operating system with files of a non-infected or \u201cclean\u201d operating system. In particular, the technique may generated hash codes for the files of the infected operating system and compare them to hash codes of the clean operating system. However, since the malware may have total control over the computer system, it can provide the clean version, rather than the infected version, of a file to a program that is calculating the hash codes.","Because of the difficulty in detecting malware, some computer users have resorted to reinstalling an operating system onto a storage device that might be infected from a storage device that contains a copy of the operating system that is known (or thought) to be clean. Such reinstalling of an operating system is time-consuming. Moreover, such reinstalling is unnecessary if the operating system was not actually infected\u2014although the user could not be sure that it was not infected.","It would be desirable to have a technique that would detect the presence or possible presence of malware stored on a storage device.","A method and system for detecting that an operating system is not correctly reporting file properties is provided. The detection system requests that a suspect operating system loaded from a suspect storage device (e.g., suspected of being infected) during a boot up of a computer system provide a report of file properties of the files on the suspect storage device. The detection system also requests that a clean operating system loaded from a clean storage device during another boot up of the computer system provide the actual file properties of the files on the suspect storage device. The detection system then compares the reported file properties to the actual file properties. If the detection system detects a significant difference between the reported and actual file properties, then the suspect storage device may be infected with malware.","A method and system for detecting that a software system has been infected by malware that attempts to hide properties of a file is provided. In one embodiment, a detection system identifies that a suspect operating system has been infected by malware by comparing reported file properties of a suspect storage device (e.g., one that contains the suspect operating system) as reported by the suspect operating system to actual file properties of the suspect storage device as determined by another operating system that is assumed to be clean. The detection system initially boots a computer system from a suspect storage device that contains the suspect operating system. A suspect storage device is one in which the suspect operating system may report file properties that are different from the actual file properties in an attempt to hide malware. A suspect storage device may be the boot storage device of the operating system or some other storage device. \u201cBooting\u201d is the process of loading an operating system from a storage device into memory of the computer system at initial program load time. The detection system requests the suspect operating system to provide a report of file properties of the files stored on the suspect storage device. The file properties may include file name, file size, date created, date last modified, file checksum, and so on. The detection system may store the reported file properties on the suspect storage device or another storage device. The detection system then boots the computer system from a clean storage device that contains a clean operating system. The detection system requests the clean operating system to provide the actual file properties of the files stored on the suspect storage device. The detection system compares the reported file properties to the actual file properties to identify any significant differences. A significant difference, such as the presence of an actual file not reported by the suspect operating system, may indicate that the suspect storage device is infected with malware. If the malware of the infected operating system attempts to hide its presence by filtering the reported file properties, then the comparison between the reported file properties and the actual file properties will reveal the attempt. If, however, the malware does not attempt to hide its presence when reporting the file properties, then the comparison will not reveal any significant differences. In such a case, the detection system could then check the actual file properties (or reported file properties since there are no significant differences) for known malware signatures. Since the malware did not attempt to hide its presence, the checking for signatures will reveal the presence of a malware whose signature is known. In this way, the presence of malware can be detected even though the malware may attempt to conceal its presence.","In one embodiment, the detection system may attempt to identify whether a suspect operating system has been infected by malware by comparing reported file properties generated by a high-level scan and a low-level scan using the suspect operating system. A high-level scan collects file properties using high-level functions of the suspect operating system such as an application programming interface (\u201cAPI\u201d) to the system registry or a directory list command provided by the suspect operating system. A low-level scan collects file properties using low-level functions of the suspect operating system such as a read disk sector command. For example, by comparing the file properties reported by a directory list command to those identified by using the read disk sector command to traverse the directory structure, the detection system can identify malware that modified the behavior of high-level commands, but does not modify the behavior of low-level commands.","As another example, malware may use the Auto-Start Extensibility Points (\u201cASEPs\u201d) of the system registry to start execution. Such malware may then hide its presence by intercepting calls to the registry APIs and not reporting its ASEP entry. The detection system can detect such attempts to hide malware by comparing the information returned by the registry APIs to information derived by a low-level parsing of the system registry (e.g., by using the read disk sector command or by directly parsing the files of the system registry using the file system APIs). Although comparison of high-level scans to low-level scans may not be as effective at detecting malware as the comparison when a clean operating system is booted, such comparison, because it does not require rebooting, can be performed frequently and may identify most malware.","In one embodiment, the detection system can use the attempt of malware to hide its presence to counteract the malware. For example, the detection system can remove ASEP entries that are hidden by exporting a parent key of the hidden ASEP entry, deleting the parent key from the system registry, and then importing the exported parent key. Because the export function relies on the registry APIs, the export function will not export the hidden entries and thus the hidden entries will not be recreated by the import function. Such exporting based on malware-provided information followed by deleting and importing may be effective in many situations to counteract the malware. In certain situations, the deleting may not be effective at removing all resources (e.g., registry entries and files). If so, a lower level delete technique may be used. However, certain malware may intercept at the lower level and hide the resources from the deletion.","In one embodiment, the detection system detects the presence of a data logger by inputting data to the computer system after file properties of a suspect storage device have been reported by a suspect operating system. For example, a user may input keystrokes that are collected by a keystroke logger and then stored within a log file on the suspect storage device. If a keystroke logger is present, then the file properties of the log file will be changed as a result of the entry of the keystrokes. For example, the log file may be increased in size, or its checksum may be changed. When the computer system is then booted using the clean storage device, the comparison of the actual file properties to the reported file properties may reveal a difference resulting from the logging of the keystroke information by the keystroke logger. This difference indicates that the suspect storage device is infected with a keystroke logger. Thus, the presence of a keystroke logger can be detected even when the suspect operating system correctly reports the presence of the log file. Another example of a data logger is a screen-capture spy program, which may store each screen capture as a new file. Thus, the detection system can analyze the reported and actual file properties to determine whether any unreported files may indicate the presence of a screen-capture spy program.","In one embodiment, the detection system executing on a computer system booted from a clean storage device may boot a virtual machine using the suspect storage device. A virtual machine provides an environment to the suspect operating system that looks to the suspect operating system as if it is in control of the entire computer system, when it is not. The suspect operating system may be unable to ascertain whether it is executing within a virtual machine or within a real machine. The detection system, such as a program executing within the virtual machine, requests the suspect operating system to report the file properties, which the program can store on the suspect storage device or some other storage device. The detection system executing on the real machine under the control of the clean operating system can collect the actual file properties of the files of the suspect storage device. The detection system can then compare the reported file properties to the actual file properties to determine whether the suspect operating system has attempted to hide file properties. By using a virtual machine, the detection system can identify whether a suspect operating system has been infected without requiring the computer system to be booted using the suspect storage device\u2014only the virtual machine need be booted using the suspect storage device.","In one embodiment, the detection system attempts to identify visible malware by comparing reported file properties to previously collected actual file properties to determine whether a suspect storage device has been infected since the last reporting with malware that does not attempt to hide its presence. The detection system may initially compare reported file properties to currently collected actual file properties. If the comparison indicates no significant differences, then the detection system may compare the reported file properties to previously collected actual file properties. The previously collected actual file properties may be stored on a write-once device so that malware cannot change the stored file properties. If a significant difference exists, then the suspect storage device may have been infected by visible malware since the previously collected actual file properties were collected. Since many of the differences may not be a result of malware, the detection system may check the differences for the signatures of known malware or request a user to examine the differences. To speed the process of comparing the file properties, the detection system may focus its comparison on files or configuration information related to auto-start programs that are automatically started at boot time.","In one embodiment, the detection system may request a user to boot a computer system from a clean storage device known to contain a clean operating system that is not the primary boot storage device of the computer system. Once booted, the detection system can request the clean operating system to provide the actual file properties. The booting of the computer system from the clean storage device can be performed either before or after the file properties are reported by the suspect operating system. The clean storage device may be a read-only device such as a CD-ROM that contains the clean operating system. The suspect storage device may be a hard disk that contains the suspect operating system. The suspect storage device may be the primary boot storage device for the computer system. At startup, the computer system under control of the boot program, such as BIOS, may provide the user the opportunity to select an alternate boot storage device. In such case, the user can select to boot the computer system from the clean storage device that includes the clean operating system. Alternatively, the clean storage device could be a read-only device (e.g., ROM) that is installed on the computer system. Because the clean storage device is read-only, an infected operating system would be unable to modify the clean operating system stored on the clean storage device. The clean operating system need only have the capabilities necessary to collect the actual file properties of the suspect storage device. In particular, the clean operating system does not need to be a clean version of the suspect operating system and does not need to provide all the functionality of a typical operating system. The functionality required to collect the actual file properties may even be included in BIOS itself. The comparison of the actual file properties to the reported file properties could be performed by another computer system and\/or under control of another operating system.","In one embodiment, the detection system may be installed on a removable device, such as a CD-ROM, that has an automatic execution capability and that is a boot device with a clean operating system. When the removable device is connected to a computer system under control of the suspect operating system, a program of the detection system on the removable device is automatically executed and collects and stores the reported file properties. After storing the reported file properties, the detection system can then request the user to boot the computer system from the removable device. When the computer system is rebooted, the clean operating system takes control of the computer system, and the detection system, which can be automatically started, can then collect the actual file properties and compare them to the reported file properties. The detection system may also request the user to input keystrokes after the reported file properties are collected so that the detection system can identify changes in file properties that may be a result of a keystroke logger. The detection system may also request the user to abnormally terminate execution of the suspect operating system (e.g., by pressing a reset button on the computer system or interrupting power to the computer system), rather than a normal termination (e.g., by requesting the suspect operating system to shut down). Abnormal termination may be desired because normal termination may result in writing additional data to the suspect storage device, which would result in more differences between the reported file properties and the actual file properties that are unrelated to determining whether the suspect storage device is infected.","In one embodiment, the detection system may interact with a user to help make it difficult for malware to detect the presence of the detection system. A user may use a real-time detection system generation tool executing with a clean operating system to generate a new version of the detection system whose behavior or binary signature is in some way obfuscated. For example, the generation tool may prompt the user to create and provide a new name for the file in which the reported file properties are to be stored or may randomly generate a new name and provide it to the user. The user would then be prompted to enter the name for the file containing the reported file properties so that the file with that name can be compared to the file containing the actual file properties. As another example, the generation tool may prompt the user for or generate a random number that is used to control the order in which files are scanned. The random number may be a seed number that is used to generate a sequence of random numbers. The generation tool would generate the detection system to scan the directory structure through a suspect operating system in an order defined by the sequence of random numbers, rather than in an alphabetical order defined by a standard directory list command. The scanning in a non-standard order and use of random file names may make it more difficult for malware to detect the presence of the detection system and thus more difficult to take countermeasures to prevent its detection.","In one embodiment, the detection system can detect when malware selectively tries to hide a file from certain processes. To detect the selective hiding, the detection system may inject code into each process by creating a remote thread that loads a dynamic link library containing the code or causing the dynamic link library to be loaded into most of the processes through existing mechanisms such as hooking the Appinit_DLLs registry entry. The injected code requests file properties from the operating system and logs the reported file properties on a per-process basis. When the remote thread is part of a process from which the malware is hiding, the reported file properties will be filtered by the malware for such threads. The detection system can then detect the process-specific hiding after booting from the clean operating system by comparing the file properties reported by the code executing in the different processes. In addition, if the file hiding is targeted at certain processes, the comparison of the reported file properties for each process may detect the hiding.","The detection system may be used to detect the hiding by malware of resources other than file properties. The detection system may be used to check for the presence of malware (e.g., as evidenced by running processes or loaded drivers) by analyzing volatile data structures (e.g., stored only in main memory) used by a suspect operating system. The detection system executing under the suspect operating system can request the suspect operating system using APIs to provide a list of resources such as running processes and loaded modules or drivers. The malware may hide certain resources by intercepting that API. The detection system executing under a clean operating system (e.g., on a different computer system) may copy to a file without interception by the suspect operating system the relevant memory space containing the data structures. The detection system executing under the clean operating system can then parse the memory space to identify the list of resources. For example, the detection system may parse the thread control block data structures to identify the running process. The detection system executing under the clean operating system then compares the list of resources provided by the suspect operating system to a list identified from the copied memory space to determine whether any of the resources were hidden by malware infecting the suspect operating system. The relevant memory space without interception by the suspect operating system can be copied to a file by causing an abnormal termination of the execution of the suspect operating system (e.g., a blue screen or hibernation of the computer system) that results in a dump of memory to a file. The relevant memory space can also be copied using direct memory access (\u201cDMA\u201d) techniques without the knowledge of the suspect operating system. DMA copying to a file may be performed by a DMA card that is plugged into the computer system and connected to another computer system or storage device. Such DMA cards are described in Bohra, A., Neamtiu, I., Gallard, P., Sultan, F., and Iftode, L., \u201cRemote Repair of Operating System State Using Backdoors,\u201d Proc. Int. Conf. on Autonomic Computing (ICAC), pp. 256-263, May 2004; and Petroni, N., Fraser, T., Molina, J., and Arbaugh, W., \u201cCopilot\u2014a Coprocessor-based Kernel Runtime Integrity Monitor,\u201d Proc. Usenix Security Symposium, August 2004.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","101","102","103","104","105","106"]},"The computing device on which the detection system is implemented may include a central processing unit, memory, input devices (e.g., keyboard and pointing devices), output devices (e.g., display devices), and storage devices (e.g., disk drives). The memory and storage devices are computer-readable media that may contain instructions that implement the detection system. In addition, the data structures and message structures may be stored or transmitted via a data transmission medium, such as a signal on a communications link. Various communications links may be used, such as the Internet, a local area network, a wide area network, or a point-to-point dial-up connection.","The detection system may be implemented in various operating environments that include personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The detection system may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, and so on that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["201","202","203","204","205","206","207"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["301","302","303","304","305","306","307","308","309"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4","b":["401","402","403","404","405","406","407"]},"One skilled in the art will appreciate that although specific embodiments of the detection system have been described herein for purposes of illustration, various modifications may be made without deviating from the spirit and scope of the invention. Since system configuration information is stored in files (e.g., registry files), the detection system can be used to detect attempts by malware to hide configuration information. Because the registry information can be rather extensive, the detection system may focus its comparison on important registry entries, such as automatic startup entries that identify code that is automatically started whenever the computer system is booted. In addition, a file of a suspect storage device may contain multiple streams. The detection system may treat each stream as a separate file when performing the comparison of file properties. In one embodiment, a clean operating system may be stored on a server, in which case the clean storage device would be considered part of the server. Whenever a computer system is started, it may check to see whether it should boot from the server so that the detection system can check for an infection. Accordingly, the invention is not limited except by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
