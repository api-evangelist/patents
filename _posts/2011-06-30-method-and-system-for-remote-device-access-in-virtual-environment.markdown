---
title: Method and system for remote device access in virtual environment
abstract: A method, system and computer program product for accessing remote devices is provided. The proposed method allows users to remotely access devices or tools controlled by a Virtual Environment (VE) implemented on a remote server. A user of a client machine or a mobile communications device can access a remote device controlled by a server or by local client of the server. The server can have a number of VEs implemented on it. Each of the VE can run a Guest OS that has guest device drivers installed on it. The VE receives the user request and passes on user commands to a device controlled by the guest device driver installed on the Guest OS of the VE.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08805947&OS=08805947&RS=08805947
owner: Parallels IP Holdings GmbH
number: 08805947
owner_city: Schaffhausen
owner_country: CH
publication_date: 20110630
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is a continuation in part of U.S. patent application Ser. No. 12\/393,000, filed on Feb. 25, 2009, entitled METHOD AND SYSTEM FOR REMOTE DEVICE ACCESS IN VIRTUAL ENVIRONMENT, which is a non-provisional of U.S. Provisional Patent Application No. 61\/031,932 filed on 27 Feb. 2008, entitled METHOD AND SYSTEM FOR REMOTE DEVICE ACCESS, which are incorporated by reference herein in their entirety.","1. Field of the Invention","The present invention relates generally to Virtual Machine (VM) technology and, more particularly, to a method and system for accessing remote devices using a VM.","2. Background Art","In the past decade, capabilities of computer systems have increased significantly. Computer systems process large volumes of data, which is changed or updated constantly. Even well-known and widely distributed applications are upgraded very often, so consumers have to download new software remotely.","One conventional approach that allows users to have access to files and applications residing on a remote system is so-called \u201cdumb terminal\u201d that is connected to a large central computer or a computer cluster. The applications are only installed on the central computer, and users run the applications remotely. The user can control the application through a GUI of the local display, while no application executable code is loaded onto the user's computer. The \u201cdumb terminal\u201d approach has two major shortcomings. One is security, since the user has to pass data to the central computer system. Another one is that a user is limited to applications installed on the central computer system.","Another way for a user to remotely access software and data is to download the entire desired application from a provider, which generally involves loading files from a physical storage medium such as a CD ROM. This approach is inconvenient for users who only need to use a particular feature of the application, or only need it for a short time. Another disadvantage of this approach is that the downloaded applications occupy large amounts of memory available on the user's system. Downloading of applications also presents a problem of unauthorized copying.","The problem of accessing and running, by a user, a potentially arbitrarily large number of applications (i.e., executable files) remotely is addressed in the U.S. Pat. No. 6,735,601. The system disclosed in this patent allows a user to retain local control of the execution of the applications installed or stored remotely. The proposed system is intended for situations when a user chooses not to load the application onto his computer. No scaling down or other modifications of the software applications are required. The proposed system, however, does not allow users to access devices controlled by the remote server or by a local client of the remote server.","The industry trend of virtualization and isolation of computer system resources makes the task of remote access, and in particularly remote device access, more complex. A Virtual Machine (VM) is a type of an isolated Virtual Execution Environment that runs on the same physical machine simultaneously. Each VM instance executes its own OS kernel. Support of Virtual Machines is implemented using a Virtual Machine Monitor and\/or a Hypervisor.","Virtualization allows running a number of VMs on the same physical machine or server. Each VM can have a Guest Operating System (GOS) implemented on it. A GOS can support a number of Guest tools and devices. A remote access to these tools and devices by a user of a remote computer system is critical. None of the conventional remote access systems provide an efficient mechanism for remote access to devices in a Virtual Execution Environment.","Accordingly, there is a need for a system and a method for accessing remote devices using a Virtual Execution Environment.","The present invention is directed to method, system and computer program product for accessing remote devices. The proposed method allows users to remotely access devices or tools controlled by a Virtual Execution Environment (VEE), such as a VM, implemented on a remote server. The process executed on remote server may be based on Parallels\u2122 virtualization techniques, e.g. on Parallels Desktop, Parallels Workstation, Parallels Server and Parallels Virtuozzo Containers, although the invention is not limited to any particular virtualization technology. These are examples of virtualized servers used for implementing the proposed method.","According to the proposed method, a user of a client machine (i.e., a desktop or a laptop) can access a remote device controlled by a server or a local client of the server. The server can have a number of Virtual Machines (VMs) implemented on it. Each of the VMs can run a Guest OS that has Guest device drivers installed on it. In one embodiment, a special Dispatcher module called Parallels Server runs on the physical server. The Parallels Server receives remote access requests from a user of a client machine and dispatches these requests to the VMs that run on the physical server. The VM receives the user request and passes on user commands to a device controlled by the guest device driver. In an exemplary embodiment, a user can remotely access some third party Guest Tools controlled by a Guest API Library of a GOS.","Therefore, a user of a client machine can, advantageously, access and control devices that are not physically connected to the client machine. A number of remote users can benefit from using the same device without having to install drivers for these devices on the client machines.","Additional features and advantages of the invention will be set forth in the description that follows, and in part will be apparent from the description, or may be learned by practice of the invention. The advantages of the invention will be realized and attained by the structure particularly pointed out in the written description and claims hereof as well as the appended drawings.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of the invention as claimed.","Reference will now be made in detail to the embodiments of the present invention, examples of which are illustrated in the accompanying drawings.","The present invention is directed to a method, system and computer program product for accessing remote devices using Virtual Environment. The proposed method allows users to remotely access devices or tools controlled by a VM implemented on a remote server.","A VM is implemented on a server connected to a number of client computers. The client computers have external devices such as CD ROMs, DVD players, high definition video cards, USB flash cards, USB smart cards, sound\/video cards, external hard drives, DMA (direct memory access) devices, VT-C, VT-d and VT-x processors, etc. Note that most servers do not have sound capability (since there is no point in having sound on a server), but a VM launched on the server can access a sound card on a local machine, as well as other peripherals on the same or different machine. A special secure communication channel (e.g., IP SEC protocol) is established between the VM and the client computers. The VM accesses the remote devices attached to the remote clients. Note that each client can have a combination of the above listed devices attached to it. According to an exemplary embodiment, the server-based VM can access any number of the remote devices of a single remote client or of a plurality of clients. In effect, it is possible to assemble a virtual (distributed) computer with peripherals that are physically located on several different computers, and which are controlled through VM technology running on a server from a client-side through server-based secure communications protocol. Other devices can include video changers, video-on-demand players, CPUs, math coprocessors, vector processors, disk drives, etc.","Data exchange between the VM and the client devices can be optimized. For example some data can be compressed or pre-processed on the client site. Also, the device-related commands that are not needed by the VM are not sent over the communication channel. Thus, an intelligent secure communication channel is established between the VM and the remote client devices (optionally using encryption to connect some or all of the hardware to the VM).","According to the proposed system and method, a client-server infrastructure is provided. A user of a client machine (i.e., a desktop or a laptop) can access remote devices connected to a server or to local clients of the server. The server can have one or multiple Virtual Machines (VMs) running on it. Each of the VMs can run a Guest OS that has guest device drivers installed on it. In one embodiment, a special application called Parallels Server, available from Parallels Software International, Inc., runs on the physical server.","The Parallels Server receives internal (i.e., private) access requests from a user of a client machine and dispatches these requests to the VMs that run on the physical server. The VM receives the user request and passes on user commands to a device controlled by the guest device driver installed on the GOS of this VM. In one embodiment, a user can remotely access some third party guest tools controlled by a Guest API Library of a GOS.","According to the preferred embodiment, a user of a client machine can remotely (i.e., via a VM) access and control devices that are not physically connected to the client machine. A number of remote users can benefit from using the same device. Note that no device drivers need to be installed on the clients. Furthermore, each driver has to be installed only once on one of the VM's GOS.","The architecture of an exemplary client-server system is illustrated in . A client machine has a proprietary Parallels GUI console implemented on it. The GUI console provides the user with a capability of access to remote devices and tools. A user can control remote devices by sending the commands to these devices using the GUI console. The client machine provides Component Object Model (COM) API binding.","It also manages a CLR (Common Language Runtime) binding (see http:\/\/en.wikipedia.org\/wiki\/Common_Language_Runtime), exposing interfaces to a scripting interfaces. A web-based console of the client machine provides Simple Object Access Protocol (SOAP) API binding. Note that SOAP API binding is implemented using XML and is OS-independent. The client machine also includes a physical\/virtual device binding.","All of the binding implemented on the client machine use a client \u201cC\u201d Host API Library. According to the preferred embodiment, all client machines are based on a Host API \u201cC\u201d Library interface. The Host API \u201cC\u201d Library interface is a lowest level cross-platform interface, which allows the client machine(s) to interact with the VMs running on the physical server. As one embodiment, the Host API \u201cC\u201d Library interface is described, although other interfaces and programming languages supported by calling API functions may be used here (e.g., C++, Visual Basic, Pascal, assembly language, C#, etc.).","The Host API \u201cC\u201d Library cross-platform interface can interact with the VMs on the server in two different ways. In one embodiment, the Host API \u201cC\u201d Library cross-platform interface uses third-party host tools implemented on the client machine. Communication with the server's VMs is provided over one or several virtual networks. One of these virtual networks can utilize the Internet. In this embodiment the VM's are accessed directly using Host\/Guest PIPE API (see http:\/\/msdn2.microsoft.com\/en-us\/library\/aa365137(VS.85).aspx).","In one embodiment, this network API can be implemented as a duplex pipe for corresponding data transmission between the physical machine and the client machine. In the case of Named Pipe, any process of the physical machine or the client machine can read data from a pipe and write data to the pipe. However, the pipe may be opened only either for reading or for writing. Therefore, the process that initiated the pipe chooses either a read mode or a write mode, and the pipe will remain open in this mode until it is closed.","Each of the VMs has a GOS installed on it. Note that, although in this example only two VMs are shown, an arbitrary number of the VMs can be implemented on the physical server. Both of the VMs are configured according to their own configuration parameters. In one embodiment, there is a Guest API \u201cC\u201d Library (i.e., guest client API Library) implemented on the GOS of VM . The Guest API \u201cC\u201d Library interface controls third-party guest tools. Thus, the user of the client machine can pass commands for controlling the third-party guest tools through the Host API \u201cC\u201d interface via the Guest API \u201cC\u201d interface implemented on the GOS of the VM.","In another embodiment, VM N has a guest device driver installed on the GOS of the VM N. Note that multiple guest device drivers can be installed on the GOS of the VM N. These guest device drivers can also be controlled by the user of the client machine remotely with the Host API \u201cC\u201d interface that sends the commands to the guest device drivers through the Virtual Networks using Host\/Guest PIPEs API. Thus, the user of the client machine can access and control remote devices using the device drivers of the respective VMs running on the server.","In another embodiment, the Host API \u201cC\u201d Library interface of the client machine communicates with the Parallels Server installed on the same physical server where the VMs are implemented. The Parallels Server is configured in such a way that it can process and dispatch the private requests received from the Host API \u201cC\u201d interface of the client machine to the VMs.","The remote procedure call, or more generally, a remote function call, can utilize a host interface associated with managed languages, such as C, C++, C-Sharp, Java, other languages in the C-Sharp model, etc. Typically, software written in a managed language is compiled into byte code, and the byte code is then compiled into the object code. Such languages frequently have interfaces or APIs that permit other software, written in other languages, to use the APIs. The interface can be used with scripts, command lines, etc.","The configuration of the virtual machine, or virtual server, or virtual environment (VE), such as a Parallels Virtuozzo Container or Sun Container, can include both dynamic and static parameters. Static parameters can include such things as the number of CPUs, devices, total amount of memory, etc. Dynamic parameters can include the priority of the virtual machine, CPU or resources allocated to that virtual machine, etc. A configuration of the virtual machine can also include the operating system, virtual version of the operating system, a link to the location where the distributive of the virtual machine is stored, etc. In particular case, the VM or group of containers or VEs may be implemented as an environment for mobile application execution (e.g., Java midlets, Android application or the like). Specific settings, e.g., drivers settings may correspond to the type of the mobile device. As an example, sandboxes may contain driver specific for the mobile device.","Additionally, the RPC framework discussed above can be viewed in broader terms, and not just in the context of Microsoft RPC framework (for example, such as used in the COM\/DCOM framework) or by Sun Microsystems.","As yet another option, the virtual machine that runs on a server can interface to a mobile device, such as a smartphone or a tablet (iPod, Xoom, PlayBook, and similar types of devices). In this case, the peripheral devices may be attached to the Smartphone or tablet, or the peripheral device at issue may be part of the Smartphone or tablet itself\u2014such as a touch screen, keyboard\/virtual keyboard, memory, and so on. This is illustrated in . Note that two virtual machines (or, more generally, VEs) illustrate that multiple such VEs can run on the server, with similar VMs or containers corresponding to the similar corporate phones.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 6","FIG. 5","FIG. 6"],"b":"1"},"As an example, starting of the client's application (client machine) is performed by actions of the client on the mobile device, e.g., by clicking on a link in the menu. Then, a request is sent to the remote client machine, specifically, but not necessary installed on the same machine as a sandbox, the request is handled by the client machine (for example, using a Java midlet or the like), and the result is sent to the display or other output port of the mobile device.","Installation of the application is performed in the same way. The user, e.g., in a browser (local or remote) chooses an application. Application pack (*.jar+*.jad or other package) is loaded and installed to the remote server. Preferably, the mobile device should not use a WAN, since the remote server can connect to the mobile network and to the wide area network as well. Also, the package may be stored locally and may be transmitted during the installation process to the distant server.","The private requests can come from an IPC (i.e., a desktop computer used as a client machine) or from an RPC (i.e., another server, connected to the client machine and using its Host API \u201cC\u201d interface). In both cases the Parallels Server passes on the commands to the VMs. Thus, the Parallels Server is executed as a router that passes commands from the Host API \u201cC\u201d interface of the client machine to the VMs running on the server machine. More specifically, remote device data interchange may be provided between either remote computing systems or between virtual machines running on the same hardware.","In case of the VM , the Parallels Server sends the commands to the Guest API \u201cC\u201d Library implemented on GOS of the VM . The Guest API \u201cC\u201d Library interfaces with the third party Guest tools. In case of the VM N, the Parallels Server sends the commands to the guest device driver installed on the GOS of the VM N. In both cases, the user of the client machine gains remote access and controls devices and tools connected to the server via the VMs -N running on this server.","As discusses above, the remote user controls the devices by passing the commands from a client machine to a server. A detailed structure of communication protocols used in the preferred embodiment is illustrated in . The essential communication protocols illustrated in  are Command Flow, I\/O Flow, Event Loop and Execution Engine.","The commands are sent using the GUI at a remote desktop (i.e., client machine). The process prl_client_app.exe is executed on the client machine. The client machine is connected over the Internet to the Local Desktop that serves as a Dispatcher. The command flow is provided over the XML-based protocol (i.e., SOAP) over TCP connection. These commands are used to perform basic VM control operations. Most of these commands are implemented within the Source\/CommandFlow that goes through an external port.","In one embodiment, the Remote IO Flow is a data-based protocol over a UDP connection. This flow is used to transfer raw VM data (i.e., video, sound, regular data, etc.). The Remote IO Flow also goes to the external port. The local desktop (i.e., dispatcher) executes its own process prl_disp_service.exe.","Two scenarios of remote control of the devices by the client are possible. In one scenario, also illustrated in , the devices and tools are connected to the server where the VMs are implemented. In another scenario, illustrated in , the local clients have devices connected to them. These local clients have guest device drivers installed on the GOSs of the VMs implemented on the server.","The use of the remote client can control the devices connected to the local clients by sending the commands to the VM's implemented on the remote server. This novel approach allows the remote users to access any devices on the network provided that the guest device drivers are installed on the GOS of the VMs.","One of ordinary skill in the art will appreciate that, in the preferred embodiment, the remote access is implemented at the device level, and that a remote user controls tools and devices connected to the server while no device drivers need to be installed on the client machine.","In the first scenario, the Dispatcher passes the command flow directly to the VM on the server. Then VMController communicates with VM Monitor (VMM) and the commands are passed to the guest driver of the GOS.","In the second scenario, the command flow is re-directed to another local client, where a local client GUI is implemented and a separate process prl_client_app.exe is executed. The Local IO Flow is directed to the VM. The Local IO Flow is FIFO (first-in, first-out) data transmission protocol that may be used to transfer Raw VM Data (i.e., video, sound, regular data, commands etc. generated on an external data bus of a hardware device).","The Local IO Flow is then transmitted using the Named Pipe or similar inter-process communication technique (see http:\/\/en.wikipedia.org\/wiki\/Named_pipe). The dispatcher also directs the Command Flow and Local IO Flow from the local server to the VM. Thus, the user of the remote client can send the commands all the way through to the devices connected to the local client. The VM Controller includes host-side devices, GUI Refresh Loop, IO Services for the VM and the Virtual Machine interface.","The Event Loop transfers the data between VM Monitor and VM events handler. The VM monitor (VMM) and Hypervisor can also include devices controlled on the monitor side, VTX\/SVM supported features (AMD-V, see http:\/\/multicore.amd.com\/us-en\/AMD-Multi-Core\/Quad-Core-Advantage\/At-Work-AMDOpteron\/Virtualization.aspx, which is an AMD Virtualization\u2122 technology that is a hardware-based technology that enables servers to reach higher levels of efficiency and utilization by assisting virtualization software to run multiple operating systems and applications on a single physical AMD Opteron\u2122 processor-based server.).","Also, INTEL VT-X technology, see http:\/\/www.intel.com\/technology\/platform-technology\/virtualization for IA-32 processors provides hardware support that simplifies processor virtualization, enabling reductions in virtual machine monitor (VMM) software size and complexity. The Resulting VMMs can support a wider range of legacy and future operating systems (OSs) on the same physical platform while maintaining high performance. Other such features include exception handling module and code analysis module. The VMM handles exceptions and interrupts. It also prepares guest context and sends requests to the Host handlers in the VM. The VMM interfaces with a Guest OS by means of an Execution Engine.","The VM controller can perform read\/write operations with the shared buffers of a first type, such, as for example, VESA buffer. The VMM can perform read\/write operations with the shared buffers of a second type, such as, for example, VGA State buffer, Sound buffer and Network buffer. The shared buffers of the first type are used to prevent copying of large data blocks between VMM\/VMController and the clients.","The shared buffers of the second type are used to prevent copying of large blocks of data between the VMM and VMController. The Dispatcher and the local clients can only read data from the shared buffers. Note that, in one embodiment, the role of the Dispatcher can be performed by the Parallels Server. The communication protocols can be used with multiple remote clients as well as multiple local clients.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 3","FIG. 1"]},"A process prl_client_app.exe is executed using GUI interface. In another embodiment, a SOAP interface process prl_web_app.exe is executed and the remote devices can be controlled by a web service. In yet another embodiment, a Python interface process prl_python_app.exe is executed and the remote devices are controlled by a scripting layer. All of these interfaces can use interfaces provide by the lower level applications.","All of the above mentioned interfaces communicate with the API (DLL) module implemented as an object oriented (OO) functional interface. The communication between the interfaces is accomplished using public (i.e., external) protocols. The API (DLL) functional interface includes management interface, tools interface and device interface. The API (DLL) library exposes interfaces that enable any of the users of the GUI, SOAP or Python interfaces to implement any kind of a third party tools they want. Note that the API (DLL) library does not expose its interfaces to the users.","In one embodiment, the API (DLL) library can provide all the functionality for sending commands directly to the VM using internal (i.e. private) protocol. In another embodiment, addition functionality is needed. This functionality is provided by the Parallels Server (i.e., Dispatcher).","The prl_disp_service.exe is executed on a Dispatcher. Some information can be read from Hard Disk Drive (HDD) image and a process prl_image_explorer.exe is executed on the image explorer. These libraries expose all the functionality of a platform provided by the preferred embodiment. All of the communication protocols between these libraries and the API (DLL) libraries are private (i.e., internal). Note that all of the interfaces and the VMs are implemented on the host OS (i.e., in a separate address space).","The API (DLL) interface communicates with the VM using internal message-driven protocol as well. The separate process prl_disp_service.exe is executed on the VM. The same internal message-driven protocol is used between the VM and the VMM. The VMM using a Hypervisor can pass control commands to either a guest driver or a guest tool. In case of accessing a guest tool, the Host API (DLL) functionality is provided via OO\/Functional interface.","The process third_party_tool.exe is executed by the guest tool module. In case of accessing the guest device driver, the PCI Tools Gate API (a communication protocol between host virtual machine and guest operating system sandbox based on the PCI bus reads and writes. The PCI Tools Gate API is described here by way of example only, and is not intended to limit the present invention.) is provided. Note that the PCI Tools Gate API is available on new platforms. The PCI Tools Gate API includes video card, shared folders, sliding mouse, custom resolution, time synchronization and coherence functionality.","Those skilled in the art that the VM, in accordance with the exemplary embodiment, allows users to access any of the remote devices attached to remote computers. Data exchange between the users and remote devices is implemented over secure intelligent channel. As noted earlier, if the sender and receiver both know a priori that some commands normally used as part of the protocol of the channel are not needed, then those commands can be dropped on the sender side, or their order can be rearranged, to optimize performance, or they can be grouped differently than the original grouping of commands. Also, if the memory or disk area being accessed is known to be about to be overwritten, there may be no point in transmitting the data involved (even though the hardware device itself may be unaware of this), or if there is no time to process the data (e.g., a video frame).","With reference to , an exemplary system for implementing a client and a server according to the embodiments of the invention includes a general purpose computing device in the form of a computer or a server  or the like, including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM)  and random access memory (RAM) .","A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM . The computer\/server  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD-ROM, DVD-ROM or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the computer\/server .","Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media that can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system  (preferably Windows\u2122 2000). The computer  includes a file system  associated with or included within the operating system , such as the Windows NT\u2122 File System (NTFS), one or more application programs , other program modules  and program data .","A user may enter commands and information into the computer\/server  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  may operate in a networked environment using logical connections to one or more remote computers . The remote computer (or computers)  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer\/server , although only a memory storage device  has been illustrated. The logical connections include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, the computer\/server  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the computer\/server  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer\/server , or portions thereof, may be stored in the remote memory storage device.","It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Having thus described the different embodiments of a system and method, it should be apparent to those skilled in the art that certain advantages of the described method and system have been achieved. In particular, it should be appreciated by those skilled in the art that system and method described in the preferred embodiment, provide for remote access that is implemented at the device level over a Virtual Environment (such as a VM), and that a remote user controls tools and devices connected to the server (or the local clients of the server) and no devices drivers need to be installed on the client machine.","It should also be appreciated that various modifications, adaptations, and alternative embodiments thereof may be made within the scope and spirit of the present invention. The invention is further defined by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE ATTACHED FIGURES","p":["The accompanying drawings, which are included to provide a further understanding of the invention and are incorporated in and constitute a part of this specification, illustrate embodiments of the invention and together with the description serve to explain the principles of the invention. In the drawings:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
