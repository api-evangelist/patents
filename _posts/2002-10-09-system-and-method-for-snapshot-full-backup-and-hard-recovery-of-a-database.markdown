---
title: System and method for snapshot full backup and hard recovery of a database
abstract: The present invention provides a method for generating a backup of a database file that is suitable for a hard recovery operation. A snapshot of the database file is generated and the log and/or patch files associated with the database are stored in a backup location. Additionally, the header and/or footer information of the database is stored, thereby enabling a restored snapshot of the database to be converted into a file suitable for a hard recovery operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07707184&OS=07707184&RS=07707184
owner: NetApp, Inc.
number: 07707184
owner_city: Sunnyvale
owner_country: US
publication_date: 20021009
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT","A. Network Environment","B. Storage Operating System","C. Snapshots","D. Backup Creation","E. Hard Recovery"],"p":["The present invention relates to databases and, more particularly performing a hard recovery of a database.","Microsoft\u00ae Exchange is a messaging and collaboration software system that provides a variety of applications for group interaction using networked computer systems. Specifically, Microsoft Exchange (by Microsoft Corp. of Redmond, Wash.) provides support for a database server to support remotely connected clients over various networks. An Exchange server can run on a variety of operating systems including, for example, the Microsoft Windows NT\u00ae or Microsoft Windows\u00ae 2000 operating systems.","The Microsoft Exchange 2000 database server permits up to 20 databases to be utilized, divided into four storage groups of up to five databases each. In a typical configuration, Microsoft Exchange stores data associated with a given database in two files. In the particular example of Microsoft Exchange 2000, these two files are a properties data file (designated by an .edb file extension) and a streaming data file (designated by an .stm file extension). However, it is contemplated that other versions support different database structures. The default storage locations for these databases are on a disk locally connected to the computer on which the Exchange software is running.","In the exemplary Exchange 2000 server configuration, the .edb file is a conventional Exchange database file. The .stm file is a streaming data file that contains raw content that has been received via, for example, the Internet and is stored in its native format. Pointers are created by the Exchange server within the .edb file to point to various messages or data within the .stm file.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1","b":["105","110","115","120"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2","b":["200","205","210","220","215","220","215","205","225"]},"In known examples of Exchange servers, the Exchange software provides an application program interface (API) that is accessible by other programs executing on the server for performing backup and restore operations on the various databases. Other applications or processes executing on the server can access these APIs to perform various backup\/restore operations. These API's are targeted toward the use of a tape drive as a backup storage device. Such backup operations are normally performed while the Exchange server is operating. As tape drives typically have a slower read\/write time than disk drives, the backup of databases with a tape device can consume a significant amount of time. While the Exchange server continues to service requests during a backup operation, performance is degraded during the course of the backup operation. Because of this and because tape devices require significant time to perform a backup, such backups are typically performed at night (or other off-peak time), when few users are utilizing the system. Similarly, a database restore operation using a tape device consumes a substantial amount of time, also causing concurrent system degradation. When performing a backup or restore operation, the database files and any unincorporated log must be saved and\/or restored. Thus as the size of the various database files increases, the time required to perform a backup\/restore operation to a tape device also increases.","In a further known example, the Exchange server is adapted to have the database and log files preferably written to a local disk. However, by utilizing other software products such as, e.g. SnapManager\u00ae for Microsoft Exchange 5.5 available from Network Appliance, Inc. of Sunnyvale, Calif., the log files and databases may be written to disks that are remotely connected to the Exchange server. In one known implementation, the Exchange server is operatively interconnected with a file server and associated disk arrays, which provides file service for storage and access of the database and log files.","A file server is a computer that provides file service relating to the organization of information on storage devices, such as disks. The file server or filer includes a storage operating system that manages data access and may implement a file system to logically organize the information as a hierarchical structure of directories and files on the disks. By \u201cfile system\u201d it is meant generally a structuring of data and metadata on a storage device, such as disks, which permits reading\/writing of data on those disks. A file system also includes mechanisms for performing these operations. Each \u201con-disk\u201d file may be implemented as a set of disk blocks configured to store information, such as text, whereas the directory may be implemented as a specially-formatted file in which information about other files and directories are stored. A filer may be configured to operate according to a client\/server model of information delivery to thereby allow many clients to access files stored on a server, e.g., the filer. In this model, the client may comprise an application, such as a file system protocol, executing on a computer that \u201cconnects\u201d to the filer over a computer network, such as a point-to-point link, shared local area network (LAN), wide area network (WAN), Storage Area Network (SAN) or virtual private network (VPN) implemented over a public network such as the Internet. Each client may request the services of the filer by issuing file system protocol messages (in the form of packets) to the filer over the network.","A common type of file system is a \u201cwrite in-place\u201d file system, an example of which is the conventional Berkeley fast file system. In a write in-place file system, the locations of the data structures, such as inodes and data blocks, on disk are typically fixed. An inode is a data structure used to store information, such as meta-data, about a file, whereas the data blocks are structures used to store the actual data for the file. The information contained in an inode may include, e.g., ownership of the file, access permission for the file, size of the file, file type and references to locations on disk of the data blocks for the file. The references to the locations of the file data are provided by pointers, which may further reference indirect blocks that, in turn, reference the data blocks, depending upon the quantity of data in the file. Changes to the inodes and data blocks are made \u201cin-place\u201d in accordance with the write in-place file system. If an update to a file extends the quantity of data for the file, an additional data block is allocated and the appropriate inode is updated to reference that data block.","Another type of file system is a write-anywhere file system that does not overwrite data on disks. If a data block on disk is retrieved (read) from disk into memory and \u201cdirtied\u201d with new data, the data block is stored (written) to a new location on disk to thereby optimize write performance. A write-anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations, particularly for sequential read operations, directed to the disks. A particular example of a write-anywhere file system that is configured to operate on a filer is the Write Anywhere File Layout (WAFL\u2122) file system also available from Network Appliance, Inc. of Sunnyvale, Calif. The WAFL\u2122 file system is implemented within a microkernel as part of the overall protocol stack of the filer and associated disk storage. This microkernel is supplied as part of Network Appliance's Data ONTAP\u2122 storage operating system, residing on the filer, that processes file-service requests from network-attached clients.","As used herein, the term \u201cstorage operating system\u201d generally refers to the computer-executable code operable on a storage system that manages data access and may implement file system semantics. In this sense, Data ONTAP\u2122 software is an example of such a storage operating system implemented as a microkernel. The storage operating system can also be implemented as an application program operating over a general-purpose operating system, such as UNIX\u00ae or Windows NT\u00ae, or as a general-purpose operating system with configurable functionality, which is configured for storage applications as described herein.","Disk storage is typically implemented as one or more storage \u201cvolumes\u201d that comprise physical storage disks, defining an overall logical arrangement of storage space. Currently available filer implementations can serve a large number of discrete volumes (150 or more, for example). Each volume is associated with its own file system and, for purposes hereof, volume and file system shall generally be used synonymously. The disks within a volume are typically organized as one or more groups of Redundant Array of Independent (or Inexpensive) Disks (RAID). RAID implementations enhance the reliability\/integrity of data storage through the redundant writing of data \u201cstripes\u201d across a given number of physical disks in the RAID group, and the appropriate caching of parity information with respect to the striped data. In the example of a WAFL-based file system, a RAID 4 implementation is advantageously employed. This implementation specifically entails the striping of data across a group of disks, and separate parity caching within a selected disk of the RAID group. As described herein, a volume typically comprises at least one data disk and one associated parity disk (or possibly data\/parity) partitions in a single disk) arranged according to a RAID 4, or equivalent high-reliability, implementation.","A file server, as described above may be interconnected by a network to an Exchange or other database server to provide file service operations. In the example of an Exchange database server, the various database files can be stored on a set of disks interconnected with a file server through the use of such software programs as the above-described SnapManager software. As noted, such file servers typically utilize a tape device for backup\/restore operations. A substantial amount of time and system resources are required to perform a backup operation to a tape device. Consequently, many system administrators do not frequently perform backup operations, to avoid the concomitant system performance degradation.","When a database or other file becomes corrupted, the administrator may desire to restore the file using a previously generated backup image of the file. Using conventional tape-based restore operations, an administrator would take the database server offline and then copy the restored database files to the active file system. This copying could take a substantial amount of time (on the order of hours) depending upon the size of the restored database file. Depending upon the methodology used in generating a backup of the file, a hard or soft recovery procedure could be utilized.","There are known methods for performing a soft recovery of an Exchange database. A soft recovery is employed when an Exchanger server is taken offline and then reinitialized. Upon restart, the Exchange server replaces transaction logs to bring the database to a current and consistent state. One example of a soft recovery is described in U.S. patent application Ser. No. 10\/090,963, entitled SYSTEM AND METHOD FOR CREATING A POINT-IN-TIME RESTORATION OF A DATABASE FILE, by Dennis E. Chapman, the contents of which are hereby incorporated by reference.","However, soft recovery is not an appropriate method to restore databases being served by a database server that is handling multiple databases. Significant advantages in reliability, scalability and flexibility are realized by having a single database server manage multiple databases. Specifically, the other databases being managed by a database server will be able to remain online when one database needs to be recovered. In the example of Exchange 2000, which supports multiple storage groups and multiple databases per storage group, a hard recovery is the preferred recovery method.","A hard recovery is the act of restoring the server from an initial or empty state. The database is restored from a backup and all transaction logs are replayed. During a hard recovery, the database server reconstructs the database from a backup data file. However, while the online backup was being created, often there will be transactions that are received by the server between the time the database is written to the backup location and the time that the backup finishes. These additional transactions are stored in patch files. When executing a hard recovery, these patch files are also added to the database so that the recovery is complete. Patch files are no longer utilized with Exchange 2000 servers running Service Pack 2 (SP2) or higher. However, many installations are in service that are not utilizing SP2.","A noted disadvantage of hard recovery operations is that they are typically performed from a backup stored on a tape device. By utilizing a tape device for backup operations, system performance is degraded and the time required for the backup operation is substantially longer than for soft recovery operations utilizing a snapshotting file system. Thus, it is an object of the present invention to provide a system and method for performing a backup and restore operation utilizing a hard recovery procedure for a database.","The disadvantages of the prior art are overcome by providing a system and method for performing an online hard recovery of a database using a snapshot, defined further below, of the database. When generating a backup, a snapshot is taken of the database files. Additionally, the header and\/or footer information associated with the particular point and time of the backup of the database is stored in a separate file. The associated log and\/or patch files for the database are copied to a special backup directory. The snapshots can be taken in a matter of seconds, thereby allowing multiple backups per day to be created of the database files.","If the database files become corrupted, the user or administrator may begin a hard restore procedure. The various backed-up log files are verified and then copied from the backup location to the active file system. The database files are restored from the snapshot to the active file system. The backup agent then causes the database server to initiate a hard recovery operation.","The appropriate log file also copied from the backup location to the active file system. Once all the backup files are in the active file system, the backup agent alerts the database server to begin a hard recovery process. The database server then utilizes the restored backup file (with modified header and footer), the log and\/or patch files to generate a fully consistent database.","In one embodiment, the verification of the transaction log ensures that there are any missing log files and that the log files created after a given backup are consistent with is those stored in the backup.","By way of further background,  is a schematic block diagram of an exemplary storage system environment  that includes a Windows 2000 server  having one or more applications, including a Microsoft Exchange server  and a snapshot manager , and an interconnected file server  that may be advantageously used with the present invention. The snapshot manager  is a general-purpose application that handles snapshot creation and handling functions within the server. One example is the above-referenced Network Appliance SnapManager software. The snapshotting process is described in further detail below and in U.S. patent application Ser. No. 09\/932,578, entitled INSTANT SNAPSHOT by Lewis et al., are hereby incorporated by reference.","The filer server or \u201cfiler\u201d  is a computer that provides file service relating to the organization of information on storage devices, such as disks . The filer  comprises a processor , a memory , a network adapter  and a storage adapter  interconnected by a system bus . The filer  also includes a storage operating system  () that may implement a file system to logically organize the information as a hierarchical structure of directories and files on the disks.","It will be understood to those skilled in the art that the inventive technique described herein may apply to any type of special-purpose computer (e.g., file serving appliance) or general-purpose computer, including a standalone computer, embodied as a storage system. To that end, filer  can be broadly, and alternatively, referred to as storage system. Moreover, the teachings of this invention can be adapted to a variety of storage system architectures including, but not limited to, a network-attached storage environment, a storage area network and disk assembly directly-attached to a client\/host computer. The term \u201cstorage system\u201d should, therefore, be taken broadly to include such arrangements.","In the illustrative embodiment, the memory  comprises storage locations that are addressable by the processor and adapters for storing software program code. The memory comprises a form of random access memory (RAM) that is generally cleared by a power cycle or other reboot operation (e.g., it is a \u201cvolatile\u201d memory). The processor and adapters may, in turn, comprise processing elements and\/or logic circuitry configured to execute the software code and manipulate the data structures. The operating system , portions of which are typically resident in memory and executed by the processing elements, functionally organizes the filer by, inter alia, invoking storage operations in support of a file service implemented by the filer. It will be apparent to those skilled in the art that other processing and memory means, including various computer readable media, may be used for storing and executing program instructions pertaining to the inventive technique described herein.","The network adapter  comprises the mechanical, electrical and signaling circuitry needed to connect the filer  to an Exchange or database server  over a computer network , which may comprise a point-to-point connection or a shared medium, such as a local area network or storage area network. The database server  may be a general-purpose computer configured to execute applications , such as a database application, for example Exchange. Moreover, the client may interact with the filer  in accordance with a client\/server model of information delivery. That is, the client may request the services of the filer, and the filer may return the results of the services requested by the client, by exchanging packets  encapsulating, e.g., the NFS, CIFS, FCP, or iSCSI protocol format over the network .","The storage adapter  cooperates with the storage operating system  () executing on the filer to access information requested by the client. The information may be stored on the disks  that are attached, via the storage adapter  to the filer  or other node of a storage system as defined herein. The storage adapter  includes input\/output (I\/O) interface circuitry that couples to the disks over an I\/O interconnect arrangement, such as a conventional high-performance, Fibre Channel serial link topology. The information is retrieved by the storage adapter and, if necessary, processed by the processor  (or the adapter  itself) prior to being forwarded over the system bus  to the network adapter , where the information is formatted into a packet and returned to the server .","In one exemplary filer implementation, the filer  can include a nonvolatile random access memory (NVRAM)  that provides fault-tolerant backup of data, enabling the integrity of filer transactions to survive a service interruption based upon a power failure, or other fault. The size of the NVRAM depends in part upon its implementation and function in the file server. It is typically sized sufficiently to log a certain time-based chunk of transactions (for example, several seconds worth). The NVRAM is filled after each client request is completed, but before the result of the request is returned to the requesting client.","In an illustrative embodiment, the disks  are arranged into a plurality of volumes, each having a file system associated therewith. The volumes each include one or more disks . In one embodiment, the physical disks  are configured into RAID groups so that some disks store striped data and some disks store separate parity for the data, in accordance with a preferred RAID 4 configuration. However, other configurations (e.g. RAID 5 having distributed parity across stripes) are also contemplated. In this embodiment, a minimum of one parity disk and one data disk is employed. However, a typical implementation may include three data and one parity disk per RAID group, and a multiplicity of RAID groups per volume.","The organization of the preferred storage operating system for the exemplary filer is now described briefly. However, it is expressly contemplated that the principles of this invention can be implemented using a variety of alternate storage operating system architectures. As shown in , the storage operating system  comprises a series of software layers, including a media access layer  of network drivers (e.g., an Ethernet driver). The operating system further includes network protocol layers, such as the Internet Protocol (IP) layer  and its supporting transport mechanisms, the Transport Control Protocol (TCP) layer  and the User Datagram Protocol (UDP) layer . A file system protocol layer provides multi-protocol data access and, to that end, includes support for the Common Internet File System (CIFS) protocol , the (NFS) protocol  and the Hypertext Transfer Protocol (HTTP) protocol . The CIFS layer  includes support for remote procedure calls (RPC) . RPCs permit an application executing on another computer to remotely call various functions via a CIFS data packet. Such remote functions, described further below, include e.g., enabling a client of the filer to take a snapshot of a file system of a volume. The storage operating system also includes support for the iSCSI protocol . Additionally, the filer may support SCSI encapsulated in Fibre Channel (FCP) . The FCP layer  operates with a Fibre Channel (FC)  layer.","In addition, the storage operating system  includes a disk storage layer  that implements a disk storage protocol, such as a RAID protocol, and a disk driver layer , that implements a disk control protocol such as the small computer system interface (SCSI).","Bridging the disk software layers with the network and file system protocol layers is a file system layer  of the storage operating system . Generally, the layer  implements a file system having an on-disk format representation that is block-based using, e.g., 4-kilobyte (KB) data blocks and using inodes to describe the files. In response to transaction requests, the file system generates operations to load (retrieve) the requested data from volumes if it is not resident \u201cin-core\u201d, i.e., in the filer's memory . If the information is not in memory, the file system layer  indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical volume block number. The file system layer  then passes the logical volume block number to the disk storage (RAID) layer , which maps that logical number to a disk block number and sends the latter to an appropriate driver (for example, an encapsulation of SCSI implemented on a fibre channel disk interconnection) of the disk driver layer . The disk driver accesses the disk block number from volumes and loads the requested data in memory  for processing by the filer . Upon completion of the request, the filer (and storage operating system) returns a reply, e.g., a conventional acknowledgement packet  defined by the Common Internet File System (CIFS) specification, to the server  over the network . Similar to the CIFS layer , the file system layer  includes support for various remove procedure calls (RPC) .","It should be noted that the software \u201cpath\u201d  through the storage operating system layers described above needed to perform data storage access for the client request received at the filer may alternatively be implemented in hardware or a combination of hardware and software. That is, in an alternate embodiment of the invention, the storage access request data path  may be implemented as logic circuitry embodied within a field programmable gate array (FPGA) or an application specific integrated circuit (ASIC). This type of hardware implementation increases the performance of the file service provided by filer  in response to a file system request packet  issued by the database server .","To be able to create effective backups of database files, the database files should be regularly backed up. As noted above, prior or other implementations typically only perform a backup operation during the evening (or other off-peak time) due to system performance degradation concerns caused by the backup operation. By storing the database files on a file server, faster backups can be accomplished using, e.g., a file server's inherent snapshot capabilities provided by the file system. By \u201csnapshot\u201d it is meant generally a rapid generation of an image of the data at a certain point-in-time. \u201cSnapshot\u201d is a trademark of Network Appliance, Inc. It is used for purposes of this patent to designate a persistent consistency point (CP) image. A persistent consistency point image (PCPI) is a point-in-time representation of the storage system, and more particularly, of the active file system, stored on a storage device (e.g., on disk) or another persistent memory having a name or other identifier that distinguishes it from other PCPIs taken at other points-in-time. A PCPI can also include other information (metadata) about the active file system at the particular point-in-time for which the image is taken. The terms \u201cPCPI\u201d and \u201csnapshot\u201d shall be used interchangeably throughout this patent and without derogation of Network Appliance's trademark rights. While this description is written in terms of the methodology utilized by the WAFL file system in generating Snapshots\u2122, it is expressly contemplated that other methods of creating snapshots or other duplicated copies of the stored data regardless of the organization and structure can be utilized in accordance with the teachings of the present invention. Snapshots, described further below, can be generated using a variety of techniques. It should be noted that the teachings of the present invention will work with any technique for replicating the active file system, including, for example, mirrored arrays.","Now describing the snapshot procedure briefly,  shows an exemplary root inode  of an active file system  linking four inodes . Note that the active file system would include additional data structures and blocks (not shown) such as a file system information block defining the root of the active file system. In accordance with the illustrative embodiment, the active file system  includes a root inode  linking to the various inodes  that contain the data associated with a file or directory. It should be noted that numerous intermediate inodes may be located between the root inode  and the data inodes . Each layer of intermediate inodes contains pointers to a lower level of inodes containing either additional pointers or data blocks. In  a conventional snapshot  has been taken of the root inode . As can be seen, the snapshot  includes a link to each of the inodes .  shows the snapshotted root inode after data inode D has been modified into D\u2032. Thus, the snapshot  provides links to data inodes A-D, which represent the state of the data at the time of the snapshot. The root inode , which now represents the modified root inode, links to unmodified data inodes A-C and the modified inode D\u2032.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 6","b":["605","610","615","620","625","605","610","625","605","630","645","605"]},"In accordance with the present invention, a backup is generated of a database that can be utilized in a hard recovery process. The Microsoft Exchange 2000 database program is used herein for exemplary purposes only. The teachings of the present invention may be implemented in accordance with any suitable database system.","In the illustrative embodiment, a backup agent executes on a computer connected to the Exchange server. Alternatively, the backup agent may execute on the same computer serving as the Exchange server. The backup agent is an application program or process that manages the backup and recovery of the Exchange database in accordance with the present invention. Many commercially available backup agents may be utilized with the present invention, including, for example, the above-referenced Network Appliance's SnapManager for Exchange Product, available from Network Appliance, Inc. of Sunnyvale, Calif.","The steps of a backup procedure  in accordance with the present invention are shown in the flowchart of . Initially, in step , the backup agent connects to the Exchange server. This connection can be established using well-known and conventional application program interfaces (API) operating over conventional Internet or other networking connections with the Exchange server. The backup agent then, in step , identifies the available databases from which backup copies may be generated. The is backup agent may identify these databases by, for example, utilizing an API call to the database server that returns a listing of the available databases serviced by the database server.","After the backup agent has identified the database to be backed-up, the backup agent then, in step , alerts the Exchanger server of the commencing of a backup operation. The backup agent will identify the type of backup to be performed (e.g., full or partial) and which instance of the database to be backed-up.","The backup agent then opens the database file for read access in step . After opening the database file, the backup agent then reads the first two pages of the database (step ). In the exemplary embodiment of an Exchange 2000 database server, each page of the database comprises four kilobytes (KB) of data. Thus, by reading the first two pages, eight kilobytes of data are read. It should be noted that varying amounts of data can be read to accommodate other database systems. The first two pages of an Exchange database comprise the header information for use in making a hard recovery. Once the initial information has been read from the database, the backup agent then saves the header information in a metadata file in step . This metadata file, described further below, may be stored in a .hdr extension type file in a snapinfo directory associated with a snapshot to be generated. The name of the .hdr file is the same as the database being backed up. Thus, the .hdr file associated with a given backed up database may be easily located and correlated. The exemplary .hdr file is basically a dump (i.e. a direct copy of the data bits) of the contents of the header data structure to a file stored on disk. It should be noted that in alternate embodiments, various forms of database identification information, other than header metadata, may be saved in accordance with the teachings of the present invention. Once the header file has been saved, then, in step , the backup agent uses a remote procedure call to generate a snapshot of the database file. In alternate embodiments, other methods may be used to generate the snapshot of the database file.","The database file is then closed (step ). If, in the exemplary embodiment, the database server (Exchange 2000) is utilizing Service Pack 2 or higher, then the backup agent generates a footer metadata file in step . This footer file is generated from data stored in the header file and the information stored in logs created during the backup process. In the illustrative embodiment, the footer information is appended to the .hdr file generated in step . However, in alternate embodiments, the footer file information may be stored in a separate .hdr or .ftr extension type file. The .ftr file would again, similar to the .hdr file be named the same as the associated backup. The associated log and\/or patch files (if running Exchange 2000 pre-Service Pack 2) are then backed up, step . These log\/patch files are copied to the appropriate snapinfo directory. Next, the backup agent ends the backup instance (step ) and then disconnects from the Exchange server (step ). These can be accomplished using conventional Exchange APIs.","In the illustrative embodiment, the Microsoft Exchange database server uses the header metadata for storing various bits of information relating to the database. This data is stored, in the exemplary embodiment, in the first two pages of the database file. An illustrative header data structure  is shown in . The header data structure  contains various metadata associated with the database file. This Exchange 2000 database metadata is further described in Microsoft Knowledge Base Article Q296788, entitled 2000 , and available on the World Wide Web at support.microsoft.com, the contents of which are hereby incorporated herein.","The header data structure  comprises a number of fields including, for example, a checksum field , a previous full backup date\/time field , a previous full backup generation field , an operating system version field , a service pack field , a version field  and a last object identifier field . The checksum field  stores a checksum relating to the header information to be used to ensure that the data contained herein has not been corrupted. The date\/time field  identifies the last time that a full backup of the database was generated. This information can be used for scheduling backups, for example to generate a backup after 10 days from the last full backup. The previous full backup log generation field , combined with the previous full backup date\/time field , is used for verifying the snapshot image of the database with the metadata files saved during the backup procedure. The operating system version field  and service pack field  identify, respectively, the version of the operating system that the database server is executing upon and any service packs applied to the database server. Similarly, the version field  identifies the version of the database management system that is managing the database.","An exemplary footer data structure  is shown in . The footer data structure , similarly to the header data structure, also contains various metadata associated with the database file. In an illustrative embodiment, the footer data structure  includes various fields, including a page checksum field , a log signature field , a database signature field , patch full backup log generation field  and patch full backup date\/time field . Additional fields may also be utilized with the footer data structure.","Thus, in preparing a backup for use in a later hard recovery procedure, a backup agent retrieves a set of metadata from the header of the database. This metadata is then stored in a backup file for later use during the hard recovery process. In the exemplary embodiment of an Exchanger 2000 database, this header data comprises 8 kilobytes of data, or the first two pages of the Exchange database. After the header information is saved, the backup agent generates a snapshot of the database using conventional file system procedures. This snapshot of the database is later used for the hard recovery procedure. By utilizing this snapshotting feature, a backup of the database may be generated in seconds instead of hours normally required when using a tape drive as a storage medium. In certain embodiments, depending on the version of the database software being utilized, a footer file is also generated storing various metadata concerning the database including, e.g., patch log file information. This footer information may, in one embodiment, be appended to the header metadata file.","In the event of a corruption or other error condition concerning the database file, the data must be restored from a given backup.","The steps of an exemplary hard recovery procedure  are shown in . The hard recovery procedure begins when, in step , a user selects a backup to restore from. This can be accomplished by, for example, selecting an entry from a graphical user interface or entering a command-by-command line interface. Next, in step , the database to be restored is dismounted if needed. This is accomplished by the backup agent issuing commands via an application program interface (API) to the Exchange 2000 server. By \u201cdismount\u201d it is meant that the particular database is taken offline so that data write operations are no longer directed to the database. In the example of an Exchange 2000 database, by dismounting a database, the information storage capabilities to a particular storage group are not stopped unless the database that is dismounted is the only database within the storage group. In other words, this illustrative embodiment enables the other unaffected databases to continue normal operation and service requests.","The backup agent then verifies the log and\/or the patch files in step . After this verification, described further below, the backup agent then initiates the restore operation, in step , by issuing the appropriate API calls to the Exchange server. Next, in step , the snapshot of the database files is restored to the active file system. This may be accomplished by using known snapshot restoration techniques including the method described in U.S. patent application Ser. No. 10\/100,948, entitled SYSTEM AND METHOD FOR RESTORING A SINGLE FILE FROM A SNAPSHOT, by Raymond C. Chen et al., the contents of which are hereby incorporated by reference.","Next, in step , the header and\/or footer of the restored database snapshot file is overwritten with the metadata stored in the .hdr and\/or .ftr files. By overwriting the header and footer of the database file, the database is converted into a backup version suitable for a hard recovery operation. Then, in step , the backup agent copies the log files from the snapinfo directory to the active file system. In the exemplary embodiment, the log files, which were stored in the snapinfo directory, are copied to the appropriate locations with the active file system. The backup agent then causes the database server to begin a hard recovery process (step ). This can be accomplished by using a conventional API command. Finally, in step , the database server performs a hard recovery process to rebuild the database to a fully consistent state. This hard recovery process includes replaying any logs and\/or patch files to bring the database to a fully consistent state as of the time the backup was generated.","The database server's hard recovery process will rebuild the database files to a consistent state. Once the database server has completed the reconstruction of the database files, the database may then be remounted and utilized for data write operations.","One important aspect of the restoration process is the verification of the log, patch and database files (step  from ). This verification ensures that the appropriate log\/patch files and database files are available and have not been corrupted. Specifically, the verification ensures that all of the log files are present and that none have been corrupted. It should be noted that other forms of verification procedures may be utilized in accordance with the teachings of the present invention.","The steps of an exemplary verification procedure  is shown in . Initially, in step , the verification procedure reads the header dump file of the most current transaction log. The header dump file has a header information concerning the transaction log, similar to the header information associated with a database file. Next, in step , the procedure verifies the backed up transaction logs by dumping the log headers. This verification of the backed up transaction logs by dumping the headers ensures that the transaction logs stored in the snapinfo directory associated with the backup to be restored from are consistent and in a proper ordering. Next, in step , the appropriate patch files are verified. Patch files will only exist if, for example, the database server is a Microsoft Exchange 2000 server executing a pre-Service Pack 2 version of Microsoft Exchange.","Next, in step , all of the transaction logs backed-up since the subject backup are verified. After the transaction logs have been verified, then, in step , the transaction logs in the live or active file system are verified. The header file for the database is then verified in step . This verification of the header file also includes, in an alternate embodiment, verification of the footer file if such a file was created. This verification occurs by, for example, reading all recorded property database files header dumps from the appropriate snapinfo directory. Once all the database header files have been identified, the procedure then verifies that the last header file generated has the same database signature as those previously made concerning this database.","Next, in step , the database signatures are verified beginning with the one containing the snapshot. And finally, in step , the procedure verifies the previous full backup fields in the snapshot and database header files. This is accomplished by, for example ensuring that the previous full backup field in each header file is the same as the previous full backup field in the associated snapshot.","The procedure for verifying backed up transaction logs by dumping the headers is shown on . The procedure begins by, in step , selecting a first transaction log. The associated header dump of the selected transaction log is then read in step . Next, in step , determine if the generation IDs of this transaction log matches the last transaction log's generation ID. If the generation IDs match, then, in step , verify that the logs have the same log signature, creation time and previous generation time.","If the generation IDs do not match, then, in step , the procedure verifies that the transaction log signatures are the same. Next, in step , the procedure verifies the generation ID of the selected transaction log is one more than the last transaction log's generation ID. Additionally, in step , the procedure verifies that the last log's creation time equals the current log's previous generation time.","Either after step  or , the procedure continues to step  where the selected log header is set as the last log header. Next, in step , the procedure determines if more logs exist that require verification. If no logs need to be verified, then the procedure is complete (step ). Otherwise the procedure loops back to step  after selecting the next log to verify.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 13","b":["1300","1305","1310","1320","1320","1330","1340","1350","1305","1360"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 14","b":["1400","1405","1410","1415","1420"]},"To again summarize, the present invention provides a system and method for performing a hard recovery of a database by generating a snapshotted backup of the database and associated log\/patch files. In generating the appropriate backup, a header file is generated that contains the header and\/or footer metadata associated with a given database. This header file is written in a snapinfo directory associated with the snapshot of the database. A snapshot of the database files is generated. Additionally, the log and\/or patch files associated with a given database are copied to the snapinfo directory.","Upon the initiation of a hard recovery, the database files are restored from a snapshot. The header and\/or footer metadata is overwritten to the restored files using the data contained in the header files. The log and\/or patch files are copied and verified from the snapinfo directory. During the log file verification, the log files are checked for consistency and to ensure that none have been corrupted. Finally, the Microsoft Exchange server is then initialized to perform a hard recovery backup. The Exchange server utilizes the restored database files with modified metadata to generate a restored and consistent database.","The foregoing has been a detailed description of an illustrative embodiment of the invention. Various modifications and additions can be made without departing from the spirit and scope of the invention. It is understood that other database servers and database files can be utilized in accordance with the teachings of this invention while remaining within the scope of the present invention. In addition, while this reference has been written with reference to the Microsoft\u00ae Exchange server and file servers the principles are equally pertinent to all types of database systems and computers, including stand-alone computers. In addition, it is specifically contemplated that the teachings of this invention can be applied to other versions of Exchange that are not inherently disadvantaged with respect to remote backup to file servers. Additionally, the database identification information may be implemented in forms other than a header and footer metadata file in accordance with various embodiments of the present invention. Further, it is expressly contemplated that the teachings of this invention can be implemented as software, including a computer-readable medium having program instructions executing on a computer, hardware, firmware, or a combination thereof. Accordingly this description is to only be taken by way of example and not to otherwise limit the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and further advantages of the invention may be better understood by referring to the following description in conjunction with the accompanying drawings in which like reference numerals indicate identically or functionally similar elements, of which:",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
