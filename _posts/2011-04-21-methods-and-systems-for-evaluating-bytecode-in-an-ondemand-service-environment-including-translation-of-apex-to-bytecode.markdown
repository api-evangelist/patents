---
title: Methods and systems for evaluating bytecode in an on-demand service environment including translation of apex to bytecode
abstract: Techniques and mechanisms for conversion of code of a first type to bytecode. Apex provides various unique characteristics. When converting to bytecode, these characteristics are handled to provide bytecode functionality. Some of the unique characteristics of Apex include Autoboxing, SOQL, Properties, Comparisons, Modifiers, Code coverage mechanisms and Sharing mechanisms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09104484&OS=09104484&RS=09104484
owner: salesforce.com, inc.
number: 09104484
owner_city: San Francisco
owner_country: US
publication_date: 20110421
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","CROSS REFERENCE TO RELATED APPLICATIONS","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application 61\/326,368 entitled MASFEBIAO-DSEIEUSRGLE, by Gregory D. Fee and William J. Gallagher, filed Apr. 21, 2010, the entire contents of which are incorporated herein by reference.","This application claims the benefit of U.S. Provisional Patent Application 61\/326,377 entitled MASFEBIAO-DSEITAB, by Gregory D. Fee and William J. Gallagher, filed Apr. 21, 2010, the entire contents of which are incorporated herein by reference.","This application claims the benefit of U.S. Provisional Patent Application 61\/326,385 entitled MASFEBIAO-DSEIPM-T, M-LRES, by Gregory D. Fee and William J. Gallagher, filed Apr. 21, 2010, the entire contents of which are incorporated herein by reference.","The following commonly owned, co-pending United States Patents and Patent Applications, including the present application, are related to each other. Each of the other patents\/applications are incorporated by reference herein in its entirety:","U.S. patent application Ser. No. 13\/091,353, by Gregory D. Fee and William J. Gallagher, filed Apr. 21, 2011; and","U.S. patent application Ser. No. 13\/091,135, by Gregory D. Fee and William J. Gallagher, filed Apr. 21, 2011.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Embodiments described herein relate generally to evaluation of bytecode in a database network system. More particularly, embodiments described herein relate to efficient utilization of shared resources for evaluation of bytecode.","The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly, a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized. The subject matter in the background section merely represents different approaches.","In conventional database systems, users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user's own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request.","As an on demand platform, Apex\u2122 provides a set of features for building business applications including, for example, data models and objects to manage data, a workflow engine for managing collaboration of that data, a user interface model to handle forms and other interactions, and a Web services application programming interface (API) for programmatic access and integration. These platform technologies support custom applications and integrations, and allow developers to build applications utilizing this on demand model.","Apex code is \u201con demand,\u201d running without requiring local servers or software. Apex code may run in a multi-tenant environment, providing the economic and manageability benefits of a shared service while keeping the definition, data and behavior of each customer's application separate from each other. For developers, the combination of these capabilities with this on-demand, multi-tenant delivery provides convenience, scalability, and safety of an on-demand database, combined with the flexibility and control of a procedural language.","Apex code provides a powerful and productive approach to creating functionality and logic, allowing developers to focus on elements specific to their application, while leaving other elements to the platform's framework. Apex code is a successful and innovative language in part because of its multi-tenant design. Multitenancy allows Apex to scale to a large number of customers with a relatively modest hardware investment. Apex code is abstracted and governed, utilizing only as many resources as is allowed.","Performance is a key requirement for any programming language. It is especially important in a multitenant environment where processor cycles spent interpreting code for a given customer have a direct and negative impact on other customers sharing the same environment. Thus, improving performance not only results in quicker response times for users but also less impact on other tenants in terms of the overall load on the system.","All languages tend to have some start-up cost associated with getting code into a state where it can be executed. This cost includes, for example, the processing required to load the executable form of the code and to link it with dependent code. Unlike most programming languages, however, start-up costs tend to dominate in a multi-tenant language where the interpreter may be called upon to execute code from any one of possibly thousands of tenants. The ability to cache executable code to avoid the start-up costs on subsequent requests is limited by the large working set. In addition, the requests tend to be relatively short, making the start-up cost a larger proportion of the overall request time.","In the following description, numerous specific details are set forth. However, embodiments of the invention may be practiced without these specific details. In other instances, well-known circuits, structures and techniques have not been shown in detail in order not to obscure the understanding of this description.","As used herein, the term multi-tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example, a given application server may simultaneously process requests for a great number of customers, and a given database table may store rows for a potentially much greater number of customers.","In one embodiment, a multi-tenant database system utilizes tenant identifiers (IDs) within a multi-tenant environment to allow individual tenants to access their data while preserving the integrity of other tenant's data. In one embodiment, the multitenant database stores data for multiple client entities each identified by a tenant ID having one of one or more users associated with the tenant ID. Users of each of multiple client entities can only access data identified by a tenant ID associated with their respective client entity. In one embodiment, the multitenant database is a hosted database provided by an entity separate from the client entities, and provides on-demand and\/or real-time database service to the client entities.","As used herein, the term bytecode refers to various forms of instruction sets to be executed by a software interpreter. Bytecode instructions are also suitable for further compilation into machine code. Bytecode instructions are processed by software, but have similarities to hardware instructions. Virtual stack machines are common execution environments. A bytecode program may be executed by parsing instructions and directly executing the instructions, one at a time. Some systems, called dynamic translators, or \u201cjust-in-time\u201d (JIT) compilers, translate bytecode into machine language as necessary at runtime.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","110","100"]},"The users of each of the multiple client entities can only access data identified by a tenant ID associated with the respective client entity. In one embodiment, multitenant database  is a hosted database provided by an entity separate from the client entities, and provides on-demand database service to the client entities. Multitenant database  further includes shared database engine  that provides the functionality of multitenant database  in operating on tenant data sets .","The multitenant environment further includes multitenant code , which includes multiple tenant logic sets  corresponding to the tenants of the multitenant environment. In one embodiment, multitenant code  includes code for multiple client entities each identified by the corresponding tenant IDs. The users of each of the multiple client entities can only access code identified by the tenant ID associated with the respective client entity. In one embodiment, multitenant code  is stored in a hosted database provided by an entity separate from the client entities, and provides on-demand database service to the client entities. Multitenant code  further includes shared execution engine  that provides the ability to execute code represented by multitenant code . In one embodiment, shared execution engine  is a virtual machine.","Apex is a successful and innovative language in part because of its multi-tenant design. Multi-tenency allows Apex to scale to a large number of customers with a relatively modest hardware investment.","Performance is a key requirement for any programming language. It is especially important in a multi-tenant environment where processor cycles spent interpreting code for a given customer have a direct and negative impact on other customers sharing the same environment. Thus, improving performance not only results in quicker response times for users but also less impact on other tenants in terms of the overall load on the system.","All languages tend to have some start-up cost associated with getting code into a state where it can be executed. This cost includes the processing required to load the executable form of the code and to link it with dependent code. Unlike most programming languages, however, start-up costs tend to dominate in a multi-tenant language where the interpreter may be called upon to execute code from any one of literally thousands of tenants. The ability to cache executable code to avoid the start-up costs on subsequent requests is limited by the large working set. In addition, the requests tend to be relatively short, making the start-up cost a larger proportion of the overall request time.","Apex is currently implemented as an Abstract Syntax Tree (AST)-based interpreter. Most compilers parse source code into an intermediate AST form. An AST interpreter actually executes directly on the generated AST in order to interpret the code.","A full source code parse is required to compute the AST. Parsing the Apex source code is expensive. To minimize this cost, the Apex runtime caches the generated AST in memcached. The term \u201cmemcached\u201d refers to a general-purpose distributed memory caching system often used to speed up dynamic database-driven applications or websites by caching data and objects in system memory to reduce the number of times an external data source (such as a database or API) must be read. Memcached runs on Unix, Windows and MacOS.","Storage of the AST in memcached requires the AST to be serialized into a byte stream. The AST is comprised of a set of nodes, each representing some construct in the source code (such as a while loop, an add expression, etc.). It tends to be fairly large: for example, it can be approximately 10.5 times the source code size in terms of heap consumption. In addition, this size consists of a very large number of very small Java objects. Unfortunately, very large object graphs are expensive to serialize using Java serialization. Deserializing the AST from memcached is the dominant cost in many Apex requests.","The Apex interpreter serves as a level of isolation between customer code and the host VM. It enforces governor limits and brokers requests to the underlying platform on behalf of customer code. In one embodiment, the interpreter is not a full-fledged Java virtual machine instead delegating to the real Java virtual machine (JVM) for various services. Garbage collection is an example of this. The interpreter is also able to delegate to the real JVM on a per type basis.","In one embodiment, Apex code is converted to bytecode that may be executed by a virtual machine. In one embodiment, the Apex code may be converted to an intermediate representation before being converted to bytecode. In another embodiment, the Apex code may be converted directly to bytecode.","In one embodiment, Apex provides various unique characteristics. When converting to bytecode, these characteristics are handled as described below to provide bytecode functionality. Some of the unique characteristics of Apex include Autoboxing, SOQL, Properties, Comparisons, Modifiers, Code coverage mechanisms and Sharing mechanisms.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2","b":["210","220","230","240"]},{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Apex:"]},{"entry":[{},"int c = 2 * a + b;"]},{"entry":[{},"Bytecode:"]},{"entry":[{},"iconst_2"]},{"entry":[{},"box"]},{"entry":[{},"unbox"]},{"entry":[{},"load a"]},{"entry":[{},"unbox"]},{"entry":[{},"imul"]},{"entry":[{},"box"]},{"entry":[{},"unbox"]},{"entry":[{},"load b"]},{"entry":[{},"unbox"]},{"entry":[{},"iadd"]},{"entry":[{},"box"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"iconst_2"]},{"entry":[{},"load a"]},{"entry":[{},"unbox"]},{"entry":[{},"imul"]},{"entry":[{},"load b"]},{"entry":[{},"unbox"]},{"entry":[{},"iadd"]},{"entry":[{},"box"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":"310","br":[{},{}],"in-line-formulae":[{},{}]},{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ldc \u201cselect id, name from Account\u201d"]},{"entry":[{},"invokestatic Database.query(String)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["320","330","340"]},{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"List<SObject> result = [select id, name from Account where name ="},{"entry":":(\u2018foo\u2019 + \u2018bar\u2019)];"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"String temp1 = \u2018foo\u2019 + \u2018bar\u2019;"},{"entry":"List<SObject> result = [select id, name from Account where name ="},{"entry":":temp1];"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4"},"In addition, Apex tracks a tuple for each property [modifiers, line, name] in a Java list, . This list (as well as potentially other metadata about the type) is binary serialized and included as the constant value for a static, private, final field defined on the enclosing type.","The runAs construct in Apex uses a closure-style syntax.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"runAs(user) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ some user code"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["420","430","440"]},{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"try {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"switchToUser(user);"]},{"entry":[{},"\/\/ some user code"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"finally {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"switchBackToOriginalUser( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Apex includes type and method modifiers that appear in bytecode, such as public and static, as well as many that do not, including global and testmethod. In the cases where Apex needs to emit a modifier that appears in bytecode, the compiler uses the bytecode version. For the modifiers unique to Apex, an annotation is emitted on the type or method. This annotation has a boolean field for each Apex specific modifier that defaults to false. The annotation that is emitted will include field sets explicitly set the fields that match the modifiers to true.","The Apex code coverage mechanism uses the bytecode line number table to identify user code that requires coverage. Additionally, Apex includes some constructs where line number table information is emitted so that debugging information is correct but where code coverage should be skipped. Examples of this include invocations of the System.debug(String) method and testmethods. When a type has code that includes these constructs, Apex emits a private, static, final field of type java.lang.String into the bytecode with value that is a comma-delimited string of the suppressed line numbers.","For methods on types where the \u2018with sharing\u2019 or \u2018without sharing\u2019 type modifier is used, Apex emits methods to set and remove the appropriate sharing mode using a try\/finally construct. For example:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class with sharing Foo {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public static void bar( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ some user code"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class Foo {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public static void bar( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"try {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"startWithSharingMode( );"]},{"entry":[{},"\/\/ some user code"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"finally {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"endWithSharingMode( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The interpreter uses an abstract representation of a type. The representation is captured in an interface, InterpretableClass, that allows the interpreter to operate over multiple type representations without knowledge of the underlying implementation. This allows the interpreter to implement a relatively small set of generic functionality (e.g. type loading, method lookups) and pushes the details of how types load metadata and execute to concrete classes specific to that task. Further is allows separation of how different type representations interact with the interpreter enabling a type representation extensibility model.","In one embodiment, there are three \u201cstandard\u201d implementations of InterpretableClass:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ByteCodeInterpretableClass,"]},{"entry":[{},"JavaBackedInterpretableClass, and"]},{"entry":[{},"ReflectionInterpretableClass."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The JavaBackedInterpretableClass allows method bodies of a type representation to easily interact with the interpreter. This allows the method implementations to use interpreter services directly, such as loading a type explicitly. This representation is currently used for java.lang.Object and java.lang.Class.","The ReflectionInterpetableClass acts as a proxy that exposes types loaded in the real JVM to the interpreter. This allows interoperation between types loaded in the interpreter and the real JVM. The type manages execution of methods by marshaling arguments into the real JVM, executing the method via reflection, and the marshaling the return value, if any, back into the interpreter.","One application of this type representation is as an escape mechanism for performance critical code allowing it to run directly in the JVM. A possible longer term application is as the primary means of interoperation between the interpreter and a host environment (such as the SFDC service). A limitation of this type representation currently is that it is unable to be a super class in a type hierarchy in the interpreter.","The interpreter also uses an abstract representation of object instances. This representation is captured in an interface, ObjectInstance (below), that allows the interpreter to operate over multiple object instance representations without knowledge of the underlying implementation. This allows the interpreter to implement a relatively small set of generic functionality (e.g. heap walking, virtual method lookups) and pushes the details of how types load metadata and execute to concrete classes specific to that task. Further, in combination with the InterpretableClass interface, this allows separation of how different type representations interact with the interpreter enabling a type representation extensibility model.","There is a concrete implementation of ObjectInstance that corresponds to each implementation of InterpretableClass. For instance, ByteCodeInterpretableClass has a corresponding ByteCodeObjectInstance.","In one embodiment, the interpreter, via the ByteCodeInterpretableClass, implements the full set of bytecode instructions from, for example, Java 1.6. Instruction issuance is performed using a switch statement that has a case for all possible bytecode instructions. A simple loop drives the execution of a code block and individual instructions are able to terminate the loop as necessary (eg when the method returns).","The implementations of the instructions use the ObjectInstance and InterpretableClass interfaces allowing bytecode to manipulate any type loaded into the system transparently. The runtime call stack similarly takes advantage of the ObjectInstance\/InterpretableClass abstraction to allow seamless method invocation into and out of bytecode. A small set of directives allows a method implementation to inform the stack of the manner in which it completed.","None\u2014no stack action is necessary. This is the typical response if a method is yielding control to a method that it is invoking","Pop\u2014pop the current frame from the stack. This is the typical response when a void method returns.","PopHasReturn\u2014pop the current frame from the stack and push its return value into the local stack of the calling method. This is the typical response when a non-void method returns.","ExceptionThrown\u2014the current method raised an exception. The system searches for appropriate filters to handle the exception and delivers control to the filter handlers appropriately.","Tailcall\u2014replace the current method frame with a new method frame that has already been pushed on the stack.","One motivation in moving the Apex runtime to bytecode interpretations is performance. The broader explanation of these performance considerations below. In more local optimizations, bytecode interpretation has two optimizations.","The first optimization is to use stack windows instead of parameter passing for method invocation. This technique takes advantage of the Java interpretation semantic that passes the top \u201cn\u201d stack variables in the caller to become local variables in the callee's context. The stack window technique stores stack and local variables for multiple methods in a shared data structure. When a method invokes another, a window into the shared data structure is passed to the callee. This technique allows a long lived data structure, the shared stack and local variables, to hold most of the method invocation data which reduces the amount of memory garbage created and also increases the locality of data to better utilize processor caches.","The second optimization uses a struct to store stack and local variable data. This struct has a 32-bit integer field and an object reference. The integer field holds data for all primitive types while the object field holds all reference types. This struct allows a single logical stack or local variable slot to hold all data types with a minimum of conversion required. Note that the 64-bit primitives, double and long, still span two variables slots as is required by the Java standard and require manipulation to reform during interpretation.","Apex supports two ways to execute a SOQL query: statically and dynamically. A static SOQL query is specified by inlining the query within the surrounding apex code. The inline query supports binding arbitrary expressions to variables defined in the query. For example:\n\nAccount a=[select id, name from Account where name=:name];\n","Integrating the bytecode into the service is to make bytecode generation and interpretation a plugin replacement for the current tree-based model based on an organization permission. There are two advantages to this approach. First, it allows the move to the bytecode based runtime to be transparent to the rest of the service. This is necessary as there are thousands of call sites within the service that reference the Apex runtime in some manner. Second, it allows us to pilot the bytecode runtime and gradually increase the number of organizations using it as we get more data on the stability, performance, and correctness characteristics of the implementation compared to the tree-based runtime.","In one embodiment, wall APIs provide the abstraction that allows transparently switching between the tree-based and bytecode runtimes. Most of the wall is based on a set of interfaces. We create a parallel implementation of concrete classes implementing these interfaces that wrap the bytecode runtime. A new top level wall construct, ApexEngine, encapsulates the logic to select the appropriate apex implementation for this organization and returns an ApexContext implementation that acts as a factory for all subsequent wall calls in the request without the need to reevaluate the permission.","Note that the objects returned by wall APIs are request specific. This means that caching objects returned by the wall across request boundaries is unsupported. In particular, if the organization permission controlling which runtime is used is changed between requests then errors can occur. For example, caching an ApexObjectType that represents Integer (or an entire method signature) in a static fields and then using it to perform comparisons against types found in method signatures will give incorrect results. Instead, the type or signature is loaded on a per request basis and then a comparison is performed.","In one embodiment, the integration of bytecode into the SFDC service uses the three standard type representations. User code as well as file based Apex is represented using the ByteCodeInterpretableClass. For Java runtime classes, some types are represented with ByteCodeInterpretableClass and some using ReflectionInterpretableClass. In one embodiment, Java runtime types are loaded as ReflectionInterpretableClass. In alternate embodiments, a whitelist may be created of types that are allowable for load with ReflectionInterpretableClass and all other types will be loaded using ByteCodeInterpretableClass. JavaBackedInterpretableClass is not explicitly used, but is the basis for the java.lang.Object and java.lang.Class types used during Apex execution.","Additionally, the SFDC service integration utilizes two additional type representations. SObjectInterpretableClass is a projection of SObject entities into the interpreter. It exposes Entity fields as fields on the class as well as the instance methods callable from Apex on SObjects. WrapperInterpretableClass projects Apex wrapper types (common.apex.runtime.impl.WrapperType) into the interpreter. This is a mapping of static and instance wrapper methods as class methods. WrapperTypes do not support fields. As the implementation of SObjects and WrapperTypes in the interpreter are not native, we are required to marshal values from the interpreter to a form that these types understand. This requires SFDC specific extensions to the marshaler.","Apex collections may be represented as wrapper types. Although very similar to Java's collections, there are differences that the existing Apex collections may be exposed as WrapperInterpretableClass. One difference is that some methods have different signatures between Java and Apex (e.g. Java's List.remove returns a boolean, Apex's List.remove returns an element type).","Another difference is that Apex enforces different casting semantics that Java. For instance, an object of type List<Account> in Apex would fail when you attempted to cast List<Contact> with a class cast exception. In Java, that cast would succeed until you attempted an operation on the casted list (or sometimes beyond).","Finally, Apex uses the same type to represent readonly and writable objects whereas Java achieves a similar semantic using an interface and two implementations. In the long-term we would like to shift the generated Apex bytecode to use Java collections directly given the major commonality.","In one embodiment, the primary storage location for generated bytecode is FileForce. The bytecode will be stored in an Udd FFX_BLOB column on the core.apex_class and core.apex_trigger tables. We will define a new organization permission in order to allow the storage location to be configurable between FileForce and the DB on an organization granularity basis. In one embodiment, we will also define a minimum data size of 32 k before pushing the data from the db to FFX.","At runtime, the bytecode will be loaded through the distributed cache as part of the ApexClassInfo which is currently used to load the Apex source code.","In one embodiment, Apex utilizes serialization in two distinct ways in the tree-based implementation. One way is to cache type definitions in the form of the AST generated by the parser for use in subsequent executions. The other is to serialize object graphs for use in subsequent requests, such as state in scheduled apex, batch apex, or VisualForce controllers. Bytecode affects both of these uses.","The bytecode implementation no longer needs to serialize type definitions. This is replaced by storing the bytecode representation, which is a binary format, of the type definition. In one embodiment, the bytecode generated by the Apex compiler is standard Java\u00ae bytecode. As such, we expect few problems related to versioning the bytecode from release to release. We do, however, expect to want to change the bytecode representation of various Apex constructs such as those described above as the Apex language evolves. In most cases, we expect the existing bytecode to continue to work. When we do require a breaking change, we will update the version number for class files generated by the compiler and loaded by the interpreter. The interpreter will consider any classes it finds with a different version number stale and regenerate the class file from source.","The bytecode implementation also allows serialization of object instances. This is functionally equivalent to the object instance serialization in the tree-based implementation. Tree-based object instances can not be deserialized into an organization that is set to use bytecode. Because we will not flip this permission very often (hopefully just once) per organization that we can identify times when there is no serialized state that will be broken or alternatively that the organization is aware that it needs to regenerate the serialized state.","The major motivation to move to bytecode is performance. The major concern for Apex is how we handle a comparatively large code base of user code (+140M lines) within a service where Apex execution is relatively sparse (\u02dc1% of overall CPU use). We decided the focus should be on loading, executing, and unloading Apex code as quickly as possible while minimizing the resources required. The bytecode implementation is tuned in several ways to support these goals.","The choice of bytecode itself aids in this goal. The compilation of the Apex code required to execute an request can often be a significant percentage of the overall request time. As such, Apex employs a two-level cache (memory->memcached) to store compiled type definitions. The tree-based implementation uses serialized ASTs in this cache which is the source of three issues.","First, since the AST is an arbitrary and sometimes deep tree, Java\u00ae serialization causes a stack overflow during the serialization into or deserialization out of the cache. This causes the system to recompile the class from source, incurring that expense on every request.","Second, the serialized AST is quite large compared to the original source (on average \u02dc10\u00d7 the size) which limits the amount of cached type definitions we can keep in local memory and increases the time required to download from memcached.","Third, Java\u00ae deserialization is slow and does not support progressive deserialization so the entire type definition is deserialized even if we only need to execute one method. In contrast, the bytecode implementation can create a binary form for all Apex defined types (the bytecode itself) which is relatively concise (typically close to the size of the input source). In one embodiment, we use BCEL to parse class files which allows progressive parsing of the class file.","In one embodiment, the bytecode implementation performs lazy linking The interpreter attempts to delay loading and parsing of type information as late as is allowed within the java specification requirements. This is similar to and a continuation of the lazy linking semantics in the current tree-based implementation. This allows the minimum amount of code to be loaded and parsed to execute an Apex request. Additionally, the interpreter does not cache references to types internally allowing quick conversion of type information to garbage when a request completes.","In one embodiment, the interpreter implementation throws a two new exception types. InterpreterRuntimeException signifies a fatal error in the interpreter itself. InterpreterExecutionException signifies a user exception during bytecode execution. These two types are handled by the wall implementation for bytecode so consumers need not deal with them directly.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 5","b":["510","510","512","514","516","517","518","520","522","524","526","528","510"]},"Environment  is an environment in which an on-demand database service exists. User system  may be any machine or system that is used by a user to access a database user system. For example, any of user systems  can be a handheld computing device, a mobile phone, a laptop computer, a work station, and\/or a network of computing devices. As illustrated in  (and in more detail in ) user systems  might interact via a network  with an on-demand database service, which is system .","An on-demand database service, such as system , is a database system that is made available to outside users that do not need to necessarily be concerned with building and\/or maintaining the database system, but instead may be available for their use when the users need the database system (e.g., on the demand of the users). Some on-demand database services may store information from one or more tenants stored into tables of a common database image to form a multi-tenant database system (MTS). Accordingly, \u201con-demand database service \u201d and \u201csystem \u201d will be used interchangeably herein.","A database image may include one or more database objects. A relational database management system (RDMS) or the equivalent may execute storage and retrieval of information against the database object(s). Application platform  may be a framework that allows the applications of system  to run, such as the hardware and\/or software, e.g., the operating system. In an embodiment, on-demand database service  may include an application platform  that enables creation, managing and executing one or more applications developed by the provider of the on-demand database service, users accessing the on-demand database service via user systems , or third party application developers accessing the on-demand database service via user systems .","The users of user systems  may differ in their respective capacities, and the capacity of a particular user system  might be entirely determined by permissions (permission levels) for the current user. For example, where a salesperson is using a particular user system  to interact with system , that user system has the capacities allotted to that salesperson. However, while an administrator is using that user system to interact with system , that user system has the capacities allotted to that administrator. In systems with a hierarchical role model, users at one permission level may have access to applications, data, and database information accessible by a lower permission level user, but may not have access to certain applications, database information, and data accessible by a user at a higher permission level. Thus, different users will have different capabilities with regard to accessing and modifying application and database information, depending on a user's security or permission level.","Network  is any network or combination of networks of devices that communicate with one another. For example, network  can be any one or any combination of a LAN (local area network), WAN (wide area network), telephone network, wireless network, point-to-point network, star network, token ring network, hub network, or other appropriate configuration. As the most common type of computer network in current use is a TCP\/IP (Transfer Control Protocol and Internet Protocol) network, such as the global internetwork of networks often referred to as the \u201cInternet\u201d with a capital \u201cI,\u201d that network will be used in many of the examples herein. However, it should be understood that the networks are not so limited, although TCP\/IP is a frequently implemented protocol.","User systems  might communicate with system  using TCP\/IP and, at a higher network level, use other common Internet protocols to communicate, such as HTTP, FTP, AFS, WAP, etc. In an example where HTTP is used, user system  might include an HTTP client commonly referred to as a \u201cbrowser\u201d for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system  and network , but other techniques might be used as well or instead. In some implementations, the interface between system  and network  includes load sharing functionality, such as round-robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server, each of the plurality of servers has access to the MTS' data; however, other alternative configurations may be used instead.","In one embodiment, system , shown in , implements a web-based customer relationship management (CRM) system. For example, in one embodiment, system  includes application servers configured to implement and execute CRM software applications as well as provide related data, code, forms, webpages and other information to and from user systems  and to store to, and retrieve from, a database system related data, objects, and Webpage content.","With a multi-tenant system, data for multiple tenants may be stored in the same physical database object, however, tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant's data, unless such data is expressly shared. In certain embodiments, system  implements applications other than, or in addition to, a CRM application. For example, system  may provide tenant access to multiple hosted (standard and custom) applications, including a CRM application. User (or third party developer) applications, which may or may not include CRM, may be supported by the application platform , which manages creation, storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .","One arrangement for elements of system  is shown in , including a network interface , application platform , tenant data storage  for tenant data , system data storage  for system data  accessible to system  and possibly multiple tenants, program code  for implementing various functions of system , and a process space  for executing MTS system processes and tenant-specific processes, such as running applications as part of an application hosting service. Additional processes that may execute on system  include database indexing processes.","Several elements in the system shown in  include conventional, well-known elements that are explained only briefly here. For example, each user system  could include a desktop personal computer, workstation, laptop, PDA, cell phone, or any wireless access protocol (WAP) enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system  typically runs an HTTP client, e.g., a browsing program, such as Microsoft's Internet Explorer browser, Netscape's Navigator browser, Opera's browser, or a WAP-enabled browser in the case of a cell phone, PDA or other wireless device, or the like, allowing a user (e.g., subscriber of the multi-tenant database system) of user system  to access, process and view information, pages and applications available to it from system  over network .","Each user system  also typically includes one or more user interface devices, such as a keyboard, a mouse, trackball, touch pad, touch screen, pen or the like, for interacting with a graphical user interface (GUI) provided by the browser on a display (e.g., a monitor screen, LCD display, etc.) in conjunction with pages, forms, applications and other information provided by system  or other systems or servers. For example, the user interface device can be used to access data and applications hosted by system , and to perform searches on stored data, and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above, embodiments are suitable for use with the Internet, which refers to a specific global internetwork of networks. However, it should be understood that other networks can be used instead of the Internet, such as an intranet, an extranet, a virtual private network (VPN), a non-TCP\/IP based network, any LAN or WAN or the like.","According to one embodiment, each user system  and all of its components are operator configurable using applications, such as a browser, including computer code run using a central processing unit such as an Intel Pentium\u00ae processor or the like. Similarly, system  (and additional instances of an MTS, where more than one is present) and all of their components might be operator configurable using application(s) including computer code to run using a central processing unit such as processor system , which may include an Intel Pentium\u00ae processor or the like, and\/or multiple processor units.","A computer program product embodiment includes a machine-readable storage medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system  to intercommunicate and to process webpages, applications and other data and media content as described herein are preferably downloaded and stored on a hard disk, but the entire program code, or portions thereof, may also be stored in any other volatile or non-volatile memory medium or device as is well known, such as a ROM or RAM, or provided on any media capable of storing program code, such as any type of rotating media including floppy disks, optical discs, digital versatile disk (DVD), compact disk (CD), microdrive, and magneto-optical disks, and magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data.","Additionally, the entire program code, or portions thereof, may be transmitted and downloaded from a software source over a transmission medium, e.g., over the Internet, or from another server, as is well known, or transmitted over any other conventional network connection as is well known (e.g., extranet, VPN, LAN, etc.) using any communication medium and protocols (e.g., TCP\/IP, HTTP, HTTPS, Ethernet, etc.) as are well known. It will also be appreciated that computer code for implementing embodiments described herein can be implemented in any programming language that can be executed on a client system and\/or server or server system such as, for example, C, C++, HTML, any other markup language, Java\u2122, JavaScript, ActiveX, any other scripting language, such as VBScript, and many other programming languages as are well known may be used. (Java\u2122 is a trademark of Sun Microsystems, Inc.).","According to one embodiment, each system  is configured to provide webpages, forms, applications, data and media content to user (client) systems  to support the access by user systems  as tenants of system . As such, system  provides security mechanisms to keep each tenant's data separate unless the data is shared. If more than one MTS is used, they may be located in close proximity to one another (e.g., in a server farm located in a single building or campus), or they may be distributed at locations remote from one another (e.g., one or more servers located in city A and one or more servers located in city B).","As used herein, each MTS could include one or more logically and\/or physically connected servers distributed locally or across one or more geographic locations. Additionally, the term \u201cserver\u201d is meant to include a computer system, including processing hardware and process space(s), and an associated storage system and database application (e.g., OODBMS or RDBMS). It should also be understood that \u201cserver system\u201d and \u201cserver\u201d are often used interchangeably herein. Similarly, the database object described herein can be implemented as single databases, a distributed database, a collection of distributed databases, a database with redundant online or offline backups or other redundancies, etc., and might include a distributed database or storage network and associated processing intelligence.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":["FIG. 6","FIG. 6","FIG. 6","FIG. 6","FIG. 6"],"b":["510","516","512","512","512","512","512","514","516","516","522","523","524","525","630","632","634","636","638","600","600","602","604","610","612","614","616","510"],"sub":["1","N"]},"User system , network , system , tenant data storage , and system data storage  were discussed above in . Regarding user system , processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices, short term, and\/or long term memory. Input system C may be any combination of input devices, such as one or more keyboards, mice, trackballs, scanners, cameras, and\/or interfaces to networks. Output system D may be any combination of output devices, such as one or more monitors, printers, and\/or interfaces to networks.","As shown by , system  may include a network interface  (of ) implemented as a set of HTTP application servers , an application platform , tenant data storage , and system data storage . Also shown is system process space , including individual tenant process spaces  and a tenant management process space . Each application server  may be configured to tenant data storage  and the tenant data  therein, and system data storage  and the system data  therein to serve requests of user systems . The tenant data  might be divided into individual tenant storage areas , which can be either a physical arrangement and\/or a logical arrangement of data. Within each tenant storage area , user storage  and application metadata  might be similarly allocated for each user. For example, a copy of a user's most recently used (MRU) items might be stored to user storage . Similarly, a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI  provides a user interface and an API  provides an application programmer interface to system  resident processes to users and\/or developers at user systems . The tenant data and the system data may be stored in various databases, such as one or more Oracle\u2122 databases.","Application platform  includes an application setup mechanism  that supports application developers' creation and management of applications, which may be saved as metadata into tenant data storage  by save routines  for execution by subscribers as one or more tenant process spaces  managed by tenant management process  for example. Invocations to such applications may be coded using PL\/SOQL  that provides a programming language style interface extension to API . A detailed description of some PL\/SOQL language embodiments is discussed in commonly owned co-pending U.S. Provisional Patent Application 60\/828,192 entitled, PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS, by Craig Weissman, filed Oct. 4, 2006, which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes, which manages retrieving application metadata  for the subscriber making the invocation and executing the metadata as an application in a virtual machine.","Each application server  may be communicably coupled to database systems, e.g., having access to system data  and tenant data , via a different network connection. For example, one application server might be coupled via the network  (e.g., the Internet), another application server might be coupled via a direct network link, and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol (TCP\/IP) are typical protocols for communicating between application servers  and the database system. However, it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.","In certain embodiments, each application server  is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason, there is preferably no server affinity for a user and\/or organization to a specific application server . In one embodiment, therefore, an interface system implementing a load balancing function (e.g., an F5 Big-IP load balancer) is communicably coupled between the application servers  and the user systems  to distribute requests to the application servers . In one embodiment, the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms, such as round robin and observed response time, also can be used. For example, in certain embodiments, three consecutive requests from the same user could hit three different application servers , and three requests from different users could hit the same application server . In this manner, system  is multi-tenant, wherein system  handles storage of, and access to, different objects, data and applications across disparate users and organizations.","As an example of storage, one tenant might be a company that employs a sales force where each salesperson uses system  to manage their sales process. Thus, a user might maintain contact data, leads data, customer follow-up data, performance data, goals and progress data, etc., all applicable to that user's personal sales process (e.g., in tenant data storage ). In an example of a MTS arrangement, since all of the data and the applications to access, view, modify, report, transmit, calculate, etc., can be maintained and accessed by a user system having nothing more than network access, the user can manage his or her sales efforts and cycles from any of many different user systems. For example, if a salesperson is visiting a customer and the customer has Internet access in their lobby, the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.","While each user's data might be separate from other users' data regardless of the employers of each user, some data might be organization-wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus, there might be some data structures managed by system  that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors, the MTS should have security protocols that keep data, applications, and application use separate. Also, because many tenants may opt for access to an MTS rather than maintain their own system, redundancy, up-time, and backup are additional functions that may be implemented in the MTS. In addition to user-specific data and tenant specific data, system  might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports, news, postings, and the like that are sharable among tenants.","In certain embodiments, user systems  (which may be client systems) communicate with application servers  to request and update system-level and tenant-level data from system  that may require sending one or more queries to tenant data storage  and\/or system data storage . System  (e.g., an application server  in system ) automatically generates one or more SQL statements (e.g., one or more SQL queries) that are designed to access the desired information. System data storage  may generate query plans to access the requested data from the database.","Each database can generally be viewed as a collection of objects, such as a set of logical tables, containing data fitted into predefined categories. A \u201ctable\u201d is one representation of a data object, and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that \u201ctable\u201d and \u201cobject\u201d may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example, a CRM database may include a table that describes a customer with fields for basic contact information such as name, address, phone number, fax number, etc. Another table might describe a purchase order, including fields for information such as customer, product, sale price, date, etc. In some multi-tenant database systems, standard entity tables might be provided for use by all tenants. For CRM database applications, such standard entities might include tables for Account, Contact, Lead, and Opportunity data, each containing pre-defined fields. It should be understood that the word \u201centity\u201d may also be used interchangeably herein with \u201cobject\u201d and \u201ctable\u201d.","In some multi-tenant database systems, tenants may be allowed to create and store custom objects, or they may be allowed to customize standard entities or objects, for example by creating custom fields for standard objects, including custom index fields. U.S. patent application Ser. No. 10\/817,161, filed Apr. 2, 2004, entitled \u201cCustom Entities and Fields in a Multi-Tenant Database System\u201d, and which is hereby incorporated herein by reference, teaches systems and methods for creating custom objects as well as customizing standard objects in a multi-tenant database system. In certain embodiments, for example, all custom entity data rows are stored in a single multi-tenant physical table, which may contain multiple logical tables per organization. It is transparent to customers that their multiple \u201ctables\u201d are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the following drawings like reference numbers are used to refer to like elements. Although the following figures depict various examples, the invention is not limited to the examples depicted in the figures.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
