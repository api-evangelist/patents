---
title: Method for file system replication with broadcasting and XDSM
abstract: A method and system are provided for replicating data in a network to a plurality of client applications which are associated to at least one server. Network traffic is reduced and an easy-to-do automated data replication is achieved basically by monitoring and storing modification information on server data exploiting XDSM capabilities in order to generate replication data for a subsequent distribution to the clients and by broadcasting said replication data from said server system to said client systems. Further, the replication data can advantageously be streamed to the clients through the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06934723&OS=06934723&RS=06934723
owner: International Business Machines Corporation
number: 06934723
owner_city: Armonk
owner_country: US
publication_date: 20001219
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["PRIOR FOREIGN APPLICATION","SUMMARY OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["This application claims priority from European patent application number 99125773.4, filed Dec. 23, 1999, which is hereby incorporated herein by reference in its entirety.","1. Technical Field","The present invention relates to a method and system for replicating data in a computer network. In particular, the present invention relates to a method and system for replicating data in a network in which a plurality of client applications are associated to at least one server application.","2. Background Art","Basically, the subject matter of the present invention is applicable to network traffic in a broad variety of applications, i.e. whenever an application has a distributed nature or if the same or a similar message is able to be addressed to a plurality of clients placed in the network. Network computing is an important sector of information technology. Modern business uses distributed applications for operating distributed file systems spread across large regions supported by a network of computer systems spanning that region and used by a plurality of persons for a plurality of different purposes.","The increasing acceptance of the Internet during the last years increased the network traffic even more.","In such networking environments there is often the need to replicate data, i.e., complete data bases as well as other arbitrary sets of data for a plurality of purposes to various locations within the network.","In the case of distributed file systems, data are replicated all across the network onto a plurality of participating subsystems almost due to performance requirements as a faster access to data can be provided when said data is replicated in a location where it is used frequently. Data are replicated further as they can be comfortably processed on the decentralized locations as sufficient computing resources are present in a majority of subsystems maintaining the decentralized copies of the unique data. Such data replication mechanisms are found spread across LANs (local area networks), WANs (wide area networks), and the world wide web including finally even everybody's home computer into such network.","But even in TV devices, home computers, office computers, notebooks, handys, mini computer devices, etc. there is a piece of software setting up the user-directed part of a plurality of applications. Such software, however, has to be updated from time to time as well, and is thus subject of a data replication procedure as well, as every new version of any program has to be installed in such user terminals.","In distributed file based applications the obligation to replicate data results in the problem to keep the decentralized replicas consistent with the master copy throughout the entire network. One possible approach to solve this consistency issue is to grant a read only access onto the replicated data only, to concentrate all possible data changes only on the centralized master data and to update at a certain point in time all replicas within the network based on the centralized master data in order to preserve data consistency.","The last step of updating the replicas placed across the network is, however, a problem because each of the replicas is updated separately in today's systems. It is assumed that the master data has a size of S bytes and a number N of terminals each hosting a decentralized set of files being subject to the updating procedure. To update one single replica in the network a copy operation has to be executed which transfers these S bytes from the central system. In order to update all N replicas in the network a total of N\u00d7S bytes would have to be transferred through the network. This is referred to herein after as \u2018point-to-point\u2019 data replication. Depending on the number N of replicas and the data size S this replication operation puts some heavy load on the network.","A first problem is thus to keep track of all file changes occurring in such central data server.","A second problem is to perform data replication with a decreased network traffic compared to prior art \u2018point-to-point\u2019 data replication.","It is thus an object of the present invention to provide a method and system for replicating data in a network comprising at least one data server computer system and a plurality of client computer systems connectable to said network, in which it is possible to reliably keep track of all file changes occurring in said central data server and then to perform the data replication onto the plurality of client systems with a significantly decreased amount of network traffic.","It is a further object of the present invention to provide such method and system which is adapted and dedicated to file systems managed by data servers according to the XDSM X-open standard, or comparable methodologies implemented for instance based on stackable file systems.","These objects of the invention are achieved by the features stated in enclosed independent claims. Further advantageous arrangements and embodiments of the invention are set forth in the respective subclaims. Network traffic is reduced and an easy-to-do automated data replication is achieved basically by monitoring and storing modification information on server data exploiting XDSM capabilities in order to generate replication data for a subsequent distribution to the clients and by broadcasting said replication data from said server system to said client systems.","According to a first aspect of the present invention this is achieved basically by monitoring and storing modification information on server data in order to generate replication data for a subsequent distribution to the clients and by broadcasting said replication data from said server system to said client systems.","Further, the replication data can advantageously be streamed to the clients through the network.","Further, and with special reference to distributed file based application systems file changes occurring in the data server's file system are monitored and after a replication stream has been broadcasted through the network the success of a replication on the plurality of client systems is monitored based on some acknowledgments which are directed back to the server and issued by a client system when a data replication has completed successfully.","According to a further, preferred aspect of the present invention, the task of monitoring said file changes comprises the step of communicating with the file system of the server via program facilities which are comprised of the XDSM-standard. XDSM comprises a set of application programming interfaces, API, and so-called Callback-functions which monitor each change in files of the server's file system. An inventional replication control process monitors the file system of the server by a communication with said APIs and Callback functions.","When said replication control process is initialized, i.e. after system start or after further events which are basically freely definable by a system operator:\n\n","After initialization or after a change of important system parameters as e.g. a redefinition of the fraction of the file system to be replicated, respectively the replication control process broadcasts a replication stream into the network which comprises a full replication of the data asset fractions to be replicated.","Then, the type of replication method can be selected to be either a \u03b4-replication or a so-called full-replication.","In case of a \u03b4-replication each change in the relevant parts of the data asset to be replicated which happened after the before mentioned initial broadcasting is tracked by the replication control process. Then, a new broadcast stream is set up comprising the changed data, either when a predetermined time limit has elapsed, or triggered by interaction of a system administrator at the data server's site, and is broadcasted into the network as described above. Broadcasting is then cyclically repeated until either the minimum time has elapsed, or the minimum number of cyclic replication has been broadcasted, or the predetermined fraction of client systems intended to receive the replication data stream has been reached.","In case of the full-replication method each time when the predetermined interval cycle has elapsed and some file changes have occurred, a new replication data stream is formed comprising the total of the data asset to be replicated and is broadcasted through the network. In this case the former replication data stream which stems from a former replication cycle is not repeated.","According to a preferred aspect of the present invention a client system which has successfully received a replication data stream, either delta or full-replication, acknowledges the successful receipt via a separate logical connection to the replication control process located at the data server. All acknowledgments are then gathered and some type of statistical computations can be started in order to decide how long a particular broadcast stream has to be repeated. Such type of prevision is advantageously updated with the incoming new acknowledgments.","According to a further additional aspect of the present invention a client system which is switched online infrequently only and can thus be reached by any replication data broadcast stream not easily can use said connection between client system and data server in order to request a single full replication which can then performed by any prior art point to point data transfer.","The inventional data replication method has the particular advantage to be very flexible in the sense that it can easily be taken a decision if a delta-replication or a full-replication is desired. Thus, individual requirements set up by any particular business environment can be easily met. For example, when there is a high rate of changes occurring in short intervals of time in the central data server file system a full replication may be advantageous compared to a \u03b4-replication. On the other hand, when the number of changes is small a \u03b4-replication may be preferred.","The inventional data replication method can be applied in any network using some transfer protocols which support a combination of broadcasting and streaming. The inventional method and system can advantageously be used for distributed CAD\/CAM applications, or for distributed web-server systems which are intended to provide basically always the same data but which have been decentralized because of a better performance or any reasons implied by the underlying network topology.","It should be noted that the inventional method and system can be advantageously used for any mobile clients which are usually switched online only very rarely and thus are rarely connected to the data server's file system and thus have to replicate the data locally.","The inventional data replication method can be used universally. No specific file system like DFS (Distributed File System) or NFS (Network Filesystem), for example is necessary.","Further, the network traffic involved in data replication is reduced drastically.","Further, the task of continuously updating a software system can be advantageously automated by the inventional replication method. No distribution lists and prior art update procedures are necessary as an update procedure can be performed optionally by inserting the updated files into the client systems file system and thus activating a new version automatically without interaction of the end-user associated with a particular client system. In this case an operator has only to install a respective software tool implementing the inventional method and the rest is done automatically, i.e. the data replication is performed when any of the plurality of client systems goes online and is thus enabled to receive the data replication broadcast stream.","In this respect some automated transparent client file update is achieved directly after a log-on into the network. An explicitly user-selected and user-triggered data replication process is thus only optional.","Depending on the business environment it is proposed to fix some predetermined points in time to which a broadcast stream issued by the data server is broadcasted into the network. Thus, if said points in time are made known to the plurality of clients a timer provided in the client system can be automatically controlled to start the client system, to go online and to receive the broadcast stream. Alternatively, systems can be started by the end-user, too. This increases the number of successful automated data replications to the client systems.","With general reference to the figures and with special reference now to , the hardware components used during the inventional method are described in more detail below.","A central data server system  is depicted to comprise a master data repository  and a stream server . Said server is connected to a number of N client systems via an appropriate network. The client systems are addressed by their TCP\/IP addresses. No particular type of network is required for the purposes of the present invention. Even wireless communication can be used. Each of the client systems  . . . N has a stream recorder  and some storage  for storing the replication data denoted as \u2018Replica\u2019. According to a preferred aspect of the present invention in which the N client systems send back some control information to the Central system\u2014which is described below in more detail\u2014a bidirectional connection should be possible to be enabled between the server system  and each client system, respectively. An inter-client connection is not required.","With reference now to , the server's file system  is depicted as far as it is subjected to the inventional replication control. A subset  of the server file system  is denoted as \u2018rdir\u2019 with associated subdirectories as it reveals from the drawing. Said subset  is defined as the set of files being monitored by the before-mentioned set of APIs and so-called Callback-functions comprised of the XDSM-standard which run permanently on the data server  and which keep track of any file changes occurring during any write access in said file system. This prior art feature can advantageously be exploited for the purposes of the present invention.","An inventional replication control process implemented in the server system and which forms a significant part of the inventional method and system receives the information about the changed files  of the selected subset  of the data server's file system. Said subset of changed files  is thus regarded exemplarily as a \u2018replica\u2019. Although files in other subdirectories like \u2018videos\u2019 or \u2018u\u2019 are not monitored, and therefore not comprised of the replication file set, the inventional method is not limited to just one single set of files in subdirectories of the file system , as other subsets of file system similar to said replication file set  can be monitored too.","With reference now to  which shows the most essential software and hardware components involved in the inventional replication distribution and control process the replication control process which is implemented in the present example as a daemon process  is told the TCP\/IP addresses of all clients -N to be intended to receive the broadcast stream.","As soon as the replica  is ready for distribution it is made available to the replication control daemon  which broadcasts it into the network by means of a broadcaster process . Broadcasting is symbolically depicted in the bottom portion of  as a circulating data stream.","Depending on the actual situation some of the clients depicted are online, some are off-line and thus, only some fraction of them will be able to receive the data replication stream. In order to give the client systems an increased chance of receiving the replication stream it is proposed to repeat the broadcasting procedure until some predetermined fraction of client systems has successfully received it. Then, the broadcasting is terminated. The remaining portion of clients which have not yet received successfully any broadcast stream are proposed to be updated individually according to prior art. This is depicted in the right portion of  with respect to client N. For the purpose of the individual update some program means  is provided in the replication control daemon. This means is denoted as \u2018updater\u2019 .","With reference now to  the basic steps triggered by programming means provided in the central data server  are described in more detail further below. Where appropriate, additional reference will be made to  which illustrates more clearly the concurrent presence of several processes which contribute to the inventional method and which are running on different hardware systems, e.g. on the data server  and on the plurality of clients depicted in FIG.  and cooperating with program means located in the server .","In a first step  all file changes are monitored which occur in the data server's file system. In  there is a corresponding item, namely the circle  which is intended to illustrate the corresponding monitoring process, e.g. in the unix domain the before-mentioned daemon.","In , generally, such processes are depicted as circles. Such processes have one or more inputs and one or more outputs which are depicted as arrows with a respective indication of direction. Additionally, essential physical or logical devices, which for example store some data which is relevant for the present inventional data replication method is written between two horizontal lines, respectively.","Said process  monitors file changes in the file system, based on said XDSM APIs which can be used for callbacks to intercept file modification commands in order to determine changes that occur within a specified \u2018Replication File Set\u2019  depicted in FIG. .","\u2018Changed Files\u2019 as depicted in  can be detected by monitoring whether a file that has been opened for a write operation is being closed again. Other control mechanisms are of course possible as well, as e.g. using prior art checksums, if appropriate.","Monitoring starts when the process receives a \u2018Start_Monitor_Trigger\u2019, issued by a further process  described later, or triggered manually by a system operator. Said start-trigger specifies the \u2018Replica_Id\u2019, i.e. a unique identification of the intended Replica, and the \u2018Replication_File_Set\u2019, mentioned above. The process creates a new \u2018Replica\u2019 entry with a \u2018Replica_Id\u2019 as a key for retrieving it in the \u2018Replica Store\u2019 , sets the \u2018<start> Timestamp\u2019, and continues adding \u2018<changed> Files\u2019 from the \u2018File System\u2019  to the \u2018Replica\u2019. This ends once a \u2018Stop_Monitor_Trigger\u2019 is received with the completion of the \u2018Replica\u2019 with the subject \u2018Replica_Id\u2019, and an appropriate \u2018<end> Timestamp\u2019 is added, too. The subject \u2018Replica\u2019 comprising at least the changed files advantageously including the corresponding source directory information is then ready for distribution. Advantageously, the \u2018Replica\u2019 stores enough information in order to re-establish a complete data replication on the client systems without a user interaction being required there.","In a next step, , depicted in  it is decided if a data replication is intended to be started or not.","This is done amongst other things by a process  which is called \u2018Administrate Replication\u2019.","This process can be initiated by a human being\u2014said administrator mentioned above\u2014who initiates various further operations associated with file replication. The most important of them are as follows:\n\n","With reference back to  in case no replication is intended to be performed yet, it is branched via the NO-branch in step  back to step  where the control is continued with monitoring the file changes in the data server. In the YES-branch of step , however, the control flow is continued to show how the replication is actually proposed to be performed.","At some predetermined point in time, or, when the system administrator thinks it is useful, it is decided to finish gathering the file changes and to generate the replication data, i.e. which can be considered as some well-defined plurality of files which in turn comprise the actually changed data. This amount of data which is mentioned above as replica is depicted with reference sign  in FIG. . It should be noted, that before generating said replication data the inventional method is open for an individual decision which replication method to choose, i.e. if to choose a full replication method or a delta-replication method.","Then, in a step  the replication data stream is broadcasted through the network. This process is depicted with reference sign  in FIG. .","This process is responsible for data replication for said plurality of clients. It is triggered by said \u2018Start_Broadcast_Replication_Trigger\u2019 mentioned above. Based on the \u2018Replication_Method\u2019 specified it will either distribute a completed \u2018Replica\u2019, or perform a complete replication of all the data in the \u2018Replication_File_Set\u2019. The distribution is advantageously performed for a plurality of clients which are online concurrently, using Broadcast Streaming. This is controlled by parameters specified in said \u2018Replication_Control_Data\u2019  according to the respective method specified.","Replication_Data is either a given Replica, or all the files in the original Replication_File_Set.","Basically, the Replication_Data are repeatedly streamed until a specified number of \u2018Replication_Cycles\u2019, e.g., 10 is reached, and\/or a specified \u2018Replication_Duration\u2019 as e.g., 5 minutes is exceeded, and\/or an appropriate fraction or amount of clients as specified in \u2018Replication_Fulfillness\u2019 have successfully received the Replication Data, as e.g., 80%, and\/or 1600 of a total of 2000 clients.","In order to facilitate monitoring the data distribution, a composite record \u2018Replication_Acknowledgment\u2019 is created, which has a list of \u2018Client_Id\u2019s with associated \u2018Client_Acknowledgment\u2019s to indicate the distribution status for each client. Additionally, \u2018<achieved> Replication_Fulfillment\u2019 (versus \u2018<required> Replication_Fulfillment\u2019) is the status information used to control whether replication could be stopped. These records are stored in \u2018Replication_History\u2019 , which is updated by the \u2018Monitor_Replication\u2019 process. Said Replication_History is a file advantageously located and accessed by the central server .","With reference back to , said before-mentioned step is depicted with reference sign . Thus, said statistics about the rate of successfully performed data replications on the client systems is set up preferably in the data server and is evaluated in order to decide in a decision  if the intended minimum number of client systems have already received a data replication successfully, or not. In order to achieve this, preferably in the data server some array is provided which provides an entry for each client system. In here, the appropriate information is stored in order to make the before-mentioned decision feasible. For said purpose, at least a flag which indicates successful or unsuccessful data replication is maintained per entry.","In  the process , called \u2018Receive Replica on Client\u2019 is described next.","This process is executed on each client system which is registered to receive \u2018Replica\u2019. The \u2018Client_Id\u2019 of a registered client is known to the Administrator, or, an automated process \u2018Administrate_Replication\u2019, and the associated \u2018Client_Id\u2019 is stored as a part of \u2018Replication_Control_Data\u2019. When a client system goes online, then it checks its local \u2018Client_Replica's\u2019 store  to determine the \u2018Replica_Id\u2019 of the latest update it has got.","Based on this it then issues a \u2018Require_Replica_Trigger\u2019 to the \u2018Update_Single_Replica\u2019 process . As a result of this it might get a newer \u2018Replica\u2019\u2014if a newer one exists which already has been transmitted to other client systems during off-line time of this client. The process stores the newer \u2018Replica\u2019 together with the associated \u2018Replica Id\u2019 in its local \u2018Client_Replica's\u2019 store  as the latest version. At any point in time the process  may receive an unsolicited \u2018<Broadcast> Replica\u2019, which it will receive and store locally, too. Whenever the client system has received a complete \u2018Replica\u2019, it issues a \u2018Received_Replica Trigger\u2019 with its \u2018Client_Id\u2019 and the received \u2018Replica_Id\u2019 to signal a successful receipt of the transmission.","The statistics mentioned above can be calculated by virtue of a further process , called \u2018Monitor Replication\u2019 which receives some replica trigger on a successful data replication on the client and which generates a corresponding replica acknowledgment which is provided for reading by the data server .","This process is responsible to receive client acknowledgments, and to update the \u2018Replication_History\u2019 appropriately. It is triggered by \u2018Received_Replica_Trigger\u2019s. As a result of such an event the \u2018Replication_Acknowledgment\u2019 will be updated appropriately. Therefore the \u2018Client Acknowledgment\u2019 for this \u2018Client Id\u2019 will be set to \u2018ack\u2019, and the \u2018<achieved> Replication_Fulfillment\u2019 number will be recalculated.","As described above, or, alternatively, after having gathered during a particular, predetermined maximum time span it is decided in the data server if broadcasting should be continued or not, step . In case for example when the required minimum number of successful data replications has not yet been reached, control is fed back to step  in FIG. . Otherwise the particular broadcast procedure is completed and the control is fed back to step  in order to be ready to prepare the next broadcast stream.","Additionally and optionally\u2014the client systems which have not been reached for performing a data replication on them can be individually accessed by usual prior art file transfer processes. This is a prior art point-to-point connection which can be switched active whenever one of these remaining clients goes online.","This process is responsible for \u2018Replica\u2019 update of a single client system. It is triggered by a \u2018Require_Replica_Trigger\u2019, which is issued by the client itself when it comes online. Part of the trigger is the client's unique identification (\u2018Client_Id\u2019), together with the latest \u2018Replica_Id\u2019 which the client received earlier. Based on the \u2018Replication_History\u2019 it is decided which \u2018Replica\u2019 the client should receive, or whether to perform a full update of all the data in the \u2018Replication_File_Set\u2019. The data transfer is performed using point-to-point file transfer.","For providing a perfect understanding of the control flow and the data involved as depicted in , and , respectively, the following explanations are given supplementally as a kind of supplemental data dictionary. For said dictionary the following legend applies:\n\n","The triggers mentioned in the present context are implementations of prior art technology. They can be implemented in various ways as it requires the current field of application, for instance as TCP messages, or via RPC (Remote Procedure Call) or RMI (Remote Method Invocation).","In the foregoing specification the invention has been described with reference to a specific exemplary embodiment thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded as illustrative rather than in a restrictive sense.","The present invention can be realized in hardware, software, or a combination of hardware and software. A data replication tool according to the present invention, in particular comprising the processes , partly , and , ,  can be realized in a centralized fashion in said server computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. In particular, the process  should be implemented on each client system.","Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software could be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.","The present invention can also be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which\u2014when loaded in a computer system\u2014is able to carry out these methods.","Computer program means or computer program in the present context mean any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following:\n\n"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and is not limited by the shape of the figures of the accompanying drawings in which:",{"@attributes":{"id":"p-0038","num":"0043"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0039","num":"0044"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0040","num":"0045"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0041","num":"0046"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0042","num":"0047"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
