---
title: Electronic test system and method
abstract: An electronic test system having an object oriented hierarchical infrastructure including classes that allow a test developer or a test user to design a desired electronic test system. The class relationships define the function of the electronic test system. Classes include a procedure class, a test class, a measurement class, a datapoint class, a parameter class, a DUT class, a test system class, a specification class, a run procedure class, a result class, a plug-in class, an exec class, a model class, a device class, a test system device class, a user menu item class, an application class, and a state class. These classes are implemented in a hierarchical structure in which a datapoint is a subset of a measurement, a measurement is a configuration for a test, a test is a group of measurements that share the same test algorithm, and a procedure is an ordered list of tests to be run, and includes a list of measurements and datapoints.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06839650&OS=06839650&RS=06839650
owner: Agilent Technologies, Inc.
number: 06839650
owner_city: Palo Alto
owner_country: US
publication_date: 20011119
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","The present invention pertains to the field of testing complex electronic product devices over many phases of the products life cycle.","2. Statement of the Problem","Test systems are used to test complex electronic product devices over many phases of the product's life cycle which include test development, qualification testing, and manufacturing testing. These complex electronic product devices are tested for many independent parameters and are part of many different model families. Due to the large number of different products, different parameters to be tested and product model families, a test engineer is tasked with constantly modifying the test system without errantly causing the test system to become inoperative due to misplaced modifications or code. In addition, prior art test programs have lacked a common uniform operator interface when operating within these different manufacturing environments and different model families.","Prior art test programs are difficult to design tests for because a test engineer has to focus on the whole test when designing or modifying the individual parts of a test program, such as individual tests, tests lists or test algorithms. In prior art systems, test procedures are incorporated into the test algorithms, thereby making the test algorithm susceptible to errantly entered commands while modifying a test procedure. Further, a test engineer must consider the interactions between a test, lists of tests, test algorithms and the test system. Additionally, whenever the test engineer has to modify a test, he must consider the interactions with the whole system.","In addition, test sequencing can be rigid and inflexible when using test systems designed with large bulky test algorithms incorporated into structured programs. This increases the time a test engineer spends on rewriting or debugging the test system algorithms due to inerrant test procedure modifications or entries. In addition, portions of a test cannot be easily reused by a test engineer because they are written into a larger structured program. This inability to reuse test system code increases time rewriting or reentering new non-reusable test system code.","Another problem faced by test engineers in testing electronic product devices is that they must interface with other manufacturing systems. They often must incorporate a variety of software languages in designing test systems that interface with the electronic product device, the output devices and remote test initiation and monitoring devices. Test designs for these varying devices and systems often need to be developed in different software languages, some obsolete, to incorporate all of the different devices and systems of the test system. Test engineers are also faced with the difficulty of running the test system on unsupported and nonstandard operating systems that present a non functional interface system to the test engineer.","3. Solution to the Problem","The present invention advances the art and helps to overcome the aforementioned problems by providing a hierarchical test system that allows the test designer to modify an individual device and its associated test parameters in individual modules or objects. This allows a test engineer to modify and create the test device parameter objects without affecting the test systems algorithms. The objects are functionally predetermined to interact with the test system through an object interface in a predetermined manner, with good certainty that they will not interact in undocumented ways. This permits each of the objects to be reused in different programs and to be easily modified without affecting parts of the program external to the object.","The definition of the hierarchical levels and assigning an object to each hierarchical level results in the test engineer being able to break down a complex test into manageable units that can be separately considered and the interaction of which can be easily understood. The invention preferably contains a four-level hierarchical system, preferably including the following levels: Procedure, Test, Measurement and Datapoint. The hierarchy is one in which each lower level is a subset of the next higher level. The hierarchy is implemented in the software as a tree of four objects, each of which maps to one of the hierarchical levels. Interactions of the objects are governed by pointers which reflect relationships between hierarchical levels. The invention makes test development and maintenance more efficient because the test procedure data is consistently organized in a logical fashion and is separate from the test algorithm.","The invention preferably contains pure virtual base classes that define the interface between the electronic test system and test software. Actual test software and code component plug-ins are derived from these base classes. By referencing these base classes by Virtual Basic\u2122 test software projects and plug-in projects, the base classes themselves will remain free from unwanted file modification or corruption. This also allows the electronic test system, test software and plug-ins to be revised without affecting each other. This also protects against unwanted and errant code being written during design and modification of new or existing test procedures.","To achieve desired climatic testing conditions for the electronic devices, in one aspect, the invention preferably includes an enclosed testing environment. This enclosed testing environment contains a temperature device and a humidity device, capable of achieving desired climatic testing conditions. The temperature device and humidity device are adapted to communicate with a chamber driver. The chamber driver is adapted to communicate with the processor of the electronic testing device. The test developer can instantly modify temperature and humidity settings for testing the electronic devices under test by changing temperature and humidity settings in the electronic test system. The enclosed testing environment allows the test developer to test electronic devices within a temperature controlled and humidity controlled environment. The enclosed testing environment is capable of containing a plurality of electronic devices under test. The plurality of electronic devices under test are adapted to communicate with the electronic test system while in the enclosed testing environment.","The electronic test system preferably is designed to be controlled automatically and remotely from another program, such as a manufacturing process controller or an environmental test profile controller. Test developers and test users can modify test procedures and execute the invention from different areas of the production and manufacturing processes. The electronic test system is designed with a common and popular programming language to help ensure common and uniform development and modification throughout the manufacturing and production process and between its various users and developers.","The invention provides an electronic test system for testing an electronic device under test (DUT), the test system comprising: an electronic processor; an electronic memory coupled to the electronic processor; a hierarchical program structure residing in the memory and executed by the processor, the hierarchical program structure having multiple levels including a measurement level corresponding to a measurement to be performed on the DUT, a test level corresponding to one or more of the measurements, and a procedure level corresponding to an ordered list of the tests to be performed on the DUT. Preferably, the hierarchical program structure further includes a datapoint level corresponding to a single result of a measurement, and the measurement level includes a plurality of the datapoints.","In another aspect, the invention provides an electronic test system for testing an electronic device under test (DUT), the test system comprising: an electronic processor; an electronic memory coupled to the electronic processor; a hierarchical program structure residing in the memory and executed by the processor, the hierarchical program structure having multiple levels including a measurement level corresponding to a measurement to be performed on the DUT, a test level corresponding to one or more of the measurements, and a procedure level corresponding to an ordered list of the tests to be performed on the DUT, each level embodied in the electronic test system as a software object. Preferably, the hierarchical program structure further includes a datapoint level, and the measurement level corresponds to a group of datapoints, the datapoint level embodied in the electronic test system as a datapoint software object. Preferably, the hierarchical program structure further includes a product model level corresponding to a set of procedures for testing a family of the DUT. Preferably, the set of procedures in the product model level are stored in a DLL file. Preferably, the procedure object comprises a structure of component object model (COM) objects. Preferably, the test object defines a test algorithm. Preferably, the test algorithm comprises one or more electronic operations defined by software code, and the electronic parameters for the electronic functions are provided by the measurement object. Preferably, the test object contains the measurement object, and the measurement object contains the datapoint object.","The invention also provides an electronic test system comprising: an electronic processor; an electronic memory coupled to the electronic processor; a hierarchical structure residing in the memory and executed by the processor, the hierarchical structure having multiple levels, each level embodied in the electronic test system as an object defined by a class, wherein the implementation of the object is defined by the user of the hierarchical structure by implementing the class; the classes including a measurement class corresponding to a measurement to be performed on the device, a test class corresponding to one or more related measurements, and a procedure class corresponding to an ordered list of tests to be performed on the device. Preferably, the hierarchical structure further includes a datapoint class linked to the measurement class. Preferably, the electronic test system further comprises: a test software class, the test software class defining: a test software object and a set of object methods, the set of object methods defining: an object method that displays information to a user of the apparatus, an object method that is responsive to changes in the test software and is capable of creating the procedure object, an object method capable of creating the test object, the measurement object, and the datapoint object, and an object method capable of beginning and ending a selected procedure. Preferably, the electronic test system further comprises: a software object method capable of beginning and ending the procedure, and a software object method capable of beginning and ending the test. Preferably, the electronic test system further comprises: a chamber driver residing in the memory, the chamber driver capable of controlling a temperature output device and a humidity output device. Preferably, the electronic processor further is adapted for electronically communicating with the DUT for executing the test software on the DUT and receiving a plurality of electronic outputs from the DUT corresponding to the measurement objects and the datapoint objects. Preferably, the electronic test system further comprises a manual input device communicating with the processor, the manual input device selected from the group consisting of a keyboard, a knob, a spin control, a mouse, a joy stick, a touch pad, and a roller ball. Preferably, the electronic test system further comprises plug-in software code components residing in the memory and providing an interface to other systems. Preferably, the electronic test system further comprises a COM control interface residing in the memory permitting the test system to be initiated and monitored from other systems. Preferably, the COM control interface comprises an ActiveX\u2122 COM interface.","The invention also provides a method for producing an electronic test system software program for testing an electronic device under test (DUT), the program including a hierarchical structure having multiple levels including a measurement level corresponding to a measurement to be performed on the DUT, a test level corresponding to one or more of the measurements, and a procedure level corresponding to an ordered list of the tests to be performed on the DUT, each level embodied in the program as a software object for testing a device under test (DUT), the method comprising the steps of: providing a set of functions wherein the implementation of the functions is defined by the hierarchical structure; implementing the functions to define the test system software program; generating the electronic test system software objects by executing the functions; and utilizing the software objects to test the DUT. Preferably, the hierarchical structure further includes a datapoint level which is a subset of the measurement level.","The invention also provides a computer-readable medium on which is stored a program for testing an electronic device under test (DUT), the computer program comprising: a measurement software object corresponding to a measurement to be performed on the DUT; a test software object defining a test algorithm utilizing parameters provided by the measurement object and corresponding to a test to be performed on the DUT; a procedure software object corresponding to an ordered list of the tests to be performed on the DUT; and a plurality of software pointers linking the measurement object, the test object and the procedure object. Preferably, the computer-readable medium further includes a datapoint object linked to the measurement object.","In another aspect, the invention provides an electronic test system for testing a device under test (DUT), the test system comprising: an electronic processor; an electronic memory coupled to the electronic processor; a procedure residing in the memory and executed by the processor, the procedure embodied in the electronic test system as a software object for testing a device under test (DUT), wherein the procedure comprises: a function defined by a class, wherein the implementation of the function is defined by the user of the test system by implementing the class; the procedure object including: a first set of software object methods in the procedure object to perform a plurality of predetermined functions to implement the procedure object. Preferably, the electronic test system further comprises: a test class defining a test object corresponding to a test to be performed on the DUT, a second set of object methods for creating the test; and the procedure object containing the test object.","The system also provides a method for producing an electronic test program in which the test procedure is separate from the test algorithm, the method comprising the steps of: providing a software storage medium containing an object oriented program including: software code implementing the test algorithm in a test class defining software object methods; a set of functions defining the procedure; implementing the functions to produce classes to further define the procedure; and generating the test procedure separate from the test class defined object methods by implementing the functions to provide a list of tests to be run and a list of measurements which provide parameters for each of the tests.","The invention not only provides relatively-easy means to modify an existing test procedure or create a new test procedure, but it preferably also organizes the test results in a logical, intuitive, and visually appealing way enabling the test developer to instantly determine the test results. The invention preferably compares the test results with a set of user-defined specifications, and assigns a resultant icon based on the comparison. This resultant icon is logically and efficiently displayed and allows the test developer to instantly recognize passing and failing test results. In addition, the visual presentation of the resulting icons and the test results allow the test developer or user to conceptualize modifications and improvements.","The above and other advantages of the present invention may be better understood from a reading of the following description of the preferred exemplary embodiments of the invention taken in conjunction with the drawings in which:","Overview","The present invention provides a method and apparatus to efficiently test complex electronic devices that require many parametric measurements. Here, \u201cefficiently test\u201d includes not only an efficient design of a particular test, but also includes efficiency in redesigning tests when evaluating devices over many phases of a device's life cycle, including test development, qualification testing and manufacturing testing. During qualification testing, the invention provides a consistent programmatic interface for qualification test supervisor programs. During manufacturing testing, the invention provides a common interface for multiple products, and helps maximize test productivity.",{"@attributes":{"id":"P-00034","num":"00034"},"figref":["FIG. 1","FIG. 1","FIG. 2"],"b":["100","102","104","116","106","120","104","120","106","114","106","120","106","104","108","102","106","112","120","102","104","106","116","110","130","3"]},{"@attributes":{"id":"P-00035","num":"00035"},"figref":"FIG. 2","b":["120","106","106","202","214","202","210","212","204","210","212","330","120","216","120","330","218","216","106","220"]},"The software program according to the invention is illustrated in , which will be discussed below. A key aspect of the program according to the invention is that it is hierarchical; that is, it includes multiple levels, with each level branching to lower levels which it contains. Preferably, the hierarchy is a four-level hierarchy including the following levels: procedure, test, measurement and datapoint. A procedure is an ordered list of tests and have names like \u201cTurn-on\u201d, \u201cFinal Sales\u201d, and \u201cEnvironmental\u201d. At test is a group of measurements in a procedure that share the same test algorithm, and thus the same software code. Tests have names like \u201cAmplitude Accuracy\u201d and \u201cHarmonic Distortion\u201d. A measurement is a configuration or setup for a test, and provides parameters to a test. Measurements have names like \u201cRange=10 volts\u201d, \u201cFrequency=100 kHz\u201d, and \u201cHarmonic=3\u201d. A datapoint is a subset of a measurement containing additional parameters that select a result when one measurement generates multiple results. Datapoints have names like \u201cChannel=1\u201d and \u201cPeak\u201d. The hierarchy is preferably implemented in the software as a tree of four objects, each of which maps to one of the hierarchical levels. Interactions of the objects are governed by pointers which reflect relationships between hierarchical levels.","Before embarking on the detailed discussion of the invention, it would be helpful to define terms which will be used in this discussion. The term test software herein means the code components provided by a test developer to test a specific product. The term manufacturing system means the electronic test system manufacturing processes. The term graphical user interface means an input device that allows the user to manipulate and execute the invention by pointing and clicking on icons displayed on the invention. The term input device means a keyboard, knobs, spin controls, mouses, joy sticks, touch pads, roller balls, or other conventional input devices. The term string means a data structure composed of characters, usually in human-readable text.","The term component object model (COM) means component architecture independent and platform independent computer language that is meant to be a general purpose, object-oriented means to encapsulate commonly used functions and services. The COM defines the name, return type and parameters of the interface's methods. The term objects is a specific instance of a set of functions or methods collected into interfaces and each object has data associated with it. Methods are the action that a message carries out, the code which gets executed when the message is sent to a particular object. All communications to objects are done via messages. Messages define the interface to the object. Classes define what it is to be an object. Creating an object from a class means to have created an instance of the class. The instances of the class are the actual objects. Classes are the blueprint of an object. Objects are unique individual instances of a particular class. The term interfaces means a defined collection of properties and methods that can be implemented by a class. The interface is essentially a table of pointers to the functions that make up the interface. Pointers are an indirect reference to data or code, analogous to an address. Each interface under COM is numerically unique. A class can be derived from one or more other classes; this is known as inheritance.","COM supports interface inheritance, meaning the interface may be derived from another interface, inheriting the base interface's binary signature. The combination of the name and parameter of a method is usually called its signature. Delegation means the derived object creating or instantiating an instance of the base object. The derived object contains code for new behaviors and methods that are over-ridden, and serves as a pass through for those method calls that are unchanged. The term plug-in means a program of data that improves or furthers the operation of the invention. The invention plug-ins are code components that allow the invention to be interfaced to other systems, such as a database or equipment calibration verification system. The term computer platform means a software operating system and\/or open hardware such as Windows\u2122 NT\u2122 application. The term dynamic link library (DLL) means an executable code module for computer platforms that can be loaded on demand and linked at run time and then unloaded when the code is no longer needed. Test software and plug-ins code are contained in DLL files, so they can be developed and delivered independently.","The invention also provides a consistent software interface to the manufacturing systems. The invention provides a standardized software interface for the test developer. The standardized software enables the test developer to perform the tasks of sequencing tests, displaying and logging results, and interfacing with other manufacturing systems.","The invention is designed to run on readily available computer platforms and standard, preferred, supported and easily networked operating systems. The invention uses a graphical user interface that allows the user to select a specific product model to be tested, enter configuration information, select and edit a test procedure, start test and control test execution (pause, continue, repeat, abort . . . ), and view the test results. Controlling the test execution is accomplished through clicking on the tape recorder button icons on the display. The invention has well-defined component object model (COM) interfaces to test software and the invention plug-ins. This includes tests, test procedures, and test system drivers.","A feature of the invention is that the electronic test system  can be remotely controlled and can be initiated and monitored from other programs through the use of its ActiveX\u2122 COM interface. The invention's COM interface includes an object model that aids in test and procedure organization. The invention encourages efficient and accurate test routine development through the use of parameters designed specifically by the test developer. Also, because of the object nature of the invention, parameters can be easily modified and reused for new test procedures, without generating extra parameters for the new test procedures.","The software program according to the invention is most easily developed utilizing the Visual Basic\u2122 programming language, which is a productive, efficient and current programming language. This standard programming language enables test developers to easily and efficiently construct complex test procedures. The invention is designed to interface through modular interconnections to a variety of systems including: test results databases and calibration and tracking systems. The programming language allows development in a Windows\u2122 environment.",{"@attributes":{"id":"P-00044","num":"00044"},"figref":"FIG. 3","b":["130","116","301","302","303","304","305","306","307","308"]},"The right side  of the graphical user interface  shows a window  comprising a series of rows, such as , and columns, such as , displaying the test results in an alphanumeric format. Window  also displays the time  the test is run, as well as the status of the test . This window displays the test that is being carried out, such as amplitude accuracy in , the type of measurement, such as (range=5 Vp, Frequency=1 kHz) in , the datapoint or channel under test, such as (Ch=1, Ch=2, Ch=3) in , the value or result of the measurement, such as (0.1235 dB) in , the specification, such as (\u00b10.2) in , and the frequency, such as (1 kHz) in . The test can be sorted by clicking in the view window  above the window . This allows either all the test results to be displayed, or permits the results to be filtered and displayed depending on their marginal or failed status. The bottom right window  is a progress window indicating the progress of the test procedure.","On the left side of the graphical user interface , the preferred embodiment of a tree window  according to the present invention is shown. In window , the test results are displayed in a manner reflecting the hierarchical structure of the test. Window  includes a hierarchy of procedures, tests, measurements, and datapoints. Icons corresponding to the results indicate pass, fail, marginal, and not-yet-tested. \u201cSmiling\u201d , \u201csurprised\u201d , and \u201csad\u201d  icons correspond respectively to the pass, marginal, and fail status. The pass\/fail icon  on top of the window is for the entire procedure. It summarizes the status of all the tests with \u201cfail\u201d having priority. That is, if there is one failed test, the whole procedure is fail. The Boolean operator \u201cAND\u201d is used to compute the final status of the procedure.",{"@attributes":{"id":"P-00047","num":"00047"},"figref":["FIG. 4","FIG. 5","FIG. 4"],"b":["400","5","408","412","410","412","100","412","100","412","100","412","412","528","5"]},"An exec object  is passed across almost all the invention's interfaces. It allows test software objects  and plug-ins objects  to check the state of the invention's user interface settings. The exec object  also has \u201ccall-back\u201d methods for tasks like posting datapoint results and waiting. The exec object  contains a Boolean value for being controlled by its ActiveX\u2122 interface . Test software objects  can use this property to avoid user instructions, which would otherwise stop the test procedure. Also, the exec object  contains a comment string for the test operator. There is a reference to the current DUT object  and a reference to the invention's main form object, which is useful when displaying other forms. An exec object  contains the current measurement object . In addition, an exec object  contains a measure abort Boolean value that will be set to true if the user has pressed the Restart\/Skip Test\/Meas tape recorder buttons  on the visual display . Test software can set it true to cause the current measurement to be aborted and skipped.","The exec object  also contains the model string which is the specific DUT model number currently being tested. This string is one of the choices in the DUT entry form and one of the strings added to the Models collection in the test software initialization object. The exec object  also contains a model family string for the currently loaded test software. This string appears in the invention's \u201cModel Family\u201d drop down menu list. There is a one-to-one correspondence between the model family and test software objects . The exec object  further contains a collection of strings, one for each specific model in the model family. This list appears as choices in the DUT entry form. In addition, the exec object  contains the test operator employee number as a string and the current procedure object  and the collection of all procedures. The exec object  also contains a Boolean value that will be true if the test operator has pressed the Abort tape recorder button . Test software objects  can set it true to cause the invention to abort a procedure.","The exec object  also contains the current procedure to run object . The invention creates a new run procedure object  each time a procedure is started. It stores a snapshot of information like start time and temperature of the device being tested. The run procedure object  also has properties that are updated during the run procedure like pass\/fail summary and failed datapoint count. Further contained in the exec object  is a qualification test as a string, such as \u201cHumidity\u201d and the region within a qualification test. In addition, the exec object  contains the directory path and file name for the current comma-separated-value (CSV) results file. Also, the exec object  selects production and customer specifications and contains variants like temperature in degrees and relative humidity. An exec object  will also contain a file name for the currently loaded test software, such as \u201cTestSwE1432\u201d not including the directory or suffixes such as \u201c.DLL\u201d or \u201c.EXE.\u201d There is a one-to-one correspondence between the model family and the test software objects . The exec object  also contains the current test object .","An exec object  contains a display method which is called to display one line of text in the status bar area of the invention's main form. The display method may raise a special error if the test operator has pressed the Abort\/Skip\/Restart tape recorder buttons . An exec object  contains a get exec setting string where the string returns an item from the invention's initialization configuration file. In addition, the exec object  contains a method for calling a dialog box to a display. Text may be multiple lines. Text may be plain text or HTML. For text that starts with \u201cfile:\u201d, \u201chttp:\u201d, \u201chttps:\u201d or \u201cftp:\u201d, the exec object  will assume that text points to a Web page and will display the page in a browser. If text starts with \u201c<HTML>\u201d, the exec object  will assume the entire string is HTML and display it in a browser. The exec object  will display the message box along with tape recorder buttons that are appropriate for the current state, such as \u201cContinue Running\u201d, \u201cAbort\u201d, \u201cSkip Meas\u201d, \u201cSkip Test\u201d or \u201cPrint\u201d. If a test is not running, the exec object  will only display \u201cOK\u201d and \u201cPrint\u201d buttons.","An exec object  also contains a result post method called by a test to return a datapoint result  to the exec object . The value is the measured value. The results post method also contains the enumerated constants result type which tells the exec object  how to handle the datapoint result , whether to report it as a normal result and compare to a specification object  and record, or whether to treat it as an error, or as not applicable, or as a note. An exec object  also contains a wait method that is called to wait a specific time in seconds. During the wait, the invention processes user interface events. A wait may raise a special error, measurement abort, to signal that a measurement has been aborted. This will occur if the user presses the Skip\/Re-start tape recorder buttons  and  during a measurement.","A CSV interface can be implemented by several exec objects . The purpose of the CSV interface is to give objects persistence by defining some methods to allow the properties to be written to a file and then read back. Also, CSV files are compatible with spreadsheet programs. A CSV interface contains a heading that is a read-only property that returns a heading line consisting of the names of the object's properties separated by commas. The CSV interface also contains a CSV string that, when evaluated, returns a line consisting of a list of values, one for each property, separated by commas. When assigned a value, it expects to parse a string and assign property values.","A user menu interface allows the test developer to provide context menus for the procedure view in the invention's user interface. The user menu interface contains a get menu items method that the invention will call when the user right clicks on a test in procedure view. The parameters can be used to determine which item in procedure view was clicked. Also, the user menu interface contains a method that the invention will call when one of the user menu items specified by the get menus items is clicked. The parameters will be the same as in the most recent get menu items call, with the addition of the menu text parameter, which indicates which menu item was clicked.","A user menu item object specifies the text and other properties of a menu item added to the procedure view context menu. The user menu item object contains a text string that will be added to the menu. In addition, the user menu item object contains a ghosted Boolean value that, if set to true, the menu item will appear ghosted and the user will not be able to select it. Further, the user menu item object contains a checked Boolean value that, if set to true, a check mark will appear next to the menu item.","The main\/root object of the invention's ActiveX\u2122 interface is its application object. Instantiating this object will start the invention's application executable file. The application object contains a model family string which is the name of the test software, as listed in the invention's configuration initialization file and so on the invention's \u201cModel\u201d menu. Setting it will cause the invention to load new test software. Also contained in the application object is the name of the active test procedure. Setting it will cause the invention to load and expand a test procedure. The application object also contains a reference to a DUT object. After changing the DUT parameters through this interface, the DUT valid method should be set true to trigger the invention to re-validate the DUT parameters with the test software. The application object also contains a reference to the exec object.","A state object contains a read-only enumeration of the invention's state. The state object also contains the DUT value as a Boolean value that reflects the state of the DUT object and setting it to true will cause the invention to call the DUT change method, which may validate DUT parameters. Further, in the state object is a Boolean pause value, where it will indicate true if the user has paused a test procedure. Also, in state object is a Boolean running tests value that will indicate true if a test procedure has started but not yet finished, like between procedure initialization and procedure de-initialization states. In addition, the state object contains a button press method that is called to send a tape recorder button  press to the invention's state machine. The state object also contains a function that returns a string describing the passed state enumeration. State objects also contain several events that will start as the invention's state machine operates. For example, the \u201cBegin\u201d event starts with the button state equal to the invention state test initialization before the exec object attempts to call the test initialization for a test. Usually, the \u201cEnd\u201d event will start after test initialization is completed. An error would cause the \u201cCanceled\u201d event to start instead.","Test software for a specific model is packaged in a DLL file. When the test operator selects a different DUT model family, this test software DLL is de-referenced, unloaded and different test software DLL is loaded. Each invention plug-in is also a DLL and there can be multiple plug-ins loaded at one time. The data objects that are shared by test software, plug-ins and the invention are defined in a DLL file named Exec3Objects.DLL. This file contains mostly class definitions for data objects and test interfaces, and it contains little or no invention code. In other words, Exec3Objects.DLL contains the pure virtual base classes that define the interface between the Exec3 and Test Software. Actual Test Software and Plug-in classes are derived from these base classes by using Visual Basic\u2122 IMPLEMENTS\u2122 keyword.",{"@attributes":{"id":"P-00059","num":"00059"},"figref":"FIG. 5","b":["405","100","504","405","504","504","506","508","508","504","510","512","516","504","504","100","504","504","504"]},"A procedure object  is transferred from the test software DLL as a structure of COM objects. The test developer defines a procedure object  by writing code to build this structure of COM objects. A procedure object  name identifies the procedure to the test operator and contains a collection  of test objects . A procedure object  also contains a Boolean value that enables the procedure object  to be logged for calibration measurement tractability. The test software object  owns procedure objects  and they are created by the test developer-supplied code in test software initialization. The procedure object  contains a collection  of test object .","The second tier of the invention is the test object  tier. The test object  tier is a group of measurement objects  in a procedure that shares the same test algorithm and so the same test software code. To run a procedure, the invention repeatedly calls a test for each measurement and datapoint. To the invention, test objects  are code, not data. The test developer implements a test by adding a Visual Basic\u2122 class module to the test software object . The code the test developer puts in this class should implement the test algorithm in a parameter-driven way. Then, in the procedure definition code, the test developer inserts code test software objects  to create an instance of this class and adds it to the procedure object . Test software objects  owns test objects .","The test object  name identifies the measurement to be performed by the test operator. The test object  also contains the test initialization method code, the measurement initialization method code, and the results get method code. Each test should be implemented as a separate Visual Basic\u2122 class file and use the implements keyword to reference the test interface. The test objects contain a collection  of measurement object .","The third tier of the invention is the measurement object  tier. The measurement object  is a configuration or setup for a test object . Each measurement within a test object  can have different setup or configuration parameters. Test objects  are parameter-driven, and test objects  get their parameters from a measurement object . The invention views measurement objects  as data to be passed from a procedure object  to a test object . The test developer defines a measurement object  for a test object  by creating a new measurement object  and adding it to a test object  in a procedure object . The measurement class is already defined by the invention, so the test developer needs only to create and use measurement objects . A measurement is also a phase of test execution. During the measurement phase of test execution, the measurement is started but data is not collected; this allows for multiple devices to be configured and triggered together.","The measurement object  contains a collection  of parameter objects  for one measurement and a collection  of datapoint objects  that select among multiple results from one measurement. The measurement object's  name identifies the measurement to the operator. The measurement object  also contains the name of the measurement object  and can be automatically generated by concatenating the description of each parameter object .","The fourth tier of the invention is the datapoint object  tier. The datapoint object  tier is a subset of a measurement object  that holds a collection  of parameter objects  that select a result when one measurement generates multiple results. One measurement may return one or more datapoints as logically makes sense to the test developer. Some examples of multiple datapoints for a measurement are minimum and maximum values of a spectrum analyzer sweep, or each channel of a device. Datapoint object  is also a phase of test execution. This is where the data is harvested. If it doesn't make sense to separate the measurement object  phase from the datapoint object harvesting phase, the test developer can write a test to do the entire measurement object  during this phase.","A datapoint object  holds the parameter objects  for one datapoint. This information selects specific results when a measurement generates multiple results. The name identifies the datapoint to the operator and can be blank if there is only one datapoint object  in the measurement. Each measurement object  has a collection  of datapoint objects . A datapoint object  holds a collection  of parameter objects  and stores a reference  to a specification object . The datapoint object  also contains the name of the datapoint object  and can be automatically generated by concatenating the description of each parameter object . It can be over-written by assigning a value to the name. Within each measurement, each datapoint name must be unique and cannot contain the comma character. The test software objects  owns datapoint objects .","A parameter object  holds one test parameter setting and it passes measurement configuration parameters from a procedure to a test. The parameter object  contains a Boolean value where, if it is true, the parameter will not appear in measurement and datapoint names. A parameter object  uses common engineering prefixes (u, m, k, M) to display values. The parameter object  also contains the parameter being specified, like \u201cFrequency\u201d, and the value like \u201c1.0E+7\u201d.","A specification object  contains specification limits for a result. The limit values are variant type to allow for string comparisons and to allow assignment to \u201cEmpty\u201d to indicate one-sided specifications. The electronic test system  handles three sets of limits: Marginal, Production, and Customer. Marginal low and marginal high specification limits are used during manufacturing to warn when a value is close to the production limits. Production low and production high specification limits are used during manufacturing. Customer low and customer high specification limits are the customers' specification limits and are more relaxed than the production limits. A specification object  contains target values that are the ideal or nominal value. They may be used by analysis software to center histograms. If a target is provided when no low or high limits are provided, the invention will check measurement results for an exact match to target.","The specification object  also contains functions for returning the upper or lower pass\/fail limit, given the type of specification. The specification object  contains common engineering units and a rounding format specification function. The test software objects  owns specification objects . Many datapoints can reference one specification object .","The invention creates a run procedure object  each time a procedure is started. The run procedure object  contains a snapshot of the invention settings and other \u201cheader\u201d information. Plug-ins will receive these run procedure objects . A run procedure object  contains procedure \u201cheader\u201d information. Additional information is stored in the device objects  and test system objects  it references. Each run procedure object  can contain operator comments. A reference to a copy of the device object  is made so properties of the working device object  can change without affecting collected results. The run procedure object  can also contain a counter for the number of datapoint specification failures since the start of the procedure. The run procedure object  contains information regarding the test operator and the procedure name.","The run procedure object  contains information summarizing the results of the entire run procedure, whether the values all passed, whether the results were incomplete, or whether the results failed. The run procedure object  contains qualification testing and the region of a qualification test profile, like \u201cHumidity, Region 5\u201d. Also contained in the run procedure object  is the path and filename of the comma-separated-value (CSV) results file, the time and date the procedure was started, and the temperature and humidity of the environment of the device being tested. Also contained in the run procedure object  is a summary string with the above-mentioned information. Also, the run procedure object  contains a reference  to the test system object . The electronic test system  creates and owns run procedure objects .","Result objects  contain the result of one datapoint measurement. All the result objects  for one run procedure will reference a run procedure object . Often, many result objects  will reference the same run procedure object . The results object  contains the date and time of the result retrieved. The result object  contains the comparison of the value to a specification, wherein the values for this enumeration are: pass\/fail unknown, pass\/fail pass, pass\/fail marginal, pass\/fail fail, pass\/fail error, pass\/fail abort, pass\/fail note, and pass\/fail not applicable. The result object  is capable of returning the pass\/fail property as a \u201cpass\u201d, \u201cfail\u201d, \u201cunknown\u201d, \u201cmarginal\u201d, \u201cerror\u201d, \u201cabort\u201d, \u201cnote\u201d, and \u201cnot applicable\u201d.","The result object  contains the name of the test, measurement and datapoint. Further contained in the result object  is the measured value (a variant) and its units (a string). The measured value is compared to a specification object. The result object  can return the value and units as a formatted string. In addition, the result object  can contain an optional additional measured value and its units. This value is not compared to a specification. The results object  also contains the property of the specification limits as a formatted string and a reference  to the datapoint object  that this result was created from. In addition, result objects  contain a reference  to the run procedure object  containing procedure header information. A run procedure object  contains a reference  to the DUT object .","A DUT object  contains a serial number string for the serial number of the DUT to be tested, an available Id string for an \u201cAvailable Id\u201d used during manufacturing to identify a DUT before a serial number has been assigned, a model string containing the specific model number, an option string containing the specific options, an address string containing the input and output address for the DUT to be tested, a slot string to test multiple DUTs, and a comment string for use during testing. In addition, a DUT object contains a Boolean value for default values for the above-mentioned properties, and if the Boolean value is false, the invention will load a generic form for serial numbers, addresses, etc. The DUT object  contains a method to implement automatic findings in response to the Boolean value being true, where the method can automatically implement DUT properties into a custom form. The DUT object  contains a method that will run when the operator or ActiveX\u2122 application programming interface changes any of the DUT properties. Further, the DUT object  contains , a variant tag for the test developer's use and a more object  for test developer's use of additional methods and properties. The DUT object  is created by and owned by the test software objects .","A test system object  contains a name string containing the test system station name and an Id string that can be used to further identify the test system. The test system object  also contains a calibration interval numeric field that can be accessed by calibration tracking plug-ins that can use this information when a system calibration is performed. The test system object  contains a collection  of device objects , one for each device in the test system. In addition, the test system object  contains a method that the invention calls when the user clicks the \u201cTest System\u201d item in the invention's menu. The test system object  contains , a variant tag for test developer's use and a more object  for test developer's use for adding additional methods and properties. The test system object is created and owned by the test software objects .","The device object  exists for each piece of test equipment in the test system object . It contains a name string containing the short name of the device, a manufacturer string, a model string containing the model number, an options string, a serial number string, a maintenance number string containing the calibration maintenance number, a description string containing the device description, like \u201cSynthesizer\/Function Generator\u201d, and an address string containing the input and output address for the device. The test system device object  also contains a need trace Boolean value for calibration trace ability for the device and a hidden Boolean value for hiding the device from the invention's device printouts. In addition, the device object  contains a service due date to track when the next calibration is due. There is a Boolean value that can indicate that the equipment is missing. Further, the device object  contains , a variant tag for the test developer's use and a more object  for the test developer to extend the device object  to include input and output methods, state, etc.","A test software object  contains a show method that the invention will call when the operator clicks the test software item in the invention's menu. The test software object  contains methods that the invention calls when the test operator changes model families. Pass parameters are Exec, test system, DUT, procedures, and models. The test initialization software should create the test system  and DUT objects  for return to the invention. If the initial properties of the DUT object  are left blank, the invention will initialize them from persistent storage. The electronic test system  will display a list of available procedures by listing each test procedure  in the visual display . The lower-level objects of a procedure do not need to be created at this time. Models is a collection to which the test initialization software should add strings, one for each valid model number. These model strings will become choices in the DUT entry form.","In addition, the test software object  contains a procedure expand method and a procedure collapse method that the invention calls to get the details for one procedure. The test software should fill the object model for the procedure and can change the model or options of the DUT. This allows procedures to depend on the specific model and options. Further, the test software object  contains a procedure initialization method and a procedure de-initialization method that the invention calls when beginning a procedure and ending a procedure. The procedure initialization method is called before any plug-ins. This order allows the test system device information to be passed to a plug-in. In addition, the test software object  contains a result post method which is called each time the test software returns a new datapoint result to the invention, after it has been evaluated to a specification object . The result object  passed by this call contains the measurement value, units, pass\/fail, etc.",{"@attributes":{"id":"P-00079","num":"00079"},"figref":"FIG. 6","b":["604","208","606","608","610","606","608","612","318","310","604","608","318","310","130","614","516","512","512"]},{"@attributes":{"id":"P-00080","num":"00080"},"figref":"FIG. 7","b":["512","702","320","812","814","601","320","702","708","508","204","810","812","810","814","810"]},{"@attributes":{"id":"P-00081","num":"00081"},"figref":"FIG. 8","b":["801","818","820","822","804","806","808","810","812","814","516","512","802","816","818","818","820","822","804"]},"It should be understood that the particular embodiments shown in the drawings and described within this specification are for purposes of example and should not be construed to limit the invention, which will be described in the claims below. Further, it is evident that those skilled in the art may now make numerous uses and modifications of the specific embodiments described, without departing from the inventive concepts. It is also evident that the steps recited may in some instances be performed in a different order; or equivalent structures and processes may be substituted for the various structures and processes described. Consequently, the invention is to be construed as embracing each and every novel feature and novel combination of features present in and\/or possessed by the invention herein described."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00025","num":"00025"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00030","num":"00030"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00031","num":"00031"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
