---
title: System and method for transferring a compressed data file to a peripheral device
abstract: An image passthrough extension structure and method facilitating the transfer of compressed data image files from a software application to a device via the computer system operating system. The application determines whether the device is capable of decoding the specific compressed data file by polling the device driver. If the driver returns a “no support” message, the application processes the compressed data file in a conventional manner. If the driver returns a “support” message, the application transfers the compressed data file, along with the additional processing information, to the device driver utilizing the conventional file transfer operating system data structures modified to incorporate the compressed data file passthrough function. By allowing an application to transfer a compressed image file directly to a device driver, the present invention improves image fidelity and improves overall computer system efficiency by reducing the size of data files transferred between the application, the operating system and the hardware device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437483&OS=07437483&RS=07437483
owner: Microsoft Corporation
number: 07437483
owner_city: Redmond
owner_country: US
publication_date: 20000308
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is entitled to priority pursuant to a provisional application filed Mar. 24, 1999, Ser. No. 60\/125,902.","In general, the present invention relates to computer software and hardware and in particular, to a method and structure for processing compressed data image files utilizing image passthrough extensions.","In general, conventional devices, such as a printer, can receive and process compressed data files, such as JPEG or PNG compressed image files. However, most conventional computer systems having an operating system and one or more software applications running within the operating system do not provide a standardized format, such as an escape, to allow a software application to transfer a compressed data file directly to the device, including either a hardware device or a device driver. Accordingly, to pass a compressed file directly to a device, the application would typically have to recognize the individual device and have code specific to the device. However, as devices are upgraded or new devices are added, the application would no longer be compatible with these devices if the driver was modified. Moreover, a device specific driver would prevent an operating system from group formatting the compressed image, especially when multiple images are processed at the same time.","Because of the deficiencies associated with device-specific drivers, one conventional method for transferring compressed data image files from a software application to a device entails an application first decompressing the compressed image file into a device independent bitmap (DIB) format. This requires that each software application have the capability to properly decompress assorted compressed image files. Moreover, there is the potential for one or more conversion losses by the software application. For example, a typical DIB allows a maximum of 8-bits per color channel. If the image format and device support greater image fidelity, such as 16 bits per color channel, the fidelity would be lost during the DIB intermediate conversion.","Once the software application has decompressed the compressed image file into a DIB format under the conventional method, the software application then transfers the DIB via an application programming interface (API) to the operating system graphics device interface (GDI). Upon receiving the DIB, the GDI either stores the DIB within the GDI for immediate transfer to the device driver or sends the DIB to a spooler for later processing. In both scenarios, the transfer of an uncompressed DIB to the GDI places a greater strain on system resources in terms of greater requirements of processing time and increased burden on the data communication resources between the software application and the operating system. Additionally, if the GDI utilizes a spooler, the transfer of the uncompressed DIB from the GDI to the spooler utilizes more spooler storage space as well as placing a greater strain on system communication resources in transferring the DIB image to and from the spooler.","To complete the conventional file transfer, the DIB is transferred from the GDI to the device driver via a device driver interface (DDI). Again, the transfer of the uncompressed DIB from the GDI to the device driver places a greater strain on the computer system communication resources between the operating system and the hardware device.","Thus, there is a need for a compressed data file transfer structure and method in which the compressed files are transferred to a device without uncompressing the file.","The present invention satisfies the above-described need by providing an image passthrough extension structure and method in which compressed data files are transferred to a device utilizing standard escapes and modified conventional file transfer structures.","Generally described, the present invention provides a method in a computer system for transferring a compressed data file from a software application running within the computer system to a device in communication with the operating system. According to the method, a request is received to transfer a compressed data file and a determination is made as to whether the device is capable of decoding the specific compressed image to be transferred. If the device is configured to decompress the compressed data file, the compressed file is transferred to the device driver via a device driver interface.","In another aspect of the present invention, a computer-readable medium is provided. The computer-readable medium has computer-executable components including a device support query component for determining whether a device is configured to decompress a compressed data file associated with an application, an application interface component for receiving the compressed data file from the application and a device interface component for transferring the compressed data file to the device.","In a further aspect of the present invention, a method in a computer system is provided for transferring compressed image data from a software application running within the computer system to a device in communication with the computer system. According to the method, a file query is received from a software application containing a pointer to the compressed image data and a designation of the type of compressed data image. The image data designation is compared with a data structure containing data indicative of the types of compressed data image files supported by the hardware device. If the device supports the type of compressed image data, a pointer to the compressed image data and the compressed image data designation is passed to the device. If the device is configured to decompress the compressed image data, an answer is returned and a data structure having data indicative of the compressed image data is received from the software application. Upon receiving the data structure, the compressed image data is transferred to the device driver via a device driver interface.","In yet another aspect of the present invention, a method is provided for transferring a compressed data file from a software application running within a computer system to a device in communication with the computer system. According to the method, a determination of whether the device is configured to decompress the compressed data file is requested. Upon receiving a response that the hardware device is so configured, the compressed data file is transferred to the computer system.","In yet a further aspect of the present invention, a computer-readable medium is provided. The computer-readable medium has stored on it a data structure containing a first field containing data indicative of a classification of a compressed data file, a second field containing data indicative of the compressed data file, and a third field containing data indicative of whether a device is configured to decompress the compressed data file.","By allowing an application to transfer a compressed image file directly to a device, the present invention minimizes application decompression error and improves overall computer system efficiency.","The present invention provides a method for processing compressed data files directly from a software application to a device.  illustrates an example of a suitable computing system environment in which the invention may be implemented. The computing system environment is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment.","The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Computer readable media typically embodies computer readable instructions, data structures, program or modules. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital video disks, digital video tape, Bernoulli cartridges, solid state RAM, solid state ROM, and the like. The hard disk drive , magnetic disk drive , and optical disk drive  are typically connected to the system bus  by a Small Computer System Interface (SCSI) . Alternatively, the hard disk drive , magnetic disk drive  and optical disk drive  may be connected to the system bus  by a hard disk drive interface, a magnetic disk drive interface, and an optical drive interface, respectively.","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  or a serial port interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , computers may also include other peripheral output devices such as speakers and printers, which may be connected through an output peripheral interface.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the serial port interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Although many other internal components of the computer  are not shown, those of ordinary skill in the art will appreciate that such components and the interconnection are well known. Accordingly, additional details concerning the internal construction of the computer  need not be disclosed in connection with the present invention.","Those skilled in the art will understand that program modules such as the operating system , application programs  and data  are provided to the computer  via one of its memory storage devices, which may include ROM , RAM , hard disk drive , magnetic disk drive  or optical disk drive . Preferably, the hard disk drive  is used to store data  and programs, including the operating system  and application programs .","When the computer  is turned on or reset, the BIOS , which is stored in the ROM  instructs the processing unit  to load the operating system from the hard disk drive  into the RAM . Once the operating system  is loaded in RAM , the processing unit  executes the operating system code and causes the visual elements associated with the user interface of the operating system  to be displayed on the monitor . When an application program  is opened by a user, the program code and relevant data are read from the hard disk drive  and stored in RAM .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 2","FIGS. 1 and 2"],"b":["74","46","48","46","30","20","46","48","46","48","46","22","34","30","48","30","22","22","48","30"]},"The operating system  also provides a variety of functions or services that allow application program  to deal with various types of input\/output (I\/O). This allows an application program  to issue simple function calls that cause the operating system  to perform the steps required to accomplish the tasks, such as displaying text on the monitor .","With continued reference to , the application program  communicates with the operating system  by calling predefined function calls provided by the operating system . The operating system  responds by providing the requested information or executing the requested task.","The present invention relates to a method and structure for the processing of compressed data files from a software application to a device, via an operating system, without requiring a decompression of the file by the operating system. Specifically, a preferred embodiment of the present invention is a method and structure for processing compressed data image files utilizing image passthrough extensions to allow a software application to transfer compressed data image files directly to a device without first decompressing the data image file. As would be readily understood by those skilled in the relevant art, the present invention is applicable with other types computer system compressed data files. Moreover, the present invention is preferably described in relation to the processing of Joint Photographic Expert Group (JPEG) compressed data image files and Portable Network Graphics (PNG) compressed data image files. As would be further understood, the present invention is applicable to alternative types of compressed data image files as well as with compressed data image files utilizing the JPEG or PNG compressed data image format such as the JPEG File Interchange Format (JFIF), Digital Still Camera Image File Format Standard (Exif) or Still Picture Interchange File Format (SPIFF).",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIGS. 3 and 4","FIG. 4"],"b":["48","76","78","48","80","78","80","76","76","80","80","82","80","84","76","78","78"]},"As applied to the conventional image transfer method, the image  is decompressed into a DIB prior to being passed to the GDI . Accordingly, the image  is now an uncompressed DIB, which is larger in size than the original compressed image. As would be understood, the larger the image , the greater strain on the communication resources between the software application , the GDI  and the device driver . Moreover, a larger image  consumes more memory space within the spooler database .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 5","FIGS. 3 and 4"],"b":["48","76","78","48","78","86","88","48","78","80","76","48","76","90","80","76"]},"Upon receiving the image , the GDI  may read and store the image  in a local memory, or may send the image  to the spooler  to be stored on the spooler database . As would be readily understood, different or modified configurations of the GDI spooler are within the scope of the invention. When appropriate, an interface  denotes the passing of the compressed image  to the device driver . The image  is stored and parsed by the device driver  before being passed to the hardware device.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 6","FIG. 6","FIG. 9"],"b":["7","8","600","610","93","95","94","94","96","96","98","98","100","102"]},"Referring again to , at S, the GDI receives the EXTESCAPE function and determines whether the device driver can support general image decompression. Preferably, the device driver indicates, by setting a bit in a data structure, whether it can accept JPEG or PNG images.  is illustrative of a subset of a DEVINFO data structure  utilized by the device driver to indicate whether or not certain compressed image files can be accepted by the device. Preferably, a \u201cflGraphicsCaps2\u201d field  is set if the device driver will accept JPEG or PNG files and not set if it cannot. The DEVINFO data structure  may also contain additional fields (e.g. \u201clfDefaultFont\u201d) which retain their conventional definition and function.","If the device driver indicates that it cannot support general image decompression at S, the GDI returns a no support message at S to the software application. If the device driver indicates that it can support general image decompression at , the GDI calls a device driver interface (DDI) to determine whether a targeted device is capable of receiving the compressed image file at S.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 11","b":["123","110","110"]},"A pvln field  contains data indicative of a property of the compressed data file to be transferred. Preferably, the pvln field  contains a pointer to an input buffer where the image is stored. Additionally, a pso field  specifies the device surface and a pxlo field  and a pxo field  specify additional image processing information. Preferably, the pxlo field  specifies XLATEOBJ information which is used to translate color indices relating to a color pallette and the pxo field  specifies XFORMOBJ information which is used to describe an arbitrary linear two-dimensional transform. Moreover, a cjIn field  specifies the size of the input buffer. Finally, a pvOut field  contains data indicative of an output pointer and a cjOut field  specifies the size of the output buffer. Preferably, the pxo field , cjOut field  and pvOut field  are not utilized when either a QDS_CHECKJPEGFORMAT or a QDS_CHECKPNGFORMAT is designated in the iType field . As would be understood, different and\/or combined fields for this function are within the scope of the invention.","With reference again to , upon receiving the call to the DDI in S, the device driver parses the image and performs inspection functions in S. In S, the device driver may decompress and read only a portion of the compressed file, or it may attempt to completely decompress the entire file in performing the parsing and inspection functions. At S, the device driver determines whether itself or the hardware device can decompress and process the image. If neither can, the device driver returns a \u201cno support\u201d indication at S. Alternatively, if the device driver determines that either itself or the hardware device can accept the image , it returns a \u201csupport\u201d message at S.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 7","FIG. 6","FIG. 6","FIG. 9"],"b":["700","630","670","710","98","93","720","730","740","750","760"]},"Because the device driver indicated that neither it nor the hardware device could decompress the data image, the compressed image is preferably processed in a conventional manner by decompressing the image and passing it to the device driver as a DIB. Alternatively, upon receiving a no support message, the software application may terminate the printing function.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 8","FIG. 6","FIG. 11"],"b":["680","800","810","820"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIGS. 12","FIG. 12"],"b":["13","14","126","128","128","130","132","134","136","126"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIGS. 13 and 14","FIG. 12","FIG. 13","FIG. 12","FIG. 12"],"b":["138","138","140","142","134","134","132","132","128"]},"With reference to , the SetDIBitsToDevice API  sets the pixels on the target device. Specifically, the SetDIBitsToDevice API  includes a \u201chdc\u201d parameter  which contains a handle to the device context. Additionally, SetDIBitsToDevice  includes a \u201clpvBits\u201d parameter  which has data indicative of a property of the compressed image, preferably a pointer to the image. SetDiBitsToDevice  also includes a \u201cfuColorUse\u201d parameter  which specifies whether the BITMAPINFOHEADER data structure () contains explicit RGB values. Preferably, the \u201cfuColorUse\u201d parameter  is set to DIB_RGB_COLORS, indicating the color table contains literal RGB values when passing a compressed image. Again, as would be understood, the SetDiBitsToDevice function  may contain additional parameters (e.g. \u201cxDest\u201d) which retain their conventional definition and function.","Preferably, the application uses the modified BITMAPINFOHEADER data structure and the SetDIBitsToDevice and StretchDIBits APIs to pass the compressed image. As would be readily understood, different data structures and methods of passing the compressed image file are within the scope of the present invention.","With continued reference to , at S, the GDI receives the passthrough data structure from software application and performs coordinate transformations (such as computing the placement and size of the image on the page using the state associated with the GDI's hdc) without decompressing the image. Additionally, the GDI can also perform image processing of the image without decompressing the image. At S, the GDI creates a data structure to pass the compressed image.  is illustrative of a subset of the SURFOBJ data structure  utilized to pass the compressed image to the device driver. An \u201ciBitmapFormat\u201d field  contains data indicative of the classification of the compressed image to be transferred to the device driver. Preferably, the \u201ciBitmapFormat\u201d field  is set to BMF_JPEG if the image is a JPEG image or BMF_PNG if the image is a PNG image. A \u201cpvBits\u201d field  contains a pointer to a buffer containing the compressed image and a \u201ccjBits\u201d field  specifies the size of the image buffer. Additionally, a \u201cpvScan0\u201d field  and a \u201clDelta\u201d field  will be ignored if the \u201ciBitmapFormat\u201d field  is set to indicate a JPEG or PNG image. Additional fields conventionally defined previously retain their conventional definition and function.","At S, the GDI calls an applicable device driver interface function to process the SURFOBJ image. Preferably, the device driver interface functions include the DrvBitBlt, DrvCopyBits, DrvPlgBlt, DrvStretchBlt, DrvStretchBltROP, DrvAlphaBlend and DrvTransparentBlt functions. As would be readily understood, additional device driver functions are within the scope of the present invention.","At S, the device driver parses the image and performs inspection functions. At S, if the device driver cannot accept the image, it returns a no accept message at S. Unlike the previous parsing and inspection functions at S- (), if the device driver cannot process the image, a \u201cno accept\u201d message is returned. In the event the print job is not spooled, the \u201cno accept\u201d message is sent back to the application, and the application can conventionally process the image as a DIB, as illustrated on steps S-S (). In the event the print job is spooled, the particular API (SetDIBitsToDevice or StretchDIBits ()) will fail, and the compressed image will not be outputted to the device. However, any remaining portions of the print job will be processed and outputted to the device. Alternatively, in the event a \u201cno accept\u201d message is received, the entire print job may be terminated by either the application or the GDI.","If at S, however, the device driver returns an \u201caccept\u201d message, the device driver packages the image for processing by the hardware device at S. For example, for a PostScript printer, a JPEG image is packaged into a decoding header including instructions from the device driver and the raw image for printing. The resulting data is then ready for printing. As would be readily understood, application of the present invention to device format packaging other than for a PostScript printer is considered within the scope of the present invention.","Preferably, the image passthrough extensions structure and method of the present invention is implemented in Microsoft Corporation's \u201cWINDOWS 98\u2122\u201d or \u201cWINDOWS 2000\u2122\u201d operating system. By utilizing new or expanded data structures, the present invention allows compressed data image files to be transferred directly from a software application to a printer configured to decompress these images without placing additional strain on the communication resources of the computer system and the storage resources of a printer spooler. Additionally, although many program languages could be used to create the objects and functions of the present invention, the present invention may preferably be coded by an object oriented language such as Microsoft Corporation's \u201cVISUAL C++\u00ae\u201d or \u201cVISUAL BASIC\u00ae\u201d programming languages.","Alternative embodiments of the present invention will become apparent to those skilled in the art to which it pertains upon review of the specification, including the drawing figures. Accordingly, the scope of the present invention is defined by the appended claims rather than the foregoing description."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING","p":["The present invention is described in detail below with reference to the attached figures, wherein:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
