---
title: Delivering a graphical object to a browser
abstract: Techniques are provided for delivering a graphical object to a browser including the steps of receiving a request that requires delivery of the graphical object to the browser, wherein the graphical object is not a table; and in response to the request, generating a script which, when executed by the browser, causes the browser to render the graphical object as a particular table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06922200&OS=06922200&RS=06922200
owner: Oracle International Corporation
number: 06922200
owner_city: Redwood Shores
owner_country: US
publication_date: 20011130
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates in general to graphics generation and, in particular, to delivering a graphical object to a browser.","The Worldwide Web (\u201cWeb\u201d) is the medium of choice for publishing information on-line over the Internet, a widely-used public internetwork globally interconnecting countless client and server computer systems. The Internet provides a transport mechanism through standardized communication protocols, such as the Hypertext Transport Protocol (HTTP), for communicating Web content in the form of text, graphics, sounds, animations, and video.","Web content is exchanged using a form of scripting language, such as the Hypertext Markup Language (HTML), a tag-delimited scripting language interpretable by a majority of currently available Web browsers. In HTML, Web content is embedded in statements that are interpreted by a receiving Web browser and formatted into readable form using tags included in each statement. The tags can include text and display attributes, such as color and text style, as well as references to downloadable content and hyperlinks.","During a Web browsing session, a user can request additional content from a Web server by selecting hyperlinks embedded in each Web page. The hyperlink is relayed by the Web browser as a form of request that is answered by the Web server with downloaded Web content. The download operations can be particularly bandwidth-intensive for those Web pages containing large data objects, such as graphics.","Web content containing graphics poses a trade-off between server and client functionality. Graphics can include both pictorial content, such as photo-realistic images, and illustrative content, including charts and graphs for modeling quantitative information. Graphical Web content generated at a Web server can require a specialized display server which generates the Web content as a separate downloadable file, typically in GIF or JPEG format. Graphics files tend to be large and can require long download times. Typically, an applet will be downloaded from the Web server to generate graphics on the client. However, each applet is application-dependent and can also require long download times.","Web pages can also include dynamically-generated content. Such content enables interactive sessions to provide customized Web content and increased user interest. Dynamically-generated Web content consisting only of text can easily be generated by a Web server which processes the user request and sends back a script containing the requested text embedded as the customized Web content.","Dynamically-generated Web content containing graphics, however, presents a trade-off between customizing Web content and respecting bandwidth limitations. Higher complexity graphs, such as pictorial images, require substantially more bandwidth and can result in slow download times from the Web server.","Three approaches provide graphical Web content to individual Web browsers. In the first approach, graphical Web content is generated in advance of download on a Web server. A graphics engine using a graphics toolkit, such as the Java Abstract Window toolkit (AWT), generates graphics for download and stores the graphical data for retrieval by Web servers upon client request. This approach requires a priori knowledge of expected graphical Web content and limits the level of user interactivity to selecting from amongst pre-generated graphics. As well, this approach also suffers from long download times and is memory intensive.","In the second approach, a graphics engine using a graphical toolkit generates graphical content ad hoc rather than ahead of download time. New graphical content is generated responsive to each new user request and requires the download of a large image. This approach imposes long download times and also requires the user to wait out a sometimes time-consuming graphics generation routine upon each request. This approach is usually memory intensive.","In the third approach, Web browser-executable modules, such as applets, are used to render graphical images on a client at the time of request. This approach has the advantage of decreasing download times for individual graphical images, but still requires the download of individual applets prior to the generation of each graphic. Moreover, applets are generally non-portable and application-dependent.","In the fourth prior art approach graphical images are created as a tag delimited script constructed in the same order as expressed in the script. This approach has the advantage of decreased download times, but has the disadvantage of requiring an application dependent engine that is not extendable.","Therefore, there is a need for an application-independent approach to provide dynamically generated low-complexity graphics, such as charts and graphs, using standard Web-browser functionality. Preferably, such an approach would convert graphics into a Web page script interpretable by a standard Web browser, thereby allowing ad hoc Web content retrieval.","There is a further need for an approach to create low-complexity charts and graphs expressed as tables in a tag-delimited script, such as HTML. Such an approach would create graphical Web content structured into a table by an engine executing in conjunction with a Web server.","There is a further need to provide a standard application-independent engine for generating graphical Web content and exporting a standard application programming interface shared with standardized graphics toolkits, such as the Java AWT.","The present invention provides a system and process for generating graphical Web objects, including low-complexity graphics, such as charts and graphs, embedded within a Web page. A graphical Web object is specified as a table definition included in a tag-delimited script describing the Web page, such as in HTML Individual rows and cells within the table specify the characteristics of the graphical Web object, including color, text, text style, hyperlinks, and bubble text. Each individual cell represents a uniform rectangular region and combinations of the uniform rectangular regions can be formed on a logical canvas to generate various shapes and styles. As the shapes are drawn, any overlap between horizontal and vertical rendered regions is resolved. The logical canvas is then rendered as the table definition and downloaded to the requesting client as a tag-delimited script.","An embodiment of the present invention provides an application-independent system and process for dynamically generating low-complexity graphics embedded as Web content using a tag-delimited script. A graphics object class defining a logical canvas and including a vector of row objects is specified. Each graphics object class contains a set of cell objects defining display attributes for a uniform rectangular region. A shape is drawn onto the logical canvas by sequentially parsing through each row object in the vector and through each cell object contained therein to consistently structure the logical canvas. The logical canvas is converted into a table encoded in a tag-delimited script by converting in order each row object into a row within the table, and each cell object into a cell within each row.","A further embodiment provides an application-independent system and process for specifying graphical Web content as a table written in a tag-delimited script. A graphics object class is defined and includes state variables and at least one method for drawing a shape. A vector is included as one such state variable and includes at least one row object reference. Each row object reference includes at least one cell object reference. Logic encapsulated within the graphics object class is encoded and defines the at least one shape method to generate a selectable shape within a logical canvas. A table is rendered as a tag-delimited script from an instance of the graphics object class containing the selectable shape(s) rendered from each at least one row object reference and each at least one cell object reference.","Still other embodiments of the present invention will become readily apparent to those skilled in the art from the following detailed description, wherein is described embodiments of the invention by way of illustrating the best mode contemplated for carrying out the invention. As will be realized, the invention is capable of other and different embodiments and its several details are capable of modifications in various obvious respects, all without departing from the spirit and the scope of the present invention. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["10","11","12","13","12","22","20","11","20","14","22"]},"Alternatively, the Web browser  can request Web content from a remote server  which is retrieved from a remote storage device  and downloaded via an internetwork , such as the Internet. The internetwork  is interconnected to the intranetwork  via a gateway  or similar bridging device. As well, a remote client  executes a Web browser  and can also retrieve Web content from the Web server  or the remote server . Other network configurations and topologies, and arrangements of clients, server, and components are feasible, as would be recognized by one skilled in the art.","The Web browser  can display text and graphical Web content, including pictorial and illustrative content, such as photo-realistic images and charts and graphs, respectively. Low complexity graphical Web content can be generated and rendered by the server  using a graphics engine , as further described below with reference to FIG. . The graphics engine  executes within with the Web server  to generate low-complexity graphical Web content embedded within individual Web pages as a table definition.","Low-complexity graphical Web content includes non-exclusively charts and graphs rendered in two or three dimensions. Complex graphical Web content includes pictorial Web content, such as photo-realistic images, which are typically stored as downloadable files. Complex graphical Web content is typically generated offline in advance of download.","Responsive to a client request received from the Web browser , the Web server  executes the graphics engine to construct, build and render an embedded graphical object. The graphical object is rendered as a table in a tag-delimited script, such as HTML, which is downloaded to the Web browser . The Web browser  then interprets the downloaded HTML script to generate the embedded graphical object.","In the described embodiment, the Web browser  is a standard HTML-compatible Web browser, such as the Internet Explorer, licensed by Microsoft Corporation, Redmond, Wash., and Navigator, licensed by Netscape Corporation, Mountain View, Calif. The graphics object library used by the graphics engine exports a standard API used by the Java abstract Window Toolkit (AWT), licensed by Sun Microsystems, Inc., Palo Alto, Calif.","The individual computer systems, including servers ,  and clients , are general purpose, programmed digital computing devices consisting of a central processing unit (CPU), random access memory (RAM), non-volatile secondary storage, such as a hard drive or CD ROM drive, network interfaces, and peripheral devices, including user interfacing means, such as a keyboard and display. Servers need not necessarily include peripheral devices and user interfacing means. Program code, including software programs and data, are loaded into the RAM for execution and processing by the CPU and results are generated for display, output, transmittal, or storage.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["30","30","11","20","21"]},"The Web server  answers requests for Web content from Web browsers  (shown in ) by retrieving the requested Web content  from the storage device . The Web content  includes requests for graphical Web objects that are generated and rendered as tables encoded as HTML script statements by the graphics engine . The graphics engine  includes three functional modules: constructor , shape builder , and renderer . The constructor  references a graphics object library  to instantiate an instance of a graphics object class, as further described below with reference to . The graphics object library  contains a graphics object class definition, as further described below with reference to , that define and encapsulate individual methods for drawing graphical shapes.","The shape builder  draws shapes onto the graphics object while resolving any overlaps. Each shape is generated independently and is made up one of more uniform rectangular regions which are drawn onto the logical canvas. The uniform rectangular regions can overlap and the shape builder  identifies and resolves any overlaps between the uniform rectangular regions.","Finally, the renderer  converts the graphical object into a table definition  within an HTML script . The table definition  is then downloaded, interpreted and displayed by a standard Web browser  (shown in FIG. ).","Each of the foregoing modules is a computer program, procedure or module written as source code in a conventional programming language, such as the C++ or Java programming language, and is presented for execution by the CPU as object or byte code, as is known in the art. The various implementations of the source code and object and byte codes can be held on a computer-readable storage medium or embodied on a transmission medium in a carrier wave. The system  operates in accordance with a sequence of process steps, as further described below with reference to FIG. .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 3","b":["50","2","50"]},"Several member variables are defined within the graphics object class . A private variable mBackgroundCell contains background attributes, such as color. The vector initially contains one large row. A private member variable of datatype vector mRowVect (\u201cvector\u201d) contains a plurality of HTML row objects. Private member variables mWidthPix and mHeightPix specify the width and height of the logical canvas, respectively. Each HTML row object contains one or more HTML cell objects containing an individual renderable uniform rectangular region. Thus, HTML cell objects are converted into individual cells within a given row corresponding to the HTML row object. The complete set of HTML row objects form the table defined by the HtmlGraphics object.","The individual HTML row objects generally do not overlap and can be arranged in numerical order within the vector. The vector is updated as new shapes containing uniform rectangular regions are drawn. A public constructor method HtmlGraphics is defined to instantiate a new HtmlGraphics graphics object .","The HtmlGraphics graphics object class  also defines a plurality of publicly-defined methods to build individual graphical items. In the described embodiment, the following methods are defined.\n\n","These method descriptions are based on Java's AWT documentation: htp:\/\/java.sun.com\/products\/jdk\/1.1\/docs\/api\/java.awt.Graphics.html.","For example, the public method FillRect fills a specified rectangle using various attributes, such as color, text and bubble text. Bubble text is a form of contextual help that is automatically displayed when the cursor is placed over a given object in a displayed Web page. The left and right edges of the specified rectangle are located at pX and pX+pWidth. The top and bottom edges are at pY and pY+PLength. The resulting specified rectangle covers an area of PWidth pixels wide by PHeight pixels tall.","Finally, the HtmlGraphics graphics object class  encapsulates a public method render which converts each graphics object into an HTML table interpretable by a Web browser  (shown in FIG. ). Rendering is further described below with reference to FIG. .",{"@attributes":{"id":"p-0049","num":"0071"},"figref":["FIGS. 4A-B","FIG. 4A"],"b":["2","60","61","62","63","62","63","62","63","61","36","35","2","62","63","36"],"i":["a-c ","a-c ","a-c","a-c ","a-c","a-c ","a-c","a-c "]},"Referring next to , a depiction  of the logical canvas  with the addition of a solid rectangular region  is shown. The addition of the solid rectangle  requires the rendered regions , of the logical canvas  to be redefined such that the solid rectangular region  and the areas adjacent define separately rendered regions , . In particular, the solid rectangular region  overlaps the rendered horizontal region . Accordingly, rendered horizontal region must be split into three rendered horizontal regions -. Similarly, the solid rectangular region  overlaps rendered vertical region , which must be split into three rendered vertical regions ","In the described embodiment, each of the rendered vertical regions corresponds to individual rows within the table definition . As well, each of the rendered horizontal regions corresponds to individual cells within each of the rows.",{"@attributes":{"id":"p-0052","num":"0074"},"figref":["FIG. 5","FIG. 1"],"b":["80","80","21","20"]},"The process  generates a graphics object as follows. First, the characteristics of the graphics object, such as background color and dimensions, are specified (block ). Next, the graphics object is constructed and initialized to an empty logical canvas using the characteristics specified (block ), as further described below with reference to FIG. . Next, shapes are iteratively drawn onto the canvas using an encapsulated method (block ), as further described below with reference to FIG. . The particular method to execute depends on the shape needed. Processing continues as more shapes are drawn (block ). On the completion of iterative processing (block ), the graphics object is rendered (block ), as further described below with reference to FIG. . The rendering of a graphics object converts the logical canvas  into a table definition  embedded within an HTML script  (shown in FIG. ). The process then ends.",{"@attributes":{"id":"p-0054","num":"0076"},"figref":["FIG. 6","FIG. 3"],"b":["90","5","50"]},"First, a row vector is created (block ). Each row within the row vector will be rendered as an HTML row within the table definition  (shown in FIG. ). A background cell is initialized to the width of the canvas and background color (block ). The row is also initialized to the height of the logical canvas (block ). The background cell is added to the row (block ) and the row is added to the vector (block ). Thus, the empty logical canvas  is generated. The routine then returns.",{"@attributes":{"id":"p-0056","num":"0078"},"figref":"FIG. 7","b":["100","5","66","4"]},"Briefly, the dimensions of the shapes are independently defined and any overlap between the horizontal and vertical rendered regions must be resolved. The solid rectangular region constitutes a single uniform rectangular region and is thus the simplest form of a shape to draw.","More complex shapes could likewise be defined by combining several uniform rectangular regions. The routines described above with reference to  for drawing more complex shapes build on the basic operations described for drawing a rectangular region (routine ) and the necessary operations would be apparent to one skilled in the art. For example, a non-filled circle could be formed by generating a plurality of one pixel uniform rectangular regions arranged in accordance with the equation 2\u03c0r, where r is the radius of the region.","The first step in routine  checks if the input dimensions overlap the logical canvas  (block ). If the shape is outside the region to be rendered, then the routine returns. Otherwise, the input dimensions are modified to fully overlap the logical canvas  (block ). Next, an HTML cell object is created with the attributes pColor, pText and pBubbleText (block ).","The solid rectangular region is iteratively processed for vertical overlap by looping through the rows in the corresponding row vector which vertically overlap the new region (block ), as follows. First, the overlapping row is deleted from the row vector (block ) and the first non-overlapping, overlapping and second non-overlapping sections are obtained (block ). The deleted row is resized to match the vertical dimensions of the first non-overlapping section and inserted into the row vector (block ). The deleted row is cloned and resized to match the vertical dimensions of the overlapping section and inserted into the row vector (block ).","Next, the solid rectangular region is iteratively processed for horizontal overlap by looping through the cells in the corresponding row which horizontally overlap the new region (block ), as follows. First, the cell is deleted from the row (block ). Next, the first non-overlapping, overlapping and second non-overlapping sections are obtained (block ). The deleted cell is resized to match the horizontal dimensions of the first non-overlapping section and inserted into the row (block ). The new region is cloned and resized to match the horizontal dimensions of the overlapping section and inserted into the row (block ). The deleted cell is resized to match the horizontal dimensions of the second non-overlapping section and inserted into the row (block ). Processing continues until all cells which overlap the new cell horizontally have been processed (block ).","As well, to complete processing for vertical overlap, the deleted row is cloned and resized to match the vertical dimensions of the second non-overlapping section and inserted into the row vector (block ). Processing continues until all rows which overlap the new cell vertically have been processed (block ), after which the routine returns.",{"@attributes":{"id":"p-0063","num":"0085"},"figref":"FIG. 8","b":["120","5","36","35","2"]},"Thus, a string buffer is allocated (block ) to store the HTML table definition. The rows of the vector are iteratively processed (blocks -), as follows. First, the current row is converted to an HTML row (block ) and the HTML row is added to the table definition  (block ), as further described below with reference to FIG. . Processing continues for each of the remaining rows (block ), after which the routine returns.",{"@attributes":{"id":"p-0065","num":"0087"},"figref":"FIG. 9","b":["130","8","36"]},"Thus, a string buffer is allocated (block ) to store the HTML row definition. Next, each of the cells within the row is iteratively processed (block -), as follows. First, the current cell is converted to an HTML cell (block ) as further described below with reference to , and is added as an HTML cell within the HTML row definition (block ). Iterative processing of each of the remaining cells within the HTML row continues (block ), after which the routine returns.",{"@attributes":{"id":"p-0067","num":"0089"},"figref":"FIG. 10","b":["140","9","36","35"]},"Thus, if the cell has a specified color but does not contain text (block ), the HTML cell is created with the specified background color (block ), using the specified width and height. In the described embodiment, the color is specified as an RGB value in hexadecimal notation (#CCCCCC). A filename of a .gif file is also used which contains a one-pixel transparent image necessary to render the graphical object (t.gif). Finally, bubble text is added if specified (block ), after which the routine returns.","An example of an HTML table definition  containing color and no text is as follows:\n\n","Otherwise, if the cell contains color and text (block ), the HTML cell is created with the specified background color (block ), using the height and width specified. If specified, the style of text is added (block ). If a hyperlink is specified, the hyperlink is added (block ). The hyperlink text is added to the cell (block ), after which the routine returns.","An example of an HTML table definition  containing a graphic object containing color and text is as follows:\n\n","While the invention has been particularly shown and described as referenced to the embodiments thereof, those skilled in the art will understand that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":"1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3","b":["50","2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 4A-B","b":"2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6","b":"5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7","b":"5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8","b":"5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9","b":"8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10","b":"9"}]},"DETDESC":[{},{}]}
