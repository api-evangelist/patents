---
title: Method of generically specifying congestion control and avoidance behavior
abstract: A method for controlling congestion control and avoidance behavior of a plurality of heterogeneous network processors in a network is disclosed. The network also includes at least one host processor that utilizes at least one congestion control application. The method include providing a plurality of generic application program interfaces (APIs). The generic APIs communicate with the congestion control application(s) and the heterogeneous network processors. The generic APIs communicate with the congestion control application(s) in the host processor(s) in a network processor independent manner, but manage the congestion control and avoidance behavior of the heterogeneous network processors in a network processor specific manner. Thus, the generic APIs allow the control application(s) to be network processor independent and to manage the congestion control and avoidance behavior of the heterogeneous network processors in the network processor specific manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07796508&OS=07796508&RS=07796508
owner: International Business Machines Corporation
number: 07796508
owner_city: Armonk
owner_country: US
publication_date: 20080602
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Under 35 USC \u00a7120, this application is a continuation application and claims the benefit of priority to U.S. patent application Ser. No. 10\/706,231 filed Nov. 12, 2003, now abandoned entitled \u201cSystem for Generically Specifying Congestion Control and Avoidance Behavior\u201d, all of which is incorporated herein by reference.","The present invention relates to computer systems, and more particularly to a method for providing a mechanism for allowing a host to manage congestion control and avoidance behavior of a network processor in a scalable, flexible manner.","Driven by increasing usage of a variety of network applications, such as those involving the Internet, computer networks are of increasing interest. In order to couple portions of a network together or to couple networks together, network processors residing in switches, routers, and\/or other components are typically used. In order to adequately control the traffic through the network, the behavior of each network processor is controlled to determine its actions in the event of congestion and to attempt to avoid congestion. Congestion occurs for a particular network processor when the network processor may drop packets, for example because the network processor receives more packets in a particular interval than can be queued or transmitted. The action(s) that a particular network processor is to take in the event of congestion may change depending upon the network. Thus, a network administrator typically desires to manage the congestion control and avoidance behavior of the network processors.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1","b":["10","10","10","30","40","50","10","22","10","22","30","40","50","10"]},"The conventional network processors , , and  are typically purchased by the owner of the conventional system . The conventional network processors , , and  each includes conventional software and\/or firmware , , and , respectively, that may be different. For example, the conventional network processors , , and  may include different versions of a particular model of network processor from a particular vendor and\/or other model(s) of network processor that may be from other vendors. Thus, the conventional network processors  and  are depicted as having software and\/or firmware  and  that are different versions of a Model X network processor, while the software and\/or firmware  of the conventional network processor  is a Model Y network processor. Because the conventional network processors , , and  are designed to communicate with different control applications, each conventional network processor , , and  utilizes conventional application program interfaces (APIs) , , and , respectively, that are specific to the particular software and\/or firmware , , and , respectively.","The conventional congestion control application  is used to manage the congestion control and avoidance behavior of the conventional network processors , , and , respectively. The conventional congestion control application  thus includes a corresponding set of conventional behaviors , , and  for each set of the conventional APIs , , and , respectively. The conventional APIs , , and  are designed to communicate with the conventional behaviors , , and , respectively. The conventional APIs , , and  are also used to control the corresponding software and\/or firmware , , and , respectively. Thus, using the conventional behaviors , , and  corresponding to the conventional APIs , , and , respectively, the conventional congestion control application  can control the congestion control and avoidance behavior of each of the conventional network processors , , and , respectively.","Although the conventional system  functions, one of ordinary skill in the art will readily recognize that the conventional system is difficult to scale. The conventional network processors , , and  are typically heterogeneous in nature. Because the conventional network processors , , and  are heterogeneous, the conventional network processors may include different versions of a particular model of network processor and\/or different models of network processor. In addition, the congestion control and avoidance behavior of each conventional network processor , , and  may differ widely. Thus, the software and\/or firmware , , and  of different network processors typically differ. The APIs , , and  thus also differ. Consequently, the corresponding behaviors , , and  of the conventional congestion control application  are distinct. One of ordinary skill in the art will also readily recognize that the conventional system  may actually include a large number of network processors. Consequently, the number of conventional APIs , , and  with which the conventional congestion control application  must be compatible may be large. As a result, the number of distinct conventional behaviors used by the conventional host processor  and developed by the owner of the conventional system , such as the conventional behaviors , , and , may be large. As a result, the congestion control application  may be complex and include an amalgamation of a variety of behaviors, one for each model and\/or version of conventional network processor. It may thus be difficult to incorporate new network processors, which may have software and\/or firmware and thus APIs not previously supported. The conventional system  is, therefore, difficult to scale. Because of difficulties in incorporating new software and\/or firmware and their corresponding APIs, evolving the conventional congestion control application  and, therefore, the conventional system  to utilize improved network processors may be problematic. Furthermore, because supporting a variety of conventional behaviors , , and  makes the conventional congestion control application  more complex, the conventional system  may be subject to higher maintenance costs.","Accordingly, what is needed is a method for allowing a host to control congestion control and avoidance behavior of a network processor in a scalable, flexible manner. The present invention addresses such a need.","The present invention provides a method for managing congestion and avoidance behavior of network processors, the method comprising: providing for controlling network traffic by a plurality of network processors, a first of the plurality of network processors being of a different model or version from a second of the plurality of network processors; providing for a congestion control application being network processor independent such that the congestion control application need not have specific knowledge of a network processor's hardware, software, or firmware in order to manage the network processor's congestion and avoidance behavior; managing congestion and avoidance behavior of the plurality of network processors by a host processor having the congestion control application; and, providing for a plurality of application programming interfaces (APIs), each of the plurality of APIs being usable by the congestion control application of the host processor to manage the congestion and avoidance behavior of any of the plurality of network processors, none of the plurality of APIs being limited for use with a specific network processor model or version.","According to the method disclosed herein, the present invention provides a generic mechanism for managing the congestion control and avoidance behavior. As a result, a customer need not maintain a congestion control application having different sets of API for different types (e.g. models and\/or versions) of network processors.","The present invention relates to an improvement in computer system. The following description is presented to enable one of ordinary skill in the art to make and use the invention and is provided in the context of a patent application and its requirements. Various modifications to the preferred embodiment will be readily apparent to those skilled in the art and the generic principles herein may be applied to other embodiments. Thus, the present invention is not intended to be limited to the embodiment shown, but is to be accorded the widest scope consistent with the principles and features described herein.","The present invention provides a method for controlling congestion control and avoidance behavior of a plurality of heterogeneous network processors in a network. The network also includes at least one host processor that utilizes at least one congestion control application. The method comprises providing a plurality of generic application program interfaces (APIs). The generic APIs communicate with the congestion control application(s) and the heterogeneous network processors. The generic APIs communicate with the congestion control application(s) in a network processor independent manner, but manage the congestion control and avoidance behavior of the heterogeneous network processors in a network processor specific manner. Thus, the generic APIs allow the congestion control application(s) to be network processor independent and to manage the congestion control and avoidance behavior of the heterogeneous network processors in the network processor specific manner.","The present invention will be described in terms of a particular computer system, a particular network processor, and certain APIs. However, one of ordinary skill in the art will readily recognize that this method will operate effectively for other computer system and network processors, as well as additional and\/or other APIs. The present invention is also described in the context of a network including specific components and a particular number of components. However, one of ordinary skill in the art will readily recognize that the present invention is consistent with other networks containing other and\/or additional components as well as another number of components. The present invention is also described in the context of congestion control and avoidance behavior. One of ordinary skill in the art will readily recognize that the term congestion control and avoidance denotes congestion control and\/or avoidance.","To more particularly illustrate the method in accordance with the present invention, refer now to , depicting one embodiment of a system  in accordance with the present invention for managing congestion control and avoidance behavior of network processors. The system  is depicted as including a host processor  and network processors , , and . The host processor  includes a congestion control application . The network processors , , and  include congestion control software and\/or firmware , , and , respectively. However, one of ordinary skill in the art will readily recognize that the generic APIs  are of particular utility. In addition, the generic APIs  are depicted as a separate entity. However, one of ordinary skill in the art will readily recognize that the host processor  and network processors , , and  utilize the generic APIs  for communication and control.","The network processors , , and  are capable of being heterogeneous. Thus, the network processors , , and  may have hardware, software, and\/or firmware for congestion control that differ significantly. For example, as depicted in , the software and\/or firmware  for the network processor  is Model X, Version 1.0. In contrast, the network processor  includes software and\/or firmware  that is Model X, Version 2.0. The network processor  is a completely different model, having software and\/or firmware  that is Model Y, Version 1.0. Other network processors (not shown) having different models and\/or versions may also be included. Because they are heterogeneous, in the absence of the present invention, the network processors , , and  would each require a separate network processor specific set of APIs in order to be controlled by a conventional congestion control application, such as the conventional congestion control application  depicted in .","Referring back to , the generic APIs  include APIs are used by the congestion control application  and the network processors , , and . In particular, the generic APIs communicate with and are used by the congestion control application  in a network processor independent manner. In other words, the congestion control application  is network processor independent. In the context of the present application, a network processor independent manner means that the congestion control application  need not contain knowledge of the specific hardware, software, and\/or firmware , , and  of any of the network processors , , and , respectively, being controlled. At the same time, the congestion control application  can manage the congestion avoidance and control behavior of the network processors , , and  by managing the software and\/or firmware , , and , respectively. Because the congestion control application  is network processor independent, the congestion control application  can configure and\/or update the network processors , , and  without requiring specific knowledge of the hardware or software and\/or firmware , , and , respectively of the individual network processors , , and , respectively.","The generic APIs  also communicate with and control the network processors , , and  in a network processor specific manner. In the context of the present application, network processor specific includes a knowledge of the specifics of a particular network processor, such as the hardware, software and\/or firmware , , and , and possibly other components used by the particular network processor , , and , respectively. Thus, the APIs  allow the congestion control application  to be network processor independent while allowing each of the network processors , , and  to be control in a network processor specific manner.","Using the system , and more particularly the generic APIs , the congestion control application  can be network processor independent. Because of the use of the generic APIs, the congestion control application  can still control the potentially heterogeneous network processors , , and  in a network processor specific manner. As a result, the congestion control application , need not include a separate set of APIs for each type of network processor , , and  used. The congestion control application  is, therefore, simpler. As a result, it is significantly simpler to scale the system , including adding new types of network processors. It is thus also easier to improve the performance of the system  by adding improved network processors. In addition, the maintenance costs of the system  may be reduced due to the use of a simpler congestion control application .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3","FIG. 2","FIGS. 2 and 3"],"b":["200","200","100","200","150","112","150","120","130","140","122","132","142","150","120","130","140","150"]},"The congestion control and avoidance behavior of network processors, such as the network processors , , and , is abstracted, via step . Each network processor , , and  performs congestion control and avoidance in a specific manner. Step  abstracts the congestion control and avoidance behavior of network processors to a more general level. For example, step  includes determining the locations at which network processor might manage congestion.","For example,  is a block diagram depicting a generalized view of one embodiment of a network processor  indicating locations in the network processor in which the system in accordance with the present invention might manage congestion control and avoidance behavior. Referring to , any of the network processors , , and  might be represented by the network processor . The network processor  is obtained by abstracting the congestion control and avoidance behavior of the network processors , , and  in step . In particular, the network processor  indicates the locations in a network processor at which congestion control and avoidance might be managed. The network processor  thus includes an ingress side  and an egress side . The ingress side  includes ports - to -for the network processor  having n ports. Note that the egress side  also includes ports - to -. The ingress side  also includes receive queues - to -where received packets are queued and receive flows - to -. Note that although only two receive flows - to -are shown from receive queues - and -, respectively, there are generally multiple flows from each set of receive queues - to -, respectively. The egress side  includes the scheduler queue flows - to -, the scheduler queues - to -, the scheduler , the transmit queues - to -, and the ports - to -. Note that although only two scheduler flows - to -are shown for scheduler queues - and -, respectively, there are generally multiple flows to each scheduler queue - to -, respectively. Congestion avoidance and control behavior might be managed at any of the ports - to -(on either the ingress or egress side), the receive queues - to -, the receive flows - to -, the scheduler flows - to -, the scheduler queues - to -, the scheduler , and the transmit queues - to -. Thus, in one embodiment of the general network processor , there are seven locations at which congestion control and avoidance might be managed. However, most network processors , , and  actually manage congestion at some of these locations. Thus, through step  of the method , the locations - to -, - to -, - to -, - to -, - to -, - to -, and - to -, are identified.","Other aspects of a network processor are preferably also abstracted in step . For example, the types of congestion control algorithms that could be applied at the locations - to -, - to -, - to -, - to -, - to -, - to -, and - to -could also be identified in step . The type of algorithm applied may depend upon the location - to -, - to -, - to -, - to -, - to -, - to -, and - to -at which an algorithm is desired to be applied. For example, a Bandwidth Allocation Technology (BAT) algorithm (not explicitly shown) might control congestion at the input ports - to -. Packets arriving at each port - to -are regarded as one flow. The BAT algorithm computes the corresponding transmit probabilities and discards packets accordingly. The algorithm generally applies only when congestion is sensed by the congestion control hardware unit (not explicitly shown) in the network processor . BAT can preferably be enabled or disabled on a per port basis. Certain congestion control algorithms operate on the receive queues - to -. For example, the Random Early Discard (RED) algorithm might be applied at one or more of the receive queues - to -. The RED algorithm uses the weighted average queue length as a feedback mechanism to decide on when to drop packets. When the weighted average queue length is between two configured thresholds, the RED algorithm typically drops packets depending on a calculated probability. The RED algorithm relies on the responsive nature of the end protocols to prevent congestion. Many congestion control algorithms might operate on flows - to -, such as those based on DiffServ flows. A coloring algorithm (srTCM, trTCM, BAT) first meters the flows - to -. A discard algorithm (such as BAT) uses the metered color and dynamically computed transmit probabilities to make discard decisions for each of the flows - to -. Algorithms like Flow Random Early Discard (FRED) might also operate on the flows - to -. Algorithms such as FRED might also operate on the scheduler flows - to -. Similarly, some network processors may support the operation of algorithms such as RED and WRED on the scheduler queues - to -and\/or on the transmit queues - to -. Thus, step  abstracts network processors, such as the network processors , , and , in the context of congestion control and avoidance.","The generic APIs  are defined using the abstraction provided, via step . Thus, step  provides the generic APIs  that can preferably manage congestion control and avoidance behavior at any of the locations - to -, - to -, - to -, - to -, - to -, - to -, and - to -. Furthermore, step  provides the APIs such that the individual network processors , , and  can be managed at the appropriate location(s) in the network processors , , and , respectively, corresponding to one or more of the of the locations - to -, - to -, - to -, - to -, - to -, - to -, and - to -. The generic APIs  provided in step  can also be used to control other aspects of the network processors , , and  in a network processor specific manner. Furthermore, where a particular operation is not supported by a particular network processor , , and , the generic APIs  account for this by providing a null behavior to the congestion control application .","Step  also provides the generic APIs  such that the APIs can be used with a network processor independent congestion control application . Thus, using the method , the generic APIs  can be provided. The network processor independent congestion control application , as well as the network processors , , and  can be developed to utilize the generic APIs .","In a preferred embodiment, the generic APIs  include at least APIs for configuring and updating the congestion control and avoidance behavior of each of the network processors , , and  in a network processor specific manner. The generic APIs  preferably include APIs for enabling and disabling congestion control and behaviors, as well as APIs for listing information relating to congestion control and avoidance in the network and, more specifically, for the network processors , , and . In addition to controlling the network processors , , and  in a network processor specific manner, the APIs  preferably also return a null behavior for a particular function that is not implemented by a particular network processor.","The APIs of the generic APIs  that are used to configure and update the congestion avoidance and control behavior preferably determine the location(s) in each of the network processors , , and  at which congestion control and avoidance is to be managed. For example, as discussed below with respect to , the configure and update APIs preferably indicate whether congestion control and avoidance is to be applied at the ingress, egress, particular port(s), particular queue(s), and particular flow(s). The configure and update APIs of the generic APIs  may also specify information used by the congestion control algorithm(s) used by the network processors , , and . In one embodiment, the configure and control APIs may indicate the congestion control algorithm, such as BAT or RED that is used by a particular network processor , , or  one or more locations.","In a preferred embodiment, the generic APIs  include five APIs: configure, update, enable, disable, and list. In a preferred implementation of the generic APIs, including the configure, update, enable, disable, and list APIs, parameters and fields are specified. Table 1 describes a preferred embodiment of the fields used.",{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field Name","Field Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CBS","Committed Burst Size. This is used by the srTCM and trTCM"]},{"entry":[{},"algorithms to meter flows."]},{"entry":["cc_discard","Specifies the algorithm used to discard packets."]},{"entry":["cc_entity","Indicates the point of the network element where congestion"]},{"entry":[{},"control should operate (Port, Queue, Flow)"]},{"entry":["cc_meter","Specifies the algorithm used to meter or color flows."]},{"entry":["cc_point","Indicates whether congestion control should apply at the ingress"]},{"entry":[{},"entities or egress entities. WEST supports congestion control"]},{"entry":[{},"only at ingress entities."]},{"entry":["C","Coefficient of increase for BAT flows."]},{"entry":["CIR","Committed Information Rate. This is used by the srTCM and"]},{"entry":[{},"trTCM algorithms to meter flows."]},{"entry":["D","Coefficient of decrease for BAT flows."]},{"entry":["Discard Area","The area containing parameters for the discard algorithm."]},{"entry":[{},"Example of a discard algorithms is BAT."]},{"entry":["Discard Information","Area containing the parameters of the discard algorithm that is"]},{"entry":["Area","chosen via cc_discard."]},{"entry":["EBS","Excess Burst Size. This is used by the srTCM algorithm to meter"]},{"entry":[{},"flows."]},{"entry":["Error Area Size","Indicates the size (in words) of the parameter area associated"]},{"entry":[{},"with error operation."]},{"entry":["Error Code","Indicates the Error code that is sent with error operation."]},{"entry":["Error Queue Number","Indicates the error queue number associated with this port. If"]},{"entry":[{},"discard error packet is set to yes, this queue will be set to 0x3F to"]},{"entry":[{},"discard error packets."]},{"entry":["Flowid","A 16 bit flow identifier value."]},{"entry":["Invoke ID","A field used by the Service Requestor to correlate invocations"]},{"entry":[{},"with responses."]},{"entry":["Length of Common","Length of the Common Discard Area. This area contains discard"]},{"entry":["Discard Area","information that is common across all flows, ports or queues."]},{"entry":["Length of Common","Length of the Common Meter Area. This area contains meter"]},{"entry":["Meter Area","information that is common across all flows, ports or queues."]},{"entry":["Length of Discard Area","Length of the Discard Area."]},{"entry":["Length of Meter Area","Length of the Meter Area."]},{"entry":["max_p","Maximum probability of performing a RED drop."]},{"entry":["max_th","Maximum queue threshold for the RED algorithm."]},{"entry":["Max","Maximum BAT bandwidth for flow i."]},{"entry":["MaxOverride","This value overrides the Maxvalues for all BAT flows."]},{"entry":["Meter Area","The area containing parameters for the metering algorithm."]},{"entry":[{},"Examples of metering algorithms are srTCM, trTCM and BAT."]},{"entry":["min_th","Minimum queue threshold for the RED algorithm."]},{"entry":["Min","Minimum BAT bandwidth for flow i."]},{"entry":["MinOverride","This value overrides the Minvalues for all BAT flows."]},{"entry":["MO","This is the value for meter over-ride. In some cases, the metering"]},{"entry":[{},"algorithm can be controlled on a per-flow basis. If this value is"]},{"entry":[{},"non-zero, the specified meter algorithm is to be used for this"]},{"entry":[{},"flow. Else, the cc_meter value in the header is to be used to"]},{"entry":[{},"select the metering algorithm."]},{"entry":["No: of fields updated in","Number of fields in the common discard area that are to be"]},{"entry":["the common discard","updated"]},{"entry":"area"},{"entry":["No: of fields updated in","Number of fields in the common meter area that are to be"]},{"entry":["the common meter area","updated"]},{"entry":["No: of flows updated","Number of flows whose parameters are to be updated. This field"]},{"entry":[{},"is present for updating both the meter info area and the discard"]},{"entry":[{},"info area."]},{"entry":["No: of ports configured","Number of ports for which configuration parameters are"]},{"entry":[{},"specified in this packet."]},{"entry":["num_ids","Number of identifiers that follow. The 16-bit identifiers can be"]},{"entry":[{},"port numbers, flow numbers or queue numbers - this depends on"]},{"entry":[{},"the algorithm in use. This is used for enabling, disabling and"]},{"entry":[{},"listing parameters of the various congestion control algorithms. If"]},{"entry":[{},"the value of this parameter is zero, then it means that parameters"]},{"entry":[{},"for all the identifiers (ports, queues or flows) for this algorithm"]},{"entry":[{},"are to be enabled\/disabled\/listed."]},{"entry":["Operation Class","Indicates the conditions under which a response is to be sent to"]},{"entry":[{},"the Service Requestor."]},{"entry":["Operation Code","Indicates the operation whose invocation is being requested."]},{"entry":["Operation Version","Indicates the version level of the operation."]},{"entry":["Parameter Area Size","Indicates the size (in words) of the parameter area associated"]},{"entry":[{},"with this operation."]},{"entry":["PBS","Peak Burst Size. This is a parameter used by the trTCM"]},{"entry":[{},"algorithm to meter flows."]},{"entry":["PIR","Peak Information Rate. This is a parameter used by the trTCM"]},{"entry":[{},"algorithm to meter flows."]},{"entry":["Port No:","Configuration parameters for this port number are present in the"]},{"entry":[{},"following fields."]},{"entry":["Port Number","Indicates the instance of the port type being operated upon."]},{"entry":[{},"WEST supports a maximum of 32 possible ports."]},{"entry":["Result Area Size","Indicates the size (in words) of the parameter area associated"]},{"entry":[{},"with result operation."]},{"entry":["rxq_num","Indicates the receive queue associated with this algorithm. This is"]},{"entry":[{},"used for configuring queue-based congestion control mechanisms"]},{"entry":[{},"like RED."]},{"entry":["Service Element Type","Indicates the nature of service. The possible values are: API-"]},{"entry":[{},"INVOKE, API-RESULT or API-ERROR."]},{"entry":["Shock Absorber","Shock Absorber constant for BAT."]},{"entry":"constant"},{"entry":["w_qlen","Weighting factor for calculating the average queue length for the"]},{"entry":[{},"RED algorithm."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"150"},"In order to utilize the generic APIs, a common four-word header (not shown) for congestion control services is preferably used. The first two words of the header are preferably common to congestion control software and\/or firmware , , and . The last two words are preferably common to all congestion algorithms that can be used, such as RED and DiffServ. Table 2 describes the uses of various fields in the header. However, in an alternate embodiment, another scheme including other fields could be used.",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Field Name","Bit","Word","Value","Remarks"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Service Element","02 . . . 03","0","0b00","API-INVOKE"]},{"entry":["Type",{},{},"0b01","API_RESULT"]},{"entry":[{},{},{},"0b10","API_ERROR"]},{"entry":["Operation Class","6 . . . 7","0","0b00","Report results and errors"]},{"entry":[{},{},{},"0b01","Report results only"]},{"entry":[{},{},{},"0b10","Report errors only"]},{"entry":[{},{},{},"0b11","Do not report"]},{"entry":["Invoke ID","16 . . . 31","0","X","Any value specified by Service"]},{"entry":[{},{},{},{},"Requestor"]},{"entry":["Operation Version","0 . . . 3","1","0x0-0xF","Value must match software level"]},{"entry":["Operation Code","\u20024 . . . 15","1","0x0C10","IFS_Congestion_Config operation"]},{"entry":[{},{},{},"0x0C11","IFS_Congestion_Updata operation"]},{"entry":[{},{},{},"0x0C12","IFS_Congestion_Enable operation"]},{"entry":[{},{},{},"0x0C13","IFS_Congestion_Disable operation"]},{"entry":[{},{},{},"0x0C14","IFS_Congestion_List operation"]},{"entry":["Parameter Area","16 . . . 31","1",{},"Size in Words starting from Word 2"]},{"entry":"Size"},{"entry":["cc_point","0 . . . 1","2","0x0","Ingress"]},{"entry":[{},{},{},"0x1","Egress"]},{"entry":[{},{},{},"0x2-0x3","Reserved"]},{"entry":["cc_entity","\u20028 . . . 15","2","0x0","Port"]},{"entry":[{},{},{},"0x1","Queue"]},{"entry":[{},{},{},"0x2","Flow"]},{"entry":[{},{},{},"0x3-0x7","Reserved"]},{"entry":["cc_meter","24 . . . 31","2","0x0","srTCM (color blind)"]},{"entry":[{},{},{},"0x1","srTCM (color aware)"]},{"entry":[{},{},{},"0x2","trTCM (color blind)"]},{"entry":[{},{},{},"0x3","trTCM (color aware)"]},{"entry":[{},{},{},"0x4","BAT"]},{"entry":[{},{},{},"0x5","NULL"]},{"entry":[{},{},{},"0x6 . . . 0xFF","User Defined"]},{"entry":["cc_discard","24 . . . 31","3","0x0","BAT"]},{"entry":[{},{},{},"0x1","RED"]},{"entry":[{},{},{},"0x2","WRED"]},{"entry":[{},{},{},"0x3","SARED"]},{"entry":[{},{},{},"0x4","FRED"]},{"entry":[{},{},{},"0x5-0xFF","User Defined"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"As its name implies, the configure API is used to allow the congestion control application  (as utilized by a user such as a network administrator) to configure the congestion control and avoidance behavior in a network processor independent manner, yet operate on the network processors , , and  to configure the congestion control and avoidance behavior in a network processor specific manner. Note that the values of various parameters and fields depends upon, among other factors, the point at which congestion control and avoidance behavior is to be configured as well as the algorithm used. The parameters used by a preferred embodiment of the configure API are described below in Table 3.",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter",{},{}]},{"entry":["Name","Value","Remarks"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CC_Point","Ingress","The NP side at which congestion"]},{"entry":[{},"Egress","control configuration applies."]},{"entry":["CC_Entity","Port","A Port is specified by Port Number"]},{"entry":[{},"Queue","A Queue is specified by a Queue Id"]},{"entry":[{},"Flow","A Flow is specified by a Flow Id"]},{"entry":["CC_Meter","srTCM (color blind)","The additional parameters that"]},{"entry":[{},"srTCM (color","srTCM is associated with are:"]},{"entry":[{},"aware)","Committed Information Rate (CIR),"]},{"entry":[{},{},"Committed Burst Size (CBS), Excess"]},{"entry":[{},{},"Burst Size (EBS). srTCM applies to"]},{"entry":[{},{},"Flows only."]},{"entry":[{},"trTCM (color blind)","The additional parameters that trTCM"]},{"entry":[{},"trTCM (color","is associated with are: Comitted"]},{"entry":[{},"aware)","Information Rate (CIR), Committed"]},{"entry":[{},{},"Burst Size (CBS), Peak Burst Size"]},{"entry":[{},{},"(PBS) and Peak Information Rate"]},{"entry":[{},{},"(PIR). trTCM applies only to Flows."]},{"entry":[{},"BAT","The additional parameters that BAT"]},{"entry":[{},{},"is associated with are: Max-i, Min-i,"]},{"entry":[{},{},"Shock Absorber Constant, Di and Ci."]},{"entry":[{},{},"BAT metering applies only to Flows."]},{"entry":["CC_Discard","BAT","BAT is associated with Max-i, Min-i,"]},{"entry":[{},{},"Shock Absorber Constant, Ci and Di."]},{"entry":[{},{},"BAT discard is applicable for Ports"]},{"entry":[{},{},"and Flows."]},{"entry":[{},"RED","RED is associated with w_qlen,"]},{"entry":[{},{},"max_th, min_th, max_p. RED is"]},{"entry":[{},{},"applicable for Queues only."]},{"entry":[{},"WRED","The additional parameters associated"]},{"entry":[{},"SARED","with WRED, FRED and SARED"]},{"entry":[{},"FRED","have not been defined in this"]},{"entry":[{},"Vendor Specific","invention."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The update API allows the congestion control application  (as utilized by a user such as a network administrator) to update the congestion control and avoidance behavior in a network processor independent manner, yet operate on the network processors , , and  to update the congestion control and avoidance behavior in a network processor specific manner. In a preferred embodiment, the update API allows a bit field flag to be specified for each field. If the flag is set, the field value is sent with update service. Also in the preferred embodiment, the field ordering is consistent. Note that the values of various parameters and fields depends upon, among other factors, the point at which congestion control and avoidance behavior is to be updated as well as the algorithm used. The parameters used by a preferred embodiment of the update API are described below in Table 4.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter Name","Metering Algorithm","Additional Parameters"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CC_Meter","srTCM","The modifiable parameters that srTCM is"]},{"entry":[{},"(color blind)","associated with are: Committed Information"]},{"entry":[{},"srTCM (color","Rate (CIR), Committed Burst Size (CBS),"]},{"entry":[{},"aware)","Excess Burst Size (EBS). srTCM applies to"]},{"entry":[{},{},"Flows only and the parameters must be"]},{"entry":[{},{},"associated with a Flow Id."]},{"entry":[{},"trTCM","The modifiable parameters that trTCM is"]},{"entry":[{},"(color blind)","associated with are: Comitted Information"]},{"entry":[{},"trTCM(color","Rate (CIR), Committed Burst Size (CBS),"]},{"entry":[{},"aware)","Peak Burst Size (PBS) and Peak Information"]},{"entry":[{},{},"Rate (PIR). trTCM applies only to Flows and"]},{"entry":[{},{},"the parameters must be associated with a Flow"]},{"entry":[{},{},"Id."]},{"entry":[{},"BAT","The modifable parameters that BAT is"]},{"entry":[{},{},"associated with are: Max-i, Min-i, Shock"]},{"entry":[{},{},"Absorber Constant, Di and Ci. BAT metering"]},{"entry":[{},{},"applies only to Flows and the parameters must"]},{"entry":[{},{},"be associated with a Flow Id."]},{"entry":["CC_Discard","BAT","The modifiable parameters that BAT is"]},{"entry":[{},{},"associated with are: Max-i, Min-i, Shock"]},{"entry":[{},{},"Absorber Constant, Ci and Di. BAT discard is"]},{"entry":[{},{},"applicable for Ports and Flows. Therefore all"]},{"entry":[{},{},"updates must be associated with a Port"]},{"entry":[{},{},"Number or a Flow Id."]},{"entry":[{},"RED","The modifable parameters that RED is"]},{"entry":[{},{},"associated with are: w_qlen, max_th, min_th,"]},{"entry":[{},{},"max_p. RED is applicable for Queues only."]},{"entry":[{},{},"Therefore all parameters must be associated"]},{"entry":[{},{},"with a Queue Id."]},{"entry":[{},"WRED","The modifiable parameters associated with"]},{"entry":[{},"SARED","WRED, FRED and SARED have not been"]},{"entry":[{},"FRED","defined in this invention."]},{"entry":[{},"Vendor Specific"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The enable API allows the congestion control application  (as utilized by a user such as a network administrator) to enable selected algorithms for congestion control and avoidance behavior in a network processor independent manner, yet operate on the network processors , , and  to enable the algorithm(s) for a particular processor's , , or  congestion control and avoidance behavior in a network processor specific manner. For example, the enable API can be used to enable specific algorithm(s) at certain ports (for the ingress and\/or egress side) and\/or flows. Note that the values of various parameters and fields depends upon, among other factors, the point at which congestion control and avoidance behavior is to be enabled as well as the algorithm used. The parameters used by a preferred embodiment of the enable API are described below in Table 5.",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter Name","Value","Remarks"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CC_Point","Ingress","The NP side at which congestion"]},{"entry":[{},"Egress","control configuration applies."]},{"entry":["CC_Entity","Port","A Port is specified by Port"]},{"entry":[{},{},"Number"]},{"entry":[{},"Queue","A Queue is specified by a Queue"]},{"entry":[{},{},"Id"]},{"entry":[{},"Flow","A Flow is specified by a Flow Id"]},{"entry":["Number Of Instances","0 . . . 2","A value of zero implies all"]},{"entry":[{},{},"instances of the CC_Entity at"]},{"entry":[{},{},"the specified CC_Point."]},{"entry":["List of Instance Ids","Instance Id. . .","A list of instances of"]},{"entry":[{},"Instance Id","the specified CC_Entity for"]},{"entry":[{},{},"which the configured congestion"]},{"entry":[{},{},"control\/avoidance algorithm is"]},{"entry":[{},{},"required to be enabled."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The disable API allows the congestion control application  (as utilized by a user such as a network administrator) to deactivate selected algorithms for congestion control and avoidance behavior in a network processor independent manner, yet operate on the network processors , , and  to disable the algorithm(s) for a particular processor's , , or  congestion control and avoidance behavior in a network processor specific manner. For example, the enable API can be used to disable specific algorithm(s) at certain ports (for the ingress and\/or egress side) and\/or flows. Note that the values of various parameters and fields depends upon, among other factors, the point at which congestion control and avoidance behavior is to be disabled as well as the algorithm used. The parameters used by a preferred embodiment of the disable API are described below in Table 6.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter Name","Value","Remarks"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CC_Point","Ingress","The NP side at which congestion"]},{"entry":[{},"Egress","control configuration applies."]},{"entry":["CC_Entity","Port","A Port is specified by Port"]},{"entry":[{},{},"Number"]},{"entry":[{},"Queue","A Queue is specified by a Queue"]},{"entry":[{},{},"Id"]},{"entry":[{},"Flow","A Flow is specified by a Flow Id"]},{"entry":["Number Of Instances","0 . . . 2","A value of zero implies all"]},{"entry":[{},{},"instances of the CC_Entity at"]},{"entry":[{},{},"the specified CC_Point."]},{"entry":["List of Instance Ids","Instance Id. . .","A list of instances of a the"]},{"entry":[{},"Instance Id","specified CC_Entity for which"]},{"entry":[{},{},"the configured congestion"]},{"entry":[{},{},"control\/avoidance algorithm is"]},{"entry":[{},{},"required to be disabled."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The list API allows the congestion control application  (as utilized by a user such as a network administrator) to be used to view the congestion control and avoidance information for any of the network processors in a network processor independent manner. The list API obtains this information for viewing from the network processors , , and  in a network processor specific manner. For example, the information returned in response to the list API might contain metering and discard information, the current state (enabled\/disabled) for the location(s) of each of the network processors , , and  from which the information is requested. Note that the values of various parameters and fields depends upon, among other factors, the algorithm used. The parameters used by a preferred embodiment of the disable API are described below in Table 7.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter Name","Value","Remarks"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CC_Point","Ingress","The NP side at which congestion"]},{"entry":[{},"Egress","control configuration applies."]},{"entry":["CC_Entity","Port","A Port is specified by Port Number"]},{"entry":[{},"Queue","A Queue is specified by a Queue Id"]},{"entry":[{},"Flow","A Flow is specified by a Flow Id"]},{"entry":["Number Of","0 . . . 2","A value of zero implies all instances"]},{"entry":["Instances",{},"of the CC_Entity at the specified"]},{"entry":[{},{},"CC_Point."]},{"entry":["List of","Instance Id. . .","A list of instances of a the specified"]},{"entry":["Instance Ids","Instance Id","CC_Entity for which the configured"]},{"entry":[{},{},"congestion control\/avoidance"]},{"entry":[{},{},"information is required to be"]},{"entry":[{},{},"provided."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The definitions for the parameters listed above are shown in Table 6, below.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field Name","Field Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CBS","Committed Burst Size. This is used by the srTCM and trTCM algorithms"]},{"entry":[{},"to meter flows."]},{"entry":["cc_discard","Specifies the algorithm used to discard packets."]},{"entry":["cc_entity","Indicates the point of the network element where congestion"]},{"entry":[{},"control should operate (Port, Queue, Flow)"]},{"entry":["cc_meter","Specifies the algorithm used to meter or color flows."]},{"entry":["cc_point","Indicates whether congestion control should apply at the"]},{"entry":[{},"ingress entities or egress entities. WEST supports congestion"]},{"entry":[{},"control only at ingress entities."]},{"entry":["C","Coefficient of increase for BAT flows."]},{"entry":["CIR","Committed Information Rate. This is used by the srTCM and"]},{"entry":[{},"trTCM algorithms to meter flows."]},{"entry":["D","Coefficient of decrease for BAT flows."]},{"entry":["EBS","Excess Burst Size. This is used by the srTCM algorithm to"]},{"entry":[{},"meter flows."]},{"entry":["Flowid","A 16 bit flow identifier value."]},{"entry":["max_p","Maximum probability of performing a RED drop."]},{"entry":["max_th","Maximum queue threshold for the RED algorithm."]},{"entry":["Max","Maximum BAT bandwidth for flow i."]},{"entry":["min_th","Minimum queue threshold for the RED algorithm."]},{"entry":["Min","Minimum BAT bandwidth for flow i."]},{"entry":["PBS","Peak Burst Size. This is a parameter used by the trTCM"]},{"entry":[{},"algorithm to meter flows."]},{"entry":["PIR","Peak Information Rate. This is a parameter used by the"]},{"entry":[{},"trTCM algorithm to meter flows."]},{"entry":["Port Number","Indicates the instance of the port type being operated upon. A"]},{"entry":[{},"maximum of 32 ports is supported."]},{"entry":["Shock Absorber","Shock Absorber constant for BAT."]},{"entry":"constant"},{"entry":["w_qlen","Weighting factor for calculating the average queue length for"]},{"entry":[{},"the RED algorithm."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Thus, in a preferred embodiment, the generic APIs  include the configure, update, enable, disable, and list APIs. The five generic APIs  preferably be used allow the congestion control application  to be network processor independent and still control the potentially heterogeneous network processors , , and  in a network processor specific manner. The congestion control application  is, therefore, simpler. As a result, it is significantly simpler to scale the system , including adding new types of network processors. It is thus also easier to improve the performance of the system  by adding improved network processors. In addition, the maintenance costs of the system  may be reduced due to the use of a simpler congestion control application .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 2","FIGS. 2 and 5"],"b":["210","210","100","210","120","130","140","112","112","112"]},"A user, such as a network administrator, is allowed to input information to manage the congestion control and avoidance behavior of the network processors , , and  using the generic APIs  in a network independent manner, via step . In step , therefore, a user might provide the identification of the network processor desired to be controlled, values of the appropriate parameters and flags, as well as other information used by the API(s) of the generic APIs being used. The generic APIs  are then used to control the possibly heterogeneous network processors , , and  in a network processor specific manner, via step .","Using the system , the methods  and , and more particularly the generic APIs , the congestion control application  can be network processor independent. Because of the use of the generic APIs, the congestion control application  can still control the potentially heterogeneous network processors , , and  in a network processor specific manner. As a result, the congestion control application  need not include a separate set of APIs for each type of network processor , , and  used. The congestion control application  is, therefore, simpler. As a result, it is significantly simpler to scale the system , including adding new types of network processors. It is thus also easier to improve the performance of the system  by adding improved network processors. In addition, the maintenance costs of the system  may be reduced due to the use of a simpler congestion control application .","A method has been disclosed for controlling the congestion control and avoidance behavior of heterogeneous network processors using a network processor independent control application. Software written according to the present invention is to be stored in some form of computer-readable medium, such as memory, CD-ROM or transmitted over a network, and executed by a processor. Consequently, a computer-readable medium is intended to include a computer readable signal which, for example, may be transmitted over a network. Although the present invention has been described in accordance with the embodiments shown, one of ordinary skill in the art will readily recognize that there could be variations to the embodiments and those variations would be within the spirit and scope of the present invention. Accordingly, many modifications may be made by one of ordinary skill in the art without departing from the spirit and scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
