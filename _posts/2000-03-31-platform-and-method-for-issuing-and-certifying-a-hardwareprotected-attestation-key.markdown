---
title: Platform and method for issuing and certifying a hardware-protected attestation key
abstract: In one embodiment, a method for certifying an attestation key comprises generating a remote attestation key pair within a platform and producing a certificate. The certificate includes a public attestation key to attest that a private attestation key, corresponding to the public attestation key, is stored in hardware-protected memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06996710&OS=06996710&RS=06996710
owner: Intel Corporation
number: 06996710
owner_city: Santa Clara
owner_country: US
publication_date: 20000331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["1. Field","This invention relates to the field of data security. In particular, the invention relates to a platform and method for certifying a key within protected hardware.","2. Background","Advances in technology have opened up many opportunities for applications that go beyond the traditional ways of doing business. Electronic commerce (e-commerce) and business-to-business (B2B) transactions are now becoming popular, reaching the global markets at a fast rate. Unfortunately, while electronic platforms like computers provide users with convenient and efficient methods of doing business, communicating and transacting, they are also vulnerable for unscrupulous attacks. Examples of these attacks include virus, intrusion, security breach, and tampering, to name a few. Therefore, it is becoming more and more important to protect the integrity of data stored within or downloaded into a platform.","Various data security mechanisms may be used to protect the integrity of data exchanged between electronic platforms. One type of data security mechanism involves the development of cryptographic hardware having a private key stored in a secure manner. This hardware produces a digital signature by digitally signing data with the pre-stored private key in accordance with a selected digital signature function (e.g., Digital Signature Algorithm \u201cDSA\u201d). Accompanying the data during transmission, the digital signature protects the integrity of the data.","In order to recover the data, an authentication certificate normally accompanies the digital signature. The authentication certificate provides a public key corresponding to the private key for use in data recovery and for certifying (or attesting) to something. The meaning of a certificate depends on the contents of the certificate and the empowerment of the certificate signer (issuer).","The present invention relates to a platform and method for certifying a key within protected hardware. Herein, certain details are set forth in order to provide a thorough understanding of the present invention. It is apparent to a person of ordinary skill in the art, however, that the present invention may be practiced through many embodiments other than those illustrated. Well-known circuits and hashing techniques are not set forth in detail in order to avoid unnecessarily obscuring the present invention.","In the following description, terminology is used to discuss certain features of the present invention. For example, a \u201cplatform\u201d includes hardware equipment and\/or software that perform different functions on stored information. Examples of a platform include, but are not limited or restricted to a computer (e.g., desktop, a laptop, a hand-held, a server, a workstation, etc.), desktop office equipment (e.g., printer, scanner, a facsimile machine, etc.), a wireless telephone handset, a television set-top box, and the like. A \u201csoftware module\u201d includes code that, when executed, performs a certain function. A \u201cnub\u201d is a series of code instructions, possibly a subset of code from a software module. A \u201clink\u201d is broadly defined as one or more information-carrying mediums (e.g., electrical wire, optical fiber, cable, bus, or wireless signaling technology).","In addition, the term \u201cinformation\u201d is defined as one or more bits of data, address, and\/or control. A \u201csegment\u201d is one or more bytes of information. A \u201cpage\u201d is a predetermined number of bytes, usually a power of two in length (e.g., 512, 1024, etc.). A \u201cone-way hash function\u201d is a function, mathematical or otherwise, that converts information from a variable-length to a fixed-length (referred to as a \u201chash value\u201d or \u201cdigest\u201d). The term \u201cone-way\u201d indicates that there does not readily exist an inverse function to recover any discernible portion of the original information from the fixed-length hash value. Examples of a hash function include MD5 provided by RSA Data Security of Redwood City, Calif., or Secure Hash Algorithm (SHA-1) as specified a 1995 publication Secure Hash Standard FIPS 180-1 entitled \u201cFederal Information Processing Standards Publication\u201d (Apr. 17, 1995).","I. Architecture Overview","A. Isolated Execution Platform","One principle for enhancing security is through configuration of the platform with an isolated execution (ISOX\u2122) architecture. The ISOX\u2122 architecture includes logical and physical definitions of hardware and software components that interact directly or indirectly with an operating system of a platform. Herein, the operating system and a processor of the platform may have several levels of hierarchy, referred to as rings, which correspond to various operational modes. A \u201cring\u201d is a logical division of hardware and software components that are designed to perform dedicated tasks within the operating system. The division is typically based on the degree or level of privilege, namely the ability to make changes to the platform. For example, a ring- is the innermost ring, being at the highest level of the hierarchy. Ring- encompasses the most critical, privileged components. Ring- is the outermost ring, being at the lowest level of the hierarchy. Ring- typically encompasses user level applications, which are normally given the lowest level of privilege. Ring- and ring- represent the intermediate rings with decreasing levels of privilege.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1A","b":["50","50","50","0","10","1","20","2","30","3","40","52","50","50","52"]},"Ring-  includes two portions: a normal execution Ring-  and an isolated execution Ring- . The normal execution Ring-  includes software modules that are critical for the operating system. Typically, these software modules include a primary operating system  referred to as the \u201ckernel\u201d(e.g., the unprotected segments of the operating system), software drivers , and hardware drivers . The isolated execution Ring-  includes an operating system (OS) nub  and a processor nub  as described below. The OS nub  and the processor nub  are instances of an OS executive (OSE) and processor executive (PE), respectively. The OSE and the PE are part of executive entities that operate in a secure environment associated with the isolated area  and the isolated execution mode. The processor nub loader  is a protected bootstrap loader code held within the chipset itself and is responsible for loading the processor nub  from the processor or chipset into a region of protected memory as further described below.","Similarly, ring- , ring- , and ring-  include normal execution ring- , ring- , ring- , and isolated execution ring- , ring- , and ring- , respectively. In particular, normal execution ring- includes N applications \u2013and isolated execution ring- includes M applets \u2013(where \u201cN\u201d and \u201cM\u201d are positive whole numbers).","One concept of the isolated execution architecture is the creation of a region in system memory protected by the processor and\/or chipset in the platform. This region of protected memory is referred to as an \u201cisolated area\u201d. Access to the isolated area is permitted using special memory read and write cycles, which are referred to as \u201cisolated read and write\u201d cycles. The isolated read and write cycles are issued by the processor operating in the isolated execution mode.","The processor nub loader  verifies and loads a ring- nub software module (e.g., processor nub ) into the isolated area. The processor nub  provides the basic hardware-related services to support isolated execution. For example, one task of the processor nub  is to verify and load the ring- OS nub  into the isolated area  as shown in .","The OS nub  provides links to services in the primary operating system , provides page management within the isolated area, and has the responsibility for loading some ring- software modules as well as ring- software modules  (e.g., applets \u2013) into protected pages allocated in the isolated area. The OS nub  may also support encrypting and hashing the isolated area pages before evicting the page(s) to the ordinary (unprotected) memory, and\/or checking the page contents upon restoration of the page.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1B","b":["10","0","10","3","40","50","60"]},"The accessible physical memory  includes an isolated area  and a non-isolated area . The isolated area  includes applet pages  and nub pages . The non-isolated area  includes application pages  and operating system (OS) pages . The isolated area  is accessible only to elements of the operating system and processor operating in isolated execution mode. The non-isolated area  is accessible to all elements of the ring- operating system and processor.","The normal execution ring-  including the primary OS , the software drivers , and the hardware drivers , can access both the OS pages  and the application pages . The normal execution ring-, including applications \u2013, can access only to the application pages . Both the normal execution ring-  and ring- , however, cannot access the isolated area .","The isolated execution ring- , including the OS nub  and the processor nub , can access both the isolated area  (including the applet pages  and the nub pages ) and the non-isolated area  (including the application pages  and the OS pages ). The isolated execution ring- , including applets \u2013, can access only the application pages  and the applet pages . The applets \u2013reside in the isolated area .","Referring to , a first block diagram of an illustrative embodiment of a platform utilizing the present invention is shown. The platform  comprises a processor , a system memory  and an input\/output control hub (ICH)  in communication with each other. In this embodiment, however, the platform  further includes a memory control hub (MCH)  and a non-volatile memory (e.g., flash)  coupled to the ICH . The MCH  is further coupled to the processor  via a host bus . The ICH  may be integrated into a chipset together with or separate from the MCH .","It is contemplated that the platform  may be in communication with peripheral components such as a mass storage device , one or more input\/output (I\/O) devices , and a token  via a token bus  and\/or a token reader . For clarity, the specific links for these peripheral components (e.g., Peripheral Component Interconnect \u201cPCI\u201d, accelerated graphics port \u201cAGP\u201d, Industry Standard Architecture \u201cISA\u201d, Universal Serial Bus \u201cUSB\u201d, etc.) are not shown.","The processor  represents a central processing unit of any type of architecture, such as complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture. In one embodiment, the processor  is compatible with the Intel Architecture (IA) processor, such as the IA-32 and the IA-64. The processor  includes an isolated execution circuit . The isolated execution circuit  provides a mechanism to allow the processor  to operate in an isolated execution mode. The isolated execution circuit  provides hardware and software support for the isolated execution mode. This support includes configuration for isolated execution, definition of the isolated area, definition (e.g., decoding and execution) of isolated instructions, generation of isolated access bus cycles, and generation of isolated mode interrupts.","The host bus  provides interface signals to allow the processor  to communicate with other processors or devices, e.g., the MCH . In addition to normal mode, the host bus  supports an isolated access bus mode with corresponding interface signals for isolated read and write cycles when the processor  is configured in the isolated execution mode. The isolated access bus mode is asserted on memory accesses initiated while the processor  is in the isolated execution mode if the physical address falls within the isolated area address range. The isolated access bus mode is also asserted on instruction pre-fetch and cache write-back cycles if the address is within the isolated area address range. The processor  responds to snoop cycles to a cached address within the isolated area address range if the isolated access bus cycle is asserted.","The MCH  provides control and configuration of memory and input\/output devices such as the system memory  and the ICH . The MCH  provides interface circuits to recognize and service isolated access assertions on memory reference bus cycles, including isolated memory read and write cycles. In addition, the MCH  has memory range registers (e.g., base and length registers) to represent the isolated area in the system memory . Once configured, the MCH  aborts any access to the isolated area when the isolated access bus mode is not asserted.","The system memory  stores code and data. The system memory  is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory  includes the accessible physical memory  (shown in ). The accessible physical memory includes a loaded operating system (OS) , the isolated area  (shown in ), and an isolated control and status space . The loaded OS  is the portion of the operating system that is loaded into the system memory . The loaded OS  is typically loaded from mass storage device  via some boot code in a boot storage such as a boot read only memory (ROM).","As shown in , the isolated area  is the memory area that is defined by the processor  when operating in the isolated execution mode. Access to the isolated area  is restricted and is enforced by the processor  and\/or the MCH  or other chipset that integrates the isolated area functionalities.","Referring back to , the isolated control and status space  is an input\/output (I\/O)-like, independent address space defined by the processor  and\/or the MCH . The isolated control and status space  contains (i) isolated execution control and status registers, and (ii) related initialization code invoked directly by the isolated instructions executed by the processor . The isolated control and status space  does not overlap any existing address space and is accessed using the isolated bus cycles. The system memory  may also include other programs or data that are not shown herein.","As shown in , the ICH  has a number of functionalities that are designed to support isolated execution in addition to the traditional I\/O functions. In this embodiment, the ICH  comprises at least the processor nub loader  (shown in ), a hardware-protected memory , a cryptographic key storage  and a token bus interface  to provide a signaling interface with the token bus . For clarity, only one ICH  is shown although platform  may be implemented with multiple ICHs. When there are multiple ICHs, a designated ICH is selected to control the isolated area configuration and status. This selection may be performed by an external strapping pin. As is known by one skilled in the art, other methods of selecting can be used.","The processor nub loader , as shown in , includes a processor nub loader code and its hash value (or digest). After being invoked by execution of an appropriate isolated instruction (e.g., ISO-INIT) by the processor , the processor nub loader  is transferred to the isolated area . Thereafter, the processor nub loader  copies the processor nub  from the non-volatile memory  into the isolated area , verifies and places the hash value of the processor nub  into an audit log of the hardware-protected memory  as described below. In one embodiment, the hardware-protected memory  is implemented as any memory array with single write, multiple read capability. This non-modifiable capability is controlled by logic or is part of the inherent nature of the memory itself. For example, as shown, the protected memory  may include a plurality of single write, multiple read registers.","As shown in , in one embodiment, the protected memory  includes an audit log . The \u201caudit log\u201d  is a listing of data that represents what information has been successfully loaded into the system memory  after power-on of the platform . For example, the representative data may be hash values of software modules loaded into the system memory . These software modules may include the processor nub , the OS nub , and\/or any other critical software modules (e.g., ring- modules) loaded into the isolated area . Thus, the audit log  can act as a fingerprint that identifies information loaded into the platform (e.g., the ring- code controlling the isolated execution configuration and operation), and is used to attest or prove the state of the current isolated execution.","Of course, it is contemplated that the audit log  may be stored collectively in the protected memory  and unprotected memory (e.g., a memory array in the non-isolated area  of the system memory  of ). For that case, a pointer to the beginning of a memory array in the unprotected memory is stored in the protected memory . In addition, the length of the audit log  and a total hash value of the contents of the audit log  are stored with the pointer as well.","The protected memory  further contains a predetermined address space reserved so that any read or write to the predetermined address space is passed to the token . For example, one portion of address space may include a register containing an address of an attestation key.","The cryptographic key storage  holds a symmetric key that is unique for the platform . In one embodiment, the cryptographic key storage  includes internal fuses that are programmed at manufacturing. Alternatively, the symmetric key contained in the cryptographic key storage  may be created with the aid of a random number generator.","Referring still to , the non-volatile memory  stores non-volatile information. Typically, the non-volatile memory  is implemented in flash memory. The non-volatile memory  includes the processor nub  and a binding key storage . The processor nub  provides the initial set-up and low-level management of the isolated area  of the system memory , including verification, loading, and logging of the OS nub , and the management of the symmetric key used to protect the operating system nub's secrets. The processor nub  may also provide application programming interface (API) abstractions to low-level security services provided by other hardware. The processor nub  may also be distributed by the original equipment manufacturer (OEM) or operating system vendor (OSV) via a boot disk.","The mass storage device  stores archive information such as code (e.g., processor nub ), programs, files, data, applications (e.g., applications \u2013), applets (e.g., applets \u2013) and operating systems. The mass storage device  may also include platform readable medium such as a compact disk (CD) ROM  or a hard drive  as shown. Other types of \u201cplatform readable medium\u201d include magnetic, optical or electrical medium such as a flash memory, an erasable ROM (EROM), a floppy diskette, an optical disk, and the like.","I\/O devices  may include any I\/O devices to perform I\/O functions. Examples of I\/O devices  include controller for input devices (e.g., keyboard, mouse, trackball, pointing device), media card (e.g., audio, video, graphics), communication card (e.g., network, modem, etc.) to establish a link with a remotely located platform, or any other peripheral controllers.","The token bus  provides an interface between the ICH  and one or more tokens  in the system. A \u201ctoken\u201d  is a device that performs dedicated I\/O functions with security. The token  may be stationary (e.g., a motherboard token) or portable to be coupled via the token reader  as shown. The token bus interface  in the ICH  couples the token bus  to the ICH  and ensures that when commanded to prove the state of the isolated execution, the corresponding token  signs only valid isolated hash values.","B. Self-Generation and Communications","Referring to , in one embodiment, an attestation key pair  is generated within the platform . A private attestation key (PRK)  of the attestation key pair  is stored in non-volatile memory protected by hardware. This non-volatile memory  may be part of the system memory  of  or memory employed within the chipset such as the ICH  for example. It is contemplated, however, that a public attestation key  of the attestation key pair  is placed in non-volatile memory freely accessible by the software executed by the processor  or tokens  coupled to the token bus .","Upon receiving a challenge message  from a remotely located platform , the platform  generates a response message . Accompanied by a copy of the audit log , the response message  includes a random nonce  recovered from the challenge message  and a hash value  of the audit log. Since the hash value  may be modified during transit, software running in the isolated area  (see ) signs the random nonce  and hash value  with the private attestation key . Although not shown, the response message  may further include the audit log  and a certificate  including the public attestation key  and attesting that the private attestation key  was installed in hardware-protected memory. The audit log  and the certificate  would not need to be written into the signed portion of the message .","II. Certification Techniques for the Self-Generated Attestation Key","A. User Certification","Referring now to , an illustrative flowchart of a first embodiment of the operations of the platform to certify a self-generated private attestation key loaded in protected memory is shown. During its first initial boot cycle that is normally trustable, the platform generates the attestation key pair, namely the public attestation key and its corresponding private attestation key (block ). Herein, the attestation key pair may be generated by (i) a random or pseudo-random number generator possibly situated in the ICH, (ii) a token separate from the platform and coupled to the token bus and the like.","The user is presented with the public attestation key while the private attestation key is securely stored in memory, in one situation, by the private attestation key being stored in non-volatile memory within the platform (e.g., ICH). (blocks  and ). Other situations include encrypting the private attestation key with a previously stored symmetric key. Examples for presentation of the public attestation key includes visually displaying the bits or characters forming the public attestation key or downloading the public attestation key to a platform readable medium for distribution to an entity having control of the remotely located platform for example. Thus, in certain relationships between the user and the entity (e.g., where the entity is configured to protect the user's data), the generation of the attestation key pair and providing of the public attestation key to the entity constitutes sufficient certification. That is, if the user is a reliable authority based on the perception of a certificate verifier (e.g., the entity), then the user can simply generate an attestation certificate. In this embodiment, the attestation certificate is information digitally signed by the private attestation key. Alternatively, the user can provide evidence to another entity to issue the attestation certificate.","B. Certification by an Agent for an Outside Entity","Referring now to , an illustrative flowchart of a second embodiment of the operations of the platform to certify a self-generated attestation key is shown. For example, upon installation, upgrade or repair of the platform, an agent for an entity controlling a remotely located platform installs a platform readable medium (e.g., a token, CD-ROM, etc.) and boots the platform with code approved by the entity stored on the readable medium (blocks  and ). The agent may now execute an applet running within the isolated area of the system memory to generate the attestation key pair (block ).","In particular, a public attestation key of the attestation key pair is provided to an application supplied by the readable medium in order to produce an attestation certificate. The certificate generally includes the public attestation key encrypted with a private key of the entity represented by the agent (blocks  and ). The public key and the certificate are placed in the protected memory for subsequent transmission to a remote platform when verifying the security of the platform (block ). That is, when the user is not an acceptable authority on the state of the platform to some verifier, some agent for that verifier can inspect the platform and issue the attestation certificate.","C. Original Equipment Manufacturer","Referring to , an illustrative flowchart of a third embodiment of the operations of the platform to certify a self-generated attestation key is shown. As set forth in block , the public attestation key is generated during assembly of the platform by the original equipment manufacturer (OEM). The OEM signs the certificate including the public attestation key to certify that its corresponding private key is securely stored in protected memory (e.g., either cryptographically secure or stored in hardware protected memory such as memory  of  or in the isolated area ) and that the protected memory has not been tampered with (blocks  and ). This case is similar as described above, in that some agent other than the user is responsible for issuing the attestation certificate, but this case will have different cost and risk parameters.","In all three cases or any others like these, the choice of issuer of an attestation certificate depends on criteria of any entity that will verify the certificate. That choice is based on the verifier's own preexisting relationships with the various possible attesters: the platform owner, an agent who goes to the platform in question, the OEM who built the platform, etc. A single platform might have to satisfy multiple different verifiers and might therefore hold multiple attestation certificates, over one or more attestation keys.","While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications of the illustrative embodiments, as well as other embodiments of the invention, which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will become apparent from the following detailed description of one or more example embodiments of the present invention in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1C"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
