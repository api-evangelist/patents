---
title: System and method for emulating SCSI reservations using network file access protocols
abstract: A system and method for emulating SCSI reservations using network file access protocols is provided. The system and method enable applications or operating systems on a networked computer designed to utilize SCSI reservations on only locally attached storage to also access networked data storage. The emulation occurs transparently to higher levels of operating systems or applications so that the applications or operating systems which are designed to only access locally attached storage may be enabled to access networked storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07711539&OS=07711539&RS=07711539
owner: NetApp, Inc.
number: 07711539
owner_city: Sunnyvale
owner_country: US
publication_date: 20020812
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT","A. Network Environment","B. Storage Operating System","C. Client","C. SCSI Reservation Emulation Using File Access Control Methods"],"p":["This invention relates to network storage systems and, more particularly to accessing remote networked storage systems.","Data communication in a computer network involves the exchange of data between two or more entities interconnected by communication links. These entities are typically software programs executing on hardware computer systems that include locally attached storage devices. Depending on their roles within the network, these computer systems may serve as intermediate network nodes or end nodes. Examples of end nodes may include client and server systems coupled to a communication link, such as a point-to-point link, shared local area network, wide area network or virtual private network implemented over a public network, such as the Internet.","A server is a computer configured to provide specific services. When operating according to a client\/server model of information delivery, the server may be configured to allow many clients to access its services. In this model, the client may comprise an application executing on an operating system that \u201cconnects\u201d to the server over the computer network. Each client may request the services of the server by issuing protocol messages (in the form of packets) to the server over the network. The server then responds to the client request by returning the requested services in the form of packets transported over the network.","A filer is a server configured to provide file service relating to the organization of information on storage devices, such as disks. The filer may be embodied as a storage system including a storage operating system that implements a file system to logically organize the information as a hierarchical structure of directories and files on the disks. Each \u201con-disk\u201d file may be implemented as a set of disk blocks configured to store information, such as data, whereas the directory may be implemented as a specially formatted file in which information about other files and directories are stored.","An example of an application running on a client is the Microsoft\u00ae Exchange application available from Microsoft Corporation, of Redmond, Wash. Microsoft Exchange is a messaging and collaboration software product that provides a variety of applications for group interaction using networked computer systems. An Exchange application can run on a variety of operating systems including, for example, the Microsoft Windows\u00ae NT\u2122 or Microsoft Windows\u00ae 2000 operating system. A file system designed for use with the NT or Windows 2000 operating system is the NT file system (NTFS). In NTFS, each unit of information associated with a file, including its name, its owner, its time stamps and its data contents, is implemented as a file attribute. Both files and directories have attributes, wherein each attribute consists of a single stream or sequence of bytes. This implementation facilitates the addition of more attributes, including data content attributes, to a file. The NTFS file system is well-known and further described in by Helen Custer, Microsoft Press, 1994.","The conventional Small Computer System Interface (SCSI) protocol is a block access protocol configured to access storage devices (disks). Many computer systems use the SCSI protocol to access data on storage devices locally attached to the systems. Many systems also support facilities adapted to access network attached storage through file access protocols, such as the Network File System (NFS) and Common Internet File System (CIFS) protocols. Applications running on a client system can access files contained on either locally attached or network attached storage.","There are differences, however, in the interpretation of data that is exchanged using block access protocols compared to file access protocols. A block access protocol, such as the SCSI protocol, \u201cassumes\u201d that the storage device is composed of a sequence of blocks, each containing either data or available space for storing data. Requests for retrieving (reading) or storing (writing) data contain references for block numbers and data lengths. As a result, an application issuing a SCSI request (i.e., a SCSI requester) must have knowledge of the metadata mapping between the desired data and the physical location of that data on the storage device.","In contrast, file access protocols assume that the server contains a file system on which file data is stored. The file system generally refers to structuring of data and metadata on storage devices, such as disks, which permits reading\/writing of data on those disks. The file system also includes mechanisms for performing these operations. While different file access protocols provide different semantics, each protocol fundamentally provides access to file system constructs, such as directories and files. The file server is responsible for mapping the files to its storage system.","A filer generally provides higher data capacity, data storage speed and data access speed than disks locally attached to a client. It is therefore often desirable for a client system to utilize a filer for networked data storage. However, some applications running on a client are unable to utilize networked data storage because the file system operations provided by the file access protocol may not fully match the operations provided by the file system residing on the client. For example, some operations that are available on the NTFS file system used with the Windows 2000 operating system are not available over the CIFS protocol. One solution that allows those applications that require block-based file systems is described in U.S. patent application Ser. No. 10\/188,250, now U.S. Pat. No. 7,584,279 entitled SYSTEM AND METHOD FOR MAPPING BLOCK-BASED FILE OPERATIONS TO FILE LEVEL PROTOCOLS, by Dennis E; Chapman, the teachings of which are hereby incorporated by reference as though fully set forth herein.","While generally, only one host computer is connected to a SCSI bus, it is possible for multiple controllers to be interconnected to a SCSI bus. Additionally, as the SCSI protocol operates across multiple forms of networks, such as Fibre Channel, Transport Control Protocol\/Internet Protocols, and InfiniBand, shared access to SCSI storage is widely implemented. Whenever this shared access occurs, there is a possibility of multiple controllers contending for the disks or other resources on the SCSI bus. To allow multiple hosts to coordinate their access to a shared storage device, the SCSI protocol includes a reserve and release mechanism that allows hosts to establish, release, or revoke exclusive access to a specific SCSI device. This exclusivity allows limited write access to the storage device and optionally, limited read access to the storage device as well. These SCSI reservations and their attributes are described in further detail in -3 published by the American National Standards Institute, Inc., the contents of which are hereby incorporated by reference.","Many clustering systems use SCSI reservations for synchronization within the cluster. For example, the Microsoft Cluster Service (MSCS) uses SCSI reservations to determine which system should be the cluster master. MSCS does this by relying on one system being able to require a SCSI reservation on a shared disk (the quorum disk). A Microsoft Windows 2000 Advanced Server System that is bidding to be a master of a MSCS cluster attempts to acquire a SCSI shared read reservation on the quorum disk. If the system acquires the reservation, then it succeeds in becoming the cluster master, however if it fails to obtain a SCSI reservation, then another system is the master of the cluster.","As described above, a file server or filer generally provides higher data capacity, data storage speed and data access speed than disks locally attached to a client. However, file servers may prefer to use a file-based protocol, such as the Network File System (NFS) protocol, and are therefore, incompatible with a cluster requiring directly attached SCSI disks. Consequently, such a file server cannot be reserved using SCSI reservations, and therefore can not be utilized with cluster products that employ SCSI reservation semantics, such as the Microsoft Clustering System.","While the above-described patent application, entitled SYSTEM AND METHOD FOR MAPPING BLOCK-BASED FILE OPERATIONS TO FILE LEVEL PROTOCOLS, describes a SCSI block-based system and method for mapping a read and write operations to a file level protocol, a reliable methodology for allowing SCSI reservations to be utilized with a file server attached to a clustering system is required.","The disadvantages of the prior art are overcome by providing a system and method for emulating small computer system interface (SCSI) reservations on a network attached storage system. A data access protocol software driver of the computer includes a mapping function that maps a SCSI reservation command to a file access control method associated with a virtual logical disk (VLD) of the locally attached storage system. This arrangement advantageously enables applications or clients adapted to access data stored only on disks of a locally attached storage system to access data and utilize SCSI reservations of a network attached storage on a filer.","A novel data access protocol driver provides a reservation emulation function that maps SCSI reservation operations to a file access control method. In the illustrative embodiment, a UNIX GID\/UID access control method is used to emulate the SCSI reservation. Each node in a cluster has a unique GID, while all nodes share the same UID. In the illustrative embodiment, the novel data access protocol driver utilizes the VLD's GID to track the node in a cluster that currently has a reservation on the VLD.","The data access protocol driver sets the GID associated with the file that contains the VLD to equal the GID of the node that currently holds the SCSI reservation on the VLD. The data access protocol driver maps SCSI reservation operations to changes of the VLD's GID.","In an illustrative embodiment, a clustering environment, such as a MSCS cluster, utilizes the data access protocol software driver to map a SCSI reservation to a known file access control method supported on the network attached storage system. Accordingly, an application or operating system executing on a client can issue normal SCSI reservation commands. The VLD functions as a data container for storing the file as a logical representation of a disk in the storage system locally attached to the client.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 1","FIG. 2"],"b":["100","300","170","105","105","135","105","115","120","110","130","140","105","200"]},"It will be understood to those skilled in the art that the inventive technique described herein may apply to any type of special-purpose computer (e.g., file serving appliance) or general-purpose computer, including a standalone computer, embodied as a storage system. To that end, filer  can be broadly, and alternatively, referred to as storage system. Moreover, the teachings of this invention can be adapted to a variety of storage system architectures including, but not limited to, a network-attached storage environment, a storage area network and disk assembly directly-attached to a client\/host computer. The term \u201cstorage system\u201d should, therefore, be taken broadly to include such arrangements.","In the illustrative embodiment, the memory  comprises storage locations that are addressable by the processor and adapters for storing software program code. The memory comprises a form of random access memory (RAM) that is generally cleared by a power cycle or other reboot operation (e.g., it is a \u201cvolatile\u201d memory). The processor and adapters may, in turn, comprise processing elements and\/or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system , portions of which are typically resident in memory and executed by the processing elements, functionally organizes the filer by, inter alia, invoking storage operations in support of a file service implemented by the filer. It will be apparent to those skilled in the art that other processing and memory means, including various computer readable media, may be used for storing and executing program instructions pertaining to the inventive technique described herein.","The network adapter  comprises the mechanical, electrical and signaling circuitry needed to connect the filer  to client  over the network  which may comprise a point-to-point connection or a shared medium, such as a local area network. Moreover, the client  may interact with the filer  in accordance with a client\/server model of information delivery. That is, the client may request the services of the filer, and the filer may return the results of the services requested by the client by exchanging packets encapsulating, e.g., the NFS protocol format over the network .","The storage adapter  cooperates with the operating system  executing on the filer to access information requested by the client. The information may be stored on the disks  that are attached to the filer  or other node of a storage system as defined herein. The storage adapter  includes input\/output (I\/O) interface circuitry that couples to the disks over an I\/O interconnect arrangement, such as a conventional high-performance, Fibre Channel serial link topology. The information is retrieved by the storage adapter and, if necessary, processed by the processor  (or the adapter  itself) prior to being forwarded over the system bus  to the network adapter , where the information is formatted into a packet and returned to the client .","In one exemplary filer implementation, the filer  can include a nonvolatile random access memory (NVRAM)  that provides fault-tolerant backup of data, enabling the integrity of filer transactions to survive a service interruption based upon a power failure, or other fault. The size of the NVRAM depends in part upon its implementation and function in the file server. It is typically sized sufficiently to log a certain time-based chunk of transactions (for example, several seconds worth). The NVRAM is filled, in parallel with the buffer cache, after each client request is completed, but before the result of the request is returned to the requesting client.","In an illustrative embodiment, the disks  are arranged into a plurality of volumes, each having a file system associated therewith. Each volume includes one or more disks . In one embodiment, the physical disks  are configured into RAID groups so that some disks store striped data and some disks store separate parity for the data, in accordance with an illustrative RAID 4 configuration. However, other configurations (e.g. RAID 5 having distributed parity across the disks) are also contemplated. In this embodiment, a minimum of one parity disk and one data disk is employed. However, a typical implementation may include three data and one parity disk per RAID group, and a multiplicity of RAID groups per volume.","The clustering environment  (MSCS in this example) can include a plurality of clients  arranged according to the cluster specification. For example, two clients can be connected as a two-node cluster so that in the event of a failure of one, the other assumes operations and functions associated with the failed client.","To facilitate generalized access to the disks , the storage operating system  implements a write-anywhere file system that logically organizes the information as a hierarchical structure of directories and files on the disks. Each \u201con-disk\u201d file may be implemented as a set of disk blocks configured to store information, such as data, whereas the directory may be implemented as a specially formatted file in which other files and directories are stored. In the illustrative embodiment described herein, the storage operating system is the NetApp\u00ae Data ONTAP\u2122 operating system available from Network Appliance, Inc., that implements the Write Anywhere File Layout (WAFL\u2122) file system. It is expressly contemplated that any appropriate file system can be used, and as such, where the term \u201cWAFL\u201d is employed, it should be taken broadly to refer to any file system that is otherwise adaptable to the teachings of this invention.","As used herein, the term \u201cstorage operating system\u201d generally refers to the computer-executable code operable on a storage system that implements file system semantics (such as the above-referenced WAFL) and manages data access. In this sense, Data ONTAP\u2122 software is an example of such a storage operating system implemented as a microkernel. The storage operating system can also be implemented as an application program operating over a general-purpose operating system, such as UNIX\u00ae or Windows NT\u00ae, or as a general-purpose operating system with configurable functionality, which is configured for storage applications as described herein.","The organization of the preferred storage operating system for the exemplary filer is now described briefly. However, it is expressly contemplated that the principles of this invention can be implemented using a variety of alternate storage operating system architectures. As shown in , the storage operating system  comprises a series of software layers, including a media access layer  of network drivers (e.g., an Ethernet driver). The operating system further includes network protocol layers, such as the Internet Protocol (IP) layer  and its supporting transport mechanisms, the Transport Control Protocol (TCP) layer  and the User Datagram Protocol (UDP) layer . A file system protocol layer provides multi-protocol data access and, to that end, includes support for the Common Internet File System (CIFS) protocol , the Network File System (NFS) protocol  and the Hypertext Transfer Protocol (HTTP) protocol . In addition, the storage operating system  includes a disk storage layer  that implements a disk storage protocol, such as a RAID protocol, and a disk driver layer , that implements a disk control protocol such as the small computer system interface (SCSI).","Bridging the disk software layers with the network and file system protocol layers is a file system layer  of the storage operating system . Generally, the layer  implements a file system having an on-disk format representation that is block-based using, e.g., 4-kilobyte (KB) data blocks and using inodes to describe the files. In response to transaction requests, the file system generates operations to load (retrieve) the requested data from volumes if it is not resident \u201cin-core\u201d, i.e., in the filer's memory . If the information is not in memory, the file system layer  indexes into an inode file using an inode number to access an appropriate entry and retrieve a logical volume block number. The file system layer  then passes the logical volume block number to the disk storage (RAID) layer , which maps that logical number to a disk block number and sends the latter to an appropriate driver (for example, an encapsulation of SCSI implemented on a fibre channel disk interconnection) of the disk driver layer . The disk driver accesses the disk block number from volumes and loads the requested data in memory  for processing by the filer . Upon completion of the request, the filer (and storage operating system) returns a reply.","It should be noted that the software \u201cpath\u201d  through the storage operating system layers described above needed to perform data storage access for the client request received at the filer may alternatively be implemented in hardware or a combination of hardware and software. That is, in an alternate embodiment of the invention, the storage access request data path  may be implemented as logic circuitry embodied within a field programmable gate array (FPGA) or an application specific integrated circuit (ASIC). This type of hardware implementation increases the performance of the file service provided by filer  in response to file system requests",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["300","310","330","320","310","300"]},"The operating system  comprises, inter alia, an I\/O manager  that implements device-independent I\/O facilities. The I\/O manager further allows device drivers and file systems (which are also viewed as \u201cdevice drivers\u201d) to be dynamically loaded into and out of the operating system. These drivers are modular and \u201clayered\u201d to allow different file systems to call, e.g., the same disk driver to access files. An example of a disk driver is the Small Computer System Interface (SCSI) driver adapted to access data stored in files on storage devices, such as the disks (not shown) of a locally attached storage system.","Also included in the operating system  is a set of clustering services  that implement the various clustering functions of the operating system. These clustering functions include, inter-alia, a process to arbitrate which systems in a cluster is the master system. In the example of a MSCS cluster, this process attempts to obtain SCSI reservation on a defined quorum disk. If the system can obtain a reservation it succeeds in becoming the cluster master.","A file system designed for use with operating system  is the NT file system (NTFS) . In NTFS, each unit of information associated with a file, including its name, its owner, its time stamps and its data contents, is implemented as a file attribute. Both files and directories have attributes, wherein each attribute consists of a single stream or sequence of bytes. This implementation facilitates the addition of more attributes, including data content attributes, to a file.","In accordance with an illustrative embodiment, SCSI protocol reservation operations supported by the locally attached storage system are mapped to file access control methods supported by a network attached storage system, such as filer  ().  is a schematic block diagram of a data access protocol driver  in accordance with an embodiment of this invention. The data access protocol drive  includes a mapping function  protocol translation function  and a reservation emulation function .","The mapping function  maps a unit of storage on a filer  to a virtual logical disk  of a locally attached storage system. Thus, the mapping function causes the VLD, which is embodied as a file stored on the filer, to appear as a locally attached device to the client  (typically, denoted by a drive \u201cletter\u201d appearing on a client). The novel driver  also includes a protocol translation function  that translates SCSI reservation operations or requests directed to the VLD  into file access control requests directed to the network attached storage, i.e. the filer. The operation of the protocol translation function  is further described in the above-incorporated U.S. patent application entitled SYSTEM AND METHOD FOR MAPPING BLOCK-BASED FILE OPERATIONS TO FILE LEVEL PROTOCOLS. The unit of storage on the filer is a file and the VLD  functions as a data container for storing the file as a logical representation of a disk in the storage system attached to the client . In the illustrative embodiment, the VLD stores data accordingly to the file system semantics of the client. Thus, in the example above, the VLD would store data using NTFS. Notably, is these files are sized up to the maximum storage size of the VLD (for example tens of gigabytes.) In the illustrative embodiment, the files stored on the file server utilize a set naming convention. These files are named \u201cXXXX.VLD\u201d where XXXX is a unique identifier associated with the client which created the virtual logical disk. It is expressly contemplated that other naming conventions can be utilized with the present invention and as such the naming convention described herein is exemplary only.","The reservation emulation function  emulates SCSI reservation operations by mapping SCSI reservations to a file access control method, such as UNIX UID\/GID or Windows-Based Access Control Lists (ACL), as directed further below.","Broadly stated, when the file system  of the client  issues a block access request to access a disk, the data access protocol driver  determines whether the request is directed to a physical disk  or to a VLD . If the request is directed to a disk  then the data access protocol driver  forwards the requested block access operation to that disk. In these instances, the data access protocol driver functions similarly to a traditional block-based protocol driver, e.g., a SCSI driver. Otherwise, the block access protocol driver  maps the block access request to a file access request and forwards the request to the filer  using a file access protocol, such as NFS. If a SCSI reservation command is issued, then the reservation emulation function  of the data access protocol driver  maps the requested reservation function to the appropriate file access control methodology and forwards the command over the network  to the virtual logical disk .","The present invention uses file access control methods, for example UNIX GID\/UID or Windows ACLs, to emulate and enforce SCSI reservation policies. The illustrative embodiment achieves this using the existing network file system (NFS) version 3 protocol. By utilizing the NFS protocol, the present invention can be implemented and interoperate with numerous servers and clients that implement the NFS protocol. However, it should be expressly noted that other file protocols can be utilized in the present invention.","In the illustrative embodiment, the VLD is embodied as a file stored on a filer. The file containing the VLD utilizes, in the illustrative embodiment, UNIX-based file access control methods, i.e. UID\/GID. In the illustrative embodiment, each node in a cluster uses the same user identifier (UID). Additionally, each node in the cluster uses a unique group identifier (GID). Thus, for example, a first computer may use a GID of 7 while a second computer would use 8 as its GID. The access control permissions of the file containing the VLD is set as UNIX mode , which corresponds to full access for the particular user ID, full access for the group ID with the file and no access for others not in the group. In accordance with the illustrative embodiment, the GID associated with the file, i.e. the GID that \u201cowns\u201d the file, is utilized to identify the node holding the SCSI reservation or to identify that the particular file is unreserved. For example, if computer A of a node is using a GID of 7 then, when computer A asserts a SCSI reservation over the disk, the GID associated with the VLD would be set to a value of 7. If the GID associated with the file containing a VLD is set to UNRESERVED, then no node of the cluster has a SCSI reservation on the VLD. In the illustrative embodiment, the UNRESERVED GID is implemented as the zero group.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 5","b":["500","400","505","510","510","515","520","525"]},"The steps of a procedure  performed by the data access protocol driver in setting a SCSI reservation is shown in . Initially, in step , the attributes of the VLD are obtained. These attributes can be obtained, in the illustrative embodiment, via the well-known NFS GETATTR command. After the attributes are attained, a check is performed, in step , to determine if the file GID equals MY_GID. If the file GID is the same as MY_GID, the VLD already has a reservation in favor of this particular node. In such a case, the data access protocol driver then returns a success in step . If the file GID does not equal MY_GID another check is made in step  to determine if the file GID is set to the UNRESERVED value. If the file GID is not set to the UNRESERVED value, then the particular VLD has a SCSI reservation in favor of another node and the procedure returns a STATUS_ALREADY_COMMITTED error message in step . However, if the file GID is set to the UNRESERVED value, then the procedure sets the file GID to the value of MY_GID in step . This sets the reservation in favor of the node that uses the GID of MY_GID. After setting the file GID value, then the procedure returns a success value in step .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 7","b":["700","705","605","600","715","720","725"]},"It may be necessary to reset a particular SCSI reservation in the event that a error condition occurs so that a particular VLD has a reservation in favor of a node that is no longer functioning properly.  is flow chart of the steps of a procedure  used in resetting a SCSI reservation. In step , the procedure sets a file group ID to UNRESERVED. After setting the file group ID, the procedure, then, in step , returns a success value.","It should be noted that the above-described system and method for emulating SCSI reservations requires cooperation among the various nodes of a cluster for the system and method to function properly. For example, a node of a cluster could ignore the GID associated with the file containing the VLD and continue to perform input\/output to the VLD. However, the system and method described herein enables a cooperating series of nodes of a cluster to emulate SCSI reservations for, e.g., arbitration of a master node of a cluster.","To again summarize, a novel data access protocol driver provides a system and method for emulating SCSI reservations using a file-level protocol. Specifically, the data access protocol driver maps SCSI reservation operations to the NFS protocol. The reservation commands are, in the illustrative embodiment, directed towards a virtual logical disk (VLD) which is embodied as a file stored on storage devices associated with a file server. In the illustrative embodiment, the SCSI reservations are emulated using UNIX-based GID\/UID file access control mechanisms. Each node of a cluster is assigned a unique GID. When a node asserts a SCSI reservation on a virtual logical disk, the GID associated with the VLD is set to the GID of the node asserting the reservation. A special GID is assigned to designate that the disk UNRESERVED. If the disk is UNRESERVED then no node within the cluster has asserted a SCSI reservation on the VLD. In this manner, the system and method advantageously allows a cluster of computers to utilize file servers implementing VLDs for data storage.","The foregoing has been a detailed description of the illustrative embodiment of the invention. Various modifications and additions can be made without departing from the spirit and scope of the invention. While this description has been written with reference to the SCSI and NFS protocols, it should be noted that the principles of the invention apply to any block-based and\/or file-level protocol, including, but not limited to, the Common Internet File System (CIFS), the Direct Access File System (DAFS), FCP (SCSI over Fibre Channel): SCSI (SCSI over IP), and SRP (SCSI over InfiniBand). While this description has been written in reference to SCSI disk reservations, the teachings of the present invention will work with any disk-based reservation technique. This description has been written in terms of a software data access protocol driver, however it is expressly contemplated the teachings of the invention can be implemented as software, including a computer-readable medium having program instructions executing on a computer, hardware, firmware, or a combination thereof. This description has been written in terms of virtual logical disks, however, it is expressly contemplated that the teachings of the present invention can be utilized with any file that serves as an embodiment of a disk. As such the terms \u201cvirtual logical disk\u201d or \u201cVLD\u201d should be taken to include any acceptable file acting as a storage unit for a disk. Additionally, this description has been written in terms of UNIX-based file access control methods, however it should be noted that other file access control methods, including, but not limited to, Windows-based Access Control Lists can be utilized in accordance with the teachings of the invention. Accordingly, this description should be taken only by way of example and to not otherwise limit the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and further advantages of the invention may be better understood by referring to the following description in conjunction with the accompanying drawings in which like reference numerals indicate identically or functionally similar elements, of which:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
