---
title: Apparatus, system, and method for gathering trace data indicative of resource activity
abstract: An apparatus, system, and method are provided for gathering trace data indicative of resource activity on a computer system. The present invention includes a monitoring module that initiates one or more activity monitors on a target computer system to detect different types of resource activity. A determination module determines activity indicators involving resources of the target computer system using the one or more activity monitors. The activity indicators may comprise a variety of information useful in identifying one or more separate resource activities. A collection module organizes the activity indicators into trace data representative of the resource activity. Preferably, the monitoring module, determination module, and collection module operate continuously on the target computer system. In this manner, the trace data includes an accurate set of both current activity indicators as well as historical activity indicators.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07661135&OS=07661135&RS=07661135
owner: International Business Machines Corporation
number: 07661135
owner_city: Armonk
owner_country: US
publication_date: 20040810
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The invention relates to computer systems. Specifically, the invention relates to apparatus, systems, and methods for gathering trace data indicative of resource activity on a computer system.","2. Description of the Related Art","Computer and information technology continues to progress and grow in its capabilities and complexity. In particular, software applications have evolved from single monolithic programs to many hundreds or thousands of object-oriented components that can execute on a single machine or distributed across many computer systems on a network.","Computer software and its associated data is generally stored in persistent storage organized according to some format such as a file. Generally, the file is stored in persistent storage such as a Direct Access Storage Device (DASD, i.e., a number of hard drives). Even large database management systems employ some form of files to store the data and potentially the object code for executing the database management system.","Business owners, executives, managers, administrators, and the like concentrate on providing products and\/or services in a cost-effective and efficient manner. These business executives recognize the efficiency and advantages software applications can provide. Consequently, business people factor in the business software applications in long range planning and policy making to ensure that the business remains competitive in the market place.","Instead of concerning themselves with details such as the architecture and files defining a software application, business people are concerned with business processes. Business processes are internal and external services provided by the business. More and more of these business processes are provided at least in part by one or more software applications. One example of a business process is internal communication among employees. Often this business process is implemented largely by an email software application. The email software application may include a plurality of separate executable software components such as clients, a server, a Database Management System (DBMS), and the like.","Generally, business people manage and lead most effectively when they focus on business processes instead of working with confusing and complicated details about how a business process is implemented. Unfortunately, the relationship between a business process policy and its implementation is often undefined, particularly in large corporations. Consequently, the affects of the business policy must be researched and explained so that the burden imposed by the business process policy can be accurately compared against the expected benefit. This may mean that computer systems, files, and services affected by the business policy must be identified.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1","b":"100"},"Generally, a business process is simple and clearly defined. Often, however, the business process is implemented using a variety of cooperating software applications comprising various executable files, data files, clients, servers, agents, daemons\/services, and the like from a variety of vendors. These software applications are generally distributed across multiple computer platforms.","In the example system , an E-commerce website is illustrated with components executing on a client , a web server , an application server , and a DBMS . To meet system  requirements, developers write a servlet  and applet  provided by the web server , one or more business objects  on the application server , and one or more database tables  in the DBMS . These separate software components interact to provide the E-commerce website.","As mentioned above, each software component originates from, or uses, one or more files  that store executable object code. Similarly, data files  store data used by the software components. The data files  may store configuration settings, user data, system data, database rows and columns, or the like.","Together, these files ,  constitute resources required to implement the business process. In addition, resources may include Graphical User Interface (GUI) icons and graphics, static web pages, web services, web servers, general servers, and other resources accessible on other computer systems (networked or independent) using Uniform Resource Locators (URLs) or other addressing methods. Collectively, all of these various resources are required in order to implement all aspects of the business process. As used herein, \u201cresource(s)\u201d refers to all files containing object code or data as well as software modules used by the one or more software applications and components to perform the functions of the business process.","Generally, each of the files ,  is stored on a storage device -identified by either a physical or virtual device or volume. The files ,  are managed by separate file systems (FS) -corresponding to each of the platforms , , .","Suppose a business manager wants to implement a business level policy  regarding the E-commerce website. The policy  may simply state: \u201cBackup the E-commerce site once a week.\u201d Of course, other business level policies may also be implemented with regard to the E-commerce website. For example, a load balancing policy, a software migration policy, a software upgrade policy, and other similar business policies can be defined for the business process at the business process level.","Such business level policies are clear and concise. However, implementing the policies can be very labor intensive, error prone, and difficult. Generally, there are two approaches for implementing the backup policy . The first is to backup all the data on each device or volume -. However, such an approach backs up files unrelated to the particular business process when the device -is shared among a plurality of business processes. Certain other business policies may require more frequent backups for other files on the volume -related to other business processes. Consequently, the policies conflict and may result in wasted backup storage space and\/or duplicate backup data. In addition, the time required to perform a full copy of the devices -may interfere with other business processes and unnecessarily prolong the process.","The second approach is to identify which files on the devices -are used by, affiliated with, or otherwise comprise the business process. Unfortunately, there is not an automatic process for determining what all the resources are that are used by the business process, especially business processes that are distributed across multiple systems. Certain logical rules can be defined to assist in this manual process. But, these rules are often rigid and limited in their ability to accurately identify all the resources. For example, such rules will likely miss references to a file on a remote server by a URL during execution of an infrequent feature of the business process. Alternatively, devices -may be dedicated to software and data files for a particular process. This approach, however, may result in wasted unused space on the devices -and may be unworkable in a distributed system.","Generally, a computer system administrator must interpret the business level policy  and determine which files ,  must be included to implement the policy . The administrator may browse the various file systems -, consult user manuals, search registry databases, and rely on his\/her own experience and knowledge to generate a list of the appropriate files , .","In , one implementation  illustrates the results of this manual, labor-intensive, and tedious process. Such a process is very costly due to the time required not only to create the list originally, but also to continually maintain the list as various software components of the business process are upgraded and modified. In addition, the manual process is susceptible to human error. The administrator may unintentionally omit certain files , .","The implementation  includes both object code files  (i.e., e-commerce.exe. Also referred to as executables) and data files  (i.e., e-comdata1.db). However, due to the manual nature of the process and storage space concerns, efforts may be concentrated on the data files  and data specific resources. The data files  may be further limited to strictly critical data files  such as database files. Consequently, other important files, such as executables and user configuration and system-specific setting files, may not be included in the implementation . Alternatively, user data, such as word processing documents, may also be missed because the data is stored in an unknown or unpredictable location on the devices -","Other solutions for grouping resources used by a business process have limitations. One solution is for each software application that is installed to report to a central repository which resources the application uses. However, this places the burden of tracking and listing the resources on the developers who write and maintain the software applications. Again, the developers may accidentally exclude certain files. In addition, such reporting is generally done only during the installation. Consequently, data files created after that time may be stored in unpredictable locations on a device -","Information regarding activities and computing operations performed by resources of a computer processing system is useful for identifying a business process as well as other purposes. For example, it is desirable to determine comprehensively what short term and long term (historical) activities have been conducted on a target computer system. In addition, it is desirable to know which resources conducted certain types of resource activities. Unfortunately, conventional systems and methods fail to provide these benefits.","From the foregoing discussion, it should be apparent that a need exists for an apparatus, system, and method that gathers trace data indicative of resource activity. Beneficially, such an apparatus, system, and method would gather the trace data automatically and make the trace data accessible to other software processes by way of an Application Programming Interface and\/or use of a standard data exchange format for the trace data. Furthermore, the apparatus, system, and method would allow for modular gathering of trace data such that different types of trace data may be gathered without significantly altering the apparatus, system, and\/or method.","The present invention has been developed in response to the present state of the art, and in particular, in response to the problems and needs in the art that have not yet been met for gathering trace data indicative of resource activity. Accordingly, the present invention has been developed to provide an apparatus, system, and method for gathering trace data indicative of resource activity that overcomes many or all of the above-discussed shortcomings in the art.","An apparatus according to the present invention includes a monitoring module, a determination module, and a collection module. The monitoring module initiates one or more activity monitors on a target computer system. Each activity monitor may be configured to detect a specific type of resource activity. Alternatively, a single activity monitor may detect a plurality of resource activity types. Preferably, each activity monitor detects resource activities of all resources associated with the target computer system.","The determination module determines activity indicators involving resources of the target computer system using the one or more activity monitors. Preferably, the determination module is closely coupled with the target computer system such that substantially all resource activities can be monitored if a particular activity monitor requires low-level access to resource activities conducted on the target computer system. For example, certain activity monitors may monitor all I\/O communication regarding a class of peripheral devices of the target computer system such as disk drives. Preferably, the determination module determines substantially all the activity indicators that are available from the hardware and software components of the target computer system.","The activity indicators may comprise a variety of information useful in identifying one or more separate resource activities. A non-exhaustive list of activity indicators may include remote procedure calls, file I\/O operations, process spawning operations, peripheral I\/O operations, network I\/O operations, and the like. In addition to events indicative of resource activity, activity indicators also include data generated before, during, or after a resource activity and data made available by conventional modules of the target computer system that indicates specific types of resource activities being conducted on the target computer system.","The collection module organizes the activity indicators into trace data representative of the resource activity. The trace data may include metadata regarding when the trace data is collected and organized. Preferably, the monitoring module, determination module, and collection module operate continuously on the target computer system. In this manner, the trace data include an accurate set of both current activity indicators as well as historical activity indicators. As used herein, \u201chistorical activity indicators\u201d refers to activity indicators collected over an extended period of time such as, but not limited to, days or weeks. The extended period of time may or may not be a continuous time period. Historical activity indicators may also be referred to herein as long term.","In one embodiment, the trace data is organized into a standard data exchange format. A storage module may store the trace data in a central repository. The apparatus may include an Application Programming Interface (API) that provides a set of con trace data in response to a request from a third party computer process. The apparatus may also include a launch module that initiates selected activity monitors according to a user-defined time criteria (i.e., a schedule) or other activity monitors in response to occurrence of a predefined event on the target computer system.","A method of the present invention is also presented for gathering trace data indicative of resource activity on a computer system. In one embodiment, the method includes initiating one or more activity monitors on a target computer system. Preferably, the activity monitors are modular and operate independent of each other. Next, activity indicators involving resources of the target computer system are determined using one or more of the activity monitors. Finally, activity indicators are organized into trace data representative of various types of resource activity. Certain trace data can include both current activity indicators and historical activity indicators.","The present invention also includes other embodiments arranged as a system, machine-readable instructions, and an apparatus that comprise substantially the same functionality as the components and steps described above in relation to the apparatus and method. The features and advantages of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","It will be readily understood that the components of the present invention, as generally described and illustrated in the figures herein, may be arranged and designed in a wide variety of different configurations. Thus, the following more detailed description of the embodiments of the apparatus, system, and method of the present invention, as presented in the Figures, is not intended to limit the scope of the invention, as claimed, but is merely representative of selected embodiments of the invention.","Many of the functional units described in this specification have been labeled as modules, in order to more particularly emphasize their implementation independence. For example, a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices or the like.","Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions which may, for instance, be organized as an object, procedure, function, or other construct. Nevertheless, the executables of an identified module need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the module and achieve the stated purpose for the module.","Indeed, a module of executable code could be a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices, and may exist, at least partially, merely as electronic signals on a system or network.","Reference throughout this specification to \u201ca select embodiment,\u201d \u201cone embodiment,\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases \u201ca select embodiment,\u201d \u201cin one embodiment,\u201d or \u201cin an embodiment\u201d in various places throughout this specification are not necessarily all referring to the same embodiment.","Furthermore, the described features, structures, or characteristics may be combined in any suitable manner in one or more embodiments. In the following description, numerous specific details are provided, such as examples of programming, software modules, user selections, user interfaces, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware chips, etc., to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","The illustrated embodiments of the invention will be best understood by reference to the drawings, wherein like parts are designated by like numerals throughout. The following description is intended only by way of example, and simply illustrates certain selected embodiments of devices, systems, and processes that are consistent with the invention as claimed herein.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 2","FIG. 2"],"b":"200"},"The apparatus  may include an operating system  that provides general computing services through a file I\/O module , network I\/O module , and process manager . The file I\/O module  manages low-level reading and writing of data to and from files  stored on a storage device , such as a hard drive. Of course, the storage device  may also comprise a storage subsystem such as various types of DASD systems. The network module  manages network communications between processes  executing on the apparatus  and external computer systems accessible via a network (not shown). Preferably, the file I\/O module  and network module  are modules provided by the operating system  for use by all processes -. Alternatively, custom file I\/O module  and network modules  may be written where an operating system  does not provide these modules.","The operating system  includes a process manager  that schedules use of one or more processors (not shown) by the processes -. The process manager  includes certain information about the executing processes -. In one embodiment, the information includes a process ID, a process name, a process owner (the user that initiated the process), process relation (how a process relates to other executing processes, i.e., child, parent, sibling), other resources in use (open files or network ports), and the like.","Typically, the business process is defined by one or more currently executing processes -. Each process  includes either an executable file  or a parent process which initially creates the process . Information provided by the process manager  enables identification of the original files  for the executing processes -, discussed in more detail below.","In certain embodiments, the apparatus  includes a monitoring module , analysis module , and determination module . These modules , ,  cooperate to dynamically identify the resources that comprise a logical application that corresponds to the business process. Typically, these resources are files . Alternatively, the resources may be other software resources (servers, daemons, etc.) identifiable by a network address such as a URL or IP address.","In this manner, operations can be performed on the files  and other resources of a logical application (business process) without the tedious, labor intensive, error prone process of manually identifying these resources. These operations include implementing business level policies such as policies for backup, recovery, server load management, migration, and the like.","The monitoring module  communicates with the process manager , file I\/O module , and network I\/O module  to collect trace data. The trace data is any data indicative of operational behavior of a software application (as used herein \u201capplication\u201d refers to a single process and \u201clogical application\u201d refers to a collection of one or more processes that together implement a business process). Trace data may be identifiable both during execution of a software application or after initial execution of a software application. Certain trace data may also be identifiable after the initial installation of a software application. For example, software applications referred to as installation programs can create trace data simply by creating new files in a specific directory.","Preferably, the monitoring module  collects trace data for all processes -. In one embodiment, the monitoring module  collects trace data based on an identifier (discussed in more detail below) known to directly relate to a resource implementing the business process. Alternatively, the monitoring module  may collect trace data for all the resources of an apparatus  without distinguishing based on an identifier.","In one embodiment, the monitoring module  communicates with the process manager  to collect trace data relating to processes  currently executing. The trace data collected represents processes -executing at a specific point in time. Because the set of executing processes -can change relatively frequently, the monitoring module  may periodically collect trace data from the process manager . Preferably, a user-configurable setting determines when the monitoring module  collects trace data from the process manager .","The monitoring module  also communicates with the file I\/O module  and network module  to collect trace data. The file I\/O module  maintains information about file access operations including reads, writes, and updates. From the file I\/O module, the monitoring module  collects trace data relating to current execution of processes  as well as historical operation of processes .","Trace data collected from the file I\/O module  may include information such as file name, file directory structure, file size, file owner\/creator, file access rights, file creation date, file modification date, file type, file access timestamp, what type of file operation was performed (read, write, update), and the like. In one embodiment, the monitoring module  may also determine which files  are currently open by executing processes . In certain embodiments, the monitoring module  collects trace data from a file I\/O module  for one or more file systems across a plurality of storage devices .","As mentioned above, the monitoring module  may collect trace data for all files  of a file system or only files and directories clearly related to an identifier. The identifier and\/or resources presently included in a logical application may be used to determine which trace data is collected from a file system.","The monitoring module  collects trace data from the network I\/O module  relating to network activity by the processes -. Certain network activity may be clearly related to specific processes  and\/or files . Preferably, the network I\/O module  provides trace data that associates one or more processes  with specific network activity. A process  conducting network activity is identified, and the resource that initiated the process  is thereby also identified.","Trace data from the network I\/O module  may indicate which process  has opened specific ports for conducting network communications. The monitoring module  may collect trace data for well-known ports which are used by processes  to perform standard network communications. The trace data may identify the port number and the process  that opened the port. Often only a single, unique process uses a particular network port.","For example, communications over port eighty may be used to identify a web server on the apparatus . From the trace data, the web server process and executable file may be identified. Other well-known ports include twenty for FTP data, twenty-one for FTP control messages, twenty-three for telnet, fifty-three for a Domain Name Server, one hundred and ten for POP3 email, etc.","In certain operating systems , such as UNIX and LINUX, network I\/O trace data is stored in a separate directory. In other operating systems  the trace data is collected using services or daemons executing in the background managing the network ports.","In one embodiment, the monitoring module  autonomously communicates with the process manager , file I\/O module , and network I\/O module  to collect trace data. As mentioned, the monitoring module  may collect different types of trace data according to different user-configurable periodic cycles. When not collecting trace data, the monitoring module  may \u201csleep\u201d as an executing process until the time comes to resume trace data collection. Alternatively, the monitoring module  may execute in response to a user command or command from another process.","The monitoring module  collects and preferably formats the trace data into a common format. In one embodiment, the format is in one or more XML files. The trace data may be stored on the storage device  or sent to a central repository such as a database for subsequent review.","The analysis module  analyzes the trace data to discover resources that are affiliated with a business process. Because the trace data is collected according to operations of software components implementing the business process, the trace data directly or indirectly identifies resources required to perform the services of the business process. By identifying the resources that comprise a business process, business management policies can be implemented for the business process as a whole. In this way, business policies are much simpler to implement and more cost effective.","In one embodiment, the analysis module  applies a plurality of heuristic routines to determine which resources are most likely associated with a particular logical application and the business process represented by the logical application. The heuristic routines are discussed in more detail below. Certain heuristic routines establish an association between a resource and the logical application with more certainty than others. In one embodiment, a user may adjust the confidence level used to determine whether a candidate resource is included within the logical application. This confidence level may be adjusted for each heuristic routine individually and\/or for the analysis module  as a whole.","The analysis module  provides the discovered resources to a determination module  which defines a logical application comprising the discovered resources. Preferably, the determination module  defines a structure  such as a list, table, software object, database, a text eXtended Markup Language (XML) file, or the like for recording associations between discovered resources and a particular logical application. As mentioned above, a logical application is a collection of resources required to implement all aspects of a particular business process.","The structure  includes a name for the logical application and a listing of all the discovered resources. Preferably, sufficient attributes about each discovered resource are included such that business policies can be implemented with the resources. Attributes such as the name, location, and type of resource are provided.","In addition, the structure  may include a frequency rating indicative of how often the resource is employed by the business process. In certain business processes this frequency rating may be indicative of the importance of the resource. In addition, a confidence value determined by the analysis module  may be stored for each resource.","The confidence level may indicate how likely the analysis module  has determined that this resource is properly associated with the given logical application. In one embodiment, this confidence level is represented by a probability percentage. For certain resources, the structure  may include information such as a URL or server name that includes resources used by the business process but not directly accessible to the analysis module .","Preferably, the analysis module  cooperates with the determination module  to define a logical application based on an identifier for the business process. In this manner, the analysis module  can use the identifier to filter the trace data to a set more likely to include resources directly related to a business process of interest. Alternatively, the analysis module  may employ certain routines or algorithms to propose certain logical applications based on clear evidence of relatedness from the trace data as a whole without a pre-defined identifier.","A user interface (UI)  may be provided so that a user can provide the identifier to the analysis module . The identifier  may comprise one of several types of identifiers including a file name for an executable or data file, file name or process ID for an executing process, a port number, a directory, and the like. The resource identified by the identifier  may be considered a seed resource for the logical application, as the resource identified by the identifier  is included in the logical application by default and is used to add additional resources discovered by searching the trace data.","For example, a user may desire to create a logical application according to which processes accessed the data base file \u201cUsers.db.\u201d In the UI , the user enters the file name users.db. The analysis module  then searches the trace data for processes that opened or closed the users.db file. Heuristic routines are applied to any candidate resources identified, and the result set of resources is presented to the user in the UI .","The result set includes the same information as in the structure . The UI  may also allow the user to modify the contents of the logical application by adding or removing certain resources. The user may then store a revised logical application in a human readable XML structure . In addition, the user may adjust confidence levels for the heuristic routines and the analysis module  overall.","In this manner, the apparatus  allows for creation of logical applications which correspond to business processes. The logical applications track information about resources that implement the business process to a sufficient level of detail that business level policies, such as backup, recovery, migration, and the like, may be easily implemented. Furthermore, logical application definitions can be readily adjusted and adapted as subsystems implementing a business process are upgraded, replaced, and modified. The logical application tracks business data as well as the processes\/executables that operate on that business data. In this manner, business data is fully archivable for later use without costly conversion and data extraction procedures.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 3","FIG. 2"],"b":["200","216","218","220","308"]},"In one embodiment, the monitoring module  collects trace data  as a business process is executing. In other words, the monitoring module  collects trace data as applications implementing the business process are executing. However, the monitoring module  may also collect sufficient trace data  when a business process is not being executed\/operated. In addition, the interface  may receive an identifier that directly relates a resource implementing a business process to the business process. Preferably, the identifier is unique to the business process, although uniqueness may not always be required. This identifier may be used by the analysis module  in analyzing the trace data .","The monitoring module  includes a launch module , a controller , a storage module , and a scanner . The launch module  initiates one or more activity monitors . The launch module  may launch activity monitors  when the monitoring module  starts, or periodically according to monitoring schedules defined for each activity monitor  or for the monitoring module  as a whole.","An activity monitor  is a software function, thread, process, driver, or application configured, in one embodiment, to trace a specific type of activity relating to a resource. The activity monitor may gather the trace data by monitoring the activity directly or indirectly by gathering trace data from other modules such as the process manager , file I\/O module , and network I\/O module  described in relation to .","In one embodiment, each activity monitor  collects trace data for a specific type of activity. For example, a file I\/O activity monitor  may communicate with a file I\/O module  and capture all file I\/O operations as well as contextual information, such as which process made the file I\/O request, what type of request was made and when. One example of an activity monitor  that may be used with the present invention is a file filter module described in U.S. patent application Ser. No. 10\/681,557, filed on Oct. 7, 2003, entitled \u201cMethod, System, and Program for Processing a File Request,\u201d hereby incorporated by reference. Of course, various other types of activity monitors may be initiated depending on the nature of the activities performed by the business process. Certain activity monitors may trace Remote Procedure Calls (RPC).","The controller  controls the operation of the activity monitors  in one embodiment. The controller  may adjust the priorities for scheduling of the activity monitors  for use of a monitored system's processor(s). In this manner, the controller  allows monitoring to continue and the impact of monitoring to be dynamically adjusted as needed. The control and affect of the controller  on overall system performance is preferably user configurable.","The storage module  interacts with the activity monitors  to collect and store the trace data collected by each individual activity monitor . In certain embodiments, when an activity monitor  detects a resource (executable file, data file, or software module) conducting a specific type of activity, the activity monitor  provides the activity specific trace data to the storage module  for storage.","The storage module  may perform certain general formatting and organization to the trace data before storing the trace data. Preferably, trace data for all the activity monitors  is stored in a central repository. The central repository may be implemented using well known data structures including ASCII text file(s), extensible Markup Language (XML) files, databases, and the like.","Typically, activity monitors  monitor dynamic activities performed during operation of a business process while the scanner  collects trace data from relatively static system information such as file system information, processes information, networking information, I\/O information, and the like. The scanner  scans the system information for a specific type of activity performed by the business process or any process on the computer system.","For example, the scanner  may scan one or more file system directories for files created\/owned by a particular resource. The name resource may correspond to the identifier such that it is clear that the resource belongs to the logical application  that implements the business process. Consequently, the scanner  may provide any trace data found to the storage module  for storage.","In one embodiment, the monitoring module  produces a set or batch of trace data  that the analysis module  examines at a later time (batch mode). Alternatively, the monitoring module  may provide a stream of trace data  to the analysis module  which analyzes the trace data  as the trace data  is provided (streaming mode). Both modes are considered within the scope of the present invention.","The analysis module  may include a query module , an evaluation module , a discovery module , and a modification module . The evaluation module  and discovery module  work closely together to identify candidate resources to be associated with a logical application .","The evaluation module  applies one or more heuristic routines -to a set of trace data . Preferably, the query module  filters the trace data  to a smaller result set. Alternatively, the heuristic routines -are applied to all available trace data .","The filter may comprise an identifier directly associated with a business process. The identifier may be a resource name such as a file name. Alternatively, the filter may be based on time, activity, type, or other suitable criteria to reduce the size of the trace data . The filter may be generic or based on specific requirements of a particular heuristic routine -","In one embodiment, the evaluation module  applies the heuristic routines -based on an identifier. The identifier provides a starting point for conducting the analysis of trace data. In one embodiment, an identifier known to be associated with the business process is automatically associated with the corresponding logical application . The identifier is a seed for determining which other resources are also associated with the logical application . The identifier may be a file name for a key executable file known to be involved in a particular business process.","Each heuristic routine -analyzes the trace data based on the identifier or a characteristic of a software application represented by the identifier. For example, the characteristic may comprise the fact that this software application always conducts network I\/O over port . An example identifier may be the inventorystartup.exe which is the first application started when an inventory control system is initiated.","A heuristic routine -is an algorithm that examines trace data  in relation to an identifier and determines whether a resource found in the trace data  should be associated with a logical application. This determination is very complex and difficult because the single identifier provides such little information about the logical application . Consequently, heuristics are applied to provide as accurate of a determination as possible.","As used herein, the term \u201cheuristic\u201d means \u201ca technique designed to solve a problem that ignores whether the solution is probably correct, but which usually produces a good solution or solves a simpler problem that contains or intersects with the solution of the more complex problem.\u201d (See definition on the website www wikipedia org.).","In a preferred embodiment, an initial set of heuristic routines -is provided, and a user is permitted to add his\/her own heuristic routines -. The heuristic routines -cooperate with the discovery module . Once a heuristic routine -identifies a resource associated with the logical application, the discovery module  discovers the resources and creates the association of the resource to the logical application.","One heuristic routine identifies all resources that are used by child applications of the application identified by the identifier. Another heuristic routine identifies all resources in the same directory as a resource identified by the identifier. Another heuristic routine analyzes usage behavior of a directory and parent directories that store the resource identified by the identifier to identify whether the sub or parent directories and all their contents are associated with the logical application.","One heuristic routine determines whether the resource identified by the identifier belongs to an installation package, and if so, all resources in the installation package are deemed to satisfy the heuristic routine . Another heuristic routine examines resources used in a time window centered on the start time for execution of a resource identified by the identifier. Resources used within the time window satisfy the heuristic routine . Finally, one heuristic routine may be satisfied by resources which meet user-defined rules. These rules may include or exclude certain resources based on site-specific procedures that exist at a computer facility.","In one embodiment, the evaluation module  cooperates with the discovery module  to discover resources according to two distinct methodologies. The first methodology is referred to as a build-up scheme. Under this methodology, the heuristic routines -are applied to augment the set of resources currently within a set defining the logical application. In this manner, the initial resource identified by the identifier, the seed, grows into a network of associated resources as the heuristic routines -are applied. Use of this scheme represents confidence that the heuristic routines will not miss relevant resources, but runs the risk that some resources may be missed. However, this scheme may exclude unnecessary resources.","The second methodology, referred to as the whittle-down scheme, is more conservative but may include resources that are not actually associated with the logical application. The whittle-down scheme begins with a logical application comprising a pre-defined superset representing all resources that are accessible to the computer system(s) implementing the logical application, business process. The heuristic routines -are then applied using an inverse operation, meaning resources that satisfy a heuristic routine -are removed from the pre-defined superset.","Regardless of the methodology used, the evaluation module  produces a set of candidate resources which are communicated to the modification module . The modification module  communicates the candidate resources to the determination module  which adds or removes the candidate resources from the set defined in the logical application . The determination module  defines and re-defines the logical application  as indicated by the modification module .","Preferably, the evaluation module  is configured to apply the heuristic routines -for each resource presently included in the logical application . Consequently, the modification module  may also determine whether to re-run the evaluation module  against the logical application . In one embodiment, the modification module  may make such a determination based on a user-configurable percentage of change in the logical application  between running iterations of the evaluation module . Alternatively, a user-configurable setting may determine a predefined number of iterations.","In this manner, the logical application  continues to grow or shrink based on relationships between recently added resources and resources already present in the logical application . Once the logical application  changes very little between iterations, the logical application may be said to be stable.","Once the modification module  determines that the logical application  is complete (stable or the required number of iterations have been completed), the determination module  provides the logical application  to the interface . Preferably, the interface  allows a user to interact with the logical application  using either a Graphical User Interface  (GUI) or an Application Programming Interface  (API).",{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 4","FIG. 3"],"b":["216","216","216"]},"The monitoring module  may include a launch module  configured to initiate one or more activity monitors -. Alternatively, the monitoring module  and\/or controller  (See ) may initiate the one or more activity monitors -. The monitoring module  through the launch module  may start or stop certain activity monitors -according to various criteria.","In one embodiment, the launch module  starts the activity monitors -according to a user-configurable schedule. Certain activity monitors -may operate continuously until a stop command is issued. Preferably, activity monitors -execute until a specific type of monitoring task is completed. Once the monitoring task is completed, an activity monitor  may terminate or enter a suspended (\u201cSleep\u201d) mode until an internal timer causes the activity monitor  to resume its monitoring task.","The launch module  may start other activity monitors -according to user-defined time criteria maintained either by the launch module  or by the activity monitors -individually. The user-defined time criteria may be configurable. The launch module  may start certain activity monitors -in response to a predefined event occurring on the target computer system. A predefined event may include the starting or stopping of a certain process, mounting of a peripheral device, an error condition, or the like.","Each activity monitor -may detect a specific type of resource activity. Alternatively, one or more activity monitors detect a plurality of types of resource activities. The types of resource activities may cover a wide range and is open to new types of resource activities as computing operations on a target system change over time. Examples of types of resource activities include executing processes, file I\/O activity, network I\/O activity, and peripheral I\/O activity.","Preferably, each activity monitor -is a separate module independent of the other activity monitors -. The activity monitors -are configured according to a modular design such that certain activity monitors  may be added, modified, or replaced without affecting operation of the other activity monitors -. In this manner, the monitoring module  may change and adapt to different monitoring requirements for a target computer system. In addition, the monitoring module  can readily be changed to monitor new types of resource activity as technology changes and adapts.","Preferably, the activity monitors -are implemented as software objects using an object oriented programming language such as JAVA, C++, or the like. These software objects may include inherited data and methods that allow the activity monitor -to be readily adapted to a specific type of resource activity. In addition, the software objects may include a common interface to the launch module  and monitoring module  to facilitate management of the activity monitor -","Each activity monitor -comprises a set of attributes . The attributes  define characteristics about the activity monitor -. Those of skill in the art will recognize a variety of attributes  that may be included. Certain attributes  may include a name for the activity monitor -, a label or description of the type of resource activity that is detected, a start time schedule, a stop time interval, an output location for trace data, and the like. Certain attributes  may be user-configurable.","In keeping with the modular design, in one embodiment, each activity monitor includes sufficient functionality to determine and collect activity indicators. Specifically, each activity monitor -may include a determination module  and a collection module . The determination module  determines activity indicators generated or caused by resources of the target computer system. Preferably, each determination module  determines a specific type of activity indicators. The type of activity indicators correspond to the type of resource activity the activity monitor -is configured to detect.","The collection module  organizes the activity indicators determined by the determination module  into trace data  (See ). The trace data  is representative of resource activity. In addition, the collection module  may add metadata to the trace data . The metadata may include such information as a timestamp for when a record of the trace data was generated, what version of an activity monitor -was used, what type of data the record represents, and the like. Preferably, the collection module  organizes sets of activity indicators into records. Fields of the records may vary based on the type of resource activity monitored.","In one example, suppose activity monitor is configured to detect and determine resource activities related to executing processes on the target computer system. Consequently, the determination module  may periodically determine which processes are executing, which resources are the source of the processes, what relationships exist between executing processes, as well as all statistics available about the executing processes and the resources (executable files) used to generate the processes. This information comprises a few examples of activity indicators.","Next, the collection module  may organize the activity indicators into trace data records having a field for each activity indicator. In one embodiment, the collection module  may compute some fields of the trace data record. In the above example, an execution time value may be computed based on a start time and an end time for a process. In addition, the collection module  may include a timestamp in the trace data record indicating when the activity indicators were gathered and recorded.","The collection modules  may independently communicate with the storage module  (See ) to store one or more generated trace data records. Alternatively, the collection modules  may simply append trace data records to a single trace data file or separate trace data files that are specific to a particular type of activity monitor -. In one embodiment, the trace data records are stored in a data structure well known in the art. Preferably, the data structure corresponds to a standard data exchange format. For example, the trace data may be stored in an XML file or other standard well known file format. In this manner, the trace data may be accessed and read easily by a variety of conventional software applications.","Preferably, all trace data collected is stored for future use. No trace data is deleted or overwritten. As mentioned above, the trace data includes activity indicators. As activity monitors -continue to collect and record trace data, activity indicators that were current activity indicators age to become historical activity indicators. Preferably, the activity monitors -continuously collect and record trace data. Consequently, an unbroken historical record of trace data can be generated. The unbroken historical record may provide information that may otherwise be lost. For example, analysis of the unbroken historical record may be done to determine the frequency of execution of a specific process and its corresponding resource. Those of skill in the art will recognize other information that may be learned from an unbroken historical record of resource activity.",{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 5","b":["500","310","500","502","504","506","502","504","506"]},"The system  may include a plurality of file systems (FS) -that use corresponding storage devices -. The I\/O module  may provide file information for all the file systems -. Preferably, the I\/O module  and process manager  provide information regarding resource activity in both a real-time and point-in-time manner. Those of skill in the art will recognize that various other modules may be included in the system  which may provide relevant resource activity information. For example, storage subsystem modules, memory modules, multimedia modules, and the like may also provide resource activity information.","A monitoring module  collects trace data  during execution of processes by the operating system . The monitoring module  operates in substantially the same manner as the monitoring module  illustrated in . Preferably, the monitoring module  is installed on the target system .","The monitoring module  may interact with the process manager , I\/O module , and file systems -to collect trace data . As described in relation to , the monitoring module  collects certain types of trace data  using activity monitors -. Representative examples of a few activity monitors -may include a process monitor , I\/O monitor , network monitor , and FS monitor .","By way of example, each type of monitor , , ,  illustrated will be described. Each of the monitors , , ,  may include a determination module  and collection module  configured to function in similar manner to the corresponding modules , described in relation to . The main difference is that each monitor , , ,  is configured to gather activity indicators for a particular type of resource activity. Those of skill in the art will appreciate that the system  may include more monitors or fewer monitors than those illustrated. In addition, the modular design of the monitors , , ,  allows the set of monitors to be readily changed as needed.","The process monitor  interacts with the process manager  to gather resource activity relating to executing processes on the system . This type of resource activity includes which resources are executing, which resources have been spawned by other resources and how the resources are related. Preferably, this type of resource activity comprises all operations related to execution of a process on the target computer system .","Preferably, the process monitor , as with all the monitors , , , , gathers all the activity indicators available from the hardware and software components of the target computer system, the system . The activity monitor makes every effort to collect as many activity indicators as possible that relate to the particular type of resource activity. Consequently, the process monitor  may interact with other software and hardware components such as the FS -to gather resource activity indicators beyond those available from the process manager .","For example, activity indicators from the process manager  may indicate that Process A executing from object code in File X began executing at 12:00 am and is still running. These pieces of information, \u201cprocess A began executing from 12:00 am on and comes from object code in File X,\u201d are representative examples of resource activity indicators. The resource may be File X. The determination module  determines what information from the process manager  is an activity indicator. The collection module  takes the activity indicators and organizes them into fields for storage as trace data .","However, the process manager  may not indicate where File X is stored. Consequently, the process monitor  may communicate with one or more FS -to find the path to where the file, resource, is stored. Whether or not a file path is gathered by the process monitor  depends on how the process monitor  is configured. In certain embodiments, a user may activate and deactivate gathering of particular activity indicators by an activity monitor -(See ), such as the process monitor .","The I\/O monitor  interacts with the I\/O module  to gather resource activity relating to all file I\/O on the target system . This type of resource activity may include operations such as file open, file close, file read, file modification, file delete, file create, and the like. The file I\/O activities are performed by executable files of the target system . Typically, the activity indicators may include information such as the name of the process conducting the file I\/O operation, the target file involved in the operation, the timestamp, file size information, the owner of the respective files, and the like. In this manner, trace data  collected by the I\/O monitor  may be used to determine how files of the target computer system are being used.","The network monitor  interacts with a network access point such as a network access card  or network subsystem (Not Shown). The network monitor  gathers resource activity relating to network messages sent to\/from resources of the system . This type of resource activity may include messages for network resources such as web pages, URLs, web services, and the like. The activity indicators of this type may include the name of the process, a timestamp, the type of message sent, the port used, the socket used, the destination address for the message, etc. In this manner, trace data  collected by the network monitor  may be used to identify network resources, including third party applications and data that is being used by resources of the target computer system . The resources may comprise files or ports used by certain files to communicate over the network.","The File System (FS) monitor  interacts with the FSs -to gather resource activity relating to files of the target computer system . This type of resource activity typically includes all resource activity that may be gathered by scanning information in the FSs -. Typically, resources comprise files and the files are stored in the FSs -. The activity indicators of this type may include directory names, directory structure, directory creation, modification, and access times, directory ownership, directory access permissions, and the like. Similarly, other activity indicators may include file names, file format, file creation, modification, and access times, file ownership, file access permissions, indirect file links, and the like. In this manner, trace data  collected by the FS monitor  may be used to identify what file resources are available to the target computer system  and how those file resources are related and manipulated over time.","The monitors , , ,  may communicate with a storage module  to store collected trace data . Alternatively, each monitor , , ,  may include functionality to store the trace data .","Preferably, the monitoring module  initiates the monitors , , ,  based on the type of resource activity that is being monitored. For example, the process monitor  and FS monitor  may be executed periodically in order to minimize the impact of the monitors , , ,  on the performance of the target computer system . The process monitor  and FS monitor  may perform the monitoring task and then terminate or hibernate (sleep) for a time interval. The time interval may be defined in the attributes  (See ). In certain implementations, the network monitor  may be periodically initiated to scan network traffic and assigned network ports before hibernating.","Consequently, certain monitors , , ,  may be known as \u201ccrawlers\u201d because they periodically resume operation for a period of time and then hibernate once the task is completed or a time interval expires. Such monitors , , ,  take \u201csnap shots\u201d of the current activity indicators which are indicative of resource activities. Other activity monitors such as the I\/O monitor  may execute continuously.",{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 6","b":["600","600","602","604","604","604"]},"Typically, the hardware  is managed and controlled by an operating system . The operating system  manages access to the hardware resources by software resources such as processes and files. Often this means that no processes on the target computer system are permitted to interface directly with the hardware. Instead, all communication with the hardware must pass through the operating system .","The operating system  may include tools such as a process manager  (See ), an I\/O module , network module , and FSs -. Typically, the heart of an operating system  is the kernel . The kernel  typically handles all communications between processes (including operating system tools and device drivers) and the hardware .","However, the kernel  may include a \u201chook,\u201d low-level interface, that allows a special driver to also receive all communications between processes and the hardware . Typically, this low-level interface has strict protocols and controls to ensure that these special drivers are unable to compromise the integrity and security of the target computer system. In certain operating systems, these special drivers are referred to as \u201cFilter Drivers.\u201d The low-level interface may require the special drivers to specify a certain hardware device or class of hardware devices for which all messages sent to or received from processes of the target computer system are also passed to the driver. The driver may then allow the messages to continue to the destination or filter them out for some reason.","The next level of the software stack  illustrates a plurality of activity monitors -(See ) that are provided, in some embodiments, with higher priority access to the hardware . In particular, in order to accurately determine all file activity, one activity monitor such as an I\/O monitor  (See ) includes a filter driver . The filter driver  is illustrated between the kernel  and the hardware , and extends up into the activity monitor . The filter driver  may execute continuously. Alternatively, the filter driver  may reside in memory and execute in response to certain system events such as a file I\/O message received by the kernel .","The filter driver  allows the I\/O monitor  to determine activity indicators for all messages to and from a class of peripheral devices such as storage devices. Of course, other activity monitors and other filter drivers may monitor other classes of devices. In this manner, the filter driver  can determine all file I\/O activity between processes on the target computer system and the storage devices.","The next level of the software stack  illustrates a launcher  that operates in substantially the same manner as described in relation to . The software stack  may also include an Application Programming Interface (API) . The API  defines a set of functions that other third-party processes  can utilize. The API  accesses the trace data  (See ) and provides at least a portion of the trace data to the third-party process  in response to a request .","Preferably, the API  includes basic filtering and query capabilities such that generic queries from the third-party process  can be satisfied. For example, suppose the third-party process  is a backup software product scheduled to daily backup changed files on the storage devices of the target computer system. Ordinarily, the backup software product would conduct a scan of all the files on all the storage devices for files and directories modified in the last twenty-four hours. This operation may take several minutes.","However, the API  is configured to allow the backup software product to include a basic query in the request  such as \u201cFind all files modified in last 24 hours.\u201d The API  includes well known software modules that apply the query to the trace data . Because the activity monitors -are constantly updating the trace data , a scan of the storage devices is not necessary. Instead, the trace data  filtered based on the query criteria and the result set is passed to the backup software product .","In this manner, the API  maybe considered a service or daemon process for the target computer system. Of course, the API  may include a variety of well known functions that utilize the trace data  for the third-party processes . The API  allows the third-party processes  to be more efficient and leverage the collection and monitoring work previously performed by the activity monitors -","In addition, the third-party processes  need not include scanning or probing functionality to discover data that is readily available in the trace data  through the API . Consequently, the third-party processes  can be developed using less software code and development time but provide similar functionality more efficiently. Furthermore, in certain embodiments, the third-party processes  may search the trace data  to find information of interest concerning resource activity. Such independent searching is facilitated by the present invention organizing the trace data  according to a standard data exchange format such as XML.",{"@attributes":{"id":"p-0144","num":"0143"},"figref":["FIG. 7","FIG. 3"],"b":["700","310","700","702","320","320","320"],"i":["a","n","a","n ","a","n "]},"Certain activity monitor -may operate continuously while others may scan information about the target computer system (such as a process manager ) to collect trace data  and then terminate or suspend operation until certain time criteria are satisfied. Other activity monitors -may be so closely coupled to the target computer system that the occurrence of certain events causes the activity monitor  to be activated to record activity indicators related to the event as trace data . Still other activity monitors -may operate for a predetermined time period.","Next, a determination  is made whether time criteria are satisfied or a predefined event has occurred. If so, the method  initiates or re-initiates another activity monitor -. In one embodiment, the time criteria and\/or events are defined using a configurable schedule. The schedule and\/or events may be defined in a user-configurable attribute for at least one activity monitor -","In one embodiment, if the determination  is made that no additional activity monitors -need to be initiated at this time, a second determination  may be made. A monitoring module  (See ) may determine  whether any third-party requests  (See ) for trace data  have been received. If so, at least a portion of the trace data  is retrieved  to form a dataset that is sent to satisfy the request . Preferably, each request  conforms to an API published for the monitoring module . Once the request  is satisfied, the method  may return to determination step .","If no third party requests  have been received , each activity monitor -independently determines  activity indicators relevant to the type of resource activity the activity monitor -is configured to detect and monitor. As discussed above, the activity indicators are any information\/characteristics about the target computer and its resources indicative of a particular resource activity (file I\/O, network I\/O, etc.) Examples of activity indicators include currently executing processes, open files, closed files, active network sockets, and the like.","Next, activity indicators are organized  into trace data . Preferably, each activity monitor  organizes activity indicators independently. Organization of activity indicators may include formatting and data type conversion or encoding as well as determination of metadata related to the activity indicators. The metadata may comprise information such as time stamps, device identifiers, activity monitoring intervals, and the like. Preferably, the trace data  is organized into a standard data exchange format such as XML. Finally, the trace data  is stored  for subsequent use and analysis and the method  ends. Preferably, the trace data  is stored in a central repository.","In one embodiment, the activity monitors  are initiated and managed automatically over an extended continuous period of time (several days). Consequently, the trace data  includes current activity indicators and historical activity indicators. Having both current activity indicators and historical activity indicators allows for subsequent data mining to be performed on the trace data . The data mining may provide additional information beyond the raw data within the trace data .","For example, certain activity indicators may be correlated with others over time to provide efficiency information about a particular resource used on the target computer system. As another example, the trace data  may be analyzed to identify all the resources (i.e., executable files, data files, etc.) employed to implement a business process such as inventory control. These identified resources may be from disparate software packages and cooperate to perform the desired business process. With the resources identified, business level policies may be readily implemented for the business process as a whole.","In summary, the present invention provides an apparatus, system, and method for gathering trace data indicative of resource activity on a target computer system. The present invention provides activity indicators that may be used by a variety of processes through the API. The trace data collected is comprehensive such that activity indicators discovered to have high significance in the future are available even if the target computer system or its configuration becomes unavailable. In addition, the trace data is collected automatically and continuously such that both current activity indicators and historical activity indicators are available. Resources that conducted the activities are also identified. The trace data is provided in a standard data exchange format such that third party processes can access the trace data directly or through the API. In this manner, less software coding is required for third party processes. The present invention allows the trace data to be gathered in a modular manner such that different types of trace data may be gathered without altering the present invention except to plug-in a different activity monitor. Consequently, the present invention may be modified to accommodate upgrades and changes to gather different types of trace data over time.","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order that the advantages of the invention will be readily understood, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments that are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings, in which:",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
