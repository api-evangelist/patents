---
title: Declarative Dispatch
abstract: Declarative dispatch is a computer-implemented method for processing a database represented by a collection of declarations. Computational services responsive to notification of declarations are provided. Each declaration includes a subject entity, a relation, and, optionally, an object entity. The relation is associated with one or more of the provided computational services. Upon receiving a declaration, a notification of the received declaration is dispatched to each computational service associated with the received declaration's relation. The notified computational service may process the subject entity, relation, and optional object entity in response to the dispatched notification. Received declarations may be cached, and dispatch of a received declaration may be suppressed upon retrieval of the received declaration from the cache. Dispatch processing may include instantiation of instances of object-oriented classes, assignment to association and property members of object-oriented classes, and implementation of meta-relations, such as commutivity, transitivity, implication, and complementarity of relations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454429&OS=07454429&RS=07454429
owner: 
number: 07454429
owner_city: 
owner_country: 
publication_date: 20041224
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FEDERALLY SPONSORED RESEARCH","SEQUENCE LISTING OR PROGRAM","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT(S)","\u00a71 Introduction","\u00a72 Preliminaries","\u00a73 Ooutline of Detailed Disclosure","\u00a74 Declarative Dispatch","\u00a75 Particular Embodiment","\u00a76 Alternative Embodiments"],"p":["This applications claims the benefit of PPA Ser. No. 60\/544,511, filed Feb. 14, 2004 by Alan S. Rojer.","Not Applicable","Not Applicable","1. Field of the Invention","This invention is related to databases and particularly to processing databases.","2. Description of the Prior Art","Databases are potentially great sources of information, but conventional techniques for processing databases are insufficiently general. What is needed is an improved method for processing databases.","\u00a71.1 Entities, Relationships, Declarations, and Services","A method of processing databases is disclosed in which one or more computational operations is selected. Each computational operation is associated with one or more relationships. A sequence of declarations associated with a database is processed. Each declaration includes at least one entity and at least one relationship. Each computational operation whose associated relationship is included in the declaration being processed is performed on that declaration.","As a simple example, a phone book is a database including entries such as \u201cTom Jones, 59 Broad St., 800-555-1212.\u201d The entry may be considered to have three entities,\n\n","This entry may also be considered to participate in three bidirectional relationships,\n\n","This entry may also be considered to participate in additional relationships which serve to characterize the entities; specifically,\n\n","The database entry may be transformed into a series of declarations, each including at least one entity and one relationship.\n\n","For convenience, the data in the database entry may be more concisely represented by building expressions that combine multiple declarations. For example, \u201cTom Jones has an address of 59 Broad St. and has a phone number of 800-555-1212.\u201d The example combines two elementary declarations which share the same subject. A representation of a database as a series of expressions, each representing one or more declarations, will be denoted a discourse. A discourse provides an alternative representation for data in a database which is convenient for processing.","The transformation of ordinary data in a database to a discourse recasts the rows and columns of the-database to a collection of simple sentence-like units of regular structure. Such a transformation does not necessarily add or remove information. However, identification of relationships that are implicit in a database table may make more clear the human-oriented meaning of the data in the database. Indeed for complex databases the task of representing the tabular data as declarations may require expertise where the original meaning of the data may have been lost or evolved with usage.","To process data in a database, computer programs may be constructed which read the data and carry out computational operations. A computational operation includes any useful operation performed on data by a computer program or any constituent of a computer program. Sorting data elements, accumulation of totals, averages, weighted averages, etc. and online or printed display of data elements are examples of useful computational operations. When the data is provided in database, a computer program which is to operate on the data must be developed to conform to the organization of the data in the database. This organization may be quite complex, involving a plurality of database tables. A computer program which is constructed to operate on the data in the database will typically be organized to closely reflect the structure of the database. The computational operations of the program may require intimate knowledge of the organization of the database and may require substantial human expertise to prepare. Nor will the computational operations be uniform and discrete. The lack of uniformity and discreteness will limit the degree to which the computational operations may be reused as well as the degree to which the computational operations may be provided by computer programs or constituents of computer programs. Nonuniform, agglomerated computational operations are also poorly suited to dynamic recombination under programmatic or manual control.","To facilitate reuse, automatic provision, and dynamic recombination of computational operations, the standardization of computational operations into uniform and discrete components is beneficial. As a declaration is a natural unit of representation of data, an operation on a declaration provides a natural unit of computational operation. I will designate as a service any computational component providing an invocable computational operation on a declaration (i.e. an operation accepting a declaration as input). Services thus provide a uniform, discrete element of computational service; the invocation of the service's operation upon a declaration is denoted a dispatch. The capability of dispatch defines a uniform, discrete element of computation which is shared by all services.","A service, capable of dispatch, may perform arbitrary computational operations in the course of dispatch. Services are free to maintain cached data. Services may operate on distinct elements such as files, network connections, display devices, etc. Services may even instigate additional declarations in response to dispatch.","To provide the dispatch of services in connection with the processing of declarations, a coupling must be provided between declarations and services. The interpretation of the declaration as a sentence-like element suggests that a computational operation, a form of action, should be coupled through the predicate of the declaration. However, to maintain a degree of independence between the representation of data in a discourse, and the dispatch of computational operations in a service, I have found it beneficial to permit any number of services to associate with any particular relationship. The same relationship may thus invoke various operations in various contexts, as well as multiple operations in a particular context, enhancing the generality of a declarative representation as well as easing the provision of dynamic combinations of diverse computational services.","The representation of a database as a discourse is useful for the ease and convenience with which computational operations may be applied to the database constituents. The provision of computational operations as uniform, discrete services plurally coupled to a relationship permits a natural coupling between representation and computation. To illustrate the application of computational operations to database constituents by dispatch of services in response to declarations, a detailed example will next be considered.","\u00a71.2 Example","Suppose that Zebulon has lost the keys to his office. He is pretty sure where he dropped them: near 44 Willow St. in Anyville. However when he returned to that address to look for the missing keys, he did not find them. His niece Abigail has agreed to help him find them. Abigail has available two computational resources. The first resource is a phone book database roughly equivalent to that of the simple example described above. The second resource is a map facility that determines map positions from addresses, permitting an easy estimation of the distance between two addresses.","Abigail wishes to obtain phone numbers for a collection of addresses near 44 Willow St. She is an experienced computer programmer and she approaches this relatively easy problem using techniques she would bring to a project of a much larger scale. Abigail begins by considering the categories and relationships she will use for this project. She observes that addresses, persons, phone numbers, and distances between addresses are all relevant entities. However, she decides to distinguish addresses and persons as categories, and leave phone numbers and distances as simple properties of persons and addresses, respectively.","Next she considers the relationships that connect the categories and properties. The two categories of addresses and persons may be connected by the \u201chas person\u201d relation. Abigail decides to allow for the possibility that a particular address may have several persons living there, possibly with distinct phone numbers. She imagines an apartment building! So she decides that the \u201chas person\u201d relation will be represented by a plural association, which is an association that permits a subject entity to associate with more than one object entity.","Abigail turns next to the properties of phone number and distance. She decides that a phone number property is most naturally associated with a person; she likes to think about the goal of the project as identifying people who might have found Zebulon's keys; the phone number is a mechanism for reaching those potentially interesting persons. She also decides that she will allow for the possibility that a particular person might have multiple phone numbers; she treats the phone number as a plural property. She doesn't even have to think about the distance; she immediately attaches the distance property (which is always measured from 44 Willow) to the address category.","Abigail feels satisfied with the categories, association and properties that she has chosen to represent the computational elements upon which her programs will operate. Together, the categories, associations and properties she defined make up a model , which is rather like a schematic diagram of the parts of the world that are relevant from the point of view of the computations she will be performing for this project. Of course, as she proceeds she might discover that changes to her model might make her tasks easier or provide a better result, so she will keep an open mind about the model. Like any computer model, it's a useful fiction, not an immutable dogma. She will carefully consider any changes that promise to increase its utility.",{"@attributes":{"id":"p-0200","num":"0223"},"figref":"FIG. 1","b":"1000"},"Abigail identifies a category person  which will contain instances representing the particular persons whom she will be considering calling. Abigail also identifies a category address  which will contain instances representing the particular addresses that have been determined to lie nearest 44 Willow St. Finally, Abigail interrelates the categories with an association has person  that indicates that a particular subject address has a particular object person living there. She designates \u201chas person\u201d  a plural association.","Abigail next considers how she will transform her model  into something that can operate in a computer. Abigail is a long-time practitioner of a state-of-the-art computer programming discipline which is called object-oriented programming (often abbreviated OOP). OOP was invented to help programmers deal with complex problems and, as far as Abigail is concerned, it's indispensible. OOP prescribes that a computer program should be built out of units that encapsulate both data and computation. These units, which are called classes, are intended to represent in a natural way the things that the program is operating upon. OOP was invented by computer scientists who were running simulations of complex systems like the long-distance telephone network.","A class in OOP is very much like a category. A class specifies a collection of related elements; the related elements may be called instances or objects. Each instance from a class may have some particular data and some shared behavior. The elements of particular data in an instance of a class are called members. The elements of shared behavior, which are computational capabilities, are called member functions. A member of a class is a slot for data. Each instance of the class has its own slot, so different instances can be distinguished by the distinct contents of their members. The contents of a member, being potentially distinct for each instance of class, need to be supplied to each instance of the class. There are several ways to supply the member contents, but Abigail prefers whenever possible to supply member contents at the time when the instance is created (that point of instance creation is also called instantiation, for obvious reasons).","In contrast to members, which are containers for data, member functions are units of computation which are shared by all the instances of a class. A member function, being a computation, must be operated, or, to use OOP lingo, invoked. When a member function is invoked, several kinds of data are available upon which the member function may operate. A particular instance of the class which provides the member function is available. The invocation of the member function will specify the particular instance, which may be called the subject or the implicit object of the member function (beware confusion with the subject or object of a declaration, which are particular members, so-named for declaration's connection with the grammar of sentences). Inside the member function, the particular instance is usually not explicitly described, but it is available if needed. In C++, a popular OOP language which is Abigail's first choice for OOP, the particular instance, implicitly provided, is called \u201cthis\u201d.","Besides the particular instance provided at invocation, which is implicitly available, a member function may accept arguments, which are additional units of data that may be used in the member function's computation. The invocation of a member function will look something like \u201cm\u2192f (a, b)\u201d. In this example, the member function \u201cf\u201d is invoked for the particular instance \u201cm\u201d with arguments \u201ca\u201d and \u201cb\u201d. Note that not all member functions have arguments. Besides the arguments and the particular instance, the member function also has available the members of the particular instance. These contain particular data that characterizes the particular instance. So, in summary, a member function operates on a particular instance, any arguments, and any member data in the particular instance.","An invocation of a member function, being a computation, may produce a result. The result of a member function computation is said to be returned when an invoked member function has completed its computation. Thus a member function invocation in a context may behave like a source of data; the returned value from the member function is available for further computation. A member need not return anything, however; a member function that doesn't return anything is said to have a \u201cvoid\u201d return. Such member functions usually have some effect on the members of the particular instance or perhaps some external effect like printing or drawing on the screen.","When she was first learning OOP, Abigail liked to compare a member function to a recipe. The members of the particular instance supplied in an invocation are like ingredients from the pantry or the freezer. The arguments supplied in the invocation are like the fresh ingredients she provided specifically for the recipe. The steps in the member function, operating on arguments and members, are like the preparation steps in a recipe combining the fresh ingredients with ingredients from the pantry. And the member function's returned value is like the finished dish! Sometimes, however, you don't serve the dish, you might be preparing something that you're going to keep around for use in other dishes, like stock or glaze. In other words, you might be cooking for the pantry or the freezer, and not serve anything; that's like a void member function.","For Abigail, the translation from her model  to a family of related classes is easy. Each category in the model  will give rise to a class. Entities representating instances from categories that the program encounters in processing declarations may give rise to instances from the classes. Associations and properties are a little more subtle; they may give rise to members or to member functions, depending on how they will be used.",{"@attributes":{"id":"p-0209","num":"0232"},"figref":"FIG. 2","b":["1020","1000","1025","1010","1025","1030","1000","1030","44","1035","1025","1015","1035","1040","1005","1040","1045","1045"]},"Any computation as it proceeds may build up a collection of objects, which are instances from the classes. Abigail provides a \u201chost\u201d class, an instance of which will represent the collection of objects which are under active consideration by her computation. An instance of the host class in a running program may be considered to represent a particular instance of the entire model ; instances of the categories from the model  are represented by objects from the classes under the management of the host.","To represent the collection of objects that have arisen in the course of a computation, Abigail provides a class host . The host  encapsulates the representations of persons and addresses that are under consideration in the computation. To serve the needs of the computation, the underlying collections are made available through a several member functions. Abigail determines this particular selection of member functions from many possibilities after an overall consideration of the entire computation, so it might not seem obvious at this point why these particular operations were provided.","In the host , Abigail provides a member function find address , which looks for a particular address given an entity. The find address  may fail, in which case it returns a special kind of object, a null, indicating that the particular address is absent. A member function add address  is provided which, given an entity and an instance of the address , associates the supplied entity with the supplied address instance. After an operation of the add address  with a particular entity and a particular address instance, subsequent operations of find address  provided with the particular entity will succeed, returning the particular address (unless the particular address has been dropped, as follows). A member function drop address  is provided, which will delete the provided instance of the address  from the internal store of the host . After the operation of the drop address  for a particular instance of the address , subsequent operations of the find address  for that particular address will fail (unless the particular address is added back with the add address ).","Abigail provides member functions to manipulate a collection of instances of the person  in the host . A member function find person  is supplied with an entity and returns an associated instance of the person  if any is found or null otherwise. A member function require person  checks for an instance of the person  associated with a supplied entity. If an associated person is found, it is returned. Otherwise, an instance of the person  is created, associated with the provided entity, and returned. So the require person  always returns an instance of person .","Abigail next considers the computational operations that will serve as the building blocks to carry out her computation. She identifies computational operations, which, since they will operate upon declarations, she calls services. All of the services share a common pattern of operation, called an interface in OOP. Each service provides a dispatch member function, which, in operation, is supplied with a declaration. Each service is associated with a particular relation. When a particular declaration is encountered, any services which are associated with its particular relation are notified by invoking their dispatch member function, supplying the particular declaration as part of the operation. From the outside, all the services look alike in that they share a common interface. Inside, they may have special data and arbitrary computations; all the particularities a service needs to carry out its duties are hidden behind the common interface but may come into play when the dispatch member function is operated.","The use of a common interface to wrap up diverse behavior is one of the most useful practices that OOP prescribes. To permit classes to share an interface, OOP languages provide a mechanism called inheritance, in which a so-called base class may provided an interface, from which other classes (called refinements or specializations) may inherit. Any refinement provides the shared interface, but the mechanisms used by the various refinements to provide the interface may differ widely. A client or user of the classes may invoke the shared interface without knowing any particularities of the refinement. This lets a collection of diverse specializations provide consistent behavior to a client, thus making the client's job easier through not having to be concerned with the particularities of the specializations.","Abigail settles on four services. She specifies an address factory service, which is responsible for creating an object of class address  and adding it to the host . She associates the address factory service with the \u201cis an address\u201d relation. She specifies an address collector service which is responsible for maintaining a small collection of addresses which are close to 44 Willow. She associates the address collector service to the \u201cis an address\u201d relation. Abigail specifies an associator service which is responsible for associating an address with a person. The associator service will be associated with the \u201chas a person\u201d relation. Finally, she specifies an assignor service which is responsible for assigning a phone number to a person. The assignor service will be associated with the \u201chas phone number\u201d relation. Abigail provides the four services she has specified as OOP classes.",{"@attributes":{"id":"p-0217","num":"0240"},"figref":"FIG. 3","b":["1020","1000","1080","1080","1085","1050","1080","1085","1050","1080","1080","1090","1080","1080"]},"Classes which refine the class service  will provide specialized versions of the dispatch  which will make use of any special data or computations the refined class may contain. One refinement of the class service  is a class factory . The factory  carries out the computational operations for the address factory service in a member function dispatch . Another refinement of the class service  is a class associator . The associator  carries out the computational operations for the associator service in a member function dispatch . A class assignor  refines the service . The assignor  carries out the computational operations of the assignor service in a member function dispatch .","A class collector  provides the collector service. The collector  is where most of the computation in this project gets done. The collector  refines the service . The collector  has a member count , which specifies how many nearby addresses it will track. The collector  also has a member heap , which is a handy device that programmers use to keep a collection of weighted elements in a form in which it's easy to find the element with the largest weight. In this project, Abigail will be using distance from 44 Willow instead of weight, but that's a minor detail; the heap  will make available the address which is furthest from  Willow from amongst all of its constituents. The collector  has a member function distance , which wraps up the computational resource that converts addresses to positions along with the estimation of distance from a particular address to the  Willow reference position. A member function dispatch  provides the interface which is shared by all the refinements of the service .","Each refinement of the service  provides a dispatch member function which will be operated when the particular service refinement is dispatched. Abigail provides each of these particular dispatch member functions. Please note that levels of nesting in these pseudocode listings are indicated using prefixed periods in lieu of the more typical use of curly brackets; this is a python-esque syntax although the disclosed embodiments are based on C++.",{"@attributes":{"id":"p-0221","num":"0244"},"figref":"FIG. 4","b":["1100","1095","1150","1025","1155","1085","1060"]},{"@attributes":{"id":"p-0222","num":"0245"},"figref":"FIG. 5","b":["1110","1105","1160","1025","1055","1165","1025","1170","1040","1075","1175","1035"]},{"@attributes":{"id":"p-0223","num":"0246"},"figref":"FIG. 6","b":["1120","1115","1180","1070","1185","1040","1190","1045"]},{"@attributes":{"id":"p-0224","num":"0247"},"figref":"FIG. 7","b":["1145","1125","1195","1025","1200","1205","1140","1210","1215","1135","1130","1220","1135","1225","1135","1230","1235","1135","1135","1240"]},"Now Abigail is almost finished! It remains only for her to write a main program to wrap up the whole computation, to provide the relevant elements of the phone number database as a series of declarations, and to run the program. She provides the main program first.",{"@attributes":{"id":"p-0226","num":"0249"},"figref":"FIG. 8","b":["1245","1250","1255","1050","1260","1265","1095","1255","1270","1275","1105","1255","1280","1285","1115","1255","1290","1295","1125","1255","1300","1305","1310","1090","1315","1320","1325","1330","1335","1340","1345"]},"Abigail now returns to the phone book database. She will provide a sequence of declarations which represents the relevant data for the computation.",{"@attributes":{"id":"p-0228","num":"0251"},"figref":"FIG. 9","b":"1350"},"Referring now to . Abigail processes each entry to produce three declarations, employing the relations \u201cis an address\u201d, \u201chas a person,\u201d and \u201chas a phone number\u201d. Abigail processes the entire database  to produce a collection of declarations, denoted a discourse .  depicts an excerpt from the discourse  corresponding to the excerpted phone book data of .","Referring now to . Finally, Abigail can operate her application .  illustrates the sequence of dispatches  that result from processing the excerpts from the discourse  of . The application  computes and prints person, address, and phone number for the dozen addresses nearest  Willow which were encountered.","\u00a71.3 Applications","The original motivation for these techniques was to provide tools to support research and development in knowledge engineering. To appreciate this context, first consider a definition of knowledge engineering. Knowledge is defined as anything underlying know-how. Know-how, in turn, is the capability for reliable, repeatable performance of useful work. Engineering is defined to be the art and science of adding value through transformation. So knowledge engineering is then the practice of transformations adding value to \u201cthings\u201d that underlie performance capabilities.","Of course, knowledge must be acknowledged to lie mostly between the ears of humans. However, the transformations we engineer mainly in software are constrained to operate upon artifacts of knowledge that have somehow found their way from human brains to symbolic representations, especially digital representations. Luckily such artifacts are widely available; moreover we can readily produce such artifacts as we need them, when we are equipped with appropriate tools.","The tools of knowledge engineering are thus the focus of this work. These are necessarily abstract but they are none the less useful for that. Indeed, with judicious applications of abstraction we may aspire to an ever-shrinking gap between knowledge embodied in human conversation and engineering operations on digital artifacts representative of that knowledge.","Consider some applications of knowledge engineering. Media production for print and web service was one historical basis for the research that led here. Another early application has been software engineering; the coupling of formal specification techniques to code generation is near to the heart of this enterprise. Production, analysis, and presentation of intellectual property assets, especially patents, has been an important focus of our efforts. We have been motivated by production and other computations bearing on knowledge artifacts of library science such as thesaurii, corpora, concordances, indicies, bibliographies, and catalogs. Computation and presentation of financial analytics is another application area that has contributed to the evolution of the tools presented here. Data mining, in which existing databases are processed in original ways to facilitate better understanding of business behavior, is another obvious application.","We contend that these diverse applications are unified as species of generalized asset management. Media assets include documents and audiovisual materials. Code and data underlying software engineering and web services are easily recognized as digital assets. Intellectual property assets of course include patents, but the underlying subject matter, the stuff of which the patents are a reflection, itself comprises knowledge assets. Library science artifacts too are built out of knowledge assets, including metadata and classification models. Financial analytics pertain of course to traditional financial assets; the complexity of these assets and the market environments in which they behave is a powerful prod to development of knowledge assets embodied as models of pricing and market behavior. The tools under consideration here will offer capabilities for transformations to extract value from diverse assets.","What are the mechanisms by which knowledge assets may be transformed to create value? Three particular categories of artifact are identified.\n\n","Knowledge engineering is firmly rooted in extant technology. Indeed the debts owed to antecedents are myriad. From artificial intelligence came the original terminology and early efforts such as semantic networks, logic programming, and expert systems. Epistemology may claim the longest pedigree; I have freely partaken from Aristotle's categories and the pragmatics of Peirce, James, and Dewey. Linguistics offers grammar, the lexicon, corpora, models of tense and aspect, and semantic theories. Already mentioned are the practices of constructing thesaurii (controlled vocabularies) and classifications from library science. Software engineering provides numerous building blocks; virtual machines and metalanguages are realized in C++, Perl, and more specialized tools like bison and flex. From computer science comes fundamental considerations in formal languages, algorithms, data structures, and string processing. The world-wide web offers protocols such as HTTP, metalanguages such XML, and languages such as HTML. The intellectual property bar provides theory and practice pertaining to classification and specification of knowledge assets. Underlying all these contributions is the mathematics and philosophy of logic, sets, and probability.","This theory of knowledge engineering grounds firmly in the pragmatic tradition. Dewey said it well: \u201cthe true object of knowledge lies in the consequences of directed action.\u201d Knowing is doing. We place utility above truth; truth is elusive but utility is perfectly tangible. Naming occupies pride of place in our theory; a name designates a category or a particular entity. A name thus is the primordial classification; one or more entities are distinguished from the blooming buzzing continuum of the universe. Entities, categories, and relations are the primitive elements in our computational epistemology. Entities are anything we deem worthy of naming, individually or in categories. Relations serve to implement associations, properties, and qualities of entities. Moreover, relations provide the crucial hook to computation. Entities are grounded by association with textual and other scalar data.","The central theoretical problem in knowledge engineering may be the coupling of computation to knowledge representation. Declarative approaches to knowledge representative have a long history. The use of a declaration comprising a subject entity, a relation, and an optional object entity as a general representational schema is familiar in its basic outlines in protocols such as conceptual graphs, RDF, and XTM. The analogy to sentence structure in natural English is compelling; the subject entity compares to the sentence subject, while the relation and optional object entity compare to the sentence predicate. However, as far as we can tell, the coupling of a declarative knowledge base to arbitrary computation remains unexamined. Declarative dispatch couples computation to declaration by permitting arbitrary computational services to receive notification of declarations comprising particular relations. A computational service attaches itself to a relation; when that relation is utilized in a declaration, the computational service receives a notification of the declaration. The service is free to undertake arbitrary computation, including provision of additional declarations. There are numerous refinements to declarative dispatch, including incorporation of textual data, a metalanguage providing for textual representation of a sequence of declarations, and meta relations to provide a pragmatic form of inference. The starting point for declarative dispatch is the coupling of a declaration, via its relation, to service notifications providing arbitrary computations.","\u00a72.1 Introduction","I will first cover some preliminary considerations that are applicable throughout the disclosure. I will then turn to a general description with various refinements. Next I will describe in detail a particular embodiment which has been provided in the C++ programming language. Then I will consider a modest example application to the presentation of patent and classification data. Finally I will consider some alternative embodiments.","Throughout this disclosure, certain elements from the prior art will be referred to repeatedly in the context of various embodiments. To reduce duplication, I will consider here common elements from the prior art which are in use in various places in the disclosed embodiments.","\u00a72.2 Collections","Collections of elements are used throughout the embodiments. In the art, collections of many varieties are available; the selection of a particular collection in an embodiment is the result of a trade-off between the ease of use, availability of implementation, time and space efficiency of use, and requirements for special properties of collections.","In all the collections that will be considered, the actual embodiment may contain the actual memory used by an element, or it may contain a pointer to the memory used. When the actual memory is contained, there is no overhead for indirection, and there is no ambiguity about responsibility for deletion of memory on completion of the computation. However, sharing elements amongst plural collections is more complicated. Also, it's difficult to have collections of heterogeneous elements even when the heterogeneous elements have a shared base class. Transfer of elements in and out of the collection typically requires duplication of the contained element, which may be expensive.","When pointers are used, there is some extra overhead to dereference the pointer to obtain the actual element. There is a question as to who actually deletes memory when computation is complete. Sharing of underlying elements is convenient and straightforward, however. Also, there's very little overhead associated with copying pointers. Collections may comprise heterogeneous elements, including specializations from a common base class or even generic pointers such as the void pointer from C and C++.","Unless otherwise indicated, the collections described in this disclosure will utilize pointers. Exceptions will be noted. In most cases, replacement of collections of pointers by in-place collections is feasible, with some extra work.","I will often make use of sequential collections. In the embodiments disclosed below, a principal characteristic of any sequential collection is that it may be incrementally augmented by adding individual elements, and the elements of the sequence can be iterated, typically in the order added, but also possibly in reverse order. I will have occasion to use stacks and queues. Stacks are sequential collections which provide push and pop operations, wherein the last element pushed is the element popped; this is widely known as last-in, first-out (LIFO) behavior in the art. Queues are sequential collections which also provide push and pop operations, however, the first element pushed is the element popped; this is first-in, first-out (FIFO) behavior. Stacks, queues, and sequences in general may be implemented with lists or arrays; the implementations are well known in the art and need not be considered further here.","I will often make use of set collections. A set comprises elements; elements comprised in a set are said to be members. The property of membership for a particular element in a particular set indicates whether the element is a member (i.e., is comprised) in the particular set. Besides the membership property, sets permit insertion, deletion and iteration of elements. Insertion of an element which is already a member doesn't change the set. Similarly, deletion of an element which is not a member doesn't change the set. A particular member may appear at most once in a particular set. For elements to be capable of collection into a set, the elements must admit of a comparison, which is indicative of the equivalence of two elements. A common usage is a set of pointers to elements, where equivalence is based on pointer comparison. Another common comparison is lexicographic string comparison where the set elements are unique strings or contain unique strings.","Sets are well known in the prior art; there are numerous implementations available. The most widely used implementations include balanced trees and hash tables. These are well known in the art and need not be considered here, except to note that a balanced tree maintains elements in sorted order, while a hash table maintains elements in essentially random order. Also, query, insertion, and deletion in a balanced tree have a cost proportional to the logarithm of the number of stored elements; a well-tuned hash table provides those operations in nearly constant time. A less well-known set implementation uses a skip list. In a skip list, elements are maintained in sorted order, and the node container for each element has an array of probabilistically determined size, varying from 1 to some maximum. The array contains pointers to successor nodes, the pointer at any position in the array points to the next successor node of size equal to that position. Like the balanced tree, query, insertion and deletion are logarithmic in the number of contained elements. The skip list implementation is rather easy, however, compared to the various balanced trees, the rebalancing of which in particular can be quite intricate.","The last major collection family I will utilize is a map or association. A map associates key elements with value elements. A key element has at most one associated value in a particular map. The keys of a map thus form a set; indeed, the shared properties of sets and maps admit of common implementations, which are well known in the art. Most map implementations are generalizations of sets, where the elements contained are key-value pairs, with the comparison operating on the key part of the pair. Thus we may have maps based on balanced trees, hash tables, and skip lists.","\u00a72.3 Text","There are numerous representations of textual data in use in the art. A variety of encodings exist to relate numerical representations in the computer to characters in human language. At least some of these will be familiar to those skilled in the art, including ASCII and EBCDIC, which represent English language characters, punctuation, etc., in seven or eight bits, ISO encodings which represent various non-English character sets in 8 or 16 bit encodings, specialized encodings for pictographic Asian languages, and, finally, the Unicode standard for encoding all the characters of human language. There are then various representations of a string of encoded characters including byte sequences for ASCII and other small character sets, sequences of fixed size integers variously mapped to 2, 3, or 4 bytes (using big-endian or little-endian representations), and hybrid representations such as UTF-8 which represent sequences of integers using special byte sequences, effectively a variably-sized encoding scheme that uses less bytes for more frequently occurring code points such as English characters and punctuation. Note that any valid ASCII byte sequence is a valid UTF-8 sequence.","Morever, a string of character data representing a word or phrase in a human language may itself be represented in various ways in a computer memory, including a null-terminated sequence of bytes as in the C language standard library, or as a sized array of fixed-size integers as in some implementations of the C++ standard library.","While the details of textual representation are complex and important, any of these representations will serve adequately for the purposes of this disclosure, the only requirement being consistency throughout. In the particular embodiment I will disclose, I will make use of the ASCII and Unicode character encodings, and the string representation is a customized encapsulation of the null-terminated sequence of bytes as in the C standard library, where the byte sequence represents UTF-8 encoding of ASCII and Unicode character strings. The customizations include reference counting to efficiently share strings, and an auxiliary length member to permit efficient concatenation. Throughout the disclosure I will simply refer to text or textual data, by which I mean any convenient or available representation of a sequence of characters from a human language, including but not limited to those representations mentioned above.","\u00a72.4 Sink","Finally, it's often convenient to abstract the concept of a sink, in which elements may be dropped for accumulation. Files, streams, strings and arrays may all provide sink-like behavior. For many purposes, there's no particular distinction between these providers, so I will lump them together as particular embodiments of the simple abstract sink, which is an receiver of elements (typically but not necessarily textual) with arbitrarily large capacity.","\u00a71 Introduction\n\n","\u00a72 Preliminaries\n\n","\u00a73 Outline of Detailed Disclosure","\u00a74 Declarative Dispatch\n\n","\u00a75 Particular Embodiment\n\n","\u00a74.1 Categories and Associations","Referring now to . Declarative dispatch is a model  for information processing that integrates a declarative representation of computational elements with the dispatch of arbitrary computational services operating upon the represented elements.  depicts the categories and associations from the model . A category entity  contains instances each of which represents an arbitrary element for which arbitrary computational services may be furnished. A category relation  contains instances each of which is representative of an arbitrary feature, quality, attribute, property, relationship, or operation pertaining to one or more instance of the entity . A category declaration  contains instances each of which joins a subject instance of the entity  with a relation instance of the relation , and, optionally, an object instance of the entity .","An association has-subject  has instances which associate a source instance of the declaration  with a target instance of the entity , characterizing the subject entity of the source declaration. Similarly, an association has-relation  has instances which associate a source instance of the declaration  with a target instance of the relation , characterizing the relation of the source declaration. An association has-object  has instances which associate a source instance of the declaration  with a target instance of the entity , characterizing the object entity of the source declaration. A particular declaration is thus characterized by a particular source entity, a particular relation, and, either a particular object entity or the absence of an object entity.","An instance of the declaration  emulates a simple sentence in natural English; the instance of the entity  associated to the declaration instance by the association has-subject  is analogous to the natural sentence subject. The instance of the relation  associated to the declaration by the association has-relation  joined with the optional entity  associated to the declaration by the association has-object  is analogous to the predicate of the natural English sentence. A declaration joins a subject entity to a predicate consisting of a relation and an optional object entity.","A category service  contains instances which provide arbitrary computational operations. A plural association has-service  joins an instance of the relation  to one or more instances of the service . The provision of computation in an instance of the service  is characterized by an association responsive-to-dispatch , which couples the service  plurally to the declaration . An instance of the association responsive-to-dispatch  corresponds to an invocation of computational service, in which an instance of the service  is dispatched an instance of the declaration .","\u00a74.2 Module","Referring now to . A module  represents the model . Classes in the module  correspond to the categories of the model . To the associations of the model  correspond members and member functions in the module .  depicts the module , which represents the model .","A class entity  represents the category entity . A class relation  represents the category relation . A member services  represents the association has-service . The plurality of the has-service  is reflected by the indication that the services  is a collection.","A class declaration  represents the category declaration . A member subject  represents the association has-subject . The typing of the subject  to the entity  reflects that the target of the association has-subject  is the category entity . A member relation  represents the association has-relation . The typing of the relation  to the relation  reflects that the target of the association has-relation  is the category entity . A member object  represents the association has-object . The typing of the object  to the entity  reflects that the target of the association has-object  is the category entity .","A class service  represents the category service . A member function dispatch  represents the association responsive-to-dispatch . The use of a member function to embody the responsive-to-dispatch  reflects the characteristic provision of computational service that corresponds to a service . The dispatch  takes an argument of declaration . The invocation of the dispatch  corresponds to an instance of the association responsive-to-dispatch . The service  source instance of the association corresponds to the implicit source instance of the service  specified in the member function invocation. The declaration  target instance of the association corresponds to the argument instance of the declaration  provided to the member function invocation.","\u00a74.3 Operation","Referring now to . The declarative part of the model  is expressed in the declaration , an instance of which joins a subject entity, a relation, and, optionally, an object entity. The dispatch part of the model  is expressed in the association responsive-to-dispatch  which represents the invocation of a computational operation in an instance of the service  in the context of an instance of the declaration . The linkage between declaration and dispatch passes through a declaration's relation; the relation may associate with a (possibly empty) collection of services, as expressed in the plural association has-service . In the full expression of declarative dispatch, for a specified declaration, every service associated with the specified declaration's relation is notified of the specified declaration.","In general, multiple instances of services are associated with a particular relation; each associated instance of service must be notified when a declaration incorporating the particular relation is dispatched. An operation declarative dispatch , responsive to a specified instance of the declaration , thus in general entails a plurality of instantiations of the responsive-to-dispatch .  illustrates the interacting relationships that characterize the operation of declarative dispatch . A particular instance of the relation  is associated to the specified declaration via the has-relation . The particular relation in turn is associated to zero or more instances of the service  via the has-service . To each particular service so associated to the particular relation is entailed a particular instance of the association responsive-to-dispatch , joining the particular service to the specified declaration.","The operation declarative dispatch  may be provided in various implementations. An implementation of the declaration  may provide declarative dispatch  in a member function. An implementation of the relation  may provide declarative dispatch  in a member function. An instance from a distinct category may provide declarative dispatch  in a member function. The declarative dispatch  could also be provided as a global function or as part of main program.","Referring now to . The class declaration  represents the category declaration . A member function dispatch , defined for the class declaration , represents the operation declarative dispatch . The implicit argument instance of the declaration  represents the instance of the declaration  to be dispatched.  illustrates the member function dispatch , realizing the operation declarative dispatch .","In the illustrated member function dispatch , a step  iterates over the service  instances which are contained in the member relation  of the implicit instance of the declaration . The contained service  instances are supplied in the relation's member services . A local service loop variable  is successively assigned a service  instance. In a loop step , the member function dispatch  is invoked on the service loop variable  with argument the implicit argument instance of the declaration  (denoted \u201cthis\u201d, following C++ convention).","\u00a74.4 Refinements","The method as described thus far is useful even in such a minimal configuration. However, the utility of the method may be enhanced by numerous refinements.","Referring now to . One useful refinement is the incorporation of a category cache  which maintains a record of extant instances of the declaration . An instance of a declaration  is extant if has been declared and not subsequently withdrawn. In this refinement, an instance of the declaration  is dispatched only if the instance is not extant in the cache .  depicts the interelation of the cache  with the declaration . An association has-extant  plurally associates an instance of the cache  with a collection of extant instances of the declaration .","An implementation of the cache  provides an efficient determination of whether a particular instance of the declaration  is extant. An implementation of the cache  may be centrally administered by an agent which receives instances of the declaration . Alternatively, an implementation of the cache  may be distributed amongst instances of the representations of the relation  and the entity .","Implementations of the cache  in various organizations also permit a variety of supplemental functions which complement the utility of the fundamental operation declarative dispatch , such as the provision of collections of extant instances of a representation of the declaration  where the instances satisfy particular criteria. Useful criteria for cache subsets include declarations for which the subject or object is a particular entity, declarations for which the relation is a particular relation, declarations for which the subject and relation match a particular entity and relation, and declarations for which the relation and object match a particular relation and entity. To support provision of these subsets of declarations, the cache may be effectively provided as one or more ordered sequences of declarations, where the ordering has the property of collecting related subsets in sequential order, thus permitting efficient provision of a particular subset.","Referring now to . Another useful refinement is obtained when the relation  is a specialization  of the entity .  illustrates the specialization  of an entity  to a relation . In this refinement a relation  has all the properties and characteristics of an entity , plus some additional properties and characteristics which are not necessarily present in an arbitrary entity . In the object-oriented programming language C++, such a relationship is often implemented using public inheritance. In any programmatic context in which an instance of the entity  may appear, an instance of the relation  is a valid substitute.","When the relation  specializes the entity , instances of the relation  may freely participate with instances of the declaration  in the associations has-subject  and has-object . This permits the introduction of meta relations, which are relations whose purpose is to capture characteristics of relations, and relationships between relations. Useful meta relations include such properties as commutivity and transitivity, as well as associations between relations such as complementarily and implication. Meta relations permit easy and natural provision of inferencing in a declarative dispatch context; services may be provided which, in response to received declarations, generate additional declarations by inference.","Referring now to . Another useful refinement is to permit the optional association of an instance from a category text  with an instance of an entity . In this refinement, an instance of the entity  may optionally participate in an association has-text , associating with an instance of text . This refinement may be further enhanced by provision of a category lexicon . The lexicon  provides an association has-entity  joining a supplied instance of text , and, optionally, one or more instances of the entity  which are related via the has-text  with the supplied instance of text . A further refinement is to require that at most one instance of the entity  be associated with any particular instance of text ; thus there is at most one unique entity associated with any supplied text.  depicts relationships between text , the entity , and the lexicon .","Another refinement is the capability for the withdrawal of a previously declared instance of the declaration . When a previously declared declaration is withdrawn, services associated with the declaration's declared relation may be notified of the withdrawal. Any instance of the cache  containing the withdrawn declaration must be updated.","A further refinement to a dispatcher which supports withdrawal of declarations is to augment the capabilities of the dispatcher to withdraw instances of the entity  and instances of the relation . If an entity is withdrawn, then all the declarations in which it participates must be withdrawn. The superseded declarations include those associated via the has-subject  and the has-object  with the withdrawn entity. When a relation is withdrawn, all declarations in which the removed relation participates as the has-relation  must be withdrawn.","Referring now to . A module  represents the module  augmented with the refinements previously noted.  depicts the module , incorporating refinements to the module . A class entity  provides a representation of the entity . The entity  provides a member text  which represents the association has-text . A class relation  provides a representation of the relation . The relation  specializes the entity  via public interitence. The relation  provides a member services . The member services  represents the association has-service . A class meta relation  specializes the relation . The meta relation  supports representation and computation with properties and associations on and between instances of the relation . The meta relation  and its specializations provide an inference mechanism, whereby a declaration comprising a particular relation may result in the dispatch of services themselves providing additional declarations comprising the particular relation or other relations.","A class meta property  specializes the meta relation , providing computational services for properties of relations. A class is-commutative  specializes the meta property . The meta property is-commutative  indicates the commutivity of a relation, permitting an inference of \u201cbRa\u201d to be drawn from a declaration of \u201caRb\u201d where the relation R is commutative. A class is-transitive  specializes the meta property . The meta property is-transitive  indicates the transivity of a relation, permitting an inference of \u201caRc\u201d to be drawn from the declarations of \u201caRb\u201d and \u201cbRc\u201d, where the relation R is transitive.","A class meta-association  specializes the meta relation , providing computational services for associations between relations. A class implies  specializes the meta-association . When a relation R implies a relation S, an inference \u201caSb\u201d may be drawn from a declaration \u201caRb\u201d. A class complements  specializes the meta-association . The meta association complements  permits an inference \u201cbSa\u201d to be drawn from a declaration \u201caRb\u201d, when S complements R.","A class declaration  provides a representation of the declaration . The declaration  provides a member subject , embodying the association has-subject . The declaration  provides a member relation  embodying the association has-relation . The declaration  provides a member object  embodying the association has-object .","A class service  provides a representation of the service . The service  provides a member function dispatch , embodying the association responsive-to-dispatch .","A class cache  represents the cache . The class cache  provides a member function extant  embodying the association has-extant . A class lexicon  represents the lexicon . The class lexicon  provides a member function resolve , embodying the association has-entity . The member function resolve  accepts an argument of text  and returns the entity  to which the provided text  is joined by the has-entity , if any.","A class dispatcher  provides a containing context for the operation of model . The dispatcher  provides a member function declare , embodying the operation declarative dispatch . The dispatcher  provides a member cache , an instance of the cache . The dispatcher  provides a member lexicon , an instance of the lexicon .","The dispatcher  provides a member function withdraw , which withdraws the supplied declaration  if it is extant. The dispatcher  provides a member function withdraw , which withdraws the supplied entity  and any instances of declaration  in which the supplied entity  participate as subject or object. The dispatcher  provides a member function withdraw , which withdraws the supplied relation  and any instances of declaration  in which the supplied relation  participate as relation. Since relation  is a specialization of entity , withdraw  performs withdraw  as well.",{"@attributes":{"id":"p-0289","num":"0559"},"figref":"FIG. 20","b":["1640","1465","1490","1640","1635","1640","1670","1585","1675","1645","1670","1615","1620","1670","1670","1645","1680","1685","1455","1670","1425","1595","1545","1690","1605","1695","1610","1690","1670","1670"]},"\u00a74.5 Discourse","Referring now to . Where textual data is associated with entities, a textual representation of a sequence of declarations is provided. I will denote a textual representation of a sequence of declarations as an instance of a category discourse . A discourse is processed by parsing the implicit sequence of declarations from their textual representation and sequentially dispatching the implicit declarations.  illustrates the processing of an instance of the discourse . Each association in the figure indicates an operation. An operation parse  upon one or more instances of the discourse  is carried out by an instance of a category parser . In consequence of the operation parse , a further operation evaluate  is invoked one or more times by the instance of the parser ; the operation evaluate  operates on a parsed representation of a discourse . The operation evaluate  produces explicit instances of the declaration , which are subject to the operation declarative dispatch . The actions of the dispatched services which result from the operation declarative dispatch  implicitly provide the semantics of the discourse; these semantics may vary widely according to the availability and selection of services. Thus a uniform syntax may nonetheless provide an arbitrarily wide range of behavior. The discourse  provides a meta language with generalized semantics based on the operation declarative dispatch . The meta language is specialized to a particular language with particular semantics according to the provision of services.","An representation of the discourse  is provided which specializes the tagged markup of XML to provide a textual representation. Alternatively, a native grammar  may be utilized which is naturalistic and takes advantage of the conceptual linkage to natural English sentence structure to provide a syntax which is easy and pleasant for humans to read and write, without sacrificing the computational convenience and power of a formal language. Provision of a native syntax for the representation of the discourse  further permits the capability for archival representation of a sequence of declarations in a human-readable textual form, possibly subject to additional conditions on the uniqueness and availability of textual data associated with entities.",{"@attributes":{"id":"p-0292","num":"0562"},"figref":"FIG. 22","b":["1720","1700","1710"]},"The parsing of a string of tokens according to a context-free grammar may be usefully conceived as the construction of a tree from a sequence of terminal symbols. Each leaf in the tree represents a terminal symbol. Each non-leaf node in the tree represents a nonterminal symbol. A node in combination with its children corresponds to a particular production; the parent node represents the left-hand side nonterminal symbol of the particular production, while the children (leaf or node) represent the right-hand side elements of the production. A context-free grammar has a special nonterminal denoted the start symbol which represents an entire tree; the root node of the tree corresponds to the start symbol.","In the grammar depicted in , a complete instance of the discourse  is represented by a nonterminal discourse , which is the start symbol for the grammar. The nonterminal discourse  participates in two productions. In the empty discourse production , the nonterminal discourse  is permitted to derive from an empty string. A discourse consisting of no expressions is thus a valid discourse. In the second discourse production , the right-hand side consists of a nonterminal discourse  followed by a nonterminal expression . This production expresses the notion that a valid discourse followed by an expression is a valid discourse.","The nonterminal expression  is provided by a production , in which the right hand side consists of a nonterminal subject , a nonterminal predicates , and a terminal period . The production  describes the general structure of an expression in the discourse ; an expression consists of a subject and one or more predicates.","In a production , the nonterminal subject  on the left-hand side is produced from a nonterminal entities  on the right-hand side. The nonterminal entities  in turn is produced in a pair of productions. In the production , the nonterminal entities  is produced from a terminal entity . The terminal entity  represents an instance of the entity . In the production , the nonterminal entities  is produced recursively from the nonterminal entities , followed by a terminal comma , followed by the terminal entity . Thus a collection of entities is expressed by a sequence of individual entity elements, separated by commas.","The nonterminal predicates  is produced by two productions. In a first predicates production , a nonterminal predicates  is produced from a single nonterminal predicate . In a second, recursive predicates production , a nonterminal predicates  is produced from a right-hand side consisting of the nonterminal predicates , followed by a terminal semicolon , followed by the nonterminal predicate . Thus a sequence of predicates consists of one or more individual predicate elements separated by semicolons.","The nonterminal predicate  is produced by a production , which has a right-hand side consisting of a terminal relation  followed by a nonterminal object . The terminal relation  represents an instance of the relation . The nonterminal object  appears as the left-hand side in a pair of productions. The first object production  has an empty right-hand side, which expresses the optionality of an object in a predicate. In the second object production , the object  is produced from a nonterminal entities .","Referring now to . The processing of a discourse by a parser  may be conceived to imply a structure in which instances of the entity  and the relation , represented in the terminal entity  and the terminal relation , respectively, are interrelated into intermediate aggregations corresponding to a category subject , a category object , a category predicate , and a category expression , each of which is represented in a corresponding nonterminal.  depicts a representation of the operation parse  operating on the discourse . Every association shown in this diagram is one of containment; however there are singular and plural containment relationships, as indicated by the single and double arrows. In every case, the arrow depicted points from container to contained. An instance of the discourse , represented in the grammar by the nonterminal discourse , contains optional plural instances of the expression . The expression  is represented in the grammar by a expression . A plural association has-expressions  joins the discourse  to the expression . A singleton association expression-has-subject  joins the expression  to the subject , represented by the nonterminal subject . A plural association has-predicate  joins the expression  to the predicate , represented by the nonterminal predicate . A singleton association predicate-has-relation  joins the predicate  to the relation , represented by the terminal relation . A singleton association predicate-has-object  joins the predicate  to the object , represented by the nonterminal object . A plural association object-has-entity  joins the object  to the entity , represented by the terminal entity . A plural association subject-has-entity  joins the subject  to the entity , represented by the terminal entity .","Referring now to . The operations and categories supporting the discourse  are represented in a module .  depicts the module , including classes that represent the elements of the discourse . A class parser  provides an represented of the parser . The parser  provides a member dispatcher , which is the target of the operation evaluate . The parser  provides a member function parse  which operates on text  representative of a discourse . The member function parse  represented the operation parse . The parser  provides a member function evaluate  which represents the operation evaluate .","A class discourse  provides a representation of the discourse . The discourse  provides a member expressions  which represents the plural association has-expressions . A class expression  provides a representation of the expression . The expression  provides a member subjects  which represents the association expression-has-subject . The expression  provides a member predicates  which represents the association has-predicate . A class predicate  provides a representation of the predicate . The predicate  provides a member relation  which represents the predicate-has-relation . The predicate  provides a member objects  which represents the predicate-has-object .",{"@attributes":{"id":"p-0302","num":"0572"},"figref":"FIG. 25","b":["1705","1700","1915","1900","1960","1915","1965","1915","1930","1960","1970","1930"]},"In a nested step , the collection of instances of the entity  contained in the subjects  of the expression loop variable  is iterated. A local subject loop variable  of class entity  is successively assigned the subjects  instances of the expression loop variable .","In a nested step , the collection of instances of the predicate  contained in the expression loop variable  are iterated. The instances of the predicate  contained in the expression  are provided by invocation of the member function predicates . A local predicate loop variable  is successively assigned the predicates  instances of the predicate . In a step , a local relation variable  of relation  is declared and initialized to the relation  provided by the relation  of the predicate loop variable .","In a nested step , the presence of the optional object  instance in the predicate loop variable  is determined by examination of the objects . In the absence of any object instances, in a nested step , a declaration  is constructed from the subject loop variable  and the relation variable . The newly constructed declaration is dispatched by invocation of the declare  on the parser member dispatcher . The declare  implements the operation declarative dispatch .","In the event the predicate's optional objects are non-empty, processing proceeds via an alternate step . In a nested step , the collection of instances of the entity  contained in the objects  of the predicate loop variable  is iterated. A local object loop variable , of class entity , is successively assigned the entity instances contained in the predicate's objects. In a nested step , a declaration  is assembled from the subject loop variable , the relation variable , and the object loop variable . The newly constructed declaration is dispatched by invocation of the declare  on the parser member dispatcher .","Note that the nesting order of the loops in the evaluate  is irrelevant to the out-come; the implementation could nest the subject, predicate and object loops arbitrarily (perhaps less conveniently). The crucial operation in the discourse evaluation is, mathematically speaking, a cross product of subject entities against predicates, where each predicate is a cross product of relations against object entities.","Note also that the class which hosts the discourse evaluation is fairly immaterial and the processing which is here indicated as three nested loops might be distributed among member functions in various classes. As stated above, the crucial semantics of the discourse evaluation is the cross product of subjects across predicates, where predicates are themselves the cross product of relations across object entities.","\u00a75.1 Introduction","I will next disclose a particular embodiment followed by a fully worked example application using the disclosed particular embodiment. The particular embodiment and the example application have been implemented in the C++ programming language. C++ is well-known in the art as an exemplary object-oriented programming language. C++ was chosen for the implementation of the particular embodiment for its high degree of expressivity, wide acceptance, and efficiency, as well as its easy integration with the formal language tools flex and bison, which are also utilized in the implementation. However, other languages, including traditional, non-object-oriented languages, could have been used; nothing in the particular embodiment requires features unique to C++. Other languages that might host an implementation include Perl, Python, Java, C, and C#.","The particular embodiment is disclosed in the form of a collection of skeleton classes, with detailed examination of certain member functions, using a formalism modeled on C++, but suppressing details that are inessential to a reader who is skilled in the art of object-oriented programming. The disclosure is intended to provide sufficient detail to permit straightforward implemementation in other languages by one skilled in the art.","The disclosure of the particular embodiment considers first core classes in the embodiment, including a class entity , a class declaration , a class service , a class relation , a class dispatcher , and a class monitor . Then I will turn to specification and processing of a formal textual language for declarative discourse. I will next consider specification and processing of an XML representation for declarative discourse. Finally I will consider meta-relations and inference in the particular embodiment.","\u00a75.2 Classes","\u00a75.2.1 Entity",{"@attributes":{"id":"p-0312","num":"0582"},"figref":"FIG. 26","b":["2035","2035","1370","2065","2055","2055","2070","2065","2070","2075","1505","2055"]},"An entity  instance may be constructed in two ways. In a first constructor , a dispatcher  and a serial number are provided as arguments. The supplied dispatcher and serial number are used to initialize the members dispatcher  and serial number , respectively. The member text  is initialized to empty.","In the second constructor , a dispatcher, a serial number and a text element are provided. The supplied dispatcher, serial number, and text are used to initialize the dispatcher  the serial number , and the text , respectively.","The constructors are provided for use only by the dispatcher ; there are factory member functions in the dispatcher for use by non-dispatcher agents.","The destructor  is virtual, as the class relation  is derived from the entity . There's nothing to do in the destructor implementation beyond the compiler defaults, however.","There are no member functions in this embodiment which reset the dispatcher , serial number  or text  members during the lifetime of an entity instance. Thus, after construction, the data comprised in an entity is invariant until destruction.","There is no copy constructor nor assignment operator. These operations are undefined for an entity instance. Where an entity instance must be passed or saved, a pointer to an entity is used.","A virtual member function downcast  is also provided. This member function returns an instance of the relation . In the entity implementation, a zero pointer is returned, to indicate the downcast was invalid. In the child class relation , this virtual member function is overridden, returning a pointer to the relation itself, thereby indicating a successful downcast.","\u00a75.2.2 Declaration",{"@attributes":{"id":"p-0320","num":"0590"},"figref":"FIG. 27","b":["2040","2040","1380","2100","2035","2105","2050","2110","2035","2115","2120","1465","2120","2055"]},"A copy constructor  and an assignment operator  perform a member by member copy. The default destructor is satisfactory. Declarations may be compared for identity in the obvious fashion using member by member equality. Declarations may be ordered using various lexicographic orderings as appropriate for the task at hand; this will be considered in more detail below.","\u00a75.2.3 Service",{"@attributes":{"id":"p-0322","num":"0592"},"figref":"FIG. 28","b":["2045","2045","1400","2045","2135","2050","2140","2140","2145","2140","2150","2040","2105","2140","2155","2140","2160","2160","2105","2140","2150"]},"\u00a75.2.4 Relation",{"@attributes":{"id":"p-0323","num":"0593"},"figref":"FIG. 29","b":["2050","2050","1375","2050","2165","2035","2170","2055","2080","2175","2055","1505","2085"]},"The relation  provides a specialized member function downcast  to override the default downcast . In the relation's specialization, the relation returns a (non-zero) pointer to itself, thereby indicating a successful downcast.","The relation  maintains a member responders , a collection of instances of service  which have been associated as responders to declarations; i.e., targets for dispatch. This collection is a sequence in this embodiment, thereby ensuring that responders are dispatched in the order added. A member function add responder  appends the supplied service argument to the end of the sequence. A member function drop responder  scans the sequence for its argument, zeroing its position in the sequence.","A member function dispatch  is called only by the relation's dispatcher ; the relation then notifies its responders  that the supplied declaration has been declared via their dispatch . In this scan, the relation must beware zero pointers where responders have been dropped.","A member function withdraw  is also called only by the relation's dispatcher ; relation then notifies its responders  that the supplied declaration has been withdrawn via their withdraw . In this scan, the relation must beware zero pointers where responders have been dropped.","\u00a75.2.5 Dispatcher",{"@attributes":{"id":"p-0328","num":"0598"},"figref":"FIG. 30","b":["2055","2055","1635","2055","2040","2045","1365","1490","1515"]},"The dispatcher  hosts a collection of instances of the entity  and a collection of instances of the relation . The hosted entities are maintained in a member entities , which is a sequence of instances of the entity , under the memory management of the dispatcher. Hosted relations are maintained in a member relations , which is a sequence of instances of the relation . Since a relation  is a specialization of an entity , any relation present in the relations  is also present in the entities . Thus there's no explicit memory management necessary for the relations in the relations .","The dispatcher  contains a member lexicon . The particular embodiment of the lexicon  is a refinement of the lexicon . The lexicon  provides a mapping from text  to instances of the entity ; this is an embodiment of the resolve . Given a particular text , an associated entity  may be obtained or identified as absent in an efficient manner.","The dispatcher  acts as a factory for the entity  and the relation . To request creation of a new, anonymous instance of the entity , a client may use a first member function new-entity , which returns a pointer to a newly created entity . The new entity is under the memory management of the dispatcher. Similarly, a client may request creation of a new entity associated with particular text  using a second member function new-entity , to which is supplied text . This member function fails, returning a zero pointer, if there's already an entity associated with the supplied text. Otherwise, a pointer to a newly allocated entity associated with the supplied text is returned. The entity memory is under the management of the dispatcher.","Clients may prefer to use a member function require , to which text  is supplied, in comparison to the second new-entity . The require  returns a pointer to an existing entity  associated with the specified text , if any; otherwise a new entity associated with the specified text is created, and a pointer to the new entity is returned. The returned entity is under memory management of the dispatcher. If a client wants to determine whether an entity  is associated with particular text , the member function enquire , to which is supplied text , will return a pointer to an existing entity  associated with the specified text, if any exists, or a zero pointer otherwise. Finally, a client may dispose of an unwanted instance of the entity  with a member function drop entity , to which the desired entity to withdraw is supplied. This is a refinement of the withdraw . The drop entity  is considered in more detail below.","To request creation of a new, anonymous relation , a client may use a first member function new relation , which returns a pointer to a newly created instance of the relation . The new relation, itself an entity, is under the memory management of the dispatcher. Similarly, a client may request creation of a new relation  associated with particular text  using a second member function new relation , to which text  is supplied. This member function fails, returning a zero pointer, if there's already an entity associated with the specified text. Otherwise, a pointer to a newly allocated relation  associated with the indicated text is returned. The relation memory is under the management of the dispatcher.","Clients may prefer to use a member function require-relation , to which is supplied text , in comparison to the second new relation . The require-relation  returns a pointer to an existing relation with specified associated text, if any. If there's an existing entity  (which is not itself a relation) associated with the specified text, a zero pointer is returned. Otherwise a new relation is created with specified associated text, and a pointer to the new relation is returned. The returned relation is under memory management of the dispatcher. If a client wants to determine whether a relation is associated with particular text, a member function enquire-relation , to which is supplied text , will return a pointer to an existing relation with specified associated text, if any exists, and a zero pointer otherwise. Finally, a client may dispose of an unwanted instance of the relation  with a member function drop-relation , to which is supplied the particular relation desired to be dropped. This member function simply delegates to the drop entity , which is sufficiently general to handle relations as well as entities.","The dispatcher  receives declarations for dispatch via a member function declare , to which the declaration  is supplied. This member function is considered in detail below. For convenience, a second member function declare  is provided which accepts the subject , relation , and optional object ; the second declare  builds a declaration  from its supplied arguments and then delegates to the first declare .","A client may determine whether a particular declaration has been previously received. The member function is-declared , returning bool, to which a declaration  is supplied, returns nonzero if the supplied declaration has been declared, and zero otherwise. A client may withdraw a particular declaration with the use of a member function withdraw , to which a declaration  is supplied. Notification of the withdrawal (if the supplied declaration had been previously declared and not already withdrawn) is dispatched to associated services via the withdraw . A withdrawn declaration is not considered to have been previously declared. The implementation of the declare and withdraw member functions will be considered in more detail below.","The collection of instances of the declaration  in a dispatcher  at a particular time which have been declared and not subsequently withdrawn is denoted the extant declarations. The dispatcher  offers clients access to extant declarations. A client may request iteration of extant declarations using a member function declarations .","The dispatcher offers clients access to subsets of extant declarations. These subsets are presented in the form of a segment interator, which is considered in more detail below. A client may request extant instances of the declaration  which comprise a particular subject  with the member function subject-declarations , for which the client provides the desired subject instance of the entity . A client may request extant instances of the declaration  which comprise a particular subject  and a particular relation  with the member function subject-relation-declarations , for which the client provides the desired subject instance of the entity  and the desired instance of the relation . Declarations which comprise a particular relation  may be requested with the member function relation-declarations , for which the client provides the desired instance of the relation . The declarations which comprise a particular relation  and a particular object  may be requested with the member function relation-object-declarations , for which the client provides the desired instance of the relation  and the desired object instance of the entity . The object entity may be omitted, in which case only declarations which lack an object entity will be provided. Finally, declarations which comprise a particular object  may be requested using the member function object-declarations , for which the client provides the desired object instance of the entity .","The dispatcher  supports monitor services which permit notification on creation and destruction of entities and relations, and declaration and withdrawal of declarations. The class monitor  is considered in more detail below. The dispatcher  permits attachment and detachment of instance of the monitor  via the member function add-monitor , and the member function drop-monitor , for both of which an instance of the monitor  must be supplied.","The dispatcher  provides a virtual destructor . The virtual destructor acknowledges that the dispatcher commonly serves as a base class in applications. The destructor deletes the hosted entity instances collected in the entities .",{"@attributes":{"id":"p-0341","num":"0611"},"figref":"FIG. 31","b":["2055","2340","2345","2055","2350","2300","2305","2310","2315","2320","2355","2360","2365"]},"The dispatcher maintains a sequence of isntances of the monitor  in the member monitors . Declarations which have been declared but not yet dispatched are queued in the member pending-declarations . The use of a queue ensures that declarations are dispatched in the order received; otherwise, metarelation declarations are processed in recursive, depth-first order, which may be less desirable. Similarly, declarations which have been withdrawn, but whose withdrawal has not yet been dispatched, are queued in the member pending-withdrawals .","The dispatcher  provides centralized management of an embodiment of the cache  through its skip list members subject-declarations , relation-declarations , and object-declarations . Since the management of the embodiment of the cache  is provided in the dispatcher , the dispatch  of the declaration  delegates dispatch processing to the dispatcher , making use of the dispatcher's declare .",{"@attributes":{"id":"p-0344","num":"0614"},"figref":"FIG. 32","b":["2120","2040","2040","2050","2105","2385","2050","2035","2065","2390","2275","2040"]},{"@attributes":{"id":"p-0345","num":"0615"},"figref":"FIG. 33","b":["2275","2055","2040","2395","2375","2400","2405","2410","2415"]},"In a step , the queue's front declaration is inserted into the subject-declarations . If the insertion succeeds, then it's a declaration that is not extant. In that case, in a step , the dispatcher inserts the front declaration into the relation-declarations , and, in a step , inserts the front declaration into the object-declarations . In a step , notifications are dispatched to services associated with the front declaration's relation; the relation  processes the individual dispatches in the dispatch . Then, any instance of the monitor  in the monitors  are scanned in a step , and each monitor is notified of the new declaration in a step . Note that the monitors and especially the services may declare additional declarations; these will accumulate on the pending_declarations queue to be processing by the containing loop step . After the dispatch, in a step , the now fully processed front declaration is popped and control passes back to the top of the loop step .","New instances of the entity  and the relation  may come about directly with the invocation of the new-entity , the new-entity , the new relation , and the new relation . New instances may also come about indirectly as a result of the invocation of the require  and the require-relation . There are certain processing steps which are common to all of these when a new entity or relation is created; these are gathered into the private member functions install-entity  and install-relation .",{"@attributes":{"id":"p-0348","num":"0618"},"figref":"FIG. 34","b":["2340","2055","2035","2035","2220","2455","2210","2460","2465","2370","2470","2475","2050","2345","2480"]},{"@attributes":{"id":"p-0349","num":"0619"},"figref":"FIG. 35","b":["2345","2055","2050","2485","2340","2215","2490","2370","2495","2500","2505"]},{"@attributes":{"id":"p-0350","num":"0620"},"figref":"FIG. 36","b":["2245","2055","2035","2510","2515","2095","2180","2520","2310","2525","2290","2530","2215"]},"After the relation, if any, has been disposed, declarations featuring the supplied entity as subject and object are withdrawn. Declarations featuring the provided entity as subject are scanned in a step , using a segment iterator provided by the subject_declarations member function subject-declarations . Each scanned subject declaration is withdrawn in a step  using the withdraw member function withdraw . Declarations featuring the provided entity as object are scanned in a step , using a segment iterator provided by the object_declarations member function object-declarations . Each scanned object declaration is withdrawn in a step  using the withdraw member function withdraw .","The provided entity is checked in a step  for nonempty associated text text . If there's associated text, then the associated text is dropped in a step  from the dispatcher's lexicon lexicon . The provided entity is dropped in a step  from the entities member entities . Finally, the provided entity is deleted in a step .","\u00a75.2.6 Skip List","The class dispatcher  provides access to individual and plural received instances of the declaration  in a variety of settings. To avoid dispatch on subsequent declarations requires efficient search to determine if a particular declaration is present. In various places, we require the collections of declarations which utilize a particular subject, relation, or object. We also require collections of declarations which utilize a particular subject, relation pair, as well as collections of declarations which utilize a particular relation, object pair.","In this embodiment, all these requirements are met in time logarithmic in the number of declarations. Three skip list members are maintained in a dispatcher : the subject-declarations , the relation-declarations , and the object-declarations . These maintain three copies of the same collection, but in different orders.","The order in the subject-declarations  is primary in the declaration's subject , secondary in the relation , and tertiary in the object . This ensures that all declarations with a common subject are grouped together, and, within a segment of declarations with a common subject, all declarations sharing a particular subject and a particular relation are grouped together.","Similarly, the relation-declarations  uses an ordering which is primary in the relation , secondary in the subject , and tertiary the object . The ordering of the latter pair is arbitrary (ie, secondary in object and tertiary in subject would also work) but must be consistent to support locating particular declarations.","The object-declarations  uses an ordering which is primary in the object , secondary in the relation , and tertiary in the subject .","To iterate a segment of common subject declarations or common subject, relation declarations, it's sufficient to find the first declaration satisfying the requirement, if any, then simply traverse the sequence until a declaration that doesn't match the requirement is found. In this embodiment, a segment interator accepts a skip list, a comparator, and a template declaration. The skip list efficiently determines the position of the first declaration matching the template, if any; the iterator is non-empty as long as there's another element matching the template. The template may specify any or all declaration components, including the subject , the relation , or the object . The comparator may consider any or all declaration components. However the comparator must be consistent with the skip list ordering.","\u00a75.2.7 Monitor",{"@attributes":{"id":"p-0359","num":"0629"},"figref":"FIG. 37","b":["2060","2060","2055","2060"]},"A monitor  provides virtual member functions which are intended to be invoked only by a dispatcher . These member functions correspond to the significant changes of state in a dispatcher. The member functions comprise a member function add-entity , to be invoked on any addition of an entity  to a dispatcher; a member function drop-entity , to be invoked when an entity  is dropped by a dispatcher; a member function add-relation , to be invoked when a relation  is added by a dispatcher; a member function drop-relation , to be invoked when a relation  is dropped by a dispatcher; a member function declare , whenever a non-extant declaration  is declared; and a member function withdraw , whenever an extant declaration  is withdrawn.","These member functions are all virtual; by default they do nothing. Derived classes may override these to obtain behavior as desired. There's also a virtual destructor , as appropriate for a class with virtual member functions.","An instance of the monitor  is attached and detached from a dispatcher  using the dispatcher  member functions add-monitor  and drop-monitor .","The particular embodiment includes a logging monitor and an archiving monitor. The logging monitor writes a formatted message for a human reader for all the significant events. The archiving monitor writes a formatted textual representation (i.e., a discourse ) comprising all the declarations dispatched.","\u00a75.3 Parser","\u00a75.3.1 Introduction","The dispatcher  is an engine for dispatching computation in response to a sequence of declarations, but it doesn't have any method of receiving declarations except through its C++ application programming interface (API). A user interface for provision of declarations is highly desirable, as it widens the scope of clients beyond C++ programs. One traditional and effective user interface is a textual representation that may be prepared by a human or generated by a program. Such a representation includes entities, relations, and declarations in a textual form, denoted a category discourse , which may be processed by a class parser . The parser  then operates on a dispatcher  via the dispatcher's C++ API. In turn, the dispatcher  invokes computations through dispatched services in consequence of declarations received. A discourse  has already been introduced, providing a textual representation of entities, relations, and declarations. In this particular embodiment, the discourse  is itself refined and extended to the particular discourse .",{"@attributes":{"id":"p-0365","num":"0635"},"figref":"FIG. 38","b":["2610","2610","2620","2615","2625","2040","2630","2055","2635"]},"A discourse  includes textual representations of the entity , the relation , and the declaration . Entities and relations are represented either by associated text , or anonymously using a scoping mechanism. Declarations use a subject-predicate formalism which is intended to be suggestive of naturally written English. A discourse  in this embodiment consists of a sequence of expressions. An expression comprises one or more entities, separated by commas, and, optionally, one or more predicates, separated by semicolons. An expression is terminated by a period. An entity may consist of text, text prefixed by a special token to indicate a relation, or a scope. A scope is delimited by a matched pair of brackets. Inside a scope, one or more predicates separated by semicolons may be optionally prefixed to provide a textual association and, optionally, indication of a relation. Scopes permit construction of anonymous entities; i.e., entities which do not have associated text.","Turning to predicates, a predicate comprises a relation and, optionally, one or more entities. The optional entities, if any, are objects of the predicate. Turning back to the top-level expression, comprising entities and optional predicates, the semantics of the parser consists of instantiation of the comprised entities, including those comprised in the optional predicates, if any, followed by declarations by all the implied combinations of subject, relation, and object.","\u00a75.3.2 Grammar","Referring now to . A grammar  defines a language permitting the textual representation of a discourse .  illustrates the grammar . The grammar  comprises productions, each of which has a left-hand side consisting of a nonterminal symbol and a right-hand side comprising zero or more terminal and nonterminal symbols. A left-pointing arrow separates the left-hand side from the right-hand side. The terminal symbols are generated from a stream of text using a lexical analyzer ; the lexical analyzer  will be considered below. The context-free grammar formalism is familiar to those skilled in the art; the use of such tools as bison and yacc to process such grammars is long established and well known.","In the present embodiment, the grammar  has for a start symbol the nonterminal discourse . Two productions derive this nonterminal. In a first production discourse , the discourse  derives from an empty string. In a second production discourse , the discourse  is recursively derived from a discourse  followed by a nonterminal expression . Thus, the grammar  accepts a language comprising zero or more expressions.","Turning to derivation of the expression , there is a production expression , in which a nonterminal entities  followed by a nonterminal optional predicates , followed by a terminal period  is reduced to the expression .","The entities  represents one or more entities, separated by commas. A first production entities  derives an entities  from a singleton nonterminal entity . To derive a comma-delimited sequence of entity elements, a second production entities  provides a recursive production from an entities  followed by a terminal comma , followed by an entity .","The entity  has several derivations, reflecting that an entity generalizes a relation, and also that an entity may have associated text, or be anonymous. In the first production entity , an entity  derives directly from a text . In the second production entity , a relation, represented by a terminal tilde  prefix on a text , is generalized to an entity. In a third production entity , an entity  derives from a nonterminal scope .","The scope construct permits anonymous entities, as well as nesting of declarations. A nested declaration allows predicates to be assigned directly to an entity that is participating as subject, relation, or object in a containing context. Derivations of the scope  comprise productions from an anonymous entity, from a named entity, and from a named relation. In the first production scope  an anonymous scope  is derived from a terminal open , a nonterminal predicates , and a terminal close  in sequence. The second production scope-  derives a named entity scope from an open , a text , a terminal colon , a predicates , and a close  in sequence. The third production scope-  derives a named relation scope from an open , a tilde , a text , a colon , a predicates , and a close  in sequence.","Predicates are optional in an expression . The optional predicates  is derived from an empty string in the first production optional predicates . In the second production optional-predicates , the optional predicates  is derived from a predicates .","Predicates consist of one or more predicate elements, separated by semicolons. The predicates nonterminal predicates  is derived in a pair of productions. In the first production predicates , a predicates  is derived from a single nonterminal predicate . In the second production predicates , a predicates  is recursively derived from a predicates , followed by a terminal semicolon , followed by a predicate .","A predicate  is derived from a relation and optional objects. There are two derivations, reflecting that it's permissible but not necessary to prefix text representing a relation with a tilde . A predicate  derives in the first production predicate  from a text  followed by a nonterminal optional entities . Alternatively, a predicate  is derived in the second production predicate  from a tilde  followed a text  followed by an optional entities .","Entities are optional in a predicate; hence the optional entities  may be derived from nothing in the first production optional entities . Otherwise, where entities are present, the optional entities  derives from an entities  in the second production optional-entities .","\u00a75.3.3 Lexical Analyzer","The grammar  deals in relatively abstract terminal and nonterminal tokens; however the actual input is a sequence of characters, possibly spread over multiple files. The task of assembling a stream of terminal tokens from a sequence of characters in this embodiment falls to the lexical analyzer . The lexical analyzer  is implemented as a lexical analyzer specification to be processed by the flex generator, which reads a specially formatted specification of a lexical analyzer and generates a lexical analyzer which may be integrated with a parser and other code.","In this embodiment, the lexical analyzer  is capable of processing file inclusion, permitting a single input stream to be constructed from multiple files. To provide an implementation supporting arbitrary levels of nesting, a stack is used, where each level of the stack represents the lexical state in a nested included file. The details of this processing are relatively straightforward and will not present any difficulty to one skilled in the art of formal language processing.",{"@attributes":{"id":"p-0380","num":"0650"},"figref":"FIG. 40","b":["2645","2645","2830","2715"]},"A single quote character in the lexer state initial  brings the lexer into the lexer state quote , where all characters are accumulated into a terminal text , permitting non-ASCII characters such as UTF-8 byte sequences. The only special characters in the quote state are the single quote, which concludes the text terminal and returns the lexer to the initial state, and the escape character, a backslash, in this embodiment, which permits incorporation of a single quote into the quoted text.","In the lexer state include , which is entered from the initial state on recognition of a special ASCII sequence beginning a line, a filename is extracted and opened, a new lexer frame instantiated, and the lexer is returned to the lexer state initial .","In the lexer state initial , there are several string-matching elements which provide lexical tokens (parser terminals in the grammar ) and provide other functions in the processing of a text stream. The text stream may contain comments intended for human readers or other agents which are distinct from the dispatcher . These comments are recognized by the matcher comment ; comments in this embodiment consist of all text from a hash character (Unicode 0x0023) to the end of a line of text.","The initial state comprises an matcher include  which matches an at-character (Unicode 0x0040) at the start of a line, followed by the string \u201cinclude\u201d. In consequence of this match, the lexer changes to the lexer state include , as described above.","In the lexer state initial , white space consisting of space and tab characters is recognized by a matcher white-space . A matcher newline  triggers an increment to a line counter  which is used for formulation of error messages and other status indications in processing the prepared text. All white space in the lexer state initial  is consumed by the lexer and does not generate tokens that are used by the grammar . This permits providers of the text stream to make use of whitespace to improve the readability of the prepared text.","An matcher alphanumeric-text  is provided in the lexer state initial . In this embodiment, alphanumeric text comprises ASCII alphabetic and numeric characters (Unicode 0x0041 through 0x007a and 0x0030 through 0x0039), plus the underscore, hyphen and percent characters (Unicode 0x005f, 0x0020, and 0x0025, respectively). This permits a wide range of text to be recognized, including but not limited to traditional programming language identifiers, and numeric values. With the use of URI escape codes as per RFC 1738, arbitrary ASCII text, including otherwise reserved punctuation, may be encoded as alphanumeric text. The alphanumeric alphanumeric-text  returns a terminal text , the representation of which incorporates the matched text.","A variety of simple recognizers in the lexer state initial  serve to identify single-character strings which serve as punctuation, providing structural information in the text stream. These recognizers include a matcher tilde  for the tilde character (Unicode 0x007E) which serves to identify relations in an entity position. The tilde tilde  returns a terminal tilde .","There's a matcher colon  for the colon character (Unicode 0x003A) which delimits a textual association for an otherwise anonymous entity. The colon  returns a terminal colon .","The semicolon character (Unicode 0x0038) is matched by the matcher semicolon , returning a terminal semicolon . Semicolons separate multiple predicates.","The matcher comma  matches a comma character (Unicode 0x002C), returning a terminal comma . Commas separate multiple entities in a subject or object context.","The matcher period  matches a period character (Unicode 0x002E), returning a terminal period . Periods conclude an expression indicating one or more subjects with optional predicates.","The matcher open  matches an opening brace (Unicode 0x007B), returning an terminal open . The open brace indicates the beginning of a nested scope in which an anonymous or textual entity may be created and participate in declarations.","The matcher close  matches an closing brace (Unicode 0x007D), returning an terminal close . The close brace indicates the end of a nested scope in which an anonymous or textual entity may be created and participate in declarations.","A matcher initial-quote  matches a single quote (Unicode 0x0027). The initial quote indicates the beginning of a segment of quoted text. This causes a change of lexer state to the lexer state quote .","Any other character will trigger a matcher default  matches any character unmatched by any preceding matches. In the lexer state initial , any unrecognized character is erroneous (in contrast to the lexer state quote , where unrecognized characters are accumulated as text). Unrecognized characters in the state initial  include remaining punctuation, control characters, non-ASCII characters, etc. In future versions, some of these unused characters may be utilized to provide additional behavior in discourse processing.","The matcher end-of-file  matches the special lexical state at the end of an input file. The lexer must pop its member stack  of included files and perform various housekeeping. If the stack  is empty, the lexer returns zero, indicating to the parser  that all the input is exhausted.","In the lexer state quote , any UTF-8 encoded Unicode text is accepted as textual data for association with an entity. The end of such text is signified by a single quote, Unicode 0x0027, which causes the return of a terminal text  with the quote-enclosed text associated. The single quote in the lexer quote state is matched by the matcher quote-initial . To permit the quoted text to include the single quote character, there are additional recognizers for escaped quotes and escaped escapes. The escaped quote in this embodiment is a backslash (Unicode 0x005C) followed by the single quote. This sequence accumulates a single quote character into the quote-enclosed text. The matcher escaped-quote  is responsible for processing the escape-quote sequence. An escape character may also be embedded in the text stream by doubling the escape character; this processing is performed by the matcher escape-escape . The newline character has a special recognizer in the lexer quote state; this matcher newline  accumulates the newline into the enclosed text stream and maintains the lexer's internal line counter . Any character seen in the lexer quote state which is not matched by one of the preceding recognizers is simply accumulated into the enclosed text. This default processing is performed by the matcher quote-anything .","In the lexer state include , processing is very simple. Whitespace is skipped by the matcher whitespace . Then, non-whitespace text is recognized by the matcher non-whitespace . The text so recognized is treated as a filename, and various housekeeping related to the stack  is performed. After this processing is successfully completed, the lexer is returned to the lexer state initial .","\u00a75.3.4 Parse Elements","In the preceding sections, the grammar  and the lexical analyzer  have been examined closely. I turn now to the processing steps associated with the parser . These steps are under the control of the grammar . Terminal tokens in the grammar are provided by the lexical analyzer , along with associated parse elements which are representative of the tokens. As grammar productions are invoked by the parser, new, nonterminal tokens and associated parse elements are generated by the associated processing steps. The parse elements and associated processing steps are considered in this section.","Referring now to . Each type of parse element is represented by a C++ class. These classes are related by inheritance. A base class parse-element , provides services used by all the parse elements, as well specifying a generic interface shared by all parse elements, for use by the parser.  illustrates the specializations of the parse-element . The arrows in the diagram point from derived class to base class. The root of the diagram is the parse-element ","The class parse-element  is specialized to a class parse-entity , which encapsulates an entity. The class parse-entity  itself is specialized to a class parse-text , whereby an entity is associated with text. The class parse-entity  also is specialized to a class parse-relation , which encapsulates a relation, itself a specialization of an entity. The class parse-entity  also is specialized to a class parse-scope , in which an anonymous, nested entity may be provided.","The class parse-element  is specialized to a class parse-token , which encapsulates text accumulated by the lexical analyzer . The class parse-element  is specialized to a class parse-entities , which encapsulates one or more entities. The class parse-element  is specialized to a class parse-predicate  and a class parse-predicates  which respectively encapsulate a predicate and one or more predicates. Another specialization of the class parse-element  is the class parse-expression , which encapsulates a parse expression included one or more subject entities and optional predicates.",{"@attributes":{"id":"p-0403","num":"0673"},"figref":"FIG. 42","b":["2965","3015","2965","3020","2055","3020","2055","3025"]},{"@attributes":{"id":"p-0404","num":"0674"},"figref":"FIG. 43","b":["2990","2965","2990","3030","2990","3035","2645","3040","1505","2645","2990","3020","2965"]},{"@attributes":{"id":"p-0405","num":"0675"},"figref":"FIG. 44","b":["2970","2965","2970","3045","2035","3050","3020","3055","3060"]},{"@attributes":{"id":"p-0406","num":"0676"},"figref":"FIG. 45","b":["2975","2965","2975","2970","3065","3070","2990","2645","3075","1505","3070","3080","2235","3075"]},{"@attributes":{"id":"p-0407","num":"0677"},"figref":"FIG. 46","b":["2980","2970","2980","2970","3085","3090","2990","2645","3095","3090","3100","2050","3105","3105","2260","2055","3095","2035","2260","3105"]},{"@attributes":{"id":"p-0408","num":"0678"},"figref":"FIG. 47","b":["2985","2970","2985","2970","3110","2985","3115","2970","3005","3120","2970","3125","3005","3130"]},{"@attributes":{"id":"p-0409","num":"0679"},"figref":"FIG. 48","b":["2995","2965","2995","2970","2995","2965","3135","3140","2970","3145","2970","3150","2970","3145","3150","3020","3155","2970","3145","3155","3155"]},{"@attributes":{"id":"p-0410","num":"0680"},"figref":"FIG. 49","b":["3000","2965","3000","2965","3160","3165","2980","2995","3170","3175","3180","3170","3175","3180"]},{"@attributes":{"id":"p-0411","num":"0681"},"figref":["FIG. 50","FIG. 51"],"b":["3005","2965","3005","3000","3005","2965","3185","3190","3000","3195","3000","3200","3000","3195","3200","3020","3205","3195","3205","3205","3010","2970","3010","2970","3210","3010","3215","2995","3005","3220","3225"]},"Referring now to . A member function instantiate  This member function specializes the member function instantiate  from the base class parse-element . Also, this member function is a particular embodiment of the member function evaluate  from the parser .  illustrates the member function instantiate  from the class parse-expression . The member function is supplied with a dispatcher  on invocation. After instantiation of the constituent subjects and predicates, if any, all the implicit declarations are made. In particular, the member subjects  is instantiated in a step  using the member function instantiate . Should the subjects' instantiation fail, zero is returned in a step , indicating the failure of the instantiate .","The parse expression's member predicates , if non-zero, is next instantiated in a step . If this instantiation is unsuccessful, a zero is returned in a step , indicating the failure of the instantiate .","Otherwise, if the member predicates  is nonzero in a step , the member function loops in a step  over each instance of the parse-entity  in the subject's sequence member parse-entities . A subject entity  is obtained in a step  from the member entity  of the loop iterator. After the subject entity is obtained, the member function loops in a step  over each instance of the parse-predicate  contained in the member predicates . An instance of the parse-relation  is obtained in a step  from the parse-predicate ; in turn a relation  is obtained in a step  from the parse-relation .","Then, if the sequence member objects  of the parse-predicate  is nonempty, in a step  the member function loops in a step  over the individual instances of the parse-entity  contained in the sequence member objects . An object entity  is obtained in a step  from the parse entity loop element; finally a declaration  can be created in a step  with the subject entity providing the subject , and the obtained relation and obtained object providing the relation  and the object , respectively. Then the declaration  is dispatched in a step , using the declaration's member function dispatch .","Otherwise, in case the sequence member objects  of the parse-predicate  is empty, in a step , a declaration  is created in a step  with the subject entity providing the subject  and the obtained relation providing the relation . Then the declaration  is dispatched in a step , using the declaration's member function dispatch .","At the conclusion of the loop step , the member function returns non-zero in a step , indicating success of the instantiation.",{"@attributes":{"id":"p-0418","num":"0688"},"figref":"FIG. 53","b":["3130","2985","3230","3010","2985","3010"]},"In the member function instantiate  of the class parse-scope , the member function is supplied with a dispatcher  on invocation. After instantiation of the constituent subject and predicates, all the implicit declarations are made. In particular, the presence of the subject  is checked in a step . If there's a subject , it's instantiated in a step  using the parse entity's member function entity . Should the subject instantiation fail, zero is returned in a step , indicating the failure of the instantiate . Otherwise, on a successful subject instantiation, the subject's entity  is taken in a step  as the parse scope's member entity .","If the subject  is missing, in a step  the supplied dispatcher  is invoked to create a new entity, using the dispatcher's member function new-entity . The newly created entity entity  is taken in a step  as the parse scope's member entity .","The parse scope's member predicates  is next instantiated in a step . If this instantiation is unsuccessful, a zero is returned in a step , indicating failure of the parse scope's instantiation. Otherwise, the member function loops in a step  over each instance of the parse-predicate  contained in the member parse-predicates . A parse-relation  is obtained in a step  from the loop variable of class parse-predicate ; in turn a relation  is obtained in a step  from the parse-relation .","Then, if the loop variable parse predicate's sequence member objects  is non-empty in a step , the member function loops in a step  over the individual instances of the parse-entity  contained in the sequence member objects . An object entity  is obtained in a step  from the loop variable of class parse-entity ; finally a declaration  can be created in a step  with the subject entity providing the subject  and the obtained relation and obtained object providing the relation  and the object , respectively. Then the declaration is dispatched in a step .","Otherwise, in case the sequence member objects  is empty, in a step  a declaration  is created in a step  with the subject entity providing the subject  and the obtained relation providing the relation . Then the declaration is dispatched in a step .","At the conclusion of the loop step  over the constituent predicates, the member function returns non-zero in a step , indicating success of the instantiation.","\u00a75.3.5 Parse Behavior","Referring now to . Now that I've considered the grammar , the lexical analyzer , and the parse-element  and its specializations, I can describe parser  behavior in detail. First note that each terminal in the grammar  is associated with a parse-token , itself a parse-element . Next observe that each nonterminal in the grammar  is associated with a parse-element .  summarizes the associations linking the specializations of the parse-element  to the nonterminals of the grammar .","Now I will revisit the grammar , and describe the processing associated with each production in the grammar.","In the first discourse  of a nonterminal discourse , the right-hand-side is empty. The associated parse element for this derivation, which produces the grammar's start symbol, is a dispatcher , the master element to which the whole parsing process is directed.","In the second discourse  of a nonterminal discourse , the right-hand-side consists of a nonterminal discourse , associated with a dispatcher , and an nonterminal expression , associated with a parse-expression . In this derivation, the parse-expression  is instantiated in the context of the dispatcher ; i.e., the parse expression's member function instantiate  is invoked with the dispatcher  as argument. This may result in declarations, creation of entities, and creation of relations in the dispatcher . The dispatcher  is then associated with the left-hand-side nonterminal discourse .","In the expression  of an nonterminal expression , the right-hand-side consists of an nonterminal entities , an nonterminal optional predicates , and a terminal period . The nonterminal entities , is associated with a parse-entities . The nonterminal optional predicates  is associated with a parse-predicates , which may be zero if the predicates element is absent. The derivation constructs a parse-expression , supplying the associated parse-entities  and the associated parse-predicates  as arguments to the parse expression's constructor . The newly allocated parse-expression  is associated with the left-hand-side nonterminal expression . The parse-token  associated with the terminal period  is deleted.","In the first entities  of a nonterminal entities , the right-hand-side consists of a nonterminal entity . The entity nonterminal has an associated parse-entity . The derivation constructs a parse-entities , providing the parse-entity  as the argument to the constructor . The newly constructed parse-entities  is then associated with the left-hand-side nonterminal entities .","In the second entities  of an nonterminal entities , the right-hand-side consists of an nonterminal entities , a terminal comma , and an nonterminal entity . The entities nonterminal has an associated parse-entities . The comma terminal has an associated parse-token . The entity nonterminal has an associated parse-entity . The derivation appends the parse-entity  to the parse-entities , making use of the member function append . The parse-token  is deleted. The parse-entities  returned from the append (which is simply the aforementioned parse entities element) is associated with the left-hand-side nonterminal entities .","In the first entity  of a nonterminal entity , the right-hand-side consists of a terminal text . The terminal text  has an associated parse-token , which is provided as an argument to the constructor . The newly created parse-text  is associated with the left-hand-side nonterminal entity ; the class parse-text  specializes the class parse-entity , so an instance of the parse-text  may appear in any context requiring an instance of the parse-entity .","In the second entity  of an nonterminal entity , the right-hand-side consists of a terminal tilde  and a terminal text . The terminal tilde  has an associated parse-token , which is deleted. The terminal text  has an associated parse-token , which is provided as an argument to the constructor . The newly created parse-relation  is associated with the left-hand-side nonterminal entity ; the class parse-relation  specializes the class parse-entity , so an instance of the parse-relation  may appear in any context requiring an instance of the parse-entity .","In the third entity  of a nonterminal entity , the right hand side consists of a nonterminal scope . The nonterminal scope  has an associated parse-scope , which is associated with the left-hand-side nonterminal entity ; the class parse-scope  specializes the class parse-entity , so an instance of the parse-scope  may appear in any context requiring a parse-entity .","In the first scope  of a nonterminal scope , the right-hand-side consists of a terminal open , a nonterminal predicates , and a terminal close . The terminals have associated instance of the parse-token  which are deleted. The nonterminal predicates  has an associated parse-predicates . The constructor  is invoked with a null for the parse-entity  argument, and with the associated parse-predicates  provided. The newly created parse-scope  is associated with the left-hand-side nonterminal scope .","In the second scope-  of a nonterminal scope , the right-hand-side consists of a terminal open , a terminal text , a terminal colon , a nonterminal predicates , and a terminal close . The terminals have associated parse token elements which are deleted, except for the text , which is supplied as the argument to the constructor , which in turn provides a parse-text , The nonterminal predicates  has an associated parse-predicates . The constructor  is invoked with the newly constructed parse-text  for the parse-entity  argument (which is permissible since the class parse-text  specializes the class parse-entity ), and with the associated parse-predicates  provided. The newly created parse-scope  is associated with the left-hand-side nonterminal scope .","In the third scope-  of a nonterminal scope , the right-hand-side consists of an terminal open , a terminal tilde , a terminal text , a terminal colon , a nonterminal predicates , and a terminal close . The terminals have associated parse token elements which are deleted, except for the text , which is supplied as the argument to the constructor , which in turn provides a parse-relation , specializing the parse-entity . The nonterminal predicates  has an associated parse-predicates . The constructor  is invoked with the newly constructed parse-relation  providing the argument parse-entity  and with the associated parse-predicates  provided. The newly created parse-scope  is associated with the left-hand-side nonterminal scope .","In the first optional predicates  of an nonterminal optional predicates , the right-hand-side is empty. A null is associated with the left-hand-side nonterminal optional predicates .","In the second optional-predicates  of an nonterminal optional predicates , the right-hand-side consists of a nonterminal predicates , with an associated parse-predicates . The associated parse-predicates  is associated with the left-hand-side nonterminal optional predicates .","In the first predicates  of a nonterminal predicates , the right-hand-side consists of a nonterminal predicate . The nonterminal predicate  has an associated parse-predicate . The production constructs an instance of the parse-predicates , providing the parse-predicate  as the argument to the constructor . The newly constructed instance of the parse-predicates  is then associated with the left-hand-side nonterminal predicates .","In the second predicates  of a nonterminal predicates , the right-hand-side consists of a nonterminal predicates , a terminal semicolon , and a nonterminal predicate . The nonterminal predicates  has an associated parse-predicates . The terminal semicolon  has an associated parse-token . The nonterminal predicate  has an associated parse-predicate . The derivation appends the parse-predicate  to the parse-predicates , making use of the member function append . The semicolon parse-token  is deleted. The parse-predicates  returned from the append (which is simply the aforementioned parse predicates element) is associated with the left-hand-side nonterminal predicates .","In the first predicate  of a nonterminal predicate , the right-hand-side consists of a terminal text  and an nonterminal optional entities . The nonterminal optional entities  has an associated parse-entities  (which may be null). The terminal text  has an associated parse-token  which is supplied as argument to the constructor . The newly created parse-relation  is supplied along with the associated parse-entities  to the constructor . The newly created parse-predicate  is in turn associated with the left-hand-side nonterminal predicate .","In the second predicate  of a nonterminal predicate , the right-hand-side consists of a terminal tilde  a terminal text  and an nonterminal optional entities . The nonterminal optional entities  has an associated parse-entities  (which may be null). The parse-token  associated with the terminal tilde  is deleted. The terminal text  has an associated parse-token  which is supplied as argument to the constructor . The newly created parse-relation  is supplied along with the associated parse-entities  to the constructor . The newly created parse-predicate  is in turn associated with the left-hand-side nonterminal predicate .","In the first optional entities  of a nonterminal optional entities , the right-hand-side is empty. A null is associated with the left-hand-side nonterminal optional entities .","In the second optional-entities  to a nonterminal optional entities , the right-hand-side consists of a nonterminal entities , with an associated parse-entities . The associated parse-entities  is associated with the left-hand-side nonterminal optional entities .","\u00a75.4 Writers","\u00a75.4.1 Introduction","Complementary to the parser  is a class snapshot . The parser reads a textual discourse , processing the text to generate operations on a dispatcher . A snapshot  operates on a dispatcher , generating a discourse , which embodies a textual representation of the dispatcher's internal state. The snapshot  and parser  are both less general than the programmer's interface, however.","In particular, an anonymous entity  with more than one object reference (i.e., occurrence of the anonymous entity as object  in a declaration ) cannot be accurately represented in text as there's no way to indicate sharing in the absence of associated text. In the native API, there's no such restriction on object references to anonymous entities. Note that a single object reference to an anonymous entity can be accommodated using textual scoping, with the anonymous entity inlined as an object in the declaration, the inline scope containing all the declarations in which the anonymous entity participates as subject There is no similar restriction on subject reference of anonymous entities, since an unlimited number of predicates can be collected inline in a scoped representation.","Another limitation of the snapshot  in this embodiment compared to the API and the parser  is that there's no provision for representation of entities that don't participate in declarations. The API permits creation of entities but does not require that they participate in declarations. However, unless entities participate in declarations, they are not dispatched to services, so they are of little consequence. Note that a monitor  is notified on entity creation, so it's possible (but atypical) for external consequences to be effected via monitors despite the absence of declarations,","Yet another limitation of the snapshot  and parser  is that instance of the relation  are required to have associated text (i.e., there is no provision for anonymous relations); anonymous relations are possible in the API.","Reversibility between a snapshot  and a discourse  may also break due to subtleties of order-dependent processing. In processing a discourse , the instances of the declaration  are dispatched in the order they are encountered in the discourse. In a snapshot , declarations may be written in an arbitrary order depending on the mechanism used to traverse the cached declarations in the dispatcher . By default the declarations are ordered by subject , then relation , then object , if any. The entities and relations are individually ordered by serial number . Other orderings may be imposed by the snapshot agent, of course; in particular, I will describe below a \u201ccanonical\u201d ordering which uses the lexicographic ordering of associated text to compare entities. This ordering makes it easy to manually look up (i.e., determine the presence or absence of) a particular declaration.","The shortcomings of a snapshot, particularly the order-dependence and the ambiguity over anonymous entities, make it necessary to take a different approach for an archival discourse. To resolve the problem of ambiguous anonymous entities, a mirroring dispatcher is maintained, in which anonymous entities are provided with a generated name. A monitor  is used, so that the order of declarations is preserved. More details are provided below. There is still a possibility of discrepancy in the event that the archived dispatcher is subject to withdrawals of declarations and\/or entities. There is not yet any provision in the discourse  for textual representation of the withdrawal of declarations or entities; this additional feature is likely to be provided in future versions, however.","Referring now to . Archivers and snapshot agents have much in common; some of those common elements can be collected in a shared base class. In this embodiment, I have collected this shared behavior in the class writer . The class snapshot  specializes the class writer . The class canonical snapshot  also derives from the writer . The class archiver  derives from both the writer  and the monitor .  illustrates the derivation relationships specializing the class writer  and the class monitor .","\u00a75.4.2 Writer Base",{"@attributes":{"id":"p-0453","num":"0723"},"figref":"FIG. 56","b":["3435","3435","1505","3450","3455","3460"]},"To ease the burden of maintaining consistency with the lexical analyzer , which is in some senses dual to the writer , the specific provision of punctuation is collected in several member functions which generate the requisite text. These member functions all return text  which may be written to a file, stream, or other text destination, typically encapsulated in a sink . These member functions include a member function hash , which provides the hash mark indicative of a comment; a member function quote , which provides the single quote indicative of quoted text; a member function hidden-quote  which generates an escaped quote inside quoted text; a member function backslash , which generates an escaped backslash within quoted text; a member function tilde , which generates a tilde indicative of a relation in a subject or object context; a member function semicolon , which generates the semicolon separator for multiple predicates; a member function comma , which generates the comma separator for multiple entities; a member function period , which generates the period terminator for an expression; a member function space , which generates a space character; a member function newline , which generates a newline character, a member function tab , which generates a tab character; a member function open-brace  which generates the opening brace of a scope; and a member function close-brace , which generates the closing brace of a scope.","There are additional member functions which encapsulate generation of text, entities, relations, and declarations. A member function need-quotes  determines whether a particular element of text  requires quoting (ie, contains non-alphanumeric characters, per the lexical analyzer  definition). A member function write-text  handles quoting as necessary. A member function write-entity  handles instance of the entity , anonymous entities, and instances of the relation  in subject and object context. A member function write-relation  handles instances of the relation  in the relation context of a declaration. A member function write-declaration  handles a declaration . Specializations of this class, including the snapshot  and the canonical snapshot , make use principally of the member function write-declaration .",{"@attributes":{"id":"p-0456","num":"0726"},"figref":"FIG. 57","b":["3540","3435","2035","3555","2075","3560","2050","2095","2050","3565","2075","3570","3535"]},"In the absence of text, the supplied entity  is anonymous and must be embedded in the generated discourse  using scope operators in a step . A scope opening curly brace is written in a step . Then, the member function loops in a step  over the instances of the declaration  in which the supplied entity participates as a subject . These declarations are provided by the member function subject-declarations  of the entity's dispatcher . Each of these iterated instances of the declaration  has a relation , which is written in a step  using the writer's member function write-relation . If the declaration  has an object , the object is written in a step  using a recursive call to this member function write-entity . Finally, if the subject declarations are not exhausted, a semicolon separator is written in a step . After the loop step  has terminated, a closing brace is written in a step .","The writer's member function write-relation  is trivial since instances of the relation  are required to have associated text  for parsing and archiving. The member function simply calls the member function write-text , supplying the relation's text.",{"@attributes":{"id":"p-0459","num":"0729"},"figref":"FIG. 58","b":["3550","3435","2040","2100","3610","3540","3615","3620","2105","3545","3625","2110","3630","3635","3540","3640"]},"\u00a75.4.3 Snapshot","Now I turn to actual snapshots. The class snapshot  is derived from the class writer . There are no additional member functions, only a constructor, to which is supplied a dispatcher  and a sink . The sink argument is used to construct the base class writer . The constructor loops over the declarations in the supplied dispatcher, writing each declaration, using the member function write-declaration  of the class writer , unless the declaration's subject  is anonymous, in which case the declaration is skipped. Declarations with anonymous subjects are written inline in the recursive member function write-declaration .","The class canonical snapshot  takes an alternative approach which is more akin to the index of a book. Two non-anonymous entities are compared according to the lexicographic ordering of their associated text. This has the effect of creating an alphabetic ordering of declarations, where the alphabetic ordering is by subject text, then relation text, then object text. This ordering makes it easy for a human reviewing an archived discourse to determine if a particular declaration has been made, as long as the participating elements are not anonymous.","The canonical snapshot  derives from the writer . The canonical snapshot does not add any additional member functions, but it does provide a constructor . The constructor requires a dispatcher  and a sink . The sink argument is used to construct the base class writer .  depicts the constructor  from the class canonical snapshot .","The constructor , is supplied with a dispatcher  and a sink . The constructor begins by initializing in a step  its base class writer , using the supplied sink . A heap of declarations is used in a step  to accumulate declarations with textual subjects. The heap uses a lexicographic comparator on associated text as described above. The instance of the declaration  in the supplied dispatcher are looped in a step  and declarations with textual subjects are accumulated in a step  onto the heap, where they are partially sorted. Declarations with anonymous subjects will be archived in nested scopes as a consequence of the implicit use of the member function write-entity . After the heap is populated, it's depopulated in a while loop in a step . The popped declaration is always the foremost declaration in the heap according to the comparator. The popped declaration is written in a step  using the member function write-declaration .","\u00a75.4.4 Archiver","An archiver  is a specialization of a monitor  and a writer  which maintains a mirror instance of the dispatcher  in which anonymous entities from the original dispatcher are provided with distinct generated names. On notification of a declaration , the archiver  updates its internal state, as will be described, and writes an appropriate record for the declaration.",{"@attributes":{"id":"p-0465","num":"0735"},"figref":"FIG. 60","b":["3445","3445","2060","3435","3680","2060","2035","2050","2040","3685","3435"]},"An archiver  has several private members. A member mirror , of dispatcher , maintains a mirror of the state of the instance of the dispatcher  which is to be archived. A map member eem , mapping from entity  to entity , translates an entity in the dispatcher to be archived to an entity in the member mirror . A member prefix  of text , provides a common prefix for generated names; the counter member id  provides a distinguishing element for generated names.","Where possible, the text associated with an entity in the mirror  is identical with that of the mirrored entity from the archived dispatcher; if the archival entity is anonymous, or has a name already in use, a distinct name is generated for use in the mirror.","There are several public member functions, including a constructor , in which a dispatcher  to be archived is provided along with a sink  for text. I'll consider the constructor in more detail below. A destructor  doesn't have any non-default work to do. There are specializations of the monitor  notifications. A member function add-entity  specializes the add-entity  of the class monitor . A member function add-relation  specializes the add-relation  of the class monitor . A member function declare  specializes the declare  of the class monitor . I will consider these in more detail below.","A few private member functions are also in use. A member function nominalize  checks in the mirror  to determine if a supplied text is associated with an entity; if so, it augments the name with a suffix and retries, eventually returning text which is not associated with any entity. A member function mirror-entity  looks in the eem  to obtain a mirror entity for an entity from the archival dispatcher, returning zero if no mirror entity is found. A member function mirror-relation  provides a similar service for relations.",{"@attributes":{"id":"p-0470","num":"0740"},"figref":"FIG. 61","b":["3710","3445","3710","2055","3455","2060","3750","3755","3435","3700","3760","3765","3705","3770","3775","2095","3780","3690","3725","3785","3690","3720","2040","2055"]},{"@attributes":{"id":"p-0471","num":"0741"},"figref":"FIG. 62","b":["3720","3445","2575","2035","2035","3790","3795","3800","3735","3805","3690","3695","3810"]},{"@attributes":{"id":"p-0472","num":"0742"},"figref":"FIG. 63","b":["3725","3445","2585","2050","2050","3815","3820","3825","3735","3830","3690","3695","3835"]},{"@attributes":{"id":"p-0473","num":"0743"},"figref":"FIG. 64","b":["3730","3445","2595","2040","2100","3840","3695","2105","3845","3850","3855","3860","3690","3865"]},"\u00a75.5 XML Reader","\u00a75.5.1 Introduction","The Extensible Markup Language (XML) is a widely used standard for encoding documents and data in a textual representation. XML is a meta-language, providing a syntactic framework which may be specialized to particular languages for particular applications.","XML, like its predecessor SGML, is characterized by tagged, nested elements, which provide structural information, interspersed with textual data, which provides content. Tagged elements may further contain supplemental data in the form of attributes. In the particular embodiment under consideration here, a simple XML-based discourse language  is used to represent the entity , the relation , and, implicitly, the declaration . This language uses only tagged elements and textual data; no attributes are used. Moreover, there's only one tagged element which may contain textual data, in which whitespace is significant. All other tagged elements are only sensitive to other tagged elements, and whitespace is insignificant.","\u00a75.5.2 Schema",{"@attributes":{"id":"p-0476","num":"0746"},"figref":"FIG. 65","b":["3870","3875","3875","3880","2035","3880","3875","3885"]},"The tag p-tag  indicates a predicate. It must contain exactly one tag r-tag , indicating the predicate's relation . The p-tag  may optionally contain one or more instances of the e-tag  and, optionally one or more instances of a tag re-tag . These latter tagged elements represent the optional objects in the predicate. The r-tag  must contain exactly one t-tag  to provide the associated text  which identifies the relation . It may optionally contain one or more elements of the p-tag , which are applied to the indicated relation as subject.","The re-tag  indicates a relation in an entity context. If the relation has not been previously used in a relation context or indicated as a relation in a previous re-tag , then a subsequent attempt to use it as a relation will result in an error if it has appeared under an element of the e-tag . Once a relation is established, however, it may safely appear under elements of the e-tag . An element of the re-tag  must contain exactly element of the t-tag  to provide the associated text which identifies the relation. It may optionally contain one or more elements of the p-tag  which are applied to the indicated relation as subject.","A tag x-tag  indicates an expression, consisting of one or more subjects and zero or more predicates. A subject is indicated by an element of the e-tag , an element of the r-tag  or an element of the re-tag . A predicate is indicated by an element of the p-tag . Instances of the declaration  are implied by the cross product of subjects and predicates in the expression.","Finally, a tag ds-tag  representing an entire discourse is the document-level tag and serves as the root of the implicit XML tree. There is only one document-level tagged element in a valid XML document, An element of the ds-tag  contains zero or more elements of the x-tag , whereby a discourse consists of zero or more expressions.","\u00a75.5.3 Elements","Referring now to . An XML class parser , maintains one-to-one relationships between the XML tagged elements previously discussed, and instances from classes representative of the tagged elements. A class xml-element , serves as a common base class for specialized classes the instances of which are isomorphic to tagged elements.  summarizes the specializations of the class xml-element .  is an inheritance diagram, in which arrows point from derived classes to base classes.  also shows associated tags.","The root of the XML element class hierarchy is the class xml-element . The xml-element  is abstract; it serves to define the interface that all XML elements will share. It does not have a corresponding tag.","Deriving from the xml-element  is a class xml-discourse , which corresponds to the document-level element of the ds-tag  that provides the root tag in the XML document. There is only one document-level tag in a valid XML document, and all other tags are contained in the document-level tag.","Also deriving from class xml-element  is a class xml-text  which corresponds to elements of the t-tag . The xml-text  encapsulates text  to be associated with instances of the entity  in the discourse.","Also deriving from class xml-element  is a class xml-predicate  which corresponds to elements of the p-tag . The xml-predicate  encapsulates a predicate, representing an instance of the relation  and, optionally, one or more object instances of the entity .","Also deriving from class xml-element  is a class xml-entity  which corresponds to elements of the e-tag . The xml-entity  represents an instance of the entity , which may appear in a subject role in an expression, or in an object role in a predicate.","Deriving from the class xml-entity  is a class xml-relation-entity , which corresponds to elements of the re-tag . The xml-relation-entity  represents an instance of the relation  in an entity context, i.e., in a subject role in an expression, or in an object role in a predicate.","Deriving from the class xml-relation-entity  is a class xml-relation , which corresponds to elements of the r-tag . The xml-relation  represents an instance of the relation  in a relation context, i.e., in the relation role in a predicate.","Also deriving from the class xml-element  is a class xml-expression  which corresponds to elements of the x-tag . The xml-expression  represents an expression, within which is found one or more subject entities, and, optionally, one or more predicates.","Next I will consider the XML elements in detail.",{"@attributes":{"id":"p-0491","num":"0761"},"figref":"FIG. 67","b":["3915","3955","3915","3960","3965","2055","2055","3915"]},"In a virtual member function accept , an element which was constructed from a nested tag is supplied to the element corresponding to the containing tag. The containing element may then perform processing on the supplied element. The containing element is also responsible for memory management of the supplied element. The accept member function returns bool to permit indication of failure, for example if an invalid tag is nested. By default, a received element is deleted and success is returned.","A member function accept-text  provides means by which the XML parser may supply contained character data to the element. The default behavior is simply to report success.","There follows a series of safe casting member functions which permit specialization of supplied tags, typically for use in specializations of the virtual member function accept . By default these all return null, indicating failure of the specialization. In the derived classes, these member functions are overridden as appropriate to return valid pointers. In the virtual member function to-text , an instance of the xml-text  is returned. In the virtual member function to-entity , an instance of the xml-entity  is returned. In the virtual member function to-relation  an instance of the xml-relation  is returned. In the virtual member function to-expression  an instance of the xml-expression  is returned. In the virtual member function to-predicate  an instance of the xml-predicate  is returned. In the virtual member function to-discourse  an instance of the xml-discourse  is returned.","The document-level specialization of the class xml-element  is the class xml-discourse . This element encloses an entire discourse. It overrides only the member function tag  and the member function to-discourse , returning in the first case the text \u201cds\u201d, and in the latter case a pointer to itself.",{"@attributes":{"id":"p-0496","num":"0766"},"figref":"FIG. 68","b":["3925","3925","3915","4010","3925","3910"]},"The class xml-text  specializes the member function tag  in a member function tag  to return the text \u201ct\u201d. The class xml-text  specializes the member function to-text , in a member function to-text  returning a pointer to itself. The xml-text  also specializes the accept  and the accept-text . In a specialized member function accept , the xml-text  deletes the supplied tag and returns 0, indicating failure, since it does not permit nested tags. In a specialized member function accept-text , the accepted text is accumulated into a member text  of text .",{"@attributes":{"id":"p-0498","num":"0768"},"figref":"FIG. 69","b":["3930","3930","3915","4040","3930","3945","3935"]},"The xml-predicate  specializes the member function tag  in a member function tag  to return the text \u201cp\u201d. The xml-predicate  specializes the member function to-predicate , in a member function to-predicate , returning a pointer to itself.","The xml-predicate  has a relation instance member , and a sequence member objects . These members cache instantiated elements in readiness to be combined with external subject entities to form declarations.","The xml-predicate  specializes the member function accept  in a member function accept  The member member  and the sequence member objects  are populated in invocations of the accept . Detailed discussion of the specialized accept  is deferred until the interfaces to all the xml-element  specializations have been described.","The xml-predicate  also specializes the member function instantiate . A member function instantiate  simply checks whether the member member  has been assigned. If so, the instantiation succeeds; otherwise it fails.",{"@attributes":{"id":"p-0503","num":"0773"},"figref":"FIG. 70","b":["3935","3935","3915","4075","3935","2035","2100","2110","2040","3935","3940","2050"]},"The xml-entity  provides a member function tag , which specializes the member function tag  to return the text \u201ce\u201d. The xml-entity  specializes the member function to-entity , in a member function to-entity  returning a pointer to itself.","The xml-entity  provides a member function accept  which specializes the accept . The member function accept  is considered in detail below. The xml-entity  has a member text , which contains any text associated with the xml-entity . A sequence member predicates , collects instances of the xml-predicate . The sequence predicates  is initially empty. The default implementation for the member function instantiate  is also specialized to a member function instantiate . The specialized member function instantiate  is considered in detail below. A member cached-entity , is available to hold an instance of the entity . This member is initialized to null in the constructor. A virtual member function entity , by default returns the member cached-entity , however, a derived class (e.g., the class xml-relation-entity ) may specialize the member function as necessary. A member function declare  generates declarations incorporating the entity  provided by the virtual member function entity , and any instances of the xml-predicate  in the sequence member predicates . The member function declare  is considered in detail below.",{"@attributes":{"id":"p-0506","num":"0776"},"figref":"FIG. 71","b":["3940","3940","3935","4125","3940","2050","2100","2110","2040"]},"The xml-relation-entity  provides a member function tag  which specializes the tag  to return the text \u201cre\u201d.","The xml-relation-entity  provides a specialized member function instantiate  to obtain an instance of the relation . The specialized member function is considered below. The instance of the relation  obtained in the instantiation is reserved in the member relation . The relation member is initialized to null. The entity  from the base class xml-entity  is specialized to a member function entity , which returns the member relation ; recall that a relation  is a specialized entity , and hence may serve in any context where a entity  is required.",{"@attributes":{"id":"p-0509","num":"0779"},"figref":"FIG. 72","b":["3945","3945","3940","4150","3945","2050","3945","4155","4160"]},{"@attributes":{"id":"p-0510","num":"0780"},"figref":"FIG. 73","b":["3950","3950","3915","4165"]},"The xml-expression  has a specialized member function tag , which returns the text \u201cx\u201d. A specialized member function to-expression , returns a pointer to itself. The xml-expression  has a specialized member function accept , which permits accumulation of subjects and predicates. The member function accept  is considered in detail below. There are corresponding accumulator members: a sequence member subjects , of entity , and a sequence member predicates , of xml-predicate . A specialized member function instantiate , establishes declarations linking accumulated subjects and predicates. The specialized member function instantiate  is considered in detail below.","I now turn to details of member functions which were deferred until the class interfaces had been covered.",{"@attributes":{"id":"p-0513","num":"0783"},"figref":"FIG. 74","b":["4065","3930","4065","3970","3915","4200","3915","3945","3990","4205","4210","4055","4065","2050","4215","4055","4065","4220"]},"If the specialization to xml-relation  fails, an attempt is made in a step  to specialize to an xml-entity , using the member function to-entity . If the specialization succeeds in a step , the specialized instance of the xml-entity  provides an instance of the entity  via its member function cached-entity , and the obtained entity  is appended in a step  to the sequence member objects , and the accept  succeeds in a step , returning non-zero.","Otherwise, an invalid element has been supplied, and the accept  fails in a step , returning zero.",{"@attributes":{"id":"p-0516","num":"0786"},"figref":"FIG. 75","b":["4090","3935","4090","3970","3915","3915","4250","3915","3925","4255","4260","4095","4095","4265","4095","1505","4035","3925","4270"]},"However, if the text member is already assigned, the member function fails in a step , as an instance of the xml-entity  may have not more than one instance of the xml-text .","After failing to specialize to a xml-text , the member function attempts in a step  to specialize the supplied xml-element  to an instance of the xml-predicate . In a step , the success of the specialization is checked. If the specialization succeeded, in a step  the predicate is appended to the sequence member predicates . Then the member function returns nonzero in a step , indicating success.","Otherwise, the supplied element couldn't be specialized to a xml-text  or a xml-predicate ; hence it's an invalid element, and the member function returns zero in a step , indicating failure.",{"@attributes":{"id":"p-0520","num":"0790"},"figref":"FIG. 76","b":["4105","2055","4110","4095","2235","4305","4095","2035","4110","2235","4095","2225","4310","4110"]},"If the member cached-entity  has been assigned, then the member function declare  is invoked in a step  to apply any accumulated predicates to the instantiated cached_entity. The instantiation returns in a step  successfully according to whether the member cached-entity  has been assigned.",{"@attributes":{"id":"p-0522","num":"0792"},"figref":"FIG. 77","b":["4120","3935","2035","4325","4115","3940","2035","4110","3930","4100","4330","2050","4335","3930","4055","4060","4340","2035","4345","2040","4350","4355","4360","2040","4365","4370"]},{"@attributes":{"id":"p-0523","num":"0793"},"figref":"FIG. 78","b":["4135","3940","2055","4095","3935","4375","2260","4380","4140","4385","4390","4120","4395","4400"]},{"@attributes":{"id":"p-0524","num":"0794"},"figref":"FIG. 79","b":["4180","3950","3915","4405","3935","4410","2035","3935","4415","4185","4420"]},"Failing the specialization to an xml-entity , the member function attempts to specialize in a step  to an xml-predicate . If an xml-predicate  is obtained in a step , the specialized xml-predicate  is appended in a step  to the sequence member predicates . Nonzero is returned in a step , indicating success.","If the predicate specialization fails, the member function was provided an invalid element; it returns zero in a step , indicating failure.",{"@attributes":{"id":"p-0527","num":"0797"},"figref":"FIG. 80","b":["4195","3950","2055","4185","4450","4455","4460","2035","4185","4465","3930","4190","2050","4470","4055","4475","3930","4060","2035","4060","4480","2040","4485","4490","4495","4500","4505","4510"]},"\u00a75.5.4 Parser","Having considered the XML schema and the XML elements, I can now describe in detail the parser . First, however, a few words about expat, which provides low-level XML parsing services.","XML is a meta-language which has a very tightly specified syntax. This permits the use of standard tools to assist in reading XML-formatted data. There are many such tools, well-known to those skilled in the art. For this particular embodiment, I have selected expat, by James J. Clark, a free, open-source XML parser which is reliable, efficient, and has an interface that I find congenial. The services provided by expat and other XML parsers are quite low-level; these parsers break up the text stream into tags and character data, providing notification in the SAX model of XML service, or constructing a data structure in the DOM model of XML service. Expat uses the SAX model; notifications are provided on start and end tags, as well as on character data. In effect, expat is performing lexical analysis, chunking the XML-formatted stream into tags and character data; the task of making sense of the tags and character data falls to the high-level parser .","To the high-level parser  I now turn. This parser uses expat to provide notifications of tags and character data chunked from XML-formatted discourse consistent with the language . The parser  is responsible for translating expat's notifications into operations on a dispatcher .",{"@attributes":{"id":"p-0531","num":"0801"},"figref":"FIG. 81","b":["3910","4515","2055","4520","4525","4525","4525","4530","4535","4540","3910","3910","4545","4530","4545","4550","4535","4550","4555","4540","4555","3910","4560","4565","3915","4570"]},{"@attributes":{"id":"p-0532","num":"0802"},"figref":"FIG. 82","b":["4525","3910","4575","4560","4580","4585","4590","4560","3910","4595","4600","4605","4610","4615","4620","4625","4630","4635","4640","4645","4530","4535","4540","4650","4570","4655","4660","4560","4665","4670","4675"]},"The parser  member function parse  requests expat services to parse the input text into tags and characters; the expat services respond by providing notifications of parsed tags and characters to the parser's handlers. These handlers translate to member function calls on the xml-parser. I will now consider these handler member functions in detail.","On receipt of an XML start tag, the start-tag-handler  gets a notification from expat. The start-tag-handler  reconstitutes the xml-parser from the user data provided by expat, and makes a call to the member function start-tag .",{"@attributes":{"id":"p-0535","num":"0805"},"figref":"FIG. 83","b":["4545","3910","4680","4570","4685","3915","3955","3915","4690","4695","4565"]},"On receipt of an XML end tag, the end-tag-handler  gets a notification from expat. The end-tag-handler  reconstitutes the parser  from the user data provided by expat, and makes a call to the member function end-tag .",{"@attributes":{"id":"p-0537","num":"0807"},"figref":"FIG. 84","b":["4550","3910","4700","4570","3915","4565","4705","4710","4520","4715","4720","4725","4730","4735","3915","3970","3970","4740"]},"On receipt of character data, the characters-handler  gets a notification from expat. The characters-handler  reconstitutes the parser  from the user data provided by expat, and makes a call to the member function characters .",{"@attributes":{"id":"p-0539","num":"0809"},"figref":"FIG. 85","b":["4555","4745","4570","4750","4755","3915","4565","3975","4760"]},"\u00a75.6 XML Writers","\u00a75.6.1 Introduction","Complementary to the class parser  is a class xml-snapshot . The parser  reads an XML-formatted discourse, translating the text to operations on a dispatcher . The xml-snapshot  operates on a dispatcher , generating an XML-formatted discourse representative of the dispatcher's state, which may be restored by a parser .","The xml-snapshot  and the parser  are both less general than the API, however. In particular, an anonymous entity with more than one object reference (i.e., occurence of the anonymous entity as object in a declaration) cannot be represented in text as there's no way to indicate sharing other than by associated text. In the API, there's no restriction on object references to anonymous entities. Note that a single object reference to an anonymous entity can be accomodated using nested tagging, with the anonymous entity nested as an object in the declaration, the nested entity containing all the declarations in which the anonymous entity participates as subject.","Another limitation of the textual operators compared to the API is that there's no provision for representation of entities that don't participate in declarations. The API permits creation of entities but does not require that they participate in declarations. However, unless entities participate in declarations, they are not dispatched to services, so they are of little consequence. Note that monitors are notified on entity creation, so it's possible for external consequences to be effected despite the absence of declarations.","Yet another limitation of the snapshot and parser is that relations are required to have associated text (i.e., there is no provision for anonymous relations); anonymous relations are possible in the API.","Reversibility between an xml-snapshot  and a xml-parsed discourse also breaks due to subtleties of order-dependent processing. In processing a discourse instances of the declaration  are dispatched in the order they are encountered in the discourse. In a xml-snapshot , declarations may be written in arbitrary order depending on the mechanism used to traverse the cached declarations in the dispatcher . By default the declarations are ordered by subject , then relation , then object , if any. The entities and relations are individually ordered by serial number . Other orderings may be imposed by the snapshot agent, of course; in particular, I will describe below a \u201ccanonical\u201d ordering which uses the lexicographic ordering of associated text to compare entities. This ordering makes it easy to manually look up (i.e., determine the presence or absence of) a particular declaration.","The shortcomings of a snapshot, particularly the order-dependence and the ambiguity over anonymous entities, make it necessary to take a different approach for an archival discourse. To resolve the problem of ambiguous anonymous entities, a mirror dispatcher is maintained, in which anonymous entities are provided with a generated name. A monitor is used, so that the order of declarations is identical. More details are provided below.","Referring now to . Archivers and snapshots have much in common; some of those common elements can be collected in a shared base class. In this embodiment, I have collected this shared behavior in the class xml-writer . The class xml-snapshot  and the class xml-canonical-snapshot  derive from the class xml-writer . The class xml-archiver  derives from the class xml-writer . and the class monitor .  illustates derivation relationships for the class xml-writer .","\u00a75.6.2 XML Writer Base","Despite limitations with respect to the API and the order of declaration processing, the parser  and the xml-snapshot  are useful tools. The XML parser has been considered above; I now turn to the details of the xml-snapshot , and the xml-canonical-snapshot .",{"@attributes":{"id":"p-0548","num":"0818"},"figref":"FIG. 87","b":["4770","4770","4785","4790"]},"There are additional member functions which encapsulate generation of XML-formatted text. The member function write-xml-header  and member function write-xml-footer  provide the <ds>tags around a discourse. A member function write-text  handles XML-entity coding as necessary. A member entity-coder  maps individual characters to strings, to handle escape codes for characters that XML considers special, including angle brackets, the ampersand, and quotes. A member function write-entity  handles entities, anonymous entities, and relations in subject and object context. A member function write-relation  handles relations in the relation context of a declaration. A member function write-declaration  which handles a declaration. Specializations of this class, including the class xml-snapshot  and the class xml-canonical-snapshot , make use principally of the member function write-declaration .",{"@attributes":{"id":"p-0550","num":"0820"},"figref":"FIG. 88","b":["4815","4770","2035","4830","2050","2095","4835","4840","4845","2035","4850","4805","4855","4860","2040","2100","2040","4865","2105","4870","2110","4875","4880","4860","4885","2035","2050","4890","4895"]},"The member function write-relation  for the class xml-writer  is easy since relations are required to have associated text for parsing and archiving. The member function wraps begin <r> and end <\/r> tags around a call to the xml-writer's write-text , supplying the relation's text .",{"@attributes":{"id":"p-0552","num":"0822"},"figref":"FIG. 89","b":["4825","4770","2040","4900","2100","4905","4815","4910","2105","4915","4820","2110","4920","4815","4925","4930"]},"\u00a75.6.3 XML Snapshot","Now I turn to actual snapshots. The class xml-snapshot  is derived from the xml-writer . There are no additional member functions, only a constructor , which accepts a dispatcher  and a sink . The sink argument is used to construct the base class xml-writer . All the work takes place in the constructor .",{"@attributes":{"id":"p-0554","num":"0824"},"figref":"FIG. 90","b":["4935","4765","4935","2055","3455","4940","4770","3455","4945","4795","4950","2295","2100","4955","4815","4960","4800"]},"The xml-snapshot  writes declarations in an order which is determined by the order in which declarations are collected in the dispatcher. Typically, the declarations are sorted first by subject , then relation , then object . The sort key for the individual entities is the serial number , so, in effect, the order of entity precedence is the order of creation.","The class xml-canonical-snapshot  takes an approach which is more akin to the index of a book. Two non-anonymous entities are compared according to the lexicographic ordering of their associated text. This has the effect of creating an alphabetic ordering of declarations, where the alphabetic ordering is by subject text, then relation text, then object text. This ordering makes it easy for a human reviewing an archived discourse to determine if a particular declaration has been made, as long as the participating elements are not anonymous.","The class xml-canonical-snapshot  derives from the xml-writer . The xml-canonical-snapshot  does not add any additional member functions, but it does provide a constructor . The constructor accepts an instance of the dispatcher  and an instance of the sink . The sink argument is used to construct the base class xml-writer .",{"@attributes":{"id":"p-0558","num":"0828"},"figref":"FIG. 91","b":["4965","4775","4965","4970","4770","4975","4980","4985","4815","4990","4995","4825"]},"\u00a75.6.4 XML Archiver","The class xml-archiver  is a specialization of a the class monitor  and the class xml-writer . The xml-archiver  maintains a mirror dispatcher  in which anonymous entities from the original dispatcher  are effectively provided with distinct generated names. On notification of a declaration, the xml-archiver  performs housekeeping as necessary and writes an appropriate record for the declaration. There's a fairly exact analogy between the xml-archiver  and the archiver .",{"@attributes":{"id":"p-0560","num":"0830"},"figref":"FIG. 92","b":["4780","4780","2060","4770","5000","2060","5005","4770"]},"The xml-archiver  has several private members. A member mirror , of class dispatcher , maintains a mirror of the state of the dispatcher which is to be archived. A member map , mapping from an instance of the entity  to an instance of the entity , translates entities in the original dispatcher to entities in the mirror . A member prefix , of text , provides a common prefix for generated names; a member counter  provides a distinguishing element for generated names.","Where possible, the text associated with an entity in the mirror  is identical with that of the mirrored entity from archived dispatcher; if the archival entity is anonymous, or has a name already in use, a distinct name is generated for use in the mirror.","There are several public member functions, including a constructor , in which an archival dispatcher is provided along with a sink for text. I'll consider the constructor in more detail below. There's a destructor  which has only to write the discourse end-tag <\/ds>. There are specializations of the monitor  notifications. The member function add-entity  is specialized to a member function add-entity . The member function add-relation  is specialized to a member function add-relation . The member function declare  is specialized to a member function declare . I will consider these specializations in more detail below.","A few private member functions are also in use. A member function nominalize  checks in the mirror  dispatcher to determine if a supplied text is associated with an entity; if so, it augments the name with a suffix and retries, eventually returning text which is not associated with any entity. A member function mirror-entity  looks in the member map  to obtain a mirror entity for an entity from the archival dispatcher, returning zero if no mirror entity is found; the member function mirror-relation  provides a similar service for relations.",{"@attributes":{"id":"p-0565","num":"0835"},"figref":"FIG. 93","b":["5030","4780","5030","2055","3455","5070","2060","5075","4770","5020","5080","5025","5085","5090","5095","2095","5100","5045","5105","5040","5110","4795"]},{"@attributes":{"id":"p-0566","num":"0836"},"figref":"FIG. 94","b":["5040","4780","2575","2035","2055","2035","5115","5120","5125","5055","5130","5010","5015","5135"]},{"@attributes":{"id":"p-0567","num":"0837"},"figref":"FIG. 95","b":["5045","4780","2585","2050","2055","2050","5140","5145","5150","5055","5155","5010","5015","5160"]},{"@attributes":{"id":"p-0568","num":"0838"},"figref":"FIG. 96","b":["5050","4780","2595","2040","2040","2100","5015","5165","2105","5170","2110","5175","5180","5185","5190"]},"\u00a75.7 Meta Relations","\u00a75.7.1 Introduction","So far, I have made little use of the property that the class relation  specializes the class entity , although some price has been paid in dealing with special cases in parsing and archiving. There are valuable consequences of treating relations as specializations of entities, however. When relations are entities, relations may participate as subjects and objects of declarations. Then meta-relations may be provided, which are nothing more than relations on relations. Meta-relations are useful in part because they permit automatic inference-like behavior in consequence of declarations.","Referring now to . A class meta-relation  is a specialized relation .  summarizes the specializations of the class meta-relation . In , where the arrow points from species to genus. The class meta-relation  may be specialized as a class meta-property  or a class meta-association , according to whether the optional object  is present in instances of the declaration  which utilize the particular instance of the meta-relation  as relation . The meta-property  represents a characteristic of the subject , itself an instance of the relation . The meta-association  indicates a relation holding between the subject , itself an instance of the relation , and the object , itself also an instance of the relation .","Meta-relations become useful when they are associated with instance of the service  which carry out inference-like behavior. Typically a meta-relation service on dispatch will dynamically create one or more helper services which will be associated with the subject and\/or object relations which are related by the meta-relation.",{"@attributes":{"id":"p-0572","num":"0842"},"figref":"FIG. 98","b":["2045","5210","2150","2100","2040","5215"]},"A service class meta-association  on dispatch  specializes (downcasts) the subject  of the supplied declaration  to a subject relation, and creates a service class helper  which is associated with the subject relation. Also, a meta-association may associate a service class helper  to a relation specialized from the object of the supplied declaration. The meta-property , the helper , the meta-association , the helper , and the helper  are all specializations of the service .","\u00a75.7.2 Meta Properties","In a meta-property declaration, the meta-property  is utilized as the relation . The subject  of the meta-property declaration is itself a relation . A meta-property declaration lacks an object . A meta-property  is associated with the meta-property ; the meta-property service is dispatched in response to the meta-property declaration.",{"@attributes":{"id":"p-0575","num":"0845"},"figref":"FIG. 99","b":["5235","5210","5235","5210","2150","2045"]},"The member function dispatch  from the class meta-property  is a response to the declaration  of some subject relation  having the meta-property  under consideration. A declaration  is supplied to the dispatch member function. In a step , an attempt is made to specialize the subject  of the supplied declaration  to a relation . In general, the subject  is a instance of the entity . While any instance of the relation  is an instance of the entity , the converse is not necessarily true; hence the use of the virtual member function downcast  to obtain a relation  if possible. If a relation  is obtained, a new helper  is created in a step  and placed under management. The specifics of the newly created helper  depend on the particular meta-property . The helper  is typically a specialized service , which is associated with the subject  of the supplied declaration . The helper  will typically generate one or more additional declarations upon its own dispatch.","One useful meta-property is commutivity. For a commutative relation commutative-relation if we have \u201csubject commutative-relation object\u201d, we may infer \u201cobject commutative-relation subject\u201d. Commutivity is widespread in modeling; for example, if we are modeling families, we might make use of a relation has-sibling, which is clearly commutative in its normal usage, since if Sally has-sibling Bill, then Bill has-sibling Sally, and vice-versa.","Referring now to . In this embodiment of an is-commutative meta-property I provide a relation instance is-commutative , with an associated service class is-commutative . The service is-commutative  is dispatched on declarations such as \u201chas-sibling is-commutative\u201d. On dispatch, the is-commutative service creates a service class helper , which, in turn, is dispatched on declarations such as \u201cSally has-sibling Bill\u201d.  depicts the commutivity specialization relationships. Here, the arrows indicate specializations; the arrow points from the specialized category to the generalized category. A dashed line indicates that there might be intervening generalizations which are not depicted.","Referring now to . The is-commutative helper  has a member function dispatch .  illustrates the member function dispatch  from the class helper . The dispatch member function is supplied with a declaration . A single inferred declaration  is declared in a step , in which the inferred subject  is provided by the object  of the supplied declaration, the inferred relation  is the relation of the supplied declaration, and the inferred declaration object  is provided by the subject  of the supplied declaration.","Another useful meta-property is transitivity. For a transitive relation transitive-relation if we have \u201csubject transitive-relation object\u201d and \u201cobject transitive-relation object-object\u201d, we may infer \u201csubject transitive-relation object-object\u201d. Moreover, if we have \u201csubject transitive-relation object\u201d and \u201csubject-subject transitive-relation subject\u201d, we may infer \u201csubject-subject transitive-relation object\u201d. A typical transitive function, continuing in the family model, is ancestorship; if Sally has-ancestor Jed, and Jed has-ancestor Abel, then we may infer that Sally has-ancestor Abel.","Referring now to . In this embodiment of an is-transitive meta-property I provide a relation instance meta-property , with an associated service class is-transitive . The service is-transitive  is dispatched on declarations such as \u201chas-ancestor is-transitive\u201d. On dispatch, the is-transitive service creates an is-transitive service class helper , which, in turn, is dispatched on declarations such as \u201cSally has-ancestor Jed\u201d.  depicts the transitivity specialization relationships.",{"@attributes":{"id":"p-0582","num":"0852"},"figref":"FIG. 103","b":["5290","5285","2040","2100","2110","5295","5300","2105","5305","5310","2110","5315","5320","5325"]},"\u00a75.7.3 Meta Associations","In a meta-association declaration, a meta-association  is utilized as the relation . The subject  and the object  of a meta-association declaration are themselves instances of the relation . A meta-association  is associated with the meta-association ; the meta-association service is dispatched in response to the meta-association declaration. A typical member function dispatch  of a meta-association  will be considered below.",{"@attributes":{"id":"p-0584","num":"0854"},"figref":"FIG. 104","b":["5330","5330","5220","2150","2045","5330","2040","2105","5205","5335","2100","2040","2100","2035","2050","2035","2095","2050","2110","5340"]},"If subject and object instances of the relation  are obtained in a test , a new helper  is created in a step  and placed under management. The specifics of the helper  depend on the particular meta-association . The helper  is typically a specialization of the service , which is associated with the relation specialized from the subject  of the supplied declaration declaration . The helper  will typically generate one or more additional declarations upon its own dispatch.","In some meta-associations, an object helper is also utilized. In this case, a new helper  is created in a step  and placed under management.",{"@attributes":{"id":"p-0587","num":"0857"},"figref":"FIG. 105","b":["5225","5225","2045","5360","5225","5365","5370","5375","5380","5375","2045","5385","2150","2045"]},{"@attributes":{"id":"p-0588","num":"0858"},"figref":"FIG. 106","b":["5230","5230","2045","5390","5230","5395","5400","5405","5410","5405","2045","5415","2150","2045"]},"One widely applicable meta-association is implication. A premise-relation, an instance of the relation , implies surmise-relation, also an instance of the relation , ie, \u201cpremise-relation implies surmise-relation\u201d, if, from a declaration \u201csubject premise-relation object\u201d, one may infer \u201csubject surmise-relation object\u201d. In a model of family relations, consider the relations has-brother and has-sibling. Here, has-brother implies has-sibling; i.e., in case Sally has-brother Bill, we may infer Sally has-sibling Bill.","Referring now to . In this embodiment of an implies meta-association I provide a relation instance implies , with an associated service class implies .  depicts the specialization relationships for the meta-property implies . The service implies  is a specialization of the meta-association . The service implies  is dispatched on declarations such as \u201chas-brother implies has-sibling\u201d. On dispatch, the implies  creates an implies service class helper , which, in turn, is dispatched on declarations such as \u201cSally has-brother Bill\u201d. The implies helper  is a specialization of the helper . There is no object helper required for the implies .","The implies helper  has a member function dispatch .  illustrates the member function dispatch  from the class helper . A single declaration  is declared in a step , in which the subject  is provided by the subject  of the supplied declaration, the relation  is provided by the object , and the object  is provided by the object  of the supplied declaration.","Another useful meta-association is back-implication. A premise-relation back-implies a surmise-relation, ie, \u201cpremise-relation back-implies surmise-relation\u201d, if, from a declaration \u201csubject premise-relation object\u201d, one may infer \u201cobject surmise-relation subject\u201d. In a model of family relations, consider the relations has-mother and has-child. Here, has-mother back-implies has-child; i.e., in case Bill has-mother Anne, we may infer Anne has-child Bill.","Referring now to . In this embodiment of a back-implies meta-association I provide a relation instance back-implies , with an associated service class back-implies .  depicts the specialization relationships for the meta-association back-implies . The service back-implies  is a specialization of the meta-association . The service back-implies  is dispatched on declarations such as \u201chas-mother back-implies has-child\u201d. On dispatch, the back-implies  creates a service class helper , which, in turn, is dispatched on declarations such as \u201cBill has-mother Anne\u201d. The back-implies helper  is a specialization of the helper . There is no object helper required for the back-implies .","Referring now to . The back-implies helper  provides a member function dispatch .  illustrates the member function dispatch  from the class helper . A single declaration  is declared in a step , in which the subject  is provided by the object  of the supplied declaration, the relation  is provided by the object , and the object  is provided by the subject  of the supplied declaration.","Another useful meta-association is complementarity. A complimentee-relation complements a complementor-relation, ie, \u201ccomplimentee-relation complements complementor-relation\u201d, if, from a declaration \u201csubject complimentee-relation object\u201d, I may infer \u201cobject complementor-relation subject\u201d, and vice versa. For example, in a family relationships model, has-parent is complementary to has-child; if Bill has-parent Anne, then one may infer that Anne has-child Bill. Note that complementarity is commutative; formally \u201ccomplements is-commutative\u201d.","Referring now to . In this embodiment of a complements meta-association I provide a relation instance complements , with an associated service class complements .  depicts the specialization relationships for the meta-association complements . The complements  is a specialization of the meta-association . The complements  is dispatched on declarations such as \u201chas-child complements has-parent\u201d. On dispatch, the complements  creates a service class helper , which, in turn, is dispatched on declarations such as \u201cAnne has-child Bill\u201d. The complements helper  is a specialization of the helper . There is no object helper required for the complements , as long as the meta-property is-commutative  is declared for the complements . In the absence of the commutivity meta-property or its equivalent, an object helper may be used to provide equivalent behavior.","Referring now to . The complements helper  has a member function dispatch .  illustrates the member function dispatch  from the class helper . A single declaration  is declared in a step , in which the subject  is provided by the object  of the supplied declaration, the relation  is provided by the object , and the object  is provided by the subject  of the supplied declaration.","Another useful meta-association is distributivity. A distributor-relation distributes a distributed-relation, ie, \u201cdistributor-relation distributes distributed-relation\u201d, if, from declarations \u201csubject distributed-relation object\u201d and \u201cobject distributor-relation another-object\u201d, one may infer the declaration \u201csubject distributed-relation another-object\u201d. In the ongoing family model, observe that the relation has-sibling distributes the relation has-child, since, if Anne has-child Bill and Bill has-sibling Sally, then we may infer Anne has-child Sally.","Referring now to . In this embodiment of a distributes meta-association I provide a relation instance distributes , with an associated service class distributes .  depicts the specialization relationships for the meta-association distributes . The distributes  is dispatched on declarations such as \u201chas-sibling distributes has-child\u201d. On dispatch, the distributes  creates a service class subject helper , which, in turn, is dispatched on declarations such as \u201cSally has-sibling Bill\u201d, and a service class object helper , which, in turn, is dispatched on declarations such as \u201cAnne has-child Bill\u201d. The distributes subject helper  specializes the helper . The distributes object helper  specializes the helper .","Referring now to . The distributes subject helper  has a member function dispatch .  illustrates the member function dispatch  from the class subject helper . The member function dispatch  is invoked on declarations using the subject relation, eg, \u201cBill has-sibling Sally\u201d, in the current example. In a step , For each declaration  which uses the object relation object  (in our example, has-child) with object the subject of the supplied declaration (in our example, Bill), a declaration  is declared in a step , in which the subject  is provided by the subject  of the loop declaration, the relation  is provided by the object relation object , and the object  is provided by the object  of the supplied declaration. In the example, the loop step  might encounter \u201cAnne has-child Bill\u201d, from which \u201cAnne has-child Sally\u201d would be declared.","Referring now to . The distributes object helper  has a member function dispatch .  illustrates the member function dispatch  from the class object helper . The member function dispatch  is invoked on declarations using the distributes object relation, eg, \u201cAnne has-child Bill\u201d, in the current example. In a step , for each declaration  which uses the subject  (in our example, has-sibling) with subject the object of the supplied declaration (in our example, Bill), a declaration  is declared in a step , in which the subject  is provided by the subject  of the supplied declaration, the relation  is provided by the object relation subject , and the object  is provided by the object  of the loop declaration. In the example, the loop step  might encounter \u201cBill has-sibling Sally\u201d, from which \u201cAnne has-child Sally\u201d would be declared.","\u00a75.7.4 Meta Dispatcher","To make the meta-relations described above readily available, a specialization of the class dispatcher  is provided which incorporates the meta-relations and associated services. A class meta-dispatcher  derives from the dispatcher . A client dispatcher wishing to easily gain the use of the meta-relations need only derive itself from (i.e., specialize) the meta-dispatcher .",{"@attributes":{"id":"p-0603","num":"0873"},"figref":"FIG. 116","b":["5545","5545","2055","5550","5555","5560"]},"The class meta-dispatcher  provides member relations for convenient access to the meta-relations described above. A member is-commutative-relation , provides the meta-property is-commutative . A member is-transitive-relation , provides the meta-property transitive meta-property . A member complements-relation , provides the meta-association complements . A member implies-relation , provides the meta-association implies . A member back-implies-relation , provides the meta-association back-implies . A member distributes-relation , provides the meta-association distributes .","There are member services which are dispatched on declaration of meta-relations, corresponding to the meta-relation services described above. A member is-commutative-service , provides the is-commutative . A member is-transitive-service , provides the is-transitive . A member complements-service , provides the complements  . A member implies-service , provides the implies . A member back-implies-service , provides the back-implies . A member distributes-service , provides the distributes .",{"@attributes":{"id":"p-0606","num":"0876"},"figref":"FIG. 117","b":["5555","5545","5555","5545"]},"The relations members are obtained via the member function require-relation ; from the base class dispatcher ; text is supplied to indicate the meta-relation. The member is-commutative-relation  is initialized in a step  using the text \u201cis-commutative\u201d. The member is-transitive-relation  is initialized in a step  using the text \u201cis-transitive\u201d. The member complements-relation  is initialized in a step  using the text \u201ccomplements\u201d. The member implies-relation  is initialized in a step  using the text \u201cimplies\u201d. The member back-implies-relation  is initialized in a step  using the text \u201cback-implies\u201d. The member distributes-relation  is initialized in a step  using the text \u201cdistributes\u201d.","The service members require provision of appropriate relations at constructor time. The is-commutative-service  is initialized in a step  with the is-commutative-relation . The is-transitive-service  is initialized in a step  with the is-transitive-relation . The complements-service  is initialized in a step  with the complements-relation . The implies-service  is initialized in a step  with the implies-relation . The back-implies-service  is initialized in a step  with the back-implies-relation . The distributes-service  is initialized in a step  with the distributes-relation .","Finally, in the body of the meta-dispatcher constructor, the member complements-relation  is declared in a step  to have the is-commutative-relation  property.","\u00a75.8 Patent Classification Demonstration Applications","\u00a75.8.1 Introduction","I will now turn to a practical example of the use of declarative dispatch. The example is provision of a modest web site (collection of interlinked HTML pages) which integrates information abstracted from US PTO full-text patents, classification schedules and class definitions. This application processes a discourse discourse  representing patent and classification data and produces a hypertext collection including pages that summarize patents, classes, and subclasses.","The application uses a model of the patent and classification information, a family of generic services, and specializations of the generic services to provide particular instantiators, assignors, associators, and qualifiers. Instances of these specialized services are combined with particular relations and a model instance in a specialized dispatcher. The specialized dispatcher mediates the instantiation of a model instance from its representation as a discourse. The instantiated model then serves as a basis for generation of hypertext.","\u00a75.8.2 Model","Referring now to . Patents and their classification are representated by categories and associations that form a model .  illustrates categories and associations from the model  of patents and their classification. The model includes a category patent , a category class , a category subclass , and a category claim . There are additional categories to represent cross-references between classification elements. There are representations for a subclass-to-subclass cross-reference category ssref , a class-to-class cross-reference category ccref , and a subclass-to-class-reference category scref .",{"@attributes":{"id":"p-0613","num":"0883"},"figref":"FIG. 119","b":["5690","5695","5710","5730","5710","5695","5735"]},"A patent  may link to one or more subclass  in a plural association patent-has-subclass . A subclass  may link to a one or more patent  in a plural association subclass-has-patent .","A class  may link to one or more subclass  in a association class-has-subclass . A subclass  may link to a single class  in a singleton association subclass-has-class .","A ccref  may link to a single source class  in a singleton association ccref-has-source-class . A ccref  may link to a single target class  in a singleton association ccref-has-target-class . A class  may link to one or more ccref  in a plural association class-has-ccref .","A ssref  may link to a single source subclass  in a singleton association ssref-has-source-subclass . A ssref  may link to a single target subclass  in a singleton association ssref-has-target-subclass . A subclass  may link to one or more ssref  in a plural association subclass-has-ssref .","A scref  may link to a single source subclass  in a singleton association scref-has-source-subclass . A scref  may link to a single target class  in a singleton association scref-has-target-class . A subclass  may link to one or more scref  in a plural association subclass-has-scref .",{"@attributes":{"id":"p-0619","num":"0889"},"figref":"FIG. 120","b":["5690","5700","5705","5805","5705","5705","5810","5810","5705","5705","5815","5815"]},"Referring now to . In addition to categories and associations which link elements between and within categories, the model  incorporates assignment of textual data properties to elements drawn from categories. Such properties may be singular or potentially plural.  summarizes the patent  and claim  properties in the model.","For the category patent , there is a singular property number , representing the number assigned to the patent by the US PTO. There is a plural property inventors , representing one or more inventors associated with the patent. The singular patent property title  represents the patent's title. The singular patent property URI  represents the URI by which the patent's text may be retrieved from the US PTO. The singular patent property abstract  represents the abstract of the patent. The singular patent property assignee  represents the patent assignee. The patent property date  represents the singular date on which the patent issued. The patent filing property date  represents the singular date on which the patent was filed. The plural patent property summary  represents paragraphs from the summary section of the patent text. The plural patent property background  represents paragraphs from the background section of the patent text.","The category claim  has a plural property body  representing sections from the text of the claim.",{"@attributes":{"id":"p-0623","num":"0893"},"figref":"FIG. 122","b":["5700","5705","5715","5720","5725"]},"The category class  has several singular properties, including a property number  a property title , and an property application-search-URI . The class category has a plural class property definition .","The category subclass  has singular properties: a property number , a property title , and a property identifier  (incorporating class and subclass, eg, \/). A plural property subclass-definition  represents the definition. An additional singular property search-URI  provides a URI to obtain associated patents from the US PTO.","The cross-reference categories ssref , ccref , and scref  each have a singular body property: a property ssref-body , a property ccref-body , and a property scref-body , respectively, which contain explanatory text pertaining to the cross-references.","The model  also incorporates several qualifiers. These are boolean characteristics that distinguish particular elements of categories. For the category class  and the category patent , there is an is-primary qualifier which indicates whether the element under consideration is a primary element or a secondary element. Primary elements are selected for hypertext presentation on individual pages; nonprimary elements do not get individual hypertext pages.","The model  described thus far has been very generally characterized in terms of categories, associations, properties, and qualifiers. I will now turn to a concrete representation of the model  and its constituents as a module containing C++ classes.","Each category in the model  has a corresponding C++ class. In the classes, there are members which represent associations, properties and qualifiers. The class patent  corresponds to the category patent . The class claim  corresponds to the category claim . The class class  corresponds to the category class . The class subclass  corresponds to the category subclass . The class ccref  corresponds to the category ccref . The class scref  corresponds to the category scref . The class ssref  corresponds to the category ssref . The model  itself is also represented by a class model .","Referring now to . A class entity  is shared as a base class by the classes which represent categories.  depicts the class entity . This class has a single textual member eid . In the specialized dispatcher which will mediate instantiation of the model , there is a unique entity which is representative of each unique element drawn from any of the model categories. The member eid  provides access to the text associated with that unique entity, which is useful for diagnostic messages.",{"@attributes":{"id":"p-0631","num":"0901"},"figref":"FIG. 124","b":["5935","5695","5935","5975","5985","5935","5990","5730","5995","5740","6000","5820","6005","5825","6010","6015","6020","6025","6030","6035","5830","5835","5840","5845","5850","5855","6040","6045","5860","5865","6050"]},{"@attributes":{"id":"p-0632","num":"0902"},"figref":"FIG. 125","b":["5940","5710","5940","5975","6055","5940","6060","5735","6065","5870"]},{"@attributes":{"id":"p-0633","num":"0903"},"figref":"FIG. 126","b":["5945","5700","5945","5975","6070","5945","6075","5750","6080","5805","6085","5770","6090","6095","6100","5875","5880","5885","6105","5890","6110"]},{"@attributes":{"id":"p-0634","num":"0904"},"figref":"FIG. 127","b":["5950","5705","5950","5975","6115","5950","6120","5745","6125","5755","6130","5800","6135","5785","6140","5810","6145","5815","6150","6155","6160","5895","5900","5905","6165","5910","6170","5915"]},{"@attributes":{"id":"p-0635","num":"0905"},"figref":"FIG. 128","b":["5955","5720","5955","5975","6175","5955","6180","6185","5945","5760","5765","6190","5925"]},{"@attributes":{"id":"p-0636","num":"0906"},"figref":"FIG. 129","b":["5960","5725","5960","5975","6195","5960","6200","6205","5790","5795","6210","5930"]},{"@attributes":{"id":"p-0637","num":"0907"},"figref":"FIG. 130","b":["5965","5715","5965","5975","6215","5965","6220","6225","5950","5775","5780","6230","5920"]},{"@attributes":{"id":"p-0638","num":"0908"},"figref":"FIG. 131","b":["5970","5690","5970","5935","5945","5950","6235","5935","6240","5945","6245","5950","5970","5690"]},"\u00a75.8.3 Generic Services","\u00a75.8.3.1 Introduction","An elementary model  for patents and their classification has been presented above. This model was first presented in an abstract formulation including categories, associations, properties and qualifiers. Then a realization of the abstract model using C++ classes was provided. The C++ realization of the model represents a sort of work-piece, which will be instantiated (i.e., manufactured) from a discourse  under the mediation of a dispatcher and associated services. The instantiation of a model instance from a discourse relies on actions undertaken by associated services; the services are dispatched in response to declarations received in the discourse.","The abstract formulation of the model  provides a guide to the organization of the services which will ultimately operate on the model. The presentation of the model as a framework of categories, associations, properties and qualifiers reflects a natural partition of the actions which must be undertaken to instantiate a model instance. Categories correspond to instantiation and management of related elements. Associations correspond to management of members which are drawn from the categories. Properties correspond to management of textual members. Qualifiers correspond to management of boolean members.","Common processing elements for categories, associations, properties, and qualifiers are thus abstracted into generic services, which will next be described. The generic services pertaining to categories are collected in a template class instantiator . Generic services for associations, properties, and qualifiers are collected in a template class associator , a template class assignor , and a template class qualifier , respectively. These generic services are then specialized to provide the precise processing requirements for particular model elements; these will be considered below.","\u00a75.8.3.2 Generic Instantiator",{"@attributes":{"id":"p-0642","num":"0912"},"figref":"FIG. 132","b":["6250","6250","5690","5935","5950","5945"]},"The generic instantiator  specializes the class service  in a derivation . One purpose of the instantiator is to maintain an association between instances of the entity  and instances from the class which represents its category. This representation is maintained by a member map , which efficiently provides a class instance, if any, for a supplied entity . In a constructor , a relation  is provided; this relation is provided in turn to the constructor  in the base class service . A destructor  is virtual, in acknowledgement that this is an abstract base class. The destructor  is empty.","The instantiator  overrides the virtual member function dispatch  which is provided in the base class service . The member function dispatch  is provided with a declaration  argument. In a member function dispatch , the member function instantiate  is invoked with the subject  of the provided declaration . The member function instantiate  is considered in detail below; the purpose of the member function is to provide a T in correspondence with the supplied entity. This instantiation may involve constructing a new T or deploying an existing T from a cache.","The instantiator  may be directly utilized with a category for which no side effects are required on instantiation. When instantiation side effects are required (for example, which the newly instantiated element should be installed in a collection), a child class may be derived. This child class may override the virtual member function member function new-instantiation , which, by default, is empty.",{"@attributes":{"id":"p-0646","num":"0916"},"figref":"FIG. 133","b":["6295","6250","2035","6305","6310","6315","5975","6320","6275","6325","6300","6330"]},"\u00a75.8.3.3 Generic Associator",{"@attributes":{"id":"p-0647","num":"0917"},"figref":"FIG. 134","b":["6255","6255"]},"The associator  specializes the class service  in a derivation  The associator  maintains a member ui  and a member vi  to an instance of the instantiator  for both of the template parameter classes. In a constructor , the associators must be provided, along with the relation  that characterizes the association. The relation is passed to the constructor  for the base class service .","The associator  specializes the member function dispatch  which is provided by its base class service . The specialized member function dispatch  is considered in more detail, below. The associator  has an member function associate , which is pure virtual. Specialized associators which derive from the associator  must provide this member function, in which the dispatched declaration  on a pair of instances of the entity  has been recast as a notification of linkage between two instances from the classes representing the categories which are linked by the underlying abstract association.",{"@attributes":{"id":"p-0650","num":"0920"},"figref":"FIG. 135","b":["6355","6255","2150","2045","2040","6340","6345","6365","6370","6295","2100","2110","6360","6375"]},"\u00a75.8.3.4 Generic Assignor",{"@attributes":{"id":"p-0651","num":"0921"},"figref":"FIG. 136","b":["6260","6260","6260"]},"The assignor  specializes the class service  in a derivation  The assignor maintains a member ui , of instantiator  for the template parameter class U. In a constructor , the instantiator must be provided, along with the relation  that characterizes the property. The supplied instantiator is reserved in the member ui . The relation is passed to the constructor  for the base class service .","The assignor  specializes the member function dispatch  which is provided by its base class service . The specialized member function dispatch  is considered in more detail, below. The assignor  has a member function assign , which is pure virtual. Specialized assignors which derive from the assignor  must provide this member function, in which the dispatched declaration  on a pair of instances of the entity  has been recast as a notification of the availability of textual property data associated with an instance from the class representing the category to which the underlying abstract property is bound.",{"@attributes":{"id":"p-0654","num":"0924"},"figref":"FIG. 137","b":["6395","6260","6395","2150","2045","2040","6385","6405","6295","2100","6410","6415","2110","6400","6420"]},"\u00a75.8.3.5 Generic Qualifier",{"@attributes":{"id":"p-0655","num":"0925"},"figref":"FIG. 138","b":["6265","6265"]},"The qualifier  specializes the class service  in a derivation . The qualifier  has a member ui , of class instantiator  for the template parameter class U. In a constructor , the instantiator must be provided, along with the relation  that characterizes the property. The relation is passed to the constructor  for the base class service .","The qualifier  specializes the member function dispatch  which is provided by its base class service . The specialized member function dispatch  is considered in more detail, below. The qualifier  has a member function qualify , which is pure virtual. Specialized qualifiers which derive from the qualifier  must provide this member function, in which the dispatched declaration  has been recast as a notification of the qualification of an instance from the class representing the category to which the underlying abstract quality is bound.",{"@attributes":{"id":"p-0658","num":"0928"},"figref":"FIG. 139","b":["6440","6265","6440","2150","2045","2040","6430","6450","6295","2100","6445","6455"]},"The class instantiator  is specialized to a collection of instantiator species . The class associator  is specialized to a collection of associator species . The class assignor  is specialized to a collection of assignor species . The class qualifier  is specialized to a collection of qualifier species .","\u00a75.8.4 Instantiators",{"@attributes":{"id":"p-0660","num":"0930"},"figref":["FIG. 140","FIG. 140"],"b":["6460","6250","6250","2045","6250","6300"]},"All the specialized instantiators have a constructor which requires a relation , which is a characteristic relation for the category, and an instance of the class model , which may (but need not) be utilized in the responding to the member function notification new-instantiation .","A class patent-instantiator  provides instantiation service for the category patent , as represented by the class patent . The patent-instantiator  specializes the member function new-instantiation  to append a newly instantiated instance of the patent  to the owner sequence patents  in the model . This permits the model  to manage the memory allocated for the instance.","A class claim-instantiator  provides instantiation service for the category claim , as represented by the class claim . There's no action for the claim instantiator. The allocated memory for the claim element is managed by the patent patent  to which it is associated.","A class class-instantiator  provides instantiation service for the category class , as represented by the class class . The class-instantiator  specializes the member function new-instantiation  to append a newly instantiated instance of the class  to the owner sequence classes  in the model . This permits the model  to manage the memory allocated for the instance.","A class subclass-instantiator  provides instantiation service for the category subclass , as represented by the class subclass . The subclass-instantiator  specializes the member function new-instantiation  to append a newly instantiated instance of the subclass  to the owner sequence subclasses  in the model . This permits the model  to manage the memory allocated for the instance.","A class ccref-instantiator  provides instantiation service for the category ccref , as represented by the class ccref . There's no action for the ccref instantiator. The allocated memory for the ccref element is managed by the class  to which it is associated.","A class scref-instantiator  provides instantiation service for the category scref , as represented by the class scref . There's no action for the scref instantiator. The allocated memory for the scref element is managed by the class  to which it is associated.","A class ssref-instantiator  provides instantiation service for the category ssref , as represented by the class ssref . There's no action for the ssref instantiator. The allocated memory for the ssref element is managed by the subclass  to which it is associated.","\u00a75.8.5 Associators",{"@attributes":{"id":"p-0669","num":"0939"},"figref":"FIG. 141","b":["6465","6255","6255","6360","6255"]},"The specialized associator independent-claim  associates a subject instance of the patent  with an object instance of the claim . The associated action appends the object claim to the subject patent's independent-claims .","The specialized associator patent-subclass  associates a subject instance of the patent  with an object instance of the subclass . The associated action appends the object subclass to the subject patent's subclasses .","The specialized associator claim-patent  associates a subject instance of the claim  with an object instance of the patent . The associated action assigns the object patent to the subject claims's patent .","The specialized associator class-subclass  associates a subject instance of the class  with an object instance of the subclass . The associated action appends the object subclass to the subject class's subclasses .","The specialized associator ccref  associates a subject instance of the class  with an object instance of the ccref . The associated action appends the object ccref to the subject class's ccrefs .","The specialized associator mainline-subclass  associates a subject instance of the class  with an object instance of the subclass . The associated action appends the object subclass to the subject class's mainline-subclasses .","The specialized associator parent  associates a subject instance of the subclass  with an object instance of the subclass . The associated action assigns the object subclass to the subject subclass's parent .","The specialized associator subclass-patent  associates a subject instance of the subclass  with an object instance of the patent . The associated action appends the object patent to the subject subclass's patents .","The specialized associator child  associates a subject instance of the subclass  with an object instance of the subclass . The associated action appends the object subclass to the subject subclass's children .","The specialized associator subclass-class  associates a subject instance of the subclass  with an object instance of the class . The associated action assigns the object class to the subject subclass's class .","The specialized associator scref  associates a subject instance of the subclass  with an object instance of the scref . The associated action appends the object scref to the subject subclass's screfs .","The specialized associator ssref  associates a subject instance of the subclass  with an object instance of the ssref . The associated action appends the object ssref to the subject subclass's ssrefs .","The specialized associator ccref-source-class  associates a subject instance of the ccref  with an object instance of the class . The associated action assigns the object class to the subject ccrefs's source-class .","The specialized associator ccref-target-class  associates a subject instance of the ccref  with an object instance of the class . The associated action assigns the object class to the subject ccref's target-class .","The specialized associator scref-source-subclass  associates a subject instance of the scref  with an object instance of the subclass . The associated action assigns the object subclass to the subject scref's source-subclass .","The specialized associator scref-target-class  associates a subject instance of the scref  with an object instance of the class . The associated action assigns the object class to the subject scref's target-class .","The specialized associator ssref-source-subclass  associates a subject instance of the ssref  with an object instance of the subclass . The associated action assigns the object subclass to the subject ssrefs's source-subclass .","The specialized associator ssref-target-subclass  associates a subject instance of the ssref  with an object instance of the subclass . The associated action assigns the object subclass to the subject ssref's target-subclass .","\u00a75.8.6 Assignors",{"@attributes":{"id":"p-0688","num":"0958"},"figref":"FIG. 142","b":["6470","6260","6260","6400","6260"]},"The specialized assignor patent-number  makes textual data available to an instance of the patent . The assignor action assigns the supplied text to the patent's number .","The specialized assignor patent-title  makes textual data available to an instance of the patent . The assignor action assigns the supplied text to the patent's title .","The specialized assignor patent-inventor  makes textual data available to an instance of patent . The assignor action appends the supplied text to the patent's inventors .","The specialized assignor patent-filing-date  makes textual data available to an instance of the patent . The assignor action assigns the supplied text to the patent's filing-date .","The specialized assignor patent-date  makes textual data available to an instance of the patent . The assignor action assigns the supplied text to the patent's date .","The specialized assignor patent-URI  makes textual data available to an instance of the patent . The assignor action assigns the supplied text to the patent's URI .","The specialized assignor patent-abstract  makes textual data available to an instance of patent . The assignor action assigns the supplied text to the patent's abstract .","The specialized assignor patent-background  makes textual data available to an instance of patent . The assignor action appends the supplied text to the patent's background .","The specialized assignor patent-summary  makes textual data available to an instance of the patent . The assignor action appends the supplied text to the patent's summary .","The specialized assignor patent-assignee  makes textual data available to an instance of the patent . The assignor action assigns the supplied text to the patent's assignee .","The specialized assignor claim-chunk  makes textual data available to an instance of the claim . The assignor action appends the supplied text to the claim's body .","The specialized assignor class-number  makes textual data available to an instance of the class . The assignor action assigns the supplied text to the class's number .","The specialized assignor class-title  makes textual data available to an instance of the class . The assignor action assigns the supplied text to the class's title .","The specialized assignor class-URI  makes textual data available to an instance of the class . The assignor action assigns the supplied text to the class's application-search-URI .","The specialized assignor class-definition  makes textual data available to an instance of the class . The assignor action appends the supplied text to the class's class-definition .","The specialized assignor subclass-number  makes textual data available to an instance of the subclass . The assignor action assigns the supplied text to the subclass's number .","The specialized assignor subclass-title  makes textual data available to an instance of the subclass . The assignor action assigns the supplied text to the subclass's title .","The specialized assignor subclass-identifier  makes textual data available to an instance of the subclass . The assignor action assigns the supplied text to the subclass's id .","The specialized assignor subclass-definition  makes textual data available to an instance of the subclass . The assignor action appends the supplied text to the subclass's definition .","The specialized assignor subclass-patent-search-URI  makes textual data available to an instance of the subclass . The assignor action assigns the supplied text to the subclass's patent-search-uri .","The specialized assignor ccref-body  makes textual data available to an instance of the ccref . The assignor action assigns the supplied text to the ccref's body .","The specialized assignor scref-body  makes textual data available to an instance of the scref . The assignor action assigns the supplied text to the scref's body .","The specialized assignor ssref-body  makes textual data available to an instance of the ssref . The assignor action assigns the supplied text to the ssref's body .","\u00a75.8.7 Qualifiers",{"@attributes":{"id":"p-0712","num":"0982"},"figref":"FIG. 143","b":["6475","6265","6265","6445","6265"]},"The specialized qualifier primary-patent  qualifies an instance of the patent . The qualifier action assigns a nonzero value to the patent's is-primary .","The specialized qualifier primary-class  qualifies an instance of the class . The qualifier action assigns a nonzero value to the class's is-primary .","\u00a75.8.8 Dispatcher","\u00a75.8.8.1 Introduction","Referring now to . A specialized class dispatcher  acts as a host for the instantiation of a specialized model from a discourse. The specialized dispatcher  is derived from a meta-dispatcher , whereby it inherits the services and behavior of the dispatcher  and the embedded meta-relations and services of the meta-dispatcher , including the meta-relation implies , the meta-relation complements , and the meta-relation back-implies .","Although the dispatcher  is a bulky class, including many relations and services, it's not a complex class, as it has virtually no specific behavior other than that required to instantiate its components. It serves as an aggregrator for the diverse collection of elements that function together to instantiate a specific model from a discourse.  depicts, in broad outline, elements of the class dispatcher . The dispatcher  specializes the meta-dispatcher  in a derivation . The majority of members are relations and services, the details of which are considered below. I have collected the relations and services in the dispatcher  into related groups. The relation member groups include a group patent relations , a group claim relations , a group class relations , a group subclass relations , and a group cross-reference relations . There is a group instantiators , a collection of instantiators. The service member groups include a group patent services , a group claim services , a group class services , a group subclass services , a group ccref services , a group scref services , and a group ssref services .","The dispatcher  also includes a constructor , which is responsible for initialization of the relation and service members as well as provision of declarations which indicate meta-relations in force amongst the relations. A member model , of model , is the product to be instantiated. A destructor  will delete an unrelinquished model .","\u00a75.8.8.2 Relation Members","The relations which are utilized by the dispatcher  are characterized by their member name and the text associated with the relation; the relation text provides the coupling between the dispatcher  and the discourse . All the relations are instances of the class relation . The relations are divided according to the subject model category; I will consider patent relations  corresponding to the category patent , claim relations  corresponding to the category claim , class relations  corresponding to the category class , subclass relations  corresponding to the category subclass , and cross-reference relations  corresponding to the category ccref , the category scref , and the category ssref .",{"@attributes":{"id":"p-0719","num":"0989"},"figref":"FIG. 145","b":["6740","6730","6740","6730","5695","6730","2050","6820","6825","6830","6835","6840","6845","6850","6855","6860","6865","6870","6875","6880","6885"]},{"@attributes":{"id":"p-0720","num":"0990"},"figref":"FIG. 146","b":["6745","6730","6745","6730","5710","6730","2050","6890","6895","6900"]},{"@attributes":{"id":"p-0721","num":"0991"},"figref":"FIG. 147","b":["6750","6730","6750","6730","5700","6730","2050","6905","6910","6915","6920","6925","6930","6935","6940","6945"]},{"@attributes":{"id":"p-0722","num":"0992"},"figref":"FIG. 148","b":["6755","6730","6755","6730","5705","6730","2050","6950","6955","6960","6965","6970","6975","6980","6985","6990","6995","7000","7005"]},{"@attributes":{"id":"p-0723","num":"0993"},"figref":"FIG. 149","b":["6760","6730","6760","6730","5720","5725","5715","6730","2050","7010","7015","7020","7025","7030","7035","7040","7045","7050","7055","7060","7065"]},"\u00a75.8.8.3 Instantiator Members",{"@attributes":{"id":"p-0724","num":"0994"},"figref":"FIG. 150","b":["6765","6730","6730","7070","6480","6820","7075","6485","6890","7080","6490","6905","7085","6495","6950","7090","6500","7010","7095","6505","7030","7100","6510","7050"]},"\u00a75.8.8.4 Service Members",{"@attributes":{"id":"p-0725","num":"0995"},"figref":"FIG. 151","b":["6770","6730","6770"]},"A member patent-is-primary-qualifier  is an instance of the primary-patent . The associated relation is the patent-is-primary-relation . The service has associated instantiator patent-instantiator .","A member patent-has-number-assignor  is an instance of the patent-number . The associated relation is the patent-has-number-relation . The service has associated instantiator patent-instantiator .","A member patent-has-title-assignor  is an instance of the patent-title . The associated relation is the patent-has-title-relation . The service has associated instantiator patent-instantiator .","A member patent-has-inventor-assignor  is an instance of the patent-inventor . The associated relation is the patent-has-inventor-relation . The service has associated instantiator patent-instantiator .","A member patent-has-subclass-associator  is an instance of the patent-subclass . The associated relation is the patent-has-subclass-relation . The service has associated instantiators patent-instantiator  and subclass-instantiator .","A member patent-has-filing-date-assignor  is an instance of the patent-filing-date . The associated relation is the patent-has-filing-date-relation . The service has associated instantiator patent-instantiator .","A member patent-has-date-assignor  is an instance of the patent-date . The associated relation is the patent-has-date-relation . The service has associated instantiator patent-instantiator .",{"@attributes":{"id":"p-0733","num":"1003"},"figref":"FIG. 152","b":["6770","6730","7140","6650","6860","7070"]},"A member patent-has-abstract-assignor  is an instance of the patent-abstract . The associated relation is the patent-has-abstract-relation . The service has associated instantiator patent-instantiator .","A member patent-has-background-paragraph-assignor  is an instance of the patent-background . The associated relation is the patent-has-background-paragraph-relation . The service has associated instantiator patent-instantiator .","A member patent-has-summary-paragraph-assignor  is an instance of the patent-summary . The associated relation is the patent-has-summary-paragraph-relation . The service has associated instantiator patent-instantiator .","A member patent-has-independent-claim-associator  is an instance of the independent-claim . The associated relation is the patent-has-independent-claim-relation . The service has associated instantiators patent-instantiator  and claim-instantiator .","A member patent-has-uri-assignor  is an instance of the patent-URI . The associated relation is the patent-has-uri-relation . The service has associated instantiator patent-instantiator .",{"@attributes":{"id":"p-0739","num":"1009"},"figref":"FIG. 153","b":["6775","6730","6775"]},"A member claim-has-patent-associator  is an instance of the claim-patent . The associated relation is the claim-has-patent-relation . The service has associated instantiators claim-instantiator  and patent-instantiator .","A member claim-has-chunk-assignor  is an instance of the claim-chunk . The associated relation is the claim-has-chunk-relation . The service has associated instantiator claim-instantiator .",{"@attributes":{"id":"p-0742","num":"1012"},"figref":"FIG. 154","b":["6780","6730","6780"]},"A member class-is-primary-qualifier  is an instance of the primary-class . The associated relation is the class-is-primary-relation . The service has associated instantiator class-instantiator .","A member class-has-number-assignor  is an instance of the class-number . The associated relation is the class-has-number-relation . The service has associated instantiator class-instantiator .","A member class-has-title-assignor  is an instance of the class-title . The associated relation is the class-has-title-relation . The service has associated instantiator class-instantiator .","A member class-has-subclass-associator  is an instance of the class-subclass . The associated relation is the class-has-subclass-relation . The service has associated instantiators class-instantiator  and subclass-instantiator .","A member class-has-ccref-associator  is an instance of the ccref . The associated relation is the class-has-ccref-relation . The service has associated instantiators class-instantiator  and ccref-instantiator .","A member class-has-mainline-subclass-associator  is an instance of the mainline-subclass . The associated relation is the class-has-mainline-subclass-relation . The service has associated instantiators class-instantiator  and subclass-instantiator .","A member class-has-definition-paragraph-assignor  is an instance of the class-definition . The associated relation is the class-has-definition-paragraph-relation . The service has associated instantiator class-instantiator .","A member class-has-application-search-uri-assignor  is an instance of the class-URI . The associated relation is the class-has-application-search-uri-relation . The service has associated instantiator class-instantiator .",{"@attributes":{"id":"p-0751","num":"1021"},"figref":"FIG. 155","b":["6785","6730","6785"]},"A member subclass-has-number-assignor  is an instance of the subclass-number . The associated relation is the subclass-has-number-relation . The service has associated instantiator subclass-instantiator .","A member subclass-has-title-assignor  is an instance of the subclass-title . The associated relation is the subclass-has-title-relation . The service has associated instantiator subclass-instantiator .","A member subclass-has-patent-search-uri-assignor  is an instance of the subclass-patent-search-URI . The associated relation is the subclass-has-patent-search-uri-relation . The service has associated instantiator subclass-instantiator .","A member subclass-has-parent-associator  is an instance of the parent . The associated relation is the subclass-has-parent-relation . The service has associated instantiators subclass-instantiator  and subclass-instantiator .","A member subclass-has-id-assignor  is an instance of the subclass-identifier . The associated relation is the subclass-has-id-relation . The service has associated instantiator subclass-instantiator .","A member subclass-has-definition-paragraph-assignor  is an instance of the subclass-definition . The associated relation is the subclass-has-definition-paragraph-relation . The service has associated instantiator subclass-instantiator .","A member subclass-has-class-associator  is an instance of the subclass-class . The associated relation is the subclass-has-class-relation . The service has associated instantiators subclass-instantiator  and class-instantiator .","A member subclass-has-child-associator  is an instance of the child . The associated relation is the subclass-has-child-relation . The service has associated instantiators subclass-instantiator  and subclass-instantiator .",{"@attributes":{"id":"p-0760","num":"1030"},"figref":"FIG. 156","b":["6785","6730","7260","6550","6995","7085","7070"]},"A member subclass-has-scref-associator  is an instance of the scref . The associated relation is the subclass-has-scref-relation . The service has associated instantiators subclass-instantiator  and scref-instantiator .","A member subclass-has-ssref-associator  is an instance of the ssref . The associated relation is the subclass-has-ssref-relation . The service has associated instantiators subclass-instantiator  and ssref-instantiator .",{"@attributes":{"id":"p-0763","num":"1033"},"figref":"FIG. 157","b":["6790","6730","6790"]},"A member ccref-has-source-class-associator  is an instance of the ccref-source-class . The associated relation is the ccref-has-source-class-relation . The service has associated instantiators ccref-instantiator  and class-instantiator .","A member ccref-has-target-class-associator  is an instance of the ccref-target-class . The associated relation is the ccref-has-target-class-relation . The service has associated instantiators ccref-instantiator  and class-instantiator .","A member ccref-has-body-assignor  is an instance of the ccref-body . The associated relation is the ccref-has-body-relation . The service has associated instantiator ccref-instantiator .",{"@attributes":{"id":"p-0767","num":"1037"},"figref":"FIG. 158","b":["6795","6730","6795"]},"A member scref-has-source-subclass-associator  is an instance of the scref-source-subclass . The associated relation is the scref-has-source-subclass-relation . The service has associated instantiators scref-instantiator  and subclass-instantiator .","A member scref-has-target-class-associator  is an instance of the scref-target-class . The associated relation is the scref-has-target-class-relation . The service has associated instantiators scref-instantiator  and class-instantiator .","A member scref-has-body-assignor  is an instance of the scref-body . The associated relation is the scref-has-body-relation . The service has associated instantiator scref-instantiator .",{"@attributes":{"id":"p-0771","num":"1041"},"figref":"FIG. 159","b":["6800","6730","6800"]},"A member ssref-has-source-subclass-associator  is an instance of the ssref-source-subclass . The associated relation is the ssref-has-source-subclass-relation . The service has associated instantiators ssref-instantiator  and subclass-instantiator .","A member ssref-has-target-subclass-associator  is an instance of the ssref-target-subclass . The associated relation is the ssref-has-target-subclass-relation . The service has associated instantiators ssref-instantiator  and subclass-instantiator .","A member ssref-has-body-assignor  is an instance of the ssref-body . The associated relation is the ssref-has-body-relation . The service has associated instantiator ssref-instantiator .","\u00a75.8.8.5 Declarations","The dispatcher  provides relations and services suitable for instantiation of a patent\/class model from a discourse. In addition to the relations and services described above, the specialized dispatcher, in its constructor, provides declarations which indicate meta-relations in effect amongst the model's relations.",{"@attributes":{"id":"p-0776","num":"1046"},"figref":"FIG. 160","b":["6805","6730"]},"In the declaration , the subject class-has-mainline-subclass-relation  is declared in meta-association implies  with the object class-has-mainline-subclass-relation .","In the declaration , the subject class-has-subclass-relation  is declared in meta-association complements  with the object class-has-subclass-relation .","In the declaration , the subject ccref-has-source-class-relation  is declared in meta-association complements  with the object ccref-has-source-class-relation .","In the declaration , the subject subclass-has-parent-relation  is declared in meta-association complements  with the object subclass-has-parent-relation .","In the declaration , the subject subclass-has-patent-relation  is declared in meta-association complements  with the object subclass-has-patent-relation .","In the declaration , the subject subclass-has-scref-relation  is declared in meta-association complements  with the object subclass-has-scref-relation .","In the declaration , the subject subclass-has-ssref-relation  is declared in meta-association complements  with the object subclass-has-ssref-relation .","In the declaration , the subject patent-has-independent-claim-relation  is declared in meta-association back-implies  with the object patent-has-independent-claim-relation .","\u00a75.8.9 Discourse","In the model , relations and services pertaining to a model of US patents and their classification have been described. Now I turn to some excerpts of discourse  that are compatible with the model .","Referring now to . U.S. Pat. No. 5,664,177 may be characterized by a discourse .  shows excerpts from the discourse .","Referring now to . The class  schedule may be characterized by a discourse instance .  depicts excerpts from the discourse instance .","Referring now to . The class  definitions may be characterized by a discourse instance .  depicts excerpts from the discourse instance .","\u00a75.8.10 Generators","After a instance of the model  has been instantiated from a discourse , the generation of HTML pages to represent patents, classes, and subclasses is a straightforward exercise which does not present any particular challenge to one skilled in the art. Indeed, one important benefit of declarative dispatch is that availability of a convenient, fully instantiated model makes the generation of output products such as HTML easy and pleasant.","I will thus deal briskly with the generation of HTML. There are four HTML generators in use this embodiment: a function patent generator , a function class generator , a function subclass generator , and a function index generator . I will consider them in turn.",{"@attributes":{"id":"p-0791","num":"1061"},"figref":"FIG. 164","b":["7375","7375","5935","2610","5935","7395","7400","7405","7410","7415","7420","7425","7430","7435","7440","7445","7450","7455","7460","7465"]},{"@attributes":{"id":"p-0792","num":"1062"},"figref":"FIG. 165","b":["7380","7380","5945","2610","5945","7470","7475","7480","7485","7490","7495","7500","7505"]},{"@attributes":{"id":"p-0793","num":"1063"},"figref":"FIG. 166","b":["7385","7385","5950","2610","5950","7510","7515","7520","7525","7530","7535","7540","7545","7550","7555","7560"]},{"@attributes":{"id":"p-0794","num":"1064"},"figref":"FIG. 167","b":["7390","7390","5970","2610","5970","7565","7570","7575","7580","7585","7590"]},"\u00a75.8.11 Applications","The entire process whereby a discourse  specifying an instance of the model  is processed to generate HTML is mediated by several command-line applications. These applications include an application patent generator , an application class generator  (which also mediates generation of subclass pages), and an application index generator .",{"@attributes":{"id":"p-0796","num":"1066"},"figref":"FIG. 168","b":["7595","7595","7610","6730","7615","2615","7620","7625","7630","6730","7635","5690","6730","5935","5690","7640","7375","7645","7650"]},{"@attributes":{"id":"p-0797","num":"1067"},"figref":"FIG. 169","b":["7600","7600","7655","6730","7660","2615","7665","7670","7675","6730","7680","5690","6730","7685","5945","5690","7380","7690","7695","5950","5945","7700","7385","7705","7710"]},{"@attributes":{"id":"p-0798","num":"1068"},"figref":"FIG. 170","b":["7605","7605","7715","6730","7720","2615","7725","7730","7735","6730","7740","5690","6730","7390","7745","7750"]},"Referring now to . Patent HTML  is generated by the patent generator .  shows excerpts from the HTML , as formatted by the text-based browser lynx.","Referring now to . Class HTML  is generated by the class generator .  shows excerpts from the HTML , as formatted by the text-based browser lynx.","Referring now to . Subclass HTML  is generated by the class generator .  shows excerpts from the HTML , as formatted by the text-based browser lynx.","Referring now to . Index HTML  is generated by the index generator .  shows excerpts from the HTML , as formatted by the text-based browser lynx.","Invariant elements for declarative dispatch comprise the entity , the relation , the declaration , and the service . In a minimal embodiment, there is nothing more than means for processing a declaration by dispatch to services. More particularly, consider a declaration , comprising a has-subject  (drawn from the instances of the entity ), a has-relation  (drawn from the instances of the relation ), and, optionally, an has-object , (drawn from the instances of the entity ). Suppose the has-relation  has one or more associated has-service , drawn from the instances of the service . Then declarative dispatch entails notification of each associated service of the has-relation .","Consider the association of instances of the service  with instances of the relation . A relation may have zero, one, or many associated services. In the dispatcher  disclosed above, a service has exactly one associated relation. In an alternative embodiment a service might associate with more than one relation.","The means for the association of services to a relation may also be provided by alternative embodiments. In the dispatcher , a relation maintains a sequence of associated services, permitting a service to be added in constant time, but requiring linear time to delete a service, Such a sequence may be provided by an array or linked list. The use of a sequence also makes it easy to ensure that services are dispatched in the order they were attached, which may be useful in some situations. In an alternative embodiment, a relation may maintain a set of services, permitting logarithmic time to delete a service, but requiring logarthmic time to add a service, and also probably sacrificing the orderly dispatch of services. Rather than each relation maintaining its own sequence of services, a central collection could be maintained in which relations are paired with sequences or individual services. This would incur additional costs to access the services associated with a relation but would permit individual relations to be simpler.","There are many alternative embodiments to the use of a triple of skip-lists in the dispatcher . Declarations could be distributed amongst their relations; trees or hash tables could be used in lieu of skip-lists. Declarations could be distributed to entities, making use of maps from relations to collections of subjects and\/or objects. A multiply linked mesh where each declaration maintained links to successor and predecessor declarations in the various orderings could be used. Space devoted to maintaining secondary data structure (e.g., the relation-object-declarations  in the dispatcher ) could be saved at the cost of performing linear sweeps through primary data structures.","In a minimalist embodiment of declarative dispatch, there is no centralized record of extant declarations. The maintenence of such a record is relatively costly; on the other hand, the benefits of ensuring that a particular declaration is dispatched at most once are quite substantial. In the dispatcher , the collection of extant declarations is maintained. Alternative embodiments may forego such a record; individual services may keep partial records as necessary, or a monitor may be utilized to maintain a partial or complete record of extant declarations. In a minimalist embodiment, however, unless special arrangements are made, multiple identical declarations will entail multiple dispatches.","Another aspect of the dispatcher  which need not be provided by an alternative embodiment is the provision of means for iteration of extant declarations in whole or in part. In the absence of a record of extant declarations, the provision of iteration requires other arrangements. In one alternative embodiment, the entities and relations themselves may maintain records of declarations in which they participate, either directly as collections of declarations, or indirectly in consequence of special data structures that take advantage of redundancies. A collection of declarations all sharing the same subject may be represented as a collection of relation, object pairs. Similarly, pairs may be used for declarations with common relations and objects.","The treatment of relations as specialized entities in the dispatcher  may be omitted in an alternative embodiment. This omission permits some simplifications in processing entities, where relations must be specially handled. However, the meta-relations of the particular embodiment would be unavailable.","Another aspect of the dispatcher  which need not be provided by an alternative embodiment is the queuing of declarations for dispatch in the order received. In general, and particularly where meta-relations are in use, service dispatch may give rise to declarations. In the dispatcher , declarations which are nested in dispatches are queued and dispatched in the order received. Alternatively, they could be dispatched recursively. The distinction is comparable to depth-first versus breadth-first search. In the dispatcher , the dispatch is effectively breadth-first. Breadth-first dispatch ensures that all the services which are to be dispatched on a particular declaration are dispatched before any additional declarations are processed. In complex situations, especially involving meta-relations, the breadth-first dispatch may be perceived as more predictable; hence justifying the additional complexity incurred by queueing. However, an alternative embodiment might decline this tradeoff.","The XML and text-based representations of discourse could be easily augmented with other representations. One obvious generalization would be to store relations, entities and declarations in a relational database. A variety of simple data schemas would suffice. Another potentially useful representation would be to provide a binary representation in which repetitions of associated text to reference entities could be replaced by binary numerical identifiers for those entities, thereby saving space for storage and also potentially permitting faster loading (since text-based lexicon lookups could be replaced by array-like index offsets).","In an alternative embodiment of the declaration , a serial number might be provided which could be used to reconstruct the order of dispatch. This would simplify and generalize archival processing.","The declaration  could itself specialize the entity . This adds significant complexity to various aspects of processing, however it also permits very interesting meta-analysis such as tracking the basis for inference of inferred declarations. Treating declarations as entities permits a high degree of self reference and quoting; declarations such as \u201cBill said Kathy was content\u201d can be natively modeled with the declaration \u201cKathy was content\u201d as the object of the declaration with subject \u201cBill\u201d and relation \u201csaid\u201d."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1","b":"1000"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2","b":["1020","1000"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3","b":["1020","1000"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4","b":["1100","1095"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5","b":["1110","1105"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6","b":["1120","1115"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7","b":["1145","1125"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8","b":"1245"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9","b":"1350"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 10","FIG. 9"],"b":"1355"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 11","FIG. 10"],"b":["1360","1355"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 12","b":"1365"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 13","b":["1415","1365"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 14","b":"1465"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 15","b":["1470","1465"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 16","b":["1490","1380"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 17","b":["1500","1370","1375"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 18","b":["1505","1370","1515"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 19","b":["1525","1415"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 20","b":["1640","1465","1490"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 21","b":"1700"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 22","b":["1720","1700","1710"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 23","b":["1705","1700"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 24","b":["1895","1700"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 25","b":["1705","1700"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 26","b":"2035"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 27","b":"2040"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 28","b":"2045"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 29","b":"2050"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 30","b":"2055"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 31","b":"2055"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 32","b":"2120"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 33","b":["2275","2055"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 34","b":["2340","2055"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 35","b":["2345","2055"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 36","b":["2245","2055"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 37","b":"2060"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 38","b":"2610"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 39","b":"2640"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 40","b":"2645"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 41","b":"2965"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 42","b":"2965"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 43","b":["2990","2965"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 44","b":["2970","2965"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 45","b":["2975","2965"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 46","b":["2980","2970"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 47","b":["2985","2970"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 48","b":["2995","2965"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 49","b":["3000","2965"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 50","b":["3005","2965"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 51","b":["3010","2970"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 52","b":["3230","3010"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 53","b":["3130","2985"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 54","b":["2965","2640"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 55","b":["3435","2060"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 56","b":"3435"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 57","b":["3540","3435"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 58","b":["3550","3435"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 59","b":["3645","3440"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 60","b":"3445"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 61","b":["3710","3445"]},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 62","b":["3720","3445"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 63","b":["3725","3445"]},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 64","b":["3730","3445"]},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 65","b":"3870"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 66","b":"3915"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 67","b":"3915"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 68","b":"3925"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 69","b":"3930"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 70","b":"3935"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 71","b":"3940"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 72","b":"3945"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 73","b":"3950"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 74","b":["4065","3930"]},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 75","b":["4090","3935"]},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 76","b":"4105"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 77","b":["4120","3935"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 78","b":["4135","3940"]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 79","b":["4180","3950"]},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 80","b":["4195","3950"]},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 81","b":"3910"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 82","b":["4525","3910"]},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 83","b":["4545","3910"]},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 84","b":["4550","3910"]},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 85","b":"4555"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 86","b":"4770"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 87","b":"4770"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 88","b":["4815","4770"]},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 89","b":["4825","4770"]},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 90","b":["4935","4765"]},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 91","b":["4965","4775"]},{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 92","b":"4780"},{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 93","b":["5030","4780"]},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 94","b":["5040","4780"]},{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 95","b":["5045","4780"]},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 96","b":["5050","4780"]},{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 97","b":"5195"},{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 98","b":"2045"},{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 99","b":["5235","5210"]},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 100"},{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 101","b":["5265","5260"]},{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 102"},{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 103","b":["5290","5285"]},{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 104","b":"5330"},{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 105","b":"5225"},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 106","b":"5230"},{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 107","b":"5420"},{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 108","b":["5435","5430"]},{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 109","b":"5445"},{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 110","b":["5460","5455"]},{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 111","b":"5470"},{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 112","b":["5485","5480"]},{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 113","b":"5495"},{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 114","b":["5515","5505"]},{"@attributes":{"id":"p-0123","num":"0122"},"figref":"FIG. 115","b":["5530","5510"]},{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 116","b":"5545"},{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 117","b":["5555","5545"]},{"@attributes":{"id":"p-0126","num":"0125"},"figref":"FIG. 118","b":"5690"},{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 119"},{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 120","b":"5690"},{"@attributes":{"id":"p-0129","num":"0128"},"figref":"FIG. 121","b":["5695","5710"]},{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 122","b":["5700","5705","5715","5720","5725"]},{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 123","b":"5975"},{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 124","b":["5935","5695"]},{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 125","b":["5940","5710"]},{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIG. 126","b":["5945","5700"]},{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 127","b":["5950","5705"]},{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 128","b":["5955","5720"]},{"@attributes":{"id":"p-0137","num":"0136"},"figref":"FIG. 129","b":["5960","5725"]},{"@attributes":{"id":"p-0138","num":"0137"},"figref":"FIG. 130","b":["5965","5715"]},{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 131","b":["5970","5690"]},{"@attributes":{"id":"p-0140","num":"0139"},"figref":"FIG. 132","b":"6250"},{"@attributes":{"id":"p-0141","num":"0140"},"figref":"FIG. 133","b":["6295","6250"]},{"@attributes":{"id":"p-0142","num":"0141"},"figref":"FIG. 134","b":"6255"},{"@attributes":{"id":"p-0143","num":"0142"},"figref":"FIG. 135","b":["6355","6255"]},{"@attributes":{"id":"p-0144","num":"0143"},"figref":"FIG. 136","b":"6260"},{"@attributes":{"id":"p-0145","num":"0144"},"figref":"FIG. 137","b":["6395","6260"]},{"@attributes":{"id":"p-0146","num":"0145"},"figref":"FIG. 138","b":"6265"},{"@attributes":{"id":"p-0147","num":"0146"},"figref":"FIG. 139","b":["6440","6265"]},{"@attributes":{"id":"p-0148","num":"0147"},"figref":"FIG. 140","b":["6460","6250"]},{"@attributes":{"id":"p-0149","num":"0148"},"figref":"FIG. 141","b":["6465","6255"]},{"@attributes":{"id":"p-0150","num":"0149"},"figref":"FIG. 142","b":["6470","6260"]},{"@attributes":{"id":"p-0151","num":"0150"},"figref":"FIG. 143","b":["6475","6265"]},{"@attributes":{"id":"p-0152","num":"0151"},"figref":"FIG. 144","b":"6730"},{"@attributes":{"id":"p-0153","num":"0152"},"figref":"FIG. 145","b":["6740","6730"]},{"@attributes":{"id":"p-0154","num":"0153"},"figref":"FIG. 146","b":["6745","6730"]},{"@attributes":{"id":"p-0155","num":"0154"},"figref":"FIG. 147","b":["6750","6730"]},{"@attributes":{"id":"p-0156","num":"0155"},"figref":"FIG. 148","b":["6755","6730"]},{"@attributes":{"id":"p-0157","num":"0156"},"figref":"FIG. 149","b":["6760","6730"]},{"@attributes":{"id":"p-0158","num":"0157"},"figref":"FIG. 150","b":["6765","6730"]},{"@attributes":{"id":"p-0159","num":"0158"},"figref":"FIG. 151","b":["6770","6730"]},{"@attributes":{"id":"p-0160","num":"0159"},"figref":"FIG. 152","b":["6770","6730"]},{"@attributes":{"id":"p-0161","num":"0160"},"figref":"FIG. 153","b":["6775","6730"]},{"@attributes":{"id":"p-0162","num":"0161"},"figref":"FIG. 154","b":["6780","6730"]},{"@attributes":{"id":"p-0163","num":"0162"},"figref":"FIG. 155","b":["6785","6730"]},{"@attributes":{"id":"p-0164","num":"0163"},"figref":"FIG. 156","b":["6785","6730"]},{"@attributes":{"id":"p-0165","num":"0164"},"figref":"FIG. 157","b":["6790","6730"]},{"@attributes":{"id":"p-0166","num":"0165"},"figref":"FIG. 158","b":["6795","6730"]},{"@attributes":{"id":"p-0167","num":"0166"},"figref":"FIG. 159","b":["6800","6730"]},{"@attributes":{"id":"p-0168","num":"0167"},"figref":"FIG. 160","b":["6805","6730"]},{"@attributes":{"id":"p-0169","num":"0168"},"figref":"FIG. 161","b":"7360"},{"@attributes":{"id":"p-0170","num":"0169"},"figref":"FIG. 162","b":"7365"},{"@attributes":{"id":"p-0171","num":"0170"},"figref":"FIG. 163","b":"7370"},{"@attributes":{"id":"p-0172","num":"0171"},"figref":"FIG. 164","b":"7375"},{"@attributes":{"id":"p-0173","num":"0172"},"figref":"FIG. 165","b":"7380"},{"@attributes":{"id":"p-0174","num":"0173"},"figref":"FIG. 166","b":"7385"},{"@attributes":{"id":"p-0175","num":"0174"},"figref":"FIG. 167","b":"7390"},{"@attributes":{"id":"p-0176","num":"0175"},"figref":"FIG. 168","b":"7595"},{"@attributes":{"id":"p-0177","num":"0176"},"figref":"FIG. 169","b":"7600"},{"@attributes":{"id":"p-0178","num":"0177"},"figref":"FIG. 170","b":"7605"},{"@attributes":{"id":"p-0179","num":"0178"},"figref":"FIG. 171","b":"7755"},{"@attributes":{"id":"p-0180","num":"0179"},"figref":"FIG. 172","b":"7760"},{"@attributes":{"id":"p-0181","num":"0180"},"figref":"FIG. 173","b":"7765"},{"@attributes":{"id":"p-0182","num":"0181"},"figref":"FIG. 174","b":"7770"}]},"DETDESC":[{},{}]}
