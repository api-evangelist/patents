---
title: Generating a compiler infrastructure
abstract: In an embodiment, the compiler infrastructure allows execution of multidimensional analytical metadata from various databases by providing a generic transformation. A compilation request to execute a multidimensional analytical metadata is received. A type of the compilation request is determined to identify an associated transformation and corresponding transformation rules. Based upon the type of compilation request, a database of an application server is queried to retrieve the corresponding multidimensional analytical metadata. Based upon the identified transformation rules, the multidimensional analytical metadata is transformed into a generic metadata that is executable by any desired engine. An instance of a calculation scenario is generated based upon the transformation. The compiler infrastructure is generated by deploying the instance of the calculation scenario in the desired engine (e.g. in-memory computing engine.)
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08892545&OS=08892545&RS=08892545
owner: SAP SE
number: 08892545
owner_city: Walldorf
owner_country: DE
publication_date: 20111223
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is related to three co-pending U.S. Applications\u2014\n\n","The field generally relates to computer systems and software, and more particularly to various methods and systems to generate a multidimensional compiler infrastructure.","In computing, Online Analytical Processing (OLAP) tools enable users to interactively analyze multidimensional data from various perspectives. Applications of OLAP include business reporting for sales, marketing, management reporting, business process management, budgeting and forecasting, financial reporting and the like. OLAP processors use data stored in in-memory databases for analytical processing. An in-memory database is a database management system that primarily relies on volatile memory for computer data storage. A plurality of data sources may be associated with such an in-memory database, and each of the data sources may have unique properties. To execute operations on the in-memory database, the properties of the data present in the database may need to be modified.","Various embodiments of systems and methods to generate a compiler infrastructure are disclosed. In an embodiment, a compiler receives a compilation request including a request to generate an instance of a calculation scenario. The compiler determines a type of the received compilation request to identify an associated transformation. A database of an application server is queried, to retrieve multidimensional analytical metadata corresponding to the compilation request from the database of the application server. Based upon transformation rules associated with the type of compilation request, a processor in communication with the compiler transforms the multidimensional analytical metadata into an in-memory computing engine executable metadata. An instance of a calculation scenario is generated based upon the transformation. The compiler infrastructure is generated by deploying the instance of the calculation scenario in the in-memory computing engine.","In an embodiment, transforming the multidimensional analytical metadata includes mapping the multidimensional analytical metadata corresponding to the compilation request with one or more calculation patterns associated with the in-memory computing engine. A calculation pattern may be generated by transforming contents of the multidimensional analytical metadata into artifacts that are executable by the in-memory computing engine.","In an embodiment, a system includes a processor to read and execute instructions stored in a memory element that is in communication with the processor. The memory includes instructions to execute the generation of the compiler infrastructure. The processor may be in communication with various compilation modules including a database, a multidimensional analytical compiler, an in-memory computing engine, a transformation library, a pattern generator and the like, to generate the compiler infrastructure.","These and other benefits and features of embodiments will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for systems and methods to generate a compiler infrastructure are disclosed. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","Business data warehouse of an enterprise is a repository of an enterprise's data where the data is standardized, structured, integrated, and managed. Metadata associated with the data warehouse defines contents of the data warehouse and the functioning of the data present in the data warehouse. Metadata of various traditional business data warehouses are replaced by multidimensional analytical views (MDAVs), which represent a business object based metadata model for analytics. The analytics include computer technology, operational research, and statistics to solve different problems in business and industry scenarios such as enterprise decision management, marketing analytics, portfolio analysis, credit risk analysis, and the like. Metadata associated with the MDAV may be stored in an in-memory computing engine.","The in-memory computing engine is a part of applications that are built using in-memory technology. In-memory technology is a database management technology that stores computer related data on main memory. Since the information is stored on main memory, processing of all data transactions are executed on main memory without having to access the external storage media, thereby reducing I\/O reading activity when querying a database. The in-memory computing combines transactions and analytics to provide efficient storage, search and ad-hoc analysis of real-time information. In-memory analytics may be described as an approach to query data residing on the main memory, resulting in quick response time. In-memory computing applications are built based on business driven use cases, specifically in industries requiring processing of large data volumes or real-time processing such as banking, retail, utilities\/energy, and telecommunications. Examples where in-memory technology may be applied to build business applications include: demand forecasting based on huge data volumes provided by smart meter devices in utilities industries; managing energy cost in energy intensive industries with in-memory analytics and forecasting based on fine grained consumption data; trade promotion management solutions for retailers and consumer products companies with high data volumes; real-time risk management and cumulated risks calculation for insurance companies in the corresponding area; internal and external risk management and regulatory reporting for banking sector; and the like.","In an embodiment, the in-memory computing engine is configured to execute the data stored in an in-memory database of a computing device. The execution of the data may render an outcome of a business application associated with the in-memory computing engine. The in-memory computing engine is associated with a runtime module accessed during a runtime of execution of the data; and a compile time module accessed while compiling the computing engine. The in-memory computing engine includes a pattern generation module to generate calculation patterns or calculation rules defined for the in-memory computing engine; and a calculation scenario that represents a group of operations (e.g., mathematical operations) that need to be executed.","Metadata of the business applications associated with the MDAV (referred to as \u201cMDAV metadata\u201d) may be stored in the in-memory computing engine. The MDAV metadata comprehends the meaning of the data contained in various data sources associated with the in-memory computing engine. The MDAV serve as data providers for the OLAP processor as they include the analytical data. The analytical data itself is stored in the in-memory computing engine. The in-memory computing engine is associated with various application servers to carry out various business processes. These application servers include distinguishing parameters and corresponding semantics to perform their respective business processes. Hence, a generic platform is required to carry out the business processes. A compiler infrastructure facilitates a transformation of the MDAV metadata associated with the various application servers into a generic metadata that is executable by the in-memory computing engine. To generate the compiler infrastructure, MDAV metadata stored in a database of an application server is executed by loading, transforming, and deploying the MDAV metadata to a desired engine (e.g., the in-memory computing engine). A compiler infrastructure facilitates in executing the MDAV metadata in various data sources associated with various types of application servers. Databases of various application servers include distinguishing parameters and corresponding semantics. In an embodiment, the compiler infrastructure is generated at compile time of the MDAV execution.",{"@attributes":{"id":"p-0021","num":"0023"},"figref":"FIG. 1","b":["115","150"]},"MDAV compiler infrastructure  includes metadata repository proxy , naming server , MDAV compiler , and transformation library . Metadata repository proxy  duplicates the MDAV metadata residing in MDAV metadata repository , and stores the duplicated MDAV metadata for further processing (e.g. modification or transformation). Naming server  is a cross-model compiler that comprehends a mapping of information of metadata associated with various application servers. Naming server  associates names with locations of functionalities or services and the information contained in them; and provides a mapping of the association. A processor in communication with MDAV compiler infrastructure  may determine the cross-model mapping residing in naming server  while executing the MDAV metadata. In an in-memory computing system, naming server  is a component that knows the topology of the system and how the data is distributed. Naming server  also knows the assignment of tenants to in-memory computing database servers. In a system with data distribution, naming server  knows which tables or partitions of tables are located on which in-memory computing database server.","Transformation library  is a collection of one or more formulae and\/or rules that enable a transformation of MDAV metadata into desired in-memory compatible format, without using application server coding. Transformation library  may include date functions, basic functions, mathematical functions, and the like to execute transformation. The formulae and\/or rules residing in transformation library  are reusable transformation in a generic format (for e.g. extensible markup language (XML) format), and include information about a target model (for e.g. in-memory computing engine ). Based upon the generic transformation and the information about the target model, the MDAV metadata transformation may be executed.","MDAV compiler  includes a compilation component (not shown in ), which is responsible for executing various compilation phases involved during the process of transformation of MDAV metadata; and one or more characteristic compilers (e.g.  and ) that are specific to each target application server. A target application server may be an in-memory computing engine (e.g. , or  or ) to which the calculation scenario is deployed. Search infrastructure  references business objects associated with one or more application servers. Search infrastructure  is operable to access an index of business data for executing the MDAV metadata. In-memory computing engine  is an in-memory computing database system housing various application servers and corresponding databases (for e.g.  and ;  and ). The transformation of MDAV metadata to an in-memory computing engine executable metadata is to generate a generic metadata that is executable by any of the various application servers residing in the in-memory computing database system.","MDAV compiler  includes characteristic compiler  associated with application server \u2018\u2019 ; and characteristic compiler  associated with application server \u2018\u2019 . In an embodiment, MDAV compiler  receives a compilation request. The compiler request may be received from a computer generated user interface, or a user or a system that requires a compilation of the MDAV metadata to be executed. The compilation request may include a request to generate MDAV compiler infrastructure , or to generate a calculation scenario or an instance of a calculation scenario, or the like, to accomplish an execution of MDAV metadata in in-memory computing engine .","On receiving the compilation request, MDAV compiler  determines a type of the received compilation request to identify an associated transformation. The compilation request may be received to transform the MDAV metadata associated with a first application server (for e.g. ) to in-memory computing engine executable metadata that is executable on a second application server (for e.g. ). The type of compilation request enables identification of a type of transformation to be applied to the MDAV metadata. Identifying a type of transformation includes identifying one or more transformation rules and transformation functions from transformation library  to be applied to MDAV metadata.","MDAV compiler  interprets the metadata associated with the compilation request to identify MDAV metadata present in a corresponding database of an application server. MDAV compiler  queries a database associated with an application server corresponding to the compilation request, to retrieve MDAV metadata corresponding to the compilation request. In an embodiment, MDAV compiler  instructs characteristic compiler  to query corresponding database  of application server \u2018\u2019  to retrieve MDAV metadata corresponding to the compilation request. MDAV compiler  instructs a characteristic compiler (e.g.  or ) based upon the type of the received compilation request.","In an embodiment, based upon the associated transformation rules, MDAV compiler  prepares the MDAV metadata associated with the compilation request for transformation. Preparing the MDAV metadata includes adapting the MDAV metadata by adding fields to the MDAV metadata which are necessary for casting one or more data types, changing one or more attributes of a member field, adding a source field mapping and the like. Preparing the MDAV metadata facilitates in a generic processing of the MDAV metadata during transformation. A processor associated with MDAV compiler  transforms the MDAV metadata into an in-memory computing engine executable metadata. The transformation of the MDAV metadata into in-memory computing engine executable metadata includes processing the transformation rules along with the MDAV metadata to generate an instance of a calculation scenario. In an embodiment, MDAV compiler  generates the instance of the calculation scenario based upon the transformation. The calculation scenario represents a transformation scenario including a procedure of transforming the MDAV metadata into an in-memory computing engine executable metadata based upon the type of compilation request, the transformation identified for the type of compilation request and the transformation rules applied. A calculation scenario may represent a procedural aspect of MDAV compiler infrastructure . For example, the calculation scenario includes the compilation request, the MDAV metadata retrieved for the compilation request, the transformation rules to be applied for transforming the metadata associated with the compilation request, and the in-memory computing engine executable metadata generated for the received compilation request. Thus, the calculation scenario includes many instances of the transformation of many sets of MDAV metadata based upon the compilation request. An instance of the calculation scenario may represent the procedures followed for a specific compilation request to generate a corresponding in-memory computing engine executable metadata. MDAV compiler  deploys the instance of the calculation scenario at MDAV compiler infrastructure .","Thus, MDAV compiler infrastructure  is associated with the required transformation procedures to transform MDAV metadata associated with a compilation request to comprehensive in-memory computing engine executable metadata. In an embodiment, MDAV compiler infrastructure  cross-compiles the MDAV metadata associated with one or more application servers (e.g.  or ) and converts (or transforms) the cross-compiled MDAV metadata into a corresponding instance of the calculation scenario that is executable in in-memory computing engine .","In an embodiment, the MDAV metadata includes MDAV attributes that represent a property of business objects included in the MDAV metadata. MDAV metadata further includes a first set of attributes that are associated with the corresponding application server and a second set of attributes that are associated with a master data of an enterprise. The enterprise includes various application servers and the master data corresponds to the MDAV metadata of the enterprise. The instance of the calculation server generated further includes a first part of the calculation scenario generated based upon the first set of attributes and a second part of the calculation scenario generated based upon an aggregation of the second set of attributes and the master data of the enterprise. In another embodiment, contents of an MDAV metadata include a query definition, one or more basic MDAVs including query definition elements, selection callbacks, characteristics and key figures associated with basic MDAV. The contents of the MDAV metadata are transformed into one or more artifacts of the in-memory computing engine executable metadata by MDAV compiler infrastructure . In an embodiment, a basic MDAV is a type of a calculation scenario, and a method of generating a calculation pattern involving the basic MDAV type of calculation scenario is explained in detail in . Other types of calculation scenarios include a virtual type, a projection type, a union type, an intersection type, a join type, a temporal join type, and the like.","In an embodiment, MDAV compiler infrastructure  represents an analytical in-memory model to execute the MDAV metadata in one or more databases (e.g.  and ) associated with corresponding one or more application servers (e.g.  and  respectively). The analytical in-memory model executes the MDAV metadata by loading the MDAV metadata in the database associated with the corresponding application server onto MDAV compiler infrastructure . Based upon parameters and semantics associated with the corresponding application server, the analytical in-memory model performs a cross-database transformation of the loaded MDAV metadata into metadata executable by an in-memory computing model. Further, the analytical in-memory model deploys the transformed metadata into in-memory computing engine  associated with the in-memory computing model. This analytical in-memory model includes an analytical engine, a data provider, a runtime analyzer, and a compiler. The analytical engine is responsible to render the MDAV metadata associated with the application server for compiling. The data provider associated with the analytical engine is responsible to read the MDAV metadata associated with the application server and initiate a runtime metadata and the runtime analyzer for compiling. The runtime analyzer is responsible to instruct the compiler to retrieve the instance of the calculation scenario generated by MDAV compiler infrastructure . The compiler receives the compilation request from the runtime analyzer and generates the instance of the calculation scenario by retrieving the instance of the calculation scenario from MDAV compiler infrastructure .","In an embodiment, transforming the MDAV metadata includes mapping the MDAV metadata corresponding to the compilation request with calculation patterns associated with the in-memory computing engine. A calculation pattern is a subset of the calculation scenario, and describes a procedure to understand a relation between the MDAV metadata and the in-memory computing engine executable metadata, and execute the MDAV metadata in the in-memory computing engine. The calculation pattern outlines a step-by-step procedure for transforming the MDAV metadata into an in-memory computing engine executable metadata. The calculation pattern includes a set of artifacts of the in-memory computing engine executable metadata as a result of a transformation performed on the MDAV metadata. The calculation pattern may include step-by-step procedure of generating a data source artifact, a projection calculation view artifact and an aggregation calculation view artifact. In another embodiment, MDAV compiler infrastructure  includes a transformation module to transform the contents of an MDAV metadata into one or more artifacts that are executable by in-memory computing engine ; and a pattern generator to generate a calculation pattern by mapping the MDAV metadata with the metadata executable by in-memory computing engine . The generation of the calculation pattern is explained in detail in the description of .",{"@attributes":{"id":"p-0033","num":"0035"},"figref":"FIG. 2","b":["205","210"]},"At process block , a database of an application server is queried to retrieve multidimensional analytical (MDAV) metadata corresponding to the compilation request. In an embodiment, metadata associated with the compilation request is interpreted; and based upon the interpretation, the database is queried to retrieve the corresponding MDAV metadata. In another embodiment, the MDAV metadata includes multidimensional attributes further including a first set of attributes associated with the corresponding application server and a second set of attributes master data of an enterprise, wherein the enterprise includes one or more application servers, and the master data corresponds to MDAV metadata associated with the enterprise.","At process block , the retrieved multidimensional analytical metadata is transformed into an in-memory computing engine executable metadata. In an embodiment, the retrieved MDAV metadata is prepared for transformation. At process block , based upon the identified transformation and corresponding transformation rules, an instance of a calculation scenario is generated for the in-memory computing engine executable metadata. In an embodiment, the instance of the calculation scenario includes a first part of the calculation scenario generated based upon the first set of attributes and a second part of the calculation scenario generated based upon an aggregation of the second set of attributes and the master data of the enterprise.","At process block , the compiler infrastructure is generated by deploying the instance of the calculation scenario in the in-memory computing engine. The compiler infrastructure is associated with transforming the MDAV metadata associated with the application server into a comprehensive metadata that is executable in the in-memory computing engine. The compiler infrastructure cross-compiles the MDAV metadata associated with the application servers and converts the cross-compiled MDAV metadata into the instance of the calculation scenario that are further executable in the in-memory computing engine.",{"@attributes":{"id":"p-0037","num":"0039"},"figref":["FIG. 3","FIG. 3"],"b":["302","304","306","308","302","304","306","308","310","314","318","320","324","328","330","336","340","346","352","356","302","304","306","308","312","316","322","326","332","338","344","348","354"]},"MDAV compiler infrastructure  receives a compilation request to generate an instance of a calculation scenario. The activation box  at the end of the horizontal arrow  represents the receiving of the compiler request. MDAV compiler infrastructure  communicates with MDAV compiler  to determine a type of the compilation request. The activation box  at the end of the horizontal arrow  represents the determination of a type of the compilation request. MDAV compiler  determines a type of the compilation request and returns the determination () to MDAV compiler infrastructure . MDAV compiler  also determines a type of a transformation that may be applicable to the compilation request and identifies transformation rules corresponding to the type of transformation residing in transformation library . The activation box  at the end of the horizontal arrow  represents the identification of corresponding transformation rules.","Based upon the received compiler request, MDAV compiler infrastructure  executes a query in a database  associated with an application server residing in application server enterprise  and retrieves MDAV metadata corresponding to the compilation request . The activation box  at the end of the horizontal arrow  represents retrieval of corresponding MDAV metadata. MDAV compiler infrastructure  initiates a compilation action  by rendering the MDAV metadata to the MDAV compiler . MDAV compiler  prepares the MDAV metadata  by making modifications to the MDAV metadata. The modifications to the MDAV metadata may include data type modification, filtering of elements of the MDAV metadata that are not necessary for generating an instance of the calculation model or the like. MDAV compiler  begins a process of compiling the MDAV metadata and initiates application server enterprise . The activation box  at the end of the horizontal arrow  represents the initiation of the compilation process.","Application server enterprise  receives the prepared MDAV metadata from MDAV compiler  and renders it to transformation library  to carry out the transformation of the MDAV metadata into in-memory executable metadata . Transformation library  retrieves the transformation rules determined for the transformation type corresponding to the compilation request , and executes the transformation of the MDAV metadata based upon the transformation rules. As a result of the transformation of MDAV metadata, transformation library  renders the in-memory executable metadata  to MDAV compiler . The activation box  at the end of the horizontal arrow  represents the rendered in-memory executable metadata. MDAV compiler  generates an instance of a calculation scenario  based upon the in-memory executable metadata and renders the instance of the calculation scenario  to MDAV infrastructure . The activation box  at the end of the horizontal arrow  represents the communication to determine and render a type of the compilation request. MDAV compiler infrastructure  deploys the instance of the calculation scenario () in an in-memory computing engine.",{"@attributes":{"id":"p-0041","num":"0043"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0042","num":"0044"},"figref":["FIG. 4","FIGS. 440"],"b":["405","415","420","425","430","435","415","415","420","415","430","425","415"]},"Block  represents an in-memory computing model, including corresponding attributes that are executable by the in-memory computing engine. Attributes include contents of the MDAV metadata that are transformed into in-memory computing engine executable metadata. Attributes may be classified into two groups: a first set of attributes that constitute a part of the application server data; and a second set of attributes that are associated with master data of an enterprise including a group of one or more application servers. The master data corresponds to the MDAV metadata associated with the enterprise. In-memory computing model  represents the elements that are generated in the process of generation of a calculation pattern executable by the in-memory computing engine, and includes: join data source , a projection calculation view  and an aggregation calculation view .","In join data source , query definition  associated with the MDAV metadata are transformed into data source artifacts executable by the in-memory computing engine. The data source artifacts include an index table that joins rows and\/or columns of two or more tables, and facilitate in querying tables that are linked or joined. In an embodiment, the data source artifacts allow join queries to be resolved without accessing or joining the corresponding tables. For the transformation of the MDAV metadata, attributes and corresponding keys are defined in join data source . The data source artifacts are rendered as input to projection calculation view .","At projection calculation view , query definition elements  associated with MDAV metadata are extracted from basic MDAV  and transformed into view artifacts  executable by the in-memory computing engine. A temporal join may be generated at projection calculation view . A temporal join defines a time-dependent characteristic of the data source, for instance a posting date; and key or an interval of the time-dependent characteristic. The temporal join enhances the feature of join data source  with join-conditions based upon validity dates associated with the query definition elements . Thus, a time dimension may be evaluated along with the query definition elements . Selection callbacks  associated with the MDAV metadata are transformed into filter condition artifacts  executable by the in-memory computing engine. A filter condition artifact (for e.g. ) facilitates in filtering one or more sections (for e.g. fields of a table) of the query definition that are not necessary for generating the calculation pattern. Based upon view artifacts  and filter conditions , projection calculation view artifacts are generated that is executable by the in-memory computing engine. The projection calculation view artifacts are rendered as input to aggregation calculation view .","At aggregation calculation view , the projection calculation view artifacts including view attributes , calculated attributes  (for e.g. filter conditions, temporal joins, time dimension, and the like), and characteristics  and key  from basic MDAV  are classified as primary artifacts and secondary artifacts. The classification as primary and secondary artifacts may be based upon a configuration of the system. Based upon the classification, an aggregation rule is applied to the primary artifacts to perform aggregation of all the elements generated during the process of transformation of the MDAV metadata into in-memory computing engine executable metadata. An aggregation calculation view artifact is generated as a result of the aggregation, which represents the calculation pattern. The calculation pattern is thus generated by transforming the MDAV metadata into an in-memory computing engine executable metadata.","In an embodiment, generating the projection calculation view artifact includes generating a temporal join projection calculation view by transforming a temporal join filter condition subsequent to transforming the selection callbacks. A temporal join view may combine of one or more records from two or more tables in a database, with one or more time based characteristics. A temporal join is transformed after the selection callbacks to minimize the data it operates upon. In another embodiment, generating the projection calculation view artifact includes generating a union aggregation calculation view artifact executable by the in-memory computing engine, by mapping one or more field names associated with the query definition to one or more field names associated with a union multidimensional analytical metadata. A union view may combine records from a table in a database, including combining an actual data with a planned data in a table, for comparison. In another embodiment, generating the projection calculation view artifact includes generating a join aggregation calculation view artifact executable by the in-memory computing engine by joining two or more data sources artifacts executable by the in-memory computing engine. A join view combines two sets of data into a single set. In yet another embodiment, generating the projection calculation view artifact includes generating a navigational aggregation calculation view artifact executable by the in-memory computing engine by mapping one or more navigational attributes associated with the multidimensional analytical metadata to a join calculation view master data. The navigational aggregation calculation view artifact may be generated to include flexibility while generating a calculation pattern involving reports including MDAV metadata.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0050","num":"0052"},"figref":"FIG. 5","b":["500","500","505","555","500","540","555","510","515","510","515","505","515","500","525","530","500","525","530","500","535","500","550","550","500","545","500","520","560","560","560","550","560"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transaction, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transaction data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0010","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0016"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
