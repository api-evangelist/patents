---
title: Collecting and altering firmware configurations of target machines in a software provisioning environment
abstract: A provisioning server can provide and interact with a firmware tool on target machines. The firmware tool can communicate with the firmware of the target machines and collect data representing the configuration of the firmware of the target machines, independent of the types of the target machines. To communicate independent of the type of target machine, the firmware tool can include a translation library. The translation library enables the firmware tool to receive common instructions for interacting with firmware and convert those common instructions into specific instructions that are compatible with different types of the target machines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08892700&OS=08892700&RS=08892700
owner: Red Hat, Inc.
number: 08892700
owner_city: Raleigh
owner_country: US
publication_date: 20090226
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","DESCRIPTION OF THE RELATED ART","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["This invention relates generally to software provisioning. In particular, the invention relates to systems and methods for managing firmware in a software provisioning environment.","Software provisioning is the process of selecting a target machine, such as a server, loading the appropriate software (operating system, device drivers, middleware, and applications), and customizing and configuring the system and the software to make it ready for operation. Software provisioning can entail a variety of tasks, such as creating or changing a boot image, specifying parameters, e.g. IP address, IP gateway, to find associated network and storage resources, and then starting the machine and its newly-loaded software. Typically, a system administrator will perform these tasks using various tools because of the complexity of these tasks. Unfortunately, there is a lack of provisioning control tools that can adequately integrate and automate these tasks.","Often, large entities, such as corporations, businesses, and universities, maintain large networks that include numerous systems spread over a wide geographic area. Often, these systems are provided by a variety of different vendors and include a variety of hardware and hardware configurations. Typically, each vendor provides various tools to manage the hardware of the systems they manufacture and these tools are often not cross-compatible. To manage these systems, the administrator of the network must utilize each vendor's tools separately in order to interact with the different systems.","For simplicity and illustrative purposes, the principles of the present invention are described by referring mainly to exemplary embodiments thereof. However, one of ordinary skill in the art would readily recognize that the same principles are equally applicable to, and can be implemented in, all types of information and systems, and that any such variations do not depart from the true spirit and scope of the present invention. Moreover, in the following detailed description, references are made to the accompanying figures, which illustrate specific embodiments. Electrical, mechanical, logical and structural changes may be made to the embodiments without departing from the spirit and scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.","Embodiments of the present teachings relate to systems and methods for managing firmware configurations of target machines in a software provisioning environment. More particularly, a provisioning server can utilize a firmware tool on target machines in order to collect firmware configuration data from and apply configuration data to the target machines, regardless of a type of the target machines.","According to embodiments, a provisioning server can be configured to provide and to interact with a firmware tool on target machines. The firmware tool can be configured to operate on different types of target machines independent of the type of the target machines. The firmware tool can be configured to communicate with the firmware of the target machines and collect data representing the configuration of the firmware of the target machines.","According to embodiments, to communicate independent of the type of target machine, the firmware tool can be configured to include a translation library. The translation library enables the firmware tool to receive common instructions for interacting with firmware and convert those common instructions into specific instructions that are compatible with different types of the target machines. As such, the firmware tool can be configured to operate and execute on any target machine regardless of the type of the target machines.","According to embodiments, to provide the firmware tool, the provisioning server can be configured to instruct a network management server to provide a command to a helper client on the target machines. The command can be configured to cause the helper client to retrieve the firmware tool from the provisioning server. Additionally, the provisioning server can be configured to instruct the helper client, directly. Likewise, the provisioning server can be configured to transmit the firmware tool to the target machines and to instruct the target machines to alter their power state (e.g. power cycle), if necessary, to initiate the firmware tool.","According to embodiments, the provisioning server can be configured to interact with the firmware tool, directly, to instruct the firmware tool and to collect the data from the firmware tool. Likewise, the provisioning server can be configured to operate in conjunction with the network management server in order to instruct the firmware tool and to collect data from the firmware tool. Once data is collected, the provisioning server can be configured to store the collected data in a firmware record.","According to embodiments, the provisioning sever can be configured to maintain the firmware record in order to track and manage the firmware configurations of the target machines in the software provisioning environment. For example, the provisioning server can be configured to utilize the collected data in the firmware record to check the target machines to see if the firmware configuration data is correct. If incorrect in a particular target machine, the provisioning server can be configured to provide the firmware tool to the particular target machine and configured to instruct the firmware tool to apply the stored firmware configuration data to the particular target machine.","By providing a firmware tool from a provisioning server, the provisioning server can manage the firmware configurations of the target machines in the software provisioning environment. Additionally, because the firmware tool is universally compatible with different types of target machines, the provisioning server can manage the firmware configuration of a wide variety of target machines without utilizing separate tools and protocols for each different type of target machine.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 1","FIG. 1"],"b":["100","100"]},"In particular, the provisioning environment  can manage software provisioning using a hierarchy of commands. In exemplary embodiments, the hierarchy can include at least four levels of commands. The lowest level in the hierarchy can comprise distribution commands, which primarily handle base operating system specific tasks of provisioning. The second level can comprise profile commands, which associate a configuration file, such as a kickstart file for Linux or other operating system, with a distribution and optionally allow for customization. The third level comprises system commands, which associate remote systems that are involved with the provisioning of the software. The fourth level comprises repository commands, which address configurations and tasks related to updating the software, remote installation procedures, and optionally customizing the software.","The provisioning environment  provides several capabilities and advantages over the known provisioning solutions. For example, the present invention is capable of handling a variety of forms of installations, such as preboot execution environment (\u201cPXE\u201d), virtualization, re-installations, and image installations.","In exemplary aspects, the provisioning environment  enables integrating virtualization into a PXE provisioning infrastructure and provides several options to reinstall running machines as well. The provisioning environment  can integrate mirroring of package repositories with the provisioning process, so that a provisioning server may serve as a central mirror point of contact for all of an organizations software needs. In aspects, a set of remote mirrored repositories can automatically be used by provisioned systems without additional setup.","Reference will now be made in detail to the exemplary aspects the provisioning environment . The provisioning environment  can be applied to provisioning any form of software, such as Windows systems, UNIX systems, and Linux systems. In the exemplary description that follows,  is presented to explain the provisioning environment  for provisioning software, such as Linux, and Linux based software, such as Fedora and Red Hat Enterprise Linux by Red Hat, Inc.","In provisioning of software such as Linux, many system administrators use what is known as the \u201ckickstart\u201d installation method. Kickstart files are files that specify the intended configuration of the software being provisioned. Kickstart files can be kept on a server and can be read by individual computers during the installation. This installation method allows the use of a single or relatively few standard kickstart files to install Linux on multiple machines, making it ideal for network and system administrators.","The kickstart file can be a simple text file, containing a list of items, each identified by a keyword. In general, a kickstart file can be edited with any text editor or word processor that can save files as ASCII text. One skilled in the art will recognize that the present invention may be applied to non-kickstart files in software provisioning. For example, configuration files such as AutoYAST Answer files used in Novell SuSe Linux and Sun Solaris Jumpstart files may also be used by the provisioning environment .","Typically, a kickstart file can be copied to the boot disk, or made available on the network. The network-based approach is most commonly used, as most kickstart installations for software provisioning, such as Linux systems, tend to be performed via a network using NFS, FTP, or HTTP on networked computers. Administrators also find it desirable that kickstart installations can be performed using a local CD-ROM, or a local hard drive.","Using kickstart files, a system administrator can create a single file containing the parameters that are needed to complete a typical software installation. For example, kickstart files specify parameters related to: language selection; mouse configuration; keyboard selection; boot loader installation; disk partitioning; network configuration; NIS, LDAP, Kerberos, Hesiod, and Samba authentication; firewall configuration; and package selection.","According to exemplary aspects illustrated in , the provisioning environment  can include a provisioning server , a code repository  which provides access to distributions  and , a set of installation templates , a set of exception plugins , a helper client  running on target machines  in a network , a provisioning database  which comprises a distribution tree list  and template list . Each of these components will now be further described.","The provisioning server (from herein referred to as a \u201ccobbler\u201d)  is responsible for: serving as an extensible markup language remote procedure call (XMLRPC) handler; linking to or mirroring install distribution trees and a configuration database; hosting kickstart templates; hosting plugins; generating installation images, and the like. The cobbler server  can be implemented as software, such as Python code, installed on a boot server machine and provide a command line interface for configuration of the boot server. In addition, the cobbler server  can make itself available as a Python application programming interface (API) for use by higher level management software (not shown). The cobbler server  supports provisioning via PXE, image (ISO) installation, virtualization, re-provisioning. As will be described later, the last two modes are performed with the assistance of a helper client .","The code repository  is responsible for hosting distributions  and . The code repository  can be implemented using well known components of hardware and software. Additionally, the code repository  can include one or more repositories hosting distributions. The distributions  and  can include bundles of software that are already compiled and configured. The distributions  and  may be in the form of either rpm, deb, tgz, msi, exe formats, and the like. For example, as Linux distributions, the distributions  and  are bundles of software that comprise the Linux kernel, the non-kernel parts of the operating system, and assorted other software. The distributions  and  can take a variety of forms, from fully-featured desktop and server operating systems to minimal environments.","In exemplary aspects, the installation templates  are any data structure or processing element that can be combined with a set of installation configurations and processed to produce a resulting configuration file, such as a kickstart file.","In exemplary aspects, exception plugins  are software that interact with cobbler server  to customize the provisioning of software. In general, the exception plugins  are intended to address infrequent customization needs.","In exemplary aspects, the helper client (known as \u201ckoan\u201d, which stands for \u201ckickstart-over-a-network\u201d)  can assist the cobbler server  during the provisioning processes. The koan  can allow for both network provisioning of new virtualized guests and destructive provisioning of any existing system. When invoked, the koan  can request profile information from a remote boot server that has been configured with the cobbler server . In some aspects, what the koan  does with the profile data depends on whether it was invoked with -virt or -replace-self.","In exemplary aspects, the koan  can enable replacing running systems as well as installing virtualized profiles. The koan  can also be pushed out to systems automatically from the boot server. In some aspects, the koan client  is also written in Python code to accommodate a variety of operating systems, machine architectures, etc.","In exemplary aspects, the network  can include a number of the target machines . The target machines  can represent the particular machines to which software provisioning is directed. The target machines  can represent a wide variety of computing devices, such as personal computers, servers, laptop computers, personal mobile devices, and the like. In some aspects, the target machines  can represent distributed computing environments such as cloud computing environments. Although  shows several of the target machines , the provisioning environment  can be capable of managing a wide range environments, such as datacenters with thousands of machines or server pools with just a few machines. Additionally, the cobbler server  can be connected to multiple networks .","In exemplary aspects, the provisioning database  can serve as a data storage location for holding data used by the cobbler server . For example, as shown, the provisioning database  can comprise the distribution tree list  and the template list . The distribution tree list  can provide an inventory of the distributions  and  that are hosted or mirrored by the cobbler server . The template list  can provide an inventory of the templates  that are hosted by the cobbler server .","As noted above, the cobbler server  can manage provisioning using a hierarchical concept of distribution commands, profile commands, system commands, and repository commands. This framework enables the cobbler server  to abstract the differences between multiple provisioning types (installation, reinstallation, and virtualization) and allows installation of all three from a common platform. This hierarchy of commands also permits the cobbler server  to integrate software repositories  with the provisioning process, thus allowing systems to be configured as a mirror for software updates and third party content as well as distribution content.","Distributions can contain information about base operating system tasks, such as what kernel and initial ramdisk (\u201cinitrd\u201d) are used in the provisioning, along with other information, such as required kernel parameters. Profiles associate one of the distributions  and  with a kickstart file and optionally customize it further, for example, using plugins . System commands associate a hostname, IP, or (machine access control) MAC with a distribution and optionally customize the profile further. Repositories contain update information, such as yum mirror information that the cobbler server  uses to mirror repository . The cobbler server  can also manage (generate) dynamic host configuration protocol (DHCP) configuration files using the templates .","In exemplary aspects, the cobbler server  can use a provisioning environment that is fully templated, allowing for kickstarts and PXE files to be customized by the user. The cobbler server  uses the concept of \u201cprofiles\u201d as an intermediate step between the operating system and the installed system. A profile is a description of what a system does rather than the software to be installed. For instance, a profile might describe a virtal web server with X amount of RAM, Y amounts of disk space, running a Linux distribution Z, and with an answer file W.","In exemplary aspects, the cobbler server  can provide a command line interface to configure a boot server in which it is installed. For example, the format of the cobbler server  commands can be generally in the format of: cobbler command [subcomrnmand] [--arg1=] [--arg2=]. Thus, a user can specify various aspects of software provisioning via a single interface, such as a command line interface or other known interface. Examples of exemplary cobbler commands can be found in U.S. patent application Ser. No. 11\/763,315, U.S. Patent Application Publication No. 2008-0288938 and U.S. patent application Ser. No. 11\/763,333, U.S. Patent Publication No. 2008-0288939, all assigned to Red Hat Corporation, the disclosures of which are incorporated herein, in their entirety, by reference.","According to exemplary aspects, a user can use various commands of the provisioning environment  to specify distributions and install trees hosted by the code repository , such as a distribution from the distributions  or . A user can add or import a distribution or import it from installation media or an external network location.","According to exemplary aspects, in order to import a distribution, the cobbler server  can auto-add distributions and profiles from remote sources, whether this is an installation media (such as a DVD), an NFS path, or an rsync mirror. When importing an rsyne mirror, the cobbler server  can try to detect the distribution type and automatically assign kickstarts. By default in some embodiments, the cobbler server can provision by erasing the hard drive, setting up eth0 for DHCP, and using a default password. If this is undesirable, an administrator may edit the kickstart files in \/etc\/cobbler to do something else or change the kickstart setting after the cobbler server  creates the profile.","According to exemplary aspects, a user may map profiles to the distributions and map systems to the profiles using profile commands and systems commands of the provisioning environment . A profile associates a distribution to additional specialized options, such as a kickstart automation file. In the cobbler server , profiles are the unit of provisioning and at least one profile exists for every distribution to be provisioned. A profile might represent, for instance, a web server or desktop configuration.","According to exemplary aspects, a user can map systems to profiles using system commands. System commands can assign a piece of hardware with cobbler server  to a profile. Systems can be defined by hostname, Internet Protocol (IP) address, or machine access control (MAC) address. When available, use of the MAC address to assign systems can be preferred.","According to exemplary aspects, the user can map repositories and profiles using repository commands. Repository commands can address configurations and tasks related to updating the software, remote installation procedures, and optionally customizing the software. These repository commands can also specify mirroring of the provisioned software to remote servers. Repository mirroring can allow the cobbler server  to mirror not only the trees  and , but also optional packages, third party content, and updates. Mirroring can be useful for faster, more up-to-date installations and faster updates, or providing software on restricted networks. The cobbler server  can also include other administrative features, such as allowing the user to view their provisioning configuration or information tracking the status of a requested software installation.","According to exemplary aspects, a user can utilize commands to create a provisioning infrastructure from a distribution mirror. Then a default PXE configuration is created, so that by default, systems will PXE boot into a fully automated install process for that distribution. The distribution mirror can be a network rsync mirror or a mounted DVD location.","According to exemplary aspects, the administrator uses a local kernel and initrd file (already downloaded), and shows how profiles would be created using two different kickstarts\u2014one for a web server configuration and one for a database server. Then, a machine can be assigned to each profile.","According to exemplary aspects, a repo mirror can be set up for two repositories, and create a profile that will auto install those repository configurations on provisioned systems using that profile.","According to exemplary aspects, in addition to normal provisioning, the cobbler server  can support yet another option, called \u201cenchant\u201d. Enchant takes a configuration that has already been defined and applies it to a remote system that might not have the remote helper program installed. Users can use this command to replace a server that is being repurposed, or when no PXE environment can be created. Thus, the enchant option allows the remote the koan client  to be executed remotely from the cobbler server .","According to aspects, if the cobbler server  is configured to mirror certain repositories, the cobbler server  can then be used to associate profiles with those repositories. Systems installed under those profiles can be auto configured to use these repository mirrors in commands and, if supported, these repositories can be leveraged. This can be useful for a large install base, when fast installation and upgrades for systems are desired, or software not in a standard repository exists and provisioned systems desire to know about that repository.","According to exemplary aspects, the cobbler server  can also keep track of the status of kickstarting machines. For example, the \u201ccobbler status\u201d will show when the cobbler server  thinks a machine started kickstarting and when it last requested a file. This can be a desirable way to track machines that may have gone inactive during kickstarts. The cobbler server  can also make a special request in the post section of the kickstart to signal when a machine is finished kickstarting.","According to exemplary aspects, for certain commands, the cobbler server  will create new virtualized guests on a machine in accordance with orders from the cobbler server . Once finished, an administrator can use additional commands on the guest or other operations. The cobbler server  can automatically name domains based on their MAC addresses. For re-kickstarting, the cobbler server  can reprovision the system, deleting any current data and replacing it with the results of a network install.","According to exemplary aspects, the cobbler server  can configure boot methods for the provisioning requested by the user. For example, the cobbler server  can configure a PXE environment, such as a network card BIOS. Alternatively, the cobbler server  can compile and configure information for koan client . The cobbler server  can also optionally configure DHCP and DNS configuration information.","According to exemplary aspects, the cobbler server  can serve the request of the koan client . The koan client  can acknowledge the service of information of the cobbler server  and can then initiate installation of the software being provisioned. Additionally, the koan client  can either install the requested software, e.g., replace the existing operating system, or install a virtual machine.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 2","FIG. 2"],"b":["200","102","115","215","115","115","102"]},"As shown in , the network  can include a number of target machines . For example, the target machines  can include a group of server computers, such as blade servers. The target machines  can include computing systems such as servers, personal computers, laptop computers, etc. The target machines  can be connected to power management systems  to control the power supplied to the target machines  and to alter the power state of one or more of the target machines  (e.g. power cycle). The power management systems  can be any type of system to manage the power of the target machines, for example, Integrated Lights Out (ILO) by Hewlett Packard\u2122 Corporation, Dell\u2122 Remote Access Control (DRAC) by Dell Corporation, WTI powerbar by Western Telematies, Inc, and other power system supporting network communications. Additionally, each of the target machines  can be configured to include a koan client .","In embodiments, the target machines  can include hardware typically found in conventional computing system (processors, memory, video cards, network interface cards, storage devices, and the like). As such, the target machines  can include firmware on each of the target machines , such as a basic input\/output system (BIOS). The firmware contains basic code that executes once the target machines  begin running and each time the target machines  restart. The firmware can be responsible for identifying, testing, and initializing the hardware of the target machines, prior to other software (e.g. OS) taking control. The firmware can also include configuration data that is utilized in initializing the hardware.","In embodiments, the target machines , in the network , can be different types of computing systems. For example, the various target machines  can be manufactured or constructed by different vendors, for example, Dell Corporation, IBM Corporation, Hewlett Packard Corporation, and the like. Typically, each vendor can utilize a different firmware for the target machines , which they manufacture. As such, the firmware for the target machines  can differ and can utilize specific instructions for communicating with the firmware and a specific format of the firmware configuration data, based on the vendor of the target machines .","In embodiments, the cobbler server  can be configured to manage the firmware of the target machines , regardless of the type of the target machines . For example, the target machines  can include different types of firmware based on the particular vendor of the target machines . To achieve this, the cobbler server  can be configured to provide a firmware tool  to one or more of the target machines  and to interact with the firmware tool  in order to manage the firmware of the target machines .","In embodiments, the firmware tool  can be configured to operate on the target machines  independent of the particular firmware of the target machines . To achieve this, the firmware tool  can be configured to include a translation library . The translation library  can include lists of the specific instructions to communicate with the different firmware and a conversion table to convert common instructions into the specific instructions for communicating with the different firmware. The conversion table can map a particular common instruction to a particular specific instruction in the particular list associated with a particular type of the firmware. The translation library  enables the firmware tool to receive the common instructions for interacting with firmware and convert those common instructions into the specific instructions that are compatible with the different types of firmware. Additionally, the translation library  can include a list of the formats for the configuration data of the different firmware and a conversion table for converting the different configuration data formats into a common configuration data format. As such, the firmware tool  can be configured to operate and execute on any target machine  regardless of the type of the target machines  and the firmware on the target machines .","In embodiment, the firmware tool  can also be configured to include the necessary logic, routines, instruction, and commands to boot the target machines  or to cooperated with the OS of the target machines  in order to identify the type of the target machine , to communicate with the firmware of the target machines , and to manage the firmware of the target machines. The firmware tool  can be, for example, a disk image, an ISO image, a software appliance (e.g. portions of an OS and applications), or any other type of tailored software application capable of executing on the target machines .","In embodiments, the cobbler server  can be configured to utilize the firmware tool  to perform any number of management processes on the firmware of the target machines . The cobbler server  can be configured to utilize the firmware tool  to collect firmware configuration data , alter the firmware configuration data, and the like.","In embodiments, the cobbler server  can initiate providing the firmware tool  upon the occurrence of any number of events. For example, the cobbler server  can provide the firmware tool  when a target machine  is added to the network  or new hardware is added to a target machine . Likewise, the cobbler server  can provide the firmware tool , periodically, to the target machines  to test the firmware of the target machines . Additionally, the cobbler server  can be configured to provide the firmware tool  in the event an error occurs on the target machines  (hardware\/software failure, intruder attack on the target machines , etc.).","In embodiments, the cobbler server  can be configured to maintain the firmware tool  for access and utilization in managing the firmware of the target machines . For example, the cobbler server  can be configured maintain the firmware tool  in a non-transitory storage device or system (CD, DVD, hard drive, portable storage memory, database etc.) whether local to the cobbler server  or remotely located. Additionally, the cobbler server  can maintain the firmware tool  or information specifying the location of the firmware tool  in the provisioning database .","In embodiments, to provide the firmware tool , the cobbler server  can be configured to provide the firmware tool  utilizing the network management server . The cobbler server  can be configured to instruct the network management server  to provide a command to the koan client  on the target machines . The command can be configured to cause the koan client  to retrieve the firmware tool  from the cobbler server  and initiate the firmware tool  on the target machines . Likewise, the cobbler server  can be configured to directly instruct the koan client  to retrieve the firmware tool  and to initiate the firmware tool .","In embodiments, the network management server  can be any type of network management application or tool to securely communicate with the target machines , to monitor the state of the target machines , to retrieve and request data from the target machines , and to manage and direct the target machines . For example, the network management server  can be a \u201cFUNC\u201d server as described in U.S. patent application Ser. No. 12\/130,424, filed May 30, 2008, entitled \u201cSYSTEMS AND METHODS FOR REMOTE MANAGEMENT OF NETWORKED SYSTEMS USING SECURE MODULAR PLATFORM\u201d (U.S. Patent Application Publication No. 20090300180) assigned to Red Hat Corporation, the disclosure of which is incorporated herein, in its entirety, by reference.","In embodiments, the cobbler server  can be configured to provide the firmware tool  to the target machines , directly. To achieve this, the cobbler server  can be configured to transmit the firmware tool  to the target machines .","In embodiments, once the firmware tool  is transmitted, the cobbler server  can be configured to instruct the target machines  to alter their power state (e.g. power cycle) to initiate the firmware tool , if necessary. For example, in order to communicate with the firmware, the target machines  may need to be power cycled. The cobbler server  can power cycle (power down\/power up) the target machines  in order to initiate the firmware tool  or restart the target machines  after the firmware tool  has completed management. The cobbler server  can be configured to communicate with the power management system  of the target machines  to alter the power state of the target machines . To achieve this, the cobbler server  can be configured to include a power management module .","In embodiments, the power management module  can be configured to communicate with the power management systems  of the target machines . The power management module  can be configured to instruct the power management systems  to alter the power state of the target machines . The power management module  can be configured to generate a command or instruction. The instruction can include access information for the power management systems  and the power state alteration to be performed.","In embodiments, the power management module  can be configured to form the instruction in a protocol utilized by the particular power management systems . For example, the cobbler server  can be configured to utilize conventional or proprietary protocols or tools such as IPMI, DRAC, ILO, fence agents and the like. The power management module  can be configured to utilize a pre-determined protocol or utilize several protocols in order to determine the appropriate protocol. Once generated, the cobbler server  can be configured to transmit the instruction to the determined power management systems .","In embodiments, the power management module  can be implemented as a portion of the code for the cobbler server . Likewise, the power management module  can be implemented as a separate software tool accessible by the cobbler server . Additionally, the power management module  can be implemented as a portion of the code for the network management server . The power management module  can be written in a variety of programming languages, such as JAVA, C++, Python code, and the like to accommodate a variety of operating systems, machine architectures, etc. Additionally, the power management module  can be configured to include the appropriate application programming interfaces (APIs) to communicate with and cooperate with other components of the cobbler server .","In embodiments, once the firmware tool  has been initiated, the cobbler server  can be configured to interact with the firmware tool , directly, to instruct the firmware tool  and to collect the configuration data  from the firmware tool . Likewise, the cobbler server  can be configured to operate in conjunction with the network management server  in order to instruct the firmware tool  and to collect configuration data  from the firmware tool . The cobbler server  can be configured to instruct the network management server  to interact with the firmware tool  and to collect the configuration data . Once collected, the cobbler server  can be configured to receive the configuration data  from the network management server .","In embodiments, the firmware tool  can be configured to utilize the translation library  in order to provide the configuration data  in a common format. For example, once the firmware tool  acquires the configuration data form particular firmware, the firmware tool  can apply the appropriate conversion for the particular firmware, from the translation library , in order to produce the configuration data  in the common format.","In embodiments, once data is collected, the cobbler server  can be configured to store the configuration data  in a firmware record . The firmware record  can be configured to categorize the configuration data  according to the data that uniquely identifies the target machines  in the network  such as Media Access Control (\u201cMAC\u201d) address, Ethernet Hardware Address (\u201cEHA\u201d), and the like. The firmware record  can be configured to associate the configuration data  of the target machines  with the data that uniquely identifies the target machines . The cobbler server  can be configured to maintain the firmware record  in the provisioning database , or any other local or remote storage system.","In embodiments, once the cobbler server  has received the configuration data  and stored the configuration data  in the firmware record , the cobbler server  can be configured to perform other firmware management processes on the target machines . For example, the cobbler server  can be configured to utilize the configuration data  in the firmware record  to check the current configuration data of the target machines .","For instance, in one example, a particular target machine  can experience an error or other event such as an intruder attack. The cobbler server  can be configured to provide the firmware tool  to the particular target machine  and configured to instruct the firmware tool  to collect the current firmware configuration data, as described above. If the current firmware configuration data does not match the configuration data  stored in the firmware record , the cobbler server  can be configured to instruct the firmware tool  to apply the configuration data  stored in the firmware record  to the particular target machine . The firmware tool  can be configured to convert the configuration data , which is stored in the common format, into the specific format that corresponds to the firmware by utilizing the translation library . Likewise, the firmware tool  can be configured to utilize the translation library  to communicate with the firmware.","In embodiments, for further example, the cobbler server  can be configured to instruct the firmware tool  to perform other firmware management process such as altering the configuration data. For instance, whether directly or via the management server , the cobbler server  can be configured to provide the firmware tool  to a particular target machine  and configured to instruct the firmware tool  to alter a particular parameter in the configuration data. The cobbler server  can be configured to instruct the firmware tool  by providing a common instruction to alter the parameter and the desired alteration. Once received, the firmware tool  can be configured to convert the common instruction into a specific instruction for the type of the target machine  and provide the specific instruction to the target machine  in order to alter the parameter.","In embodiments as described above, the firmware record  can be generated and populated by the configuration data  received from the firmware tool . Likewise, the firmware record  can be generated and populated independently of the firmware tool . For example, an administrator or operator of the network  can generate and populate the records. Whether generated independently or by data from the firmware tool , the cobbler server  can be configured to provide the identification and the type of the target machines  to the firmware tool  during the management processes to facilitate identifying the target machines . Likewise, the firmware tool  can be configured to identify the type of target machine , independently, once initiated on the target machine .",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 3","b":["300","115","102","215","300","302","304","308","308","302","120","300","120","300","102","120"]},"Processor  further communicates with network interface , such as an Ethernet or wireless data connection, which in turn communicates with one or more networks , such as the Internet or other public or private networks. Processor  also communicates with the provisioning database , the cobbler server , and the network management server , to execute control logic and perform the firmware management processes described above and below.","As illustrated, the cobbler server  can be implemented as a software application or program capable of being executed by a conventional computer platform. Likewise, the cobbler server  can also be implemented as a software module or program module capable of being incorporated in other software applications and programs. In either case, the cobbler server  can be implemented in any type of conventional proprietary or open-source computer language.","As illustrated, the network management server  can be executed in the computing system . Likewise, the network management server  can be executed in a separate computing system including components similar to computing system . Accordingly, the computing system  can communicate with the network management server  via the network interface .",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 4","b":["200","402","404","102","212","205","102","212","102","212","205","115","205","102","212","205","205","102","212","205","205"]},"In , the cobbler server  can instruct the firmware tool  to collect firmware configuration data from the target machine . For example, the cobbler server  can interact with the firmware tool , directly, to instruct the firmware tool  and to collect the configuration data  from the firmware tool . Likewise, the cobbler server  can operate in conjunction with the network management server  in order to instruct the firmware tool  and to collect configuration data  from the firmware tool . The cobbler server  can instruct the network management server  to interact with the firmware tool  and to collect the configuration data . Likewise, the cobbler server  or the network management server  can communicate with the power management system of the target machine  in order to power cycle the target machine to initiate the firmware tool .","The firmware tool  can utilize the translation library  to allow the cobbler server  to communicate with the firmware using common instructions and to provide the configuration data  in a common format. For example, once the firmware tool  acquires the configuration data form particular firmware, the firmware tool  can apply the appropriate conversion for the particular firmware, from the translation library , in order to produce the configuration data  in the common format.","In , the cobbler server  can receive the configuration data  from the firmware tool . For example, the cobbler server  can be receive the configuration data  directly or from the network management server .","In , the cobbler server  can store the configuration data  in a firmware record . For example, the firmware record  can categorize the configuration data  according to the data that uniquely identifies the target machines  in the network  such as Media Access Control (\u201cMAC\u201d) address, Ethernet Hardware Address (\u201cEHA\u201d), and the like. The firmware record  can be associate the configuration data  of the target machines  with the data that uniquely identifies the target machines .","In , once the cobbler server  has received the configuration data  and stored the configuration data  in the firmware record , the cobbler server  can perform additional firmware management on the target machine . For example, the cobbler server  can utilize the configuration data  in the firmware record  to check the current configuration data of the target machines . In , the cobbler server  can provide the previously stored configuration data in firmware record  to the firmware tool  if the received configuration data  differs from the previously stored data in firmware record .","In , the process can end, but the process can return to any point and repeat.","While the invention has been described with reference to the exemplary embodiments thereof, those skilled in the art will be able to make various modifications to the described embodiments without departing from the true spirit and scope. The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. In particular, although the method has been described by examples, the steps of the method may be performed in a different order than illustrated or simultaneously. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope as defined in the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various features of the embodiments can be more fully appreciated, as the same become better understood with reference to the following detailed description of the embodiments when considered in connection with the accompanying figures, in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
