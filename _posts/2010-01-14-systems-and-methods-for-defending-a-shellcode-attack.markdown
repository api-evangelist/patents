---
title: Systems and methods for defending a shellcode attack
abstract: A computer-implemented method for defending an attack from the execution of shellcode is described. Elements within a dynamically linked library (dll) may be duplicated. The dll resides in a first memory space. The duplicated elements may be redirected into a second memory space. A protection attribute may be established for the elements within the second memory space. A location of execution code attempting to access the elements within the second memory space may be determined. The execution code may be prevented from being executed based on the determined location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539578&OS=08539578&RS=08539578
owner: Symantec Corporation
number: 08539578
owner_city: Mountain View
owner_country: US
publication_date: 20100114
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["The use of computer systems and computer-related technologies continues to increase at a rapid pace. This increased use of computer systems has influenced the advances made to computer-related technologies. Indeed, computer systems have increasingly become an integral part of the business world and the activities of individual consumers. Computer systems may be used to carry out several business, industry, and academic endeavors. The wide-spread use of computers has been accelerated by the increased use of computer networks, including the Internet. Many businesses use one or more computer networks to communicate and share data between the various computers connected to the networks. The productivity and efficiency of employees often requires human and computer interaction.","Users of computer technologies continue to demand that the efficiency of these technologies increase. These demands include demands to improve the security of computing devices. Malware may infect a targeted device and allow a malicious user to take control of the targeted device.","An example of malware may include shellcode. Shellcode may originate from an attacking device and start a command shell on a targeted device. The user of the attacking device may then use the command shell to control the targeted device. Shellcode may either be local or remote, depending on whether the code provides the user control over the same machine that the code runs on (local) or over another machine through a network (remote). Users of targeted devices may not be aware that a device is under the control of a malicious user. As a result, benefits may be realized by providing systems and methods for defending against attacks caused by malware. In particular, benefits may be realized by providing systems and methods for defending a shellcode attack.","According to at least one embodiment, a computer-implemented method for defending an attack from the execution of shellcode is described. Elements within a dynamically linked library (dll) may be duplicated. The dll resides in a first memory space. The duplicated elements may be redirected into a second memory space. A protection attribute may be established for the elements within the second memory space. A location of execution code attempting to access the elements within the second memory space may be determined. The execution code may be prevented from being executed based on the determined location.","In one configuration, the dll is a kernel32.dll. The determined location of the execution code may indicate that the code is running on a heap memory allocation. Alternatively, the determined location of the execution code may indicate that the code is running on a stack memory allocation. In one embodiment, the executing code may be allowed to execute if the determined location indicates the code is not running on a heap or stack memory allocation.","In one example, one or more links may be modified to point to elements within the second memory space instead of elements within the first memory space. The modified links may point to an InLoadOrderModuleList, an InMemoryOrderModuleList, and an InInitializationOrderModuleList.","In one embodiment, the protection attribute is a PAGE_GUARD|PAGE_EXECUTE_READWRITE attribute. In addition, an exception handler may be established to identify an exception raised by the protection attribute for elements within the second memory space. Further, the exception handler may be used to determine the location of the execution code attempting to access the elements within the second memory space.","A computer system configured to defend an attack caused by the execution of shellcode is also described. The computer system may include a processor and memory in electronic communication with the processor. The computer system may also include a shellcode detection module configured to duplicate elements within a dynamically linked library (dll). The dll may reside in a first memory space. The module may be further configured to redirect the duplicated elements into a second memory space, and establish a protection attribute for the elements within the second memory space. In addition, the module may be configured to determine a location of execution code attempting to access the elements within the second memory space, and prevent the execution code from executing based on the determined location.","A computer-program product for defending an attack from the execution of shellcode is also described. The computer-program product may include a computer-readable medium having instructions thereon. The instructions may include code programmed to duplicate elements within a dynamically linked library (dll). The dll may reside in a first memory space. The instructions may also include code programmed to redirect the duplicated elements into a second memory space, and code programmed to establish a protection attribute for the elements within the second memory space. The instructions may further include code programmed to determine a location of execution code attempting to access the elements within the second memory space, and code programmed to prevent the execution code from executing based on the determined location.","Features from any of the above-mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments, features, and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.","While the embodiments described herein are susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather, the instant disclosure covers all modifications, equivalents, and alternatives falling within the scope of the appended claims.","In one embodiment, shellcode represents pieces of assembly language which are used to launch shells. The shellcode may be used as the payload in the exploitation of a software vulnerability. In one configuration, shellcode may originate from an attacking device and start a command shell on a targeted device. The user of the attacking device may then use the command shell to control the targeted device. Shellcode may either be local or remote, depending on whether the code provides the user control over the same machine that the code runs on (local) or over another machine through a network (remote).","In one example, a particular type of remote shellcode may download and execute some form of malware on the targeted device. This type of remote shellcode may not spawn a command shell. Instead, the remote shellcode may instruct the targeted device to download a certain executable file from a network, save the file to disk, and execute the file. This type of attack may be used in a drive-by download attack, where malware may be downloaded without knowledge of the user of the targeted device. For example, a targeted device may visit a malicious webpage that attempts to download and execute shellcode (unknowingly to the user of the targeted device) in order to install malware on the targeted device.","Many types of shellcode may attempt to acquire the base address of a particular dynamically linked library (dll) before calling application programming interfaces (APIs). These APIs may be called on to perform mal-behaviors, such as, but not limited to, malware downloading, file writing, and execution. In one example, shellcode may attempt to acquire the base address of a kernel32.dll before calling APIs to perform the functions described above. The kernel32.dll may be present in the 32-bit and 64-bit versions of MICROSOFT WINDOWS\u00ae. This dll may expose to applications most of the Win32 base APIs, such as memory management, input\/output operations, process and thread creation, and synchronization functions.","In one example, the execution code of the shellcode typically runs on heap or stack memory allocations. Heap-based memory allocation may refer to the allocation of memory storage for use in a computer program during the runtime of that program. The memory allocated through heap-based memory allocation may exist until it is explicitly released. In contrast, stacks may refer may refer to regions of memory where data is added or removed in a last-in-first-out manner. Memory on the stack may be automatically reclaimed when a function exits.","In one embodiment, the present systems and methods may identify the location of the execution code of the shellcode attempting to acquire the base address of the kernel32.dll. Because execution of shellcode runs on heap or stack memory allocations, a shellcode attack may be detected immediately. The present systems and methods may be proactive, accurate, and independent of signatures in detecting shellcode attacks.","Currently, vulnerability attacks are a popular way to spread malware, such as through a drive-by download technique described above. Another example of a vulnerability attack may include a zero-day attack. This type of attack (or threat) attempts to exploit vulnerabilities of applications that may be unknown to others, undisclosed to the vendor of the applications, or for which no security fix is available. Zero-day attacks may be used or shared by users of attacking devices before the vendor of an application is aware of the vulnerability. Because of the delay of Intrusion Prevention System (IPS) detection mechanisms, and the relative quickness in which a file scan detection mechanism becomes out-of-date due to script obfuscation, benefits may be realized by providing systems and methods to effectively and efficiently detect a zero-day vulnerability attack before the signature is released. In addition, benefits may be realized by providing systems and methods for detecting an obfuscated attack when the signature is invalid.","In one configuration, Windows\u00ae applications interact with an operating system (OS) through callings to APIs. Examples of two APIs may include LoadLibrary and GetProcAddress. In one embodiment, both of these APIs may be exported by the kernel32.dll. As previously stated, a shellcode may attempt to acquire the base address of the kernal32.dll's memory image. The shellcode may then attempt to acquire the address of LoadLibrary and GetProcAddress. Having obtained the addresses of these two APIs, the shellcode may allow malware to load specific dlls on the targeted device, obtain addresses for additional APIs, such as URLDownLoadToFile, CreatFile, WriteFile, CopyFile, CreateProcess, ShellExecute, etc. Table 1 below illustrates an example of execution code in the shellcode that may be used to acquire the base address of the kernel32.dll.",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mov","eax, [fs:30h]"]},{"entry":[{},"mov","eax, [eax+0ch]"]},{"entry":[{},"mov","eax, [eax+1ch]"]},{"entry":[{},"mov","eax, [eax]"]},{"entry":[{},"mov","eax, [eax+8h]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"By identifying the location of the execution code that attempts to acquire the base address of the kernel32.dll, and determining whether the execution code is running on heap or stack memory allocations, a shellcode attack (or threat) may be detected.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1","b":["100","102","104","104","110","102","108","110","108","102","108","110","102","112","102","108"]},"In one embodiment, the shellcode detection module  may be located on a server . The server  may be in communication with client A  across the network connection . The detection module  located on the server  may monitor client A  and detect when the shellcode  originating from client B  is attempting to execute on client A .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["200","202","202","204","204","202","202","202"]},"In one configuration, the shellcode detection module  may include a searching module . The searching module  may search the memory of client A  for information relating to a dll, such as the kernel32.dll. The detection module  may also include a duplication module . The duplication module  may duplicate the information of the dll found by the searching module . For example, the duplication module  may duplicate the information within the kernel32.dll.","A memory allocation module  may allocate a new memory space within client A . In one configuration, the duplicated information obtained by the duplication module  may be placed in the newly allocated memory. A link modification module  may modify one or more links (or pointers) that point to information in the kernel32.dll stored in the previous memory space. The links may be modified by the modification module  to point to information of the kernel32.dll within the newly allocated memory.","The shellcode detection module  may further include a setup module . In one configuration, the setup module  may set up various protection attributes for information within the newly allocated memory. For example, the setup module  may set up a protection so that information within the newly allocated memory may not be modified, accessed, etc. by executing code. In one embodiment, an address locating module  may determine the address (or location) of executing code attempting to execute on the client A . An analyzing module  may analyze the code attempting to execute, as well as the location determined by the address locating module , to determine whether the executing code is shellcode attempting to execute on client A . If the analyzing module  determines that the code attempting to execute is shellcode, a code blocking module  may prevent (or block) the code from executing on client A .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["330","330","330","344"]},"In one configuration, the elements of the TEB  may be accessed as an offset of the segment register FS. For example, the elements of the TEB  may be accessed by an offset from FS:[0]. As a result, the first element (i.e., NT_TIB tib ) in the TEB  may be at position FS:[0] of the segment register. The other elements , , , ,  within the TEB  may also be associated with a certain position within the TEB . These various positions may be offsets from FS:[0]. For example, an environment pointer  may be located at the position FS:[0x1Ch] in the segment register, and a client identification  may be positioned within the TEB  at the position FS:[0x20h] in the segment register. Further, an active RPC handle  may be located at the position FS:[0x28h], and a local storage pointer  may be located at the position FS:[0x2Ch]. Finally, a linear address  corresponding to the PEB  may be located at the position FS:[0x30h]. In other words, a pointer  to the PEB  may be positioned at the position FS:[0x30h].","In one embodiment, the PEB  may include elements , , , , , ,  that may allow access to import tables, process start-up arguments, image names, etc. For example, an address space indicator  may be positioned at the position 00h within the PEB . Similarly, a read image file options element  may be positioned at the position 01h. Further, a debugging element  may be positioned at the position 02h, and a spare element  may be located at the position 03h. A mutant element  may be positioned at the position 04h, and the base address of the image  may be positioned at the position 08h. Finally, a pointer  to a loader data module may be positioned at the position 0Ch. Details regarding the loader data will be described below.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 4","b":["444","460","444","446","448","450","452","454","456","458","458","460","444","460","462","464","466","468","470","472","460","462","464","460","466","460","468","470","472","468","470","472"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["560","568","572","574","560","562","564","566","568","570","572","574","576","578","580","582","584","586","588","590","592","594","596","598","575","577","568","560","576","574","560","572","580","574","574","582","574","574","584","574","586","588","588","574","574","590","592","594","596","598","574","575","574","577","574","577","574"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 5"],"b":["660","674","660","662","664","666","668","670","672","670","660","678","674","674","676","678","680","682","684","686","688","690","692","694","696","698","675","677"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7","b":["774","774","774","774","776","778","780","782","784","786","788","790","792","794","796","798","775","777","774","776","778","780","782","784","786","788","790","792","794","796","798","775","777","774","776","778","780","782","784","786","788","790","792","794","796","798","775","777","774","776","776","776","774","774","778","774","778","778","774","774","780","774","780","780","774","774","774","774","774","774","774","774"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 8","b":["874","874","876","878","880","882","884","886","888","890","892","894","896","898","875","877","879","874","879","879","876","878","880","882","884","886","888","890","892","894","896","898","875","877"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 9","b":["900","900","104"]},"In one configuration, information for a dll may be duplicated . For example, the memory of a targeted device may be searched in order to locate the elements of a dll, such as the kernel32.dll. As previously explained, the kernel32.dll may be a structure of a loader data module. In one configuration, the duplicated elements of the dll may be redirected  into a newly allocated memory space. In other words, elements of the kernel32.dll may be copied to the new memory. Further, links pointed to an InLoadOrderModuleList, an InMemoryOrderModuleList, and an InInitializationOrderModuleList within the previous memory space may be modified to point to the newly allocated memory space.","In one embodiment, an exception handler may be established . The handler may be designed to flag (or catch) an exception that is raised due to a page protection attribute. For example, an AddVectorExceptionHandler API may be called to establish a Vectored Exception Handler (VEH). In one configuration, the VEH may be designed to catch the EXCEPTION_GUARD_PAGE exception. An exception handler may be defined as below in Table 2.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"LONG WINAPI",{}]},{"entry":[{},{},"VectoredHandler (",{}]},{"entry":[{},{},"struct_Exception_Pointers *ExceptionInfo",{}]},{"entry":[{},{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment the VectoredHandler may be invoked to catch the EXCEPTION_GUARD_PAGE exception.","In one configuration, a page protection attribute may be established  for the newly allocated memory. For example, the protection attribute for the newly allocated memory may be set as a PAGE_GUARD|PAGE_EXECUTE_READWRITE attribute. As a result, when a central processing unit (CPU) accesses the newly allocated memory, an exception may be raised because of the established page protection attribute. For example, an EXCEPTION_GUARD_PAGE exception may be raised.","In one embodiment, the location of execution code causing the occurrence of the exception may be determined . The base address of the execution code may be obtained with an extended instruction pointer (EIP) associated with the VectoredHandler. In one embodiment, the EIP value of the VectoredHandler may be obtained using VirtualQueryEx( ) Once the EIP is determined, the content of the base address pointed to by the EIP may be checked to verify whether it begins with \u2018MZ\u2019. A determination  may be made as to whether the execution code is located in a code section. For example, if the content of the base address of the execution code begins with \u2018MZ\u2019, it may be determined  that the execution code is located in a code section, and the execution code may be allowed  to execute. In other words, if the location of the execution code is in code section, it may be assumed to be a normal and legitimate execution of code.","If the code is allowed to execute, the protected memory attribute described above may be set as PAGE_EXECUTE_READWRITE to allow the program to continue executing. In addition, a SINGLE_STEP bit may be set in thread context in order to enable the memory protection attribute to be established again. In one embodiment, setting the SINGLE_STEP may cause an EXCEPTION_SINGLE_STEP exception when the next instruction is executed. Through an EXCEPTION_SINGLE_STEP exception handler, PAGE_GUARD PAGE_EXECUTE_READWRITE masks may be set to the allocated memory again in order to reopen the memory protection.","If, however, it is determined  that the execution code is not located in a code section (e.g., the content of the base address pointed to by the EIP does not begin with \u2018MZ\u2019), the execution code may be prevented  from executing. For example, if the location of the execution code is on heap or stack, the execution code may be assumed to be shellcode and may be blocked or prevented  from executing.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 9A","b":["920","920","104"]},"In one configuration, one or more exception handlers may be established . In addition, a specific memory attribute may be modified  once the exception handlers are set up. In one embodiment, the memory attribute may be monitored  in order to detect  an occurrence of an exception. In one example, an occurrence of an access exception may be detected . Once the occurrence of the access exception has been detected , a determination  may be made as to whether the access exception is malicious. If it is determined  that the access exception is malicious, execution code may be prevented  from executing the access exception.","If, however, it is determined  that the access exception is not malicious, the occurrence of an additional exception may be enabled . For example, as previously explained, an exception handler1 may set up the SINGLE_STEP to cause the occurrence of the additional exception. In one embodiment, a page attribute may be restored  in order to allow the execution code to continue executing. For example, the exception handler1 may restore  the page attribute to allow the program to continue executing. In one configuration, the occurrence of the additional exception may be detected . For example, an exception handler2 may detect the occurrence of the exception associated with the SINGLE_STEP. In addition, the memory protection may be reopened  and the method  may continue to monitor  the memory for an occurrence of an exception.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 10","b":["1010","1010","1012","1010","1014","1017","1018","1020","1022","1024","1026","1028","1030","1032","1033","1034","1037","1038","1035","1090","1035","1039","1040","1042","1046","1012","1028","1047","1012","1030","1048","1012"]},"Bus  allows data communication between central processor  and system memory , which may include read-only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. For example, the shellcode detection module  to implement the present systems and methods may be stored within the system memory . Applications resident with computer system  are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk ), an optical drive (e.g., optical drive ), a floppy disk unit , or other storage medium. Additionally, applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem  or interface .","Storage interface , as with the other storage interfaces of computer system , can connect to a standard computer readable medium for storage and\/or retrieval of information, such as a fixed disk drive . Fixed disk drive  may be a part of computer system  or may be separate and accessed through other interface systems. Modem  may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface  may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface  may provide such connection using wireless techniques, including digital cellular telephone connection, Cellular Digital Packet Data (CDPD) connection, digital satellite data connection or the like.","Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., document scanners, digital cameras and so on). Conversely, all of the devices shown in  need not be present to practice the present systems and methods. The devices and subsystems may be interconnected in different ways from that shown in . The operation of a computer system such as that shown in  is readily known in the art and is not discussed in detail in this application. Code to implement the present systems and methods may be stored in computer-readable storage media such as one or more of system memory , fixed disk , optical disk , or floppy disk . The operating system provided on computer system  may be MS-DOS\u00ae, MS-WINDOWS\u00ae, OS\/2\u00ae, UNIX\u00ae, LINUX\u00ae, or another known operating system.","Moreover, regarding the signals described herein, those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block, or a signal can be modified (e.g., amplified, attenuated, delayed, latched, buffered, inverted, filtered, or otherwise modified) between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next, other embodiments of the present disclosure may include modified signals in place of such directly transmitted signals as long as the informational and\/or functional aspect of the signal is transmitted between blocks. To some extent, a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved (e.g., there will inevitably be some attenuation and delay). Therefore, as used herein, a second signal derived from a first signal includes the first signal or any modifications to the first signal, whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and\/or final functional aspect of the first signal.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 11","b":["1100","1110","1120","1130","1140","1140","1110","1150","104","1140","1140","1140","1160","1","1140","1160","1","1170","1180","1","1140","1140","1110","1120","1130","1150","1190","1170"]},"With reference to computer system , modem , network interface  or some other method can be used to provide connectivity from each of client computer systems ,  and  to network . Client systems ,  and  are able to access information on storage server A or B using, for example, a web browser or other client software (not shown). Such a client allows client systems ,  and  to access data hosted by storage server A or B or one of storage devices A()-(N), B()-(N), ()-(N) or intelligent storage array .  depicts the use of a network such as the Internet for exchanging data, but the present systems and methods are not limited to the Internet or any particular network-based environment.","While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","Furthermore, while various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","The foregoing description, for purpose of explanation, has been described with reference to specific embodiments. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present systems and methods and their practical applications, to thereby enable others skilled in the art to best utilize the present systems and methods and various embodiments with various modifications as may be suited to the particular use contemplated.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving,\u201d as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
