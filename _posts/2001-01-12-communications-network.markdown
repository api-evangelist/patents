---
title: Communications network
abstract: A registration server in a network implementing an API (application programming interface) authenticates services and provides discovery of network resources, prior to registering services with selected network resources. Multiple instances of services and/or multiple service nodes are registered in a single service agreement.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07660903&OS=07660903&RS=07660903
owner: British Telecommunications public limited company
number: 07660903
owner_city: London
owner_country: GB
publication_date: 20010112
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["This application is the U.S. national phase of international application PCT\/GB01\/00121 filed 12 Jan. 2001 which designated the U.S.","1. Technical Field","The present invention relates to a communications network, and in particular to a registration server and to other components implementing a programmable interface to resources in such a network.","2. Description of Related Art","Conventionally, advanced communications services in a telecommunications network have been implemented using an IN (intelligent network) architecture. In such an architecture, the control logic and various network resources required to implement advanced services are tightly integrated with the communications network, and in general are intended to be run under the control of the network operator. Such an approach allows robust large-scale applications to be implemented. However, the architecture tends to be relatively inflexible, so that developing and deploying new services can be time-consuming. In addition, it can be difficult to make network resources available to service providers other than the network operator, while maintaining the security and integrity of the network.","Recently, there has been interest in developing communications applications using computing platforms located at the edge of the network and typically operated under the direct control of the service provider. However, since such CTI (computer telephony integration) applications have only indirect and limited access to the capabilities of the network, this approach often results in inefficient use of network resources.","It has been proposed to implement communications networks that include an application programming interface (API) between service components embedded in the network, and applications running at the edge of the network. Such an approach combines the benefits of the economies of scale and of reliability offered by conventional network intelligence architectures, with the flexibility and accessibility of the edge of network approach.","A network including an API as described above has been developed by the present applicant in conjunction with other members of the Parlay Organisation. The Parlay Organisation has published a specification for the API together with resources to aid implementation. An overview of the Parlay API is contained in the document \u201cParlay API Business Benefits White Paper\u201d, Parlay Organisation, Jun. 11, 1999, Published at www.parlay.org. Versions 1.2 and 2 of the Parlay API specification are also available from the same site.","In implementing a communications network with a service API, a registration server is used to control access by edge-of-network service applications to components in the network that provide service resources. The registration server may be used to carry out an authentication process in which the identity of a service application, and the authority of the owner of that application to access network resources, is checked, for example, using a digital signature, and a database listing authorised users of the network. The registration server may also be used for the process of discovery, in which, in response to a request from a service application, the registration server provides details of available network resources. Subsequently, the registration server registers a service application with one or more services resources. This may be done by communicating to the service application the logical identity and physical address of a service manager object on a particular service node and\/or communicating to the service manager object data identifying the corresponding service application.","A method of operating a communications network including one or more service nodes, a registration server arranged to control access by service applications to the one or more service nodes, and a platform remote from the registration server running one or more communications service applications, the method including:\n\n","In the description and claims of the present application, the term \u201cservice node\u201d is used broadly to denote a node of the network which provides resources for running communications services. It includes, but is by no means limited to, computing platforms located at the edge of the network and used for specialised services such as messaging.","Step (d) may include binding a plurality of instances of the service application to the at least one service node, and the method may further include distributing successive initial event notifications between the plurality of instances of the service application. The method may alternatively include registering a plurality of service nodes with at least one instance of the service application, and distributing successive initial session requests between the plurality of service nodes.","In the example described below, the service node is a service control point in a network using an IN (intelligent network) architecture.","The present invention provides a method of implementing an API in a communications network that is better able to support applications requiring a high degree of resilience. This is achieved by amending the implementation of the API so that the process of registration is no longer limited to creating one-to-one bindings between service applications and service nodes, but instead allows several instances of a service application to be registered with a node and or several different nodes to be registered with one service application.","A communications network comprises an access network  and a core network . Customer terminals , are connected to the access network . Service provider platforms , are also connected to the access network . A registration server  is connected to the network and, as is further described below, is used in implementing an API (application programmers interface) to network resources. Those network resources include a number of service nodes , , , each of which includes a respective gateway GW, GW, GW. The service nodes include hardware and software for running for example, number translation applications, interactive voice recognition and messaging services. As noted above, the term \u201cservice node\u201d is used here broadly to denote a node used in running a service application, and is not limited to nodes at edge-of-network locations.",{"@attributes":{"id":"p-0026","num":"0031"},"figref":"FIG. 2","b":["21","22"]},"As is shown schematically in , the communications network implements an application programmers interface (API) between applications running at the edge of the network in the so-called \u201centerprise domain\u201d and the network components used to implement the services in the network operator domain. In this example, the interface is that defined in the Parlay API specification.",{"@attributes":{"id":"p-0028","num":"0033"},"figref":"FIG. 4","b":["4","2","4","2","4","1"]},"In this example, objects implementing the framework FW reside on the registration server . The client applications and client FW run on the service provider platforms , . The Parlay services including the gateways are embodied in the service nodes , , ","When one of the client applications is initialised, it first signs-on with the Parlay API via the registration server. A Parlay authentication object is instantiated on the registration server and provides an authentication interface that enables mutual authentication of the registration server and the client application. In the process of authentication, the application returns an identifying code to the registration server. The registration server includes a database of recognised applications. The registration server performs a look-up on the application ID and may also retrieve a cryptographic key specific to the application.","In the discovery phase, applications request from the registration server discovery of a service feature identified by a property name and property values. The Parlay API specification defines a set of property names. Parlay services register with the registration server using the appropriate name. In response to the discovery request, the registration server returns a service ID which identifies the requested network service. Subsequently, the application selects the service. To do this, the application returns to the server the service ID received in response to the discovery enquiry. The registration server then returns a service token which uniquely identifies an instance of the service. Subsequently, before the application can make use of the service, it digitally signs an agreement with the registration server. The digital signature is stored with data including the application ID and the service token. This digital agreement may be used, for example, as the basis for subsequent charging by the network operator for use of its network service. When the agreement has been signed, the registration server returns to the application a reference to the object which implements the requested network service manager interface.","Implementation of the Parlay interface described above is described in further detail in the Parlay API specification 1.2. However, in implementing the invention, some modifications are required to each of the interfaces. As conventionally implemented, each single service agreement created using the Parlay interface has linked a single gateway to a single client application. In the present network embodying the invention, the interface is modified to link multiple gateways to multiple client applications under a single service agreement. In this way it is possible for a Parlay-supported end user service to be resilient against gateway or client application failure. Each service manager residing in a gateway is given the capability to forward initial event notifications, for example notification of an incoming call, to available client applications using a distribution algorithm, for example a round-robin algorithm. Similarly, on the client side, the client application support layer is able to invoke initial session requests. For example, a request to create a call, to one of a number of available gateways using a distribution algorithm. In addition to these features, the framework FW now includes a polling mechanism to detect the current state of the gateways that support a registered service. Detection of a failed gateway may be used to trigger an alarm. The availability of each of the gateways serving the client application is reported to the client framework. When a restored gateway is detected, after an outage, the framework requests the instantiation of a new service manager and posts a reference to the new service manager to the client FW. The client FW implements a polling mechanism that detects the current state of client applications. Detection of a failed client application may be used to trigger an alarm. The availability of each of the client applications is reported to the framework FW. When a restored client application is detected after an outage, the client FW communicates to the new client application a full list of references to the service managers.","The modifications to the Parlay API will now be described in relation to each of the specific interfaces shown in . One of those interfaces, that between the client framework and the client application does not form part of the Parlay API specification but is defined here as an aid to the description of the system as a whole.","FW\u2014Service Interface","Parlay Service Registration",{"@attributes":{"id":"p-0034","num":"0000"},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":["1. Parlay services are registered with the FW. To enable a parlay service to be supported across more than one gateway, the registration of the parlay service is distinct from the registration of the individual gateways that support that service. As shown in the message sequence chart of , the service node first requests registration with the FW, and subsequently invokes registration of all the gateways supporting the service. A separate invocation is sent for each gateway\n\nStart-up\n","1. As shown in , the FW requests the creation of a parlay service gateway manager in all gateway that supports the parlay service. A reference to the new service gateway manager is returned by the gateway.","2. Once the bind has been competed, the FW passes global event notification information to the service gateway managers. For example, the information might include the number ranges that the application owns. This information is stored in a database.\n\nFailure and Restoration of a Gateway\n","1. As shown in , the FW detects the failure of a gateway and raises an appropriate alarm.","2. The FW detects the restoration of a gateway and requests the instantiation of a new parlay service gateway manager for each service agreement signed. This reuses behaviour from service start-up.\n\nFailure of a Client Application\n","1. As shown in , having been notified of a Client Application failure, the FW reports this to each of the gateways.","2. Each gateway removes the stale reference from that gateway's list of valid Client Applications.\n\nFW\u2014Client FW Interfaces\n\nStart-up ()\n","1. The Client FW performs the authentication handshake with the FW.","2. The Client FW uses the discovery interface to find the Parlay service(s) to required to run the End User Service.","3. The Client FW selects a Parlay service and specifies the number (n) of gateways that is required for resilience purposes. It also specifies the maximum number of Client Applications (m) that will bind to the Parlay service gateways This may be specified as part of the service level agreement.","4. When the Client FW signs the service agreement the FW returns references to a list of service gateway managers to the Client FW.","5. The Client FW passes global event notification information through the FW, e.g. the Number ranges that the application \u201cowns\u201d. This information is stored in a database.\n\nFailure and Restoration of a Gateway ()\n","1. Having detected a gateway failure, the FW reports this to the Client FW.","2. Having detected the restoration of a gateway and requested the instantiation of a new service gateway manager, the FW sends a report to the Client FW, passing the reference of the service gateway manager as a parameter.\n\nFailure and Restoration of a Client Application ()\n","1. Having detected a Client Application failure, the Client FW reports this to the FW.\n\nClient Application\u2014Service Interfaces\n\nBind ()\n"]}},"After start-up or after restoration of a Client Application, and the passing of service gateway manager references to the Client Applications:\n\n"],"heading":["BACKGROUND","BRIEF SUMMARY OF EXEMPLARY EMBODIMENTS","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Systems embodying the present invention will now be described in further detail with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0017","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0023"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0024"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0027"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0028"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0029"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
