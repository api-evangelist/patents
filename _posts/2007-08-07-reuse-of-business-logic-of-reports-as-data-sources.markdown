---
title: Reuse of business logic of reports as data sources
abstract: An InfoSet API calls a query, the call defining selections for data retrieval. These selections are passed by the query to a report, which obtains data responsive to the selections via a data source. The obtained data is persisted in a global memory which allows such data to be accessed in multiple sessions. The persisted data is retrieved from the global memory by the query which in turns provides such data in response to the InfoSet API call. Techniques for automatically creating aspects of Infosets are also described as well as other related techniques, apparatus, systems, and articles.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07899841&OS=07899841&RS=07899841
owner: SAP AG
number: 07899841
owner_city: Walldorf
owner_country: DE
publication_date: 20070807
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","EXAMPLE 1","Supplier List (as a Report)","EXAMPLE 2","Hierarchical Sequential List","EXAMPLE 3","Supplier List as a Transaction"],"p":["The subject matter described herein relates to the reuse of historical underlying business logic of reports when deploying software solutions.","The development of large software solutions typically requires the reuse of software. This is especially the case when the user interface for software is modified to be compatible with, for example, a new operating system. In some development environments, software is generated based on pre-existing building blocks which can later be reused. However, in other environments, monolithic programs are generated, and reuse of portions of such programs can require significant programming effort. In either case, when generating a new user interface, the business logic often remains the same, thereby necessitating reuse of pre-existing software.","In one aspect, a query is called by an API that defines selections for data retrieval. The query passes the selections to a report, which in turn, obtains data responsive to the selections received from the query via a data source. The obtained data is persisted in a global memory which allows such data to be accessed in multiple sessions. The persisted data is retrieved from the global memory by the query to allow the query to responds to the API call using the persisted data retrieved from the global memory.","Numerous variations may be implemented singly or in combination dependent on the desired configuration. For example, the report can be an ABAP report, the query and\/or the report can be called via a dark call, the API call can bypass a selection handling component in the query, data responsive to the API call can be presented to a user, the API can be for an InfoSet which may optionally use a data dictionary to characterize how the data is to be presented in the report, and the API can provide metadata of a report and execution of business logic.","In another interrelated aspect, execution of a report is initiated with the output of the report being pre-defined and based on provided selections. During execution of the report, ALV metadata is computed. A portion of the ALV metadata (e.g., the non-relevant portion) is deleted to suppress presentation of an associated result list. Thereafter, a structure for an InfoSet is generated based on remaining non-deleted ALV metadata. Suggestions for the InfoSet are generated based on the generated structure and an analysis of a selection screen of the report. Thereafter, the InfoSet is generated based on the generated structure and the generated suggestions and a query is generated that displays all fields of the InfoSet.","Articles are also described that comprise a machine-readable medium embodying instructions that when performed by one or more machines result in operations described herein. Similarly, computer systems are also described that may include a processor and a memory coupled to the processor. The memory may encode one or more programs that cause the processor to perform one or more of the operations described herein.","The subject matter described herein provides many advantages. For example, the current techniques allow for a more efficient reuse of software as compared to conventional software. In some implementations, the subject matter described herein allows for the creation of new user interfaces for data reports and\/or to use data reports as a data source (e.g. for a Business Warehouse, etc.).","The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","110","120","130","140","150","160"]},"While the following is described in connection with data reports generated by SAP AG software, it will be appreciated that the underlying techniques are applicable to the reuse of software in a variety of scenarios.","A report as described in connection with the examples below can be characterized as a classical R\/3 report if it is written in the programming language ABAP, it needs the SAP GUI for execution and it reads data from a data source, processes and displays the data in a result list.","Each classical R\/3 report can contain the following components.\n\n","A report can consist of various parts (e.g. data retrieval, data preparation, presentation, etc.). A logical and physical separation is missing. Therefore these parts cannot be accessed individually. The report must be called as a whole.","The result can be displayed in various ways: either by using the standard ABAP list technique, standard GUI control table or by using the ALV (SAP List Viewer) component. ALV is an output medium for displaying tabular data which has, in some implementations, displaced the native ABAP list technique and GUI table control. There arc several variants of ALV (function modules and classes). ALV is able to present two kinds of lists, namely flat lists (tables), and hierarchically sequential lists (head\u2014item\u2014lists)","An important characteristic of a report is the so called dark call. The dark call is the call of a report without using the SAP GUI. This means that neither selection screen nor result list is presented on a screen. With a dark call, the selections have to be transferred to the report during the call. For this ABAP provides extensions for the call (statement SUBMIT). All relevant checks are performed and in case of errors the call is aborted. In addition, the result list is written into a file (spool data) that allows for later processing (e.g. printing, etc). The dark call of reports is the prerequisite for calling reports in the batch mode.","The InfoSet Query (also called SAP Query) is a tool for creating simple reports in a descriptive way, i.e. a query (a report) is defined without programming effort by simply enumerating the selections and describing the layout. The definition of queries is based on InfoSets. An InfoSet is the description of a data source and provides metadata for the definition of queries. An InfoSet can contain a structure from a Data Dictionary, a list of fields which are contained in the structure and which can be used for the definition of queries (not all fields contained in the structure have to be used), a list of selections, which are to be used in each query including the required checks (as ABAP code) and a description of the data retrieval.","The Data Dictionary is a data management system (DMS) that can perform tasks including: management of all data definitions (metadata); provision of information for evaluations; management of underlying support for software development; provision of support for documentation; and ensuring data definitions are reliable, flexible and current.","The goal of the data retrieval is to combine the result into one internal table. The data retrieval can be described in different ways. Normally no programming is necessary. But for the subject matter described herein, data retrieval can be described by using ABAP code\u2014with a so called data retrieval program.","In contrast to a query which is defined on top of an InfoSet, an InfoSet can also contain coding. It is possible to create an arbitrary number of queries on top of an InfoSet. All these queries use the data retrieval which is defined in the InfoSet. They differ in the number of used fields and in the layout. The query tool generates a report using the query and InfoSet definition. This report has the same structure as a classical R\/3 report (as described above).","A special API (InfoSet API) can be adopted for InfoSets and queries. Such an API can allow the individual parts of a query to be called separately. It may be possible to call only the selection screen, only the data retrieval or only the output of a query. This feature is realized by a special structure of generated reports.","The call of an individual part requires that the results of the preceding step are available (i.e., the individual call of the data retrieval requires the selection criteria and the individual call of the output requires the data which is to be shown). With such an InfoSet API, queries can be used as data sources (e.g. for the SAP business warehouse). As the definition of a query is possible without programming, the definition of such a data source is also possible without programming.","A prerequisite to reusing business logic of reports is that the data retrieval of a report can solely be called (i.e., without presenting the selection screen nor the result list on the screen). According to the target, the report itself may not be subject of modifications.",{"@attributes":{"id":"p-0029","num":"0032"},"figref":"FIG. 2","b":["200","210","230","212","214","216","220","212","210","214","230","216","240"]},"The following describes requirements to exclusively call the data retrieval are listed, and options how to meet these requirements are mentioned. With the following, it is assumed that such a call is executable by a generic application, i.e. a separate solution for each report is not necessary.","As a prerequisite, a separate call of the business logic of a report by a generic application is required. Such a report must support dark processing (as described above). In addition, both the number and the type of the selections must be known (the selections must be propagated to the data retrieval), and the ABAP language and special function modules must support the analysis of selection screen.","Furthermore, techniques to access the retrieved data and that the metadata (name, type and properties of the contained fields) are provided. Depending on the type of output, different solutions are necessary. It is important that providing data and metadata is not initiated by a parameter of the report itself, but must be initiated completely externally, i.e. from outside the report and its execution (otherwise, the report would have to be changed to allow providing the data and metadata as described above).","Using the ALV can provide several advantages. First, when calling the ALV, both data and metadata have to be propagated to the ALV. Therefore, the metadata required for external access is available automatically. The caller of the ALV has several possibilities to specify the metadata. The easiest possibility is to use a structure of the Data Dictionary. Second, the ALV call can be configured in such a manner that data and metadata are stored in a global memory area which can later be accessed outside of ALV. Third, when calling the ALV it is possible to stop processing after storing the data and metadata, so that the presentation of the result list is suppressed. The ALV can be configured so that presentation of the result is suppressed after data and metadata have been stored in the global memory area.","Within a main session, when an application program is started, it opens up an internal sessions within the main session. The internal session has a memory area (referred to as ABAP memory) that contains the ABAP program and its associated data. The ABAP Memory can be used to pass data between two internal sessions (i.e import, export). If data is to be passed between two main sessions, the global memory is utilized. The global memory can also be used to pass data between internal sessions.","It must be determined how to tell the ALV that data and metadata are supposed to be stored, where to store them and whether to present the data or not. This may not be done by parameters of the report, as mentioned above. For cases like that, ABAP provides the global memory, where user specific information can be stored and the lifetime of which is longer than the program execution.","Before calling the report, a parameter in the global memory can be set. Once the ALV is called during the processing of the report, it can read that parameter and react accordingly. Using the same mechanism, both the data and the metadata can be stored in the memory.","A special class can be included in the programming environment of the ALV in order to support the passing (storage and retrieval) of parameters, data and metadata via the global memory.","With the above mentioned requirements fulfilled, an API can be designed that allows to reuse the business logic of reports. This API can provide the metadata of a report and the execution of the business logic. In some variations, InfoSets, queries and a conventional InfoSet API can be used. The conventional InfoSet API can provide several advantages. For example, in several applications, the InfoSet API is already used as a common view on different kinds of executable programs, e.g. as data source for business warehouse systems. These applications can thus use reports immediately. In addition, the InfoSet API offers the required infrastructure for the delivery of metadata of queries and\/or the separate call of the data retrieval; this includes providing the data for later access.","As described above, queries can have the same structure as reports. However, the components of a query have to be separated both physically and logically by special means.  is a diagram  illustrating a query  of data from a data source . Via a selection screen (i.e., a user interface) , a user conducts selection handling  to selects the amount of data to be processed in a resulting query . Once the user has made its selections, pre-defined business logic  causes data to be retrieved from the data source  to generate a result table. The retrieved data is then provided to an output media such as an ALV  for eventual presentation to the user on a result screen (i.e., a user interface) .",{"@attributes":{"id":"p-0040","num":"0043"},"figref":"FIG. 4","b":["400","414","410","440","414","310","420","430"]},"The resulting general procedure for encapsulating a report by an InfoSet can comprise:\n\n","The selections that are supposed to be transferred to the report for the dark execution have to be consistent and faultless, i.e. they have to pass the checks encoded in the report without any errors. Otherwise the report can raise errors, and such errors cannot be handled during the dark execution. Therefore, it may be necessary to re-encode these checks in the InfoSet. The above algorithm described here is valid and applicable for reports with a flat result list, however, hierarchical sequential lists require different treatment.","In the following, an InfoSet that has been created via this procedure will be called a Report InfoSet. The schema of this procedure is shown in diagram  in . With this arrangement, the query  delivers the same result as the report  when called with the same selections. However, with this procedure, there are some limitations of this procedure, including, for example:\n\n","Furthermore it has to be remarked that the author of the InfoSet has to have knowledge about the report that is supposed to be encapsulated. If not, the author is not able to create neither the required structure in the Data Dictionary nor the required selections including the checks in the InfoSet. As described below, tools may be available for providing such knowledge.","The following sample report demonstrates the above described procedure. It shows how the data retrieval program of the InfoSet has to be structured. The sample report is an SAP report RMKKVZ00 that displays the supplier list. Although this report is rather simple with respect to selections and business logic, all crucial aspects can be demonstrated using this sample. The comments can be found below the example.",{"@attributes":{"id":"p-0046","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"01 PROGRAM test."},{"entry":"02"},{"entry":"03 TABLES test_structure."},{"entry":"04"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["05 DATA:","lfm1 \u2003TYPE lfm1,"]},{"entry":["06","lfa1 \u2003TYPE lfa1,"]},{"entry":["07","seltab TYPE TABLE OF rsparams,"]},{"entry":["08","t_data TYPE TABLE OF test_structure."]},{"entry":"09"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["10 SELECT-OPTIONS:","i_lifnr FOR lfm1-lifnr,"]},{"entry":["11","i_ekorg FOR lfm1-ekorg MEMORY ID eko,"]},{"entry":["12","i_sortl FOR lfa1-sortl,"]},{"entry":["13","i_ktokk FOR lfa1-ktokk."]},{"entry":"14"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"15 CALL FUNCTION \u2018RS_REFRESH_FROM_SELECTOPTIONS\u2019"},{"entry":"16 \u2003EXPORTING curr_report \u2003\u2003= sy-repid"},{"entry":"17 \u2003TABLES \u2003selection_table = seltab."},{"entry":"18 DELETE seltab WHERE kind \u2003= \u2018S\u2019"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["19","AND sign \u2003IS INITIAL"]},{"entry":["20","AND option IS INITIAL."]},{"entry":"21"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"22 cl_salv_bs_runtime_info=>clear_all( )."},{"entry":"23 cl_salv_bs_runtime_info=>set( display\u2003= space"},{"entry":"24\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003metadata = space"},{"entry":"25\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003data\u2003\u2003= \u2018X\u2019"},{"entry":"26\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003structure = \u2018TEST_STRUCTURE\u2019 )."},{"entry":"27"},{"entry":"28 SUBMIT rmkkvz00 WITH SELECTION-TABLE seltab"},{"entry":"\u2003 AND RETURN."},{"entry":"29"},{"entry":"30 TRY."},{"entry":"31 \u2003cl_salv_bs_runtime_info=>get_data( IMPORTING"},{"entry":"\u2003\u2003 t_data = t_data )."},{"entry":"32 CATCH cx_salv_bs_sc_runtime_info."},{"entry":"33 ENDTRY."},{"entry":"34 cl_salv_bs_runtime_info=>clear_all( )."},{"entry":"35"},{"entry":"36 BREAK-POINT. \u2003\u2003\u201clook at the content of t_data"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The structure test_structure (line 3) is a data dictionary structure, which describes the output of the report RMKKVZ00.","The table seltab (line 7) may contain arbitrary selections of the selection screen. The table t_data (line 8) is supposed to contain the data that the report RMKKVZ00 retrieves.","In line 10 to 13, the selections are defined, and they can be found in the report RMKKVZ00 in the same format (name and type or reference field respectively). For simplicity reasons, no checks of the input are defined here.","In line 15 to 20, the content of the selection screen is stored into the table seltab.","In line 22 to 26, the call mode for the ALV is set. In detail, the data shall not be presented (display=space), the metadata shall not be read (metadata=space), the data shall be read (data=,X\u2032) and the retrieved data shall be stored in a table of structure test_structure. The class cl_salv_bs_runtimeinfo makes use of the ABAP memory to store this information.","In line 28, the report RMKKVZ00 is called darkly. The selection data is transferred via the table seltab.","In line 30 to 34 the data that has been retrieved by report RMKKVZ00 is stored in the data table t_data using the class cl_salv_bs_runtime_info. Again this class makes use of the ABAP memory.","Following line 34, additional coding may be specified to further process the data table t_data, as it would be the case e.g. for Queries. It is important that report RMKKVZ00 has retrieved the content of the data table without however producing its own screens (selection screen, result list, messages).","Using this pattern, there is no problem to create an InfoSet that encapsulates the report RMKKVZ00 and makes use of a data retrieval program that follows the sample described above. The technique how to define InfoSets and Queries is not described here, because this is completely part of the settled InfoSet Query.","As describe above, the ALV is able to visualize either flat lists (tables) or hierarchical sequential lists header\/item lists). Flat lists are by far the more important list type. However, hierarchical sequential lists, as they are produced by the ALV, serve to get a clearly arranged overview of the data. The features are:\n\n","Thus a flat representation of the data can easily be gained by linking the tables for the header and the item data by a left outer join as it is known from database tables (canonical form). The advantage of this flat format is that it can be presented by all user interfaces, whereas the hierarchical presentation imposes special requirements on the user interface. The encapsulation by an InfoSet makes use of the flat structure. So the Query does not reproduce exactly the output of the report, because the retrieved data are available in a flattened version only. However, the resulting data will eventually be the same.","Basically, the above algorithm can be utilized with hierarchical sequential lists provided that the type of data retrieval be appropriately adapted. Such adaptation requires that the structure of the InfoSet contains the structures of the header and the item data, the ALV delivers header and position data separately, and after retrieving the data, the header and item data have to be combined and stored into the result table.","The following example describes the data retrieval of an InfoSet for hierarchical sequential lists. The example makes use of the report BALVHD01.",{"@attributes":{"id":"p-0060","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"01 PROGRAM test."},{"entry":"02"},{"entry":"03 TABLES hierseq."},{"entry":"04"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["05 DATA:","scarr","TYPE scarr,"]},{"entry":["06","seltab","TYPE TABLE OF rsparams,"]},{"entry":["07","t_data_h","TYPE TABLE OF hierseq_h,"]},{"entry":["08","s_data_h","TYPE hierseq_h,"]},{"entry":["09","t_data_l","TYPE TABLE OF hierseq_l,"]},{"entry":["10","s_data_l","TYPE hierseq_l,"]},{"entry":["11","t_data","TYPE TABLE OF hierseq."]},{"entry":"12"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"13 SELECT-OPTIONS: carrid FOR scarr-carrid."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["14 PARAMETERS:","p_maxrow TYPE i DEFAULT \u201850\u2019,"]},{"entry":["15","p_vari \u2003TYPE disvariant-variant"]},{"entry":["16",". . ."]},{"entry":"17"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"18 CALL FUNCTION \u2018RS_REFRESH_FROM_SELECTOPTIONS\u2019"},{"entry":"19 \u2003EXPORTING curr_report\u2003\u2003= sy-repid"},{"entry":"20 \u2003TABLES \u2003selection_table = seltab."},{"entry":"21 DELETE seltab WHERE kind\u2003= \u2018S\u2019"},{"entry":"22 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003AND sign \u2003IS INITIAL"},{"entry":"23 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003AND option IS INITIAL."},{"entry":"24"},{"entry":"25 cl_salv_bs_runtime_info=>clear_all( )."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["26 cl_salv_bs_runtime_info=>set( EXPORTING","display","= space"]},{"entry":["27","metadata","= space"]},{"entry":["28","data","= \u2018X\u2019"]},{"entry":["29","structure","= \u2018HIERSEQ_H\u2019"]},{"entry":["30","structure_line","= \u2018HIERSEQ_L\u2019 )."]},{"entry":"31"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"32 SUBMIT balvhd01 WITH SELECTION-TABLE seltab AND RETURN."},{"entry":"33"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["34 cl_salv_bs_runtime_info=>get_data( IMPORTING","t_data \u2003\u2003= t_data_h"]},{"entry":["35","t_data_line = t_data_l )."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"36 cl_salv_bs_runtime_info=>clear_all( )."},{"entry":"37"},{"entry":"38 LOOP AT t_data_h INTO s_data_h."},{"entry":"39 \u2003CLEAR hierseq."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["40 \u2003hierseq-carrid_h","= s_data_h-carrid."]},{"entry":["41 \u2003hierseq-carrname_h","= s_data_h-carrname."]},{"entry":["42 \u2003hierseq-currcode_h","= s_data_h-currcode."]},{"entry":["43 \u2003hierseq-url_h","= s_data_h-url."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"44 \u2003LOOP AT t_data_l INTO s_data_l WHERE carrid = s_data_h-carrid ."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["45 \u2003\u2003hierseq-connid_l","= s_data_l-connid."]},{"entry":["46 \u2003\u2003hierseq-countryfr_l","= s_data_l-countryfr."]},{"entry":["47 \u2003\u2003hierseq-cityfrom_l","= s_data_l-cityfrom."]},{"entry":["48 \u2003\u2003hierseq-airpfrom_l","= s_data_l-airpfrom."]},{"entry":["49 \u2003\u2003hierseq-countryto_l","= s_data_l-countryto."]},{"entry":["50 \u2003\u2003hierseq-cityto_l","= s_data_l-cityto."]},{"entry":["51 \u2003\u2003hierseq-airpto_l","= s_data_l-airpto."]},{"entry":["52 \u2003\u2003hierseq-fltime_l","= s_data_l-fltime."]},{"entry":["53 \u2003\u2003hierseq-deptime_l","= s_data_l-deptime."]},{"entry":["54 \u2003\u2003hierseq-arrtime_l","= s_data_l-arrtime."]},{"entry":["55 \u2003\u2003hierseq-distance_l","= s_data_l-distance."]},{"entry":["56 \u2003\u2003hierseq-distid_l","= s_data_l-distid."]},{"entry":["57 \u2003\u2003hierseq-fltype_l","= s_data_l-fltype."]},{"entry":["58 \u2003\u2003hierseq-period_l","= s_data_l-period."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"59 \u2003\u2003APPEND hierseq TO t_data."},{"entry":"60 \u2003ENDLOOP."},{"entry":"61 \u2003IF sy-subrc <> 0."},{"entry":"62 \u2003\u2003APPEND hierseq TO t_data."},{"entry":"63 \u2003ENDIF."},{"entry":"64\u2003ENDLOOP."},{"entry":"65"},{"entry":"66 BREAK-POINT. \u2003\u2003\u201clook at the content of t_data"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The InfoSet is defined using the structure hierseq. This structure has to contain both header and item data.","Besides the table t_data (line 11) for the result, two additional tables t_data_h (line 07) and t_data_l (line 09) for the header and item data are required. The corresponding structures hierseq_h and hierseq_l have to be defined in the Data Dictionary as well.","The definition of the selection criterion and the extracting of these from the selection screen selections (line 13 to 23) takes place in the same way as described in Example 1.","In line 25 to 30, the call mode for the ALV is set. The procedure via the memory is similar; the only difference is that now the two structures for header and item data are transferred.","The data transfer of the header and item data is done in line 34 to 36.","In line 38 to 64, the header and item data are combined into the result table. Knowledge about all the three structures is required here. Furthermore it has to be known which fields link the header and item data. The where-condition of the loop statement in line 44 is based on this information.","Lines 61 to 63 are of special importance. They ensure that a record is transferred to the result table even if no corresponding record in the item table exists. This corresponds to a left outer join of the header and the item table.","The preconditions for the above mentioned procedure can be formulated more generically, if a generic function to retrieve data is used instead of the report.","A prerequisite is that a function to retrieve data by a generic application must be called. More specifically, the function must be executable without a UI (SAP GUI); the number and the type of the import parameter have to be known (these parameters have to be transferred to the function); the retrieved data must be transferable (e.g. by exporting parameters or by using the ALV technique described above); and in addition to the data, also the metadata (name, type and properties of the contained fields) has to be known.",{"@attributes":{"id":"p-0070","num":"0092"},"figref":"FIG. 5","b":["500","514","510","540","514","510","560","510","560","520","570","530","590","510","560","514","562","570","564","580","590","566","550","550","514","540"]},"Generally speaking, a program or a function that fulfills the above mentioned prerequisites can be encapsulated by an InfoSet using the above described algorithm. Depending on the kind of program, the algorithm has to be adapted only with respect to the data retrieval within the InfoSet.","Reusing the business logic is desirable not only for classical R\/3 reports, but in many cases also for transactions. However transactions can additionally contain functions that manipulate data. These parts of the transactions are not accessible via the described procedure. Thus only that part of a transaction can be encapsulated that is executed before the first result list is displayed.","On the other hand there are so called report transactions that mainly consist of a report for which a transaction code and a special report variant are defined if appropriate. In many cases, the report that is called within the report transaction cannot be called directly.","So report transactions are a second important candidate for the encapsulation using the above-described algorithm. The main difference compared to a report is the kind of the dark call and the parameter passing to this call.\n\n","Assume that report RMKKVZ00 is also available as a report transaction TR_RMKKVZ00. In the following example, the structure of a data retrieval program of the InfoSet is described.",{"@attributes":{"id":"p-0076","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"001 PROGRAM test."},{"entry":"002"},{"entry":"003 TYPE-POOLS: sscr."},{"entry":"004"},{"entry":"005 TABLES test_structure."},{"entry":"006"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["007 DATA:","lfm1","TYPE lfm1,"]},{"entry":["008","lfa1","TYPE lfa1,"]},{"entry":["009","seltab","TYPE TABLE OF rsparams,"]},{"entry":["010","bdcdata","TYPE bdcdata,"]},{"entry":["011","bdcdatatab","TYPE TABLE OF bdcdata,"]},{"entry":["012","bdcmesstab","TYPE TABLE OF bdcmsgcoll,"]},{"entry":["013","restrict","TYPE sscr_restrict,"]},{"entry":["014","sscr_opt_list","TYPE sscr_opt_list,"]},{"entry":["015","sscr_ass","TYPE sscr_ass,"]},{"entry":["016","dynpchn","TYPE iqxtdynpchn,"]},{"entry":["017","dynpsel","TYPE iqxtdynpsel,"]},{"entry":["018","t_data","TYPE TABLE OF test_structure."]},{"entry":"019"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["020 SELECT-OPTIONS:","i_lifnr FOR lfm1-lifnr NO-EXTENSION,"]},{"entry":["021","i_ekorg FOR lfm1-ekorg NO-EXTENSION MEMORY ID eko,"]},{"entry":["022","i_sortl FOR lfa1-sortl NO-EXTENSION,"]},{"entry":["023","i_ktokk FOR lfa1-ktokk NO-EXTENSION."]},{"entry":"024"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"025 CALL FUNCTION \u2018RS_REFRESH_FROM_SELECTOPTIONS\u2019"},{"entry":"026 \u2003EXPORTING curr_report \u2003\u2003= sy-repid"},{"entry":"027 \u2003TABLES \u2003selection_table = seltab."},{"entry":"028 DELETE seltab WHERE kind\u2003= \u2018S\u2019"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["029","AND sign \u2003IS INITIAL"]},{"entry":["030","AND option IS INITIAL."]},{"entry":"031"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"032 cl_salv_bs_runtime_info=>clear_all( )."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["033 cl_salv_bs_runtime_info=>set(","display","= space"]},{"entry":["034","metadata","= space"]},{"entry":["035","data","= \u2018X\u2019"]},{"entry":["036","structure","= \u2018TEST_STRUCTURE\u2019 )."]},{"entry":"037"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"038 bdcdata-program\u2003= \u2018RMKKVZ00\u2019."},{"entry":"039 bdcdata-dynpro \u2003= \u20181000\u2019."},{"entry":"040 bdcdata-dynbegin = \u2018X\u2019."},{"entry":"041 APPEND bdcdata TO bdcdatatab."},{"entry":"042 PERFORM bdc_selopt USING \u2018I_LIFNR\u2019."},{"entry":"043 PERFORM bdc_selopt USING \u2018I_EKORG\u2019."},{"entry":"044 PERFORM bdc_selopt USING \u2018I_SORTL\u2019."},{"entry":"045 PERFORM bdc_selopt USING \u2018I_KTOKK\u2019."},{"entry":"046 PERFORM bdc_okcode USING \u2018BDC_OKCODE\u2019 \u2018=ONLI\u2019."},{"entry":"047"},{"entry":"048 CALL TRANSACTION \u2018TR_RMKKVZ00\u2019 USING bdcdatatab"},{"entry":"049 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003MODE \u2018E\u2019 UPDATE \u2018L\u2019"},{"entry":"050 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003MESSAGES INTO bdcmesstab."},{"entry":"051 TRY."},{"entry":"052 \u2003cl_salv_bs_runtime_info=>get_data( IMPORTING t_data = t_data )."},{"entry":"053 CATCH cx_salv_bs_sc_runtime_info."},{"entry":"054 ENDTRY."},{"entry":"055 cl_salv_bs_runtime_info=>clear_all( )."},{"entry":"056"},{"entry":"057 BREAK-POINT. \u2003\u2003\u201clook at the content of t_data"},{"entry":"058"},{"entry":"059 *&---------------------------------------------------------------------*"},{"entry":"060 *& \u2003\u2003Form bdc_selopt"},{"entry":"061 *&---------------------------------------------------------------------*"},{"entry":"062 FORM bdc_selopt USING p_name TYPE rsscr_name."},{"entry":"063"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["064 DATA:","l_selopt TYPE rsparams,"]},{"entry":["065","l_name \u2003TYPE progname."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"066 \u2003READ TABLE seltab INTO l_selopt WITH KEY selname = p_name."},{"entry":"067 \u2003IF sy-subrc <> 0."},{"entry":"068 \u2003\u2003EXIT."},{"entry":"069 \u2003ENDIF."},{"entry":"070 \u2003CASE l_selopt-kind."},{"entry":"071 \u2003WHEN \u2018P\u2019."},{"entry":"072 \u2003\u2003PERFORM bdc_field USING p_name l_selopt-low."},{"entry":"073 \u2003WHEN \u2018S\u2019."},{"entry":"074 \u2003\u2003CONCATENATE p_name \u2018-LOW\u2019 INTO l_name."},{"entry":"075 \u2003\u2003PERFORM bdc_field USING l_name l_selopt-low."},{"entry":"076 \u2003\u2003CONCATENATE p_name \u2018-HIGH\u2019 INTO l_name."},{"entry":"077 \u2003\u2003PERFORM bdc_field USING l_name l_selopt-high."},{"entry":"078 \u2003ENDCASE."},{"entry":"079"},{"entry":"080 ENDFORM. \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cbdc_selopt"},{"entry":"081"},{"entry":"082 *&---------------------------------------------------------------------*"},{"entry":"083 *& \u2003\u2003Form bdc_field"},{"entry":"084 *&---------------------------------------------------------------------*"},{"entry":"085 FORM bdc_field USING fnam fval."},{"entry":"086"},{"entry":"087 DATA: l_data TYPE REF TO data."},{"entry":"088 FIELD-SYMBOLS: <l_data> TYPE ANY."},{"entry":"089 \u2003IF fval <> \u2018\/\u2019."},{"entry":"090 \u2003\u2003ASSIGN (fnam) TO <l_data>."},{"entry":"091 \u2003\u2003CREATE DATA l_data LIKE <l_data>."},{"entry":"092 \u2003\u2003ASSIGN l_data->* TO <l_data>."},{"entry":"093 \u2003\u2003<l_data> = fval."},{"entry":"094 \u2003\u2003IF <l_data> IS NOT INITIAL."},{"entry":"095 \u2003\u2003\u2003CLEAR bdcdata."},{"entry":"096 \u2003\u2003\u2003bdcdata-fnam = fnam."},{"entry":"097 \u2003\u2003\u2003WRITE <l_data> TO bdcdata-fval."},{"entry":"098 \u2003\u2003\u2003APPEND bdcdata TO bdcdatatab."},{"entry":"099 \u2003\u2003ENDIF."},{"entry":"100 \u2003ENDIF."},{"entry":"101"},{"entry":"102 ENDFORM. \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cbdc_field"},{"entry":"103"},{"entry":"104 *&---------------------------------------------------------------------*"},{"entry":"105 *& \u2003\u2003Form bdc_okcode"},{"entry":"106 *&---------------------------------------------------------------------*"},{"entry":"107 FORM bdc_okcode USING fnam fval."},{"entry":"108"},{"entry":"109 \u2003CLEAR bdcdata."},{"entry":"110 \u2003bdcdata-fnam = fnam."},{"entry":"111 \u2003bdcdata-fval = fval."},{"entry":"112 \u2003APPEND bdcdata TO bdcdatatab."},{"entry":"113"},{"entry":"114 ENDFORM. \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cbdc_okcode"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"It will be noted that some parts of the program are similarly structured as in Example 1.\n\n","Filling the batch input command table is described in line 38 to 46 and 59 to 114. The technique of batch input is not described in detail here, because it is a standard technology in SAP systems.","Calling the report transaction in batch input mode is done in line 48 to 50.","A second sample for encapsulating according to above-described algorithm relates to data sources, which are used to transfer data out of a transactional system into a business warehouse system. Data sources can consist of function modules for the data retrieval, that run without the use of a UI, for which the selections are specified via importing parameters, and which provide the retrieved data in an exporting parameter (table).","The interface of these functions may not be freely defined, but has to follow given conventions and has to be stored in a special repository. Thus the metadata are available as well, so that all requirements are fulfilled. A concrete sample will not be discussed here.","The above-described algorithm can be implemented using existing means (ABAP development environment, InfoSet query, special call mode of the ALV). However, the development efforts can be high because a structure, an InfoSet and a query have to be created manually. In particular for the creation of the structure, the coding of the report has to be analyzed. In the best case, the ALV is called with a data dictionary structure that describes the data (metadata). In many cases, such a structure cannot be used because, for example, additional information is transferred to the ALV that does not appear in the output. Furthermore, it is possible to specify the metadata as a field catalog, i.e. without using a structure. Then, an adequate structure has to be defined in the data dictionary, which is a possibly complex and error-prone process. Once the structure is present, the InfoSet and the query can be created using fixed rules. When defining the InfoSet, some knowledge about the names and the types of parameters of the report selection screen is required, because in the InfoSet, corresponding parameters have to be incorporated.","In order to ensure that the above steps can be supported by software, several considerations need to be taken into account.\n\n","The technical infrastructure to generate structures, InfoSets and queries is available (ABAP development environment and InfoSet API respectively). A completely automated procedure is often not feasible, but instead a semi-automated procedure where discrete steps can be executed can be utilized. The result of these steps can be checked and adjusted by a user, where appropriate.","A second algorithm can be employed in connection with the creation of a report InfoSet and a standard query. Such an algorithm can comprise:\n\n","The described procedure can be implemented in a separated transaction.","The standard query encapsulates the report. Via the InfoSet API, this query can be called in a mode in which only the data retrieval is executed, i.e. all selections are preset and the retrieved data are returned. Thus an application can make use of the standard query to retrieve the data and present them hereafter e.g. in a web user interface. Additionally, the InfoSet API provides functions to access the metadata of a query, e.g. the names, texts and properties of the fields of the data table. Thus generic applications are possible.","As mentioned above, the check logic for the selections cannot be derived automatically from the report. Here it is necessary to both analyze the report and re-encode that logic. In order to avoid a special maintenance tool for this check coding, a generic interface has been designed. This can be done easily, because there are generic structures for the values of selections, so that the check methods can always work on the same structures. Assigning the check coding is achieved by assigning a class that implements the above mentioned interface. This class can be implemented using the standard means of the development environment.","The check class can also be used to set fixed values for selections.","Various implementations of the subject matter described herein may be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and\/or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.","These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the term \u201cmachine-readable medium\u201d refers to any computer program product, apparatus and\/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and\/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term \u201cmachine-readable signal\u201d refers to any signal used to provide machine instructions and\/or data to a programmable processor.","To provide for interaction with a user, the subject matter described herein may be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user may be received in any form, including acoustic, speech, or tactile input.","The subject matter described herein may be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the subject matter described herein), or any combination of such back-end, middleware, or front-end components. The components of the system may be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), and the Internet.","The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","Although a few variations have been described in detail above, other modifications are possible. For example, the logic flow depicted in the accompanying figures and described herein do not require the particular order shown, or sequential order, to achieve desirable results. Other embodiments may be within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
