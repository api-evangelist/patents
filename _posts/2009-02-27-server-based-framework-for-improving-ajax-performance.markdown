---
title: Server based framework for improving Ajax performance
abstract: A system for rendering a web page is disclosed. The system comprises a server adapted to communicate with a client. The client operates a browser in communication with the server and is arranged to render material to the browser that an end user may view on the web page. The system also includes a dynamic code set having configuration parameters for use in rendering the web page, wherein the configuration parameters are formed of a first configuration parameter including at least one of combined resources, strategically placed resource tags, headers set to ensure cacheable resources, a GZip file, and minified resources, and a second configuration parameter including at least one of combined resources, strategically placed resource tags, headers set to ensure cacheable resources, a GZip file, and minified resources. A method of creating a web application is disclosed. A machine readable medium is also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990289&OS=08990289&RS=08990289
owner: Oracle America, Inc.
number: 08990289
owner_city: Redwood City
owner_country: US
publication_date: 20090227
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to Internet or web based applications and in particular to systems for web page rendering.","As is known, a web browser communicates with a server. The web browser may submit a request to a server for a web page, information or application. The server serves a response to the browser. Thus, in a basic web page request\/response arrangement, a browser sends a request to a web server and in exchange receives a web page. Each new request results in a new web page. Unfortunately, oftentimes 80-90% of end-user response time is spent downloading all the components in a web page.","Typical conventional web applications display output content via a screen output page file such as a Java Server Page (JSP). Such an application contains a JSP for each web page in the application, and stores each JSP in a separate file. An application may contain many JSP files corresponding to each screen. A typical JSP contains many lines of HTML code for displaying, or rendering screen output.","The web page can further operate with, for example, JavaScript. When using JavaScript, a new request may be made to the server. In this case, rather than a new web page, new data is provided in response. The data is presented in the same web page, i.e., the content of the web page may change. In other words, the web page is not reloaded on the user's system. These types of requests are commonly termed \u201cAjax\u201d requests. Using Ajax components on a web page improves many aspects of web page performance, but web page performance can still be perceived as slow as the pages load resources over a network and as a page is rendered by a browser.","jMaki, is a client\/server framework for creating Ajax applications and markups and provides many rich features for jMaki's web pages used to rapidly create Ajax applications but these applications can exacerbate performance issues. To fully support Ajax applications, jMaki includes many Cascading Style Sheet (CSS) and JavaScript resources which can increase the number of Hyper Text Transfer Protocol (HTTP) requests and slow down the initial load of a page, slowing network performance. In addition, in a traditional web page, JavaScript or CSS code may exist in several files. Thus, in the code for a web page, a reference to each of those several files exists. As a result, in translating the code, each time the browser encounters that JavaScript or CSS reference, it goes to the appropriate file and retrieves the code. Further, the contents of CSS and JavaScript can be large and require a lot of bandwidth to transfer to a client. Moreover, subsequent calls from a browser for resources can often result in the resources being re-sent to the browser.","As is known, an Internet browser operates and accomplishes tasks in a particular order. For example, when a browser encounters coding such as JavaScript, it stops everything else and loads the JavaScript. Further, using Ajax components in a web page can slow the performance of a web page as it loads resources over the network and as a page is rendered by the browser. Page rendering in many if not all modern browsers will also stop as JavaScript and CSS resources are loaded over a network, causing a page or pages to render slower. While some of this slowness may be perceived slowness by an end user, it can often lead to frustration of the user.","To date, the only available solution for solving these issues is written guidelines and recommendations which must be employed by a skilled programmer in order to improve performance. Moreover, each guideline or recommendation is applied individually; in other words they are not all applied at once. Web application development typically employs specialized toolkits, applications and languages. Efficient development of conventional web applications suggests extensive and thorough knowledge of web page delivery technologies such as HTML, XML, JavaScript, Java, CSS Servlets, JSPs and others. To this end, the developer must be familiar with the guidelines and procedures, as well as how the web server and web applications work. The developer must then be able to apply the guidelines and recommendations on a case by case basis in a manner that generates the appropriate result.","Accordingly, a server based framework is provided to improve both network performance and browser loading of Ajax based applications.","A system for rendering a web page is provided. The system comprises a server adapted to communicate with a client. The client operates a browser in communication with the server and is arranged to render material to the browser that an end user may view on the web page. The system also includes a dynamic code set having configuration parameters for use in rendering the web page, wherein the configuration parameters are formed of a first configuration parameter including at least one of combined resources, strategically placed resource tags, headers set to ensure cacheable resources, a GZip file, and minified resources, and a second configuration parameter including at least one of combined resources, strategically placed resource tags, headers set to ensure cacheable resources, a GZip file, and minified resources.","A method comprising creating a web application for rendering a web page is provided. The application has a client side and a server side. The method includes setting a plurality of predetermined configuration parameters in a dynamic code set having configuration parameters for use in rendering the web page. The configuration parameters are formed of a first configuration parameter including at least one of combined resources, strategically placed resource tags, headers set to ensure cacheable resources, a GZip file, and minified resources, and a second configuration parameter including at least one of combined resources, strategically placed resource tags, headers set to ensure cacheable resources, a GZip file, and minified resources. The method further includes the steps of deploying the web application and automatically processing the web application using the dynamic code set to produce a performant web application based on the configuration parameters.","A method comprising a machine-readable medium is also provided. The machine-readable medium comprises at least one server and at least one client in communication with the server. Instructions are provided, which, when executed by a machine, cause the machine to render a web page on the client. The instructions include configuration parameters for use in rendering the web page, wherein the configuration parameters are formed of a first configuration parameter including at least one of combined resources, strategically placed resource tags, headers set to ensure cacheable resources, a GZip file, and minified resources, and a second configuration parameter including at least one of combined resources, strategically placed resource tags, headers set to ensure cacheable resources, a GZip file, and minified resources. A dynamic code set manages the execution of instructions and facilitates client and server runtime interaction so as to manage resources rendered to the web page.","The system and method described above, which form a framework for improving Ajax performance, improve efficiency of a network computer system and render a web page or generate a web page more quickly for an end user. Moreover, the system may operate automatically without user input.","Aspects of the present disclosure are generally directed to a server based framework for improving web page rendering performance, and in particular for improving Ajax performance. The framework may be a re-usable design for a software system or subsystem including one or more of support programs, code libraries, scripting language or other software which may cooperate together.","Generally, as can be seen by reference to , in the system or framework  described herein, a web application environment is provided and includes a user device or client  for interacting with a user  having a connection to the Internet or other network for accessing a web server component . The system or framework  described herein generally includes a processor , , a memory ,  coupled to the respective processors, a set of server-side objects , which may be data or instructions, to run on a server  which may be located on a network , and a set of browser-side objects , which may be data or instructions, of a browser  to run on a client . The user device or client  may employ the browser  for issuing requests , such as an HTTP request, to a web application  via a web server , and for receiving responses , such as an HTML response, from the web server . A response  may include dynamic and\/or static content.","As indicated, in one or more examples of embodiments, the system is a computer system (see ) and includes the user device or client  which is a first computer that may include a processor , the first computer having a browser  or the like operable to access an Internet or Intranet application . For example, a web page  may be accessed by a user  by selecting the browser  and entering in an address for a particular website. A user  or Internet user may use any system or device which may be connectable to the Internet for access thereto, including, but not limited to personal computer, mobile phone, PDA, MP3 player, and the like. Generally, these devices include a graphical user interface (GUI) or a communication means by which web page content may be displayed or communicated. Thus, the user  accesses the Internet by this device and typically visits a website or web page. When a user  visits a particular website or web page, a user  essentially requests  a particular page, such as a homepage. The request  is provided to a web server  to render this page. The web server  may be a computer program responsible for accepting requests  from a client  and serving a response , which may include a web page, HTML document and linked objects. Alternatively, the web server  may be a computer running said program. The images scheduled for that page at that particular time and day may be rendered to the user  by a response  served to the client . The images or objects on a computer screen the user interacts with may be described as \u201cwidgets.\u201d  presents a general illustration of a hypothetical web page display having multiple widgets , , , .  is presented for purposes of illustration and understanding only, and one of skill in the art would understand that any suitable web page and arrangement of widgets may be acceptable for the purposes provided.","The content of the web page  and contact or access by a user  of the web page is generally managed by the web server . In one or more examples of embodiments of the system described herein, as shown in , a client computer  with a browser  is provided for calling upon the web application or web page . The web application  or browser  may execute JavaScript. The web server  may be in functional or operable communication with an additional server, such that it may exchange information or data with the additional server. The web server  may request information or content from the additional server to be displayed on the web page  in response to a user contact or selection on the web page. Alternatively, the browser  or web application, if not using JavaScript, may also request a page from the web server, then on receipt, may directly request one or more content pieces from the additional server such that communication of the content may be from or between the web page and additional server. The foregoing systems are generally referred to, respectively, as server-side serving and client-side serving. It is also possible that a server system may or may not be inside the web server.","Accordingly, the browser  provided in the client computer  provides a user interface that allows navigation of objects ,  (). In one or more examples of embodiments, the browser  is a web browser, which may be a software application that enables a user  to display and interact with text, images, videos, music and other information typically located on a web page  at a website on the World Wide Web or a local area network. The browser  may also be used to access information provided by web servers in private networks or content in file systems. Text and images on a web page  may contain hyperlinks to other web pages at the same or a different website. The web page  may also include embedded images, animations, video, sound, and streaming media or may be accessible through the web page. To this end, the web browser  may allow a user  to quickly and easily access information provided on many web pages at many websites. The web browser  may also format information for display. The file format for a web page may be any suitable format, including, but not limited to HTML (hyper-text markup language), XML, as well as, for example JPEG, PNG and GIF image formats, and can be extended to support additional formats.","As indicated, the browser  may communicate with the server  (see , ). In one or more examples of embodiments, the web browser  may communicate with a web server  using any suitable language to fetch web pages, such as, for example, HTTP (hypertext transfer protocol), and may also use JavaScript or PHP to request or exchange data with the web server. Generally, web pages may be located by means of a URL (uniform resource locator). A variety of URL types and their corresponding protocols may be used, such as, but not limited to, HTTP, gopher (a hierarchical hyperlinking protocol), FTP (file transfer protocol), RTSP (real-time streaming protocol), and HTTPS (an SSL encrypted version of HTTP). While web browsers are specifically described, other applications may also be contemplated, such as but not limited to file browsers and code browsers. The server  may be the server associated with the website, namely, the server which returns the web page for rendering to the user . However, it is contemplated that the server  may be any suitable server capable of accomplishing the tasks described herein. To this end, the server may be an application server, communications server, database server, proxy server, fax server, file server, print server, game server, standalone server, web server, web feed server, client-server, X server, or catalog server.","JavaScript code may run locally in a user's or client's browser  and may be used to fetch web page data (as shown in ). It may also run on a web server, taking the Java or PHP code as input and creating web pages as output. JavaScript may also be used in one or more websites to enable scripting access to objects embedded in other applications. In one or more examples of embodiments, as shown in , JavaScript or PHP dispatches a request  or requests for information (such as content) to the server . A JavaScript engine or JavaScript interpreter or JavaScript implementation may be provided in one or more examples of embodiments as an interpreter that interprets JavaScript source code received by the server  and executes the script accordingly. While JavaScript is specifically described, alternative scripting language may be used without departing from the overall scope of the present invention, including but not limited to ActionScript.","Ajax programming may be used for communication with the server . Ajax, or asynchronous JavaScript and XML, as is known, is a group of interrelated web development techniques used for creating interactive web applications or rich Internet applications. By use of Ajax, web application  may retrieve data from the server  asynchronously in the background without interfering with the display and behavior of an existing web page . Data may be generally retrieved using an \u201cXMLHttpRequest\u201d object or through the use of Remote Scripting in browsers that do not support \u201cXMLHttpRequest\u201d. It is understood that the use of JavaScript, XML, or asynchronous use thereof is not required. Generally, any web technology that can be used to implement a web application that communicates with a server in the background without interfering with the current state of the page may be acceptable for use with the framework described herein. Examples include, but are not limited to, XHTML and CSS for presentation; the Document Object Model for dynamic display of and interaction with data; XML and ASLT for the interchange and manipulation of data respectively; the XMLHttpRequest object for asynchronous communication; and JavaScript. While XMLHttpRequest is specifically described, it is not necessary for asynchronous communication. For example, \u201cIFrames\u201d may also be capable of the same effect. Similarly, XML and XSLT are not required for data interchange or manipulation of data, respectively.","The framework  of one or more examples discussed herein may further include jMaki. jMaki is an Ajax framework providing a lightweight model for creating JavaScript centric Ajax-enabled web applications using Java, Ruby, PHP, and Phobos. More specifically, jMaki is a lightweight client\/server framework for creating JavaScript centric Web 2.0 applications using CSS layouts, widgets, widget model, client services such as publish\/subscribe events to tie widgets together, JavaScript action handlers, and a generic proxy to interact with external RESTful web services. jMaki generally abstracts JavaScript and CSS by providing defaults for widgets. Further, JavaScript widgets and CSS are made easily accessible so they may be customized by a designer or page developer. jMaki generally focuses on delivering JavaScript to the client, allowing the JavaScript to communicate to various server-technologies including PHP, Java (JSP\/JSF), and Phobos in a server-technology neutral way.","Referring to , a client side module  suitable for use with the present invention, and which may be characteristic of jMaki is described below. As shown in , the client  may include a layout module  which provides a standards-based starting point for creating a web application  () using HTML and CSS. In this module , the CSS may be in plain view so it can be easily customized for the specific needs. A client runtime module  may also be used. The client runtime module  may be, for example, the JavaScript responsible for bootstrapping all widgets (i.e., portable chunk of code which can be installed and executed within any separate HTML-based web page by an end user without requiring additional compilation), and passing parameters provided by a server-side runtime module  (see ) to the widgets. In other words, the script may cause programs to be read and executed as part of a self-sustaining process that proceeds without external help. Parameters are unique to each widget, and the runtime module  makes sure that each widget instance obtains the correct parameters that were passed from a server side runtime module . In cases where parameters are not provided, runtime module  may use default parameters that may be customized for each widget. A client services module  may also be provided, such as but not limited to, APIs for performing \u201cXMLHttpRequest\u201d and publish\/subscribe on the client  to widgets as a means of communication. \u201cGlue\u201d , for example jMaki Glue, may be built on top of the publish\/subscribe mechanism and allows a user to define application behavior and tie widgets together with widgets using JavaScript actions when a specific event is published to a topic. A timers module  may be provided that allows JavaScript action handlers to be called or events to be published at a set interval. An injector  may be provided as a client service  that allows a user to bring in an external page into any given element. The injector  may transfer scripts and CSS to the global page content and allow widgets to be loaded much like an \u201cIFrame\u201d. Finally, a widget model module  may be provided. The widget module  may be a component model for reusable JavaScript components having a structure based on HTML, JavaScript and CSS. This structure can be used to create widgets or wrap widgets from any given toolkit. Default wrappers and a server tie-in for many commonly-used widgets such as Dojo, Yahoo USI, Prototype, and some native widgets may be provided. Additionally, the client side  may define a \u201cwidget.json\u201d format, so as to make the widget accessible by tools.","A server side module , or components suitable for use with the present system, and which may be characteristic of jMaki, are described below. Referring to , a server module  is provided. The server module  may be responsible for tying the client runtime  to a server-side runtime  such as, but not limited to, Java, PHP, or the JavaScript-based Phobos runtime. The server-side runtime module  may track and render script and CSS references based on the library type being used, and may ensure that script and CSS links are not duplicated. The server-side runtime module  may also ensure API keys (such as, for example, Google and Yahoo Map keys) are applied when necessary based on a configurable set of keys. The server runtime  may render HTML templates, making and serializing data in JavaScript such that each side widget instance is provided the proper data. An XmlHttpProxy module  may also be provided. The XmlHttpProxy module  may provide a means for widgets to access JSON or XML, or to access RESTful XML-based services outside of the web application domain. Such services, shown as examples in , include but are not limited to, RSS feeds, Yahoo! services such as geo-coding, image searches, and so forth. The XmlHttpProxy module  may allow widgets to access services in a uniform way by providing XML-to-JSON transformations that can be easily customized.","In order to increase the speed of web pages or web page rendering, certain features or resources are desirable. For example, the number of HTTP requests  may be minimized. Reducing the number of components in a web page  (i.e., images, stylesheets, scripts, Flash, and the like) may reduce the number of HTTP requests required to render the page.","Furthermore, script, and in particular JavaScript and CSS, may be optionally externalized. That is, the respective code may be contained in external files rather than in-lined in the web page code. Generally, the use of external files may produce or render faster web pages because the JavaScript and CSS files, when retrieved, are then cached by the browser . In comparison, JavaScript and CSS in-lined in an HTML document may be downloaded every time the HTML document or web page is requested, slowing down performance. By externalizing, the size of the HTML document is reduced without increasing the number of HTTP requests . Accordingly, configuration parameters may be implemented in an application environment promoting a model where CSS and JavaScript resources are externalized, such as but not limited to jMaki. While the examples of embodiments described are suitable for use with and implemented with jMaki, alternatives would not depart from the overall scope of the present invention. Any application that promotes a model in which stylesheets and script resources are externalized may be suitable for the purposes provided.","In addition, in one or more examples of the framework  described herein, resources may optionally be combined such that the number of network calls are reduced. Referring to  to reduce the number of requests or network calls, a plurality of scripts (, , , ), which may be all scripts, may be combined into a single script  or file. Similarly, a plurality of CSS (, , , ), which may be all CSS, may be combined into a single stylesheet  or file. Accordingly, in the framework  provided herein, the codes, or a plurality of codes, such as but not limited to JavaScript or CSS codes, may be combined into one file. As a result, only one network call or request is required to obtain CSS or JavaScript code. Thus, the browser , in rendering a web page and reading the web page code , may only need to reach out one time and retrieve the combined script or stylesheet code  or . For example, widget names may be aggregated for a given page and used to generate MD5 (Message-Digit algorithm 5) hashes representing all the \u201ccomponent.css\u201d or \u201ccomponent.js\u201d files, which may be different hashes for each component file. In other words, a system is used to permit quick look-up of component files.","In the system described herein, the client or server runtime module  or  may look to see if a combined resource file has been generated and may create one if it does not exist. To this end, there may be one combined stylesheet file  and one combined script file  for all the widgets -() in a given page, or alternatively, it is contemplated that one combined stylesheet and script file may exist. Furthermore, duplications or overlap may be reduced. That is, two or more pages containing the same set of widgets may only result in one combined resource. Further, the stylesheet resources for all widgets in a given page may be rendered at the correct time and respect the theming model which follows the standard stylesheet cascade.","Moreover, tags ,  defining when such resources should be retrieved may be optionally strategically placed in web page code . \u201cTags\u201d ,  in a page or in the code may refer to or point to script or stylesheet code associated with specific widgets that will be rendered on a page and may be used to call upon externalized code. In the code  for a web page, the location of the tags for script code () (for example, JavaScript) and the stylesheet code () (for example, CSS) may be shifted to a specific location in the code such that browser  does not delay web page  rendering to retrieve the script or stylesheet code. For instance, a tag for CSS code  may be located in the HEAD or front or top, or more generally at the beginning of the web page code . In , the web page code  is illustrated in block form and read left to right, with the HEAD or front of the code, i.e., the header , being located on the left. Moving stylesheets (CSS) to the document HEAD or header  makes web pages appear to load faster, as the location in the HEAD allows the page to render progressively. In other words, the browser  displays whatever content as soon as possible. Furthermore, the scripts  or tag  therefore may be moved to the end or the bottom of the web page code  to allow a web page  to load faster.","In addition, to increase the speed of web pages or web page rendering, an \u201cExpires\u201d or a \u201cCache-Control\u201d header  may be optionally added to the code. For example, with respect to static components, a \u201cnever expire\u201d policy may be altered to set a far future \u201cExpires\u201d header; whereas with respect to dynamic components, an appropriate \u201cCache-Control\u201d header may be used to help the browser  with conditional requests . The browser  may use a \u201ccache\u201d to reduce the number of HTTP requests , making web pages load faster. The web server  may use the Expires header in the HTTP response  to tell the client  operating the browser  how long a component can be cached. Thus, a far future Expires header may identify to the browser  that a response  is not to be stale for a long period of time. The header  may not be provided to the client  until a response  is provided to a request , in which case the header  may be particularly useful for subsequent page views. However, it is contemplated that one or more examples of embodiments may implement a header  as described for use with initial page views. As an example of implementation of the foregoing, a first-time visitor to the web page  may make several HTTP requests . By using the described cache\u2014control header , such as the Expires header, the components (i.e., scripts, stylesheets, images, Flash, and the like) are cacheable, thereby avoiding unnecessary HTTP requests  on subsequent page views by the end user. The described headers  may be used on all components including, but not limited to, images, scripts, stylesheets, and Flash components. Accordingly, to manage the rendering of Ajax resources, headers  may be set, manipulated or otherwise used to ensure cacheable resources are correctly cached locally by the browser . While \u201cheader\u201d and specific header types are described herein, any supplemental data placed at the beginning of a block of data being stored or transmitted (the payload or body) and used for similar purposes may be acceptable for use with the present invention.","Combined resources, such as script and stylesheet files , , and more particularly, JavaScript and CSS resource files, may be stored in memory (Java) or a file (PHP). These script and stylesheets may be stored for a maximum age (\u201cmax age\u201d) of the specified resource. The max age may be used as a basis for the cache-control headers , i.e., Expires header, which may also be written out manually or automatically. A typical default max age is twenty-four (24) hours. However, any suitable max age may be acceptable for the purposes provided. For instance, depending upon the frequency of file updates or other suitable factors, it may be appropriate to adjust the configuration of max age to a shorter duration or longer duration. In addition to, or as an alternative to max age, an Entity header may also be used. For example, an MD5 hash may be used as the entity header JavaScript or CSS resource file. The entity header may be sent by a client to the server to verify whether the resource the client has matches that contained on the server.","To enhance performance of web page  rendering, minified resources or code may also optionally be used. Code may be minified by removing all unnecessary characters from the code without changing its functionality. In other words, white space, new line characters, comments, block eliminates or unnecessary coding or information may be removed from the file to shrink the size of the file. For example, JavaScript, if available, may be minified for use\/deployment so as to reduce the amount of data that needs to be transferred and increase the rate of transfer. Both external and in-lined code blocks may be minified. Many tools are available for minifying code, including but not limited to, Dojo ShrinkSafe, Dean Edwards Packer, and Yahoo! Compressor. Applications, including but not limited to jMaki applications, may be capable of automatically loading a minified component, namely, a minified \u201ccomponent-min.js\u201d in place of \u201ccomponent.js\u201d if the resource is provided. The minified resources may be also used in the combined script resource that is generated.","Compression reduces response time by reducing the size of the HTTP response . Accordingly, contents may be optionally GZipped (GNV zip); that is, the contents of a file may be GZipped for browsers that support it. For example, GZipping may reduce the response size in some instances by as much as 70% although any reduction in size may be acceptable for the purpose provided. Compressing or \u201czipping\u201d a file improves the rate or ability to transfer the file. Further, GZipping as many files as possible may reduce page weight and accelerate page rendering for a user . A file may be GZipped based on deflate computer methods. Referring to , if a web server  sees a GZip header , such as for example, \u201cAccept-Encoding: gzip, deflate\u201d, in the request , it may compress  the response  using one of the methods listed by the client . The web server  may notify the web client  of this via a Content-Encoding header  in the response  (for example, \u201cContent-Encoding: gzip\u201d). In some browsers, such as INTERNET EXPLORER, if a file is \u201cGZipped\u201d when it comes across a browser , the browser will automatically know what to do with that file. In other words, no additional work is necessary on the client side. The client side  or browser  recognizes the file type and may be able to decompress or deflate the file (using GunZip) or use the file as appropriate. As a result, certain files can be GZipped for use with suitable browsers. An application of this resource may be used in an internal application, such as an Intranet, wherein a system only supports one suitable browser.","To improve web page load time, one or more of the foregoing steps or parameters, which parameters may constitute performance options, may be combined into a single automated step or a combination of automated steps in a code set  which dynamically process requests and constructs responses, such as a Servlet or computer code, such as but not limited to a function or set of functions  (see ,  and ). In one or more examples provided herein, a plurality of configuration parameters, such as two or more parameters may be combined into a single dynamic code set. For example, a Servlet may be provided in the case of Java, while a function or function set or function code set may be provided for PHP. The rendering of Ajax resources has been generally modified in one or more ways by parameters set forth in a Servlet or function set. Any one or more of resources, properties or operating parameters, or more specifically codes or code segments, may be combined into one of the foregoing described code sets. The code set  may be arranged to receive a request and generate a response to the request. The parameters or code segments are combined into one piece of code that may handle all of the designated parameters or properties. The configuration parameters may be predefined parameters. To accomplish the foregoing, a set of properties or configuration parameters may be provided that can be set from a default to \u201ctrue\u201d or can otherwise be activated. While one or more parameters may be optionally included, all configuration parameters described herein may be included to increase the speed or performance of web page rendering.","The above-referenced configuration parameters may require client side runtime  and server side runtime  to perform (see ) because the parameters may be performed or accomplished before a page  is returned to the client . In one or more examples of embodiments, server side runtime  manages resources rendered to a page  while the client side runtime  is capable of rendering material an end user  may see on a web page . Accordingly, a suitable platform may include a client side runtime, and code, such as JavaScript code capable of rendering objects such as widgets, tables, trees or other material that an end user  may see on a web page. In the examples of one or more embodiments described herein, jMaki manages the rendering of Ajax resources, although alternative web applications may be acceptable for the purposes provided. For example, any suitable web technology or application which may include a server\/client technology as described herein, or in which client and server runtime interact so as to manage the resources rendered to a page, may be acceptable for use.","Moreover, the suitable platform may include a server side component in which, for example, JSF or JSP or the like may be used to create the web page . A server side component may also be provided that reviews or reads a web page , or the elements on the page and which may be capable of translating tags ,  or markers in the code  to retrieve particular code or files, such as a combined script file  or combined stylesheet file . For example, the server , upon encountering a certain string of code , , may be capable of replacing that string with replacement code , , such as JavaScript code and\/or CSS code or the like, which code is retrieved from a file and which may be necessary to render a portion of the web page (see ). The server side component may also include a tag library, which includes one or more predefined tags or code strings with a meaning or corresponding replacement code, associated therewith. The server side component may also perform additional tasks.","Accordingly, the foregoing presents a machine-readable medium including instructions, which, when executed by a machine, cause the machine to perform operations. The instructions in one or more examples of embodiments are configuration parameters managed by a computer and which are arranged to render a web page on an additional computer.","An application  is created, such as a jMaki application. In creating the application , one or more tags or flags ,  are placed in tag libraries. In operation of one or more examples of embodiments, one or more tags may be set. In PHP, one or more properties are set and a directory on the file system may be created. In creating the application , a table of configuration parameters may be inserted in addition to or in connection with the tags. Any number of features or elements may be inserted without departing from the overall scope of the present invention.","A basic list of steps or configuration parameters for the web page  or for rendering the web page may be provided which can be turned on or off. For example, one such parameter may include \u201cjMaki combined styles\u201d. The configuration parameters forming at least a portion of the framework for improving Ajax performance include a plurality of the above discussed resources. For example, as shown in , combined resources, headers set to ensure cacheable resources, storage of script and stylesheets, minified resources and GZipping of contents may be provided as configuration parameters . These parameters  may or may not be presented in a table. The configuration parameters  described in the example may be further combined with strategically placed resource tags, externalized script and stylesheets and other relevant parameters (not shown). In a typical web page, one or more of the configuration parameters may be \u201cturned off\u201d by default, and may therefore require an affirmative action to \u201cturn on\u201d. In certain programming languages, this may be done by altering the word \u201cfalse\u201d to become \u201ctrue\u201d, however any suitable mechanism or language for activating a configuration parameter may be acceptable for purposes of the present invention. Any one or more configuration parameters may be altered. It is also contemplated that default settings may not change.","Once parameters are set or configured in the dynamic code set  and any tags ,  are placed, or strategically placed in the code, the file may be saved and the application  deployed. In the server based framework for improving Ajax performance, the system may manage a set of server-side objects  on the server  and may further cause the client  to run a set of browser-side objects  on a browser . In one or more examples of the operation of the system, the user  may be running a web page  on the client computer or user device . The user  requests  an application, for example, by selecting a hyperlink in the web page  or by entering a web page address. On the client side, the web page  operating in a user's browser  makes a request  for the information or data linked to the hyperlink. According to the operation of one or more examples, a web page  executing JavaScript, submits a request  to a server  (see ). On the server side, a response  is provided to the request  with the information for rendering on the web page  or for rendering a web page  on the client computer  for the user .","As indicated, the code automatically processes the web application  to produce a performant application or web application based on the configuration parameters. That is, the web application shows improved performance, increasing speed and efficiency of rendering. When an end user  accesses the web page  with the deployed application , the dynamic code set  is engaged or operates prior to return or rendering of the page for the client . Performance of web page  rendering may be enhanced by setting the configuration parameters as described above. The configuration parameters that are set define the actions for or invoked by the application . In the examples provided hereinabove, the configuration parameters may be set to reduce the number of network calls by combining CSS and\/or JavaScript resources. Configuration parameters may be set to appropriate headers to ensure cacheable resources are correctly cached locally by browsers. Configuration parameters may be set to use minified code, such as JavaScript, if available. Configuration parameters may be set to GZip contents of files or use GZip contents for browsers that support GZip. Configuration parameters may be set by strategic placement of CSS and JavaScript tags. Any one or more of the forgoing configurations may be used alone or in any combination, or with additional parameters to improve the performance of web page rendering.","Setup of the system may be accomplished by one or more mechanisms. For ease of illustration, setup will be described in reference to jMaki, although other applications may be suitable for use. To setup the server based framework or system in PHP, a \u201ccache\u201d directory may be created in the same directory as, for example, \u201cjMaki.php\u201d. Permissions on the cache directory may be set such that the process running PHP may write files to the cache directory. The \u201ccache.php\u201d and \u201cjMaki.php\u201d files may be located in the same directory. However, the use of separate directories may also be acceptable. To this end, it may be necessary to confirm the \u201ccache.php\u201d file is located in the same directory as the \u201cjMaki.php\u201d file. In one example, shown in , configuration of the parameters is accomplished by modifying variables that appear in the file, for example such variables may appear at the top of or in the \u201cjMaki.php\u201d file. The user  may optionally set one or more of the configuration parameters provided in . In the example provided in , activation or selection of parameters may be accomplished by changing \u201cfalse\u201d to \u201ctrue\u201d. Further customization may be performed by modifying the \u201ccache.php\u201d which may manage cached content.","An application is created, such as a jMaki application. A dynamic code set  may be configured in the \u201cweb.xml\u201d file to serve cached resources which are kept in memory. For example, a Servlet  may be included in the jMaki library as: \u201cjmaki.runtime.CombinedResourcesServlet\u201d. Servlet  mapping may be added, such as \u201c\/cr\u201d. If Servlet  mapping other than \u201c\/cr\u201d is used, it may be necessary to configure the runtime with a new location corresponding to the alternative Servlet mapping.","In Java (JSP\/JSF), a Servlet  may be configured in a \u201cweb.xml\u201d file to serve cached resources which are kept in memory. Again, the Servlet  may be included in the jMaki library as: \u201cjmaki.runtime.CombinedResourcesServlet\u201d. In this example, Servlet mapping may be added as \u201c\/cache\u201d. Alternatively, if Servlet mapping other than the foregoing is used, it may be necessary to configure the runtime with a new location corresponding to the alternative Servlet mapping.","To enable combined resources in Java, configuration of the performance options may be done by modifying certain context parameters in the \u201cweb.xml\u201d and as shown in . The cached content may be stored in the Servlet context and is flushed when an application is re-deployed. The user  may optionally set one or more of the configuration parameters.","The following is an example of a minimal set of parameters suitable for use in a \u201cweb.xml\u201d in one or more examples of the present invention.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<context-param>"},{"entry":"\u2003<param-name>jmaki-combinescripts<\/param-name>"},{"entry":"\u2003<param-value>true<\/param-value>"},{"entry":"<\/context-param>"},{"entry":"<context-param>"},{"entry":"\u2003<param-name>jmaki-combinestyles<\/param-name>"},{"entry":"\u2003<param-value>true<\/param-value>"},{"entry":"<\/context-param>"},{"entry":"<servlet>"},{"entry":"\u2003<servlet-name>Combined Resource Servlet<\/servlet-name>"},{"entry":"\u2003<servlet-class>jmaki.runtime.CombinedResourceServlet<\/servlet-class>"},{"entry":"\u2003<load-on-startup>2<\/load-on-startup>"},{"entry":"\u2003<\/servlet>"},{"entry":"<servlet-mapping>"},{"entry":"\u2003<servlet-name>Combined Resource Servlet<\/servlet-name>"},{"entry":"\u2003<url-pattern>\/cr<\/url-pattern>"},{"entry":"<\/servlet-mapping>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"An example of a web application  is provided below. In the illustrated example, Netbeans may be used to create the web application. However, Eclipse or a plain editor or the like may also be used. In this example, a jMaki menu, tag cloud and blocklist widgets are included. However, any jMaki wrapped widgets or custom jMaki widgets that have been created may be used. The page looks as follows:",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<%@ taglib prefix=\u201ca\u201d uri=\u201chttp:\/\/jmaki\/v1.0\/jsp\u201d %>"},{"entry":"<!DOCTYPE html PUBLIC \u201c-\/\/W3C\/\/DTD XHTML 1.0"},{"entry":"Transitional\/\/EN\u201d"},{"entry":"\u201chttp:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-transitional.dtd\u201d>"},{"entry":"<html>"},{"entry":"\u2003<head>"},{"entry":"\u2003\u2003<link rel=\u201cstylesheet\u201d href=\u201cjmaki-2column-footer.css\u201d"},{"entry":"\u2003\u2003type=\u201ctext\/css\u201d><\/link>"},{"entry":"\u2003\u2003<title>Page Title<\/title>"},{"entry":"\u2003\u2003<meta http-equiv=\u201cContent-Type\u201d content=\u201ctext\/html;"},{"entry":"\u2003\u2003charset=UTF-8\u201d \/>"},{"entry":"\u2003\u2003<a:page>"},{"entry":"\u2003<\/head>"},{"entry":"\u2003<body>"},{"entry":"\u2003\u2003<div id=\u201cborder\u201d>"},{"entry":"\u2003\u2003\u2003<div id=\u201cheader\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<div id=\u201cbanner\u201d>Application Name<\/div>"},{"entry":"\u2003\u2003\u2003\u2003<div id=\u201csubheader\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<div>"},{"entry":"<a:widget name=\u201cjmaki.menu\u201d"},{"entry":"\u2003\u2003value=\u201c{menu : ["},{"entry":"\u2003\u2003{label: \u2018Links\u2019,"},{"entry":"\u2003\u2003\u2003menu: ["},{"entry":"\u2003\u2003\u2003\u2003{ label : \u2018Sun.com\u2019,"},{"entry":"\u2003\u2003\u2003\u2003\u2002href : \u2018http:\/\/www.sun.com\u2019},"},{"entry":"\u2003\u2003\u2003\u2003{ label : \u2018jMaki.com\u2019,"},{"entry":"\u2003\u2003\u2003\u2003\u2002href : \u2018http:\/\/www.jmaki.com\u2019}"},{"entry":"\u2003\u2003\u2003\u2003]"},{"entry":"\u2003\u2003},"},{"entry":"\u2003\u2003{label: \u2018Actions\u2019,"},{"entry":"\u2003\u2003\u2003menu: ["},{"entry":"\u2003\u2003\u2003\u2003{ label : \u2018Select\u2019,"},{"entry":"\u2003\u2003\u2003\u2003\u2002action :{topic: \u2018\/foo\/select\u2019,"},{"entry":"\u2003\u2003\u2003\u2003\u2003message: { targetId : \u2018bar\u2019}}"},{"entry":"\u2003\u2003\u2003\u2003},"},{"entry":"\u2003\u2003\u2003\u2003{ label :\u2018Set Content\u2019,"},{"entry":"\u2003\u2003\u2003\u2003\u2002action :{topic: \u2018\/foo\/setContent\u2019,"},{"entry":"\u2003\u2003\u2003\u2003\u2003message: { value : \u2018test.jsp\u2019}}"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003]}"},{"entry":"\u2003\u2003\u2003\u2003]"},{"entry":"\u2003\u2003}\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/div>"},{"entry":"\u2003\u2003\u2003\u2003<\/div> <!-- sub-header -->"},{"entry":"\u2003\u2003\u2003<\/div> <!-- header -->"},{"entry":"\u2003\u2003\u2003<div id=\u201cmain\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<div id=\u201crightColumn\u201d style=\u201cheight:400px\u201d>"},{"entry":"<a:widget name=\u201cjmaki.blockList\u201d value=\u201c["},{"entry":"\u2003\u2003{title : \u2018jMaki Project Home\u2019, link : \u2018https:\/\/ajax.dev.java.net\u2019,"},{"entry":"description : \u2018Where to go for the latest jMaki.\u2019 },"},{"entry":"\u2003\u2003{title : \u2018jMaki Widgets Home\u2019, link : \u2018https:\/\/widgets.dev.java.net\u2019,"},{"entry":"description : \u2018The source for the latest jMaki widgets.\u2019 },"},{"entry":"\u2003\u2003{title : \u2018jMaki-Charting Home\u2019, link :"},{"entry":"\u2018https:\/\/jmaki-charting.dev.java.net\u2019, description :"},{"entry":"\u2018Enables complex charts rendered on the client in any modern browser.\u2019 }"},{"entry":"\u2003]\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/div> <!-- end leftColumn -->"},{"entry":"\u2003\u2003\u2003\u2003<div id=\u201cleftColumn\u201d style=\u201cheight:400px\u201d>"},{"entry":"<a:widget name=\u201cjmaki.tagcloud\u201d value=\u201c{"},{"entry":"\u2002items : ["},{"entry":"\u2003{ label : \u2018jMaki\u2019, weight : 70},"},{"entry":"\u2003{ label : \u2018Web2.0\u2019, weight : 150},"},{"entry":"\u2003{ label : \u2018JSON\u2019, weight : 80},"},{"entry":"\u2003{ label : \u2018JavaScript\u2019, weight : 145},"},{"entry":"\u2003{ label : \u2018Java\u2019, weight : 100},"},{"entry":"\u2003{ label : \u2018RSS\u2019, weight : 85},"},{"entry":"\u2003{ label : \u2018Autocomplete\u2019, weight : 75},"},{"entry":"\u2003{ label : \u2018Sun\u2019, weight : 65, href : \u2018http:\/\/www.sun.com\u2019},"},{"entry":"\u2003{ label : \u2018jMaki\u2019, weight : 150},"},{"entry":"\u2003{ label : \u2018Web3.0\u2019, weight : 70},"},{"entry":"\u2003{ label : \u2018Phobos\u2019, weight : 105},"},{"entry":"\u2003{ label : \u2018Glassfish\u2019, weight : 120},"},{"entry":"\u2003{ label : \u2018RSS2.0\u2019, weight : 75},"},{"entry":"\u2003{ label : \u2018Web1.0\u2019, weight : 50},"},{"entry":"\u2003{ label : \u2018JavaEE\u2019, weight : 75},"},{"entry":"\u2003{ label : \u2018Jersey\u2019, weight : 115},"},{"entry":"\u2003{ label : \u2018Roller\u2019, weight : 150},"},{"entry":"\u2003{ label : \u2018CSS\u2019, weight : 105},"},{"entry":"\u2003{ label : \u2018DHTML\u2019, weight : 65},"},{"entry":"\u2003{ label : \u2018Netbeans\u2019, weight : 115, href : \u2018http:\/\/www.netbeans.com\u2019}"},{"entry":"\u2002]"},{"entry":"}\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/div> <!-- leftColumn -->"},{"entry":"\u2003\u2003\u2003<\/div> <!-- main -->"},{"entry":"\u2003\u2003\u2003<div id=\u201cfooter\u201d>Footer<\/div>"},{"entry":"\u2003\u2003<\/div> <!-- border -->"},{"entry":"\u2003\u2003<\/a:page>"},{"entry":"\u2003<\/body>"},{"entry":"<\/html>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The forgoing example represents an illustrative example of a jMaki web page or application  with the addition of certain tags. Namely, the <a:page> tag at the beginning instructs the jMaki code where to drop or locate externalized CSS code, which may be located in the header. The closing <\/a:page> tag instructs jMaki where to drop or locate the externalized combined JavaScript code which may be the last line in the body. One further change to the illustrated jMaki page may be appropriate in the \u201cweb.xml\u201d file. In particular, one or more properties or configuration parameters may be activated or set to \u201ctrue\u201d, so as to configure the dynamic code set  that performs the work. For example, the following may be added to the \u201cweb.xml\u201d file:",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<context-param>"},{"entry":"\u2003<param-name>jmaki-combinescripts<\/param-name>"},{"entry":"\u2003<param-value>true<\/param-value>"},{"entry":"<\/context-param>"},{"entry":"<context-param>"},{"entry":"\u2003<param-name>jmaki-combinestyles<\/param-name>"},{"entry":"\u2003<param-value>true<\/param-value>"},{"entry":"<\/context-param>"},{"entry":"<servlet>"},{"entry":"\u2003<servlet-name>Combined Resource Servlet<\/servlet-name>"},{"entry":"\u2003<servlet-class>jmaki.runtime.CombinedResourceServlet<\/servlet-class>"},{"entry":"\u2003<load-on-startup>2<\/load-on-startup>"},{"entry":"\u2003<\/servlet>"},{"entry":"<servlet-mapping>"},{"entry":"\u2003<servlet-name>Combined Resource Servlet<\/servlet-name>"},{"entry":"\u2003<url-pattern>\/cr<\/url-pattern>"},{"entry":"<\/servlet-mapping>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Aspects of the framework  described herein can be implemented on software running on a computer system. The system herein, therefore, may be operated by computer-executable instructions, such as program modules, executable on a computer. Program modules may include routines, programs, objects, components, data structures and the like which perform particular tasks or implement particular instructions. The software program may be operable for supporting the transfer of information within a network of trusted partner sites using artifacts.","The computers for use with the system and various components described herein may be programmable computers which may be special purpose computers or general purpose computers that execute the system according to the relevant instructions. The computer system can be an embedded system, a personal computer, notebook computer, server computer, mainframe, networked computer, handheld computer, personal digital assistant, workstation, and the like. Other computer system configurations may also be acceptable, including, cell phones, mobile devices, multiprocessor systems, microprocessor-based or programmable electronics, network PC's, minicomputers, and the like. Preferably, the computing system chosen includes a processor suitable in size to efficiently operate one or more of the various systems or functions.","The system or portions thereof may also be linked to a distributed computing environment, where tasks are performed by remote processing devices that are linked through a communications network. To this end, the system may be configured or linked to multiple computers in a network, including, but not limited to a local area network, a wide area network, a wireless network, and the Internet. Therefore, information and data may be transferred within the network or system by wireless means, by hardwire connection or combinations thereof.","The computer can also include a display, provision for data input and output, etc. Furthermore, the computer or computers may be operatively or functionally connected to one or more mass storage devices, such as, but not limited to a database. The memory storage can be volatile or non-volatile and can include removable storage media. The system may also include computer-readable media which may include any computer readable media or medium that may be used to carry or store desired program code that may be accessed by a computer. The invention can also be embodied as computer readable code on a computer readable medium. To this end, the computer readable medium may be any data storage device that can store data which can be thereafter read by a computer system. Examples of computer readable medium include read-only memory, random-access memory, CD-ROM, CD-R, CD-RW, magnetic tapes, and other optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.","The system deploying the foregoing framework for improving Ajax performance improves efficiency of a network computer system. The framework further renders a web page or generates web pages more quickly for an end user. For example, one application may present up to and including 30% improvement in page load time by simply setting the properties or configuration parameters described herein. Moreover, apart from making sure the dynamic code set is called before the page is handed back to the client, the dynamic code set operates automatically without user input as the process is managed by code.","Reference is made herein in detail to one or more examples of a server based framework for improving Ajax performance, examples of which are illustrated hereinabove and in the accompanying drawings.","Although various representative examples of embodiments of this invention have been described above with a certain degree of particularity, those skilled in the art could make numerous alterations to the disclosed embodiments without departing from the spirit or scope of the inventive subject matter set forth in the specification and claims. In some instances, in methodologies directly or indirectly set forth herein, various steps and operations are described in one possible order of operation, but those skilled in the art will recognize that steps and operations may be rearranged, replaced, or eliminated without necessarily departing from the spirit and scope of the present invention. It is intended that all matter contained in the above description or shown in the accompanying drawings shall be interpreted as illustrative only and not limiting. Changes in detail or structure may be made without departing from the spirit of the invention as defined in the appended claims.","Moreover, some portions of the detailed descriptions herein are presented in terms of procedures, steps, logic blocks, processing, and other symbolic representations of operations on data bits that can be performed on computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure, computer executed step, logic block, process, etc., is here, and generally, conceived to be a self-consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system. It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the discussions herein, it is appreciated that throughout the present invention, discussions utilizing terms such as \u201creceiving,\u201d \u201csending,\u201d \u201cgenerating,\u201d \u201creading,\u201d \u201cinvoking,\u201d \u201cselecting,\u201d and the like, refer to the action and processes of a computer system, or similar electronic computing device, including an embedded system, that manipulates and transforms data represented as physical (electronic) quantities within the computer system.","Although the present invention has been described with reference to particular embodiments, persons skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 9","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 10","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 11","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 12","FIG. 1"]}]},"DETDESC":[{},{}]}
