---
title: Accessing legacy applications from the Internet
abstract: Interactive legacy applications can be run from a network, such as the Internet, without requiring any code changes in the application. Typically, legacy applications are critical to a business, are self-contained on the computer, have mixed business and user interface logic, and were written before distributed computing emerged. Separating business logic from user interface logic as required by web application architectures is not practicable in the case of legacy applications. A client has a network user agent which can access a network server connected to the computer. When an application is invoked from the network user agent, a runtime data redirector intercepts the application's raw data and sends the data to the network server which then serves the data across the network to the network user agent. Input data from the user entered through the network user agent are sent back to the application via the same runtime intercept.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07007278&OS=07007278&RS=07007278
owner: International Business Machines Corporation
number: 07007278
owner_city: Armonk
owner_country: US
publication_date: 20010406
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application relates generally to the field of computer software applications and more particularly relates to accessing legacy application programs over a computer network, such as the Internet.","Like everything else, computer use has changed over the years. In the early days, large mainframe computers dominated the industry until the advent of the personal standalone computer. Now many businesses and homes have at least one personal standalone computer, a PC. A new paradigm of computing, however, has emerged: network-centric computing or distributed computing in which at least two, but more likely many more computers, called clients and servers, are interconnected through a network wherein the software applications used by a client resides on a server. Thus, a server may provide the application or client program or databases used by an end user or by a number of other servers and clients over a network.","In many instances and increasingly more so, the network connecting clients and servers is the Internet. The Internet refers to a collection of interconnected computer networks that use the Internet protocol, e.g., TCP\/IP, UDP, etc. Software applications are written in a programming language independent of the operating system of either the server or the client to access and use a myriad of applications on the Internet. Languages that describe data over the Internet, moreover, include variations of extensible mark-up languages (XML), such as hypertext mark-up language (HTML), wireless mark-up language (WML), etc. The world wide web refers to a software management scheme which accesses the Internet with various user agents using hypertext links.","Distributed computing has fundamentally changed the methodology of software developers in writing code for these applications. Rather than writing one massive self-contained application having thousands or millions of lines of code, software developers select and weave together smaller portions of code, called components, each associated with a particular function that can be reused across multiple applications, all on the world wide web. Components are standard software that can be pulled off a server and incorporated into new applications by software developers. For example, a calendar component may be used in several applications such as a scheduling application, a presentation application, and\/or a data base application to calculate employee's vacation and pay, etc. Current industry architectures for Internet and world wide web applications, moreover, require that business logic be separated from presentation logic such that the business logic is solely responsible for providing business data while the presentation logic is solely responsible for driving presentation or the user interface.","The massive self-contained applications having thousands or millions of lines of code, however, may still be very important to businesses and organizations. Indeed, some self-contained programs may contain a business's entire inventory\/client list\/database or all of the above. The term \u201clegacy applications\u201d refers to old applications which remain in operation with a business or organization but were developed before the advent of distributed computing and structured programming and its techniques of modularity, coupling, cohesion, etc. Legacy applications written as one large self-contained program do not accommodate change easily. These legacy applications, moreover, are often so critical to the business that these businesses face difficult decisions about the future of such applications and the ability to exploit new network and Internet technologies for remote and distributed access to these critical applications. Interactive legacy applications that have mixed business and presentation logic must be restructured and\/or reengineered to be enabled as web applications. Separating the business logic from the user interface logic, however, is not always practicable to deploy applications onto the web with minimal intervention and testing.","Other solutions to implement legacy applications on the Internet and world wide web may use a screen-scraping technique which converts legacy display data streams at runtime to a web-based language, such as HTML, or other language. The HTML converted screens are then displayed on a browser. Converting legacy display data stream at runtime, however, is slow, compromises performance of the application, and does not give the user the capability of integrating or bridging legacy applications seamlessly with new web or other network applications. Nor does mere conversion of legacy data provide the capability to enhance the effectiveness of the user interface of the application when the application runs on the Internet.","There is thus a need in the industry to access legacy applications from the Internet, the world wide web, or other computer communication networks without having to restructure the application or make code changes to the programs.","There is a further need in the industry to seamlessly interweave legacy applications with other network applications.","These needs and others that will become apparent to one skilled in the art are satisfied by a method to execute a computer application installed on a computer, comprising the steps of creating a servlet instance in a server connected to the computer on a first network; running the application on the computer to generate dynamic data; intercepting and redirecting the dynamic data to a network publishing component on the computer; transmitting dynamic data from the network publishing component to the servlet instance; and creating data objects and populating the data objects with the dynamic data in the server. The method may further comprise requesting the application from a client connected to the server over a second network; updating at least one network page with the dynamic data; and transmitting the updated network pages to the client.","The first network may be the Internet. The first network may also be selected from the group consisting of: an internal network, an Intranet, a LAN, a WAN, an internal bus, a wireless network. Similarly the second network may be the Internet; or may be selected from the group consisting of: an internal network, an Intranet, a LAN, a WAN, an internal bus, a wireless network. The computer may contain the network server.","The method may further comprise converting the display files of the application to network pages capable of displaying dynamic data. The network pages may be based on a XML language, such as HTML and\/or WML. The network pages may be JavaServerPages. The network pages, moreover, may be stored on the server.","The method of the invention may further comprise creating an I\/O buffer for the dynamic data in the computer. The method may also comprise the steps of creating a first endpoint connection between the servlet instance and the network publishing component; the endpoint connection may be a socket, or a data queue object, or a message queue.","It is also envisioned that the invention comprises a program product for use in a computer network for executing an application stored on a computer from a client, the computer program product comprising a signal-bearing medium carrying thereon: an application invoker to start and run an application in its native environment on the computer from a client; a plurality of network user interface pages to display the application's input\/output data on the client; a data redirector to redirect the application's input\/output data to network user-interface pages; a plurality of data objects corresponding to the network user interface pages to receive the application's input\/output data; a servlet instance to dynamically update the network user interface pages with the application's input\/output data; and a network user agent to display the updated network user-interface pages on the client. The program product may further comprise a screen definition converter to convert the input\/output screen definitions of the application to the network user-interface pages.","The invention may also be considered a computer system for executing an application, comprising: a central processing unit; a main memory connected to the central processing unit with a communication bus; a data storage unit connected to a data storage interface which is connected to the communication bus; at least one input\/output device connected to the communication bus and connected to a network interface to an external computer network, an application stored in the main memory and capable of executing on the central processing unit; a network publishing component; a data redirector to redirect the application's dynamic data to the network publishing component; and an I\/O buffer to store the redirected dynamic data.","Yet, in another embodiment, the invention may be considered a network server for accessing an application stored and executing on a computer, comprising: a central processing unit; a network interface to connect to at least one client over a network; a servlet instance to receive a request from the at least one client to access the application and transmit the request to the computer; a server endpoint connection for transmitting and receiving real-time data to and from the computer on which the application is executing; and a plurality of data objects to be populated with the real-time data wherein the servlet receives the real-time data from the application and populates the data objects with the real-time data. The network server may further comprise a plurality of network display pages, each of the network display pages unique to each input\/output screen definition of the application wherein the servlet updates the network display pages for transmission to the client over the network.","The invention may also be viewed as a method for executing a computer application installed on a computer, comprising the steps of: converting a plurality of display files of the application to a plurality of XML-based network pages capable of displaying the application's dynamic data; creating a servlet instance in a server connected to the computer on a network; requesting the application from a client connected to a server over the Internet; running the application on the computer in its native environment; creating an I\/O buffer in the computer for the application's dynamic data; creating an endpoint connection between the servlet instance and a network publishing component on the computer; transmitting the dynamic data back and forth from the client to the application through the servlet instance; creating data objects and populating the data objects with the dynamic data; updating at least one network page using the data objects; transmitting the updated network pages to the client over the Internet; and transmitting network pages having responsive data from the client to server for transmission as input data to the application.","Yet, another aspect of the invention is a method of interacting with a computer application, comprising: executing a legacy computer application in its native environment; redirecting I\/O requests from and responses to the legacy computer application from a client over the Internet without introducing changes to the code of the legacy computer application.","Referring to the Drawing, wherein like numbers denote like parts throughout the several views,  shows a high-level block diagram of a computer system , consistent with an embodiment of the invention. Computer system  may comprise central processing unit (CPU) , main memory , terminal interface , data storage , and a network, e.g., Internet, interface . The various devices communicate with each other via internal communications bus . CPU  is a general-purpose programmable processor, executing instructions stored in memory ; while a single CPU is shown in , it should be understood that computer systems having multiple CPUs could be used. Memory  is a random-access semiconductor memory for storing data and programs; memory is shown conceptually as a single monolithic entity but it is well known that memory is often arranged in a hierarchy of caches and other memory devices. Operating system  and applications  reside in memory . Operating system  provides, inter alia, functions such as device interfaces, management of memory pages, management of multiple tasks, etc. as is known in the art. Applications  may include legacy applications and if it includes a server software application, network interface  may interact with the server software application  to enable computer system  to be a network server.","Terminal interface  may support the attachment of single or multiple terminals and may be implemented as one or multiple electronic circuit cards or other units. Data storage  preferably comprises one or more rotating magnetic hard disk drive units, although other types of data storage could be used. Network interface  provides a physical connection for transmission of data to and from a network. In the preferred embodiment the network is the Internet but the network could also be any smaller self-contained network such as an Intranet, a WAN, a LAN, or other internal or external network using, e.g., telephone transmissions lines, satellites, fiber optics, T1 lines, etc. and any various available technologies. Communications bus  supports transfer of data, commands and other information between different devices; while shown in simplified form as a single bus, it is typically structured as multiple buses; and may be arranged in a hierarchical form.","The computer system shown in  is intended to be a simplified representation, it being understood that many variations in system configuration are possible in addition to those specifically mentioned here. While system  could conceivably be a personal computer system, the computer  may also be a larger computer system such as an IBM Enterprise System or an IBM AS\/400 system. While a particular hardware configuration is described herein along with various alternatives, the methods described could in general be practiced using any hardware configuration that allows access to legacy applications across a computer network from a client. CPU  is suitably programmed to carry out the preferred embodiment by having the legacy application and a network interface that can be used by other connected computers to access that legacy application.","Computer system  and its components are shown and described in  as a more or less single, self-contained computer system. It is alternatively possible to use multiple computer systems, particularly multiple systems which share a single large database, each having a specialized task. For example, one or more computer systems  could be dedicated to one or more legacy applications accessing a database, while one or more other computer systems  could be dedicated to servicing requests received from clients or accessing the Internet. References herein to a computer should be understood to include either a single computer or a collection of computer systems which provides access to a legacy application and to a network by which to connect to a client system.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["200","100","200","201","202","203","208","210","201","202","202","202","210","203","211","204","212","213","205","214","206","215","207","208","200","208","200","200","100","100","122","200","100"]},"With reference to , each client system  is a device separate from computer  that can access legacy applications which reside and run on the computer . Client system may be a personal computer system or a larger computer system such as a server, or a smaller computer system, such as notebook or laptop computer. Finally, client system  need not be a computer at all, but preferably is a simpler appliance-like client device with less memory such as a network terminal, a thin client, a terminal-like devices, a voice response unit, etc. The convergence of computing, telecommunications and consumer electronics is causing a tremendous growth in the number and variety of pervasive mobile devices as clients . This mobile architecture enables the multitude of clients  including laptops, sub-notebooks, handheld computers, such as personal digital assistants and companion devices, and mobile appliances, such as smartphones, pages, simple messaging devices and wearable devices. Thus when the client system  is a mobile device, a display adapter and network interface has a network user agent and supports a variety of multi-modal interfaces including traditional keyboard and mouse interfaces, small text screens, pen, touch screens, speech recognition, text-to-speech and other emerging technologies like wearable devices. A network user agent enables the use of the computer's applications on its respective client . It is preferably intended that client system  include any electronic device which may interact with a network server  through the network user agent, such as a web browser, to access a legacy or other applications residing on the computer system . Such special-purpose devices for accessing the world wide web, such as an Internet access box for a television set, or a portable wireless web accessing device, which can implement a user agent for the purpose of invoking and executing an application are also intended to be within the scope of a client system . The network user agent could be implemented by control circuitry through the use of logic gate, programmable logic devices, or other hardware components in lieu of a processor-based system.","As will be described in detail below, aspects of the preferred embodiment pertain to specific method steps implementable on a computer  or a network server . In an alternative embodiment, the invention may be implemented as a computer program-product for use with either or both a network server  and a client . The programs defining the functions of the preferred embodiment can be delivered to the computer  and\/or to the network server  via a variety of signal-bearing media, which include, but are not limited to: (a) information permanently stored on non-writable storage media, e.g., read only memory devices within either computer such as CD-ROM disks readable by CD-ROM drive ; (b) alterable information stored on writeable storage media, e.g., floppy disks within diskette drive or hard-disk drive, such as shown as  in ; or (c) information conveyed to a computer by a telephone or a cable media network, including wireless communications. Such signal-bearing media, when carrying computer-readable instructions that direct the functions of the present invention, represent alternative embodiments of the present invention.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 3"],"b":["200","300","303","304","300","200","200","100","300","100","100","200","200"]},"This invention provides an environment that shields interactive legacy applications from restructuring or reengineering the applications' code by allowing such legacy applications to continue running, as-is, in their native environment while simultaneously allowing a variety of clients to access the legacy applications using a web browser or other network technology. The invention also provides the interactive legacy applications with the ability to generate the required business data and drive separate presentation artifacts as required by industry standard world wide web application architectures. What is interesting about the invention is the interaction between the \u201cstateful\u201d legacy applications and the \u201cstateless\u201d Internet transactions. Interactive legacy applications are stateful in that the application continues to execute until it comes to an I\/O instruction wherein execution is suspended and the application's state is preserved in its native environment until the I\/O action is completed. Internet transactions, on the other hand, use stateless protocols of, e.g., HTTP, wherein after a transaction on the Internet is completed, the connection to the Internet is broken and the state of the transaction is lost unless additional processing occurs to save that state on the network server. This invention provides a mechanism and an environment whereby the state of the legacy application is automatically preserved in its native environment while it converses with the stateless web environment. The automatic preservation of the application's state is inherent in the architecture of the invention which provides the necessary continuity required by interactive legacy applications.","With reference to , there is shown a simplified process chart and block diagram of a prior art computer application environment. Each legacy application  has data  to be input\/output to\/from the application runtime operating system  according to the program I\/O code  through the compiler runtime . Output data  may be sent to the data manager code  which is part of the application runtime operating system . A workstation manager  or an equivalent function within the application runtime operating system  combines the output data  with corresponding display records from the applications' user interface definition files  to generate a data stream  to be displayed on a proprietary display device . When the data are built into the data stream and sent for display to the display device, display-formatting of application data is defined in the screen definition itself and the format code is applied to the data by the application runtime component  of the operating system. Prior to application runtime, these user interface definition files  are compiled and built into one or more display objects referenced during runtime. Input data follows the reverse path: the application runtime  extracts the input data from the inbound data stream, formats the data which is then submitted to the application as user input data. On some systems, the display device  builds only the dynamic portion, e.g., the input fields, of the screen into the inbound data stream.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5","FIG. 4"],"b":["440","440","510","570"]},"Customization of the conversion process may be achieved in several ways and is desirable if the end-user company has well-defined rules on application presentation. The conversion process may identify any user interface design patterns used by the company thereby allowing the user to customize templates to map to these design patterns. The conversion algorithm then uses these patterns to identify the actual application screens and convert accordingly. Post-conversion modifications by the user may be possible if the styling of the conversions are kept in separate files. In an embodiment of the network pages as JavaServer Pages, these network pages are generated by converting the display file records  to JavaServer Pages  containing DHTML. DHTML is HTML with Cascading Style Sheets and JavaScript used by the client to perform local validation of input fields and facilitates modification after conversion to customize for a user's presentation style. Otherwise, the company's screen design rules may be discovered by analysis of the legacy application's screen definitions or of the display data streams as the screens are viewed. The knowledge base obtained from these analyses can then be modified as needed prior to the conversion process.","The converted user interface pages  are dynamically updated at step  using existing web page serving technologies on the network server  prior to sending the page to the network user agent  on the client . The application's raw output data are redirected by the data manager  of the application runtime operating system  at step  so that the outbound data for display are not converted to traditional proprietary display data streams as described in , but rather, are sent to a new network publishing component , labeled \u201cPublish-to-Web.\u201d The network publishing component  reformats the application data for publishing to the network because, inter alia, the application data are generated and coded by the legacy application in a format not suitable for display on the network. User input data obtained from the network user agent  are also processed by the Publish-to-Web runtime component  and reformatted as application input data submitted to the application runtime operating system . The network server  and a portion of the Publish-to-Web runtime component  may be installed on a computer  other than the one in which the legacy application  and the application runtime  are installed but may also be merged with and part of the computer  having the legacy application . Again, the Publish-to-Web runtime component  is engineered so that the legacy application  is unaware of any changes in its native environment, thus requiring no code changes to the application.","In a particular embodiment of the Internet and world wide web as the network, JAVA allows JavaServer Pages as the network pages to dynamically insert application data into HTML or XML pages before the network pages are served to a network user agent, a process referred to as dynamically generated web content. The data to be read by the JavaServer Pages are stored in data objects, i.e., JavaBeans, that are populated by a servlet which has received data to publish. A very important feature of the invention is that once the legacy application data has been stored in these data objects in the network server, it becomes available for any purpose, including access from another computer connected to the server, for manipulation, for transmission . . . the uses for this legacy dynamic data on the web server are limitless. The data field definitions of the JavaBeans have a one-to-one mapping with the variable data fields of HTML or XML pages housed by the JavaServer Pages and are generated during the conversion process as Java class definitions because the definition of the proprietary application screens contain the I\/O fields of the screens. Such mapping is known in the art, and there are other products such as Active Server Pages that are capable of providing dynamic content from a server to a client. In any embodiment, the servlet instance instantiates and populates these data objects with the redirected dynamic data, usually I\/O data, of the legacy application. Preferably, therefore, the data objects have the necessary methods to format the data for display and for converting the data from the application's proprietary code to the network codepage of the appropriate language.","By way of example only,  illustrates an architecture of the Publish-to-Web runtime component based on the use of JavaServer Pages. The entities of the Publish-to-Web runtime component are: a servlet instance  which acts as a web gateway for requests to  and replies from  a legacy application . Generally, a servlet is a JAVA program that runs on a server in response to a client request. For outbound data the servlet instance  accepts a data buffer from the socket, looks up the record identifier of the data, instantiates, and populates the associated data object, e.g., the JavaBean, and activate the associated JavaServer Page to serve the data to the network user agent for display. For inbound data, the servlet instance  packages the data into a data buffer and submits it to the application via the socket and Publish-to-Web runtime component. The servlet instance  also sets up the application process and the communication path between the application process and the network server process. The communication path may include sockets  as a communication endpoint. It is to be noted that sockets and other communication endpoints which suspend execution of the application while waiting for input data will inherently preserve the state of the application and will function in the context of the invention. The application invoker  saves the socket descriptor to be used later by the Read_Data and Write_Data methods, activates data redirection, and calls the legacy application. The operating system application runtime  calls the Read_Data and Write_Data methods to redirect data flow between the application and the Internet. The network user pages, here JavaServer pages, are generated during the user interface conversion process. Data objects, e.g., in this instance JavaBeans, are associated with each of the JavaServer pages and contain application data to publish to the web via the JavaServer pages.","The control flow of the process in accordance with principles of the invention proceeds as follows: a user on a client  starts the legacy application  from the network user agent , preferably a world wide web browser, by first requesting at step  an invocation page from the servlet instance  on a network server . In step , the client  which may be another computer or a person completes and submits a set of entry fields for the name and parameters of the application to invoke. The servlet instance , upon receiving the XML or HTTP request for invocation, at step  creates a socket and spawns a secondary thread  to the computer  launch the application process that invokes the legacy application. The socket then waits for a connection as in step ","The secondary thread  passes the socket port number and program information to the application invoker  which creates a socket and makes a connection to the socket in the network server process as in step . After a connection is established in step  between the two sockets and , the socket in the network server process waits for data from the legacy program. The application invoker  writes the descriptor of the application-side socket to an environment variable, activates data redirection through an application programming interface and invokes the legacy application , as shown in step . When the legacy application  reaches an I\/O instruction, output data is sent as in step  to the application runtime component  of the computer's operating system which calls the Write_Data method as in to redirect data to the application-side socket . Data is read by the socket in the network server process as in step and the servlet instance  creates a data object in step  to store the data. In step , the servlet instance  calls the network page, e.g., the JavaServer Page, associated with this output record. The network page is populated with data from the data object as in step  and then served to the network user agent  as, e.g., an HTTP response, in step .","Subsequent interactions between the client interface on the network user agent  and the application  flows through the socket connections and . When the client submits a page, the servlet instance  on the network server restores session data from a previously saved session object which has a reference to a socket or a data queue object or a message queue object. The input data is then forwarded to socket or queue as in step , to the other application socket or queue and I\/O buffers if any and to the application runtime component , and eventually to the legacy program  that was waiting on a Read_Data method . The legacy application  then continues its execution in its native environment on the computer  until the next I\/O exchange. When the application ends, control returns to the application invoker  which closes the endpoint connection as in step .","In , a Report Program Generator (RPG) program is used as an example of a legacy application although it is to be understood that the architecture but could also support legacy applications written in COBOL and other programming languages. Sockets are used as the communication mechanism between the distributed processes but any communication endpoint mechanism available to the server, such as data queue objects for enhanced performance if the server and the legacy application are within one computer or the message queue for enhanced reliability and security, may also be used. An initial program in the prestarted job may write the descriptor of the application-side socket to a environment variable, activate the redirection, and invoke the legacy application. When the program hits an I\/O instruction, such as a write instruction followed by a read instruction, EXFMT in RPG, output data is sent to a data manager which calls a Publish-to-Web runtime interface, Write_Data, to write to the socket. Data may also be read by the socket using the Publish-to-Web runtime interface Read_Data.","Thus, the invention allows the user to deploy entire business-critical legacy applications to the Internet to take advantage of state-of-the art technology without having to restructure or make code changes to the programs. The legacy application, moreover, executes normally. Legacy application data becomes available across the network for any purpose because it is stored in data objects on the network server. The invention, moreover, allows the user to modify the network pages, such as JavaServer Pages, to create links within the network server to new web based applications. This capability allow interactions between legacy and other network based applications, including merging legacy application data with data from other network applications in the network server. Computer and client systems that allow remote invocation of programs are able to use the architecture described above to run the web server and the legacy applications in separate computer systems. The invention, moreover, allows the user to customize the JavaServer Pages according to the company's rules and guidelines for application presentation. The solution presented herein further allows the I\/O data to be converted to other formats that would suit display types other than a browser. One powerful application is the conversion of the I\/O data and the display records to a generic XML based user interface. The XML-user interface can then be fed into different types of user interface renderers. These renderers can be Java-Swing based, Voice-Based, PDA Based, etc. The invention, therefore, opens access to existing legacy application from multiple types of future devices.","While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example and not limitation and that variations are possible. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
