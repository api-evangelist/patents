---
title: Automated network configuration of virtual machines in a virtual lab data environment
abstract: Methods, systems, and computer programs for creating virtual machines (VM) and associated networks in a virtual infrastructure are presented. The method defines virtual network templates in a database, where each virtual network template includes network specifications. A configuration of a virtual system is created, which includes VMs, virtual lab networks associated with virtual network templates, and connections from the VMs to the virtual lab networks. Further, the configuration is deployed in the virtual infrastructure resulting in a deployed configuration. The deployment of the configuration includes instantiating in the virtual infrastructure the VMs of the configuration, instantiating in the virtual infrastructure the virtual lab networks, retrieving information from the database, and creating and executing programming instructions for the VMs. The database information includes the network specifications from the virtual network templates associated with the virtual lab networks, and network resources for the virtual lab networks from a pool of available network resources. The programming instructions are created for the particular Guest Operating System (GOS) running in each VM based on the GOS and on the retrieved database information. When executed in the corresponding VM GOS, the programming instructions configure the VMs network interfaces with the corresponding network specifications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924524&OS=08924524&RS=08924524
owner: VMware, Inc.
number: 08924524
owner_city: Palo Alto
owner_country: US
publication_date: 20090727
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","DESCRIPTION OF THE RELATED ART","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is related to U.S. patent application Ser. No. 12\/510,135 filed on the same day as the instant application and entitled \u201cMANAGEMENT AND IMPLEMENTATION OF ENCLOSED LOCAL NETWORKS IN A VIRTUAL LAB\u201d, which is incorporated herein by reference.","Virtualization of computer resources generally involves abstracting computer hardware, which essentially isolates operating systems and applications from underlying hardware. Hardware is therefore shared among multiple operating systems and applications wherein each operating system and its corresponding applications are isolated in corresponding VMs and wherein each VM is a complete execution environment. As a result, hardware can be more efficiently utilized.","Virtual labs, such as VMware's vCenter Lab Manager\u2122 from the assignee of the present patent application, enable application development and test teams to create and deploy complex multi-tier system and network configurations on demand quickly. Testing engineers can set up, capture, and reset virtual machine configurations for demonstration environments in seconds. In addition, hands-on labs can be quickly configured and deployed, to be used for lab testing, hands-on training classes, etc.","While the deployment of virtual lab environments can be done in seconds, configuring the virtual lab environments is time consuming due to the need to specify the virtual machines and networks in the environment, and the need to configure the virtual machines, which includes network settings and other resources required by the virtual machines. In addition, when multiple environments are deployed at the same time, there can be resource conflicts such as the appearance of two VMs instantiated with the same Internet Protocol (IP) address.","In one embodiment, the method defines virtual network templates in a database, where each virtual network template includes network specifications. In addition, the method creates a configuration of a virtual system which includes VMs, virtual lab networks associated with virtual network templates, and connections from the VMs to the virtual lab networks. Further, the configuration is deployed in the virtual infrastructure resulting in a deployed configuration. The deployment of the configuration includes instantiating in the virtual infrastructure the VMs of the configuration, instantiating in the virtual infrastructure the virtual lab networks, retrieving information from the database, and creating and executing programming instructions for the VMs. The database information includes the network specifications from the virtual network templates associated with the virtual lab networks and network resources for the virtual lab networks from a pool of available network resources. The programming instructions are created for the particular guest operating system (GOS) running in each VM based on the GOS and the retrieved database information. When executed in the corresponding VM GOS, the programming instructions configure the VMs network interfaces with the corresponding network specifications.","In another embodiment, a computer program embedded in a computer-readable storage medium, when executed by one or more processors, performs the method operations. In yet another embodiment, a system for creating VMs and associated networks in a virtual infrastructure includes a database and an application module. The database stores virtual network templates, configurations of virtual systems, virtual lab networks created, and a pool of available network resources for each of the virtual lab networks created. Each of the virtual network templates includes network specifications, and each of the configurations includes VMs, virtual lab networks associated with virtual network templates, and connections from the VMs to the virtual lab networks. The application module deploys a configuration resulting in a deployed configuration. The process of deployment includes the operations of instantiating in the virtual infrastructure the VMs of the configuration, instantiating in the virtual infrastructure the virtual lab networks of the configuration, retrieving information from the database, and creating and transmitting programming instructions for the VMs. The retrieved information from the database contains the network specifications from the virtual network templates associated with the virtual lab networks and information about network resources for the virtual lab networks from the pool of available network resources. The programming instructions are defined according to the GOS of each VM and the retrieved information from the database.","The following embodiments describe a method and apparatus for creating virtual machines (VM) and associated networks in a virtual infrastructure. It will be obvious, however, to one skilled in the art, that the present invention may be practiced without some or all of these specific details. In other instances, well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.","Embodiments of the invention provide the ability to build and reuse arbitrary network topologies in a virtual laboratory environment including the ability to create and manage private and shared networks, connect virtual machines to networks, configure programmatically single and multi-homed guests, and manage Media Access Control (MAC) and Internet Protocol (IP) address reservation, among other features. A virtual lab module provides management capabilities for the virtual lab environments in order to simplify the process of creating and deploying the virtual lab environments. The virtual lab module automates the process of configuring the VMs in the virtual lab environments by programmatically creating scripts or programs that run in the Guest Operating System (GOS) of the VM to configure the network settings of the VM.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["102","104","106","108","106","110"]},"Virtual lab networks can be categorized as private networks and shared networks. Private networks in a configuration are those networks available exclusively to VMs in the configuration, that is, only VMs in the configuration can have a Network Interface Controller (NIC) or Virtual NIC (VNIC) connected directly to a switch or virtual switch (VSwitch) for the private network. Access to data on a private network is restricted to members of the configuration, that is, the private network is isolated from other entities outside the configuration. In one embodiment, a private network in the configuration can be connected to a physical network to provide external connectivity to the VMs in the private network, as discussed in more detail below. Private networks in a configuration are also referred to herein as Configuration Local Networks (CLN) or virtual networks. Shared networks, also referred to herein as shared physical networks or physical networks, are available to all VMs in the virtual infrastructure, which means that a configuration including a shared network will enable VMs on the shared network to communicate with other VMs in the virtual infrastructure connected, directly or indirectly, to the shared network.","Deploying a configuration causes the VMs and networks in the configuration to be instantiated in the virtual infrastructure. Instantiating the VMs includes registering the VMs in the virtual infrastructure and powering-on the VMs. When an individual VM from a configuration is deployed, virtual lab deploys all shared networks and CLNs associated with the configuration using the network connectivity options in the configuration. If one network in the configuration already exists in the virtual infrastructure, the deployment will use the existing network. If the network does not exist, the deployment will request from the virtual infrastructure the instantiation of the network. In one embodiment, not all the VMs are instantiated because the user selects which VMs to be instantiated in the virtual infrastructure. Deploying the configuration also includes connecting NICs of the VMs to the virtual lab networks. Undeploying a configuration de-instantiates the VMs in the configuration from the virtual infrastructure. De-instantiating VMs includes powering off or suspending the VMs and un-registering the VMs from the virtual infrastructure. The state of the deployment can be saved in storage or discarded. Saving the memory state helps debugging memory-specific issues and makes VMs in the configuration ready for deployment and use almost instantly.","Virtual lab server  manages and deploys virtual machine configurations in a collection of hosts . It should be appreciated that not all hosts  need to be part of the scope of virtual lab server , although in one embodiment, all the hosts are within the scope of virtual lab server . Virtual lab server  manages hosts  by communicating with virtual infrastructure server , and by using virtual lab server agents installed on those hosts. In one embodiment, virtual lab server  communicates with virtual infrastructure server  via an Application Programming Interface (API), for example, to request the instantiation of VMs and networks.","Although virtual lab server  is used to perform some management tasks on hosts , the continuous presence of virtual lab server  is not required for the normal operation of deployed VMs, which can continue to run even if virtual lab server  becomes unreachable, for example because a network failure. One or more users  interface with virtual lab server  and virtual infrastructure  via a computer interface, which in one embodiment is performed via web browser.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["112","202","116"]},"Application module  executes the core functionality of virtual lab server . Database manager  interfaces with database , residing in the virtual infrastructure shared storage, to store and retrieve the information used by virtual lab server . This information includes templates  (VMs and networks), virtual lab deployments , virtual lab configurations , virtual lab users and groups , and virtual lab networks . More details on the different elements in the database are described below in reference to . Virtualization infrastructure interface  in virtual lab server  sends and receives information to and from virtual infrastructure , such as for example to request that VMs be instantiated in the virtual infrastructure.","It should be appreciated that the embodiments illustrated in  are exemplary virtual lab modules, and other modules have been omitted for simplicity of description. Other embodiments may utilize different modules or configurations of modules. For example, in one embodiment the data structures are stored in a database not part of the virtual infrastructure pool of resources. The embodiments illustrated in  should therefore not be interpreted to be exclusive or limiting, but rather exemplary or illustrative.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 3"],"b":["302","306","310","304","306","302","306","308","310","310","312","312","316","314","312","312","316","1","4","312","1","4","1","4"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4","FIG. 4"],"b":["1","2"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 5","FIG. 5"],"b":["502","504","506","502","508","508","508","510"]},"When a user connects to the virtual lab, the user can add resource pools, virtual lab hosts, physical networks to use with virtual lab VMs, etc. Further, the user can add and synchronize media stores, create organizations, and add users and groups to those organizations. Users control their configurations and their VMs, and can share a saved configuration in the virtual lab library with other users. For example, if a testing engineer is working with a configuration and finds a bug, the engineer can save the deployment in the library to preserve its current state. The test engineer can then share the saved deployment with other engineers, such as a developer. The developer can then access and review the \u201clive\u201d configuration in the virtual lab.","When a user creates a configuration, the user specifies the contents of the configuration, such as the name of the configuration, a description, policy for fencing (fencing described below in reference to ), member VMs, etc. When configuring each VM, the user specifies a VM template for the VM, the name for the VM, and the network information for the VM. The network information options are based on how the VM template has been defined. In one embodiment, the network information includes at least the specification of a primary NIC for VMs with multiple NICs. The primary NIC setting determines the default gateway for the virtual machine. In addition, configurations can be cloned to create new copies of the configuration, and configurations can be modified to incorporate all or some of the elements from another configuration. For example, virtual lab can copy the network environment in one configuration to another configuration, while allowing each of the configurations to have its own private pool of IP addresses when deployed, as discussed in more detail below.","It should be appreciated that the embodiments illustrated in  are exemplary user interfaces to enable a user to interact with the virtual lab application. Other embodiments may utilize different fields, or may arrange the fields in varying manners. The embodiments illustrated in  should therefore not be interpreted to be exclusive or limiting, but rather exemplary or illustrative.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 6"},"When VMs in a configuration have preconfigured IP addresses and the VMs are deployed in fenced mode, virtual lab assigns a unique external IP address to each of these VMs. Through these external addresses, VMs inside the fence and VMs outside the fence can communicate with each other. Virtual lab uses a VM called a virtual router to route packets between these VMs. The virtual router has at least two virtual NICs and \u201croutes\u201d traffic between the networks connected to the virtual NICs. In one embodiment, virtual lab configures the virtual router when a fenced configuration is deployed and deletes the virtual router when the configuration is undeployed.","Referring now to the fenced deployments shown in , configuration  named Athena has been cloned and deployed. Additionally, the cloned configuration has also been deployed, resulting in two deployments of configurations with the same elements. Configuration  includes VMs A and B, and network Blue  with subnet 192.168.0\/16. In the configuration, VMs A and B have IP addresses of 192.168.0.1 and 192.168.0.2, respectively. The first deployment Deployment   has been deployed un-fenced, and the second deployment Deployment   has been deployed in fenced mode. Because Deployment   is unfenced, the resulting VMs A and B connect directly to shared network 192.168.0\/16. It should be noted that to deploy configuration  in un-fenced mode, a shared network with the same network specification must exist so the VMs in the configuration can use the network addresses on the shared network.","Because Deployment   is fenced, fenced network  with exclusive access only to the VMs in Deployment  is created. VMs A and B in Deployment   have the addresses defined in the configuration, but these addresses are only used within fenced network . Virtual router  connects fenced network  with shared network Blue . Each of the \u201cfenced\u201d VMs A and B gets assigned an external IP address from Blue network , 192.168.0.3 and 192.168.0.4, respectively. Virtual router  performs address translation for packets travelling in or out of Deployment  , thus translating 192.168.0.1 with 192.168.03 for VM A, and 192.168.0.2 with 192.168.0.4 for VM B.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 7","b":["716","702","702","704","706","716"]},"Virtual lab uses a network abstraction to simplify the task of configuring networks in VMs. Each virtual lab network has a collection of network settings required for configuring VMs VNICs so that the VMs can connect and communicate with each other. The collection of network settings includes the network mask, default gateway, domain name server (DNS), IP addressing mode, IP address range, fencing policy, etc. Without the help of a virtual lab network, the user would have to enter these settings once for every VM network interface. To simplify the configuration of networks, the user specifies the network settings for a virtual lab network and then associates the network interface of a VM with a virtual lab network. Virtual lab can then automatically configure network interfaces for the deploying VM using the pertinent settings from the associated virtual lab network. This automatic configuration of networks reduces errors and saves time.","When a user requests an operation to create a network template , virtual lab collects the required information and then creates a network template which is stored in Database . Using network templates simplifies the process of adding multiple virtual networks to multiple configurations. As previously discussed, a network template is a specification of network settings, and a network template is different from a network in that the network template does not represent an actual network segment (i.e. network carrying traffic), but rather represents an abstraction of a network. The user can use a network template to quickly and easily create and add virtual lab networks, which would inherit a copy of the template's settings, in a configuration. Further, virtual lab can create physical and virtual networks based on a network specification and then create virtual networks based on the specification of a physical network, such that the virtual network and the physical network are identical in all respects.","When a user creates VM template  in virtual lab, the users specifies information such as name of the template, description, GOS, number of virtual Central Processing Units (CPU), memory, disk size, network, IP address mode, etc. In one embodiment, there are three choices for the IP address mode, static-IP pool, Dynamic Host Configuration Protocol (DHCP), and static manual. The static-IP pool mode allows virtual lab to assign static IP addresses to VNICs, where the static IP addresses are obtained from a pool of IP addresses managed by virtual lab. DHCP mode allows virtual machines to pull IP addresses from a DHCP server, and static-manual mode allows the virtual lab to configure the VNIC with a specific IP address. The use of static-IP pool mode allows the user to take advantage of static IP configurations while avoiding the appearance of simultaneous duplicate IP addresses in the virtual infrastructure because virtual lab assigns a different IP address to each VNIC, where the different IP addresses are obtained from a pool of IP addresses managed by the virtual lab.","VM network interfaces in a VM template can be associated with network templates. When a user specifies a VM in the VM template and a network associated with a network template in the VM, virtual lab ties the VM template to the associated network template. Further, virtual lab enables network matching by providing automatic matching of equivalent network settings between network templates and virtual lab networks. Network matching is based on the corresponding network settings and on how a network was created. This allows the automated configuration of a VM resulting in proper VM network connectivity.","Additionally, when a user adds a new VM based on a VM template to an existing configuration, virtual lab automatically connects the new VM's network interfaces to the matching private virtual lab networks that already exist in the configuration. Virtual lab allows the user to capture a VM by extracting the properties of the VM and creating a VM template based on the properties extracted from the VM. Virtual lab automatically converts the network interfaces of the captured VM to a matching network template, when a match exists. Furthermore, when a VM is cloned or moved from one configuration to another, virtual lab automatically connects the VM's NICs to a matching network in the destination configuration. The resulting VM template from Create VM template operation  is stored in database  or in Data Store .","Create configuration  operation allows the user to define the VMs and networks in the configuration, as previously discussed. The VMs and networks can be based on VM templates and on network templates, respectively. The resulting configuration and virtual lab networks are stored in Database  or Data Store .","During Deploy  operation, virtual lab reads the configuration, instantiates the VMs and the networks, and runs scripts in the GOS of the VMs to configure the VNICs according to the network settings of the corresponding virtual lab network. Virtual lab communicates with the virtual infrastructure and sends a request to instantiate the VMs and the networks. Instantiating a VM requires registering the VM in the virtual infrastructure and powering-on the registered VM. The networks are instantiated in the corresponding virtual infrastructure hosts if the networks do not already exist in the hosts. When deploying a configuration, virtual lab uses the settings from VM templates and network templates as needed.","Guest customization allows virtual lab to customize the network settings for a VM made from a VM template. Enabling guest customization on a VM template configures a script to run every time the VM starts up. This script reads the information regarding the VM and determines what actions to take. Virtual lab sets up customization actions in the script inside the VM while deploying configuration VMs. In one embodiment, when these VMs first start up, the VM customization script performs the relevant actions, including the configuration of VNICs. In another embodiment, when these VMs start up after VM settings have changed, the VM customization script also performs the relevant actions. Deploying a configuration results in a deployed configuration in virtual infrastructure , which includes the virtual lab hosts, the VMs, the deployed configurations, and the deployed CLN and shared networks.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 8","b":["716","1","804","802","1","808","2","810","812","1","804","802","1","808","2","810","1","806"]},"Network template  illustrates some of the parameters in the network template Blue, such as default gateway, subnet mask, primary DNS, etc. VM templates T  and T  include information regarding the VMs in configuration C . Finally, the table associated with shared network Green  includes network settings for the shared network.","In one embodiment, configuration C is cloned to create an identical configuration C. When both configurations C and C are deployed in the virtual infrastructure, the result is two deployed configurations with identical network specifications but that do not conflict with each other. In particular, deployed C and C network addresses do not conflict with each other because virtual lab tracks the use of IP addresses. When a VM in C or C is associated with a network address in a shared network, virtual lab configures the respective VMs with a different associated external network address. Virtual lab keeps track of the resources deployed, such as the network addresses used by the VMs. More details on the data structures used by virtual lab to manage the pool of resources are given below in reference to .","In another embodiment, C and C include a CLN each. When both configurations C and C are deployed, the CLNs in C and C have the same network specifications. During deployment, virtual lab enables the CLNs from C and C to be isolated and independent from each other. It is also possible that after copying C to C, the CLN in C be modified, such that the CLNs in C and C are no longer identical, though they initially inherited properties from the same network template. In this scenario, virtual lab still guarantees that the CLNs are isolated and do not conflict with each other.","In yet another embodiment, configuration C is cloned and then modified to obtain configuration C. When both configurations C and C are deployed in the virtual infrastructure virtual lab also guarantees the deployed C and C do not conflict with each other. Although C has been modified, part of configuration C is identical to a part of configuration C, and virtual lab manages the identical settings as previously discussed with respect to cloned configurations. This is possible because virtual lab keeps track of the deployed VMs' IP addresses.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIGS. 9A-C","FIG. 9A","FIG. 7"],"b":["902","904","904","930","932","906","908","716","702","716","702"]},"Method  in  captures an existing VM in the virtual infrastructure to create a VM template. After a VM in a configuration undergoes changes, such as the addition of software or altered properties, a user can also use the altered VM to create a new VM template. The new VM template is a linked clone of the original VM. In operation , the VM template is created with the information from the existing VM in the infrastructure. In operation  a check is performed to determine if the VM network matches an existing network in the template. If the determination is negative, the method flows to operation  where the NIC is disconnected and to operation  otherwise. In operation , the VNICs in the VM are associated with the corresponding network templates that were used to configure the VNICs in the VM. Finally, the created VM template is saved in Database , or in Data Store , or in both Database  and Data Store .","Method  in  illustrates how to clone or move a VM from one configuration to another. A user can create a linked clone or a full clone of a VM template to take advantage of software already installed on that VM template. A linked-clone operation generates a \u201cquick\u201d copy by creating a delta disk instead of copying an entire virtual hard disk. This operation addresses data space usage by using referential provisioning, a process that involves storing new changes but refers back to a chain of delta changes. A full-clone operation copies all the delta disks and the base disk and consolidates them into a new base disk. Additionally, a user can move VMs from one configuration to another. A move operation removes the selected VMs from the source configuration and adds them to the destination configuration. In operation , the VM being cloned or moved is copied to the new configuration. After operation , the method flows to operation  to check if each network used by the VM exists in the configuration. If the result of the check is negative then the method flows to operation  where the network, or networks, in the VM not already in the configuration is added to the configuration. In operation  the VM VNICs are connected to a network in the configuration where the VM is being copied. After operation , the new configuration is saved in operation .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 10","b":["1","152","1","158","160","162","2","154","2","158","164","1","2","2","1","1","162","2","2","154"]},"A user has requested to join both deployments into a new Deployment 1+2 . The user has selected to join the Red networks and to leave isolated and separate Blue and Blue networks. Resulting Deployment 1+2  has VMs A and B connected to network Blue\u2032 derived from network Blue. Blue\u2032 still has a virtual router  to provide external connectivity, as in Deployment  . The other Blue-template related network is Blue\u2032, which is derived from Blue in Deployment  . As with the original Deployment, Blue\u2032 is a CLN with connections only to VMs D and E. Virtual lab has maintained Blue and Blue separate, as requested by the user. On the other hand, the Red networks have been joined together with VMs A, C, and D connected to the Red network, which still has a virtual router to provide a route to shared network . It should be noted that only one virtual router is needed for the joined network, thus one of the two virtual routers  and  will be terminated.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 11"},"The NetworkInterface table is a network interface table for tracking the connections from the VMs to the virtual lab networks, that is, NetworkInterface table holds information regarding the configuration of the VNICs in the VMs. Each VNIC corresponds to one entry in the table and includes a NIC identifier, VM identifier, MAC address, network addressing mode, network identifier, network mask, etc. The Configuration table is used for tracking deployed configurations of VMs and includes the configuration identifier, the name of the configuration, a description, the user identifier of the owner, etc. In addition, the VirtualMachine table is a VM table for tracking deployed VMs in the deployed configurations. The VM table includes an identifier for the deployed VM, identifier for the configuration of the VM (linked to the Configuration table), name of the VM, primary NIC, etc. Further, the ConfigurationNetwork table is a configuration network table for tracking deployed networks from the deployed configurations and includes an identifier for the entry, a configuration identifier (relating to the Configuration table), network identifier, fencing parameters, etc.","Virtual lab provides access to resource pools in the virtual infrastructure. The DeployedResources table is used to track the resources in use in the virtual infrastructure by the deployments of virtual lab. A resource pool is a logical structure that allows delegation of control over the resources of a host. VMs execute in, and draw their resources from, resource pools. It should be appreciated that the data structures illustrated in  are exemplary data structures for virtual lab. Other embodiments may utilize different fields, or may arrange the data in varying manners. The embodiments illustrated in  should therefore not be interpreted to be exclusive or limiting, but rather exemplary or illustrative.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 12","FIGS. 7 and 8","FIG. 1"],"b":["252","252","254"]},"Following operation , the method instantiates VMs in the virtual infrastructure in operation . Further, the method instantiates the virtual lab networks of the configuration in operation , but only if the virtual networks do not yet exist in the virtual infrastructure. In operation , the method retrieves information from the database, such as the network specifications from the virtual network templates associated with the virtual lab networks and network resources for the virtual lab networks. The network resources are chosen from a pool of available network resources.","The method flows from operation  to operation  where programming instructions are created, such as a script, for each VM according to the GOS of the VM and to the information retrieved from the database. See for example  describing how information is stored and retrieved from the database. Further, in operation , the method performs the programming instructions in the corresponding GOS to configure the VMs network interfaces with the corresponding network specifications. In one embodiment, virtual lab sends the programming instructions to the virtual infrastructure to be executed in the corresponding VM. The method operations - together accomplish the deployment of the configuration in the virtual infrastructure to obtain a deployed configuration. See for example deployed configurations  and  in ; ,  and  in ; etc.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 13","FIG. 13"],"b":["1104","1110","1106","1112","1114","1108","1106","1114","1108","1114","1130","1132","1104","1104","1106","1112","1114","1110","1118","1122","1124","1134"]},"Display  is configured to display the user interfaces described herein. Keyboard , cursor control , removable media device , and other peripherals are coupled to I\/O interface  in order to communicate information in command selections to CPU . It should be appreciated that data to and from external devices may be communicated through I\/O interface .","Embodiments of the present invention may be practiced with various computer system configurations including hand-held devices, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers and the like. The invention can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a network.","With the above embodiments in mind, it should be understood that the invention can employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purpose, such as a special purpose computer. When defined as a special purpose computer, the computer can also perform other processing, program execution or routines that are not part of the special purpose, while still being capable of operating for the special purpose. Alternatively, the operations may be processed by a general purpose computer selectively activated or configured by one or more computer programs stored in the computer memory, cache, or obtained over a network. When data is obtained over a network the data maybe processed by other computers on the network, e.g., a cloud of computing resources.","The embodiments of the present invention can also be defined as a machine that transforms data from one state to another state. The transformed data can be saved to storage and then manipulated by a processor. The processor thus transforms the data from one thing to another. Still further, the methods can be processed by one or more machines or processors that can be connected over a network. The machines can also be virtualized to provide physical access to storage and processing power to one or more users, servers, or clients. Thus, the virtualized system should be considered a machine that can operate as one or more general purpose machines or be configured as a special purpose machine. Each machine, or virtual representation of a machine, can transform data from one state or thing to another, and can also process data, save data to storage, display the result, or communicate the result to another machine.","The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data, which can be thereafter be read by a computer system. Examples of the computer readable medium include hard drives, network attached storage (NAS), read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, magnetic tapes and other optical and non-optical data storage devices. The computer readable medium can include computer readable tangible medium distributed over a network-coupled computer system so that the computer readable code is stored and executed in a distributed fashion.","Although the method operations were described in a specific order, it should be understood that other housekeeping operations may be performed in between operations, or operations may be adjusted so that they occur at slightly different times, or may be distributed in a system which allows the occurrence of the processing operations at various intervals associated with the processing, as long as the processing of the overlay operations are performed in the desired way.","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications can be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 9A-C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
