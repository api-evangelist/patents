---
title: System and method for scalable rendering of diffusion curves
abstract: The systems and methods described herein may allow diffusion curve images to be displayed by a variety of applications without requiring specialized graphics hardware to render the images. The system may provide mechanisms to convert a diffusion curve representation to an alternate representation in a scalable, portable format. The conversion may include a tessellation operation, and may produce a mesh of shapes (e.g., triangles) for which diffusible attribute values (e.g. color and blur) are assigned to each node. Tessellating an image may include generating a piecewise linear approximation of the diffusion curves and triangulating the image to generate the mesh. Color values for each channel may be assigned by solving a sparse linear system in the triangle domain. The alternate representation may be displayed by another application using various interpolation techniques. The alternate representation may be resolution-independent and compact, as compared to other representations used to display diffusion curve images.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08614708&OS=08614708&RS=08614708
owner: Adobe Systems Incorporated
number: 08614708
owner_city: San Jose
owner_country: US
publication_date: 20091118
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY INFORMATION","BACKGROUND","Description of the Related Art","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["This application claims benefit of priority of U.S. Provisional Application Ser. No. 61\/116,985 entitled \u201cSystem and Method for Adding Vector Texture to Vector Graphics Images\u201d filed Nov. 21, 2008, the content of which is incorporated by reference herein in its entirety.","Until recently, vector graphics typically only encompassed linear or radial gradients, limiting the diversity of images that could be faithfully represented in a vector format. Therefore, standard vector art (e.g., found in signage or logo design) looks very flat, although it may include slight color variations for limited shading effects. Linear or radial variation may work well with simple shapes, but may not provide sufficient color variation for representing complex shading, color gradients, or textures.","Gradient meshes can provide the ability to create arbitrarily complex gradients in images with good results, but workflows for creation and manipulation of gradient meshes typically require editing that is less efficient than it should be (e.g., a lot of manual editing). Gradient meshes define the outline of a shape and comprise a grid structure in the interior. Therefore, many edits are imposed by the arbitrary grid-mesh that the gradient mesh employs, and have little to do with the actual or intended image content. With gradient meshes, a color can be assigned to each point in the grid. This can be a very tedious process, since the color must be defined and assigned for each point, even if it is the same the color as its neighbors. Modifying colors with gradients meshes is also time-consuming, because if a color is modified, all of the points having that color will need to be modified.","Diffusion curves are a vector representation that simplifies the creation and editing of smooth gradients and blur, allowing the creation and capture of complex gradients within vector graphics images in a variety of styles. In order to render and display a diffusion curve image using raster graphics (i.e. using an approach in which a vector image is rasterized for output on a raster output device, such as a CRT or LDC monitor), diffusion operations are typically performed in a bit-mapped space. Such a raster graphics approach (where the bitmap is essentially the display screen) may involve the use of shader programs. While the operations included in these programs can in some cases be implemented by standard instructions executed on a CPU, they can be performed much more efficiently when implemented by specialized graphics instructions executed using specialized graphics hardware (e.g., a graphics processor). For example, to allow interactive viewing (zooming, panning, etc.) and editing, it is important that the user can display changes of the image or image view quickly, which may not be feasible without a GPU and a corresponding programming interface. While many modern computer systems are equipped with adequate GPU processors, some legacy systems may not be. Additionally, the GPU capabilities of many mobile devices (e.g., PDA, smartphones, etc.) are not sufficient to efficiently render diffusion curve images using raster-based diffusion. Therefore, current diffusion curve representations are not very scalable or portable.","Various embodiments of a system and method for scalable rendering of diffusion curve images are described. Diffusion curves are a vector representation that simplifies the creation and editing of smooth gradients and blur, allowing the creation and capture of complex gradients within vector graphics images in a variety of styles. The system and methods described herein may allow images created using diffusion curves to be displayed and\/or otherwise manipulated within a variety of applications (e.g., document creation and display, animation, etc.) without requiring the use of specialized graphics hardware (e.g., special-purpose graphics processors) to render the images.","The system described herein may provide mechanisms to create diffusion curve images using sketching type tools and to convert the resulting data representation to an alternate representation in a scalable, portable format usable in a variety of other applications. The methods described herein to generate the alternate representation may in some embodiments include a tessellation operation and an attribute assignment operation, and may produce a mesh of shapes for which values of diffusible attributes (e.g. color and blur) are assigned to each node. The alternate representation may in some embodiments be displayed by another application (i.e. an application other than the image editing application used to created the diffusion curve image) using standard interpolation techniques. The alternate representation may be resolution-independent and may be more compact than the bit-mapped or other raster graphics representations typically used in displaying diffusion curve images.","In various embodiments, the methods describe herein may be implemented as or in a tool, module, plug-in, stand-alone application, etc. For simplicity, implementations of embodiments of the diffusion curve conversion method described herein may be referred to collectively as a diffusion curve conversion tool. Various embodiments of the system and methods described herein may be applied in one or more of, but not limited to, enhancing photographs or other images using diffusion curves, creating 2D vector images, creating 2D animations, importing 2D vector images and\/or animations into documents or other files, and rendering 2D vector images in systems that do not include specialized graphics hardware (e.g., GPUs). In some embodiments, various parameters of the methods and tools described herein may be specified by the user (e.g., through a graphical user interface).","In some embodiments, a method for scalable rendering of diffusion curve images may include accessing data representing an input vector image (or a portion of such an image) bounded by a closed two-dimensional boundary (e.g., by one or more diffusion curves), tessellating the input image to generate an alternate data representation of the input image comprising a mesh of tessellation elements (e.g., triangle), assigning color constraint values to each vertex of the mesh of tessellation elements in the alternate data representation, and storing the alternate data representation (including the assigned color constraint values) in a scalable, portable format for subsequent use (e.g., for subsequent display). The method may include rendering an output image from the stored alternate data representation, which may include interpolating the assigned color constraint values to determine color values to be displayed at image locations corresponding to the interior of the tessellation elements (triangles), thereby producing a diffused color effect across the output image.","In some embodiments, data representing a diffusion curve making up the boundary of the image may include one or more color constraint values that are specified at control points along the curve, and the method may include assigning a color constraint value to a vertex of the mesh corresponding to one of the color control points along the curve dependent on the color constraint values specified at the control point. In some embodiments, tessellating the input image may include generating a piecewise linear approximation of the diffusion curve(s) of the input image and triangulating the input image. In some embodiments, tessellating the image may include generating a respective data representation of the input image (i.e. a respective mesh of tessellation elements, such as triangles) for each of a plurality of color channels. The tessellation operation may also include generating one or more ghost vertices to complete one-ring neighborhoods of vertices on the boundary of the tessellated image. In some embodiments the color constraint values may be assigned by solving a sparse linear system in the triangle domain.","In embodiments in which blur values are included in the diffusion curve representation, the method may include assigning a blur value to at least some of the vertices of the mesh. In such embodiments, rendering the image may include interpolating the blur value(s) to control the smoothness of the diffused color effect in the output image.","In various embodiments, the methods described herein may be implemented by program instructions stored on a computer readable storage medium and executable by one or more CPUs and\/or GPUs. For example, they may be implemented as program instructions that, when executed, implement mechanisms to create a diffusion curve image and\/or to convert a diffusion curve representation to an alternate representation in a scalable, portable format that may be rendered and displayed in a variety of other applications without requiring specialized graphics hardware.","While several embodiments and illustrative drawings are included herein, those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit embodiments to the particular forms disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope as defined by the appended claims. Any headings used herein are for organizational purposes only and are not meant to limit the scope of the description or the claims. As used herein, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude\u201d, \u201cincluding\u201d, and \u201cincludes\u201d mean including, but not limited to.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.","Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification, the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here, and is generally, considered to be a self-consistent sequence of operations or similar signal processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification, therefore, a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals, typically represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the special purpose computer or similar special purpose electronic computing device.","Diffusion curves are a vector representation that simplifies the creation and editing of smooth gradients and blur, allowing the creation and capture of complex gradients within vector graphics images in a variety of styles. The system and methods described herein may allow images created using diffusion curves to be displayed and\/or otherwise manipulated within a variety of applications (e.g., document creation and display, animation, etc.) without requiring the use of specialized graphics hardware (e.g., special-purpose graphics processors, or GPUs) to render the images. The system described herein may provide mechanisms to create diffusion curve images using a sketching type tools and to convert the resulting data representation to an alternate representation in a scalable, portable format usable in a variety of other applications. The methods described herein to generate the alternate representation may in some embodiments include a tessellation operation and an attribute assignment operation, and may produce a mesh of shapes for which values of diffusible attributes (e.g. color and blur) are assigned to each node. The alternate representation may in some embodiments be stored in the portable format for subsequent display by another application (i.e. an application other than the image editing application used to created the diffusion curve image) using standard interpolation techniques (i.e. standard techniques for interpolating colored polygons that are supported in the other application). The alternate representation may be resolution-independent and compact, as compared to the bit-mapped representations typically used to display diffusion curve images.","As previously noted, vector graphics have typically only encompassed linear or radial gradients, limiting the diversity of images that could be faithfully represented in a vector format. Gradient meshes (such as those used in Adobe\u00ae Illustrator\u00ae) provide the ability to create arbitrarily complex gradients in images with good results, but workflows for creation and manipulation of gradient meshes can be difficult and time-consuming, as they typically require a lot of manual editing. Diffusion curves present a different approach to complex gradients. While diffusion curves may provide the same realism as gradient meshes, they may in some embodiments allow for more traditional art creation workflows (e.g., direct sketching of basic shapes) using intuitive sketching tools. For example, workflows for creating and editing diffusion curve images may be guided only by the image content itself, and may not impose arbitrary topological constraints, such as a those imposed by a grid in a gradient mesh. With diffusion curves, colors may be defined on geometric control curves and diffused outwards. The total of all control curves may define a system of linear constraints that can be solved to obtain an image that upholds these constraints. With diffusion curves, large image areas may be defined by fairly sparse curve constraints, and these curves may be intuitive to place and edit. Diffusion curves are described in detail in U.S. Provisional Patent Application Ser. No. 61\/197,250, entitled \u201cDiffusion Curves: A Vector Representation for Smooth-Shaded Images\u201d, and filed Oct. 24, 2008, which is herein incorporated by reference in its entirety. In general, methods pertaining to the creation and manipulation of diffusion curves as described in that provisional patent application are assumed to be available in the systems described herein.","In the system described in the above-referenced provisional patent application, in order to display a diffusion curve image, diffusion operations are performed in a bit-mapped space (where the bitmap is essentially the display screen) using shader programs on a GPU. In that system, the output resolution is known and the system may be used to generate a bitmap with that resolution directly. Rendering diffusion curves using this approach may require the use of a powerful GPU, lest they take a very long time to render, making interactive operations (such as zooming, panning, or editing) practically intractable. In addition, including a diffusion curve drawing in a document (e.g., a file in PDF format) would have required a modification of both the PDF specification and the PDF viewer, in order to provide mechanisms for the viewer to perform the necessary diffusion processes and re-blurring operations. As previously noted, the system and methods described herein may provide an alternate (or intermediate) representation of a diffusion curve image that is scalable, portable, and may be easier and faster to render, without the use of a GPU. In addition, by converting a diffusion curve image into a portable format, it may be supported in other types of applications (e.g., applications directed to creation and\/or display of documents).","In some embodiments, the alternate representation may comprise a mesh of triangles in which each node of each triangle may be assigned color values (e.g., values of one or more color channels) and these colors may be interpolated smoothly across the triangle. In other words, while a diffusion curve representation is a representation that smoothly varies between two diffusion curves, this alternate representation may be based on triangles such that instead of having an arbitrary interpolation between diffusion curves displayed on a screen, there may be a linear interpolation between the color values at the corners of each triangle. This diffusion curve conversion process (i.e. this triangulation process) may be thought of as providing a piecewise linear approximation of the original diffusion curve representation. In various embodiments, any smoothly varying diffusion curve may be approximated to an arbitrary degree with piecewise linear segments as part of this triangulation process. In some embodiments, the resulting output file format (e.g., a portable display format, such as PDF) may include support for interpolation of triangles. In other embodiments, the output file may be formatted according to another 3D file specification that supports the representation of colored triangles, such as VRML. Therefore, in some embodiments, a diffusion curve image converted to such a representation may be inserted into a file in the same format (or into a file in a compatible format) and when the image is displayed from within that file, it may be possible to zoom in without experiencing the pixelization artifacts common to raster-based graphics. In such embodiments, the converted image may be resolution-independent (within the limits of the piecewise linear approximation), and it may be easy and quick to render the image without the need for any special hardware.","The system and methods described herein may be better understood following a review of diffusion curve principles. Diffusion curves are geometric curves with various appearance attributes attached, namely color for each of the sides of the space that the curve divides, and blur magnitude to define how quickly color varies across the curve. This image representation may be convenient to use as it allows the sparse definition of colors along a few controlled primitives, while the final image is the result of diffusing these colors outwards and then blurring them according to a similarly diffused blur map. A diffusion curve representation may be well suited for producing two-dimensional (2D) drawings with smooth and controllable gradients. These gradients are typically controlled by two attributes (color and blur), and are typically used by an artist to manually depict shading and material color variations. A drawing created with diffusion curves may be conceptually thought of as a collection of B\u00e9zier splines (or other parametric curves or lines) for which the geometry has been augmented with additional attributes, e.g., two sets of color control points and a set of blur control points, in a diffusion curve representation. In other words, instead of storing only a thickness and a color, a diffusion curve may store colors (as many as the user desires) on each side of the space it divides and blur controls. The color control points correspond to color constraints on the right and left half spaces defined by each curve, and the blur control points define the smoothness of the transition between the two sides.","In some embodiments, a diffusion operation may begin with a pre-processing operation that includes interpolating the values of the control points along the geometric curves, e.g., linearly, quadratically, cubically, or using a spline-based interpolation approach. These interpolated values along the curve may in some embodiments be considered \u201cfixed\u201d, i.e. they may not be subject to the subsequent diffusion process. In the subsequent diffusion process, each of the curves in the drawing diffuses its respective color(s) on each side of the curve to fill in the empty image space between curves. For example, in all places where attribute values are not explicitly defined (i.e. everywhere except to the immediate left or right of the geometric diffusion curves), attribute values may be computed by taking the explicitly defined values as constraints, and filling in values everywhere else, such that when the image is displayed, the changes in value from one position to the next (i.e. from one pixel to the next) are as small as possible. The colors may vary along the curves and are diffused outwards until they are blocked by and mixed with those defined by other diffusion curves. As previously noted, a diffusion curve may also store a blur value that controls the smoothness of the color transitions across the curve. In some embodiments, the diffusion operation may be formulated and solved as the solution to a Poisson equation. However, any other process that produces a reasonably smooth interpolation of constraints may also be suitable. These diffused attributes may then be used either directly (e.g. the colors), or as input for further processing (e.g. the blur values of the diffusion curves). The result resulting data representation may be a very compact vectorial representation of a complex image. The realism that may be achieved from the smooth transitions along the curves is difficult, if not impossible, to achieve using standard vector graphics techniques. As noted above, similar realism may in some cases be achieved with gradient meshes, but creation and manipulation of those meshes may require a lot of manual work due to the requirement to manipulate not only content-specific color values, but also to design and maintain an arbitrary grid topology.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIGS. 1A-1C","FIG. 1A","FIG. 1B","FIG. 1C"],"b":["110","120"]},"The system and methods described herein provide extensions to the original diffusion curves work, including vector-based rendering of diffusion curves, e.g., using Finite Element Method (FEM) based rendering. These extensions may provide improvements in the following areas:\n\n","While developed independently, the system and methods for scalable rendering of diffusion curves described herein are related to the methods for surface inflation described in U.S. provisional patent applications 61\/037,240 and 61\/091,262, which are herein incorporated by reference in their entirety. These applications describe systems and methods for generating a data representation of an inflated surface. The systems described therein include mechanisms for interpolating height information expressed as normal attributes attached to diffusion curves at various control points along the curves. More specifically, the methods described in these applications may include the following operations:\n\n","As described in these applications, user constraints may include geometric curves (i.e. diffusion curves) having height values and\/or normals defined at certain curve locations. The result produced by such a system (i.e. an inflated surface) may have the same base-shape as the original geometric 2D shape, but may be inflated in the third dimension (generally orthogonal to the original 2D geometric plane) dependent on the height values and\/or normal stored by the diffusion curve representation. Given the three-dimensional (i.e. inflated) shape of the result, many known three-dimensional (3D) based techniques (such as lighting, including material effects, and texturing) may be applied to it. While the use of normal attributes in such a system may facilitate the application of simple shading effects, artistic lighting may involve physically unrealizable shading. In some embodiments the system described herein may include input mechanisms by which a user can manually overlay colors from the supporting diffusion curves to suggest shading. In some embodiments, these colors may be disabled by setting their \u03b1-value (i.e. their transparency) to zero.","In various embodiments, a diffusion curve representation may include the originally defined diffusion curve parameters (i.e. colors on each side of a B\u00e9zier curve and blur along the curve), and may also include extended parameters, such as normal and\/or shading attributes. These extended parameters may be specified along diffusion curves, interpolated, and diffused like the original diffusion curves parameters. In some embodiments, a complete representation of diffusion curves may include the following vector primitive:\n\n","A characteristic of the diffusion curves approach is that it has no concept of regions. Instead, the final attributes of a diffusion curve image (e.g., the color values at each location in the image) are defined by the interaction between different curves. In some embodiments, shading, as described above, may be combined with manual coloring, e.g., by assigning an alpha-channel to the color information of the diffusion curves. In such embodiments, the system may be configured to display automatically-generated shading where the alpha value is 0, to display manually-created coloring where the alpha value is 1, and to display a mixture of the two, by interpolating, depending on the value of alpha (assuming an operating range of 0 . . . 1). In other embodiments, other encodings and\/or operating ranges may be applied. Linear interpolation may be employed in some embodiments, but any other suitable method may be used in others. Note that the mapping of 0 and 1 described above is arbitrary and may be reversed or otherwise modified without loss of generality.","The provisional patent applications referenced above describe systems and methods for generating a 3D surface representation by inflating a 2D representation using one or more of mean curvature constraints or surface normal constraints as internal or external boundary conditions to control the inflation. The values of these constraints may be specified at particular control points along the diffusion curves that define the image. In embodiments, different values may be specified for these constraints at different locations on a boundary. Various embodiments of the system may provide one or more user interface elements via which a user may specify or modify values for the constraints at locations on boundaries, and may provide one or more user interface elements via which a user may add, delete, or modify external or internal boundaries. The system may leverage characteristics of linear variational surface editing techniques to perform the actual inflation, whether mean curvature constraints, surface normal constraints, or both are used. Linear variational surface editing techniques, using some order of the Laplacian operator to solve for smooth surfaces, may provide simplicity and efficiency. The system may use a polygon (e.g., triangle) mesh to inflate the given curves. In some embodiments, the system may implement a linear system and work around its deficiencies, instead of using a slower, iterative non-linear solver that is not guaranteed to converge. In addition, the system may provide a greater range of modeling operations than conventional methods. While this approach may not allow the solution of the whole mesh as a unified system, it may provide an alternative patch-based approach that may be more intuitive to users, as the global solve in conventional methods may result in surface edits tending to have frustrating global effects. While the system is generally described in these provisional applications as using a triangle mesh, other polygon meshes may be used. The surface inflation tool may construct the 2-manifold surface that interpolates the input boundary or boundaries, and the surface may be computed as a solution to a variational problem. The surface inflation method implemented by the surface inflation tool may be formulated to solve for the final surface in a single, sparse linear equation, in one embodiment without requiring an additional strip of triangles at the boundary. In embodiments that employ surface normal constraints, additional ghost vertices may be used to control the surface normal internally and at surface boundaries. In such embodiments, the surface may be inflated by adjusting the surface normal constraints, thus rotating the boundary's ghost vertices around the boundary.","The system and methods described herein for scalable rendering of diffusion curves may employ techniques similar to some of the techniques described above in reference to inflating a surface. For example, the system described herein may employ a tessellation operation, and may operate in the tessellated domain. However, unlike the surface inflation system, the system described herein may generate (and store) an alternate representation of a 2D diffusion curve image based on a tessellation, and may operate in the tessellated domain to diffuse color and\/or blur attributes of a diffusion curve image and to display the resulting images within applications that support the display of vector graphics images provided in a scalable, portable display format. In addition, rather than being directed to the generation of a 3D representation from a 2D vector image, the system described herein may be used to smoothly diffuse various types of diffusible attributes over a 2D vector image, and to efficiently generate, store, and display a scalable, portable representation of the 2D vector image.","In some embodiments, techniques similar to those used to inflate a surface based on surface normals may be applied to the generation of an alternate representation of a diffusion curve image that is scalable and portable. Conceptually, these techniques may be thought of as being applied to different color channels of the diffusion curve image as if the color value for each channel were a \u201cheight\u201d. In other words, in some embodiments, each of the color channels in a diffusion curve image (whether expressed in RGB, HSV, HSL, CMYK, or another format, with or without an alpha channel) may be processed as if it were a \u201cheight field\u201d over the image, where the \u201cheight\u201d corresponds to the color value of that channel (e.g., in a range 0.0 . . . 1.0, or 0.255, depending on the desired resolution or representation). This is illustrated in . In this example, element  represents a portion of a diffusion curve image in a 2D image plane. As illustrated in this example, the same in-plane tessellation operation may be applied to the image for each of three color channels, shown as -. Note that in some embodiments, it may be possible to use a different tessellation for each color channel. However, since a linear system would need to be set up to solve each tessellation, this approach may require more work to be performed and more data to be stored than if the same tessellation operation is applied to each of the channels. The color value at each node of the tessellation may be solved independently for each of the three color channels. The results are represented as height fields -in . As illustrated in this example, the solutions for the color channels may be combined to define a color value at each node. To display the image, the color values for locations (e.g., pixels or collections of pixels) in between these nodes (i.e. for pixels in the interior of the triangles defined by the tessellation) may be computed from the color values at the nodes (e.g., using any suitable interpolation technique). In some embodiments, this technique may produce an alternate representation of the diffusion curve image that is scalable and portable (e.g., one that may be rendered for display using vector graphics techniques without the use of specialized graphics hardware).","In some embodiments, the method for generating an alternate representation of a diffusion curve image that is scalable and portable begins by defining an arbitrary image boundary. For practical purposes, this may in some embodiments be defined as a rectangular boundary, but it in general the boundary may have any arbitrary or desired shape. In various embodiments, the bounded shape may be non-rectangular, may contain holes (i.e. may include bounded regions that are excluded from the defined image domain), and\/or may consist of multiple disjoint parts. In cases in which disjoint parts exist, each part may be processed separately, using the techniques described herein. The following discussion is focused on the possessing of a single portion of an image.","For illustration purposes, it may be assumed that the image boundary lies in a flat 2D ground plane, as shown in the example illustrated in . The image boundary may then be tessellated, as shown in . That is, the region enclosed by the image boundary may be subdivided into small elements. The shapes of these elements may be irrelevant, although their shapes may affect the mathematical implementation used to solve a linear system defined on a particular tessellation. Common tessellation methods may use triangles or quadrangles as element shapes, in some embodiments. The following discussion describes an example in which the tessellation element shapes are triangles. However, other tessellation element shapes (e.g., any n-gon shapes) may be used in conjunction with the relevant mathematical implementation. Note that since any n-gon itself may be reduced by triangulation, any n-gon based solution may be reduced to a triangulation, thus illustrating the generality of the approach described herein. A triangular tessellation may include a plurality of triangular tessellation elements in which each triangle consists of exactly three edges, connecting three nodes.  illustrates an example of a triangular tessellation.","In some embodiments, each node of each tessellation shape element may store the value of one or more attributes associated with the location of the node in the image plane. In various embodiments, these attributes may include, but are not limited to:\n\n","In some embodiments, the placement of nodes within the image plane may be guided by various factors, including, but not limited, to:\n\n","Note that in some embodiments and\/or in some cases, the original tessellation may have to be refined (i.e. further subdivided) in order to meet all of the above-mentioned constraints. For example, in one embodiment, the tessellation may be dependent on the results of the diffusion in an iterative manner. In this example, given an initial coarse tessellation, the algorithm may diffuse for a few steps, and then use the intermediate diffusion result to refine the tessellation where it is most necessary. This process may then be repeated until a user-defined precision limit is achieved.","One embodiment of a method for scalable rendering of diffusion curve images is illustrated by the flow diagram in . As illustrated in  of , the method may include taking a closed 2D boundary defined by one or more diffusion curves as input. As illustrated in , the method may include tessellating (e.g., triangulating) the area within the external boundary to generate an alternate representation of the image defined by the diffusion curves. As illustrated in  of , the method may include adding boundary constraints (e.g., color or blur constraints) to the input boundaries. As illustrated in , the method may include diffusing the color within the area defined by the closed boundary according to the specified constraints while maintaining a number of user constraints. Various examples of user constraints are described below, according to some embodiments. As shown in this example, the method may include displaying the image, along with the diffused color effect, using standard interpolation techniques for displaying colored polygons to render the image from the alternate representation, as in .","The system and method for scalable rendering of diffusion curves described herein may be further illustrated by the flow diagram in . As illustrated in this example, the method may include accessing a diffusion curve representation of an image. This image may be an image created using drawing tools of an image editing application that also supports the conversion of the image to an alternate representation, or may be an image that was previously created (e.g., using an image editing application) and stored as a diffusion curve representation. The diffusion curve representation may comprise values of left and right color attributes at one or more control points along each of the diffusion curves of the representation, as in . The diffusion curves included in the representation may define different portions of the image bounded by various combinations of the curves and the image boundary itself. As illustrated in  of , the method may include tessellating each of these areas to generate an alternate representation of the diffusion curve image in a portable, scalable format. The alternate representation may in some embodiments include a mesh of shapes (e.g., triangles) formed by the tessellation.","As illustrated in  of , the method may include assigning the values of color attributes at each node of the mesh in the alternate representation. In various embodiments, some of the color values may be specified in the diffusion curve representation of the image, while other values may be computed from values included in the diffusion curve representation, as described in more detail below. As illustrated in this example, data representing the color values for each node of the mesh may be stored in the alternate representation, as in . For example, in some embodiments, data representing each triangle of the mesh may be stored in a format that is compatible with a portable document format (e.g., PDF), and this data may include the color values for each vertex of each of the triangles of the mesh. As illustrated in  of , this stored data may be accessed from within an application configured to display data in the scalable, portable format. In some embodiments, the application may display the image, including the diffused color effect of the original diffusion curve representation, by applying a standard interpolation technique for displaying colored polygons to the stored data, as in . For example, the PDF format supports the display of triangles by interpolating the values at the vertices to compute the color values of all pixels on the boundary and in the interior of the triangles. As illustrated in this example, the method may include storing and\/or outputting data representing an image that was defined using diffusion curves, but that has been converted into a format that is more compact, portable, and scalable than a bitmap of the image. For example, the data may be provided to a display component of an image or document editing application for display of the image and\/or the data may be stored in an intermediate format (e.g., the alternate representation described above) by the image editing application for further processing by the application (or another application) or as a final image (e.g., written to main memory, a file, an archive, etc.).","As described herein, converting a diffusion curve representation of an image to an alternate format may include tessellating the image. One such tessellation is illustrated in . As noted above, in some embodiments a user may be able to specify various constraints (including geometric constraints) to be applied to an image, and which may affect the tessellation of the image. If the geometric user constraints are expressed as lines or curves within the image boundary, then it may be possible to assign two sets of attribute values to each geometric node, one for each side of the curve or line.  illustrates one possible tessellation as the result of user constraints illustrated in . In this example, the user has drawn an internal geometric constraint  (black line). In addition, the user has chosen to define two attribute values for one of the control points (double-sided color constraint ) and one attribute value for another control point (single-sided color constraint ). As illustrated in this example, all attribute values not explicitly set by the user (i.e. the dashed circles illustrated in ) may be interpolated from the explicitly set attribute values (i.e. the solid circles illustrated in ). The interpolation technique applied may be linear interpolation, or any other suitable data-fitting method, in various embodiments. The image colors near the control points are as indicated by the attribute constraints themselves, whereas image colors everywhere else may be computed by solving a system of linear equations, as described in more detail below. In this example,  illustrates the result of the diffusion of colors within the image boundary, dependent on the constraints shown in .","Note that in the examples described herein, all nodes with constrained attributes (i.e. nodes that include constraints defined explicitly by the user or interpolated from those constraints by the system) may be considered \u201cconstrained\u201d, whereas all other nodes may be considered \u201cunconstrained\u201d. In some examples, nodes may be referred to as vertices, especially when referring to the corners of triangles or other shapes of a mesh.","Another example of the tessellation of an image is illustrated in , according to one embodiment. In this example, the image depicted in  was computed from  as follows:\n\n","As previously noted, tessellation of an image (including node placement) may in some embodiments be affected by geometric constraints, color (and\/or blur) attributes, and\/or other user-constraints. One example of how node placement may be affected by a geometric constraint is illustrated in . In this example, the user has drawn a round-shaped user constraint (as shown in ). In this example, the system automatically adapted the tessellation of  to accommodate the user-drawn geometric constraint illustrated in . The resulting tessellation is illustrated in .","One embodiment of a method for generating an alternate representation of a diffusion curve image using tessellation is illustrated by the flow diagram in . As illustrated at  in this example, the method may include accessing a diffusion curve representation of an image that includes values of left and right color attributes at various control points along the diffusions curves defining the image. As in previous examples, the image may be an image created using drawing tools of an image editing application that also supports the conversion of the image to an alternate representation, or may be an image that was previously created (e.g., using an image editing application) and stored as a diffusion curve representation.","As illustrated in this example, the method may include constructing a piecewise linear approximation of the diffusion curves defining the image, as in . For example, each diffusion curve may be approximated using piecewise linear segments, the endpoints of which constitute nodes in the alternate representation being constructed. Note that a straight-line diffusion curve may be approximated (or exactly represented) using a single straight-line segment. In addition, the method may include defining additional nodes of the alternate representation in the portions of the image between the piecewise linear segments that approximate the diffusion curves (e.g., to define a mesh of triangles between the diffusion curves). In some embodiments, user constraints may be added to the alternate representation (i.e. the tessellation), such as geometric constraints, single-sided constraints, or double-sided constraints. As illustrated in , these constraints may be used to specify the values of one or more attributes (e.g., color and\/or blur) at particular locations within the image. In such embodiments, these locations may also be considered nodes of the alternate representation, whether or not they correspond to a control point of a diffusion curve or an endpoint of a piecewise linear segment approximating a diffusion curve.","As illustrated in  of , the method may include assigning color values (e.g., right and left color values) to each node of the alternate representation that corresponds to one of the control points of the diffusion curves or to a node at which user constraints have been specified. For example, for a node that corresponds to a control point in the diffusion curve representation of the image, any values assigned to the attributes at that control point may also be assigned to the node in the alternate representation. Similarly, any values specified as a user constraint at a particular location in the image may also be assigned to the corresponding node in the alternate representation.","As illustrated in this example, the method may include, for each other vertex of the alternate representation, determining the color attribute values at the vertex by interpolation, as in . Examples of various methods for interpolating the attribute values are described in more detail below. As shown in  of , the method may include storing data representing a mesh of shapes comprising color attribute value(s) for each vertex of the mesh (i.e. each node of the piecewise linear approximation of the diffusion curve image) in a scalable, portable format. For example, in some embodiments the data may be stored in a format that is compatible with a portable document format (e.g., PDF).","Tessellation\/Triangulation","As previously noted, in some embodiments, the system described herein may tessellate the area bounded by the curves as part of converting a diffusion curve drawing to an alternate representation. For example, in some embodiments, the system may include a diffusion curve conversion tool, which may invoke a tessellation operation. In performing the tessellation, some embodiments of the boundary curve conversion tool may restrict the representation to a triangle mesh that is obtained by triangulating the surface bounded by the image boundary. Any of various triangulation methods may be used to generate a high-quality triangulation. In some embodiments, the system may maintain a maximum area constraint (which may be provided as a configurable option in the triangulation method) to prevent rendering artifacts due to very large triangles. As noted above, other types of constraints may also be considered.","An advantage of solving for the diffused color image using a triangle mesh (as opposed to a regular grid) may be its efficiency due to mesh adaptivity. In other words, the triangle mesh may be specified to have high detail only near complicated constraints, and to be coarse where there are not many constraints. In one embodiment, the mesh connectivity may not be updated as the image color is diffused. In other embodiments, the mesh may dynamically be made denser in parts of the image that have high color gradients, which may be more efficient and smoother in terms of rendering.","Color Diffusion","As indicated at  of , the system may be configured to diffuse the color according to the specified constraints while maintaining a number of user constraints. In one embodiment, the unconstrained parts of the surface may be obtained by solving a variational system that maintains smoothness of color transitions. Smoothness may be maintained to achieve soft color transitions between user constraints. In this way, the color in those regions may be defined implicitly using only a small number of explicit constraints.","In one embodiment, the variational formulation may be based on the principles of partial differential equation (PDE) based boundary constraint modeling, where the Euler-Lagrange equation of some aesthetic energy functional is solved to yield a smooth color diffusion. For example, in some embodiments the system may use a \u2018thin-plate spline\u2019 as the desired diffusion method, and the corresponding Euler-Lagrange equation may be used for the bi-harmonic equation. In such embodiments, for all free vertices at position x, the PDE \u0394(x)=0 may be solved. In this example, x may represent the \u201cheight\u201d (representing the color value) at a particular position in the triangulated mesh. Therefore, if x is single-valued, the solution may correspond to a single height-surface (i.e. a grayscale image). For a color image, x may be a multi-valued color, and a solution for each of the color channels may be solved independently, as described above. The solution of this PDE may yield a Ccontinuous surface everywhere except at the position constraints (where the surface can be either Cor Ccontinuous). In some embodiments, the system may use cotangent-weight based discretization of the Laplacian operator \u0394(x).","The fourth-order PDE (\u0394(x)=0) may be too slow to solve interactively. Therefore, in one embodiment, the system may convert the non-linear problem into a linear one by assuming that the parameterization of the surface is unchanged throughout the solution. In practice, this means that the cotangent weights used for the Laplacian formulation may be computed only once (using the flat, non-inflated surface) and may be subsequently unchanged as the colors are diffused. This approximation has been used extensively for constructing smooth shape deformations, but it may significantly differ from the correct solution in certain cases. Instead of correcting this with a slower, sometimes-divergent, iterative non-linear solver, in embodiments the system may characterize the linear solution and use its quirks to provide extra dimensions of artist control.","One advantage to using a linear system in the solver may be that the linear system has a unique solution. In contrast, non-linear systems may generate multiple solutions (for example, a global and local minimum). Thus, using a non-linear system, the solver may get trapped in a local minimum, possibly yielding an undesired solution (i.e., the global optimum may not be found). Different non-linear solvers may arrive at different local minima. Thus, using a linear system may provide consistency and efficiency. A trade-off to using a linear system may be that the resulting color diffusion may not be quite as smooth as a globally optimal solution to a non-linear system. For artistic purposes, however, a solution produced by a linear system may in most cases be sufficient.","Specification of Color Constraints","The following describes the formulation of a variational linear system according to embodiments that use color constraints. In such embodiments, a linear system Ax=b may be implemented, where the matrix A is a sparse n\u00d7n matrix (where n is the number of unconstrained vertices times the number of color channels, c, to be diffused, e.g. 3\u00d7 number of unconstrained vertices for an RGB image). The matrix A may represent the local geometric relationships between the vertices and their neighbors and thus may dictate how the color information is transferred between vertices. The vector x of length n may represents the color values of unconstrained vertices and the vector b of length n represents the known quantities, i.e. the color values of constrained vertices.","For all c color coordinates (corresponding to the c color channels) of every unconstrained vertex, an equation may be formulated that is linear in terms of the vertex' neighbors. In some embodiments, the formulation may be based primarily on a method of discrete geometric modeling, with the addition of constraint types. One method has been described in the art to formulate a linear system that can handle smooth or sharp internal constraints. However, the formulation requires a strip of triangles to complete the one-ring neighborhood of the boundary vertices. Generating this strip of triangles, especially when the boundary curve has large concavities, is not trivial. Therefore, some embodiments of the system described herein that use a color constraint may provide a mechanism to \u201cfake\u201d these triangles with locally correct \u201cghost\u201d vertices.","One embodiment may use a conjugate-gradient implementation to solve the linear system A = . Since the matrix A is sparse, symmetric and positive-definite, other embodiments may factorize the matrix, which may decrease iterative update times. For example, in one embodiment, a Cholesky decomposition of the matrix A may be performed, and in another embodiment, a direct solver may be used to solve the linear system. Other solvers may be used to solve the linear system in other embodiments. For example, a sparse Cholesky solver or a conjugate-gradient solver may be used. Other techniques such as multi-grid solvers may also be used.","The techniques described above may be further illustrated by way of example.  illustrates a mesh vertex of position x and one-ring neighbors yaccording to one embodiment.  shows various variables used in the equations below. In this example, vertex x has neighbors y, yon the boundary, and neighbors y, y, yin the interior with a full one-ring neighborhood. Each boundary vertex has its own ghost vertex and two corresponding ghost triangles (for example, yhas g) to artificially provide the required one-ring neighborhood.","Consider a mesh vertex of position x and one-ring neighbors yas shown in . A steady-state solution for color values, considering boundary constraints, may in some embodiments be found by solving the Laplace equation \u0394x=0.","The Laplacian at a mesh vertex may be given by its one-ring neighborhood:\n\n\u0394()\n\nwhere ware the cotangent weights scaled by inverse vertex area (where the vertex area is the area defined by the one-ring neighborhood of the vertex, i.e. as the sum of all triangles which are constructed by using the given vertex). This expands finally to:\n\n\u03940\n\nwhere zrefers to ghost vertices where necessary to complete a one-ring. In one embodiment, constrained vertices may be treated as absolute constraints, so that their positions are moved to the right hand side of the system.\n","Constructing such equations for every free vertex gives the linear system Ax=b, whose solution, x, may provide the desired color image. Since the construction is not symmetric and may be over-constrained, it may be solved using equations similar to those used to process normal constraints by the surface inflation tool described above.","Placement of Ghost Vertices","In one embodiment, for each patch of a mesh surface, a canonical view direction may be assumed to be known. For example, this may be the direction from which the original boundary constraints were drawn. In such embodiments, an \u2018up\u2019 vector which points towards the source of this canonical view may be derived. Ghost vertices may then be placed in a plane perpendicular to the \u2018up\u2019 vector, and normal to the constraint curve of their parent vertex. In other embodiments, the ghost vertices may be extended to lie within the image plane. In one embodiment, each ghost vertex may be placed at the same fixed distance d from the curve. For example, in , assuming a vector out of the page u, the ghost vertex g may be positioned at:\n\n(\u00d7())\/\u2225\u00d7()\u2225\n","In some embodiments, once placed, the ghost vertices may be rotated about the tangent of the constraint curve (the boundary) to change the normal direction. Note that ghost vertices may be added for both external and internal boundaries.","Internal Constraints","In some embodiments, the user may draw internal boundaries as internal position constraints and may also specify boundary constraints (e.g., mean curvature and\/or color constraints) for the internal boundaries. Upon adding a new internal boundary, the linear system A =  needs to be re-initialized and solved. Note that the re-solving may be performed differently for new internal boundaries comprising color constraints than for new internal boundaries comprising mean curvature constraints.","Storage\/Display","Once the linear or non-linear matrix system is solved and the colors are diffused over the triangulated image boundary, a unique set of colors may be assigned to each node of a triangle. Note that many (if not most) nodes may be shared by several triangles, and that nodes can contribute different colors to different triangles, depending on the side of a geometric user constraint on which a given triangle lies (see ). One way of storing this color information may be to store three color values for each triangle (e.g., one for each corner of the triangle). However, any other similar scheme may be used, in various embodiments. Note that in one embodiment, to address the issue of having two values on either side of a user-constraint curve, the user (or the system) may create an artificial hole that is extremely thin (e.g., the user-defined curve may be thought of in terms of a sheet of paper into which a cut has been made to form an infinitely thin ellipse). In this example, each vertex on the user-constraint curve may be duplicated such that there are corresponding vertices on each side of the ellipse that share the same x and y coordinates, but whose heights are computed independently (i.e., as if the paper on the two sides of the cut can be moved to different heights).","A set of triangles with associated colors (such as an alternate representation of a diffusion curve image generated as described herein) may in some embodiments be displayed on the screen using the OpenGL command language. In other embodiments, an image may be rendered from such a representation using any other computer executable method that is capable of handling the display of tri-colored triangles, and that performs the smooth interpolation of colors from the corners of the triangle to the interior of the triangle. In some embodiments, a representation comprising a set of triangles may be encoded and stored in any document or storage format capable of encoding and storing tri-colored triangles. To ensure the correct display of such a document or storage format, the computer executable program displaying such document or storage formats must be capable of displaying tri-colored triangles, including the smooth interpolation of colors from the corners of the triangle to the interior of the triangle. As previously noted, one such format is the Adobe portable document format (PDF), but any similarly capable formats may be applied, in various embodiments.","Applications of Embodiments","Applications of the techniques described herein may include one or more of, but are not limited to, enhancing photographs or other images using diffusion curves, creating 2D vector images, creating 2D animations, importing 2D vector images and\/or animations into documents or other files, and rendering 2D vector images in systems that do not include specialized graphics hardware (e.g., GPUs). Examples of some of these applications are illustrated in various Figures included herein. Some embodiments of the diffusion curve conversion tool described herein (or a module thereof) may be implemented, for example, as a plug-in for 2D art design tools such as Adobe\u00ae Illustrator\u00ae, Inkscape, or GNU Gimp or as a plug-in for other types of image processing applications. In other embodiments, such a tool or module may be implemented, for example, as a stand-alone program or utility, or as a library function. In various embodiments, the tools described herein may obtain, manipulate, and output digital images in any of various digital image formats.","In some embodiments, the system and methods described herein may make it possible to insert, display, and\/or modify the display of a diffusion curve image in a file or document using a portable display format. In other words, the system and methods described herein may allow diffusion curve images to be used in a variety of applications using standard display features of those applications, and without requiring the use of a specialized graphics processor (GPU) to render the diffusion curve images. One method for applying the system and methods described herein is illustrated by the flow chart in . In this example, the method may include creating a diffusion curve image, converting it into an alternate representation in a scalable, portable format, inserting the image into a file or document within another application, and modifying the display of the image within the other application.","As illustrated at , the method may include opening an image editing application, e.g., to create a new diffusion curve image or to edit an existing diffusion curve image. In some embodiments, this may include the image editing application accessing data representing an existing 2D image in response to the data being imported into the application, or may be resident in memory accessible to the application as a result of being imported previously, or as a result of being created and\/or modified by the application prior to the desired editing operation. The data accessed may represent a whole image or a portion of an image, in different embodiments. In some embodiments, a user may select a drawing, an image, or a portion of drawing or an image to be edited using a GUI of an image editing application.","A drawing session may begin with a user sketching one or more vector curves, and then attaching various color values along the curves to create complex colors and shadings. Therefore, as illustrated in  of , the method may include adding a vector curve to the new or existing diffusion curve image using a drawing or sketching tool in a graphical user interface of the image editing application. In this example, the method may include the image editing application receiving input defining one or more diffusion curves for the 2D image via a GUI of the image editing application indicating one or more geometric curves drawn by a user using a drawing tool of the GUI. These curves may comprise B\u00e9zier curves or other parametric curves, in various embodiments. In some embodiments, the method may include the image editing application receiving input defining the shape of an image element, i.e. shape contour lines, usable to create a 2D drawing representing an existing image.","The vector curves (e.g., B\u00e9zier splines) may support control points at which various parameter values may be defined. For example, in some embodiments, various attributes (e.g., color and\/or blur) may be attached to control points on the left and\/or right sides of a diffusion curve when the curve is created (i.e. while the user is sketching a drawing). In other embodiments, such attributes may be attached to control points of the diffusion curves at a later time. In the example illustrated in , the method includes defining one or more control points along the curve, as in . For example, the method may include the image editing application receiving input via a GUI of the image editing application indicating one or more locations within the 2D image at which a user has specified that control points should be attached. In various embodiments, such control points may be attached to the \u201cleft\u201d and\/or \u201cright\u201d side of the diffusion curve at any position along the curve (i.e. on either side of the curve, using an arbitrary frame of reference). In other words, the attribute control points may in some cases coincide with the geometric control points of the diffusion curve (e.g., a Bezier curve), but they may not be limited to positions defined by these geometric control points.","As illustrated in , the method may include specifying values for left and right color attributes at the control points. As described herein, these left and right attributes apply, respectively, to the image (or an area thereof) as divided into left and right portions by the curve at the control points. In some embodiments, the diffusion curve representation may include support for all parameters at each control point and the user may optionally decide which parameters are considered active for any given control point. In some embodiments, the method may include the image editing application receiving input associating one or more diffusible attributes with each of the control points. For example, the method may include the image editing application receiving input via a GUI of the image editing application indicating the values of various parameters that a user has specified for the left and\/or right side of the curve at each control point. In various embodiments, these attributes may include color and\/or blur attributes, as described in more detail herein (e.g., with reference to ). While in this example, colors are defined after the curve is drawn, in other embodiments, diffusion curves may contain pre-loaded colors for the left and right sub-spaces they define, or the system may adaptively sample a template image to derive colors automatically as the user draws one or more diffusion curves.","As illustrated in  , the method may include storing data representing the diffusion curve. For example, the data may comprise a vector representation of the diffusion curve and may include the values of one or more diffusible attributes specified for one or more control points along the diffusion curve. The data may be stored in a new file created at the beginning of the editing session (e.g., in the case that a new diffusion curve image is being created) or may be added to an existing file (e.g., in the case that an existing diffusion curve image is being modified). As illustrated in this example, if the user wishes to add more diffusion curves (shown as the positive exit from ), the operations illustrated as - may be repeated for the one or more additional diffusion curves. If no additional diffusion curves are to be added (shown as the negative exit from ), the method may continue at .","Because the diffusion curves are vector representations, they are resolution independent (i.e. can be zoomed in on without loss of quality), continuously editable, and compact, and they may support animations (e.g., in applications such as Adobe\u00ae Flash\u00ae animation). However, as described above, rendering them using bitmaps may require a lot of computing power, specialized graphics application programs, and\/or specialized graphics hardware (such as a GPU). Therefore, in some embodiments, the method may include converting the data representing the diffusion curves into an alternate representation in a scalable, portable format suitable for use in a variety of applications, as described above. This is illustrated as  in .","In this example, the method may include accessing a document or file using an application that supports the scalable, portable format, as in . For example, the method may include the image editing application receiving input identifying a document in a portable display format (e.g., PDF) to which a diffusion curve image is to be added. As illustrated in , the method may include inserting the alternate representation of the diffusion curve image into the document, and displaying the image (including the diffused color effects of the diffusion curve image) using a standard interpolation technique for displaying colored polygons that is supported in the application. For example, the PDF format includes support for interpolation of data specified using triangles. Therefore, an alternate representation of the image comprising a mesh of triangles for which various attributes are defined at the vertices, as described herein, may be inserted into a PDF formatted file and may be rendered easily and quickly by a PDF reader (or viewer) without the need for specialized graphics hardware. For example, the method may include the application outputting data representing the document, including the 2D image and reflecting the diffusion of the diffusible attributes. In various embodiments, the data may be provided to a display component of the image editing application for display of the 2D image to the user and\/or the data may be stored in an intermediate format by the image editing application for further processing by the application (or another application) or as a final image (e.g., written to main memory, to the same or a different file, to an archive, etc.).","Because the alternate representation is also a vector-based representation, it is resolution-independent (within the limits of the piecewise linear approximation from which it was constructed) and can support zooming in. As illustrated in  of , one or more global and\/or local manipulation operations (e.g., standard vector graphics operations) may be applied to the inserted image to modify the display of the image. For example, because alternative representations of diffusion curves based on a mesh of shapes are vector representations, operations such as resizing, zooming, or adding animation effects may be applied to these representations easily and without loss of quality, in various embodiments. Once the inserted image has been modified within the document, the modified file (including the inserted and\/or modified image) may be stored (e.g., in its original format).","As described herein, a graphical user interface of an image editing application may include mechanisms to support the creation of diffusion curve images, and may also provide mechanisms to initiate the conversion of a diffusion curve representation of an image into an alternate representation based on a mesh of shapes.  illustrates an example display  depicting various frames that may be visible to a user during an image editing operation in which a diffusion curve image is being created or modified. In this example, the display is divided into three regions or areas: menus , tools , and active editing window . As illustrated in , tools  may include one or more user-selectable and\/or user-modifiable interface elements, such as slider bars, dials, pop-up menus, alphanumeric text entry boxes, check boxes, etc., for specifying various operations to be applied to an image and\/or for specifying parameters of those operations. For example, tools area  of the GUI may contain the user interface elements that are selectable to apply various editing operations to an image or to a vector drawing representing an image (e.g., drawing diffusion curves, adding control points on the left and\/or right side of the curves, adding diffusible parameters at one or more control points, etc.), as shown in .","In the example illustrated in , the user may be in the process of creating the vector drawing illustrated in active editing window . In this example, the user has chosen a \u201cdiffusion curve tool\u201d from tools area , as indicated by the dark border around the user interface element \u201cdiffusion curve tool\u201d, and is using this tool to add a new diffusion curve  to the vector drawing being edited in active editing window  (e.g., using a mouse, touch pad, keyboard, track ball, etc. to move a cursor across the image to draw new diffusion curve ). In other words, in this example, a diffusion curve tool may be used in a manner similar to a line drawing tool (or a freehand drawing tool) to sketch a diffusion curve in the drawing under construction in active editing window . In this example, the input mechanisms illustrated in  may also be used to add control points to new diffusion curve  or any other diffusion curve of the vector drawing illustrated in active editing window . For example, by selecting \u201cadd control point\u201d in tools area , the user may be able to identify one or more control points along the curve (e.g., by moving the cursor to each of those points and \u201cclicking\u201d to select them).","In this example, the user may also be able to assign left and right color values to each of the control points in the image (e.g., those on new diffusion curve  or any other diffusion curve already drawn in the image). For example, the user may use the cursor to select one of the control points (either when the control point is initially identified or at a later time) and then may select \u201cleft color\u201d or \u201cright color\u201d in tools area  to assign a value to a left or right color attribute for that control point. In some embodiments, selection of the \u201cleft color\u201d or \u201cright color\u201d elements of tools area  may cause a pull-down menu of color value options to be displayed for selection or may cause a pop-up window to be displayed from which a color value may be selected. In other embodiments, the \u201cleft color\u201d or \u201cright color\u201d elements of tools area  may be alphanumeric text entry boxes or may include slider bars usable for specifying color values at the control point for one or more color channels (not shown). Note that in some embodiments, the system may assign default left and right color values at control points when they are defined for a diffusion curve, and these default values may be overridden by the user by selecting and changing them. Also note that when drawing a diffusion curve image, the user does not need to specify fill colors, as they are defined implicitly by the boundaries formed by the diffusion curves themselves and the values of the color attributes at the control points specified along the diffusion curves.","In various embodiments, other diffusible parameters may be specified using mechanisms in tools area . For example, after identifying a given control point (using the selection tool in tools area , or by another means, in different embodiments), the user may select \u201cadd diffusible parameter\u201d in tools area , and may select one of a plurality of available diffusible parameters (e.g., blur, normals, etc.) using a pull-down menu, alphanumeric text entry box or other input mechanism. In the example illustrated in , a \u201cparameter B value\u201d may be specified and attached to a diffusion curve control point. The user may specify whether to add the attribute value to the left or right side of the identified control point by selecting the \u201cleft\u201d or \u201cright\u201d elements in tools area . As illustrated in this example, in some embodiments, a blur factor may be specified using a slider bar. In some embodiments, the system may define a default blur value (e.g., 0).","As illustrated in , once a user has constructed a diffusion curve image, the user may initiate the automatic conversion of the diffusion curve representation into a representation that is more suitable for inclusion in a variety of other applications by selecting \u201cconvert to portable format\u201d in tools area . In response to this selection, the diffusion curve representation may be converted into a format that may allow the image to be displayed, modified, and\/or inserted into a file or document in another application without the need for specialized graphics hardware, as described in detail herein. In some embodiments, the converted data (which may comprise data representing a mesh of shapes and specified diffusible color values for each vertex thereof) may be displayed in active editing window  once it is generated. In such embodiments, the converted data may be rendered for display using a standard interpolation technique for displaying colored polygons, as described herein.","As illustrated in , other operations may be selected using interface mechanisms in tools area , such as a reset function. In various embodiments, the reset tool illustrated in  may or may not be included in the user interface. Another operation that may be selected using a user interface mechanism in tools area  is an \u201capply\u201d operation, which may be used to commit (e.g., to save or snapshot) one or more editing operations performed during an image editing session. Various embodiments may include other tools not shown as well, such as an \u201cundo\u201d tool that undoes the most recent user action in active editing window .","In the example GUI illustrated in , menus  may include one or more menus, for example menus used to navigate to other displays in the image editing application, open files, print or save files, undo\/redo actions, view one or more selected representations of images, and so on. In some embodiments, an image representation (e.g., a file containing image data, data representing one or more diffusion curves, diffusible parameter values, data representing a mesh of shapes, and\/or other metadata associated with an image) may be identified by the user through the \u201cfile\u201d option in menu area . This menu item may include, for example, a user-selectable pull-down option for importing images or alternate representations thereof from an identified file. In the example GUI illustrated in , active editing window  is the area in which an image or texture being created or modified is displayed as various editing operations are performed. In various embodiments and at various times, active editing window  may display a portion or all of an input image to which an editing operation is to be applied, a vector drawing under construction comprising one or more diffusion curves, a portion or all of preview result image, an output image, an alternate representation of a diffusion curve image, or any intermediate image produced as part of the image editing operations described herein.","In the example GUI illustrated in , menu  includes a \u201cview\u201d option. This menu item may include, for example, a user-selectable pull-down or pop-up menu usable to select which of various representations of an image are displayed in active editing window , or in another area of display . In other embodiments, different input mechanisms may be provided for selecting a view to be displayed, such as one or more radio buttons, alphanumeric text boxes, dials, etc. In some embodiments, one of the available viewing options may be a \u201csplit view\u201d, in which two or more representations of an image may be simultaneously displayed. In some embodiments, as the user iteratively applies the techniques described herein, the system may be configured to automatically update and\/or store the data representing these modified image views. The system may also be configured to automatically refresh the images being displayed in response to these updates.","In some embodiments, a user may be prompted to provide one or more of the inputs described above in response to invoking an operation of the image editing application. In other embodiments, the image editing application may provide default values for any or all of these inputs. In some embodiments, the user may be allowed to override one or more default parameter values using an interface similar to that illustrated in .","As previously described, an alternate representation of a diffusion curve image based on a mesh of shapes may be stored in a scalable, portable format usable in a variety of applications.  illustrates an example display  of a graphical user interface of a document editing application. In this example, display  depicts various frames that may be visible to a user during an editing operation in which a diffusion curve image is being added to a document and\/or is being modified following insertion into the document. In this example, the display is divided into three regions or areas: menus , tools , and active editing window . As illustrated in , tools  may include one or more user-selectable and\/or user-modifiable interface elements, such as slider bars, dials, pop-up menus, alphanumeric text entry boxes, check boxes, etc., for specifying various operations to be applied to a document or elements thereof and\/or for specifying parameters of those operations. For example, tools area  of the GUI may contain the user interface elements that are selectable to apply various editing operations to a document or to a vector drawing representing an image within the document, as shown in .","As shown in the example illustrated in , a view of a document under construction (e.g., a page of the document) may be displayed in active editing window . The page being displayed includes two text areas ( and ) and a vector drawing . Vector drawing  may have been created as a diffusion curve drawing using a graphical user interface of an image editing application, such as that illustrated in  and described above, and may have been converted to a scalable, portable representation for use in the document editing application.","In this example, the user may be in the process of editing vector drawing  (which may be represented by data comprising a mesh of shapes and specified diffusible color values for each vertex thereof). In this example, vector drawing  may have been previously inserted into the document being displayed in active editing window  using the \u201cinsert vector drawing\u201d element in tools area . In response to selection of the \u201cinsert vector drawing\u201d element, the user may have been prompted to select an image from a file or image repository, e.g., using a pop-up or pull-down menu, or via the \u201cfile\u201d or \u201cview\u201d element in menu area  and the data representing the image may have been imported by the document editing application. In some embodiments, the user may have selected a location within the document (or a page thereof) at which to insert the vector drawing (e.g., using the selection tool in tools area , or by another means, in different embodiments). In other embodiments, the user may have first selected a file or image thereof and a location at which to insert the image, and then selected the \u201cinsert vector drawing\u201d element to initiate the document editing application importing the data representing the image and placing it at the specified location in the document.","In this example, the user has chosen \u201cedit vector drawing\u201d from tools area , as indicated by the dark border around the user interface element \u201cedit vector drawing\u201d, and is using this tool to resize the vector drawing being edited in active editing window  using a slider bar \u201cscale factor\u201d. In other embodiments, other user interface elements may be used to resize and\/or re-position a vector drawing inserted into a document (e.g., a mouse, touch pad, keyboard, track ball, etc.). Note that because the vector drawing has been converted to a scalable, portable format, if a zoom in operation is selected for the document (or page thereof) being displayed in active editing window  (e.g., using the \u201cView\u201d option in menus ), the scaled vector drawing may be easily rendered for display using standard vector graphics techniques, without the use of specialized graphics processing hardware (e.g., a GPU). In some embodiments, the document editing application may be configured to support animation of vector drawings. In such embodiments, additional user interface elements in tools area  may be selected to add one or more keyframes (\u201cadd keyframe\u201d) and\/or to animate the vector drawing (\u201canimate\u201d). In other embodiments, options to animate the image may include procedural animation (i.e. programmatically changing attributes and control point positions) and\/or data-driven animation (i.e. mapping attribute values and control point positions to values of an external data-source, such as a motion-capture file, a database, or the like).","Note that other elements of tools area  and menus  (e.g., \u201cFile\u201d, \u201cView\u201d, \u201capply\u201d and \u201creset\u201d), may invoke operations similar to those illustrated in  and described above. Note also that, in various embodiments, more, fewer, or different user interface elements may be included in a graphical user interface of a document editing application or another application configured to display diffusion curve images that have been converted to a format comprising a mesh of shapes, as described above. For example, while  depicts a display of a document editing application, other applications that may be configured to display diffusion curve images that have been converted to alternate representations that are scalable and portable, as described herein, may include (but are not limited to) a document viewer, a presentation application, or an animation editing application.","Some embodiments may include a means for creating shapes representing image elements or portions thereof. For example, a shape creation module may present an interface through which shapes may be specified (e.g. by defining one or more diffusion curves) and through which one or more diffusible attributes of those diffusion curves may be specified, may generate data representing one or more shapes dependent on user input, and may store the data representing the one or more shapes for subsequent use, as described herein. The shape creation module may in some embodiments be implemented by a computer-readable storage medium and one or more processors (e.g., CPUs and\/or GPUs) of a computing apparatus. The computer-readable storage medium may store program instructions executable by the one or more processors to cause the computing apparatus to perform presenting an interface through which shapes may be specified (e.g. by defining one or more diffusion curves) and through which one or more diffusible attributes of those diffusion curves may be specified, generating data representing one or more shapes dependent on user input, and storing the data representing the one or more shapes for subsequent use, as described herein. Other embodiments of the shape creation module may be at least partially implemented by hardware circuitry and\/or firmware stored, for example, in a non-volatile memory.","Some embodiments may include a means for tessellating an image or a portion thereof. For example, a tessellation module may triangulate a portion of an image bounded by diffusion curves to generate an alternate representation of the image area comprising a mesh of shapes formed by the tessellation and may store the alternate representation for subsequent use, as described herein. The tessellation module may in some embodiments be implemented by a computer-readable storage medium and one or more processors (e.g., CPUs and\/or GPUs) of a computing apparatus. The computer-readable storage medium may store program instructions executable by the one or more processors to cause the computing apparatus to perform triangulating a portion of an image bounded by diffusion curves to generate an alternate representation of the image area comprising a mesh of shapes formed by the tessellation, and storing the alternate representation for subsequent use, as described herein. Other embodiments of the tessellation module may be at least partially implemented by hardware circuitry and\/or firmware stored, for example, in a non-volatile memory.","Some embodiments may include a means for converting a diffusion curve representation of an image into a scalable, portable format. For example, an image format conversion module may invoke a tessellation module to generate an alternate representation of a diffusion curve image, may assign values of one or more diffusible attributes (e.g., color and\/or blur) to nodes of the alternate representation dependent on the values of diffusible attributes associated with corresponding control points in the diffusion curve image and\/or by interpolating those values, and may store data representing the attribute values in the alternate representation for subsequent use, as described herein. The image format conversion module may in some embodiments be implemented by a computer-readable storage medium and one or more processors (e.g., CPUs and\/or GPUs) of a computing apparatus. The computer-readable storage medium may store program instructions executable by the one or more processors to cause the computing apparatus to perform invoking a tessellation module to generate an alternate representation of a diffusion curve image, assigning values of one or more diffusible attributes (e.g., color and\/or blur) to nodes of the alternate representation dependent on the values of diffusible attributes associated with corresponding control points in the diffusion curve image and\/or by interpolating those values, and storing data representing the attribute values in the alternate representation for subsequent use, as described herein. Other embodiments of the image format conversion module may be at least partially implemented by hardware circuitry and\/or firmware stored, for example, in a non-volatile memory.","The methods described herein for creating diffusion curve images and converting them into alternate representations that are scalable and portable may be implemented by a computer system configured to provide the functionality described.  is a block diagram illustrating one embodiment of a computer system  configured to implement such methods. In the illustrated embodiment, computer system  includes one or more processors  coupled to a system memory  via an interconnect . Computer system  further includes a network interface  coupled to interconnect  and to one or more input\/output devices , such as cursor control devices, keyboards, displays, or other devices. In some embodiments, it is contemplated that embodiments may be implemented using a single instance of computer system , while in other embodiments multiple such systems, or multiple nodes making up computer system , may be configured to host different portions or instances of embodiments. For example, in one embodiment some elements may be implemented via one or more nodes of computer system  that are distinct from those nodes implementing other elements.","A graphics application such as graphics application  may be configured to perform various image editing functions and to render new images accordingly. In some embodiments a graphics application may include a diffusion curve conversion tool and\/or one or more of a shape creation module, a tessellation module or an image format conversion module, such as those described herein. In some embodiments, a user may invoke operations to add, move, or remove objects (including, for example, objects defined by diffusion curves), to resize objects or entire images, to modify a color or blur of an object, or otherwise alter an input image through a user interface of graphics application . Graphics application  may be configured to perform these operations, according to various embodiments, and may employ the methods described herein for creating diffusion curve images and converting them into alternate representations that are scalable and portable. Graphics application  may be configured to render various images (including images stored in a diffusion curve representation or in an alternate representation that is scaleable and portable) to a separate window, or directly into the same frame buffer containing an input image, an image under construction, or a document containing a diffusion curve image that has been converted to a scalable, portable image format, in different embodiments.","Graphics application  may represent various types of graphics applications, such as painting, publishing, photography, games, animation, and other applications. Additionally, graphics application  may utilize a graphics processor (GPU)  when rendering or displaying some images, according to various embodiments. In other embodiments, such as when graphics application  is configured to support vector images in a scalable, portable format, graphics application  may be configured to render images without the use of a GPU. A graphics processing unit or GPU may be considered a dedicated graphics-rendering device for a personal computer, workstation, game console or other computer system. Modern GPUs may be very efficient at manipulating and displaying computer graphics and their highly parallel structure may make them more effective than typical CPUs for a range of complex graphical algorithms. For example, graphics processor  may implement a number of graphics primitive operations in a way that makes executing them much faster than drawing directly to the screen with a host central processing unit (CPU), such as CPU . However, to invoke the functionality of the GPU, any diffusion curve images to be displayed may need to be stored in a format specific to the particular application programming interface (API) implemented by GPU , rather than in a scalable, portable format. GPUs may be commercially available from vendors such as NVIDIA Corporation, ATI Technologies, and others.","A system for creating diffusion curve images and converting them into alternate representations that are scalable and portable, as described herein, may be implemented on various types of computer systems. Referring again to , computer system  may be any of various types of devices, including, but not limited to, a personal computer system, desktop computer, laptop or notebook computer, mainframe computer system, handheld computer, workstation, network computer, a consumer device, video game console, handheld video game device, application server, storage device, a peripheral device such as a switch, modem, router, or in general any type of computing device.","Graphics application , which may be configured to implement creating diffusion curve images and converting them into alternate representations that are scalable and portable, as described herein, may be provided as a computer program product, or software, that may include a computer-readable storage medium having stored thereon instructions, which may be used to program a computer system (or other electronic devices) to implement the techniques described herein. A computer-readable storage medium may include any mechanism for storing information in a form (e.g., software, processing application) readable by a machine (e.g., a computer). The machine-readable storage medium may include, but is not limited to, magnetic storage medium (e.g., floppy diskette); optical storage medium (e.g., CD-ROM); magneto optical storage medium; read only memory (ROM); random access memory (RAM); erasable programmable memory (e.g., EPROM and EEPROM); flash memory; electrical, or other types of medium suitable for storing program instructions. In addition, program instructions may be communicated using optical, acoustical or other form of propagated signal (e.g., carrier waves, infrared signals, digital signals, or other types of signals or mediums.).","As illustrated in , computer system  may include one or more processor units (CPUs) . Processors  may be implemented using any of a variety of instruction set architectures (ISAs) or chip sets, such as the SPARC\u2122 architecture, an x86-compatible architecture from Intel Corporation or Advanced Micro Devices, a PowerPC\u2122, MIPS\u2122 ISA, or any other suitable ISA or another architecture or chipset capable of processing data, and may in various embodiments include multiple processors, a single threaded processor, a multi-threaded processor, a multi-core processor, or any other type of general-purpose, embedded, or special-purpose processor. Any desired operating system(s) may be run on computer system , such as various versions of Unix, Linux, Windows\u2122 from Microsoft Corporation, MacOS\u2122 from Apple Corporation, or any other operating system that enables the operation of software on a hardware platform. In multiprocessor systems, each of processors  may commonly, but not necessarily, implement the same ISA.","As illustrated in , the computer system  may include one or more system memories  (e.g., one or more of cache, SRAM, DRAM, RDRAM, EDO RAM, DDR RAM, SDRAM, Rambus RAM, EEPROM, or other memory type), or other types of RAM or ROM) coupled to other components of computer system  via interconnect . Memory  may include other types of memory as well, or combinations thereof. One or more of memories  may include program instructions  executable by one or more of processors  to implement aspects of the techniques described herein. Program instructions , which may include program instructions configured to implement graphics application , may be partly or fully resident within the memory  of computer system  at any point in time. Alternatively, program instructions  may be provided to GPU  for performing operations on GPU . In some embodiments, the techniques described herein may be implemented by a combination of program instructions  executed on one or more processors  and one or more GPUs , respectively. Program instructions  may also be stored on an external storage device (not shown) accessible by the processor(s)  and\/or GPU , in some embodiments. Any of a variety of such storage devices may be used to store the program instructions  in different embodiments, including any desired type of persistent and\/or volatile storage devices, such as individual disks, disk arrays, optical devices (e.g., CD-ROMs, CD-RW drives, DVD-ROMs, DVD-RW drives), flash memory devices, various types of RAM, holographic storage, etc. The storage devices may be coupled to the processor(s)  and\/or GPU  through one or more storage or I\/O interfaces including, but not limited to, interconnect  or network interface , as described herein. In some embodiments, the program instructions  may be provided to the computer system  via any suitable computer-readable storage medium including memory  and\/or external storage devices described above. Memory  may also be configured to implement one or more data structures , such as one or more data structures configured to store data representing one or more input images, output images, or intermediate images as a diffusion curve image or in an alternate representation of a diffusion curve image that is scalable and portable. Data structures  may also be configured to implement one or more data structures configured to store metadata associated with those images (e.g., values of diffusible parameters and other attributes, including color and\/or blur). Data structures  may be accessible by processor(s)  and\/or GPU  when executing graphics application  or other program instructions .","As shown in , processor(s)  may be coupled to one or more of the other illustrated components by at least one communications bus, such as interconnect  (e.g., a system bus, LDT, PCI, ISA, or other communication bus type), and a network interface  (e.g., an ATM interface, an Ethernet interface, a Frame Relay interface, or other interface). The CPU , the network interface , and the memory  may be coupled to the interconnect . It should also be noted that one or more components of system  may be located remotely and accessed via a network.","As noted above, in some embodiments, memory  may include program instructions , comprising program instructions configured to implement graphics application , as described herein. Graphics application  may be implemented in various embodiments using any desired programming language, scripting language, or combination of programming languages and\/or scripting languages, e.g., C, C++, C#, Java\u2122, Perl, etc. For example, in one embodiment, graphics application  may be JAVA based, while in another embodiment, it may be implemented using the C or C++ programming languages. In still other embodiments, graphics application  (or portions thereof) may be implemented using specific graphic languages specifically for developing programs executed by specialize graphics hardware, such as GPU . In addition, graphics application  may be embodied on memory specifically allocated for use by graphics processor(s) , such as memory on a graphics board including graphics processor(s) . Thus, memory  may represent may represent any of various types and arrangements of memory, including general-purpose system RAM and\/or dedication graphics or video memory, in various embodiments. Memory  may in some embodiments also include a data store configured to store image data for one or more input images and\/or output images, in various embodiments. Other information not described herein may be included in memory  and may be used to implement the methods described herein and\/or other functionality of computer system .","Network interface  may be configured to enable computer system  to communicate with other computers, systems or machines, such as across a network. Network interface  may use standard communications technologies and\/or protocols, and may utilize links using technologies such as Ethernet, 802.11, integrated services digital network (ISDN), digital subscriber line (DSL), and asynchronous transfer mode (ATM) as well as other communications technologies. Similarly, the networking protocols used on a network to which computer system  is interconnected may include multi-protocol label switching (MPLS), the transmission control protocol\/Internet protocol (TCP\/IP), the User Datagram Protocol (UDP), the hypertext transport protocol (HTTP), the simple mail transfer protocol (SMTP), and the file transfer protocol (FTP), among other network protocols. The data exchanged over such a network by network interface  may be represented using technologies, languages, and\/or formats, such as the hypertext markup language (HTML), the extensible markup language (XML), and the simple object access protocol (SOAP) among other data representation technologies. Additionally, all or some of the links or data may be encrypted using any suitable encryption technologies, such as the secure sockets layer (SSL), Secure HTTP and\/or virtual private networks (VPNs), the international data encryption standard (DES or IDEA), triple DES, Blowfish, RC2, RC4, RC5, RC6, as well as other data encryption standards and protocols. In other embodiments, custom and\/or dedicated data communications, representation, and encryption technologies and\/or protocols may be used instead of, or in addition to, the particular ones described above.","Computer system  may also include one or more additional I\/O interfaces, such as interfaces for one or more user input devices , or such devices may be coupled to computer system  via network interface . For example, computer system  may include interfaces to a keyboard, a mouse or other cursor control device, a joystick, or other user input devices , in various embodiments. Additionally, the computer system  may include one or more displays (not shown), coupled to processors  and\/or other components via interconnect  or network interface . Such input\/output devices may be configured to allow a user to interact with graphics application  to request or invoke various image editing operations and\/or to specify various parameters, thresholds, and\/or other configurable options available to the user when creating, converting, inserting, and\/or modifying vector images while executing graphic application . It will be apparent to those having ordinary skill in the art that computer system  may also include numerous other elements not shown in .","Note that program instructions  may be configured to implement a graphic application  as a stand-alone application, or as a module of another graphics application or graphics library, in various embodiments. For example, in one embodiment program instructions  may be configured to implement graphics applications such as painting, publishing, photography, games, animation, and\/or other applications, and may be configured to edit images as part of one or more of these graphics applications. In another embodiment, program instructions  may be configured to implement the techniques described herein in one or more functions called by another graphics application executed on GPU  and\/or processor(s) . Program instructions  may also be configured to render images and present them on one or more displays as the output of an image or document editing operation and\/or to store image data for modified and\/or reconstructed images in memory  and\/or an external storage device(s), in various embodiments. For example, a graphics application  included in program instructions  may utilize GPU  when modifying, rendering, or displaying some images in some embodiments.","While various techniques have been described herein with reference to various embodiments, it will be understood that these embodiments are illustrative and are not meant to be limiting. Many variations, modifications, additions, and improvements are possible. More generally, various techniques are described in the context of particular embodiments. For example, the blocks and logic units identified in the description are for ease of understanding and are not meant to be limiting to any particular embodiment. Functionality may be separated or combined in blocks differently in various realizations or described with different terminology. In various embodiments, actions or functions described herein may be performed in a different order than illustrated or described. Any of the operations described may be performed programmatically (i.e., by a computer according to a computer program). Any of the operations described may be performed automatically (i.e., without user intervention).","While several embodiments and illustrative drawings are included herein, those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit embodiments to the particular forms disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope as defined by the appended claims. Any headings used herein are for organizational purposes only and are not meant to limit the scope of the description or the claims. As used herein, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude\u201d, \u201cincluding\u201d, and \u201cincludes\u201d mean including, but not limited to.","The embodiments described herein are meant to be illustrative and not limiting. Accordingly, plural instances may be provided for components described herein as a single instance. Boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Finally, structures and functionality presented as discrete components in example configurations may be implemented as a combined structure or component. These and other variations, modifications, additions, and improvements may fall within the scope as defined in the claims that follow.","Although the embodiments above have been described in detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 1A-1C"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3B","FIG. 3A"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 6A-6D"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 7B","FIG. 7A"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 8B","FIG. 8A"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10","sub":"i"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
