---
title: Methods and systems for cloud computing
abstract: In a method for cloud deployment, programmer input in a programming language is received, the programmer input including i) a built-in function corresponding to making electronic objects accessible on a network, and ii) a parameter indicating an electronic object. The programmer input is evaluated to cause the electronic object to be stored on a server and made accessible via a network coupled to the server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09619217&OS=09619217&RS=09619217
owner: Wolfram Research, Inc.
number: 09619217
owner_city: Champaign
owner_country: US
publication_date: 20141120
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE DISCLOSURE","BACKGROUND","SUMMARY OF THE DISCLOSURE","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/906,888, entitled Cloud Computing Platform, filed on Nov. 20, 2013, which is hereby incorporated by reference.","The present disclosure generally relates to cloud computing, and more particularly, systems that enable development and deployment of objects to the cloud.","The present availability of high-capacity networks, computing power, and storage, as well as the widespread adoption of hardware virtualization, service-oriented architecture, and autonomic and utility computing have led to a growth in cloud computing.","In cloud computing, multiple remote servers (usually a large number) are networked to allow centralized data storage and online access to computer services or resources. Cloud resources are typically shared by multiple users and also dynamically reallocated based on demand.","Platform as a Service (PaaS) is a category of cloud computing services in which a computing platform and a solution stack are provided as a service. In PaaS, a provider provides a user with tools and\/or libraries for creating an application or service to be hosted on the provider's platform, i.e., servers, storage, and other services that are required to host users' applications. Since PaaS systems typically support only a limited number of programming languages and frameworks, however, adopting a PaaS system may require utilizing an unfamiliar language and\/or programming framework. PaaS systems often are also inflexible.","Many software programs prompt a user to enter information via a computer. The user interfaces utilized to elicit user information are often referred to as forms. Writing software to generate such forms is typically time consuming.","Some electronic forms are designed as web pages so that a user can access and enter data into a form using a web browser. Web documents may contain content, markup language (e.g., Hypertext Markup Language (HTML), Extensible Hypertext Markup Language (XHTML), Extensible Markup Language (XML), etc.) elements, stylesheets (e.g., Cascading Style Sheets (CSS)), scripts (e.g., JAVASCRIPT\u00ae, etc.). Designing web documents using HTML, XHTML, etc., can be time consuming.","WYSIWYG (what you see is what you get) website builders are tools that provide a visual interface for website design; that is, the user of a WYSIWYG website builder is not required to learn code. Such website builders have a gentle learning curve and allow novices to build a website and get it running live on the Internet relatively quickly, although designing web documents using a WYSIWYG builder is still time consuming. Additionally, website builders are inflexible and have limitations with respect to creating web pages that differ from a fixed set of templates.","On the other hand, web editors are tools to facilitate manual construction of websites, and are highly flexible as compared to website builders. As with other web design tools, designing web documents using a web editor is time consuming. Additionally, web editors typically require users to have significant knowledge of web page coding and languages (e.g., HTML, XML, CSS, JAVASCRIPT\u00ae, etc.).","In one embodiment, a method for cloud deployment includes receiving, at one or more computers, programmer input in a programming language, the programmer input including i) a built-in function corresponding to making electronic objects accessible on a network, and ii) a parameter indicating an electronic object; and evaluating, at one or more computers, the programmer input to cause the electronic object to be stored on a server and made accessible via a network coupled to the server.","In another embodiment, a system for cloud deployment comprises one or more processors; and one or more memory devices coupled to the one or more processors, the one or more memories storing machine readable instructions that, when executed by the one or more processors, cause the one or more processors to: receive programmer input in a programming language, the programmer input including i) a built-in function corresponding to making electronic objects accessible on a network, and ii) a parameter indicating an electronic object, and evaluate the programmer input to cause the electronic object to be stored on a server and made accessible via a network coupled to the server.","In yet another embodiment, a method for cloud deployment comprises in response an evaluation of programmer input in a programming language, the programmer input including i) a built-in function corresponding to making electronic objects accessible on a network, and ii) a parameter indicating an electronic object, storing the electronic object on a database system coupled to a server, making the stored electronic object accessible via a network coupled to the server, and providing, at one or more computers, a handle to the electronic object to enable accessing the electronic object via the network.","In still another embodiment, a system comprises one or more processors; and one or more memory devices coupled to the one or more processors, the one or more memories storing machine readable instructions that, when executed by the one or more processors, cause the one or more processors to: in response an evaluation of programmer input in a programming language, the programmer input including i) a built-in function corresponding to making electronic objects accessible on a network, and ii) a parameter indicating an electronic object, store the electronic object on a database system coupled to a server, make the stored electronic object accessible via a network coupled to the server, and provide a handle to the electronic object to enable accessing the electronic object via the network.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 1","b":"100"},"In various embodiments, the system  cloud-based computing architecture facilitates integration between and among desktop applications, mobile applications, web-based applications, hobbyist applications, etc. For example, in various embodiments, the system  supports one of or any suitable combination of two or more of programming infrastructure (e.g., various software development activities); data analytics infrastructure (e.g., analysis of big data); remote processing infrastructure (e.g., including cloud storage and execution of user-defined functions and computer code); programming language translation\/generation infrastructure (e.g., providing translation between programming languages and\/or automated generation of computer code); application programming interface (API) infrastructure (e.g., operable to automatically generate, implement, and\/or document APIs according to use specifications; and other infrastructure as described below. The infrastructure may be software or hardware based infrastructure, or a combination of both software and hardware infrastructure.","In an embodiment, the system  includes one or more computers, such as a computer . The computer  includes one or more processors  and one or more memory devices . The computer  also includes, or is coupled to, one or more input devices . Additionally, the computer  includes, or is coupled to, one or more display devices . In some embodiments, the computer  includes one or more network interface devices . The one or more processors , the one or more memory devices , the one or more input devices  (sometime referred to herein as \u201cthe input device \u201d for brevity), the one or more display devices  (sometime referred to herein as \u201cthe display device \u201d for brevity), the one or more network interface devices  (sometime referred to herein as \u201cthe network interface device \u201d for brevity), etc., may be communicatively coupled via one or more busses  (sometime referred to herein as \u201cthe bus \u201d for brevity). In other embodiments, the computer  may have other suitable structures and\/or components.","The one or more processors  (sometime referred to herein as \u201cthe processor \u201d for brevity) may comprise one or more general purpose processors (e.g., a central processing unit), one or more special purpose processors (e.g., a co-processor, a graphics processor, etc.). At least one of the one or more processors  executes machine readable instructions stored in the memory . The one or more memory devices  (sometime referred to herein as \u201cthe memory \u201d for brevity) include one or more of random access memory (RAM), read only memory (ROM), a FLASH memory, a magnetic disk drive, an optical disk drive, etc.","The one more input devices  include one or more suitable input devices such as a keyboard, a key pad, a mouse, a trackball, one or more buttons, a touch screen that overlays a display device, etc. The one or more network interface devices  comprise one or more suitable network interface devices (NICs) such as a wired network NIC, a wireless network NIC, etc.","In some embodiments, the memory  may store a computational application  such as the MATHEMATICA\u00ae computational application from Wolfram Research, Inc., a spreadsheet application, etc., where the computational application  is configured to create cloud objects, deploy objects to a cloud server system, and\/or utilize cloud services provided by the cloud server system. For example, in an embodiment, the computational application  may include a cloud-based development front end  that enables creation of cloud objects, deployment of objects to the cloud server system, and\/or utilization of cloud services provided by the cloud server system, according to various embodiments. In some embodiments, the computational application  is configured to provide an electronic user interface such as a workspace (e.g., a notebook, a spreadsheet, a document, etc.) in which a user can enter software code and\/or functions to be evaluated, cause the functions to be evaluated, and\/or view results of the evaluations.","In some embodiments, however, the computational application  is omitted and the cloud-based development front end  is a standalone application and\/or module. In some embodiments, the cloud-based development front end  is incorporated into another suitable application different than the computational application .","In various embodiments, the computer  comprises a desktop computer, a workstation, a laptop computer, a tablet computer, a smart phone, a personal digital assistant, a gaming system, a server, etc.","In some embodiments, the computer  (and\/or other computers (not shown) are coupled to a network . The network  may comprise one or more of a local area network (LAN), a wide area network (WAN), a metropolitan area network (MAN), a mobile communications network, an intranet, an extranet, the Internet, etc.","In some embodiments, the system  may include one or more servers such as the server .  illustrates a single server  for brevity, but the system  includes multiple other similarly configured servers in some embodiments. In some embodiments, multiple servers (including the server ) are networked together to provide online access to data storage and computer services or resources via the network . One server  will be discussed in detail with respect to , and other servers (if included) have the same or a similar suitable structure, in some embodiments.","The server  includes one or more processors  and one or more memory devices . The server  also may include, or be coupled to, one or more input devices . The server  includes one or more network interface devices . The one or more processors , the one or more memory devices , the one or more input devices  (sometime referred to herein as \u201cthe input device \u201d for brevity), the one or more network interface devices  (sometime referred to herein as \u201cthe network interface device \u201d for brevity), etc., may be communicatively coupled via one or more busses  (sometime referred to herein as \u201cthe bus \u201d for brevity). In other embodiments, the server  may have other suitable structures and\/or components.","The one or more processors  (sometime referred to herein as \u201cthe processor \u201d for brevity) may comprise one or more general purpose processors (e.g., a central processing unit), one or more special purpose processors (e.g., a co-processor, a graphics processor, etc.). At least one of the one or more processors  executes machine readable instructions stored in the memory . The one or more memory devices  (sometime referred to herein as \u201cthe memory \u201d for brevity) include one or more of random access memory (RAM), read only memory (ROM), a FLASH memory, a magnetic disk drive, an optical disk drive, etc.","The one more input devices  include one or more suitable input devices such as a keyboard, a key pad, a mouse, a trackball, one or more buttons, a touch screen that overlays a display device, etc. The one or more network interface devices  comprise one or more suitable NICs such as a wired network NIC, a wireless network NIC, etc. The server  is communicatively coupled to the computer  and other computers (not shown) via the communication network . The server  may be communicatively coupled to other cloud servers (not shown) via another network (not shown) and\/or the network , in various embodiments.","Additionally, in some embodiments, the server  may be communicatively coupled to a cloud storage database system , which may comprise one or more suitable databases. The cloud storage database system  stores objects (cloud objects)  that are accessible, via the server  or another server, to computers (e.g., the computer ) via the network .","In an embodiment, the memory  may store a cloud-based development system . In various embodiments, the cloud-based development system  is configured to interface with the cloud-based development front end  to transfer objects from the computer , to store objects in the cloud storage database , and\/or to make objects  in the cloud storage database  accessible to computers via the network . In some embodiments, the computational application  is implemented as a kernel running on the server  and a front end running on the computer . In such embodiments, the cloud-based development system  includes the kernel. In some embodiments, the computational application  is included in the cloud-based development system  and the computer  runs a thin client such as a web browser. In some embodiments, aspects of the computational application  running on the server  (e.g., the kernel) are separate from the cloud-based development system .","In some embodiments, a user can utilize the computational application  and\/or the cloud-based development front end , running on the computer , to create objects that are to be deployed to the cloud. The cloud-based development front end  may then interface with the cloud-based development system  to transfer the created objects to the server . The server  may then store the objects in the cloud storage database  and make the objects available to one or more computers via the network , or another network (not shown).","In some embodiments, the server  may be communicatively coupled to an answering system and\/or natural language processing system such as described in U.S. Pat. No. 8,589,869 and\/or U.S. patent application Ser. No. 13\/678,168, filed Nov. 15, 2012, which are hereby incorporated by reference herein in their entireties. In some embodiments, the cloud-based development system  may interface with such systems and utilize natural language processing capabilities of such systems to process user input, for example.","In some embodiments, the server  utilizes virtualization techniques.","In various embodiments, a user can create a document, notebook, spreadsheet, program, etc., that is executed on the computer  (or another computer, now shown) and that is configured to utilize cloud objects . For example, in some embodiments, a notebook, spreadsheet, program, etc., executed on the computer  stores data as a cloud object . As another example, in some embodiments, a document, notebook, spreadsheet, program, etc., executed on the computer  accesses data stored as a cloud object . As yet another example, in some embodiments, a notebook, spreadsheet, program, etc., executed on the computer  utilizes a cloud object  to perform a function and\/or computation, a result of which is utilized by the notebook, spreadsheet, program, etc., which is executed on the computer .","Thus, in various embodiments, the cloud-based development system  may include various functional modules such one of or any suitable combination of two or more of a computational kernel (e.g., a MATHEMATICA\u00ae kernel) for performing pre-defined functions and for executing computer-readable instructions based on an associated language (e.g., the Wolfram Language\u2122); a data analysis engine configured to classify data in one or more data sets and\/or to perform analysis, sometimes in cooperation with the computational kernel or other functional modules, of data in one or more data sets; a module to generate code in different programming languages; a module to generate and\/or implement APIs; a module to interpret free-form data and\/or convert the free-form data into structured data; a module to classify data sets; a module to facilitate cloud execution of various computational functions requested from external devices (e.g., other computers, servers, and\/or embedded devices) by, for example, receiving and answering function calls originating in software executing on those external devices; a module to generate and\/or update reports based on various datasets stored in the cloud or passed to the functional module from an external device; etc.","Cloud Computing","In various embodiments, a programming language includes built-in functions that facilitate one or more of deployment of objects to the cloud, access to objects in the cloud, and\/or manipulation of objects in the cloud. In various embodiments, one or more of the computational application , the cloud-based development front end , and the cloud-based development system module  are configured to evaluate such built-in functions to deploy objects to the cloud, access objects in the cloud, and\/or manipulate objects in the cloud.","For example, in an embodiment, a CloudDeploy function enables a programmer to deploy an expression to the cloud, where the deployed expression can be software code that can be executed (e.g., by the server ), data that can be accessed and\/or manipulated, etc. For example, in various embodiments, one or more of the following syntaxes are utilized:","CloudDeploy[expr]","In this example, an expression expr is deployed as a cloud object, and the server  assigns a universal resource identifier (URI) to the cloud object. In some embodiments, the URI may include a universally unique identifier (UUID), such as the UUID standardized by the Open Software Foundation (OSF) as part of the Distributed Computing Environment (DCE). The URI may be a universal resource locator (URL), in some embodiments. Evaluation of this function returns a handle to the cloud object. The cloud object can then be accessed using the handle.","CloudDeploy[expr, \u201curi\u201d]","In this example, an expression expr is deployed as a cloud object at a given URI.","CloudDeploy[expr, CloudObject[\u201curi\u201d]]","In this example, an expression expr is deployed to a given cloud object. CloudObject is a handle to a cloud object at a specified URI.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 2A","FIG. 1","FIG. 2A","FIG. 2A","FIG. 2B","FIG. 2A"],"b":"152"},"In some embodiments, CloudDeploy can be utilized with one or more suitable options. For example, in some embodiments, parameters can be utilized with CloudDeploy to specify when the deployed object is to be evaluated. For instance, in some embodiments, one or more parameters can be specified to indicate one or more of i) that a deployed object is to be evaluated when the object is accessed on the web, ii) that the deployed object is to be dynamically auto refreshed on the web, iii) that the deployed object is to be reevaluated on a schedule, etc. As another example, one or more parameters can be specified to indicate one or more of i) the object is to be private to the user (e.g., the object can only be accessed by the user), ii) the object is to be public (e.g., the object is publicly available on the web), iii) the object is to be available to specified users, iv) the object is to be available to one or more classes of users, etc.","In some embodiments, a programming language provides built-in functions to allow programs to utilize cloud storage for retrieving input to be processed, storing variables, storing generated output, etc., for example. For instance, in an embodiment, a CloudPut function enables a programmer to write an expression to the cloud, where the expression can be software code that can be executed (e.g., by the server ), data that can be accessed and\/or manipulated, etc. For example, in various embodiments, one or more of the following syntaxes are utilized:","CloudPut[expr]","In this example, an expression expr is written to a new cloud object, and the server  assigns a universal resource identifier (URI) to the cloud object. Evaluation of this function returns a handle to the object. The cloud object can then be accessed using the handle.","CloudPut[expr, \u201curi\u201d]","In this example, an expression expr is written to a cloud object at a given URI.","CloudPut[expr, CloudObject[\u201curi\u201d]]","In this example, an expression expr is written to a given cloud object.","As another example, in an embodiment, a CloudGet function enables a programmer to read an object in the cloud, and evaluate expression(s) included in the object, where a result of a last evaluated expression is returned. For example, in various embodiments, one or more of the following syntaxes are utilized:","CloudGet[\u201curi\u201d]","In this example, an object in the cloud at a given URI is read, and each expression included in the object is evaluated. A result of a last evaluated expression is returned.","CloudGet[CloudObject[\u201curi\u201d]]","In this example, a given cloud object is read.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":"152"},{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 4","FIG. 1","FIG. 4","FIG. 1"],"b":["400","400","102","152","400","102","400","102","152"]},"In some embodiments, the method  may be implemented as part of a software program being executed on a computer, such as the computer , the server  running a kernel, etc. In some embodiments, the method  may be implemented by the computational application  being executed on the computer , a kernel of the computational application  being executed on the server , etc. In some embodiments, the method  may be implemented, at least partially, by the cloud-based development front end , the cloud-based development system , or a combination of the two.","At block , programmer input in a programming language is received, the programmer input including i) a function corresponding to making electronic objects accessible on a network, and ii) a parameter indicating an electronic object. For example, in an embodiment, a programmer enters the programming input via a user interface of or coupled to the computer . In some embodiments, the programmer input may be entered into a notebook, workspace, etc., of the computational application . In some embodiments, the function may be a built-in function of the programming language. In an embodiment, the function is the CloudDeploy function.","In various embodiments, the electronic object indicated by the parameter may include one or more of data, further programming input in the programming language or another programming language, data, a file, a document, an undeployed web page, etc.","In various embodiments, the programmer input includes one or more other parameter regarding how the object is to be deployed. For example, in various embodiments, the programmer input may include a further parameter indicating how the electronic object is to be evaluated by the server, a further parameter indicating to the server that the object input is to be evaluated by the server each time the electronic object is accessed, a further parameter indicating to the server that the object is to be evaluated by the server according to a schedule, a further parameter indicating to the server that the object is to be dynamically evaluated by the server, etc.","As another example, in various embodiments, the programmer input may include a further parameter indicating permission information for access to the object after deployment.","As another example, in various embodiments, the programmer input may include a further parameter indicating a location at which the object is to be deployed, such a handle to an already deployed object, a URI, etc.","At block , the programmer input is evaluated to cause the electronic object to be stored on a server and made accessible via a network coupled to the server. For example, in an embodiment, the programmer input is evaluated at the computer  by the computational application . As another example, in an embodiment, block  includes, additionally or alternatively, evaluating the programmer input at the server  by a server-side portion (e.g., a kernel, etc.) of the computational application .","In an embodiment, block  includes the computer , in response to evaluating the programmer input, sending a message to the server  via the network , the message requesting the server  to deploy the object in the cloud storage  and to make the object accessible via the network  (or another network coupled to the cloud storage ). In various embodiments and\/or scenarios, the message includes the object or an indicator of where the object may be obtained, such as a pointer to where the object is stored in a memory (e.g., the memory , the cloud storage , etc.), a URI corresponding to the object, etc.","In some embodiments and\/or scenarios, the message may contain one or more further parameters such as a further parameter indicating how the electronic object is to be evaluated by the server, a further parameter indicating to the server that the object input is to be evaluated by the server each time the electronic object is accessed, a further parameter indicating to the server that the object is to be evaluated by the server according to a schedule, a further parameter indicating to the server that the object is to be dynamically evaluated by the server, etc. As another example, in some embodiments, the message may contain a further parameter indicating permission information for access to the object after deployment.","In an embodiment in which the programmer input is evaluated at the server , block  may include the server  extracting from the programmer input the object or an indicator of where the object may be obtained, such as a pointer to where the object is stored in a memory (e.g., the memory , the cloud storage , etc.), a URI corresponding to the object, etc. In an embodiment in which the programmer input is evaluated at the server , block  may include the server  extracting from the programmer input further parameters such as described above.","In response to evaluating the programmer input and\/or receiving the message discussed above, the server  may store the object in the cloud storage  and make the object accessible via the network  (or another network), in various embodiments. In an embodiment, the server  may determine where in the cloud storage  the object is to be deployed. If provided in the message and\/or the programmer input, the server  may utilize a parameter included in the programmer input that indicates a location at which the object is to be deployed, in an embodiment.","If provided in the message and\/or the programmer input, the server  may utilize one or more parameters specifying how the object is to be deployed such as how often, when, etc., the object is to be evaluated when deployed, permission information for access to the object, etc., and may the server  may deploy the object according to the parameters.","At block , in response to evaluating the programmer input, a handle to the deployed electronic object is received, the handle to enable accessing the electronic object via the network. In various embodiments, the handle may comprise a pointer, a web page address, a Hypertext Transfer Protocol (HTTP) address, a URI, a universal resource locator (URL), etc. In an embodiment, the server  may send the handle to the computer  via the network . In an embodiment, the server  may include the handle in a subsequent message that is responsive to a message sent from the computer  to the server  that requested the server  to deploy the object in the cloud storage  and to make the object accessible via the network  (or another network).","In some embodiments, block  is omitted. For example, in some embodiments, the server may publish the handle, URI, URL, etc., to a repository (e.g., in the cloud storage  or another suitable location) where the handle, URI, URL, etc., can be retrieved.",{"@attributes":{"id":"p-0126","num":"0125"},"figref":["FIG. 5","FIG. 1","FIG. 5","FIG. 1"],"b":["500","500","102","152","500","102","500","102","152"]},"In some embodiments, the method  may be implemented as part of a software program being executed on a computer, such as the computer , the server  running a kernel, etc. In some embodiments, the method  may be implemented by the computational application  being executed on the computer , a kernel of the computational application  being executed on the server , etc. In some embodiments, the method  may be implemented, at least partially, by the cloud-based development front end , the cloud-based development system , or a combination of the two.","At block , programmer input in a programming language is received, the programmer input including i) a function corresponding to storing electronic objects to network-accessible storage, and ii) a parameter indicating an electronic object. For example, in an embodiment, a programmer enters the programming input via a user interface of or coupled to the computer . In some embodiments, the programmer input may be entered into a notebook, workspace, etc., of the computational application . In some embodiments, the function may be a built-in function of the programming language. In an embodiment, the function is the CloudPut function.","In various embodiments, the electronic object indicated by the parameter may include one or more of data, further programming input in the programming language or another programming language, data, a file, a document, an undeployed web page, etc.","In various embodiments, the programmer input includes one or more other parameters regarding storing of the object in the network-accessible storage. For example, in various embodiments, the programmer input may include a further parameter indicating a location at which the object is to be stored, such a handle to an already stored object, a URI, etc.","At block , the programmer input is evaluated to cause the electronic object to be stored in the network-accessible storage. For example, in an embodiment, the programmer input is evaluated at the computer  by the computational application . As another example, in an embodiment, block  includes, additionally or alternatively, evaluating the programmer input at the server  by a server-side portion (e.g., a kernel, etc.) of the computational application .","In an embodiment, block  includes the computer , in response to evaluating the programmer input, sending a message to the server  via the network , the message requesting the server  to store the object in the cloud storage . In various embodiments and\/or scenarios, the message includes the object or an indicator of where the object may be obtained, such as a pointer to where the object is stored in a memory (e.g., the memory , the cloud storage , etc.), a URI corresponding to the object, etc.","In some embodiments and\/or scenarios, the message may contain one or more further parameters regarding storage of the object in the network-accessible storage, such as a parameter indicating a location at which the object is to be stored, such a handle to an already stored object, a URI, etc.","In an embodiment in which the programmer input is evaluated at the server , block  may include the server  extracting from the programmer input the object or an indicator of where the object may be obtained, such as a pointer to where the object is stored in a memory (e.g., the memory , the cloud storage , etc.), a URI corresponding to the object, etc. In an embodiment in which the programmer input is evaluated at the server , block  may include the server  extracting from the programmer input further parameters such as described above.","In response to evaluating the programmer input and\/or receiving the message discussed above, the server  may store the object in the cloud storage , in an embodiment. In an embodiment, the server  may determine where in the cloud storage  the object is to be stored. If provided in the message and\/or the programmer input, the server  may utilize a parameter included in the programmer input that indicates a location at which the object is to be stored, in an embodiment.","At block , in response to evaluating the programmer input, a handle to the stored electronic object is received. The handle may enable accessing the electronic object via the network, in some embodiments. In various embodiments, the handle may comprise a pointer, a web page address, a Hypertext Transfer Protocol (HTTP) address, a URI, a universal resource locator (URL), etc. In an embodiment, the server  may send the handle to the computer  via the network . In an embodiment, the server  may include the handle in a subsequent message that is responsive to a message sent from the computer  to the server  that requested the server  to deploy the object in the cloud storage  and to make the object accessible via the network  (or another network).","In some embodiments, block  is omitted. For example, in some embodiments, the handle, URI, URL, etc., may be published to a repository (e.g., in the cloud storage  or another suitable location) where the handle, URI, URL, etc., can be retrieved.",{"@attributes":{"id":"p-0138","num":"0137"},"figref":["FIG. 6","FIG. 1","FIG. 6","FIG. 1"],"b":["600","600","102","152","600","102","600","102","152"]},"In some embodiments, the method  may be implemented as part of a software program being executed on a computer, such as the computer , the server  running a kernel, etc. In some embodiments, the method  may be implemented by the computational application  being executed on the computer , a kernel of the computational application  being executed on the server , etc. In some embodiments, the method  may be implemented, at least partially, by the cloud-based development front end , the cloud-based development system , or a combination of the two.","At block , programmer input in a programming language is received, the programmer input including i) a function corresponding to retrieving electronic objects from network-accessible storage, and ii) a parameter indicating an electronic object. For example, in an embodiment, a programmer enters the programming input via a user interface of or coupled to the computer . In some embodiments, the programmer input may be entered into a notebook, workspace, etc., of the computational application . In some embodiments, the function may be a built-in function of the programming language. In an embodiment, the function is the CloudGet function.","In various embodiments, the electronic object indicated by the parameter may include one or more of data, further programming input in the programming language or another programming language, data, a file, a document, a web page, etc.","In various embodiments, the programmer input includes one or more other parameters regarding retrieval of the object from the network-accessible storage. For example, in various embodiments, the programmer input may include a further parameter indicating a location at which the object is stored, such a handle to the object, a URI, etc.","At block , the programmer input is evaluated to cause the electronic object to be retrieved from the network-accessible storage. For example, in an embodiment, the programmer input is evaluated at the computer  by the computational application . As another example, in an embodiment, block  includes, additionally or alternatively, evaluating the programmer input at the server  by a server-side portion (e.g., a kernel, etc.) of the computational application .","In an embodiment, block  includes the computer , in response to evaluating the programmer input, sending a message to the server  via the network , the message requesting the server  to retrieve the object from the cloud storage . In some embodiments and\/or scenarios, the message may contain one or more a parameter regarding retrieval of the object from the network-accessible storage, such as a parameter indicating a location at which the object is stored, such a handle to an already stored object, a URI, etc.","In an embodiment in which the programmer input is evaluated at the server , block  may include the server  extracting from the programmer input a parameter indicating from where in the storage  the object may be obtained, such as a pointer to where the object is stored in the cloud storage , a URI corresponding to the object, etc.","In response to evaluating the programmer input and\/or receiving the message discussed above, the server  may retrieve the object from the cloud storage , in an embodiment. In an embodiment, the server  may determine where in the cloud storage  the object is stored. In some embodiments, the server  may also evaluate the object. For example, if the object comprises an expression and\/or software code in the language of the computation application , the server  may (e.g., using a kernel of the computational application ) evaluate the expression and\/or the software code.","At block , in response to evaluating the programmer input, the retrieved object, or an evaluation of the retrieved object, is received, according to various embodiments. In an embodiment, the server  may send the object (or the evaluation of the object) to the computer  via the network . In an embodiment, the server  may include the object (or the evaluation of the object) in one or more subsequent messages that are responsive to a message sent from the computer  to the server  that requested the server  to retrieve the object from the cloud storage .","In some embodiments, messaging such as discussed above with respect to  is not utilized.","In some embodiments, cloud objects may be utilized by the computational application  running at the computer . In some embodiments, a CloudSave function is provided for saving definitions associated with a symbol to a cloud object. For instance, in an embodiment, the CloudSave function enables a programmer to save symbol definitions to the cloud. For example, in various embodiments, one or more of the following syntaxes are utilized:","CloudSave[symbol]","In this example, definitions associated with the specified symbol are saved to a new anonymous cloud object, and the server  assigns URI to the cloud object. Evaluation of this function returns a handle to the object. The cloud object can then be accessed using the handle.","CloudSave[\u201cform\u201d]","In this example, definitions associated with symbols whose name match the string pattern \u201cform\u201d are saved to the cloud.","CloudSave[\u201ccontext\u201d]","In this example, definitions associated with symbols in the specified context are saved to the cloud.","CloudSave[{object, object, . . . }]","In this example, definitions associated with several objects are saved to the cloud.","CloudSave[symspec,\u201curi\u201d]","In this example, definitions associated with symspec are saved to the cloud object at a given URI.","CloudSave[symspec, CloudObject[\u201curi\u201d]]","In this example, definitions associated with symspec are saved to a specified cloud object.","As an illustrative example, a user may enter \u201cf[x_]:=x^2\u201d in a notebook to define a function f as the square of x. The user may then save the function to the cloud, e.g., by entering \u201cobj=CloudSave[f]. If f is later modified in the notebook, the user can restore the function f by entering CloudGet[obj]. Then, if the user were to enter \u201cf[2]\u201d, the computational application would return \u201c4\u201d, i.e., the square of two.","In some embodiments, a CloudSymbol object may represent a symbol whose value is persistently stored in the cloud. For instance, in an embodiment, the CloudSymbol function enables a programmer to persistently save symbols to the cloud. For example, in various embodiments, one or more of the following syntaxes are utilized:","CloudSymbol[\u201cname\u201d]","In this example, a named symbol is persistently stored in the cloud.","CloudSymbol[obj]","In this example, a persistent symbol corresponding to the cloud object \u201cobj\u201d is represented.","As an illustrative example, a user may enter \u201cCloudSymbol[\u201cx\u201d]=!10\u201d in a notebook. Upon evaluation, a cloud symbol \u201cx\u201d with a value set to !10 is stored in the cloud storage . Later, if the user utilizes the object CloudSymbol[\u201cx\u201d] in the notebook or another notebook, the computational application  will retrieve the value of the object, e.g., !10, or 3628800.","In some embodiments, a CloudFunction is provided for having functions evaluated in the cloud (e.g., by the server ). For instance, in an embodiment, the CloudFunction enables a programmer to have specified functions evaluated in the cloud rather than on the computer . For example, in various embodiments, one or more of the following syntaxes are utilized:","CloudFunction[func]","In this example, a function \u201cfunc[args]\u201d is evaluated in the cloud. Evaluation of this function returns a result of the evaluation of func[args].","CloudFunction[CloudObject[ . . . ]]","In this example, a function applies the contents of a specified cloud object.","As an illustrative example, a user may enter \u201cCloudFunction[#1+#2 &] [3, 4]\u201d in a notebook. Upon evaluation in the cloud, a result \u201c7\u201d is returned. As another example, a user may enter \u201cfunc=CloudPut[Factorinteger[#] &]. Upon evaluation, a cloud object \u201cfunc\u201d is returned. Then, if the user entered CloudFunction[func] [42]\u201d in the notebook, a result {{2, 1}, {3, 1}, {7, 1}} is returned.","In some embodiments, a CloudEvaluate function is provided for having expressions evaluated in the cloud (e.g., by the server ). For instance, in an embodiment, the CloudEvaluate function enables a programmer to have specified expressions evaluated in the cloud rather than on the computer . An example syntax may be:","CloudEvaluate[expr]","In this example, a specified expression is evaluated in the cloud. Evaluation of the expression returns a result of the evaluation.","As an illustrative example, a user may enter \u201cCloudEvaluate[$MachineID]\u201d in a notebook run on the computer . Upon evaluation in the cloud, a unique identifier of a machine (e.g., server ) that evaluated the object \u201cMachineID\u201d is returned, which is not the unique identifier of the computer .","In some embodiments, web sites and other server-based applications and\/or systems can manipulate data and\/or execute\/evaluate functions and methods stored on the cloud storage . For example, software executing on a different server may call functions stored on the cloud storage  (perhaps specifying parameters associated with the function), the server  may evaluate the functions, and the server  may transmit the results back to the different server. This may allow the different server to offload processing to the cloud platform. Additionally, the different server may use the techniques, systems, and\/or example functions discussed above to store to and\/or retrieve from the cloud platform data, variables, objects, etc. as part of the server\/website functionality.","As one example of the utility of such an arrangement, a user at a desktop computer may be running software on the desktop computer that stores resulting data to the cloud (e.g., using the CloudPut function, the CloudSave function, etc.). A function or method executing on the cloud platform may be manipulating or analyzing the saved result data (e.g., classifying it, formatting it, performing additional analysis, etc.). At the same time, a web server may be providing the manipulated or analyzed data to a user or to a function (e.g., a JAVA function) executing on the web site. The web server may use the CloudGet function to retrieve the data from the cloud platform, which will be the most recent data saved to the cloud platform, according to some embodiments.","Similarly, programs running locally on a desktop computer, mobile device, or the like, can call functions stored in\/on the cloud platform. The cloud platform can execute the functions and provide results to the calling program, thereby augmenting the processing power of the desktop computer, mobile device, etc. with the superior processing power of the cloud platform (or at least decreasing the processing load on the desktop computer, mobile device, etc.).","Similarly, data, objects, variables, functions, methods, etc. stored on the cloud platform can be retrieved and used in local processor tasks on a desktop computer, mobile device, and the like. The results of the local processor tasks may be saved locally and\/or back to the cloud platform.","Forms Generation","Referring again to , the system  may facilitate efficient generation of electronic forms for eliciting user information (and processing that information, in some embodiments), and deployment of such forms to the web, according to some embodiments. For example, the cloud-based development system  and\/or the cloud-based development front end  may include a forms generation module that enables efficient and flexible generation of electronic forms. Embodiments of a forms generation module and techniques for generating forms are discussed below. In some embodiments, such modules and techniques may be implemented by the system  of . In other embodiments, such modules and techniques may be implemented by systems different than the system of .",{"@attributes":{"id":"p-0185","num":"0184"},"figref":"FIG. 7","b":["700","700"]},"In an embodiment, the system  includes a computer similarly structured to the computer  of . For purposes of brevity, like-numbered components are not described in detail.","In an embodiment, the memory  may store a forms generation module  that facilitates generation of electronic forms, as will be described in more detail below. In an embodiment, the forms generation module  comprises software instructions that, when executed by the processor , causes the processor to evaluate programming input from a programmer to generate an electronic form object. As an illustrative example, the electronic form object is generated i) to include HyperText Markup Language (HTML) elements and ii) such that a web browser can generate a web page form from the electronic form object, according to a specific embodiment. In other embodiments, the electronic form object is generated to include Extensible Hypertext Markup Language (XHTML) elements, Extensible Markup Language (XML) elements, style sheets (e.g., Cascading Style Sheets (CSS)), scripts (e.g., JAVASCRIPT\u00ae, etc.), and such that a suitable application (e.g., a web browser, a web browser with an appropriate plug in, etc.) can generate a suitable electronic form (e.g., a web page form) from the electronic form object.","As another example, the electronic form object is generated i) to include Computable Document Format (CDF) code, and ii) such that a CDF player (available from Wolfram Research, Inc.) can generate an electronic form from the electronic form object, according to an embodiment.","As another example, the electronic form object is generated i) to include a spreadsheet application macro, and ii) such that the spreadsheet application can render the electronic form, e.g., using spreadsheet elements.","In some embodiments, the electronic form object is generated such that a computational application (e.g., MATHEMATICA\u00ae or another suitable application) prompts the user to provide input via one or more command line prompts. In some embodiments, electronic form object is generated such that a suitable application (e.g., having or utilizing voice synthesizer technology and\/or voice recognition technology) prompts the user with audio prompts to provide voice input. Thus, in some embodiments, the electronic form need not be displayed on a display device and\/or need not utilize graphical user interface (GUI) elements.","In some embodiments, generated electronic form objects  are stored in the memory .","In some embodiments, the forms generation module  is a component of a compiler, i.e., a computer program that transforms source code written in a programming language into another computer language, typically to create an executable program. In some embodiments, the forms generation module  is a component of an interpreter, i.e., a computer program that directly executes, i.e. performs, instructions written in a programming or scripting language (referred to herein for brevity as a \u201cprogramming language\u201d), without first compiling the instructions into a machine language program. Thus, in some embodiments, the programming input evaluated by the forms generation module  includes software instructions written in a programming language.","In some embodiments, the forms generation module  is a component of a software application such as a computational application. For example, the forms generation module  may be a component of the MATHEMATICA\u00ae computational software program developed by Wolfram Research, Inc., according to a specific embodiment.","In an embodiment, the memory  may store a web browser . In an embodiment, the web browser , when executed by the processor , can generate web page forms from at least some electronic form objects , according to an embodiment. For example, in an embodiment, the web browser  is utilized by a programmer for visualizing, adjusting, modifying, etc., electronic forms generated using the forms generation module .",{"@attributes":{"id":"p-0195","num":"0194"},"figref":["FIG. 8","FIG. 1"],"b":["800","800","800","100"]},"In an embodiment, the memory  may store some or all of the forms generation module  discussed above. For example, in an embodiment, the forms generation module  is implemented as a client-server system, and the memory  stores a server portion of the forms generation module , whereas the memory  of the computer  stores a client portion of the forms generation module . In an embodiment, a programmer uses the computer  to provide programming input to the server  via the network . The server  then generates an electronic form object, and the electronic form object is stored in a memory. For example, in an embodiment, the electronic form object is stored in the memory  and\/or the cloud storage . In some embodiments, the cloud storage  is omitted. In another embodiment, the electronic form object is transmitted to the computer , via the network , and is stored in the memory . In another embodiment, the electronic form object is stored in a memory of another server system (e.g., a web server (not shown)) so that the electronic form object is accessible via the Internet, for example.",{"@attributes":{"id":"p-0197","num":"0196"},"figref":["FIG. 9","FIG. 1","FIG. 7","FIG. 8","FIGS. 7 and 8"],"b":["900","900","100","102","800","900","900","100","102","800"]},"At block , programmer input in a programming language is received at one or more computers. For example, programmer input is received, via one or more input devices , at the computer . In some embodiments, the computer  transmits the programmer input to the server  via the network , and thus the programmer input is received at the server . The programmer input includes i) specification data corresponding to an electronic form to be generated, and ii) a parameter that indicates a function to be applied to user input.",{"@attributes":{"id":"p-0199","num":"0198"},"figref":"FIG. 10A","b":["1000","904","1000","1004","1004","1008","1012","1008","1008","1008"]},"Referring again to , at block , the programmer input is evaluated at one or more computers to generate an electronic form object that includes one or more user-interface mechanisms for receiving the user input. For example, the forms generation module  may evaluate the programmer input, in an embodiment. In some embodiments, the programmer input is fully evaluated in response to receiving the programmer input. In other embodiments, however, the programmer input is only partially evaluated, and full evaluation is not completed until a later time, such as upon or just before cloud deployment of the electronic form object, or upon or just before the function indicated by the parameter  is to be applied in response to user input.","Block  may include evaluating the programmer input to generate code that is capable of being processed by an application (e.g., a web browser or another suitable application) to render the electronic form such as on a display device.","Block  may include evaluating the specification data to determine general characteristics of the form to be generated, according to an embodiment. For example, in some embodiments, determining general characteristics of the form to be generated may include determining one or more of i) how many user inputs are to be received by the form, ii) respective data types of the user inputs, etc. Referring to , for example, the specification data  is evaluated to determine that the form is to elicit two elicit two inputs: \u201cfirst\u201d and \u201csecond\u201d. Additionally, evaluation of the specification data  reveals that the \u201cfirst\u201d input will be of a data type \u201cString\u201d, and the \u201csecond\u201d will be of a data type \u201cNumber\u201d. Thus, in an illustrative embodiment, the forms generation module  evaluates the specification data  to determine that the form requires two inputs: one to elicit user input of data type \u201cString\u201d, and another to elicit user input of data type \u201cNumber\u201d. Based on the evaluation of the specification data, code is generated for an electronic form that conforms to the general characteristics corresponding to the specification data . The generated code is capable of being processed by an application to render the electronic form (having the general characteristics).","Also, block  may include evaluating the parameter that indicates the function to generate code in the electronic form object, in some embodiments. In the illustrative example of , the indicated function is merely \u201cf\u201d. In other embodiments and\/or scenarios, the indicated function may be a function expressed as or using built-in functions of the programming language and\/or programming statements expressed using the programming language. Thus, evaluating the parameter  may comprise evaluating one or more built-in functions of the programming language and\/or one or more programming statements expressed using the programming language, in some embodiments. Based on the evaluation of the parameter, code is generated for the electronic form to cause the function to be applied to input data when the electronic form is utilized by a user. In some embodiment, the generated code is capable of being processed by the application that is to render the electronic form.","In other embodiments, however, the parameter  that indicates the function may be evaluated at a later time, such as upon or just before cloud deployment of the electronic form object, or upon or just before the function indicated by the parameter  is to be applied in response to user input. Thus, in some embodiments, the generated code causes evaluation of the function to be completed at \u201crun-time\u201d, e.g., after user input is received.","In some embodiments, block  includes generating the electronic form object to include one or more of HTML elements, XHTML elements, XML elements, style sheets (e.g., CSS), scripts (e.g., JAVASCRIPT\u00ae, etc.), CDF code, a spreadsheet macro, etc. In some embodiments, block  includes generating the electronic form object such that the electronic form object can be rendered by a web browser, a web browser with a suitable plugin, a CDF player, a spreadsheet application, an application that utilizes command line prompts, an application that utilizes audio prompt technology (e.g., voice synthesizer technology) and\/or voice recognition technology, etc. Thus, in some embodiments, the electronic form need not be generated so that it can be rendered on a display device and\/or such that it utilizes GUI elements. For example, the electronic form may be generated to utilize command line prompts, receive input via a command line, utilize audio prompts, receive audio input (e.g., voice input), etc.","In some embodiments, the computer  implements block . In some embodiments, the server system  implements block . In some embodiments, the computer  and the server system  together implement block .","At block , the electronic form object generated at block  is stored in a memory. For example, in an embodiment, the electronic form object is stored in the memory . In another embodiment, the electronic form object is stored in the memory . In another embodiment, the electronic form object is stored in some other suitable memory such as a memory of a web server (not shown in ).","As discussed above, a suitable application may render an electronic form using the electronic form object.  is an illustration of an example graphical electronic form  that may be rendered based on an electronic form object generated in response to the programming input of , according to an embodiment. The electronic form  includes a first GUI mechanism  and a second GUI mechanism  corresponding to the \u201cfirst\u201d input and the \u201csecond\u201d input, respectively, discussed above with respect to . The first GUI mechanism  is a first text box and the second GUI mechanism is a second text box. In an embodiment, the forms generation module  generates the electronic form object such that the electronic form  includes text boxes in response to the specification data  indicating that the first input is of data type string and the second input is of data type number because text boxes are appropriate GUI mechanisms for eliciting string and number data types, in an embodiment.","The electronic form  includes a first label  for the first text box , and includes a second label  for the second text box . The forms generation module  generates the electronic form object such that the electronic form  includes the first label  and the second label  in response to the specification data , in an embodiment.","The electronic form  includes a submit button . The forms generation module  generates the electronic form object such that the electronic form  includes the submit button  because utilizing a submit button is appropriate when utilizing text boxes, in an embodiment. The electronic form  also includes a cancel button . The forms generation module  generates the electronic form object such that the electronic form  includes the cancel button  as a default, according to an embodiment.","When the user enters a string in the text box , enters a number in the text box , and then selects the submit button , the electronic form object is configured to apply the function \u201cf\u201d  to the string in the text box  and the number in the text box  to generate a result. As discussed above, in some embodiments, the function \u201cf\u201d  is evaluated when the user selects the submit button .","In an embodiment, the forms generation module  automatically generates the electronic form object to take a certain action(s) when one or more user inputs do not match data types specified by the specification data . For example, in an embodiment, the forms generation module  generates the electronic form object such that the user is prompted when one or more user inputs do not match data types specified by the specification data . As an illustrative example, in an embodiment, if the user enters input other than a string in the text box  and then selects the submit button , the electronic form object may indicate to the user that the \u201cfirst\u201d input must be a string. Similarly, in an embodiment, if the user enters input other than a number in the text box  and then selects the submit button , the electronic form object may indicate to the user that the \u201csecond\u201d input must be a number. Similarly, in an embodiment, if the user leaves one or more of the text box  or the text box  empty when selecting the submit button , the electronic form object may indicate to the user that an input must be provided. For example, the electronic form object may display to the user a suitable message such as \u201cThis field is required.\u201d In some embodiments, specification data can be utilize to indicate that certain inputs are required, certain inputs are optional, certain inputs may have default values, etc.","In an embodiment, the programming language is designed so that the programmer can utilize the specification data, optionally, to specify various desired characteristics of the electronic form such as appearance characteristics, audio characteristics, timing characteristics, etc. In some embodiments, the forms generation module  utilizes default parameters when the specification data does not specify corresponding characteristics. For example, the programmer can utilize the specification data to specify a window size of a GUI form, but if the programmer does not specify a window size, the forms generation module  utilizes default parameters regarding the window size. As another example, the programmer can utilize the specification data to specify a color and\/or design theme for a GUI form, but if the programmer does not specify a theme from a plurality of predetermined themes, the forms generation module  utilizes default parameters regarding the theme. As yet another example involving a form that uses audio prompts, the programmer can utilize the specification data to specify audio characteristics of the form (e.g., male or female voice for prompts, speaking speed of voice, volume, etc.), but if the programmer does not specify such audio characteristics, the forms generation module  utilizes default parameters regarding the audio characteristics.","In an embodiment, the programming language is designed so that the programmer can utilize the specification data, optionally, to specify various desired characteristics relating to output of results, but the forms generation module  utilizes default parameters when the specification data does not specify corresponding characteristics. For example, with GUI forms, the programmer can utilize the specification data to specify where, in relation to the GUI form, the result is to be displayed (e.g., below, above, to the right, to the left, etc.), but if the programmer does not specify such characteristics, the forms generation module  utilizes default parameters regarding placement of the result relative to the GUI form. As another example, when the result is to be output using audio, the programmer can utilize the specification data to specify audio characteristics corresponding to output of the result (e.g., male or female voice speaking speed of voice, volume, etc.), but if the programmer does not specify such characteristics, the forms generation module  utilizes default parameters regarding such audio characteristics.","In an embodiment, the programming language is designed so that the programmer can utilize the specification data, optionally, to specify a type of electronic form object to be generated, but the forms generation module  utilizes default parameters when the specification data does not specify corresponding characteristics. For example, the programmer can utilize the specification data to specify between a plurality of different types of objects such as two or more of web page code (e.g., HTML, XHTML, etc.), XML, a script (e.g., JAVASCRIPT\u00ae, etc.), CDF code, a spreadsheet macro, etc., but if the programmer does not specify such characteristics, the forms generation module  utilizes default parameters regarding the type of electronic object to be generated.","Referring again to , the forms generation module , as a default, generates the electronic form object such that the form  displays labels  and  as the keys \u201cfirst\u201d and \u201csecond\u201d. In some embodiments, the programmer can utilize the specification data to override this default and specify different labels to be included in the form. For example,  illustrate the example programming input of  and the graphical electronic form of , respectively, except that the specification data  is altered to specify labels to be used in the form . For example, the programming input  includes {\u201cfirst\u201d, \u201cString\u201d} to indicate that the text box  (associated with the \u201cfirst\u201d input) should have a label \u201cString\u201d , and also includes {\u201csecond\u201d, \u201cNumber\u201d} to indicate that the text box  (associated with the \u201csecond\u201d input) should have a label \u201cNumber\u201d .","In an embodiment, the programming language is designed to allow a programmer to specify labels as graphical objects.  illustrate the example programming input of  and the graphical electronic form of , respectively, except that the specification data  is altered to specify labels to be used in the form . For example, the programming input  includes data related to the string input that indicates that the text box  should have a graphical object  as a label. Thus, the form  is generated to display the corresponding label . In the embodiment corresponding to , the programming input  includes the graphical object . In other embodiments, however, the programming input  includes an indicator of or pointer to the graphical object , such as a file name of the graphical object .","In an embodiment, the programming language is designed to allow a programmer to add text and\/or graphics to forms.  illustrate the example programming input of  and the graphical electronic form of , respectively, except that the specification data  is altered to specify text and graphics to be included in a form . For example, the programming input  includes text  and graphics . Thus, the form  is generated to display corresponding text  and graphics . In the embodiment corresponding to , the programming input  includes the graphical object . In other embodiments, however, the programming input  includes an indicator of or pointer to the graphical object , such as a file name of the graphical object .","As discussed above, in some embodiments the form generation module  is configured to automatically generate forms with user interface mechanisms appropriate for the type of input specified.  illustrates an example programming input  in which a programmer has specified an input of type \u201cColor\u201d. In response, the form generation module  generates an electronic form object that includes a GUI appropriate for selecting a color. For example,  illustrates an example form  corresponding to an electronic form object generated by the form generation module . The form  includes a GUI  for selecting a color.",{"@attributes":{"id":"p-0220","num":"0219"},"figref":["FIG. 15A","FIG. 15B"],"b":["1500","750","1550","750","1550","1554"]},{"@attributes":{"id":"p-0221","num":"0220"},"figref":["FIG. 16A","FIG. 16B"],"b":["1600","750","1650","750","1650","1654"]},{"@attributes":{"id":"p-0222","num":"0221"},"figref":["FIG. 17A","FIG. 16B"],"b":["1700","1700","1708","1712","750","1750","750","1750","1754"]},"Additionally, the specification data  includes code  indicating an override of the default label for the \u201cSubmit\u201d button, e.g., \u201cBuy now!\u201d In response, the form generation module  generates the electronic form object such that a label  for the resulting form  has the label \u201cBuy now!\u201d",{"@attributes":{"id":"p-0224","num":"0223"},"figref":["FIG. 18A","FIG. 18B","FIG. 18C"],"b":["1800","750","1820","750","1850","750"]},{"@attributes":{"id":"p-0225","num":"0224"},"figref":["FIG. 19A","FIG. 19B","FIG. 19A"],"b":["1900","1950","1900","1900","1908","1912","1912"]},"The programming input  also includes data  indicating a second function to be applied to user input received via the form. In particular, the programming input  specifies that the function \u201cComposition[HTTPRedirect, First]\u201d should be applied to the result of the first function , i.e., SemanticURL. In an embodiment, the built-in function \u201cHTTPRedirect\u201d navigates to a web page at URL passed to the function. Thus, the programming input  specifies that the built-in function SemanticURL should be applied to user input to generate a URL, and the built-in function HTTPRedirect should then be used to navigate to the URL.","In response to the programming input , the forms generation module  generates an electronic form object configured to generate the form  of . The electronic form  includes a GUI mechanism  corresponding to the \u201cWebsite\u201d input of the programming input . The GUI mechanism  is a text box. In an embodiment, the forms generation module  generates the electronic form object such that the electronic form  includes the text box in response to the specification data . In particular, the forms generation module  assumes that the input will be text based on the first function , which the forms generation module  knows receives input of type text, according to an embodiment. The electronic form  includes a label  for the text box , and includes a second label  for the second text box .","The electronic form  includes a submit button . The forms generation module  generates the electronic form object such that the electronic form  includes the submit button  because utilizing a submit button is appropriate when utilizing text boxes, in an embodiment.","When the user enters a string in the text box , and then selects the submit button , the electronic form object is configured to apply the first function  to the string in the text box  to generate a URL. Additionally, the second function  is applied to the generated URL causing the browser to refresh the web page.","Additionally, the specification data  includes data  relating to appearance of the electronic form to be generated. For example, the data  indicates a \u201ctitle\u201d to be included in the form, a \u201cdescription\u201d to be included in the form, and a label to be used for the submit button . Thus, the forms generation module  generates the electronic form object such that the electronic form  includes a title , a description , and the submit button  has the appropriate label.","In some embodiments, techniques and systems such as described above with respect to  may be utilized with techniques and systems that facilitate efficient deployment of electronic forms to the Internet, an intranet, an extranet, etc. For example, techniques and systems such as described above may be utilized with cloud deployment techniques and systems described above with respect to .","Referring again to , the programming input  may be evaluated completely (e.g., the function  and the function  may be evaluated at the same time as other parts of the programming input ) and based on the evaluation of the function  and the function , code is generated for the electronic form to cause the function  and the function  to be applied to input data when the electronic form  is utilized by a user. In other embodiments, however, the function  and\/or the function  may be evaluated at one or more subsequent times, such as upon or just before the function  and\/or the function  are to be applied in response to user input (e.g., the function  and\/or the function  may be evaluated in response to the user selecting the submit button ). Thus, in some embodiments, the generated code causes evaluation of the function to be completed at \u201crun-time\u201d, e.g., after user input is received.","For example, in an embodiment, the server system  () may evaluate the function  and the function  in response to the user selecting the submit button . As another example, in an embodiment, a second server (not shown in ) may evaluate the function  and the function  in response to the user selecting the submit button . As yet another example, in an embodiment, the second server (not shown) may send the function  and\/or the function  and user input received via the electronic form  to the server system  (or a third server (not shown)), and the server system  (or the third server (not shown)) applies the function  and the function  to the user input. In this embodiment, the server system  (or the third server (not shown)) returns the result to the second server (not shown) for displaying in an output generated by the electronic form object. In some embodiments, the second server (and\/or the third server) has a structure similar to the server system , e.g., with a processor, a memory, a NIC, etc.",{"@attributes":{"id":"p-0234","num":"0233"},"figref":["FIG. 20A","FIG. 20B","FIG. 19A"],"b":["2000","2050","2000"]},"The programming input  includes a FormFunction  within a CloudDeploy function . As discussed above, the FormFunction  causes the forms generation module  to generate an electronic form object, according to an embodiment. Additionally, the CloudDeploy function  causes the cloud deployment module  to deploy the electronic form object so that it is accessible via the Internet, for example.","The programming input  includes specification data  and a function . The specification data  indicates that user input (e.g., \u201cfrom\u201d and \u201cto\u201d) should be interpreted as airports (e.g., ORD is interpreted as O'Hare International Airport, Chicago, Ill.; Boston is interpreted as Boston Logan International Airport, etc.).","The function  comprises several built-in functions such as GeoGraphics, GeoPath, and GeoPosition. The function  indicates that a graphic should be generated that shows, on a map, a path from the location \u201cfrom\u201d to the location \u201cto\u201d.","Referring now to , the form  corresponds to a web page generated by the forms generation module  and deployed by the cloud deployment module  in response to the programming input . The web page  includes text boxes  and  to receive the user input (e.g., \u201cfrom\u201d and \u201cto\u201d). The forms generation module  assumes that text boxes are appropriate because the specification data  indicates that user input (e.g., \u201cfrom\u201d and \u201cto\u201d) should be interpreted as airports. The web page  also includes a submit button .","The cloud deployment module  caused the electronic form object to be deployed such that the electronic form object is accessible at a URL .",{"@attributes":{"id":"p-0240","num":"0239"},"figref":"FIG. 20C","b":["2075","2054","2058","2062","2075"]},"Referring again to , the programming input  may be evaluated completely (e.g., the function  may be evaluated at the same time as other parts of the programming input ) and based on the evaluation of the function , code is generated for the electronic form to cause the function  to be applied to input data when the electronic form  is utilized by a user. In other embodiments, however, the function  may be evaluated at a later time, such as upon or just before cloud deployment of the electronic form object, or upon or just before the function  is to be applied in response to user input (e.g., the function  may be evaluated in response to the user selecting the submit button ). Thus, in some embodiments, the generated code causes evaluation of the function to be completed at \u201crun-time\u201d, e.g., after user input is received.","For example, in an embodiment, the web server (not shown) may evaluate the function  in response to the user selecting the submit button . As another example, in an embodiment, the web server (not shown) may send the function  and user input received via the electronic form  to the server system  (or another server system (not shown)), and the server system  (or the other server system (not shown)) applies the function  to the user input. In this embodiment, the server system  (or the other server system (not shown)) returns the result to the web server (not shown) for displaying in the output  (). In some embodiments, the web server (and\/or the other sever) has a structure similar to the server system , e.g., with a processor, a memory, a NIC, etc.","In some embodiments, specification data in the programming input may specify that user input received via the electronic form is to be processed using natural language processing (NLP) techniques, and the function specified in the programming input is to be applied to a result of the NLP processing of the user input. In some embodiments, the programming input may also specify an entity type to which the user input is to correspond to assist with NLP processing. For example, in the example of , the programming input  specifies that the user input corresponds to an entity type \u201cAirport\u201d, thus NLP processing of the user input is focused on determining airport type entity corresponding to the user input. For example, a user may enter input in one of a variety of formats (e.g., a three-letter airport code (e.g., ORD), a city (e.g., Chicago), a city and state\/province (e.g., Chicago, Ill.), a city and country (e.g., Chicago, USA), an airport name (e.g., O'Hare), etc.) and the NLP processing may process the input in an attempt to determine a corresponding entity. In some embodiments, the user input may be sent to a separate server system configured to perform NLP processing (e.g., using techniques such as described above), and the separate server system may return results of the NLP processing.","Instant API","Referring again to , the system  may facilitate efficient generation of application programming interfaces (APIs), and deployment of APIs to the web, according to some embodiments. For example, the cloud-based development system  and\/or the cloud-based development front end  may include an API generation module that enables efficient and flexible generation of APIs. Embodiments of an API generation module and techniques for generating forms are discussed below. In some embodiments, such modules and techniques may be implemented by the system  of . In other embodiments, such modules and techniques may be implemented by systems different than the system of .","For example,  is a diagram of an example system  for creating APIs, according to an embodiment. As described in more detail below, the system  enables efficient and flexible generation of APIs, according to some embodiments.","In an embodiment, the system  includes a computer similarly structured to the computer  of . For purposes of brevity, like-numbered components are not described in detail.","In an embodiment, the memory  may store an API generation module  that facilitates generation of APIs, as will be described in more detail below. In an embodiment, the API generation module  comprises software instructions that, when executed by the processor , causes the processor to evaluate programming input from a programmer to generate an API such that the API subsequently can be utilized to perform a processing action. For example, as will be described in more detail below, the generated API can be utilized by a software program running on the computer , the computational application  running on the computer  (not shown in ), etc., according to various embodiments. As another example, as will be described in more detail below, the generated API can be deployed to cloud storage and made network accessible (e.g., using CloudDeploy or another suitable mechanism), and a software program running on the computer  or another suitable computer, the computational application  running on the computer  (not shown in ) or another suitable computer, a cloud-based program running on one or more servers, etc., may utilize the API via a network, according to various embodiments.","In some embodiments, generated APIs  are stored in the memory .","In some embodiments, the API generation module  is a component of the cloud-based front end . In some embodiments, the API generation module  is a component of a compiler, i.e., a computer program that transforms source code written in a programming language into another computer language, typically to create an executable program. In some embodiments, the API generation module  is a component of an interpreter, i.e., a computer program that directly executes, i.e. performs, instructions written in a programming or scripting language (referred to herein for brevity as a \u201cprogramming language\u201d), without first compiling the instructions into a machine language program. Thus, in some embodiments, the programming input evaluated by the API generation module  includes software instructions written in a programming language.","In some embodiments, the API generation module  is a component of a software application such as a computational application  (). For example, the API generation module  may be a component of the MATHEMATICA\u00ae computational software program developed by Wolfram Research, Inc., according to a specific embodiment.",{"@attributes":{"id":"p-0252","num":"0251"},"figref":["FIG. 22","FIG. 1"],"b":["2200","2200","2200","100"]},"In an embodiment, the memory  may store some or all of the API generation module  discussed above. For example, in an embodiment, the API generation module  is implemented as a client-server system, and the memory  stores a server portion of the API generation module , whereas the memory  of the computer  stores a client portion of the API generation module . In an embodiment, a programmer uses the computer  to provide programming input to the server  via the network . The server  then generates an API, and the API is stored in a memory. For example, in an embodiment, the API is stored in the memory  and\/or the cloud storage . In some embodiments, the cloud storage  is omitted. In another embodiment, the API is transmitted to the computer , via the network , and is stored in the memory . In another embodiment, the API is stored in a memory of another server system (e.g., a web server (not shown)) so that the API is accessible via the Internet, for example.",{"@attributes":{"id":"p-0254","num":"0253"},"figref":["FIG. 23","FIG. 21","FIG. 22","FIGS. 21 and 22","FIG. 1"],"b":["2300","2300","102","2200","2300","2300","102","2300","100"]},"At block , programmer input in a programming language is received at one or more computers. For example, programmer input is received, via one or more input devices , at the computer . In some embodiments, the computer  transmits the programmer input to the server  via the network , and thus the programmer input is received at the server . The programmer input includes i) first specification data corresponding to input parameters for an API to be generated, and ii) second specification data that indicates a function to performed.",{"@attributes":{"id":"p-0256","num":"0255"},"figref":["FIG. 24A","FIG. 24A","FIG. 24A"],"b":["2400","2304","2400","2404","2404","2408","2412","2408","2408","2400"]},"In the example of , the second specification data  specifies that a built-in function Factorinteger is to be applied on the input \u201cx\u201d. The function Factorinteger is a built-in function, in an embodiment.","Referring again to , at block , the programmer input is evaluated at one or more computers to generate an API that can be passed one or more parameters and that performs the specified function. For example, the API generation module  may evaluate the programmer input, in an embodiment, to generate the API. In some embodiments, the programmer input is fully evaluated in response to receiving the programmer input. In other embodiments, the programmer is only partially evaluated. For example, in some embodiments, the second specification data  may not be fully evaluated. For instance, if the specification data  includes software code specifying a function to be performed, the software code may not be evaluated until the API is subsequently invoked or utilized, according to some embodiments. The API generation module  may utilize the first specification data  and the second specification data  (and some or all (or none) of other arguments(s) and\/or parameters, if provided in the programmer input) to generate the API. The API may include an electronic object having software instructions, where the electronic object is configured such that parameter(s) (specified by the first specification data) can be passed to the electronic object and the electronic object can be invoked to perform the specified function (specified by the second specification data) using the specified parameter(s), in some embodiments. In an embodiment, the API includes software instructions that can be executed by one or more computers to cause the one or more computers to perform the specified function using the specified parameter(s).","In some embodiments, the computer  implements block . In some embodiments, the server  implements block . In some embodiments, the computer  and the server system  together implement block .","At block , the API generated at block  is stored in a memory. For example, in an embodiment, the API is stored in the memory . In another embodiment, the API is stored in the memory . In another embodiment, the API is stored in the cloud storage . In another embodiment, the electronic form object is stored in some other suitable memory such as a memory of a web server (not shown in ).","Referring again to , the programmer input  includes a name  for the API. The name  (\u201cfunc\u201d) can be utilized to access the API, in an embodiment. For example,  illustrates an example of programmer input  that is used to access the API and provide a parameter to the API, according to an illustrative embodiment. The programmer input  includes the name of the API (\u201cfunc\u201d) and also data that indicates the parameter \u201cx\u201d is set to the integer fifteen. In response, the API is evaluated and returns a result . In the illustrative embodiment of , the programmer input  may be entered into a file, a notebook, a web page, etc. In other embodiments other suitable programmer input is received in another suitable manner, such as via a spreadsheet, etc. In an embodiment, the result  may be returned in the same file, notebook, spreadsheet, web page, etc., in which the programmer input  was entered. In other embodiments, the result  may be returned in a file, notebook, spreadsheet, web page, etc., separate from the file, notebook, spreadsheet, web page, etc., in which the programmer input  was entered.","In some embodiments in which the API generation module  is a component of a computational application such as the computational application , the API may be created by the computational application  and then used by the computational application . In some embodiments, the API may be created by the API generation module  and\/or the API generation module  then made available for use by one or more of another application (e.g., different than the computational application ), another program, and\/or a different computer from the computer(s) on which the API was generated.","For example, in some embodiments, the generated API may be made accessible via network-accessible storage, such as the cloud storage . For example, the generated API may be made accessible via a URL, a URI, etc., or some other suitable mechanism. In some embodiments, the CloudDeploy function may be utilized to deploy an API to network-accessible storage such as the cloud storage .",{"@attributes":{"id":"p-0264","num":"0263"},"figref":["FIG. 25A","FIG. 25A"],"b":"180"},"Programmer input  includes the APIFunction , first specification data , and second specification data , where the first specification data  specifies an input parameter to an API to be generated and a type of the parameter, and the second specification data  that specifies a function to be applied to input parameter. For instance, the specification data  specifies an input parameter \u201cname\u201d of a type \u201cCountry\u201d, and the second specification data  specifies that the GeoGraphics function is to be applied to the \u201ccountry\u201d input parameter to draw a polygon of the country indicated by the input parameter, and to generate a result in a Portable Network Graphics (PNG) format.","Additionally, the programmer input  includes the CloudDeploy function . Evaluation of the CloudDeploy function in  returns a handle corresponding to deployment of the expression. The handle includes a URL that enables access to the API.  illustrates a web page that a user sees when entering, in a web browser, a URL corresponding to the handle, and appending a parameter input to the URL (e.g., \u201c?name=Italy\u201d). In particular, the web page includes 2D geographic polygon drawing of Italy. In an embodiment, a server, such as the server , receives the URL with the appended parameter information from a requesting computer, uses the URL to locate the API in the cloud storage , evaluates the API using the appended parameter information to generate a result, and the returns to the requesting computer the result in a web page.","Thus, in various embodiments, the cloud-based development system  may be configured to perform one or more of, or various suitable combinations of two or more of: create an API, deploy the API, give and\/or associate the API a name, associate the API with one or more methods, actions, and\/or functions to be performed, and associate the API with one or more various parameters, store the API in the cloud storage , create a mapping paradigm to map portions of a URL or URI to the methods, actions, and\/or functions and\/or to the parameter(s) of the methods, actions, and\/or functions, such that the methods, actions, and\/or functions can be called from a browser, by a website, by a mobile application, by a form, etc., merely by sending a URL complying with the API. In embodiments, the cloud-based development system  may generate documentation for the API, describing the implementation of the API, the mapping of the methods, actions, and\/or functions to the URL, the format of the data returned by the API, etc.","In some embodiments, the cloud-based development system  provides an option to allow a user to interact with the cloud-based development system  to edit or revise the mapping, the API name, and other aspects of the API creation. For example, in embodiments, the instant API module may suggest additional functions or methods to add to the API. The instant API module may also facilitate the use of data, variables, and\/or parameters stored in the cloud (i.e., on the cloud servers), or data stored at a location specified by a URL. For example, the cloud-based development system  may provide various user interface mechanisms to permit a user to facilitate editing\/revisions such as described above.","In some embodiments, the APIs can be configured to accept natural language (i.e., free-form) inputs. As an illustrative example, an API may be configured to accept a date input specified as \u201cfirst Monday before Christmas.\u201d The API and\/or the cloud-based development system  may include a module configured to convert such natural-language input to a canonical form.","In an embodiment, the programming language utilized by the computational application  (e.g., the Wolfram Language\u2122 utilized by MATHEMATICA\u00ae) and associated with the cloud-based development system  permits representation of at least some objects (e.g., APIs) symbolically in the cloud.","In some embodiments, the computational application , the cloud-based front end , and\/or the cloud-based development system  utilizes a computable document format (CDF) that allows exchange of components with interactive features between desktop and mobile platforms and the cloud-based development system  (for example). An author can generate a CDF document on desktop software (e.g., MATHEMATICA\u00ae), and deploy it to the cloud storage  using native function calls. From the cloud platform it can be served according to access control information to web visitors (e.g., publically, privately, or only to those who have a link to the document). The author can then access the deployed CDF (e.g., via the cloud-based development system ) to make modifications. A revised version is then made available to all platforms automatically.","Connected Devices","Referring again to , the system  may facilitate efficient interaction with devices that have sensors and\/or actuators to enable interaction with or sensing characteristics of the real world (referred to herein as \u201cconnected devices\u201d for brevity), according to some embodiments. For example, the cloud-based development system , the cloud-based development front end , and\/or the computational application  may include a connected devices module  (or client\/server, front end\/back end, etc., portions thereof) that enables efficient and flexible interactions with connected devices. Embodiments of a connected devices module  and techniques for interacting with connected devices are discussed below. In some embodiments, such modules and techniques may be implemented by the system  of . In other embodiments, such modules and techniques may be implemented by suitable systems different than the system of . For example, in some embodiments, the server  may be omitted.","In an embodiment, the system  is similarly structured to the system  of . For purposes of brevity, like-numbered components are not described in detail.","The system  includes a connected device , which may include, or be communicatively coupled to, one or more of i) one or more sensors, ii) one or more actuators, etc. For example, the computing device  may include a testing device, a sensor device, a device such as the Raspberry Pi device developed by the Raspberry Pi Foundation, a device such as the Arduino single board microcontroller device, a health monitoring device, a wearable fitness device, etc.","The connected device  may include one or more processors (e.g., a microprocessor, a microcontroller, etc.) and one or more memory devices coupled to the one or more processors. Machine readable instructions may be stored in the one or more memory devices (hereinafter referred to as \u201cthe memory\u201d for brevity), and when the one or more processors (hereinafter referred to as \u201cthe processor\u201d for brevity) execute the machine readable instructions, the processor may perform various acts specified by the machine readable instructions.","The connected device  may include one or more communication interfaces for communicating with one or more of the computer , the network , a sensor, an actuator, a hardware module, other hardware and\/or programmable devices, etc. For example, the connected device  may include one or more of a USB interface, a serial bus interface, a parallel bus interface, a port interface, a Bluetooth interface, a personal area network (PAN) interface, a FireWire interface, a PCI Express interface, an infrared interface, a fiber optic interface, a local area network (LAN) interface, a wireless local area network (WLAN) interface, a cellular communication network interface device, a wide area network (WAN) interface, etc.","In some embodiments, the connected device  may be communicatively coupled to the computer .","In some embodiments, the connected device  may be communicatively coupled to a server  via the computer  and the communication network . In some embodiments, the connected device  may be communicatively coupled to the server  via the communication network  and not via the computer .","In some embodiments, the connected device  may be configured to execute functional modules including one or more of i) an operating system; ii) a computational application kernel or engine (e.g., a MATHEMATICA\u00ae kernel or engine) for performing pre-defined functions and for executing computer-readable instructions based on an associated language (e.g., the Wolfram Language\u2122); iii) a command line interface module for acting as a front end to the kernel\/engine; iv) a notebook user interface front end to the kernel\/engine; v) one or more data analysis engines configured to a) classify data in one or more data sets and\/or to perform analysis, sometimes in cooperation with the computational kernel or other functional modules, of data in one or more data sets; b) generate and\/or implement APIs; c) interpret free-form data and\/or convert the free-form data into structured data; d) classify data sets; e) facilitate cloud execution of various computational functions requested from external devices (e.g., other computers, servers, and\/or embedded devices) by, for example, receiving and answering function calls originating in software executing on those external devices; f) generate and\/or update reports based on various datasets stored in the cloud or passed to the functional module from an external device; etc.","In some embodiments, modules executed on the connected device  permit using a high-level programming language to quickly and easily cause the connected device  to interact with the real world (e.g., gather data from sensors, control an actuator, move a robot arm, etc.) without a user needing to have in-depth knowledge and understanding of the underlying hardware.","In some embodiments, a user may interact with (e.g., configure, program, get sensor data from, control an actuator, etc.) the connected device  via a user interface module executed by the connected device . In some embodiments, the connected device  may include, or be coupled to, user interface devices such as a keyboard, a keypad, a touch screen, a button, a mouse, a display device, etc., and the user may interact with the connected device  via such user interface devices. In some embodiments, the user may interact with the connected device  via user interface devices of or coupled to the computer , where data is exchanged between such user interface devices and the connected device  via a communication link between the connected device  and the computer .","In other embodiments, the connected device  may act more as a \u201cdumb\u201d terminal, where user interface functions are executed on another device such as the computer . Additionally, in some embodiments, the connected device  may omit a man-machine interface.","For example, in some embodiments, the computer  may be configured to execute functional modules including one or more of i) an operating system; ii) a computational kernel or engine (e.g., a MATHEMATICA\u00ae kernel or engine) for performing pre-defined functions and for executing computer-readable instructions based on an associated language (e.g., the Wolfram Language\u2122); iii) a command line interface module for acting as a front end to the kernel\/engine; iv) a notebook user interface front end to the kernel\/engine; v) one or more data analysis engines configured to a) classify data in one or more data sets and\/or to perform analysis, sometimes in cooperation with the computational kernel or other functional modules, of data in one or more data sets; b) generate and\/or implement APIs; c) interpret free-form data and\/or convert the free-form data into structured data; d) classify data sets; e) facilitate cloud execution of various computational functions requested from external devices (e.g., other computers, servers, and\/or embedded devices) by, for example, receiving and answering function calls originating in software executing on those external devices; f) generate and\/or update reports based on various datasets stored in the cloud or passed to the functional module from an external device; g) convert software code between different programming languages (e.g., between C++ and the Wolfram Language\u2122, between JAVA and the Wolfram Language\u2122, between C++ and JAVA, etc.); etc.","In some embodiments, the connected devices module  executing on the computer  permits using a high-level programming language to quickly and easily interact with the connected device  without a user needing to have in-depth knowledge and understanding of the underlying hardware of the connected device .","In some embodiments, a user may interact with (e.g., configure, program, get sensor data from, etc.) the connected device  via a user interface module executed by the computer  (e.g., a component of the connected devices module ). In some embodiments, the computer  may include, or be coupled to, user interface devices such as a keyboard, a keypad, a touch screen, a button, a mouse, a display device, etc., and the user may interact with the connected device  via such user interface devices. For example, a user may develop code, using the computer , for interacting with the connected device , and then cause the code to be deployed to the connected device  via a communication link (e.g., USB, Bluetooth, WLAN, etc.) between the computer  and the connected device . As another example, a user may develop code, using the computer , for interacting with the connected device , and then cause the code to be deployed to the connected device  via the server . Such deployed code may then be executed by the connected device .","In other embodiments, a user may develop code, using the computer , for interacting with the connected device , and then cause the code to be deployed to the cloud storage . The deployed code may then be executed by the server , causing the server  to interact with the connected device  (e.g., extract data from the connected device , configure\/program the connected device  to perform a particular task, etc.). The server  may communicate with the connected device  via the network , in some embodiments. In some embodiments, the computer  may act as a conduit for communications between the server  and the connected device . In other embodiments, the server  and the connected device  may communicate without going through the computer  (e.g., if the connected device  is capable of establishing a communication link with another device such as a router, an access point, another computer, etc.).","In some embodiments, a module executed by the connected device  may cause the connected device , when the connected device  is communicatively connected to the network  (e.g., directly or via one or more other devices such as a gateway device, a router, a switch, an access point, the computer , etc.), to inform the server  of its presence. This may facilitate one or more other computers (e.g., the computer  or another computer) that are communicatively connected to the server  discovering the presence of the connected device , and then interacting with the connected device  (e.g., via the server  or without the sever  acting as an intermediary). Additionally or alternatively, in some embodiments, a module executed by the connected device  may cause the connected device , when the connected device  is communicatively connected to the computer  (e.g., directly (e.g., via USB, Bluetooth, peer-to-peer connection, etc.) or via one or more other devices such as a gateway device, a router, a switch, an access point, etc.), to inform the computer  of its presence. This may facilitate the computer  discovering the presence of the connected device , and then interacting with the connected device  (e.g., via the server  or without the server  acting as an intermediary). In some embodiments, the user computer  may report the presence of the connected device  to the server .","As an illustrative example, when a new Raspberry Pi device (or other suitable connected device ) is connected to a USB port of the computer , which is connected to the server  via browser session, for example, the server  may detect the presence of the Raspberry Pi device and generate a dialog window in the browser window such as: \u201cyou just connected a new Raspberry Pi device to xyxy.ngb.chic.1.2.3.4-JohnSmith-Desktop\u2014link to your Cloud Platform account?<OK\/CANCEL>\u201d. If \u201cOK\u201d is selected, the cloud server system  may prompt to name the device, e.g.: \u201cWhat would you like to name your new device?\u201d A suitable name such as RasPi1 may be selected by the user.","Devices connected to the computer , and sensors connected to those devices, may be represented in a window using a tree data structure, for example, which is updated in real-time as devices are hot-plugged\/unplugged, and device sensors go into different states. A similar tree data structure may also be made available via the server , in some embodiments.",{"@attributes":{"id":"p-0291","num":"0290"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"YOUR DEVICES"]},{"entry":[{},"============"]},{"entry":[{},"- RasPi1 +[ shutdown\/reboot\/ping\/... ]"]},{"entry":[{},"---- USB"]},{"entry":[{},"---- GPIO [ - - - - - ]"]},{"entry":[{},"---- Ethernet [ ip = 1.2.3.4\/255 ]"]},{"entry":[{},"- !RasPi2 [ disconnected ]"]},{"entry":[{},"- WeatherStation"]},{"entry":[{},"---- USB1"]},{"entry":[{},"---- USB2"]},{"entry":[{},"---- Temperature [25 celsius]"]},{"entry":[{},"---- Humidity [ 43% ]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0292","num":"0291"},"figref":"FIG. 27","b":["2700","102","2700","2620","2700","2604","2604","2620","140","2604","2620","2620","2620"]},"Similarly, in some embodiments, the connected devices module  acts as an intermediary between i) the computational application  running on the computer  or a computational application kernel running on the server , and ii) the connected device . In such embodiments, a user can utilize a high level programming language to control and\/or retrieve data from the connected device  without needing knowledge of low-level and\/or hardware level details regarding the connected device .","In an embodiment, the connected devices module  maintains association data regarding connected devices (e.g., the connected device ) associated with the computer  and\/or a user. The connected devices module  may utilize the association data to identify connected devices (e.g., the connected device ) associated with the computer  and\/or the user, such that when the user is using the computer  or another computer (e.g., using the computational application  on the computer  and\/or the server ), the user can be provided with options for establishing connections with one or more connected devices (e.g., the connected device ) and\/or interacting with the one or more connected devices. In an embodiment, the association data may comprise globally unique identifiers (e.g., UIDs, media access control (MAC) addresses, etc.) of connected devices, computers, etc., and\/or user identifiers (IDs).","In some embodiments, a module executed on the connected device  may map i) programmer input in a high level language (e.g., the Wolfram Language\u2122), computational application built-in functions, etc., and\/or corresponding message data to ii) low-level and\/or machine level instructions and\/or configuration information. In some embodiments, the computer  and\/or the server  includes a driver module configured to facilitate communications between i) the computer  and\/or the server  and ii) the connected device . In some embodiments, the driver module may permit transfer of high level language instructions\/functions, (e.g., the Wolfram Language\u2122), computational application built-in functions, etc., to the connected device . In some embodiments, the driver module may permit transfer of data, objects, messages, etc., formatted i) according to a high level language (e.g., the Wolfram Language\u2122) and\/or ii) for processing by the computational application , etc., from the connected device .","In some embodiments, a module executed on the computer  and\/or the server  may map i) programmer input in a high level language (e.g., the Wolfram Language\u2122) computational application built-in functions, etc., and\/or corresponding message data to ii) low-level and\/or machine level instructions and\/or configuration information to permit interaction with the connected device  via the driver module, for example.","In some embodiments, the connected devices module  is configured to interface with a plurality of types of connected devices . In some embodiments, the connected devices module  includes data for performing mappings between high level programmer\/user input and low-level\/machine level instructions\/configuration information for the plurality of different types of connected devices . For example, in some embodiments, the connected devices module  may include or have access to mapping information to enable mapping between high level programmer\/user input and low-level\/machine level instructions\/configuration information for the plurality of different types of connected devices .","In some embodiments, the connected devices module  is configured to perform initial communications with a connected device  to determine the type of the connected device . Based on the determined type of the connected device , the connected devices module  may be configured to determine a particular mapping appropriate for the connected device , the mapping to be used for converting high level programmer\/user input to low-level\/machine level instructions\/configuration information appropriate for the particular connected device .","Referring again to , a button , when activated, may cause the computer  (or the server , in an embodiment) to establish a connection with the connected device  (e.g., a Raspberry Pi device), according to an embodiment. In various embodiments, establishing a connection may include utilizing a device driver determined to be appropriate for the connected device , and\/or utilizing appropriate mapping information to convert high level programmer\/user input to low-level\/machine level instructions\/configuration information appropriate for the particular connected device .","A button , when activated, may open a new notebook associated with the connected device , according to an embodiment. For example, in some embodiments, a user can interact with the connected device  using a high-level software language such as the Wolfram Language\u2122 and a notebook of a computational application such as MATHEMATICA\u00ae. As an illustrative embodiment, a user can send configuration data and\/or control data to the connected device  with programming input (in a high-level software language such as the Wolfram Language\u2122) entered into the notebook. As another illustrative embodiment, a user can retrieve data (such as one or more of sensor data, operational data, configuration data, etc.) from the connected device  with programming input (in a high-level software language such as the Wolfram Language\u2122) entered into the notebook. In other embodiments, a user can interact with the connected device  using a high-level software language and\/or functions provided by other types of computational applications such as a spreadsheet application and a notebook, workspace, spreadsheet of the computational application (e.g., a spreadsheet document of the spreadsheet application). In some embodiments, appropriate mapping information is utilized to convert high level programmer\/user input to low-level\/machine level instructions\/configuration information appropriate for the connected device .","Data from the connected device  can be made network accessible using techniques such as described above. For example, a programmer can utilize high-level programmer input, functions, instructions, etc., such as CloudDeploy, CloudPut, etc. and\/or other suitable programmer input, functions, instructions, etc., in various embodiments.","The connected devices module  executing on one or more of the connected device , the computer , another computer, the server , etc., may provide a set of device interaction functions, instructions, etc., for interacting with the connected device . In some embodiments, the set of device interaction functions, instructions, etc., may permit configuring and\/or interacting with connected devices  using a high-level programming language, high-level commands, functions, etc., without a user needing to have in-depth knowledge and understanding of the underlying hardware.","An example set of device interaction functions is provided below. The example set of device interaction functions is merely one example, according to an embodiment, and other suitable sets of functions may be utilized. For example, other suitable set of device interaction functions may include additional functions, may omit one or more of the following functions, may include modified versions of one or more functions, may combine two or more of the following functions into a single function, may implement one of the following functions as multiple separate functions, may use different function names, may have fewer, more, and\/or different parameters, etc.","Some functions may be useful for setting up and\/or configuring hardware devices included in or communicatively connected to the connected device , establishing connections with hardware devices included in or communicatively connected to the connected device , etc.","A DeviceOpen function may be utilized to open a connection to the connected device . The DeviceOpen function returns a DeviceObject expression and\/or object that represents the connected device , e.g., a handle to the connected device . The DeviceObject may be utilized to refer to the connected device  using the high-level language, functions, instructions, etc., of the computational application . The DeviceOpen function may take one or more arguments, in various embodiments. For example, in an embodiment, a \u201cdevclass\u201d argument may be utilized to specify a class of devices. In an embodiment, DeviceOpen[\u201cdevclass\u201d] may open a connection to a first available connected device of the specified class. As another example, in an embodiment, a \u201cspec\u201d argument may be utilized to specify a particular device within a specified class. In an embodiment, DeviceOpen[\u201cdevclass\u201d, spec] may open a connection to a connected device defined by spec. As another example, in an embodiment, a \u201cdevice\u201d argument may be utilized to specify a device corresponding to a DeviceObject expression\/object.",{"@attributes":{"id":"p-0306","num":"0305"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Some example usages of DeviceOpen are provided below:"},{"entry":"DeviceOpen[\u201cGPIO\u201d]\\[LongRightArrow]DeviceObject[{\u201cdeviceclass\u201d,"},{"entry":"\u201cdeviceid\u201d}]"},{"entry":"DeviceOpen[\u201cArduino\u201d, \u201c\/dev\/tty5\u201d]"},{"entry":"DeviceOpen[\u201cArduino\u201d, XXXX]"},{"entry":"DeviceOpen[\u201cSerial\u201d, {XXXXX, BitRate \u2212> XXXX}]"},{"entry":"DeviceOpen[\u201cCamera\u201d, {RasterSize \u2212> XXXX}, XXXXX]"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A DeviceConfigure function may be utilized to configure a connected device. For example, in an embodiment, DeviceConfigure may include two arguments: e.g., DeviceConfigure[device, config], which causes configuration of the specified device (e.g., \u201cdevice\u201d argument may correspond to a DeviceObject expression\/object) according to configuration information specified by the config parameter.","A DeviceClose function may be utilized to close a connection to a connected device and release resources associated with the connected device. In an embodiment, the DeviceClose function may include an argument that indicates the connected device: e.g., DeviceClose[device].","A FindDevices function may be utilized to find available connected devices. For example, in an embodiment, the FindDevices function may return a DeviceObject expression for each discovered device.","A DeviceInformation function may be utilized to retrieve information about a connected device. In an embodiment, the DeviceInformation function may include an argument that indicates the connected device: e.g., Devicelnformation[device].","A CameraOpen function may be utilized to open a connection to a camera device.","A DeviceRead function may be utilized to read data from the connected device . The DeviceRead function returns an object corresponding to data read from the connected device . The returned object may be in a format that is computable by, and can be processed by, the high-level language, functions, instructions, etc., of the computational application . The DeviceRead function may take one or more arguments, in various embodiments. For example, in an embodiment, a \u201cdevice\u201d argument may be utilized to specify a device corresponding to a DeviceObject expression\/object. As another example, a \u201cdevclass\u201d argument may be utilized to specify a class of devices, and data may be read from a default device in the specified class. In an embodiment, one or more device parameters to be read from the device may be specified.",{"@attributes":{"id":"p-0313","num":"0312"},"figref":["FIG. 28","FIG. 28"],"b":["2800","140","140","2800","2800","140","2800","2800","140","140"]},"A DeviceReadList function may be utilized to repeatedly read items of data from a connected device a specified number of times. The DeviceReadList function returns an object corresponding to data read from the connected device . The returned object may be in a format that is computable by, and can be processed by, the high-level language, functions, instructions, etc., of the computational application . The DeviceReadList function may take one or more arguments, in various embodiments. For example, in an embodiment, a \u201cdevice\u201d argument may be utilized to specify a device corresponding to a DeviceObject expression\/object. As another example, a \u201cdevclass\u201d argument may be utilized to specify a class of devices, and data may be read from a default device in the specified class. In an embodiment, one or more device parameters to be read from the device may be specified.","A DeviceReadTimeSeries function may be utilized to read items of data from a connected device at specified times or intervals and conduct time series object, e.g., an object including time-value pairs. The DeviceReadTimeSeries function returns an object corresponding to data read from the connected device . The returned object may be in a format that is computable by, and can be processed by, the high-level language, functions, instructions, etc., of the computational application . The DeviceReadTimeSeries function may take one or more arguments, in various embodiments. For example, in an embodiment, a \u201cdevice\u201d argument may be utilized to specify a device corresponding to a DeviceObject expression\/object. As another example, a \u201cdevclass\u201d argument may be utilized to specify a class of devices, and data may be read from a default device in the specified class. In an embodiment, one or more device parameters to be read from the device may be specified.","A DeviceReadLatest function may be utilized to read a most recently collected item from a connected device. The DeviceReadLatest function may take one or more arguments, in various embodiments. For example, in an embodiment, a \u201cdevice\u201d argument may be utilized to specify a device corresponding to a DeviceObject expression\/object. As another example, a number of most recently collected items to be read from the device may be specified. In an embodiment, one or more device parameters to be read from the device may be specified.","A DeviceReadBuffer function may be utilized to read the entire contents of a buffer on the device. The DeviceReadBuffer function may take one or more arguments, in various embodiments. For example, in an embodiment, a \u201cdevice\u201d argument may be utilized to specify a device corresponding to a DeviceObject expression\/object. As another example, a number of items to be read from the buffer may be specified. In an embodiment, one or more device parameters to be read from the device may be specified. In an embodiment, a criterion parameter to indicate that data is to be read from the buffer until the criterion is met.","A DeviceWrite function may be utilized to write a value or a list of values to a device. The DeviceWrite function may take one or more arguments, in various embodiments. For example, in an embodiment, a \u201cdevice\u201d argument may be utilized to specify a device corresponding to a DeviceObject expression\/object. As another example, one or more device parameters to which one or more values are to be written may be specified.","A DeviceExecute function can be utilized to cause the connected device  to execute a specified command. The DeviceExecute function may take one or more arguments, in various embodiments. For example, in an embodiment, a \u201cdevice\u201d argument may be utilized to specify a device corresponding to a DeviceObject expression\/object. As another example, a \u201ccommand\u201d that is to be executed may be specified, in an embodiment. As another example, one or more parameters for the command may be specified, in an embodiment.",{"@attributes":{"id":"p-0320","num":"0319"},"figref":["FIG. 29","FIG. 29","FIG. 30","FIG. 30"],"b":["2900","3000"]},"A DeviceExecuteAsynchronous function may be utilized to initiate asynchronous execution of a specified command on the device. In an embodiment, the DeviceExecuteAsynchronous includes one or more of the following parameters: \u201cdevice\u201d, \u201ccommand\u201d, and \u201cfun\u201d, where \u201cdevice\u201d argument may be utilized to specify a device corresponding to a DeviceObject expression\/object, \u201ccommand\u201d indicates the command that is to be executed, and \u201cfun\u201d indicates a handler function fun to be called when an event occurs.  is an illustration of an example notebook , according to an embodiment. In the example of , the DeviceExecuteAsynchronous function is utilized to read from a demonstration device that retrieves cookies from a specified URL, calling a MATHEMATICA function URLFetchAsynchronous in the background.","A DeviceStream function returns a stream or list of streams associated with a device.","An IMAQ\u2032StartCamera function may start an NI-IMAQ camera device taking pictures.","In one illustrative example, the connected device  includes or is communicatively coupled to a weather-related hardware device (e.g., a Raspberry Pi Weather Module) that includes a temperature sensor, a humidity sensor, and a pressure sensor. A user may retrieve data from the hardware device such as using the following sequence of high-level programming inputs:",{"@attributes":{"id":"p-0325","num":"0324"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"In[1] := obj = DeviceOpen[\u2033RaspberryPiWeatherStation\u2033]"]},{"entry":[{},"Out[1] = DeviceObject[{RaspberryPiWeatherStation, 1}]"]},{"entry":[{},"In[2] := DeviceRead[obj, \u201cTemperature\u201d]"]},{"entry":[{},"Out[2] = 25 degrees Celsius"]},{"entry":[{},"In[3] := DeviceRead[obj, \u201cHumidity\u201d]"]},{"entry":[{},"Out[3] = 30 percent"]},{"entry":[{},"In[4] := DeviceRead[obj, \u201cPressure\u201d]"]},{"entry":[{},"Out[4] = 993 hectopascals"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"where In[ ]:=is a prompt after which follows a user input, and Out[ ]=indicates a returned output responsive to the corresponding input.","In another illustrative example, the connected device  includes or is communicatively coupled to a positioning system device (e.g., a GPS Module). A user may retrieve data from the positioning system device such as using the following sequence of high-level programming inputs:","serial=DeviceOpen[\u201cSerial\u201d, {\u201c\/dev\/ttyusb0\u201d, \u201cBaudRate\u201d\u21929600}]","This returns a DeviceObject from which positioning data (e.g., GPS data) can be read. For example, DeviceReadBuffer can be used to read all data that has been buffered thus far.","data=DeviceReadBuffer[serial, \u201cString\u201d]","In one embodiment, the data may be returned in a comma separated format called GPS NMEA sentences. This data can be imported using ImportString.","csv=ImportString[data, \u201cCSV\u201d]","The NMEA sentences that contain GPS coordinates start with the string \u201c$GPRMC\u201d, so the returned data can be filtered:","gps=Cases[csv, {\u201c$GPRMC\u201d,_}]","In NMEA sentences, the coordinates (latitude and longitude) are in the 4th and 6th position of each list:","Part[gps, 1, {4,6}]\/100","which may return, in an example, a set of coordinates such as:","{40.0583, 88.1474}.","As discussed above, the user computer  can interact with the connected device  via a direct connection, and\/or the user computer  or another computer can interact with the connected device  via the server , in various embodiments. In some embodiments, a function such as the CloudAttach function can be utilized to interact with the computing device .","In some embodiments, the cloud-based development system  executed on the server  and i) the connected devices module  executed on the computer  and\/or ii) a module executed on the connected device  may assist making data collected from and\/or generated by the connected device  available via the cloud storage . Additionally, a wizard module executed on the server  and\/or the computer  may assist the user in making data available via the cloud storage . For example, the user may be prompted to identify a source of the data (e.g., a file, a sensor connection, an external source, etc.). The user may specify how raw data is to be processed (e.g., unit conversion, statistical analysis, etc.). A template may be generated that indicates how a report is to be generated using the raw data (e.g., how the raw data is to be processed, formatting of the report, etc.) In some embodiments, the template may include high-level software that specifies how raw data is to be processed, for example, and such software is evaluated when an instance of a report is generated. In some embodiments, the template or another intermediary document may be organized in sections or cells, and a user can specify whether to exclude certain cells from a report, whether to included certain cells in the report, etc. Similarly, in some embodiments, a user may be able to suppress certain cells that generate certain messages, and\/or suppress a report altogether based on cell content (e.g., invalid data). A user may be permitted to select an output format for a report: e.g., HTML, XML, CDF, downloadable, PDF, etc. A user may be able to configure notifications regarding reports, such as a list of recipients to be notified when reports are generated, whether a generated report passes or fails, etc.","Additionally, scheduling of report instance generation may be specified. For example, a report instance may be generated periodically, at specified times, in response to events, etc. For example, a report instance may be generated upon a user request via the server , a report instance may be generated periodically, a report instance may be generated when new raw data is available, etc. Then, the reports and\/or report instances may be deployed to the cloud storage  and thus made available via a URL, for example.","A user can utilize a function such as CloudPut[ReportGenerate[ ]]. A user can send report instances as an email attachment or can send a link to a report instance or report.","Code Generation\/Conversion","In various embodiments, systems such as described above also include functionality that allows for the generation of programming instructions in languages other than a native language (\u201cexternal languages\u201d). For example, the cloud platform may operate according to a primary language (e.g., Wolfram Language), but may be capable of generating programming instructions for other, external languages (e.g., HTML, Javascript, Python, C++, Xcode, etc.).","A Function Call Interface creates a bi-directional mapping of types between the primary language and the external language. First a mapping is created between the primary language types and the types of the external language. Second, a parser is implemented to serialize the external language types into the primary language.","The interface between the primary language and the external language facilitates the use of the cloud platform from within other programming languages. Specifically, the interface facilitates the automatic generation of code in an external language, which code can access the cloud platform via an API (e.g., via an API generated by the CloudDeploy[ ] function or the Instant API module).","An ExternalFunction[ ] function may operate to take an input and perform some action or computation in a specified external programming language. For example, \u201cExternalFunction[\u201cPython\u201d, {x}, x!] [10]\u201d may cause the computation of 10 factorial (10!) using a Python function.","An EmbedCode[ ] function may generate code in a specified external programming language. For example, \u201cEmbedCode[obj, \u201cPython\u201d]\u201d may cause an output of code that can be used in a Python script to execute the function or object stored as \u201cobj\u201d. The output may be in the form of a file, in the form of text for cutting and pasting into the external-language code, or both. In embodiments, the function or object called in the external language is set up as an API accessing functionality of the cloud platform.","obj=CloudDeploy[ExternalFunction[\u201cPython\u201d, {x}, x!], Permissions \u201cPublic\u201d]","EmbedCode[obj, \u201cPython\u201d]","The example code above may define an object \u201cobj\u201d as the output of the CloudDeploy function. The output of the CloudDeploy function would be a URL (e.g., \u201chttps:\/\/www.cloudplatform.com\/objects\/abcde12345\u201d) that, when accessed, executed the external Python function factorial x. The EmbedCode function would output code that could be included in a Python script, which code would access the URL and execute (in the cloud) the external Python function factorial x. That is, the Python script would be using computing power of the cloud platform to perform the script. The generated code, in this case, might look like:",{"@attributes":{"id":"p-0352","num":"0351"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import name"},{"entry":"defendant f(x):"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"name.call(\u201chttps:\/\/www.cloudplatform.com\/objects\/abcde12345\u201d, x=x)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The utility of this construct is more readily apparent if we change the example slightly. Consider the following:",{"@attributes":{"id":"p-0354","num":"0353"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"obj = CloudDeploy[ExternalFunction[\u201cPython\u201d, {x}, x!], Permissions"},{"entry":"\u201cPublic\u201d]"},{"entry":"EmbedCode[obj, \u201cObjectiveC\u201d]"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In this example, the object is defined the same way, but the EmbedCode function generates Objective C code for calling accessing the URL to execute (in the cloud) the external Python function factorial x. Simply put, we have just allowed an Objective C program to perform a function that is implemented in Python, effectively performing a conversion between the two languages.","Still further, the process described above need not include two external languages. The object (obj) could be defined in the primary language (instead of using the ExternalFunction expression), implemented as an API (e.g., using Instant API or CloudDeploy[ ]), and called from an external language program (e.g., Objective C or Python) by generating code in the external language using the EmbedCode[ ] function.","The ability to embed functionality of one language (either the primary language or an external language) in code of an (different) external language is advantageous in a number of different circumstances. For instance, an algorithm that cannot be run on a particular processor or on hardware that is lacking in some way, can be implemented on the cloud platform, deployed as an API, and accessed by software running on the particular processor hardware.","Similarly, functional limitations of a language can be overcome. Objective C is viewed by some as lacking sufficient visualization functionality. Using the system described herein, the visualizations can be handled by the cloud platform by, for example, creating a function to perform the visualization processing on the cloud platform, implementing an API to allow the function to be called, generating code in Objective C to use the API to call the function on the cloud platform (including, possibly, passing data\u2014e.g., by way of the API\u2014from the Objective C program to the function executing on the cloud platform), performing the visualization processing on the cloud platform, and returning the visualized results to the Objective C program.","In various embodiments, one or more of the following syntaxes are utilized:","EmbedCode[obj]","In this example, code for embedding the object obj on a web page is generated.","EmbedCode[obj. \u201cdest\u201d]","In this example, code for an external environment or language of type \u201cdest\u201d is generated.","In EmbedCode[obj], the object obj can be a CloudObject, according to an embodiment.","EmbedCode[obj] returns a string that can be inserted into the HTML of a web page to embed obj on the page, according to an embodiment.","In EmbedCode[obj,\u201cdest\u201d], the object obj can be a function with head APIFunction or FormFunction, according to an embodiment.","Destinations relevant to the web may include:\n\n","Possible frameworks for interactive web content may include:\n\n","Destinations relevant to languages may include: \u201cJava\u201d, \u201cPython\u201d, \u201cJavaScript\u201d, \u201cCr#\u201d, etc.","In typical cases of external programming languages, EmbedCode returns an EmbeddingObject containing an Association giving a variety of elements necessary for the embedding.","Typical options for EmbedCode may include:",{"@attributes":{"id":"p-0372","num":"0378"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ExternalOptions\u2003<||>","options specific to each environment or"]},{"entry":[{},"language"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ExternalFunctionName","Automatic","name to use for generated external"]},{"entry":["ExternalTypeSignature","Automatic","rules specifying mappings to"]},{"entry":[{},{},"external"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ImageSize","Automatic","size of embedded object in pixels"]},{"entry":["Method","Automatic","embedding method to use"]},{"entry":["Permissions","Automatic","permissions to set for the cloud object"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"With the default setting Permissions\u2192Automatic, EmbedCode[obj] will preserve the permissions for a cloud object obj and will use permissions given by $Permissions if a new cloud object is created, according to an embodiment.","With an explicit setting for Permissions, EmbedCode[obj] will effectively use SetOptions to change permissions of a cloud object obj, according to an embodiment.","ExternalTypeSignature\u2192{{\u201cvar\u201d\u2192\u201ctype\u201d, . . . },\u201crettype\u201d} specifies that varshould be of external type type, and that the return type for the whole function should be rettype.","ExternalTypeSignature\u2192{{\u201ctype\u201d,\u201ctype\u201d, . . . },\u201crettype\u201d} takes the nth argument to be of type type.","The typeare native types specified as they are named in the target language.","In many languages, possible external types include: \u201cint\u201d, \u201cdouble\u201d, \u201cstring\u201d.","The types of arguments can often be inferred from other data in APIFunction, etc. where they appear. A type of Automatic will use the inferred form.","In languages where types are used, the return type typically has to be set explicitly.","ExternalTypeSignature\u2192\u201crettype\u201d specifies the return type, and if possible infers all argument types.","In languages with dynamic typing, or without types, types do not usually have to be set.",{"@attributes":{"id":"p-0383","num":"0389"},"figref":["FIG. 32A","FIG. 32B"],"b":"3200"},{"@attributes":{"id":"p-0384","num":"0390"},"figref":"FIG. 33","b":"3300"},{"@attributes":{"id":"p-0385","num":"0391"},"figref":"FIG. 34","b":"3400"},{"@attributes":{"id":"p-0386","num":"0392"},"figref":"FIG. 35","b":"3500"},{"@attributes":{"id":"p-0387","num":"0393"},"figref":["FIG. 36","FIG. 36","FIG. 35"],"b":"3600"},"In various embodiments, functions describe herein can be modified, omitted, combined with other functions, etc. For example, in some embodiments, CloudDeploy and FormFunction are combined into single function, in an embodiment. As another example, CloudDeploy and APIFunction are combined into single function, in an embodiment. As another example, CloudDeploy and EmbedCode are combined into single function, in an embodiment. As another example, CloudDeploy and EmbedCode and APIFunction are combined into single function, in an embodiment. As another example, CloudDeploy and EmbedCode and FormFunction are combined into single function, in an embodiment.","Unless specifically stated otherwise, discussions herein using words such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining,\u201d \u201cpresenting,\u201d \u201cdisplaying,\u201d or the like may refer to actions or processes of a machine (e.g., a computer) that manipulates or transforms data represented as physical (e.g., electronic, magnetic, or optical) quantities within one or more memories (e.g., volatile memory, non-volatile memory, or a combination thereof), registers, or other machine components that receive, store, transmit, or display information.","As used herein any reference to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular element, feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase \u201cin one embodiment\u201d or the phrase \u201cin an embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","Some embodiments may be described using the expression \u201ccoupled\u201d and \u201cconnected\u201d along with their derivatives. For example, some embodiments may be described using the term \u201ccoupled\u201d to indicate that two or more elements are in direct physical or electrical contact. The term \u201ccoupled,\u201d however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other. The embodiments are not limited in this context.","As used herein, the terms \u201ccomprises,\u201d \u201ccomprising,\u201d \u201cincludes,\u201d \u201cincluding,\u201d \u201chas,\u201d \u201chaving\u201d or any other variation thereof, are intended to cover a non-exclusive inclusion. For example, a process, method, article, or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process, method, article, or apparatus. Further, unless expressly stated to the contrary, \u201cor\u201d refers to an inclusive or and not to an exclusive or. For example, a condition A or B is satisfied by any one of the following: A is true (or present) and B is false (or not present), A is false (or not present) and B is true (or present), and both A and B are true (or present).","In addition, use of the \u201ca\u201d or \u201can\u201d are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the description. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.","At least some of the various blocks, operations, and techniques described above may be implemented utilizing hardware, a processor executing firmware instructions, a processor executing software instructions, or any combination thereof. When implemented in hardware, the hardware may comprise one or more of discrete components, an integrated circuit, an ASIC, a programmable logic device, etc. When implemented utilizing a processor executing software or firmware instructions, the software or firmware instructions may be stored in any tangible, non-transitory computer readable medium or media such as a magnetic disk, an optical disk, a tape drive, a RAM, a ROM, a flash memory, a memory of a processor, etc. Likewise, the software or firmware instructions may be delivered to a user or a system via any known or desired delivery method including, for example, on a tangible, non-transitory computer readable medium or media, or via communication media. The software or firmware instructions may include machine readable instructions that, when executed by the processor, cause the processor to perform various acts.","Upon reading this disclosure, those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for identifying terminal road segments through the disclosed principles herein. Thus, while particular embodiments and applications have been illustrated and described, it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications, changes and variations, which will be apparent to those skilled in the art, may be made in the arrangement, operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10A"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 10B","FIG. 10A"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 11B","FIG. 11A"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 12A"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 12B","FIG. 12A"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 13A"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 13B","FIG. 13A"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 14A"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 14B","FIG. 14A"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 15A"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 15B","FIG. 15A"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 16A"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 16B","FIG. 16A"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 17A"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 17B","FIG. 17A"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIGS. 18A-C"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 19A"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 19B","FIG. 19A"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 20A"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 20B","FIG. 20A"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 20C","FIG. 20B"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 24A"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 24B"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 25A"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 25B"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 32A"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 32B"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 37"}]},"DETDESC":[{},{}]}
