---
title: Gathering pages allocated to an application to include in checkpoint information
abstract: Provided are a method, system, and program for gathering pages allocated to an application to include in checkpoint information. A call from an application is intercepted to allocate memory pages to cause indication of pages allocated to the application that have modified data. An operation is initiated to create checkpoint information for the application. Pages allocated to the application that have modified data are determined in response to the operation to create the checkpoint information. The determined pages are saved in the checkpoint information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510757&OS=08510757&RS=08510757
owner: Google Inc.
number: 08510757
owner_city: Mountain View
owner_country: US
publication_date: 20080111
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION","Additional Embodiment Details"],"p":["1. Field of the Invention","The present invention relates to a method, system, and article of manufacture for gathering pages allocated to an application to include in checkpoint information.","2. Description of the Related Art","An operating system includes a virtual memory manager to allocate pages in a memory to applications executed by the operating system. A memory manager may map received virtual addresses used by the operating system and application processes to addresses in one of the pages in memory. The data in the pages may include data and code used by application processes and data and code from a storage device. Pages may be stored in memory or swapped to the storage if there is not sufficient space for all the pages in the memory. If a process references a memory address that resolves within a page that is not available in the memory, then the memory manager generates a page fault to the operating system to cause the operating system to load the required page from a paging file in the storage.","Certain applications may gather state information on the execution of an application and pages in memory allocated to the application to store in checkpoint information. The state of an application maintained in checkpoint information may be used for debugging, development and record and replay purposes. A record and replay program would allow the restoration of an application state so the application may run from the state as indicated in the checkpoint information.","To fully record the state information of an application, the pages used by an application are recorded in checkpoint information. During restoration of the application, the data in the pages written to the checkpoint information would be written to pages allocated to the restored application to restore the pages of the application as they were when the checkpoint information was recorded.","There is a need in the art for improved techniques to gather and store page information related to application execution to allow improved recording of the checkpoint information for the application.","Provided are a method, system, and program for gathering pages allocated to an application to include in checkpoint information. A call from an application is intercepted to allocate memory pages to cause indication of pages allocated to the application that have modified data. An operation is initiated to create checkpoint information for the application. Pages allocated to the application that have modified data are determined in response to the operation to create the checkpoint information. The determined pages are saved in the checkpoint information.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["2","4","6","8","4","8","10","12","10","12"]},"The memory manager  may map received virtual addresses used by the operating system  and application  processes to addresses memory pages. If the application  references a memory address that resolves within a page that is not available in the memory , then the memory manager  generates a page fault to a virtual memory manager  in the operating system  interfacing the memory manager  with the operating system . The virtual memory manager  includes a page fault handler  to process page fault errors from the memory manager . If the page fault error indicates a page is not in the memory , then the page fault handler  loads the required page  from a paging file in the storage .","The application  includes first memory allocation functions  that are called to allocate a page  in virtual memory to the application .","An agent  is loaded and initialized when the application  is initialized and loaded. The agent  may gather information related to the application 's execution and pages  allocated to the application . The agent  may store the gathered information as checkpoint information  to provide state information related to the application  execution, including system information on the execution of the components called by the application . This checkpoint information  may be used to replicate the application  state on the same system  or a different system by restoring the application  to the state indicated in the checkpoint information . The applications  and other data may be stored and loaded from a storage , such as a non-volatile storage device.","The operating system  may maintain page information  having information on which pages allocated to the application  have modified data.  shows a page information instance  as indicating a page , the application  to which the page is allocated, and a modified flag  indicating whether the page has modified, i.e., dirty, data. The operating system  would set the modified flag  upon writing data to a page . When the modified data in the page is written to storage , the modified flag  for the page destaged to storage  may be cleared.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIG. 4","FIG. 4"],"b":["24","100","24","12","102","24","104","24","22","24","106","12","22","22","22","10","56","24","22","22","22","12","22","12","108","22","10","22","22","10"],"i":["a","a ","a ","a","a ","a "]},"In one embodiment, the agent  may reside in the address space of the application  and comprise dynamic linked library (dll) files, such that the agent  dll is loaded when the application is loaded. The agent  may provide hooks that provide the namespace containment by translating the first memory allocation functions  to second memory allocation functions having the write watch parameter set. Alternative techniques known in the art may be used to have the agent  intercept the application  memory allocation functions  to redirect the calls to an alternative second memory allocation function that causes the operating system  to indicate whether a page  has modified data.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5","b":["12","22","12","150","22","24","152","22","154","22"],"i":"a "},"As discussed, the write watch parameter causes the operating system  to indicate in the page information  for the application page  whether the page  () has modified data by setting the modified flag . In response to modifying data in a page , the operating system  determines whether a page was allocated with the write watch parameter set. If so, the operating system sets the modified flag  for the page. Otherwise, if the page was not allocated with the write watch parameter set, the operating system  may not set the modified flag  in the page information. This modified flag  that is used by the operating system  to report to the agent  pages that have been modified may be in additional to any flags in page metadata indicating that a page has dirty data, where the memory manager  uses the page metadata for page management operations.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6","b":["24","12","26","170","26","24","172","10","10","12","10","50","24","174","26","12","14","26"]},"Once the state and system information is stored with the checkpoint information , a checkpoint manager or other program may resume the operation of the application  from the state represented in the checkpoint information . The address space of the recreated application  may be populated with the memory state information stored in the checkpoint information . To recreate an application , a new process for the application is created. In the Microsoft\u00ae Windows\u00ae operating system environment, the newly created process may contains the executable image, ntdll.dll, process environment block (PEB), thread environment block (TEB), and other system regions such as ANSI code page, shared memory data, mapped at the top of the process address space. The data segment portions of the executable image and ntdll.dll are overwritten from the respective contents saved in the checkpoint information . The rest of the address space of the process may be populated with the memory regions described by the checkpoint information . The application  default heap, thread stacks, regions containing the loader data and process environment variables, etc. are restored by mapping memory regions with appropriate size and attributes and overwriting them with the contents saved in the checkpoint information  without regard to their internal structure. In particular, the memory region containing the agent  is also mapped, so that the restarted instance of the process already has the agent  for subsequent checkpoints. Further, the pages  for the application may be reallocated and the pages having modified data stored in the checkpoint information  may overwrite the pages allocated to the restored application .","The described embodiments provide techniques to store pages allocated to an application in a manner that conserves space in the checkpoint information by providing a mechanism for the checkpoint agent to determine those application pages having modified data and only storing application pages having modified data. Pages allocated to the application that do not have modified data are not stored so as to conserve space in the checkpoint information.","The described operations may be implemented as a method, apparatus or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The described operations may be implemented as code maintained in a \u201ccomputer readable storage medium\u201d, where a processor may read and execute the code from the computer storage readable medium. A computer readable storage medium may comprise storage media such as magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, DVDs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, Flash Memory, firmware, programmable logic, etc.), etc. The code implementing the described operations may further be implemented in hardware logic implemented in a hardware device (e.g., an integrated circuit chip, Programmable Gate Array (PGA), Application Specific Integrated Circuit (ASIC), etc.). Still further, the code implementing the described operations may be implemented in \u201ctransmission signals\u201d, where transmission signals may propagate through space or through a transmission media, such as an optical fiber, copper wire, etc. The transmission signals in which the code or logic is encoded may further comprise a wireless signal, satellite transmission, radio waves, infrared signals, Bluetooth, etc. The \u201carticle of manufacture\u201d may comprise a transmitting station and\/or a receiving station for transmitting and receiving transmission signals in which the code or logic is encoded, where the code or logic encoded in the transmission signal may be decoded and stored in hardware or a computer readable storage medium at the receiving and transmitting stations or devices. An \u201carticle of manufacture\u201d comprises a computer readable storage medium, hardware device, and\/or transmission transmitters or receivers in which code or logic may be implemented. Those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise suitable information bearing medium known in the art.","Described embodiments discussed certain implementations in the Microsoft\u00ae Windows\u00ae operating system environment. However, the embodiments described herein may be used with operating systems other than Microsoft\u00ae Windows\u00ae to allow checkpointing and restoration of application pages.","The terms \u201can embodiment\u201d, \u201cembodiment\u201d, \u201cembodiments\u201d, \u201cthe embodiment\u201d, \u201cthe embodiments\u201d, \u201cone or more embodiments\u201d, \u201csome embodiments\u201d, and \u201cone embodiment\u201d mean \u201cone or more (but not all) embodiments of the present invention(s)\u201d unless expressly specified otherwise.","The terms \u201cincluding\u201d, \u201ccomprising\u201d, \u201chaving\u201d and variations thereof mean \u201cincluding but not limited to\u201d, unless expressly specified otherwise.","The enumerated listing of items does not imply that any or all of the items are mutually exclusive, unless expressly specified otherwise.","The terms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d mean \u201cone or more\u201d, unless expressly specified otherwise.","Devices that are in communication with each other need not be in continuous communication with each other, unless expressly specified otherwise. In addition, devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries.","A description of an embodiment with several components in communication with each other does not imply that all such components are required. On the contrary a variety of optional components are described to illustrate the wide variety of possible embodiments of the present invention.","Further, although process steps, method steps, algorithms or the like may be described in a sequential order, such processes, methods and algorithms may be configured to work in alternate orders. In other words, any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further, some steps may be performed simultaneously.","When a single device or article is described herein, it will be readily apparent that more than one device\/article (whether or not they cooperate) may be used in place of a single device\/article. Similarly, where more than one device or article is described herein (whether or not they cooperate), it will be readily apparent that a single device\/article may be used in place of the more than one device or article or a different number of devices\/articles may be used instead of the shown number of devices or programs. The functionality and\/or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality\/features. Thus, other embodiments of the present invention need not include the device itself.","The illustrated operations of , , and  show certain events occurring in a certain order. In alternative embodiments, certain operations may be performed in a different order, modified or removed. Moreover, steps may be added to the above described logic and still conform to the described embodiments. Further, operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further, operations may be performed by a single processing unit or by distributed processing units.","The foregoing description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
