---
title: Method and system for dynamically tagging metrics data
abstract: Embodiments of systems and methods are described for dynamically tagging metrics data by a provider of computing resources. In some implementations, a requesting user or application can request the provider of computing resources to tag the metrics based on configurations and/or settings specified by the requesting user or application. The tagged metrics data can then be processed by a processing user or application at a later time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08429187&OS=08429187&RS=08429187
owner: Amazon Technologies, Inc.
number: 08429187
owner_city: Reno
owner_country: US
publication_date: 20110321
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Companies and organizations operate computer networks that interconnect numerous computing systems to support their operations. The computing systems can be located in a single geographical location (e.g., as part of a local network) or located in multiple distinct geographical locations (e.g., connected via one or more private or public intermediate networks). Data centers can house significant numbers of interconnected computing systems, such as, e.g., private data centers are operated by a single organization and public data centers operated by third parties to provide computing resources to customers. Public and private data centers can provide network access, power, hardware resources (e.g., computing and storage), and secure installation facilities for hardware owned by the data center, an organization, or by other customers.","To facilitate increased utilization of data center resources, virtualization technologies can allow a single physical computing machine to host one or more instances of virtual machines that appear and operate as independent computer machines to a connected computer user. With virtualization, the single physical computing device can create, maintain or delete virtual machines in a dynamic manner. In turn, users can request computer resources from a data center and be provided with varying numbers of virtual machine resources on an \u201cas needed\u201d basis or at least on an \u201cas requested\u201d basis.","As the scale and scope of data centers has increased, the task of provisioning, administering, and monitoring the physical and virtual computing resources of the data center has become increasingly complicated.","Embodiments of systems and methods are described for dynamically tagging metrics data by a provider of computing resources. Illustratively, the computing resources can include program execution capabilities, data storage or management capabilities, network bandwidth, etc. In some implementations, a user can request that a virtualization infrastructure be generated that can manage and reserve computer resources for the user during a future usage time period. For example, the user can request a virtualization infrastructure be generated that can manage and reserve data storage or network bandwidth for the user during the future usage period. The computing resource provider can determine which of the provider's computer resources can be made available to meet the user's request and can allocate those computer resources to the user during the requested usage period.","The virtualization environment can be a run-time environment that includes an application software stack for the user's program together with one or more infrastructure services for executing the user's program on the program execution service. The virtualization environment can include a user-selectable operating system (e.g., Linux, Windows, etc.), application server (e.g., Apache Tomcat), system or application configuration, etc. The virtualization environment can be configured to be hosted at a specific URL. The infrastructure services can include, but are not limited to, a load balancer to distribute workload across the requested computing resources, a load scaler to scale computing resources in response to load or demand variations, a firewall or other service to control access to the computing resources, a monitoring interface that permits the user to monitor execution of the program, data storage resources (e.g., scalable volume block storage), and so forth. In some embodiments, the user may be able to select one or more programs or services that can be included in the virtualization infrastructure. For example, the user may be able to select from a plurality of database models (e.g., a relational database, SQL database, Oracle database, etc.). In some embodiments, the infrastructure services can be customized to the user rather than being a shared resource among a plurality of users. For example, in some such embodiments, the load balancer can be individually customized to the user's application rather than being shared or distributed among a number of users of the program execution service.","Metrics data can be collected for the various computing resources that have been allocated for a user. Metrics data of the computing resources can be analyzed, trended, reported, etc. to monitor the usage patterns and functioning of the computer resources. Metrics data can be collected by the program execution service or another service. For example, operational performance, resource utilization, demands patterns, etc. of the computer resources can be measured. In some implementations, the metrics data can be tagged as requested by a requesting user or application. The requesting user or application can request the virtualization infrastructure to add any key\/value pairs to the metrics data so that the tagged metrics data could later be processed. The tagged metrics data can then be outputted to a processing user or application.","As used herein, in addition to having its ordinary meaning, the term \u201cmeasurement\u201d can mean an observed value with a set of attributes. For example, a measurement can include a name, a set of dimensions, a namespace, a unit, and\/or a timestamp among possibly other (or fewer) characteristics. As used herein, in addition to having its ordinary meaning, the term \u201cdimension\u201d can be used to specify how a measurement can be aggregated, such as by InstanceID, InstanceType, Availability Zone, or other factors (described in detail below). As used herein, in addition to having its ordinary meaning, namespace identifies the service that collected the measurement. Furthermore, as used herein, in addition to having its ordinary meaning, a metric can include an aggregation of measurements data.","A user can specify one or more metrics that specify how the various measurements are to be aggregated. For instance, metrics data can include the same attributes as the measurements data and can be the aggregate of some or all measurements with a given name, within a given period of time. As another example, a metric can include an aggregation of some or all of the measurements in a particular namespace, or another metric can include an aggregation of some or all measurements having a particular InstanceID. A metric can, in some embodiments, be an aggregation of other metrics. As a result of this flexibility, in certain embodiments, metrics include a variety of dimensions based on the preferences of the user. As used herein, in addition to having its ordinary meaning, the term \u201ctag\u201d can mean any key\/value pair associated with a particular metric. For example, a tag can indicate the key \u201cinstanceID\u201d for a particular metric has a value of \u201c123456.\u201d As another example, a tag can indicate the key \u201ccustomerID\u201d for a particular metric has a value found at record \u201c12, 5\u201d in a certain data store.","Various aspects of the disclosure will now be described with regard to certain examples and embodiments, which are intended to illustrate but not to limit the disclosure.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","104","108","100","100","104","100","104","100","108","108","108","108"]},"The program execution service  provides a variety of functionality for managing execution of programs for multiple users. In the example illustrated in , the program execution service  includes a plurality of computing nodes  that can execute programs on behalf of the users. The computing nodes  can include one or more physical computing systems  and\/or one or more virtual machines  that are hosted on one or more physical computing systems. For example, a host computing system can provide multiple virtual machines  and include a virtual machine (\u201cVM\u201d) manager  to manage those virtual machines (e.g., a hypervisor or other virtual machine monitor).","In the example illustrated in , each of the computing nodes  has some amount of computing resources available for executing one or more programs. Each computing node  can provide a specific amount of program execution capacity, which can be measured, for example, by a combination of one or more of processing capacity (e.g., number and\/or size of processing units), memory capacity, storage capacity, network bandwidth capacity, non-network communication bandwidth, etc. In some embodiments, the program execution service  can provide preconfigured computing nodes , with each preconfigured computing node having similar and\/or equivalent amounts of resources available for executing programs on behalf of users. In other embodiments, the program execution service  can provide a selection of various different computing nodes  from which a user can choose for executing programs on behalf of the user. In yet other embodiments, the program execution service  can generate various computing nodes that are specific to a user and execution of the user's program. In some such embodiments, the computing nodes  can have varying amounts and\/or types of computing resources (e.g., size, speed and\/or type of processing units; number of processing units; amount of memory and\/or storage; platform configuration, such as 32-bit or 64-bit, operating system, etc.).","The program execution service  can provide user computing systems  with access to storage nodes  that provide mass storage of data, programs, and other user information. The storage nodes  can include any type of persistent data storage, for example non-volatile memory devices such as, e.g., hard disk drives, optical disk drives, etc. In the example illustrated in , the computing nodes  can access the storage nodes  via a network . The network  can include multiple networking devices (not shown) such as, e.g., switches, edge routers, core routers, etc. The network  can, but need not be, a different network than the network  shown in .","Users or applications of the program execution service  can interact with the program execution service  via a dynamic tagging manager . For instance, users or applications can request tagging of one or more metrics associated with resources of the program execution service  that have been used on behalf of the user (e.g., resource utilization and\/or demand patterns). The dynamic tagging manager  can be connected to or in communication with the computing nodes  and the storage nodes  via the network . The dynamic tagging manager  can receive requests for tagging of metrics from the user computing systems  over the network . A user (or other users authorized by the user) can request via the dynamic tagging manager  that the service  tag one or more measurements associated with the computing nodes that can later be presented to a processing user or application. In some implementations, a user can request the dynamic tagging manager  to tag metrics data that has been collected by a different service. For example, the metrics data can relate to performance of network resources (e.g., traffic, latency, speed, errors, etc.); performance of sales of goods and\/or services (e.g., quantity of sales, profit, return on investment, cashflow, sales targets, etc.); performances of financial resources (e.g., stocks, investments, capital gains\/loses, etc.); etc.","In some embodiments, the user can request via the dynamic tagging manager  that the service  generate one or more tags for tagging the metrics on behalf of the user. Service  can generate the one or more tags or the user can specify which criteria the user prefers for generating the one or more tags for tagging the metrics. In various embodiments, the tagging preferences and\/or settings can be specified at the time of a request for tagging of one or more metrics and\/or at one or more other times, such as when a user registers and\/or subscribes to use services of the program execution service . In some embodiments, the dynamic tagging manager  can provide subscription and\/or registration services to one or more users, such that users can specify information related to type of metrics and\/or preferences for tagging the metrics, account information (e.g., user name, billing information, etc.), terms of use, etc.","In some embodiments, after or before a user interacts with the dynamic tagging manager  to subscribe and\/or register for services, the user can be issued one or more request identifiers (e.g., keys, tokens, user names, passwords, etc.) that are associated with the user and are to be used in conjunction with requesting tagging of the one or more metrics associated with the resources being used on behalf of the user. In other embodiments, a module other than the dynamic tagging manager  can be provided to perform various operations related to subscription and\/or registration services of the program execution service .","In some embodiments, the dynamic tagging manager  is executed or embodied by one or more physical or virtual computing systems. For example, in some embodiments, a server computing system that has components including a CPU, I\/O components, storage, and memory can be used to execute the dynamic tagging manager . The I\/O components can include a display, a network connection to the network , a computer-readable media drive, and other I\/O devices (e.g., a keyboard, a mouse, speakers, etc.). An embodiment of the dynamic tagging manager  can be stored as one or more executable program modules in the memory of the server, and the dynamic tagging manager  can interact with computing nodes  (e.g., physical computing systems  and\/or VMs ) over the network . The dynamic tagging manager  can receive requests from users for tagging of metrics via the network .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2A","b":["130","130","204","208","212","216"]},"The default tagging module  tags one or more metrics that have been collected by the program execution service  such as, e.g., resource utilization, resource monitoring, etc. This metrics data can include standard metrics that are collected by program service  or another service and\/or can include metrics defined or created by the user, a plug-in, an extension, etc. for collection. The metrics data can include different dimensions and the users can create and\/or define their own metrics. In some implementations, tagging includes inserting key\/value pairs into the collected metrics (e.g., \u201cname space\u201d=\u201cnamespace one\u201d and\/or \u201cname\u201d=\u201cCPUUtilization\u201d).","The default tagging module can include as many tags that a system designer of the program execution service desires. For instance, the system designer of the program execution service can desire to tag by default respective collected metrics based on the InstanceID (e.g., ID of the instance that generated the metric), InstanceType (e.g., type of instance that generated the metric), Namespace (e.g., service that generated the metric), AvailabilityZone (e.g., region or zone that generated the metric), Name (e.g., name of the metric), ResourceType (e.g., type of resource that generated the metric), etc. The system designer can also desire to tag respective metrics with more or different tags based on one or more factors. For instance, for metrics associated with storage, the system designer may decide to tag the metrics based on database class, database type, etc. A plurality of other configurations can be implemented by the default tagging module  and the system designer.","The acquisition module  receives requests from users or applications for tagging one or more metrics managed by the program execution service  such as, e.g., a request that one or more additional tags be added for metrics associated with the one or more computing resources used on behalf of the user or application. The request can include some or all the tags to be added. The tags to be added can be different and in addition to the default tags discussed above. The additional tags can be tags desired by a user or application of program execution service  and different than the default tags designed by the system designer.","One example of additional tags could include tags that specify key\/value pairs for the server type or application stack. This example tag may be desired by a user so the user or an application can later process the tagged metrics by their respective server type or stack. The user could request the acquisition module  to tag metrics data to include a key \u201cserverType\u201d and its associated value for respective metrics. As another example, additional tags could include tags associated with unique identifiers of customers. In this example, the tag may be desired by a user or application so that the user or application can process the tagged metrics based on unique identifiers associated with customers, such as for billing purposes.","As yet another example, the user could request that additional tags be added for notification of any change in state of computing resources. In this example, the additional tags could be used to by the user or application to notify any responsible parties of the status change. The user, in this example, could request that the key \u201cChangeNotification\u201d be added and its respective value be assigned a value indicating the status of the resource change (e.g., \u201cInstance Terminated\u201d). As a further example, an application of program execution service may request that additional tags be added to indicate the customer account associated with the computing resources so that, for instance, the tagged metrics data can later be processed for billing.","The application could also request that additional tags associated with the geographic zone, region, data center, etc. of the computing resources be added so that, for example, the tagged metrics data could be processed later based on the additional tags to perform statistical analysis on the computing resources. A variety of tags can be created or defined by a user or application and supported by program execution service . Requests for tagging of metrics data can be received by the acquisition module  in various ways. For example, a request can be received directly from a user (e.g., via an interactive console or other GUI provided by the program execution service ), from an executing program of a user that automatically initiates the execution of other programs or other instances of itself, from programming tools (e.g., command-line tools, integrated development environments, etc.), from a program that interacts with the dynamic tagging manager  via an Application Programming Interface (\u201cAPI\u201d) provided by the program execution service  (e.g., an API that uses Web services), and so forth.","Requests for tagging of metrics can include a number and\/or type of tags, a minimum and\/or maximum number of tags to use, a number and\/or type of criteria to use in tagging the metrics, etc. The request for tagging can include other types of preferences, requirements, and\/or restrictions (e.g., type of tagging preferred, frequency of tagging, conditions for tagging, etc.). Alternatively, the dynamic tagging manager  can be configured to provide options to the user for specifying these preferences, requirements, restrictions, etc. and\/or configured to provide these options automatically.","The acquisition module  can also receive the request for tagging from a service. For example, the acquisition module  can receive the request for tagging from another module or server of the program execution service  or can receive the request from an external service. The request can include the tags, requirements, preferences, etc., as discussed above.","After the request for tagging is received by the acquisition module , the processing module  can process the request to determine one or more computing nodes that can be communicated with for tagging metrics data with the additional tags. The processing module  can analyze the additional tags and determine which computing nodes need to be communicated with in order to tag the metrics data with the additional tags. For example, for an additional tag associated usage of storage resources by the user, the processing module  can determine which storage nodes  are being used by the user. As another example, for an additional tag indicating which customers of the user are using a load balancer for billing purposes, processing module  can determine which load balancing nodes are being used by the user.","In certain embodiments, the user can specify which criteria the user desires for tagging, as discussed above, and processing module  can determine one or more additional tags based on the criteria and can determine one or more computing nodes that can be communicated with for tagging the metrics with the additional tags. For example, the user may indicate to acquisition module , via a wizard, for example, that the user's account with the program execution service is used for multiple customers and the user would like to be able to bill the customers directly based on their usage of computing resources. The user may indicate which computing resources are being used by which customer. The processing module  can then determine that additional tags associated with unique customer identification numbers would provide the tagging desired by the user and determine which computing nodes should be communicated with in order to perform the tagging. The processing module  may present the determined additional tags to the user so the user, another user, or application can later process the tagged metrics (discussed below).","In the embodiment illustrated in , the tagging module  communicates with the one or more determined computing nodes to request the computing nodes to tag any measured or collected metrics with the additional tags. The interactions between the tagging module  and the one or more determined computing nodes can occur in various ways. For example, interactions can occur via an API other type of communication interface provided by the one or more determined computing nodes. The tagging module  could communicate the key\/value pairs that should be added to any metrics measured or collected by the determined computing nodes. The tagging module  could also communicate any additional information needed by the determined computing nodes to enable the computing nodes to tag the data as desired. In some implementations, after tagging, acquisition module  can receive requests for one or more further additional tags or one or more modifications to the additional tags and the processing module  and tagging module  can perform any tagging, as discussed above, based on the one or more further additional tags or the one or more modifications to the additional tags.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 4"],"b":["408","1","2"]},"As disclosed above, adding these additional tags would allow a user or application to later process the tagged metrics data as desired (e.g., billing, etc.). Further, Tag # could be created by a user to specify that for any computing node instance that comprises a load balancer, a key \u201cserverType\u201d should be added. Since the user has specified a value of the key using a \u201c$\u201d, program execution service could be configured to determine that value of the additional key in real-time or run-time and tag the metrics data with the additional key as specified by the user. For instance, if the program execution service determines at run-time that a load balancer is associated with a computing node instance associated with a web server, then the key \u201cserverType\u201d could be assigned a value \u201cwebServer\u201d by the program execution service and the metrics data could be tagged with this additional tag. The values given to this key could be defined by the user and the program execution service. For example, the various values that could be assigned for a particular key (e.g., serverType) could be defined by the user and stored by program execution service using the storage nodes . These stored values could later be accessed by a computing node instance to determine a value that should assigned to a particular key.","Tag # could be created by a user to specify that an additional tag be created and added for any status change associated with a computing node instance. The user, as shown, has indicated that this additional tag should be given a key of \u201cchngeStatus\u201d and the value to be assigned to that key can be found by reference \u201c&address\u201d which can indicate the location that values for the key can be found. For example, as explained above, values that can be assigned to a particular key can be managed by storage nodes  and the \u201c&address\u201d can be a reference to storage nodes  that manages a list of values that can be assigned to a particular key that is stored in a data storage. As another example, \u201c&address\u201d could directly refer a storage location, Web address, etc. for which the list of values could be found. The values of the key may be determined by the dynamic tagging manager at the time of the user request and associated with the key, or the values can be determined in run-time by a computing node instance.","Tag # could be created by a user to specify that an additional tag be generated by the program execution service that would enable the user to perform billing by the user's customers. As discussed above, program execution service can then generate one or more additional tags based on the criteria specified by the user. For instance, program execution service may generate an additional tag have a key \u201ccustID\u201d to provide the billing requested by the user. Program execution service can then assign the value associated with an identifier for customers and tag the metrics with these key\/value pairs. Program execution service may determine the values to be assigned to a particular key similar to the examples given above. Moreover, program execution service may store the one or more keys that are generated using the storage nodes  so that users and applications processing the tagged metrics could later request the storage nodes to provide the keys that were used to tag the metrics. The list of keys could also be provided to the requesting user.","Returning to , The dynamic tagging module  can be configured differently than illustrated in . For example, various functionalities provided by the illustrated modules can be combined, rearranged, added, or deleted. In some embodiments, additional or different processors or modules can perform some or all of the functionalities described with reference to the example embodiment illustrated in . Many implementation variations are possible.","Although described generally in terms of tagging of metrics data, in other embodiments, the dynamic tagging manager  can tag data of any type. These data types can include one or more of the following, for example: network data (e.g., network traffic, performance data, errors data, etc.); sales data (e.g., inventory data, profit data, revenue data, forecast data, etc.); financial data (e.g., investment data, credit data, insurance data, etc.); etc.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 2B","b":["104","130","100","100","104","104","104","100","104","104","104","130"],"i":["a ","a","b","n","a","b","n "]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 2B","b":["104","1","108","2","130","100"],"i":"a "},"In the example shown in , the dynamic tagging manager  communicates with a confirmation API () via the network  which is () received by the user computing system . The confirmation API can include information related to whether the program execution service  can grant the request (in whole or in part). The confirmation API can also include one or more request identifiers (e.g., keys, tokens, user names, passwords, etc.) that are associated with the user's request and that are to be used in conjunction with tagging the metrics data. The confirmation API can include other information such as, e.g., information confirming that the user's preferences, requirements, and\/or restrictions can be met.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 2B","FIG. 2B"],"b":["104","130","100","100","104","104","130","100","100"],"i":["a ","b","n"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 2C","b":["112","130","100","130","142","142","142","112","130","104","104","112","130","112","142","142","142","130","112","112","112"],"i":["a","b","n ","a","n","a","b","n"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 3","FIGS. 1 and 2"],"b":["300","300","130","100","300","300","130"]},"With reference to , the program execution service performs defaulting tagging of metrics data at block . The system designer specifies default tags that should be inserted or adding to metrics data managed, collected, monitored, etc. by program execution service. As explained above, a variety of default tags could be used and the number and\/or type of default tags used could vary between respective metrics data as designed by the system designer. At block , a request is received by the dynamic tagging manager  from the user for tagging of metrics by the program execution service . As discussed above, the request can include a desired number and\/or type of tags, a minimum and\/or maximum number of tags, a number and\/or type of criteria to use in tagging the metrics, etc. The request can specify that only a certain user (or users) be granted access to tag the metrics data. The request for tagging can include other types of preferences, requirements, and\/or restrictions (e.g., type of tagging preferred, frequency of tagging, conditions for tagging, etc.).","At block , the dynamic tagging manager  processes the received request to determine one or more additional tags for tagging the metrics data. In various embodiments, the request for tagging includes the additional tags that are to be used for tagging the metrics. The program service  analyzes the request to determine the one or more additional tags. In some implementations, the received request can be used by the program service  to create or generate one or more additional tags. As discussed above, the received request may specify criteria to be used in tagging the metrics and program execution service may analyze the criteria to create one or more additional tags to be used in tagging the metrics.","With reference to , the routine  continues at block  where the dynamic tagging manager  tags the metrics data with the one or more additional tags, thereby enabling the tagged metrics to later be processed by a processing user or application. The dynamic tagging manager  determines one or more computing nodes that could be communicated with to perform tagging of the metrics data with the additional tags. The dynamic tagging manager  then communicates with the determined one or more computing nodes to request the computing nodes to tag the metrics data managed, collected, monitored, etc. by the computing nodes with the additional tags. The dynamic tagging manager  can provide the computing nodes the additional tags that are to be used to performing the tagging and the conditions, criteria, etc. that are to be used to perform the tagging.","At block , optionally other services can be performed by embodiments of the routine . For example, program service  can output to tagged metrics data to a processing user or application. Some examples of tagged metrics data could include the following example tags: \u201cinstanceID=i-020f0d6a\u201d; \u201cinstanceType=storage node\u201d; \u201cHostname=www.xyx.com\u201d; \u201cIP address=10.254.111.4\u201d; \u201czone=us-east-1a\u201d; \u201cdiskReadbytes=5 KB\u201d; \u201cdatacenter=snap-8010f6e9\u201d; \u201cCPUUtilization=5 hours\u201d; \u201cbillingID=123456\u201d; or \u201cinstanceID=i-030g0w2b\u201d; \u201cinstanceType=load balancer\u201d; \u201czone=us-east-1b\u201d; \u201cbillingID=123456,\u201d etc. Many other variations for tagged metrics data are possible. The dynamic tagging manager  can output the tagged metrics data to the processing user or application in a variety of ways. For example, the program service  can output the tagged metrics data using an API or other communication interface, a webpage, an interactive console, an application, or the like.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 5","b":"100"},"The aggregating application could, as an example, aggregate the tagged metrics data based on tags associated with customers and present them to a processing user or application so that the aggregated metrics could be processed for billing or statistical analysis purposes. The aggregating application could parse the tagged metrics to locate all tags associated with a customer and aggregate or group the metrics based on these tags (e.g., havening similar keys) or combination of the tags. A variety of aggregations and sub aggregations could be provided by the aggregating application and the tagged metrics data could also be outputted to a variety of other applications. In some implementations, the outputting of the tagged metrics could be provided by another service other than program execution service.","Each of the processes, methods, and algorithms described in the preceding sections can be embodied in, and fully or partially automated by, code modules executed by one or more computers or computer processors. The code modules can be stored on any type of non-transitory computer-readable storage medium or computer storage device, such as hard drives, solid state memory, optical disc, and\/or the like. The systems and modules can also be transmitted as generated data signals (e.g., as part of a carrier wave or other analog or digital propagated signal) on a variety of computer-readable transmission mediums, including wireless-based and wired\/cable-based mediums, and can take a variety of forms (e.g., as part of a single or multiplexed analog signal, or as multiple discrete digital packets or frames). The processes and algorithms can be implemented partially or wholly in application-specific circuitry. The results of the disclosed processes and process steps can be stored, persistently or otherwise, in any type of non-transitory computer storage such as, e.g., volatile or non-volatile storage.","The various features and processes described above can be used independently of one another, or can be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition, certain method or process blocks can be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence, and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example, described blocks or states can be performed in an order other than that specifically disclosed, or multiple blocks or states can be combined in a single block or state. The example blocks or states can be performed in serial, in parallel, or in some other manner. Blocks or states can be added to, or removed from the disclosed example embodiments. The example systems and components described herein can be configured differently than described. For example, elements can be added to, removed from, or rearranged compared to the disclosed example embodiments.","Conditional language used herein, such as, among others, \u201ccan,\u201d \u201ccould,\u201d \u201cmight,\u201d \u201cmay,\u201d \u201ce.g.,\u201d and the like, unless specifically stated otherwise, or otherwise understood within the context as used, is generally intended to convey that certain embodiments include, while other embodiments do not include, certain features, elements and\/or steps. Thus, such conditional language is not generally intended to imply that features, elements and\/or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding, with or without author input or prompting, whether these features, elements and\/or steps are included or are to be performed in any particular embodiment. The terms \u201ccomprising,\u201d \u201cincluding,\u201d \u201chaving,\u201d and the like are synonymous and are used inclusively, in an open-ended fashion, and do not exclude additional elements, features, acts, operations, and so forth. Also, the term \u201cor\u201d is used in its inclusive sense (and not in its exclusive sense) so that when used, for example, to connect a list of elements, the term \u201cor\u201d means one, some, or all of the elements in the list.","While certain example embodiments have been described, these embodiments have been presented by way of example only, and are not intended to limit the scope of the inventions disclosed herein. Thus, nothing in the foregoing description is intended to imply that any particular feature, characteristic, step, module, or block is necessary or indispensable. Indeed, the novel methods and systems described herein can be embodied in a variety of other forms; furthermore, various omissions, substitutions and changes in the form of the methods and systems described herein can be made without departing from the spirit of the inventions disclosed herein. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of certain of the inventions disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Throughout the drawings, reference numbers may be re-used to indicate correspondence between referenced elements. The drawings are provided to illustrate example embodiments described herein and are not intended to limit the scope of the disclosure.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
