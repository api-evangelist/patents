---
title: Radiocommunication module executing a main software and a client software comprising several client applications
abstract: The invention concerns a radiocommunication module, of the type hosting and executing a main software providing in particular radiocommunication functions and comprising means for executing drive controls, sent to it by at least a driver client software. The invention is characterised in that the radiocommunication module further hosts and executes at least a client software comprising a main client application and at least a secondary (slave) client application. The processing operations carried out by the onboard client software are distributed between the main and secondary client applications. The onboard client application acts: as a driver client software, sending drive controls to the main software, and receiving from it responses, resulting from the execution of some of the drive controls; and/or as a supervising client software, managing the execution of the drive controls sent by an (external) driver client software hosted and executed by a third party equipment co-operating with the radiocommunication module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07653382&OS=07653382&RS=07653382
owner: Wavecom
number: 07653382
owner_city: Issy-les-Moulineaux Cedex
owner_country: FR
publication_date: 20020322
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","APPENDIX 1","Detailed Presentation of Some Source Functions on Which the Client Main Application and the Client Secondary Application are Based"],"p":["This Application is a Section 371 National Stage Application of International Application No. PCT\/FR02\/01028, filed Mar. 22, 2002 and published as WO 02\/078376 on Oct. 3, 2002 not in English.","The domain of this invention is radiocommunication systems, and particularly but not exclusively the GSM (Global System for Mobile Communications) standard, DCS 1800 (Digital Cellular System 1800 MHz), PCS 1900 (Personal Communication system), GPRS (General Packet Radio Service) or UMTS (Universal Mobile Telecommunication System).","More precisely, the invention relates to a radiocommunication module. Remember that the radiocommunication module is an essential element of a radiotelephone. It hosts and executes a main software (commonly called \u201cradiocommunication software\u201d or \u201cGSM software\u201d) that in particular performs wireless communication functions (radiocommunication) and controls various other hardware elements (screen, keyboard, loudspeaker, etc.) of the radiotelephone.","Normally (first application), the radiocommunication module is included in a terminal (or ME for \u201cMobile Equipment\u201d) that cooperates with a SIM (Subscriber Identity Module) card.","Other applications are now envisaged for the above mentioned radiocommunication module.","In particular, it has been proposed to integrate the radiocommunication module in devices other than radiocommunication terminals but that still require a wireless communication function (second application). For example, telemetry devices (for reading meters), alarm devices or bank card readers.","It has also been proposed to supply the radiocommunication module in independent form (third application); it is then qualified as a modem. This type of modem does not contain any hardware man-machine interface element (screen, keyboard, loudspeaker, etc.). It is designed to cooperate with a terminal equipment (supporting a client software), that does have hardware man-machine interface elements. In particular, but not exclusively, the terminal equipment may be a micro-computer. In general, the terminal equipment hosts and executes a client driver software that controls the radiocommunication module, using a set of driver commands in the AT format. The AT (for ATtention command) commands enable the Terminal Equipment (TE) to request the radiocommunication terminal to which it is connected to perform some predetermined actions. To achieve this, the main software (hosted on the radiocommunication module) comprises means of executing AT commands sent to it by the client driver software (hosted on the terminal equipment).","For further information about AT commands, refer firstly to the ETSI \u201cGSM 07.05\u201d and \u201cGSM 07.07\u201d standards, and secondly to the ITU-T recommendation V25ter which are inserted herein by reference.","In general, a radiocommunication module can be driven by a terminal equipment using AT commands not only within the framework of the above mentioned third application (radiocommunication module forming a modem), but also within the context of the first and second applications mentioned above (radiocommunication module included in a radiocommunication terminal or other system).","In other words, regardless of what application is envisaged, the radiocommunication module may be driven by a terminal equipment with which it cooperates (usually through a serial link). In this case, a client driver software (comprising a \u201cclient external application\u201d), hosted and executed by the terminal equipment, sends AT commands to a main software, hosted and executed by the radiocommunication module, so that the radiocommunication module can execute them.","As shown in , operation of the existing technique used for terminal equipment to drive a radiocommunication module may be summarized as follows:\n\n","Each of these steps is shown in  by a circle in which the number of the step concerned is entered. The same convention is adopted in the following figures related to this invention (and that are described in detail in the remainder of the description).","The existing technique for driving a radiocommunication module by terminal equipment has several disadvantages.","Firstly, it requires two sets of resources (processor and memory). The radiocommunication module comprises a processor and a memory (first set of resources) and the terminal equipment also has a processor and a memory (second set of resources). Therefore, the existing technique mentioned above is expensive in terms of equipment and energy consumption.","Another disadvantage of the above mentioned existing technique is that the radiocommunication module is entirely driven by the terminal equipment. The client driver software hosted on and executed by the terminal equipment is the \u201cmaster\u201d, while the main software hosted and executed by the radiocommunication module, is the \u201cslave\u201d.","In order to overcome these disadvantages with the state of the art, the applicant (Wavecom Company) deposited a French patent application No. FR 0103909 on Mar. 22, 2001 entitled \u201cRadiocommunication module hosting and executing a client software, and corresponding process for use of a client driver software\u201d. This application FR 0103909, the texts and the drawings of which are inserted herein by reference, proposes a new technique for driving a radiocommunication module consisting of hosting at least one client software on the radiocommunication module to act as a client driver software and\/or to act as a client supervision software.","Thus, if the client embedded software acts as a client driver software, the radiocommunication module operates independently and inexpensively. In this case, the radiocommunication module does not need to cooperate with a terminal equipment, and the main software and the client driver software use the same resources (same processor and same memory).","Furthermore, if the client embedded software acts as the client supervision software, the radiocommunication module is not restricted to acting as a slave with respect to the terminal equipment that executes the client driver software. The client supervision software is executed by the radiocommunication module, and manages the driving requested by the client driver software and executed by the terminal equipment. In this case, it will be noted that the client embedded software is software that is additional to the state of the art configuration mentioned above. However, this additional software is inexpensive because it uses the same resources (processor and memory) as the main software also hosted by the radiocommunication module.","In one preferred embodiment of the new technique mentioned above:\n\n","This new technique for driving a radiocommunication module may be seen as a software platform, to enable clients to develop their own client applications and to download them in radiocommunication modules.","In the preferred embodiment mentioned above, the main software and the interface application are \u201cproprietary\u201d binary files developed by the radiocommunication module manufacturer, while the client application is a \u201cclient\u201d binary file developed by the client.","Remember that the process for development of a binary file comprises the following steps:\n\n","In the context of the above-mentioned new technique for driving a radiocommunication module, the purpose of this invention is to facilitate the task of the client in the development process of a client application.","Another purpose of the invention is to propose a simple and efficient solution to dialogue problems between applications (main and secondary client) that result from use of the general concept of this invention.","We will now briefly mention two known techniques of solving dialogue problems between two applications, with the disadvantages of each.","According to a first known technique, dialogue problems between two software applications are solved during link editing. But this makes it necessary to know all dialogue points. Furthermore, exchanging all dialogue source functions between two applications makes it necessary for each application to adapt to the other. The result is that the developer of one application (secondary application) must write a different version of this application for each client that wants to integrated it into his applications (main applications).","A second known technique of solving dialogue problems between two applications consists of using mechanisms such as dynamic link editing. With this type of mechanism, only the functions actually used have to be loaded into memory. For example, this technique may be DLL (Dynamic Link Library) used in Windows (registered trademark). Unfortunately, this technique requires large amounts of memory and is unsuitable for use when there are severe constraints in terms of CPU, memory and real time in radiocommunication modules.","These various objectives, and others that will become clear later, are achieved according to the invention using a radiocommunication module of the type hosting and executing a main software that in particular performs radiocommunication functions, the said main software comprising means of executing driver commands sent to the main software by at least one client driver software and belonging to a predetermined set of driver commands. According to the invention, the said radiocommunication module also hosts and executes at least one client software, called the client embedded software, comprising a client main application and at least one client secondary application, slave of the client main application, the processing done by the said client embedded software being distributed between the said client main application and the said at least one client secondary application. The client embedded software and the main software comprise means of enabling the client embedded software to perform at least one of the following two roles:\n\n","Therefore, this invention is in the context of the above mentioned new technique for control of radiocommunication module, according to which the radiocommunication module hosts and executes a client software that can act as a client driver software and\/or a client supervision software.","In this context, the general aim of the invention consists of using a client \u201cmultiblock\u201d application comprising a client main application combined with one or several client secondary application(s), rather than a client \u201cmonoblock\u201d application. Each client secondary application is a slave application of the client main application that calls it, in terms of starting and stopping. But once it has been started, the client secondary application can access all execution functions made available by the main software (through a subscription mechanism to a service for sending messages from the main software that will be described later), completely independently of the client main application.","Client secondary applications are \u201celementary blocks\u201d that may be supplied to clients by a third party developer (typically the manufacturer of the radiocommunication module). Thus, the development work done by the client is reduced because all he develops is the \u201cclient main application\u201d that subcontracts some processing by calling one or more client secondary applications.","Note that the client can also develop client secondary applications himself, if he would like to call them in the different client main applications that he is developing.","In a first preferred embodiment of the invention, the said client software comprises a binary file containing the said client main application and the said at least one client secondary application.","In this case, the client secondary application is preferably supplied in the form of an object file. Thus, the source file is not provided, in order to protect the proprietary (or third party) know how. The object file containing the client secondary application must be link edited with the object file(s) containing the client main application, and the binary file resulting from this link editing is downloaded into the module.","In a second preferred embodiment of the invention, the said client software comprises a first binary file containing the said client main application, and at least one second binary file, each containing at least one client secondary application.","In this case, the client secondary application is supplied in the form of a binary file. Thus, as in the other case, the source file is not communicated in order to protect proprietary (or \u201cthird party\u201d) know how. The binary file containing the client secondary application may be downloaded directly into the module.","Preferably, the following features are provided to enable the client embedded software to act as client driver software:\n\n","Preferably, the following features are provided to enable the client embedded software to act as client supervision software\n\n","In this way, the client embedded software can:\n\n","Advantageously, the client embedded software comprises means of selecting the preparsing policy applied by the said preparsing means, among a set of preparsing policies such as:\n\n","Advantageously, the said command processing means take at least one decision for each command, belonging to the group including:\n\n","Advantageously, to enable the client embedded software to act as client supervision software:\n\n","In this way, the client embedded software can:\n\n","Advantageously, the client embedded software comprises means of selecting the response preparsing policy applied by the said response preparsing means, among a set of response preparsing policies such as the following:\n\n","Preferably, the said radiocommunication module is included within a device belonging to the following group:\n\n","Preferably, the said main software comprises at least one main application associated with a set of execution functions, each enabling the execution of at least one of the said driver commands. Each of the said client main and secondary applications is associated with a set of source functions, each enabling sending or receiving driver commands or responses to driver commands, to or from the main application. The main software and\/or the said client embedded software comprise an application interface used to interface the said source functions with the said execution functions.","The result is to limit development costs, due to the fact that the interface application (also called the application interface library in the following) can be used with different client applications (main applications), or even with different main software, once it has been developed.","In one advantageous embodiment of the invention, the set of source functions associated with the client main application in particular comprises a client main application initialisation source function that is called when the radiocommunication module is started.","Preferably, the set of source functions associated with the client main application comprises a source function for subscription to a service for sending messages originating from the main software. At the time of this subscription, the client main application sends the address of a message processing source function in which the client main application would like to receive messages from the main software, to the main software.","This subscription mechanism to a service for sending messages originating from the main software enables the client main application to call all execution functions provided by the main software, while being able to receive messages sent by the main software for execution of these functions.","Preferably, the set of source functions associated with the client secondary application comprises in particular a source function for initialisation of the client secondary application that is called by the client main application.","Preferably, the set of source functions associated with the client secondary application comprises a source function for subscription to a service for sending messages originating from the main software. At the time of this subscription, the client secondary application sends the address of a source message processing function to the main software, in which the client secondary application would like to receive messages originating from the main software.","Advantageously, the said source initialisation function of the client secondary application comprises at least one parameter enabling the use of a dialogue mechanism between the client main application and the client secondary application.","Preferably, the set of source functions associated with the client secondary application also comprises a source function for stopping the client secondary application called by the client main application.","Preferably, the set of source functions associated with the client secondary application comprises a source function for unsubscription from the said service for sending messages originating from the main software.","In this manner, the client main application only needs to know this dialogue point (source function for initialisation of the client secondary application) and its corresponding function described below (source function for stopping the client secondary application). Therefore, it is a simple and efficient solution to dialogue problems between a client main application and a client secondary application. The developer of a client secondary application does not need to write one version for each client that wants to integrate it into its client main applications. All he needs to do is to inform him about the two dialogue points mentioned above.","Note that it is important to avoid two developers of client secondary applications from using identical dialogue points. For example, this can be achieved if each developer asks a central service for a unique identifier for each client secondary application that he would like to develop.","Furthermore, the dialogue mechanism between the client main application and the client secondary application enables the client secondary application to notify the client main application about the execution results of its task(s). The dialogue may be two directional or single-directional.","Advantageously, the said message type belongs to the group comprising:\n\n","In one preferred embodiment of the invention, the said set of driver commands is a set of standard AT commands. This enables fast development of the client embedded software, since AT commands are well known and are already used for the development of client external software (hosted on the terminal equipment). This also facilitates development of a client software strongly based on an existing client external software.","The invention also relates to a process for implementation of a client software for the control of a radio communication module, the said radiocommunication module being of the type that hosts and executes a main software particularly performing radiocommunication functions, the said main software comprising means of executing driver commands sent to the main software by the said client driver software and belonging to a predetermined set of driver commands. According to the invention, the said radiocommunication module hosts and also executes at least one client software, called the client embedded software, comprising a client main application and at least one client secondary application, slave of the client main application, the processing done by the said client embedded software being distributed between the said client main application and the said at least one client secondary application. The client embedded software and the main software dialogue with each other such that the client embedded software performs at least one of the following two roles:\n\n","Therefore, the invention relates to a radiocommunication module  hosting and executing a main software  and at least one client embedded software , using the same set of resources (processor  and memory ), as shown in .","Conventionally, in particular the main software (for example a \u201cGSM software\u201d) performs radiocommunication functions and comprises means of executing driver commands (sent to it by a client driver software).","The client embedded software (concept specific to this invention) can act as:\n\n","In the remainder of this description, it is assumed that the driver commands are AT commands. However, it is clear that this invention is not restricted to this type of driver command.","In the particular embodiment shown in , the main software  comprises a main application based particularly on a set of execution functions, each enabling the execution of at least one AT command.","Furthermore, the client embedded software  comprises:\n\n","Thus, the client main application communicates with the main application through the interface application . Similarly, the client secondary application communicates with the main application through the interface application ","Consequently, each application (main , secondary and interface ) comprises an \u201cAPI\u201d (Application Programming Interface). Note that an API is a description of communication rules corresponding to a specific functional assembly.","The client main application comprises an \u201cApplication Mandatory API\u201d block forming an interface describing functions that will have to be defined in the client main application.","The client secondary application also comprises an \u201cApplication Mandatory API\u201d block (partially identical to the block with the same name included in the client main application) forming an interface describing functions to be defined in the client secondary application.","The interface application (or the application interface library) , comprises the three following blocks:\n\n","In the main software , the main application comprises:\n\n","The main application forms the core of the main software , and the client main application , the client secondary application , and the interface application form the kernel of the client embedded software .","For example, the interface application may be a binary file in the form of a previously compiled library.","The client main application is a binary file resulting from link editing between a plurality of object files (themselves resulting from compilation of source files).","The following two variants may be considered for the client secondary application \n\n","The client embedded software  and the main software  each use a distinct part of the same RAM. The client defines the size of the memory stack necessary for correct execution of the client embedded software. An attempt by one of the two software programs to access part of the RAM reserved for the other software will stop operation.","We will now present a mechanism for starting the client main application and subscription of this application to a service sending messages originating from the main software , with reference to .","Elements conventionally included in a radiocommunication module and described above with reference to  (prior art) have the same numeric references. Thus, the radiocommunication module  hosts and executes a main software  in particular comprising means of executing AT commands.","Furthermore, according to the invention and as presented above with reference to , the radiocommunication module  hosts and also executes a client embedded software  that acts as client driving software or client supervision software, and in particular comprises a client main application , a client secondary application and an interface application ","Operation of this mechanism to start the client main application and to subscribe it to a service for sending messages may be summarized as follows:\n\n","According to one variant, the client main application calls the \u201cwm_osMsgParserSubscribe\u201d source function whenever it wishes (independently of the execution of the source initialisation function of the client main application ).","We will now present a mechanism for starting the client secondary application and for subscribing it to a service for sending messages from the main software , with reference to .","Operation of this mechanism can be summarized as follows:\n\n","After the client secondary application has been started in this way, it performs its function (set of processing or tasks) independently of the client main application . As described in detail below, it uses the set of execution functions provided by the main software  for this purpose.","According to one variant, the client secondary application calls the \u201cwm_osMsgParserSubscribe\u201d source function whenever it wishes (independently of execution of the source function to initialise the client secondary application ).","Note that the source initialisation function of the client secondary application may comprise at least one parameter for implementing a dialogue mechanism between the client main application and the client secondary application . This characteristic of the invention is described in detail in the remainder of the description.","We will now describe the mechanism for stopping the client secondary application and unsubscribing it from the service for sending messages originating from the main software , with reference to .","The operation of this mechanism may be summarised as follows:\n\n","We will now describe an example of processing that can be done by the client secondary application, to release the client main application , with reference to .","In this example, it is assumed that:\n\n","Operation of this processing example can be summarized as follows:\n\n","Note that  described above is transposed from  in the French patent application No. FR 0103909 deposited by the applicant (Wavecom company) on Mar. 22, 2001. The only difference is that the client secondary application is involved in this case (instead of the client embedded application in patent application No. FR 0103909).","A second embodiment of the invention is also provided in which the client embedded software acts as the client supervision software. In this case, the client secondary application may for example perform the following processing:\n\n","We will not describe these examples of processing done by the client secondary application in more detail (not shown in the figures), in the case in which the radiocommunication module operates according to the second embodiment of the invention mentioned above.","However, it should be noted that an explanatory text and figures related to the implementation of the two preparsing mechanisms mentioned above (for commands and responses) by the client secondary application, can be obtained by making the following transposition:\n\n","Appendix 1 contains a detailed presentation of some source functions on which the client main application and the client secondary application are based.","Optionally, for the purposes of this invention, it is also possible to use at least one of the following additional AT commands in addition to standard AT commands:\n\n","A1) \u201cwm_apmAppliInit\u201d:","Function to initialise the client main application; this function is called when the radiocommunication module is started.","Exact Name:",{"@attributes":{"id":"p-0110","num":"0000"},"ul":{"@attributes":{"id":"ul0057","list-style":"none"},"li":["Void wm_apmAppliInit (wm_apmInitType_e InitType)\n\nParameters:\n","InitType"]}},"This parameter determines what starts the initialisation, the values are:\n\n",{"@attributes":{"id":"p-0112","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{",{}]},{"entry":[{},{},"\u2003WM_APM_POWER_ON"]},{"entry":[{},{},"\u2003WM_APM_REBOOT_FROM_EXCEPTION"]},{"entry":[{},"}","\u2003wm_apmInitType_e;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0059","list-style":"none"},"li":["WM_APM_POWER_ON\n\nNormal start\n","WM_APM_REBOOT_FROM_EXCEPTION"]}},"The module is restarted after an exception.","A2) \u201cwm_osMsgParserSubscribe( )\u201d:","Function to register a client application (main or secondary) with the main software to a service for reception of messages originating from the main software. The main software memorises this function and uses it whenever it has something to transmit to the client application concerned (main or secondary).","Exact Name:",{"@attributes":{"id":"p-0115","num":"0000"},"ul":{"@attributes":{"id":"ul0060","list-style":"none"},"li":"Void wm_osMsgParserSubscribe (void *SubscribeFunction)(wm_apmMsg_t*)\n\nParameters:\n"}},"SubscribeFunction (wm_apmMsg_t*): function provided by the caller (client main or secondary application) so that the main software can send messages to it. A prototype of this function provided is described below (\u201cwm_apmAppliParser\u201d for the client main application, or \u201cwm_app2MsgParser\u201d for the client secondary application).","Return Value:","The return parameter indicates if the subscription was accepted (TRUE) or not (FALSE).","A3) \u201cwm_osMsgParserUnsubscribe( )\u201d:","Function to stop registration of a client application (main or secondary) with the main software to a service for reception of messages originating from the main software. The main software forgets the previously memorized function.","Exact Name:",{"@attributes":{"id":"p-0119","num":"0000"},"ul":{"@attributes":{"id":"ul0061","list-style":"none"},"li":["Bool","wm_osMsgparserUnsubscribe(void(*SubsFunction)(wm_apmMsg_t *))\n\nParameters:\n"]}},"SubsFunction(wm_apmMsg_t*): function provided by the caller (main or secondary client application) so that the main software can send messages to it. This function must be the same as the function given during subscription to this service, otherwise the subscription will not be stopped.","Return Value:","The return parameter indicates if the subscription was stopped (TRUE) or not (FALSE).","A4) \u201cwm_app2Pipe(FunctionType function, . . . )\u201d:","Prototype of the function to be provided by the client secondary application to the client main application to be able to dialogue with it. This function has variable arguments, and the number and type or arguments depend on the first \u201cfunction\u201d parameter.","Exact Name:",{"@attributes":{"id":"p-0123","num":"0000"},"ul":{"@attributes":{"id":"ul0062","list-style":"none"},"li":"Void wm_app2Pipe(FunctionType function, . . . );\n\nParameters:\n"}},"Function: requested function. This function implies the number and type of parameters as follows. Some values are reserved (for example 0 to 127), and others (for example 128 to 255) are left free for use by particular dialogues between the client main application and the client secondary application.","A4-1) Variable parameters for function=WM_APP_FUNCTION_INIT:",{"@attributes":{"id":"p-0125","num":"0217"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Void wm_app2Pipe \u2003 ("]},{"entry":[{},"FunctionType_t function,"]},{"entry":[{},"InitType_t Init,"]},{"entry":[{},"Void \u2003\u2003(*MainAppDialogFunction) (wm_apmMsg_t*)"]},{"entry":[{},"Void \u2003\u2003*(*SecondaryAppDialogFunction) (wm_apmMsg_t*),"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The secondary application must be initialised and must perform its processing.","InitType_t Init: the initialisation type (APM_INIT POWER On or APM_INIT REBOOT)","Void (*Main AppDialogFunction)(wm_apmMsg_t*): address of the function that the client secondary application must use to send messages to the client main application. If the client main application does not require this function, it sends a NULL value.","Void *(*SecondaryAppDialogFunction)(wm_apmMsg_t*): The client secondary application must give the address of the function that it provides to the client main application. If the client secondary application does not provide this function, it must set the value to NULL.","A4-2) Variable parameters for function=WM_APP_FUNCTION_STOP:",{"@attributes":{"id":"p-0130","num":"0222"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Void wm_app2Pipe"]},{"entry":[{},"FunctionType_t function,"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The client secondary application must stop its processing, unsubscribe from all its subscriptions and release all resources used.","A5) \u201cwm_apmAppliParser\u201d","Prototype of the source function that the client main application must provide to receive messages originating from the main software. The message forming a parameter of this processing function (also called the \u201creception\u201d function) in particular contains an AT command or a response to an AT command.","It will be noted that everything that is described below is also applicable to the source function, in which the client secondary application would like to receive messages originating from the main software. All that changes is the function name itself (for example \u201cwm_app2MsgParser\u201d instead of \u201cwm_apmAppliParser\u201d).","Exact Name:",{"@attributes":{"id":"p-0134","num":"0000"},"ul":{"@attributes":{"id":"ul0063","list-style":"none"},"li":["Bool wm_apmAppliParser(wm_apmMsg_t*Message);\n\nParameters:\n","Message"]}},"The message structure is different for each type of received message:",{"@attributes":{"id":"p-0136","num":"0229"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Typedef struct"]},{"entry":[{},"{"]},{"entry":[{},"\u2003S16 \u2003MsgTyp;"]},{"entry":[{},"\u2003\/* \u201cMsgTyp\u201d is a received message type to determine"]},{"entry":[{},"\u2003the associated structure of the message body *\/"]},{"entry":[{},"\u2003wm_apmBody_t \u2003Body; \u2003\/* \u2002\u201cBody\u201d is a specific"]},{"entry":[{},"\u2003message body *\/"]},{"entry":[{},"} wm_apmMsg_t;"]},{"entry":[{},"Values of \u201cMsgTyp\u201d:"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The message contains a response to an AT command previously sent to the main software by the client embedded software","WM_AT_UNSOLICITED","The message contains an unsolicited AT command","WM_AT_CMD_PRE_PARSER","The message contains an AT command sent by a client external software through the main software.","WM_AT_RSP_PRE_PARSER","The message contains an AT response resulting from the main software executing an AT command originating from an external application.","WM_OS_TIMER","The message is sent on expiration of a timeout","The structure of the body is:",{"@attributes":{"id":"p-0143","num":"0236"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef union"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\/* The following includes all specific structures"]},{"entry":[{},"\u2003associated with \u201cMsgTyp\u201d *\/ message types"]},{"entry":[{},"\u2003\/* WM_AT_SEND_RSP *\/"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u2003wm_atResponse_t","ATResponse;"]},{"entry":[{},"\u2003\/* WM_AT_UNSOLICITED \u2003*\/"]},{"entry":[{},"\u2003wm_atUnsolicited_t","\u2002ATUnsolicited;"]},{"entry":[{},"\u2003\/* WM_AT_CMD_PRE_PARSER","\u2003\u2002*\/"]},{"entry":[{},"\u2003wm atCmdPreParser_t","\u2002ATCmdPreParser;"]},{"entry":[{},"\u2003;\/* WM_AT_RSP_PRE_PARSER","\u2003\u2002*\/"]},{"entry":[{},"\u2003wm_atRspPreParser_t","\u2002ATRspPreParser"]},{"entry":[{},"\u2003\/* WM_OS_TIMER","\u2002\u2002*\/"]},{"entry":[{},"\u2003wm_osTimer_t \u2003\u2003OSTimer;"]},{"entry":[{},"} wm_apmBody_t;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0144","num":"0237"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Body for WM_AT_SEND_RSP:"]},{"entry":[{},"\u2003typedef struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003wm_atSendRspType_e","Type;"]},{"entry":[{},"\u2003\u2003u16","StrLength; \/* Length of strData *\/"]},{"entry":[{},"\u2003\u2003char","StrData[1]; \/* AT response"]},{"entry":[{},"\u2003\u2003*\/"]},{"entry":[{},"\u2003} wm_atResponse_t;"]},{"entry":[{},"\u2003typedef enum \u2002{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003WM_AT_SEND_RSP_TO_EMBEDDED,"]},{"entry":[{},"\u2003\u2003WM_AT_SEND_RSP_TO_EXTERNAL,"]},{"entry":[{},"\u2003\u2003WM_AT_SEND_RSP_BROADCAST"]},{"entry":[{},"\u2003} wm_atSendRspType_e;"]},{"entry":[{},"\u2003(see details of the \u201cwm_atSendCommand\u201d function for"]},{"entry":[{},"\u2003the description of \u201cwm_atSendRspType_e description"]},{"entry":[{},"\u2003\u201d),"]},{"entry":[{},"Body for WM_AT_UNSOLICITED:"]},{"entry":[{},"\u2003typedef struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003wm_atUnsolicited_e","Type;"]},{"entry":[{},"\u2003\u2003u16","StrLength;"]},{"entry":[{},"\u2003\u2003char","StrData[1];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003} wm_atUnsolicited_t;"]},{"entry":[{},"\u2003typedef enum \u2003\u2003{"]},{"entry":[{},"\u2003\u2003WM_AT_UNSOLICITED_TO_EXTERNAL,"]},{"entry":[{},"\u2003\u2003WM_AT_UNSOLICITED_TO_EMBEDDED,"]},{"entry":[{},"\u2003\u2003WM_AT_UNSOLICITED_BROADCAST"]},{"entry":[{},"\u2003} wm_atUnsolicited_e;"]},{"entry":[{},"\u2003(see details of the \u201cwm_atUnsolicitedSubscription\u201d"]},{"entry":[{},"\u2003function for the description of \u201cwm_atUnsolicited_e"]},{"entry":[{},"\u2003\u201d)."]},{"entry":[{},"Body for WM_AT_CMD_PRE_PARSER:"]},{"entry":[{},"\u2003typedef struct \u2003\u2003{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003wm_atCmdPreSubscribe_e","Type;"]},{"entry":[{},"\u2003\u2003u16","StrLength;"]},{"entry":[{},"\u2003\u2003char","StrData[1]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003} wm_atCmdPreParser_t;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003typedef enum","\u2002{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003WM_AT_CMD_PRE_WAVECOM"]},{"entry":[{},"\u2003\u2003TREATMENT, \/* Default value"]},{"entry":[{},"\u2003\u2003*\/"]},{"entry":[{},"\u2003\u2003WM_AT_CMD_PRE_EMBEDDED_TREATMENT,"]},{"entry":[{},"\u2003\u2003WM_AT_CMD_PRE_BROADCAST"]},{"entry":[{},"\u2003} wm_atCmdPreSubscribe_e;"]},{"entry":[{},"\u2003(see details of the \u201cwm_atRspPreParserSubscribe\u201d"]},{"entry":[{},"\u2003function \u2003\u2003for \u2003\u2003the \u2003\u2003description \u2003\u2003of"]},{"entry":[{},"\u2003\u201cwm_atCmdPreSubscribe_e\u201d)."]},{"entry":[{},"Body for WM_AT_RSP_PRE_PARSER:"]},{"entry":[{},"\u2003typedef struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003wm_atRspPreSubscribe_e","Type;"]},{"entry":[{},"\u2003\u2003u16","StrLength;"]},{"entry":[{},"\u2003\u2003char","StrData[1];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003} wm_atRspPreParser_t;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003typedef enum","{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003WM_AT_RSP_PRE_WAVECOM"]},{"entry":[{},"\u2003\u2003TREATMENT \/* Default value"]},{"entry":[{},"\u2003\u2003*\/"]},{"entry":[{},"\u2003\u2003WM_AT_RSP_PRE_EMBEDDED_TREATMENT,"]},{"entry":[{},"\u2003\u2003WM_AT_RSP_PRE_BROADCAST"]},{"entry":[{},"\u2003} wm_atRspPreSubscribe_e;"]},{"entry":[{},"\u2003(see details of the \u201cwm_atRspPreParserSubscribe\u201d"]},{"entry":[{},"\u2003function \u2003\u2003for \u2003\u2003the \u2003\u2003description \u2003\u2003of"]},{"entry":[{},"\u2003\u201cwm_atRspPreSubscribe_e\u201d)."]},{"entry":[{},"Body for WM_OS_TIMER:"]},{"entry":[{},"\u2003typedef struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003u8","Ident; \/* Timeout identifier"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003*\/"]},{"entry":[{},"\u2003} wm_osTimer_t;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},"The return parameter indicates if the message is processed (TRUE) or not (FALSE).","A6) \u201cwm_atSendCommand\u201d","Function for sending at least one AT command to the main software, in which a parameter indicates the destination application(s) (namely the client embedded application (main or secondary) and\/or the client external application) of the response resulting from execution of this AT command.","Exact Name:",{"@attributes":{"id":"p-0147","num":"0240"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Void wm_atSendCommand (u16","AtStringSize"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"wm_atSendRspType_e","Responsetype,"]},{"entry":[{},"char","*AtString,);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0064","list-style":"none"},"li":"AtString"}},"This parameter may be any type of string of AT command using ASCII characters. Several strings may be sent at the same time.","AtStringSize","Size of the previous parameter: AtString.","ResponseType",{"@attributes":{"id":"p-0150","num":"0000"},"ul":{"@attributes":{"id":"ul0065","list-style":"none"},"li":"Response type"}},{"@attributes":{"id":"p-0151","num":"0245"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Typedef enum \u2003{"},{"entry":"\u2003WM_AT_SEND_RSP_TO_EMBEDDED, \/* Default value *\/"},{"entry":"\u2003WM_AT_SEND_RSP_TO_EXTERNAL,"},{"entry":"\u2003WM_AT_SEND_RSP_BROADCAST"},{"entry":"} wm_atSendRspType_e;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0066","list-style":"none"},"li":{"@attributes":{"id":"ul0066-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0067","list-style":"none"},"li":["WM_AT_SEND_RSP_TO_EMBEDDED","All responses are redirected to the client embedded application (main or secondary). This is the default mode.","WM_AT_SEND_RSP_TO_EXTERNAL","All responses are redirected to the client external application (PC).","WM_AT_SEND_RSP_BROADCAST","All responses are redirected (broadcast) to the client embedded application (main or secondary) and the client external application (PC).\n\nA7) \u201cwm_AtUnsolicitedSubscription\u201d\n"]}}}},"Registration function with the main software to a service for reception of unsolicited AT commands, in which one parameter indicates the destination application (namely the client embedded application (main or secondary) and\/or the client external application), to which each of the unsolicited AT commands must be redirected.","Exact Name:",{"@attributes":{"id":"p-0153","num":"0000"},"ul":{"@attributes":{"id":"ul0068","list-style":"none"},"li":["Void wm_atUnsolicitedSubscription(wm_atUnsolicited_e Unsolicited);\n\nParameters:\n","Unsolicited"]}},"This parameter describes actions carried out when an unsolicited AT command arrives.",{"@attributes":{"id":"p-0155","num":"0256"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Typedef enum"},{"entry":"\u2003WM_AT_UNSOLICITED_TO_EXTERNAL, \u2003\/* Default value"},{"entry":"\u2003*\/"},{"entry":"\u2003WM_AT_UNSOLICITED_TO_EMBEDDED,"},{"entry":"\u2003WM_AT_UNSOLICITED_BROADCAST,"},{"entry":"} wm_atUnsolicited_e;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0069","list-style":"none"},"li":{"@attributes":{"id":"ul0069-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0070","list-style":"none"},"li":["WM_AT_UNSOLICITED_TO_EXTERNAL","All unsolicited commands will be redirected to the client external application (PC) (default mode).","WM_AT_UNSOLICITED_TO_EMBEDDED","All unsolicited commands will be redirected to the client embedded application (main or secondary).","WM_AT_UNSOLICITED_BROADCAST","All unsolicited commands will be redirected (broadcast) to the client external application (PC) and the client embedded application (main or secondary).\n\nA8) \u201cwm_atCmdPreParserSubscribe\u201d\n"]}}}},"Registration function with the main software to an AT command preparsing service, in which a parameter indicates the destination application(s) (namely the client embedded application (main or secondary) and\/or the main application) to which each AT command originating from an external application must be directed.","Exact Name:",{"@attributes":{"id":"p-0157","num":"0000"},"ul":{"@attributes":{"id":"ul0071","list-style":"none"},"li":["Void wm_atCmdPreParserSubscribe (wm_atCmdPreSubscribe_e SubscribeType);\n\nParameters\n","SubscribeType"]}},"This parameter describes the action carried out when an AT command arrives",{"@attributes":{"id":"p-0159","num":"0267"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Typedef enum"]},{"entry":[{},"\u2003WM_AT_CMD_PRE_WAVECOM"]},{"entry":[{},"\u2003TREATMENT, \u2002 \/* Default value"]},{"entry":[{},"\u2003*\/"]},{"entry":[{},"\u2003WM_AT_CMD_PRE_EMBEDDED_TREATMENT,"]},{"entry":[{},"\u2003WM_AT_CMD_PRE_BROADCAST,"]},{"entry":[{},"} wm_atCmdPreSubscribe_e;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0072","list-style":"none"},"li":{"@attributes":{"id":"ul0072-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0073","list-style":"none"},"li":["WM_AT CMD_PRE WAVECOM_TREATMENT","The client embedded application (main or secondary) does not want to filter (or spy) commands sent by the client external application (default mode).","WM_AT_CMD_PRE_EMBEDDED_TREATMENT","The client embedded application (main or secondary) wants to filter commands sent by the client external application.","WM_AT CMD_PRE BROADCAST","The client embedded application (main or secondary) wants to spy commands sent by the client external application.\n\nA9) \u201cwm_atRspPreParserSubscribe\u201d\n"]}}}},"Registration function with the main software to an AT response preparsing service, in which a parameter indicates the destination application(s) (namely the client embedded application (main or secondary) and\/or the client external application) to which each AT command originating from an external application must be directed.","Exact Name:",{"@attributes":{"id":"p-0161","num":"0000"},"ul":{"@attributes":{"id":"ul0074","list-style":"none"},"li":["Void wm_atRspPreParserSubscribe (wm_atRspPreSubscribe_e SubscribeType);\n\nParameters\n","SubscribeType"]}},"This parameter describes the action carried out when an AT command arrives",{"@attributes":{"id":"p-0163","num":"0278"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Typedef enum"},{"entry":"\u2003WM_AT_RSP_PRE_WAVECOM_TREATMENT, \/* Default value"},{"entry":"\u2003*\/"},{"entry":"\u2003WM_AT_RSP_PRE_EMBEDDED_TREATMENT,"},{"entry":"\u2003WM_AT_RSP_PRE_BROADCAST,"},{"entry":"} wm_atRspPreSubscribe_e;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0075","list-style":"none"},"li":{"@attributes":{"id":"ul0075-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0076","list-style":"none"},"li":["WM_AT_RSP_PRE_WAVECOM_TREATMENT","The client embedded application(main or secondary) does not want to filter (or spy) responses sent to the client external application (default mode).","WM_AT_RSP_PRE_EMBEDDED_TREATMENT","The client embedded application (main or secondary) wants to filter responses sent to the client external application.","WM_AT_RSP_PRE_BROADCAST","The client embedded application (main or secondary) wants to spy the response sent to the client external application.\n\nA10) \u201cwm_atSendRspExternalApp\u201d\n"]}}}},"Function to send at least one response to the client external software, through the main software. This function can only be used if a prior registration has been made to the response preparsing service, in particular including redirection of a copy of responses to the client embedded application (main or secondary).","Exact Name:",{"@attributes":{"id":"p-0165","num":"0000"},"ul":{"@attributes":{"id":"ul0077","list-style":"none"},"li":["Void wm_atSendRspExternalApp (u16 AtStringSize, Char *AtString,);\n\nParameters:\n","AtString"]}},"May be any type of AT response string, in ASCII characters.","AtStringSize","Size of the previous parameter: AtString","A11) \u201cDataFlowService\u201d","Function to send and\/or receive data by the client embedded application (main or secondary), through the main software, after a data communication has been set up.","A12) \u201cwm_osStartTimer\u201d","Function to start a timeout, a parameter of the said starting function indicating which timeout is to be started.","A13) \u201cwm_osStopTimer\u201d","Function to stop a timeout, a parameter of the said stop function indicating which timeout is to be stopped."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other characteristics and advantages of the invention will become clear after reading the following description of a preferred embodiment of the invention given as a non-limitative example, and the attached drawings, in which:",{"@attributes":{"id":"p-0064","num":"0107"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0065","num":"0108"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0066","num":"0109"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0067","num":"0110"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0068","num":"0111"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0069","num":"0112"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0070","num":"0113"},"figref":["FIG. 7","FIG. 1"]}]},"DETDESC":[{},{}]}
