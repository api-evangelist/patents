---
title: Security token management service hosting in application server
abstract: Systems and methods for a security token management service hosted in an application server. A set of services and/or associated applications can be served from an application server to one or more clients. The set of services may require one or more token services in order to deliver their intended functionalities, so that for instance an email client may require the use and presentation of a token or other object incorporating user ID, password, or other authentication information for the user to access and retrieve their email messages. Different served applications and/or services may require the installation of various different token types or services, conventionally requiring manually configuration. A centralized security token management service can be installed and configured in the application server itself, which interfaces to requesting services and automatically locates and acquires diverse token types and/or associated token services to support served applications or services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09407626&OS=09407626&RS=09407626
owner: Red Hat, Inc.
number: 09407626
owner_city: Raleigh
owner_country: US
publication_date: 20110929
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","DESCRIPTION"],"p":["The invention relates generally to systems and methods for a security token management service hosted in an application server, and more particularly, to platforms and techniques for integrating and managing the deployment of token services and associated token objects from a centralized token management service which can be installed in an application server.","Application servers are entities in system and network environments in which various applications or services can execute or operate. In particular, application servers are dedicated to the efficient execution of processes, procedures, routines, scripts, and software code for supporting the functionalities of applications and services that can be delivered to users over the Internet and other networks. Software developers can access application servers via various application programming interfaces (APIs).","The Java Platform, Enterprise Edition, Java EE, or J2EE are widely used platforms for server programming in the Java programming language. A J2EE container is a runtime entity that provides services to specialized Java components. Services provided by a container typically include life cycle management, security, deployment, and component-specific services. Containers are used in a wide variety of Java components, such as Enterprise Javabeans (EJB), Web pages, Java Server Pages (JSP), servlets, applets, and application clients.","During operation of a Java EE application server, various services or applications associated with the services may need to be configured by a system administrator or other entity.","In some types of served applications, there may be a need for the use of tokens to manage user authentication, data access, or other purposes. Various applications may call for the use of different types of token services or mechanisms to provide that secure access. Among other things, those different token types and associated services may be supported by different token providers. In known application server platforms, an administrator or other user may be required to manually select and configure token types, including to specify the intended token provider and other details. It may be desirable to provide systems and methods for a security token management service hosted in an application server, in which the acquisition, use, and management of security tokens can be aggregated in a unitary security token service hosted in the application server or other location, while providing the ability to deploy any arbitrary selected token type or provider without a need for complete manual configuration.","Embodiments of the present teachings relate to systems and methods for a security token management service hosted in an application server. In particular, embodiments relate to platforms and techniques for abstracting the management of token services and token objects in a security token management service which can be integrated into an application server, and be made available to sets of services requesting the instantiation of token-based services for applications and\/or services which they are providing to a set of clients.","Referring to , illustrated is an exemplary network environment  in which the present systems and methods may be implemented. As shown in , the environment  can comprise or include a client , a web server , an application server , a directory server , and a provisioning server . These components can be coupled together via network , such as the public Internet and\/or other public or private networks. It should be appreciated that other configurations and\/or network components are envisioned in accordance with the present teachings.","In embodiments, the client  can be any computer system that utilizes the services of another computer system, i.e., the web server  and the application server . As shown in , the client  can be or include implementations known to those skilled in the art, such as a personal computer, laptop computer, personal digital assistant, mobile phone, tablet device, and the like. In embodiments as shown in , the client  can be used to run and\/or access Web applications via an intermediate application, such as a web browser.","In embodiments, the web server  can comprise a computer system configured to accept requests from clients, such as the client , and serve responses, services, and\/or data or media content. For example, a user of the client  can execute a Web application via the web server . In the embodiment as shown, the data content served by the web server  can comprise one or more Web pages that can include hypertext markup language (HTML) documents and\/or XML (extensible markup language)-based objects as well as linked or embedded data or objects such as, for example, digital images, video files, audio files, and the like.","The web server  can be implemented on a machine that comprises known processor, memory, and other hardware and software. Well known software for the web server  can include, but is not limited to, software such as Apache HTTP Server from the Apache Software Foundation, Internet Information Services by Microsoft Corporation\u00ae, and Sun Java System Web Server from Sun Microsystems Inc\u00ae. One skilled in the art will recognize that any of the many different Web server programs available are consistent with and can be used with implementations of the present teachings.","The application server  can be or include software that provides applications to the client . In particular, the application server  can be configured to manage security, business logic, and data access for the applications provided to the client . In embodiments, the application server  can be configured to provide a variety of Web-based and\/or other applications, such as e-commerce applications, content management applications, customer relations management applications, email applications, messaging applications, spreadsheet or other quantitative applications, and others.","The application server  can be implemented using various known software platforms. For example, the application server  can be implemented on the known J2EE platform from Sun Microsystems Inc\u00ae. In addition, the application server  can comprise middleware configured to enable applications to communicate with peer and\/or dependent applications, such as the web server , database management systems, etc.","In various embodiments, the application server  can be implemented using various known software. For example, the application server  can be implemented using software, such WebLogic server from BEA Systems Inc\u00ae, JBoss from Red Hat Inc.\u00ae, Websphere from the IBM Corporation\u00ae, and the like. Accordingly, the application server  can implement and deploy the Java programming language and provide Web modules using servlets and JavaServer pages. Other functions or services provided by the application server  can also employ Java. For example, business logic provided by the application server  can be built into Enterprise JavaBeans (EJBs). J2EE can provide standards for hosting and managing the Web components. In addition, security services, such as authentication and authorization, can be implemented using the Java Authentication and Authorization Service (JAAS) or similar service.","The directory server  can represent the components that store and organize information about the users of the system  and an administrator of the system  to manage the access of those users to the resources of the system . In embodiments, the directory server  can comprise a database (not shown) or other data store that can store information about named objects that are managed. The directory server  can also provide an access interface to the data that is contained in this database. The directory server  can be implemented using well known technologies. For example, the directory server  can be implemented as an X.509 directory service or Lightweight Directory Access Protocol (LDAP) service. In embodiments, the directory server  can be implemented as services from various vendors such as, for example, Red Hat Directory Server from Red Hat Inc.\u00ae; Active Directory by the Microsoft Corporation\u00ae; Apache Directory Server by the Apache Software Foundation; or Sun Java System Directory Server by Sun Microsystems Inc\u00ae.","In embodiments, the provisioning server  can be or include processor, memory, and other software or hardware resources that can be configured to listen or monitor for provisioning requests in the system , and return provisioning, services, and\/or other responses. In some embodiments, the provisioning server  can be configured as a service provisioning markup language (SPML) provisioning service provider. The provisioning server  can be implemented as a separate software component of the system , or can be integrated with other components of the system . For example, the provisioning server  can be or include a component that is installed as part of the directory server .","In embodiments, the network  can comprise the communications infrastructure for allowing the client , web server , and\/or other nodes or components to communicate with each other. For example, the network  can be or include the public Internet, using the Internet Protocol (IP) suite of standards. The network  can, in addition or instead, also include other public or private networks, such as one or more local area networks, or others.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 2"],"b":["200","200"]},"As shown in , the environment  can comprise an application server , which can be configured as described in reference to . In embodiments, the application server  can for instance be or include a JBoss\u2122 application server, or other types of application servers. Further, as shown in , the application server  can comprise or host a set of services . For example, the services can be Enterprise JavaBean (EJB) container services, web container services, security services, web application services, Java Connector Architecture (JCA) services, and other services. In embodiments, each of the set of services  can comprise, invoke, and\/or execute a set of applications. Further, in embodiments, the set of associated applications can be those that the set of services  can serve to a client. In particular, the set of services  in conjunction with the set of applications can be configured to provide and manage email, messaging, security, business logic, e-commerce application, content management or media applications, customer relations management applications, database or data access applications, and\/or other applications or services for one or more clients, users, and\/or customers in the set of clients .","As shown in , the environment  can comprise a set of clients . In embodiments, the set of clients  can be configured to connect to the application server  via any type of network or data connection. Further, the set of clients  can be or include implementations known to those skilled in the art, such as a personal computer, laptop computer, personal digital assistant, mobile phone, tablet device, and the like. Still further, the set of clients  be accessed by any user, administrator, owner, or other individual or entity. According to embodiments, the application server  can be configured to serve the any of the set of services  and any corresponding applications to the set of clients . For example, the application server  can be configured to serve an email application, media application, and\/or messaging application to the set of clients .","As shown in , the application server  can be configured to interface with a system administrator . In embodiments, the system administrator  can be any user, owner, administrator, or other entity, or any combination of hardware and software that can be configured to perform the functions as discussed herein. Further, in embodiments, the system administrator  can be configured to connect to the application server  via any data connection or network. According to embodiments, one or more of the set of services  may need to be configured in order to initiate and\/or execute applications served to the set of clients . In particular, the system administrator  can process, initiate, and\/or otherwise configure a set of token services  via the security token management service  to configure and\/or operate the set of services  along with an associated set of tokens . In embodiments, the set of token services  can be or include token services, mechanisms, portals, authorities, the set of tokens  and\/or other associated token objects, and\/or other resources such as token services associated with Kerberos\u2122 token services, SAML (security assertion markup language) services including SAML assertions, Web Service (WS) token services including WS (web services) trust claims, Open ID token services, or a custom token such as a token generated by or associated with one or more of the set of services . Other token services, associated token objects, and\/or other mechanisms can be used.","The application server  can host the security token management service  that can be configured to interface with the set of services  to acquire, configure, and manage the set of token services  via the security token management service . According to embodiments, each of the set of services  can request various token services via the security token management service . According to embodiments, the system administrator  can configure each of the set of services  using any one or more token services in the set of token services . In embodiments, the set of token services  can use, manage, generate, and\/or require attributes such as user names, passwords, public\/private keys, digital certificates, and\/or other objects or attributes. For the services in set of services  that need access to the set of token services , the services can be configured to provide or identify their required or desired associated token services to the security token management service . In embodiments, the security token management service  can be configured to receive, register, and\/or validate the request for token-based security services. For example, the security token management service  can compare the request received from the service to a stored record of valid or permitted token services required by that or similar services.","If the request is validated, the security token management service  can automatically access a set of token providers  to locate and register the application requesting the security token services with the appropriate or corresponding provider. For example, Provider X acting as a certification or issuing authority for tokens of Kerberos\u2122 type can receive, decode, and validate the request for token service from an application in, or associated with, the set of services . One or more providers in the set of token providers  can then be accessed and registered to the requesting service(s)\/application(s) to provide tokens of that requested type to the requesting entity, for use in the deployment of applications and\/or services to the set of clients . Different services can request different token services or objects at different times, and can in embodiments automatically register that request via the security token management service , without a need for manual configuration of the token service, associated token object(s), and\/or other associated resources of the security token platform being requested. In embodiments, various parameters used to configured the set of token services  can also or instead be manually specified by a systems administrator and\/or other user, if desired.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 3"],"b":["106","260","250","310","106","270"]},"In embodiments as shown, the application server  can comprise a processor  communicating with memory , such as electronic random access memory, operating under control of or in conjunction with an operating system . The operating system  can be, for example, a distribution of the Linux\u2122 operating system, the Unix\u2122 operating system, or other open-source or proprietary operating system or platform. The processor  can also communicate with a database , such as a database stored on a local hard drive, and a set of applications , to execute control logic and control the operation of the services and resources as described herein. The processor  can further communicate with a network interface , such as an Ethernet\u2122 or wireless data connection, which in turn communicates with the one or more networks , such as the Internet or other public or private networks. Other configurations of the application server , associated network connections, and\/or other hardware, software, and service resources are possible.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["402","404","205","215","406","205","280","270","205","408","270","410","270","250"]},"In , the security token management service  can receive and\/or register the requested token or tokens and associated service(s) generated by the responding token provider or providers. In , the security token management service  can initiate, transmit, and\/or otherwise deploy the requested token(s) to the requesting service in the set of services . In , the security token management service  can update, modify, and\/or retire the requested token(s) and\/or services, based on a predetermined period of use of those tokens or services, and\/or based on other conditions, as appropriate. In , processing can repeat, return to a prior processing point, jump to a further processing point, or end.","The foregoing description is illustrative, and variations in configuration and implementation may occur to persons skilled in the art. For example, while embodiments have been described in which the application server , the security token management service , and other entities may reside in a single server or platform, in embodiments the application server , and\/or other entities and associated logic can be distributed among multiple servers, services, or systems. Other resources described as singular or integrated can in embodiments be plural or distributed, and resources described as multiple or distributed can in embodiments be combined. The scope of the invention is accordingly intended to be limited only by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
