---
title: Content delivery within an application
abstract: A view component of an application requests content from a model component of the application, where the request for content includes a request for data. The model component determines whether the requested data is available. If the requested data is available, the model component delivers the requested content and the requested data. If the requested data is not available, the model component first delivers the requested content and a data placeholder, and after the model component retrieves the data, the model component delivers the requested data to replace the data placeholder.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856803&OS=08856803&RS=08856803
owner: Oracle International Corporation
number: 08856803
owner_city: Redwood Shores
owner_country: US
publication_date: 20111102
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["One embodiment is directed to a computer system, and more particularly, to a computer system that displays data.","A distributed application, such as a client-server application or an enterprise application, can be built according to a Model-View-Controller (\u201cMVC\u201d) design pattern. According to the MVC design pattern, an application is separated into three layers: (1) a model layer; (2) a view layer; and (3) a controller layer. The model layer handles interactions with a data source and runs the business logic in the application. The view layer handles the user interface portion of the application. The view layer controls the appearance and layout of the user interface, and further controls how a user interacts with the application. The controller layer manages the application flow and acts as an interface between the model layer and the view layer. The controller layer controls a user's navigation of the application. In certain applications, the model layer can be split into two layers; the business services layer and the model layer. Like the model layer in the three-layer scenario, the business services layer of the four-layer scenario handles interactions with a data source and runs the business logic in the application. The model layer of the four-layer scenario provides an abstraction layer on top of the business services layer, enabling the view layer and controller layer to interface with different implementations of business services in a consistent way. If implemented this way, the view layer and the controller layer do not know (and do not need to know) the specific implementations of the various business services.","In a distributed application using the MVC architecture, one of the most expensive operations involved is retrieving data from the data store in the model layer. A slow model layer can impact the time it takes to render the user interface of the application and to display the data retrieved from the data store within the user interface, and can result in a poor usability experience for a user viewing the user interface in a client, whether the client is a client application (i.e., thick client) and the user interface is a screen of the client application, or whether the client is a web browser (i.e., thin client) and the user interface is a web page that is navigated to by the web browser. Furthermore, another expensive operation can be displaying an extremely large amount of data within the user interface of the application.","One embodiment is directed to a computer-readable medium having instructions stored thereon that, when executed by a processor, cause the processor to deliver content to a user interface of an application. The instructions include receiving a request for content, where the request includes a request for data. The instructions further include determining whether the requested data is available, where the requested data is available when the data is cached in a memory. The instructions further include transmitting the requested content and the requested data in a single communication when the requested data is available, where the requested content and the requested data are displayed within the user interface of the application. The instructions further include transmitting the requested content and a data placeholder in a first communication when the requested data is not available, where the requested content and the data placeholder are displayed within the user interface of the application. The instructions further include retrieving the requested data from a data store when the requested data is not available. The instructions further include transmitting the requested data in a second communication when the requested data is not available, where the requested data is displayed in place of the data placeholder within the user interface of the application.","According to an embodiment, an application based on the MVC architecture includes a content delivery application programming interface (\u201cAPI\u201d) that allows a view component of a view layer of the application to query a model component of a model layer of the application for available data. Data is available within the model component when the model component has cached the data in a memory and can deliver the data immediately upon request without first retrieving the data from a data store. The determination of whether data is available within the model component does not involve retrieving the data from a data store. Thus, a potentially expensive operation of communicating with the data store can be limited to only situations where the data is not available within the model component.","For example, while building a user interface to be rendered within the view component, if the model component indicates that a requested set of data is not available within the model component, the model component can delay issuing a request to a data store to retrieve data and instead deliver content that does not require the requested data to the view component. The view component can render the content that does not require the requested data, and thus, display this content within the user interface. The model component can then subsequently issue a request to the data store to retrieve data, where the request is a subsequent (and in certain scenarios, asynchronous) request. Upon receiving the data from the data store, the model component can then deliver the data to the view component. The view component can then render the data, and thus, display the data, along with the other content, within the user interface.","Thus, the content delivery API can optimize the delivery of content to the component, and optimize the rendering of the content within the user interface of the application. Content can include a web page or user interface screen, where content can also include one or more images displayed within the web page or user interface screen, such as tables, trees, or tree tables. Content can further include data contained within the web page or user interface screen, such as data contained within one or more tables, trees, or tree tables. Data can include a set of any qualitative or quantitative attributes, such as structured data, tabular data, and hierarchical data, that can be stored at a data store that the application can be operatively connected to.","In one embodiment, the application can be a distributed application that is implemented in a computer system, such as a client-server system, where the model layer of the distributed application is implemented in a server, the view layer of the distributed application is implemented in a client, and the server and client can communicate using an appropriate protocol, such as a network protocol.","In one embodiment, the view layer of the application can be implemented in a web browser, and the model layer of the application can be implemented in a web server. According to this embodiment, a model component of the model layer can deliver content to a view component of the view layer, where the content includes a web page, where the web page can include one or more tables, trees, or tree tables, and where the web page can include data contained within the one or more tables, trees, or tree tables. The model component can deliver a web page to the view component, and the view component can render the web page (including the data), and can display the web page (including the data) within the web browser.","In an alternate embodiment, the view layer of the application can be implemented in a client application, and the model layer of the application can be implemented in an application server. The client application may or may not be implemented on the same computer system where the application server is implemented. According to this embodiment, a model component of the model layer can deliver content to a view component of the view layer, where the content includes a user interface screen, where the user interface screen can include one or more tables, trees, or tree tables, and where the user interface screen can include data contained within the one or more tables, trees, or tree tables. The model component can deliver a user interface screen to the view component, and the view component can render the user interface screen (including the data), and can display the user interface screen (including the data) with the client application.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["10","10","12","10","10","22","12","22","10","14","22","14","10","20","10"]},"A computer-readable medium may be any available medium that can be accessed by processor . A computer-readable medium may include both a volatile and nonvolatile medium, a removable and non-removable medium, a communication medium, and a storage medium. A communication medium may include computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism, and may include any other form of information delivery medium known in the art. A storage medium may include RAM, flash memory, ROM, erasable programmable read-only memory (\u201cEPROM\u201d), electrically erasable programmable read-only memory (\u201cEEPROM\u201d), registers, hard disk, a removable disk, a compact disk read-only memory (\u201cCD-ROM\u201d), or any other form of storage medium known in the art.","Processor  can also be operatively coupled via bus  to a display , such as a Liquid Crystal Display (\u201cLCD\u201d). Display  can display information to the user. A keyboard  and a cursor control device , such as a computer mouse, can also be operatively coupled to bus  to enable the user to interface with system .","According to one embodiment, memory  can store software modules that may provide functionality when executed by processor . The modules can include an operating system , a content delivery module , as well as other functional modules . Operating system  can provide an operating system functionality for system . Content delivery module  can provide functionality for delivering content to a user interface of an application, as will be described in more detail below. In certain embodiments, content delivery module  can comprise a plurality of modules that each provide specific individual functionality for delivering content to a user interface of an application. System  can also be part of a larger system. Thus, system  can include one or more additional functional modules  to include the additional functionality. For example, functional modules  may include modules that provide additional functionality, such as a \u201cFusion\u201d product from Oracle Corporation.","Processor  can also be operatively coupled via bus  to a database . Database  can store data in an integrated collection of logically-related records or files. Database  can be an operational database, an analytical database, a data warehouse, a distributed database, an end-user database, an external database, a navigational database, an in-memory database, a document-oriented database, a real-time database, a relational database, an object-oriented database, or any other database known in the art.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1"],"b":["200","210","220","230","200","240","240","240","34","240","240","200","240"]},"Model layer  is a layer of application  that provides access to data stored within the one or more integrated objects of data store . Model layer  also provides business logic implementation for application . Model layer  includes model component , which is a component of application . Model component  can include data controls and data bindings, where data controls abstract business service implementation details from clients, and data bindings expose data control methods and attributes to components of controller layer  and view layer . Data controls can also provide for the ability to create data bound pages. Model component  can also include business services that manage interaction with application  and data store . Such business services provide services, such as data persistence, object\/relational mapping, transaction management, and business logic execution. Examples of business services include Java\u00ae class, Enterprise Java Bean (\u201cEJB\u201d) classes, web services, extensible markup language (\u201cXML\u201d) files, comma-separated-values (\u201cCSV\u201d) files, representational state transfer (\u201cREST\u201d) services, business process execution language (\u201cBPEL\u201d) processes, and Oracle Application Development Framework (\u201cADF\u201d) Business Components. Furthermore, model component  can deliver content to any component of either controller layer  or view layer . Content can include a web page or a user interface screen, where content can also include one or more images displayed within the web page or user interface screen, such as tables, trees, or tree tables. Content can further include data contained within the web page or user interface screen, where the data can be contained within the one or more tables, trees, or tree tables. In one embodiment, model component  can cache data that is retrieved from data store  within a memory, so that model component  can access the data without the need to retrieve the data from data store  a second time. As an example, where application  supports a plurality of users, when a first user requests data, model component  retrieves the data from data store  before delivering the data to the first user. Subsequently, model component  can cache the retrieved data within the memory. Thus, when a second user requests the same data, model component  can retrieve the data from the memory rather than data store . In alternate embodiments, model layer  can include any number of model components.","Controller layer  manages a flow of application  and handles all user interaction with application . For example, when a user clicks a search button of a web page displayed by application , controller layer  determines what action to perform and where to navigate to. Controller layer  includes controller component , which is a component of application . Controller component  can be a JavaServer Faces (\u201cJSF\u201d) component that can use XML files called view templates (or Facelets views) to process a request from model layer , load the appropriate view template, build a component tree, process one or more events, and render a response to model layer . Controller component  can also be an ADF controller component that includes the functionality of the JSF component, but also provides other additional functionality, such as reusable task flows that pass control not only between JSF pages, but also between other activities such as method calls or other task flows. Furthermore, controller component  can deliver one or more events from view layer  to model layer , where an event may comprise a request for content, and can deliver content from model layer  to view layer . In alternate embodiments, controller layer  can include any number of controller components.","View layer  provides a user interface that can be displayed for application  and transmits events to controller layer , where an event can comprise a request to model layer  for content. View layer  can also display content within the user interface, where the content is delivered by model layer , and where the content can include data. View layer  includes desktop view component , mobile view component , and browser-based view component , which are all components of application . Desktop view component  can provide a user interface for a desktop client application. Mobile view component  can provide a user interface for a mobile client application. Browser-based view component  can provide a user interface for a browser-based client application that is implemented within a web browser. In alternate embodiments, view layer  can include any number of desktop view components, mobile view components, and browser-based view components.","According to the embodiment, model component  also includes content delivery API . When model component  receives a request from a view component of view layer  (such as desktop view component , mobile view component , and browser-based view component ) to deliver content, where the content includes data, content delivery API  can specify when the data should be delivered. Specifically, content delivery API  can determine whether the data is available within model component , or whether model component  is required to retrieve the data from data store . If the data is available within model component , then model component  substantially immediately delivers the data, in addition to the other content, to the view component of the view layer , where the view component renders the content, including the data, and displays the content and data. However, if the requested data is not available within model component , then model component  delivers the content without the data to the view component of view layer . The view component of view layer  renders the content and a data placeholder in place of the data, and displays the content and the data placeholder. Subsequently, model component  retrieves the data from data store . Once model component  has retrieved the data from data store , model component  delivers the data to the view component of view layer , where the view component renders the data and replaces the display of the data placeholder with a display of the data.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","310","320","220","230","300","200","300","200"]},"Business services layer  is a layer of application  that provides access to data stored within the one or more integrated objects of data store . Business services layer  includes business services component , which is a component of application . Business services component  can include business services that manage interaction with application  and data store . Such business services provide services, such as data persistence, object\/relational mapping, transaction management, and business logic execution. Examples of business services include Java\u00ae class, EJB classes, web services, XML files, CSV files, REST services, BPEL processes, and Oracle ADF Business Components. In alternate embodiments, business services layer  can include any number of business services components.","Model layer  is a layer of application  that is an abstraction layer and sits on top of business services layer . Model layer  operatively connects the business services components of business services layer  to the components of controller layer  and view layer  that use the business service components. Model layer  provides a single interface that can be used to access any type of business service. Model layer  also provides business logic implementation for application . Model layer  includes model component , which is a component of application . Model component  can include data controls and data bindings, where data controls abstract business service implementation details from clients, and data bindings expose data control methods and attributes to components of controller layer  and view layer . Data controls can also provide for the ability to create data bound pages. Furthermore, model component  can deliver content to any component of either controller layer  or view layer . Content can include a web page or a user interface screen, where content can also include one or more images displayed within the web page or user interface screen, such as tables, trees, or tree tables. Content can further include data contained within the web page or user interface screen, where the data can be contained within the one or more tables, trees, or tree tables. In one embodiment, model component  can cache data that a business services component (such as business services component ) retrieves from data store  within a memory, so that model component  can access the data without the need for a business services component (such as business services component ) to retrieve the data from data store  a second time. In alternate embodiments, model layer  can include any number of model components.","According to the embodiment, model component  also includes content delivery API . When model component  receives a request from a view component of view layer  (such as desktop view component , mobile view component , and browser-based view component ) to deliver content, where the content includes data, content delivery API  can specify when the data should be delivered. Specifically, content delivery API  can determine whether the data is available within model component , or whether model component  is required to request that business services component  retrieve the data from data store  and deliver the data to model component . If the data is available within model component , then model component  immediately delivers the data, in addition to the other content, to the view component of the view layer , where the view component renders the content, including the data, and displays the content and data. However, if the requested data is not available within model component , then model component  delivers the content without the data to the view component of view layer . The view component of view layer  renders the content and a data placeholder in place of the data, and displays the content and the data placeholder. Subsequently, model component  requests that business services component  retrieve the data from data store . Business services component  retrieves the data from data store  and delivers the data to model component . Once model component  has received the data from business services component , model component  delivers the data to the view component of view layer , where the view component renders the data and replaces the display of the data placeholder with a display of the data.","A view layer of an application, including one or more view components, and the view layer's interaction with a model layer, including one or more model components, is now described in greater detail. According to an embodiment, within a view layer of an application, data can be displayed within a page or a user interface screen using a view component. For example, structured data or tabular data can be displayed within tables comprising rows and columns using a table component. Furthermore, hierarchical data can be displayed either within trees using a tree component, or within tree tables, using a tree table component. Table, tree, and tree table components are types of view components, and can be bound to a complete collection of one or more records of data, where the view components repeatedly render the one or more records of data by \u201cstamping\u201d (i.e., selecting) a value for each record. For example, assume a table contains two child column components, where each column displays a single attribute value for the row using an output component and there are four records of data to be displayed. Instead of binding four sets of two output components to display the data, the table itself is bound to the collection of all four records of data and simply \u201cstamps\u201d one set of the output components four times. As each row is \u201cstamped,\u201d the data for the current row is copied into an attribute on the table, from which the output component can retrieve the correct values for the row.","The table component displays simple tabular data. Each row in the table displays one object in a collection, where the object represents a record of data. For example, each row in the table displays a row from a data store, where the row contains data. The column component displays the value of attributes for each of the objects. The table component provides a range of features for end users of an application, such as sorting columns, and selecting one or more rows and then executing an application defined action on the selected rows. The table component also provides a range of presentation features, such as showing grid lines and banding, row and column headers, column headers spanning groups of columns, and values wrapping within cells.","Hierarchical data (i.e., data that has parent\/child relationships) can be displayed as expandable trees using the tree component. Items are displayed as nodes that mirror the parent\/child structure of the data, where data of each node is also displayed. Each top-level node can be expanded to display any child nodes (including the data within each child node), which in turn can also be expanded to display any of their child nodes (including the data within each child node). Each expanded node can then be collapsed to hide child nodes.","Hierarchical data can also be displayed using tree table components. The tree table also displays parent\/child nodes that are expandable and collapsible, but in a tabular format, which allows an application to display attribute values for the nodes as columns of data. Like the tree component, the tree table component can show the parent\/child relationships between items. And like the table component, the tree table component can also show any attribute values for those items in a column. Most of the features available in a table component are also available in a tree table component.","According to the embodiment, the table, tree, and tree table components are virtualized, meaning not all the rows of data that are present within a model component are delivered to a view component and displayed within a user interface of the application. Instead, a number of rows of data that are delivered to a view component and displayed within the user interface of the application can be limited by a predetermined attribute (i.e., a fetch size attribute), that is discussed below in greater detail. The data can be delivered to the view component immediately upon rendering of the view component (i.e., immediate delivery), after a shell of the view component has been rendered, where the data is delivered in a separate request (i.e., lazy delivery) or when the data is available (i.e., when available delivery). In one embodiment, by default, data is delivered to the view component when the data is available.","With immediate delivery, the data is retrieved during an initial request for the data, and the view component, including the data, is rendered. With lazy delivery, instead of retrieving the data during an initial request, a special separate partial page rendering (\u201cPPR\u201d) request is run, and a number of rows of data are returned. In one embodiment, the number of rows of data is a value of a fetch size attribute of the view component. Only a shell of the view component is rendered (such as a page or user interface screen, where the page\/user interface screen can include one or more tables, trees, or tree tables) after the initial request, where a data placeholder is rendered in place of the missing data. Because only a shell of the view component is rendered, only a render response phase executes for the view component, allowing the corresponding data to be retrieved, delivered, and displayed. When a user's actions cause a subsequent data retrieval (for example scrolling in a table for another set of rows), another request is executed, and the corresponding data is retrieved, delivered, and displayed. When content delivery is configured to be delivered when it is available (i.e., when available delivery), a model component checks for data availability during the initial request. If the data is available, the data is delivered to the view component. If the data is not available, the data is retrieved during the separate PPR request, as it is with lazy delivery.","In one embodiment, an application can include an attribute that defines when data is delivered from a model component to a view component (i.e., content delivery attribute). According to the embodiment, when the content delivery attribute is set to \u201cimmediate,\u201d data is fetched at the same time the component is rendered. When the content delivery attribute is set to \u201clazy,\u201d data is fetched and delivered to a view component during a subsequent request. When the content delivery attribute is set to \u201cwhen available\u201d (the default attribute value), a model component checks if the data is available. If the data is available, the content is delivered immediately. If it is not, then lazy delivery is used. Also according to the embodiment, as previously described, the application can include an attribute that defines a size of a block that should be returned with each data retrieval (i.e., fetch size attribute). When data is retrieved, in either immediate delivery, lazy delivery, or when available delivery, a number of rows retrieved is determined by the fetch size attribute. As previously described, in when available delivery, a model component checks availability of data using a content delivery API. The content delivery API is discussed below in greater detail.","As previously described, view components of a view layer of an application, such as a table component, a tree component, and a tree table component, support immediate delivery, lazy delivery, and when available delivery, where a type of delivery is determined based on a content delivery attribute of the application. To support when available delivery, a model layer of an application can include a content delivery API. The content delivery API provides a set of instructions that support requesting a model component to check for data availability, and a set of instructions that support requesting the model component to retrieve a range of rows of data from a data store. Importantly, the set of instructions that support requesting a model component to check for data availability do not cause data to be retrieved from a data store, nor does the set of instructions call another API that may cause data to be retrieved from the data store. This is because retrieving data from a data store can be an expensive operation, and thus, when available delivery avoids retrieving data from the data store if the data is available within a model component of a model layer, in one embodiment.","According to an embodiment, the content delivery API includes a set of instructions that support requesting a model component to check for data availability. As previously described, \u201cavailable\u201d means that a model component has cached the data in a memory, and that the model component does not need to retrieve the data from a data store in order to deliver the data to a view component. In one embodiment, the set of instructions allow a view component to request a model component check for data availability by passing a range of rows, where the range of rows correspond to one or more rows of data that are either cached in a memory by an model component, or stored within a data store. According to the embodiment, by passing a range of rows to the model component, the model component is able to determine whether the range of rows is available without iterating over the rows in the range, and without calling another API for each row that may cause the model component to retrieve data from the data store for each row.","Below is an example set of instructions for a content delivery API that support requesting a model component to check for data availability, according to an embodiment of the invention:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003package org.apache.myfaces.trinidad.model;"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Defines a set of \u201clocal\u201d APIs for a CollectionModel."},{"entry":"\u2003\u2003\u2002* The \u201clocal\u201d APIs allow a client to query the model and determine if a"},{"entry":"\u2003\u2003\u2002* set of rows are locally available. \u201cLocally available\u201d can mean the"},{"entry":"\u2003\u2003\u2002* model has the given set of rows in a local cache and can honor a fetch request"},{"entry":"\u2003\u2003\u2002* efficiently (for example, without performing a SQL query)."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public interface LocalRowKeyIndex"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Given a row index, check if a row is locally available"},{"entry":"\u2003\u2003\u2003* @param rowIndex index of row to check"},{"entry":"\u2003\u2003\u2003* @return <code>true<\/code> if row is locally available <code>false<\/code>"},{"entry":"\u2003\u2003\u2003* otherwise"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public boolean isRowLocallyAvailable(int rowIndex);"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Given a row key, check if a row is locally available"},{"entry":"\u2003\u2003\u2003* @param rowKey row key for the row to check"},{"entry":"\u2003\u2003\u2003* @return <code>true<\/code> if row is locally available <code>false<\/code>"},{"entry":"\u2003\u2003\u2003* otherwise"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public boolean isRowLocallyAvailable(Object rowKey);"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Check if a range of rows is locally available starting from a row index"},{"entry":"\u2003\u2003\u2003* @param startIndex staring index for the range"},{"entry":"\u2003\u2003\u2003* @param rowCount number of rows in the range"},{"entry":"\u2003\u2003\u2003* @return <code>true<\/code> if range of rows is locally available"},{"entry":"\u2003\u2003\u2003* <code>false<\/code> otherwise"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public boolean areRowsLocallyAvailable(int startIndex, int rowCount);"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Check if a range of rows is locally available starting from a row key"},{"entry":"\u2003\u2003\u2003* @param startRowKey staring row key for the range"},{"entry":"\u2003\u2003\u2003* @param rowCount number of rows in the range"},{"entry":"\u2003\u2003\u2003* @return <code>true<\/code> if range of rows is locally available"},{"entry":"\u2003\u2003\u2003* <code>false<\/code> otherwise"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public boolean areRowsLocallyAvailable(Object startRowKey, int rowCount);"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Check if a range of rows is locally available starting from the current row"},{"entry":"\u2003\u2003\u2003* @param rowCount number of rows in the range"},{"entry":"\u2003\u2003\u2003* @return <code>true<\/code> if range of rows is locally available"},{"entry":"\u2003\u2003\u2003* <code>false<\/code> otherwise"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public boolean areRowsLocallyAvailable(int rowCount);"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Convenient API to return a row count estimate. This method can be"},{"entry":"\u2003\u2003\u2003* optimized to avoid a data fetch which may be required to return an exact row"},{"entry":"\u2003\u2003\u2003* count."},{"entry":"\u2003\u2003\u2003* <p>"},{"entry":"\u2003\u2003\u2003* This method can return \u22121 or a row count estimate if determining"},{"entry":"\u2003\u2003\u2003* exact row count requires a data fetch."},{"entry":"\u2003\u2003\u2003* When dealing with estimated row counts,"},{"entry":"\u2003\u2003\u2003* the model user needs to gracefully handle the case where isRowAvailable"},{"entry":"\u2003\u2003\u2003* returns <code>false<\/code> for a row index or a row key."},{"entry":"\u2003\u2003\u2003* @return estimated row count"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public int getEstimatedRowCount( );"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Helper API to determine if the row count returned from {@link"},{"entry":"\u2003\u2003\u2003* #getEstimatedRowCount}"},{"entry":"\u2003\u2003\u2003* is EXACT, or an ESTIMATE"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public Confidence getEstimatedRowCountConfidence( );"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Enum used in the {@link #getEstimatedRowCountConfidence} API to"},{"entry":"\u2003\u2003\u2003* determine if the row count is exact or an estimate"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public enum Confidence"},{"entry":"\u2003\u2003\u2002{"},{"entry":"\u2003\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2003\u2002* The row count returned by {@link #getEstimatedRowCount} is exact"},{"entry":"\u2003\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003\u2003EXACT,"},{"entry":"\u2003\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2003\u2002* The row count returned by {@link #getEstimatedRowCount} is an estimate"},{"entry":"\u2003\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003\u2003ESTIMATE"},{"entry":"\u2003\u2003\u2002}"},{"entry":"\u2003\u2003\u2002\/\/"},{"entry":"\u2003\u2003\u2002\/\/ Local Cache management APIs"},{"entry":"\u2003\u2003\u2002\/\/"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* clear all rows from the local cache"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public void clearLocalCache( );"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Clear the requested range of rows from the local cache"},{"entry":"\u2003\u2003\u2003* @param startingIndex starting row index for the range to clear"},{"entry":"\u2003\u2003\u2003* @param rowsToClear number of rows to clear from the cache"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public void clearCachedRows(int startingIndex, int rowsToClear);"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Clear the requested range of rows from the local cache"},{"entry":"\u2003\u2003\u2003* @param startingRowKey starting row key for the range to clear"},{"entry":"\u2003\u2003\u2003* @param rowsToClear number of rows to clear from the cache"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public void clearCachedRows(Object startingRowKey, int rowsToClear);"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Clear a row from the local cache by row index"},{"entry":"\u2003\u2003\u2003* @param index row index for the row to clear from the cache"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public void clearCachedRow(int index);"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Clear a row from the local cache by row key"},{"entry":"\u2003\u2003\u2003* @param rowKey row key for the row to clear from the cache"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public void clearCachedRow(Object rowKey);"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Indicates the caching strategy supported by the model"},{"entry":"\u2003\u2003\u2003* @see LocalCachingStrategy"},{"entry":"\u2003\u2003\u2003* @return caching strategy supported by the model"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public LocalCachingStrategy getCachingStrategy( );"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Enum used to indicate the type of caching supported by the model"},{"entry":"\u2003\u2003\u2003* @see #getCachingStrategy( )"},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public enum LocalCachingStrategy"},{"entry":"\u2003\u2003\u2002{"},{"entry":"\u2003\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003\u2003* Caching is not supported"},{"entry":"\u2003\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2003\u2002NONE,"},{"entry":"\u2003\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003\u2003* Supports caching certain ranges of rows"},{"entry":"\u2003\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2003\u2002PARTIAL,"},{"entry":"\u2003\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003\u2003* Caches all rows"},{"entry":"\u2003\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2003\u2002ALL"},{"entry":"\u2003\u2003\u2002}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\u2002package org.apache.myfaces.trinidad.model;"},{"entry":"\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003* Defines a set of \u201clocal\u201d APIs for a TreeModel."},{"entry":"\u2003\u2003\u2003* The \u201clocal\u201d APIs allow a client to query the tree model and determine if a"},{"entry":"\u2003\u2003\u2003* set of rows are locally available. \u201cLocally available\u201d can mean the"},{"entry":"\u2003\u2003\u2003* model has the given set of rows in a local cache and can honor a fetch request"},{"entry":"\u2003\u2003\u2003* efficiently (for example, without performing a SQL query)."},{"entry":"\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2002public interface TreeLocalRowKeyIndex"},{"entry":"\u2003\u2003\u2002{"},{"entry":"\u2003\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003\u2003* Indicates whether data for a child model (children of the current node) is"},{"entry":"\u2003\u2003\u2003\u2003* locally available. Locally available means no data fetch is required"},{"entry":"\u2003\u2003\u2003\u2003* as a result of a call to <code>enterContainer<\/code>."},{"entry":"\u2003\u2003\u2003\u2003* @return true if child data is locally available"},{"entry":"\u2003\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2003\u2002public boolean isChildCollectionLocallyAvailable( );"},{"entry":"\u2003\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003\u2003* Indicates whether child data for the node with the given index is"},{"entry":"\u2003\u2003\u2003\u2003* locally available."},{"entry":"\u2003\u2003\u2003\u2003* @param index row index to check"},{"entry":"\u2003\u2003\u2003\u2003* @return true if child data is available, false otherwise"},{"entry":"\u2003\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2003\u2002public boolean isChildCollectionLocallyAvailable(int index);"},{"entry":"\u2003\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003\u2003* Indicates whether child data for the node with the given row key is"},{"entry":"\u2003\u2003\u2003\u2003* locally available."},{"entry":"\u2003\u2003\u2003\u2003* @param rowKey row key to check"},{"entry":"\u2003\u2003\u2003\u2003* @return true if child data is available, false otherwise"},{"entry":"\u2003\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2003\u2002public boolean isChildCollectionLocallyAvailable(Object rowKey);"},{"entry":"\u2003\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003\u2003* Check if a range of rows is locally available starting from a row index. The"},{"entry":"range"},{"entry":"\u2003\u2003\u2003\u2003* can include child nodes in any expanded nodes within the range."},{"entry":"\u2003\u2003\u2003\u2003* @param startIndex staring index for the range"},{"entry":"\u2003\u2003\u2003\u2003* @param rowCount number of rows in the range"},{"entry":"\u2003\u2003\u2003\u2003* @param disclosedRowKeys set of expanded nodes which may fall within the"},{"entry":"\u2003\u2003\u2003\u2003* range to check for availability"},{"entry":"\u2003\u2003\u2003\u2003* @return <code>true<\/code> if range of rows is locally available"},{"entry":"\u2003\u2003\u2003\u2003* <code>false<\/code> otherwise"},{"entry":"\u2003\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2003\u2002public boolean areRowsLocallyAvailable(int startIndex, int rowCount,"},{"entry":"RowKeySet disclosedRowKeys);"},{"entry":"\u2003\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003\u2003* Check if a range of rows is locally available starting from a row key."},{"entry":"\u2003\u2003\u2003\u2003* The range can include child nodes in any expanded nodes within the range."},{"entry":"\u2003\u2003\u2003\u2003* @param startRowKey staring row key for the range"},{"entry":"\u2003\u2003\u2003\u2003* @param rowCount number of rows in the range"},{"entry":"\u2003\u2003\u2003\u2003* @param disclosedRowKeys set of expanded nodes which may fall within the"},{"entry":"\u2003\u2003\u2003\u2003* range to check for availability"},{"entry":"\u2003\u2003\u2003\u2003* @return <code>true<\/code> if range of rows is locally available"},{"entry":"\u2003\u2003\u2003\u2003* <code>false<\/code> otherwise"},{"entry":"\u2003\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2003\u2002public boolean areRowsLocallyAvailable(Object startRowKey, int rowCount,"},{"entry":"RowKeySet disclosedRowKeys);"},{"entry":"\u2003\u2003\u2003\u2002\/**"},{"entry":"\u2003\u2003\u2003\u2003* Check if a range of rows is locally available starting from current position."},{"entry":"\u2003\u2003\u2003\u2003* The rangecan include child nodes in any expanded nodes within the range."},{"entry":"\u2003\u2003\u2003\u2003* @param rowCount number of rows in the range"},{"entry":"\u2003\u2003\u2003\u2003* @param disclosedRowKeys set of expanded nodes which may fall within the"},{"entry":"\u2003\u2003\u2003\u2003* range to check for availability"},{"entry":"\u2003\u2003\u2003\u2003* @return <code>true<\/code> if range of rows is locally available"},{"entry":"\u2003\u2003\u2003\u2003* <code>false<\/code> otherwise"},{"entry":"\u2003\u2003\u2003\u2003*\/"},{"entry":"\u2003\u2003\u2003\u2002public boolean areRowsLocallyAvailable(int rowCount, RowKeySet"},{"entry":"disclosedRowKeys);"},{"entry":"\u2003\u2003\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"According to the embodiment, the content delivery API defines a public interface, LocalRowKeyIndex, that provides a set of methods that can be implemented by a view component, such as a table component. Specifically, LocalRowKeyIndex provides an isRowLocallyAvailable( ) method. The isRowLocallyAvailable( ) method can receive either a row index parameter or a row key parameter. A row index parameter represents an index of a row of data, and a row key parameter represents a key of a row of data. An index is an integer value, whereas a key is an object value. The isRowLocallyAvailable( ) method can check whether a row is locally available based on either the row index parameter or the row key parameter, and can return a boolean value indicating whether the row is available.","LocalRowKeyIndex also provides an areRowsLocallyAvailable( ) method. The areRowsLocallyAvailable( ) method can receive either a starting index parameter or a starting row key, and can also receive a row count parameter. A starting index parameter represents an index of a row of data that is at a beginning of a range of rows, and a starting row key represents a key of a row of data that is at a beginning of a range of rows. A row count parameter represents a range of rows. The areRowsLocallyAvailable( ) method can check whether a range of rows is locally available based on either the starting index parameter or the starting row key parameter, and the row count parameter, and can return a boolean value indicating whether the range of rows is available. Alternatively, the areRowsLocallyAvailable( ) method can only receive a row count parameter, and the areRowsLocallyAvailable( ) method can check whether a range of rows is locally available based on a current row.","LocalRowKeyIndex can also provide a mechanism for returning a row count estimate. There may be situations where an exact row count cannot be obtained without performing data retrieval from a data store. Since this is not desired when determining whether data is available within a model component, an estimated row count can be used, where an estimated row count can be obtained without performing data retrieval from a data store. The mechanism can include a getEstimatedRowCount( ) that returns a row count estimate. The mechanism can also include a getEstimatedRowCountConfidence( ) method that determines whether a returned row count is an exact row count or an estimated row count. The mechanism can also include an enumerated data type Confidence that can identify whether a row count is an exact row count or an estimated row count. The enumerated data type Confidence can include the values \u201cEXACT,\u201d and \u201cESTIMATE.\u201d","LocalRowKeyIndex can also provide a mechanism for managing a local cache of a model component. The mechanism can include a clearLocalCache( ) method that clears all rows from the local cache of the model component. The mechanism can also include a clearCachedRow( ) method. The clearCachedRow( ) method can clear a row from the local cache of the model component. The clearCachedRow( ) method can receive either a row index parameter or a row key parameter. The clearCachedRow( ) method can check clear a row from the local cache based on either the row index parameter or the row key parameter. The mechanism can also include a clearCachedRows( ) method. The clearCachedRows( ) method can clear a requested range of rows from the local cache of the model component. The clearCachedRows( ) method can receive either a starting index parameter or a starting row key, and can also receive a parameter representing a number of rows to clear. The mechanism can also include a getCachingStrategy( ) method that determines a type of caching supported by a mode component. The mechanism can also include an enumerated data type LocalCachingStrategy that can identify whether a model component does not support caching, only supports caching certain ranges of rows, or supports caching all rows. The enumerated data type LocalCachingStrategy can include the values \u201cNONE,\u201d \u201cPARTIAL,\u201d and \u201cALL.\u201d","The content deliver API also defines a public interface, TreeLocalRowKeyIndex, that provides a set of methods that can be implemented by a view component, such as a tree component or a tree table component. Specifically, TreeLocalRowKeyIndex provides an isChildCollectionLocallyAvailable( ) method. The isChildCollectionLocallyAvailable( ) method can receive either an index parameter or a starting row key. An index parameter represents an index of a row of data for a given node, and a starting row key represents a key of a row of data for a given node. The isChildCollectionLocallyAvailable( ) method can check whether child data for the given node is locally available based on either the index parameter or the row key parameter, and can return a boolean value indicating whether the child data is available. Alternatively, the isChildCollectionLocallyAvailable( ) method can not receive any parameters, and the isChildCollectionLocallyAvailable( ) method can check whether child data for a current node is locally available.","LocalRowKeyIndex also provides an areRowsLocallyAvailable( ) method. The areRowsLocallyAvailable( ) method can receive either a starting index parameter or a starting row key, and can also receive a row count parameter and a row key set parameter. A starting index parameter represents an index of a row of data that is at a beginning of a range of rows, and a starting row key represents a key of a row of data that is at a beginning of a range of rows. A row count parameter represents a range of rows. A row key set parameter represents a set of expanded nodes which may fall within the range to check for availability. The areRowsLocallyAvailable( ) method can check whether a range of rows is locally available, where the range can include child nodes in any expanded nodes within the range, based on either the starting index parameter or the starting row key parameter, the row count parameter, and the row key set parameter, and can return a boolean value indicating whether the range of rows is available. Alternatively, the areRowsLocallyAvailable( ) method can only receive a row count parameter and a row key set parameter, and the areRowsLocallyAvailable( ) method can check whether a range of rows is locally available, where the range can include child nodes in any expanded nodes within the range, based on a current row.","Furthermore, below is an example set of instructions for a content delivery API that support determining whether a range of rows is available without iterating over the rows in the range, and without calling another API for each row that may cause a retrieval of data from the data store for each row, according to an embodiment of the invention:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"package org.apache.myfaces.trinidad.model;"},{"entry":"\/**"},{"entry":"\u2002* Identifies a collection that is indexed by rowKeys."},{"entry":"\u2002* Data is accessed by setting a rowKey, and then accessing"},{"entry":"\u2002* {@link #getRowData}."},{"entry":"\u2002*\/"},{"entry":"public interface RowKeyIndex"},{"entry":"{"},{"entry":"\u2002\/**"},{"entry":"\u2003* Gets the number of values in this collection"},{"entry":"\u2003* @return \u22121 if the number of values is not known."},{"entry":"\u2003*\/"},{"entry":"\u2002public int getRowCount( );"},{"entry":"\u2002\/**"},{"entry":"\u2003* Gets the index of the current value."},{"entry":"\u2003* The current value is returned by calling {link #getRowData}"},{"entry":"\u2003* @return the zero-based index of the current value, or \u22121 if there"},{"entry":"\u2003* is no current value"},{"entry":"\u2003*\/"},{"entry":"\u2002public int getRowIndex( );"},{"entry":"\u2002\/**"},{"entry":"\u2003* Sets up a value at a particular index to be the current value."},{"entry":"\u2003* The current value is returned by calling {link #getRowData}"},{"entry":"\u2003* @param rowIndex the zero-based index of the value to make current."},{"entry":"\u2003* Use \u22121 to clear the current value"},{"entry":"\u2003*\/"},{"entry":"\u2002public void setRowIndex(int rowIndex);"},{"entry":"\u2002\/**"},{"entry":"\u2003* Gets the rowKey of the current value."},{"entry":"\u2003* The current value is returned by calling {link #getRowData}"},{"entry":"\u2003* @return the rowKey of the current value, or null if there"},{"entry":"\u2003* is no current value"},{"entry":"\u2003*\/"},{"entry":"\u2002public Object getRowKey( );"},{"entry":"\u2002\/**"},{"entry":"\u2003* Sets up a value at a particular rowKey to be the current value."},{"entry":"\u2003* The current value is returned by calling {link #getRowData}"},{"entry":"\u2003* @param rowKey the rowKey of the value to make current."},{"entry":"\u2003* Use null to clear the current value"},{"entry":"\u2003*\/"},{"entry":"\u2002public void setRowKey(Object rowKey);"},{"entry":"\u2002\/**"},{"entry":"\u2003* Checks to make sure a value exists for the current index or rowKey."},{"entry":"\u2003* This is useful if the number of values in this collection is not known"},{"entry":"\u2003* (See {@link #getRowCount})."},{"entry":"\u2003* @see #getRowKey"},{"entry":"\u2003* @see #getRowIndex"},{"entry":"\u2003* @return true if a value exists; false otherwise."},{"entry":"\u2003*\/"},{"entry":"\u2002public boolean isRowAvailable( );"},{"entry":"\u2002\/**"},{"entry":"\u2003* Gets the current value identified by the current index or rowKey."},{"entry":"\u2003* @see #getRowKey"},{"entry":"\u2003* @see #getRowIndex"},{"entry":"\u2003* @return null if the current value has been cleared."},{"entry":"\u2003*\/"},{"entry":"\u2002public Object getRowData( );"},{"entry":"\u2002\/**"},{"entry":"\u2003* Checks to make sure a value exists for the given index."},{"entry":"\u2003* @param rowIndex the index of the row to check."},{"entry":"\u2003* @return true if a value exists; false otherwise."},{"entry":"\u2003*\/"},{"entry":"\u2002public boolean isRowAvailable(int rowIndex);"},{"entry":"\u2002\/**"},{"entry":"\u2003* Gets the row value at the given index."},{"entry":"\u2003* @param rowIndex the index of the row to get data from."},{"entry":"\u2003* @return null if the current value has been cleared."},{"entry":"\u2003*\/"},{"entry":"\u2002public Object getRowData(int rowIndex);"},{"entry":"\u2002\/**"},{"entry":"\u2003* Check for an available row by row key."},{"entry":"\u2003* @param rowKey the row key for the row to check."},{"entry":"\u2003* @return true if a value exists; false otherwise."},{"entry":"\u2003*\/"},{"entry":"\u2002public boolean isRowAvailable(Object rowKey);"},{"entry":"\u2002\/**"},{"entry":"\u2003* Get row data by row key."},{"entry":"\u2003* @param rowKey the row key for the row to get data."},{"entry":"\u2003* @return row data"},{"entry":"\u2003*\/"},{"entry":"\u2002public Object getRowData(Object rowKey);"},{"entry":"\u2002\/**"},{"entry":"\u2003* Check if a range of rows is available starting from the current position"},{"entry":"\u2003* @param rowsToCheck number of rows to check"},{"entry":"\u2003* @return true if all rows in range are available"},{"entry":"\u2003*\/"},{"entry":"\u2002public boolean areRowsAvailable(int rowsToCheck);"},{"entry":"\u2002\/**"},{"entry":"\u2003* Check if a range of rows is available from a starting index without"},{"entry":"\u2003* requiring the client to iterate over the rows"},{"entry":"\u2003* @param startIndex the starting index for the range"},{"entry":"\u2003* @param rowsToCheck number of rows to check"},{"entry":"\u2003* @return true if all rows in range are available"},{"entry":"\u2003*\/"},{"entry":"\u2002public boolean areRowsAvailable(int startIndex, int rowsToCheck) ;"},{"entry":"\u2002\/**"},{"entry":"\u2003* Check if a range of rows is available from a starting row key without"},{"entry":"\u2003* requiring the client to iterate over the rows"},{"entry":"\u2003* @param startRowKey the starting row key for the range"},{"entry":"\u2003* @param rowsToCheck number of rows to check"},{"entry":"\u2003* @return true if all rows in range are available"},{"entry":"\u2003*\/"},{"entry":"\u2002public boolean areRowsAvailable(Object startRowKey,"},{"entry":"\u2002int rowsToCheck) ;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"According to the embodiment, the content delivery API defines a public interface, RowKeyIndex, that provides a set of methods that accept row keys and can complement other index-based APIs. More specifically, the methods of RowKeyIndex do not require that the row keys be converted to indices. Thus, a view component can use one or more of the methods of RowKeyIndex to check if a range of rows are available within a model component, without requiring the model component to iterate over the rows in the range and call a method of an API that causes a retrieval of data from the data store. The interface identifies a collection that is indexed by row keys, where data is accessed by first setting a row key, and then accessing the collection at the row key.","Specifically, RowKeyIndex includes a getRowCount( ) method. The getRowCount( ) method retrieves a number of values in the collection. RowKeyIndex also includes a getRowIndex( ) method. The getRowIndex( ) method retrieves an index of a current value. RowKeyIndex further includes a setRowIndex( ) method. The setRowIndex( ) method sets up a value at a particular index to be a current value. RowKeyIndex further includes a getRowKey( ) method. The getRowKey( ) method retrieves a row key of a current value. RowKeyIndex also includes a setRowKey( ) method. The setRowKey( ) method sets up a value at a particular row key to be a current value.","RowKeyIndex further includes an isRowAvailable( ) method. The isRowAvailable( ) method can receive a row index parameter, a row key parameter, or no parameter. The isRowAvailable( ) method can check whether a value exists based on either a row index parameter, a row key parameter, or a current row index or row key (when no parameter is given), and can return a boolean value indicating whether the row is available.","RowKeyIndex further includes a getRowData( ) method. The getRowData( ) method can receive a row index parameter, a row key parameter, or no parameter. The getRowData( ) method can retrieve a current value based on either a row index parameter, a row key parameter, or a current row index or row key (when no parameter is given), and can return the current value.","RowKeyIndex also provides an areRowsAvailable( ) method. The areRowsAvailable( ) method can receive either a starting index parameter or a starting row key, and can also receive a row count parameter. The areRowsAvailable( ) method can check whether a range of rows is available without requiring an iteration over the rows, based on either the starting index parameter or the starting row key parameter, and the row count parameter, and can return a boolean value indicating whether the range of rows is available. Alternatively, the areRowsLocallyAvailable( ) method can only receive a row count parameter, and the areRowsLocallyAvailable( ) method can check whether a range of rows is available without requiring an iteration over the rows, based on a current row.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 4","FIG. 1","FIG. 4","FIGS. 5 and 6"],"b":"16"},"At , a request for content is received, where the request includes a request for data. In one embodiment, the content includes a web page that includes one or more tables, trees, or tree tables. In another embodiment, the content includes a user interface screen that includes one or more tables, trees, or tree tables. In certain embodiments, the data includes data stored within a data store. In these embodiments, the request for data includes a range of rows of data. In one embodiment, the data includes structured data. In another embodiment, the data includes hierarchical data. In another embodiment, the data includes tabular data.","At , it is determined whether the requested data is available. In certain embodiments, the data is available when the data is cached in a memory. In these embodiments, it is determined whether the requested data is available by invoking one or more methods of a content delivery API. According to these embodiments, the content delivery API includes one or more instructions for determining whether the requested data has been cached in a memory.","At , when the requested data is available, the requested content and the requested data is transmitted in a single communication. The requested content and the requested data are subsequently displayed within a user interface of an application. In one embodiment, a web page that includes a table is displayed, where the table includes the data. In another embodiment, a user interface screen that includes a table is displayed, where the table includes the data.","At , when the requested data is not available, the requested content and a data placeholder are transmitted in a first communication. The requested content and the data placeholder are subsequently displayed within the user interface of the application. In certain embodiments, the data placeholder includes text that indicates that the data is being retrieved. In other embodiments, the data placeholder includes an image that indicates that the data is being retrieved. In one embodiment, a web page that includes a table is displayed, where the table includes the data placeholder. In another embodiment, a user interface screen that includes a table is displayed, where the table includes the data place holder.","At , when the requested data is not available, the requested data is retrieved from a data store. In certain embodiments, retrieving the requested data from the data store includes transmitting a fetch instruction to the data store.","At , when the requested data is not available, the requested data is transmitted in a second communication. The requested data is subsequently displayed in place of the data placeholder within the user interface of the application. In certain embodiments, the first communication is a separate communication from the second communication. In one embodiment, the display of the data placeholder within the table of the web page is replaced with a display of the data. In another embodiment, the display of the data placeholder within the table of the user interface screen is replaced with a display of the data.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 5","b":["501","502","501","501","502","501","502","501","502"]},"At , view component  transmits a request for content to model component , where the request for content includes a request for data. In one embodiment, the request for content is a request for a web page that includes one or more tables, trees, or tree tables, where the tables, trees, or tree tables, include data. In another embodiment, the request for content is a request for a user interface screen that includes one or more tables, trees, or tree tables, where the tables, trees, or tree tables, include data. The data can include structured data, tabular data, or hierarchical data, that can be stored at a data store. In one embodiment the request for data includes a range of rows of data within a data store.","At , model component  determines whether the requested data is available. In one embodiment, data is available within model component  when model component  has cached the data in a memory and can deliver the data immediately upon request without first retrieving the data from a data store. According to the embodiment, model component  includes a content delivery API that includes one or more instructions for determining whether the requested data has been cached in a memory. Model component  can invoke a method of the content delivery API and pass in the range of rows of data as a parameter of the method. Thus, model component  can determine whether the range of rows of data is cached within the memory. According to the embodiment, model component  can make this determination without causing the requested data to be retrieved from the data store, and without calling another API that causes the requested data to be retrieved from the data store. In one embodiment, model component  can make this determination based on a confidence attribute. In the embodiment illustrated in , the requested data is available.","At , model component  delivers the requested content and data to view component . In one embodiment, model component  retrieves the requested data from the memory, and transmits the requested data, along with the requested content, to view component  in a single communication. According to the embodiment, no data is retrieved from a data store.","At , view component  displays the requested content and data within a user interface of the application. In one embodiment, the requested content is a web page that includes one or more tables, trees, or tree tables. According to this embodiment, view component  displays the web page, including the one or more tables, trees, or tree tables, within a user interface of a web browser. Furthermore, view component  displays the requested data within the one or more tables, tree, or tree tables, within the web page. In another embodiment, the requested content is a user interface screen that includes one or more tables, trees, or tree tables. According to this embodiment, view component  displays the user interface screen, including the one or more tables, tree, or tree tables, within a user interface of a display. Furthermore, view component  displays the requested data within the one or more tables, tree, or tree tables, within the user interface screen.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 6","b":["601","602","601","601","602","601","602","601","602"]},"At , view component  transmits a request for content to model component , where the request for content includes a request for data. In one embodiment, the request for content is a request for a web page that includes one or more tables, trees, or tree tables, where the tables, trees, or tree tables, include data. In another embodiment, the request for content is a request for a user interface screen that includes one or more tables, trees, or tree tables, where the tables, trees, or tree tables, include data. The data can include structured data, tabular data, or hierarchical data, that can be stored at a data store. In one embodiment the request for data includes a range of rows of data within a data store.","At , model component  determines whether the requested data is available. In one embodiment, data is available within model component  when model component  has cached the data in a memory and can deliver the data immediately upon request without first retrieving the data from a data store. According to the embodiment, model component  includes a content delivery API that includes one or more instructions for determining whether the requested data has been cached in a memory. Model component  can invoke a method of the content delivery API and pass in the range of rows of data as a parameter of the method. Thus, model component  can determine whether the range of rows of data is cached within the memory. According to the embodiment, model component  can make this determination without causing the requested data to be retrieved from the data store, and without invoking another API that causes the requested data to be retrieved from the data store. In the embodiment illustrated in , the requested data is not available.","At , model component  delivers the requested content and a data placeholder to view component . In one embodiment, model component  creates a data placeholder and transmits the data placeholder, along with the requested content, to view component  in a first communication. According to an embodiment, the data placeholder can be text that indicates that data is currently being retrieved. In another embodiment, the data placeholder can be an image that indicate that data is currently being retrieved. In both of these embodiments, the data placeholder can be displayed within a user interface of the application.","At , view component  displays the requested content and the data placeholder within a user interface of the application. In one embodiment, the requested content is a web page that includes one or more tables, trees, or tree tables. According to this embodiment, view component  displays the web page, including the one or more tables, trees, or tree tables, within a user interface of a web browser. Furthermore, view component  displays the data placeholder within the one or more tables, tree, or tree tables, within the web page. In another embodiment, the requested content is a user interface screen that includes one or more tables, trees, or tree tables. According to this embodiment, view component  displays the user interface screen, including the one or more tables, tree, or tree tables, within a user interface of a display. Furthermore, view component  displays the data placeholder within the one or more tables, tree, or tree tables, within the user interface screen.","At , model component  retrieves the requested data from a data store (not shown in ). In one embodiment, model component  transmits a fetch instruction to the data store, instructing that the requested data be fetched. According to an embodiment where the requested data is a range of rows of data, model component  provides the range of rows of data to the data store. Model component  subsequently receives the requested data from the data store. According to an embodiment where the requested data is a range of rows of data, model component  retrieves one or more rows of data from the data store. In an alternate embodiment, model component  transmits a fetch instruction to a business services component (not shown in ) of a business services layer (also not shown in ) of the application. In this alternate embodiment, the business services component receives the fetch instruction, and subsequently transmits a fetch instruction to the data store. The business services component receives the requested data from the data store and transmits the requested data to model component .","At , model component  delivers the requested data to view component . In one embodiment, model component  transmits the requested data to view component  in a second communication. The second communication is separate from the first communication previously described in relation to . In one embodiment, the second communication is asynchronous to the first communication.","At , view component  displays the requested data within the user interface of the application in place of the data placeholder. In one embodiment, view component  replaces the display of the data placeholder within the one or more tables, trees, or tree tables of the web page, with a display of the requested data. In another embodiment, view component  replaces the display of the data placeholder within the one or more tables, trees, or tree tables of the user interface screen, with a display of the requested data.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 7","b":["700","710","700","710","710","700","710"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 8","FIG. 7"],"b":["800","810","700","800","810","810"]},"Thus, in an embodiment of the invention, a view layer of an application is able to query a model layer for available data, and the model layer is able to deliver the data based on data availability in the model layer. Data availability can mean, in one embodiment, that the model layer has cached the data in a memory and can deliver the data immediately upon request. Thus, according to the embodiment, a response time to show a page or a user interface screen in the view layer is significantly decreased. This is because, if the data is already available within the model layer, it is immediately delivered to the view layer. It is only when the data is not already available within the model layer, where the model layer makes a request to fetch the data, and delivers the data to the view layer is a subsequent request. Furthermore, the use of the when available content delivery feature can be customized for specific applications, such as applications targeted for a local area network, and applications targeted for a wide area network.","The features, structures, or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example, the usage of \u201cone embodiment,\u201d \u201csome embodiments,\u201d \u201ccertain embodiment,\u201d \u201ccertain embodiments,\u201d or other similar language, throughout this specification refers to the fact that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus, appearances of the phrases \u201cone embodiment,\u201d \u201csome embodiments,\u201d \u201ca certain embodiment,\u201d \u201ccertain embodiments,\u201d or other similar language, throughout this specification do not necessarily all refer to the same group of embodiments, and the described features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","One having ordinary skill in the art will readily understand that the invention as discussed above may be practiced with steps in a different order, and\/or with elements in configurations which are different than those which are disclosed. Therefore, although the invention has been described based upon these preferred embodiments, it would be apparent to those of skill in the art that certain modifications, variations, and alternative constructions would be apparent, while remaining within the spirit and scope of the invention. In order to determine the metes and bounds of the invention, therefore, reference should be made to the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Further embodiments, details, advantages, and modifications will become apparent from the following detailed description of the preferred embodiments, which is to be taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
