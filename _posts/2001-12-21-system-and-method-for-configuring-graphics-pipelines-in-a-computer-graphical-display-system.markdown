---
title: System and method for configuring graphics pipelines in a computer graphical display system
abstract: A system and method for configuring a plurality of graphics pipelines in a computer graphical display system is disclosed. The method comprises displaying a graphical user interface to enable a user to graphically specify at least one parameter for a plurality of pipe rectangles of the computer graphical display system, each of the plurality of pipe rectangles being associated with at least one of the plurality of graphics pipelines, receiving the at least one parameter, and updating a compositor of the computer graphical display system in real-time based at least in part on the at least one parameter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06920618&OS=06920618&RS=06920618
owner: Hewlett-Packard Development Company, L.P.
number: 06920618
owner_city: Houston
owner_country: US
publication_date: 20011221
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["This patent application is related to co-pending and commonly assigned U.S. patent application, Ser. No. 09\/715,746, entitled \u201cSINGLE LOGICAL SCREEN SYSTEM AND METHOD FOR RENDERING GRAPHICAL DATA,\u201d filed on Nov. 17, 2000; U.S. patent application, Ser. No. 09\/715,892, entitled \u201cSYSTEMS FOR COMPOSITING GRAPHICAL DATA,\u201d filed on Nov. 17, 2000; U.S. patent application, Ser. No. 09\/715,335, entitled \u201cSYSTEM AND METHOD FOR EFFICIENTLY RENDERING GRAPHICAL DATA,\u201d filed on Nov. 17, 2000; U.S. patent application Ser. No. 09\/715,253, entitled \u201cSYSTEM AND METHOD FOR EFFICIENTLY RENDERING A JITTER ENHANCED GRAPHICAL IMAGE,\u201d filed on Nov. 17, 2000; U.S. patent application Ser. No. 09\/715,882, entitled \u201cSYSTEMS AND METHODS FOR RENDERING GRAPHICAL DATA,\u201d filed on Nov. 17, 2000; and concurrently filed U.S. patent application, Ser. No. 10\/028,869, entitled \u201cSYSTEM AND METHOD FOR AUTOMATICALLY CONFIGURING GRAPHICS PIPELINES BY TRACKING A REGION OF INTEREST IN A COMPUTER GRAPHICAL DISPLAY SYSTEM\u201d.","The present invention relates generally to the field of computer graphical display systems, and more particularly to a system and method for configuring graphics pipelines in a computer graphical display system.","Computer graphical display systems are commonly used for displaying graphical representations of two-dimensional and\/or three-dimensional objects on a two-dimensional display device, such as a cathode ray tube.","In existing computer graphical display systems, a graphics application stored on a processor-based system, such as a computer, defines an object to be rendered by the computer graphical display system. In order to render the object, the application transmits graphics data defining the object to a graphics pipeline, which may be implemented in hardware, software, or a combination thereof. The graphics pipeline via well-known techniques processes the graphics data received from the application and stores the graphics data in a frame buffer. The frame buffer stores the graphics data to define the image to be displayed by a display device. The frame buffer is used to store a set of data for each pixel displayed by the display device. Each set of data includes the color value of the corresponding pixel as well as any additional information needed to appropriately color or shade the identified pixel, such as transparency and depth values. Each set of data is correlated with the coordinate values that identify a pixel position on the display device. The frame buffer transmits the graphics data stored therein to the display device via a scanning process such that each line of pixels defining the image displayed by the display device is consecutively updated.","Multiple display devices may be used to display a single large image in which each display device displays a portion of the large image. In such an embodiment, the multiple display devices are treated as a single logical display device or screen, and different portions of an image may be rendered by the different display devices. Each of the multiple display devices may be associated with different computer systems and the multiple computer systems may be interconnected via a computer network, such as a Local Area Network (LAN). An X Window System is a standard for implementing window-based user interfaces in a networked computer environment and it may be desirable to utilize X Protocol in rendering graphics data in a networked computer system. A more detailed discussion of the X Window System and the X Protocol that defines it may be found in (O'Riley & Associates 1990) by Adrian Nye.","Although it is possible to render and display two-dimensional and three-dimensional data in conventional computer graphical display systems, there exists limitations that restrict the performance and image quality exhibited by such systems. High quality images, particularly three-dimensional images, are typically defined by a large amount of graphics data and the speed at which conventional graphics pipelines can process the graphics data defining an object is limited. The above-referenced patent application, entitled \u201cSYSTEM AND METHOD FOR EFFICIENTLY RENDERING GRAPHICAL DATA\u201d describes a computer graphical display system and method for efficiently utilizing a plurality of graphics pipelines to render graphics data for a display device. However, a user of existing computer graphical display systems does not have control over the management and use of the graphics pipelines used in the system.","In accordance with an embodiment of the present invention, a method for configuring a plurality of graphics pipelines in a computer graphical display system is disclosed. The method comprises displaying a graphical user interface to enable a user to graphically specify at least one parameter for a plurality of pipe rectangles of the computer graphical display system, each of the plurality of pipe rectangles being associated with at least one of the plurality of graphics pipelines, receiving the at least one parameter, and updating a compositor of the computer graphical display system in real-time based at least in part on the at least one parameter.","In accordance with another embodiment of the present invention, a system for configuring a plurality of graphics pipelines in a computer graphical display system is disclosed. The system comprises a graphical user interface. The graphical user interface comprises a plurality of jitter sample icons, each of the plurality of jitter sample icons corresponding to the number of jitter values in a plurality of jitter values used for a plurality of pipe rectangles of the computer graphical display system. The graphical user interface also comprises a plurality of orientation icons, each of the plurality of orientation icons corresponding to a different orientation of the plurality of pipe rectangles based at least in part on the number of graphics pipelines in the computer graphical display system.","In accordance with yet another embodiment of the present invention, a method for configuring a plurality of graphics pipelines in a computer graphical display system is disclosed. The method comprises displaying a graphical user interface to enable a user to graphically specify at least one parameter for a plurality of pipe rectangles of the computer graphical display system, each of the plurality of pipe rectangles being associated with at least one of the plurality of graphics pipelines; receiving the at least one parameter, generating coordinate values for each of the plurality of pipe rectangles based at least in part on the at least one parameter and at least in part on a screen size of a display device of the computer graphical display system and updating a compositor of the computer graphical display system in real-time based at least in part on the generated coordinate values.","The preferred embodiment of the present invention and its advantages are best understood by referring to  of the drawings, like numerals being used for like and corresponding parts of the various drawings.","In general, the present invention pertains to a graphical software tool that enables a user to graphically define different parameters, such as orientation, distribution, jitter values and\/or the like, for one or more pipelines in a multi-pipeline graphical display system to obtain in real-time a desired rendering of graphics image data on a display device of the graphical display system.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","104","106","112","114","100","116","124","104","112","126","104","126","126","128","104","112","116","124","126","130","106","112","106","112"]},"Client  comprises a graphics application  and may be implemented in hardware, software or any combination thereof. Pipelines - may be implemented in hardware, software or any combination thereof. In the preferred embodiment, client  and each of the pipelines - are respectively implemented via computer systems. Such computer systems may be stand alone computer systems, for example computer systems commonly referred to as \u201ccomputer workstations.\u201d However, the invention is not so limited and other types of computer systems, now known or later developed, may be used. Thus, for example, system  as shown in  may be implemented via six computer workstations (i. e. , one computer workstation for client  and one computer workstation for each of the pipelines -). However, it is possible to implement client  and pipelines - using other configurations. As an example, client  and master pipeline  may be implemented via a single computer workstation. Any computer workstation used to implement client  and\/or pipelines - may be utilized to perform other desired functionality when the workstation is not being used to render graphics data.","In operation, master pipeline  receives graphics data from application . Master pipeline  preferably renders two-dimensional (2D) graphics data to frame buffer  and routes three-dimensional (3D) graphics data to slave pipelines -, which render the 3D graphics data to frame buffers -, respectively. Client  and pipelines - are described in more detail hereinafter.","Each frame buffer - outputs a stream of graphics data to compositor . Compositor  is configured to combine or composite each of the data streams from frame buffers - into a single data stream that is provided to display device , which may be a Cathode Ray Tube (CRT), a Liquid Crystal Display (LCD), a Thin Film Transistor (TFT), a Light Emitting Diode (LED), organic polymers and\/or the like now known or later developed. Although in , display device  is shown as a single display device, the invention is not so limited and in alternative embodiments, display device  may comprise more than one display device acting as a single logical display device. In such an embodiment, each display device may be coupled to a separate graphical acceleration unit, each graphical acceleration unit being coupled to the same client.","Referring to , the graphics data provided to display device  by compositor  defines the image to be displayed by display device  and is based on the graphics data received from frame buffers -. Compositor  is described in more detail hereinafter.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["102","102","132","134","134","136","136","102","132","138","132","138","102","140","102","142","140","102","102","144","140","102","146","146","146","140","148","140","102","114","1"]},"In the preferred embodiment, X Protocol is generally utilized to render 2D graphics data, and OpenGL Protocol (OGL) is generally utilized to render 3D graphics data, although other types of protocols may be utilized in other embodiments. By way of background, OpenGL Protocol is a standard application programmer's interface (API) to hardware that accelerates 3D graphics operations. Although OpenGL Protocol is designed to be window system independent, it is often used with window systems, such as the X Window System, for example. In order that OpenGL Protocol may be used in an X Window System environment, an extension of the X Window System has been developed called GLX. For more complete information on the GLX extension to the X Window System and on how OpenGL Protocol can be integrated with the X Window System, see for example Mark J. Kilgard, OpenGL Programming for the X Window System (Addison-Wesley Developers Press 1996). Memory  comprises a client side GLX layer . When application  issues a graphical command, client side GLX layer  of client  transmits the command over LAN  to master pipeline .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["104","104","150","152","150","104","152","104","154","152","104","156","152","104","158","158","158","152","160","152","104","114"]},"Master pipeline  preferably also comprises memory . Memory  comprises an X server  and a slave controller . X server  may be implemented in software, hardware, or a combination thereof. In the embodiment shown in , X server  is implemented in software.","X server  comprises an X server dispatch layer , a device independent layer (DIX) , a GLX layer  and a device dependent layer (DDX) . In the preferred embodiment, X server  renders 2D X window commands, such as commands to create or move an X window. X server dispatch layer  is designed to route received commands to DIX layer  or to GLX layer . An X window command that does not include 3D data is interfaced with DIX, whereas an X window command that includes 3D data (e. g. , an X command having embedded OpenGL Protocol, such as a command to create or change the state of a 3D image within an X window) is routed to GLX layer . A command interfaced with DIX layer  is executed by the DIX layer  and potentially by DDX layer , which drives graphics data associated with the executed command through a pipeline hardware  to frame buffer . A command interfaced with GLX layer  is transmitted by GLX layer  across LAN  to slave pipelines -. One or more of the slave pipelines - executes the command and drives graphics data associated with the command to one or more frame buffers -.","In the preferred embodiment, each of the slave pipelines - is configured according to FIG. . Each of the slave pipelines - comprises one or more processing elements  coupled to a local interface , which may include one or more buses. Processing element  preferably communicates with and drives other elements within slave pipeline - via local interface  which may include one or more buses. Each slave pipeline - may also comprise at least one input device , for example, a keyboard, a mouse, and\/or the like, now known or later developed, coupled to local interface  to input data. Each slave pipeline - may also comprise at least one output device , for example, a display device, a printer, and\/or the like, now known or later developed, coupled to local interface  to output data. Each slave pipeline - may also comprise a storage medium  to store data. Storage medium  may be any storage medium now known or later developed. Storage medium  may be coupled to local interface  to transfer data to and from the storage medium. A LAN interface  coupled to local interface  may be provided to allow slave pipelines - to exchange data with LAN .","Each slave pipeline - preferably also comprises memory . Memory  comprises an X server  and an OGL Daemon . X server  and OGL daemon  may be implemented in software, hardware, or a combination thereof. In the embodiment shown in , X server  and OGL daemon  are implemented in software.","X server  comprises an X server dispatch layer , a device independent layer (DIX) , a GLX layer , and a device dependent layer (DDX) . OGL daemon  preferably comprises an OGL dispatch layer , an OGL Device Independent (DI) layer  and an OGL Device Dependent (DD) layer .","In the preferred embodiment, each command received by slave pipelines - includes 3D graphics data, since X server  of master pipeline  executes each X window command that does not include 3D graphics data. X server dispatch layer  interfaces the 2D data of any received commands with DIX layer  and interfaces the 3D data of any received commands with GLX layer . DIX and DDX layers  and  are configured to process or accelerate the 2D data and to drive the 2D data through pipeline hardware  to one of the frame buffers - (FIG. ).","GLX layer  interfaces the 3D data with OGL dispatch layer  of the OGL daemon . OGL dispatch layer  interfaces this data with OGL DI layer . OGL DI layer  and DD layer  are configured to process the 3D data and to accelerate or drive the 3D data through pipeline hardware  to one of the frame buffers - (FIG. ). Thus, the 2D graphics data of a received command is processed or accelerated by X server , and the 3D graphics data of the received command is processed or accelerated by OGL daemon . For a more detailed description of the foregoing process of accelerating 2D data via an X server  and of accelerating 3D data via an OGL daemon , refer to commonly-assigned U.S. Pat. No. 6,249,294, entitled \u201c3D GRAPHICS IN A SINGLE LOGICAL SCREEN DISPLAY USING MULTIPLE COMPUTER SYSTEMS\u201d.","Referring again to , slave pipelines -, based on inputs from master pipeline , are configured to render 3D images based on the graphics data from master pipeline  according to one of three modes of operation: accelerate mode, jitter mode and mixed mode. Each slave pipeline - is responsible for rendering a specific portion of the image to be displayed on display device . Thus, the screen associated with display device  is divided into different pipe portions, the image for each pipe portion being rendered by at least one of slave pipelines -. The pipe portions are preferably rectangular in shape and as such the term pipe rectangles will be used herein to refer to pipe portions. However, the invention is not so limited and the pipe portions may be of any shape.","In the accelerate mode, each slave pipeline - renders a different portion of a 3D image such that the overall process of rendering the 3D image is faster. In the jitter mode, each slave pipeline - renders the same 3D image but slightly offsets each rendered 3D image with a different offset value. Compositor  averages the pixel data of each pixel for the 3D images rendered by pipelines - in order to produce a single 3D image of increased image quality. In the mixed mode, one or more of the slave pipelines render the same portion(s) of the 3D image but slightly offset the common portion(s) with a different offset value. In the mixed mode, the overall process of rendering the 3D image is faster than in the jitter mode because the work of rendering is divided among multiple pipelines. The image quality of at least a portion of the rendered 3D image is better than the image quality in the accelerate mode because jittering is used.","In existing graphical display systems, a user of the graphical display system has limited control over the orientation, distribution and jitter parameters of the different pipelines used. Moreover, existing graphical display systems do not allow a user to easily switch between different configurations, such as modes of operation, distribution of pipe rectangles, jitter values, and\/or the like. In order to change from a particular configuration to a different configuration, the user has to stop operating in the existing configuration, shut down the system and then operate in the new configuration. Thus, for example, if the user wants to switch from an accelerate mode to a mixed mode in the middle of a presentation, the user has to stop its presentation in the accelerate mode, shut down the system, reset the system to operate in the mixed mode and then continue the presentation in the mixed mode.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 5A and 5B","b":["230","230","232","232","236","236","236","236","106","112","106","112","236","236"],"i":["a","n ","a","n ","d ","n "]},"The number of pipe rectangles into which a screen may be divided is given by:\n\nNumber of pipe rectangles=Number of slave pipelines\/Number of jitter samples\n","Table I shows the values of the number of jitter samples and the number of pipe rectangles in a system with 16 slave pipelines.",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE I"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"6","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Number of Jitter Samples","\u20021","2","4","8","16"]},{"entry":[{},"Number of Pipe Rectangles","16","8","4","2","\u20021"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"6","align":"center","rowsep":"1"}}]}]}}}}},"Graphical user interface  also preferably comprises a plurality of orientation icons -. Orientation icons -allow the user to select the orientation of different pipe rectangles. The displayed orientation icons -may be updated in real-time by graphical software tool  based at least in part on the number of jitter samples selected by the user and the number of slave pipelines -. For example, if there are four slave pipelines and the number of jitter samples selected by the user is two, graphical user interface  may display a reduced set of available pipeline orientations as shown in FIG. B. The user may select a desired pipe orientation, for example by clicking on an orientation icon -. When the user selects a pipe orientation, graphical software tool  notifies master pipeline  so that master pipeline  may update the pipe orientation in graphical display system . Thus, the user may update the pipe orientation in real-time and is able to determine which pipe orientation is best suited to the graphics data currently being displayed.","Therefore, using graphical user interface , the user may define different parameters by simply pointing and clicking on different graphical representations, such as icons, buttons, and\/or the like, associated with graphical user interface  and entering a minimal amount of information. Graphical software tool  automatically performs various tasks required to facilitate rendering of graphics data on display device  based at least in part on the input provided by the user. Preferably, graphical user interface  also allows the user to adjust the size and position of pipe rectangles for the different pipelines - by simply clicking and dragging pipe rectangle boundary indicators of the pipe rectangles themselves. Graphical software tool  enables the user to easily change from one configuration to another.","In operation, graphical software tool  queries master pipeline  to determine the number of slave pipelines in system  and displays the determined number of pipelines on graphical user interface . Graphical user interface  preferably comprises a command line prompt  for the user to enter a command. If desired, utilizing command line prompt  the user may manually enter an orientation or distribution for the pipelines.","As shown in , graphical user interface  also preferably comprises a Show Pipes option . The user may select show pipes option  to turn pipe rectangle boundary indicators - for a pipe rectangle  ON as shown in FIG. . By selecting one or more of the pipe rectangle boundary indicator(s) - and dragging the selected pipe rectangle boundary indicator(s), the user may resize a pipe rectangle, if desired. The user may specify pipe distribution by inputting a command in command line prompt . For example, the user may specify an X distribution of 30% and 70% and a Y distribution of 20% and 80% by inputting the following command in command line prompt :\n\n","If desired, the pipe distribution may be specified in a control file and read from the control file. Pipe distribution determines the dimensions of each pipe rectangle and is preferably specified in terms of percentages of display device  along the x-axis and in terms of percentages of display device  along the y-axis.",{"@attributes":{"id":"p-0051","num":"0051"},"figref":"FIG. 7","b":["250","100","1","252","230","172","230","232","106","112","230","232","230","236","236"],"i":["d ","n "]},"In step , input is received, preferably from the user and preferably by graphical software tool . Such user input may include, for example, the number of jitter samples, pipe rectangle orientation, pipe rectangle distribution, and\/or the like. In step , values for pipe rectangles are generated, preferably by graphical software tool . Preferably, graphical software tool  calculates coordinate values corresponding to display device  for each pipe rectangle based on one or more of the following criteria: screen size, boundary conditions of pipe rectangles, hardware limitations, and\/or the like. For example, for a graphical display system with four slave pipelines, if the user input specifies an X distribution of 30% and 70% and a Y distribution of 20% and 80%, then the coordinate values for the pipe rectangles would be different depending on the size of display device . Thus, for a 1600\u00d71200 pixel display, the x-coordinate values would be 0, 480 (30% of 1600) and 1600 and the y-coordinate values would be 0, 320 (20% of 1200) and 1200.","Pipe rectangle boundary conditions preferably specify conditions that have to be specified at the boundary of two or more pipe rectangles. For example, the boundary conditions may specify that the X distribution needs to be on coordinate boundaries divisible by four. For a display with 1500 pixels along the X axis, an X distribution of 31% and 69% would result in a boundary value of 465 (31% of 1500). In such a case, software tool  would round up the unacceptable boundary value to the nearest acceptable boundary value. In step , graphical software tool  may also perform data integrity checks. For example, graphical software tool  may check to see whether the user has allocated 100% of the screen.","In step , the state of the pipelines is updated to correspond to the generated pipe rectangle values. The pipelines may already be operating with preset default values, for example vertical orientation with even distribution. In step , software tool  converts the generated pipe rectangle values to a format suitable for GLX layer  and transmits the generated pipe rectangle values to GLX layer . GLX layer  updates the state of each of the pipelines with the generated pipe rectangle values indicating the orientation and distribution for the respective pipelines.","In step , the pipe rectangles are programmed into compositor , preferably on the fly. GLX layer  converts the pipe rectangle data into a format suitable for X server . GLX layer  then transmits the pipe rectangle data to X server . X server  preferably programs compositor  so that compositor  is aware of the pipe rectangles associated with the different pipelines. A system and method for programming the pipe rectangles into compositor  is described in more detail herein especially with reference to FIG. .","In step , pipe rectangles with the respective pipe rectangle boundary indicators may be displayed on display device . Preferably, pipe rectangle boundary indicators are displayed on display device  when Show Pipes option  is selected. The pipe rectangles are displayed on display device  preferably by X server . A display-enabling device for displaying the pipe rectangles on display device  is described in more detail herein especially with reference to FIG. . As shown in , each pipe rectangle  comprises four pipe rectangle boundary indicators\u2014pipe rectangle left X , pipe rectangle right X , pipe rectangle top Y  and pipe rectangle bottom Y . In step , a determination of whether the user selected and moved one or more pipe rectangle boundary indicators - to change the pipe rectangle distribution to resize pipe rectangle  is made. If the user changed the pipe rectangle distribution, then the process starting at step  is repeated.","If the user does not change the pipe rectangle distribution, then in step , input regarding jitter parameters for one or more pipelines is received, preferably from the user and preferably by graphical software tool . The user may select jitter parameters, for example by manually entering them in command line prompt  (FIGS. A and B). However, in a preferred embodiment, the user selects jitter parameters by using graphical user interface  as described in more detail herein with reference to FIG. . Although, in the embodiment described herein the jitter parameters and pipe orientation and pipe distribution parameters are received in different steps, the invention is not so limited and if desired, the jitter parameters, the pipe orientation parameters and the pipe distribution parameters may be received in the same step.","In step , the state of the pipelines is updated to correspond to the jitter parameters. The pipelines may already be operating with preset default values. In step , software tool  converts the jitter parameters to a format suitable for GLX layer  and transmits the jitter parameters to GLX layer . GLX layer  updates the state of each of the pipelines with the jitter parameters.",{"@attributes":{"id":"p-0059","num":"0059"},"figref":["FIG. 8","FIG. 5A. A"],"b":["230","232","236","236"],"i":["a","n "]},"Graphical user interface  as shown in  further comprises a jitter value window , a plurality of jitter point buttons  and a scale . Jitter value window  preferably comprises a grid . Grid  preferably comprises an X-axis  and a Y-axis  with the two axes meeting at the origin of grid , which origin is substantially at the center of jitter value window .","Each jitter point button  corresponds to a jitter value. The number of jitter point buttons  is preferably equal to the number of jitter samples selected by the user utilizing sample icons -in  user may define a jitter value by selecting a corresponding jitter point button  and then selecting a point in jitter value window . If a jitter value is already associated with a point, the user may define a different jitter value for the point by clicking on a new area of jitter value window . The new location is then associated with the selected jitter point button . Once the user has defined jitter values, the user may scale the jitter values to bring them closer together or move them apart, for example by utilizing scale . If desired, other anti-aliasing techniques may be combined with the jitter samples and the result illustrated in jitter value window .","An Apply button  may be selected to transmit the jitter parameters to master pipeline  to update display device  in real time. The user may modify and update the jitter parameters until the image displayed on display device  attains a desired quality. A Save button  may be selected to store the defined jitter parameters in a file. The jitter parameters may be read from the saved file at a later time, if desired.","Compositor  preferably comprises a controller card (not shown) coupled to a plurality of input cards (not shown) via a communication bus (not shown).  is a flowchart  of a method for programming pipe rectangles  into compositor  in accordance with an embodiment of the present invention. In step , a counter, i, is initialized preferably to minus one (\u22121). In step , a determination is made as to whether any more slave pipelines - should be programmed. If no more slave pipelines are to be programmed, then the process starting at step  of  is executed. Otherwise in step , the counter is incremented. In step , the pipe rectangle data for pipe rectangle i is packetized, preferably by inserting the data into a predetermined data structure. In step , the packetized data is transmitted to the slave pipeline corresponding to pipe rectangle i. In step , the controller card addresses an input card corresponding to the slave pipeline. In step , the controller card delivers the packet using the communication bus to the corresponding input card. In step , pipe rectangle information is stored in the corresponding input card. The process starting at step  may then be repeated. The correspondence between a pipe rectangle and a slave pipeline is re-programmable. For example, pipe rectangle number 1 may initially be programmed to correspond to slave pipeline . However, if slave pipeline  becomes unavailable, then pipe rectangle number 1 may be reprogrammed, preferably \u201con the fly\u201d, to correspond to a different slave pipeline, for example slave pipeline .",{"@attributes":{"id":"p-0064","num":"0064"},"figref":"FIG. 10","b":["300","242","128","300","126","1","300","126","300","302","304","306","308","126","100","128","126","310","312","243","314","244","316","245","318","246","320"]},"Outputs of x-position counter  and Pipe Rectangle Left X buffer  connect to an input of comparator ; outputs of x-position counter  and Pipe Rectangle Right X buffer  connect to an input of comparator ; outputs of y-position counter  and Pipe Rectangle Top Y buffer  connect to an input of comparator ; and outputs of y-position counter  and Pipe Rectangle Bottom Y buffer  connect to an input of comparator .","Display-enabling device  also comprises an OR gate  and a multiplexor . The output of comparators , ,  and  connect to inputs of OR gate . The output of OR gate  connects to a control input of multiplexor . Multiplexor  is preferably a 2-to-1 multiplexor. Preferably, a first data input, for example a 0 input, of multiplexor  receives pixel data for the current pixel being rendered and a second data input, for example a 1 input, of multiplexor  receives pixel data for a pipe rectangle boundary indicator. Thus, when the output of OR gate  is zero, then output pixel data for the current pixel is equal to the input pixel data for the current pixel and when the output of OR gate  is one, then output pixel data for the current pixel is equal to the pipe rectangle boundary indicator pixel data.","The output of at least one of the comparators , ,  and  and hence OR gate  is equal to 1 when at least one of the following conditions is true: i) the x-coordinate value of the current pixel matches the x-coordinate value for the left indicator of any of the pipe rectangles; ii) the x-coordinate value of the current pixel matches the x-coordinate value for the right indicator of any of the pipe rectangles; iii) the y-coordinate value of the current pixel matches the y-coordinate value for the top indicator of any of the pipe rectangles; or iv) the y-coordinate value of the current pixel matches the y-coordinate value for the bottom indicator of any of the pipe rectangles. In such a case, the output pixel data value is equal to the pipe rectangle boundary indicator pixel data value. If none of the above conditions is true, then the output pixel data value is equal to the input pixel data value. Thus, when the current pixel being rendered is on the boundary of a pipe rectangle, the pipe rectangle boundary indicator pixel data is displayed.","An advantage of the preferred embodiment of the present invention is that it enables user configurable load-balancing of graphics data between multiple pipelines in real-time. Thus, the user may change the orientation, distribution and jitter associated with different pipelines in real-time according to the image being displayed on the display device. The user does not have to start over when the user desires to change the configuration of the different pipelines. Moreover, the preferred embodiment of the present invention also interactively displays the pipe rectangles associated with different slave pipelines on the display device thereby enabling the user to interactively view the configuration of the different pipelines.","Although the preferred embodiment of the present invention has been described above with reference to a single display device, the invention is not so limited and if desired, the teachings of the present invention may be utilized with reference to multiple display devices. In such an embodiment, the multiple display devices may display different images unrelated to each other or the multiple display devices may act as a logical display device displaying different portions of the same image."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention, the objects and advantages thereof, reference is now made to the following descriptions taken in connection with the accompanying drawings in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
