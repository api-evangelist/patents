---
title: Automatic verification and anomaly detection in a representational state transfer (REST) application programming interface
abstract: Methods for automatically detecting an anomaly in an application programming interface (API) having a plurality of invariants is provided. Such an API may conform to a Representational State Transfer (REST) model or style of software architecture. Such methods enable users to build simple test scripts that can be fed into specialized software applications configured to automatically exercise and test the API using the test scripts. Further, such methods allow automatic testing of API functionality regardless of whether or not the expected output value(s) for a given input are specified.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745641&OS=08745641&RS=08745641
owner: Google Inc.
number: 08745641
owner_city: Mountain View
owner_country: US
publication_date: 20110714
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["1. Field","Embodiments relate generally to the field of application programming interface development and testing.","2. Background","The engineering work devoted to writing software that supports the development and testing of an application programming interface (API) generally involves numerous operations that require careful human consideration. Accordingly, such complex and time-consuming work often tends to be prone to error. In addition, software engineers involved in development of the API may find the work to be tedious or technically uninteresting, and therefore, may be more likely to make errors during implementation. Furthermore, the development of an elegant API to expose to end-users can require artisan skill and consideration, and is generally not a process that can be automated.","Embodiments relate to automatically detecting an anomaly in an application programming interface (API) having a plurality of invariants. For example, such an API may conform to a Representational State Transfer (REST) model or style of software architecture. In an embodiment, a data transfer request is generated based on a first mapping of a representational state transfer (i.e., REST) operation to a first uniform resource locator template and a request payload. The request payload is associated with one or more commands that are written in a domain specific language. The domain specific language enables the REST operation to be expressed using the one or more commands independently of the request payload's syntax or escape characters. The generated data transfer request is then submitted to a server that implements the application programming interface (API) for processing. Once a response is received from the server based on the submitted data transfer request, the response is automatically tested based on the one or more first commands in order to verify that it satisfies one or more invariants of the REST API.","Embodiments may be implemented using hardware, firmware, software, or a combination thereof and may be implemented in one or more computer systems or other processing systems.","Further embodiments, features, and advantages of the present invention, as well as the structure and operation of the various embodiments, are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the information contained herein.","The accompanying drawings, which are incorporated herein and form part of the specification, illustrate the embodiments of the present invention and, together with the description, further serve to explain the principles of embodiments and to enable a person skilled in the relevant art(s) to make and use such embodiments.","Introduction","Embodiments relate to automatically detecting an anomaly in an application programming interface (API) having a plurality of invariants. For example, such an API may conform to a Representational State Transfer (REST) model or style of software architecture. As will be described in further detail below, REST-style software architectures may consist of multiple clients and servers that communicate over a network, for example, the Internet (or \u201cWorld Wide Web\u201d). For example, a client in a system conforming to REST rules of operation may initiate one or more data transfer requests to a server for processing. Once the server processes the requests, it may return an appropriate response for each request.","A data transfer request and the corresponding response generally involve the transfer of representations of resources. For example, such a resource may include any coherent and meaningful concept that may be addressed in the system. Further, a representation of such a resource may be in the form of a document intended to capture the current or desired state of the particular resource. A person skilled in the relevant art given this description would recognize additional characteristics and principles of REST and REST-compliant applications and interfaces.","As will be described in further detail below, embodiments enable users, for example, software developers and\/or quality assurance (QA) engineers involved in the development and testing of an API, to minimize the risk of errors introduced during the development of an API. An example of such an API includes, but is not limited to, a Web API (also commonly known as a \u201cWeb service\u201d) that complies with REST principles. The use of such a REST-compliant Web API or service typically involves the transfer of REST-style communications in the form of requests and responses between clients and servers over a network (e.g., the Internet), as noted above.","As will be described in the further detail below, embodiments can also enable users to build simple test scripts that can be fed into specialized software applications configured to automatically exercise and test the API using the test scripts. Further, embodiments allow automatic testing of API functionality regardless of whether or not the expected output value(s) for a given input are specified. For example, API tests may be derived automatically from a testing script even when such tests are not explicitly defined in the testing script. Accordingly, embodiments enable users to test the functionality of the API as it is intended to perform based on the expected behavior of the API as specified in one or more testing scripts. In this way, embodiments help to reduce the tedium of implementing tests while allowing more of an API's functionality to be tested than would be tested manually or by using conventional techniques. Ultimately, the quality of the API implementation is improved since a greater number of API tests can be conducted than would be conducted otherwise. For example, test scripts can be applied to many REST APIs to detect implementation errors and contribute to testing, such as, end-to-end or integration testing.","While the present invention is described herein with reference to illustrative embodiments for particular applications, it should be understood that embodiments are not limited thereto. Other embodiments are possible, and modifications can be made to the embodiments within the spirit and scope of the teachings herein and additional fields in which the embodiments would be of significant utility. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the relevant art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","It would also be apparent to one of skill in the relevant art that the embodiments, as described herein, can be implemented in many different embodiments of software, hardware, firmware, and\/or the entities illustrated in the figures. Any actual software code with the specialized control of hardware to implement embodiments is not limiting of the detailed description. Thus, the operational behavior of embodiments will be described with the understanding that modifications and variations of the embodiments are possible, given the level of detail presented herein.","In the detailed description herein, references to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","The terms \u201cREST\u201d and \u201cRESTful\u201d are used herein interchangeably to describe any API, software operation, method, interface, application, or other construct that conforms to rules or constraints associated with a representational state transfer (REST) model or style of software architecture, as described above. A person skilled in the relevant art given this description would appreciate the characteristics of such rules or constraints as applied to REST\/RESTful operations, applications, and interfaces.","System",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","110","115","120","122","124","130","140","150","135"]},"Client  communicates with one or more servers , for example, across network . Although only servers , , and  are shown, more servers may be used as necessary. Network  can be any network or combination of networks that can carry data communication. Such network can include, but is not limited to, a local area network, medium area network, and\/or wide area network such as the Internet. Client  can be a general-purpose computer with a processor, local memory, a display, and one or more input devices, for example and without limitation, a keyboard, mouse, or touchscreen. Alternatively, client  can be a specialized computing device such as, for example, a mobile handset. Server(s) , similarly, can be implemented using any general-purpose computer capable of serving data to client .","In an embodiment, client  executes a language interpreter . Language interpreter  may be implemented on any type of computing device. Such a computing device can include, but is not limited to, a personal computer, mobile device such as a mobile phone or tablet computer, workstation, embedded system, set-top box, or any other computing device. Further, such a computing device can include, but is not limited to, a device having a processor and memory for executing and storing instructions. Software may include one or more applications and an operating system. Hardware can include, but is not limited to, a processor, memory and graphical user interface display. The computing device may also have multiple processors and multiple shared or separate memory components.","As illustrated in , language interpreter  transmits one or more data requests  to server(s)  over network . In an embodiment, language interpreter  sends data requests  in response to user input, as will be described in further detail below. The user input may be received at client  via an input device (e.g., a keyboard, mouse, or touchscreen, as noted above) coupled to client . In an embodiment, data requests  are Hypertext Transfer Protocol (HTTP) requests or request messages. For example, each HTTP request message sent by language interpreter  may include one or more standard HTTP methods, for example and without limitation, the \u201cGET,\u201d \u201cPOST,\u201d \u201cPUT,\u201d and \u201cDELETE\u201d methods. The function and operation of HTTP and HTTP methods would be apparent to a person skilled in the relevant art given this description.","In an embodiment, server  invokes API service  to perform one or more operations specified by data requests . Results of such operation(s) performed by API service  are sent as response messages (i.e., responses ) to language interpreter  over network . API service  can be any API used to access services and\/or resources over network . For example, API service  may be implemented as a web service or web API. In an embodiment, API service  implements a REST API as described above. Consequently, such a REST API can have a plurality of constraints, invariants or predicate conditions that hold true before and after the execution of the one or more operations specified by data requests . In an example, as will be described in further detail below with respect to , language interpreter  may be used to verify that responses  satisfy the known invariants or predicate conditions of the REST API.","For example, some of the invariants associated with such a REST API may be used to define the type and structure of data requests  (e.g., in the form of HTTP request messages). Further, such invariants may also be used to define the proper structure of responses  from API service . For example, a proper structure of each response in responses  from API service  may be based on the type of data request that is transmitted by language interpreter  to API service . It would be apparent to a person skilled in the relevant art given this description that the content bodies of data requests  (or \u201cdata request bodies\u201d) and responses  (or \u201cresponse bodies\u201d) may be formatted using any number of well-known programming, scripting, and\/or markup languages including, for example and without limitation, JavaScript Object Notation (JSON), Extensible Markup Language (XML), or Hypertext Markup Language (HTML).",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 1"],"b":["200","115","200","100","115","210","220","200","230","240","250","240","115","240","242","244","246","210","220","230","240","250","110","100"]},"In an embodiment, request generator  generates one or more data transfer requests (e.g., data requests  of , discussed above) based on REST rules , URL mapping , and testing script . For example, REST rules , URL mapping , and testing script  may be stored as different digital files in memory  and accessible to request generator  and response manager . In an embodiment, the data transfer request generated by request generator  is an HTTP request or request message, as described above. It would be apparent to a person skilled in the relevant art given this description that embodiments are not intended to be limited to HTTP requests and that other types of data transfer requests may also be generated by request generator .","In an embodiment, REST rules  are standard REST rules that define a mapping between HTTP methods (e.g., GET, POST, PUT, DELETE) and REST operations (e.g., list, insert, delete). In an embodiment, URL mapping  includes a mapping of one or more REST operations to uniform resource locator (URL) template(s). An example of such a mapping from REST operation to URL template is shown below:\n\n\u201ctags.list\u201d:\u201c\/series\/{seriesId}\/submissions\/{submissionId}\/tags\u201d,\u2003\u2003(1)\n\n\u201ctags.insert\u201d:\u201c\/series\/{seriesId}\/submissions\/{submissionId}\/tags\u201d,\u2003\u2003(2)\n\n\u201ctags. delete\u201d:\u201c\/series\/{seriesId}\/submissions\/{submissionId}\/tags\/{tagId}\u201d\u2003\u2003(3)\n","A person skilled in the relevant art given this description would appreciate that the above mapping shown in lines (1), (2), and (3) is shown herein for illustrative purposes only and that embodiments are not limited thereto. In the example mapping shown above, the text in curly braces (e.g., \u201c{seriesId}\u201d and \u201c{submissionId}\u201d) represents variables of the URL template that will be automatically substituted by request generator  based on the context of the data transfer request to be generated. Further, these variables are available to other types of requests for use in URL template patterns, request payloads, and\/or various commands associated with each request payload, as will be described in further detail below.","In an example, URL mapping  may be defined by a user such as a QA test engineer involved in the development and testing of the REST API. As noted above, URL mapping  may be stored as a digital file in memory . In a different embodiment, the content of URL mapping  (e.g., REST operation to URL mapping as shown in lines (1)-(3) above) may be defined in testing script . For example, testing script  may include content generated by the user, and may be stored as a digital file in memory .","In an embodiment, testing script  includes a set of statements or commands written in a domain specific language. In an embodiment, the data transfer request generated by request generator  includes a request payload associated with the set of commands in testing script . In accordance with such an embodiment, the domain specific language enables the REST operations to be expressed using these commands independently of the request payload's syntax or character escaping issues. It would be apparent to a person skilled in the relevant art given this description that such considerations are commonly taken into account for HTTP request messages to be transmitted over a network as described above. Accordingly, one advantage of such a domain specific language is that it allows the user to express REST operations concisely and without consideration of the payload syntax or the escaping issues.","In an example, testing script  may be one of multiple testing scripts stored in memory , and the user may specify testing script  in particular by using user interface . User interface  may be a command-line user interface and\/or graphical user interface communicatively coupled to language interpreter . In operation, user interface  may present information on a display to the user. The user may then specify the testing script to language interpreter  via user interface  using a user input device (e.g., mouse, keyboard, and\/or touchscreen display) as described above. In this way, the user can invoke language interpreter  to generate data transfer requests and to automatically test the corresponding responses (e.g., responses  of , discussed above) received from an API service (e.g., API service  of ) that implements the REST API to be tested.","In an embodiment, request generator  submits the generated data transfer request to an API service (e.g., API service  of , as described above) that implements the REST API that is to be tested. For example, the API service may be implemented on one or more servers (e.g., server(s)  of ), and the data transfer request may be transmitted by request generator  to the server(s) over a network (e.g., from client  to server(s)  over network  of ). The API service processes the data transfer request from request generator , and transmits an appropriate response or response payload over the network. An example request and response between a client implementing, for example, language interpreter  and a server implementing an API service for a REST API (e.g., API service  of ) will be described in further detail below with respect to .","In an embodiment, response manager  is configured to receive responses from the API service (e.g., API service ). For example, response manager  may utilize network interface  to receive one or more responses transmitted from the API service corresponding to the respective data transfer requests. In an embodiment, response manager  parses each response and automatically executes the commands defined in testing script . By executing the commands in testing script , response manager  automatically tests the received response to verify that the response satisfies one or more invariants of the REST API.","Example Commands for Domain Specific Language","Examples of various commands associated with the domain specific language will now be described. For example, one or more of these commands may be eluded in testing script  and interpreted by language interpreter  for generating data transfer requests to be processed by an API service (e.g., API service  of ) and testing the corresponding responses from the API service, as described above. Further, each command may be defined as a command template with one or more variables that are used as parameters in the template expression, as will be shown in the descriptions of the exemplary commands below.","In an embodiment, language interpreter  may build and maintain one or more dictionaries that define names of variables that are used as the parameters for the various commands. It would be apparent to a person skilled in the relevant art given this description that the following list of example commands is provided for explanatory purposes, the list is not intended to be exhaustive, and that embodiments are not intended to be limited to just these commands. Also, it would be apparent to a person skilled in the relevant art given this description that any expression(s) that appear in the commands as described below may be written using any one of various well known high-level programming languages and notation formats as necessary.","Operation Command","In an embodiment, the domain specific language includes an operation command for specifying a type of the first representational state transfer operation. For example, such a command may be included in testing script  and interpreted by language interpreter , as described above. An exemplary syntax for such an operation command is shown in the expression below (where the \u2018!\u2019 character denotes the start of each new command):\n\n! OPERATION operation_name FIELDS FROM variable_name\u2003\u2003(4)\n","In the example command provided in line (4) above, the \u201coperation_name\u201d parameter may correspond to one or more keywords in a Uniform Resource Identifier (URI) mapping. Further, \u201cvariable_name\u201d may correspond to the source of the URI mapping information.","In an embodiment, such a URI mapping of representational state transfer operation and type can be used by language interpreter  and its components (request generator  and response manager ) to generate data transfer requests and test the corresponding responses, as shown in  and described above. For example, the source of the mapping may be a dictionary corresponding to a particular collection of resources. As noted above, such a dictionary or resource collection may comprise names of variables defined by the domain specific language. Further, such a dictionary may be maintained by language interpreter  and implemented using, for example, client , as shown in  and described above.","Authentication Command","In an embodiment, the domain specific language includes an authentication command for specifying authentication information. For example, such an authentication command may be included in testing script  and interpreted by language interpreter , as described above. An exemplary syntax for such an operation command is shown below:\n\n! AUTH AS filename\u2003\u2003(5)\n","In the example shown above in line (5), the \u201cAUTH AS\u201d command may be used to specify the filename (as indicated by \u201cfilename\u201d) from which client login information (e.g., in the form of a client login token) may be read.","Verification Command","In an embodiment, the commands defined in the domain specific language and interpreted by language interpreter  include a verification command for verifying the first response matches a predetermined template response, as shown by the following exemplary syntax below:\n\n! RETURN expression AS variable_name\u2003\u2003(6)\n","Using the example above, values from response bodies can be extracted and stored as a global variable. These vales can then be used later in substitutions. In the example shown in line (6) above, \u201cexpression\u201d may comprise an expression written using any one of various well known high-level programming languages and notation formats. For example, such an expression may include any arbitrary Python expression, and the format may include dot notation (e.g., \u201cdata.id\u201d may be an acceptable format, but not: \u201cdata.items[3]\u201d). However, a person skilled in the relevant art given this description would appreciate that any supported language and notation format may be used as necessary, and that embodiments are not limited to Python or dot notation format.","Merge Command","In an embodiment, the commands defined in the domain specific language and interpreted by language interpreter  include a merge command for building a dictionary using different variables in the response from the server implementing the API service being tested. An exemplary syntax for such a command is shown below: ! RETURN expression MERGE variable name (7)","Using the \u201cMERGE\u201d command, as shows in the example in line (7) above, any variable in a dictionary referred to by the \u201cexpression\u201d parameter will be updated in the dictionary corresponding to by \u201cvariable_name.\u201d","Replace Command","In an embodiment, the commands defined in the domain specific language and interpreted by language interpreter  include commands for variable replacement or substitution. An exemplary syntax for such an operation command is shown below:\n\n! REPLACE some_variable WITH source_variable\u2003\u2003(8)\n\n! URLPARAM q some_search_query author:@some_variable@\u2003\u2003(9)\n","In the example expression shown in line (8) above, the \u201cREPLACE\u201d command is being used to declare that the variable specified by \u201csome_variable\u201d is to be substituted with the variable specified by \u201csource_variable.\u201d In the example expression shown in line (9), the \u201cURLPARAM\u201d command may be used to automatically execute a search query based on the response received from the server (or API service). In addition, the \u2018q\u2019 following the URLPARAM command may be used to denote that the search query as specified by the \u201csome_search_query\u201d variable should be executed using the same URL that was used to send the data transfer request.","In an embodiment, the REPLACE command may also be used to substitute values with output from user commands directly from a command shell interface, as shown by the exemplary syntax in the following expressions:\n\n! REPLACE token WITH $(some shell command)\u2003\u2003(10)\n\n! REPLACE token WITH variable_name\u2003\u2003(11)\n","Verify Response Command","In an embodiment, the commands defined in the domain specific language and interpreted by language interpreter  include a command to verify the content of information received from the server implementing the API service in response to a particular data transfer request. The verify response command can be used to verify the response from the server and is equivalent to a predetermined template response. Command templates thus may be used in reverse order. For example, rather than specifying a request payload (e.g., within testing script  of , described above), the user may define an expected or template response body. In an embodiment, language interpreter  may be configured to display an error message if the response to the operation is not equal to a provided template response.","Assert Command","In an embodiment, the commands defined in the domain specific language and interpreted by language interpreter  include an assert command, in which various expressions can be specified to assert desired behavior. As in the verification command described above, such expressions may be written in any one of various well known high-level programming languages including, but not limited to, Python. For example, such an assert command may function similarly to assert routines in conventional programming languages, as would be apparent to a person skilled in the relevant art given this description. Thus, for example, if the expression returns false, the testing script may display an error message, debugging information, and then may discontinue the testing process or routine as specified by the commands in, for example, testing script  of , described above.","Further, the expressions may be evaluated in a context associated with a few variables that facilitate the testing process. For example, such variables may include, but are not limited to, a \u201cresponse\u201d variable representing a deserialized response body, a \u201crequest\u201d variable representing the deserialized data transfer request body, and any additional template variables as represented by a \u201cvars\u201d parameter. As noted above, the response body and data transfer request body may be represented in any well-known format used for data exchange or interchange including, but not limited to, JSON. Lines (12)-(14) below show exemplary expression syntax using these variables.\n\n! ASSERT \u201citems\u201d not in response[\u201cdata\u201d]\u2003\u2003(12)\n\n! ASSERT len(response[\u201cdata\u201d][\u201citems\u201d])==2\u2003\u2003(13)\n\n! ASSERT response[\u201cdata\u201d][\u201citems\u201d][1][\u201cname\u201d]==vars[\u201cvars_name\u201d]\u2003\u2003(14)\n","For example, the expression as shown in line (12) above may be used to test that the \u201cdata\u201d portion of a response payload (e.g., see response payload  of , as will be described below) does not include an \u201citems\u201d field. The example expression in line (13) above tests that the length of the \u201cdata\u201d and \u201citems\u201d portions of the response payload is equivalent to a value of \u20182.\u2019 The example expression in line (14) tests whether the \u201cdata\u201d and any \u201citems\u201d portions of the response payload include the variable specified by \u201cvars_name.\u201d It would be apparent to a person skilled in the relevant art given this description that the above syntax and expressions in lines (12), (13), and (14) are provided for illustrative purposes and that embodiments are not limited thereto.","Example Test Case: Verifying Inserts",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 3","FIG. 3","FIGS. 1 and 2"],"b":["100","200"]},"In the example shown in , data transfer requests may support any number of different REST operations or methods, including, but not limited to, \u201c.list,\u201d \u201c.get,\u201d \u201c.update,\u201d and \u201c.insert\u201d methods. As will be shown in this example, expectations for one API method may be inferred based on the test results for another API method during verification testing of the RESTful API. For example, calling a \u201c.insert\u201d method for inserting an item \u2018X\u2019 into a collection \u2018C\u2019 implies that calling a \u201c.get(X)\u201d method for the same collection will produce a corresponding result or response including the same item that was inserted. Additionally, calling a \u201c.list(C)\u201d will reference or include the item X in the response. As would be apparent to a person skilled in the relevant art given this description, such expectations may be assumed to hold true even without requiring explicit ASSERT statements due to the constraints implied by the RESTful nature of the API being tested.","Therefore, it is assumed for this example that when a non-destructive mutation method is invoked (e.g., an insert or an update), the equivalent .get and .list methods may be automatically derived, and the response from the server can be tested to ensure that certain invariants are satisfied. As such, it is further assumed for this example that a REST API is being tested in which the following constraints, invariants, or predicate conditions should always hold true (and are therefore verifiable):\n\n","The above-listed invariants are provided for ease of explanation and illustrative purposes only, and embodiments are not intended to be limited thereto. A person skilled in the relevant art given this description would appreciate that this is just one example set of rules that can be inferred based on the expectations of the particular RESTful implementation used in this example. A person skilled in the relevant art given this description would also appreciate how such invariants may be identified and defined as necessary for different RESTful implementations.","As shown in the example of , request payload  represents a payload body of an exemplary insert request (e.g., sent as part of data requests ) from client  to server  over network . Similarly, response payload  represents the payload body of an exemplary response (e.g., sent as part of responses ) from server  to client  over network . For example, response payload  may be sent from server  (or from the API service implemented using server ) once the data transfer request from client  has been processed, as previously described. In this example, the insert request corresponding to request payload  should cause the API being tested to insert the data specified by the data structure labeled \u201cdata,\u201d as shown in request payload . It is noted that the results sent by server  in response to a data transfer request from client  may be tested because any non-identification field present in an insert or update should be reflected in the returned body of the response. However, it may be difficult to automatically verify that derived or otherwise non-mutable non-identification fields (e.g., counters) or fields with default values in the response body are correct.","Based on the data transfer request corresponding to request payload , various tests can be generated and applied to the response corresponding to response payload . Examples of such tests may include, but are not limited to: testing to verify that the \u201cdata\u201d sent as part of the insert request is included in the response; testing to verify that \u201cdata.id\u201d exists in the response; testing to verify that \u201cdata.id\u201d represents a valid dictionary, as described above; and testing to verify that \u201cdata.id\u201d has at least one data entry. Similarly, additional tests may be performed to verify that that various data fields are present in the response payload. According to an embodiment, the API testing system is type-aware and thus, can be used to verify that the data type of a particular data field in the response payload matches the data type of the same or corresponding field in the request payload. In an example, an anomaly in the API is detected when a data field is defined as an integer (e.g., 0) in a first request and the same data field is returned as a string (e.g., \u201c0\u201d) in response to a subsequent request.","As noted above, response payload  is sent from server  based on the insert request and request payload  from client . Thus, the following verification tests may be performed for the fields in response payload : verify presence \u201ckind\u201d field representing the kind of data; verify presence of \u201cdescription\u201d field; verify presence of \u201cname\u201d field; verify presence of \u201cvideoSubmissionsAllowed\u201d field; verify that the \u201cdescription\u201d data field of response payload  matches the corresponding field of request payload  (e.g., \u201cresponse.data.description==insertrequest.data.description\u201d).","Once these initial tests pass, additional tests may be performed by transmitting new data transfer requests. For example, the first \u201c.insert\u201d request may be followed with a \u201c.get\u201d request, which should return a response that includes the data inserted (e.g., a similar response with a payload as shown in response payload ). As such, the subsequent \u201c.get\u201d request can be used to verify the insert request was successful. Data fields included in a response payload to the subsequent \u201c.get\u201d request should match the data fields that are inserted using the \u201c.insert\u201d request. Using the example described above, an item of data in the insert request may be defined according to a specific type. Consequently, the get request for this data should match the data type of the inserted data item. An anomaly in the API may be detected if, for example, the inserted data is defined as an integer and the data that is returned in response to the subsequent get request is a string. In this way, aberrational properties of a response to a data transfer request can be detected based on inferences from previous requests or responses.","Further, the predefined constraints of the REST API being tested allow additional verification tests to be performed by automatically generating subsequent requests based on inferences drawn from previous requests and responses. Accordingly, such additional verification tests may be performed as necessary, for example, by sending additional insert, get, update, or list requests from client  to server , and then testing the responses from server  in response to such requests. Examples of such additional tests include, but are not limited to, cross-collection tests and other tests to detect various anomalies in the implementation of the REST API.","Cross-Collection Tests","For example, such tests may be used to exercise a variety of resource collections in order to check potential issues across different collections. Specific tests that fall into this category of tests may include, but are not limited to, testing the correctness of the \u201ckind\u201d of data associated with an entity in the API system. The following list includes examples of invariants of the REST API being tested in this example with respect to different REST operations:\n\n","The example invariants listed above are provided for illustrative purposes only, and embodiments are not intended to be limited thereto. A person skilled in the relevant art given this description would appreciate that the tests and invariants being tested may be adapted to the particular API\/API service being tested.","Detecting Anomalies","There are some characteristics of fields in a REST API which can be detected by passively observing a series of REST transactions. For example, some fields in the API may be mutable, while others may not. Also, some fields may be derived from backend algorithms or processes (e.g., at server ), and some fields may be provided entirely by the client .","In an embodiment, language interpreter  adaptively predicts the behavior of various data fields that are returned in the response payloads. For example, language interpreter  can be configured to exercise or test an API by executing a series of commands (expressed in the domain specific language) as these commands are defined in a testing script (e.g., testing script  of ), as described above. Accordingly, language interpreter  can learn the behavior of various fields so as to identify inconsistencies. Such inconsistencies may then be displayed by language interpreter  as notifications to the user (e.g., the API developer or test engineer).","In an example, the API being tested may allow an empty string (e.g., \u201c \u201d) to be inserted as a value of a particular field (e.g., via an insert data transfer request). This field may be associated with, for example, a persistent entity or object accessible to the API. If for some reason, the API were to treat such an empty string as a \u201cclear field\u201d that does not have a value, it may choose not to return the particular field in responses to subsequent requests. However, if the same API being tested allows a similar type of empty string to persist for a different data field (e.g., associated with the same or a different entity of the API) across the responses to a series of requests, such an inconsistency may be identified or flagged by language interpreter  as a potential bug in the API.","Method",{"@attributes":{"id":"p-0080","num":"0089"},"figref":["FIG. 4","FIG. 1","FIG. 2"],"b":["400","400","100","200","400"]},"Method  begins in step , which includes acquiring a mapping from Representational State Transfer (REST) operation to Uniform Resource Locator (URL). For example, such a mapping may include one or more REST operations to URL templates or template patterns, as described above. An example of such a mapping is shown above in lines (1), (2), and (3).","As shown in , method  then proceeds to step  in which a testing script (e.g., testing script  of , described above) is acquired. The testing script includes one or more commands written in a domain specific language, as described above. Further, the REST operation to URL mapping acquired in step  may be defined, for example, within the testing script . As such, steps  and  of method  may be combined into a single step.","Once the REST operation to URL mapping and the commands written in the domain specific language have been acquired, method  proceeds to step . Step  includes generating and submitting a data transfer request to a server implementing the REST API being tested (e.g., server  of , as described above). The data transfer request is generated based on the acquired mapping and the commands as specified in the testing script (i.e., steps  and ). The generated data transfer request may include a payload body (or simply \u201cpayload\u201d) corresponding to each REST operation in the REST operation to URL mapping acquired in step . For example, the generated and submitted data transfer request may be in the form of an HTTP request, as described previously.","In an embodiment, the domain specific language enables the REST operations to be expressed via the one or more commands, independently of the syntax or the request payload. Additionally, the domain specific language allows the data transfer request to be generated without having to account for character-escaping issues. A person skilled in the relevant art given this description would appreciate that such character-escaping issues (or simply \u201cescape issues\u201d) are prevalent in such data transfer requests, and particularly in HTTP requests. Steps , , and  of method  may be performed by, for example, request generator  of , as described above.","In step , a response is received from the server based on the data transfer request that was sent in step . Like the data transfer request, the response from the server may also be in the form of a HTTP request. For example, the response from the server may include one or more results in a response payload based on the processing of the data transfer request by the server (or by the API service implemented at the server). It would be apparent to a person skilled in the relevant art that an API service for the REST API being tested may be implemented at a single server or across multiple servers communicatively coupled over a network (e.g., network  of , as described above). Any reference to a single server with respect to embodiments as described herein and as shown in the example flowchart of  is therefore used for ease of explanation, and is not intended to limit embodiments thereto.","Method  proceeds to step  in which the result(s) in the response received from the server are parsed. In step , the commands specified in the testing script are executed for the parsed results in order to verify the results satisfy the invariant\/predicate conditions of the REST API being tested. Method  then proceeds to step  in which it is determined whether all results in the response from the server have been processed (i.e., parsed and tested). If it is determined in step  that all the results have not been processed, steps  and  are repeated until each result in the response from the server has been processed based on the commands specified in the testing script. Steps , , , and  of method  may be performed by, for example, response manager  of , as described above.",{"@attributes":{"id":"p-0087","num":"0096"},"figref":["FIG. 5","FIG. 1","FIG. 2"],"b":["500","100","200","500"]},"Like method  of , described above, method  enables a user to test a set of results sent from a server (or API service) implementing the API being tested in response to a data transfer request (e.g., steps , , , and  of method ). Also like method , method  performs each test based on one or more commands specified, for example, in a testing script (e.g., testing script  of , described above) after parsing the results from the server.","However, method  expands the scope of method  by further enabling such a user to submit additional data transfer requests to the same server (or API service) once it is determined that the initial set of results have passed the tests, as specified, for example, in a testing script. It would be apparent to a person skilled in the relevant art given this description that any number of testing scripts may be used as necessary. Further, a particular testing script may include a reference to another testing script including additional commands defined by the user. For example, the additional commands may also be written in the domain specific language. Accordingly, the user is enabled to express additional representational state transfer (REST) operations via these additional commands without having to be preoccupied by syntax or escape character issues that may be associated with conventional data requests for REST operations.","Method  begins in step , in which a data transfer request is submitted to a server implementing the API being tested. In an embodiment, the API being tested is a REST API having a plurality of invariants that are assumed to always hold true. Step  may be performed by, for example, request generator  of , as described above. A response from the server corresponding to the submitted request may be received in step . As described above, the request and response may be, for example, HTTP requests. Further, the response may include one or more results based on the data transfer request that is processed by the server.","In step , one or more tests are applied to each result in the response so as to ensure any invariants of the API are satisfied. As described above, the tests that are applied are based on the commands written in the domain specific language, which may be specified in, for example, a testing script generated by the user. In step , method  determines whether the applied tests based on the commands in the testing script have passed. If not, method  proceeds to end after step .","However, if all tests have passed, and thus, all invariants of the API have been found to be satisfied by the results included in the initial response from the server, method  proceeds to steps , , and . In step , a new data transfer request is generated and submitted to the server. In step , the next response from the server corresponding to the newly submitted request is received. In step , additional tests are applied to the results in the next response by executing one or more additional commands that are specified in the same or different testing script, as noted above.","As illustrated in , steps , , , and  of method  are repeated using new data transfer requests that are generated once it is determined that all tests have passed (in step ) for each set of results, which are sent by the server in response to the data transfer request submitted previously (in step ). As noted above, method  may end if it is determined during the testing process that a particular result from the server failed to pass and an invariant condition of the API was therefore determined to be violated. Method  may also end once all tests that are based on the commands specified in, for example, one or more testing scripts have been performed.","Although not shown in , the user may also be allowed to manually stop testing of the API via a user interface, or to specify a timeout option limiting the duration in which the tests should be executed. For example, such a timeout option or duration may be specified using a command or option that is expressed in the domain specific language within a testing script. Steps , , , , , and  may be performed by, for example, response manager  of , as described above.","Example Computer System Implementation","Embodiments shown in , or any part(s) or function(s) thereof, may be implemented using hardware, software modules, firmware, tangible computer readable media having instructions stored thereon, or a combination thereof and may be implemented in one or more computer systems or other processing systems.",{"@attributes":{"id":"p-0096","num":"0105"},"figref":["FIG. 6","FIGS. 1 and 2","FIGS. 1-2"],"b":["600","115","600"]},"If programmable logic is used, such logic may execute on a commercially available processing platform or a special purpose device. One of ordinary skill in the art may appreciate that embodiments of the disclosed subject matter can be practiced with various computer system configurations, including multi-core multiprocessor systems, minicomputers, mainframe computers, computer linked or clustered with distributed functions, as well as pervasive or miniature computers that may be embedded into virtually any device.","For instance, at least one processor device and a memory may be used to implement the above described embodiments. A processor device may be a single processor, a plurality of processors, or combinations thereof. Processor devices may have one or more processor \u201ccores.\u201d","Various embodiments of the invention are described in terms of this example computer system . After reading this description, it will become apparent to a person skilled in the relevant art how to implement embodiments of the invention using other computer systems and\/or computer architectures. Although operations may be described as a sequential process, some of the operations may in fact be performed in parallel, concurrently, and\/or in a distributed environment, and with program code stored locally or remotely for access by single or multi-processor machines. In addition, in some embodiments the order of operations may be rearranged without departing from the spirit of the disclosed subject matter.","Processor device  may be a special purpose or a general purpose processor device. As will be appreciated by persons skilled in the relevant art, processor device  may also be a single processor in a multi-core\/multiprocessor system, such system operating alone, or in a cluster of computing devices operating in a cluster or server farm. Processor device  is connected to a communication infrastructure , for example, a bus, message queue, network, or multi-core message-passing scheme.","Computer system  also includes a main memory , for example, random access memory (RAM), and may also include a secondary memory . Secondary memory  may include, for example, a hard disk drive , removable storage drive . Removable storage drive  may comprise a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash memory, or the like. The removable storage drive  reads from and\/or writes to a removable storage unit  in a well known manner. Removable storage unit  may comprise a floppy disk, magnetic tape, optical disk, etc. which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art, removable storage unit  includes a computer usable storage medium having stored therein computer software and\/or data.","In alternative implementations, secondary memory  may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include, for example, a removable storage unit  and an interface . Examples of such means may include a program cartridge and cartridge interface (such as that found in video game devices), a removable memory chip (such as an EPROM, or PROM) and associated socket, and other removable storage units  and interfaces  which allow software and data to be transferred from the removable storage unit  to computer system .","Computer system  may also include a network interface . Network interface  allows software and data to be transferred between computer system  and external devices. Network interface  may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, or the like. Software and data transferred via network interface  may be in the form of signals, which may be electronic, electromagnetic, optical, or other signals capable of being received by network interface . These signals may be provided to network interface  via a communications path . Communications path  carries signals and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, an RF link or other communications channels.","In this document, the terms \u201ccomputer program medium\u201d and \u201ccomputer usable medium\u201d are used to generally refer to media such as removable storage unit , removable storage unit , and a hard disk installed in hard disk drive . Computer program medium and computer usable medium may also refer to memories, such as main memory  and secondary memory , which may be memory semiconductors (e.g. DRAMs, etc.).","Computer programs (also called computer control logic) are stored in main memory  and\/or secondary memory . Computer programs may also be received via network interface . Such computer programs, when executed, enable computer system  to implement embodiments as discussed herein. In particular, the computer programs, when executed, enable processor device  to implement the processes of embodiments of the present invention, such as the stages in the methods illustrated by flowcharts  and  of , respectively, discussed above. Accordingly, such computer programs represent controllers of the computer system . Where embodiments are implemented using software, the software may be stored in a computer program product and loaded into computer system  using removable storage drive , interface , and hard disk drive , or network interface .","Embodiments of the invention also may be directed to computer program products comprising software stored on any computer useable medium. Such software, when executed in one or more data processing device(s), causes a data processing device(s) to operate as described herein. Embodiments of the invention employ any computer useable or readable medium. Examples of computer useable mediums include, but are not limited to, primary storage devices (e.g., any type of random access memory), secondary storage devices (e.g., hard drives, floppy disks, CD ROMS, ZIP disks, tapes, magnetic storage devices, and optical storage devices, MEMS, nano-technological storage device, etc.), and communication mediums (e.g., wired and wireless communications networks, local area networks, wide area networks, intranets, etc.).","Variations","As would be understood by a person skilled in the art based on the teachings herein, several variations of the above described features of automatic anomaly detection in an API having a plurality of invariants. These variations are within the scope of embodiments of the present invention. For the purpose of illustration only and not limitation, a few variations are provided herein.","In an example, one skilled in the art can envision several variations to the scripting syntax, as described above. In an embodiment, a different scripting syntax may be used in place of the purpose-specific domain specific language described above. For example, any well-known scripting language generally used by those skilled in the relevant art for writing testing scripts may also be used to evaluate results sent from a server in response to one or more data transfer requests using REST operations. An example of such a scripting language includes JavaScript.","In another example of a variation, embodiments of the language interpreter (e.g., language interpreter  of ), as described herein may be further configured to determine that certain tests based on commands specified in a script are independent, and consequently could be run in parallel. Such parallel execution of these tests would greatly increase the efficiency and speed of verification testing.","Additional variations that may be incorporated into embodiments as described herein may include, but are not limited to: support for testing scripts written in an extensible markup language (XML) or other representation-neutral format; automatic transformation of JSON response bodies to XML bodies based on templates; support for automatic fuzz testing; features to track API changes over time; and deriving static analysis rules to apply against API client implementations using test data collected based on commands specified in a testing script(s).","The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.","Embodiments of the present invention have been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.","The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can, by applying knowledge within the skill of the art, readily modify and\/or adapt for various applications such specific embodiments, without undue experimentation, without departing from the general concept of the present invention. Therefore, such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments, based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation, such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.","The breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["Embodiments are described, by way of example only, with reference to the accompanying drawings. In the drawings, like reference numbers may indicate identical or functionally similar elements. The drawing in which an element first appears is typically indicated by the leftmost digit or digits in the corresponding reference number.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
