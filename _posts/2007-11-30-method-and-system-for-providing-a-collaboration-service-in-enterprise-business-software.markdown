---
title: Method and system for providing a collaboration service in enterprise business software
abstract: Disclosed is a method and system for creating a first collaboration service node for a first software object node and linking the first collaboration service node to a second collaboration service node hierarchically to represent a link structure between the first software object node and a second software object node. A collaboration service provided by the first collaboration service node is determined based on a type of the first software object node and the collaboration service for the first software object node is executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07836130&OS=07836130&RS=07836130
owner: SAP AG
number: 07836130
owner_city: Walldorf
owner_country: DE
publication_date: 20071130
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The invention generally relates to the field of enterprise business software and more specifically to collaboration services in a supply network collaboration enterprise business software.","Collaborative software is software designed to help people involved in a common task to achieve their goals. Such software systems include email, calendaring, text chat, wiki, electronic communication tools, electronic conferencing tools, and collaborative management tools. The electronic communication tools send messages, files, data, and documents between people and hence facilitate the sharing of information. The electronic conferencing tools facilitate the sharing of information, but in a more interactive way. Examples of electronic conferencing tools include internet forums such as message boards which is a virtual discussion platform to facilitate and manage online text messages. The collaborative management tools facilitate and manage group activities. Examples of collaborative management tools include electronic calendars which are used to schedule events and automatically notify and remind group members. Collaborative management tools include project management systems that are used to schedule, track, and chart the steps in a project as it is being completed.","The collaborative software handles relatively simple data compared to business data in an enterprise world. Building collaboration software as a service that can be used in any business scenario in the enterprise world is typically challenging considering the complexities involved in the business scenario. Consider a business scenario in the enterprise world where a car manufacturer wants to make a finished product such as a car. A number of partners are involved in such a business scenario. Such partners include an engine manufacturer, body manufacturer, upholstery provider, paint provider, tyre manufacturer, navigation system provider, glass manufacturer, and battery manufacturer. The car manufacturer typically has to consider a number of parameters such as schedule of deliveries of the products from each of the partners, whether the deliveries from the partners are on track, whether the partners are deviating from the initial plan, and if they are deviating then are they violating a tolerance limit. It is extremely challenging to build collaboration software that integrates all activities of the involved partners, to gather business data from each of the partners and analyze the business data. Moreover, the car manufacturer may want to perform collaborative tasks such as inviting proposals for a request and negotiating with partners on the proposals they make. The car manufacturer may also want to perform collaborative tasks such as tracking the progress of the work of each of the partners and calculating a projected output based on the actual data provided by the partners. In order to perform the above mentioned collaborative tasks, the car manufacturer may want to integrate his enterprise software with collaborative software that is capable of performing the above collaborative tasks. The existing collaborative software typically cannot cater to such a business scenario. Also, the existing collaborative software is typically not provided as a service and may not be easily integrated with another software component.","What is described is a method and system for creating a first collaboration service node for a first software object node and linking the first collaboration service node to a second collaboration service node hierarchically to represent a link structure between the first software object node and a second software object node. A collaboration service provided by the first collaboration service node is determined based on a type of the first software object node and the collaboration service for the first software object node is executed.","What is described is a method and system for creating a first collaboration service node for a first software object node and linking the first collaboration service node to a second collaboration service node hierarchically to represent a link structure between the first software object node and a second software object node. A collaboration service provided by the first collaboration service node is determined based on a type of the first software object node and the collaboration service for the first software object node is executed.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","135"]},"Software object  includes a business object such as a purchase order, a work order, and a sales order. Software object  is organized as a collection of software object nodes such as first software object node , second software object node , and third software object node  linked to each other hierarchically. First software object node  includes nodes such as a purchase order header node, and a purchase order item node. In another embodiment, software object nodes such as first software object node  and second software object node  may be linked to each other non-hierarchically.","Collaboration service object  is also organized in a way similar to software object . Collaboration service object  includes collaboration service nodes such as first collaboration service node , second collaboration service node , and third collaboration service node  wherein each collaboration service node corresponds to a software object node in software object . First collaboration service node  is a collaboration service node created for first software object node . Second collaboration service node  is a collaboration service node created for second software object node . First collaboration service node  and second collaboration service node  are hierarchically linked to each other via link  in a way similar to that of first software object node  and second software object node  which are connected via link  in software object . In an embodiment, first collaboration service node  and second collaboration service node  are linked hierarchically to allow execution of hierarchy based functions. Hierarchical function includes a function that is capable of influencing both a parent node and a related child node of the parent node when the function is executed on the parent node. In another embodiment, collaboration service nodes such as first collaboration service node  and second collaboration service node  may be linked to each other non-hierarchically.","System  describes mapping a software object  to collaboration service object . First collaboration service node  provides collaboration services for first software object node . First collaboration service node  is mapped to first software object node  via link . Similarly, second collaboration service node  provides collaboration services for second software object node . Second collaboration service node  is mapped to second software object node  via link . Third collaboration service node  provides collaboration services for third software object node . Third collaboration service node  is mapped to third software object node  via link . A software object node in software object  is assigned a unique collaboration service node in collaboration service object , that is, no two software object nodes may have a same collaboration service node. In an embodiment, a software object node may not need any collaboration service and thus may not be mapped to a collaboration service node.","First collaboration service node  provides services such as updating a collaboration status of first software object node , determining a collaboration task to be performed, executing a collaboration action, maintaining unstructured communication information, and updating a collaboration action log with details such as the collaboration action performed for first software object node . In an embodiment, unstructured communication information includes data such as a chat message, and a text included as a note attachment. In another embodiment, unstructured information may include data from other information sources such as electronic mail.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["200","205","210","215"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},"At step , the collaboration status of the first software object is determined. In an embodiment the collaboration status could be a status such as \u201cIn Negotiation\u201d, \u201cIn Agreement\u201d, \u201cPending Approval\u201d, \u201cRejected\u201d, and \u201cAccepted\u201d. At step , the owner of the first software object node is determined. Step  would define who can perform what collaboration action. In an embodiment, the owner of the first software object node could be \u201cCustomer\u201d, \u201cSupplier\u201d, \u201cManufacturer\u201d, and \u201cRequester\u201d. Determining the owner of the first software object node is necessary since a right to perform a collaboration action on the first software object node is restricted. For example, consider a scenario such as a customer-owned purchase order request schedule line versus supplier-owned confirmation schedule line. The customer cannot cancel a confirmation by the supplier and the supplier cannot cancel a request by the customer, because only the owner of the collaboration object node is allowed to cancel.","At step , a collaboration task to be performed by the first collaboration service node on the first software object node is determined based on the collaboration status and the owner of the first software object node. For example, if the collaboration status is \u201cIn Negotiation\u201d, then the collaboration task performed would be to resolve the matter by proposing a plan that would get accepted by parties involved in negotiation.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4","b":["400","405","410"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5","b":["500","505","505","510","505","510","515","510","515","520","505","525","525","530","525","525","525","510","505","510","505","515","505"]},"Collaboration service object  supports collaboration process logic  such as a negotiation process, a deviation analysis process, an execution process, a subscription process, and unstructured communication process. The negotiation process includes providing services such as a bidding process, purchase order collaboration, work order collaboration and contract negotiation process. The negotiation process may be a two party or a multi-party negotiation process. The deviation analysis process analyzes a deviation of an actual data from a planned data based on some parameters and determines a tolerance violation in a business process. The execution process may include processes such as work order collaboration, purchase order collaboration, and a progress control process where in an actual work done is compared with planned work and a progress of the work is reported. Subscription process includes processes such as subscribing for an event. For example, a manufacturer may subscribe for an event such as request for proposal where in a customer invites proposals from manufacturers who can serve the request. In another embodiment, collaboration process logic  may include various other collaboration processes.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6","b":["600","605","600","610","615","620","600","615","620","610"]},"The business plans proposed by the requester to the two parties are represented by collaboration service nodes \u201cBP\u201d , \u201cBP\u201d , \u201cBP\u201d , and \u201cBP\u201d  respectively. Business plans are hierarchically linked to the two partners to whom the business plans are proposed. Collaboration service nodes \u201cBP\u201d , and \u201cBP\u201d  are hierarchically linked to first partner . Collaboration service nodes \u201cBP\u201d , and \u201cBP\u201d  are hierarchically linked to second partner .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 7","FIG. 6"],"b":["702","605","610","615","620","610","1","625","2","630","615","3","640","4","645","620"]},"By proposing the business plans to the two partners, at step  a task is created for first partner  to respond to business plan \u201cBP\u201d , and \u201cBP\u201d . At step , a task is created for second partner  to respond to \u201cBP\u201d , \u201cBP\u201d . At step , first partner  performs a collaboration action by accepting \u201cBP\u201d  and rejecting \u201cBP\u201d . Note  containing a reason for the rejection is attached to \u201cBP\u201d . At step , second partner  performs a collaboration action by accepting \u201cBP\u201d  and making a counter proposal \u201cBP\u201d  to business plan \u201cBP\u201d . Note  containing details of the counter proposal is attached to \u201cBP\u201d .","The collaboration action performed at step  and step  creates a collaboration task for requester  at step . At step , the collaboration task created for requester includes responding to rejection of \u201cBP\u201d , reading note , reading note  and responding to counter proposal \u201cBP\u201d . At step , requester  responds to the collaboration task by reading note  and cancelling business plan \u201cBP\u201d , reading note  and accepting counter proposal \u201cBP\u201d  thereby rejecting business plan \u201cBP\u201d .","At step , a subscriber interested in \u201cBP\u201d  subscribes to get a notification a change in business plan \u201cBP\u201d . After the business plans are accepted by requester , at step , requester  asks first partner  to provide actual data \u201cBP\u201d  of work in progress corresponding to business plan \u201cBP\u201d . At step , requester  asks second partner  to provide actual data \u201cBP\u201d  and \u201cBP\u201d  of the work in progress corresponding to business plans \u201cBP\u201d  and \u201cBP\u201d . At step , first partner  provides actual data \u201cBP\u201d  and at step , second partner  provides actual data \u201cBP\u201d  and \u201cBP\u201d .","The collaboration process in business scenario  triggers a deviation analysis service to determine a tolerance violation of the actual data from a planned data. The deviation analysis includes comparing actual data from \u201cBP\u201d , \u201cBP\u201d  and \u201cBP\u201d  with planned data from business plans \u201cBP\u201d , \u201cBP\u201d  and \u201cBP\u201d  respectively to determine if there is any tolerance violation. In an embodiment, the deviation analysis results in a tolerance violation. At step , a collaboration task is created for second partner  to resolve low quantity tolerance violation for \u201cBP\u201d . At step , a collaboration task is created for first partner  to resolve late completion for \u201cBP\u201d .","At step , requester  requests for a chat with first partner  and second partner . At step , a collaboration task is created for first partner  to respond to a chat request. At step , a collaboration task is created for second partner  to respond to a chat request. At step , requester chats with first partner  and second partner . After chatting with first partner , at step , requester  accepts a proposal from first partner  and changes business plan \u201cBP\u201d . The change in \u201cBP\u201d  resolves tolerance violation of \u201cBP\u201d  automatically. At step , second partner provides additional actual data \u201cBP\u201d . The additional actual data \u201cBP\u201d  resolves tolerance violation of \u201cBP\u201d  automatically.","In step , since \u201cBP\u201d  was changed by requester , at step , a collaboration task is generated for first partner to respond to change of \u201cBP\u201d . In step , since the subscriber has subscribed to a change in \u201cBP\u201d , at step  a collaboration task is generated for the subscriber to acknowledge the change. At step , first partner  accepts the changed \u201cBP\u201d . At step , the subscriber responds to the collaboration task by acknowledging the change in \u201cBP\u201d .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 8","b":["800","805","815","810","810","805","815","810","815","805","810","805"]},"In an embodiment, collaboration service object  provides a set of collaboration statuses, collaboration tasks, and collaboration actions as part of collaboration service object . Collaboration service interface  provides API for customizing a collaboration service provided by collaboration service object . Customizing the collaboration service includes creating an application specific collaboration status , an application specific collaboration task type  and application specific collaboration process logic . A user may define collaboration status  such as \u201caccepted by administration department\u201d, \u201cin process with finance department\u201d which are not part of the set of collaboration statuses provided by collaboration service object . Similarly, the user may also customize collaboration process logic  as necessary for an application.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 9","b":["900","905","1","910","915","920","905"]},"Collaboration step type  is characterized by status transition , trigger action type , action type  and condition . In an embodiment, collaboration step type  includes collaboration steps such as \u201cagree\u201d, \u201cdisagree\u201d, and \u201cresolve tolerance violation\u201d. Status transition  defines a transition of collaboration status from one status to another based on a collaboration task executed. For example, if a collaboration status is \u201cIn Negotiation\u201d, after a collaboration task is executed, the next status may be \u201cIn agreement\u201d or \u201cCounter proposed\u201d. Trigger action type  marks a start of a collaboration step in case there is no collaboration status associated with the collaboration step. In an embodiment, attaching a text message to a collaboration service node could be an example for a triggering action.","Action type  defines a collaboration action to be performed such as \u201caccepted\u201d, and \u201crejected\u201d. Condition  defines a condition for executing a collaboration step. For example, a condition may be \u201cone-partner\u201d or \u201call-partners\u201d. If the condition is \u201cone-partner\u201d the collaboration step is achieved if one partner performs the collaboration action and if the condition is \u201call partners\u201d the collaboration step is achieved if all the partners involved in the collaboration process performs the collaboration action. The \u201cone-partner\u201d condition is typically applied to collaboration action such as \u201crejection\u201d wherein a rejection results even if one partner rejects. The \u201call-partner\u201d condition is typically applied to collaboration action such as \u201caccept\u201d wherein an acceptance results only if all partners accept.","Collaboration task mapping  assigns a set of action types such as \u201caction type \u201d  and \u201caction type N\u201d  to task type . Collaboration task mapping  allows determining a resulting task from a set of possible collaboration actions according to the collaboration process model. For example, the actions \u201caccept\u201d and \u201creject\u201d map to the task \u201crespond to the proposal\u201d. In another embodiment, task type  includes values such as \u201crejection\u201d, \u201ccancellation request\u201d, \u201cprovide actual data\u201d and \u201cresolve tolerance violation\u201d.","Status propagation definition  defines how parent status  is determined by child status . In other words, status propagation definition  determines hierarchical collaboration status of a parent software object node from collaboration statuses of child software object nodes. For example, the hierarchical collaboration status \u201ccontent in agreement\u201d may be set on a parent software object node automatically if all child software object nodes have the collaboration status \u201cin agreement\u201d. Combination mode  determines the child software object nodes that have to be considered to determine the collaboration status of the parent software object node. In an embodiment, combination mode  could have values such as \u201cone child node\u201d, and \u201call child nodes\u201d. Combination mode  with value \u201cone child node\u201d means that collaboration status of one child software object node has to be considered to determine the collaboration status of the parent software object node.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 10","b":["1000","1005","1035","1005","1010","1015","1035","1015","1035","1020","1015","1035","1020","1015","1015","1025","1015","1015","1035","1035","1030","1015","1025","1035","1040"]},"Embodiments of the invention may include various steps as set forth above. The steps may be embodied in machine-executable program code which causes a general-purpose or special-purpose processor to perform certain steps. Alternatively, these steps may be performed by specific hardware components that contain hardwired logic for performing the steps, or by any combination of programmed computer components and custom hardware components.","Embodiments of the present invention may also be provided as a machine-readable medium for tangibly storing the machine-executable instructions in a non-transitory form. The machine-readable medium may include, but is not limited to, flash memory, optical disks, CD-ROMs, DVD ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, or any other type of machine-readable media suitable for tangibly storing non-transitory electronic instructions.","Throughout the foregoing description, for the purposes of explanation, numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent, however, to one skilled in the art that the invention may be practiced without some of these specific details. Accordingly, the scope and spirit of the invention should be judged in terms of the claims which follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
