---
title: Method and apparatus for alleviating register window size constraints
abstract: A method and apparatus provides the capability for a single function to safely use multiple register windows within the same function, with minimal additional support from the operating system, by specifying a new window pointer, the “Effective Current Window Pointer” (ECWP), to be used in conjunction with the prior art window pointer. According to the present invention, the new window pointer ECWP can be used to override the prior art window pointer in dictating from which register window the operands stipulated by the instructions to be executed are sourced/sinked. Consequently, using the method and apparatus of the invention, the number of spills to memory is reduced, the number of instructions required is decreased, resources are used more efficiently, and costly dependency problems and RAW (read-after-write) stalls are prevented.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07013377&OS=07013377&RS=07013377
owner: Sun Microsystems, Inc.
number: 07013377
owner_city: Santa Clara
owner_country: US
publication_date: 20030903
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates generally to microprocessors and more particularly to microprocessors utilizing register windows.","As the performance of microprocessors and processing systems has continued to advance, more aggressive compiler optimization techniques have been employed and the corresponding number of registers required to hold all the pertinent information associated with a program state of a particular application\/computation\/function has dramatically increased.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":["FIG. 1","FIG. 1"],"b":["100","107","111","111","107"]},"Microprocessor computer system  further comprises an address\/data bus  for communicating information, microprocessor  coupled with bus  through input\/output (I\/O) device  for processing data and executing instructions, and memory system  coupled with bus  for storing information and instructions for microprocessor . Memory system  comprises, for example, cache memory  and main memory .","The particular components chosen to be integrated into a single housing is based upon market and design choices. Accordingly, it is expressly understood that fewer or more devices may be incorporated within the housing suggested by dashed line .",{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["201","232","211","32","201","232","211","201","224","25","32","201","232","211"]},"http:\/\/www.sparc.com\/standards\/SPARCV9.pdf.","Chapters 5 and 6 are particularly relevant.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["111","300","211","303","305","211","303","211","1","1","1","303","2","2","2"]},"Also shown in  is the fact that register windows ,  and  overlap such that the \u201cout\u201d registers O of register window  are the \u201cin\u201d registers I of register window  and \u201cout\u201d registers O of register window  are the \u201cin\u201d registers  of register window . Windows  and  are overlapped to allow data to be passed between windows ,  and , in order to facilitate parameter-passing function calls.","In this example, I, L, O, O, L, O, I, L, O, and G each contain eight registers such that each register window ,  and  comprises 24 registers, such as registers  to  of register window  of . Those of skill in the art will readily recognize that while three register windows ,  and  are shown in , any number of register windows can be employed depending certain constraints. In addition, while the illustrative register window  shown in  has 32 registers (twenty-four window registers and eight global registers), register windows ,  and  could include any desired number of individual registers, arranged as desired, that is consistent with the particular \u201cInstruction Set Architecture\u201d (ISA) to which the present invention is being deployed. Consequently, the size and number of registers and register windows shown in the FIG.s is chosen for illustrative purposes only and should not be read to limit the spirit or scope of the invention.","As discussed above, in a register window architecture, such as register window system , the size of each register window ,  and  is set at a specific number of registers, in this example registers  to . In a register window architecture, such as register window system , programs typically move between register windows ,  and  on function calls and each function call receives a new set of registers. Those of skill in the art will further recognize that while it is common to change register windows, such as register windows ,  and , based on function call boundaries, register windows can be changed arbitrarily based on the needs of the application. However, in the prior art, at any one time, a specific application can access only one register window ,  or , and only the number of registers  to  from a single register window , , or . That is to say, in the prior art, a given application had access to one and only one register window , , or  and therefore was allotted only the number of registers,  to  for example, of one register window , , or  before a spill to memory, ,  or  in , was required. In the specific embodiment shown in , and using register window  as an example, the number of registers  to  available to a given application includes: registers  to  shared with the previous register window (not shown); local registers  to  for temporary use in the current register window ; registers  to  for use as outputs to the following window ; and global registers  to .","As noted above, many modern microprocessors typically physically support (are available in hardware) multiple register windows , , and , in some cases as many as eight or more register windows , , , so that moving to a different register window ,  and  on a function call for a new function\/computation does not result in extra time, i.e., cycles, generating spills to memory such as memory ,  or  in . In these systems, the register window , , or  that is visible to an application is typically determined, or marked, by a single window pointer that is often itself a register. As one specific example, the window pointer is a register designated a \u201cCurrent Window Pointer\u201d (CWP). One embodiment of a prior art window pointer  (PAWP ) that is a register is shown in .","Window pointers, such as PAWP , and their use and manipulation are well known to those of skill in the art. Therefore, a more detailed discussion of window pointers is omitted here to avoid detracting from the invention. For a more detailed discussion of one particular embodiment of a window pointer, and the CWP in particular, the reader is directed to \u201cThe SPARC Architecture Manual Version 9\u201d edited by David Weaver and Tom Germond, 1994, published by PTR Prentice Hall, ISBN 0-13-825001-4 which is incorporated herein, in its entirety, by reference and is available at website:","http:\/\/www.sparc.com\/standards\/SPARCV9.pdf.","Chapters 5 and 6 are particularly relevant.","Typically, PAWP , which indicates the current register window context, meaning the current architecturally visible register window, is incremented when entering a new function and decremented when returning from a function. In general, particular Instruction Set Architectures (ISAs) have specific instructions to manipulate PAWP . For instance, in the SPARC architecture ISA, a SAVE instruction is used for incrementing PAWP  and a RESTORE instruction is used for decrementing PAWP . Consequently, referring to , if PAWP , in one embodiment CWP, is set to register window , then the function is restricted to register window  and on a SAVE instruction the value of PAWP , in one embodiment the value of CWP, is incremented, which in this example is the next or following register window (not shown in ). On a RESTORE instruction, the value of PAWP , in one embodiment the value of CWP, is decremented, in this example back to register window . Consequently, on a RESTORE, any data in the next register window after register window  (not shown) is considered invalid, is not saved on a context switch, and is unavailable to the function.","Register windows ,  and  are typically accessed in a circular fashion such that all arithmetic operations on PAWP  are modulo the number of physical register windows ,  and  supported by the microprocessor. Once all the physical register windows ,  and  are used, PAWP  wraps-around and the original contents of the first register window ( in ) are spilled to memory (,  or  in ) and then filled when required. Consequently, as noted above, by specifying the number of register windows ,  or  the actual number of physical registers is also specified.","Register windows, register window structures and manipulation of register windows, such as register window system , are well known to those of skill in the art. Therefore, a more detailed discussion of register windows, register window structures, and manipulation of register windows is omitted here to avoid detracting from the invention. For a more detailed discussion of one particular embodiment of a register window architecture, register window structures, and manipulation of register windows, the reader is again directed to \u201cThe SPARC Architecture Manual Version 9\u201d edited by David Weaver and Tom Germond, 1994, published by PTR Prentice Hall, ISBN 0-13-825001-4, incorporated herein, in its entirety, by reference and available at website:","http:\/\/www.sparc.com\/standards\/SPARCV9.pdf.","Chapters 5 and 6 are particularly relevant.","As noted above, with the adoption of more aggressive compiler optimization techniques, coupled with increasing instruction latencies as microprocessors move to higher clock speeds, the number of registers  to  required to hold all of the pertinent information associated with a computation is increasing. Of course, in a register window architecture, such as register window system , this means that when all of the available registers  to  of the one register window ,  or  associated with a given application are utilized, it is necessary to spill data to memory. This involves storing the excess information to memory, such as memory ,  or  in , and then filling it whenever it is required.","The storing of excess information to memory, such as memory ,  or  in , and then filling it whenever it is required, is highly undesirable and results in a large detrimental impact on performance for at least three reasons. First, the process significantly increases the number of instructions required for a given computation due to spill\/fill handling. Second, the process of filling and spilling registers squanders resources. Third, storing of excess information to memory, such as memory ,  or  in , and then filling it whenever it is required potentially introduces costly dependency problems and RAW (read-after-write) stalls. Consequently, in the prior art, a significant number of important applications suffered noticeably from being restricted to the number of registers  to  in a single register window , , or .","One seemingly simple solution to the problem discussed above would be to increase the size of the register windows ,  and , i.e., increase the number of registers  to  allotted each register window ,  and . However, any register based architecture with fixed size operand fields in the instruction definition cannot address more than the predetermined number of registers  to  in a register window , , or  at once. Consequently, significant alterations would be required to the \u201cInstruction Set Architecture\u201d (ISA) in order to expand the size of the register windows ,  and . As those of skill in the art will readily recognize, this is not a viable option and therefore this seemingly simple approach is impractical.","The fact discussed above that, in the prior art, memory spills are frequently required and a significant number of important applications suffer noticeably from being restricted to the use of registers  to  in a single register window , , or  is particularly wasteful and frustrating since there are physical registers available in the register windows ,  or  other than the one register window ,  or  that the application is currently using. Unfortunately, prior art methods and structures could not enable an application to access multiple register windows ,  and  in the same function. This was because even though a single function could theoretically move between register windows ,  and  by manipulating PAWP  and by using the SAVE and RESTORE instructions, the typical RESTORE instruction specifies that any register windows ,  or  greater than the register window ,  or  indicated by PAWP  be no longer considered by the micro-processor\/operating system to be valid after issuing the RESTORE instruction. Consequently, in the prior art, once a register window ,  and  is vacated using RESTORE instruction, a function is not guaranteed that any data left in the register window ,  and  will still be present the next time the register window ,  and  is accessed after a SAVE. This behavior is typically observed when a RESTORE instruction is used with a return from a function and the function's processing has been completed. In the prior art, this behavior essentially prevented the use of multiple register windows , ,  to hold data pertinent for a single function.","In short, the result in the prior art was that a function was restricted to using only the number of registers  to  in a single register window ,  or  and any data that could not be contained in the current register window had to be spilled to memory, such as memory  or  in . Frustratingly, this was the case despite the fact that extra physical registers were typically readily available in other register windows ,  or .","What is needed is a method for allowing the use of multiple register windows , ,  to hold data pertinent to a single function.","The present invention is directed to a method and apparatus for providing a given function access to more than one register window in a register window architecture, thereby reducing the number of spills to memory, decreasing the number of instructions required, using resources more efficiently, and reducing costly dependency problems and RAW (read-after-write) stalls.","The present invention provides the capability for software to safely use multiple register windows in the same function (or register window context), with minimal additional support from the operating system, by specifying a new window pointer, the \u201cEffective Current Window Pointer\u201d (ECWP), to be used in conjunction with the prior art window pointer. According to the present invention, the new window pointer ECWP can be used to override the prior art window pointer in dictating from which register window the operands stipulated by the instructions to be executed are sourced\/sinked. According to the present invention, as few as one new instruction, which could readily be implemented by those of skill in the art, is used to manipulate the ECWP of the invention.","According to the present invention, while the prior art window pointer might be set to one register window, for example, the fifth register window, the ECWP of the invention could be set to a different, but trailing, register window, for example, the third register window. According to the invention, once ECWP is set, instructions are able to source\/sink their operands in the register window designated by the ECWP, in this example the third register window, while the prior art window pointer would remain unchanged, in this example at the fifth register window. According to one embodiment of the invention, the ECWP would generally mirror the prior art pointer function, and would only deviate when explicitly indicated by the applications by using the new instruction(s). Consequently, employment of the method and apparatus of the present invention does not impact existing applications and does not alter the register windowing system for applications that do not utilize the ECWP. Therefore, the present invention is completely backwards compatible.","In addition, the hardware modifications needed to implement the present invention are relatively simple and a variety of structures can be employed to implement the present invention based on the needs of the user. For example, in one embodiment, a special instruction is used as a multiplexor (MUX) select with inputs comprising the PAWP and ECWP.","Using the method and structure of the invention, a given function can access more than one register window. Consequently, register resources can be used more efficiently and the memory spills frequently required in the prior art are avoided. Consequently, using the present invention, the number of instructions required for a given computation is decreased, resources are used more efficiently, and costly dependency problems and RAW (read-after-write) stalls are avoided. As a result, using the present invention, a significant number of important applications can be run faster and more efficiently.","In addition, by specifying a new window pointer ECWP to be used in conjunction with the prior art window pointer, the present invention provides the capability for a single function to safely use multiple register windows with minimal additional support from the operating system and the hardware modifications needed to implement the present invention are relatively simple with a variety of structures possible based on the needs of the user.","It is to be understood that both the foregoing general description and following detailed description are intended only to exemplify and explain the invention as claimed.","The invention will now be described in reference to the accompanying drawings. The same reference numbers may be used throughout the drawings and the following description to refer to the same or like parts.","The present invention is directed to a method and apparatus for providing a given function access to more than one register window ( in , ,  and  in , and , , , ,  and  in ) in a register window architecture ( in ,  in ), thereby reducing the number of spills to memory (,  or  in ), decreasing the number of instructions required, using resources more efficiently, and reducing costly dependency problems and RAW (read-after-write) stalls.","The present invention provides the capability for a single function to safely use multiple register windows within the same function (or register window context) with minimal additional support from the operating system by specifying a new window pointer, the \u201cEffective Current Window Pointer\u201d (ECWP)( in  and ) to be used in conjunction with the prior art window pointer (PAWP)  in  and ). According to the present invention, the new window pointer ECWP can be used to override PAWP in dictating from which register window the operands stipulated by the instructions to be executed are sourced\/sinked. According to the present invention, one or two new instructions (not shown) are used to manipulate the ECWP of the invention.","According to the present invention, while the prior art window pointer PAWP ( in ) might be set to one register window, for example, the fifth register window ( in ), the ECWP of the invention ( in ) could be set to a different, but trailing, register window, for example, the third register window ( in ) using the new instructions of the invention (not shown). According to the invention, once ECWP ( in ) is set, instructions are able to source\/sink their operands in the register window designated by the ECWP ( in ), in this example the third register window ( in ), while the prior art window pointer PAWP ( in ) would remain unchanged, in this example, at the fifth register window ( in ). According to one embodiment of the invention, the ECWP would generally mirror the prior art pointer function PAWP, and would only deviate when explicitly indicated by the applications and\/or the new instructions. Consequently, employment of the method and apparatus of the present invention does not impact existing applications and does not alter the register windowing system for applications that do not utilize the ECWP. Therefore, the present invention is completely backwards compatible.","In addition, the hardware modifications needed to implement the present invention are relatively simple and a variety of structures can be employed to implement the present invention based on the needs of the user. For example, in one embodiment, a special instruction is used as a multiplexor (MUX) select with inputs comprising the PAWP and ECWP.","Using the method and structure of the invention, a given function can access more than one register window. Consequently, register resources can be used more efficiently and the memory spills frequently required in the prior art are minimized. Consequently, using the present invention, the number of instructions required is decreased, resources are used more efficiently, and costly dependency problems and RAW (read-after-write) stalls are avoided. As a result, using the present invention, a significant number of important applications can be run faster and more efficiently.","In addition, by specifying a new window pointer ECWP to be used in conjunction with the prior art window pointer, the present invention provides the capability for a single function to safely use multiple register windows within the same function with minimal additional support from the operating system and the hardware modifications needed to implement the present invention are relatively simple with a variety of structures possible based on the needs of the user.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 5","FIG. 4"],"b":["501","501","501","401","401","501"]},"In one embodiment of the invention, ECWP  mirrors the prior art pointer function PAWP  (see  or ), and only deviates from PAWP  when explicitly modified by the applications using the new instructions. Consequently, employment of the method and apparatus of the present invention and ECWP  does not impact existing applications and does not alter the register windowing system behavior ( in  in ) for applications that do not utilize the ECWP . Therefore, the present invention is completely backwards compatible.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 6","FIG. 2","FIG. 2","FIGS. 2 and 3"],"b":["201","224","600","601","602","603","604","605","606","608","401","501","601","602","603","604","605","606","211","601","602","603","604","605","606","201","224"]},"Those of skill in the art will readily recognize that while six register windows , , , ,  and  are shown in , any number of register windows can be employed depending on the hardware constraints. In addition, while the illustrative register window  shown in  has 24 registers, register windows , , , ,  and  could include any desired number of individual registers, arranged as desired, that is consistent with the particular \u201cInstruction Set Architecture\u201d (ISA) to which the present invention is being deployed. Consequently, the size and number of registers and register windows shown in the FIGS.s is chosen for illustrative purposes only and should not be read to limit the spirit or scope of the invention.","As shown in  register windows , , , ,  and  overlap as discussed above with respect to . As discussed above, in the prior art, allowing a function to use more than one register window , , , ,  and  was not possible because even though a single function could theoretically move between register windows , , , ,  and  by manipulating PAWP  by using the SAVE and RESTORE instructions, in a typical embodiment, a RESTORE instruction specifies that the vacated register window , , , ,  or  be no longer considered by the processor\/operating system to contain valid data after executing the RESTORE instruction. As a result, in the prior art, once a register window , , , ,  and  was vacated using the RESTORE instruction, a function was not guaranteed that any data left in the vacated register window , , , ,  and  would still be present the next time the register window , , , ,  and  was accessed after a SAVE. Consequently, in the prior art, a function was restricted to using only the number of registers \u2013 () in a single register window , , , ,  and  ().","In contrast to the prior art, according to the present invention, a single function or register window context can safely use multiple register windows , , , ,  and , with minimal additional support from the operating system (not shown). According to the present invention, this is done by introducing ECWP  and using ECWP  in conjunction with PAWP . According to one embodiment of the present invention, ECWP  is used to override PAWP  in dictating from which register window , , , ,  or  the operands stipulated by the instruction(s) to be executed (not shown) are sourced\/sinked.","According to the present invention, while the prior art window pointer PAWP  might be set to a specific register window , , , ,  or , ECWP  of the invention can be set to a different register window , , , ,  or  with the restriction of ECWP  pointing to a valid register window. Once ECWP  is set, instructions are capable of sourcing\/sinking their operands in the register window , , , ,  or  designated by ECWP , while PAWP  remains unchanged at its specific register window , , , ,  or .","Those of skill in the art will readily recognize that when the method and apparatus of the invention is employed, special attention must be paid during a context switch and, in particular, during a reloading of physical register windows after a context switch. A context switch occurs when a first process is swapped out for a second process. When this occurs, the state of the registers of valid register windows , , , ,  or  belonging to the first process, i.e., the first process's architectural state, is stored to memory and the second process's state is filled in from memory to the registers of register windows , , , ,  or . Context switches are typically controlled by the operating system (not shown). According to the invention, at a minimum, at least the one register window , , , ,  or  indicated by PAWP  and the register window , , , ,  or  indicated by ECWP  must be filled. In addition, for simplicity of implementation, in one embodiment, all windows between the register window pointed to by PAWP  and ECWP , inclusive, are filled.","As also discussed above, according to one embodiment of the invention, ECWP  would generally mirror PAWP , and would only deviate when explicitly indicated by the applications by using the new instruction(s). Consequently, employment of the method and apparatus of the present invention does not impact existing applications and does not alter the register windowing system for applications that do not utilize the ECWP . Therefore, the present invention is completely backwards compatible.","In addition, the hardware modifications needed to implement the present invention are relatively simple and a variety of structures can be employed to implement the present invention based on the needs of the user. For example, in one embodiment, a special instruction is used as a multiplexor (MUX) select with inputs comprising the PAWP  and ECWP .","Using the method and structure of the invention, a given function can access more than one register window. Consequently, register resources can be used more efficiently and the memory spills frequently required in the prior art are avoided. Consequently, using the present invention, the number of instructions required for a given computation is decreased, resources are used more efficiently, and costly dependency problems and RAW (read-after-write) stalls are avoided. As a result, using the present invention, a significant number of important applications can be run faster and more efficiently.","In addition, by specifying a new window pointer ECWP to be used in conjunction with the prior art window pointer, the present invention provides the capability for a single function to safely use multiple register windows with minimal additional support from the operating system and the hardware modifications needed to implement the present invention are relatively simple with a variety of structures possible based on the needs of the user.","The foregoing description of an implementation of the invention has been presented for purposes of illustration and description only, and therefore is not exhaustive and does not limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practicing the invention.","For instance, as noted above, those of skill in the art will readily recognize that while three register windows ,  and  are shown in  and six register windows , , , ,  and  are shown in , any number of register windows can be employed depending on the hardware constraints encountered. In addition, while the illustrative register window  shown in  has 32 registers, register windows , ,  , , , ,  and  could include any desired number of individual registers, arranged as desired, that is consistent with the particular \u201cInstruction Set Architecture\u201d (ISA) to which the present invention is being deployed. Consequently, the size and number of registers and register windows shown in the FIGS.s is chosen for illustrative purposes only and should not be read to limit the spirit or scope of the invention.","In addition, those of skill in the art will readily recognize that with minimal modification the method and apparatus of the invention can be employed with any one of numerous operating systems or any one of the numerous architectures in use in the art.","Consequently, the scope of the invention is defined by the claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in, and constitute a part of this specification, illustrate embodiments of the invention and, together with the description, serve to explain the advantages and principles of the invention. In the drawings:",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
