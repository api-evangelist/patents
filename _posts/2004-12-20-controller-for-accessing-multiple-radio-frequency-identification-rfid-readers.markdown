---
title: Controller for accessing multiple radio frequency identification (RFID) readers
abstract: A radio frequency identification (RFID) controller within an RFID system includes an RFID interrogator interface configured to receive signals from RFID interrogators and configured to manage the RFID interrogators based on instructions received from an application program. The RFID interrogators are configured to receive data from an RFID tag. The controller also includes a controller core configured to process the signals received from the RFID interrogator interface and to provide the data to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07295113&OS=07295113&RS=07295113
owner: SAP Aktiengesellschaft
number: 07295113
owner_city: Walldorf
owner_country: DE
publication_date: 20041220
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is also related to patent application Ser. No. 10\/854,766, \u201cA RADIO FREQUENCY IDENTIFICATION (RFID) CONTROLLER\u201d, filed May 27, 2004.","The following description relates to radio frequency identification (RFID) and, in particular, RFID systems.","A radio frequency identification (RFID) system identifies unique items using an interrogator and an RFID tag. Typically, the interrogator communicates with the RFID tag that is attached to an item. The interrogator, also known as a reader, communicates with the RFID tag through radio waves and passes the information read from the RFID tag in digital form to a computer system. The RFID tag is typically a microchip that stores the digital information. The microchip is attached to an antenna that receives signals from and sends signals to the interrogator. The RFID tag includes a unique serial number and may include other information, such as a customer account number.","RFID tags can be active tags, passive tags or semi-passive tags. Active tags include a power source that powers the microchip's circuitry and transmits a signal to the interrogator. Passive tags do not include a power source. Passive tags draw the power required for the circuitry and the transmission of information from the electromagnetic field generated by the interrogator. Semi-passive tags are similar to active tags; however, the power source is used to run the microchip's circuitry but not to communicate with the interrogator. Some semi-passive tags are inactive until they are activated by a signal from the interrogator, which conserves life of its power source.","In one general aspect, a radio frequency identification (RFID) controller within an RFID system is described. The controller includes an RFID interrogator interface configured to receive signals from RFID interrogators and configured to manage the RFID interrogators based on instructions received from an application program. The RFID interrogators are configured to receive data from an RFID tag. The controller also includes a controller core configured to process the signals received from the RFID interrogator interface and to provide the data to the application program.","Implementations may include one or more of the following features. For example, the RFID interrogators may be antennas associated with an RFID interrogator. The antennas may be configured to receive data from the RFID tag. The RFID interrogator interface may be configured to receive signals from the antennas and may be configured to manage the antennas based on instructions received from the application program.","The RFID interrogator interface may notify the application program which RFID interrogator received the data from the RFID tag, or which antenna received the data from the RFID tag. The controller may include a user interface configured to receive a selection of data processing units and an arrangement of data processing units. The controller core may be configured to modify processing of the signals from RFID interrogator interface based on the selection and the arrangement of the data processing units. The controller also may include an administrative services component to store configuration files based on the arrangement and the selection of the data processing units.","In a further general aspect, a RFID controller that includes an RFID interrogator interface is described. The RFID interrogator interface is configured to receive data provided by one of a plurality of RFID interrogators. The plurality of RFID interrogators are coupled to the RFID interrogator interface and are each configured to read the data from an RFID tag. The RFID interrogator interface also is configured to provide an indication to an application program of which one of the plurality of RFID interrogators received the data from the RFID tag. The application program uses the data from the RFID tag. A user interface is configured to receive a selection and an arrangement of data processing units for use in processing the data received by the RFID interrogator interface. A controller core is configured to process the data received by the RFID interrogator interface according to the selection and the arrangement of data processing units received from the user interface. The controller core also is configured to provide the processed data to the application program.","Implementations may include one or more of the following features. For example, an administrative services component may store configuration files based on the arrangement and the selection of the data processing units. The plurality of RFID interrogators may include a plurality of antennas associated with an RFID interrogator that is coupled to the RFID interrogator interface. Each of the antennas may be configured to receive data from one or more RFID tags. The RFID interrogator interface may be configured to receive, from one of the plurality of antennas, data received by the one of the plurality of antennas from an RFID tag. The RFID interrogator interface also may be configured to provide an indication to an application program of which one of the plurality of antennas received the data from the RFID tag.","In another general aspect, a method of processing RFID data is described. The method includes connecting a first RFID interrogator and a second RFID interrogator to an RFID interrogator interface, detecting an RFID tag at the first RFID interrogator or the second RFID interrogator, and notifying the application program of which one of the first RFID interrogator or the second RFID interrogator detected the RFID tag.","Implementations may include one or more of the following features. For example, commands may be read or written from the application program to the RFID interrogators. A configuration input may be received from a user, the configuration input including an arrangement of data processing units to process RFID data. RFID data relating to the detected RFID tag may be received from the first RFID interrogator or the second RFID interrogator. The RFID data may be processed based on the configuration input. Processing the RFID data may include changing the processing of RFID data from an existing process to a new process based on the configuration input.","Connecting the first RFID interrogator and the second RFID interrogator to the RFID interrogator interface may include connecting a first RFID antenna and a second RFID antenna to an RFID interrogator interface through an RFID interrogator. Detecting an RFID tag at the first RFID interrogator or the second RFID interrogator may include detecting an RFID tag at the first RFID antenna or the second RFID antenna. Notifying the application program of which one of the first RFID interrogator or the second RFID interrogator detected the RFID tag may include notifying the application program of which one of the first RFID antenna or the second RFID antenna detected the RFID tag.","Commands may be read or written from the application program to the RFID antennas, and the commands may be redirected to the RFID interrogator through which the RFID antennas are connected to the RFID interrogator interface. A configuration input may be received from a user. The configuration input may include an arrangement of data processing units to process RFID data. RFID data relating to the detected RFID tag may be received from the first RFID antenna or the second RFID antenna. The RFID data may be processed based on the configuration input.","The aspects above may have one or more of the following advantages. For scalability reasons, data received from the RFID interrogators is generally processed at the lowest level. However, an RFID system having hundreds of interrogators and a few RFID controllers is expensive to manage as a distributed system. In this disclosure, the RFID controller provides a flexible mechanism for easy adaptation and configuration thereby lowering the costs for managing and maintaining the whole RFID system. The RFID controller provides a tool to users to configure their RFID system by allowing users to select the required data processing units and arranging the data processing units to meet user requirements. Thus, the RFID controller is flexible to be easily adapted to any scenario, thereby eliminating the need to develop new controller hardware and\/or software for every new RFID scenario.","An application program, through the RFID controller, may control multiple RFID interrogators with direct read or write commands through a single RFID interrogator interface. The RFID interrogator interface may listen for RFID events from multiple interrogators asynchronously. The application program may also listen to RFID signals from multiple antennas through an RFID interrogator interface. For example, antennas may be located in smart shelves, storage locations and multiple dock doors in a warehouse. In multiplexing multiple interrogators or antennas, an application program may perform the same actions as with \u201ca single interrogator to a single interrogator interface\u201d configuration, however the fact that multiple interrogators or antennas are used is not required by the application program although the application program may retrieve information designating the exact interrogator or antenna detecting an RFID tag.","Other features, objects and advantages will become apparent from the following detailed description when read in connection with the accompanying drawings.","Like reference symbols in the various drawings indicate like elements.","Referring to , a radio frequency identification (RFID) system  includes an RFID hardware layer , an RFID controller component , and an application component . The RFID hardware layer  and the RFID controller component  are connected by a bus  that uses a protocol such as a transmission control protocol\/Internet protocol (TCP\/IP), a hypertext transfer protocol (HTTP), a publish\/subscribe protocol, RS-232C, a user datagram protocol (UDP), or other suitable protocol for communication between computing components. The RFID controller component  and the application component  are connected by a bus  that uses a protocol such as a TCP\/IP, HTTP, a publish\/subscribe protocol or the like.","The controller component  processes information gathered by RFID hardware layer  and sends the processed information to the application component . For example, an elementary implementation includes an RFID hardware layer  recording data from the RFID tags attached to items in stock. The controller component  receives data from the RFID tags detected by the RFID hardware layer . The controller component  filters the data to remove false detections and aggregates the data to be sent in a series of batches to the application component . The application component , for example, a warehouse management application, uses the data detected by the RFID hardware layer  to update the inventory status in a warehouse.","In existing RFID systems, specialized software is written to control the operations of single RFID interrogators. Over time, as requirements change, the legacy RFID systems will require newer software or the older software will need modification every time new functionality is required in the legacy RFID system. For example, RFID systems will require software that performs additional functions from one scenario to another scenario, e.g., detecting and identifying RFID tags, reading additional data from the RFID tags, writing data to the RFID tags, filtering of data and events. Sometimes additional equipment is needed, such as lights or conveyer belts that need to be turned \u201con\u201d or \u201coff\u201d depending on the RFID tags that were scanned.","As will be shown herein, unlike existing RFID systems, the controller component  of RFID system  can be configured to meet any required scenario so that data received from the RFID hardware layer  can be processed according to the required scenario requirements and sent to the application component . In one example, a user may choose from different types of data processing units and arrange these data processing units in a chain, for example, to meet the requirement of a scenario.","RFID Hardware Layer","The RFID hardware layer  includes groups of RFID tags (e.g., RFID tags RFID tags and RFID tags ) and RFID interrogators (e.g., RFID interrogator RFID interrogator and RFID interrogator ). Each group of RFID tags -communicates with a corresponding RFID interrogator -(e.g., RFID tags communicate with RFID interrogator RFID tags communicate with RFID interrogator and RFID tags communicate with RFID interrogator ) through radio frequency signals. For example, an RFID interrogator records an event when an RFID tag enters a radio field of the RFID interrogator or if the RFID tag leaves the radio field. In another example, RFID interrogator periodically or continuously determines what tags it detects. The software determines a difference between an old set of tags previously detected and a new set of tags presently detected and generates an event based on the difference. Each group of RFID tags -may be passive tags, active tags or semi-passive tags or any combination of the three.","Application Component","Application component  includes an application  and a node . The application  may be any application that uses information from the RFID tags such as a business application. The application  may access controller component  through the node . Node  is responsible for managing the information coming from RFID controller  and other types of device controllers (not shown). For example, node  may be a node within an infrastructure for a business management system such as an Auto-ID Infrastructure (AII). The application component  may communicate with controller component  directly to provide a graphical user interface (GUI) (not shown) for monitoring the controller component  or to provide user instructions to configure the controller component .","Controller Component","Controller component  includes, vendor-provided drivers (vendor-provided driver and vendor-provided driver ), an RFID interrogator application programming interface (API) , a messaging interface , a controller API , an administrative service module  and a controller core . The RFID controller component  is responsible for controlling the RFID interrogators -","Vendor-Provided Drivers","Some RFID interrogators -have additional functionality beyond a basic functionality of reading\/writing RFID tags and listening for RFID tags that require special drivers such as drivers -in order for the controller component  to communicate with the RFID interrogator to access the additional functionality. Other RFID interrogators, such as RFID interrogators with the basic functionality, communicate directly with the RFID interrogator API . In other examples, each driver implements all the functionality of the interrogator API . In further examples, some RFID interrogators  support the interrogator API  natively (no drivers are required). In still other examples, RFID interrogators  may not support the API interrogator  directly. In these situations, the drivers map the API functions into proprietary, reader-specific commands.","RFID Interrogator API","The RFID interrogator API  is a low-level API that acts as an abstraction layer for RFID interrogators having basic read\/write and listener functionality. The RFID interrogator API  performs several functions including identifying tags within the radio field, reading bytes from the RFID tag, writing bytes to the RFID tag, and connecting or disconnecting with RFID tags. Some RFID tags include a memory. The memory may be divided into pages. The interrogator API  maps the byte addresses into page addresses. For example, assuming 128 bytes per page, byte address \u201c0\u201d indicates a first byte on a first page and byte \u201c130\u201d indicates a third byte on a second page. The memory may be organized into structures other than pages. For example, the RFID interrogator API  may use a generic approach of having a single addressable memory space. As implemented, the interrogator API  translates between a proprietary structure and an API structure.","In addition, the RFID interrogator API  also offers a listening mechanism through a listener interface so that RFID tags  that appear or disappear from the field of the RFID interrogator  are reported. The RFID API interrogator  will start a listening mode process if listeners have been designated and an initialization command is issued from the controller component . The listening mode process will stop after a terminate command is issued by the controller component  or when the last listener is removed from the field.","Messaging Interface","The messaging interface  enables a service-oriented mode of communicating with the controller component . The messaging interface  is thus less RFID-specific than when accessing the controller API  directly. For example, commands to and data messages from the controller component  are sent as messages. The functions within the messaging interface  are identical to the functions offered in the controller API  and the message formats are based on a physical markup language (PML). Another format that may be implemented is a WLP (Wire-Line Protocol). The messaging interface  transforms the events received from the controller component  into either format using a transformation data processing function. The transformation can be changed by implementing a transformation class and configuring the device controller to use one transformation class or another transformation class.","The messaging interface  also includes a send buffer data processing function. The send buffer data processing function is used for offline situations and\/or when a connection is lost. Events received by the messaging interface  from the controller component  may be temporarily buffered until a connection is established and then the events are sent.","In other example, a separate communication layer (not shown) within the messaging interface  may be used to transfer the messages between the application component  and the RFID controller component . Therefore, the actual communication protocol used to transfer the messages may be switched according to configuration settings. The communication protocol may include Transmission Control Protocol\/Internet Protocol (TCP\/IP) direct socket connection, Hypertext Transfer Protocol (HTTP), or Java messaging service (JMS).","Controller API","The controller API  performs as a high-level programming interface between the controller component  and the application component . The controller API  may be, for example, a high-level Java-based programming interface.","Controller Core","The controller core  is responsible for the main operation of the RFID controller component . The controller core  communicates to one or more RFID interrogators -through the interrogator API . Depending on its configuration, the controller core  can either listen to events coming from the interrogators -directly perform read\/write operations on the RFID tags or do both listening and performing operations.","Referring to , one of the main tasks of the controller core  is to process the data before it is sent through the messaging interface . The type of processing performed on the data depends on the scenario requirements. Therefore, the controller core  is implemented as a flexible framework of classes, called data processing units, that enhances the processing capabilities by adding specific data processing units that implement the required functionality.","A data processing subcomponent  includes subclasses such as a low pass filter data processing unit (DPU) , a batch aggregator DPU , a read field buffer DPU , a selected field enricher DPU  and a writer DPU . The data processing subcomponent  is an abstract class, i.e., there is no instance of this class running, but the subclasses (or DPUs) , , , ,  run.  shows that the DPUs include all the methods\/interfaces. From an external perspective, the DPUs can all be treated similarly and therefore be arranged in any chain desirable. For example, the DPUs may be used to add listeners, remove listeners, handle events, raise events at all registered listeners and may implement the listener interface from the interrogator API .","The DPUs , , , ,  perform one or more of the following functions: reading of additional data from RFID tags through the interrogator API , writing additional data to RFID tags through interrogator API , filtering of events, aggregation of events and buffering of events.","Enrichers","Enrichers read additional data from the tags or possibly other sources and add this data to the data structure of the event. For example, a \u201cSelected Field Enricher\u201d data processing unit  reads the data from selected data fields of the RFID tag and adds this data to the event.","Writers","A writer DPU  writes data to or changes data on the RFID tags. In one exemplary implementation, writer DPU  may change a customer account number on an RFID tag by overwriting one customer number with another customer number.","Filters","Filters remove out certain events according to some criteria, e.g., the filters remove all events coming from RFID tags having a certain class. An example of a filter is a \u201cLow Pass Filter\u201d data processing unit , which buffers events by filtering out false or \u201cdisappeared\u201d events. Another filter is a duplicate filter that processes and removes any duplicates, e.g., if several physical readers see the same tag at the same time, however logically this should be treated as one event since the physical readers logically belong to the same location (e.g., a specific dock door in a warehouse).","Buffers","Buffers store the events for later processing and\/or keep an inventory of RFID tags currently in the field (i.e., radio signal range of the RFID interrogator). For example, a \u201cRead Field Buffer\u201d data processing unit  keeps a list of all RFID tags in the field. This includes tag user data if an enricher has read some additional data before the event was passed to the data processing subcomponent . Events received are forwarded unchanged. In another example, a \u201cSend Buffer\u201d data processing unit  () is used in offline situations. Events received will be temporarily buffered until a connection is established, for example, with a host computer, and then the events are sent. As will be described below, \u201cState Buffer\u201d data processing unit  () stores events to be used later.","Aggregators","Aggregators aggregate several events into a single event, e.g., for batching purposes. For example, a \u201cBatch Aggregator\u201d data processing unit  aggregates several events into a single event. The aggregation is done during a configurable time interval or up to a configurable maximum number of events, whichever comes first. If no events have been received during this interval, no event is forwarded.","The controller core  may handle requests from the application  regarding the operation of the controller component . The controller core  may also manage the RFID interrogators -For example, the controller core  may perform functions including instantiating and initializing one or more interrogators, registering the appropriate data processors as listeners for specific RFID interrogators and explicitly controlling the RFID interrogators.","The controller core  also includes a logging function that is used for debugging and controlling purposes. The controller core  also includes a field name resolution function to resolve logical field names to physical addresses on the RFID tag. For example, a \u201cField Name Mapper\u201d function  maps logical field names to physical addresses on the RFID tag.","Referring to , the data processing units may be selected and configured into a chain to meet a variety of different scenarios. For example, if lights need to be turned on when specific RFID tags are detected or a conveyor belt needs to be controlled, these scenarios can be accomplished by implementing a new data processing unit and linking it into a chain. For example, the data processing units can be configured in a simple chain  of data processing units.","As described above, the RFID interrogator API  may operate in a listening operation mode. In the listening operation mode, the events are passed through the chain  of data processing units. The events processed in chain  are different from the RFID events coming from the interrogator API . While the RFID events coming from the interrogator API  may contain just the ID's of the RFID tags identified, the events from chain  may contain additional tag data that was read or may even be an aggregation of events. If a data processing unit needs additional information from an RFID tag, it retrieves the appropriate data from the interrogator API . Each data processing unit represents a simple component implementing a special function. By combining these simple components into powerful chains, it is possible to build and support the functionality required by a scenario.","An RFID tag event is created when an RFID tag appears or disappears from the radio field. The RFID tags, and thus the associated events, are reported through the interrogator API . The low-pass filter  discards any false events. The aggregator  aggregates the single events into one complex event so that higher-level systems (e.g., application component ) are not flooded with events.","Referring to , the data processing units may be added and reconfigured from a simple chain  to a complex chain  of data processing units to add additional processing and\/or a new processing sequence to an existing system. For example, complex chain  includes data processing units such as a case filter , a pallet filter , a light control , a state buffer  and a send buffer . The complex chain  records events from RFID tags attached to supplies packaged in cases and RFID tags attached to pallets that hold cases.","The case filter  sorts the events coming from cases and the pallet filter  sorts the events coming from pallets. The light control  activates a light after a case or pallet is received. The send buffer  stores the messages to be sent. The state buffer  stores all RFID tags currently in the radio field of the RFID interrogator for auditing and reporting purposes.","For events coming from cases, additional data is read from the RFID tag using the enricher . When a pallet is in the field of an RFID interrogator, the light control  turns on a light to notify workers of a pallet. The events for both the cases and the pallets are aggregated by the aggregator  to build a single event that includes the pallet and all the cases that were put into the pallet. A single pallet-building event is then placed into the send buffer data processing unit  that sends the event message to the application component  (e.g., a business system). The event message remains buffered in the send buffer until it has been successfully sent to the application .","Thus, the RFID controller  provides a flexible mechanism for easy adaptation and configuration thereby lowering the costs for managing and maintaining the whole RFID system . The RFID controller  provides a tool to users to configure their RFID system  by allowing users to select the required data processing units and arranging the data processing units to meet user requirements. Thus, the RFID controller  is flexible to be easily adapted to any scenario, thereby eliminating the need to develop new controller hardware and\/or software for every new RFID scenario.","Administrative Services","Referring back to , the administrative services module  includes a \u201cStatus information\u201d function that replies to status \u201cpings\u201d or lists descriptions of which data processor chains are instantiated and the provision of connection points so that other applications can add their own listeners to the data processors.","The administrative services module  also includes a \u201cheartbeat\u201d function that sends out a heartbeat to registered clients every n seconds. If n is set to zero, or if there are no registered clients, no message will be sent. The administrative services module  further includes a \u201crestart\u201d function that restarts the controller component . The administrative services module  also includes a \u201cconfiguration management\u201d function that sets or retrieves individual configuration parameters as well as saves and restores whole configurations, and includes a \u201cLogging\u201d function that is used for debugging and controlling purposes.","Referring to , an exemplary process for configuring an RFID system is shown as a process . Process  receives a configuration input (). The configuration input includes data processing units arranged in a chain. The configuration input can be entered through a GUI (not shown) located at the application  or at the controller core . The application  may also generate the configuration input based on a set of instructions stored within the application . For example, the configuration input is sent when a new device is detected by the application . The configuration input may also be inputted directly through the administrative services module .","Process  stores the configuration input as a file in the administrative services module  (). Process  validates the configuration input (). The administrative services module  ensures that the connections between the data processing units are valid. Process  receives data from the RFID interrogator (). The data are sent to the data processing subcomponent  for processing. Process  processes the data received from the RFID interrogator using the configuration input ().",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 7","b":["700","600","700","702","704","706","706","710","712","600","714","702","704","600"]},"Process  is not limited to use with the hardware and software of ; it may find applicability in any computing or processing environment and with any type of machine that is capable of running a computer program. Process  may be implemented in hardware, software, or a combination of the two. For example, process  may be implemented in a circuit that includes one, or a combination of, a processor, a memory, programmable logic and logic gates. Process  may be implemented in computer programs executed on programmable computers\/machines that each includes a processor, a storage medium or other article of manufacture that is readable by the processor including volatile and non-volatile memory and\/or storage elements, at least one input device, and one or more output devices. Program code may be applied to data entered using an input device to perform process  and to generate output information.","Each such program may be implemented in a high level procedural or object-oriented programming language to communicate with a computer system. However, the programs also may be implemented in assembly or machine language. The language may be a compiled or an interpreted language. Each computer program may be stored on a storage medium or device e.g., CD-ROM, hard disk, or magnetic diskette that is readable by a general or special purpose programmable computer for configuring and operating the computer when the storage medium or device is read by the computer to perform process . Process  may also be implemented as one or more machine-readable storage media, configured with a computer program(s), where upon execution, instructions in the computer program(s) cause a computer to operate in accordance with process .","Process  is not limited to the specific implementations described herein. For example, process  is not limited to the specific processing order of . Rather, the blocks of  may be reordered as necessary to achieve alternate processing sequences.","In some examples, controller component  may be run as a stand-alone component on a fixed, possibly embedded, personal computer (PC). Controller component  is configured to run autonomously whenever the controller component  is started, i.e., installing it as a service (on Windows NT\/2000) or to run it as a daemon (Linux).","In other examples, controller component  may run on a mobile device as part of an application with a user interface. In still other examples, controller component  functionality may be embedded within an RFID interrogator -","In other examples, controller component  is used in an online operation as well as in an offline operation. While the RFID controller component  usually runs in a connected state, reporting RFID events and data to an associated node , it is also possible to configure the RFID controller component  to deal with intermittent or no connectivity with a host computer.","Multiplex Interrogators","Referring to , RFID controller  may be configured to operate with multiple RFID interrogators through a single RFID interrogator interface, a single interrogator through a single RFID interrogator interface, or a single interrogator with multiple antennas through a single RFID interrogator interface. A class diagram  includes an RFID interrogator abstract class , which contains a definition of a single interrogator interface. The RFID interrogator abstract class  includes a simple RFID interrogator subclass , a multiplexed RFID interrogator subclass  and a micro RFID interrogator subclass . The simple RFID interrogator subclass  is used to connect a single RFID interrogator to a single RFID interrogator interface. The multiplexed interrogator subclass  is used to connect multiple interrogators to a single RFID interrogator interface. The micro RFID interrogator subclass  is used by the multiplexed RFID interrogator subclass  to connect multiple virtual interrogators. Virtual interrogators do not control a physical interrogator directly. For example, virtual interrogators may be separate antennas of a single interrogator.","An RFID listener interface  is an interface that application class  and other applications (not shown) use to receive notifications about RFID tags that have been detected or have been removed from the radio field. RFID listener interface  passes events, e.g., an RFID event , which contains a reference to the RFID interrogator. For example, the reference may include the type of RFID tag detected, the source of the RFID tag and the time the RFID tag was detected.","Referring to , a process  is an example of using an RFID interrogator interface , represented by a simple interrogator class , an application  and an actor . The actor , for example, may be a person or a machine (e.g., a conveyor belt) that transports RFID tags into or out of a radio field.","In process , the application  creates an interrogator object designating interrogator  as the interrogator (). The application  adds itself as an RFID listener to receive messages from the RFID tags (). The application  connects to interrogator interface  to initiate scanning for RFID tags (). The actor  places an RFID tag into the radio field of the interrogator  (). A notification is issued by the interrogator interface  to the application  that an RFID tag has been detected (). For example, the notification includes RFID event . The application  retrieves the source of the RFID information from the notification (). For example, the source is retrieved from RFID event . The application  may thereafter read from the RFID tag () or the application  may write to the RFID tag ().","Referring to , a process  is an example of using an RFID interrogator interface , represented by the multiplex RFID interrogator class , an application , an actor , a first multiplex interrogator interface  and a second multiplex RFID interrogator interface . The first multiplex interrogator interface , associated with a first multiplex interrogator (not shown), and the second multiplex interrogator interface , associated with a second multiplex interrogator (not shown), are each represented by the micro RFID interrogator class .","As will be shown below, the multiplexed RFID interrogator  acts like a proxy or controller for the multiplex RFID interrogators. Commands from the application  are passed directly through to the multiplexed RFID interrogator interfaces  and . Notifications may be sent directly to the application . Alternatively, notifications may also be passed through the interrogator interface . For example, if the interrogator interface  requires updated information about RFID tags.","The application  creates an interrogator object (). The interrogator interface  creates an interrogator object for the first multiplex interrogator () and creates an interrogator object for the second multiplex interrogator. The application  adds itself as an RFID listener of the interrogator (). The command to add the application  as a listener is passed through by the interrogator interface  thereby adding application  as a listener of the first multiplex RFID interrogator () and of the second multiplex interrogator (). Application  connects to interrogator interface  to initiate scanning for the RFID tags (). The interrogator interface  passes commands to initiate scanning of the first multiplex interrogator () and to initiate scanning of the second multiplex interrogator () to the application .","In one example, when the actor  places an RFID tag into the radio field of the first multiplex interrogator (), a notification is issued by the first multiplex interrogator  to the interrogator interface . For example, the notification includes RFID event . Interrogator interface  passes the notification to the application  that an RFID tag has been detected (). The application  may retrieve the source of the RFID signal from the notification (). For example, the source is retrieved from RFID event . The application  may thereafter read from the RFID tag () or the application  may write to the RFID tag ().","Alternatively, when the actor  places an RFID tag into the radio field of the second multiplex interrogator (), a notification is issued by the second multiplex interrogator  directly to the application  that an RFID tag has been detected (). The application  may retrieve the source () from the notification. The application  may thereafter read from the RFID tag () or the application  may write to the RFID tag ().","Referring to , a process  is an example of using an RFID interrogator interface , represented by the multiplex RFID interrogator class , an application , an actor , a first antenna interface  associated with a first antenna (not shown), and a second antenna interface  associated with a second antenna (not shown). The first antenna interface  and the second antenna interface  are each represented by micro RFID interrogator class .","The application  creates an interrogator object (). The interrogator interface  creates an interrogator object for the first antenna () and creates an interrogator object for the second antenna (). The application  adds itself as an RFID listener of the interrogator (). The application  connects to interrogator interface  to initiate scanning for the RFID tags ().","When the actor  places an RFID tag into the radio field of the interrogator (), the interrogator interface analyzes the signal to determine the source (). The interrogator interface  issues a notification to the application  that an RFID tag has been detected (). For example, the notification includes the RFID event . The application  may retrieve the antenna source of the RFID signal from the notification (). For example, the antenna source is retrieved from the RFID event . The application  may read () or write () data to an antenna source. The read or write command is redirected from the antenna source to the interrogator interface  (, ). The redirection (, ) may be accomplished through either a standard read method or alternatively some special method that, for example, may be more efficient or specific to a task (e.g., making some settings to only use a specific antenna before doing the read call).","Referring back to , in multiplexing multiple interrogators or antennas, the applications  and  perform the same actions as application , however the fact that multiple interrogators or antennas are used is hidden from the applications  and  although the applications may retrieve information designating the exact interrogator or antenna detecting an RFID tag.","The above text describes novel apparatus and techniques for controlling RFID systems. It is evident that those skilled in the art may now make numerous modifications and uses of and departures from specific apparatus and techniques herein disclosed without departing from the inventive concepts. Consequently, the invention is to be construed as embracing each and every novel feature and novel combination of features present in or possessed by the apparatus and techniques herein disclosed and limited solely by the spirit and scope of the appended claims.","Other implementations are within the scope of the following claims:"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
