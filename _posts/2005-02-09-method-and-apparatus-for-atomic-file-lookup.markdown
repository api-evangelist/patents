---
title: Method and apparatus for atomic file look-up
abstract: Method and apparatus for atomic file look-up. An atomic look-up operation allows an application to find out whether a file is opened atomically based on whether or not the file path is present in a file system namespace cache. If not, the file open request can be redirected, avoiding or minimizing impacts to the scheduling of various operations involved in executing an application. The request can be redirected by the application to a process that includes blocking point handling. An operating system according to the present invention includes a file system including a file system namespace, and an operating system kernel is operatively connected to the file system. The operating system kernel includes the file system namespace cache and the atomic look-up operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07082424&OS=07082424&RS=07082424
owner: Red Hat, Inc.
number: 07082424
owner_city: Raleigh
owner_country: US
publication_date: 20050209
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","CROSS-REFERENCE TO COMPUTER PROGRAM LISTING APPENDIX","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF ONE OR MORE EMBODIMENTS"],"p":["This application is a continuation of and claims priority from commonly assigned application Ser. No. 09\/934,659, filed Aug. 22, 2001, now issued U.S. Pat. No. 6,886,004, which claims priority from provisional patent application Ser. No. 60\/227,510, filed Aug. 24, 2000 by the inventor hereof, the entire disclosure of both of which is incorporated herein by reference.","Much of what is disclosed in this application is also disclosed in application Ser. No. 09\/934,658, entitled, \u201cMethod and Apparatus for Handling Communication Requests at a Server Without Context Switching,\u201d now issued U.S. Pat. No. 6,988,142, and Ser. No. 09\/934,738, entitled, \u201cEmbedded Protocol Objects,\u201d both filed on Aug. 22, 2001 and assigned to the assignee of the present application, both of which are incorporated herein by reference.","A portion of the present disclosure is contained in a compact disc, computer program listing appendix. The compact disc contains an MS-DOS file entitled \u201ctux2-full.txt\u201d created on Jun. 15, 2001, of 1,057 kilobytes. The contents of this file are incorporated herein by reference. Any references to \u201cthe appendix\u201d or the like in this specification refer to the file contained on the compact disc.","The contents of this file are subject to copyright protection. The copyright owner has no objection to the reproduction by anyone of the patent document or the appendix as it appears in the Patent and Trademark Office patent files or records, but does not waive any other copyright rights by virtue of this patent application.","The dramatic increase in usage of personal computers, workstations, and servers to perform every sort of daily task in recent decades has meant that the speed at which computer systems operate has become very important. The speed at which a computer system carries out the execution of an application is largely dependent on the speed of the operating system. An operating system in a modern computer system controls and monitors the use of hardware resources and provides programming interfaces to applications.","One process that slows down the performance of an operating system and the applications installed on a computer system is the process of suspending the execution of the operating system to conduct certain input and output (I\/O) related operations. Such a suspension often occurs when files are opened. In order to open a file, an operating system must determine a \u201cpath\u201d to the file by accessing a namespace in the file system. Accessing the namespace in the file system suspends execution of operating system tasks. However, once a file has been accessed the first time, the path for the file is typically cached in memory, so that future accesses of the file, at least for a time, do not cause the operating system to suspend execution of tasks. An operation that does not cause the operating system to suspend the execution of tasks is often referred to as an \u201catomic\u201d operation.","Applications do not have a way, at execution time, of knowing if a file system path is stored in memory or not. An application must simply ask the operating system to open the file. An application developer must simply live with the possibility that a serious performance or scheduling impact will result if the operating system must determine the file path from the file system namespace, and hope that at least in some cases, the opening of the file will be able to proceed atomically.","The present invention provides for an application to find out whether a file is being opened atomically based on whether or not the file path is present in a file system namespace cache. By making use of this feature, an application developer can design an application to determine ahead of time if the file operation will cause the task execution to be interrupted, and react accordingly. In many cases, if the file cannot be opened atomically, the application can be designed to redirect the file operation request to another process, which may include blocking point handling. Through the use of this feature, impacts to the scheduling of various operations involved in executing an application can be minimized or avoided.","According to one embodiment of the invention, an operating system includes a kernel, a user space, and a file system. The operating system responds to file operation requests relative to a specific file received from an application by determining if a file path corresponding to the specific file is stored in a file system namespace cache. The operating system notifies the application that the file operation was not, could not, or is not being performed atomically if the file path is not stored in the file system namespace cache. If the file cannot be opened atomically, the application can redirect the request. The request can be redirected by the application to a process that includes blocking point handling. The blocking point handling can be either in the kernel or in the user space. If the file path is cached in the file system namespace cache, the file operation is performed, for example, the file is simply opened, and the application is notified that the file has been opened atomically so that the file can be used without a scheduling impact.","In one embodiment, an operating system according to the present invention includes a file system including a file system namespace, and a user space operatively connected to the file system namespace. The user space is operative to enable the execution of at least one application. An operating system kernel is operatively connected to the user space and the file system.","The operating system kernel includes the file system namespace cache for caching file paths from the file system namespace. The operating system kernel also includes what is referred to herein as an atomic look-up operation. The atomic look-up operation is the function that is called when an application seeks to open a file, or perform a similar file operation. The atomic look-up operation determines if the specific file path corresponding to a file is stored in the file system name-space cache. If the file path is not stored in the cache, the atomic look-up operation notifies the application that the specific file was not opened atomically and the application can handle the situation appropriately.","In example embodiments of the invention, computer program code is used to implement many aspects of the invention. The computer program can be stored on a medium. The medium can be magnetic, such as a diskette, tape, or fixed disk, or optical, such as a CD-ROM or DVD-ROM. The computer program code can also be stored in a semiconductor device. Additionally, the computer program can be supplied via the Internet or some other type of network. A workstation or computer system that is connected to a network typically runs the computer program code supplied as part of a computer program product. This computer system can also be called a \u201cprogram execution system\u201d or \u201cinstruction execution system.\u201d The computer program code in combination with the computer system and measurement system forms the means to execute the method of the invention.","The present invention is typically embodied in computer software or a computer program product. It should be understood that not every feature of the software described is necessary to implement the invention as claimed in any particular one of the appended claims. The complete software product is described rather to fully enable the invention. It should also be understood that throughout this disclosure, where a software process or method is shown or described, the steps of the method may be performed in any order or simultaneously, unless it is clear from the context that one step depends on another being performed first.","The embodiments of the present invention described are implemented in a computing platform based on the computer operating system commonly known as \u201cLinux\u201d that is available as open source directly over the Internet. Linux is also available through various vendors who provide service and support for the Linux operating system. Among these vendors are Red Hat, Inc., of Research Triangle Park, N.C., the assignee of the present invention. An example of computer program code in patch format that implements the invention is included in the appendix, and its use will be discussed later. Certain, more brief code samples are included in this specification to illustrate specific concepts where discussed. All of these examples will be readily understood by those of ordinary skill in the art. It will also be understood that Linux examples are shown for illustrative purposes only. The inventive concepts described herein can be adapted to any computing platform based on any operating system, including those based on Macintosh\u2122, Unix\u2122 and Windows\u2122.","Finally, it should be understood the several block diagrams and flowcharts which are used to illustrate the inventive concepts are not mutually exclusive. Rather, each one has been tailored to illustrate a specific concept discussed. In many cases, the elements or steps shown in a particular drawing co-exist with others shown in a different drawing, but only certain elements or steps are shown for clarity. For example, the block diagrams of  both show elements within an operating system kernel and user space. In actual software, all of the elements in both the drawings might be present. However, only the ones relevant to a particular feature are shown in each drawing for clarity.","Turning to , a block diagram is presented that illustrates various elements of a software system having an operating system kernel, , and a user space, . The features that are illustrated by  are important to a computer platform or instruction execution system to be used as a server, and so the software system of  can be referred to as a \u201cserver system.\u201d The operating system kernel, or simply, \u201cthe kernel\u201d is the part of the operating system software that handles hardware resources, provides fundamental functionality, and provides fundamental programming interfaces to applications. Such a programming interface is often referred to as an \u201capplication programming interface\u201d or \u201cAPI.\u201d In the present embodiment of the invention, the operating system kernel, , includes the capability to maintain a communication protocol stack through the use of an in-kernel, application protocol subsystem, . It is important to distinguish an application protocol such as HTTP or FTP from lower level protocols such as TCP\/IP. Trusted protocol modules  are also included in the kernel and provide application protocol information and functionality to the protocol subsystem, . The protocols involved can be HTTP, FTP, or any other application protocol used for network communications, including so-called \u201cmeta application protocols\u201d such as extended markup language (XML) and hypertext markup language (HTML), which use HTTP. It is to be understood that references to HTTP included herein are meant to include HTML and XML. A generic operating system cache, , also resides in the kernel and can be used to cache files or pages of information. Finally, a protocol object cache, , is also in the kernel and is operatively connected to protocol subsystem . The protocol object cache can be important to certain features of the software system to be discussed later. Note that, as shown in , the protocol subsystem in this example embodiment provides a direct common gateway interface (CGI) and transparent socket redirection.","It cannot be overemphasized that the operating system architecture discussed with  (and that discussed later with reference to ) are representative examples. Some operating systems allow certain applications to be run in kernel space, but others to be run in user space. It is also possible in some circumstances for an application to run in both places, with some code running in kernel space, and other code running in user space.","User space  of  contains untrusted modules or other executables, . It is beneficial at this point to explain what is meant by \u201ctrusted\u201d vs. \u201cuntrusted\u201d software modules. As is known by those skilled in the art, most modern operating systems are designed so that applications or the software modules residing in user space are in a \u201csandbox\u201d of sorts. This sandbox guarantees that modules in the operating system cannot be corrupted or adversely affected by what goes on in user space. This concept is implemented by the designing the operating system so that modules in user space are considered \u201cuntrusted\u201d such that their access to operating system functions is limited. Modules inside the operating system kernel, by contrast, are \u201ctrusted\u201d and have full access to operating system functions. In this example embodiment of the invention, high-level, communication protocol applications can reside as trusted modules inside the operating system kernel. These in-kernel protocol modules and the in-kernel protocol subsystem enable a server system to respond to application protocol requests without the operating system switching contexts. It is important to note that not all operating systems have a separate user space. Some operating systems execute applications within the operating system kernel space. In these cases however, the functional relationship between the operating system and the application is the same. The operating system handles hardware and provides API's, and the application uses an API to perform application tasks.","Operations in a computer system that do not cause context switching or any other processing schedule interruptions are often referred to as \u201catomic\u201d operations. With the architecture just described, communications applications can do what would normally be \u201cnon-atomic\u201d work without context switching. When a response needs to be generated, information about the application protocol request is stored in an in-memory, in-kernel request structure which enables the kernel to resume execution once a commensurate user space request structure is updated as if the response has already taken place. An example request structure for an HTTP request is shown below. In this particular case, the user request structure is shown; however, the kernel request structure is very similar, and can be easily derived from the user space request structure.",{"@attributes":{"id":"p-0027","num":"0026"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct user_req_s {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int version_major;"]},{"entry":[{},"int version_minor;"]},{"entry":[{},"int version_patch;"]},{"entry":[{},"int http_version;"]},{"entry":[{},"int http_method;"]},{"entry":[{},"int sock;"]},{"entry":[{},"int event;"]},{"entry":[{},"int thread_nr;"]},{"entry":[{},"void *id;"]},{"entry":[{},"void *priv;"]},{"entry":[{},"int http_status;"]},{"entry":[{},"int bytes_sent;"]},{"entry":[{},"char *object_addr;"]},{"entry":[{},"int module_index;"]},{"entry":[{},"char modulename[MAX_MODULENAME_LEN];"]},{"entry":[{},"unsigned int client_host;"]},{"entry":[{},"unsigned int objectlen;"]},{"entry":[{},"char query[MAX_URI_LEN];"]},{"entry":[{},"char objectname[MAX_URI_LEN];"]},{"entry":[{},"unsigned int cookies_len;"]},{"entry":[{},"char cookies[MAX_COOKIE_LEN];"]},{"entry":[{},"char content_type[MAX_FIELD_LEN];"]},{"entry":[{},"char user_agent[MAX_FIELD_LEN];"]},{"entry":[{},"char accept[MAX_FIELD_LEN];"]},{"entry":[{},"char accept_charset[MAX_FIELD_LEN];"]},{"entry":[{},"char accept_encoding[MAX_FIELD_LEN];"]},{"entry":[{},"char accept_language[MAX_FIELD_LEN];"]},{"entry":[{},"char cache_control[MAX_FIELD_LEN];"]},{"entry":[{},"char if_modified_since[MAX_FIELD_LEN];"]},{"entry":[{},"char negotiate[MAX_FIELD_LEN];"]},{"entry":[{},"char pragma[MAX_FIELD_LEN];"]},{"entry":[{},"char referer[MAX_FIELD_LEN];"]},{"entry":[{},"char *post_data;"]},{"entry":[{},"char new_date[DATE_LEN];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} user_req_t;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["201","202","203","204","205","206","207","208"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["105","301"]},{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GET \/ HTTP\/1.0"]},{"entry":[{},"\u2003User-Agent: Wget\/1.6"]},{"entry":[{},"\u2003Host: www.redhat.com"]},{"entry":[{},"\u2003Accept: *\/*"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"302"},{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 200 OK"]},{"entry":[{},"\u2002\u2009Date: Tue, 03 Jul 2001 10:45:31 GMT"]},{"entry":[{},"\u2002\u2009Server: Apache\/1.3.19 (Unix) \u2003(Red-Hat\/Linux) mod_ssl\/2.8.1"]},{"entry":[{},"OpenSSL\/0.9.5a"]},{"entry":[{},"\u2002\u2009Connection: close"]},{"entry":[{},"\u2002\u2009Content-Type: text\/html"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"At step  the optional dynamic portions of the reply page are created within a memory buffer on the server. The dynamic portions are made up of dynamic protocol objects, which form part of the reply. The reply can also have static protocol objects embedded within. The dynamic protocol objects are sent to the client application at step . At step  the static parts of the reply page, or static protocol objects are retrieved from the protocol object cache or the generic operating system cache. The static objects are sent to the client application at step , where they are embedded in the reply so that a complete reply can be displayed at the client system",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 4","FIG. 4"],"b":["400","401","402","400","403"]},"Note that the file system object name or file name is a string of characters which do not include the separator character, for example, \u201chomework.doc\u201d. Every file system object has a file system object name. A file system object path or \u201cfile path\u201d however is a string of characters which usually start with the separator character, and specify various parts of a path which will locate the file. In some systems this file path can also be called a directory path or folder path, for example, \u201c\/home\/joe\/docs\/homework.doc\u201d.","The file system of  also includes the file system namespace, . The file system namespace refers to all file paths within the system. The paths for all the files are typically stored on the file system device in the form of directories. The user space, , shown in  is where applications  typically reside. These applications make use of the file system objects, , that are kept within file system . In order to make use of a not-yet-used file, the application and operating system perform a file system namespace operation. Such an operation is performed, for example, to open, read or write to a file, rename a file, or move it between directories. There are other, well-known file system namespace operations as well. For purposes of this disclosure, any of these file system namespace operations are generically referred to as \u201copening a file\u201d, processing a \u201cfile open request\u201d, performing a file operation, or the like. In the prior art, if an application wanted to read the first 1000 bytes of the \u201c\/home\/joe\/docs\/homework.doc\u201d file, it would contain computer program code similar to what is shown in the following C example.",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"fd = open(\u201c\/home\/joe\/docs\/homework.doc\u201d, O_RDONLY);"]},{"entry":[{},"read(fd, buf, 1000);"]},{"entry":[{},"close(fd);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The operating system kernel includes a file system namespace cache, . The \u201copen\u201d system-call, as shown above, will access the file system name-space cache internally, to speed up access to files, once their path is stored in the file system namespace cache. The file system name space cache is also sometimes called a \u201cdentry cache\u201d. Note that the namespace cache does not cache file contents. It might cache file attributes. File contents are cached in a separate data structure, such as the generic cache shown in , often called the \u201cpage cache\u201d, as is well-known and has been omitted from  for clarity.","In the prior art as illustrated above, the kernel will get to the file whatever it takes in terms of time and resources, and it is transparent to the application whether the file path with the file name was already present in the namespace cache or not. If not, the kernel would read file path details from disk, and the processing associated with the application will be suspended and context switches occur until that I\/O has finished, creating a serious performance impact.","In contrast to the prior art just described, the system of  includes an atomic look-up operation, , which implements the atomic file look-up according to this embodiment of the invention. The atomic file lookup empowers an application, , to detect whether a file is already cached within the namespace cache, or not. The following code shows how the feature is used in practice.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"fd = open(\u201c\/home\/joe\/docs\/homework.doc\u201d, O_RDONLY |"},{"entry":"O_ATOMICLOOKUP);"},{"entry":"if (fd == -EWOULDBLOCKIO) {"},{"entry":"\u2003\u2003\/*"},{"entry":"\u2003\u2003\u2002* The file name was not yet cached, bounce this open( )to another"},{"entry":"\u2003\u2003\u2002* process:"},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003\u2002return \u22121;"},{"entry":"}"},{"entry":"read(fd, buf, 1000);"},{"entry":"close(fd);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The blocking point handling process can reside in the user space at  of , or in the kernel at  of . A \u201cblocking point\u201d is a point where a lookup would cause a possible context switch. \u201cHandling the blocking point\u201d might involve bouncing this lookup to another process\/thread, which can manage the file open in a way that improves performance.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["501","502","500","503","504","505","506","505","507"]},"Note that in this embodiment, the application does not send an inquiry as to whether the file path is cached. It simply notifies the operating system kernel that it wants to open a file atomically. If the kernel can comply because the file path is cached, the file is opened and a handle is returned to the application. If the file path is not cached, then the file is not opened, and -EWOULDBLOCKIO is returned to the application. With respect to the discussion herein of this feature, the terminology \u201cwas opened\u201d, \u201ccould be opened\u201d, \u201cis being opened\u201d and the like is used interchangeably. Likewise, the terminology regarding a file operation such as \u201cwas performed\u201d, \u201cis being performed\u201d, \u201ccould be performed\u201d and the like is used interchangeably. The operation of the invention is the same regardless of the exact timing of the checking of the cache, the file opening, and the notification from the operating system kernel to an application.","There are many variations of the operating system architecture described above, any of which, can also include the atomic look-up operation. For example, the file system device does not have to reside on the computer system that is maintaining the operating system kernel, but can instead be accessed over a network. In this case, the file system namespace and be located with the networked file system device, located on the system that is maintaining the operating system kernel, or distributed in both places. It is also important to note that not all operating system environments have a user space as a separate protection domain. In some operating systems, for example, those commonly used with embedded processors, applications are maintained and executed within the operating system kernel. In this case, the operating system still provides API's for applications, and the operating system still communicates with an application through its API, just the same as if the application were running in a user space.","Included at the end of this specification before the claims is one example of a source code listing showing code that implements the atomic look-up feature. This source code listing is entitled, \u201cSource Code Listing Submitted as Part of the Specification.\u201d The source code is in the well-known differential patch format. It patches the publicly available version 2.4.2 of the Linux operating system, an open source operating system that can be acquired over the Internet, and from companies that provide support for it, such as Red Hat, Inc., the assignee of the present application. The code contained in the source code appendix for the present application, discussed below, also implements the atomic look-up feature.","As previously discussed, in some embodiments, the invention is implemented through computer program code operating on a programmable computer system or instruction execution system such as a personal computer or workstation, or other microprocessor-based platform.  illustrates further detail of a computer system that is implementing the invention in this way. System bus  interconnects the major components. The system is controlled by microprocessor , which serves as the central processing unit (CPU) for the system. System memory  is typically divided into multiple types of memory or memory areas such as read-only memory (ROM), random-access memory (RAM) and others. The system memory may also contain a basic input\/output system (BIOS). A plurality of general input\/output (I\/O) adapters or devices, , are present. Only three are shown for clarity. These connect to various devices including a fixed disk drive, , a diskette drive, , network, , and a display, . Computer program code instructions for implementing the functions of the invention are stored on the fixed disk, . When the system is operating, the instructions are partially loaded into memory,  and executed by microprocessor . Optionally, one of the I\/O devices is a network adapter or modem for connection to network, , which may be the Internet. It should be noted that the system of  is meant as an illustrative example only. Numerous types of general-purpose computer systems are available and can be used.","Elements of the invention may be embodied in hardware and\/or software as a computer program code (including firmware, resident software, microcode, etc.). Furthermore, the invention may take the form of a computer program product on a computer-usable or computer-readable storage medium having computer-usable or computer-readable program code embodied in the medium for use by or in connection with an instruction execution system such as that shown in . Such a medium is illustrated graphically in  to represent the diskette drive. A computer-usable or computer-readable medium may be any medium that can contain, store, communicate, or transport the program for use by or in connection with an instruction execution system. The computer-usable or computer-readable medium, for example, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system. The medium may also be simply a stream of information being retrieved when the computer program product is \u201cdownloaded\u201d through a network such as the Internet. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which a program is printed.","The appendix to this application includes source code in differential patch format that implements the features described in this specification. The source code is intended to patch a version of the Linux operating system, an open source operating system that can be acquired over the Internet, and from companies that provide support for it, such as Red Hat, Inc., the assignee of the present application. The code is intended to patch version 2.4.5 of the Linux operating system, which has already been patched by the well-known, so-called, \u201cac4\u201d patch. Version 2.4.5 of Linux is available, among other places, at: www.kernel.org\/pub\/linux\/kernel\/v2.4\/linux-2.4.5.tar.gz. The above-mentioned ac4 patch is available, among other places, at: www.kernel.org\/pub\/linux\/kernel\/people\/alan\/2.4\/patch-2.4.5-ac4.gz. A copy of a Linux operating system that includes all the features described herein can be constructed by downloading the files mentioned above, and entering, on a Linux system:",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"tar xzf linux-2.4.5.tar.gz"]},{"entry":[{},"\u2003 gzip -d patch-2.4.5-ac4.gz"]},{"entry":[{},"\u2003 cd linux"]},{"entry":[{},"\u2003 patch -p1 < ..\/patch-2.4.5-ac4"]},{"entry":[{},"\u2003 cd .."]},{"entry":[{},"\u2003 patch -p0 < tux2-full.txt"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Specific embodiments of an invention are described herein. One of ordinary skill in the computing arts will quickly recognize that the invention has other applications in other environments. In fact, many embodiments and implementations are possible. The following claims are in no way intended to limit the scope of the invention to the specific embodiments described above.",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SOURCE CODE LISTING SUBMITTED AS"},{"entry":"PART OF THE SPECIFICATION"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2212\u2212\u2212 linux\/fs\/namei.c.origTue Apr 17 13:18:46 2001"},{"entry":"+++ linux\/fs\/namei.c Tue Apr 17 13:18:52 2001"},{"entry":"@@ \u2212423,9 +423,13 @@"},{"entry":"\u2002{"},{"entry":"\u2003\u2003struct dentry *dentry;"},{"entry":"\u2003\u2003struct inode *inode;"},{"entry":"\u2212\u2003\u2002int err;"},{"entry":"+\u2003\u2002int err, atomic;"},{"entry":"\u2003\u2003unsigned int lookup_flags = nd->flags;"},{"entry":"+\u2003\u2002atomic = 0;"},{"entry":"+\u2003\u2002if (lookup_flags & LOOKUP_ATOMIC)"},{"entry":"+\u2003\u2003\u2003\u2002atomic = 1;"},{"entry":"+"},{"entry":"\u2003\u2003while (*name==\u2018\/\u2019)"},{"entry":"\u2003\u2003\u2003\u2003name++;"},{"entry":"\u2003\u2003if (!*name)"},{"entry":"@@ \u2212494,6 +498,9 @@"},{"entry":"\u2003\u2003\u2003\u2003\/* This does the actual lookups.. *\/"},{"entry":"\u2003\u2003\u2003\u2003dentry = cached_lookup(nd->dentry, &this,"},{"entry":"\u2003\u2003\u2003\u2003LOOKUP_CONTINUE);"},{"entry":"\u2003\u2003\u2003\u2003if (!dentry) {"},{"entry":"+\u2003\u2003\u2003\u2003\u2003\u2002err = -EWOULDBLOCKIO;"},{"entry":"+\u2003\u2003\u2003\u2003\u2003\u2002if (atomic)"},{"entry":"+\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002break;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003dentry = real_lookup(nd->dentry, &this,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003LOOKUP_CONTINUE);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003err = PTR_ERR(dentry);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if (IS_ERR(dentry))"},{"entry":"@@ \u2212557,6 +564,9 @@"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003dentry = cached_lookup(nd->dentry, &this, 0);"},{"entry":"\u2003\u2003\u2003\u2003if (!dentry) {"},{"entry":"+\u2003\u2003\u2003\u2003\u2003\u2002err = -EWOULDBLOCKIO;"},{"entry":"+\u2003\u2003\u2003\u2003\u2003\u2002if (atomic)"},{"entry":"+\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002break;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003dentry = real_lookup(nd->dentry, &this, 0);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003err = PTR_ERR(dentry);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if (IS_ERR(dentry))"},{"entry":"@@ \u2212891,6 +901,8 @@"},{"entry":"\u2003\u2003if (f & O_DIRECTORY)"},{"entry":"\u2003\u2003\u2003\u2003retval |= LOOKUP_DIRECTORY;"},{"entry":"+\u2003\u2002if (f & O_ATOMICLOOKUP)"},{"entry":"+\u2003\u2003\u2003\u2002retval |= LOOKUP_ATOMIC;"},{"entry":"\u2003\u2003return retval;"},{"entry":"\u2002}"},{"entry":"\u2212\u2212\u2212 linux\/include\/linux\/fs.h.orig Tue Apr 17 13:18:51 2001"},{"entry":"+++ linux\/include\/linux\/fs.h Tue Apr 17 13:18:52 2001"},{"entry":"@@ \u22121203,6 +1203,7 @@"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2002#define LOOKUP_POSITIVE","(8)"]},{"entry":["\u2002#define LOOKUP_PARENT","(16)"]},{"entry":["\u2002#define LOOKUP_NOALT","(32)"]},{"entry":["+#define LOOKUP_ATOMIC","(64)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2002\/*"},{"entry":"\u2002\u2002* Type of the last component on LOOKUP_PARENT"},{"entry":"\u2002\u2002*\/"},{"entry":"\u2212\u2212\u2212 linux\/include\/asm-i386\/fcntl.h.orig \u2003Fri Sep 22 23:21:19 2000"},{"entry":"+++ linux\/include\/asm-i386\/fcntl.h \u2003\u2002Tue Apr 17 13:18:52 2001"},{"entry":"@@ \u221220,6 +20,7 @@"},{"entry":"\u2002#define O_LARGEFILE 0100000"},{"entry":"\u2002#define O_DIRECTORY 0200000 \u2009\/* must be a directory *\/"},{"entry":"\u2002#define O_NOFOLLOW \u20090400000 \/* don't follow links *\/"},{"entry":"+#define O_ATOMICLOOKUP \u200201000000 \/* do atomic file lookup *\/"},{"entry":"\u2002#define F_DUPFD \u2003\u20030 \u2002\/* dup *\/"},{"entry":"\u2002#define F_GETFD \u2003\u20031 \u2002\/* get close_on_exec *\/"},{"entry":"\u2212\u2212\u2212 linux\/include\/asm-alpha\/fcntl.h.orig Sun Oct 8 18:04:04 2000"},{"entry":"+++ linux\/include\/asm-alpha\/fcntl.h Tue Apr 17 13:18:52 2001"},{"entry":"@@ \u221221,6 +21,8 @@"},{"entry":"\u2002#define O_DIRECTORY 0100000 \u2009\/* must be a directory *\/"},{"entry":"\u2002#define O_NOFOLLOW \u20090200000 \/* don't follow links *\/"},{"entry":"\u2002#define O_LARGEFILE 0400000 \/* set by the kernel on every open *\/"},{"entry":"+#define O_ATOMICLOOKUP \u200201000000 \/* do atomic file lookup *\/"},{"entry":"+"},{"entry":"\u2002#define F_DUPFD \u2003\u20030 \u2002\/* dup *\/"},{"entry":"\u2002#define F_GETFD \u2003\u20031 \u2002\/* get close_on_exec *\/"},{"entry":"\u2212\u2212\u2212 linux\/include\/asm-sparc\/fcntl.h.orig \u2003\u2002Tue Oct 10 19:33:52 2000"},{"entry":"+++ linux\/include\/asm-sparc\/fcntl.h Tue Apr 17 13:18:52 2001"},{"entry":"@@ \u221220,6 +20,7 @@"},{"entry":"\u2002#define O_DIRECTORY 0x10000 \/* must be a directory *\/"},{"entry":"\u2002#define O_NOFOLLOW \u20090x20000 \/* don't follow links *\/"},{"entry":"\u2002#define O_LARGEFILE 0x40000"},{"entry":"+#define O_ATOMICLOOKUP \u20020x80000 \/* do atomic file lookup *\/"},{"entry":"\u2002#define F_DUPFD \u2003\u20030 \u2002\/* dup *\/"},{"entry":"\u2002#define F_GETFD \u2003\u20031 \u2002\/* get close_on_exec *\/"},{"entry":"\u2212\u2212\u2212 linux\/include\/asm-sparc64\/fcntl.h.orig Tue Oct 10 19:33:52 2000"},{"entry":"+++ linux\/include\/asm-sparc64\/fcntl.h Tue Apr 17 13:18:52 2001"},{"entry":"@@ \u221220,6 +20,7 @@"},{"entry":"\u2002#define O_DIRECTORY 0x10000 \u2009\/* must be a directory *\/"},{"entry":"\u2002#define O_NOFOLLOW \u20090x20000 \/* don't follow links *\/"},{"entry":"\u2002#define O_LARGEFILE 0x40000"},{"entry":"+#define O_ATOMICLOOKUP 0x80000 \/* do atomic file lookup *\/"},{"entry":"\u2002#define F_DUPFD \u2003\u20030 \u2002\/* dup *\/"},{"entry":"\u2002#define F_GETFD \u2003\u20031 \u2002\/* get close_on_exec *\/"},{"entry":"\u2212\u2212\u2212 linux\/include\/asm-ia64\/fcntl.h.orig \u2003\u2002Tue Oct 10 02:54:58 2000"},{"entry":"+++ linux\/include\/asm-ia64\/fcntl.h \u2003\u2003Tue Apr 17 13:18:52 2001"},{"entry":"@@ \u221228,6 +28,7 @@"},{"entry":"\u2002#define O_LARGEFILE 0100000"},{"entry":"\u2002#define O_DIRECTORY 0200000 \u2009\/* must be a directory *\/"},{"entry":"\u2002#define O_NOFOLLOW \u20090400000 \/* don't follow links *\/"},{"entry":"+#define O_ATOMICLOOKUP 01000000 \/* do atomic file lookup *\/"},{"entry":"\u2002#define F_DUPFD \u2003\u20030 \u2002\/* dup *\/"},{"entry":"\u2002#define F_GETFD \u2003\u20031 \u2002\/* get close_on_exec *\/"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
