---
title: System and method for enabling efficient multi-protocol database transaction processing
abstract: A system provides efficient multi-protocol database transaction processing in a multi-communications protocol and multi-programming model computing environment. The system separates the source and the target functionalities, and uses generic function names linked to function pointers, in order to permit the source layer to call embedded functions in the target layer. As an example, the system provides a source layer code path that includes embedded call-back functions and embedded generic function names. A target layer code path is set to include embedded functions and generic call-back function names. A function pointer array permits the source layer code path to call functions embedded in the target layer code path using the generic function names. A call-back function pointer array permits the target layer code path to call the call-back functions embedded in the source layer code path using the generic call-back function names.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07076489&OS=07076489&RS=07076489
owner: International Business Machines Corporation
number: 07076489
owner_city: Armonk
owner_country: US
publication_date: 20030314
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["PRIORITY CLAIM","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The present application claims the priority of Canadian patent application, Serial No. 2,408,474, titled \u201cApparatus And Method For Enabling Efficient Multi-Protocol Database Transaction Processing,\u201d which was filed on Oct. 17, 2002, and which is incorporated herein by reference.","The present invention relates to database transaction processing, and in particular, to an system and associated method for enabling database transaction processing of different data, which conform to different protocols and application programming interfaces, to be efficiently processed by a transaction processor.","Databases are repositories of information that are used in every sector of the economy to provide access to information. There are numerous kinds of databases, many different organizations of the data they contain, many different ways in which that the data can be indexed and retrieved, and many different data models for storing and retrieving the information.","Part of the reason for the wide and growing use of databases is that databases can be accessed in many ways to support many different operations. Application programming interfaces (APIs) have been designed to enable substantially any program to access a database during execution. As well, worldwide web browsers can access databases using active server pages, etc. The combined effect of the numerous and growing different mechanisms for accessing databases is a substantial increase in demand for databases. However, a plurality of interface types are required because of the many and growing number of diverse access mechanisms and corresponding programming models, protocols, data formats, etc.","Structured query language (SQL) is an example of an open standard for permitting access to different databases. While SQL provides a framework for database transactions, a number of implementations, protocol drivers, and communications protocols may be used to instantiate SQL requests. Furthermore other competing programming models, languages, protocols, and implementations may have respective merits for providing simplicity, efficiency, or other desirable qualities in respective computing environments. Importantly, new access techniques are being developed. Consequently, database access systems generally have to be rewritten to permit new functionality for these new access techniques. Rewriting database access systems is very expensive and time consuming.","While methods for incorporating multiple protocol and programming model layers in a database system are known, these are generally inefficient. One solution is to provide a respective code path for each pair of receive and transmit layers so that a particular type of interface is effected using the respective code paths. While this solution may facilitate addition of an interface type, this multifaceted approach contributes significantly to the complexity of the programs used to enable these interfaces.","Furthermore, whenever one aspect of one of the receive or transmit layers has to be upgraded, all of the code paths have to be independently upgraded, and addition of one type of receive or transmit layer, hereinafter respectively referred to as the source and target layers, requires the addition of code paths for each of the source and target layer pairs. In accordance with another solution, a neutral internal language is used, and all source layers are translated into the neutral language, which is then translated into respective target layer formats.","While this is an improvement over the multiple code paths, large amounts of memory are consumed because all of the data has to be stored multiple times to format and reformat the data. The memory provision becomes expensive in high volume database servers and other computers that perform database transaction processing.","Therefore, there exists a need for an apparatus and method for enabling more efficient handling of database transaction processing that permits independence between source and target layers but does not require duplication of transaction data during processing. The need for such a system has heretofore remained unsatisfied.","The present invention satisfies this need, and presents a system, a computer program product, and associated method (collectively referred to herein as \u201cthe system\u201d or \u201cthe present system\u201d) for enabling efficient handling of database transaction processing while separating source and target layers in a multi-communications protocol and multi-programming model computing environment.","It is a feature of the present system to provide client and server computers for enabling efficient handling of database transaction processing in a multi-communications protocol and multi-programming model computing environment.","The present system therefore provides a method for providing a computing machine for processing database transactions in a multi-communications protocol and multi-programming model computing environment. The method comprises the step of providing a source layer code path that includes embedded call-back functions and embedded generic function names.","A target layer code path that includes embedded functions and embedded generic call-back function names is also provided. A function pointer array is provided to permit the source layer code path to call functions embedded in the target layer code path using the generic function names. A call-back function pointer array is also provided to permit the target layer code path to call the call-back functions embedded in the source layer code path using the generic call-back function names.","The method further comprises the step of linking respective call-back function pointers to corresponding call-back functions embedded in the source layer code path, and respective function pointers to corresponding functions embedded in the target layer code path. At run time, the generic function names are linked to function pointers in the function pointer array and the call-back function names are linked to call-back function pointers in the call-back function pointer array.","On client computing machines, a client source layer code path is provided for each programming model, and a client target layer code path is provided for each communications protocol used in the multi-communications protocol and multi-programming computing environment.","On server computing machines, a server source layer code path is provided for each communications protocol, and a server target layer code path is provided for each programming model used in the multi-communications protocol and multi-programming model computing environment.","The present system further provides a computer-readable memory for enabling the processing of database transactions in a multi-communications protocol and multi-programming model computing environment. The computer-readable memory comprises a source layer code path including embedded call-back functions and embedded generic function names for calling embedded functions in a target layer code path. The target layer code path includes the embedded functions and embedded generic call-back function names for calling the embedded call-back functions in the source layer. A function pointer array is linked to the embedded functions in the target layer code path to permit the source layer code path to call the functions embedded in the target layer code path using the generic function names. A call-back function pointer array is linked to the embedded call-back functions in the source layer to permit the target layer code path to call the call-back functions embedded in the source layer code path using the generic call-back function names embedded in the target layer.","The present system further provides a client computer adapted to permit a user to request information from a database in a multi-communications protocol and multi-programming model computing environment. The client computer comprises a source layer code path adapted to receive a database request from the user. This source layer code path includes embedded call-back functions and embedded generic function names for calling embedded functions in a target layer code path adapted to format and send the database request to a database server computer in the computing environment.","The target layer code path includes the embedded functions and embedded generic call-back function names for calling the embedded call-back functions in the source layer code path to permit data in the database request to be moved to a communications buffer. The target layer code path uses this communication buffer to send the database request to the database server computer.","A function pointer array is linked to the embedded functions in the target layer code path to permit the source layer code path to call the functions embedded in the target layer code path using the generic function names embedded in the source layer code path. A call-back function pointer array is linked to the embedded call-back functions in the source layer to permit the target layer code path to call the call-back functions embedded in the source layer code path using the generic call-back function names embedded in the target layer.","The present system also provides a server computer adapted to respond to the client request for information from the database. A source layer code path is adapted to receive database requests from the client computer. This source layer code path includes embedded call-back functions and embedded generic function names for calling embedded functions in a target layer code path adapted to retrieve information requested by the database request from the database.","The target layer code path includes the embedded functions and embedded generic call-back function names for calling the embedded call-back functions in the source layer to permit data in a database response to be moved to a communications buffer. The source layer code path uses this communications buffer to return the database response to the client computer.","A function pointer array is linked to the embedded functions in the target layer code path to permit the source layer code path to call the functions embedded in the target layer code path using the generic function names. A call-back function pointer array is linked to the embedded call-back functions in the source layer code path to permit the target layer code path to call the call-back functions embedded in the source layer code path using the generic call-back function names.","The server computer may comprise a gateway server or a database server. If the server computer is a database server, the target layer code path comprises a database engine.","The following definitions and explanations provide background information pertaining to the technical field of the present invention, and are intended to facilitate the understanding of the present invention without limiting its scope:","API: Application Program Interface, a language and message format used by an application program to communicate with the operating system or some other control program such as a database management system (DBMS) or communications protocol.","Instantiate: In object-oriented technology, to create an object of a specific class.","SQL: Structured Query Language, a standardized query language for requesting information from a database.","The present system provides a method for processing database transaction data in a multi-protocol, multi-programming model environment in a manner that facilitates addition of new access protocols and programming data models. The present system further provides a mechanism for efficiently moving and converting database transaction data between source and target layers of client computers, database servers, and gateway servers.","The present system includes a software programming code or computer program product that is typically embedded within, or installed on a computer. Alternatively, this software programming code can be saved on a suitable storage medium such as a diskette, a CD, a hard drive, or like devices.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 1","FIGS. 1A","FIG. 1A","FIG. 1B"],"b":["1","10","12","14","12","15","14","19","12"]},"The present system provides a source layer  and a target layer  used to enable independence of protocol and programming model-specific functionality, such that modification, addition and deletion of protocols and programming models is enabled. The source layer  and target layer  retain a common set of code paths for invoking protocol and programming model-specific functionality. The term \u201csource\u201d is applied to a layer to indicate that it is nearer in the chain of communication processors to the requester; \u201ctarget\u201d indicates a layer that it is nearer to the database .","Source and target layers ,  in accordance with the present system are instantiated on each of the client computer , gateway server , and DB server .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 2","b":"80"},"The programming models include those associated with respective Structured Query Language (SQL) protocol drivers\/application programming interfaces (APIs), e.g. call level interface (CLI), open database connectivity (ODBC), embedded SQL, java database connectivity (JDBC), activeX data object (ADO), etc. The communications protocols include protocols used for receiving transaction data from other computers, e.g. distributed relational database architecture access server (DRDA\/AS), database  request access\/access server (DB2RA\/AS), etc.","Each of the programming model-specific source layer code paths includes all of the functionality required to receive transaction data from a protocol driver, interpret the transaction data in accordance with the selected programming model, and select, initialize, and call target layer code paths. Accordingly, each source layer code path includes embedded generic function names that are used to call embedded target layer functions. Likewise, call-back functions specific to each supported programming model\/communications protocol pair are embedded in each source layer code path. In addition, each target layer code path includes embedded call-back functions names that are used to call the call-back functions embedded in the corresponding source layer code path, as will be explained below in more detail with reference to  (, B).","In step , the target layers are instantiated by creating a code path for each of the communications protocols. Each target layer includes embedded generic call-back function names for invoking the embedded call-back functions in a corresponding source layer code path and embedded functions invoked by respective generic function names embedded in the respective source layer code paths.","Once the source and target layers are created, a function pointer array is created for each of the target layers and a call-back function pointer array is created for each programming model and communications protocol pair (step ). The respective embedded functions in the target layer are linked to respective corresponding entries in the function pointer array (step ) and respective embedded call-back functions in the source layer are linked to respective corresponding entries in the call-back function pointer array (step ).","At run time, when a connection to a database is instantiated, the generic call-back function names embedded in a target layer code path required for the connection are linked to the call-back function pointers. Likewise, the generic function names embedded in the source layer required for the source program model are linked to the function pointers (step ).",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3A","b":["10","10","16","18","16","16"],"i":["a ","a ","a ","a "]},"The results of a database request are also returned to the user interface application by the source layer . The source layer may be embodied in the user-interface application or in a separate application or set of APIs that the user-interface application invokes. Generally, an application source layer on a client computer provides a user interface that permits a user to request information from a database. The user selects or otherwise indicates desired data. Application programming interfaces (APIs) load the function pointers and instantiate the source layer ","Accordingly, the source layer  comprises a plurality of generic function names and embedded callback functions (ECFs) that the target layer accesses using generic call-back function names. The generic function names are linked to respective entries in a function pointer array that was loaded prior to the invoking of the source layer . The function pointer array points to embedded functions (EFs) of the target layer . Symmetrically, the target layer comprises the embedded functions in addition to generic call-back function names that are used to invoke the embedded call-back functions using a call-back function pointer array ","As previously described, different programming models and communications protocols may be concurrently supported by a computer for processing database transaction data in accordance with the present system. An advantage of the present system is that different source layer code paths can be treated independently, so that, for example, adding a new communications protocol requires creating code path(s) for the new layer(s) with the embedded functions\/call-back functions and associated functions\/call-back function pointer arrays.","As will be understood by those skilled in the art, a transport layer of the client  (not illustrated) provides communication between the client  and the connected server. For example, a socket instantiated by a set of APIs of an application\/protocol driver is supported by a transport layer functionality provided by an operating system of the computer\/server, in a manner well known in the art. Network connection management is performed at the transport layers, and is transparent to the target and higher layers. When a connection is successfully made, a target software layer is associated with the socket (or similar network connection). The target layer is a protocol driver that exchanges data with the server through the connection.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 3B","FIG. 3B","FIG. 3B"],"b":["12","34","16"],"i":["b ","b"]},"These similarly named functional elements include the embedded call-back functions , the generic function names , the function pointer array , the target layer , embedded functions , generic call-back function names and call-back function pointer array . The target layer therefore functions as a database engine. The database engine interacts with the database (DB) to retrieve data and perform data maintenance tasks.","The source layer and target layer code paths respectively inter-operate by invoking functions in their respective counterparts using the embedded generic function names. As is well understood, different programming models and communications protocol may require very different functions and procedures. For example, structured query language (SQL) commands are used in some embodiments to provide functions associated with formatting data in an expressive, standards-based language that permits access to different types of databases. Further commands for transaction management and connection management may be required to perform protocol and programming model-specific functions.",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Generic SQL Function Names"},{"entry":"SQL Function"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"execute"]},{"entry":[{},"fetch"]},{"entry":[{},"open"]},{"entry":[{},"close"]},{"entry":[{},"describe"]},{"entry":[{},"prepare"]},{"entry":[{},"execute immediate"]},{"entry":[{},"excsqlset"]},{"entry":[{},"prepare init"]},{"entry":[{},"prepare fini"]},{"entry":[{},"compile"]},{"entry":[{},"add host vars"]},{"entry":[{},"rebind"]},{"entry":[{},"array input"]},{"entry":[{},"begin atomic chain"]},{"entry":[{},"end chain"]},{"entry":[{},"interrupt"]},{"entry":[{},"call"]},{"entry":[{},"ping"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Table 1 illustrates an example of a set of SQL functions used for creating generic function names in code paths in accordance with the present system. Those skilled in the art will recognize that all of these functions are not defined SQL functions. Specifically \u201cbegin atomic chain\u201d and \u201cend chain\u201d are not in the standard complement of SQL functions. Further extensions to the standard functions may be required or useful depending on changes and developments in database access techniques. The generic function name \u201ccall\u201d is used to invoke utility functions, such as those that permit creation of a database, those for determining a number of procedures in a server's queue, etc.","As will be understood by those skilled in the art, different user interactive applications (and different modes of some user interactive applications) may issue database requests in formats corresponding to different programming models. At a source layer of a client computer, interpretation of a database request is performed by invoking application specific procedures; these application specific procedures are invoked by invoking these generic function names.",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Generic Transaction Management Functions Names"},{"entry":"Transaction Management"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"commit"]},{"entry":[{},"rollback"]},{"entry":[{},"XA recover"]},{"entry":[{},"XA forget"]},{"entry":[{},"XA prepare"]},{"entry":[{},"XA commit"]},{"entry":[{},"XA rollback"]},{"entry":[{},"XA end"]},{"entry":[{},"XA register"]},{"entry":[{},"XA preprocess"]},{"entry":[{},"XA post process"]},{"entry":[{},"XA log"]},{"entry":[{},"TM prepare"]},{"entry":[{},"TM request resync"]},{"entry":[{},"TM add resync"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Transaction management is well understood in the art and is used for ensuring that transactions are completed and logged or rolled back in the event of a failure. Consequently, the data in the database is not changed unless a complete transaction has succeeded, using known techniques for maintaining data integrity. Further it is known that multiple systems for managing transactions can be used concurrently. For example, extended architecture (XA) provides management functions for database transactions that provide excellent control over data, and can be used intermittently with other transaction management functions.",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Generic Connection Management Function Name"},{"entry":"Connection Management"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"connect"]},{"entry":[{},"attach"]},{"entry":[{},"terminate connection"]},{"entry":[{},"terminate attachment"]},{"entry":[{},"switch application"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Managing connections is well understood by those skilled in the art and may require different procedures, depending on the received data used to generate the database transaction. A target layer is created for duration of a network connection. When a source is invoked that is of a different type than a previous source that used the target, the switch application command shown in Table 3 is used to effect the loading of call-back function pointers so that the target correctly handles data it receives from the new source.","The generic call-back function names are used by the target to call call-back functions embedded in the source layer . The call-back functions convert and move transaction data. The data is converted from communication protocols and programming models of source layer and target layer of the computer\/server that processes database transactions.","The computer\/server also moves the data between the source layer and target layer . The source layer on the client side is the user interface application, if the computer is a client , and a network connection communications buffer otherwise. The target layer is the database engine, if the computer\/server is a DB server, and a communications buffer on the client side.","The data received from the source layer is converted into a format that corresponds to the target layer communication protocol and programming model. Equally, response data received from the communications buffer is returned to the source layer with conversion, using call-back function pointers.","Programming models and communications protocols of transaction data, in accordance with the present system, are governed by such established standards as communication protocols, data types, character codes, and data structure formats that are used for the interpretation and formatting (conversion) of the transaction data. Often communications protocols govern packaging of data, and therefore are used for extraction of transaction data from one or more data sections of protocol data units (PDUs) that are used for transporting the transaction data. Various ways of identifying content of a PDU are known in the art.","An order in which bits\/bytes of data are inserted into a data section of a PDU is usually governed by the communications protocol, but many other aspects of how data is represented are independent of communications protocols and are more tightly tied to applications that generate the data. These aspects are associated with data types used, character sets, integer representations, etc. Conversion of transaction data using embedded call-back functions corrects for differences in these aspects of the format of the transaction data by manipulating the data during the read\/write procedures. Advantageously data does not need to be copied during this conversion.","A respective set of transforming procedures that are well known in the art for reformatting data are called by the generic call-back function names . The call-back function pointer arrays loaded into memory depend on both the source layer  and the target layer . The function pointer arrays loaded into memory depend only on the associated target layer .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 4","b":["10","12","100","16","102","24","18","104","30","106","12","18","12","108","12"],"i":["a ","a ","a ","a ","a "]},"However, if the connection is rejected (step ), another target layer that supports the required communications protocol is initialized and the associated call-back function pointer array is loaded into memory (step ). The function pointer array associated with the source layer \/target layer pair is also loaded into memory, in step .","If the connection is accepted at the DB server  (step ), the DB server  initializes the source layer and target layer (assuming that no suitable target layer is already available for the connection) in step . The function pointer array is loaded for the source layer (step ), and the call-back function pointer array is loaded for the target layer , if required (step ). The DB server  then acknowledges the connection request issued by the client computer  (step ). The connection is therefore established in step .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":["5","126","10","16","128"],"i":"a "},"If a new source layer is initialized, the call-back function pointers associated with the source layer are loaded into memory (step ). In either case, the source layer calls the target layer using the generic function names and the function pointer array in step . The target layer then at step  examines the data as it moves initial parts of the transaction data into the communications buffer (i.e. \u201con the wire\u201d).","If in step  the target layer determines that user data is needed to complete the transaction data, the target layer calls the source layer using the generic call-back function names and call-back function pointer array to retrieve the required data (step ). In either event, the request is written to the communications buffer in a communications protocol that is associated with the target layer and is transmitted in step .","In step  (of ), the source layer of the DB server  receives the database transaction data, as formulated by the target layer on the client computer . The source layer interprets the transaction data and calls the target layer using the generic function names and the function pointer array . The target layer determines (in step ) whether input data for the transaction is present in the communications buffer. If this input data is present, the target layer invokes the required call-back functions to retrieve the input data from the wire (step ). In either case, the transaction data is processed by the database (DB) (step ).","Subsequent to the processing of the request or query transaction data sent from the client to the database, a response is generated. If the target layer determines that the response includes output data (in step ), generic call-back function names and the call-back function pointer array convert the output data to a format associated with the source communications protocol for the reply (step ). In either case, the response is returned via the connection between the DB server  and the client computer  at step .","The reply transaction data is returned via the connection to the client computer , and the target layer of the client computer  retrieves the data, converts it and moves it to the source layer using the generic call-back function names and the call-back function pointer array . The source layer then interprets the response and provides data as required to the client application. The source layers and target layers remain unchanged for duration of the database transaction.","The present system therefore enables development of different connection types and protocols, etc., to provide new access capabilities or provide existing capabilities with greater facility. The method and apparatus permits greater independence between source and target layers and capitalizes on similarities of the functions performed by source and target layers on different platforms.","It will be appreciated that computer readable code may be uploaded (by a vendor) and downloaded (by an end user) via a network adapted for transporting or carrying a computer readable modulated carrier signal. The signal may embed computer readable codes that may be used for establishing the embodiments of the present system.","As an example, the signal may embed a computer readable code that may be used for directing a computing machine to process database transactions in a multi-communications protocol and multi-programming model computing environment. The computer readable code may also be used for establishing a computer-readable memory usable by a computing machine for enabling the processing of database transactions in a multi-communications protocol and multi-programming model computing environment.","The computer readable code may also be used for establishing a client computer adapted to permit a user to request information from a database in a multi-communications protocol and multi-programming model computing environment. In addition, the computer readable code may be used for establishing a server computer adapted to respond to a client request for information from a database in a multi-communications protocol and multi-programming model computing environment. Included in the meaning of the modulated carrier signal is a signal-bearing medium.","It is to be understood that the specific embodiments of the invention that have been described are merely illustrative of certain application of the principle of the present invention. Numerous modifications may be made to present invention described herein without departing from the spirit and scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The various features of the present invention and the manner of attaining them will be described in greater detail with reference to the following description, claims, and drawings, wherein reference numerals are reused, where appropriate, to indicate a correspondence between the referenced items, and wherein:",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 1","FIGS. 1A and 1B"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIGS. 3A and 3B","FIG. 1"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 5","FIGS. 5A and 5B","FIG. 1"]}]},"DETDESC":[{},{}]}
