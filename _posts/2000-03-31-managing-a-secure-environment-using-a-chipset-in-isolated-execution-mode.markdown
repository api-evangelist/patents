---
title: Managing a secure environment using a chipset in isolated execution mode
abstract: A chipset is initialized in a secure environment for an isolated execution mode by an initialization storage. The secure environment has a plurality of executive entities and is associated with an isolated memory area accessible by at least one processor. The at least one processor has a plurality of threads and operates in one of a normal execution mode and the isolated execution mode. The executive entities include a processor executive (PE) handler. PE handler data corresponding to the PE handler are stored in a PE handler storage. The PE handler data include a PE handler image to be loaded into the isolated memory area after the chipset is initialized. The loaded PE handler image corresponds to the PE handler.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07013484&OS=07013484&RS=07013484
owner: Intel Corporation
number: 07013484
owner_city: Santa Clara
owner_country: US
publication_date: 20000331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates to microprocessors. In particular, the invention relates to processor security.","2. Description of Related Art","Advances in microprocessor and communication technologies have opened up many opportunities for applications that go beyond the traditional ways of doing business. Electronic commerce (E-commerce) and business-to-business (B2B) transactions are now becoming popular, reaching the global markets at a fast rate. Unfortunately, while modern microprocessor systems provide users convenient and efficient methods of doing business, communicating and transacting, they are also vulnerable to unscrupulous attacks. Examples of these attacks include virus, intrusion, security breach, and tampering, to name a few. Computer security, therefore, is becoming more and more important to protect the integrity of the computer systems and increase the trust of users.","Threats caused by unscrupulous attacks may be in a number of forms. Attacks may be remote without requiring physical accesses. An invasive remote-launched attack by hackers may disrupt the normal operation of a system connected to thousands or even millions of users. A virus program may corrupt code and\/or data of a single-user platform.","Existing techniques to protect against attacks have a number of drawbacks. Anti-virus programs can only scan and detect known viruses. Most anti-virus programs use a weak policy in which a file or program is assumed good until proved bad. For many security applications, this weak policy may not be appropriate. In addition, most anti-virus programs are used locally where they are resident in the platform. This may not be suitable in a group work environment. Security co-processors or smart cards using cryptographic or other security techniques have limitations in speed performance, memory capacity, and flexibility. Redesigning operating systems creates software compatibility issues and causes tremendous investment in development efforts.","In the following description, for purposes of explanation, numerous details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that these specific details are not required in order to practice the present invention. In other instances, well-known electrical structures and circuits are shown in block diagram form in order not to obscure the present invention.","Architecture Overview","One principle for providing security in a computer system or platform is the concept of an isolated execution architecture. The isolated execution architecture includes logical and physical definitions of hardware and software components that interact directly or indirectly with an operating system of the computer system or platform. An operating system and the processor may have several levels of hierarchy, referred to as rings, corresponding to various operational modes. A ring is a logical division of hardware and software components that are designed to perform dedicated tasks within the operating system. The division is typically based on the degree or level of privilege, namely, the ability to make changes to the platform. For example, a ring- is the innermost ring, being at the highest level of the hierarchy. Ring- encompasses the most critical, privileged components. In addition, modules in Ring- can also access to lesser privileged data, but not vice versa. Ring- is the outermost ring, being at the lowest level of the hierarchy. Ring- typically encompasses users or applications level and has the least privilege. Ring- and ring- represent the intermediate rings with decreasing levels of privilege.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1A","b":["50","50","50","0","10","1","20","2","30","3","40","52","52","50","50","52"]},"Ring-  includes two portions: a normal execution Ring-  and an isolated execution Ring- . The normal execution Ring-  includes software modules that are critical for the operating system, usually referred to as kernel. These software modules include primary operating system (e.g., kernel) , software drivers , and hardware drivers . The isolated execution Ring-  includes an operating system (OS) nub  and a processor nub . The OS nub  and the processor nub  are instances of an OS executive (OSE) and processor executive (PE), respectively. The OSE and the PE are part of executive entities that operate in a secure environment associated with the isolated area  and the isolated execution mode. The processor nub loader  is a protected bootstrap loader code held within a chipset in the system and is responsible for loading the processor nub  from the processor or chipset into an isolated area as will be explained later.","Similarly, ring- , ring- , and ring-  include normal execution ring- , ring- , ring- , and isolated execution ring- , ring- , and ring- , respectively. In particular, normal execution ring- includes N applications to and isolated execution ring- includes K applets to .","One concept of the isolated execution architecture is the creation of an isolated region in the system memory, referred to as an isolated area, which is protected by both the processor and chipset in the computer system. The isolated region may also be in cache memory, protected by a translation look aside (TLB) access check. Access to this isolated region is permitted only from a front side bus (FSB) of the processor, using special bus (e.g., memory read and write) cycles, referred to as isolated read and write cycles. The special bus cycles are also used for snooping. The isolated read and write cycles are issued by the processor executing in an isolated execution mode. The isolated execution mode is initialized using a privileged instruction in the processor, combined with the processor nub loader . The processor nub loader  verifies and loads a ring- nub software module (e.g., processor nub ) into the isolated area. The processor nub  provides hardware-related services for the isolated execution.","One task of the processor nub  is to verify and load the ring- OS nub  into the isolated area, and to generate the root of a key hierarchy unique to a combination of the platform, the processor nub , and the operating system nub . The operating system nub  provides links to services in the primary OS  (e.g., the unprotected segments of the operating system), provides page management within the isolated area, and has the responsibility for loading ring- application modules , including applets to , into protected pages allocated in the isolated area. The operating system nub  may also load ring- supporting modules.","The operating system nub  may choose to support paging of data between the isolated area and ordinary (e.g., non-isolated) memory. If so, then the operating system nub  is also responsible for encrypting and hashing the isolated area pages before evicting the page to the ordinary memory, and for checking the page contents upon restoration of the page. The isolated mode applets to and their data are tamper-resistant and monitor-resistant from all software attacks from other applets, as well as from non-isolated-space applications (e.g., to ), dynamic link libraries (DLLs), drivers and even the primary operating system . Only the processor nub  or the operating system nub  can interfere with or monitor the applet's execution.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1B","b":["10","0","10","3","40","50","60"]},"The accessible physical memory  includes an isolated area  and a non-isolated area . The isolated area  includes applet pages  and nub pages . The non-isolated area  includes application pages  and operating system pages . The isolated area  is accessible only to elements of the operating system and processor operating in isolated execution mode. The non-isolated area  is accessible to all elements of the ring- operating system and to the processor.","The normal execution ring-  including the primary OS , the software drivers , and the hardware drivers , can access both the OS pages  and the application pages . The normal execution ring-, including applications to , can access only to the application pages . Both the normal execution ring-  and ring- , however, cannot access the isolated area .","The isolated execution ring- , including the OS nub  and the processor nub , can access to both of the isolated area , including the applet pages  and the nub pages , and the non-isolated area , including the application pages  and the OS pages . The isolated execution ring- , including applets to , can access only to the application pages  and the applet pages . The applets to reside in the isolated area .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1C","b":["100","100","110","120","130","140","150","160","170","175","180","182","184","186","130","150","130","100"]},"The processor  represents a central processing unit of any type of architecture, such as complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture. In one embodiment, the processor  is compatible with an Intel Architecture (IA) processor, such as the Pentium\u2122 series, the IA-32\u2122 and the IA-64\u2122. The processor  includes a normal execution mode  and an isolated execution circuit . The normal execution mode  is the mode in which the processor  operates in a non-secure environment, or a normal environment without the security features provided by the isolated execution mode. The isolated execution circuit  provides a mechanism to allow the processor  to operate in an isolated execution mode. The isolated execution circuit  provides hardware and software support for the isolated execution mode. This support includes configuration for isolated execution, definition of an isolated area, definition (e.g., decoding and execution) of isolated instructions, generation of isolated access bus cycles, and generation of isolated mode interrupts.","In one embodiment, the computer system  can be a single processor system, such as a desktop computer, which has only one main central processing unit, e.g. processor . In other embodiments, the computer system  can include multiple processors, e.g. processors , , , etc., as shown in . Thus, the computer system  can be a multi-processor computer system having any number of processors. For example, the multi-processor computer system  can operate as part of a server or workstation environment. The basic description and operation of processor  will be discussed in detail below. It will be appreciated by those skilled in the art that the basic description and operation of processor  applies to the other processors and , shown in , as well as any number of other processors that may be utilized in the multi-processor computer system  according to one embodiment of the present invention.","The processor  may also have multiple logical processors. A logical processor, sometimes referred to as a thread, is a functional unit within a physical processor having an architectural state and physical resources allocated according to some partitioning policy. Within the context of the present invention, the terms \u201cthread\u201d and \u201clogical processor\u201d are used to mean the same thing. A multi-threaded processor is a processor having multiple threads or multiple logical processors. A multi-processor system (e.g., the system comprising the processors , , and ) may have multiple multi-threaded processors.","The host bus  provides interface signals to allow the processor  or processors , , and to communicate with other processors or devices, e.g., the MCH . In addition to normal mode, the host bus  provides an isolated access bus mode with corresponding interface signals for memory read and write cycles when the processor  is configured in the isolated execution mode. The isolated access bus mode is asserted on memory accesses initiated while the processor  is in the isolated execution mode. The isolated access bus mode is also asserted on instruction pre-fetch and cache write-back cycles if the address is within the isolated area address range and the processor  is initialized in the isolated execution mode. The processor  responds to snoop cycles to a cached address within the isolated area address range if the isolated access bus cycle is asserted and the processor  is initialized into the isolated execution mode.","The MCH  provides control and configuration of memory and input\/output devices such as the system memory  and the ICH . The MCH  provides interface circuits to recognize and service isolated access assertions on memory reference bus cycles, including isolated memory read and write cycles. In addition, the MCH  has memory range registers (e.g., base and length registers) to represent the isolated area in the system memory . Once configured, the MCH  aborts any access to the isolated area that does not have the isolated access bus mode asserted.","The system memory  stores system code and data. The system memory  is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory  includes the accessible physical memory  (shown in ). The accessible physical memory includes a loaded operating system , the isolated area  (shown in ), and an isolated control and status space . The loaded operating system  is the portion of the operating system that is loaded into the system memory . The loaded OS  is typically loaded from a mass storage device via some boot code in a boot storage such as a boot read only memory (ROM). The isolated area , as shown in , is the memory area that is defined by the processor  when operating in the isolated execution mode. Access to the isolated area  is restricted and is enforced by the processor  and\/or the MCH  or other chipset that integrates the isolated area functionalities. The isolated control and status space  is an input\/output (I\/O)-like, independent address space defined by the processor  and\/or the MCH . The isolated control and status space  contains mainly the isolated execution control and status registers. The isolated control and status space  does not overlap any existing address space and is accessed using the isolated bus cycles. The system memory  may also include other programs or data which are not shown.","The ICH  represents a known single point in the system having the isolated execution functionality. For clarity, only one ICH  is shown. The system  may have many ICH's similar to the ICH . When there are multiple ICH's, a designated ICH is selected to control the isolated area configuration and status. In one embodiment, this selection is performed by an external strapping pin. As is known by one skilled in the art, other methods of selecting can be used, including using programmable configuring registers. The ICH  has a number of functionalities that are designed to support the isolated execution mode in addition to the traditional I\/O functions. In particular, the ICH  includes an isolated bus cycle interface , the processor nub loader  (shown in ), a digest memory , a cryptographic key storage , an isolated execution logical processor manager , and a token bus interface .","The isolated bus cycle interface  includes circuitry to interface to the isolated bus cycle signals to recognize and service isolated bus cycles, such as the isolated read and write bus cycles. The processor nub loader , as shown in , includes a processor nub loader code and its digest (e.g., hash) value. The processor nub loader  is invoked by execution of an appropriate isolated instruction (e.g., Iso_Init) and is transferred to the isolated area . From the isolated area , the processor nub loader  copies the processor nub  from the system flash memory (e.g., the processor nub code  in non-volatile memory ) into the isolated area , verifies and logs its integrity, and manages a symmetric key used to protect the processor nub's secrets. In one embodiment, the processor nub loader  is implemented in read only memory (ROM). For security purposes, the processor nub loader  is unchanging, tamper-resistant and non-substitutable. The digest memory , typically implemented in RAM, stores the digest (e.g., hash) values of the loaded processor nub , the operating system nub , and any other critical modules (e.g., ring- modules) loaded into the isolated execution space. The cryptographic key storage  holds a symmetric encryption\/decryption key that is unique for the platform of the system . In one embodiment, the cryptographic key storage  includes internal fuses that are programmed at manufacturing. Alternatively, the cryptographic key storage  may also be created with a random number generator and a strap of a pin. The isolated execution logical processor manager  manages the operation of logical processors operating in isolated execution mode. In one embodiment, the isolated execution logical processor manager  includes a logical processor count register that tracks the number of logical processors participating in the isolated execution mode. The token bus interface  interfaces to the token bus . A combination of the processor nub loader digest, the processor nub digest, the operating system nub digest, and optionally additional digests, represents the overall isolated execution digest, referred to as isolated digest. The isolated digest is a fingerprint identifying the ring- code controlling the isolated execution configuration and operation. The isolated digest is used to attest or prove the state of the current isolated execution.","The non-volatile memory  stores non-volatile information. Typically, the non-volatile memory  is implemented in flash memory. The non-volatile memory  includes the processor nub . The processor nub  provides the initial set-up and low-level management of the isolated area  (in the system memory ), including verification, loading, and logging of the operating system nub , and the management of the symmetric key used to protect the operating system nub's secrets. The processor nub  may also provide application programming interface (API) abstractions to low-level security services provided by other hardware. The processor nub  may also be distributed by the original equipment manufacturer (OEM) or operating system vendor (OSV) via a boot disk.","The mass storage device  stores archive information such as code (e.g., processor nub ), programs, files, data, applications (e.g., applications to ), applets (e.g., applets to ) and operating systems. The mass storage device  may include compact disk (CD) ROM , floppy diskettes , and hard drive , and any other magnetic or optical storage devices. The mass storage device  provides a mechanism to read machine-readable media. When implemented in software, the elements of the present invention are the code segments to perform the necessary tasks. The program or code segments can be stored in a processor readable medium or transmitted by a computer data signal embodied in a carrier wave, or a signal modulated by a carrier, over a transmission medium. The \u201cprocessor readable medium\u201d may include any medium that can store or transfer information. Examples of the processor readable medium include an electronic circuit, a semiconductor memory device, a ROM, a flash memory, an erasable programmable ROM (EPROM), a floppy diskette, a compact disk CD-ROM, an optical disk, a hard disk, a fiber optical medium, a radio frequency (RF) link, etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, etc. The code segments may be downloaded via computer networks such as the Internet, an Intranet, etc.","I\/O devices  may include any I\/O devices to perform I\/O functions. Examples of I\/O devices  include a controller for input devices (e.g., keyboard, mouse, trackball, pointing device), media card (e.g., audio, video, graphics), a network card, and any other peripheral controllers.","The token bus  provides an interface between the ICH  and various tokens in the system. A token is a device that performs dedicated input\/output functions with security functionalities. A token has characteristics similar to a smart card, including at least one reserved-purpose public\/private key pair and the ability to sign data with the private key. Examples of tokens connected to the token bus  include a motherboard token , a token reader , and other portable tokens  (e.g., smart card). The token bus interface  in the ICH  connects through the token bus  to the ICH  and ensures that when commanded to prove the state of the isolated execution, the corresponding token (e.g., the motherboard token , the token ) signs only valid isolated digest information. For purposes of security, the token should be connected to the digest memory.","A Chipset Circuit to Manage a Secure Platform","The overall architecture discussed above provides a basic insight into a hierarchical executive architecture to manage a secure platform. The elements shown in , B, and C are instances of an abstract model of this hierarchical executive architecture. The implementation of this hierarchical executive architecture is a combination of hardware and software. In what follows, the processor executive, the processor executive handler, and the operating system executive are abstract models of the processor nub , the processor nub loader , and the operating system nub  (, B, and C), respectively.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2","b":["200","200","205","220"]},"The chipset  is an integrated device that provides the necessary infrastructure for the isolated execution mode in the platform. In one embodiment, the chipset  is the input\/output controller hub (ICH)  shown in . The chipset  includes a chipset circuit . The chipset circuit  includes the functionalities to allow a platform to operate in a secure environment. The secure environment is associated with the isolated memory area (e.g., the isolated memory area  shown in ) which is accessible to a processor in the platform. The platform may have one or multiple processors (e.g., the processor  in ). Each processor may operate in one of a normal execution mode and an isolated execution mode. Each processor may have one or multiple logical threads. The chipset  keeps tracks of the number of logical threads operating in the execution mode for the entire platform, whether the platform is a uni- or multi-processor system.","The executive entities  include a number of executives that are designed to operate in the secure environment. The executive entities  are associated with the isolated memory area  (). The executive entities  include a processor executive (PE) handler , a PE , and an operating system executive (OSE) . The PE handler  handles the PE . The PE  handles the OSE . The OSE  interfaces to a subset of the operating system (OS)  running on the platform. As mentioned above, the PE handler , the PE , and the OSE  are abstract models of the processor nub loader , the processor nub , and the operating system nub , respectively, shown in .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 2"],"b":["210","210","310","320","330","340","350","360","370","375","378","380","390","395","310","320","330","350","370","375","380","390","390","110","340","360","378"]},"The initialization storage  is used to initialize the chipset  for isolated execution mode. The initialization storage is accessed by an initialization storage access signal . The initialization storage access signal  represents an input\/output bus access cycle decoded to the initialization storage address as generated by one of the processors in the system (e.g., processor  in ).","The PE handler storage  stores PE handler data . The PE handler data  include a PE handler image , a PE handler identifier , a PE handler size , and a PE handler address . The PE handler image  is to be loaded into the isolated memory area  after the chipset  is initialized. The loaded PE handler image  corresponds to the PE handler  in the executive entities  ().","The thread count storage  stores a thread count  to indicate the number of threads currently operating in the isolated execution mode. The thread count  is useful for a thread to know if it is the first thread to initialize the platform in the isolated execution mode. The thread count  keeps track of the number of threads so that the executive entities  can determine the available resources. This is especially useful for scheduling and load balancing tasks performed by the OSE  and the OS . In addition, the thread count  helps in the orderly initialization and participation of the threads in the isolated execution mode. The thread count  is updated when the initialization storage  is accessed and when there is no failure. The limit comparator  compares the thread count  with high and low limits to determine if the thread count has exceeded the maximum or minimum available threads. When a maximum or high limit is exceeded, a failure or fault condition is generated. When a minimum or low limit has been reached, the chipset  is initialized to the initial conditions. The updated thread count is one of an incremented thread count and a decremented thread count. A current thread count is returned when there is a failure as indicated by a failure mode in the mode storage  as will be described later. The incremented thread count is returned when one of the threads enrolls in the isolated execution mode. The decremented thread count is returned when one of the enrolled threads withdraws from the isolated execution mode.","The mode storage  stores a chipset mode . The mode circuit  writes the chipset mode  into the mode storage . The chipset mode  indicates a mode of operation of the chipset . This mode of operation includes an initialization waiting mode, a PE initialization in-progress mode, a PE initialization completion mode, an OSE loaded mode, a closing mode, and a failure mode. The initialization waiting mode indicates that the chipset is waiting for initialization. The PE initialization in-progress mode indicates that the PE is being executed. The PE initialization completion mode indicates that the PE is completed. The OSE loaded mode indicates the OSE has been loaded. The closing mode indicates that the isolated execution mode is closed. The failure mode indicates that there is a failure.","The identifier log storage  stores identifiers to of the executive entities operating in the isolated execution mode. The identifiers to are read-only when in lock. The log lock storage  stores a lock pattern  to indicate which of the identifiers to is in lock. To be \u201cin lock\u201d means that the corresponding identifier cannot be modified or written. The identifiers to are locked based on the lock pattern .","The fused key storage  stores a fused key . The fused key  is used in handling the executive entities . The fused key  is returned when the fused key storage  is read in an initialization waiting mode as set by the mode storage  which will be described later. The fused key  is programmed at manufacturing time to a random value .","The scratch storage  stores isolated settings  used to configure the isolated execution mode. The isolated settings  include an isolated base value, an isolated mask value, and a processor executive entry address. The isolated base and mask values define the isolated memory area , and are essentially the same as the isolated base and mask values as stored in the processor  and other chipsets (e.g., the MCH  in ).","The status storage  stores a status value  of an isolated unlock pin  used in restoring a root key from the fused key .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 4","b":"400"},"Upon START, the process  boots up the platform and configures the platform in the isolated execution mode (Block ). Then, the process  writes the chipset mode as the initialization waiting mode (Block ). Next, the process  loads the PE handler image into the isolated memory area (Block ). The loaded PE handler image becomes the PE handler. Next, the process  invokes the PE handler and other executive entities (Block ).","Then, the process  determines if the thread operation is a thread enrolment or a thread withdrawal. If it is a thread enrolment, the process  enrolls the thread (Block ). If it is a thread withdrawal, the process  withdraws the thread (Block ). Then, the process  is terminated.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 5","FIG. 4"],"b":"460"},"Upon START, the process  accesses the enrollment storage (Block ). Then, the process  increments the thread count (Block ). Then, the process  determines if the thread count has exceeded a high limit or has reached a maximum value (Block ). If yes, the process  writes the chipset mode as a failure mode (Block ) and proceeds to Block . Otherwise, the process  determines if the failure mode is set or if there is a failure (Block ). If yes, the process  returns the current thread count (Block ) and is then terminated. Otherwise, the process  returns the incremented thread count (Block ) and is then terminated.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 6","FIG. 4"],"b":"470"},"Upon START, the process  accesses the withdrawal storage (Block ). Then, the process  decrements the thread count (Block ). Then, the process  determines if the thread count has exceeded a low limit or has reached a minimum value (Block ). If yes, the process  resets the chipset storage to initial values (Block ) and proceeds to Block . Otherwise, the process  determines if the failure mode is set or if there is a failure (Block ). If yes, the process  returns the current thread count (Block ) and is then terminated. Otherwise, the process  returns the decremented thread count (Block ) and is then terminated.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 7","FIG. 4"],"b":"440"},"Upon START, the process  reads the fused key storage to obtain the fused key (Block ). Then, the process  determines if the initialization waiting mode is set (Block ). If not, the process  writes the chipset mode as a failure mode (Block ) and is then terminated. Otherwise, the process  returns the fused key, initializes, and invokes the processor executive (Block ). During the execution of the processor executive, if there is any failure, the process  proceeds to Block .","Next, the process  writes the chipset mode as PE initialization in progress (Block ). Then, the process  determines if the PE operation is completed (Block ). If not, the process  returns to Block  waiting for the PE to complete its task. Otherwise, the process  writes the chipset mode as PE initialization completion (Block ). Then, the process  initializes and invokes the operating system executive (OSE) (Block ). During the execution of the OSE, if there is any failure, the process  proceeds to Block .","Next, the process  determines if the OSE has been loaded or has completed its task (Block ). If not, the process  returns to Block  waiting for the OSE to be loaded or to complete its task. Otherwise, the process  writes the chipset mode as OSE loaded (Block ). Then, the process  determines if the isolated execution mode is closed (Block ). If yes, the process  writes the chipset mode as closing (Block ) and is then terminated. Otherwise, the process  is terminated.","While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications of the illustrative embodiments, as well as other embodiments of the invention, which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will become apparent from the following detailed description of the present invention in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
