---
title: Adding services to application platform via extension
abstract: Systems and methods for adding services to an application platform via an extension platform coupled to the application platform. The application platform runs in a first operation system process and provides a number of resources. The extension platform is implemented in a second operation system process and communicates with the application platforms via standard inter-process communication protocols. The extension platform provides an environment to dynamically model and host application services. A resource abstraction layer provides the extension platform with access to the resources provided at the application platform. The resources are utilized by the extension platform to design and to execute the application services. The application services hosted in the extension platform are centrally managed and administered from the application platform via exposed interfaces.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08904343&OS=08904343&RS=08904343
owner: SAP SE
number: 08904343
owner_city: Walldorf
owner_country: DE
publication_date: 20091221
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The field of the invention relates generally to data processing and digital processing systems. More specifically, the invention is related to providing application services within a computer systems environment.","Business applications are traditionally implemented on top of online transaction processing (OLTP) application platforms. Such OLTP-oriented application platforms are built to be robust and reliable, and provide a variety of infrastructure services, e.g., user interfaces, report generation, business object repositories, software logistics and lifecycle management, persistency abstraction, etc. Typically, application platforms providing business services evolve slowly, over long periods of times. Many of these platforms are developed with proprietary programming languages or by different vendors, which makes them less flexible to add new functionality without extensive coding. In effect, OLTP-oriented application platforms are ideally tailored to the needs of end-user application implementations, but are less suited to provide open integration services for dynamic development and integration of new application services.","For example, business software vendor company SAP AG offers SAP Business Suite\u2122 that is developed using Advanced Business Application Programming\u2122 (ABAP\u2122) language. SAP Business Suite\u2122 provides an application platform for self contained business applications, e.g. enterprise resource planning (ERP), customer relationship management (CRM), human capital management (HCM), etc. However, SAP Business Suite\u2122 does not support generic integration, composition or extensibility hubs, like Business Process Management (BPM) service, Enterprise Service Bus (ESB) service, etc. Instead, SAP AG offers SAP Composition Environment\u2122 on Java\u2122 application platform to provide infrastructure services (BPM, ESB, etc.) that act as open orchestration and collaboration layers to dynamically model business processes, and design and provide new business services.","Often, private computing environments are configured with two separate application platforms. One of the application platforms is required for the traditionally coded business applications that are utilized for running the business of a company. The other application platform provides an environment for dynamic modeling and support of new business processes. To install, setup, run and maintain two separate application platforms is inefficient and expensive. This is so at least because the two platforms use separate software lifecycle management tools and duplicated administration efforts, without sharing resources and exposing different usage paradigms.","Systems and methods for adding services to an application platform via an extension platform coupled to the application platform are described. In one aspect, the application platform is run in a first operation system process and provides a number of resources, including applications and infrastructure services, e.g., user interfaces, user management and security, data locking and mapping infrastructure, software logistic mechanism, etc. In a further aspect, the extension platform is implemented in a second operation system process and communicates with the application platforms via standard inter-process communication protocols. The extension platform provides environment to dynamically model and host application services. In yet another aspect, a resource abstraction layer provides the extension platform with access to resources provided by the application platform, where the resources are used to design and to execute the hosted application services. In one other aspect, the extension platform exposes interfaces to enable management and administration of the hosted application services from the application platform.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for adding services to application platform via extension are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","110","105","115","120","105","115","120","155","160"]},"In order to minimize duplicated software installation and administration, extension platform  shares a number of resources with application platform . Resource abstraction layer  is presented in extension platform  to access resources provided by application platform . Resource abstraction layer  could include a number of adapters corresponding to resources in application platform . The shared resources could be any of internal applications  running on application platform , infrastructure services , and external applications  connected to application platform  via network . Infrastructure services  refer to basic or fundamental resources of application platform , also called system resources. An exemplary non-exhaustive list of resources provided by infrastructure services  that are shared by extension platform  and application platform  could include:\n\n","Resource abstraction layer adapters  of extension platform  access the corresponding resources in application platform  through the existing resource interfaces . Occasionally, development of a new interface for a particular resource in application platform  could be required to provide access for the corresponding adapter in extension platform . Extension platform  exposes additional interfaces through resource abstraction layer adapters  to allow resources of application platform  to manage and administer the application services hosted by extension platform . The communication between resource abstraction layer adapters  and resource interfaces , is organized via inter-process communication protocols . Respectively, system  does not require any additional development of proprietary channels for data exchange between the platforms. Instead, well established mechanisms are reused, e.g., RFC, remote method invocation (RMI), including industry standard protocols like Wf-XML (Workflow Extensible Markup Language) developed by \u201cWorkflow Management Coalition\u201d, WS (Web Services) Human Task, etc.","Application platform  communicates with external applications  and clients  through external services interface  via public or private network . Typically, external applications  provide services required from within application platform , and clients  request services provided by application platform . Repository  could store business process models, executable software components, and persist execution context for the application services provided by application platform . Additionally, repository  could be fully or partially reused as a resource by extension platform . Repository  could be accessed through network  as an external resource instead of being partly or directly connected to application platform .",{"@attributes":{"id":"p-0023","num":"0035"},"figref":"FIG. 2","b":["200","205"]},"An extension platform is implemented in a separate operation system process at . The extension platform provides means for dynamically modeling new business processes, tools to easily design new application services, and an execution environment to host and execute the designed application services. To avoid duplicate management and administration efforts, the implemented extended platform does not include all features that are typical for a standalone installation. Only a minimum set of internal resources are implemented, where the minimum set includes resources that are not provided by the application platform, or cannot be shared between the two platforms.","At , a number of adapters are generated to provide the extension platform with access to the shared resources available at application platform. When a process running in the extension platform requests a specific service, a corresponding adapter intercepts the request. Thus, instead of providing the service from a resource within the extension platform, the request is routed to the application platform. Furthermore, extension platform need not provide its own resources, including the hosted application services, which cannot be managed centrally from the application platform. Accordingly, at , the extension platform exposes one or more adapter interfaces corresponding to the internal resources that allow management of the resources from the application platform. To avoid additional development of communication channels, the adapters generated at , and the interfaces exposed at  could carry the data exchange between the platforms through standard inter-process communication protocols at .",{"@attributes":{"id":"p-0026","num":"0038"},"figref":"FIG. 3","b":"300"},"At , the extension platform implemented in a separate OS process is adapted to the programming model of the application platform. Application platforms and extension platforms are often built by different vendors using different software languages. The adaptation of the extension platform to the programming model of the application platform could mean introducing additional requirements to a meta model or to a component model of the extension platform. Such additional requirements could entail defining data types, providing interfaces, imposing new activity types for business object interactions, reusing parts of process models predefined in the application platform, etc.","At , a component model is deployed in the extension platform. There are a variety of component models that could be used for process modeling. For example, OSGi Alliance (formerly known as the Open Service Gateway Initiative) has specified a Java\u2122-based service platform providing a component model for dynamically creating or changing application services. Vendor specific component models, like the component model provided by the SAP NetWeaver\u2122 Development Infrastructure (NWDI), could also be deployed in the extension platform.","At , a new application service is designed within the component model. The component model deployed in the extension platform uses modeling tools that browse and retrieve artifacts from the application platform to be used in the process model of the newly created application service. This approach ensures compatibility between the new application service and the available resources at the application platform. A non-exhaustive exemplary list of applicable artifacts includes a business object, a data type, a user interface, a workflow, an application program interface (API), an event, etc. The process modeling could be organized in different projects, where each project represents a modeling environment within the component model for creating a business process workflow to provide a specific application service.","The process model (e.g., the business process workflow) of the newly designed application service is stored as process content in a repository at the application platform at . The process content includes the artifacts and the defined interdependencies of the process model. Process content stored in the repository could be extracted or fetched by the component model for further analysis and changes. The repository is an example of a resource provided by the application platform and reused by the extension platform. Another shared resource could be used to activate the new application service at the extension platform. At , the software logistics mechanism of the application platform is utilized to compile and deploy the process content of the new application service. The executable code of the process content, together with the corresponding execution context could also be stored in the repository at the application platform. The compile and deploy services provided by the software logistics mechanism of the application platform could be accessed from the extension platform through corresponding resource adapters.",{"@attributes":{"id":"p-0031","num":"0043"},"figref":"FIG. 4","b":["400","405"]},"At , a task is generated corresponding to the event as identified at the extension platform. The task is a part of the application service, and when executed changes the execution status of the underlying business process as requested. Extension platform could extract data about the process context of the application service from a repository provided by the application platform to generate the task. The process context contains information about the execution status of the application service, including parameters values, data mappings, etc.","The generated task could include operations associated with one or more artifacts of the underlying business process, provided by the application platform. At , a call for executing an operation of the task is sent to an appropriate resource of the application platform via a corresponding resource adapter. For example, the generated task could require a change of information in a business object (BO) provided in the application platform. The relevant update operation is routed from the workflow engine of the extension platform to a business object repository resource at the application platform via a business object adapter part of the resource abstraction layer.","At , the operation that is sent for execution to the application platform is performed by the appropriate resource or service provided at the application platform. At , a result indicating the execution of the operation is sent back to the extension platform via the corresponding resource adapter. Alternatively, the result could be sent through another adapter or interface exposed by the extension platform, or no result is sent. Based on the result of the operation execution, at , a response to the request received at  is prepared and sent from the extension platform. The response could be sent in the form of an event indicating a successful or unsuccessful accomplishment of the generated task. When the task is successfully accomplished, the process context of the application service is updated in accordance with the result of the executed task through the corresponding adapter at .",{"@attributes":{"id":"p-0035","num":"0047"},"figref":"FIG. 5","b":["500","502","528","502","504","528","526","504","526","504","526","522","530","524","504","502","526"]},"Adapter  is a dedicated process layer enabling process composer  to access process runtime . Respectively, adapter  is an extension layer enabling process runtime  to access process composer . Process definitions could be exported from backend  to design environment  through adapters  and , and vice versa. For example, once the process definitions are extracted they are cached in model cache . Eclipse modeling framework (EMF)  could access process definitions in both model cache  and meta models , and use them to design process workflows with the help of flow editor  and type editor . Backend browsers  are tools that enable searching for supported artifacts that are provided or supported at backend . Backend user interface (UI)  integrates the existing UIs at backend  with design environment  to avoid introduction of new UIs dedicated only to process modeling.","At backend , process definitions are stored in process repository . Process repository  could store activated process definitions as well. The process definitions are activated by compiling them with compiler  to executable format that could be processed by kernel . Process content  stores changes to the process definitions. The changes to the process definitions could be received via change and transport system (CTS)  from design environment  or from another development service. In one embodiment of the invention, extension platform  could host compiler  or kernel , or both, to compile or\/and execute the process definitions.","An example embodiment of the invention is illustrated with the block diagram shown in . In computing environment , extension platform  is coupled to application platform . Application services hosted by extension platform  are executed at workflow engine  by reusing a number of resources provided at application platform . This technique avoids duplicated costs for management and administration of duplicated resources. The advantage is proportional to the number of the resources that the coupled platforms share. Extension platform  and application platform  are implemented and run in separate processes of an operation system, or in separate operation systems. As  shows, extension platform  communicates with the resources provided at application platform  through the adapters included in resource abstraction layer  via inter-process protocols .","Resource abstraction layer  includes remote function call (RFC) adapter  to enable remote function calls and remote method invocations between the platforms. RFC adapter  could facilitate the communication between one or more of the rest of the adapters in the resource abstraction layer  with the respective resources at application platform . Event adapter  receives application service requests from internal or external services provided at application platform . For example, event adapter  could access Local Event Infrastructure (LEI) interface  present at application platform . LEI  acts as a central infrastructure for different events that arise at an application backend, and a public interface which translates those events into Web Service calls to registered event consumers. In other words, LEI  helps to receive outbound events (e.g. from an external application) regarding services hosted by extension platform .","Mapping adapter  connects extension platform  with workflow mapping  and business rule framework (BRF)  resources provided at application platform . Generally, the BRF  is a runtime environment for processing of certain rules. The correspondence between the business rules and a specific business process is provided by workflow mapping . The data mapping infrastructure of application platform  represented with resources workflow mapping  and BRF  provides functionality to workflow engine  of extension platform  for data transformations and expression evaluations.","Task adapter  connects workflow engine  with business task management (BTM)  and with business workflow infrastructure (BWF)  resources. The tasks of the application services running in workflow engine  could be managed and monitored through BTM  service. The tasks could be organized and added or extracted from an inbox through BWF  via task adapter . BWF  could also be used for managing the execution of the processes corresponding to the hosted application services in extension platform  via process adapter . Furthermore, BWF  could store process context for the application services running in workflow engine  in a workflow container. Workflow engine  extracts and updates the relevant process context at BWF  via container adapter .","An application service hosted in extension platform  sends various operations for execution by appropriate resources provided at application platform . Workflow engine  has to instantiate a number of operation specific variables and parameters based on the meta models of the execution environments provided at the application platform . Type adapter  connects extension platform  with data dictionary (DDIC)  and business objects repository (BOR)  services to instantiate the parameters and variables necessary for sending an operation for execution in application platform . The parameters and variables are identified as data types and data structures, and then could be mapped to the process context of the corresponding application service. Workflow engine  accesses various business objects provided at application platform  and stored in BOR  via BO adapter .","Extension platform  utilizes the software logistics infrastructure of application platform  to deploy and manage the software components to be executed by the hosted application services. The runtime formats of the process definitions for the application services hosted in extension platform , are stored in process repository . Workflow engine  accesses process repository  to extract relevant executable instructions via process layer (PL) adapter . Extension layer (EL) adapter  in application platform  could be required to adapt process repository  to extension platform . Process repository  stores compiled process definitions persisted in process content . Versioning and changes to the process definitions could be organized and transported within change and transport system (CTS)  tool provided. Extension platform  could access process content  and CTS  resources via PL adapter .","Comparing  with , the versioned process content (e.g., Trigger Networks and other process model artifacts like task definitions, texts, data types, mapping definitions, etc.) is handled by process repository  which acts as a central deployment hub and administration interface. Process repository  passes any content from process content  (e.g., after a new deployment or after a content transport via CTS ) to workflow engine . Then, workflow engine  distributes the content to the respective adapters which, in turn, contact the corresponding resources to deploy the respective content fragments. Additionally, some resources provided at application platform  may receive process definitions for deployment from process repository , directly.","In an alternative embodiment of the invention, workflow engine  does neither natively execute the underlying process models of the running application services, nor any other flow-oriented paradigm, e.g., business process execution language (BPEL), event-driven process chain (EPC), unified modeling language (UML) statecharts, etc. Instead, workflow engine  provides for a reduced instruction set computer (RISC)-like approach, essentially executing \u201cevent-condition-action\u201d (ECA) rules with transactional guarantees. Those rules consist of a condition part, that is a first order predicate atop typed state variables, and an action part, that is a plain script triggering updates on state variables and performing callbacks into connected adapters  to . Process models need to be compiled into a set of ECA rules which implement the execution semantics of the corresponding model components. Workflow engine  processes rules whenever triggered by state variable changes. That is, adapters  to  may both provide events (e.g., state variable changes) to workflow engine , or be called from within rule actions running in workflow engine . Adapters  to  are supposed to keep the state of the corresponding resources \u201cin sync\u201d with the state of workflow engine .","Throughout its lifetime, a business process executed by workflow engine  constantly and bi-directionally interacts with its environment through adapters  to . Workflow engine  splits the processes into asynchronously executed rules where each rule action constitutes a separate main memory transaction that is optionally synchronized with an actual database transaction. Whenever exchanging data with its environment, a business process rule needs to synchronize the respective transactions. Generally, a proper synchronous transactional coupling is an expensive operation that negatively affects the process performance by increasing runtime latencies for single rule executions. For this reason, an asynchronous reliable communication between executed rule and the corresponding resource is established via \u201casync-sync\u201d bridge.",{"@attributes":{"id":"p-0047","num":"0059"},"figref":"FIG. 7","b":["700","700","745","750","755","760","745","760","705","745","755","760","705"]},"Initially, transaction \u201csend request\u201d  prepares call parameters by instantiating them through data dictionary (DDIC) adapter , fetching the respective container objects through container (CONT) adapter , and by input mapping the parameters from the process context through mapping adapter . Once the call parameters are prepared, the BO operation is triggered through BO adapter (BO ADP) . Transaction \u201cperform call\u201d  issues a call asynchronously to BO proxy component . When that call is received, BO proxy component  performs the operation on BO  (e.g. \u201csales order\u201d) within the same transaction. BO  is identified and locked for exclusive access at BO repository (BOR) . Transaction \u201cperform call\u201d  asynchronously calls back BO adapter . The response document is handled by transaction \u201creceive response\u201d  that performs the state variable change to enable a successor rule \u201ccontinue process\u201d . The successor rule \u201ccontinue process\u201d  could run in a separate transaction where the output mapping from the response to the process context through mapping adapter  is performed.","In effect, the \u201casync-sync\u201d bridge approach caters for an improved throughput on the extension platform side where execution is not blocked while potentially long-running BO operations are performed. At the same time, the application service execution state (e.g., local context and task progress positions) is kept in sync with the external resources state (e.g., corresponding business objects state). This is due to the fact that (1) all asynchronous communication happens reliably though inter-process communication protocols, (2) the application service's execution is resumed only when a matching response has arrived, (3) the workflow engine  and the business object  states are disjoint, and (4) the BO Proxy component  receives the request, performs the call, and returns the response in the same transaction.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable medium as instructions. The term \u201ccomputer readable medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer-readable media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0052","num":"0064"},"figref":"FIG. 8","b":["800","800","805","855","800","840","855","810","815","810","815","805","815","800","825","830","800","825","830","800","835","800","850","850","800","845","800","820","860","860","860","850","860"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
