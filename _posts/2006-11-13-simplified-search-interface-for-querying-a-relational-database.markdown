---
title: Simplified search interface for querying a relational database
abstract: Methods and computer-readable media are provided for performing a search on a relational database. According to one method, a query class is provided that includes properties that specify how a query is to be performed and how results from the query are to be returned, and an execute method that is called to perform the actual query. A keyword query class derived from the query class is also provided that includes keyword query properties and an execute method for performing the keyword query. In order to perform a keyword query of an SQL database, an instance of the keyword query class is created, the properties set on the instance, and the execute method called. When the execute method is called, the specified properties are translated into an equivalent SQL statement and the search is performed on the identified relational database by a search service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07548912&OS=07548912&RS=07548912
owner: Microsoft Corporation
number: 07548912
owner_city: Redmond
owner_country: US
publication_date: 20061113
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Relational databases are databases that are organized and accessed according to the relationships between data items without the need for any consideration of physical orientation and relationship. Relationships between data items are generally expressed as tables having rows and columns, which may be interconnected. Data is stored in the tables so that the data can be reorganized and accessed in different ways without having to reorganize the database tables.","The structured query language (\u201cSQL\u201d) is the most popular computer language used to create, modify, and retrieve data from relational database management systems. Using SQL, a skilled user can retrieve data from a database, create databases and database objects, add data, modify existing data, and perform other, more complex functions. Although SQL is a standard, many database products support SQL with proprietary extensions to the language format.","SQL commands can be used to interactively work with a database or can be utilized programmatically to interface with a database. For example, in the latter scenario, a SQL application programming interface (\u201cAPI\u201d) can provide an interfaces through which programs can execute SQL queries on a database. Such an API may be used, for instance, by a World Wide Web (\u201cWWW\u201d or \u201cWeb\u201d) page for querying a backend database and providing the results of the query on the Web page.","Previous SQL APIs have been very complicated and difficult to use. Moreover, these APIs have not provided functionality for easily allowing a keyword-based search to be performed on a database, such as those that are so common today in application programs and on Web pages. The complexity and limitations of previous SQL APIs can be extremely frustrating for a developer trying to create a Web page or application program that executes even a simple keyword-based search query against a backend relational database.","It is with respect to these considerations and others that the disclosure made herein is provided.","Methods and computer-readable media are provided herein for simplified searching of a relational database. Through the embodiments described herein, an API is exposed through which keyword-based queries may be easily performed upon a relational database. Keyword-based queries may be easily performed by application programs and other components executing locally on the same computer as the search service that performs the actual query, or by software components executing on computers that are remotely located on a network. Moreover, complex SQL-based queries may also be performed utilizing aspects of the same API.","According to one aspect presented herein, a local query object model is provided for enabling simplified keyword-based searching of a relational database. Through the object model, a developer can construct and execute a rich keyword query without regard to the underlying SQL syntax. In particular, the local query object model provided herein includes an abstract query class defining query properties that specify the manner in which the query is performed and how the results are returned, and an execute method for causing the query to be performed. The query properties may correspond to portions of an SQL statement.","According to other aspects provided herein, the query properties include a property for specifying a query string to be used in the query, a property for specifying that duplicate results should be removed from the query results, and other properties for specifying how the query should be performed and how the query results should be returned. A property may also be specified for instructing the search service to query and return data from multiple databases or multiple locations within the same database. In this manner, a single query can be utilized to effectively perform multiple searches.","According to other aspects, a keyword query class that is derived from the abstract query class is also provided. The keyword query class includes an execute method which, when called, causes a keyword query to be performed on a relational database. The keyword query class also defines keyword query properties that specify how the keyword query is to be performed and how the results of the keyword query are to be returned. For instance, the keyword query properties may include a property for specifying one or more properties that should be returned from the query, a property for specifying how the query results should be sorted when returned, and others.","In order to perform a keyword search, an instance of the keyword query class is created. The various properties are then set on the created instance. Many properties may include default values to make performing the query even easier for a developer. Once the required properties have been set, the execute method may be called on the instance to perform the query as specified. In response thereto, the specified properties are translated into an equivalent SQL statement and the search is performed on the identified relational database by a search service. The results are then returned for use by the calling program. In this manner, the experience of creating a rich query through the object model provided herein is much easier than via SQL syntax because a substantial amount of the processing necessary to convert from a conceptual query to an SQL statement is performed by the object model. A full text SQL query class that is derived from the abstract query class and utilized in a similar manner to the keyword query class is also provided herein.","According to another aspect, the query object model provided herein may be utilized remotely through the provision and use of a Web service. The Web service exposes a remote function call that receives a request packet as input and, in response thereto, performs a keyword query in the manner specified by one or more data elements set forth in the request packet. The contents of the request packet may be specified utilizing extensible markup language (\u201cXML\u201d) with elements corresponding to the query properties and keyword query properties defined by the query object model. After the query has been performed, the query results are returned to the remote caller in a response packet, which may also be specified using XML.","The above-described subject matter may also be implemented as a computer-controlled apparatus, a computer process, a computing system, or as an article of manufacture such as a computer-readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.","The following detailed description is directed to systems, methods, and computer-readable media for providing a simplified interface for keyword searching of a relational database. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system, those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules.","Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","The subject matter described herein is also described as being practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network and wherein program modules may be located in both local and remote memory storage devices. It should be appreciated, however, that the implementations described herein may also be utilized in conjunction with stand-alone computer systems and other types of computing devices. It should also be appreciated that although reference is made herein to the Internet, the embodiments presented herein may be utilized with any type of local area network (\u201cLAN\u201d) or wide area network (\u201cWAN\u201d).","In the following detailed description, references are made to the accompanying drawings that form a part hereof, and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings, in which like numerals represent like elements through the several figures, aspects of a computing system and methodology for providing a simplified interface for keyword searching of a relational database will be described. In particular,  is a network diagram illustrating aspects of an illustrative operative environment for the subject matter described herein that includes a client computer , a network , and a server computer .","As shown in , the client computer  and the server computer  are communicatively coupled to one another through respective connections to the network . According to one implementation, the network  comprises the Internet. However, it should be appreciated that the network  may comprise a LAN, WAN, or other type of suitable network for connecting the client computer  and the server computer .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["102","104","102","108","104","108","102","104","104","102","104"]},"According to one implementation, the client computer  also includes a Web browser program (referred to herein as a \u201cbrowser\u201d) . The browser  is operative to request, receive, and display information pages, such as Web pages, from the server computer . In particular, the browser  is operative to establish a connection with a Web server application  executing on the server computer . Through the connection, the browser  may request an information page, such as the search page , that that includes functionality for searching a database . According to aspects presented herein, the database  is a relational database that may be queried using SQL. Through functionality provided by the search page , a user can type a keyword query that is then executed against the database  in the manner described below. It should be appreciated that the server computer  may maintain many different search pages  for performing different types of searches on different databases.","As will be described in greater detail herein, program code executing within the search page  utilizes aspects of a search object model  to perform a keyword search of the database . In particular, the search page  is operative to utilize objects exposed by the search object model  to cause a search service  to perform the actual query of the database . The search service , which may also be referred to herein as a query processor, performs the requested search and returns the search results to the requestor. As illustrated in , an application program B executing on the server computer  may also utilize aspects of the search object model  to perform keyword and SQL-based searches of the database . Additional details regarding the structure and use of the interfaces exposed by the search object model  are provided below with respect to .","According to other aspects provided herein, an application program A or other software component executing on the client computer  can also utilize the features provided herein by the search object model . In order to utilize these features, the application program A creates a Web service request packet  that includes data that defines the search query how the search should be performed, and how the search results should be returned. The application program A then performs a remote function call to the search Web service  with the Web service request packet . In response thereto, the search Web service  causes a search to be performed of the database . The search Web service  stores the search results in a Web service response packet  and returns the packet  to the application program A in response to the query request. Additional details regarding the structure and use of the Web service request packet  and the Web service response packet  are provided below with respect to .","Turning now to , aspects of several object classes provided by the object model  will be described. In particular, as shown in , the object model  provides an abstract query class  from which a keyword query class  and a full text SQL query class  are sub-classed depending upon the desired keyword syntax. TABLE 1, below, illustrates the properties and methods exposed by the abstract query class  in one implementation presented herein as expressed using the C# programming language.",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public abstract class Query : IDisposable"]},{"entry":[{},"{"]},{"entry":[{},"\/\/ Properties"]},{"entry":[{},"public string Application { get; }"]},{"entry":[{},"public QueryAuthenticationType AuthenticationType { get; set; }"]},{"entry":[{},"public CultureInfo Culture { get; set; }"]},{"entry":[{},"public bool EnableStemming { get; set; }"]},{"entry":[{},"public int HighlightedSentenceCount { get; set; }"]},{"entry":[{},"public QueryHint Hint { get; set; }"]},{"entry":[{},"public bool IgnoreAllNoiseQuery { get; set; }"]},{"entry":[{},"public KeywordInclusion KeywordInclusion { get; set; }"]},{"entry":[{},"public string QueryText { get; set; }"]},{"entry":[{},"public ResultType ResultTypes { get; set; }"]},{"entry":[{},"public int RowLimit { get; set; }"]},{"entry":[{},"public SPSite Site { get; }"]},{"entry":[{},"public Uri SiteContext { get; set; }"]},{"entry":[{},"public int StartRow { get; set; }"]},{"entry":[{},"public int Timeout { get; set; }"]},{"entry":[{},"public bool TrimDuplicates { get; set; }"]},{"entry":[{},"public SPUrlZone UrlZone { get; }"]},{"entry":[{},"\/\/ Methods"]},{"entry":[{},"public virtual void Dispose ( )"]},{"entry":[{},"public abstract ResultTableCollection Execute ( )"]},{"entry":[{},"public PropertyInformation[ ] GetProperties ( )"]},{"entry":[{},"public void GetResults ("]},{"entry":[{},"\u2003T:IMSSMultipleDataReader* pIMultiDataReader,"]},{"entry":[{},"\u2003ResultTableCollection result )"]},{"entry":[{},"public ScopeInformation[ ] GetScopes ( )"]},{"entry":[{},"protected SearchContext GetSearchApp ( )"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As shown in TABLE 1, the abstract query class  defines a base set of query properties and methods for querying the database . In particular, the query properties specified by the abstract query class  are utilized to define the keywords for a query, how the query is to be performed, and how the results are to be returned. Although there is no need to express the properties using SQL syntax, the query properties may correspond to portions of an SQL statement.","The properties defined by the abstract query class  include a \u201cQuery Text\u201d property that is used to specify the query string used for the query. When a keyword query is performed, this string is set to the text to be queried for. The abstract query class  also defines a \u201cRow Limit\u201d property for specifying the number of results to be returned by the query, a \u201cStart Row\u201d property for specifying the first result of the search results to be returned by the query, a \u201cTimeout\u201d property for specifying the amount of time after which the query should timeout, and a \u201cTrim Duplicates\u201d property for specifying whether duplicate search results should be returned by the query.","According to other aspects, the abstract query class  also defines a \u201cCulture\u201d property for indicating the locale used to interpret the query terms, an \u201cEnable Stemming\u201d property to indicate whether stemming should be utilized during the query, and a \u201cSite\u201d property for specifying the consumer of the request. The abstract query class  may also include a \u201cHighlighted Sentence Count\u201d property for defining the number of sentences that should be returned in a highlighted summary, an \u201cIgnore All Noise Query\u201d property for specifying that the query processor should ignore noise words, and a \u201cKeyword Inclusion\u201d property for specifying whether results must contain all of the terms in the search query or any of the terms in the search query.","According to other aspects, the abstract query class  also defines an \u201cApplication\u201d property for getting the application name for the query request, an \u201cAuthentication Type\u201d property for getting or setting the authentication type (either native or not native) for the request, and a \u201cHint\u201d property for providing a hint to the query processor as to whether to use a full text index first or to use a property index first. The abstract query class  may also define a \u201cSite Context\u201d property for identifying the particular Web site within the server  is being searched and a \u201cURL Zone\u201d property that gets the originating URL zone for the query request. URL zones may be utilized to provide different levels of access to the same content. For example, one zone may provide an anonymous user experience and another an authenticated user experience in which check-in of documents may occur.","As discussed briefly above, each of the properties of the abstract query class  may be analogous to a portion of an SQL statement. For instance, the \u201cQuery Text\u201d property is equivalent to specifying a WHERE clause in SQL syntax and the \u201cTrim Duplicates\u201d property is analogous to an SQL SELECT DISTINCT statement against a column representing a near-unique hash of the document content. It should be appreciated that the other query properties may also represent data that may be expressed using the SQL SET syntax.","According to one aspect provided herein, a single query may request multiple result sets. This functionality is provided through the use of the \u201cResult Types\u201d property. This property is an abstract class that defines the type of results requested from the search service . Multiple request type instances can be added to a request and, as a result, multiple result table class  instances are returned, one for each request type instance. More particularly, the \u201cRequest Types\u201d property can be used to instruct the query processor to search in different locations within the same database or within different databases. In one implementation, this property is utilized to instruct the query processor to search a standard full text catalog, authored query results called special term results, and results matching a hand tagged schema called high confidence results. Any number of these locations, and potentially others, may be searched using a single query in the manner described herein. As will be discussed in greater detail below, when multiple result types are specified, the query will return a collection of result tables, one for each requested result type.","The abstract query class  also defines several methods. In particular, an \u201cExecute\u201d method is defined for executing the query request and returning all requested result types. The abstract query class  also defines a \u201cGet Properties\u201d method for returning the values of the properties described above. The \u201cGet Results\u201d method allows the caller to retrieve the results of the query. According to other implementations, the abstract query class  may also define a \u201cGet Search App\u201d method for getting the search context for the search service and a \u201cGet Scopes\u201d method for obtaining information about scopes that are registered with the search service. Scopes are constructs added by an administrator to restrict the set of documents searched.","TABLE 2, below, illustrates the properties and methods exposed by the keyword query class  as expressed using the C# programming language in one implementation. The keyword query class  is derived from the query class  described above, and defines a request using a simple keyword-based syntax. It is intended for applications that want to pass search query text directly to the search service  without processing.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public sealed class KeywordQuery : Query"]},{"entry":[{},"{"]},{"entry":[{},"\/\/ Properties"]},{"entry":[{},"public bool EnableUrlSmashing { get; set; }"]},{"entry":[{},"public StringCollection SelectProperties { get; }"]},{"entry":[{},"public SortCollection SortList { get; }"]},{"entry":[{},"\/\/ Methods"]},{"entry":[{},"public override sealed ResultTableCollection Execute ( )"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"According to one implementation, the keyword query class  exposes several keyword query properties. In particular, a \u201cSelect Properties\u201d property is defined for specifying a list of the properties to be returned by the keyword query. The \u201cSelect Properties\u201d collection is equivalent to specifying a SELECT clause in SQL syntax.","A \u201cSort List\u201d property is also defined for specifying how the results from a search should be sorted. The \u201cSort List\u201d property takes an array of sort structures, each sort structure consisting of a property name and sort direction. If the \u201cSort List\u201d property is not set, the results are sorted by rank by default. The \u201cSort List\u201d property is equivalent to specifying an ORDER BY clause in SQL syntax. A \u201cEnable URL Smashing\u201d property is also specified for controlling whether the URL smashing feature is used for the query. When this feature is enabled, then the keyword query is modified to search for a \u201csmashed\u201d version of the string against URLs. For example, if the query was \u201cSharepoint Search\u201d and URL smashing was enabled, then a result of \u201chttp:\/\/SharePointSearch\u201d would match the query (e.g. the words in the query were smashed together to form a single word). As shown in TABLE 2, the keyword query class  also exposes an \u201cExecute\u201d method for performing a keyword-based query.","TABLE 3, below, illustrates the interface exposed by the full text SQL query class  in one implementation presented herein as expressed using the C# programming language. The full text SQL class  is also derived from the abstract query class  and defines a request using SQL syntax with full-text extensions. This class is intended for use by applications that need fine-grained control of the search command that is passed to the search service . In this regard, the full-text SQL query class  exposes an \u201cExecute\u201d method for performing a full text SQL query.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public _sealed class FullTextSqlQuery: public Query"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\/\/ Methods"]},{"entry":[{},"\u2003public override sealed ResultTableCollection Execute ( )"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"TABLE 4, below, illustrates the interface exposed by the result table class  in one implementation presented herein as expressed using the C# programming language. The result table class  represents a single set of results from a query request. Each result table instance returned from a query corresponds to a request type specified in the \u201cRequest Types\u201d property. An instance of the result table class  implements the \u201cIDataReader\u201d and \u201cIDataRecord\u201d classes to allow access to result rows.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public _sealed class ResultTable : public IDataReader"]},{"entry":[{},"{"]},{"entry":[{},"\u2002Public:"]},{"entry":[{},"\u2003\/\/properties"]},{"entry":[{},"\u2003\u2003_property ResultType get_ResultType( )"]},{"entry":[{},"\u2003\u2002_property int get_RowCount( )"]},{"entry":[{},"\u2003\u2003_property int get_TotalRows( )"]},{"entry":[{},"\u2003\u2003_property bool get_IsTotalRowsExact( )"]},{"entry":[{},"\u2003\u2003_property int get_Depth( )"]},{"entry":[{},"\u2003\u2003_property bool get_IsClosed( )"]},{"entry":[{},"\u2003\u2003_property int get_RecordsAffected( )"]},{"entry":[{},"\u2003\u2003_property int get_FieldCount( )"]},{"entry":[{},"\u2003\u2003_property Object* get_Item( System::String* name)"]},{"entry":[{},"\u2003\u2003_property Object* get_Item(int i)"]},{"entry":[{},"\u2003\/\/methods"]},{"entry":[{},"\u2003\u2003void Close( )"]},{"entry":[{},"\u2003\u2003void Dispose( )"]},{"entry":[{},"\u2003\u2003bool NextResult( )"]},{"entry":[{},"\u2003\u2003bool Read( )"]},{"entry":[{},"\u2003\u2003System::Data::DataTable * GetSchemaTable( )"]},{"entry":[{},"\u2003\u2002String* GetName(int i)"]},{"entry":[{},"\u2003\u2003String* GetDataTypeName(int i)"]},{"entry":[{},"\u2003\u2003Type* GetFieldType(int i)"]},{"entry":[{},"\u2003\u2003Object* GetValue(int i)"]},{"entry":[{},"\u2003\u2003int GetValues(Object* values _gc[ ])"]},{"entry":[{},"\u2003\u2003int GetOrdinal(String* name)"]},{"entry":[{},"\u2003\u2003bool GetBoolean(int i)"]},{"entry":[{},"\u2003\u2003unsigned char GetByte(int i)"]},{"entry":[{},"\u2003\u2003_int64 GetBytes(int i, _int64 fieldOffset, unsigned char"]},{"entry":[{},"\u2003buffer _gc[ ], int bufferoffset, int length)"]},{"entry":[{},"\u2003\u2003_wchar_t GetChar(int i)"]},{"entry":[{},"\u2003\u2003_int64 GetChars(int i, _int64 fieldoffset, _wchar_t buffer"]},{"entry":[{},"\u2003_gc[ ], int bufferoffset, int length)"]},{"entry":[{},"\u2003\u2003Guid GetGuid(int i)"]},{"entry":[{},"\u2003\u2003short GetInt16(int i)"]},{"entry":[{},"\u2003\u2003int GetInt32(int i)"]},{"entry":[{},"\u2003\u2003_int64 GetInt64(int i)"]},{"entry":[{},"\u2003\u2003float GetFloat(int i)"]},{"entry":[{},"\u2003\u2003double GetDouble(int i)"]},{"entry":[{},"\u2003\u2003String* GetString(int i)"]},{"entry":[{},"\u2003\u2003Decimal GetDecimal(int i)"]},{"entry":[{},"\u2003\u2003DateTime GetDateTime(int i)"]},{"entry":[{},"\u2003\u2003IDataReader* GetData(int i)"]},{"entry":[{},"\u2003\u2003bool IsDBNull(int i)"]},{"entry":[{},"\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"TABLE 5, below, illustrates the interface exposed by the result table collection class  in one implementation presented herein as expressed using the C# programming language. An instance of the result table collection class  provides a standard collection of result table class  instances, one for each request type specified in the query request. This allows an application to obtain multiple results with a single query request.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\/\/Methods"]},{"entry":[{},"\u2003\u2003public IEnumerator GetEnumerator( )"]},{"entry":[{},"\u2003\u2003public bool Exists( _ResultType requestedType )"]},{"entry":[{},"\u2003\u2003\/\/properties"]},{"entry":[{},"\u2003\u2003public _ResultTable this[_ResultType requestedType]"]},{"entry":[{},"\u2003\u2003public int Count"]},{"entry":[{},"\u2003\u2003public String[ ] IgnoredNoiseWords"]},{"entry":[{},"\u2003\u2003public String[ ] QueryTerms"]},{"entry":[{},"\u2003\u2003public KeywordInformation KeywordInformation"]},{"entry":[{},"\u2003\u2003public String SpellingSuggestion"]},{"entry":[{},"\u2003\u2003public ResultDefinition[ ] Definition"]},{"entry":[{},"\u2003\u2003public int ElapsedTime"]},{"entry":[{},"\u2003\u2003public int DatabaseTime"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Based on the foregoing description of the classes provided by the search object model , it should be appreciated that a keyword query can be executed on the database  by instantiating a keyword query object, setting only a few properties on the object, and calling the \u201cExecute\u201d method on the object. Additional details regarding the structure and use of the classes described above are provided below with respect to .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 3","FIG. 3"],"b":["120","302","204","304","206","122","306","122"]},"In response to a call to the \u201cExecute\u201d method, the search service  performs the specified query and returns the results in an instance  of the result table collection class . As discussed above, the instance  may include multiple instances of the result table class , depending upon how the \u201cResult Types\u201d property was set. Depending upon the how the \u201cResult Types\u201d property was set, the result table instance  may include relevant results , definitions , high confidence results , and special terms results . The result table instance  is returned to the caller, which may be the search page , the application program B, or the search Web service , described below.","Referring now to , additional details will be provided regarding the embodiments presented herein for performing a local keyword search on a relational database using a simplified search API. In particular,  is a flow diagram illustrating the operation of the server computer  according to one implementation for directly utilizing the search object model  described above to perform a search of the relational database .","It should be appreciated that the logical operations described herein are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system. Accordingly, the logical operations described herein are referred to variously as operations, structural devices, acts, or modules. These operations, structural devices, acts and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination.","The routine  begins at operation , where an object instance of either the keyword query class  or the full-text SQL query class  is created. The type of query object created depends upon whether a keyword query or a SQL query is desired. Once the appropriate query object has been created, the routine  continues to operation .","At operation , the \u201cQuery Text\u201d property is set on the instantiated query object. As discussed above, the \u201cQuery Text\u201d property is utilized to specify the query string used for the query. Once the \u201cQuery Text\u201d property has been set, the routine  continues to operation , where the \u201cResult Types\u201d property is set to specify the desired result types in the manner described above. At operation , other optional properties may also be set on the query object. As mentioned above, commonly used default values may be specified for many of the properties to eliminate the requirement that all of the properties described herein must be set on the query object prior to calling the \u201cExecute\u201d method.","Once the appropriate properties have been set on the query object, the routine  continues to operation , where the \u201cExecute\u201d method is called on the query object to cause the search to be performed. Once the search service  has performed the query, a result table collection object is returned at operation . The calling application may then parse the results. TABLE 6, below, shows sample program code for creating a keyword query object, setting the required properties on the object, and calling the \u201cExecute\u201d method in one implementation as expressed using the C# programming language. The routine  ends at operation .",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Microsoft.SharePoint.SPSite site = new"]},{"entry":[{},"Microsoft.SharePoint.SPSite(\u201chttp:\/\/rrileyoss\u201d);"]},{"entry":[{},"KeywordQuery request;"]},{"entry":[{},"\u2003\u2003request = new KeywordQuery(site);"]},{"entry":[{},"\u2003\u2003request.QueryText = strQuery;"]},{"entry":[{},"\u2003\u2003request.ResultTypes |= ResultType.RelevantResults;"]},{"entry":[{},"\u2003\u2003\/\/if we want to get more than one result table"]},{"entry":[{},"\u2003\u2003\/\/request.ResultTypes |="]},{"entry":[{},"ResultType.SpecialTermResults;"]},{"entry":[{},"\u2003\u2003\/\/Setting optional parameters on the Query object"]},{"entry":[{},"\u2003\u2003request.RowLimit = 10;"]},{"entry":[{},"\u2003\u2003request.StartRow = 0;"]},{"entry":[{},"\u2003\u2003request.KeywordInclusion ="]},{"entry":[{},"KeywordInclusion.AllKeywords;"]},{"entry":[{},"\u2003\u2003\/\/Executing the query"]},{"entry":[{},"\u2003\u2003ResultTableCollection results = request.Execute( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 5","b":["500","112","102","120","112","114","502"]},"In one implementation, the contents of the Web service request packet  are expressed using XML. However, any type of markup language or data format may be utilized to express the contents of the Web service request packet . In general, the Web service request packet  may include data elements that correspond to any or all of the properties and methods defined by the search object model  and described above. For instance, according to one implementation, an XML \u201c<Properties>\u201d element is defined for use in the Web service request packet  that corresponds to the \u201cSelect Properties\u201d property described above with respect to the object model . Table 7, below, shows one illustrative schema for the \u201c<Properties>\u201d element.",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 7"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Properties>"]},{"entry":[{},"\u2003<Property name=\u201dURL\u201d><\/Property>"]},{"entry":[{},"\u2003<Property name=\u201dTitle\u201d><\/Property>"]},{"entry":[{},"\u2003<Property name=\u201dPath\u201d><\/Property>"]},{"entry":[{},"\u2003<Property name=\u201dSize\u201d><\/Property>"]},{"entry":[{},"<\/Properties>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"According to another implementation, an XML \u201c<SortByProperties>\u201d element is defined that corresponds to the \u201cSort List\u201d property described above. The XML \u201c<SortByProperties>\u201d is utilized to specify the sort order for returned results. Table 8, below, shows one illustrative schema for the \u201c<SortByProperties>\u201d element.",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 8"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<SortByProperties>"]},{"entry":[{},"\u2003\u2003\u2003<SortByProperty name=\u201drank\u201d"]},{"entry":[{},"\u2003\u2003\u2003Direction=\u201dDescending\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<\/SortByProperty>"]},{"entry":[{},"<\/SortByProperties>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"It should be appreciated that, by providing elements within the Web service request packet  corresponding to the properties and functions of the search object model , specifying a keyword query using the search Web service  is easier than a traditional SQL syntax. Table 9, below, shows the contents of a complete Web service request packet  in one implementation provided herein.",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 9"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<QueryPacket xmlns=\u201curn:Microsoft.Search.Query\u201d>"]},{"entry":[{},"\u2003<Query>"]},{"entry":[{},"\u2003\u2003<SupportedFormats>"]},{"entry":[{},"\u2003\u2003<Format>urn:Microsoft.Search.Response.Document:Document"]},{"entry":[{},"\u2003\u2003<\/Format>"]},{"entry":[{},"\u2003\u2003<\/SupportedFormats>"]},{"entry":[{},"\u2003\u2003<Context>"]},{"entry":[{},"\u2003\u2003\u2003<QueryText type=\u201cSTRING\u201d language=\u201cen-us\u201d>SharePoint"]},{"entry":[{},"\u2003\u2003\u2003<\/QueryText>"]},{"entry":[{},"\u2003\u2003<\/Context>"]},{"entry":[{},"\u2003\u2003<Properties>"]},{"entry":[{},"\u2003\u2003\u2003<Property name=\u201ctitle\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<Property name=\u201cpath\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<Property name=\u201crank\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<Property name=\u201cwrite\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003<Property name=\u201csize\u201d \/>"]},{"entry":[{},"\u2003\u2003<\/Properties>"]},{"entry":[{},"\u2003\u2003<SortByProperties>"]},{"entry":[{},"\u2003\u2003\u2003<SortByProperty name=\u201crank\u201d direction=\u201cDescending\u201d"]},{"entry":[{},"\u2003\u2003\u2003Order=\u201c1\u201d \/>"]},{"entry":[{},"\u2003\u2003<\/SortByProperties>"]},{"entry":[{},"\u2003\u2003<ImplicitAndBehavior>true<\/ImplicitAndBehavior>"]},{"entry":[{},"\u2003\u2003<IncludeHighConfidenceResutts>true"]},{"entry":[{},"\u2003\u2003<\/IncludeHighConfidenceResults>"]},{"entry":[{},"\u2003\u2003<TrimDuplicates>true<\/TrimDuplicates>"]},{"entry":[{},"\u2003\u2003<IncludeSpecialTermResults>true<\/IncludeSpecialTermResults>"]},{"entry":[{},"\u2003\u2003<IgnoreAllNoiseQuery>true<\/IgnoreAllNoiseQuery>"]},{"entry":[{},"\u2003\u2003<EnableStemming>true<\/EnableStemming>"]},{"entry":[{},"\u2003<\/Query>"]},{"entry":[{},"<\/QueryPacket>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"From operation , the routine  continues to operation , where an element within the Web service request packet  corresponding to the \u201cQuery Text\u201d property described above is populated. The routine  then continues to operation , where the element within the Web service request packet  corresponding to the \u201cResult Types\u201d property described above is populated. At operation , elements within the Web service request packet  corresponding to other optional properties described above are also populated.","Once the Web service request packet  has been created and the appropriate elements populated, the routine  continues to operation , where an execute method is called on the search Web service . In one implementation, a simple object access protocol (\u201cSOAP\u201d) call is utilized to perform the remote function call, which includes the Web service request packet . In response thereto, the search Web service  causes the requested search to be performed and generates a Web service response packet  containing the query results. The Web service response packet  is received by the application program A at operation . The results may then be parsed and utilized by the application program . From operation , the routine  continues to operation , where it ends.","According to one implementation, the Web service response packet  also takes the form of an XML document. In order to return multiple result sets, XML elements are defined within the Web service response packet  to identify the inclusion of the multiple result sets. For instance, an XML \u201c<RelevantResults>\u201d element and an XML \u201c<SpecialTermResults>\u201d element may be defined for storing the relevant result sets. In one implementation, these elements are utilized in the manner shown below with respect to TABLE 10. The ability to make a single call to the search Web service  and receive multiple result sets in this manner optimizes both efficiency and ease of use.",{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 10"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Results>"},{"entry":"\u2003<RelevantResults>"},{"entry":"\u2003\u2003<title>SharePoint<\/title>"},{"entry":"\u2003\u2003<path>http:\/\/sharepoint<\/path>"},{"entry":"\u2003\u2003<rank>1000<\/rank>"},{"entry":"\u2003\u2003<write>2006-09-25T12:45:52-07:00<\/write>"},{"entry":"\u2003\u2003<size>0<\/size>"},{"entry":"\u2003<\/RelevantResults>"},{"entry":"\u2003<RelevantResults>"},{"entry":"\u2003\u2003<title>SharePoint Marketing<\/title>"},{"entry":"\u2003\u2003<path>http:\/\/infoweb\/C5\/spmarketing<\/path>"},{"entry":"\u2003\u2003<rank>933<\/rank>"},{"entry":"\u2003\u2003<write>2006-09-01T06:12:56-07:00<\/write>"},{"entry":"\u2003\u2003<size>0<\/size>"},{"entry":"\u2003<\/RelevantResults>"},{"entry":"..."},{"entry":"\u2003<SpecialTermResults>"},{"entry":"\u2003\u2003<Title>InfoWeb: SharePoint Marketing Portal<\/Title>"},{"entry":"\u2003\u2003<Url>http:\/\/infoweb\/C5\/spmarketing\/<\/Url>"},{"entry":"\u2003\u2003<Description>Product marketing information for SharePoint Portal"},{"entry":"Server, Content Management Server and Windows SharePoint"},{"entry":"Services.<\/Description>"},{"entry":"\u2003<\/SpecialTermResults>"},{"entry":"\u2003<SpecialTermResults>"},{"entry":"\u2003\u2003<Title>InfoWeb: Office SharePoint Portal Server<\/Title>"},{"entry":"\u2003\u2003<Url>http:\/\/infoweb\/C10\/C5\/sharepoint\/<\/Url>"},{"entry":"\u2003\u2003<Description>Internal site containing information and documentation"},{"entry":"for SharePoint Portal Server.<\/Description>"},{"entry":"\u2003<\/SpecialTermResults>"},{"entry":"<\/Results>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Referring now to , an illustrative computer architecture for a computer  utilized in the various embodiments presented herein will be discussed. The computer architecture shown in  illustrates a conventional desktop, laptop computer, or server computer. The computer architecture shown in  includes a central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the CPU . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer , such as during startup, is stored in the ROM . The computer  further includes a mass storage device  for storing an operating system , application programs, and other program modules, which will be described in greater detail below.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media provide non-volatile storage for the computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed by the computer .","By way of example, and not limitation, computer-readable media may include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. For example, computer-readable media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, digital versatile disks (\u201cDVD\u201d), HD-DVD, BLU-RAY, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer .","According to various embodiments, the computer  may operate in a networked environment using logical connections to remote computers through a network , such as the Internet. The computer  may connect to the network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems. The computer  may also include an input\/output controller  for receiving and processing input from a number of other devices, including a keyboard, mouse, or electronic stylus (not shown in ). Similarly, an input\/output controller may provide output to a display screen, a printer, or other type of output device (also not shown in ).","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the computer , including an operating system  suitable for controlling the operation of a networked desktop or server computer, such as the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond, Wash., or the WINDOWS VISTA operating system, also from MICROSOFT CORPORATION. The mass storage device  and RAM  may also store one or more program modules. In particular, the mass storage device  and the RAM  may store a Web browser program , a search object model , and the other program modules shown in  and described above. Other program modules may also be stored in the mass storage device  and utilized by the computer .","Based on the foregoing, it should be appreciated that systems, methods, and computer-readable media for exposing a simplified search API for performing a search on a relational database are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features, methodological acts, and computer readable media, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features, acts, or media described herein. Rather, the specific features, acts and mediums are disclosed as example forms of implementing the claims.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
