---
title: Managing databases in data storage systems
abstract: There is disclosed a method for use in managing databases in data storage systems comprising a plurality of nodes. A request is received to provision storage for a specified application intending to use a database. Based on application-awareness, the storage system is provisioned for storing the database in response to receiving the request. Database tables are distributed across the nodes based on a forecasted first I/O profile between application and database. Information is captured in connection with the activity between the application and database. A second I/O profile is determined based on the captured information. The second I/O profile is an actual in-running I/O profile between application and database. The first I/O profile and second I/O profile are compared. The database tables are re-organized on the nodes based on the comparison identifying a discrepancy between first and second I/O profiles such that storage system is rebalanced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460136&OS=09460136&RS=09460136
owner: EMC Corporation
number: 09460136
owner_city: Hopkinton
owner_country: US
publication_date: 20110630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE PRIOR ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to managing databases in data storage systems.","It is well known that a client\/server distributed system provides a centralized data storage and a database management system (hereinafter \u201cDBMS\u201d) for managing information in response to data queries and update transactions. As used herein, the terms \u201cdata query\u201d or \u201cquery\u201d mean read-only requests for data and the terms \u201cupdate transaction\u201d or \u201ctransaction\u201d mean any read-write operations involving changes to the data stored in the database. The client systems may be connected to a network which is connected to a host or application server. The client systems have client software for interfacing with server software on the application server. The client software could be any software application or module providing a user interface for issuing data queries or update transactions such as DBMS-specific client application or more generally a Web browser application. Similarly, the server software could be a software application provided specifically for processing a user database request or could be an application capable of providing more generalized services such as a web server.","The application server is connected to a DBMS server which has a data store. The DBMS server has DBMS software for managing data in the data store. DBMS software is available from many vendors, for example, Oracle Corp. of Redmond Shores, Calif., Sybase Inc. of Dublin, Calif., and International Business Machines Corp. of Armonk, N.Y., among others. As known in the art, the application server and the DMBS server could be the same computer system or different computer systems. Moreover, the application server and the DBMS server could be in the same facility, or they could be located in physically separated facilities.","However, as a person skilled in the art will realize the above system can suffer from fragmentation after a certain period of time. Moreover, the system may become unbalanced when data is distributed across many nodes at ingest and subsequently the application sends down a different I\/O profile than was expected.","The issue of fragmentation arises when storage space is used inefficiently resulting in reduced storage, capacity and performance. For example, a file in a file system is usually managed in block units. When a file system is created there is free space to store file blocks together contiguously. This allows for rapid sequential file reads and writes. However, as files are added, removed, and changed in size, the free space becomes fragmented, leaving only small holes in which to place new data. When a new file is written, or when an existing file is extended, the new data is put in new non-contiguous data blocks to fit into the available holes. The new data blocks are scattered, slowing access due to seek time and rotational delay of the read\/write head.","It will be appreciated by those skilled in the art if fragmentation is low the disk head movement involved in executing a query can be minimal. This is because the disk head tends to move in one direction as the number of head movements back and forth over gaps of data not needed in the query is minimal. Accordingly, where fragmentation is low disk I\/Os can be completed quickly. However, when fragmentation is high, the disk head tends to move frequently back and forth over gaps in the process of locating data needed for the query. As a result when fragmentation is high disk I\/Os complete more slowly.","A storage system can also become unbalanced when data is distributed across many nodes and the data on one node is busier than the data on another node. The issue is often more pronounced when there is a plurality of nodes and database tables are distributed across the respective nodes. In this case the activity can vary greatly in connection with the respective nodes. This can affect system performance.","A method and system is used in managing databases in data storage systems comprising a plurality of nodes for facilitating receiving, storing, accessing and processing data. In one embodiment, an application is identified intending to use a database. Based on identifying the application, the data storage system is provisioned for storing the database. The distribution of database tables is allowed across the plurality of nodes. A first I\/O profile is estimated, wherein the first I\/O profile is a forecasted I\/O profile between the application and the database. Information is captured in connection with the activity between the application and the database. Based on the captured information, a second I\/O profile is determined, wherein the second I\/O profile is an actual in-running I\/O profile between the application and the database. The first I\/O profile and the second I\/O profile are compared and based on the comparison identifying a discrepancy between the first and second I\/O profiles, the database tables on the respective nodes are reorganized.","In another embodiment, an application is identified intending to use a database. Based on identifying the application, the data storage system is provisioned for storing the database. The distribution of database tables is allowed across the plurality of nodes. Fragmentation is detected in connection with the database tables on the respective nodes. Based on detecting fragmentation, the database tables on the respective nodes are reorganized.","There is described below a method or technique for use in managing databases in data storage systems. At least one implementation using the technique involves application-aware provisioning and monitoring of a massively parallel database to allow intelligent management software to automatically rebalance contiguous chunks of a database after fragmentation.","In one embodiment massively parallel databases rely on distribution of contiguous records at ingest in order to quickly search a large database. Fragmentation occurs over time. Conventionally, rebalancing cannot occur in an automated fashion, and intelligent, automated rebalancing cannot occur without knowledge of application-aware provisioning metrics.","In another embodiment using the technique, an application-aware technique configures and creates a massively parallel database. In such embodiment, the catalogue template used to configure the database is \u201cremembered\u201d and I\/O profile patterns can be compared against the template and the configuration. Intelligent, application-aware storage software in such embodiment can detect when either fragmentation occurs or the application begins using the database in a way that is outside the bounds of the original service level agreement (hereinafter \u201cSLA\u201d). In such embodiment, the storage system at this point can proactively rebalance to adjust to either the change in I\/O pattern or to a fragmented database.","Referring to , there is illustrated an example of an embodiment of a system that may be used in connection with performing one or more implementations of the current techniques described herein. The system  comprises a data storage system  connected to servers or n host systems -through a communication medium . In this embodiment, the hosts -may access the data storage system  by performing input\/output (I\/O) operations or data requests. The communication medium  may be any one or more of a variety of networks or other type of communication connections as known to those skilled in the art. The communication medium  may be a network connection, bus, and\/or other type of data link, such as a hardwire or other connections known in the art. For example, the communication medium  may be the Internet, an intranet, network or other wireless or other hardwired connection(s) by which the host systems -may access and communicate with the data storage system , and may also communicate with other components included in the system .","Additionally, the system  comprises a management system  connected to the data storage system  through a communication medium . The management system  may access the data storage system  in much the same way as the hosts -by also performing input\/output (I\/O) operations or data requests. The communication medium  may also be a network connection, bus, and\/or other type of data link, such as a hardwire or other connections known in the art.","In this embodiment, the communication medium  may be a LAN connection and the communication medium  may be an iSCSI or Fibre channel connection.","The n hosts -, the management system  and the data storage system  may be connected to the communication mediums  and  by any one of a variety of connections as may be provided and supported in accordance with the type of each communication medium  and . The processors included in the hosts -and the management system  may be any one of a variety of proprietary or commercially available single or multi-processor system, such as an Intel-based processor, or other type of commercially available processor able to support traffic in accordance with each particular embodiment and application.","It should be noted that the particular examples of the hardware and software that may be included in the data storage system  are described herein in more detail, and may vary with each particular embodiment. It should also be noted that the n hosts -, the management system  and the data storage system  may be located at the same physical site or alternatively located in different physical locations. A variety of different communication protocols may also be used in connection with communication mediums  and  such as SCSI, Fibre Channel, iSCSI, and the like. Some or all of the connections by which the hosts -, management system  and the data storage system  may be connected to their respective communication medium may pass through other communication devices, such as a Connectrix or other switching equipment that may exist such as a phone line, a repeater, a multiplexer or even a satellite. In a further embodiment, the hosts -may communicate with the data storage system over an iSCSI or a Fibre Channel connection and the management system may communicate with the data storage systems over a separate network connection using TCP\/IP. It should also be noted that although the system  illustrates communications between the hosts -and data storage system  being over a first connection, and communications between the management system and the data storage systems being over a second different connection, the communications may use the same connection. The particular type and number of connections may vary in accordance with particulars of each embodiment.","Each of the hosts -may perform different types of data operations in accordance with different types of tasks. In this embodiment, each host -may issue a data request to the data storage system  to perform a data operation. For example, an application executing on one of the hosts -may perform a read or write operation resulting in one or more data requests to the data storage system .","The management system  may be used in connection with management of the data storage system . The management system  may include hardware and\/or software components and may include one or more computer processors connected to one or more I\/O devices. For example, the input and output devices may be a keyboard, mouse and display device and a data storage system manager may view information about current storage volume configuration on the display device of the management system  and\/or provision data storage system resources.","The hosts -provide data and access control information to the data storage system  through channels. Additionally, the storage system  may provide data to the hosts -through the channels. The hosts -may not address the disk drives of the storage system directly, but rather access to data may be provided to one or more hosts -from what the hosts -view as a plurality of logical devices or logical volumes (LVs). The LVs may or may not correspond to the actual disk drives. For example, one or more LVs may reside on a single physical disk drive. Data in a storage system may be accessed by multiple hosts allowing the hosts -to share the data residing therein. An LV or LUN (logical unit number) may be used to refer to the foregoing logically defined devices or volumes.","The data storage system  may be an appliance with hardware and software for hosting the data storage of the one or more applications executing on the hosts -. The appliance may include one or more storage processors and one or more devices upon which data is stored. The appliance may include software used in connection with storing the data of the hosts on the appliance and also software used in connection with configuring the data storage for use by the hosts. The tasks performed in connection with provisioning storage to store data for an application may include specifying the devices (logical and\/or physical) used to store the data and configuring the data storage devices used such as specifying whether data replication is performed for disaster recovery. The data storage system  may also include other software for performing different data services. For example, the appliance may include backup server software which interacts with software on the hosts -when performing a backup operation.","It will be readily apparent to those skilled in the art that the data storage system  illustrated in the figure may include one or more data storage devices. For example, the data storage system may be a data storage array offered by EMC Corporation of Hopkinton, Mass. The data storage system may include one or more data storage devices such as disks. Additionally, it will also be apparent that the data storage system may comprise more than one data storage system which may be inter-connected. The data storage systems may also be connected to the hosts -through any one or more communication connections that may vary with each particular embodiment and device in accordance with the different protocols used in a particular embodiment. The type of communication connection used may vary with certain system parameters and requirements, such as those related to bandwidth and throughput required in accordance with a rate of I\/O requests as may be issued by the hosts -to the data storage systems. It should be noted that each of the data storage systems may operate stand-alone, or may also be included as part of a storage area network (SAN) that includes, for example, other components such as other data storage systems. Each of the data storage systems may include a plurality of disk devices or volumes. The particular data storage systems and examples as described herein for purposes of illustration should not be construed as a limitation. Other types of commercially available data storage systems, as well as processors and hardware controlling access to these particular devices, may also be included in an embodiment.","Moreover, it will also be apparent that in the event of more than one data storage system that each of the data storage systems may include code thereon for performing the techniques as described herein.","It will also be apparent to those skilled in the art that the data storage system may be configured and provisioned for storage in response to a request from a user of the application executing on one of the hosts -. Accordingly, the data storage system will be able to receive a request in relation to configuring and\/or provisioning storage and provide different levels of automation and varying levels of exposure to details, options and the like associated with performing a requested application specific operation such as configuring and\/or provisioning storage for the application executing on the host. The data storage may then be configured and provisioned in the terms of the application using it. In other words, this approach uses application-aware techniques to configure and provision data storage in the data storage system.","U.S. patent application Ser. No. 12\/893,697 filed on 29 Sep. 2010 and assigned to EMC Corporation describes processes relating to configuring, provisioning and the like of data storage in a data storage system, and the disclosure therein is hereby incorporated herein by reference in its entirety.","Referring to , there is illustrated an example system  comprising a host  communicating with a data storage system  that may be used in connection with performing one or more implementations of the current techniques described herein. It will be readily apparent to those skilled in the art that the host  is equivalent to any one of the n hosts -as illustrated in . Additionally, the data storage system  is equivalent to the system  as illustrated in . Moreover, the functionality described with respect to these features in  also applies to the features in . Furthermore, if a feature is omitted from  it is not an exclusion of the feature. For example, the management system  has been omitted for ease of illustration. It will be readily apparent to those skilled in the art that this feature and any other omitted feature may be included in this example.","The host  may include one or more applications , an application programming interface  (hereinafter \u201cAPI\u201d) and a host agent . The data storage system  may include a web server , storage devices  and software executing thereon comprising CAS layer , file system layer  and block storage layer . A graphical user interface  (hereinafter \u201cGUI\u201d) may provide functionality so that a user may interact with the data storage system at any one of a plurality of levels when performing data storage management operations such as storage provisioning requests. In the example , 3 levels (Novice, Generalist and Expert) are illustrated. In accordance with different levels of expertise or knowledge, each of the 3 user interaction levels may provide the user with different levels of automation and varying levels of exposure to details in connection with performing an operation such as for a storage provisioning request.","The GUI  may communicate with the web server  of the data storage system in connection with a request such as to provision storage for a particular application such as the application  of host . In turn, the web server  may communicate with one or more other layers of software ,  and  executing on the data storage system and with a host agent  in connection with performing the request such as to provision storage for application . The web server  and\/or other software executing on the data storage system  may also access other data  such as application customization options, rules, and the like in connection with performing processing of provisioning and\/or configuration of storage.","The application  executing on the host  may be, for example, a database application, an email application, a medical office application, a law office application, and the like. The application  may communicate with the data storage system  when issuing requests such as to perform I\/O operations on application data stored as objects on the data storage system . In one embodiment as described below in more detail the data for an object may include the content and metadata describing the object such as in the form of object attributes (e.g., attribute name=value pairs). Examples of metadata may include a creation date or timestamp, object name specified as a character string, other string descriptors where a common string descriptor may be associated with and used to identify particular sets of objects (e.g., name of application or host associated with creating the object or last modifying the object, application version number, corporate division), and the like. The application  may communicate with the data storage system  using API . The API  may be, for example, code of a software development kit (SDK) for use when interfacing with CAS layer  to perform operations on the application data stored on devices . The host agent  may be software executing on the host . The host agent  may communicate with the GUI  in connection with configuring the host with authentication information used when the application  issues a request using API  to store data on the data storage system in accordance with an object-based storage system such as system  using CAS .","In connection with using CAS or another object-based storage system or layer, it should be noted that an embodiment may implement the CAS layer using one or more other software technologies than as illustrated in the example . The example  illustrates CAS  being implemented using file systems and block storage. However, CAS  may be implemented using other layers and associated technologies. For example, CAS  may be implemented on top of, or using, a database rather than a file system . The database may then use functionality represented by the block storage layer .","Referring to , there is illustrated an example  of processing that may be performed in connection with a provisioning request. The example  provides additional detail and illustrates a flow of processing steps as described above that may be performed in connection with issuing a request to provision storage for use with an application executing on a host.  includes elements described above in connection with . As a first step S, a user may issue the request to the data storage system using the GUI. In this example, the user may be interacting at a novice level where the user selects the application for which storage is being provisioned. The user also selects the host upon which the application will execute. In one embodiment, discovery processing may have been previously performed to obtain information regarding what hosts have connectivity to the GUI and data storage system and also what applications are executing on particular hosts. The user may be presented with a menu populated with appropriate portions of the foregoing discovery information so that a selection of a host and application executing thereon may be made. The host and application may be included in the provisioning request sent to the web server as indicated by S. The web server may perform processing to provision the storage in accordance with defaults and best practices for the application. In this case, rules and rule processing may result in automatic specification of application settings which may be stored in a step S on the data storage system. Such settings as indicated by  may include a virtual pool name indicating the virtual pool to be created for the application provisioning request, a retention class defined and included as a metadata attribute for all objects created by the application and stored in the virtual pool, and metadata that is automatically generated and included for all objects created by the application and stored in the virtual pool. The settings of  may be used in connection with subsequent requests by the application to store objects in the virtual pool. Part of the automated processing may include creating the retention class definition as needed in addition to specifying that the retention class is to be included as an automatically generated portion of metadata for all objects stored in the named virtual pool.","In a step S, the web server communicates with CAS and other software layers in order to provision the requested storage and create the virtual pool. As described herein in more detail, the data storage system includes code which embodies the template or process for provisioning storage for the application. Such processing may include configuring one or more block storage devices with appropriate device attributes, RAID level, and the like. One or more file systems may then be provisioned on the devices just configured. The foregoing one or more file systems may serve as the data store or container from which the CAS objects are created for use with the application.","The web server and\/or GUI may then perform processing to automatically create the application profile or p-file and then also transmit the p-file to the host agent. The p-file may be transmitted to the host agent by the GUI (S), or alternatively by the web server (S) depending on which component(s) create the p-file. The host agent may store the p-file for subsequent use by the API when issuing requests to operate on objects of the named virtual pool.","An embodiment in connection with the processes may pre-configure block and\/or file system level storage prior to receiving a provisioning request. For example, a data storage system may configure physical devices into RAID groups having a desired level of data protection prior to receiving any provisioning requests. Alternatively, the processing for configuring the block and\/or file systems used for a provisioning request may be performed in response to receiving the request.","The data storage system may also perform other processing in connection with requests made by the application to store an object in the virtual pool. For example, the data storage system may expect that all objects stored in a named virtual pool by the application should have a particular file format. For the application, the data storage system may expect that the content for an object has a particular format such as in accordance with a defined standard. If the content is not in accordance with this format, the data storage system may refuse to store objects having content which is of an unexpected format. The expected file format may be indicated in the application settings . The CAS software layer of the data storage system may use information contained in metadata and\/or object content in order to make a determination as to whether to accept\/reject a write operation to write the object content. The file format of the object content may be determined by examining portions of the content to determine whether the portions contain an expected signature value. For example, one or more fields of the object content may be required by the standard to have one of a plurality of expected values. The fields may be checked to see if they contain valid values in accordance with the standard. Portions of the object metadata may also be examined. For example, a file format may be specified in object metadata communicated from the host. Thus, a determination as to whether to accept or reject object content for storage in a virtual pool may be based on interpretation of content in accordance with the expected signature and\/or examination of object metadata.","As another example, the data storage system may accept or reject a request to store an object having content larger than a specified threshold size. The threshold size may also be specified and stored in the settings . The data storage system may determine the size of received object content and use the threshold size to determine whether to allow the object content to be stored in the virtual pool. Application settings and options, such as the required file format and threshold size, may be specified by a user as a customization (e.g., as an input provided with the provisioning request) or using best practice application-specific defaults as described above in connection with other settings.","Referring to , the flowchart  illustrated summarizes the processing steps to be performed for provisioning data storage for an application. At step  a request is received by the data storage system from an interface to provision storage for a specified application. The interface may be a graphical user interface, command line interface or any other suitable type of user interface. The request may optionally  include one or more other inputs in accordance with the level of user interaction and any such information may also be transmitted to the data storage system. At step  the settings for the application may be stored on the data storage system. The settings may include customized settings that may be specified with the request based on additional user inputs and\/or default settings that may be automatically provided by the data storage system in accordance with application specific best practices. At step  the storage device(s) may be configured and provisioned for data storage.","Referring to , there is illustrated technology that may be used with the technique described herein for use in managing data storage for databases based on application awareness. The control paths, as described in relation to , includes steps S, S, S by which a user issues an application-based provisioning request to the data storage system using the GUI and settings  include application aware configuration metadata. In particular, in the case of object-based (XAM\/CAS) storage for example, in response to the request, the data storage system creates LUNs, builds a file system on top of the LUNs, assigns the file system to XAM or CAS technology as the case may be, retrieves a set of parameters for the application, and sets up the data storage system in accordance with the parameters. For example, if the application is an e-commerce database application, the parameters may, inter alia, specify that the transaction data must be kept for several years and a virtual pool is needed that only allows the e-commerce application to access objects. By use of application aware logic, the system avoids requiring the user to implement the settings manually after selecting the application as the subject of the provisioning. As described above, a p-file is set up that, among other things, helps identify users who are permitted to access objects in the virtual pool.","With reference to , the data path may include I\/O  being directed from host  to data storage system , and specifically to XAM\/CAS (object) , file  and block storage  logic and interfaces depending on the type of I\/O. In each case, whether the I\/O is object, file, or block type, as the I\/O flows into system  or is stored in system , metadata  is available that pertains to the application for which storage was provisioned in the control path. In particular, when the I\/O arrives with its own content and metadata, this content and metadata can be mapped against metadata  that is based on application aware provisioning.","In at least one implementation, metadata  has requirements or guidelines as to characteristics of I\/O that is acceptable or consistent with the application for which the provisioning was performed. Depending on the implementation, these characteristics may include or specify, for example, file formats, specific bit\/byte sequences and the like.","Referring to , there is illustrated a database software feature  which may execute database algorithms in the system  so that the system  can have a database protocol interface to the host  as well as object (XAM\/CAS), file, and block interfaces , ,  respectively. The host  runs an e-commerce database application  and ODBC driver  and the software feature  can store the database (i.e. database tables) on system  through file interface  and\/or block interface . In this embodiment a multi-node instance of software  is installed on system  and the other data storage systems (not illustrated) to allow communication with each other so as to present the database interface to the host . We have not illustrated other data storage system for ease of illustration however they would be similar to system . The user directs GUI  for provisioning system  and selects provisioning system  for an e-commerce database application. The GUI  sends a command to Web server  to provision system  for an e-commerce database application with a named database. In the example, the system  uses default settings that are already available to system  from storage  for the named database application. Such default settings may include a database schema, a setting to carve out a defined amount of data storage space, a setting to carve out storage on solid state disk drives (SSDs) for performance since certain LUNs will be heavily accessed, a setting to use a mirroring backup scheme since the database is mission critical and the like.","Referring to , a flowchart  is illustrated summarizing the steps for managing databases in data storage systems. All the aforementioned systems and examples may be configured for performing the techniques summarized in the flowchart and described herein. In this embodiment the data storage system can comprise a plurality of nodes (not illustrated for ease of illustration) across which can be distributed the database tables. It will be apparent to those skilled in the art that the nodes may facilitate receiving, storing, accessing and processing data. The technique as described comprises identifying  an application intending to use a database. For example, the application may be the application  from  and the application may be identified when the user sends the request to configure and provision the data storage in the data storage system. It will be readily apparent to those skilled in the art that the application can be an e-commerce database application or any other database application such as a business application. On identifying the application the technique provisions  the data storage for storing the database. The technique subsequently allows the distribution  of database tables across the plurality of nodes. The distribution may be carried out in accordance with the user's instructions or in accordance with default instructions saved in one of the storage systems.","The technique may also require that the user enters details in respect of the application so that the technique can estimate  a first I\/O profile. The requirement to enter these details may come before the distribution of the tables across the nodes. For example, the details may be entered when requesting configuration and\/or provisioning of data storage. The first I\/O profile is a forecasted I\/O profile between the application and the database. Essentially, this is an estimated I\/O profile by the user. For example, the user may estimate that a certain amount of transactions and queries will occur between the application and the database. The user may estimate that the profile will be write hot. He may estimate that the database will be busy at a certain time of the day. There is a variety of different I\/O estimates that the user may make.","Additionally, the technique may be configured to capture information in connection with the activity between the application and the database when the database tables have been distributed across the nodes. The captured information may enable determination  of a second I\/O profile. The second I\/O profile is an actual in-running I\/O profile between the application and the database. In one embodiment the profile may be determined periodically after an initial relax period as the application may not have a lot of activity initially. Subsequently, the technique compares  the first I\/O profile and the second I\/O profile to determine whether the profiles are similar. It may be expected that the first estimate profile should be similar to the in-running second profile. However, it is sometimes the case that the user has over estimated or under estimated the I\/O profile. An overestimation may occur when the first expected I\/O profile has been overstated. Conversely, an underestimation may occur when the first I\/O profile has been understated. In both cases, it may be necessary to rebalance the data storage as one or more of the nodes may be extremely busy or extremely quiet and a redistribution would increase efficiency, performance and cost savings. If the technique decides  that there is a need for rebalancing, the reorganization  takes place. The decision to reorganize may ultimately be made in response to the comparison of the first and second profiles. If the decision decides  that there is no need for reorganizing, there is no change.","In one embodiment the reorganizing includes dumping the database tables across all the nodes to a log before redistributing the database tables to the nodes. Additionally, the reorganizing includes the addition or removal of a node in the data storage system. For example, the first and second I\/O profiles may relate to the amount of transactions and queries between the application and the database. Additionally, the discrepancy may relate to the difference in the amount of transactions and queries between the forecasted first I\/O profile and the actual second I\/O profile. The reorganization may include the addition of at least one additional node in response to the comparison determining the second I\/O profile is greater than the first I\/O profile and subsequently to redistribute the tables across the nodes. Alternatively, the reorganizing may include the removal of at least one node in response to the comparison determining the expected first I\/O profile is greater than the actual second I\/O profile and subsequently the tables are re-distributed.","It will be appreciated by those skilled in the art that the first and second I\/O profiles may provide detailed breakdowns of transactions and queries in connection with the respective nodes such that the comparison between the first and second I\/O profiles can identify the quietest and busiest nodes allowing the reorganizing to migrate data from the busiest to the quietest node.","Referring to , there is illustrated a flowchart  summarizing the steps for managing databases in data storage systems. All the aforementioned systems and examples may be configured for performing the techniques summarized in the flowchart and described herein. Indeed, all of the systems and examples may be configured to perform the techniques of  or combinations thereof. The technique described herein is configured to identify  an application intending to use a database. The identification  may occur on the user submitting a request for provisioning of data storage in much the same way as described above. The technique may provision  the data storage system for data storage in response to the request and identifying the application. The database tables may subsequently be distributed  across the nodes. However, in this embodiment the technique is configured to detect  fragmentation in connection with the database tables on the respective nodes. In one embodiment the technique tracks record deletion per node so that when the number of deletions exceeds a threshold associated with the node, fragmentation is detected. For a given application, a certain amount of deletions may signal fragmentation. For example, if the database is an ecommerce database, a node may be deemed to be \u201cout of balance\u201d and fragmentation detected when it has seen twice the number of deletions than another node. If the database is an ERP database, then it may be five times the number of deletions. The threshold associated with the node may be set in response to identifying the application using the database. It will be appreciated from the foregoing that the technique described herein enables different types of application databases to have more performance tolerance when it comes to fragmentation. Alternatively, the technique may be configured to detect fragmentation automatically at defined time intervals. For example, the technique assumes that fragmentation occurs after a certain time period. Based on detecting fragmentation , the technique may reorganize  the database tables on the nodes. In this embodiment the reorganization involves dumping the tables to a text file, deleting the tables, recreating the tables and reloading the recreated tables to the nodes. If fragmentation is not detected, there is no change.","It will be appreciated that the management system  of  may assist both techniques described above in determining if the database needs to be reorganized.","An embodiment may implement the techniques herein using code executed by a computer processor. For example, an embodiment may implement the techniques herein using code which is executed by a processor of the data storage system. As will be appreciated by those skilled in the art, the code may be stored on the data storage system on any one of a computer-readable medium having any one of a variety of different forms including volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by a data storage system processor.","While the invention has been disclosed in connection with preferred embodiments shown and described in detail, their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly, the spirit and scope of the present invention should be limited only by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be more clearly understood from the following description of preferred embodiments thereof which are given by way of example only with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
