---
title: Systems and methods for optimizing geometric stretch of a parametrization scheme
abstract: Systems and methods are provided for optimizing the geometric stretch of a parametrization scheme. Given an arbitrary mesh, the systems and methods construct a progressive mesh (PM) such that all meshes in the PM sequence share a common texture parametrization. The systems and methods minimize geometric stretch, i.e., small texture distances mapped onto large surface distances, to balance sampling rates over all locations and directions on the surface. The systems and methods also minimize texture deviation, i.e., “slippage” error based on parametric correspondence, to obtain accurate textured mesh approximations. The technique(s) begin by partitioning the mesh into charts using planarity and compactness heuristics. Then, the technique(s) proceed by creating a stretch-minimizing parametrization within each chart, and by resizing the charts based on the resulting stretch. Then, the technique(s) simplify the mesh while respecting the chart boundaries. Next, the parametrization is re-optimized to reduce both stretch and deviation over the whole PM sequence. The charts may then be packed into a texture atlas for improved texture mapping in connection with a parametrization scheme.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06850233&OS=06850233&RS=06850233
owner: Microsoft Corporation
number: 06850233
owner_city: Redmond
owner_country: US
publication_date: 20020501
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE AND PERMISSION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Overview"],"p":["A portion of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document: Copyright \u00a9 2001, Microsoft Corp.","The present invention relates to systems and methods for optimizing parametrization schemes in connection with computer graphics. More particularly, the present invention relates to systems and methods for optimizing geometric stretch of a parametrization scheme.","A progressive mesh (PM) representation encodes an arbitrary mesh as a simple base mesh Mand a sequence of n refinement operations called vertex splits. The PM defines an array {M. . . M} of level-of-detail (LOD) approximations, and supports geomorphs and progressive transmission. Unlike multiresolution frameworks based on subdivision, the meshes in a PM have irregular connectivities that can accurately model sharp features (e.g., creases and corners) at all scales.","One challenge in the PM framework is handling texture maps. Hardware rasterization features, including bump maps, normal maps, and multitexturing, allow fine detail to be captured in texture images parametrized over the mesh. Processes that implicate sources for textures include sampling detailed scanned meshes, evaluating solid textures, ray tracing, and 3D painting. In this regard, there are various problems associated with parametrizing texture images over all meshes in a PM sequence.","A single unfolding of an arbitrary mesh onto a texture image may create regions of high distortion, so generally a mesh must be partitioned into a set of charts. Each chart is parametrized by a region of a texture domain, and these parametrizations collectively form an atlas, an exemplary one of which is illustrated in FIG. C. For instance, several schemes simplify a mesh and then construct a texture image chart over each simplified face by sampling attributes, e.g., normals, from the original mesh.","For a PM, one might consider re-using chart images defined on faces of Mfor all meshes M. . . M. However, the problem is that a PM is generally not chart-compliant, in that its vertex splits can change the chart topology when applied indiscriminately near chart boundaries, thereby forcing parametric discontinuities. For example, the vertex split shown in  changes the adjacency of the three colored charts of , resulting in the discontinuous texture. Fortunately, it is possible to construct a single atlas parametrization for the entire PM sequence. Chart-compliance can be obtained by first defining the charts on the original mesh, and then constraining a simplification sequence to comply with those chart boundaries, as described by Cohen, Olano and Manocha.","With respect to mesh partitioning, there have been several previous techniques that have proposed methods for parametrizing meshes by partitioning into charts. Krishnamurthy and Levoy describe an interactive system in which the user manually lays out chart boundaries by tracing curves. Maillot et al. partition mesh faces according to a bucketing of face normals. Eck et al. use a Voronoi-based partition. These last two algorithms make little effort to adapt charts to surface geometry, so the chart boundaries can hinder simplification, leading to poor LOD approximations.","The technmques of Lee et al. (\u201cMAPS\u201d) and Guskov et al. (\u201cNormal Meshes\u201d) map edges of the simplified base domain back to the original mesh. While the resulting charts adapt to surface geometry, their boundaries cut across faces of original mesh, requiring addition of new vertices and faces. For the applications described in MAPS and Normal Meshes, these additional vertices are only temporary, because the mesh geometry is subsequently resampled. However, the techniques of MAPS and Normal Meshes are not suited to generating a PM from a user-specified mesh, whose connectivity is often carefully optimized, because the imposition of new vertices is a drawback to such an application.","With respect to chart parametrization, several schemes have been proposed to flatten surface regions to establish a parametrization. These schemes typically obtain the parametrization by minimizing an objective functional. The main distinction between the functionals is how they measure the distance of the parametrization from an isometry, which is a mapping preserving lengths and angles.","Maillot et al. base their metric on edge springs of nonzero rest length, where rest length corresponds to edge length on the surface. To ensure that the parametrization is 1-to-1, i.e., to avoid parametric \u201cbuckling,\u201d also called \u201cface flipping,\u201d they add an area-preservation term to the metric. However, a downside to the technique of Maillot et al. is that when the texture domain boundary is fixed, it is unclear how edge rest-lengths should be scaled. Another downside is that the weighting between the edge springs and the area-preservation term must be adjusted to produce an embedding.","Eck et al. propose the harmonic map, which weights edge springs non-uniformly. The weights can sometimes be negative, in which case an embedding is not guaranteed. Floater proposes a similar scheme with a different edge-spring weighting that guarantees embedding for convex boundaries. For either method, the parametrization can be found by solving a linear system.","L\u00e9vy and Mallet combine orthogonality and isoparametric terms in their metric. To solve the resulting nonlinear optimization, they iteratively fix one texture component, s or t, and solve for the other using a linear optimization. As with Lindstrom and Turk, a term is added, which must be sufficiently weighted to guarantee an embedding.","Horman and Greiner propose the MIPS parametrization, which roughly attempts to preserve the ratio of singular values over the parametrization. However, the metric disregards absolute stretch scale over the surface, with the result that small domain areas can map to large regions on the surface.","With respect to appearance preserving simplification, Cohen et al. introduce texture deviation as the appropriate measure of geometric accuracy when simplifying textured meshes. The texture deviation between a simplified mesh Mand the original mesh Mat a point p\u03b5 Mis defined as \u2225p\u2212p\u2225 where pis the point on Mwith the same parametric location in the texture domain. Cohen et al. track texture deviation conservatively by storing a bounding error box at each mesh vertex. They demonstrate results on parametric surfaces already organized into charts; however, the techniques of Cohen et al. do not begin with an unparametrized mesh, and then seek to form an atlas parametrization that specifically minimizes texture deviation and stretch over all meshes in a PM.","Thus, it would be desirable to improve upon prior art techniques for providing texture mapping in connection with parametrization schemes. To improve upon prior art techniques, it would be desirable to provide a system that allows all meshes in the PM to share a common texture map. Furthermore, it would be desirable to create domains with straight boundaries between chart corners, unlike, for example, the approaches of Maillot et al., L\u00e9vy and Mallet and Hormann and Greiner. It would be still further desirable to provide systems and methods for texture mapping PMs that minimize geometric stretch and texture deviation. It would be still further desirable to substantially balance sampling rates everywhere on the surface by optimizing the geometric stretch of a parametrization scheme. Moreover, it would be advantageous to provide a general solution that begins with an unparametrized mesh, and then forms an atlas parametrization that minimizes texture deviation and stretch over all meshes in a PM.","In view of the foregoing, the present invention provides systems and methods for optimizing the geometric stretch of a parametrization scheme. Given an arbitrary mesh, the systems and methods construct a progressive mesh (PM) such that all meshes in the PM sequence share a common texture parametrization. The systems and methods minimize geometric stretch, i.e., small texture distances mapped onto large surface distances, to balance sampling rates over all locations and directions on the surface. The systems and methods also minimize texture deviation, i.e., \u201cslippage\u201d error based on parametric correspondence, to obtain accurate textured mesh approximations. The technique(s) begin by partitioning the mesh into charts using planarity and compactness heuristics. Then, the technique(s) proceed by creating a stretch-minimizing parametrization within each chart, and by resizing the charts based on the resulting stretch. Then, the technique(s) simplify the mesh while respecting the chart boundaries. Next, the parametrization is re-optimized to reduce both stretch and deviation over the whole PM sequence. The charts may then be packed into a texture atlas for improved texture mapping in connection with a parametrization scheme.","Other features and embodiments of the present invention are described below.","The present invention relates to systems and methods for optimizing the geometric stretch of a parametrization scheme. In various implementations and embodiments, the systems and methods provide (1) algorithm(s) for partitioning a mesh into charts, which considers simplification quality and does not alter the mesh, (2) a geometric stretch metric that uniformly penalizes undersampling everywhere over the surface, (3) algorithm(s) for minimizing this stretch metric in the Land L norms, which can be used for both static meshes and PMs, (4) technique(s) for optimizing the parametrization to minimize both geometric stretch and texture deviation at all PM levels, with appropriate weighting of each mesh in M. . . M, (5) technique(s) for ereating a PM representation with a consistent surface parametrization for all LODs and (6) technique(s) that form an atlas parametrization from an unparametrized mesh that minimizes texture deviation and stretch over all meshes in a PM.","Exemplary Networked and Distributed Environments","One of ordinary skill in the art can appreciate that a computer or other client or server device can be deployed as part of a computer network, or in a distributed computing environment. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes, which may be used in connection with a parametrization process. The present invention may apply to an environment with server computers and client computers deployed in a network environment or distributed computing environment, having remote or local storage. The present invention may also be applied to standalone computing devices, having programming language functionality, interpretation and execution capabilities for generating, receiving and transmitting information in connection with remote or local services.","Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information, cache storage, and disk storage for files. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may implicate a parametrization process that may utilize the techniques of the present invention.",{"@attributes":{"id":"P-00037","num":"00037"},"figref":"FIG. 2A","b":["10","10","110","110","110","14","2","10","110"],"i":["a","b","a","b","c"]},"In a distributed computing architecture, computers, which may have traditionally been used solely as clients, communicate directly among themselves and can act as both clients and servers, assuming whatever role is most efficient for the network. This reduces the load on servers and allows all of the clients to access resources available on other clients, thereby increasing the capability and efficiency of the entire network. Parametrization services in accordance with the present invention may thus be distributed among clients and servers, acting in a way that is efficient for the entire network.","Distributed computing can help businesses deliver services and capabilities more efficiently across diverse geographic boundaries. Moreover, distributed computing can move data closer to the point where data is consumed acting as a network caching mechanism. Distributed computing also allows computing networks to dynamically work together using intelligent agents. Agents reside on peer computers and communicate various kinds of information back and forth. Agents may also initiate tasks on behalf of other peer systems. For instance, intelligent agents can be used to prioritize tasks on a network, change traffic flow, search for files locally or determine anomalous behavior such as a virus and stop it before it affects the network. All sorts of other services may be contemplated as well. Since graphical object(s) may in practice be physically located in one or more locations, the ability to distribute parametrization services is of great utility in such a system.","It can also be appreciated that an object, such as , may be hosted on another computing device  or . Thus, although the physical environment depicted may show the connected devices as computers, such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs, televisions, MP3 players, etc., software objects such as interfaces, COM objects and the like.","There are a variety of systems, components, and network configurations that support distributed computing environments. For example, computing systems may be connected together by wireline or wireless systems, by local networks or widely distributed networks. Currently, many of the networks are coupled to the Internet, which provides the infrastructure for widely distributed computing and encompasses many different networks.","In home networking environments, there are at least four disparate network transport media that may each support a unique protocol such as Power line, data (both wireless and wired), voice (e.g., telephone) and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband (e.g., either DSL or Cable modem) and are accessible within the home using either wireless (e.g., HomeRF or 802.11b) or wired (e.g., Home PNA, Cat 5, even power line) connectivity. Voice traffic may enter the home either as wired (e.g., Cat 3) or wireless (e.g., cell phones) and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short, a variety of disparate sources exist for the storage and transmission of data, and consequently, moving forward, computing devices will require ways of sharing data, such as data accessed or utilized incident to the parametrization of graphics object(s) in connection with the present invention.","The Internet commonly refers to the collection of networks and gateways that utilize the TCP\/IP suite of protocols, which are well-known in the art of computer networking. TCP\/IP is an acronym for \u201cTransport Control Protocol\/Interface Program.\u201d The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide-spread information sharing, remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services, essentially without restriction.","Thus, the network infrastructure enables a host of network topologies such as client\/server, peer-to-peer, or hybrid architectures. The \u201cclient\u201d is a member of a class or group that uses the services of another class or group to which it is not related. Thus, in computing, a client is a process, i.e., roughly a set of instructions or tasks, that requests a service provided by another program. The client process utilizes the requested service without having to \u201cknow\u201d any working details about the other program or the service itself. In a client\/server architecture, particularly a networked system, a client is usually a computer that accesses shared network resources provided by another computer e.g., a server. In the example of , computers , , etc. can be thought of as clients and computer , , etc. can be thought of as the server where server , , etc. maintains the data that is then replicated in the client computers , , etc.","A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server.","Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example, Hypertext-Transfer Protocol (HTTP) is a common protocol that is used in conjunction with the World Wide Web (WWW). Typically, a computer network address such as a Universal Resource Locator (URL) or an Internet Protocol (IP) address is used to identify the server or client computers to each other. The network address can be referred to as a URL address. For example, communication can be provided over a communications medium. In particular, the client and server may be coupled to one another via TCP\/IP connections for high-capacity communication.","Thus,  illustrates an exemplary networked or distributed environment, with a server in communication with client computers via a network\/bus, in which the present invention may be employed. In more detail, a number of servers , , etc., are interconnected via a communications network\/bus , which may be a LAN, WAN, intranet, the Internet, etc., with a number of client or remote computing devices , , , , , etc., such as a portable computer, handheld computer, thin client, networked appliance, or other device, such as a VCR, TV, oven, light, heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process graphical object(s).","In a network environment in which the communications network\/bus  is the Internet, for example, the servers  can be Web servers with which the clients , , , , , etc. communicate via any of a number of known protocols such as HTTP. Servers  may also serve as clients , as may be characteristic of a distributed computing environment. Communications may be wired or wireless, where appropriate. Client devices  may or may not communicate via communications network\/bus , and may have independent communications associated therewith. For example, in the case of a TV or VCR, there may or may not be a networked aspect to the control thereof. Each client computer  and server computer  may be equipped with various application program modules or objects  and with connections or access to various types of storage elements or objects, across which files may be stored or to which portion(s) of files may be downloaded or migrated. Any computer , , , , etc. may be responsible for the maintenance and updating of a database  or other storage element in accordance with the present invention, such as a database or memory  for storing graphics object(s) or intermediate graphics object(s) processed according to the invention. Thus, the present invention can be utilized in a computer network environment having client computers , , etc. that can access and interact with a computer network\/bus  and server computers , , etc. that may interact with client computers , , etc. and other devices  and databases .","Exemplary Computing Device","FIG. B and the following discussion are intended to provide a brief general description of a suitable computing environment in which the invention may be implemented. It should be understood, however, that handheld, portable and other computing devices and computing objects of all kinds are contemplated for use in connection with the present invention. While a general purpose computer is described below, this is but one example, and the present invention may be implemented with a thin client having network\/bus interoperability and interaction. Thus, the present invention may be implemented in an environment of networked hosted services in which very little or minimal client resources are implicated, e.g., a networked environment in which the client device serves merely as an interface to the network\/bus, such as an object placed in an appliance. In essence, anywhere that data may be stored or from which data may be retrieved is a desirable, or suitable, environment for operation of the parametrization techniques of the invention.","Although not required, the invention can be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application software that operates in connection with the parametrization of graphics object(s). Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network\/bus or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices, and client nodes may in turn behave as server nodes.",{"@attributes":{"id":"P-00052","num":"00052"},"figref":"FIG. 2B","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated-data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through an non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked or distributed environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in FIG. B. The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks\/buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Exemplary Distributed Computing Frameworks or Architectures","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web-enabled interface for applications and computing devices, making computing activities increasingly Web browser or network-oriented.","For example, MICROSOFT\u00ae's .NET platform includes servers, building-block services, such as Web-based data storage and downloadable device software. Generally speaking, the NET platform provides (1) the ability to make the entire range of computing devices work together and to have user information automatically updated and synchronized on all of them, (2) increased interactive capability for Web sites, enabled by greater use of XML rather than HTML, (3) online services that feature customized access and delivery of products and services to the user from a central starting point for the management of various applications, such as e-mail, for example, or software, such as Office NET, (4) centralized data storage, which will increase efficiency and ease of access to information, as well as synchronization of information among users and devices, (5) the ability to integrate various communications media, such as e-mail, faxes, and telephones, (6) for developers, the ability to create reusable modules, thereby increasing productivity and reducing the number of programming errors and (7) many other cross-platform integration features as well.","While exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of the invention may also be implemented via an operating system, application programming interface (API) or a \u201cmiddle man\u201d object between a coprocessor and requesting object, such that parametrization services may be performed by, supported in or accessed via all of NET's languages and services, and in other distributed computing frameworks as well.","Optimizing Geometric Stretch to Create Balanced Parametrization","The present invention relates to the optimization of geometric stretch in connection with a parametrization process. Given an arbitrary mesh, the systems and methods of the invention construct a progressive mesh (PM) such that all meshes in the PM sequence share a common texture parametrization. The systems and methods minimize geometric stretch, i.e., small texture distances mapped onto large surface distances, to balance sampling rates over all locations and directions on the surface. The systems and methods also minimize texture deviation, i.e., \u201cslippage\u201d error based on parametric correspondence, to obtain accurate textured mesh approximations. The technique(s) begin by partitioning the mesh into charts using planarity and compactness heuristics. Then, the technique(s) proceed by creating a stretch-minimizing parametrization within each chart, and by resizing the charts based on the resulting stretch. Then, the technique(s) simplify the mesh while respecting the chart boundaries. Next, the parametrization is re-optimized to reduce both stretch and deviation over the whole PM sequence. The charts may then be packed into a texture atlas for improved texture mapping in connection with a parametrization scheme.","To allow all meshes in the PM to share a common texture map, the present invention creates domains with straight boundaries between chart corners. In accordance with the optimization of the present invention, two relevant processes for texture mapping PMs are optimized: geometric stretch and texture deviation. In this regard, geometric stretch and texture deviation are minimized. The stretch metric utilized in accordance with the invention balances sampling rates everywhere on the surface, unlike previous techniques, thus proving to be an effective general solution when nothing is known in advance about the signal, or object, being parametrized.","As intimated in the background, the invention addresses the following problem: given an arbitrary mesh, parametrize it onto a texture atlas, and create a PM sequence compliant with the atlas charts, while minimizing geometric stretch and texture deviation.","With respect to minimizing geometric stretch, the parametrization determines sampling density over the surface, but is constructed before knowing what texture map(s) will be applied. Therefore, the invention provides a balanced parametrization rather than one that samples finely in some surface regions or directions while undersampling others. This is what is referred to herein as minimizing \u201cgeometric stretch.\u201d A conservative, local measure of how finely the parametrization samples the texture signal is the larger singular value of its Jacobian, which measures how much a sampling direction in the texture domain is stretched on the mesh surface in the worst case. By minimizing the largest geometric stretch across all domain points, the invention creates a balanced parametrization where no domain direction is too stretched and thus undersamples its corresponding mapped 3D direction. As will become apparent, , G, C and D show the minimization of geometric stretch in accordance with the invention compared to  and .","With respect to minimizing texture deviation, traditional mesh simplification techniques measure geometric error by approximating closest-point distance. For textured surfaces, however, it is more appropriate to use the stricter texture deviation error, which measures geometric error according to parametric correspondence. For a PM, texture deviation can be graphed as a function of mesh complexity, as shown in FIG. B. As shown by the graph, the invention lowers this graph curve.","While the motivation for partitioning the surface into charts is to reduce geometric stretch, the presence of chart boundaries hinders simplification quality since chart-compliance requires that these boundaries appear as edges in all meshes including M. In the extreme, if each face of Mis made its own chart, stretch is zero, but no simplification can occur. Hence, there exists a trade-off between geometric stretch and deviation.","Minimizing stretch and deviation is a difficult nonlinear problem over both discrete and continuous variables. The discrete variables are the mesh partition and the edge collapse sequence. The continuous variables are the texture coordinates of the vertices. The techniques of the invention in various embodiments set the discrete variables early, using heuristics, and then proceed to optimize the continuous variables. In one embodiment, the method includes the following steps: (1) partition the original mesh into charts (considering geometry), (2) form initial chart parametrizations (minimizing stretch), (3) resize the chart polygons (based on stretch), (4) simplify the mesh (minimizing texture deviation, creating PM), (5) optimize the parametrization (stretch & deviation over all PM), (6) pack the chart polygons (forming texture atlas) and (7) sample the texture images (using atlas parametrization).","The present invention defines a new geometric stretch metric. To optimize the ability of a parametrization to balance frequency content everywhere over the surface in every direction, the \u201cgeometric stretch\u201d metric on triangle meshes is as follows:","Given a triangle T with 2D texture coordinates p,p,p, p=(s,t), and corresponding 3D coordinates q,q,q, the unique affine mapping S(p)=S(s,t)=q is:\n\n()=(<)\/>\n\nwhere <a,b,c> denotes area of triangle abc. Since the mapping is affine, its partial derivatives are constant over (s,t) and are given by:\n\n=(()+()+())\/(2)\n\n=(()+()+())\/(2)\n\n=<p>=(()()\u2212()())\/2\n\nThe larger and smaller singular values of the Jacobian [S,S] are given respectively by: \n\n\nwhere a=S\u00b7S, b=S\u00b7S, and c=S\u00b7S. The singular values \u0393 and \u03b3 represent the largest and smallest length obtained when mapping unit-length vectors from the texture domain to the surface, i.e. the largest and smallest local \u201cstretch\u201d. Thus, in accordance with the invention, two stretch norms are defined over triangle T:\n\n()=\u221a{square root over ((\u0393+\u03b3)\/2)}=\u221a{square root over (()\/2)}, ()=\u0393.\n\nThe norm L(T) corresponds to the root-mean-square stretch over all directions in the domain, and the worst-case norm L(T) is the greatest stretch, i.e., the maximum singular value. It is noted that both L(T) and L(T) increase to infinity as the parametrization of T becomes degenerate, since its parametric area A drops to zero. If the triangle T flips parametrically, i.e., if A becomes negative, then both L(T) and L(T) are defined to remain infinite.\n","In addition, two analogous norms over the surface of the entire mesh M={T} are defined: \n\n\nwhere A\u2032(T) is the surface area of triangle Tin 3D. The Lnorm measures the overall ability of the parametrization to support high-frequency textures, while L measures its worst-case ability. The stretch values are normalized by scaling the texture domain so that its area equals the surface area in 3D. Thus, 1.0 is a lower bound for either norm on any parametrization. Alternately, stretch can be normalized without explicitly scaling the texture domain by multiplying with the factor: \n\n","To minimize the nonlinear metrics L(M) and L(M), a uniform-edge-spring solution begins the process, and then several optimization iterations are performed. Within each iteration, vertices are considered in decreasing order of neighborhood stretch. For each vertex, a line search minimization is performed along a randomly chosen search direction in the (s,t) parametric domain. Since the other vertices are held fixed, the stretch metric only needs local computation over the neighborhood. Since the metric is infinite for degenerate or flipped triangles, the line search is naturally constrained within the kernel of the vertex's neighborhood. In successive iterations, the convergence tolerance is gradually decreased in the 1D line search using the schedule 1\/i where i is the iteration number. For the L optimization, better results are obtained by using our Lsolution as its starting point.",{"@attributes":{"id":"P-00086","num":"00086"},"figref":["FIGS. 3B through 3G","FIGS. 3F and 3G","FIGS. 3B through 3E","FIG. 3A","FIGS. 3B","FIG. 3B","FIG. 3C","FIG. 3D","FIG. 3E","FIGS. 3B","FIGS. 3B","FIG. 3D","FIG. 3E","FIG. 3D","FIGS. 3B","FIG. 3G","FIGS. 3F and 3G"],"b":["3","3","3","3","3","3","3","3","3"]},"The PM parametrization scheme in connection with various embodiments of the invention is now described in more detail. First, however, some definitions and assumptions are introduced: Let a chart corner be any vertex adjacent to three or more charts, and let a chart boundary be the path of edges separating charts between two corners. Let the neighborhood of a vertex be defined as the ring of faces adjacent to the vertex.","The PM of the invention is based on the half-edge collapse operation (v, v)\u2192vwhich affects the neighborhood of vas shown in  in relation to FIG. A and leaves the position and attributes of vunchanged. The present invention preferably utilizes the half-edge collapse as opposed to the full-edge collapse to avoid writes to the vertex buffer during runtime LOD changes, although the invention is not so limited. Therefore, (s,t) texture coordinates at any vertex must be the same at all LOD levels. Since a vertex on a chart boundary has different (s,t) coordinates on each chart, these must be stored at the corners of mesh faces.","To create a texture atlas over a PM, the following constraints are enforced in accordance with the present invention: (1) mesh faces cannot span more than one chart, since it is impractical to specify and render disjoint pieces of texture over any single triangle and (2) chart boundaries must be straight in the parametric domain, since each chart boundary is generally simplified to a single edge in the PM base mesh. These constraints restrict the partition of the mesh into charts and the mesh simplification sequence, as described below.","With respect to partitioning meshes into charts, the invention first includes partitioning the mesh into a set of charts, i.e., regions with disk-like topology. Ideally, one could simultaneously search over the discrete space of possible chart decompositions and the continuous space of parametrizations allowed by each decomposition. However, this is not a very practical approach. Instead, the present invention first partitions the mesh using a greedy chart-merging approach that is similar to simplification schemes based on the greedy growth of \u201csuperfaces.\u201d","In this regard, initially, each face is assigned to be its own chart. For each pair of adjacent charts, the invention considers the operation of merging the two charts into one, and enters this candidate operation into a priority queue according to a computed cost, i.e., the merge operation is assigned a cost that measures both its planarity and compactness. In one embodiment, planarity is measured as the mean-squared distance of the chart to the best-fitting plane through the chart, defined as a continuous surface integral, unlike prior art techniques that evaluate planarity only at the vertices. Compactness is measured simply as the squared perimeter length.","The merge operation is then iteratively applied with lowest cost, and costs of neighboring candidate merge operations are updated. The process ends when the cost exceeds a user-specified threshold.","A chart merge operation is disallowed if it results in any chart with fewer than 3 corners. It is also disallowed if the boundary between the new chart and any adjacent chart consists of more than one connected component, e.g., one isolated vertex and one path of edges. This constraint also guarantees that charts remain homeomorphic to discs.","Once the charts are formed, they define the set of chart corner vertices. Note that these corner vertices in Mappear as vertices in the base mesh Mdue to the constrained half-edge collapses. Therefore, with the invention, it is desirable that each chart boundary be closely aligned with the straight line segment between its adjacent two corners, so as not to be a limiting factor in the simplification quality. Each boundary is straightened by computing a shortest path over mesh edges, constrained in that there should be no intersection with other chart boundaries. Results of the initial chart partition, and the subsequent boundary straightening are shown in  in relation to FIG. A. It is noted that chart boundaries align with important features in the mesh.  shows the initial chart partitions, and the corresponding figures in  show the results of chart boundary optimization.","With respect to forming initial chart parametrizations, once the chart boundaries are defined in M, the invention creates an initial parametrization of each chart onto a 2D polygon. The 2D polygon boundary is defined to be a convex polygon with vertices on a circle, where the length of each polygon edge is proportional to the arc-length of the corresponding chart boundary in 3D. The polygon is initially scaled to have unit area. Within each chart, the interior vertices are parametrized by minimizing the L(M) stretch metric, using the algorithm described above in connection with the geometric stretch metric of the invention. It is noted that boundary vertices could be optimized as well.","With respect to resizing chart polygons, once chart parametrizations on Mare formed, the invention determines how much relative space each chart should be granted in the texture domain. For each chart, the invention computes L(Mchart), the root mean square (RMS) stretch over the chart, and uses that value to uniformly resize the chart while preserving its shape. Although the relative chart sizes have no effect on simplification described below, they do affect E(PM) in the final PM optimization described below simplification.","With respect to simplifying the mesh, given the initial chart parametrizations, the invention simplifies the mesh to define a PM. During simplification, texture deviation is minimized. In accordance with the invention, edge collapses are selected that minimize texture deviation by using a priority queue. To enforce chart compliance, edge collapse (v,v)\u2192vin M\u2192Mare disallowed if vertex vis a chart corner (to preserve corners), or if vis on a chart boundary and edge (v,v) is not on a chart boundary (to preserve boundary straightness). In addition, the creation of parametrically flipped or degenerate triangles is prevented.","To measure texture deviation for each candidate edge collapse, rather than using conservative bounds, the invention measures the incremental texture deviation d(M,M) between the two meshes. It is noted that his measurement is based on a heuristic akin to the \u201cmemoryless\u201d error that has proven effective for geometric simplification. The maximum deviation between Mand Mis known to lie either at the removed vertex vor at an edge-edge intersection point in the parametric neighborhood, e.g., the red points RPs shown in FIG. . In this regard, it has empirically shown that the incremental deviation heuristic works well by comparing the heuristic to a slow simplification that orders edge collapses using the true deviation error, i.e., deviation between Mand M.","With respect to the optimization of chart parametrizations, having determined the PM simplification sequence, the invention re-optimizes the chart parametrizations to minimize stretch and deviation on the entire sequence M. . . M. The nonlinear optimization algorithm utilized in accordance with the invention follows the strategy of moving vertices of Mone-by-one in the parametric domain as described above in connection with the geometric stretch metric and the formation of initial chart parametrizations, but using a different objective function.","This objective function is a weighted sum of the geometric stretch and deviation on all meshes M. . . Mas follows:\n\n()=\u03a3\u03c8()[\u03bb()+(1\u2212\u03bb)()\u2032()]\n\nwhere L(M) is the normalized average stretch of Mdescribed above computed using the resized charts described above with respect to the resizing of chart polygons, d(M,M) is its texture deviation, the parameter 0\u2266\u03bb\u22661 is used to weight stretch error relative to deviation error, and \u03c8(i) is the relative weight assigned to each LOD mesh in the sequence. Dividing by the mesh surface area A\u2032(M) makes the second term scale-invariant like the first term.\n","A model will now be introduced for setting the relative weight \u03c8(i) assigned to each mesh M, consisting of two factors: usage and scale. Depending on the application, other weighting schemes could be used, without changing the optimization method.","In LOD applications, coarser meshes are likely to be used proportionately more often. For example, meshes with 10-100 faces are likely to be used more than those with 900-990 faces. Thus, a reasonable model for usage probability is a uniform distribution over a logarithmic scale of model complexity, e.g., meshes with 10-100 faces are as equally likely as meshes with 100-1000 faces. This distribution is obtained using the factor 1\/|M| where |M| is the number of vertices in M.","The fact that coarser meshes are typically used when the object is farther away reduces the screen-space scale of their deviation and stretch. For a smooth spherical surface, texture deviation varies as 1\/|M|. Since LOD algorithms attempt to maintain a constant screen-space error, deviation and, stretch in model space should therefore be down-weighted for coarser meshes using the weighting factor |M|in \u03c8(i).","To optimize the texture coordinates of a given vertex v, the optimization algorithm of the invention repeatedly evaluates E. Computing E using the above sum over all meshes would be computationally expensive. Fortunately, the neighborhood of v changes only a few times within the sequence of meshes, generally O(log |M|) times. Thus, the invention considers E only on each refinement neighborhood M\u2192Mof which v is a member. For each vertex v, the relevant refinement neighborhoods are gathered as a list during a coarse-to-fine preprocess traversal of the PM.","Since the refinement neighborhoods adjacent to a vertex v have an approximately logarithmic distribution over the PM sequence, we can account for the usage factor by summing the stretch and deviation on these refinement neighborhoods. Therefore, we weight the error over each such neighborhood by \u03c8\u2032(i)=|M|to account for the remaining scale factor.","The following pseudo-code is an exemplary and non-limiting implementation of the technique(s) described above:",{"@attributes":{"id":"P-d0e5303","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Optimize parametrization over whole PM sequence."},{"entry":"procedure parametrize_pm( )"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"gather_refinement_neighborhoods( ) \/\/ coarse-to-fine traversal"]},{"entry":[{},"repeat"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"v = some_vertex_in_mesh(M)"]},{"entry":[{},"optimize vertex(v)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"until convergence"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Optimize the parametrization param(v) of vertex v"},{"entry":"procedure optimize_vertex(vertex v)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"repeat"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"vector dir = random_search_direction( )\u2003 \/\/ in 2D domain"]},{"entry":[{},"\/\/ perform line search minimization"]},{"entry":[{},"repeat"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"select float t\u2003\u2003\/\/ e.g. using binaiy line search"]},{"entry":[{},"param(v) = param(v) + dir * t \/\/ perturb parametrization"]},{"entry":[{},"of v"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"until error_over_PM(v) is minimized"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"until convergence"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Sum of errors affected by param(v) in all meshes M...M."},{"entry":"function error_over_PM(vertex v)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"error = 0"]},{"entry":[{},"for (vertex w in refinement_neighborhoods(v))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"error += error_over neighborhood(w, v)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return error"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Error due to v in neighborhood of w (where w is first introduced)"},{"entry":"function error_over_neighborhood(vertex w, vertex v)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return \u03c8'level(w))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[\u03bb * stretch_error(w, original neighbors(w), v) +"]},{"entry":[{},"(1-\u03bb) * deviation error(w, original neighbors(w), v) \/"]},{"entry":[{},"A\u2032(M)]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As described above in connection with mesh simplification, the invention approximates the deviation error d(M,M) with the incremental deviation error d(M,M). Because the stretch metric of the invention is defined to be infinite when a face is flipped in the parameter domain, stretch minimization prevents parametric flipping in all meshes. One further non-limiting detail is that the invention optimizes the parametrization of vertices along chart boundaries. Since these vertices have texture coordinates in two adjacent charts, the invention considers the refinement neighborhoods in both charts simultaneously. Specifically, parametrizations are constrained to remain on the boundaries, and optimizations take place over shared barycentric coordinates along the boundary to prevent \u201cparametric cracks.\u201d","With respect to packing chart polygons, since the above-described optimization modifies the parametrization, a final chart resizing step is performed in accordance with the invention.","Thus, the next step is to pack the resized charts into a rectangular texture image. In the context of texture mapping, various heuristics have been presented for the special case of packing 3-sided charts; however, the chart boundaries of the invention advantageously can be arbitrary polygons. In this regard, the general problem is known as the NP-hard pants packing problem.","The problem is simplified by the invention by conservatively approximating each chart polygon with the least-area rectangle that encloses it. This rectangle is found efficiently by considering each edge of the polygon's convex hull. Fortunately, the chart polygons of the invention are reasonably shaped, so the rectangle approximation is not too costly. The chart is rotated to align the long axis of the rectangle with the vertical direction. The problem then becomes that of rectangle packing, which is still NP-hard. The invention provides a simple heuristic for the problem, which works as follows.","Rectangles are sorted by height. In order of decreasing height, rectangles are placed sequentially into rows in alternating left-to-right and right-to-left order as shown in FIG. C. Through binary search, the invention optimizes over the texture width such that the packing minimizes the area of the enclosing square.","When the desired texture sampling density is later determined, a one texel gap is left between adjacent charts.  illustrate results of the chart packing efficiency of the invention.","With respect to sampling texture images, the packed charts define a texture atlas for the surface. In accordance with the invention, the atlas is used to sample attributes from the surface Minto the texture domain, at the 2D grid of texel locations. For improved filtering, the invention supersamples the attributes using a 4\u00d74 box filter.  illustrate results of sampling colors and normals.","If the highest frequency f of the attribute function over the surface mesh is known, the stretch-based scale of the texture atlas makes it possible to estimate the required 2D grid sampling density. With the charts resized as described previously herein, the 2D grid spacing should be set no more than 1\/(2f).","In general, schemes that pack multiple charts into a single texture image may give rise to mip-mapping artifacts, since coarser mip-map levels average together spatially disjoint charts. The most immediate artifact is that chart boundaries are revealed if the inter-chart area is left unpainted, e.g., black. To mitigate this, the invention applies a pull-push algorithm to fill in these unsampled regions with reasonable values. As an example, the effect on the atlas image from  is shown in FIG. .",{"@attributes":{"id":"P-00118","num":"00118"},"figref":["FIGS. 8A and 8B","FIG. 8A"],"sup":"n"},"As mentioned, results of the various techniques presented herein are presented in .  to D show an overview of the process of the invention. First, the original mesh is partitioned into charts, establishing a stretch-minimizing parametrization on each chart, and then the mesh is simplified while minimizing texture deviation. With the resulting PM sequence M. . . M, the parametrization is further optimized to reduce stretch and deviation in all meshes. Finally, the invention packs the charts into an atlas, and fills the atlas with texture samples from M.  to D illustrate an example result where the texture image captures pre-shaded colors from the original mesh M. Although only the textured base mesh is shown, the same texture atlas can be used on all other meshes M. . . Min the PM.",{"@attributes":{"id":"P-00120","num":"00120"},"figref":"FIGS. 10A","b":"10"},{"@attributes":{"id":"P-00121","num":"00121"},"figref":"FIGS. 11A","b":"11"},"Table 1 below provides results on the efficiency of the parametrization in reducing the required texture memory of the bunny of  to D and of the parasaur, horse and hand of . Stretch efficiency is the total surface area in 3D divided by the total chart area in 2D, \u03a3A\u2032(T)\/\u03a3A(T), given that charts are resized as described herein. It is less than unity if some surface regions are sampled more than necessary, i.e., if geometric stretch is not uniform everywhere and in every direction. Packing efficiency is the sum of chart areas in 2D divided by the rectangular texture domain area. It is less than unity due to two factors: the enclosure of chart polygons into rectangles, and the wasted space between the packed rectangles. Texture efficiency is the product of stretch and packing efficiencies, or total surface area divided by texture domain area.",{"@attributes":{"id":"P-d0e6050","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Quantitative results."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Models"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bunny","parasaur","horse","hand"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["# faces in M","69,630","43,866","96,956","60,856"]},{"entry":["# vertices in M","34,817","21,935","48,480","30,430"]},{"entry":["# charts","75","75","120","60"]},{"entry":["# faces in M","288","298","470","230"]},{"entry":["# vertices in M","146","151","237","117"]},{"entry":["(stretch","0.41","0.001","0.38","0.07"]},{"entry":"efficiency with"},{"entry":"uniform"},{"entry":"parametrization)"},{"entry":["Stretch","0.60","0.40","0.55","0.46"]},{"entry":"efficiency"},{"entry":["intra-rectangle","0.77","0.71","0.77","0.76"]},{"entry":"efficiency"},{"entry":["rectangle-","0.87","0.89","0.91","0.82"]},{"entry":"packing effic."},{"entry":["Packing","0.67","0.63","0.70","0.62"]},{"entry":"efficiency"},{"entry":["Texture","0.40","0.25","0.38","0.29"]},{"entry":"efficiency"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"A 1-texel gutter is required between texture charts in the texture domain. The overhead of these gutters depends on the resolution assigned to the texture. The packing efficiencies reported in Table 1 ignore this overhead, and therefore assume a reasonably high sampling rate.","It is noted that stretch efficiency can be improved by partitioning the surface into more charts, but this increases the complexity of the coarsest LOD mesh, and may lower overall texture efficiency due to the additional gutter area. The stretch-minimizing parametrization of the invention allows larger charts with fewer undersampling artifacts.","Thus, the present invention presents a scheme for defining a texture atlas parametrization over the PM representation of an arbitrary mesh. This atlas permits the same texture image(s) to be used for all LOD mesh approximations in the PM sequence. In forming the parametrization, the invention optimizes for both geometric stretch and deviation on all meshes in the sequence. Such optimizing according to the stretch metric of the invention creates a balanced parametrization that prevents undersampling at all locations and along all directions.","As mentioned above, while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system in which it is desirable to reconstruct signals from point samples with minimal error. Thus, the techniques for providing improved signal processing in accordance with the present invention may be applied to a variety of applications and devices. For instance, the algorithm(s) of the invention may be applied to the operating system-of a computing device, provided as a separate object on the device, as part of another object, as a downloadable object from a server, as a \u201cmiddle man\u201d between a device or object and the network, as a distributed object, etc. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same, similar or equivalent parametrization achieved by the invention.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the signal processing services of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, a video recorder or the like, or a receiving machine having the signal processing capabilities as described in exemplary embodiments above becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally, any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example, while exemplary network environments of the invention are described in the context of a networked environment, such as a peer to peer networked environment, one skilled in the art will recognize that the present invention is not limited thereto, and that the methods, as described in the present application may apply to any computing device or environment, such as a gaming console, handheld computer, portable computer, etc., whether wired or wireless, and may be applied to any number of such computing devices connected via a communications network, and interacting across the network. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Still further, the present invention may be implemented in or across a plurality of processing chips or devices, and storage may similarly be effected across a plurality of devices. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The file of this patent includes at least one drawing executed in color. Copies of this patent with color drawings will be provided by the United States Patent and Trademark Office upon request and payment of the necessary fee.","The system and methods for optimizing geometric stretch of a parametrization scheme in accordance with the present invention are further described with reference to the accompanying drawings in which:",{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 2A"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 2B"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":["FIGS. 3A through 3G","FIGS. 3F and 3G","FIGS. 3B through 3E","FIG. 3A"]},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIGS. 8A and 8B"},{"@attributes":{"id":"P-00030","num":"00030"},"figref":"FIGS. 9A","b":"9"},{"@attributes":{"id":"P-00031","num":"00031"},"figref":"FIGS. 10A","b":"10"},{"@attributes":{"id":"P-00032","num":"00032"},"figref":"FIGS. 11A","b":"11"}]},"DETDESC":[{},{}]}
