---
title: Automated multi-operating system testing with virtualization
abstract: Techniques are provided for testing one or more applications across multiple operating systems (OSs) using virtualization. A device includes a virtualization application and a dispatcher. The virtualization application allows a plurality of guest OSs to execute on a device. The dispatcher is configured to cause a particular file to be stored in a particular location. Each guest OS includes a listener that detects when a file is stored in the particular location. When the listener of each guest OS detects that the particular file is stored in the particular location, the guest OS is configured to perform one or more tasks associated with the particular file. Each guest OS is configured to generate output in response to performing the one or more tasks. The dispatcher is further configured to analyze the output from each of the guest OSs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08453118&OS=08453118&RS=08453118
owner: Ricoh Company, Ltd.
number: 08453118
owner_city: Tokyo
owner_country: JP
publication_date: 20090209
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","General Overview","System Architecture","Virtualization Application","Dispatcher","EXAMPLE COMMUNICATION BETWEEN DISPATCHER AND GUEST OS","Additional Embodiments","Benefits","Implementation Mechanisms"],"p":["The present invention relates to automating the testing of one or more applications across multiple operating systems using virtualization.","The approaches described in this section are approaches that could be pursued, but not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated, it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.","Different computers run different operating systems (OSs). If an application vendor, such as Mozilla, desires to have an application run on all OS platforms, then an application should be tested on each OS. However, there are many OSs including many different Linux distributions. Thus, testing an application on each OS may take a significant amount of time.","To compound the problem, some OS providers release a new version of their OSs relatively frequently. For example, whereas Microsoft's OS is released every 3-5 years, Apple releases a new version of Mac OS every 18 months. Further, Fedora Linux releases a new version of its OS bi-yearly. Open Suse Linux also releases a new version of its OS bi-yearly.","It is not guaranteed that an application that runs on one version of an OS is able to run on another version of the OS. This is at least partly due to the fact that different releases have different versions of libraries and the libraries might not be backward compatible. Thus, if an application vendor does not provide an application's executable binary for a particular OS, then a user must download the application's source code, compile the source code, and generate the executable binary on the user's computer.","However, requiring the user to perform certain steps lessens the quality of the user's experience and may act as a deterrent to many users from using the application. On the other hand, an application vendor wants to limit the amount of quality assurance (QA) cost to ensure OS compatibility. Thus, many times, an application vendor may only ensure that certain (e.g., popular) OS releases are supported while hoping that the application will run properly on the other OS releases.","According to an embodiment of the invention, a device comprises a dispatcher and a virtualization application. The virtualization application allows a plurality of guest OSs to execute on the device. No guest OS in the plurality of guest OSs is the same as another guest OS in the plurality of guest Oss. The dispatcher is configured to cause a particular file to be stored in a particular location. Each guest OS of the plurality of guest OSs includes a listener that detects when a file is stored in the particular location. Each of the plurality of guest OSs is configured to perform one or more tasks, associated with the particular file, when the listener of said each guest OS detects that the particular file is stored in the particular location. Each guest OS of the plurality of guest OSs is configured to generate output in response to performing the one or more tasks. The dispatcher is further configured to analyze the output from each of the plurality of guest OSs.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Techniques are provided herein for automatically testing one or more applications across multiple operating systems using virtualization. A device includes a virtualization application and a dispatcher. A virtualization application allows multiple guest OSs to execute on a single device. A dispatcher automatically issues multiple commands to the virtualization application, which commands cause the guest OSs to perform the one or more tasks, such as compiling certain source code into an executable binary and testing the executable binary to determine whether it executes properly. Each guest OS performs the same one or more tasks. A purpose of the testing is to ensure that each guest OSs executes the one or more tasks successfully. Each guest OS generates output in response to performing the one or more tasks. The dispatcher then analyzes the output from each of the guest OSs to determine whether the one or more tasks were performed successfully by each guest OS. In this way, a QA tester is not required to manually test the application on each operating system.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","110","120","130","120","130","110"]},"Host OS  may be Linux-based, Windows-based, or Mac-based. Embodiments of the invention are not limited to any particular host OS.","Virtualization application  is a software platform that allows multiple \u201cguest\u201d operating systems (OSs) to run on a host computer at the same time. There are two types of virtualization applications. The first type of virtualization applications runs directly on a given hardware platform. Thus, a guest OS runs at the second level above the hardware. A non-limiting example of the first type includes Oracle KVM, which is free software that is licensed under GNU General Public License (GPL2).","The second type of virtualization applications runs within the host OS environment. Thus, a guest OS runs at the third level above the hardware. Non-limiting examples of the second type include VMware Workstation and Microsoft's Virtual PC. Although  depicts virtualization application  as the second type, embodiments of the invention are not limited to any particular virtualization application or any type thereof.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["120","120","210","220","130","210","220","210"]},"In the depicted example, each of guest OSs A-N is associated with a corresponding listener . Listeners A-N are scripts or programs that detect when a file is stored in a certain location, such as when a file is stored in a particular network folder. As explained in detail below, listeners A-N are not required for all embodiments of the invention.","Dispatcher  interacts with API  to cause guest OSs A-N to perform one or more tasks. In the depicted embodiment, dispatcher  uses API  to send instructions to and receive information about each of guest OSs A-N. Non-limiting examples of such instructions include starting (or launching) a guest OS, taking a snapshot of a guest OS (which creates a backup of the guest OS), shutting down a guest OS, reverting a guest OS to a previous (or particular) snapshot of the guest OS, and running a program in a guest OS. Non-limiting examples of information that dispatcher  may receive using command line API  include a list of all running guest OSs, a list of all snapshots of a guest OS, a list of the processes running in a guest OA, and a list of the contents of a directory in a guest OS. Dispatcher  may be implemented in computer software, computer hardware, or any combination of computer software and computer hardware.","In an alternative embodiment, each guest OS  runs a web server. Thus, dispatcher , running a web client, communicates with guest OSs A-N using Hypertext Transfer Protocol (HTTP). For example, dispatcher  sends a HTTP post message that includes an instruction and\/or a file (e.g., an executable script) to execute.","In a related embodiment, dispatcher  runs a web server. Each guest OS  sends, to dispatcher , a HTTP request message that requests instructions and\/or a file to execute. In response, dispatcher  responds with a HTTP post message that includes the instructions and\/or file to execute.","In a related embodiment, dispatcher  configures each guest OS  to, at start-up of the guest OS , retrieve a script located at a particular location and execute the script. The particular location may be on a device that is local or remote relative to the device upon which host OS  executes.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3","b":["130","302","130","210","120"]},"At step , dispatcher  causes a plurality of guest OSs to start, such as guest OSs A-N. Upon starting, each guest OS runs a listener program, such as listener A.","Dispatcher  may cause one guest OS at a time to start and perform a task. Alternatively, dispatcher  may cause all (or multiple) guest OSs to start and perform one or more tasks in parallel. Host OS  may limit the number of guest OSs that can run at one time due to one or more resource constraints, such as memory size, CPU power, and physical USB connection. A USB connection may be a significant constraint if, for example, one of the tasks is to run a printer driver and print to a USB printer.","Also, some tasks do not make \u201csignificant\u201d changes to a guest OS. Such tasks are referred to as \u201cnon-intrusive\u201d tasks. A \u201csignificant\u201d change is a change that may have a negative effect on subsequent tasks that the guest OS (or other processes on the guest OS) performs. An example of a non-intrusive task is running a calculator application. An example of an intrusive task is installing a printer driver, which installation changes the configuration settings of a guest OS and may prevent other printer drivers to be subsequently installed and\/or tested. If a task is non-intrusive, then a snapshot of the guest OS is not required before the guest OS performs the task. Thus, step  may be skipped if one or more tasks that a guest OS is to perform are non-intrusive.","At step , dispatcher  copies a task zip file to a particular location. The particular location may be a \u201chot\u201d folder. A \u201chot\u201d folder is a folder to which multiple listeners \u201clisten\u201d; that is, multiple listeners monitor the folder to detect when new (or particular) contents are added to the folder. When such contents are added to the hot folder, the listeners copy those contents into the local memory of their corresponding guest OSs so that the corresponding guest OSs can process the contents. A hot folder may reside on (a) the device upon which host OS  is running or (b) another device.","The task zip file includes one or more tasks to perform. In another example, the one or more tasks are not zipped. In either case, such tasks may include generating a binary executable file from source code and executing the binary executable file to determine whether it executes properly. Thus, a task zip file may include an executable script, referred to as a batch file. For Linux-based distributions, the batch file is a .sh script, whereas for Windows-based distributions, the batch file is a .bat script. Some batch files are capable of being processed by many different versions of an operating system. For example, Fedora Linux distribution releases a new version of its operating system approximately every 6 months. A single .sh script may be read by each release, which totals at least ten (10) releases.","At step , dispatcher  waits for each guest OS to complete the one or more tasks. Dispatcher  may wait for a pre-determined period of time. Additionally or alternatively, dispatcher  may wait for output and\/or log information from one or more of the guest OSs before proceeding to the next step. Specifically, dispatcher  may examine a hot folder (either the same as in step  or a different hot folder) to determine whether one or more guest OSs have completed their respective task(s).","While dispatcher  is waiting, a listener on a guest OS copies the task zip file into a local directory, unzips the zip file, and runs one or more of the \u201cunzipped\u201d scripts. As a result of executing the scripts, a guest OS performs one or more tasks, generates output, and captures log information. The guest OS (or listener) sends the output and\/or log information to dispatcher  via a HTTP response message or saves such information in a folder on host OS  or in a folder on another device that is accessible by dispatcher  via a network. The output and\/or log information may include an identifier (referred to herein as a \u201cguest ID\u201d) that identifies the guest OS that created the output and log information. Dispatcher  may then use the guest ID to identify which results originated from which guest OSs.","If one of the tasks is to compile source code that was included in the task zip file and generate a binary executable, then the output may include the binary executable itself and\/or an indication of whether the compilation was successful.","If one of the tasks is to execute a binary executable, then the output may include results of the execution and\/or an indication of whether the binary executable executed properly, e.g., without crashing.","At step , dispatcher  causes each guest OS (e.g., via API ) that completes its task(s) to shut down.","At step , dispatcher  causes each guest OS that has been shut down to be restored with its corresponding snapshot that was created in step .","At step , dispatcher  analyzes the results from each guest OS. Dispatcher  is not required to wait for all guest OSs to complete their task(s) before analyzing the results from guest OSs that have completed their task(s). An example of dispatcher  analyzing the results includes validating the number of output files (e.g., one per guest OS tested) and searching for a specific string in a log file (e.g., WARNING, ERROR, SUCCEED).","The steps in  are not required to be performed in the particular order depicted. For example, step  may be performed before steps  and . In fact, as described in more detail below, steps , , and  may not be performed at all.","In addition to the embodiments referred to previously, additional embodiments are possible. For example, an extra snapshot of a guest OS is taken after the guest OS completes its task(s) in order to preserve that state of the guest OS. This extra snapshot may be used for debugging purposes.","Between two successive tasks, a snapshot of a guest OA may or may not be taken. For example, if a second task is not dependent upon a first task, then a snapshot before the second task is not created. Instead, dispatcher  either reverts the guest OS to a previous snapshot (or clean state) or none at all.","As another example, dispatcher  uses API  to issue the one or more tasks and start a program in a guest OS directly, instead of relying on a listener in the guest OS to copy a task zip file from a hot folder and cause the task(s) to be performed.","As another example, dispatcher  uses API  to check one or more files in a guest OS directly, instead of relying on the guest OS to return output and\/or log information to a \u201chot\u201d folder to which other guest OSs send output.","As another example, step  may be skipped (even for intrusive tasks) if the guest OS reverts to a pre-configured snapshot before each new task.","Many benefits may be realized by embodiments of the invention. One benefit includes time savings. Embodiments of the invention provide a virtualization framework for automatically testing one or more applications for multiple OSs at once based on a single input from a user or based on executing a single script. Although multiple user inputs may be required to set up the virtualization framework, the testing of multiple operating systems is performed based on a single user input.","Another benefit is a less likelihood of human error. Because testing is automated, any human error must have been introduced during the setup of the virtualization framework, such as composing an incorrect task zip file, starting a wrong set of guest OSs, or failing to instruct dispatcher  to create and\/or revert to a snapshot.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["400","400","402","404","402","400","406","402","404","406","404","400","408","402","404","410","402"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another machine-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201cmachine-readable medium\u201d as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system , various machine-readable media are involved, for example, in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to storage media and transmission media. Storage media includes both non-volatile media and volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications. All such media must be tangible to enable the instructions carried by the media to be detected by a physical mechanism that reads the instructions into a machine.","Common forms of machine-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of machine-readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus, the sole and exclusive indicator of what is the invention, and is intended by the applicants to be the invention, is the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2","b":"120"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
