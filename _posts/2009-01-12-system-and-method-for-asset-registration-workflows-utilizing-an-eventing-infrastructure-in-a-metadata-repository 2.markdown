---
title: System and method for asset registration workflows utilizing an eventing infrastructure in a metadata repository
abstract: Described herein is a system and method for automating asset workflows in a service metadata repository. A service metadata repository includes an event model for generating one or more events based on a change to one or more assets. A persistent message stores the one or more events. A subscription service provides the ability to subscribe to one or more events and register one or more subscribed web service endpoints where the one or more events will be delivered. A delivery service matches the one or more events to the one or more web service endpoint and delivers the one or more events to a notification service. A notification service notifies the one or more subscribed web service endpoints of the one or more events. One or more workflows automate asset registration based on rules configured in an XML file, wherein the one or more workflows are initiated upon receiving the one or more events at a subscribed web service endpoint.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589250&OS=09589250&RS=09589250
owner: ORACLE INTERNATIONAL CORPORATION
number: 09589250
owner_city: Redwood Shores
owner_country: US
publication_date: 20090112
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present application claims the benefit of priority under 35 U.S.C. \u00a7119(e) to U.S. Provisional Patent Application No. 61\/020,646 entitled \u201cSYSTEM AND METHOD FOR ASSET REGISTRATION WORKFLOWS UTILIZING AN EVENTING INFRASTRUCTURE IN A METADATA REPOSITORY,\u201d filed on Jan. 11, 2008, which application is incorporated herein by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","This invention is related to Service-Oriented Architecture and service metadata repositories that store service metadata.","Service-Oriented Architecture (SOA) is based on the deconstruction of yesterday's monolithic applications and information technology infrastructure into a matrix of discrete, standards-based, network-accessible services. The process of transformation requires the organization, identification, and repurposing of applications and business processes of the existing information technology infrastructure. The transformation to SOA begins with an analysis of the IT infrastructure to identify applications, business processes, and other software assets that become services, or otherwise support the SOA.","Described herein is a system and method for automating asset registration workflows in a service metadata repository. Workflows are automated based on rules configured in an XML file. Automated workflows include accepting assets, assigning assets, and registering assets based on types, communities, or projects. Automatic timers track and send reminders for registration status and expiration status. Workflows can intercept metadata changes, take pre-defined actions, and can be customized to handle state changes. Events are filtered using rules and delivered in a reliable, scalable, clustered fashion to pre-defined business process management web service endpoints.","Metadata is data about data, or more specifically, information about the content of the data; service metadata is information about the services in an SOA. Service producers use service metadata to describe what service consumers need to know to interact with the service producers. Service metadata is stored in a metadata repository by service producers and then accessed by service consumers. A metadata repository provides visibility into the portfolio of assets, the traceability of the assets within that portfolio, the relationships and interdependencies that connect the assets to each other, the policies that govern use of the assets, and the projects that produce the assets and consume the assets.","It is not enough to simply put reusable service metadata assets into a metadata repository. There are additional problems with service metadata reuse. Determining whether the assets have sufficient quality is a difficult problem. A further difficulty is how to ensure that the right people receive the right assets.","Previously, service metadata repositories relied upon human users to review assets for quality. Administrators (sometimes called registrars) determined whether the right people were assigned to review the right assets. The human user reviewed the asset manually, assigned the asset to a domain expert for review of the content, and after approval, the asset was moved to registered status. Users could then access the registered asset. In some cases, half a dozen different domain experts might be involved in the approval decisions at different stages. For example, an architect might need to approve a WSDL asset before a subsequent approval by a documentation expert. This potentially results in a large number of manual steps in the review and approval process that must be performed by the administrator or registrar.","The solution is to wire events to workflows. Whenever an action occurs in the metadata repository, an event is generated. For example, when a field is changed, subscribers to that field are notified. Depending on the kind of service metadata, the workflows automatically assign the assets to the appropriate domain experts without requiring human action in the assignment process.","Business process management (BPM) helps organizations ensure that business processes are optimally defined, managed, executed, and monitored. Automating processes that bridge systems and people can reduce delays, inefficiencies, errors, and bottlenecks associated with manual handoffs. The XML Process Definition Language (XPDL) is a format standardized by the Workflow Management Coalition to interchange Business Process definitions between different workflow products like modeling tools and workflow engines. XPDL defines an XML schema for specifying the declarative part of workflow.","In accordance with one embodiment, events are stored in a Java Message Service (JMS) store because a process engine may not be on-line at all times. JMS is useful for event-based systems because it provides for reliability of events, scalability and performance, event filtering and expiration, and multi-cast of events.","Eventing Infrastructure Architecture","The Eventing Infrastructure provides a framework where events can be pumped in at a high rate and it provides the following set of services: an event model based on an XML Schema that is extensible where domain specific metadata can be plugged; storage of the events to a persistence store for reliability with first class support to JMS, DB and pluggable extensions for additional stores; a subscription service to subscribe to interested events and registration of web service endpoints where the matched events will be delivered; an internal delivery service that matches the incoming events to each subscribed Endpoint and delivers the filtered events to an internal notification service; and a notification service that notifies the registered Endpoint using SOAP\/HTTP with pluggable extensions to additional transport protocols such as SOAP\/JMS.","High Level Architecture Considerations","The following scenarios are considered when the eventing infrastructure is architected keeping all the corner cases in the loop. When an approach is selected, there are pros and cons in that approach but an option is selected based on weighing both the pros and cons.","Architecture",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 1","FIG. 25"],"b":["100","104","102","106","108","100","102","104","106","2500","2502"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2","b":["200","202","1","206","210","212","214","216","218","220","1","2"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":["300","302","304","324","306","318","317","308","310","330","326","320","328","312","300","316","322","314"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 4","b":["400","406","404","402","408","410","410","412","416","414","418"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["500","502","504","506","508","510","512"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIGS. 7A and 7B","FIGS. 8A and 8B","FIG. 9","FIG. 10"],"b":["600","700","1","800","802","900","1000"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 11","FIG. 12","FIG. 13","FIG. 14","FIG. 13","FIG. 14"],"b":["1104","1106","1100","1102","1106","1202","1306","1200","1204","1202","1204","1206","1208","1206","1204","1208","1204","1206","1214","1210","1400","1208","1206","1206"]},"In accordance with an embodiment,  illustrates a system architecture for one embodiment. An enterprise repository (ER)  contains an eventing framework  which includes an eventing core  which handles events produced by event producer . In one embodiment, events could be asset submissions, registrations, changes, or any other lifecycle event that affects an asset in a service metadata repository or enterprise repository. An event notifier agent  determines where to deliver events by consulting the subscription manager. The Event Delivery Manager is responsible for delegating the events to the Event Notifier. The Event Notifier implements the EventListener interface and implements the handle (Event ev, Endpoint ep) method. This handler is then registered with the Event Delivery Manager. The Event Delivery Manager is also responsible to work with the Subscription Manager and figures out which Endpoint this event belonged to. The subscription manager stores subscriptions in the subscription datastore . The event and the Endpoint object are then passed to the Event Notifier. For each Endpoint, a JMS Durable Topic Subscriber will be created by the JMS Event Delivery Manager, which is provided by messaging service . In one embodiment, the messaging service  reads configuration information from the metadata repository using an repository extension API (application programming interface). All the events will be received by each of the Topic Subscribers and the delivery manager will filter the events based on the subscriptions. When an event doesn't belong to an Endpoint, the JMS message will be immediately confirmed. If not, the event will be delivered to the remote endpoint  by the Notifier and will be confirmed only after the notifier confirms the event. The Event Notifier is responsible for notifying the event to the remote Endpoint. In one embodiment, the remote endpoint web service  is an event listener and is implemented as an XPDL work flow in a process engine. In one embodiment, the event notifier may have one thread per endpoint and one queue per endpoint where events are queued. When the handles method of EventListener is called, the events will be queued to the right Endpoint. The notifier will confirm the event as soon as the Event is delivered to the remote endpoint via EventContext so that EventStore can remove the event from the store. When the Notifier is initialized, it will be passed with an array of Endpoint objects that represent each of the remote Endpoints. The Event Subscription Manager is responsible for managing the Event Subscriptions where Endpoints are registered for interested events. It also works with Event Delivery Manager and provides it with the Endpoint information.","JMS Ordering and Clustering Considerations","In accordance with an embodiment,  illustrates a repository cluster  that includes a plurality of metadata repository nodes. An enterprise repository (ER) or service metadata repository node  contains an instance of an eventing framework  which is a JMS (Java Message Service) consumer. Repository node  also contains an instance of the eventing framework and is a JMS consumer. JMS Cluster  includes one or more JMS servers  to provide JMS services to the JMS consumers. JMS event messages are persisted in database .","In one scenario, two metadata repository nodes are configured in a clustered environment with the eventing infrastructure embedded inside a metadata repository instance. Each piece of the eventing infrastructure will use a JMS Queue listener to pick up a stored event and the event is delivered to the remote endpoint via the notifier. In one embodiment, each of the metadata repository clustered nodes will create events which will be handled by the eventing infrastructure. Since JMS queues are used, the JMS server will load balance the events. There are two potential issues that may impact the ordering: Issue 1: one event E produced before another event E may end up late to the JMS Server because of TCP delays; Issue 2: assuming that the events arrive in the right order, since the events are load balanced, the JMS server may take E and give it to Node's JMS listener and take E and give it to Node's JMS listener. If Node and Node are delivering events to the same endpoint, then ordering may not be guaranteed because of the TCP delays over HTTP. Issue 1 may be a difficult problem to solve since the events may be unrelated and the timestamp cannot be relied on. This issue can be best addressed by relying on application level IDs that are added to the events by the application layer. Issue 2 can be resolved by having one node deliver the events exclusively to one remote endpoint. In one embodiment, one metadata repository node's eventing infrastructure delivers to only one remote endpoint by ensuring that all the nodes talk to each other (using internal JMS topic broad-cast) and establish a neighbor list. Then they elect themselves to share endpoints and JMS durable topics can be used. In one embodiment, a JMS server allows only one durable subscriber with the same name across the JMS Server. This will essentially make one node gain an exclusive lock over a remote endpoint.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 24","b":["2400","1","2402","2406","2404","2408"]},"JMS Ordering and Non-Clustering","Even though the HTTP layer sends a  status message back to the HTTP client, HTTP cannot be used as a mechanism that ensures ordering. Consider a scenario where the HTTP Server sends a  message back to the client. In the window where the application picks the event and tries to checkpoint the event by storing the event, the application may crash. The next event delivery may fail and the eventing infrastructure will try to deliver the event continuously, but the previous event is lost and the ordering is lost. Ordering is not 100% guaranteed in some of the scenarios due to the before-mentioned reasons, and using JMS will not solve the issue because of the following reason. Consider two different clusters, i.e. a metadata repository and JMS. JMS guarantees ordering only when both the producers and consumers use JMS. In this case, the real consumer is an HTTP endpoint but if an endpoint chooses to use JMS, then it will obtain better ordering and reliability. Reliability can be guaranteed when the remote endpoint, i.e. a business process management endpoint, uses JMS as well. If a business process management endpoint doesn't support SOAP\/JMS, one embodiment uses SOAP\/HTTP with additional reliability built in. The portType for remote endpoint may optionally support a two-way request\/reply pattern that sends a status message back to the HTTP client. This status message can be used by the Notifier as a confirmation mechanism that the endpoint has processed the event.","Event Data Model Considerations","Since the events are delivered using SOAP protocol, XML Schema can represent the structure of an event. XMLBeans can create Java objects from XMLSchemas that can be used as the Object model. The event structure can be serialized to XML payload when the event is delivered to the remote endpoint. Plain ordinary java objects (POJOs) was considered for performance reasons, but mapping XML to Java is a big task given the complexity of XML Schemas like inheritance, substitution groups, cardinality, different built-in types, etc. XMLBeans already takes care of the Mapping and provides the marshalling\/unmarshalling layer. In one embodiment, JMS TextMessage or BytesMessage is used to encapsulate an XML\/SOAP Payload.","Model Extensibility","The model can be extensible and can use Inheritance. The base model can encapsulate the generic metadata about an event and domain-specific or metadata repository specific Metadata can be extended from the base model.  describes the event model. The model is XML-Schema based, with domain-specific extensions. The base model provides generic metadata about an event. In one embodiment, a programmatic API to event model is provided by XML Beans.","Inter-Operability and Re-Usability Considerations","In one embodiment, when an event enters the eventing infrastructure, the event can not be modified or amended with additional data by the eventing notifier or any other module. This is to ensure that the event when stored in JMS, may be directly picked by a remote endpoint using JMS, without the need for the eventing notifier. In one embodiment, the metadata repository fires and forgets about the event. The events need to be post-processed because the metadata repository may not use Event XML Beans representation and may use its own event object. This event object will be converted to the XML Beans form and can be done in the Fa\u00e7ade layer. In other words, the eventing infrastructure can not depend on any metadata repository classes or Jars and can be standalone so that it can be reused elsewhere. In one embodiment, if there are dependencies to metadata repository classes, then this can be approached using abstract interfaces and the core eventing infrastructure does not have any dependencies on metadata repository classes. In one embodiment, there could be additional Metadata that can be post filled that may require using of metadata repository internal API. This processing can be done in the Fa\u00e7ade layer as well.","XPDL Requirements","The next section covers the scope and requirements for the XPDL processes that are created in one embodiment of the invention. In accordance with one embodiment,  shows a metadata repository  that generate events that are listened for by an event listener  which is implemented as an XPDL process flow in a process engine.","Overview\/Background","In one embodiment, the metadata repository has pre-built business process management workflows that attempt to automate asset submission, acceptance, and registration processes.","Use Cases and Requirements","In one embodiment, flows and subflows can be individually enabled or disabled by administrators.","Modify Metadata Based on Metadata Changes","When a Metadata element of an asset changes based on an event, a workflow can automatically change certain other Metadata elements. When an asset is registered, custom access settings can be changed by a workflow, i.e. when the registration status field of an asset changes from \u201cAccepted\u201d to \u201cRegistered,\u201d the \u201cCustom access settings\u201d of an asset is added or changed in the set of custom access settings previously specified by administrators. A community tag can be added by a workflow when an asset is submitted without a community tag, with the generated community tag based on producing project or asset type, with these correlations to be specified in advance by administrators. Workflows can be triggered by numerous changes, including asset name, notification and\/or re-assignment. In one embodiment, a workflow may notify the following persons: subscribers; people involved in registration of asset (submitter, registrar, admin tab); or a specific list that the administrator provides.","The reassignment could be the same list as in the previous tab approval or some other mechanism. A change in asset version can trigger a workflow for a change, notification and\/or re-assignment. In accordance with one embodiment, a change in asset owner triggers change, notification and\/or re-assignment. A change in registration status to Registered can trigger a change in Asset Lifecycle Stage to Release or another completeness indicator. An Asset Lifecycle Stage can have values such as \u2018Plan,\u2019 \u2018Build,\u2019 etc. A change in Policy Validation state to green can trigger assignment of the asset. A change in Policy Validation state to red can trigger re-assignment of the asset and a change in classification. In one embodiment, classification is admin-selectable from an acceptable value list.","In one embodiment, a change in customer-defined fields triggers a notification or metadata change. In one embodiment, a change follows the asset name change use case pattern for notification. In one embodiment, a change in a user-specified asset metadata field triggers regression of asset one step in registration status, e.g. from accept to unaccepted, from submitted to unsubmitted, from registered to unregistered. A regression in asset registration status (reject, unaccept, or unsubmit) can also trigger a change in asset classification. In one embodiment, classification is admin-selectable from an acceptable value list. In one embodiment of a service metadata repository, a classification for an asset is a scheme where an asset will belong to \u201cEducation\u201d etc. A change in asset active status (inactive, retire, or delete) can trigger a change in asset classification. In one embodiment, classification is admin-selectable from acceptable value list. In one embodiment, changes to data in required fields specified by an administrator can also trigger an automated workflow.","When an asset is changed and saved, this can trigger a flow as can changes to data in other specified field(s). In one embodiment, there are additional triggers for changes to data in other specified fields. In one embodiment, missing data in required field triggers notification. In one embodiment, missing data triggers an AssetMissingField event. Changes in metadata of most kinds can cause the associated tab to be unapproved and reassign the asset to its respective assignment\/approval tier of approvers.","Automatic Acceptance","One embodiment includes workflows for automatic acceptance of an asset. When assets are submitted, the workflow automatically accepts, unaccepts, or ignores the asset based on an analysis of Metadata associated with the asset. In one embodiment, the acceptance of an asset is based on the following rules: Asset Type; Community Tag; Categorizations; and Role of Submitter (if the submitter is a registrar).","Multi-tier Approval Workflow: One embodiment includes workflows for assigning assets for Multi-tier Tab approval. After the assets are accepted (whether automated or manual), the workflow automatically assigns the assets for multi-tier approval. In one embodiment, the workflow can detect each tab approval within a Tier and assign the assets for the next tier approval once all tabs are approved in the previous tier. The list of tabs (named tabs) within each Tier, the number of Tiers, and the list of users for each Tier is configurable by the users in an XML file. In one embodiment, the named tabs available can vary by asset type. In one embodiment, the tiered approval pattern can be chosen by \u201casset type\u201d or \u201ccommunity.\u201d","Additional work flows include registering an asset automatically when all the Tabs associated with a particular asset have been approved by the appropriate approvers. After all the tabs are approved, the workflow registers the asset automatically. Another work flow approves the tabs automatically based on metadata associated with the asset. A process engine uses metadata rules to determine whether the workflow will automatically approve the tabs. In one embodiment, the flow relies upon automatic tab approval criteria based on metadata.","Time-Based Escalation","In one embodiment, illustrated in , when assets are assigned for Tab approvals, the flow can track the status of the approval. When the assets are not approved within a specified time (which can be configurable), then the flow can send a reminder notification. If the tab is not approved from the last notification to a delta time, then it can send the next notification. The frequency and number of notifications can be user-specified separately for each case, below. Notifications for time-based escalation can use each recipient's asset registration cc: list. Time-based notification can be available to: prompt asset creator, owner and submitter, if any, to submit or re-submit asset based on latest creation or unsubmit date; if an asset is rejected and sitting in the Rejected queue for a while, notification reminder about the fact that they need to do something about it; prompt registrar of record for the asset, if any (otherwise system registrar) to Accept asset based on latest Submission data (example of this is an asset has been submitted  days ago and no action has been taken); prompt latest list of assignees (see multi-tier approval workflow) to Approve Tabs based on latest assignment date; prompt registrar of record for the asset, if any (otherwise system registrar) to Register the asset based on latest all tabs approved date; prompt asset owner, last submitter\/re-submitter and validation contact, if any (to re-validate asset), beginning X days prior to asset expiration date (see also validation expiration date triggers, below); prompt owner, last submitter\/re-submitter and validation contact, if any to after asset expiration date; warn subscribers N days ahead of expiration date that the asset expiration date is imminent; warn subscribers that asset expiration date has been reached, and the registration status of the asset is now subject to change.","Purging after inactivity: if action is not taken, above, within a specified period of time in Time-based Escalation, then the flow can unaccept the asset. The length of time (asset_regressed): unsubmitted assets are deleted after the set period of time; submitted assets are unsubmitted after the set period of time; accepted assets are unaccepted after the set period of time; and assigned assets are unassigned after the set period of time. In alternative embodiments, there are other instances of assets sitting at a particular stage.","Community Assignments","In accordance with one embodiment, illustrated in  and , assets can be accepted and assigned to a pre-defined Tab approvers automatically based on a \u201cCommunity\u201d tag in the incoming Metadata. There can be two sub-flows, one that can analyze the metadata and create the \u201cCommunity\u201d tag, and another flow that does the actual acceptance and assignment. The examples of Communities could be Java, SOA Center of Excellence, etc. When assets are submitted, a flow can receive the Add Community Tag to the Metadata event and analyze the metadata. Based on producing project or asset type, with these correlations to be specified in advance by administrators, it will add a community tag. The Community Assignment flow will look at the Community tag and do the actual acceptance and assignment. It may use the configuration to decide the acceptance rules and approver list.","Validation Expiration Date Triggers","In accordance with one embodiment, illustrated in , the AssetType will have an optional expiry-date field that may be filled when an asset is created. This flow will send a search query to an enterprise repository (ER) or service metadata repository periodically and get a list of assets that are about to expire or already expired. It will take the following actions: Asset owner, subscribers and validation contact (with cc list) are notified beginning X days in advance of asset expiration date (see time-based escalation) (prior_to_expiration). Asset reaches expiration date (+Y days) triggers unregister. In one embodiment, there is no notification since the metadata repository provides the notification (asset_expired). Asset reaches expiration date (+Z days) triggers inactive (asset_expired_change). Asset reaches expiration date (+Q days) triggers delete.","Modify Metadata Based on Metadata Changes","In accordance with one embodiment, illustrated in , is an example flow diagram  for changing Custom Access Settings when an Asset is registered. This workflow changes custom access settings when an Asset is registered. All the tabs are approved and the asset is registered. This workflow looks for asset is registered only (not all tabs approved), just in case someone goes ahead and manually registers without all tabs being approved. An event is triggered by the metadata repository Eventing Core (via Eventing Infrastructure) that starts a business process management process. The flow will look for certain metadata values in certain fields. In this case, it will look for the Registration status change, i.e. status changing from Accepted to Registered. If there is a match, it will read the asset from the service metadata repository. The flow will alter the asset Metadata and apply the Custom Access settings. The asset is stamped so that it's not processed again when the same asset enters the flow again. The asset may be manually sent back some number of steps in the registration stages (to unregistered or even unsubmitted), and will need to depend on the same asset being reviewed and approved again. Other scenarios that cause the same asset to enter the flow again are contemplated. The altered asset is then saved back to the metadata repository.","Multi-Tier Workflow","In accordance with one embodiment,  illustrates an example flow diagram  for automatic acceptance of an asset in one embodiment. An asset is submitted. Subsequently the asset enters the Submitted\/Pending Review queue. An event is triggered by the metadata repository Eventing Core (via Eventing Infrastructure) that starts a business process management process. The flow analyzes the Metadata and identifies some of the following fields to determine whether the asset can be automatically accepted or not, including: how the asset was created; asset type; submitter; submitter role; submitting project; and origin. In one embodiment, reject is \u201cunaccept\u201d and\/or \u201cunsubmit,\u201d which keeps the asset intact and sends it back to the submitter. For historical reasons there may be an anomaly in the workflow. Things behave differently in a few places depending on whether the asset is a \u201cquick submit\u201d or whether it has been created in the asset editor. In accordance with one embodiment,  shows an alternative perspective of the workflow described in .",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 17","b":["1700","1","1","1"]},{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 18","FIG. 16","FIGS. 7A and 7B"],"b":"1800"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 19","b":"1900"},"Time Based Escalation",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 20","b":"2000"},"Community Assignment",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 16"},"Administrator Configuration","In accordance with one embodiment, workflows can be configured by service metadata repository administrators for customizing the workflows to suit specific needs. In one embodiment, the following are items that can be configured:","Modify Metadata based on Metadata changes: Change Custom access settings when the asset is registered. The custom access settings that are applied to an asset are configured in an XML file.","Multi-tier Workflow: Assign assets for Tab approval. The Configuration file can list down all the asset types with named tabs available for that asset. The following information can be configured: 1) the asset type (or other metadata attribute that the XML file applies to); 2) the condition for assignment (e.g. acceptance of an asset or the approval of a list of specifically named tabs); and 3) the list of assignees to whom the asset can be assigned.","Register the asset automatically: This capability adds the ability for administrators to determine which assets are handled this way according to a metadata field, e.g. if the asset is a service, do not auto register, but if the asset is a Java component, go ahead and register it. These are just examples. The logic can be captured in a simple if type=A then Register.","Time based escalation: The time elapse can be calculated based on one of the following which can be configured: Last submitted Date; Last assigned Date; or Custom Date.","Community Assignments: In one embodiment, the Communities are configured in a configuration file.","In one embodiment, administrators are able to configure what flows can be loaded and started by a BPM Engine. In one embodiment, the deployment mechanism deploys only enabled flows. In an alternative embodiment, a Subscription mechanism enables or disables certain endpoints thereby making the Endpoints not receive events at all. Another option is to make the flow inactive when the flow is not enabled. In one embodiment, the user can use different workflows to accept assets. In one embodiment, the user has alternatives on how to trigger the flows. In one embodiment, there are metadata rules to approve the tabs automatically.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 26","FIG. 2","FIG. 3","FIG. 4","FIG. 2","FIG. 3","FIG. 4"],"b":"2600"},"Computing system  comprises components coupled via one or more communication channels (e.g., bus ) including one or more general or special purpose processors , such as a Pentium\u00ae, Centrino\u00ae, Power PC\u00ae, digital signal processor (\u201cDSP\u201d), and so on. System  components also include one or more input devices  (such as a mouse, keyboard, microphone, pen, and so on), and one or more output devices , such as a suitable display, speakers, actuators, and so on, in accordance with a particular application. (It can be appreciated that input or output devices can also similarly include more specialized devices or hardware\/software device enhancements suitable for use by the mentally or physically challenged.)","System  also includes a computer readable storage media reader  coupled to a computer readable storage medium , such as a storage\/memory device or hard or removable storage\/memory media; such devices or media are further indicated separately as storage  and memory , which may include hard disk variants, floppy\/compact disk variants, digital versatile disk (\u201cDVD\u201d) variants, smart cards, read only memory, random access memory, cache memory, and so on, in accordance with the requirements of a particular application. One or more suitable communication interfaces  may also be included, such as a modem, DSL, infrared, RF or other suitable transceiver, and so on for providing inter-device communication directly or via one or more suitable private or public networks or other components that may include but are not limited to those already discussed.","Working memory  further includes operating system (\u201cOS\u201d)  elements and other programs , such as one or more of application programs, mobile code, data, and so on for implementing system  components that might be stored or loaded therein during use. The particular OS or OSs may vary in accordance with a particular device, features or other aspects in accordance with a particular application (e.g. Windows\u00ae, WindowsCE\u2122, Mac\u2122, Linux, Unix or Palm\u2122 OS variants, a cell phone OS, a proprietary OS, Symbian\u2122, and so on). Various programming languages or other tools can also be utilized, such as those compatible with C variants (e.g., C++, C#), the Java\u2122 2 Platform, Enterprise Edition (\u201cJ2EE\u201d) or other programming languages in accordance with the requirements of a particular application. Other programs  may further, for example, include one or more of activity systems, education managers, education integrators, or interface, security, other synchronization, other browser or groupware code, and so on, including but not limited to those discussed elsewhere herein.","When implemented in software (e.g. as an application program, object, agent, downloadable, servlet, and so on in whole or part), a learning integration system or other component may be communicated transitionally or more persistently from local or remote storage to memory (SRAM, cache memory, etc.) for execution, or another suitable mechanism can be utilized, and components may be implemented in compiled or interpretive form. Input, intermediate or resulting data or functional elements may further reside more transitionally or more persistently in a storage media, cache or other volatile or non-volatile memory, (e.g., storage device  or memory ) in accordance with a particular application. Embodiments can include computer-based methods and systems which may be implemented using a conventional general purpose computer(s) or a specialized digital computer(s) or microprocessor(s), programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by programmers based on the teachings of the present disclosure.","Embodiments can include computer-based methods and systems which may be implemented using a conventional general purpose computer(s) or a specialized digital computer(s) or microprocessor(s), programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by programmers based on the teachings of the present disclosure.","Embodiments can include a computer readable medium, such as a computer readable storage medium. The computer readable storage medium can have stored instructions which can be used to program a computer to perform any of the features present herein. The storage medium can include, but is not limited to, any type of disk including floppy disks, optical discs, DVD, CD-ROMs, micro drive, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, DRAMs, flash memory or any media or device suitable for storing instructions and\/or data. The present invention can include software for controlling the hardware of a computer, such as a general purpose\/specialized computer(s) or a microprocessor(s), and for enabling them to interact with a human user or other mechanism utilizing the results of the present invention. Such software may include, but is not limited to, device drivers, operating systems, execution environments\/containers, and user applications.","Embodiments can include providing code for implementing processes. The providing can include providing code to a user in any manner. For example, the providing can include providing the code on a physical media to a user; or any other method of making the code available.","Embodiments can include a computer-implemented method for transmitting the code which can be executed at a computer to perform any of the processes of embodiments. The transmitting can include transfer through any portion of a network, such as the Internet; through wires; or any other type of transmission. The transmitting can include initiating a transmission of code; or causing the code to pass into any region or country from another region or country. A transmission to a user can include any transmission received by the user in any region or country, regardless of the location from which the transmission is sent.","The foregoing description of preferred embodiments has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to one of ordinary skill in the relevant arts. For example, steps preformed in the embodiments of the invention disclosed can be performed in alternate orders, certain steps can be omitted, and additional steps can be added. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 7A-7B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 8A-8B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 17","b":"1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 26"}]},"DETDESC":[{},{}]}
