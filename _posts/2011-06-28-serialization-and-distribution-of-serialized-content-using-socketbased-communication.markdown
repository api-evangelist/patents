---
title: Serialization and distribution of serialized content using socket-based communication
abstract: One illustrative embodiment involves executing one or more script-based libraries to serialize an object comprising content that is displayed on a web page in a web browser on a client device. The serialization comprises identifying a string representing raw bytes that identify the object. The embodiment also involves establishing a connection between the client device and a server device, wherein the connection is a full duplex communication channel for communication between the client device and the server device. The embodiment further involves sending, from the client device, the serialized object over the full duplex communication channel to the server device and receiving the serialized object from the server device. The serialized object from the server device is serialized according to the string representing raw bytes. The embodiment further involves deserializing the object from the server device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08751689&OS=08751689&RS=08751689
owner: Adobe Systems Incorporated
number: 08751689
owner_city: San Jose
owner_country: US
publication_date: 20110628
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","GENERAL"],"p":["Embodiments relate generally to socket-based communication between a client and server and more particularly to the serialization and distribution of web page content over a full duplex communication channel by web page program code.","New standards for web-based communication are providing improved ways to distribute web page content between a client and a server. System integrators and developers desire to leverage these new standards to realize the benefits of bi-directional, full duplex communication between a web browser and web server. Full duplex communication enables a client and server to simultaneously send and receive messages between each other. Such communication offers a distinct advantage over existing web-based communication protocols, such as Hypertext Transfer Protocol (HTTP), which involves opening and closing a connection in conjunction with each request for information from a client to a server. Such communication restricts simultaneous communication and introduces latency. Contrast this with full duplex communication in which a channel remains open after it is established therefore allowing two-way communication to occur with minimal latency.","Full duplex communication can be socket-based. Socket-based communication enables content to be sent and received between a client and server over a single Transmission Control Protocol (TCP) socket. An example of socket-based communication is the WebSocket protocol. The WebSocket protocol, which is being developed as part of the Hypertext Markup Language (HTML) 5 standard, enables full duplex communication between a web browser and a web server to send and receive web page content over a WebSocket channel. To enable faster and more efficient distribution of web content over a full duplex communication channel, it is desirable to serialize the web content. Certain serialization formats such as ActionScript Message Format (AMF), however, are not presently available for web page content that is defined by certain script-based code, such as JavaScript.","One illustrative embodiment involves executing one or more script-based libraries to serialize an object comprising content that is displayed on a web page in a web browser on a client device. The serialization comprises identifying a string representing raw bytes that identify the object. The embodiment also involves establishing a connection between the client device and a server device, wherein the connection is a full duplex communication channel for communication between the client device and the server device. The embodiment further involves sending, from the client device, the serialized object over the full duplex communication channel to the server device and receiving the serialized object from the server device. The serialized object from the server device is serialized according to the string representing raw bytes. The embodiment further involves deserializing the object from the server device. The script-based libraries are accessed by script-based code for defining the web page, and the script-based code displays the content in the object from the server device on the web page.","Embodiments herein relate to using program code for web pages to serialize web page content and communicate the serialized content over a full duplex communication channel. A full duplex communication channel allows simultaneous, two-way communication between a client and a server such that both the client and the server can send and receive messages without waiting for a request from the other to communicate. Certain embodiments herein relate to full duplex communication using a socket channel, i.e., socket-based communication, and more particularly relate to communication over a WebSocket channel. A WebSocket channel can be used to connect a web browser to a web server and to distribute web page content and other messages between the client and server. The web page content can be serialized using various serialization techniques that enable efficient distribution of the content over a socket channel. In one embodiment, JavaScript code can serialize an object in AMF and distribute the AMF serialized object over a WebSocket channel to a server device. The server device can receive the serialized object, deserialize it, update the contents of the object, serialize the updated object, and send the updated object back to the client device where its contents can be displayed on a web page.","Embodiments herein leverage the benefits of AMF serialization and full duplex communication by extending such benefits to web page developers and users, for whom the benefits were previously unavailable. To achieve this, script-based libraries can be installed and used by JavaScript code to serialize content displayed on web pages in AMF and communicate the content over a full duplex communication channel. A WebSocket channel is a particularly attractive full duplex communication channel in part because of its integration with JavaScript program code. As a result of combining serialization with full duplex communication for web page content, users of web pages can experience more timely and reliable updates to web pages on which they depend for information, as an example. Embodiments herein related to the above functionality will be described in greater detail in the following paragraphs.","In an exemplary embodiment, script-based code, such as JavaScript, can utilize a socket channel to send web page content to the server. The script-based code can also serialize the content before sending the content over the socket channel. By serializing content, data objects and structures can be translated into a format that enables the content to be communicated faster and more efficiently than it would be communicated in its original format. For example, data objects can be represented as binary data, e.g., a byte array of 0's and 1's, instead of strings, to enable the faster, more efficient communication. In an exemplary embodiment, content can be serialized in this way in AMF. AMF serialization offers a further benefit which enables content to be identified by a reference. A reference, which can have a significantly smaller byte size than the actual content, can be sent over a communication channel instead of the content each time communication associated with the content is required. Such functionality can reduce network utilization and latency, as examples.","In one embodiment, serialization and communication of serialized content can be performed by one or more script-based libraries. An application developer can install the libraries on a client device to gain access to their functionality. In one embodiment, the script-based libraries can be accessed from script-based code. For example, script-based code that defines a web page can use the script-based libraries to perform various functions related to communicating serialized content. For example, a script-based library can communicate with an application programming interface (API) associated with a socket channel to perform functions related to communicating content between a client and server. The same or another script-based library can serialize and deserialize content sent between a client and server. In one embodiment, the library encompasses the functionality of the socket API and performs a number of other functions associated with socket communication to make relevant details of the communication transparent to a code developer. For example, when a developer codes a \u201csend message\u201d or equivalent command to send a message over a socket channel, the script-based library can serialize web page content for distribution before calling a socket API command to send the serialized object to the server. Thus, the \u201csend message\u201d command can perform each of the underlying details associated with sending content over a socket, therefore relieving the code developer of performing such details.","In one embodiment, serialization of web page content by a script-code library can involve serializing the content in a string of Unicode characters that correspond to bytes of the content. The WebSocket API, for example, requires that content be formatted to Universal Character Set Transformation Format\u20148-bit (UTF8) in order to send the content across the web socket channel. Where the script-based libraries, such as those developed for use with the JavaScript programming language, do not have access to binary data but have access to the Unicode character set, the libraries can instead serialize content in Unicode for communicating over a WebSocket channel or another socket channel. In one exemplary embodiment, JavaScript libraries provide a bridge between JavaScript objects and AMF such that the Unicode representation of JavaScript objects can be interpreted by a server that understands AMF. In this way, embodiments provide a way for JavaScript applications to communicate with servers configured to receive AMF data.","A server can receive and deserialize content. As a specific example, a server can update the content in a deserialized object with current information and send a serialized object containing the updated information back to the client device that requested the updated information. Script-based libraries can listen for updates from the server, receive the updates, deserialize them, and display them on a web page.","In one embodiment, to utilize the benefits of AMF and a socket channel, a user can install the above described JavaScript libraries and a web browser that supports the WebSocket protocol on a client device. The user can thereafter receive updates for requested information at a device. For example, a stock trader can receive real-time updates of stock information. A user may request real-time stock information by clicking on a link associated with such functionality on a web page defined by JavaScript code. The JavaScript code can access an object containing, for example, stock name, ticker symbol, last known price, trading volume, day high and low, and other stock related information subject to change during a trading day. The JavaScript libraries can serialize the object and send it to a socket channel as described above. A server can receive the serialized object, deserialize it, perform functions to update variables in the object with the most recent stock information, for example, and send a serialized object containing the updated stock information back to the user's client device where it can be deserialized and its contents displayed on a web page.","In another example, a person object containing various information about online shoppers, for example, can be updated. Elements in the person object can include buyer name, street address, purchase history, and items of interest. When items of interest are identified, for example, the items can be added to the object at the server side, serialized, and sent to a requesting client device where the updated contents of the object can be displayed. Objects containing various other information may be updated in similar fashion in other embodiments.","While one embodiment relates to JavaScript code, WebSocket channels, and AMF, similar functionality provided by other program code, applications, and protocols may also be the subject of embodiments herein. Thus, JavaScript, AMF, and WebSocket are mentioned only by way of illustration and are not meant to limit embodiments herein. For example, HTML, Perl, or other client-side programming languages may be used instead of JavaScript. Similarly, serialization techniques other than AMF may be used. Such techniques can be implemented by client-side programs, and support for deserializing content serialized according to such techniques can be installed at a server that is listening for information in the serialized format. Furthermore, a full duplex communication channel other than a WebSocket channel can be used. Communication may also be conducted over a communication channel that does not involve web-based communication, e.g., a web browser and a web server, but may involve any client or server application.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1"],"b":["5","10","40","50","10","40","50","10","40","50","50","10","40","5","10","40","20"]},"As used herein, the term \u201cdevice\u201d refers to any computing or other electronic equipment that executes instructions and includes any type of processor-based equipment that operates an operating system or otherwise executes instructions. A device will typically include a processor  (shown in ) that executes program instructions and may include external or internal components such as a mouse, a CD-ROM, DVD, a keyboard, a display, or other input or output equipment. Examples of devices are personal computers, digital assistants, personal digital assistants, cellular phones, mobile phones, smart phones, pagers, digital tablets, laptop computers, Internet appliances, other processor-based devices, and television viewing devices. A \u201cremote device\u201d refers to a device that is located externally to another device, such as on the network . An example of a remote device is a computer server.","The exemplary client device  is used as a special purpose computing device to provide specific functionality offered by its applications. As an example, client device  is illustrated in  with a display  and various user interface devices . A bus, such as bus , will typically be included in a device such as the client device .","As used herein, the term \u201csocket\u201d refers to bi-directional, full duplex communications that occur on a single connection over which content can be sent between devices, e.g., the client device  and the server device . Such communication can occur over a channel, e.g., a socket channel. An exemplary socket channel is a WebSocket channel, which enables the distribution of web page content between a web browser and a web server using the WebSocket protocol. Support for the Websocket protocol is currently being implemented as part of the HTML 5 initiative and includes a JavaScript interface to enable the JavaScript programming language to interact with a WebSocket channel via an API. The API can include one or more functions that can be used by JavaScript and other script-based code to enable web pages to communicate with a server configured to receive content over a WebSocket channel. Web browsers, such as Google Chrome\u00ae and Firefox\u00ae, provide support for WebSocket communication. The term \u201csocket\u201d is not meant to be limited to a particular type of socket, such as a WebSocket. A \u201csocket\u201d may refer more generally to socket-based communication between a web browser and a web server and additionally or alternatively may refer to communication between any client or server application.","As used herein, the terms \u201cscript-based code\u201d and \u201cprogram code for web pages\u201d refer to computer program code that can run in a web browser to provide user interfaces. A \u201cscript-based library\u201d is a collection of resources, e.g., functions, subroutines, values, that can be used by the script-based code to provide specific functionality. Examples of script-based code include HTML, JavaScript, Extensible Markup Language (XML), and Perl.","As used herein, an \u201cobject\u201d refers to an entity that can be manipulated by commands of script-based code. An object can include a number of values, variables, and methods or functions such that the content described herein may be stored in an object. For example, an object herein can contain values and methods associated with related content, e.g., content associated with stock information and person objects as described above. In one embodiment, a server can execute the methods in an object to update the associated variables therein. The objects can therefore exhibit control over at least some of the functions performed by the server with regard to updating information sent from a client device. For example, a method can instruct a server regarding how to access the content that requires updating, the frequency at which the updates should be provided, and the duration for providing the updates. Content other than that located within an object can also be serialized and distributed to a server over a full duplex communication channel.","The term \u201ccontent\u201d is referred to as such because it may be displayed on a web page or associated with text, images, or other information this is displayed on a web page. \u201cContent\u201d herein can be used interchangeably with \u201cdata\u201d and \u201cinformation.\u201d","\u201cSerialization\u201d herein refers to the process of converting an object into a series of bytes that can be communicated between a client and server and returned to its original form when the series of bytes are reread according to the serialization format. \u201cDeserialization\u201d refers to returning the serialized bytes to their original object form. An exemplary serialization format herein is AMF. AMF is a binary format used to serialize ActionScript objects and may be used as the underlying format by script-based code for web pages to serialize objects associated with such program code, e.g., JavaScript objects. Particularly, a JavaScript object can be formatted as a string of Unicode characters that corresponds to the binary format created by AMF.","A computer-readable medium may comprise, but is not limited to, an electronic, optical, magnetic, or other storage device capable of providing a processor with computer-readable instructions. Other examples comprise, but are not limited to, a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ROM, RAM, an ASIC, a configured processor, optical storage, magnetic tape or other magnetic storage, flash memory, or any other medium from which a computer processor can read instructions. The instructions may comprise processor-specific instructions generated by a compiler and\/or an interpreter from code written in any suitable computer-programming language, including, for example, JavaScript, ActionScript, Java, Perl, C, C++, C#, Visual Basic, and Python.","In , client device  comprises a memory  that contains a web browser . The web browser  can include support for a socket channel, such as a WebSocket channel, via a socket API  to allow script-based code to communicate with the socket channel. The web browser  can also include script-based code  that can define a web page in the web browser. Defining a web page can mean creating a user interface comprised of various content and components that allow a user to view and interact with the web page.","The memory  can also include script-based code libraries  that can be used with the script-based code  to provide specific functionality. For example, the serializer  can serialize and deserialize content displayed on a web page in the web browser . The communication manager  can communicate with the socket channel to send serialized data to the server device  and receive updates from the server device . The server device  can be configured for communication with a socket channel and can include functionality that is similar to that provided on the client device . For example, a socket interface  can be used to communicate with a socket channel to receive and send serialized content. The server device  can also include a serializer  that is capable of serializing and deserializing objects according to the format received from the client device .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["60","30","55","35","50","55","60","35","36","37","61","37","55","37","35"]},"The script-based code  can also call a function in the communication manager  to send the serialized content over the socket channel  to the server device , where the serialized stock information can be deserialized, updated and sent back over the socket channel  to be displayed on the web page .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIG. 1"],"b":["300","10","304","35","50","306","308","10","40","40","310"]},"To send the serialized content, in one embodiment, the communications manager  can call a function within the socket API  so that the socket channel receives the serialized content and sends it over the socket channel to the server device . The communication manager library  can also listen for updates to the object at block  and process the updates (as shown in ). The communication manager library  can perform a number of other functions related to the distribution of objects over the socket channel. For example, if communication manager  detects that a web browser on the client device  does not support the socket protocol, it can issue an error message and attempt to connect to a device using another communication protocol available to it based on selection from a user or according to a predefined list of available protocols or channels, for example.","As a specific example, the script-based code , the serializer , and the communications manager  can be JavaScript program code. Also, the socket channel  can be a Websocket channel. Thus, a specific example involves JavaScript program code serializing content such as a JavaScript object in a Unicode representation of AMF, and sending the serialized content over a Websocket channel.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 4","FIG. 1"],"b":["40","400","404","406","42","42"]},"The content associated with the object can be updated at block . In one embodiment, a server can include program code, e.g., Java servlets, that can access one or more content sources to update the object with the most recent information available. The updated object can be serialized at block . In one embodiment, the object can be serialized at the server device  in the same format, e.g., a string of Unicode characters, in which it was serialized at the client device  so that the client device  can understand how to deserialize the object. Variations in serialization format performed at the client device  and the server device  may exist in some embodiments. Such variations can be understood by either device such that neither format prevents the regeneration of a serialized object to its original, unserialized format. The serialized object can be sent over a socket channel at block . Other embodiments may not involve updating content sent from a client device but can instead involve sending an original message from a server to the client device.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 5","b":["10","40","504","506","37","10","42","37","50","10","508","510"]},"Numerous specific details are set forth herein to provide a thorough understanding of the claimed subject matter. However, those skilled in the art will understand that the claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.","Some portions are presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, bytes, data, content, values, variables, strings, characters, terms, elements or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, it is appreciated that throughout this specification discussions utilizing terms such as \u201cdetermining,\u201d and \u201cidentifying\u201d or the like refer to actions or processes of a computing device, such as one or more computers or a similar electronic computing device or devices, that manipulate or transform data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing platform.","The methods discussed herein are not limited to any particular hardware architecture or configuration. A computing device can include any suitable arrangement of components that provides a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor-based computer systems accessing stored software that programs or configures the computing system from a general purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming, scripting, or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.","Embodiments of the methods disclosed herein may be performed in the operation of such computing devices. The order of the blocks presented in the examples above can be varied\u2014for example, blocks can be re-ordered, combined, and\/or broken into sub-blocks. Certain blocks or processes can be performed in parallel.","Headings, lists, and numbering included herein are for ease of explanation only and are not meant to be limiting. While the present subject matter has been described in detail with respect to specific embodiments thereof, it will be appreciated that those skilled in the art, upon attaining an understanding of the foregoing may readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, it should be understood that the present disclosure has been presented for purposes of example rather than limitation, and does not preclude inclusion of such modifications, variations and\/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["These and other features, aspects, and advantages of the present disclosure are better understood when the following Detailed Description is read with reference to the accompanying drawings, where:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 1"],"b":"10"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 4","FIG. 1"],"b":"40"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5","b":["10","40"]}]},"DETDESC":[{},{}]}
