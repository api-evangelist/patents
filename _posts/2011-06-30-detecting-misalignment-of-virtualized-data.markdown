---
title: Detecting misalignment of virtualized data
abstract: One or more techniques and/or systems are provided for detecting misalignment between a virtual data format and an underlying data format. A virtual data object, such as a virtual machine, may be stored within a storage device using an underlying data format. The virtual data object may comprise one or more virtual data structures, such as a virtual partition. The virtual partition may be stored within the virtual data object according to a virtual data format. The virtual data format may be compared with the underlying data format to determine whether the virtual data structure is misaligned within the storage device. Such misalignment may lead to virtual data blocks of the virtual data structure overlapping underlying data blocks, which may degrade (e.g., I/O) performance. Accordingly, one or more misaligned virtual data structures may be realigned within the storage device to address misalignment and/or improve performance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09280289&OS=09280289&RS=09280289
owner: NETAPP, INC.
number: 09280289
owner_city: Sunnyvale
owner_country: US
publication_date: 20110630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The instant disclosure pertains to detecting misalignment between a virtual data format of virtual data and an underlying data format of data storage upon which the virtual data is stored.","Virtualization allows, among other things, many computing environments, such as general desktop environments, database servers, web development platforms, etc., to be implemented through software as virtual machines within host computing devices. A virtual machine may comprise its own file structure, virtual hard disks, partitions, operating system, applications, data files and\/or configuration. As such, the virtual machine may function as a self-contained computing environment. The virtual machine may be an abstraction of the underlying hardware resources (e.g., a virtual machine may be stored as one or more virtual data objects within physical storage). That is, the virtual machine may be a software implementation of a physical computing machine that has normal operational functionality of the physical computing machine. For example, a host computing device may comprise virtual machine host software (e.g., a hypervisor) configured to host and manage virtual machines. The virtual machine host software may allow a user to interface to and interact with a hosted virtual machine. For example, the user may interact with the guest operating system and\/or applications of the hosted virtual machine through the virtual machine host software.","A virtual machine may be stored as one or more virtual data objects within physical storage and\/or virtualized storage, such as a logical unit number (LUN), of an underlying storage device. A virtual data object may comprise virtual storage, such as a virtual hard disk (e.g., a virtual machine disk format (.vmdk), a virtual hard disk (.vdh) file format, etc.). The virtual storage may comprise virtual machine data, such as a file system guest operating system and\/or user data of the virtual machine. The virtual storage may be a level of abstraction from the underlying storage because the virtual storage may store the virtual machine data according to a virtual data format that may not be dependent upon an underlying data format of the underling storage. For example, a guest operating system of a virtual machine may store a user created text document according to a virtual data format within a virtual hard disk of a virtual data object (e.g., the user created text document may be stored within virtual data blocks of 512 bytes). The virtual data format may be independent of an underlying data format used by a storage device to store the virtual data object (e.g., the virtual data object may be stored within physical data blocks of 4096 bytes). That is, the virtual data format (e.g., how virtual machine data is stored within a virtual data object) may be a level of abstraction from an underlying data format (e.g., how the virtual data object is stored within an underlying physical storage device).","Virtualization also allows for storage virtualization. For example, a virtual volume may be created from various available portions of one or more physical storage locations (e.g., a virtual volume may be comprised of space from a first physical disk, a second physical disk, etc.). Thus, the virtual volume may not be \u201ctied\u201d to a particular storage device, and can be said to include a layer of abstraction or virtualization. Further, a virtual volume may comprise one or more logical unit numbers (LUNs). LUNs may allow disparate memory located within data storage to be grouped as a data storage unit. As such, a LUN may be characterized as comprising a virtual disk or drive upon which data within a virtual volume may be stored within the aggregate. For example, a LUN may be referred to as a virtual drive, such that it may emulate a hard drive from a general purpose computer, while the LUN actually comprises one or more data storage blocks in various physical storage devices and\/or volumes. In this way, a LUN may store data according to a virtual data format, which may be independent from an underlying data format used by a storage device to store the LUN.","Unfortunately, storing virtualized data, such as a virtual machine or a LUN, within underlying data storage may result in misalignment. For example, a guest operating system of a virtual machine may store virtual machine data according to a virtual data format within the virtual data object (e.g., the virtual data format may specify that a virtual file system of the virtual machine stores data within 512 byte blocks, and a first virtual hard drive partition starts at an offset of 63 blocks within the virtual data object). However, the virtual data object may be stored within a storage device (e.g., within physical storage and\/or a LUN) according to an underlying data format (e.g., the virtual data object may be stored within physical data blocks of 4096 bytes). If the virtual data format and the underlying data format align, then virtual data blocks may be stored within corresponding underlying storage data blocks without overlapping into additional underlying storage data blocks (e.g., virtual data blocks may span no more than one underlying storage data block). If the virtual data format and the underlying data format do not align, however, then virtual data blocks may end up being stored across one or more additional underlying storage data blocks (e.g., a virtual data block may span more than one underlying storage block). Thus, if a virtual data block is misaligned, then an I\/O operation for the virtual data block may entail accessing more than one underlying storage data block (e.g., a first portion of the virtual data block may be read from a first underlying storage data block and a second portion of the virtual data block may be read from a second underlying storage data block). Such additional I\/O operations may result in performance degradation. For example, access to a guest operating system and\/or user data of a virtual machine may take twice as long because more than one I\/O operation to underlying data storage may be performed to access a single virtual data block due to the misalignment.","The disclosure relates to one or more techniques and\/or systems that detect misalignment between a virtual data format and an underlying data format. Misalignment may be detected between a virtual data format used to store a virtual data structure within a virtual data object and an underlying data format used to store the virtual data object within an underlying storage device. In particular, metadata within the virtual data object may be queried to determine the virtual data format of the virtual data structure within the virtual data object (e.g., the virtual data structure may be opened and read using a virtual machine application programming interface so that one or more bytes, for example, of data within the virtual data structure may be searched for metadata describing how virtualized data is stored within the virtual data structure). The metadata, for example, may comprise a master boot record table, a global unique ID partition table, a range of bytes within the virtual data object (e.g., a first or last 512 bytes) and\/or other metadata within the virtual data object that may describe how virtual data is stored within the virtual data object. The virtual data format may comprise a virtual block size, a virtual offset and\/or other formatting information of the virtual data structure.","The virtual data object may be stored within a storage device, such as an underlying physical storage device and\/or a LUN, using an underlying data format. The underlying data format may correspond to an underlying block size and\/or other formatting information relating to how data is stored on the storage device. To detect misalignment between the virtual data format and the underlying data format, the virtual block size and the virtual offset, for example, may be compared with the underlying data format. For example, a product of the virtual block size and the virtual offset may be determined, and then compared to the underlying block size of the underlying data format to determine whether a remainder is produced (e.g., a modulus (MOD) operation may be performed to determine whether a remainder is produced from a division operation of the product and the underlying block size). If a remainder is produced, then misalignment may be detected. That is, the remainder may indicate that virtual data blocks of the virtual data structure may not align within underlying data blocks of the storage device.","In one example of detecting misalignment, a virtual management platform (e.g., a hypervisor) may provide a virtualization discovery report indicating that the virtual data object is associated with virtual data (e.g., the virtualization discovery report may indicate that the virtual data object is a virtual hard disk of a virtual machine). If the virtual data object corresponds to a virtual machine, then a virtual machine application programming interface may be used to open and read the virtual data object. It may be appreciated that the virtual data object may be opened and read regardless of whether the virtual machine is in a running state, a shutdown state, and\/or another state. Once opened, the virtual data object may be scanned for metadata describing the virtual data format (e.g., the virtual data object may be read byte by byte to locate metadata, such as a master boot partition table, that may describe how the virtual data structure is stored within the virtual data object). Once located, the metadata may be queried (e.g., searched for particular information, such as virtual block size, virtual offset, and\/or other formatting information associated with the virtual data structure). In this way, the underlying data format may be determined. The underlying data format describing how the virtual data object is stored within the storage device may be determined by querying storage configuration data (e.g., a master boot record of the storage device, a file system configuration file of the storage device, etc.) for formatting information associated with the storage device. In this way, misalignment may be detected by comparing the virtual data format and the underlying data format. If misalignment is detected, then the virtual data structure and\/or the virtual data object may be moved (e.g., byte by byte data transfer) to a new a starting location (e.g., a new starting block, a new starting offset, etc.) within the storage device so that alignment is achieved (e.g., a computational comparison of the virtual data format and the adjusted underlying data format does not produce a remainder).","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","Some examples of the claimed subject matter are now described with reference to the drawings, where like reference numerals are generally used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. Nothing in this detailed description is admitted as prior art.","Virtualization allows computing environments and\/or data storage to be abstracted away from the underlying storage devices upon which they may reside (e.g., so that multiple virtual computing environments may be established on a single physical device for various testing and\/or other purposes). For example, a computing environment may be virtualized into a virtual machine, and data storage may be virtualized into a logical unit number (LUN) by a hypervisor. Unfortunately, misalignment may occur between virtual data and an underlying storage device that comprises the virtual data. For example, a virtual hard disk partition misaligned with an underlying storage device may cause virtual data blocks of the virtual hard disk partition to span more than one underlying data block of the underlying storage device. Such misalignment may reduce performance of the virtual hard disk partition because additional I\/O operations may have to be performed to access virtual data (e.g., two I\/O operations may need to be performed to access a single virtual data block spanning two underlying data blocks). For example, a database, an email server and\/or other applications hosted by a misaligned virtual machine may experience performance degradation (e.g., speed, overhead required, resources consumed, etc.) of two-times or more compared to an aligned virtual machine. Accordingly, it may be advantageous to detect misalignment between a virtual data format of virtual data and an underlying data format of a storage device comprising the virtual data (e.g., to facilitate (re)alignment). Such misalignment may be corrected by adjusting how the virtual data object is stored within the underlying storage. Correcting misalignment may reduce unnecessary I\/O operations to additional underlying data blocks. In this way, access to the virtual data object may be improved by reducing access time to the virtual data within the virtual data object.","To provide context for where misalignment between a virtual data format and an underlying data format may occur, be detected and\/or corrected as provided herein,  illustrates a clustered network environment , and  illustrates an embodiment of a data storage system that may be implemented to store and manage data in this clustered network environment, including cluster backup data and\/or node backup data. It will be appreciated that where the same or similar components, elements, features, items, modules, etc. are illustrated in later figures but were previously discussed with regard to prior figures, that a similar (e.g., redundant) discussion of the same may be omitted when describing the subsequent figures (e.g., for purposes of simplicity and ease of understanding).",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","104","106","102","104","116","118","102","104","116","118"]},"It will be further appreciated that clustered networks are not limited to any particular geographic areas and can be clustered locally and\/or remotely. Thus, in one embodiment a clustered network can be distributed over a plurality of storage systems and\/or nodes located in a plurality of geographic locations; while in another embodiment a clustered network can include data storage systems (e.g., , ) residing in a same geographic location (e.g., in a single onsite rack of data storage devices).","In the illustrated example, one or more clients ,  which may comprise, for example, personal computers (PCs), computing devices used for storage (e.g., storage servers), and other computers or peripheral devices (e.g., printers), are coupled to the respective data storage systems ,  by storage network connections , . Network connection may comprise a local area network (LAN) or wide area network (WAN), for example, that utilizes Network Attached Storage (NAS) protocols, such as a Common Internet File System (CIFS) protocol or a Network File System (NFS) protocol to exchange data packets. Illustratively, the clients ,  may be general-purpose computers running applications, and may interact with the data storage systems ,  using a client\/server model for exchange of information. That is, the client may request data from the data storage system, and the data storage system may return results of the request to the client via one or more network connections , .","The nodes ,  on clustered data storage systems ,  can comprise network or host nodes that are interconnected as a cluster to provide data storage and management services, such as to an enterprise having remote locations, for example. Such a node in a data storage and management network cluster environment  can be a device attached to the network as a connection point, redistribution point or communication endpoint, for example. A node may be capable of sending, receiving, and\/or forwarding information over a network communications channel, and could comprise any device that meets any or all of these criteria. One example of a node may be a data storage and management server attached to a network, where the server can comprise a general purpose computer or a computing device particularly configured to operate as a server in a data storage and management system.","As illustrated in the exemplary environment , nodes ,  can comprise various functional components that coordinate to provide distributed storage architecture for the cluster. For example, the nodes can comprise a network module ,  (e.g., N-Module, or N-Blade) and a data module ,  (e.g., D-Module, or D-Blade). Network modules ,  can be configured to allow the nodes ,  to connect with clients ,  over the network connections , , for example, allowing the clients ,  to access data stored in the distributed storage system. Further, the network modules ,  can provide connections with one or more other components through the cluster fabric . For example, in , a first network module  of first node  can access a second data storage device  by sending a request through a second data module  of a second node .","Data modules ,  can be configured to connect one or more data storage devices , , such as disks or arrays of disks, flash memory, or some other form of data storage, to the nodes , . The nodes ,  can be interconnected by the cluster fabric , for example, allowing respective nodes in the cluster to access data on data storage devices ,  connected to different nodes in the cluster. Often, data modules ,  communicate with the data storage devices ,  according to a storage area network (SAN) protocol, such as Small Computer System Interface (SCSI) or Fiber Channel Protocol (FCP), for example. Thus, as seen from an operating system on a node , , the data storage devices ,  can appear as locally attached to the operating system. In this manner, different nodes , , etc. may access data blocks through the operating system, rather than expressly requesting abstract files.","It should be appreciated that, while the example embodiment  illustrates an equal number of N and D modules, other embodiments may comprise a differing number of these modules. For example, there may be a plurality of N and\/or D modules interconnected in a cluster that does not have a one-to-one correspondence between the N and D modules. That is, different nodes can have a different number of N and D modules, and the same node can have a different number of N modules than D modules.","Further, a client ,  can be networked with the nodes ,  in the cluster, over the networking connections , . As an example, respective clients ,  that are networked to a cluster may request services (e.g., exchanging of information in the form of data packets) of a node ,  in the cluster, and the node ,  can return results of the requested services to the clients , . In one embodiment, the clients ,  can exchange information with the network modules ,  residing in the nodes (e.g., network hosts) ,  in the data storage systems , .","In one embodiment, the data storage devices ,  comprise volumes , which is an implementation of storage of information onto disk drives or disk arrays or other storage (e.g., flash) as a file-system for data, for example. Volumes can span a portion of a disk, a collection of disks, or portions of disks, for example, and typically define an overall logical arrangement of file storage on disk space in the storage system. In one embodiment a volume can comprise stored data as one or more files that reside in a hierarchical directory structure within the volume.","Volumes are typically configured in formats that may be associated with particular storage systems, and respective volume formats typically comprise features that provide functionality to the volumes, such as providing an ability for volumes to form clusters. For example, where a first storage system may utilize a first format for their volumes, a second storage system may utilize a second format for their volumes.","In the example environment , the clients ,  can utilize the data storage systems ,  to store and retrieve data from the volumes . In this embodiment, for example, the client  can send data packets to the N-module  in the node  within data storage system . The node  can forward the data to the data storage device  using the D-module , where the data storage device  comprises volume A. In this way, in this example, the client can access the storage volume A, to store and\/or retrieve data, using the data storage system  connected by the network connection . Further, in this embodiment, the client  can exchange data with the N-module  in the host  within the data storage system  (e.g., which may be remote from the data storage system ). The host  can forward the data to the data storage device  using the D-module , thereby accessing volume  associated with the data storage device .","It may be appreciated that virtualized data, such as a virtual machine and\/or a logical unit number (LUN), may be implemented within environment . For example, one or more virtual machines may be stored as virtual data objects within one or more of the data storage devices , . One or more of the data storage devices ,  may store a virtual data object according to an underlying data format. One or more of the nodes , , for example, may be configured as host computing devices for the virtual machine. In particular, one or more of nodes ,  may comprise virtual machine host software that may host a virtual machine stored on one or more of data storage devices , . One or more of the nodes ,  may allow one or more clients ,  to interface with the hosted virtual machine (e.g., access a guest operating system, user data, and\/or applications of the hosted virtual machine). Unfortunately, virtual data structures within the virtual data object may be misaligned within one or more of the data storage devices , . Accordingly, a comparison component and\/or a realignment component may be implemented within environment  (e.g., one or more of such components may be implemented on one or more of clients , , nodes ,  and\/or on other computing devices not illustrated that may have access to data storage devices , ). The comparison component may be configured to detect misalignment, while the realignment component may be configured to correct misalignment. The comparison component may utilize a virtual machine management platform (e.g., a hypervisor within environment  and\/or one or more of virtual machine host software on nodes , , etc.) to discover that the virtual data object is associated with a virtual machine (e.g., a virtualization discovery report may be provided by the virtual machine management platform). Additionally, the comparison component may utilize a virtual machine application programming interface (e.g., an API configured to read and open one or more virtual machines located within environment , such as on one or more of nodes , ) to open and read the virtual data object for metadata indicating how virtual data structures are stored within the virtual data object.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"],"b":["200","200","202","116","118","234","128","130","202","205","108","110","202","216","234"]},"The data storage device  can comprise mass storage devices, such as disks , ,  of a disk array , , . It will be appreciated that the techniques and systems, described herein, are not limited by the example embodiment. For example, disks , ,  may comprise any type of mass storage devices, including but not limited to magnetic disk drives, flash memory, and any other similar media adapted to store information, including, for example, data (D) and\/or parity (P) information.","The node  comprises one or more processors , a memory , a network adapter , a cluster access adapter , and a storage adapter  interconnected by a system bus . The storage system  also includes an operating system  installed in the memory  of the node  that can, for example, implement a Redundant Array of Independent (or Inexpensive) Disks (RAID) optimization technique to optimize a reconstruction process of data of a failed disk in an array.","The operating system  can also manage communications for the data storage system, and communications between other data storage systems that may be in a clustered network, such as attached to a cluster fabric  (e.g.,  in ). Thus, the host  can to respond to client requests to manage data on the data storage device  (e.g., or additional clustered devices) in accordance with these client requests. The operating system  can often establish one or more file systems on the data storage system , where a file system can include software code and data structures that implement a persistent hierarchical namespace of files and directories, for example. As an example, when a new data storage device (not shown) is added to a clustered network system, the operating system  is informed where, in an existing directory tree, new files associated with the new data storage device are to be stored. This is often referred to as \u201cmounting\u201d a file system.","In the example data storage system , memory  can include storage locations that are addressable by the processors  and adapters , ,  for storing related software program code and data structures. The processors  and adapters , ,  may, for example, include processing elements and\/or logic circuitry configured to execute the software code and manipulate the data structures. The operating system , portions of which are typically resident in the memory  and executed by the processing elements, functionally organizes the storage system by, among other things, invoking storage operations in support of a file service implemented by the storage system. It will be apparent to those skilled in the art that other processing and memory mechanisms, including various computer readable media, may be used for storing and\/or executing program instructions pertaining to the techniques described herein. For example, the operating system can also utilize one or more control files (not shown) to aid in the provisioning of virtual machines.","The network adapter  includes the mechanical, electrical and signaling circuitry needed to connect the data storage system  to a client  over a computer network , which may comprise, among other things, a point-to-point connection or a shared medium, such as a local area network. The client  (e.g., ,  of ) may be a general-purpose computer configured to execute applications. As described above, the client  may interact with the data storage system  in accordance with a client\/host model of information delivery.","The storage adapter  cooperates with the operating system  executing on the host  to access information requested by the client . The information may be stored on any type of attached array of writeable media such as magnetic disk drives, flash memory, and\/or any other similar media adapted to store information. In the example data storage system , the information can be stored in data blocks on the disks , , . The storage adapter  can includes input\/output (I\/O) interface circuitry that couples to the disks over an I\/O interconnect arrangement, such as a storage area network (SAN) protocol (e.g., Small Computer System Interface (SCSI), iSCSI, hyperSCSI, Fiber Channel Protocol (FCP)). The information is retrieved by the storage adapter  and, if necessary, processed by the one or more processors  (or the storage adapter  itself) prior to being forwarded over the system bus  to the network adapter  (and\/or the cluster access adapter  if sending to another node in the cluster) where the information is formatted into a data packet and returned to the client  over the network connection  (and\/or returned to another node attached to the cluster over the cluster fabric ).","In one embodiment, storage of information on arrays , ,  can be implemented as one or more storage \u201cvolumes\u201d ,  that are comprised of a cluster of disks , ,  defining an overall logical arrangement of disk space. The disks , ,  that comprise one or more volumes are typically organized as one or more groups of RAIDs. As an example, volume  comprises an aggregate of disk arrays  and , which comprise the cluster of disks  and .","In one embodiment, to facilitate access to disks , , , the operating system  may implement a file system (e.g., write anywhere file system) that logically organizes the information as a hierarchical structure of directories and files on the disks. In this embodiment, respective files may be implemented as a set of disk blocks configured to store information, such as data (D) and\/or parity (P), whereas the directory may be implemented as a specially formatted file in which other files and directories are stored.","Whatever the underlying physical configuration within this data storage system , data can be stored as files within physical and\/or virtual volumes, which can be associated with respective volume identifiers, such as file system identifiers (FSIDs), which can be 32-bits in length in one example.","A physical volume, which may also be referred to as a \u201ctraditional volume\u201d in some contexts, corresponds to at least a portion of physical memory whose address, addressable space, location, etc. doesn't change, such as at least some of one or more data storage devices  (e.g., a Redundant Array of Independent (or Inexpensive) Disks (RAID system)). Typically the location of the physical volume doesn't change in that the (range of) address(es) used to access it generally remains constant.","A virtual volume, in contrast, is stored over an aggregate of disparate portions of different physical storage devices. The virtual volume may be a collection of different available portions of different physical memory locations, such as some available space from each of the disks , , . It will be appreciated that since a virtual volume is not \u201ctied\u201d to any one particular storage device, a virtual volume can be said to include a layer of abstraction or virtualization, which allows it to be resized and\/or flexible in some regards.","Further, a virtual volume can include one or more logical unit numbers (LUNs) , directories , qtrees , and files . Among other things, these features, but more particularly LUNS, allow the disparate memory locations within which data is stored to be identified, for example, and grouped as data storage unit. As such, the LUNs  may be characterized as constituting a virtual disk or drive upon which data within the virtual volume is stored within the aggregate. For example, LUNs are often referred to as virtual drives, such that they emulate a hard drive from a general purpose computer, while they actually comprise data blocks stored in various parts of a volume.","In one embodiment, one or more data storage devices  can have one or more physical ports, wherein each physical port can be assigned a target address (e.g., SCSI target address). To represent respective volumes stored on a data storage device, a target address on the data storage device can be used to identify one or more LUNs . Thus, for example, when the host  connects to a volume ,  through the storage adapter , a connection between the host  and the one or more LUNs  underlying the volume is created.","In one embodiment, respective target addresses can identify multiple LUNs, such that a target address can represent multiple volumes. The I\/O interface, which can be implemented as circuitry and\/or software in the storage adapter  or as executable code residing in memory  and executed by the processors , for example, can connect to volume  by using one or more addresses that identify the LUNs .","It may be appreciated that virtualized data, such as a virtual machine and\/or a logical unit number (LUN), may be implemented within data storage system . For example, one or more virtual machines may be stored as virtual data objects within data storage device  (e.g., or one or more data storage devices). The data storage devices  may store a virtual data object according to an underlying data format. Node  may, for example, be configured as host computing devices for the virtual machine. In particular, node  may comprise virtual machine host software that may host a virtual machine stored on data storage device . The node  may allow client  to interface with the hosted virtual machine (e.g., access a guest operating system, user data and\/or applications of the hosted virtual machine, etc.). Unfortunately, virtual data structures within the virtual data object may be misaligned within the data storage device . Accordingly, a comparison component and\/or a realignment component may be implemented (e.g., one or more of such components may be implemented on one or more of client , node  and\/or on other computing devices not illustrated that may have access to data storage device ). It may be appreciated that one example of implementing a comparison component is illustrated and described relative to , and that one example of implementing a realignment component is illustrated and described relative to . The comparison component may be configured to detect misalignment, while the realignment component may be configured to correct misalignment. The comparison component may utilize a virtual machine management platform (e.g., a hypervisor associated with data storage system  and\/or virtual machine host software on node , etc.) to discover that the virtual data object is associated with a virtual machine (e.g., a virtualization discovery report may be provided by the virtual machine management platform). Additionally, the comparison component may utilize a virtual machine application programming interface (e.g., an API configured to read and open virtual machines associated with data storage system , such as node ) to open and read the virtual data object for metadata indicating how virtual data structures are stored within the virtual data object.","One embodiment of detecting misalignment between a virtual data format and an underlying data format is illustrated by an exemplary method  in . At , the method starts. A virtual data object, such as a virtual machine and\/or a logical unit number (LUN), may be stored within a storage device using an underlying data format (e.g., a virtual machine may be stored on a LUN of the storage device, a virtual machine may be stored on physical storage of the storage device, a LUN may be stored on physical storage of the storage device, etc.). The underlying data format may correspond to an offset, a data block size and\/or other formatting information related to how the virtual data object is stored within the storage device.","The virtual data object may comprise one or more virtual data structures, such as a virtual partition of a virtual machine and\/or a LUN partition of a LUN (e.g., as illustrated in  and ). A virtualization management platform may be used to discover the virtual data object (e.g., a virtual machine management platform may provide a virtualization discovery report specifying that a virtual machine data object is associated with a virtual machine). An application programming interface on the storage device may be invoked to open and\/or read the virtual data object (e.g., a virtual machine application programming interface may allow a virtual machine data object to be opened and\/or read regardless of the state of the corresponding virtual machine). In this way, the virtual data object may be opened and searched for metadata that may describe how a virtual data structure of the virtual data object is stored within the virtual data object (e.g., the first and\/or last 512 bytes of the virtual data object may be read to determine a virtual data format of the virtual data structure, a master boot record within the virtual data object may be searched and\/or a global unique ID partition table may be searched, etc.). In one example, a metadata data structure (e.g., table) within a first portion of the virtual data object may be queried. However, the metadata data structure may specify that virtual data format information may be located at second portion within the virtual data object. Thus, the second portion may be queried to determine the virtual data format. In this way, multiple layers of indirection within the virtual data object may be navigated to determine the metadata.","At , metadata within the virtual data object may be queried to determine the virtual data format describing how the virtual data structure is stored within the virtual data object. The virtual data format may comprise a virtual block size (e.g., a size of virtual data blocks of the virtual data object within which virtual data of the virtual data structure may be stored), a virtual offset (e.g., a starting virtual data block of the virtual data object at which the virtual data structure begins), and\/or other formatting information. It may be appreciated that an example of a virtual offset and\/or a virtual block size is illustrated and described relative to  (e.g., virtual offset (1) , virtual offset (2) , virtual block size , etc.).","At , the virtual block size and the virtual offset may be compared with the underlying data format to detect misalignment of the virtual data structure in relation to the storage device. In one example, a product of the virtual block size and the virtual offset may be determined, and then compared (e.g., a MOD operation may be performed) to an underlying block size of the underlying data format to determine whether a remainder is produced. For example, virtual data of the virtual data structure may be stored within 512 byte virtual data blocks within the virtual data object, the virtual data structure may start at a virtual offset of 63 blocks within the virtual data object, and the storage device may store data within 4096 byte underlying data blocks within the storage device. Thus, a product of 512 and 63 may be determined, and then compared to 4096 which produces a remainder, which may indicate that the virtual data structure may be misaligned with the underlying storage device. That is, the virtual data format and the underlying data format may be misaligned. If misalignment is detected, then a notification of the misalignment may be provided (e.g., a notification may be provided to an administrator of the storage device so that a data alignment utility may be used to correct the misalignment). For example, if misalignment is detected, then the virtual data structure and\/or the virtual data object may be realigned to a new starting block position within the storage device to match the underlying format. For example, a data move operation may be performed upon the virtual data object so that the virtual data object starts at an underlying data block that would not result in misalignment (e.g., the virtual data format compared with the realigned underlying data format does not produce a remainder). It may be appreciated that other actions may be performed to correct the misalignment (e.g., the virtual data structure may be moved to a new starting block position within the virtual data object).","It may be appreciated that the virtual data object may comprise one or more virtual data structures, such that one or more of the one or more virtual data structures may be misaligned. In one example, the metadata within the virtual data object may be queried to determine at least two virtual data structures. For respective virtual data structures, a virtual data format comprising a virtual block size and a virtual offset of a virtual data structure may be determined. The virtual data formats may be compared with the underlying data format to detect and\/or correct misalignment.","In one example of detecting misalignment, misalignment may be detected between a virtual machine and physical storage of a storage device, where the virtual machine is stored within the physical storage. In particular, the virtual data object may comprise a virtual machine data object (e.g., a .vdh data format, a .vmdk data format, etc.) associated with the virtual machine. The virtual data structure may comprise a virtual partition of the virtual machine, such as a virtual hard disk partition. In this way, a virtual data format of the virtual partition may be compared with an underlying data format of the physical storage to detect misalignment.","In another example of detecting misalignment, misalignment may be detected between a virtual machine and a LUN mapped to the physical storage, where the virtual machine is stored within the LUN. In particular, the virtual data object may comprise a virtual machine data object (e.g., a .vdh data format, a .vmdk data format, etc.) associated with the virtual machine. The virtual data structure may comprise a virtual partition of the virtual machine, such as a virtual hard disk partition. In this way, a virtual data format of the virtual partition may be compared with an underlying data format of the LUN to detect misalignment.","In another example of detecting misalignment, misalignment may be detected between a LUN and physical storage of a storage device, where the LUN is stored within the physical storage. In particular, the virtual data object may comprise the LUN. The virtual data structure may comprise a LUN partition. In this way, a virtual data format of the LUN partition may be compared with an underlying data format of the physical storage to detect misalignment. At , the method ends.","One embodiment of detecting misalignment between a virtual data format and an underlying data format is illustrated by an exemplary method  in . At , the method starts. At , metadata within a virtual machine data object associated with a virtual machine may be queried to determine a virtual data format of a virtual partition stored within the virtual machine data object. In one example, the virtual partition may be a partition of a virtual disk of the virtual machine. The virtual data format may describe how the virtual partition is stored within the virtual machine data object. For example, the virtual data format may comprise a virtual block size and a virtual offset of the virtual partition.","The virtual machine data object may be stored on a storage device using an underlying data format. The virtual data format may be compared with the underlying data format to detect misalignment of the virtual partition in relation to the underlying data format of the storage device. At , a product of the virtual block size and the virtual offset may be determined, and then compared (e.g., a MOD operation may be performed) to an underlying block size of the underlying data format to determine whether a remainder is produced. Misalignment of the virtual partition in relation to the underlying data format may be detected if a remainder is produced. If misalignment is detected, then the virtual partition may be realigned to a new starting block position within the storage device to match the underlying data format. At , the method ends.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 5","b":["500","500","502","502","506","504","506","508","510","506","516","504","522","534"]},"The comparison component  may be configured to query metadata within the virtual data object  to determine a virtual data format of a virtual data structure. In one example, the comparison component  may open and read the virtual data object  using a virtualization application programming interface to locate bytes within the virtual data object  that describe how virtual partition ()  and\/or virtual partition ()  are stored within the virtual data object  (e.g., a virtual machine application programming interface may be used to open and read a virtual hard disk data object of a virtual machine to locate a master boot record table describing how a virtual partition of the virtual machine is stored within the virtual hard disk data object). For example, a virtual block size  of 512 bytes and a virtual offset (1)  of 63 blocks may be determined as a virtual data format  for the virtual data structure (1) , and the virtual block size  of 512 bytes and a virtual offset (2)  of 182 blocks may be determined as a virtual data format  for the virtual data structure (2)  (e.g., the virtual offset (1)  may indicate that the virtual data structure (1)  starts at block , and the virtual offset (2)  may indicate that the virtual data structure (2)  starts at block  within the virtual data object).","The comparison component  may compare the virtual offsets and virtual block sizes of the respective virtual data structures with the underlying data format  to detect misalignment of the virtual data structures. In one example of detecting misalignment associated with the virtual data structure (1) , the comparison component  may determine a product of the virtual offset (1)  of 63 blocks and the virtual block size  of 512 bytes, and then compare (e.g., MOD) the resulting 32256 product with the underlying block size  of 4096 bytes to determine whether a remainder is produced. Because 32256 mod 4096 produces a remainder, misalignment  between the virtual data format  of the virtual data structure (1)  and the underlying data format  of the underlying data storage  may be detected. In another example of detecting misalignment associated with the virtual data structure (2) , the comparison component  may determine a product of the virtual offset (2)  of 182 blocks and the virtual block size  of 512 bytes, and then compare (e.g., MOD) the resulting 93184 product with the underlying block size  of 4096 bytes to determine whether a remainder is produced. Because 93184 mod 4096 producers a remainder, misalignment  between the virtual data format  of the virtual data structure (2)  and the underlying data format  of the underlying data storage  may be detected.","It may be appreciated that the comparison component  may be implemented local or remote to the virtual data object  and\/or a host computing device that provides clients with access to the virtual data object. In one example, the comparison component  may be implemented within the storage device . In another example, the comparison component  may be implemented within a computing device remote from the storage device . In another example, the comparison component  may be comprised within a computing device remote from a host computing device configured to provide access to the virtual data object , such as a host computing device configured to host a virtual machine associated with the virtual data object . It may be appreciated that the comparison component  may open, read and\/or access the virtual data object  irrespective of the state of the virtual data object . For example, if the virtual data object  is associated with a virtual machine, then the comparison component  may detect misalignment without directly accessing a hosted instance of the virtual machine, which may otherwise require credentials and\/or the virtual machine to be in a particular state, such as a running or shutdown state.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 6","b":["600","600","602","602"]},"In one example of correcting misalignment, a virtual machine data object  (before realignment) may be associated with a virtual machine. For example, the virtual machine data object  may comprise virtual machine data, such as a guest operating system, application binaries and\/or user data. The virtual machine data object  may store the virtual machine data within one or more virtual partitions (e.g., a virtual partition c:\\ that may be used as a virtual hard disk (e.g., a c: drive) of the virtual machine to store data of the virtual machine). A virtual data format may be associated with the virtual partition c:\\. For example, the virtual data format may comprise a virtual offset  of the virtual partition c:\\ within the virtual machine data object  and\/or a virtual block size.","The virtual machine data object  may be stored on physical storage  using an underlying data format. A comparison component (not illustrated) may be configured to detect misalignment  between the virtual data format of the virtual partition c:\\ and the underlying data format of the physical storage . Accordingly, the realignment component  may be configured to realign the virtual partition c:\\ and\/or the virtual machine data object  within the physical storage  to a new starting block position  to alleviate the misalignment. For example, bytes of data within the virtual partition c:\\ may be shifted to the new starting block position  on the physical storage . It may be appreciated that in one example, realignment of the virtual partition c:\\ may comprise realigning the virtual machine data object  (after realignment) with the physical storage . It may be appreciated that other realignment techniques may be employed by the realignment component  to alleviate misalignment.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 7","b":["700","704","710","702","704","704","704","702","706","708"]},"The virtual machine data object  may be stored on the LUN  mapped to the storage device. The LUN  may be associated with an underlying data format describing how data is stored within the LUN . For example, the underlying data format may comprise an underlying block size  and\/or other formatting information. A comparison component (not illustrated) may be configured to detect misalignment  between the virtual data format and the underlying data format. In particular, the comparison component may detect misalignment  associated with how the virtual partition  is stored on the LUN . For example, data blocks of the virtual partition  may not align with data blocks of the LUN  (e.g., a starting data block of the virtual partition  may not start at the beginning of a data block of the LUN ). Thus, accessing a virtual data block of the virtual partition  may entail accessing more than one underlying data block of the LUN , which may reduce performance of a virtual machine associated with the virtual machine data object . It will be appreciated that, in one example, such misalignment may be addressed in a manner akin to that which is illustrated in , for example.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 8","b":["800","804","810","802","804","804","804","802","806","808"]},"The LUN  may be stored on the physical storage . The physical storage  may be associated with an underlying data format describing how data is stored within the physical storage . For example, the underlying data format may comprise an underlying block size  and\/or other formatting information. A comparison component (not illustrated) may be configured to detect misalignment  between the virtual data format and the underlying data format. In particular, the comparison component may detect misalignment  associated with how the LUN partition  is stored on the physical storage . For example, data blocks of the LUN partition  may not align with data blocks of the physical storage  (e.g., a starting data block of the LUN partition  may not start at the beginning of a data block of the physical storage ). Thus, accessing a virtual data block of the LUN partition  may entail accessing more than one underlying data block of the physical storage , which may reduce I\/O performance to data of the LUN partition . It will be appreciated that, in one example, such misalignment may be addressed in a manner akin to that which is illustrated in , for example.","It will be appreciated that processes, architectures and\/or procedures described herein can be implemented in hardware, firmware and\/or software. It will also be appreciated that the provisions set forth herein may apply to any type of special-purpose computer (e.g., file host, storage server and\/or storage serving appliance) and\/or general-purpose computer, including a standalone computer or portion thereof, embodied as or including a storage system. Moreover, the teachings herein can be configured to a variety of storage system architectures including, but not limited to, a network-attached storage environment and\/or a storage area network and disk assembly directly attached to a client or host computer. Storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems.","In some embodiments, methods described and\/or illustrated in this disclosure may be realized in whole or in part on computer-readable media. Computer readable media can include processor-executable instructions configured to implement one or more of the methods presented herein, and may include any mechanism for storing this data that can be thereafter read by a computer system. Examples of computer readable media include (hard) drives (e.g., accessible via network attached storage (NAS)), Storage Area Networks (SAN), volatile and non-volatile memory, such as read-only memory (ROM), random-access memory (RAM), EEPROM and\/or flash memory, CD-ROMs, CD-Rs, CD-RWs, DVDs, cassettes, magnetic tape, magnetic disk storage, optical or non-optical data storage devices and\/or any other medium which can be used to store data.","Another embodiment (which may include one or more of the variations described above) involves a computer-readable medium comprising processor-executable instructions configured to apply one or more of the techniques presented herein. An exemplary computer-readable medium that may be devised in these ways is illustrated in , where the implementation  comprises a computer-readable medium  (e.g., a CD-R, DVD-R, platter of a hard disk drive, flash drive, etc.), on which is encoded computer-readable data . This computer-readable data  in turn comprises a set of computer instructions  configured to operate according to the principles set forth herein. In one such embodiment, the processor-executable instructions  may be configured to perform a method , such as at least some of the method  of  or method  of , for example, and\/or at least some of a system, such as at least some of the system  of , for example. Many such computer-readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.","Although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure is intended to include such modifications and alterations. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d Also, \u201cexemplary\u201d means an example, not the best; \u201cor\u201d is intended to be inclusive not exclusive; \u201ca\u201d and\/or \u201can\u201d mean \u201cone or more\u201d unless specified otherwise and\/or clear from context to be directed to a singular form; and at least one of A and B and\/or the like generally means A or B or both A and B."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
