---
title: Power efficient callback patterns
abstract: In one or more embodiments, an application program interface (API) is provided and enables an entity, such as an application, script, or other computing object to register to receive callbacks immediately and, without specifying a time constraint. In this approach, the API does not rely on a timer, such as a system timer. Rather, a non-timer based queue, such as a message queue-type approach is utilized. Specifically, callbacks that are registered through this API can be placed on the message queue and work associated with the registered callback can be performed through the normal course of processing messages and events in the message queue. Over time, such results in a callback pattern that allows an associated web browser and applications such as web applications to remain responsive, while increasing performance and power efficiencies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507650&OS=09507650&RS=09507650
owner: Microsoft Technology Licensing, LLC
number: 09507650
owner_city: Redmond
owner_country: US
publication_date: 20110909
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Overview","CONCLUSION"],"p":["Web platform and scripting programming models can tend to be power inefficient. Specifically, over the last few years, as browser manufacturers have attempted to increase callback frequencies, power requirements have actually increased. Power consumption can be a complex problem. There are many factors that contribute to challenging power consumption scenarios including how efficiently computation is batched, power state, sleep duration, and heat dissipation among others.","By increasing callback frequencies so that callbacks occur more quickly, power efficiency is reduced. Developers typically increase callback frequencies by specifying, when registering for callbacks, time values that are very low, e.g., between 0-4 ms. Specifically, by specifying small callback intervals or values and thus having callbacks occur at a quicker rate, more CPU cycles are utilized. Relatedly, there tends to not be adequate time between these rapid, specified callbacks for system components to meaningfully enter into a sleep or idle mode to conserve energy.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter.","In one or more embodiments, an application program interface (API) is provided and enables an entity, such as an application, script, or other computing object to register to receive callbacks immediately and, without specifying a time constraint. In this approach, the API does not rely on a timer, such as a system timer. Rather, a non-timer based queue, such as a scheduler or message queue-type approach is utilized. Specifically, callbacks that are registered through this API can be placed on the scheduler or message queue and work associated with the registered callback can be performed through the normal course of processing messages and events in the queue. Over time, such results in a callback pattern that allows an associated web browser and applications such as web applications to remain responsive, while increasing performance and power efficiencies.","In one or more embodiments, an application program interface (API) is provided and enables an entity, such as an application, script, or other computing object to register to receive callbacks immediately and, without specifying a time constraint. In this approach, the API does not rely on a timer, such as a system timer. Rather, a non-timer-based queue, such as a scheduler or message queue-type approach is utilized. Specifically, callbacks that are registered through this API can be placed on the scheduler or message queue and work associated with the registered callback can be performed through the normal course of processing messages and events in the queue. Over time, such results in a callback pattern that allows an associated web browser and applications such as web applications to remain responsive, while increasing performance and power efficiencies.","As noted above, device power efficiency is a concern for those who develop software and hardware products. Having a power-inefficient device can lead to a degraded user experience and loss of consumer interest in a particular device or product.","Accordingly, to improve power consumption, some operating systems throttle their internal timer frequency, thus allowing the CPU to sleep for longer durations, which improves power consumption. For example, in some programming systems, an application can request callbacks at a specified frequency. For example, an application may request callbacks every 100 ms in which case the operating system will send notifications 10 times per second to the application. By default, some operating systems throttle the minimum callback frequency to 15.6 ms, which works out to 64 callbacks a second. When an application requests a higher frequency (more regular callbacks) these request are increased to 15.6 ms.","At these frequencies the x86\/x64 processors can, by default, enter extremely lower power states over 99% of the time before a hardware interrupt occurs which, in turn, triggers the pending timer notifications.","Many web platforms, i.e. web browsers, have traditionally used a polling-based programming model where, the more often callbacks occur, the faster an application such as a web application may execute. To improve performance, browser manufacturers are beginning to disable the power management features in the underlying operating system. In the case of Microsoft Windows\u00ae operating systems, Windows\u00ae provides an API that allows a trusted native application to lower the 15.6 ms system wide throttle. This approach is, however, not recommended because it prevents the CPU from entering the lowest power states.","For example, reducing this throttle from 15.6 ms to the HTML5 recommended 4 ms reduces battery life by 22% on reference hardware which served as a study model. The increased frequency prevents the CPU from entering lower power states and conserving power. Toggling low power states on many architectures can cause a spike in power consumption during the transition, meaning the fewer transitions the better.","Once a single application has removed the system wide throttle provided by an operating system, the power savings are effectively gone because the associated hardware is prevented from efficiently sleeping.","Because of these underlying web patterns, browsers and web based applications can be extremely power inefficient, and in the process of trying to improve browser performance, browser manufacturers are actually causing the entire operating system and hardware to be more power inefficient.","In the following discussion, an example environment is first described that is operable to employ the techniques described herein. Example illustrations of the various embodiments are then described, which may be employed in the example environment, as well as in other environments. Accordingly, the example environment is not limited to performing the described embodiments and the described embodiments are not limited to implementation in the example environment.","Example Environment",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 1","FIG. 2"],"b":["100","100","102","102","102","102","102"]},"Computing device  includes a web browser  to provide functionality as described in this document. The web browser can be implemented in connection with any suitable type of hardware, software, firmware or combination thereof. In at least some embodiments, the web browser is implemented in software that resides on some type of tangible, computer-readable storage medium examples of which are provided below.","Web browser  is representative of functionality that enables the user to browse to different web of sites and consume content associated with those websites.","Computing device  can also include a gesture module  that recognizes gestures that can be performed by one or more fingers, and causes operations to be performed that correspond to the gestures. The gestures may be recognized by module  in a variety of different ways. For example, the gesture module  may be configured to recognize a touch input, such as a finger of a user's hand as proximal to display device  of the computing device  using touchscreen functionality. Module  can be utilized to recognize single-finger gestures and bezel gestures, multiple-finger\/same-hand gestures and bezel gestures, and\/or multiple-finger\/different-hand gestures and bezel gestures.","The computing device  may also be configured to detect and differentiate between a touch input (e.g., provided by one or more fingers of the user's hand ) and a stylus input (e.g., provided by a stylus ). The differentiation may be performed in a variety of ways, such as by detecting an amount of the display device  that is contacted by the finger of the user's hand  versus an amount of the display device  that is contacted by the stylus .","Thus, the gesture module  may support a variety of different gesture techniques through recognition and leverage of a division between stylus and touch inputs, as well as different types of touch inputs.","In addition, the computing device  includes a plurality of Application Program Interfaces (APIs)  that can be used to register for callbacks as will be described below. In this particular example, the APIs include a setTimeout( ) method, a setInterval( ) method, and a setImmediate( ) method.","The setTimeout( ) method calls a function or evaluates an expression after a specified number of milliseconds. This method can be used by code, such as JavaScript, to specify a time at which a callback is desired. Many web pages use the setTimeout( ) method with a specified period of zero to attempt to yield control flow to the user agent before running script. Specifically, this interface is often used to both allow user agent events and display updates to happen before continuing script execution and to avoid long running script dialogs in certain user agents. However, as will be appreciated by the skilled artisan, setTimeout( ) enforces a minimum delay, even with a specified period of zero, that is not uniformly implemented across user agents. Removing this minimum delay from setTimeout( ), as noted above, runs the risk of causing existing webpages, that have come to rely on the minimum delay, to break by going into a seemingly hung state while also significantly increasing the power consumption of the browser.","The setInterval( ) method calls a function or evaluates an expression at specified intervals (in milliseconds). The setInterval( ) method will continue calling the function until it is cleared, or an associated window is closed.","In one or more embodiments, the setImmediate( ) method runs a callback function immediately after the user agent events and display updates have occurred. This interface will not enforce a minimum delay and will attempt to run the callback as soon as it can. The setImmediate( ) method or API enables an entity, such as an application, script, or other computing object to register to receive callbacks immediately and, without specifying a time constraint. In this approach, the API does not rely on a timer, such as a system timer. Rather, a non-timer based queue, such as a scheduler or message queue-type approach is utilized. Specifically, callbacks that are registered through this API can be placed on the scheduler or message queue and work associated with the registered callback can be performed through the normal course of processing messages and events in the queue. Over time, such results in a callback pattern that allows an associated web browser and applications such as web applications to remain responsive, while increasing performance and power efficiencies. It is to be appreciated and understood that implementation of callbacks using the setImmediate( ) method can be performed by, and using any suitable entity. For example, this document refers to use of a scheduler or message queue. Other systems, however, refer to entities that can perform scheduling activities as a \u201cdispatcher\u201d, \u201cdispatch loop\u201d, or \u201cmessage loop\u201d, to name just a few. Accordingly, these entities and others can be utilized to implement the embodiments described herein without departing from the spirit and scope of the claimed subject matter.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["200","104","105","107"]},"In one embodiment, this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to the user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities, and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one embodiment, a \u201cclass\u201d of target device is created and experiences are tailored to the generic class of devices. A class of device may be defined by physical features or usage or other common characteristics of the devices. For example, as previously described the computing device  may be configured in a variety of different ways, such as for mobile , computer , and television  uses. Each of these configurations has a generally corresponding screen size and thus the computing device  may be configured as one of these device classes in this example system . For instance, the computing device  may assume the mobile  class of device which includes mobile telephones, music players, game devices, and so on. The computing device  may also assume a computer  class of device that includes personal computers, laptop computers, netbooks, and so on. The television  configuration includes configurations of device that involve display in a casual environment, e.g., televisions, set-top boxes, game consoles, and so on. Thus, the techniques described herein may be supported by these various configurations of the computing device  and are not limited to the specific examples described in the following sections.","Cloud  is illustrated as including a platform  for web services . The platform  abstracts underlying functionality of hardware (e.g., servers) and software resources of the cloud  and thus may act as a \u201ccloud operating system.\u201d For example, the platform  may abstract resources to connect the computing device  with other computing devices. The platform  may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the web services  that are implemented via the platform . A variety of other examples are also contemplated, such as load balancing of servers in a server farm, protection against malicious parties (e.g., spam, viruses, and other malware), and so on.","Thus, the cloud  is included as a part of the strategy that pertains to software and hardware resources that are made available to the computing device  via the Internet or other networks.","The gesture techniques supported by the gesture module may be detected using touchscreen functionality in the mobile configuration , track pad functionality of the computer  configuration, detected by a camera as part of support of a natural user interface (NUI) that does not involve contact with a specific input device, and so on. Further, performance of the operations to detect and recognize the inputs to identify a particular gesture may be distributed throughout the system , such as by the computing device  and\/or the web services  supported by the platform  of the cloud .","Generally, any of the functions described herein can be implemented using software, firmware, hardware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule,\u201d \u201cfunctionality,\u201d and \u201clogic\u201d as used herein generally represent software, firmware, hardware, or a combination thereof. In the case of a software implementation, the module, functionality, or logic represents program code that performs specified tasks when executed on or by a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices. The features of the gesture techniques described below are platform-independent, meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.","In the discussion that follows, various sections describe example embodiments. A section entitled \u201cSetting Immediate Callbacks\u201d describes how callbacks can be set in accordance with one or more embodiments. Next, a section entitled \u201cInterleaving Timers\u201d describes how timers can be interleaved in accordance with one or more embodiments. Following this, a section entitled \u201cExample Method\u201d describes an example method in accordance with one or more embodiments. Last, a section entitled \u201cExample Device\u201d describes aspects of an example device that can be utilized to implement one or more embodiments.","Having described example operating environments in which the inventive techniques can be utilized, consider now a discussion of one or more embodiments in which callbacks can be set for immediate callback.","Setting Immediate Callbacks","As noted above, the setImmediate( ) method can be utilized to run a callback function immediately after the user agent events and display updates have occurred. This interface does not enforce a minimum delay and will attempt to run the callback as soon as it can. Consider the following Javascript example to illustrate a web-based e-mail client attempting to do a spellcheck operation after the user agent events and display updates have been flushed, to ensure that the site remains responsive:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<!DOCTYPE html>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<html>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<head>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<script>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"function emailClient( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Do email work"]},{"entry":[{},"\/\/ When UI is free, check for spelling"]},{"entry":[{},"setTimeout(checkSpelling, 0);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"function checkSpelling( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Scan email for spelling errors"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/script>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/head>"]},{"entry":[{},"<body onload=\u201cemailClient( )\u201d>"]},{"entry":[{},"<\/body>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/html>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Note here that the setTimeout( ) method is used to callback the function checkSpelling. Here, however, the script callback will be subject to a minimum delay that may not be uniformly defined across user agents. This results in script that is not running in the most performant manner.","Using the setImmediate( ) method, the page will be able to efficiently yield control flow without minimum delays. As an example, consider the following JavaScript which shows a web-based e-mail client attempting to do a spellcheck operation with the setImmediate( ) method to efficiently yield control flow without minimum delays:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<!DOCTYPE html>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<html>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<head>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<script>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"function emailClient( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Do email work"]},{"entry":[{},"\/\/ When UI is free, check for spelling"]},{"entry":[{},"setImmediate(checkSpelling);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"function checkSpelling( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Scan email for spelling errors"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/script>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/head>"]},{"entry":[{},"<body onload=\u201cemailClient( )\u201d>"]},{"entry":[{},"<\/body>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/html>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The setImmediate( ) method can execute callbacks more efficiently because it does not rely on a timer-based queue or a system timer. Recall that timer-based approaches, such as setTimeout( ) and setInterval( ), can still be subject to minimum delays imposed by the system. In this example, the setImmediate( ) method utilizes a non-timer-based queue in the form of a scheduler or message queue.","Example setImmediate( ) API","To understand how control can be yielded to setImmediate( ) callbacks without the system's minimum delays, consider the  diagram which represents a simplified diagram that illustrates how setImmediate( ) callbacks can be processed, along with callback processing associated with the setTimeout( ) and setInterval( ) methods( ), in accordance with one or more embodiments.","Typically, since JavaScript in a browser executes on a single thread, asynchronous events such as mouse clicks, keyboard inputs, immediate callbacks (e.g., setImmediate( ) callbacks), and the like, are run when there is an opening in the execution. This is perhaps best demonstrated by the  diagram.","In this diagram, time in milliseconds is shown to the left, e.g., 0 milliseconds, 10 milliseconds, 20 milliseconds, 30 milliseconds, 40 milliseconds, and 50 milliseconds. The various boxes represent portions of JavaScript being executed. For example, the first block of JavaScript executes for approximately 18 ms, the callback associated with the timer then blocks, and so on.","Because JavaScript executes one piece of code at a time, due to its single-threaded nature, each of these blocks of code are said to be \u201cblocking\u201d the progress of other asynchronous events. This means that when an asynchronous event occurs, such as a mouse click, a timer firing, and the like, it gets queued up to be executed later.","Initially, within the first block of JavaScript, two timers are initiated: a 10 ms setTimeout( ) (the first arrow down on the right) and a 10 ms setInterval ( ) (the third arrow down on the right). In addition, a setIntermediate ( ) callback is registered (the second arrow down on the right). Because of where and when the timer was started within the first block of code, it fires before the first block of code is complete (i.e. fourth arrow down on the right). Because of where it fired, it does not execute immediately and is incapable of doing so because of the threading. Instead, the delayed function is queued in order to be executed at the next available moment.","Additionally, the setImmediate( ) callback is unable to be executed immediately and thus, like the initial timer, it is queued to be executed later. After the initial block of JavaScript finishes at or around 18 ms, the browser immediately ascertains, at , whether anything is waiting for execution. In this case, the set immediate callback and the timer callback are waiting for execution. The browser then picks one and executes it immediately. In this case, the browser picks the timer callback and executes it immediately. The setImmediate will wait until the next possible time, in order to execute.","Note that while the timer callback is executing, the first interval callback fires (fifth arrow down on the right). As with the setImmediate( ), it is queued for later execution. When the timer callback finishes execution, the browser again ascertains, at , whether anything is waiting for execution. Here, the setImmediate and the first fired interval are waiting. The browser then executes the interval, thus leaving the setImmediate. At the end of the interval execution, the browser ascertains, at , whether anything is waiting for execution. Here, the setImmediate is waiting for execution and is therefore executed. During the setImmediate execution, the interval fires again (sixth arrow down), and accordingly, is queued up for execution. When setImmediate concludes, the browser ascertains, at , whether anything is waiting for execution. Here, the queued up interval is waiting and is therefore executed. At or near the end of the interval's execution, the interval fires again (seventh arrow down) and is less executed as shown. At the end of the third interval execution, the browser ascertains, at , whether anything is waiting for execution. Here, there is nothing waiting for execution so the browser now waits for a new asynchronous event to occur. This occurs at the 50 ms mark when the interval fires again and is thus executed immediately because nothing is blocking.","In various embodiments, the setImmediate( ) method does not utilize the system timer or timer queues, such as the setTimeout( ) and setInterval( ) methods. Rather, the setImmediate( ) utilizes a non-timer-based queue which, in this example, comprises a message queue. Any suitable type of message queue can be utilized. One example message queue is the Windows\u00ae message queue. Of course, as noted above, other entities can be utilized to implement this functionality without departing from the spirit and scope of the claimed subject matter.","In various systems, message queues and their equivalents can be used for such things as painting on the screen, processing input from a cursor, and the like. The setImmediate( ) method places the associated callback on the message queue of tasks to accomplish. If there is nothing on the message queue, the associated callback will be executed immediately. If there are other items on the message queue, in some embodiments, those can be processed prior to processing the associated callback that has been placed on the message queue. Thus, web developers can use the setImmediate( ) method to break apart long-running JavaScript operations and receive a call back immediately after the browser has processed outstanding work such as events and display refreshes.","As but one example of an implementation of the setImmediate( ) method, consider the following:","The following method can be exposed by any suitable object including, by way of example and not limitation, a Windows object. It is to be appreciated and understood, however, that implementation of the above- and below-described functionality can be performed in any suitable system utilizing any suitable object. In the specific context of a Windows-based system, consider the following method:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"window.msSetImmediate(func)"]},{"entry":[{},"function func( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ do work"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This function is called and is provided with a parameter which is the callback that is to be used. This function can also take another form in which not only a callback can be provided, but arguments as well.","Interleaving Timers","Oftentimes, as in the example above, more than one timer can be utilized. In one or more embodiments, and in conjunction with the use of the setImmediate( ) function, timers can be ordered and interleaved with setImmediate( ). As an example, consider the following in which the order of funcA, funcB, and funcC being called up depends on how long it takes for the loop to complete.",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"setTimeout(funcA, 5);"]},{"entry":[{},"setImmediate(funcC);"]},{"entry":[{},"setTimeout(funcB, 10);"]},{"entry":[{},"for (var i = 0; i < 100000000000; i++);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Here, there are two timeout functions, one scheduled for 5 ms and the other scheduled for 10 ms. If this loop takes greater than 10 ms, the order of calls made will be funcA, funcC, funcB, as due timers are fired prior to setImmediates. If, on the other hand, the loop takes less than 5 ms, the order of calls made will be funcC, funcA, funcB since available CPU time can be efficiently utilized.","Having considered example interfaces that can be used to specify callbacks in accordance with one or more embodiments, consider now an example method in accordance with one or more embodiments.","Example Method",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 4"},"Step  exposes an interface to enable immediate callbacks. This step can be performed in any suitable way. For example, this step can expose an interface that allows an entity such as an application, script, object, and the like to specify that desires to receive callbacks immediately. In the illustrated and described embodiment, specification of immediate callbacks can occur without specifying a numerical time value at which such callbacks are desired to be received.","Step  receives, using the interface, a call that specifies that immediate callback is desired. Step can be performed in any suitable way, examples of which are provided above. Step  utilizes a non-timer-based queue to provide associated callbacks. Any suitable non-timer-based queue can be utilized. For example, in at least some embodiments, a scheduler or message queue can be utilized in order to provide associated callbacks. But one example of how this can be done is provided above.","Having described various embodiments in which power efficient callback patterns can be utilized, consider now an example device that can be utilized to implement one or more embodiments.","Example Device",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 5","FIGS. 1 and 2"],"b":["500","500","502","504","504","500","500","506"]},"Device  also includes communication interfaces  that can be implemented as any one or more of a serial and\/or parallel interface, a wireless interface, any type of network interface, a modem, and as any other type of communication interface. The communication interfaces  provide a connection and\/or communication links between device  and a communication network by which other electronic, computing, and communication devices communicate data with device .","Device  includes one or more processors  (e.g., any of microprocessors, controllers, and the like) which process various computer-executable or readable instructions to control the operation of device  and to implement the embodiments described above. Alternatively or in addition, device  can be implemented with any one or combination of hardware, firmware, or fixed logic circuitry that is implemented in connection with processing and control circuits which are generally identified at . Although not shown, device  can include a system bus or data transfer system that couples the various components within the device. A system bus can include any one or combination of different bus structures, such as a memory bus or memory controller, a peripheral bus, a universal serial bus, and\/or a processor or local bus that utilizes any of a variety of bus architectures.","Device  also includes computer-readable media , such as one or more memory components, examples of which include random access memory (RAM), non-volatile memory (e.g., any one or more of a read-only memory (ROM), flash memory, EPROM, EEPROM, etc.), and a disk storage device. A disk storage device may be implemented as any type of magnetic or optical storage device, such as a hard disk drive, a recordable and\/or rewriteable compact disc (CD), any type of a digital versatile disc (DVD), and the like. Device  can also include a mass storage media device .","Computer-readable media  provides data storage mechanisms to store the device data , as well as various device applications  and any other types of information and\/or data related to operational aspects of device . For example, an operating system  can be maintained as a computer application with the computer-readable media  and executed on processors . The device applications  can include a device manager (e.g., a control application, software application, signal processing and control module, code that is native to a particular device, a hardware abstraction layer for a particular device, etc.), as well as other applications that can include, web browsers, image processing applications, communication applications such as instant messaging applications, word processing applications and a variety of other different applications. The device applications  also include any system components or modules to implement embodiments of the techniques described herein. In this example, the device applications  include an interface application  and a gesture-capture driver  that are shown as software modules and\/or computer applications. The gesture-capture driver  is representative of software that is used to provide an interface with a device configured to capture a gesture, such as a touchscreen, track pad, camera, and so on. Alternatively or in addition, the interface application  and the gesture-capture driver  can be implemented as hardware, software, firmware, or any combination thereof. In addition, computer readable media  can include a web browser  that functions as described above, as well as callback APIs  that function as described above.","Device  also includes an audio and\/or video input-output system  that provides audio data to an audio system  and\/or provides video data to a display system . The audio system  and\/or the display system  can include any devices that process, display, and\/or otherwise render audio, video, and image data. Video signals and audio signals can be communicated from device  to an audio device and\/or to a display device via an RF (radio frequency) link, S-video link, composite video link, component video link, DVI (digital video interface), analog audio connection, or other similar communication link. In an embodiment, the audio system  and\/or the display system  are implemented as external components to device . Alternatively, the audio system  and\/or the display system  are implemented as integrated components of example device .","In the embodiments described above, an application program interface (API) is provided and enables an entity, such as an application, script, or other computing object to register to receive callbacks immediately and, without specifying a time constraint. In this approach, the API does not rely on a timer, such as a system timer. Rather, a non-timer based queue, such as a message queue-type approach is utilized. Specifically, callbacks that are registered through this API can be placed on the message queue and work associated with the registered callback can be performed through the normal course of processing messages and events in the message queue. Over time, such results in a callback pattern that allows an associated web browser and applications such as web applications to remain responsive, while increasing performance and power efficiencies.","Although the embodiments have been described in language specific to structural features and\/or methodological acts, it is to be understood that the embodiments defined in the appended claims are not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as example forms of implementing the claimed embodiments."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The detailed description is described with reference to the accompanying figures. The use of the same reference numbers in different instances in the description and the figures may indicate similar or identical items.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
