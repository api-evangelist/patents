---
title: Techniques for fast loading of data from an external distributed file system to a database management system
abstract: Techniques for fast loading data from an external distributed file system (DFS) to a database management system (DBMS) are provided. Assigning a portion of data from a file located in the DFS to each of a plurality of DFS clients. Configuring each DFS client to interact with a specific gateway from a plurality of gateways associated with the DBMS. Each gateway configured to send its portion of the file received from its designated client to every access module processor (AMP) controlled by that gateway. Each AMP processes a portion of the data received from the gateway to load the data into a table of the DBMS.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08938480&OS=08938480&RS=08938480
owner: Teradata US, Inc.
number: 08938480
owner_city: Dayton
owner_country: US
publication_date: 20111229
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["After over two-decades of electronic data automation and the improved ability for capturing data from a variety of communication channels and media, even small enterprises find that the enterprise is processing terabytes of data with regularity. Moreover, mining, analysis, and processing of that data have become extremely complex. The average consumer expects electronic transactions to occur flawlessly and with near instant speed. The enterprise that cannot meet expectations of the consumer is quickly out of business in today's highly competitive environment.","Consumers have a plethora of choices for nearly every product and service, and enterprises can be created and up-and-running in the industry it mere days. The competition and the expectations are breathtaking from what existed just a few short years ago.","The industry infrastructure and applications have generally answered the call providing virtualized data centers that give an enterprise an ever-present data center to run and process the enterprise's data. Applications and hardware to support an enterprise can be outsourced and available to the enterprise twenty-four hours a day, seven days a week, and three hundred sixty-five days a year.","As a result, the most important asset of the enterprise has become its data. That is, information gathered about the enterprise's customers, competitors, products, services, financials, business processes, business assets, personnel, service providers, transactions, and the like.","Updating, mining, analyzing, reporting, and accessing the enterprise information can still become problematic because of the sheer volume of this information and because often the information is dispersed over a variety of different file systems, databases, and applications.","In response, the industry has recently embraced a data platform referred to as Apache Hadoop\u2122 (Hadoop\u2122). Hadoop\u2122 is an Open Source software architecture that supports data-intensive distributed applications. It enables applications to work with thousands of network nodes and petabytes (1000 terabytes) of data. Hadoop\u2122 provides interoperability between disparate file systems, fault tolerance, and High Availability (HA) for data processing. The architecture is modular and expandable with the whole database development community supporting, enhancing, and dynamically growing the platform.","However, because of Hadoop's\u2122 success in the industry, enterprises now have or depend on a large volume of their data, which is stored external to their core in-house database management system (DBMS). This data can be in a variety of formats and types, such as: web logs; call details with customers; sensor data, Radio Frequency Identification (RFID) data; historical data maintained for government or industry compliance reasons; and the like. Enterprises have embraced Hadoop\u2122 for data types such as the above referenced because Hadoop\u2122 is scalable, cost efficient, and reliable.","One challenge in integrating Hadoop\u2122 architecture with an enterprise DBMS is loading data from Hadoop\u2122 and importing and using that data within the enterprise DBMS.","Moreover, loading data quickly into data warehouses (parallel DBMS) is an important task in building and maintaining enterprise data warehouses. Historically, data warehouse loading tools have been mainly focused on single client loading data to data warehouse though through multiple concurrent sessions. In a shared parallel DBMS (PDBMS), multiple nodes communicate via high-speed interconnect network and each node has its own private memory and disk(s). In current systems, there are usually multiple virtual processors (collections of software processes) running on each node to take advantage of the multiple CPUs and disks available on each node for further parallelism. These virtual processors, responsible for doing the scans, joins, locking, transaction management, and other data management work, are called Parallel Units or Access Module Processors (AMPs) in Teradata DBMS.","Tables are usually horizontally partitioned across all PUs which allows the system to exploit the I\/O bandwidth of multiple disks by reading and writing them in parallel. Hash partitioning is commonly used to partition relations across all PUs. Rows of a table are assigned to an AMP by applying a hash function to Primary Index Column (PI).","The Primary Index Column is one or more attributes from the table, specified by the user or automatically chosen by the system.","Loading data to a table in parallel DBMS with defined Primary Index column (PI) requires PDBMS to load data to the right parallel computing unit (AMP) based on the hash value of the table's PI column and further requires PDBMS to sort the data received by each parallel computing unit based on the hash values of the PI column for the purpose of being able to quickly look up qualified rows based on the PI column value later. Some recent data warehouse benchmarks show that a DBMS's No Primary Index (NoPI) table feature is about 30% faster than loading to a Primary Index (PI) table. A NoPI table is a table without defined Primary Index column. Thus when a row is inserted to the table, the row can be stored on any AMP. Consequently there is a no quick or efficient way to quickly find qualified rows based on Primary Index column since no Primary Index column is defined with a NoPI table. Loading to a NoPI table does not require sorting loaded data on each DBMS Access Module Processor (AMP), which is the main reason why it is faster to load data to a NoPI table than to a PI table.","In various embodiments, techniques for fast loading data from an external distributed file system (DFS) to a DBMS are presented. According to an embodiment, a method for fast loading data from an external DFS to a DBMS is provided.","Specifically, a first number of clients are configured such that each client is configured to acquire a specific portion of data from an external distributed file system (DFS) file and configured to interact with a specific gateway of a database management system (DBMS). Additionally, gateways of the DBMS are configured such that each of the specific gateways is configured to pass the specific portion of data it has to every access module processor (AMP) controlled by that specific gateway. Finally, each AMP is configured to load a unique piece of the specific portion of data that it was passed to a table of the DBMS.","Initially for purposes of illustration and comprehension some context and examples are presented to highlight and illustrate the techniques being presented herein and below.","The techniques herein propose utilize the NoPI table feature of a DBMS and introduces new techniques for a data loading process to achieve an optimal loading performance from an external DFS to DBMS NoPI tables. In an embodiment, the external DFS is HDFS and the DBMS is the Teradata\u2122 data warehouse product distributed by Teradata\u2122 Inc. of Delaware.","Initially a description of how data is currently loaded to existing DBMS tables is provided for purposes of comprehension of what follows. When a row of data from a file is sent to a Fastload client module (or any client that uses a Fastload protocol such as the JAVA\u2122 Fastload option) to Teradata (a specific example DBMS or data warehouse), the row is first sent to a gateway in a networked system. The gateway forwards the row to a receiving AMP, which is responsible for a loading session from which the row was sent, and then the receiving AMP computes a row-hash value of the row and sends it to the final AMP, which stores that row in Teradata Enterprise Data Warehouse (EDW). The final AMP and the receiving AMP can be two different AMPs and can be on two different nodes. The architecture for achieving the above process allows users to choose how many sessions (AMPs) to be used for data loading, which provides a way to control system resource usage for data loading. Teradata's\u2122 NoPI feature leverages the existing Fastload protocol.","Existing DBMS's NoPI feature leverages existing Fastload protocols. So, a similar architecture to the conventional approach is used herein for loading to NoPI tables with two novel differences from loading to PI tables:\n\n","As will be demonstrated more completely herein and below, these differences provide substantial improvement during the loading process of an external DFS file to a DBMS table.","The technique provide a new loading approach for loading external DFS (such as Hadoop\u2122) data to NoPI tables (this new proposed architecture is shown in the FIG. A\u2014it is noted this is presented within the context of HDFS and Teradata\u2122 for illustration but other DFS's and other DBMS's may also be used with the techniques herein).","Essentially, the new and novel technique of the  shows that across node data transfer within the DBMS is eliminated during the loading processing.","The new loading processing, described in the context of the , can be described as follows.","Assume there are N nodes in the Teradata EDW system (or any DBMS data warehouse) and a large Hadoop file F is being loaded into a NoPI table T.","1) For best loading performance, N loading clients are started as shown in the . Each loading client is assigned 1\/N of the Hadoop\u2122 file F (or any external DFS file) and connects to a unique Teradata (or any DBMS) node\/Gateway.","2) Each Gateway receives data only from one loading client and forwards data directly to all AMPs on the same node the Gateway resides. There is no Teradata node to Teradata node data transfer (DBMS node to DBMS node). Therefore, there is no Teradata inter node traffic in the whole loading process. Each Gateway forwards data to \u201clocal\u201d AMPs in round-robin fashion to minimize data skew.","3) Loading restartability is at each loading client\/Teradata node level. When one loading client fails, the loading client can be restarted and reload its assigned Hadoop\u2122 data to the designated Teradata node.","Some enhancements can be achieved to the existing DBMS allowing a gateway capability to forward data directly to all AMPS on the same node that the Gateway resides on via a round-robin assignment fashion.","Additionally, enhancements to each client in the DBMS can be made t provide central coordination of N loading clients for loading Hadoop\u2122 (external DFS) data to a NoPI table. A controller\/master process is used to start up N loading clients; assign those clients the portion of the Hadoop\u2122 (external DFS) data to be loaded and the gateway\/Internet Protocol (IP) address to connect to, according to a user configuration file or default configuration parameters. To the user of the new loading utility, a simple command-line interface or graphical user interface (GUI) makes the loading process easy to start, monitor and manage. Per user configuration, the N loading clients can be started up on either a DBMS node or an external DFS node or any other node, which can connect to the external DFS and DBMS systems. Moreover, the restartability is built into each loading client.","So, a substantial benefit of the techniques herein is that data from an external DFS can be efficiently loaded to DBMS NoPI tables with fine granularity of restartability.","It is within this context that various embodiments are now discussed with reference to the .",{"@attributes":{"id":"p-0036","num":"0037"},"figref":"FIG. 1B","b":["100","100"]},"At , the fast loader configures a first number of clients. Each client configured to acquire a specific portion of data from an external distributed file system (DFS) file and interact with a specific gateway of a database management system (DBMS). In other words if a particular file includes 1000 rows and there are 10 clients and 10 gateways, each client delivers 100 rows of the file to a specific gateway of the DBMS.","According to an embodiment, at , the fast loader ensures the clients are in a processing environment associated with the DFS. So, clients of the DFS, such as Hadoop\u2122 are configured to acquire their specific portion of the data and communicate with a gateway associated with the DBMS.","In another case, at , the fast loader ensures that the clients are in a processing environment associated with the DBMS that interacts with the DFS. Here, unlike the embodiment of , the clients are configured to interact with an Application Programming Interface (API) of the DFS and the clients processing within the DBMS or are native to the DBMS.","In a hybrid approach, at , the fast loader ensures that some of the clients are in a processing environment associated with the DBMS that interacts with the DFS and other of the clients are in a processing environment associated with the DFS. Here, some processing is native to the DFS and some is native to the DBMS.","According to an embodiment, at , the fast loader ensures that each client is configured to self-restart on a failure to deliver its specific portion of data to its gateway. Each client can restart on failures to ensure High Availability (HA) and failover support.","At , the fast loader configures each of the gateways of the DBMS. So, each of the specific gateways are configured to pass the specific portion of data for that gateway to every access module processor (AMP) controlled by that specific gateway.","According to an embodiment, at , the fast loader configures distribution of the specific portion of data for each gateway in a round-robin fashion to the corresponding AMP's on that gateway. This was discussed above with reference to the discussion of the  and with the discussion that precedes the discussion of the .","At , the fast loader configures each AMP to load a unique piece of the specific portion of data that it was passed to a table of the DBMS.","In an embodiment, at , the fast loader ensures that each AMP within a particular gateway directly delivers its unique piece of the specific portion of data directly to the table of the DBMS. That is, there is no inter AMP communication required within a specific gateway.","According to an embodiment, at , the fast loader executes the clients, gateways, and AMPs concurrently to load all data from the DFS file to the table.","Continuing with the embodiment of  and at , the fast loader processes each AMP to load its unique piece to the table where the table is a no primary index table of the DBMS.","Still continuing with the embodiment of  and at , the fast loader directs each AMP to computer a random row hash value for its portion of the no primary index table.","Continuing with the embodiment of  and at , the fast loader ensures that a final populated version of the table does not require any sorting.",{"@attributes":{"id":"p-0050","num":"0051"},"figref":"FIG. 2","b":["200","600"]},"The load manager presents yet another view of the processing discussed above with respect to the  and the fast loader.","At , the load manager initiates a predefined number of clients and directs each client to obtain a unique portion of data from a file located on an external DFS.","According to an embodiment, at , the load manager acquires the predefined number of clients and\/or references to each of the clients via a configuration file or profile file.","In another case, at , the load manage acquires the predefined number of clients and\/or references to each of the clients via command line parameters.","In an embodiment, at , the load manager receives instructions on whether to start each of the clients within a processing environment for the DFS and\/or within a processing environment for the DBMS.","In another scenario, at , the load manager configures each client with self restart capabilities on failure conditions for that client.","At , the load manager directs each client to deliver its unique portion of the data to a specific unique gateway of a database management system (DBMS).","According to an embodiment, at , the load manager provides an Internet Protocol (IP) address for each gateway to its corresponding client.","At , the load manager instructs each gateway to simultaneously deliver its unique portion of the data to each access module processor (AMP) controlled by that gateway.","Finally, at , the load manager instructs each AMP within each gateway to load a subset of that gateway's unique portion of the data to a table of the DBMS.","According to an embodiment, at , the load manager instructs each AMP further directing each AMP from every gateway to load its data simultaneously and in parallel with remaining AMPs.",{"@attributes":{"id":"p-0062","num":"0063"},"figref":"FIG. 3","b":["300","300","300","300","300"]},"The fast data loading system  implements, inter alia, various aspects of the methods  and  presented above with respect to the , B, and , respectively.","The fast data loading system  includes a fast loader .","One or more processors of a DBMS are specifically configured with the fast loader  and the fast loader  is implemented as executable instructions that reside in a non-transitory computer-readable storage medium and execute on the one or more processors of the DBMS. Example aspects of the fast loader  were presented above with reference to the , B, and .","The fast loader  configures clients so that each client acquires a unique portion of data from a DFS file and each client communicates its unique portion of data to a specific gateway of the DBMS. The fast loader  also configures each gateway to deliver all of its unique portion of data to all access module processors on that gateway, and the fast loader  configures each AMP to load a subset of its unique portion of data to a table of the DBMS in parallel with remaining AMPs.","According to an embodiment, the fast loader  is further configured to configure each AMP to load its subset of the data to the table, which is a no primary index table that is unsorted in final version.","The above description is illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of embodiments should therefore be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
