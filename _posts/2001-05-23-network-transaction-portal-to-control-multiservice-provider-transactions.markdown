---
title: Network transaction portal to control multi-service provider transactions
abstract: The present invention provides a system and method for providing controlled service transactions involving multiple service providers on a service network. A client access device links to the service network via a network entry point and performs the multi-service provider transaction under the control of a network transactional application at a hub that holds the transaction captive and includes a router to route to remote distributed software objects at nodes of the service providers. The software objects include methods that may be remotely executed under the control of the transactional application at the hub.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07930340&OS=07930340&RS=07930340
owner: 
number: 07930340
owner_city: 
owner_country: 
publication_date: 20010523
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation in part of application Ser. No. 09\/792,323 filed Feb. 23, 2001, now U.S. Pat. No. 7,340,506, which was a continuation-in-part of application Ser. No. 08\/879,958 filed Jun. 20, 1997, now U.S. Pat. No. 5,987,500 which was a divisional of application Ser. No. 08\/700,726 filed Aug. 5, 1996, now U.S. Pat. No. 5,778,178 which was related to and claimed priority from U.S. provisional patent application No. 60\/006,634 filed Nov. 13, 1995. This application is related to and claims priority from U.S. provisional patent application No. 60\/206,422 filed May 23, 2000, application Ser. Nos. 09\/792,323;08\/879,958; 08\/700,726; 60\/006,634; and 60\/206,422 are hereby incorporated by reference. U.S. Pat. Nos. 5,987,500; 5,778,178, 7,340,506 and sister U.S. Pat. No. 6,212,556 are also hereby incorporated by reference.","Contained herein is material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction of the patent disclosure by any person as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all rights to the copyright whatsoever.","1. Field of the Invention","The invention relates generally to performing transactions on a network. More particularly, the invention relates to a system and method for controlling a transaction involving multiple service providers.","2. Background Information","The Internet and the World Wide Web, hereinafter referred to as the web, provide a viable medium for electronic commerce and on-line services, however current systems and methods for using the Internet and the Web are extremely limited. In particular, current uses are limited to either browse-only interactions or simple \u201cdeferred\u201d purchases involving a single service provider.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1","b":["100","105","155","150","130","110","110","105","110","130","120","155","160","105","160"]},"Alternatively, the user  may make a limited, deferred purchase of a car from the car dealer  and involving only the car dealer . For example, the user  may fill out a form on car dealer web page  and email the form to car dealer web server . After receiving the form, the car dealer web server  may perform some processing of the form, and then send it through a gateway  towards applications  that perform further purchase processing and read and write data  such as to a legacy database. The applications  and the data  are not directly connected to the Internet or the web and are not available to other entities connected to the Internet. Typically, the car dealer  alone may access the applications  and the data , and typically this is via a complicated and customized procedure. The actual purchase is deferred until the email is received, read by a person or system, and purchase processing is performed by a person or the applications  and data . Thus, the purchase is not performed in real-time and involves only the car dealer .","The user  may also select a bank hyperlink  embedded in web page . The bank hyperlink  causes the web browser  to connect to bank web server  presenting bank web page  via hyperlink address . This may allow the user  to browse bank web page  to obtain information about obtaining a loan, however, the association between the car dealer  and the bank  is a limited one involving the car dealer  only providing easy access to bank information via the bank hyperlink . Unfortunately, there is no cooperation or interaction between the car dealer  and the bank  besides the hyperlink . In fact, the hyperlink  disconnects the user from car dealer web server  and web page  and connects the user with bank web server  and bank web page . This lack of cooperation, control, and interaction greatly limits the services that may be provided by the web.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2","b":["205","250","205","250","210","250","252","254","256","258","272","270","250","254","258","205","250","250","254","270","272","205"]},"However, the CGI interaction is severely limited because each CGI application must be customized for a particular type of application or service. That is, different CGI application would have to be created for each service provided by the bank. For this reason, creating and managing individual CGI scripts for each service is not a viable solution for merchants with a large number of services.","As the Web expands and electronic commerce becomes more desirable, the need increases for robust, real-time, bi-directional transactional capabilities on the Web. A true real-time, bi-directional transaction would allow a user to connect to a variety of services on the web, and perform real-time transactions on those services. For example, although user  can browse car dealer Web page  today, the user cannot purchase the car, negotiate a car loan or perform other types of real-time, two-way transactions that he can perform with a live salesperson at the car dealership.","Ideally, user  in  would be able to access car dealer Web page , select specific transactions that he desires to perform, such as purchase a car, and perform the purchase in real-time, with two-way interaction capabilities. CGI applications provide user  with a limited ability for two-way interaction with car dealer Web page , but due to the lack of interaction and management between the car dealer and the bank, he will not be able to obtain a loan and complete the purchase of the car via a CGI application. The ability to complete robust real-time, two-way transactions is thus not truly available on the web today.","In order to provide sophisticated and useful services over the web, it is desirable to control and manage cooperation and interaction among a plurality of service providers that each contribute to the transaction. This goal is constrained by the prior art systems and methods for using the Internet, which do not control or manage multi-service provider transactions and which do not permit sophisticated and useful joint service offerings.","A method and apparatus are described for performing transactions involving multiple service providers over a service network. Broadly stated, embodiments of the present invention seek to maintain control over the transaction including controllably and selectively routing to and involving service providers in the transaction. According to one embodiment, this may include a network transactional application including control and routing software objects and distributed remote software objects to interface with the network transactional application and perform controlled transactions. Advantageously, this may allow sophisticated, real-time, multi-service provider transactions to be performed while allowing one entity (e.g., a context owner) to control the transaction.","In the following description, for the purpose of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances, well-known structures and devices are shown in block diagram form.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 3","b":["300","310","320","350"]},"The client access device  may access the facilities network and the service network via server \u201cswitching\u201d sites or corresponding appropriate non-web switching sites such as cellular provider sites. For example, a cell phone may access a cell site where resides a computer system having an IP address and a functional connection to a hub either on that computer system or on a connected computer system.","The facilities network may be any suitable facilities network or combination of potentially heterogeneous facilities networks, including an IP-based network, a TCP\/IP-based network, the Internet, the web, a non-web network, an email network, Integrated Services Digital Network (ISDN), Asynchronous Transfer Mode (ATM), Personal Communications Services (PCS), X.25, Ethernet, frame relay, token ring, Fiber Distributed Data Interface (FDDI), Community Antenna TV (CATV), an intelligent network, a public-switched network, a public-switched telephone network, a plain old telephone system (POTS) network, a private switched network, a wireless network, a cellular network, private\/leased lines, an intranet, a private enterprise network, or another network suitable for supporting a service network such as those described in the present specification. For example, the client access device  may connect to the facilities network via a wire, cable, cellular, or PCS connection, service provider   may connect via a T1 connection, service provider N  may connect via a T3 connection, and service provider N  may additionally have an ATM\/Sonet or Frame Relay\/T3 connection to a branch office to perform processing.","The service network processing  is functionally interposed between the client access device  and multiple service providers and associated software that provides services to the client access device . According to one embodiment, the service network processing  provides a network transactional application that provides an overlay service network that operates on and runs on the facilities network . The network transactional application may provide the service network according to an N-tier manager-agent model that achieves N-way communication by using a value-added network (VAN) switch or object router that resides at the transaction network entry point to route to software residing at remote service provider nodes. The network application may use an N-way interactive object router to provide the link between the clients and the service providers. The service network may provide access to a myriad of network services such as selling of products (e.g., books) and services (e.g., shipping, pizzas delivery), banking, trading (e.g., stocks), advertising, customer service, bill management, and others.","The service network processing  may include transactional control and management software to control and manage one or more transactions involving the client access device  and any number of service providers that are desired for the particular transaction. Control and management may include establishing a connection or link (e.g., a line, channel, or thread over which data may be communicated) to service providers, making requests, activating or configuring transactional applications, receiving results, de-establishing connections with service providers, fault-handling, monitoring performance, monitoring transactions, monitoring client activity and service provider activity (e.g., to support accounting and billing policies of the service network), collecting statistics, security processing, address processing to uniquely address and identify network locations and objects by a unique network address, routing processing to uniquely identify, retrieve, and route dynamically changing information and software objects using multi-media, object routing, and others. According to one embodiment, management includes distributed control of Events, Configuration, Accounting, Performance, and Security (ECAPS). By way of example, events may include responding to specific occurrences on the network, configuration may include managing the connections that exist within the network, accounting may include measuring and recording network transaction activities, performance may include monitoring and maintaining network performance standards, and security may include enabling connection and transaction privacy.","The service network processing  may support industry-standard web browsers (e.g., Internet Explorer available from Microsoft Corporation of Redmond Wash.), web servers, security protocols, and connect to applications and middleware, including both legacy and relational database management systems (RDBMSs). In an embodiment where the service network  operates over the Internet, the service network  may comply with open Internet standards and protocols.","According to various embodiments, the network processing  may be distributed between a hub and a plurality of nodes each associated with a service provider. The term \u201chub\u201d will broadly be used to refer to one or more functionally coupled computer systems (e.g., a web server server) that provide software and methods to control a transaction or service involving multiple service providers. The hub may be considered as a portal or gateway into the service network that provides selective and controlled access into the service network to computer systems and methods associated with service providers of the network. The term \u201cnode\u201d will broadly be used to refer to one or more functionally coupled computer systems that provide service methods under the control of the hub. Thus, the service network  may extend to software, objects, and methods at the service providers , , and , as will be explained in more detail elsewhere. According to one embodiment, links from the client access device  to such software, objects, and methods is via the hub.","According to certain embodiments the hub includes a router to route to and establish links to software objects at nodes. The term \u201crouter\u201d will broadly be used to refer to software to create or allow a link to potentially remote and geographically distributed software. In one embodiment, the router is an object router that uses objects and class information rather than unrelated functions and data. For example, in one specific embodiment, the object router provides two types of a class, namely a skeleton that is the functionality of the object and its stub that allows remote access to the same object. Typically the stub is located on one computer system, such as a client computer system or a hub computer system and the skeleton is located on a different remote and geographically distributed computer system associated with a service provider, a user to specify functions to be executed remotely. According to one embodiment, the object router is part of a value-added network transactional application and resides at the network entry point (e.g., the hub) to provide an N-way interactive link to other software that resides at remote and geographically distributed IP nodes. Specific exemplary embodiments of hubs, nodes, routers, object routers, and objects will be discussed elsewhere, although other embodiments are contemplated.","The term \u201cservice provider\u201d will be broadly used to refer to a network-connected entity or presence, such as a business, merchant, organization, administration, networked user, or other provider that provides or participates in a service associated with the service network. Typically, the service provider participates in joint services involving multiple service providers. The multiple service providers may include a service provider  , a service provider N , and optionally any number of additional service providers . Accordingly, the total of service providers may be any integer number of service providers. The service providers ,  may be any service providers suitable for the intended service network, including merchants and businesses that desire to provide their products and\/or services to a client associated with the client access device . For example, the service providers may be businesses that provide web servers, web pages, transactional applications to sell products or services, and data to facilitate the transaction. The multiple service providers may also include other client access devices similar to client access device . For example, client access device  may obtain services that involve other client access devices, such as in a service network incorporating features similar to those in an interactive chat or messaging, an online bartering, an online file-sharing, or other services. The service providers are to be interpreted broadly in the present application and many exemplary service providers will be discussed in the specification, although others are contemplated.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 4","b":["400","405","410","411","412","413","414","420","422","424","426","428","412","430","413","432"]},"After accessing the facilities network, the client access device  may access or utilize the service network . This may be done in a way compatible with the client access device  and the service network . For example, a web browser access device  may request to access the service network to obtain one or more services by communicating a request to connect to a web server and web page based on data input into a computer system by a client or user. Alternatively, a cell phone access device  may access the service network by entering a phone number associated with the service network  into the cell phone access device , which automatically connects to the facilities network  and the service network , which may be a call center providing interactive voice response (IVR).","The service network  may selectively and controllably manage the connection to and use of service provider hardware and software , which may be by direct connection  or by indirect connection  with the service network . As shown, applications , middleware , 4GL applications , operating systems , and hardware  may be directly connected to the service network . Typically data  (e.g., enterprise data), host TP applications , and other hardware  (e.g., printers, faxes, etc.) will be indirectly connected to the service network , such as via the applications , or middleware .",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 5","b":["500","510","1","520","2","530","540","510","1","520","550","510","2","555","560","1","2","510","565","570","575","540"]},"Without loss of generality to other services and transactions, and to illustrate the advantages provided by the service network, consider an exemplary multi-provider service involving a client access device  purchasing a car from car dealer presence  by obtaining a loan for the amount of the car from bank presence  and insurance for the car from insurance provider . The client access device  first determines the amount of the car from car dealer presence  and indicates a desire to purchase the car for the amount by obtaining a loan from bank presence .","Then, the service network automatically establishes a controlled link  with bank presence . Advantageously, this may be done without losing connection to and communication with car dealer presence . Then, bank presence  establishes a controlled link  with access device  to obtain data to process the loan. After bank presence  approves the loan it may verify the loan to the client via controlled link  and to the car dealer presence  via controlled link .","The car dealer presence  may then connect with an insurance provider  via controlled link  to advertise an insurance policy to client access device  via controlled link  and receive an acceptance of the policy via controlled link . The insurance provider  after processing the insurance policy may provide verification to the client via controlled link  and to the car dealer presence via controlled link . The car dealer presence  may then send a complete transaction verification and summary to the client access device  via controlled link  to finalize the particular transaction.","As discussed, the transaction involves interactions between the client access device  and multiple service providers , ,  under the control of the service network. Advantageously, this allows collaborative and cooperative transactions and interactions that are not possible in prior art approaches. In this way, transactions are not limited to two-way transactions involving a client access device and a single service provider, but are flexible to include three-way, four-way, or N-way transactions and interactions involving any desired number of service providers and the client access device. According to one aspect of the present invention, predetermined strategies involving collaboration and cooperation among service providers may be devised to incorporate N service providers, where N is any desired integer number of service providers that have agreed to collaborate and cooperate to provide the services. Thus, according to one embodiment, the service network may allow for service transactions involving \u201cany-to-any\u201d communication and interaction, thus facilitating a large, flexible variety of robust, real-time transactions on the network.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 6","b":["600","610","620","620","610","610","620","620","620"]},"The network entry point  allows connection with a hub . The hub  may serve as a service network control center or network operator to configure, provision, control and manage access to and services provided by multiple potentially geographically distributed service nodes that provide networked services to clients or subscribers. Advantageously, this allows control and customization of the class and level of service provided over the network by the service control nodes.","Typically, the hub  includes software to control and manage transactions over the service network. According to one embodiment, the hub may assist with providing the network entry point  and access to point-of-service applications by providing software such as Java applets or ActiveX controls. The hub  may also include multi-protocol value-added network switching software to switch between remote service provider nodes and routing software to perform controlled routing electronic transactional documents, components, objects, or data, in a form that may be received and interpreted by computer systems, applications, hardware, and other networked components associated with the service providers. The hub  may also track and store data such as transaction statistics.","The hub  may access a plurality of nodes . As shown, the plurality of nodes include a node  , a node , optionally any desired number of additional nodes , and a node N . The node N  may represent any desired number of nodes. Typically, each node will be associated with at least one service provider. In one case, a service provider may provide its services through a logical plurality of nodes based on access device, service or product offering, other service providers, and for other reasons. By way of example, a service provider may provide one node for web-based access, one node for cellular access, one node for each major service or product line, one node for business partners, one node for employees, and for other reasons. Additionally, multiple service providers may share a common node. For example, the car dealer and the bank may decide to share a common node.","Each node may serve as a gateway, portal, or entry point into a private or enterprise network of the service provider. The node may provide selective access to service related resources of the service provider such as applications, data, hardware, personal, and other resources. The node may act as a service agent and management station for the service provider. It may also provide a channel interface to back-office transaction processing applications.","According to one embodiment, the hub  and the nodes  contain software to control and manage a plurality of distributed service and application software objects or components. The term \u201cobjects\u201d will be used to refer to separable software objects capable of being distributed over a network and operated remotely. The objects may be object-oriented software objects based on object class. They may be objects conforming to standards and models, such as the Component Object Model (COM), Object Linking and Embedding (OLE), ActiveX, Distributed COM (DCOM), System Object Model (SOM), Distributed SOM (DSOM), Common Object Request Broker Architecture (CORBA), Distributed interNet Applications Architecture (DNA), COM+, Java-based components, and others. For purposes of illustration, and without limitation, a COM object may have a \u201cpublished\u201d unvarying interface that exposes its service or business functionalities and the parameters it accepts, and the COM object may be accessed in a distributed computing environment by a COM-compliant service application to use its functionalities to deliver services or transactions to a client. Thus, the hub  and\/or the nodes  may provide \u201ccomponent-oriented middleware\u201d that controls and manages potentially distributed components to create distributed applications and provide the service network. The middleware may include management instructions to use the components to deal with transactions, component packaging, and state management. Typically, the hub  will contain software to intelligently switch to, route to, configure, provision, track, manage, and control the objects or components. Such an architecture may be well suited to a high throughput transactional environment.","According to one embodiment, the node uses an intelligent state management engine such as a Distributed Online Service Information Base (DOLSIB) to store and access transaction management information. DOLSIBs will be described in more detail elsewhere in the specification. The node may use the intelligent state management engine or DOLSIB to automatically create the associations between the clients screen elements and the service objects routed to the service control nodes. Each node may have a separate DOLSIB, according to one embodiment.","According to one embodiment, software for the hubs and nodes may be provided as shrink-wrapped software packages. The context owners and service providers may then obtain these software packages, input business and management objects into the DOLSIB, and create or join service networks.","Context Owners","According to one embodiment, a context owner may provide the hub. The term \u201ccontext owner\u201d will be used to refer to a service provider that provides a service network of other service providers. In one case, the context owner may use the hub and nodes to provide a virtual private network of itself and other service providers that provide an end-to-end value-added service or transaction. In this case, the hub may be located at the context owners web server, web site, or call center and the nodes may be located at the entry point into private enterprise networks of the other service providers. Advantageously, context providers may use the distributed control and management provided by the hub and nodes to provide control and management-added value to their service offerings.","Another type of context provider provides a service network of predetermined service providers associated with a multitude of transactional and service categories, any one of which may be selected and performed on the service network. For example, the context owner may be a dynamic yellow page provider resembling a search engine with the additional advantageous capability of being able to initiate a service transaction based on a search and involve a plurality of additional predetermined service providers in the transaction to add overall value to the transaction. In this way, a user of the dynamic transactional yellow pages may search for car dealers using the dynamic transactional yellow pages (e.g., search engine), locate a predetermined car dealer of the service network, be automatically connected with one of another predetermined banks of the service network, and be connected with a selectable one of another predetermined number of insurance providers of the service network.","Alternatively, the context owner may be another context owner, such as a network service operators (e.g., AT&T, Sprint, MCI), an Internet service provider (e.g., AOL, UUNet, Netcom, PSINet), a portals (e.g., AOL, Yahoo!, CNET, enterprise portals), a virtual malls (e.g., Priceline, Shop@aol, ToysRUs.com), an e-marketplaces (e.g., Commerce One, Ariba), a direct merchant service (e.g., Bank of America, Fidelity, Vanguard, LL Bean, Amazon.com), an ASP (e.g., MGM\/Blockbuster), an Internet brokerage firm (e.g., E*trade, Fidelity Investments), an extranet context owner (e.g., insurance industry, underwriters), an intranet context owner (e.g., a payroll processing center for a Fortune 1000 company connecting multiple departments and banks for timecard input, payroll deductions\/withholding adjustments), a search engine (e.g., Yahoo!), and others.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 7","b":["710","720","730","740","1","760","740","710","1","760","750","1","760","750","720","1","760","1","760","770","780","770","720","710","740","1","760","780","770","740","780"]},"Establishing the links ,  are done under the control and management of the hub . This compares favorably with prior art approaches which provide hyperlinking and which would not be able to achieve centralized control and management of the service experience of the client access device. Advantageously, in this way, the client access devices service experience may be less like a visitor-center-type experience, such as through yellow pages or a search engine, in which the client is informed of a site and sent away to that site with loss of control over, and more like a supermarket-type experience in which control over the service experience of the client has not been lost, and the service control of the client may be managed, controlled, tracked, and otherwise improved.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 8","b":["800","810","815","820","825","840","820","820","830","835","810","840","860"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 9","b":["900","900"]},"The method  commences at block , and then proceeds to block , where a service network is accessed via a network entry point. According to one embodiment, a user connects to a web server (or a call center or cell site) running an exchange component, the user issues a request for a transactional application, the web server hands off the request to the exchange, the exchange activates a graphical user interface (GUI) to present user with a list of Point-of-Service (POSvc) transactional applications, and the user makes a selection from the POSvc application list. POSvc applications are transactional or service applications that are designed to incorporate and take advantage of the capabilities provided by the present invention.","The method  advances from block  to block , where switching to a transactional application is performed. Switching may include value-added network switching to local applications or components or remote applications or components and causing routing to those applications or components. Switching may also include flow control, prioritization of requests, and multiplexing. According to one embodiment, interconnected OSI model application layer software switches may perform the switching.","The method  advances from block  to block , where a route to a node is performed under the control of the hub. Routing may include performing multi-protocol routing to remote components or applications by using Simple Network Management Protocol (SNMP), TransWeb\u2122 Management Protocol (TMP), or others. Traditional security features (e.g., RSA, SET1, SET2), and others are contemplated.","The method  advances from block  to block , where transaction processing is performed. This may include retrieving data from a data repository, such as by using TMP or another protocol.","A determination is made at decision block  whether another node is involved in the service. As stated above, the determination may include querying and receiving a response from the client and\/or receiving an indication that another node is involved based on the prior transaction processing at block  and\/or others. If yes is the determination  then processing loops through blocks - until no is the determination. Routing to the other nodes may be done with control and while keeping the previous nodes involved in the transaction if they still have an interest in the transaction.","If no is the determination  then processing advances from decision block  to block  where transaction results are provided. The method  terminates at block .",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 10","b":["1000","1010","1020","1030","1030","104","1030","1030","1040"]},"Together, the web server , the exchange , and the operator agent  provide a web page , one or more point-of-service (POSvc) applications , VAN switch , and object router . According to one embodiment, the exchange  displays an web page  in the web browser  including the list of POSvc applications  that are accessible to the exchange . A POSvc application is an application that can execute the type of service or transaction that the user may be interested in performing. By way of example, the list of one or more POSvc applications may be displayed in an HyperText Markup Language (HTML) GUI, a Virtual Reality Markup Language (VRML) GUI, a Java GUI, or another GUI.","Depending on the particular implementation, although they are shown as separate entities, the VAN switch  and the router  may be combined to form a router to provide multi-protocol object routing. In one embodiment, this multi-protocol object routing is provided via TransWeb\u2122 Management Protocol (TMP), available from WebXchange Inc. of Scotts Valley Calif., which may incorporate traditional security features (e.g., RSA, SET1, SET2, etc.). Alternatively, routing may be done using Simple Network Management Protocol (SNMP).","One embodiment of the present invention utilizes network accessible virtual information stores to perform routing. In one case, the virtual information stores are distributed on-line service information bases (DOLSIBS). Information entries and attributes in a DOLSIB virtual information store are associated with a networked object or component identity. The networked object identity identifies the information entries and attributes in the DOLSIB as individual networked objects, and each networked object is assigned a network reachable address (e.g., an Internet address). For example, the Internet address may be assigned based on the IP address of the node at which the networked object resides. Routing may be done using the DOLSIB and TMP or another protocol. In one case, TMP and a DOLSIB may be combined with Secure Sockets Layer (SSL), s-HTTP, Java, a component model (e.g., DCOM), the WinSock API, object request broker (ORB), or another object network layer to perform and manage object routing.","The VAN switch  and object router  will be described elsewhere in the specification. Thus, according to one embodiment, the exchange  and an operator agent , described in more detail elsewhere together perform the switching, object routing, application and service management functions according to one embodiment of the present invention.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 11","b":["1100","1","2","3"]},"The network or Internet address for each networked object essentially establishes the networked object as an accessible or \u201cIP-reachable\u201d node on the network or Internet. These network addresses may be used to represent the objects in a DOLSIB. For example, the network address 123.123.123.123.1 may be used to represent object  in the DOLSIB. The DOLSIB may also contain a along with a name, a syntax, and an encoding. The name is an administratively assigned object ID specifying an object type. The object type together with the object instance serves to uniquely identify a specific instantiation of the object. For example, if an object is information about models of cars, then one instance of that object would provide a user with information about a specific model of the car while another instance would provide information about a different model of the car. The syntax of an object type defines the abstract data structure corresponding to that object type. Encoding of objects defines how the object is represented by the object type syntax while being transmitted over the network. Then, TMP or another protocol may be used to uniquely identify and access these objects from the web server node, based on the network addresses recorded in the DOLSIB.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 12","b":["1200","1205","1210","1206","1206","1246","1206","1205","1210","1205","1210","1215","1225","1235"]},"To perform a service transaction that may be requested or indicated in a communication with the client access device , the hub  controllably connects with service provider node . In this example, service provider node  is a supplier selling products over the service network. The client access device  indicates to purchase one model r100 at a cost of $100. The supplier  connects and communicates with data source  to obtain inventory data and update the inventory to reflect the purchase of one model R100 unit at a cost of $100. Arrow  is partly filled to indicate that the requested model  is in inventory and was purchased. Status window  indicates the purchase. A verified degree of completion of the service transaction is indicated by the difference in shading between arrows  and .","The hub  determines that the purchasing portion of the service transaction has been verified completed and controllably connects with service provider node , which in this example is a Visa node to bill payment to a Visa credit card account indicated by the client access device . The Visa node  communicates with data source  based on, for example, a credit card number, to perform billing processing. Status window  shows the billing. Completion of the billing portion of the service transaction is indicated by the difference in shading between arrows  and .","The hub  determines that the billing portion of the service transaction has been verified completed and controllably connects with service provider node , which in this example is a FedEx node  to arrange delivery of the model R100. The FedEx node  interacts with a data source , based on delivery preference data supplied by the client access device , to arrange delivery. Completion of the delivery portion of the service transaction is indicated by arrow , which is entirely filled.","The hub  determines that the purchasing, billing, and delivery portions of the service transaction are verified completed, as indicated in the status window , and provides confirmation of the service transaction to the client access device , as indicated in status window . Advantageously, the transactional control provided by the hub  has allowed a multi-service provider value-added service to be provided to the client access device , including verification of multiple transactional portions of the service. According to one embodiment, the hub  is financially compensated by the nodes , , and  based on a visit or hop to the node, a purchase, a purchase amount, and according to other desired criteria.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 13","b":["1301","1302","1303","1304","1305","1306","1307","1307","1301","1301","1307"]},"Physical layer  may transmit unstructured bits across a link. Data link layer may transmit chunks across the link and may perform check-summing to detect data corruption, orderly coordination of the use of shared media, and addressing when multiple systems are reachable. Network bridges may operate within data link layer . Network layer  may enables any pair of systems in the network to communicate with each other. Network layer  may contain hardware units such as routers to handle routing, packet fragmentation, and reassembly of packets. Transport layer  may establish a reliable communication stream between a pair of systems and deal with errors such as lost packets, duplicate packets, packet reordering and fragmentation. Session layer  may offer services above the simple communication stream provided by transport layer . These services may include dialog control and chaining. Presentation layer  may provide a means by which OSI compliant applications can agree on representations for data.","The application layer  typically defines the language and syntax that applications use to communicate. Application layer  may provide a means for application programs to access the OSI environment. By way of example, an application on one computer system in a network uses application-layer prescribed commands to access or request data from an application located on another computer system of the network. Often the application layer  is responsible for functions such as file management (e.g., opening, closing, reading and writing files), transferring files, transferring messages (e.g., email messages), executing jobs remotely, obtaining directory information about network computer systems, and other distributed computing applications. Application layer  may include services such as file transfer, access and management services (FTAM), electronic mail and virtual terminal (VT) services.","According to one embodiment, the invention uses software conforming to the application layer  of the OSI model to provide the service network by providing communication, control, and management of distributed software. For example, according to one embodiment, the routing switch is implemented to function within the application layer  of the OSI model. Application layer routing may create an open channel for the management and the selective flow of data from remote databases on a network.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 14","b":["1400","1400","1400","1410","1420","1430","1440"]},"Boundary service  may provide the interface between VAN switch  and a facilities network and client access devices. Boundary service  may also provide an interface to an on-line service provider. Using these interfaces, a client may use a client access device to connect to a local application, namely one accessible via a local VAN switch, or be routed or \u201cswitched\u201d to an application accessible via a remote VAN switch.","Switching service  may perform a number of tasks including routing user connections to remote VAN switches, flow control, prioritization of requests, and multiplexing. Switching service  may also facilitate open systems' connectivity with both the Internet (a public switched network) and private networks including back office networks, such as banking networks. Often, the switching service represents a core of the VAN switch . According to one embodiment, the switching service  is implemented as an OSI application layer switch.","Management service  may contain tools that are used, such as by end users, to manage network resources including VAN switches like VAN switch . For example, the tools may include Information Management Services (IMS) and application Network Management Services (NMS). Management service  may also provide Operations, Administration, Maintenance & Provisioning (OAM&P) functions. For example, the functions may include security management, fault management, configuration management, performance management and billing management for the service network. Network management, such as provided by management service , is another significant aspect of certain embodiments of the invention and may be used to add quality and value to the services provided.","Application service  may contain application programs that provide customer services. For example, application service  may include POSvc applications such as those discussed in  and elsewhere. Other exemplary application programs that may be provided by application service  include multi-media messaging, archival\/retrieval management, directory services, data staging, conferencing, financial services, home banking, risk management and a variety of other vertical services. The applications service  may contain applications having design features that allow them to conform to standards related to performance, reliability, maintenance and ability to handle expected traffic volume. Depending on the type of service, the characteristics of the network elements may differ. Typically, application service  will provide a number of functions including communications services for both management and end users of the network and control for the user over the user's environment.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 15","b":["1500","1500","1520","1560","1510","1520","1560","1550","1510","1510","1550","1520","1510"]},"An object router may be used to controllably route to networked entities such as computer systems, applications, objects, and data. The object router may allow for the transparent completion of service transactions involving distributed applications and software components without the programmer needing to know whether networked entities are local or remote. The router may be able to automatically determine this, such as based on looking up a network address of a relevant entity and using correct operations compatible with the type of entity. An object router may include a library to provide support for the application programming interfaces (APIs) to remotely access an object, its data, and its functions in an object network. This interface may provide a skeleton class to contain the functionality of the object and corresponding or counterpart stub class to allow remote access of the object. A stub and a skeleton may be functionally coupled together. For example, a stub may be installed on a client computer system and a corresponding skeleton installed on a server computer system and in combination they interoperate to allow a remote procedure or method call. In one case the stub may declare itself and its parameters. Arguments to the function may be specified in a meta file and a type of the argument may be specified by value or by reference. The object router may allow for new data types to be constructed, using the basic data types of the programming language used in the particular embodiment: int and String. Single simple inheritance classes may be constructed and then used as data members or pointer within another meta class. Typically, the router will be implemented in a programming environment and language that is object-oriented and allows for distributed computing, such as C++, Java, and a component model. However other embodiments are also contemplated.","Before continuing with the detailed explanation of the present invention and various exemplary embodiments of the present invention, it may be helpful to briefly explain some terms, without limitation, that will be used in the discussion below. These explanations are provided to facilitate understanding of the following text, rather than to limit the invention. The term \u201cabstract class\u201d will be used to refer to a C++ class that does not have all virtual functions defined. The term \u201cclass\u201d will be used to refer to typically a C++\/Java data structure definition that defines both the data and the functions. The term \u201cinterface\u201d is a Java term similar to the C++ abstract class. A \u201cmeta-compiler\u201d translates a higher-level \u201cmeta-language\u201d (e.g., WebX, available from WebXchange) from the \u201cmeta-file\u201d into a lower-level language (e.g., C++) output file for and before giving to a traditional compiler. The software may be compiled under a version of Windows NT using a Microsoft Visual C++ version compiler based on the wx.lib and the Rogue Wave libraries, available from Rogue Wave of XXX, XXX, Tools++, Net++ and Threads++. Other software platforms are contemplated. The term \u201cobject\u201d may be used to refer to a C++\/Java data structure instance that is defined by a class.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 16","b":["1600","1610","1620","1630","1640","1650","1660","1670"]},"A meta compiler  may be provided for use with the layers  and  The meta compiler  will be used broadly to refer to an automated mechanism to code features based on structured typically concise definitions. For example, the meta compiler  may take a definition file and substantially automatically create the object identity, data serialization, data marshaling, string execution, abstract base class, and the stub\/skeleton multiple inheritance. Advantageously, such automated coding may improve the efficiency of the implementation and may reduce errors. Of course, coding may be performed manually without such a meta compiler, although such implementations are expected to be more laborious, expensive, and prone to error.","The meta compiler  may use a Tool Command Language (TCL) program or a similar program or encoding. TCL is an interpreted script language that may be used to develop applications such as GUIs, prototypes, CGI scripts, and others. TCL may provide an interface into C, C++, and other compiled applications. The application is compiled with TCL functions, which provide a bi-directional path between TCL scripts and the executable programs. TCL provides a way to \u201cglue\u201d program modules together. TCL may also come as TCL\/TookKit (TCL\/Tk), which provides a GUI toolkit to create GUIs. Scheme, Perl, and Python have incorporated elements of TCL\/Tk. According to one embodiment, the meta compiler  is the rme2c meta compiler discussed elsewhere in the present application.","In one embodiment, the meta compiler is run by the command rme2c<classname>, where the classname is the base class (e.g., Account). The Account.rme file as well as other parent definitions should desirably be in the same directory. The object router TCL files are found under Wx\/Util. These files parse the description file and produce the six C++ output files. Often, the syntax of the meta compiler should be adhered to closely. Blank lines and lines beginning with a pound sign \u201c#\u201d are considered comments. The following words may be reserved:\n\n","With reference to , and portions of FIGS.  and -, an exemplary object router will be described that provides distributed transactional services based on controlled connection and communication between distributed software objects. During this discussion, details are given, including the model represented by FIGS.  and - and particular objects, methods, syntax, convention, and other particulars that are useful to illustrate operation of certain embodiments but which are not needed. Those having an ordinary level of skill in the art will appreciate that there are alternative implementations that take entirely different modeling approaches compared with the models shown in FIGS.  and -. They will also appreciate that the syntax is dependent upon the elected programming convention and may change for non-C++, non-Java, and non-object oriented environments. Accordingly, while the particulars are useful for illustration, they should be viewed in that illustrative sense rather than in a limiting sense.","A detailed discussion of an exemplary object router is provided without limitation to further illustrate operation of an object router according to certain embodiments. In the following discussion, the reader is respectfully directed to FIGS.  and - and associated text for further illustration and discussion of the characteristics and structure of the classes and objects used by the exemplary object router.","The object router typically includes functionality to determine an object identity for a networked object in order to communicate with the object. The identity may be determined from a library that stores identities for many such networked objects. In one case, the object identity may be determined by using a WxObject in a wx.lib library. In such a case each new class \u201cXYZ\u201d may add a XYZ_ClassID, XYZStub_ClassID and XYZSkel_ClassID to the Wx\/ClassID.h file. Based on the object identity, the object router may transparently determine whether the object is local (e.g., a skeleton on a server) or remote (e.g., a stub on a client or an object on another server). The object router may also determine the argument parameters and object serialization.","The object router typically uses some protocol to communicate with remote computer systems and software. Communicating may include transferring objects, parameters, and data. Often a network line protocol\/TCP will be used. The WxRemotePDU shown in  includes a plurality of parameters and methods to provide a protocol data unit (PDU) that conforms to the protocol. The objects, parameters and data may be serialized onto a network stream that is sent to the remote computer system. The persistence nature of RWCOLLECTABLE shown in  may provide the data serialization to transmit the data. Often, at least a portion of the code to perform these functions will be generated by a meta compiler based on base classes.","The object router may also perform data marshalling. Data marshalling may include checking parameters that are passed as arguments to methods to determine if any parameters are missing or wrong, and may include throwing an exception or otherwise signaling if a parameter is missing or wrong. This may be provided by a meta compiler in the stub and skeleton.","The object router may block a thread during network transmission and reception by using a different thread to perform the actual network activity and control the calling thread status. Advantageously, this may allow a remote object to be called similarly to a local object. In one case, a Rogue Wave RWCondition class in the WxRemotePDU class may perform this function.","The object router may use string execution to allow an ASCII string representation to call a method. This may provide a useful, simple, and unique means of calling a class method that may also be used directly by a programmer. A meta compiler in the base class may create this data marshalling.","The object router may also perform reference counting on local and\/or remote objects. This may avoid time consuming malloc's, free's, and confusing details of which function is responsible for deleting which object. The object router may use such reference counting to deal with WxRemoteObject types. The programmer may also use reference counting. Typically, a WxRemoteObject child should not be destroyed using delete, and an exception may be thrown if this is tried, but rather the WxRemoteObject child should be destroyed by using the member function ol_unreference( ). Also, if a user stores a copy of a WxRemoteObject child, the method ol_reference( ) should be called to prevent the object from being destroyed by some other user or method. WxRemoteObjectInt may provide this interface.","The object router may use an abstract base class and multiple inheritance according to certain embodiments. Advantageously, the abstract base class may allow interaction with a local or remote object without knowing its location. This base class may be the parent of both the stub and the skeleton, which may be inherited from the abstract base class and from their respective object layer classes. This allows them to inherit the functionality of the base class as well as the object layer routines. Often, the inheritance will be provided by the meta compiler.","The object router may also include at least an interface to a user-defined data model to provide a basis of the object layer to the next level up the software layers. The user-defined data model may include a set of user-created classes built around and on top of the object router APIs. This foundation appears local to the programmers using the object layer even though it may be remote.",{"@attributes":{"id":"p-0127","num":"0137"},"figref":"FIG. 17","b":["1700","1700"]},"The object model  comprises base classes WxObject and WxRemoteObjectInt from which other classes and objects derive. The derived components are either object layer objects  (e.g., Object, WxRemoteObject, WxReference, WxRemoteSkel, WxRemoteStub) or data model objects  (e.g., WxName, WxNameStub, and WxNameSkel).","A programmer that is creating transactional objects is likely to work closely with the base class WxRemoteObject and\/or WxRemoteObjectInt. WxRemoteObjectInt is an abstract base class that may contain all of the member methods and data access components as well as support functions to provide a uniform interface to behave as a WxRemoteObject. For example, this may include (a) WxStringExecution to execute any method using a simple ASCII string and object type data, (b) WxLock to provide a thread synchronization mechanism, (c) WxFlags to provide a simple and consistent Boolean flag variable, (d) reference counts to allow sharing and manage ownership concerns, (e) conversions between OBJECT, WxRemoteReference, WxRemoteStub and WxRemoteSkel types, and others as desired. As shown, both the object layer objects  and the data model objects  inherit an interface specification WxRemoteObjectInt.","WxName is a new data model object  that contains one data member \u201cname\u201d which is a string. The meta compiler may automatically create two access components for this data member, namely Get_Name and Set_Name. The meta compiler may also create the server and client versions of this data object.","Typically the skeleton is used to represent the server side of the object router. For example, WxNameSkel is a class that is derived off the abstract base class WxName and WxRemoteSkel. Often the programmer defines or customizes the methods, except for the data access components, for the skeleton, since this is the actual object embodying the business or transactional methods. Real instances of the class may be created with the suffix \u201cskel\u201d.","The stub represents the client or remote side of an object for the object router. As with the skeleton, the stub too is derived off the abstract base class WxName and an object layer class WxRemoteStub. Typically, the meta compiler will generate all methods for the stub.","Without limitation, the use of certain conventions and codes (e.g., prefixes, suffixes, etc.) may be used to improve certain implementations. A partial list of exemplary conventions and codes is provided below. Those having an ordinary level of skill in the art will appreciate that the exemplary conventions and codes are not needed to implement the invention. They will also appreciate that numerous other conventions and codes may be conceived to improve certain other aspects.\n\n",{"@attributes":{"id":"p-0134","num":"0166"},"figref":"FIG. 18","b":["1800","1800","1805","1810","1810","1815","1805","1815","1816","1816"]},"In response to the selection, the web server  starts an applet  that runs in the web browser . The applet  registers with the object router. The object router may determine the identification and network location of one or more objects associated with the transaction. The object router may assist with creating stub  on a computer system , which may be the computer system running the browser  or another computer system. According to one embodiment, the computer system  may be a hub.","Via the stub  a connection is made to a server  containing a skeleton object  associated with the bank transaction. Thus, once the stub is received, the user can then look up bank accounts as if local to the skeleton on the server side. The skeleton object  presents transactional data  to the user. Often, the transactional data  will include a field for data entry, such as the ID and Pin fields shown. The user may enter data into these data fields and return the entries to the skeleton  via the stub . Based on these entries the skeleton  may perform transaction processing. Transaction processing may include connecting with other local objects such as a user-specific Bob's account object  and non-user specific Joe's account object . In this case, user-specific data may be obtained from Bob's account object  and returned to the browser  via the skeleton  and stub  as transaction data  including deposit interaction field  and withdraw field .","A stub object  associated with the transaction data  may be established at the computer system  to perform transactions associated with the interactions  and . The user may then enter an amount into deposit interaction , which then activates a deposit of said amount into Bob's account object  via object . Of course, in other implementations this could be handled differently. For example, such operations could be performed by a stub , which also includes the functionality described for stub .","Advantageously, the user was able to receive controlled banking transaction processing. Other embodiments are contemplated, including more complicated and interactive single service provider transactions (e.g., in which more arrows are bi-directional) and involving multiple service providers. The later case of multiple service providers will be shown and described for . However, first it may be useful to provide further implementation details that may be used to implement the banking transaction . Other details and corresponding details for the other embodiments discussed herein will be apparent to those having an ordinary level of skill in the art based on the present disclosure.","A programmer may begin by creating a definition file describing the WxBank and WxBankAcount objects. Typically this will be written in a simple language, such as TCL, which may be parsed by the rme2v meta compiler. For example, the WxBankAccount file may be written as:\n\n","This class may contain methods and data. In this case, the data may be an integer describing the amount of money the account holds. Deposit and withdraw methods may increment or decrement the integer amount as follows:",{"@attributes":{"id":"p-0141","num":"0188"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void WxBankAccountSkel::deposit(int x) {"]},{"entry":[{},"\u2003WriteLockGuard lock(wxlock(\u2009));"]},{"entry":[{},"_balance += x;"]},{"entry":[{},"}"]},{"entry":[{},"void WxBankAccountSkel::withdraw(int x) {"]},{"entry":[{},"\u2003WriteLockGuard lock(wxlock(\u2009));"]},{"entry":[{},"\u2003_balance \u2212= x;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notice that the programmer should provide thread locking. For example, by adding the statement, WriteLockGuard lock(wxlock( )) to each desired method. Note that when the method is locked, no other locked methods that include any object-layer defined data access components may be called. The above file (WxBankAccountSkel.cc) defines the skeleton methods. The stub methods are typically defined by the rme2c meta compiler.","The Bank.rme file may be represented by the following code:\n\n","This file, when processed by rme2c will create six files: WxBank.h, WxBank.cpp, WxBankStub.h WxBankStub.cpp, WxBankSkel.h and WxBankSkel.cpp. These six files describe the operation and remote execution of the WxBank object. Since there is no data, no data access components will be generated. The method \u201cgetaccount\u201d is defined as follows: method const WxBankAccount* getaccount {int id} {mint pin}. The keyword \u201cconst\u201d identifies that this method will not change the object data. The next keyword is the returned object \u201cWxBankAccount*\u201d. The asterisk indicates that the object will be passed by reference. The \u201cgetaccount\u201d is the actual method name. Two parameters of the method are provided next in braces. Each parameter is provided in braces with a data type followed by a parameter name. In this case there are two integer parameters with name id and pin.","The programmer may describe any additional functionality for the operation of this object and the definitions of the skeleton methods in the WxBankSkel.cc file. The WxBankSkel.cc file may contain:\n\n","This is a simple example in which getAccount returns Bob's account. Note that the actual method name is \u201cgetAccount_ref\u201d with \u201cref\u201d appended since this method will return an object by reference. Also, notice that before simply returning the global variable Bob, the reference count is incremented since getaccount is passing a new reference.","Typically the skeletons are created in the server side. Then the skeletons may be registered in the name server, as indicated by the following exemplary code:",{"@attributes":{"id":"p-0148","num":"0217"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"extern WxBankAccount* bob; \/\/ global used by Bank::getAccount()"},{"entry":"void main(int argc, char* argv) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"RWWinSockInfo winsock; \/\/ initialize the socket library"]},{"entry":[{},"WxRemoteConnectionServer s; \/\/ create the socket server"]},{"entry":[{},"WxBank bofa; \/\/ create a bank"]},{"entry":[{},"WxBankAccount joe; \/\/ create joe's account"]},{"entry":[{},"joe.set_balance(0); \/\/ with a $0 balance"]},{"entry":[{},"bob = new WxBankAccount(\u2009); \/\/ create bob's account"]},{"entry":[{},"bob->set_balance(10000); \/\/ with a $100 balance"]},{"entry":[{},"bob->deposit(20000); \/\/ then, deposit $200."]},{"entry":[{},"\/\/ register bofa with a global name --- after everything else is done!"]},{"entry":[{},"bofa.set_ol_name(new String(\u201cBofA\u201d));"]},{"entry":[{},"\/\/ start the connection server receiver"]},{"entry":[{},"RWThread server ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"rwMakeThreadFunction("]},{"entry":[{},"\u2009s,&WxRemoteConnectionServer::run,(RWBarrier*)0);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"server.start(\u2009);"]},{"entry":[{},"server.join(\u2009);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The client may have the following exemplary code:",{"@attributes":{"id":"p-0150","num":"0219"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ create a global function which is called from a RogueWave thread."},{"entry":"void async(\u2009) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WxRemoteConnectionMonitor monitor;"]},{"entry":[{},"WxRemoteClient* local = monitor.client(\u201clocalhost\u201d);"]},{"entry":[{},"WxBank* bofa = LOOKUP(WxBank,\u201cBofA\u201d,local);"]},{"entry":[{},"WxBankAccount* bob = bofa->getAccount(10,20); \/\/ arguments are"]},{"entry":[{},"dummy"]},{"entry":[{},"cout << \u201cbob's account balance is (should be 30000):\u201d"]},{"entry":[{},"\u2009<< bob->get_balance(\u2009) << endl;"]},{"entry":[{},"bob->withdraw(5000); \/\/ withdraw $50."]},{"entry":[{},"cout << \u201cbob's new balance is \u201d<<bob->get_balance(\u2009) << endl;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"void main(int argc, char* argv) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WxRemoteObject::initializeStringExecutionTables(\u2009);"]},{"entry":[{},"WxBankSkel::wxClassHierarchy(\u2009);"]},{"entry":[{},"WxBankStub::wxClassHierarchy(\u2009);"]},{"entry":[{},"WxBankAccountSkel::wxClassHierarchy(\u2009);"]},{"entry":[{},"WxBankAccountStub::wxClassHierarchy(\u2009);"]},{"entry":[{},"RWWinSockInfo winsock;"]},{"entry":[{},"\/\/ start the RogueWave thread - and wait until it exits"]},{"entry":[{},"RWThread thread = rwMakeThreadFunction(async);"]},{"entry":[{},"thread.start(\u2009);"]},{"entry":[{},"thread.join(\u2009);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Advantageously, in this way the programmer does not have to know, nor care, whether the object \u201cbob\u201d is local or remote.",{"@attributes":{"id":"p-0152","num":"0221"},"figref":"FIG. 19","b":["1900","1902","1904"]},"The hub  includes a greeter , which may be software or a dedicated server. In this case, the greeter  contains a web page  containing HTML code and an applet . The web page  presents a window  in the browser client  including text  and a selection mechanism  to indicate a particular transaction (e.g., in this case to purchase product ).","In response to a selection of the mechanism  the applet  starts running in the client  to present a transaction window  and a VAN switch (not shown) may switch to a particular transactional application associated with the mechanism . This may include registering with an object router . The router  may then route to a first node  including a supplier object  and a product object  which may then return window  including a cost $100 for product  and payment options including a mechanism  to allow payment from a particular bank's bank account.","In response to selection of the mechanism  the router  routes to a second node  including a bank object  associated with the bank. The bank object  returns a window  including an ID entry mechanism  and a Personal Identification Number (PIN) entry mechanism .","In response to submission of a corresponding ID and PIN the object router  routes to the bank object  and an account object  corresponding to the ID and PIN. The account object  returns a window  including account corresponding to the client of the ID and PIN including a balance of $4000 and an electronic payment option mechanism .","An account stub  may also be activated or transferred to the hub  to correspond and interface to functions associated with the account object . In response to selection of the payment option mechanism  the account stub , the account object  and the supplier object  may interact and process so that the purchase price of $100 for the product  is paid from an account of the client to an account of the supplier.","Numerous variations and alternative embodiments are also contemplated for a multi-service provider transaction. For example, several single-directional arrows have been shown for purposes of clarity, however any or all of these arrows could represent bi-directional communication. Additionally, certain objects (e.g., supplier object  and product object ) could be combined, or further subdivided into additional objects. Accordingly, the example is to be viewed in an illustrative rather than a restrictive sense.",{"@attributes":{"id":"p-0159","num":"0228"},"figref":"FIG. 20","b":["2000","2005","2010","2015","2050","2055","2060","2065"]},"The first computer system  may have a WXREMOTECLIENT object  to request access into the service network. The second computer system  may have a WxRemoteConnectionServer object to receive the request and serve as the entry point into the service network. This is an object of the main class of the server side of the object router. The WxRemoteConnectionServer then connects the WxRemoteClient with the WxRemoteServer. Then, the WxRemoteClient and WxRemoteServer may communicate by a TCP socket . By way of analogy, this is similar to a person (WxRemoteClient) dialing up a telephone operator (WxRemoteConnectionServer) and the operator directing the call to the correct person (WxRemoteServer).",{"@attributes":{"id":"p-0161","num":"0230"},"figref":["FIGS. 21 and 22","FIGS. 21 and 22"],"b":"2100"},"WXREMOTEOBJECTINT","This is an interface typically included in all remote objects. The interface usually contains several abstract class definitions, including WxStringExecutionInt, WxLock and WxFlags. It may also define methods that are used by all or multiple remote objects.","RWBoolean ol_isValid( ) const","This may be tested if the programmer does not know if this object is local or if the connection is established. This will return TRUE if the object is local or it has a connection to the remote object.","unsigned get_ol_referenceCnt( ) const","This returns the number of pointers outstanding for this object. Typically, if garbage collection is enabled, this object will automatically be destroyed when the referenceCnt reaches zero.","WxReferenceId get_ol_referenceID( ) const","This is the remote referenceId for this object. This WxReferenceId uniquely tags an object instance on the server for the established connection. This is not a well-known name in the sense that it is not guaranteed to be the same with a difference connection.\n\nunsigned ol_reference( ) const\n\nThis increments the number of references outstanding. Typically this will be performed whenever a new copy of the pointer is stored.\n\nvoid ol_unreference( ) const\n\nThis decrements the reference count and should be called instead of delete.\n\nObject* ol_Object( ) const\n\nThis type casts this instance to an RWCollectable pointer.\n\nWxRemoteStub* ol_Stub( ) const\n\nThis will return a stub for this object. If the object is local it will create a stub, otherwise if this is already a stub it will increment the reference count.\n\nWxRemoteSkel* ol_Skel( ) const\n\nThis will return a skeleton for this object. If this is a skeleton it simply increments the reference count. If this is a stub it will create a new skeleton, copy the data, and return it.\n\nWxRemoteReference* ol_remoteReference( ) const\n\nThis will create a WxRemoteReference object that is used for serialization.\n\nWxRemoteObject\n\nThis is the actual first level implementation of the above interface and adds String Execution to the above functions. Typically all of the router objects are derived from this object.\n\nWxRemoteReference\n\nThis is a type of network \u201cpointer\u201d which indicates where the actual skeleton object resides. It contains the following data: RWInetHost host; int port; RWClassID classID; and WxReferenceId referenceId. The port and host uniquely specify the socket for the WxRemoteConnectionServer. The referenceId uniquely specifies which object on the WxRemoteConnectionServer is pointed to. The classID is used to construct a local stub object.\n\nWxRemoteStub\n\nAll stubs are derived from this object and the abstract base object for the class. This object provides some interfaces to the object router library that is used by the meta compiler.\n\nWxRemotePDU*_ol_execute(WxRemotePDU* pdu) const\n\nThis will block until ol execution is finished. It will take the pre-formatted PDU.\n\nWxMarshalId_ol_send(WxRemotePDU* pdu) const\n\nThis is a non-blocking remote execution, which returns a WxMarshalId that may be used to receive the result.\n\nWxRemotePDU*_ol_peek(WxMarshalId id) const\n\nThis checks if the PDU id is returned from execution.\n\nWxRemotePDU*_ol_receive(WxMarshalId id) const\n\nThis blocks until the PDU is returned.\n\nWxRemoteClient*_ol_connect( ) const\n\nThis ensures the connection to the other side is established.\n\nWxRemoteSkel\n\nAll skeletons may be derived off this object and the abstract base for the class. This object provides the interface ol_methodPDU( ) for the meta compiler to the object router.\n\nWxRemotePDU\n\nThis is the actual data packet sent across the network. The data in this are:\n\nWxMarshalId id\n\nThis is the PDU packet number, typically a monotonically increasing integer to uniquely identify the packet.\n\nUnsigned Flags\n\nThese are option flags to modify the execution of this protocol. The flags may include:\n\nSyn\u2014this will perform synchronous execution of the packet at the server (no threads).\n\nNoMarshal\u2014this is an unconfirmed execution similar to UDP.\n\nLog\u2014this will log this request\n\nResponse\u2014this indicates that the PDU is a response\n\nVal\u2014this indicates that the result should be a value rather than a reference.\n\nUnsigned Type\n\nThis is one of several known protocol operations:\n\nDisconnect\u2014close the connection between WxRemoteClient and WxRemoteServer\n\nError\u2014an error occurred in processing the request\n\nResult\u2014a packet containing the result of a request\n\nLookup\u2014a request to find a WxRemoteReference based on a well-known name in the WxRemoteNameServer\n\nPing\u2014a request for the server to send a Pong back.\n\nPong\u2014a response from the server to the client to a Ping\n\nMethod\u2014a request to execute the command on the server\n\nUnreference\u2014a request to decrement a reference count.\n\nReference\u2014a request to increment a reference count.\n\nRWCString cmd\n\nThis is an ASCII string command to execute on the remote server. This is the \u201cname\u201d in a Name-Value pair.\n\nWxReferenceId referenceId\n\nThis is the object WxReferenceId on the server to uniquely identify the object of this PDU.\n\nVector* data\n\nThis is the data for a method execution. This is the \u201cvalue\u201d in a Name-Value pair.\n\nWxRemoteConnectionServer\n\nThis is the main class on the server side of the object router that may serve as an entry point into the system for a WxRemoteClient requesting access. It may connect the client with the correct objects to perform the transaction.\n\nWxRemoteConnectionMonitor\n\nThis is the main class on the client side of the object router that may serve as an entry point into the system for a connection and to create a WxRemoteClient for a particular destination. By way of analogy, this is similar to a phone operator who directs outbound calls to the correct person. That person, in this analogy, is the WxRemoteConnectionServer.\n\nWxRemoteServer\n\nThis is a component on the server side of the client-server communication channel to process each inbound request. The WxRemoteServer will spawn a new thread for each WxRemotePDU method packet. There is one WxRemoteServer for a WxRemoteClient.\n\nWxRemoteClient\n\nThis is a component on the client side of the client-server communication channel to send each outbound request and rendezvous with the inbound response. There is one WxRemoteClient for a WxRemoteServer.\n\nWxRemoteError\n\nThis is the class that is thrown by both the client and server side when an error is detected. These may be fatal and non-recoverable.\n\nWxRemoteException\n\nThis is a class that is thrown by both the client and server side when an exception is detected. These may not be fatal and the programmer may provide recovery code, as desired.\n",{"@attributes":{"id":"p-0164","num":"0233"},"figref":"FIG. 23"},"Distributed Online Service Information Bases","Certain embodiments of the present invention may use a virtual information store suitable for a network. Without limitation, a specific type of virtual information store, referred to as a Dynamic Distributed Online Service Information Base (dynamic DOLSIB), will be discussed in greater detail. Other virtual information stores are contemplated.","The object router may use the dynamic DOLSIB to perform routing. For example, the object router may access the dynamic DOLSIB to obtain information about distributed software objects that has been recorded in the DOLSIB. Typically, the enterprise will be customized for each merchant. The following sections cover an overview of the architecture for the DOLSIB and a uniform interface that allows the service provider to provide a customized interface for the business objects using a simple Extended Finite State Machine (EFSM) or DOLSIB language. A library is also described that provides the core parser and interpreter for the DOLSIB. This library may also serve as the base class for business and management objects that will interface with the enterprise interface.","Before continuing with the detailed explanation of the present invention and various exemplary embodiments of the present invention, it may be helpful to briefly explain some terms, without limitation, that will be used in the discussion below. These explanations are provided to facilitate understanding of the following text, rather than to limit the invention. The term \u201cstate\u201d will be used to refer to the set of values describing the current position of the machine if it has memory. The term \u201ctransition\u201d will be used to refer to the action and state change performed by the machine after receiving an event. The term \u201cevent\u201d will be used to refer to the inbound trigger that causes the machine to perform some transition. The term \u201caction\u201d will be used to refer to the output of the machine as a result of a transition. The term \u201cdiagram\u201d will be used to refer to a complete finite state machine description containing states and transitions.","The architecture of a business object may at least conceptually comprise four parts, including: (1) the Extended Finite State Machine (EFSM) DOLSIB in the CoreBusinessObject or Management Object (C++), (2) the object router interface for the business or management object to the DOLSIB. (C++), (3) the enterprise interface protocol (specification), and (4) the DOLSIB instructions for the business or management object (EISM). The first part (DOLSIB and CoreBusinessObject or management object) may be built only once and may be part of the object router library. The second part may be built as a common business object and should be generic enough to be configurable for different merchants. The third part is a specification that may be written by the merchant for his own enterprise interface. The fourth part may be configurable during runtime for different business or management objects.","The following sections further discuss the DOLSIB, the language and grammar of the DOLSIB, and the CoreBusinessObject or management object. Specific examples, in this case banking examples, illustrate different service provider enterprise interfaces.",{"@attributes":{"id":"p-0170","num":"0239"},"figref":"FIG. 24","b":["2400","2400","1","2","1","2","1","2","2400","2400"]},"Typically a FSM has a finite set of states. An extended FSM does not have this limitation and may be used to provide a dynamic DOLSIB. Here the states are not finite, per se; there exists a number of finite state \u201cblocks\u201d on the diagram, but there are also global variables that may store values that take on an infinite number of possibilities. This adds another dimension to the FSM and makes the whole system have an infinite number of \u201cstates\u201d.",{"@attributes":{"id":"p-0172","num":"0241"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0173","num":"0242"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"state Idle;"]},{"entry":[{},"event count;"]},{"entry":[{},"var value=0;"]},{"entry":[{},"var str=\u201c\u201d;"]},{"entry":[{},"diagram Counter;"]},{"entry":[{},"Counter (Idle) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Idle : count ? value++ -> Idle;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"According to one embodiment, the Enterprise Interface State Machine (EISM) DOLSIB language may be a C-style DOLSIB EFSM language similar to ISO's Estelle. DOLSIB EISM is based on C style conventions, while Estelle is a Pascal language extension. The ISO Estelle language is defined as a superset of the Pascal language and fits nicely with the language. The DOLSIB EISM language is similar in that it conforms to the syntax of C. The DOLSIB EISM language may provide for more than one state machine diagram (and thus, more than one state machine) to be described and operated by the same script. The state machine may be interpreted allowing for bytecode compilation into a stack machine opcode. The stack-based machine allows for a simple implementation and compilation of the parsed state machines. This also allows for other languages in the future. For example, a language other than C may be interfaced. The programming language includes a simple ASCII English language equivalent of the C-style convention.",{"@attributes":{"id":"p-0175","num":"0244"},"figref":"FIG. 26","b":["2600","2610","2620","2620","2610","2630","2640","2630","2650","2640","2660","2670"]},"The parser  may take the input ASCII , parse it for syntax and syntactical errors, and then create a stack machine instruction set  for the resulting state machine . The conversion of the state machine diagram into a stack machine saves time for the run time interpreter and does the preprocessing of the symbol table.","The interpreter  may be a simple stack machine that receives input events and sends out actions. The stack machine  contains a very limited set of instructions to perform the basic arithmetic and conditional chores at run time.","The dump program  is a debugging tool. The program  may prints out the symbol table and the instructions for each stack op code.","Symbols may be used. The symbols may have names that include an alphanumeric string ([A-Za-z][A-Za-z]*) and the name typically should not that match that of a keyword. Depending on the implementation the names may be case sensitive. Symbols may be declared before they are used and before the first diagram body. Symbols of the same type may be declared within the same command. Symbols may be scalar or vector and the length of a vector may be declared with the symbol type. For example, valid declarations may be: (a) state xyz[4]; (b) event test; (c) var x=0,y=1,z=4; (d) var a=\u201capple\u201d,b=\u201cbanana\u201d. There may be different types of symbols. For example, there may be the following five types: diagram, action, event, state, var. Symbols may have a value when evaluated and have a particular function used as an input to the DOLSIB EISM. Table 1 shows evaluations based on type of symbol.",{"@attributes":{"id":"p-0180","num":"0249"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Symbol Type","Evaluation"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"diagram","current state id"]},{"entry":[{},"action","value of the action; default is zero"]},{"entry":[{},"event","value of the event if current event; zero otherwise"]},{"entry":[{},"state","non-zero if this is the current state."]},{"entry":[{},"var","an integer or string variable"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0181","num":"0250"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Symbol Type","Assignment Action"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["diagram","changes the current state of this diagram to the assigned"]},{"entry":[{},"state"]},{"entry":["action","sets the action value"]},{"entry":["event","sets the event value"]},{"entry":["state","ignored"]},{"entry":["var","sets the variable"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Each declared symbol may have an associated integer ID. The integer ID may begin with zero (for the variable \u201cnil\u201d). This variable is usually declared and may be used as an event to trigger transitions. Other symbols may be assigned beginning with one and incremented according to the order they are declared in the program. An integer may be assigned to each element of a vector. Table 3 illustrates IDs for the previous example:",{"@attributes":{"id":"p-0183","num":"0252"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Type ID"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Nil","int 0"]},{"entry":[{},"xyz[0]","state 1"]},{"entry":[{},"xyz[1]","state 2"]},{"entry":[{},"xyz[2]","state 3"]},{"entry":[{},"xyz[3]","state 4"]},{"entry":[{},"test","event 5"]},{"entry":[{},"x","var 6"]},{"entry":[{},"y","var 7"]},{"entry":[{},"z","var 8"]},{"entry":[{},"a","var 9"]},{"entry":[{},"b","var 10"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"An exemplary program is presented below to further illustrate possible statements in a DOLSIB EISM related program. The symbols in the program may be declared as one of the five types followed by at least one diagram. Consider the simple state diagram that counts the number of incoming count events and dumps the count upon receiving the event dump. This state diagram could be written in DOLSIB EISM as:",{"@attributes":{"id":"p-0185","num":"0254"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"state Idle;"]},{"entry":[{},"event count,dump;"]},{"entry":[{},"var n=0;"]},{"entry":[{},"diagram Counter;"]},{"entry":[{},"Counter (Idle) {"]},{"entry":[{},"Idle : count ? n++ -> Idle"]},{"entry":[{},"| dump ? n(\u2009), n=0 -> Idle;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The state transition may be described in many different formats. The one shown above would have the following meaning: If in state Idle and event count is seen, then increment n and go back to state Idle else if event dump is seen, then output n and n to zero, then go back to state Idle. This state transition may also be written in DOLSIB EISM as:\n\n",{"@attributes":{"id":"p-0187","num":"0258"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Symbol","Meaning"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},": with and","introduces first arc"]},{"entry":[{},"? then","follows arc conditional expression"]},{"entry":[{},"\u2212>begin enter","signifies which state to enter if conditional is true"]},{"entry":[{},"|else elsewith","introduces next arc"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"According to one embodiment, the grammar may be specified similar to BNF form. For example, brackets \u201c[ ]\u201d may surround optional items, a vertical bar may be used to show alternatives, and bold symbols may be actual keywords. Consider the following exemplary form:",{"@attributes":{"id":"p-0189","num":"0260"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"program",":decl diagrams"]},{"entry":[{},"decls",":decl | decls decl"]},{"entry":[{},"decl",":type defs;"]},{"entry":[{},"type",":| | || "]},{"entry":[{},"defs",":def | defs, def"]},{"entry":[{},"def",":lvalue | lvalue = const"]},{"entry":[{},"diagrams",":diagram | diagrams diagram"]},{"entry":[{},"diagram",":diagram_init {lines}"]},{"entry":[{},"diagram_init",":diagram_symbol (state_symbol)| diagramsymbol"]},{"entry":[{},"lines",":line | lines line"]},{"entry":[{},"line",":[] states cmds;"]},{"entry":[{},"with",":| |:"]},{"entry":[{},"states",":state_symbol | states, state_symbol"]},{"entry":[{},"cmds",":cmd | cmds cmd"]},{"entry":[{},"else",":| ||"]},{"entry":[{},"cmd",":exprs acts state_symbol [outs]"]},{"entry":[{},"then",":| "]},{"entry":[{},"acts",": act | acts, act"]},{"entry":[{},"act",":lvalue ([expr])"]},{"entry":[{},{},"| expr"]},{"entry":[{},"begin",":| | \u2212>"]},{"entry":[{},"outs",":lvalue | outs, lvalue"]},{"entry":[{},"exprs",":const | state_symbol | symbol | lvalue | asgn"]},{"entry":[{},{},"| (expr)"]},{"entry":[{},{},"| expr cmpop expr"]},{"entry":[{},{},"| expr logop expr"]},{"entry":[{},{},"| expr arthop expr"]},{"entry":[{},{},"| expr"]},{"entry":[{},{},"| \u2212 expr"]},{"entry":[{},"cmpop",":| | | | | "]},{"entry":[{},"logop",":| "]},{"entry":[{},"arthop",":+| \u2212 | * | \/ | %| .."]},{"entry":[{},"asgn",":lvalue ASSIGN expr"]},{"entry":[{},{},"| lvalue ++"]},{"entry":[{},{},"| ++ lvalue"]},{"entry":[{},{},"| lvalue \u2212\u2212"]},{"entry":[{},{},"| \u2212\u2212 lvalue"]},{"entry":[{},"const",":\u201c.*\u201d | [0\u20139][0\u20139]*"]},{"entry":[{},"lvalue",":symbol | symbol [expr]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The core business or management object that is used to derive other objects may have embedded in it the FSM to be able to parse the EISM DOLSIB with diagrams. Business and management objects may interface with a back-end channel to communicate with enterprise computer systems. The core business or management object may be remotely accessible and may be integrated with the object router. Further, it may have interfaces to the enterprise computer systems and to the FSM.  shows code describing a CoreBusinessObject object router, according to one embodiment.","Example Bank Application (BankAccount)","A service provider may customize the back end communication channel for their intended application and service offerings. In one case the invention is implemented in a way that allows for these different capabilities and customizable features. Consider a simple bank account class that has a balance query and withdraw and deposit methods to change the account balance:",{"@attributes":{"id":"p-0192","num":"0263"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class BankAccount {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int balance(\u2009) const;"]},{"entry":[{},"void withdraw(int amount);"]},{"entry":[{},"void deposit(int amount);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["1","2","1"]},"B may need confirmation that the account number is set and then send the \u201cbalance\u201d query. More specifically: (1) send(\u201caccount-number\u201d), (2) send(<account number>), (3) expect(status), (4) send(\u201cbalance\u201d), (5) expect(amount), and (6) return amount. Bank B has more operations and may have more error conditions.",{"@attributes":{"id":"p-0194","num":"0265"},"figref":"FIG. 28","b":["1","1"]},{"@attributes":{"id":"p-0195","num":"0266"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/* the following are automatically declared by DOLSIB interface:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"state Idle; \/\/ default initial state"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"state Expect; \/\/ waiting on receive == expect_value"]},{"entry":[{},"state Found; \/\/ default state after receiving expect_value"]},{"entry":[{},"state Error; \/\/ default error state"]},{"entry":[{},"event receive; \/\/ indicates the enterprise interface has data"]},{"entry":[{},"event timeout; \/\/ indicates the timer has expired"]},{"entry":[{},"event method; \/\/ indicates a method call has started"]},{"entry":[{},"action return; \/\/ returns from the method call"]},{"entry":[{},"action send; \/\/ sends data to the enterprise interface"]},{"entry":[{},"action throw; \/\/ returns from the method call with a throw"]},{"entry":[{},"var max_wait=1000; \/\/ the default timer value"]},{"entry":[{},"var eid=0; \/\/ the enterprise id"]},{"entry":[{},"var expected_value=\u201c\u201d; \/\/ waited value"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003*\/"},{"entry":"\u2003diagram Balance;"},{"entry":"\u2003Balance(Idle) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Error : true ? -> Idle"]},{"entry":[{},"Idle"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},": method == \u201cbalance\u201d ?"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"timeout(max_wait),"]},{"entry":[{},"send(eid),"]},{"entry":[{},"send(\u201cbalance:query\u201d)"]},{"entry":[{},"expected_value = \u201camount\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2002-> Expect;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Expect"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},": receive == expected_value ?"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"timeout(max_wait)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002-> Found"]},{"entry":[{},"| receive != expected_value ?"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw(\u201cexpected\u201d ..expected_value"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..\u201cbut received\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009..receive)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002-> Error"]},{"entry":[{},"| timeout ?"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw(\u201ctimeout while waiting for\u201d ..expected_value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2002-> Error;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Found"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},": receive ?"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return(receive)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002-> Idle"]},{"entry":[{},"| timeout ?"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw(\u201ctimeout while waiting value\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2002-> Idle;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0196","num":"0267"},"figref":"FIG. 29","b":"1"},{"@attributes":{"id":"p-0197","num":"0268"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Expect"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},": receive == expected_value ?"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"timeout(max_wait)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"-> Found"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"| receive != expected_value ?"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw(\u201cexpected\u201d .. expected_value"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..\u201cbut received\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009.. receive)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"-> Error"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"| timeout ?"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw(\u201ctimeout while waiting for\u201d .. expected_value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-> Error;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0198","num":"0269"},"figref":"FIG. 30","b":"2"},{"@attributes":{"id":"p-0199","num":"0270"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"diagram Balance;"]},{"entry":[{},"\/\/ two steps:"]},{"entry":[{},"\/\/ 1) wait for status."]},{"entry":[{},"\/\/ 2) wait for \u201cbalance\u201d."]},{"entry":[{},"var step = 1;"]},{"entry":[{},"Balance(Idle) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Error : true ? step = 1 -> Idle;"]},{"entry":[{},"Idle"]},{"entry":[{},"\u2003: method == \u201cbalance\u201d?"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"timeout(max_wait),"]},{"entry":[{},"send(\u201caccount_number\u201d)"]},{"entry":[{},"send(eid),"]},{"entry":[{},"expected_value = 0"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2009-> Expect;"]},{"entry":[{},"Found"]},{"entry":[{},"\u2003: step == 1 ?"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"expected_value = \u201cbalance\u201d,"]},{"entry":[{},"step = 1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2009-> Expect"]},{"entry":[{},"\u2003| step == 2 && receive ?"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"return(receive),"]},{"entry":[{},"step = 1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2009-> Idle"]},{"entry":[{},"\u2003| timeout?"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw(\u201ctimeout while waiting balance\u201d),"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2009-> Error;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The bank object class structure has been shown and described elsewhere. However, since this may be derived off of the CoreBusinessObject or Management Object the BankAccount object may need an object router definition. An exemplary definition assuming balance, withdraw and deposit methods is as follows:\n\n",{"@attributes":{"id":"p-0201","num":"0281"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"int BankAccountSkel::balance(\u2009) const {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"fsm_event(\u201cbalance\u201d,\u201c\u201d);"]},{"entry":[{},"RWCString result = fsm_result(\u2009);"]},{"entry":[{},"return atoi(result);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"figref":"FIG. 29"},{"@attributes":{"id":"p-0202","num":"0282"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void BankAccountSkel::withdraw(int amount) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char a[20];"]},{"entry":[{},"sprintf(a,\u201c%d\u201d,amount);"]},{"entry":[{},"fsm_event(\u201cwithdraw\u201d,a);"]},{"entry":[{},"fsm_result();"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"void BankAccountSkel::deposit(int amount) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char a[20];"]},{"entry":[{},"sprintf(a,\u201c%d\u201d,amount);"]},{"entry":[{},"fsm_event(\u201cdeposit\u201d,a);"]},{"entry":[{},"fsm_result();"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"These examples show that the method fsm_result( ) is called even when not expecting a result. The reason for this is twofold: (1) the thread will block until result is actually called inside of the FSM, and (2) an error result will throw an exception within this fsm_result.",{"@attributes":{"id":"p-0204","num":"0284"},"figref":"FIG. 31","b":["3100","3102","3110","3110","3112","3114","3114","3150","3110","3150"]},"The node  includes a name server  that after connection accesses a business object . The business object  includes an EFSM  to access a DOLSIB  via a program . The DOLSIB  allows identification of an object . The program  then is able to determine an appropriate \u201cabc\u201d account skeleton object . Based on the qualifiers an object router server  communicates via an object router layer  with a remote client  that uses a bank stub object  to perform remote method execution of bank methods of the node . In particular, an \u201cabc\u201d account stub  may allow determination of an account balance including using a channel server  to interface with a back office . A service management station  and a merchant management station  may perform Events, Configuration, Accounting, Performance, and Security (ECAPS) processing for the hub and the node, respectively.",{"@attributes":{"id":"p-0206","num":"0286"},"figref":"FIG. 32","b":["3200","3205","3210","3215","3210","3215","3220","3225","3230","3240","3260"]},"A node  may also comprise a number of components as shown, and as discussed elsewhere in the detailed discussion, including an object protocol interface  to assist with object routing, and a merchant management agent  and a service management agent  to respectively interface with the merchant management station  and the service management station . Another node  may be similarly connected with the stations  and  to support management that is desired for the intended application (e.g., ECAPS).","Exemplary Computer Architecture","As discussed herein, a \u201csystem\u201d or \u201ccomputer system\u201d, such as certain client access devices and a system to control a transaction involving multiple service providers, may be an apparatus including hardware and\/or software for processing data. The system may include, but is not limited to, a computer (e.g., portable, laptop, desktop, server, mainframe, etc.), hard copy equipment (e.g., optical disk burner, printer, plotter, fax machine, etc.), and the like.","A computer system  representing an exemplary workstation, host, or server in which features of the present invention may be implemented will now be described with reference to . The computer system  represents one possible computer system for implementing embodiments of the present invention, however other computer systems and variations of the computer system  are also possible. The computer system  comprises a bus or other communication means  for communicating information, and a processing means such as processor  coupled with the bus  for processing information. The computer system  further comprises a random access memory (AM) or other dynamic storage device  (referred to as main memory), coupled to the bus  for storing information and instructions to be executed by the processor . The main memory  also may be used for storing temporary variables or other intermediate information during execution of instructions by the processor . In one embodiment, the main memory  may be used for storing the operating system, software objects, data structures, coded instructions, rule sets, and other types of data. The computer system  also comprises a read only memory (ROM) and other static storage devices  coupled to the bus  for storing static information and instructions for the processor , such as the BIOS. A data storage device  such as a magnetic disk, zip, or optical disc and its corresponding drive may also be coupled to the computer system  for storing information and instructions.","The computer system  may also be coupled via the bus  to a display device , such as a cathode ray tube (CRT) or Liquid Crystal Display (LCD), for displaying information to an end user. Typically, a data input device , such as a keyboard or other alphanumeric input device including alphanumeric and other keys, may be coupled to the bus  for communicating information and command selections to the processor . Another type of user input device is a cursor control device , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to the processor  and for controlling cursor movement on the display .","A communication device  is also coupled to the bus . Depending upon the particular implementation, the communication device  may include a modem, a network interface card, or other well-known interface devices, such as those used for coupling to Ethernet, token ring, or other types of physical attachment for purposes of providing a communication link to support a local or wide area network, for example. In any event, in this manner, the computer system  may be coupled to a number of clients or servers via a conventional network infrastructure, such as a company's intranet, an extranet, or the Internet, for example.","Embodiments of the invention are not limited to any particular computer system or environment. Rather, embodiments may be used on any stand alone, distributed, networked, or other type of computer system. For example, embodiments may be used on one or more computers compatible with NT, Linux, Windows, Windows NT, Macintosh, any variation of Unix, or others. Embodiments may support ActiveX Controls, Java, web browsers such as Internet Explorer, and standard Web server suites such as Netscapes' SuiteSpot, FastTrack, Microsoft's Normandy, Microsoft's Commercial Internet System, and others.","The present invention includes various operations, as described above. The operations of the present invention may be performed by hardware components or may be embodied in machine-executable instructions, which may be used to cause a general-purpose or special-purpose processor or logic circuits programmed with the instructions to perform the operations. The present invention may be provided as a computer-program product that may include a machine-readable medium having stored thereon instructions that may be used to program a computer (or other electronic devices) to perform a process according to the present invention. The machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnet or optical cards, flash memory, or other type of media or machine-readable medium suitable for storing electronic instructions. Moreover, the present invention may also be downloaded as a computer program product, wherein the program may be transferred from a remote computer to a requesting computer by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection). Alternatively, the operations may be performed by a combination of hardware and software.","In conclusion, the present invention provides an approach for controlling a network transaction involving multiple service providers.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements. The invention itself, however, as well as a preferred mode of use, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6","b":"600"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIGS. 21-22"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 33"}]},"DETDESC":[{},{}]}
