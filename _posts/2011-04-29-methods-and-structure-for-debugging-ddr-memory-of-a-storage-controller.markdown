---
title: Methods and structure for debugging DDR memory of a storage controller
abstract: Methods and structure for diagnosing errors in the initialization of DDR memory “on board” a storage controller or a storage expander are presented herein. The features and aspects discussed herein allow for the debugging of the DDR memory initialization. A memory diagnostic system is operable on a storage controller and includes an initialization module in communication with a firmware module of the storage controller. The memory diagnostic system is adapted to initialize a Double Date Rate (DDR) memory of the storage controller. The memory diagnostic system also includes an application programming interface adapted to retrieve initialization information from the initialization module and transfer the initialization information to a debug system via a direct communication link between the application programming interface and the debug system to diagnose the initialization of the DDR memory and to debug the initialization module based on the initialization information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08583966&OS=08583966&RS=08583966
owner: LSI Corporation
number: 08583966
owner_city: Milpitas
owner_country: US
publication_date: 20110429
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["1. Field of the Invention","The invention relates generally to storage controllers and storage network switching components and more specifically to methods and structures for debugging Double Data Rate (\u201cDDR\u201d) memory thereof.","2. Discussion of Related Art","Modern computer processing hosts a relatively large number of complex applications using ever increasingly high data rates. The processors involved are generally configured with high-speed memory devices, such as double-data rate (DDR) synchronous dynamic random access memory (SDRAM). The DDR SDRAM is approximately twice as fast as a single data rate SDRAM running at the same clock speed because a DDR SDRAM transfers data on both the rising and falling edge of a differential clock provided by a DDR controller.","The higher data rate speeds of DDR memory may present issues regarding the timing of data transfers. Since data is transferred at both the rising edge and falling edge of the clock input, timing requirements of a DDR memory oftentimes demand a more precise synchronization for both data write and read operations. Synchronization problems may result in errors while reading data from memory and writing data to memory. Generally, a DDR controller generates internal clock pulses for synchronizing data write operations and read operations. For example, clock and\/or control signals may become desynchronized due to physical characteristics of the devices mounted on the board and changes in the environment in which the memory is operating. Examples of the environmental conditions include voltage and temperature changes may cause drift from an optimal operating point of the DDR memory.","Because of the higher speeds at which DDR memory operates, the memory functions with a narrow valid data window or \u201ceye\u201d in which data is processed. Failure to properly read or write data within this data window results in errors being generated within the system. Other factors such as jitter and skew due to mismatched board trace lengths may also give rise to errors. Accordingly, the DDR memory is typically initialized via firmware to establish synchronization for the DDR and a device with which the memory is configured.","Storage controllers and switching components in the data storage industry are examples of devices that employ DDR memory due to their ever increasing speeds and the desire for faster performance The increasing speed of DDR memory, however, has made debugging of the DDR memory interface increasingly important. For example, end users of the storage controllers often create their own means for initializing the DDR memory. Such is generally done via the introduction of proprietary firmware being implemented by the end user in the storage controller after delivery of the storage controller from the manufacturer. This implementation of proprietary DDR initialization introduces new debugging challenges to the storage controller manufacturers that are required to fix delivered storage controllers when problems arise. To counter this, manufacturers created initialization modules for the DDR memory of the storage controller. These DDR initialization modules have a pre-defined application programming interface (API) that end users would integrate into their existing firmware. While this provided a more reliable method for initializing the DDR memory, a manufacture still relied on an end user properly integrating the DDR initialization module to ensure that the interface functioned correctly. Any incorrect implementation would again result in time consuming and costly debugging of the DDR memory.","The present invention addresses the above and other problems, thereby advancing the state of the useful arts, by providing methods and structure for diagnosing errors in the initialization of DDR memory \u201con board\u201d a storage controller or a storage network switching component, generally referred to herein as storage controllers. The features and aspects discussed herein allow for the debugging of the DDR memory initialization. In one aspect hereof, a memory diagnostic system operable on a storage controller or a storage network switching component includes an initialization module in communication with a firmware module of the storage controller and adapted to initialize a DDR memory of the storage controller. The firmware module is operable to control I\/O operations of the storage controller. The memory diagnostic system also includes an application programming interface adapted to retrieve initialization information from the initialization module and transfer the initialization information to a debug system via a direct communication link between the application programming interface and the debug system to diagnose the initialization of the DDR memory and to debug the initialization module based on the initialization information.","The memory diagnostic system may also include a host system communicatively coupled to the firmware module of the storage controller and adapted to detect errors in the initialization of the DDR memory and compare the detected errors to the initialization information to debug the firmware module. For example, the debug system may be communicatively coupled to the host system and adapted to transfer the initialization information to the host system for debugging the firmware module. The application programming interface may be further operable to link to the host system through the firmware module. The application program interface may be operable to receive debug instructions from the debug system to change the initialization module.","In one aspect hereof, a method and a computer-readable medium are operable to diagnose DDR memory initialization errors on a storage controller. The method includes initializing DDR memory of the storage controller via a DDR memory initialization module and detecting an error in the initialization of the DDR memory via a host system. The method also includes establishing a direct communication link between a debug system and the DDR initialization module to retrieve initialization information from the DDR initialization module and determining if the error is attributed to the DDR initialization module to debug the DDR initialization module based on the initialization information.","The method may also include communicatively coupling a host system to a firmware module of the storage controller to detect errors in the initialization of the DDR memory and comparing the detected errors to the initialization information to debug the firmware module. For example, the method may also include communicatively coupling the debug system to the host system to transfer the initialization information to the host system for debugging the firmware module. The method may also include linking an application programming interface to the host system through the firmware module. The method may also include transferring debug instructions from the debug system to the DDR initialization module to change the DDR initialization module.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 1"],"b":["102","103","102","100","102"]},"In accordance with features and aspects hereof, the memory diagnostic system  is operable to diagnose problems with the DDR memory  such that a debug system  may correct these problems. In this regard, the memory diagnostic system  is any hardware, software, or firmware operable on the storage controller  to detect errors in the DDR memory  and report these errors to the debug system . The debug system  is any processing system, such as a computer, capable of interfacing with the storage controller  through the memory diagnostic system  to debug initialization problems that the DDR memory  is experiencing.","The storage controller  includes, among other things, a processor  that is operable to control input\/output (I\/O) requests to a plurality of physical storage volumes  via the logical volume . For example, the processor  may include a firmware module  that directs the processor  to treat the physical storage volumes  as a single logical volume  such that the host system  may access the physical storage volumes  as a single storage device. Those skilled in the art of storage systems are readily familiar with storage controllers and their abilities to consolidate multiple physical storage volumes into a single logical volume. In this regard, the firmware module  is operable to direct a processor to control I\/O operations to the physical storage volumes  through the logical volume . The firmware module  is also operable to initialize the DDR memory  by calling certain components of the memory diagnostic system , as described in greater detail below. For example, the DDR memory  is typically initialized via a \u201cmemory controller\u201d, an integrated circuit that is part of the family of components associated with the processor. The memory controller performs the actual signaling control of the memory subsystem on behalf of the processor . In other words, the processor  is usually coupled to the memory controller that is, in turn, coupled to the DDR memory . The DDR memory  initialization is therefore typically implemented via the programming of configuration registers in the memory controller by the processor .","Examples of storage controllers and storage network switching elements include Serial Attached SCSI (\u201cSAS\u201d) controllers and expanders or Fibre Channel (FC) controllers and switches. Small Computer Systems Interface (\u201cSCSI\u201d) is a set of American National Standards Institute (\u201cANSI\u201d) standard electronic interface specification that allows, for example, computers to communicate with peripheral hardware. Common SCSI compatible peripheral devices may include: disk drives, tape drives, CD drives (\u201cCD-ROM\u201d, \u201cCD-RW\u201d, etc), DVD drives, printers and scanners. SCSI as originally created included both a command\/response data structure specification and an interface and protocol standard for a parallel bus structure for attachment of devices. SCSI has evolved from exclusively parallel interfaces to include both parallel and serial interfaces. SCSI is now generally understood as referring either to the communication transport media (parallel bus structures and various serial transports) or to a plurality of primary commands common to most devices and command sets to meet the needs of specific device types as well as a variety of interface standards and protocols.","The collection of primary commands and other command sets may be used with SCSI parallel interfaces as well as with serial interfaces. The serial interface transport media standards that support SCSI command processing include: Fibre Channel, Serial Bus Protocol (used with the Institute of Electrical and Electronics Engineers 1394 FireWire physical protocol; \u201cIEEE 1394\u201d) and the Serial Storage Protocol (SSP).","SCSI interface transports and commands, such as SAS, are also used to interconnect networks of storage devices with processing devices. Serial Advanced Technology Attachment (\u201cSATA\u201d) is another example of a transport protocol. These applications are often referred to as storage networks. Those skilled in the art are familiar with SAS and SATA standards as well as other SCSI related specifications and standards. Information about such interfaces and commands is generally obtainable at the website http:\/\/www.t10.org. As used herein, reference to SAS devices and protocols may be understood to include SATA devices and protocols. The problems discussed herein and the solutions provided by this invention are similarly applicable to SATA devices.","Such SCSI storage networks are often used in large storage systems having a plurality of disk drives to store data for organizations and\/or businesses. The network architecture allows storage devices to be physically dispersed in an enterprise while continuing to directly support SCSI commands. This architecture allows for distribution of the storage components in an enterprise without the need for added overhead in converting storage requests from SCSI commands into other network commands and then back into lower level SCSI storage related commands.","A SAS network typically comprises one or more SAS initiators coupled to one or more SAS targets often via one or more SAS expanders. In general, as is common in all SCSI communications, SAS initiators, such as the host system , initiate communications with SAS targets, such as the physical storage volumes . The expanders expand the number of ports of a SAS network domain used to interconnect SAS initiators and SAS targets (collectively referred to as SAS devices or SAS device controllers).","In general, a SAS initiator directs information to a SAS target device through ports of one or more SAS expanders in the SAS domain. A \u201cport\u201d in SAS terminology is a logical concept. A port may comprise one or more physical links in a SAS domain. Such physical links are often referred to as PHYs in the terminology of SAS domains. A port may use a single PHY or, if the port is configured as a wide port, may use multiple PHYs logically grouped to provide higher bandwidth.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["102","103","102","201","202","202","100","105","100","103","201","100","202","101","201","101","202","201","101","101","202"]},"In this embodiment, the host system  is also communicatively coupled to the debug system  to receive the initialization information for debugging the firmware module . For example, the firmware module  may retrieve initialization code from the initialization module  that is operable to initialize the DDR memory . If the implementation of this initialization code by the firmware module  improperly initializes the DDR memory , the initialization code is debugged to correct any errors causing the faulty initialization. Since there are effectively two modules controlling the DDR memory  (i.e., the initialization module  and the firmware module  calling the initialization module , it is difficult to determine where the errors in initialization are occurring. The API , therefore, is operable to communicate with the initialization module  to present the errors that are attributed to the initialization to the debug system . The debug system  may then determine that there are errors in the initialization module . If so, the debug system  may debug and correct the initialization module  such that the firmware module  can properly call the initialization module  and perform initialization of the DDR memory . If, however, the errors are occurring due to the firmware module  use of the initialization module , the debug system  may present the initialization information to the host system  to verify that the errors are not attributed to the initialization module . Accordingly, the host system  may be operable to communicate with the firmware module  (e.g., through the API ) to debug the firmware module  and subsequently correct its implementation of the initialization module . More specifically, the host system  may detect errors in the initialization of the DDR memory  and compare the detected errors to the initialization information to debug the firmware module , effectively ruling out the initialization module  as the source of the errors.","The API  may be a function call to the initialization module  for the transfer of information between the initialization module  and the debug system . The API  may be defined depending on the type of information the debug system  requires of the initialization module . The API  may also define the information that the initialization module  sends to the debug system . For example, the API  may define timing information detected by the initialization module , warnings (e.g., detected eyes being too small), and\/or any critical errors messages (e.g., the DDR memory  does not support the clock speed that the debug system  requires of the initialization module ). This information may then be transferred to the debug system  via the API .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIGS. 1 and 2","FIG. 1"],"b":["300","300","300","301","104","105","103","202","202","105","100","302","201","303","105","202","201","305"]},"If the error is not attributed to the initialization module, then the debug module may establish a link with the host system to communicate the initialization information, in the process element . The host system may also establish a link with the firmware module via the API, in the process element , to determine the problems associated with the firmware module's implementation of the initialization module. In doing so, the host system may attempt to initialize the DDR memory, in the process element , and then begin collecting the associated errors, in the process element . The host system may then compare the detected errors to the initialization information, in the process element , to debug the firmware module.","Embodiments of the invention can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In one embodiment, the invention is implemented in software, which comprises but is not limited to firmware, resident software, microcode, etc.  is a block diagram depicting storage controller computer system  adapted to provide features and aspects hereof by executing programmed instructions and accessing data stored on a computer readable storage medium  for implementing one or more of the methods depicted herein.","Furthermore, embodiments of the invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium  providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer-usable or computer readable medium can be any apparatus that can contain, store, communicate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device). Examples of a computer-readable medium include a semiconductor or solid-state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk\u2014read only memory (CD-ROM), compact disk\u2014read\/write (CD-R\/W) and DVD.","The storage controller computer system  being suitable for storing and\/or executing program code includes at least one processor  adapted to be coupled directly or indirectly to memory elements  through a system bus . The memory elements  can include local memory employed during actual execution of the program code, bulk storage, and cache memories, which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Host system interfaces  and back end interfaces  may be coupled to the processor  to enable the storage controller computer system  to be coupled with other data processing systems or storage devices through intervening private or public networks. Ethernet cards, Wi-Fi interfaces, Bluetooth Interfaces, are just a few of the currently available types of network or host interface adapters. For example, the I\/O device interface  may provide a direct communication link between the debug system  and the memory diagnostic system  for the purposes of debugging the DDR memory  initialization.","While the invention has been illustrated and described in the drawings and foregoing description, such illustration and description is to be considered as exemplary and not restrictive in character. One embodiment of the invention and minor variants thereof have been shown and described. In particular, features shown and described as exemplary software or firmware embodiments may be equivalently implemented as customized logic circuits and vice versa. Protection is desired for all changes and modifications that come within the spirit of the invention. Those skilled in the art will appreciate variations of the above-described embodiments that fall within the scope of the invention. As a result, the invention is not limited to the specific examples and illustrations discussed above, but only by the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
