---
title: Method and apparatus for unified external and interprocess communication
abstract: A palmtop computer system that incorporates mechanical buttons that combine the task of turning the palmtop computer system on and starting a particular application program. Furthermore, the same mechanical button can be used to navigate the application program to find the information that is most likely needed by the user. Additionally, external devices can be coupled to the palmtop computer system in a manner that allows the external hardware device to initiate specific application programs that cooperate with the external hardware device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07386858&OS=07386858&RS=07386858
owner: Access Systems Americas, Inc.
number: 07386858
owner_city: Sunnyvale
owner_country: US
publication_date: 20030718
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","Operating System Architecture","An \u201cIn-Box\u201d Approach","Unified Exchange Manager Architecture","Unified Exchange Manager","Infrared Business Card Exchange Example","U.S. application Ser. No. 08\/790,518","BACKGROUND OF THE INVENTION FROM SER. NO. 08\/790,518","DETAILED DESCRIPTION FROM SER. NO. 08\/790,518"],"p":["This application is a continuation of U.S. patent application Ser. No. 09\/113,452, entitled \u201cMethod and Apparatus for Unified External and Interprocess Communication\u201d, filed by Gavin Peacock, et al. on Jul. 10, 1998, now U.S. Pat. No. 6,601,111, which is a continuation-in-part of U.S. application Ser. No. 08\/790,518, entitled \u201cMethod and Apparatus for Interacting With a Portable Computer System\u201d, filed by Robert Yuji Haitani, et al. on Jan. 29, 1997, now U.S. Pat. No. 5,900,875. This application claims priority to and benefit of each of the previously filed patent applications identified in this paragraph, which are hereby incorporated by reference.","The present invention relates to the field of computer operating systems software. In particular the present invention discloses a method of providing an immediate response computer communication system for both external and internal interprocess communication.","Modern computer operating systems support several application programs executing concurrently. To communicate with external hardware devices, the application programs call input\/output routines in the operating system. To facilitate communication between applications, an operating system may provide a message passing system or a method of opening \u201csockets\u201d between applications.","However, using two different methods for communicating information is unnecessarily complex. It would be desirable to have a simplified method of communicating information from and to application programs. Furthermore, it would be desirable to have a messaging system that allows dormant applications to be immediately activated upon receiving information that is destined for the dormant application.","It is an object of the present invention to implement a handheld computer system that allows a user to quickly turn on the handheld computer system and access the needed information. It is a further object of the present invention to allow the user to execute specific programs on the palmtop computer system using external devices coupled to the palmtop computer system.","These and other objectives are accomplished by the handheld computer system of the present invention which incorporates mechanical buttons that combine the task of turning the handheld computer system on and starting a particular application program. Furthermore, the same mechanical button can be used to navigate the application program to find the information that is most likely needed by the user. Additionally, external devices can be coupled to the palmtop computer system in a manner that allows the external hardware device to initiate specific application programs that cooperate with the external hardware device.","A method and apparatus for providing an immediate response computer communication system that provides both external and interprocess communication is disclosed. In the following description, for purposes of explanation, specific nomenclature is set forth to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that these specific details are not required in order to practice the present invention. For example, the present invention has been described with reference to an exchange manager in a mobile computer system. However, the same techniques can easily be applied to other types of computer devices.","An operating system is a computer program that provides a consistent high level interface between computer application programs and computer hardware.  illustrates a conceptual diagram of a computer system. Referring to , the operating system is positioned between application programs and the computer hardware. Thus, the operating system controls all the computer hardware directly.","To access computer hardware features, application programs must communicate with the operating system by making system calls. For example, if an application program wishes to communicate externally using a serial port, the application program must make a system call into the operating system requesting the serial port communication. The operating system directly communicates with the serial port and performs the serial port communication desired by the application program.","In modern operating systems, the operating system shares the computer hardware resources among several concurrently executing application programs. Thus, the operating system arbitrates requests for the same hardware feature from more than one application program.","Besides handling communication with computer hardware, modern operating systems must provide a method of allowing different application programs to communication with each other. Such a feature is referred to as \u201cinterprocess\u201d communication.","One method of providing an interprocess and external communication system would be to provide an operating system messaging subsystem, an \u201cIn-Box\u201d, that handles messaging. The In-Box would accept interprocess and external messages for applications that are not currently executing and store such messages for later delivery. Active applications that accept interprocess and external messages would be notified when they have received a message. Alternatively, active applications could periodically poll the In-Box determine if a message has been received. When a message is received for an application, that application would then be responsible for collecting the message from the In-Box.","Such an In-Box system requires the applications to proactively collect messages from the In-Box. Thus, the user would not have any immediate feedback when messages are received. The user would need to activate the application such that the application would fetch received messages from the In-Box program. A more immediate message delivery system would be desirable.","The present invention introduces an improved operating system construct that allows application programs to immediately communicate with external communication hardware and communication with other application programs using a single consistent interface. The operating system subsystem that provides this functionality is known as the \u201cExchange Manager.\u201d The Exchange Manager provides immediate user feedback by immediately activating applications that have received messages. Furthermore, the Exchange Manager is extensible such that it allows new communication libraries to be added thereby allowing the Exchange Manager to adopt new communication technologies that emerge.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 2"],"b":["220","220"]},"To handle communication details for different protocols and different media, the Exchange Manager  transacts with a set of communication libraries . The communication libraries  implement protocol stacks and handle the communication with the device drivers associated with individual communication devices.","A serial TCP\/IP communication library is one example of a communication library. The serial TCP\/IP communication library may implement the Transport Communication Protocol\/Internet Protocol (TCP\/IP) stack and the Point-to-Point Protocol (PPP) stack for Internet communication. The serial TCP\/IP communication library would communicate with a serial port driver to send and receive data from the computer system.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 3"]},"It is important to note that the Exchange Manager is always available for operation. In one embodiment, the Exchange Manager resides in memory that is always available to the processor. Thus, the features of the Exchange Manager are available any time that the computer system receives a message from an external source.","Referring to , the application programs communicate with the Exchange Manager  through an exchange application programming interface (ExgAPI). Each application program that is capable of accepting messages registers with the exchange manager. When an application registers with the Exchange Manager, the Exchange Manager stores information about the application in an application registry .","Exchange Manager Application Registry","The application registration procedure provides the information that allows the Exchange Manager to receive information for the application and notify the application when information has been received. To identity incoming data, the Exchange manager needs to know about the types of data that a program will accept. In one embodiment, this is performed by having the application programs provide the following pieces of information to the Exchange Manager: a creator identification (creatorID), a MIME data type, and an file extension. The application registration procedure is also used to provide the Exchange Manager with a set program entry points that will be used by the Exchange manager when the Exchange manager receives a message for that application program.","In the embodiment that uses the creatorID parameter, the creatorID is used to uniquely identify a particular application program. In one embodiment, the creatorID is value that is registered with the operating system manufacturer and is defined to uniquely identify one particular program.","The MIME type identifies a particular Multipurpose Internet Mail Extension (MIME) type of data that the program is designed to handle. Detailed information about the MIME types can be found at the Internet Mail Consortium's web site at http:\/\/www.imc.org\/ In the present invention, application programs identify the MIME types that they can handle. If more than one application supports a particular MIME type, then the user may select a default application that will be used to accept messages of that MIME type.","The file extension describes a three letter filename extension that defines a type of information that the application handles. The three letter extension is a legacy of the Microsoft DOS and Windows 3.1 operating systems. For example, the three letter extension \u201cJPG\u201d refers to JPEG image files and the three letter \u201cDOC\u201d extension refers to Microsoft Word files.","Each application that can receive messages also provides a few entry point vectors to the Exchange Manager. A first entry point vector provides a routine that should be called when the Exchange Manager begins receiving a message for a particular application. A second entry point vector provides a routine that should be called after receiving a full message for a particular application program. The operation of these entry point vectors will be describe in more greater detail in a later section.","Communication Libraries","Referring back to , the Exchange Manager  communicates with various communication libraries through an Exchange Library Application programming interface (ExgLibAPI). The communication libraries are software modules designed to handle different types of communication systems. New communication libraries may be added to handle new communication protocols and new communication media. When a new communication library is added, the Exchange Manager  stores information about the new communication library in a communication library registry .","In the example of , there are three communication libraries: an Infrared (IR) communication library, a Pager communication library and an Interapplication communication library. Each communication library handles a different medium.","The IR communication library allows the portable computer to communicate with the outside world using an infrared port.","The Pager Library allows the portable computer system to receive information from the outside world using pager communication hardware. Thus, a mobile computer system could receive alphanumeric messages from a paging network.","The Interapplication communication library allows various applications on the portable computer system to communicate with each other. Specifically, applications send messages to the interapplication communication library to pass interprocess messages. The Interapplication communication library routes all information it receives back up through the exchange manager to the recipient application. Thus, the interapplication communication library does not communicate with any external hardware. It should be noted that by implementing interprocess communication using an Interapplication communication library, both external and interapplication communication are performed using a single information exchange interface, the exchange application programming interface (ExgAPI).","To fully explain the workings of a typical communication library, the Infrared communication library will be examined in greater detail. The IR communication library allows the portable computer to communicate with the outside world using an infrared data port. In one embodiment, a special serial driver is used to control access to the infrared data port. Information about the serial driver can be found in the co-pending U.S. patent application entitled \u201cMethod and Apparatus for Serial Port Sharing\u201d with Ser. No. 09\/078,357 filed on May 13, 1998 which is hereby incorporated by reference. The IR communication library implements portions of the IrDA infrared standards to communicate using infrared light. The IrDA infrared standards define standards for infrared hardware, infrared software, and infrared communication protocol. Detailed information about the IrDA standards can be found at the Infrared Data Association's web site located at http:\/\/www.irda.org\/.","In one embodiment, the IR communication library implements the IrDA protocol suite including the Specifications for Infrared Mobile Communications (IrMC) and the IrDA Object Exchange Protocol (IrOBEX). The IrDA Object Exchange Protocol (IrOBEX) allows the mobile computer system to \u201csquirt\u201d (send) and \u201cslurp\u201d (receive) various types of know data objects such as virtual business cards (vCards) and calendar entries. However, other types of object exchange systems may be used.","The Exchange Manager provides a simple standardized interface to applications what wish to receive messages from external sources or other applications. To best disclose how the Exchange Manager interacts with applications, control flow examples are provided.","Exchange Manager Example Using Default Pop-Up Verification",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4"]},"Referring to step , the Exchange manager begins receiving data from one of the communication libraries. The Exchange manager examines the data packet headers in order to determine a what kind of data is being received. The data may be described with a MIME type, a creatorID, or a filename suffix. The Exchange Manager extracts a MIME type, a creatorID, or a filename suffix from the incoming data to determine a data type.","Next, at step , the Exchange Manager alerts the user that data is being received. This can be accomplished by presenting a pop-up dialog box. The Exchange manager then examines the Application Registry  to locate an application program that handles the incoming data type. If no matching application is found, then the Exchange Manager may simply discard the data. Alternatively, the Exchange Manager may ask the user if he wishes to save the data for later use.","When a matching application is found, the Exchange Manager makes a call into a callback routine that the application provided when it registered with the Exchange Manager. The callback routine is used to alert the application about the incoming data for that application. If more than one application has registered to receive the particular data type, then a default application will be used.","The application may respond in the callback routine in number of ways. The application may simply reject the data such that the Exchange Manager discards the incoming data. The application may simply accept the data. However, in one embodiment of the present invention, a default response is to allow the Exchange Manager to ask the user if he wishes to accept the information. This example will assume that the application elects to have the pop-up accept\/reject dialogue box presented to the user. The Exchange Manager continues receiving data until the entire data packet is received.","At step , the Exchange Manager displays a dialogue box that describes the incoming data and specifies which application will be using the incoming data. If there is more than one application that has registered to receive that type of data, a list of applications may be displayed wherein the user may select which application will receive the data or whether the user will reject the data. The user is asked whether he wishes to accept the received data or reject the data. The user inputs a decision at step . If the user rejects the data, then the data is discarded and the pop-up dialogue box is dismissed as stated in step .","If the user elects to accept the data at step , then the Exchange Manager clears the pop-up dialogue box and calls a second callback routine into the application designated to receive the data at step . The second callback routine is a routine that fully handles incoming data. When the second callback routine is called, the Exchange Manager provides the received data packet or a pointer to the received data packet such that the application can process the received data packet.","At step , the callback routine processes the received data packet. In one embodiment, the application's callback routine opens up a socket to the Exchange Manager and accepts the data from the Exchange Manager. In another embodiment, the application's callback routine copies the data that is pointed to by a data pointer. When the application's callback routine is done processing the data, the application's callback routine returns a call handle vector that may be used to open the application and access the newly received data.","At step , the Exchange Manager calls the call handle provided by the application's callback routine. The call handle provided by the callback routine activates the application and, ideally, brings the application into a state where the newly received data is received. Thus, when a user receives information and accepts the information, the application that received the new information immediately displays the information to the user.","Exchange Manager Example Using Customized Acceptance or Denial","As previously set forth, an application that accept data packets from the Exchange manager do not have to use the default accept\/reject mechanism.  provides a flow diagram that describes the operation of an application that does not use the default accept\/reject dialogue.","Referring to step , the Exchange manager begins receiving data from one of the communication libraries and examines the data packet headers in order to determine a what kind of data is being received. Next, at step , the Exchange Manager makes a call into the data alert callback routine that the application provided when it registered with the Exchange Manager. In this example, the callback routine informs the Exchange Manager that the application program will accept the incoming data packet at step . However, the application could have rejected the data packet.","The Exchange Manager receives the full data packet at step . Next, the Exchange Manager calls a second callback routine into the application designated to receive the data at step . Within the callback routine at step , the callback routine accepts and processes the received data packet. The callback routine returns a call handle that will be used to activate the application program. At step , the Exchange Manager calls the call handle provided by the application's second callback routine. The call handle provided by the callback routine activates the application and brings the application into a state where the newly received data is received. Thus, an application can receive information and immediately display the newly received information without any input from the user.","To best illustrate the features of the present invention, a practical example of use in a mobile computing system is provided. The practical example involves the exchange of an electronic business card from a first mobile computing device to a second mobile computing device.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 6","b":["610","650","611","651"]},"To fully describe the business card exchange example, two flow diagrams are presented.  presents a first flow diagram wherein the control flow of a mobile computing device that transmits a business card is presented.  describes the control flow of a mobile computing device that receives an electronic business card.","An Infrared Business Card Sender",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 7","FIG. 7","FIG. 6"],"b":"707"},"At step , the addressbook application determines if the addressbook button has been held for a predetermined amount of time such as two seconds. If the button has been released, then the addressbook application proceeds to step  where it displays an addressbook record. The addressbook application will continue executing according to the specific implementation of the addressbook program. However, if the addressbook button is held for the predetermined amount of tune, then a business card sending routine is activated at step .","The business card sending routine is designed to send an electronic business card via an infrared link to a corresponding receiver application. To promote interactivity, the business card sending routine uses established standards such as the IrDA Infrared communication standards and the vCard (Virtual Business Card) standard from the Internet Mail Consortium. Detailed information about the IrDA infrared standards can be found at the Infrared Data Association web site at http:\/\/www.irda.org\/. Similarly, detailed information about the vCard data format can be found at the Internet Mail Consortium web site http:\/\/www.imc.org\/.","The business card sending routine first transmits an \u201cAre you there?\u201d packet that tests to see if there is a nearby receiver to receive an electronic business card. At step , the mobile device will monitor for a response.","If there is no nearby infrared transceiver, then the mobile computing device will inform the user there is no nearby infrared device at step . It will then proceed to step  where the mobile device will return to a mode where it continually listens for infrared packets as specified in the co-pending U.S. patent application entitled \u201cMethod and Apparatus for Serial Port Sharing\u201d with Ser. No. 09\/078,357 filed on May 13, 1998.","If there is a nearby infrared device, then that device will transmit a response such that the sending device will proceed to step . At step , the sending mobile computing device transmits the business card. In one embodiment, a business card is transmitted using the vCard format using IrDA infrared transmission standards.","At step , the sending mobile device waits for an acknowledgement from the receiving device. If not acknowledgement is received, then the mobile device informs the user that the business card send was not successful at step . If an acknowledgement is received, then the user is informed that the business card was sent at step . After a successful or successful transmission, the infrared component of the mobile device returns to a passive receive mode at step .","An Infrared Business Card Receiver",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 8","FIG. 8"]},"Referring to step , the mobile device begins receiving an infrared data packet. By examining the packet headers, the receiver identities the data packet as a vCard MIME type. Thus, the receiver alerts the user of the packet being received and calls the incoming data callback routine in the addressbook application at step . In one embodiment, the addressbook program specifies that it wishes to display the default accept\/reject dialogue box. The Exchange Manager then continues to receive the remainder of the data packet.","At step , after the entire vCard data packet has been received by the Exchange Manager, the Exchange Manager displays the accept\/reject dialogue box. Specifically, the Exchange Manager displays a dialogue box which informs the user that a vCard has been received and that the Addressbook application will receive the data if the user accepts the data. The user enters a response at step .","If the user does not want the received vCard information, then the user rejects the vCard and the mobile computing system proceeds to step . At step , the vCard data is discarded and the pop-up dialogue box is removed from the display.","If the user wishes to keep the received business vCard, then the user accepts the vCard and the mobile computing device proceeds to step . At step , the Exchange Manager calls a callback routine in the Addressbook application for receiving vCard data. This callback routine was provided to the Exchange Manager when Addressbook registered with the Exchange Manager.","Within the callback routine, at step , the Addressbook callback routine opens a socket and receives the vCard data from the Exchange Manager. The Addressbook stores the newly received vCard in its file system. After storing the vCard, the Addressbook callback routine returns a call handle that can be called to activate the Addressbook program and bring the Addressbook into a state where the newly received vCard information is displayed.","At step , the Exchange manager then calls the returned call handle. The Addressbook application will activate and display the newly received vCard. Thus, with the teachings of the present invention, the user of the receiving mobile computing device merely accepts the incoming vCard packet and the mobile device automatically receives the vCard, stores the vCard, and displays the vCard.","The foregoing has described a unified method for providing external and interprocess communication in a computer system. It is contemplated that changes and modifications may be made by one of ordinary skill in the art, to the materials and arrangements of elements of the present invention without departing from the scope of the invention.","The following is a veritable copy of sections from U.S. patent application Ser. No. 08\/790,518, and in particular, the BACKGROUND OF THE INVENTION and DETAILED DESCRIPTION sections. The drawings to the patent application have been added to the application as well. Reference numbers have been changed in the copy and added drawings so they could be integrated into the application without conflicting with previously used reference numbers.","Many busy business professionals require a lot of information while they are traveling. To fill this need, a market for palmtop computer systems has emerged. Palmtop computer systems are small compact computers that can fit in the palm of your hand. Palmtop computer systems are usually used to perform personal informational management tasks such as, an address book, a daily organizer and a to do list.","Users of palmtop computer systems need to be able to access the information stored into the palmtop computer as fast as possible. For example, a person talking on a phone may schedule an appointment with the person on the other end of the phone. Thus, the person would need to access the information in his calendar program on the palmtop computer system as fast as possible such that no interruption of the telephone conversation would be required.","Existing palmtop computer systems often require a number of steps to obtain the desired information. For example, to obtain information from a calendar date, a person may first need to turn on the palmtop computer system. Some systems then require a \u201cboot-up\u201d time before the palmtop computer system enters an operational state. After the palmtop is on and ready, the person must then start the calendar application. Finally, the person must navigate the calendar application to locate the desired date. Although, those few steps may seem simple, such steps seem to be an unnecessary nuisance to a person that wants to quickly access the appropriate information. It would therefore be desirable to implement a palmtop computer system that allows the user to very quickly access the required information.","A Portable Computer System With One-Touch Application Buttons",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 9","b":["900","900","981","981"]},"Below the display area  is a user input area . The user input area  is used to input text in the Graffiti\u00ae writing area  and interact with the application buttons  through . The user input area  is covered by the digitizer pad that will sense the users finger or stylus.","Below the user input area  is a mechanical button input area . In the embodiment of  there are seven different mechanical buttons on the front of the portable computer system: a power button, two directional scrolling buttons, and four different application buttons.","The first mechanical button is a power button . If the portable computer system  is off, then the power button  turns on the portable computer system  and brings the portable computer system  to the state that the portable computer system  was in just before it powered down. Conversely, if the portable computer system is on then pressing the power button  will save the current state of the portable computer system  and turn the portable computer system  off.","A pair of scrolling buttons  are used to scroll information in the display area  up and down. The scrolling buttons  allow a user to view a list of information that does not fit on the display.","There are four mechanical application buttons , , , and  illustrated in . In the embodiment of , application button  is used for a calendar application, application button  is used for an address book application, application button  is used for a To-do list application, and application button  is used for a note pad application. The embodiment of  provides just one possible set of applications. Other applications could be used instead of the applications illustrated in . Furthermore, the application buttons are programmable such that applications assigned to each application button may be changed.","When the portable computer system  is powered-off, the application function buttons , ,  and  turn on the portable computer system and then begin executing the associated application. For example, if the user presses the addressbook application button , the portable computer system will turn on and begin executing the address book application.","In the present embodiment, the application buttons operate by generating a hardware interrupt signal to the processor in the portable computer system . The hardware interrupt signal wakes the processor in the portable computer system  from a sleep mode and caused the processor to execute code in a wake-up routine. In the wake-up routine, the processor checks a register to determine which application button was pressed. After determining which application button was pressed.","To further convenience the user, each application starts executing by entering a state that has been chosen to best provide the information the user may be seeking. The following table lists the current applications illustrated in  and the initial state that each application enters when the corresponding application button is pressed:",{"@attributes":{"id":"p-0095","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Application","Description of Initial state."]},{"entry":["Calendar","Appointment list for the current day."]},{"entry":["Addressbook","List of names and phone numbers for most recently"]},{"entry":[{},"accessed multi-function category."]},{"entry":["To-Do","To-Do list of most recently accessed multi-function"]},{"entry":[{},"category."]},{"entry":["Memo Pad","Current Memo being edited (if any) else current list"]},{"entry":[{},"of memos."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":[{},{}],"b":"900"},"As stated in the previous section, when the addressbook application button  is pressed, the portable computer system is turned on and the addressbook application starts executing.  provides an example of how the addressbook application may appear on the screen after the addressbook application button  has been pressed. In  there is a list of acquaintances of the user and associated telephone numbers. The user can select a particular acquaintance using a stylus or his finger. In  the acquaintance \u201cAllison Barry\u201d has been selected. If the user touches the selected Allison Barry again, a display screen containing additional information about Allison Barry will be presented.","Referring to the upper right corner of the addressbook screen display in , there is a multifunction category name . In , the multifunction category that is currently displayed is the \u201call\u201d category. Each addressbook record is assigned to a particular multifunction category. By assigning each addressbook record to a multifunction category, certain acquaintances can be grouped together. For example, one multifunction category may be \u201cpersonal\u201d and that category would include close personal friends of the user. Another multifunction category may be \u201cbusiness\u201d and that category would include business acquaintances of the user. The \u201call\u201d displays all the addressbook records from all multifunction categories.","Next to the multifunction category name  is a multifunction category edit indicator . The multifunction category edit indicator  indicates that the user can select a particular multifunction category to display by selecting the multifunction category edit indicator . For example,  illustrates how the screen would appear after the user selects the multifunction category edit indicator . In  a list of the available multifunction categories is displayed. In the example of , the available multifunction categories are \u201call\u201d categories, \u201cbusiness\u201d acquaintances, \u201cpersonal\u201d acquaintances and \u201cunfiled\u201d acquaintances. Furthermore, the user can add additional multifunction categories or edit the existing multifunction categories by selecting the \u201cEdit categories . . . \u201d list item from the pop-up menu.","An easier method of switching between the different multifunction categories exists. Specifically, the user can select between the various multifunction categories in the addressbook by continuing to press the addressbook application button after the addressbook application is executing. For example, referring to the addressbook display of  if the user again presses the addressbook application button , the address book application will move on to the multifunction category, the business category, as illustrated in . By successively pressing the address book application button  the user can scroll through all the different multifunction categories. Alternatively, the user may continuously hold down the addressbook application button  and the addressbook application will slowly scroll through the different multifunction categories.","Different applications can perform different actions when their respective application button is pressed when the application is already running. Thus, each application button is \u201coverloaded\u201d in that the function that the key performs depends on the current context. The following table describes how each application behaves when the associated application button is pressed when the application is already running:",{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Application","Effect of pressing the Application button when the"]},{"entry":[{},"application is already running."]},{"entry":["Calendar","Scroll through appointment list for the current day."]},{"entry":[{},"(Scroll keys move to different days.)"]},{"entry":["Addressbook","Rotate through the different multifunction categories."]},{"entry":["To-Do","Rotate through the different multifunction categories."]},{"entry":["Memo Pad","Rotate through the different multifunction categories."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In summary, each application button turns on the portable computer system  and begins executing the associated application if the portable computer system is off. If a different application is running when an application button is pressed, the application associated with the pressed application button begins executing. However, if the application is already up and running and the application button for that application is pressed then the application can perform a specific function such as rotating through different multifunction categories as described in the example of .","Externally Accessible Application Signals",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 11","b":["1130","1130","1130","1130","1130"]},"Referring again to , a desktop personal computer system  is also illustrated. Coupled to the serial port  of the desktop personal computer system  is a communication cradle . The communication cradle  is used to provide a serial communication link between the portable computer system  and the personal computer system . Specifically, the serial communication lines from the serial port  are extended and terminate at a serial interface connector  on the communication cradle . A matching serial interface connector (not shown) on the rear of the portable computer system  connects the portable computer system  to the personal computer system .","To synchronize the information on the portable computer system  with the information on the personal computer system , a user drops the portable computer system  into the communication cradle  and presses a synchronization button  on the communication cradle . The synchronization button  causes a synchronization program on the portable computer system  to execute. The synchronization program on the portable computer system  wakes up a peer synchronization program on the personal computer system . The synchronization program on the portable computer system  and the peer synchronization program on the personal computer system  perform the necessary operations to synchronize information stored on the two computer systems. The architecture of the synchronization process is described in the U.S. patent application entitled \u201cExtendible Method and Apparatus for Synchronizing Multiple Files On Two Different Computer Systems\u201d with Ser. No. 08\/542,055, filed on Oct. 93, 1995.","The synchronization button  on the communication cradle  operates similar to the application buttons on the personal computer system . Specifically, the synchronization button  on the communication cradle  asserts a hardware interrupt signal to the processor in the personal computer system . The interrupt routine determines that the synchronization button  was pressed and thus starts executing the synchronization program on the portable computer system . Thus, the synchronization button  uses an externally accessible version of the application buttons.",{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 12","b":["1200","1120","1200","1251","1260","1120","1200"]},{"@attributes":{"id":"p-0108","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Ref.#","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["451","Data Terminal Ready (DTR) [output]"]},{"entry":["452","Power output [output]"]},{"entry":["453","Serial Data Input (RXD) [input]"]},{"entry":["454","Ready To Send (RTS) [output]"]},{"entry":["455","Serial Data Output (TXD) [output]"]},{"entry":["456","Clear To Send (CTS) [input]"]},{"entry":["457","Hardware Interrupt Line [input]"]},{"entry":["458","General purpose data input [input]"]},{"entry":["459","Unused"]},{"entry":["460","Electrical Ground"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"To assert a hardware interrupt signal to the processor in the portable computer system , the synchronization button  on the communication cradle  only needs to complete an electrical circuit between the power output connector  and the hardware interrupt line . The hardware interrupt line  is different from the hardware interrupt line used by the application buttons.","The hardware interrupt line  can be used to perform other operations as well.  illustrates a portable computer system coupled to a clip-on modem . The clip-on modem  includes a remote synchronization button  for remotely synchronizing with a companion personal computer. Since a remote synchronization through the clip-on modem  is very different than a local synchronization through a communication cradle , the remote synchronization button  needs to execute a different synchronization program or execute the same synchronization program with different input parameters.","To handle the remote synchronization, the remote synchronization button  can be wired to assert both the hardware interrupt line  and the General purpose data input . In such an embodiment, the interrupt service routine that handles a hardware interrupt associated with the hardware interrupt line  would first check the General purpose data input . If the General purpose data input  is not asserted, then a standard synchronization through the communication cradle  would be performed. However, if the General purpose data input  is asserted, then a special synchronization routine for handling remote synchronizations would be performed.","Although the present invention has been described in terms of specific exemplary embodiments, it will be appreciated that various modifications and alterations might be made by those skilled in the art without departing from the spirit and scope of the invention as set forth in the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The objects, features and advantages of the present invention will be apparent to one skilled in the art, in view of the following detailed description in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10","i":"a "},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10","i":"b "},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10","i":"c "},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
