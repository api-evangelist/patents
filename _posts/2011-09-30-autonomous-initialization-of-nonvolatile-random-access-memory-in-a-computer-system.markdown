---
title: Autonomous initialization of non-volatile random access memory in a computer system
abstract: A non-volatile random access memory (NVRAM) is used in a computer system to store information that allows the NVRAM to autonomously initialize itself at power-on. The computer system includes a processor, an NVRAM controller coupled to the processor, and an NVRAM that comprises the NVRAM controller. The NVRAM is byte-rewritable and byte-erasable by the processor. The NVRAM stores a memory interface table containing information for the NVRAM controller to autonomously initialize the NVRAM upon power-on of the computer system without interacting with the processor and firmware outside of the NVRAM. The information is provided by the NVRAM controller to the processor to allow the processor to access the NVRAM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378133&OS=09378133&RS=09378133
owner: Intel Corporation
number: 09378133
owner_city: Santa Clara
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This patent application is a U.S. National Phase Application under 35 U.S.C. \u00a7371 of International Application No. PCT\/US2011\/054407, filed Sep. 30, 2011, entitled AUTONOMOUS INITIALIZATION OF NON-VOLATILE RANDOM ACCESS MEMORY IN A COMPUTER SYSTEM.","1. Field of the Invention","Embodiments of the invention relate to a computer system; and more specifically, to an autonomous mechanism for initializing non-volatile random access memory.","2. Description of the Related Art","A. Current Memory and Storage Configurations","One of the limiting factors for computer innovation today is memory and storage technology. In conventional computer systems, system memory is typically implemented by dynamic random access memory (DRAM). DRAM-based memory consumes power even when no memory reads or writes occur because it must constantly recharge internal capacitors. DRAM-based memory is volatile, which means data stored in DRAM memory is lost once the power is removed. Further, DRAM devices are typically assembled into a Dual In-Line Memory Module (DIMM), which typically includes an Electrically Erasable Programmable Read-Only Memory (EEPROM) to store Serial Presence Detect (SPD) data. The SPD data contains information about the DIMM size, type, manufacturer, timing, and other information about the memory. The EEPROM (also referred to as \u201cSPD EEPROM\u201d) can be accessible through a System Management Bus (SMbus).","When a computer system boots up, its Basic Input and Output System (BIOS) reads the SPD data of all of the DIMMs in the system, and, based on the SPD data, configures the memory controller to initialize the memory subsystem. The BIOS code heavily depends on the DIMM technology and the memory controller implementation. Whenever a new memory technology is introduced, a different BIOS code needs to be used or it may not work with an existing memory controller. Further, the complexity of the memory initialization is high and the access speed to the SPD data is low. Therefore, it can take several seconds to initialize the system memory.","B. Phase-Change Memory (PCM) and Related Technologies","Phase-change memory (PCM), also sometimes referred to as PCME, PRAM, PCRAM, Ovonic Unified Memory, Chalcogenide RAM and C-RAM, is a type of non-volatile computer memory which exploits the unique behavior of chalcogenide glass. As a result of heat produced by the passage of an electric current, this material can be switched between two states: crystalline and amorphous. Recent versions of PCM can achieve two additional distinct states, effectively doubling memory storage capacity. PCM is one of a number of new memory technologies competing in the non-volatile role with flash memory (also referred to as \u201cflash\u201d). Flash memory has a number of practical problems which these replacements hope to address.","For example, PCM can offer much higher performance in applications where writing quickly is important, in part because the memory element can be switched more quickly, and also because individual bits may be changed to either 1 or 0 without the need to first erase an entire block of cells (as is the case with flash). The high performance of PCM makes it potentially very beneficial in non-volatile memory roles that are currently performance-limited by memory access timing.","Additionally, while PCM devices degrade with use, they degrade much more slowly compared to flash. A PCM device may survive approximately 100 million write cycles. PCM lifetime is limited by mechanisms such as degradation due to GeSbTe (GST) thermal expansion during programming, metal (and other material) migration, and other mechanisms.","In the following description, numerous specific details are set forth. However, it is understood that embodiments of the invention may be practiced without these specific details. In other instances, well-known circuits, structures and techniques have not been shown in detail in order not to obscure the understanding of this description.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","In the following description and claims, the terms \u201ccoupled\u201d and \u201cconnected,\u201d along with their derivatives, may be used. It should be understood that these terms are not intended as synonyms for each other. \u201cCoupled\u201d is used to indicate that two or more elements, which may or may not be in direct physical or electrical contact with each other, co-operate or interact with each other. \u201cConnected\u201d is used to indicate the establishment of communication between two or more elements that are coupled with each other.","Bracketed text and blocks with dashed borders (e.g., large dashes, small dashes, dot-dash, dots) are sometimes used herein to illustrate optional operations\/components that add additional features to embodiments of the invention. However, such notation should not be taken to mean that these are the only options or optional operations\/components, and\/or that blocks with solid borders are not optional in certain embodiments of the invention.","Embodiments of the invention described below provide an autonomous mechanism for initializing non-volatile random-access memory (NVRAM); e.g., a Phase Change Memory and Switch (PCMS). In one embodiment, a first part of the NVRAM stores a Memory interface Table (MIT), which contains information about a second part of the NVRAM (that is, the regions within the NVRAM). The MIT can be read and used by the processor to access the BIOS in the NVRAM. Since the NVRAM is non-volatile, the data in the MIT is retained across power cycles. The use of the MIT eliminates the costs associated with SPD EEPROM and enables fast initialization of NVRAM and the rest of the system. In one embodiment, if the management system of a computer system requires the SPD data of the NVRAM for out-of-band access, an NVRAM controller can create a proxy and provides the SPD data to the management system without needing an SPD EEPROM.","Further, embodiments of the invention enable the use of the NVRAM as a boot and logging device by the system. In one embodiment, some of the regions within the NVRAM stores firmware (such as BIOS code), descriptions of physical characteristics of the NVRAM, an error map, and other data and code. The NVRAM autonomous initialization (i.e., self-initialization) technique described herein does not require BIOS initialization thus enabling the NVRAM to be usable as a boot target. The use of the NVRAM for storing the BIOS also eliminates the need for a BIOS flash and other I\/O attached non-volatile system boot media. By allowing a foot print larger than a conventional BIOS flash, embodiments of the invention allow for further development of system firmware that can store not only a boot sequence but also an embedded (or nested) hypervisor and platform agents. In an embodiment where backward compatibility is desired, a computer system can include an NVRAM as well as a BIOS flash for storing the BIOS boot sequence.","Embodiments of the invention also introduce NVRAM hardware (e.g., an NVRAM controller) that is responsible for performing an initialization sequence. The initialization sequence sets up the NVRAM for read access by the processor. After the NVRAM controller sets up the NVRAM for read access, the NVRAM controller can further configure the NVRAM, based on the data stored in the MIT, and report the information stored in the MIT to the processor. This will allow the processor or system hardware\/firmware (e.g., an NVRAM address decoder) to map the NVRAM address range to the system address range. In one embodiment, the data stored in the MIT is configurable, which means that the size and address range of each NVRAM region can be changed according to actual need of the system.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","130","100","100","130","130","130"]},"In one embodiment, NVRAM  can be configured to implement the roles in a typical platform storage hierarchy as one or more of the following: cache, system memory (also known as main memory, primary memory, executable memory), storage (also known as secondary storage and mass storage), and firmware memory (such as boot memory (also known as BIOS Flash), Trusted Platform Module (TPM) memory, and the like). Platform storage hierarchies with different roles are also contemplated and the application of NVRAM  is not limited to the roles described above.","NVRAM  is distinguishable from other instruction and data memory\/storage technologies in terms of its characteristics and\/or its application in the platform storage hierarchy. For example, NVRAM  is different from:\n\n","NVRAM (e.g., NVRAM ) in one embodiment of the invention has the following characteristics:\n\n","As mentioned above, in contrast to flash memory, which must be rewritten and erased a complete \u201cblock\u201d at a time, the level of granularity at which NVRAM is accessed in any given implementation may depend on the particular memory controller and the particular memory bus or other type of bus to which the NVRAM is coupled. For example, in some implementations where NVRAM  is used as system memory, NVRAM may be accessed at the granularity of a cache line (e.g., a 64-byte or 128-byte cache line), notwithstanding an inherent ability to be accessed at the granularity of a byte, because cache line is the level at which the memory subsystem accesses memory. Thus, when NVRAM is deployed within a memory subsystem, it may be accessed at the same level of granularity as the DRAM (e.g., the \u201cnear memory\u201d) used in the same memory subsystem. Even so, the level of granularity of access to the NVRAM by the memory controller and memory bus or other type of bus is smaller than that of the block size used by flash and the access size of the I\/O subsystem's controller and bus.","NVRAM  may be used as instruction and data storage that has sufficiently short access time requirements to cause little impact on the processors. Here, program instructions and data may be loaded into NVRAM  from deeper, flash\/magnetic\/optical mass storage  prior to being executed by the processors. Moreover, as described in detail below, NVRAM  may be placed on a memory bus and may communicate directly with a memory controller that, in turn, communicates directly with the processors.","The presence of the new memory technology for NVRAM  provides for a wealth of new possibilities. Although discussed at much greater length further below, some of these possibilities are quickly highlighted immediately below.","According to one possible implementation, NVRAM  acts as a total replacement or supplement for traditional DRAM technology in system memory. In one embodiment, NVRAM  represents the introduction of a second-level system memory (e.g., system memory is as a combination of DRAM  and some or all of NVRAM ). As such, the system memory may be viewed as having a near memory part NM A and a far memory part FM . It is appreciated that in different embodiments, a near memory can serve as a memory-side cache (e.g., near memory cache B), a scratch pad, and other roles that are different from the system memory.","According to some embodiments, NVRAM  provides NVRAM storage, which acts as a total replacement or supplement for traditional mass storage, e.g., flash\/magnetic\/optical mass storage . The term \u201ctraditional mass storage\u201d in the application refers to mass storage that is based on optical, magnetic and\/or flash technology, such as disk and flash memory. For simplicity of the discussion, flash\/magnetic\/optical mass storage  is also referred to as traditional mass storage . Thus, the non-volatile mass storage for computing system  may be implemented using NVRAM, flash memory, magnetic storage, or any combination thereof. In an embodiment where NVRAM storage  acts as a total replacement for traditional mass storage , it is not necessary to use storage drivers for block-addressable storage access. The removal of storage driver overhead from storage access can increase access speed and save power. In alternative embodiments where it is desired that NVRAM storage  appears to the OS and\/or applications as block-accessible and indistinguishable from traditional mass storage , emulated storage drivers can be used to expose block-accessible interfaces (e.g., Universal Serial Bus (USB) Bulk-Only Transfer (BOT) 1.0, Serial Advanced Technology Attachment (SATA) 3.0, and the like) to the software for accessing NVRAM storage . That is, the byte addressability of NVRAM  can be used by the storage driver to move blocks of NVRAM storage  and emulate block accessible mass storage without incurring the cost of I\/O interfaces in these alternative embodiments.","According to some embodiments, NVRAM  provides BIOS NVRAM  and TPM NVRAM , Management Engine (ME) firmware , and the like, which act as a total replacement or supplement for firmware memory such as firmware flash . Firmware memory is commonly implemented with flash technology and commonly stores the initial instructions (e.g., BIOS) executed by a processor to initialize key system components during a boot process. Firmware memory can also store system persistent states used by a TPM  to protect sensitive system information (e.g., encryption keys). In one embodiment, the use of NVRAM  for firmware memory removes the need for third party flash parts to store code and data that are critical to the system operations.","It should be understood that NVRAM  can include more or fewer partitions than what is shown in . For example, NVRAM  can include a partition serving as persistent memory. The persistent memory is a type of memory which is byte-addressable directly by processor and I\/O for reads and writes; however, unlike volatile memory, writes to the memory are retained across platform power cycles. In some embodiments wherein flash devices or other non-volatile devices are used for storing the BIOS and\/or TPM, it may be unnecessary to include BIOS NVRAM  and\/or TPM NVRAM  as part of NVRAM .","The choice of memory and storage devices may depend on the type of platform on which the devices are used. For example, in a personal computer, tablet computer, notebook computer, mobile device (e.g., smartphone or PDA), the non-volatile mass storage may be implemented using NVRAM storage  alone, or using NVRAM storage  in combination with flash\/magnetic storage. In other implementations (e.g., large-scale servers), the non-volatile mass storage may be implemented using magnetic storage (e.g., hard drives) or any combination of magnetic storage, flash, and NVRAM storage . In such a case, computer system hardware and\/or software responsible for storage may implement various intelligent persistent storage allocation techniques to allocate blocks of persistent program code and data between the FM \/NVRAM storage  and traditional mass storage  in an efficient or otherwise useful manner. In some embodiments, NVRAM  may become the sole memory\/storage device off chip (i.e., off the processor chip). In some embodiments, instead of the off-chip DRAM , DRAM may be used to provide an on-chip cache (e.g., near memory cache B). These embodiments can be specifically relevant to very small platforms (e.g., smartphone or PDA), where multiple memory classes\/technologies may be cost prohibitive and more transistors (including storage) can be placed on chip.","The NVRAM  may incorporate \u201cwear leveling\u201d algorithms to account for the fact that the storage cells at the far memory level begin to wear out after too many write accesses. Since high cycle count blocks are most likely to wear out in this manner, wear leveling spreads writes across the far memory cells by swapping addresses of high cycle count blocks with low cycle count blocks. Note that most address swapping is typically transparent to the end user because it is handled by hardware, software (e.g., a low level driver or operating system), or a combination of the.","In one embodiment, NVRAM  can be implemented with a non-volatile random access memory such as PCM or, more specifically, PCMS (also known as (PRAM or PCRAM), Ovonic Unified Memory (OUM), (CRAM). Other possible technology choices for far memory include, but are not limited to byte-addressable persistent memory (BPRAM), storage class memory (SCM), universal memory, Ge2Sb2Te5, Programmable metallization cell (PMC), Resistive memory (RRAM), RESET (amorphous) cell, SET (crystalline) cell, PCME, Ovshinsky, ferroelectric memory (also known as polymer memory and poly(N-vinylcarbazole)), ferromagnetic memory (also known as Spintronics, SPRAM (spin-transfer torque RAM), SPRAM (spin tunneling RAM), Magnetoresistive, Magnetic memory, and Magnetic random access memory (MRAM)), and Semiconductor-oxide-nitride-oxide-semiconductor (SONOS, also know dielectric memory).","For convenience of explanation, most of the remainder of the application will sometimes refer to \u201cPCM\u201d or \u201cPCMS\u201d as the technology selection for NVRAM . As such, the terms NVRAM, PCM and PCMS may be used interchangeably in the following discussion. However it should be realized, as discussed above, that different technologies may also be utilized for NVRAM .","Continuing then with a discussion of the system of , in some embodiments, the architecture of computer system  may include multiple processors, although a single processor  is illustrated in  for simplicity. Processor  may be any type of data processor including a general purpose or special purpose central processing unit (CPU), an application-specific integrated circuit (ASIC) or a digital signal processor (DSP). For example, processor  may be a general-purpose processor, such as a Core\u2122 i3, i5, i7, 2 Duo and Quad, Xeon\u2122, or Itanium\u2122 processor, all of which are available from Intel Corporation, of Santa Clara, Calif. Alternatively, processor  may be from another company, such as ARM Holdings, Ltd, of Sunnyvale, Calif., MIPS Technologies of Sunnyvale, Calif., etc. Processor  may be a special-purpose processor, such as, for example, a network or communication processor, compression engine, graphics processor, co-processor, embedded processor, or the like. Processor  may be implemented on one or more chips included within one or more packages. Processor  may be a part of and\/or may be implemented on one or more substrates using any of a number of process technologies, such as, for example, BiCMOS, CMOS, or NMOS.","In one embodiment, the processor  includes an integrated graphics unit  which includes logic for executing graphics commands such as 3D or 2D graphics commands. While the embodiments of the invention are not limited to any particular integrated graphics unit , in one embodiment, the graphics unit  is capable of executing industry standard graphics commands such as those specified by the Open GL and\/or Direct X application programming interfaces (APIs) (e.g., OpenGL 4.1 and Direct X 11).","The processor  may also include one or more cores , although a single core  is illustrated in , again, for the sake of clarity. In many embodiments, core  includes internal functional blocks such as one or more execution units, retirement units, a set of general purpose and specific registers, etc. If core  is multi-threaded or hyper-threaded, then each hardware thread may be considered as a \u201clogical\u201d core as well. The cores  may be homogenous or heterogeneous in terms of architecture and\/or instruction set. For example, some of the cores may be in order while others are out-of-order. As another example, two or more of the cores may be capable of executing the same instruction set, while others may be capable of executing only a subset of that instruction set or a different instruction set.","The processor  may also include one or more caches, such as cache  which may be implemented as a SRAM and\/or a DRAM. In many embodiments that are not shown, additional caches other than cache  are implemented so that multiple levels of cache exist between the execution units in the core(s)  and memory devices A and . For example, the set of shared cache units may include an upper-level cache, such as a level 1 (L1) cache, mid-level caches, such as level 2 (L2), level 3 (L3), level 4 (L4), or other levels of cache, a last level cache (LLC), and\/or different combinations thereof. In different embodiments, cache  may be apportioned in different ways and may be one of many different sizes in different embodiments. For example, cache  may be an 8 megabyte (MB) cache, a 16 MB cache, etc. Additionally, in different embodiments the cache may be a direct mapped cache, a fully associative cache, a multi-way set-associative cache, or a cache with another type of mapping. In other embodiments that include multiple cores, cache  may include one large portion shared among all cores or may be divided into several separately functional slices (e.g., one slice for each core). Cache  may also include one portion shared among all cores and several other portions that are separate functional slices per core. In one embodiment, cache  may include a DRAM near memory cache B.","The processor  may also include a home agent  which includes those components coordinating and operating core(s) . The home agent unit  may include, for example, a power control unit (PCU) and a display unit. The PCU may be or include logic and components needed for regulating the power state of the core(s)  and the integrated graphics unit . The display unit is for driving one or more externally connected displays.","In some embodiments, processor  includes an integrated memory controller (IMC)  to provide an interface for communicating with a memory and storage subsystem . More specifically, in one embodiment, IMC  contains logic necessary for reading from, writing to and refreshing DRAM device . IMC  can be on the same chip as processor , or on a separate chip and\/or package connected to processor .","In some embodiments, processor  includes an I\/O subsystem  coupled to IMC . I\/O subsystem  enables communication between processor  and the following serial or parallel I\/O devices: one or more networks  (such as a Local Area Network, Wide Area Network or the Internet), storage I\/O device (such as traditional mass storage , firmware flash , and the like) and one or more non-storage I\/O devices  (such as display, keyboard, speaker, and the like). I\/O subsystem  may include a platform controller hub (PCH) (not shown) that further includes several I\/O adapters  and other I\/O circuitry to provide access to the storage and non-storage I\/O devices and networks. To accomplish this, I\/O subsystem  may have at least one integrated I\/O adapter  for each I\/O protocol utilized. I\/O subsystem  can be on the same chip as processor , or on a separate chip and\/or package connected to processor .","I\/O adapters  translate a host communication protocol utilized within the processor  to a protocol compatible with particular I\/O devices. For traditional mass storage , some of the protocols that I\/O adapters  may translate include Peripheral Component Interconnect (PCI)-Express 3.0, Universal Serial Bus (USB) 3.0, Serial Advanced Technology Attachment (SATA) 3.0, Small Computer System Interface (SCSI), Redundant Array of Inexpensive Disks (RAID) and 1394 \u201cFirewire,\u201d among others. For firmware flash , some of the protocols that I\/O adapters  may translate include Serial Peripheral Interface (SPI), Microwire, among others. Additionally, there may be one or more wireless protocol I\/O adapters. Examples of wireless protocols are Bluetooth 4.0, IEEE 802.11-based wireless protocols, and cellular protocols, among others.","In some embodiments, I\/O subsystem  also includes a Management Engine (ME) , which is a microprocessor (equivalently, a micro-controller) that allows a system administrator to monitor, maintain, update, upgrade, and repair computer system . In one embodiment, a system administrator can remotely configure computer system  through ME  via networks . In one embodiment, the configuration can be stored in a decode table  within processor . Decode table  can be read by IMC  and I\/O subsystem , which then decide where a data access request should be directed.","In some embodiments, processor  includes a Trusted Platform Module (TPM)  to control access to system persistent states, such as secure data, encryption keys, platform configuration information and the like. In one embodiment, these system persistent states are stored in a TPM NVRAM , which can be implemented with PCM-based memory such as PCMS. In the embodiment shown in , TPM NVRAM  is part of NVRAM .","In one embodiment, TPM  is a secure micro-controller with cryptographic functionalities. TPM  has a number of trust-related capabilities; e.g., a \u201cseal\u201d capability for ensuring that data protected by a TPM is only available for the same TPM. TPM  can protect data and keys (e.g., secrets) using its encryption capabilities. In one embodiment, TPM  has a unique and secret RSA key (which is generated based on the RSA algorithm developed by Ron Rivest, Adi Shamir and Leonard Adleman), which allows it to authenticate hardware devices and platforms. For example, TPM  can verify that a system seeking access to data stored in computer system  is the expected system. TPM  is also capable of reporting the integrity of the platform (e.g., computer system ). This allows an external resource (e.g., a server on a network) to determine the trustworthiness of the platform but does not prevent access to the platform by the user. In one embodiment, TPM  includes an NVRAM interface to communicate with NVRAM .","In the embodiment of , ME  and TPM  are part of processor  in a system-on-a-chip (SOC) configuration. The SOC configuration is suitable for mobile platforms and other portable systems. In alternative embodiments, ME  and TPM  can be on one or more chipsets outside of but coupled to processor . These alternative embodiments can be suitable for server platforms.","It should be understood that a computer system can utilize NVRAM  for system memory, mass storage, firmware memory and\/or other memory and storage purposes even though its processor does not have all of the above-described components of processor , or has more components than processor .","In one embodiment, computer system  includes a NVRAM interface  to control data access to NVRAM . NVRAM interface  is coupled to IMC  and I\/O subsystem . NVRAM interface  can read the configuration data from decode table , or alternatively, can rely on the decoding results passed from IMC  and I\/O subsystem . In an embodiment where NVRAM  is implemented with PCMS, NVRAM interface  is a PCMS interface that performs byte-level access with protocols consistent with the PCMS technology. Although IMC  and NVRAM interface  can be two discrete parts (as shown in  with a dotted line separating the two parts), in some embodiments IMC  and NVRAM interface  can be implemented as one combined controller to control the access to memory and storage.","In , NVRAM interface  is shown connected to FM , NVRAM mass storage  and BIOS NVRAM  using three separate lines. This does not necessarily mean, however, that there are three separate physical buses or communication channels connecting NVRAM interface  to these portions of the NVRAM . Rather, in some embodiments, a common memory bus or other type of bus is used to communicatively couple the NVRAM interface  to the FM , NVRAM mass storage , and BIOS NVRAM . For example, in one embodiment, the three lines in  represent a bus, such as a memory bus (e.g., a DDR3, DDR4, etc.) over which NVRAM interface  implements a transactional protocol to communicate with NVRAM . NVRAM interface  may also communicate with NVRAM  over a bus supporting a native transactional protocol such as a PCI express (PCI-E) bus, desktop management interface (DMI) bus, or any other type of bus utilizing a transactional protocol.","In some embodiment, NVRAM  can be coupled to processor  via a high-speed link that follows the same protocol as the inter-processor protocol (e.g., HyperTransport 3.0, Quick-Path Interconnect (QPI) 1.1 and its variants, and the like). In these embodiments, NVRAM interface  can communicate with NVRAM  using the protocols defined for these high-speed links.",{"@attributes":{"id":"p-0056","num":"0069"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2"],"b":["200","130","280","130","230","200","210","220","210","110","238","138","130","152","162"]},"In one embodiment, NVRAM  stores a memory interface table (MIT) . MIT  contains information of NVRAM  that allows NVRAM  to be autonomously initialized at system power-on. The detailed content of MIT  is described later in greater detail with reference to .","In one embodiment, NVRAM  is partitioned into a number of regions to store data that can be used at system power-on (e.g., initialization data and BIOS) and during normal operation of the system (e.g., system memory and persistent data storage). In one embodiment, NVRAM  also includes an NVRAM controller  that can set up NVRAM  for access by processor . NVRAM controller  further includes an NVRAM address decoder  to convert addresses between the system address space (used by processor ) and the NVRAM address space.","In one embodiment, NVRAM  is accessible by ME . In the embodiment of , ME  is an integrated microprocessor (equivalently, a micro-controller) that can be powered-on independently of processor . In one embodiment, a main power rail  supplies power to processor , ME  and memory and storage subsystem . Additionally, ME  and NVRAM  receive an independent source of power from a standby power rail . When main power rail  fails or otherwise does not provide power, ME  can receive power from standby power rail  and access ME firmware  () in NVRAM  to become fully operational independent of the power status of processor  and the rest of the platform.","In an alternative embodiment, NVRAM  can be accessible by a micro-controller (e.g., TPM  of ) other than ME . This micro-controller is coupled to standby power rail  and can be powered-on independently of processor . When main power rail  fails or otherwise does not provide power, this micro-controller can receive power from standby power rail  and access the associated firmware (e.g., TPM firmware ) in NVRAM  to become fully operational. This micro-controller can be part of processor , can be on a chipset outside of but coupled to processor , can be part of I\/O subsystem , or can be outside of I\/O subsystem . With this micro-controller or ME , computer system  or at least part of computer system  can still be functional (using the firmware in NVRAM ) even when main power rail  fails to provide power.",{"@attributes":{"id":"p-0061","num":"0074"},"figref":["FIG. 3","FIG. 3"],"b":["130","130","240","240","310","310","370","321","322","375","380","130","385","130","390","130","310","320","330","340","350","360","320","360","320","360"]},"As described above, the NVRAM regions store information such as error maps  and redundant regions  that can be used for error recovery. For example, NVRAM  may contain corrupted data in any of its regions and\/or MIT . The corruption can prevent access to data vital to self-initialization of the system. In order to work around this issue, NVRAM  maintains error maps  of known bad locations and redundant regions  containing copies of vital data such as MIT , system configuration data, and the like. NVRAM controller  can identify corrupted areas of NVRAM  using error maps  and reconfigure NVRAM  utilizing redundant regions  to exclude the corrupted areas from use.","In one embodiment, NVRAM  includes one or more NVRAM controllers . NVRAM  maintains vital system configuration data (e.g., as part of the system configuration data stored in firmware region ) relating to how NVRAM controller  (or NVRAM controllers ) and NVRAM  are connected to the system. The vital system configuration data allows computer system  to be configured to its state prior to a power cycle of the system (which would otherwise cause system to lose such configuration information). Examples of the vital system configuration data include, but are not limited to: NVRAM controller identification data, interleave information across NVRAM controllers , locations of NVRAM controllers  and DIMMs relative to the system topology, etc.","In an embodiment where NVRAM  includes multiple NVRAM controllers , one of the multiple NVRAM controllers  operates as a boot agent. In such an environment, processor  needs to know which NVRAM controller  is the target for boot. This can be accomplished by a hardware protocol that allows the platform to query all of NVRAM controllers . The one NVRAM controller  that is boot-capable will respond to the query, advertising its capability as a boot agent.","In one embodiment, MIT  is read during an autonomous initialization process of NVRAM  at boot time. After NVRAM  is initialized, the BIOS stored in NVRAM  can be accessed by processor  to execute BIOS code, such as pre-EFI (Pre-Extensible Firmware Interface, also known as PEI) BIOS code. The PEI BIOS code is responsible for the initial system configuration, such as the initialization of processor, chipset, processor and chipset interconnects (e.g., HyperTransport 3.0, Quick-Path Interconnect (QPI) 1.1, as well as memory and storage subsystems). The PEI BIOS code is also responsible for interleaving memory and handing off to the higher-level BIOS modules called Driver Execution Environment (DXE), as defined in the Unified EFI (UEFI) standard (e.g., UEFI specification version 2.3.1).","It should be understood that the use of MIT  for autonomous initialization of NVRAM  is independent of the configuration of memory and storage subsystem . More specifically, NVRAM  can store MIT  and the corresponding regions regardless whether memory and storage subsystem  includes DRAM  or additional memory devices, such as block-addressable non-volatile devices (e.g., flash\/magnetic\/optical storage device). In the following description, these alternative embodiments of computer system  are collectively referred to as the \u201cvariants of computer system .\u201d",{"@attributes":{"id":"p-0067","num":"0080"},"figref":["FIG. 4","FIG. 4","FIG. 2","FIG. 2","FIG. 2","FIG. 4"],"b":["400","130","400","200"]},"In one embodiment, NVRAM  starts an autonomous initialization process at system power-on (block ). When computer system  is powered on (block ), a power-on reset signal is generated to reset processor  as well as NVRAM  (block ). Referring also to , NVRAM controller  initializes device-specific initialization sequences  to make NVRAM  (in particular, MIT ) readable by the NVRAM controller  (block ), such that MIT  can be read by NVRAM controller  in a device agnostic manner. (Here, \u201cdevice agnostic manner\u201d means that NVRAM controller  does not need additional information regarding what kind of NVRAM it is trying to read as long as NVRAM controller  has access to device-specific initialization sequences . If there are any errors in NVRAM  (as indicated by error maps ), NVRAM controller  accounts for these errors by replacing error blocks with redundant blocks in redundant region  (block ). NVRAM controller  then performs device-specific hardware initialization to initialize NVRAM  (block ). This hardware initialization allows the entire NVRAM  behind NVRAM controller  to be accessible in a power and performance optimized mode. NVRAM controller  then provides the MIT  data to processor  and sets up NVRAM  for processor  access (block ). At this point, NVRAM address decoder  is also set up to convert addresses in the system address space to addresses in the NVRAM address space. The initialization operations described above in blocks - is autonomous, which means that NVRAM  is initialized without any interactions or any help from processor , firmware, or logic circuits outside of NVRAM . Processor , firmware, or logic circuits outside of NVRAM  does not need to run prior to the autonomous initialization of NVRAM . The autonomous initialization is performed before the BIOS is accessed and run for platform boot. In an embodiment where the BIOS is stored in NVRAM , the BIOS is accessible only after the NVRAM  is initialized according to the operations described above in blocks -.","Subsequently, processor  executes a power-on reset vector, which is directed to NVRAM controller  (block ). As NVRAM  has already been set up for processor access, processor  can fetch the BIOS in NVRAM  and execute the BIOS to boot up the rest of computer system . Processor  then continues the boot process from this point (block ); e.g., by initializing the other processors , DRAM , I\/O devices (e.g., I\/O devices  and other I\/O interfaces, if any), and booting up the OS.","The techniques shown in the flow diagram of  can be implemented using instructions and data stored on non-transitory machine-readable or computer-readable media, such as non-transitory machine-readable or computer-readable storage media (e.g., magnetic disks; optical disks; random access memory; read-only memory; flash memory devices; and phase-change memory).","Embodiments of the invention may also be provided as a computer program product which may include a non-transitory machine-readable medium having stored thereon instructions which may be used to program a computer (or other electronic device) to perform a process. The non-transitory machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnet or optical cards, propagation media or other type of media\/machine-readable medium suitable for storing electronic instructions. Embodiments of the invention may also be downloaded as a computer program product, wherein the program may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection).","While the invention has been described in terms of several embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described, can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may best be understood by referring to the following description and accompanying drawings that are used to illustrate embodiments of the invention. In the drawings:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
