---
title: Translating queries to representational state transfer (REST)
abstract: Query expressions, such as LINQ (language integrated queries) queries, are enabled to be translated to URIs (uniform resource indicators) that may be used to query data sources at REST (representational state transfer) interfaces. A compiler is configured to convert a query into an expression tree. An expression tree normalizer is configured to normalize the expression tree into a normalized expression tree. A resource bound expression tree generator is configured to transform the normalized expression tree into a resource bound expression tree. A URI generator is configured to translate the resource bound expression tree into a URI.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08255410&OS=08255410&RS=08255410
owner: Microsoft Corporation
number: 08255410
owner_city: Redmond
owner_country: US
publication_date: 20090327
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/120,991, filed on Dec. 9, 2008, which is incorporated by reference herein in its entirety.","Computer systems may be coupled together in various ways to enable communications between them, including being coupled together in networks such as local area networks (LANs), wide area networks (WANs), or combinations of networks, such as the Internet. Data may be transferred (e.g., copied or moved) between computer systems in various ways. For instance, an application executing at a first computer system may generate a query, which is a request for particular data. The query may be transmitted to a second computer system, which contains or has access to a data source containing the desired data. The second computer system responds to the query by transmitting the requested data to the first computer system.","Currently, applications and services are being developed with a common set of characteristics that are similar to those that enable the scale of the World Wide Web. These characteristics include the use of REST (representational state transfer) interfaces for accessing resources, a URI (Uniform Resource Identifier) namespace that identifies the resources, simple payload formats or representations, and a stateless request-response interaction model. These applications and services enable web-based data sources to be accessed in a more efficient manner.","An example of such an application is the Microsoft\u00ae .NET Framework published by Microsoft Corporation of Redmond, Wash. The .NET Framework is a software framework providing a large library of coded solutions. The ADO.NET Data Services of the .NET Framework provide rules to expose an HTTP (hypertext transfer protocol) interface for a data source to receive queries, as well as an implementation of those rules in the form of a library or framework that developers may use to create services. Data of such a data source can be accessed through such an interface using URIs.","Language integrated query (LINQ) is a Microsoft\u00ae .NET Framework component that add querying capabilities to programming languages supported by the .NET Framework. When compiled, LINQ queries are converted into an expression tree. The expression tree is subsequently converted into a query that is understandable to a particular targeted datastore. This conversion is performed on a datastore-by-datastore basis, which requires additional effort and increases system complexity.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Methods, systems, and computer program products for querying data sources in a standardized manner are described herein. Query expressions, such as in the form of LINQ (language integrated queries) queries, are enabled to be translated to URIs (uniform resource indicators). The URIs may be used to query data sources having standardized communication interfaces, such as REST (representational state transfer) interfaces. As such, embodiments enable queries to be issued from a wide variety of programming languages in a standardized fashion, to enable resources to be accessed in a more uniform manner at standard data source interfaces.","In a first implementation, a method for translating queries to URIs is provided. An expression tree that is representative of a query is normalized into a normalized expression tree. The normalized expression tree is transformed into a resource bound expression tree. The resource bound expression tree is translated into a uniform resource indicator (URI). In a further example implementation of the method, program code that includes a query (such as a LINQ query) may be compiled to generate the expression tree representative of the query.","In a further implementation, the normalizing may include one or more of: removing a redundant first portion of the expression tree, removing a second portion of the expression tree that is not relevant to a data source to which the query is directed, modifying a third portion of the expression tree into a canonical form, and\/or evaluating a sub-expression of the expression tree.","Still further, the transforming may include one or more of: mapping a first sub-expression of the normalized expression tree to a first (e.g., path) URI component, mapping a second sub-expression of the normalized expression tree to a second (e.g., query option) URI component, and\/or validating the first and second URI components. The validating may include determining whether each URI component mapped from a sub-expression of the normalized expression tree is a legal addition to the resource bound expression tree, and enabling the translating to be performed if each URI component is determined to be a legal addition to the resource bound expression tree. The validating may further include indicating an error if at least one URI component is determined to not be a legal addition to the resource bound expression tree.","Furthermore, the resource bound expression tree may be modified into a revised resource bound expression tree if at least one URI component is determined to not be a legal addition to the resource bound expression tree. The revised resource bound expression tree includes at least one revised sub-expression corresponding to a URI component determined to not be a legal addition to the resource bound expression tree.","In another implementation, a query-to-URI translator system is provided. The query-to-URI translator system includes an expression tree normalizer, a resource bound expression tree generator, and a URI generator. The expression tree normalizer is configured to normalize an expression tree that is representative of a query into a normalized expression tree. The resource bound expression tree generator is configured to transform the normalized expression tree into a resource bound expression tree. The URI generator is configured to translate the resource bound expression tree into a URI. The query-to-URI translator system may optionally include a compiler that is configured to convert a query, such as a LINQ query, into the expression tree representative of the query.","Computer program products are also described herein for translating queries to URIs, and for further embodiments as described herein.","Further features and advantages of the invention, as well as the structure and operation of various embodiments of the invention, are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","The present specification discloses one or more embodiments that incorporate the features of the invention. The disclosed embodiment(s) merely exemplify the invention. The scope of the invention is not limited to the disclosed embodiment(s). The invention is defined by the claims appended hereto.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Embodiments of the present invention relate to data communications in distributed systems. For example,  shows a block diagram of a data communication system , according to an example embodiment. As shown in , system  includes a first computer system , a second computer system , a first storage , a network , and a second storage . An application  executes in first computer system . Storage  is coupled to first computer system . Storage  is coupled to second computer system . First and second computer systems  and  are communicatively coupled by network . System  is configured to enable resources to be transferred between first and second computer systems  and .","First and second computer systems  and  may each be any type of computing device, including a desktop computer (e.g., a personal computer), a server, a mobile computer or computing device (e.g., a Palm\u00ae device, a RIM Blackberry\u00ae device, a personal digital assistant (PDA), a laptop computer, a notebook computer, etc.), or other type of computer system. Storage  and storage  may each include one or more of any type of storage mechanism to store content (e.g., objects), including a hard disk drive, an optical disc drive, a memory device such as a RAM device, a ROM device, etc., and\/or any other suitable type of storage medium.","Network  may include one or more communication links and\/or communication networks, such as a PAN (personal area network), a LAN (local area network), a WAN (wide area network), or a combination of networks, such as the Internet. First and second communication links  and , which respectively couple first and second computer systems  and  to network , may include any number of communication links, including wired and\/or wireless links, such as IEEE 802.11 wireless LAN (WLAN) wireless links, Worldwide Interoperability for Microwave Access (Wi-MAX) links, cellular network links, wireless personal area network (PAN) links (e.g., Bluetooth\u2122 links), Ethernet links, USB links, etc.","Application  may issue a query for a resource (e.g., data). The resource may be accessible as data  contained in storage  at second computer system . To obtain the resource, first computer system  may transmit the query from first computer system  in a first communication signal . For example, first computer system  may contain an agent (e.g., a \u201cclient\u201d agent) configured to handle transmission of queries. First communication signal  is transmitted through a first communication link , network , and a second communication link , and is received by second computer system . First communication signal  may be transmitted in any form, including in the form of a stream of packets (e.g., IP packets).","Second computer system  processes the request received in first communication signal . For example, second computer system  may include an agent (e.g., a \u201cserver\u201d agent) configured to process received queries. Second computer system  retrieves data  from storage , which may contain a database or other data source. Second computer system  generates a second communication signal , which is a response signal that includes data . Second communication signal  is transmitted through second communication link , network , and first communication link , and is received by first computer system . Application  receives data  included in second communication signal , which may be stored in storage  (as indicated by dotted lines in ). Second communication signal  may be transmitted in any form, including in the form of a stream of packets (e.g., IP packets).","Currently, applications and services are being developed that include the use of REST (representational state transfer) interfaces for accessing resources and a URI (Uniform Resource Identifier) namespace that identifies the resources. These applications and services enable web-based data sources to be accessed in a more efficient manner. For example, second computer system  in  may be configured to have a REST interface to enable data  to be accessed according a URI.","An example of such an application is the Microsoft\u00ae .NET Framework published by Microsoft Corporation of Redmond, Wash. The .NET Framework is a software framework providing a large library of coded solutions. The ADO.NET Data Services of the .NET Framework provide rules to expose an HTTP (hypertext transfer protocol) interface for a data source to receive queries, as well as an implementation of those rules in the form of a library or framework that developers may use to create services. Data of a data source can be accessed through such an interface using URIs. Second computer system  may be configured according to the ADO.NET Data Services to provide an HTTP interface accessible using URIs.","Language integrated query (LINQ) is a Microsoft\u2122 .NET Framework component that add querying capabilities to supported programming languages. When compiled, a LINQ query may be converted into an \u201cexpression tree\u201d or other representation, such as an IL representation. A LINQ query may be translated directly into executable code or to a data structure representative of the executable code. In the case where the LINQ provider translates the LINQ query to a different format for execution (e.g., SQL, URIs, etc.), the LINQ query may be translated to the data structure representation by the compiler. An expression tree preserves the high level structure of the query and can be examined at runtime. The expression tree is provided to a LINQ provider, which is a data source-specific implementation that adapts the LINQ query to be used with the data source. For instance, during runtime, application  may generate a LINQ query in the form of an expression tree. A LINQ provider at first computer system  may adapt the LINQ query to be used with the data source at first computer system  or second computer system . Many types of data sources may be present. Providers capable of adapting LINQ queries to the many types of data sources may need to be present. The requirement to adapt the expression tree to be used with particular data sources causes additional effort and increases system complexity.","Embodiments of the present invention overcome such deficiencies in conventional data communication systems, enabling queries to be converted into a URI form formatted according to a convention agreed upon between clients and servers that may exchange queries. Examples of such embodiments are described below. Although for purposes of illustration the example embodiments provided below frequently are described with reference to LINQ queries, such embodiments may also apply and\/or be adaptable to other types of queries, as would be known to persons skilled in the relevant art(s) from the teachings herein.","The example embodiments described herein are provided for illustrative purposes, and are not limiting. Furthermore, additional structural and operational embodiments, including modifications\/alterations, will become apparent to persons skilled in the relevant art(s) from the teachings herein.","Embodiments enable queries, such as LINQ queries, to be translated into URIs, a standard addressing form that may be used to access data at REST-based data services, such as the ADO.NET Data Services provided by the Microsoft\u00ae .NET Framework. As a result, developers are enabled to generate applications capable of querying REST data sources according to their native programming language (e.g., a .NET language) without needing to be aware of the underlying URI syntax or semantics. For instance, embodiments are provided for translating LINQ query expressions to URIs that follow a pre-established convention. This enables users to generate applications capable of querying data from a RESTful system via .NET types and query operators.","RESTful systems (systems configured according to the REST architecture) expose data as resources and relationships between resources. In an embodiment, during a LINQ query expression to URI translation, LINQ expressions that are bound to .NET types are translated to LINQ expressions that are bound to types of resources. This process binds a LINQ query expression to REST resources.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 1"],"b":["102","102","202","202","202","102","106","202","202","202","102","202","104","104","202"]},"For example,  shows a flowchart  providing a process for translating LINQ queries to URIs, according to an example embodiment. In an embodiment, a portion or the entirety of flowchart  may be performed by query to URI translator . Other structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described in detail in the following subsections.","A. Example Embodiments for Converting a Query to an Expression Tree","As shown in , flowchart  begins with step . In step , a LINQ query is converted into an expression tree. In embodiments, step  may be performed by query to URI translator  and\/or by a compiler (included or not included in query to URI translator ). For instance, in an embodiment, step  may be performed by a compiler that is separate from query to URI translator . In such an embodiment, step  may be performed during a compile time for an application (e.g., when application  of  is compiled), and steps , , and  may be performed separately from step  (e.g., later in time), in embodiments. For instance, , , and  may be performed one or more times during runtime for the application, in embodiments. For illustrative purposes, step  is described as follows as being performed by a compiler.","For instance,  shows a block diagram of an application compiler system , according to an example embodiment. As shown in , system  includes a compiler . Compiler  may be configured to perform step . As shown in , compiler  receives an application source code , which contains a LINQ query . LINQ query  may be a query expression in application source code  formed of operators and predicates, as would be known to persons skilled in the relevant art(s). An example of LINQ query  is shown as follows (Example Query 1) (represented according to a query comprehension syntax in the C# programming language):",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var query = from o in context.Orders"]},{"entry":[{},"\u2003\u2003\u2003\u2003where o.ID == 5"]},{"entry":[{},"\u2003\u2003\u2003\u2003from od in o.OrderDetails"]},{"entry":[{},"\u2003\u2003\u2003\u2003order by od.Price"]},{"entry":[{},"\u2003\u2003\u2003\u2003select od;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["408","408","408","408"]},{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class Orders {"]},{"entry":[{},"\u2003\u2003DateTime OrderDate;"]},{"entry":[{},"\u2003\u2003IList<OrderDetail> OrderDetails;"]},{"entry":[{},"\u2003\u2003int ID;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Compiler  compiles application source code  to generate a compiled application . When compiling application source code , compiler  converts LINQ query  into an expression tree . Expression tree  includes the high level structure of LINQ query . Techniques for converting LINQ query  into expression tree  are known to persons skilled in the relevant art(s). For instance, example techniques for converting a LINQ query into an expression tree are described in commonly assigned, co-pending U.S. Patent Appl. Publ. No. 2007\/0271233, titled \u201cA Generic Interface For Deep Embedding Of Expression Trees In Programming Languages,\u201d which is incorporated herein by reference in its entirety.","Example Query 1 is shown again as follows, with line number indications added for purposes of illustration:",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var query = from o in context.Orders","line #1"]},{"entry":[{},"\u2003\u2003\u2003\u2003where o.ID == 5","line #2"]},{"entry":[{},"\u2003\u2003\u2003\u2003from od in o.OrderDetails","line #3"]},{"entry":[{},"\u2003\u2003\u2003\u2003order by od.Price","line #4"]},{"entry":[{},"\u2003\u2003\u2003\u2003select od;","line #5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"figref":["FIGS. 5A and 5B","FIGS. 5A and 5B","FIGS. 5A and 5B"],"b":["500","410","402","500","500"]},"One or more nodes and connectors of expression tree  combine to form an implementation of each sub-expression of Example Query 1. For example, in the example of expression tree  shown in , tree portion  shown in  corresponds to line # of Example Query 1, tree portion  shown in  corresponds to line #, tree portion  shown in  corresponds to line #, tree portion  shown in  corresponds to line #, and tree portion  shown in  corresponds to line #. As shown in , tree portion  includes one node and one connector, tree portion  includes six nodes and five connectors, and tree portion  includes seven nodes and seven connectors. As shown in , tree portion  includes four nodes and four connectors, and tree portion  includes four nodes and four connectors. Note that a connector between a first node in a first tree portion and a second node in a second tree portion, such as a connector  shown in  (connecting nodes in tree portions  and ) may be considered to be included in either of the tree portions.","Compiler  may be implemented in hardware, software, firmware, or any combination thereof. For example, compiler  may be implemented as computer program code configured to be executed in one or more processors. Alternatively, compiler  may be implemented as hardware logic\/electrical circuitry.","B. Example Embodiments for Normalizing an Expression Tree","Referring back to flowchart  in , in step , the expression tree is normalized into a normalized expression tree. As described above, in an embodiment, steps , , and  may be performed during runtime for an application (e.g., runtime for compiled application  shown in ), and may be considered to be an embodiment distinct from step . Step  may be performed by query to URI translator  shown in . For instance,  shows a block diagram of a data communication system  that includes a LINQ query to URI translator , according to an example embodiment. LINQ query to URI translator  is an example of query to URI translator  shown in . Data communication system  is similar to data communication system  shown in , with differences described as follows.","As shown in , system  includes first computer system , second computer system , first storage , network , and second storage . In the embodiment of , first computer system  includes a LINQ query to URI translator . LINQ query to URI translator  includes an expression tree normalizer , a resource bound expression tree generator , and a URI generator . In an embodiment, expression tree normalizer  may be configured to perform step .","As shown in , expression tree normalizer  receives an expression tree , which is runtime representation of expression tree  (). Expression tree normalizer  is configured to normalize expression tree  into a canonical form (e.g., a standard form that can be recognized by subsequent pattern matching). This normalizing may include one or more of eliminating language specific constructs (e.g., .NET language constructs) from expression tree , rewriting sub-expressions of expression tree  to canonical form, evaluating all sub-expressions of expression tree  that can be evaluated locally, and\/or further normalization functions. Expression tree normalizer  generates a normalized expression tree . Normalized expression tree  is a canonical LINQ query expression tree that is equivalent to expression tree .","For instance,  shows a block diagram of expression tree normalizer , according to an example embodiment. As shown in , expression tree normalizer  includes an expression tree pruner , an expression tree standardizer , and a sub-expression evaluator .  shows a flowchart  providing a process for normalizing an expression tree (e.g., step  of ), according to an example embodiment. In an embodiment, flowchart  may be performed by expression tree normalizer  shown in . Any one or more steps of flowchart  may be performed in an embodiment, and may be performed in any order. Flowchart  is described as follows.","Flowchart  begins with step . In step , a redundant portion of the expression tree is removed. For instance, in an embodiment, expression tree pruner  may be configured to remove one or more redundant portions of expression tree . Expression tree pruner  may be configured to remove redundant portions of expression tree  to reduce a complexity of expression tree . Note that in an embodiment, step  may alternatively be performed by a resource bound expression tree modifier described further below with respect to .","In step , a portion of the expression tree that is not relevant to a data source being queried is removed or replaced. For instance, in an embodiment, expression tree pruner  may be configured to remove one or more portions of expression tree  that are not relevant to the data source being queried (e.g., the data source at second computer system  in which data  is stored). Expression tree  may contain language specific constructs and\/or sub-expressions that provide no semantic value with respect to the data source being queried, and their removal reduces a complexity of expression tree .","In step , a portion of the expression tree is modified into a canonical form. For instance, in an embodiment, expression tree standardizer  may be configured to modify one or more portions of expression tree  into a canonical form. Expression tree standardizer  may be configured to modify portions of expression tree  that may be expressed in different, but equivalent, forms into common forms. Expression trees may exist that have different forms, but are equivalent, and therefore can be represented by a same URI. Modifying expression tree  into a standardized form simplifies subsequent processing performed by LINQ query to URI translator .","In step , a sub-expression of the expression tree is evaluated. For instance, in an embodiment, sub-expression evaluator  may be configured to evaluate one or more sub-expressions of expression tree . In some cases, expression tree  may include one or more sub-expressions that are capable of being evaluated locally (e.g., at first computer system . Sub-expression evaluator  may evaluate such sub-expressions to further reduce a complexity of expression tree . In some cases, expression tree  may include one or more uncorrelated sub-expressions that are capable of being evaluated locally, and replaced by a new sub-expression that is a constant expression (e.g., represented as a node in the tree).",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIGS. 9A and 9B","FIGS. 5A and 5B","FIGS. 9A and 9B","FIGS. 5A and 5B"],"b":["900","616","610","500","900","500","900","902","910","502","510","500","902","502"]},"In the current example, expression tree normalizer  performed normalization of expression tree , including removing all nodes including a UnaryExpression of type Quote (e.g., according to step  of ), which are extraneous to step  of flowchart  (). Thus, a UnaryExpression node was removed from each of tree portions , , and  to create corresponding tree portions , , and , and two UnaryExpression nodes were removed from tree portion  to create tree portion . Furthermore, expression tree normalizer  swapped operands of a BinaryExpression node of tree portion  so that a MemberExpression node is a left operand and a ConstantExpression node is a right operand (e.g., according to step  of ) in tree portion .","C. Example Embodiments for Generating a Resource Bound Expression Tree","Referring back to flowchart  in , in step , the normalized expression tree is transformed into a resource bound expression tree. In an embodiment, resource bound expression tree generator  may be configured to perform step . As shown in , resource bound expression tree generator  receives normalized expression tree . Resource bound expression tree generator  is configured to generate a resource bound expression tree  based on normalized expression tree . When expression tree  (upon which normalized expression tree  is based) is generated at runtime, the language compilers (e.g., .NET language compilers) bind the query expression to a set of data types (e.g., .NET types) which are the targets of the LINQ query. Because URIs target resources and not data types, resource bound expression tree generator  is configured to translate the data type bound LINQ expression (normalized expression tree ) into an equivalent resource bound expression tree (resource bound expression tree ). The data type-to-URI resource translation performed by resource bound expression tree generator  may be performed using a predetermined mapping of the data type metadata to resource types and relationships.","For instance,  shows a block diagram of resource bound expression tree generator , according to an example embodiment. As shown in , resource bound expression tree generator  includes a sub-expression to URI component mapper , a translation validator , and a resource bound expression tree modifier .  shows a flowchart  providing a process for generating a resource bound expression tree (e.g., step  of ), according to an example embodiment. In an embodiment, flowchart  may be performed by resource bound expression tree generator  shown in . Flowchart  is described as follows.","Flowchart  begins with steps  and , which are described together as follows. In step , a sub-expression of the normalized expression tree is mapped to a path URI component. In step , a sub-expression of the normalized expression tree is mapped to a query option URI component. As shown in , sub-expression to URI component mapper  receives normalized expression tree . In an embodiment, sub-expression to URI component mapper  may be configured to map one or more sub-expressions of normalized expression tree  to a path-related component or a query option-related component of the URI being generated. As shown in , sub-expression to URI component mapper  generates a plurality of URI components . URI components  may be configured as resource bound expression tree  when translation validator  is not present, or when translation validator  validates URI components .","For example, sub-expression to URI component mapper  may use pattern matching to find sub-expressions of normalized expression tree  that can be translated to URI components, including path components of the URI (step ) or query option components of the URI (step ). In general, URI components are made up of two categories: (1) segments of the URI path, and (2) query options. Thus, in addition to resource bound expression tree generator  binding the LINQ query expression to specific resource types, mapper  may be configured to identify a specific type of URI component represented by a specific sub-expression, a path URI component or query option URI component. This pattern matching may be driven by metadata mapping generated from the underlying CLR (common language runtime) types and a set of data service (e.g. Microsoft\u00ae ADO.NET Data Services) rules. For example, in addition to type mappings, a cardinality of relationships may be used by mapper  to determine what kind of URI component a sub-expression is mapped to, and what is legal in context of the URI component.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIGS. 12A and 12B","FIGS. 9A and 9B","FIGS. 12A and 12B","FIGS. 12A and 12B"],"b":["1200","618","1002","900","1200","900","1200","1202","1206","1208","1210","1202","902","904","900","1206","1210","906","910","900"]},"In the current example, sub-expression to URI component mapper  performed a mapping of normalized expression tree , including a translation of a sub-expression with the root node of MethodCallExpression (tree portion ) into a key predicate for a source node of ResourceSetExpression (tree portion ), because the predicate is testing equality between the key property and a constant, to generate tree portion  shown in . Furthermore, sub-expression to URI component mapper  translated the sub-expression with the root node of MethodCallExpression (tree portion ) into a ResourceSetExpression node because it projects a non-primitive property of the source ResourceSetExpression, to generate tree portion  as shown in . Still further, sub-expression to URI component mapper  translated the MethodCallExpression node and its associated selector LambdaExpression node (tree portion ) into an OrderByQueryoptionExpression node for a source ResourceSetExpression node, to generate tree portion  shown in . Still further, sub-expression to URI component mapper  translated a MethodCallExpression node (tree portion ) into a ResourceSetExpression node, because it projects a non-primitive property of the source ResourceSetExpression node, to generate tree portion  shown in .","Referring back to , in step , the URI components are validated. Step  is optional. In an embodiment, translation validator  may be present to validate URI components  generated by mapper . Translation validator  may be configured to validate that each URI component generated by mapper  is a legal addition to the resource bound expression tree being generated by resource bound expression tree generator . If translation validator  determines that a URI component is not legal, an error may be indicated and\/or the resource bound expression tree may be identified as a candidate for being rewritten (as described in further detail below).","Translation validator  may be configured in various ways to validate URI components. For example, in an embodiment, translation validator  may perform flowchart  shown in . In step , whether each URI component mapped from the normalized expression tree is a legal addition to the resource bound expression tree is determined. Each URI component received in URI components  is analyzed to determine whether the URI component is a legal addition to the resource bound expression tree being generated by resource bound expression tree generator .","For instance, the following example of a LINQ query (Example Query 2) includes sub-expressions which can each be translated to a corresponding URI component, which can be combined to form a complete URI:",{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var query = from c in myDataServiceContext.Customers"]},{"entry":[{},"\u2003\u2003\u2003\u2003where c.CustomerId == \u2018ALFKI\u2019"]},{"entry":[{},"\u2003\u2003\u2003\u2003from o in c.Orders"]},{"entry":[{},"\u2003\u2003\u2003\u2003where o.Quantity > 100"]},{"entry":[{},"\u2003\u2003\u2003\u2003order by o.OrderDate"]},{"entry":[{},"\u2003\u2003\u2003\u2003select o;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"300","figref":"FIG. 3"},{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"http:\/\/host\/myservice\/Customers(\u201cALFKI\u201d)\/Orders( )?$filter=Quantity gt"},{"entry":"100&$orderby=Price"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var query = from c in myDataServiceContext.Customers"]},{"entry":[{},"\u2003\u2003\u2003\u2003where c.CustomerId == \u2018ALFKI\u2019 && c.Age > 40"]},{"entry":[{},"\u2003\u2003\u2003\u2003order by c.Name"]},{"entry":[{},"\u2003\u2003\u2003\u2003from o in c.Orders"]},{"entry":[{},"\u2003\u2003\u2003\u2003where o.Quantity > 100"]},{"entry":[{},"\u2003\u2003\u2003\u2003select new {o.Quantity, o.OrderDate};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Thus, in an embodiment, if translation validator  determines a URI component that allows a predicate over a property other than a key property, includes an operator other than an equality operator, and\/or includes an illegal sub-expression mapping, the URI component is determined to not be an legal addition to the resource bound expression tree being generated by resource bound expression tree generator .","In step , the resource bound expression tree is enabled to be translated into a URI if in step  it is determined that each URI component is a legal addition to the resource bound expression tree. Referring to , if translation validator  determines that each URI component received in URI components  is a legal addition, translation validator  generates resource bound expression tree , which is a combination of the received URI components.","In step , the resource bound expression tree is modified into a revised resource bound expression tree and\/or an error is indicated if in step  it is determined that each URI component is not a legal addition to the resource bound expression tree. If translation validator  determines that each URI component received in URI components  is a not a legal addition, in an embodiment, translation validator  may generate an error signal . In addition, or alternatively, translation validator  may provide the received URI components to resource bound expression tree modifier  as an invalid resource bound expression tree . Resource bound expression tree modifier  may be configured to rewrite\/convert invalid resource bound expression tree  into a revised, valid resource bound expression tree, which may be output from resource bound expression tree modifier  as resource bound expression tree .","To generate a legal version of invalid resource bound expression tree , resource bound expression tree modifier  may be configured to attempt to convert the one or more of the sub-expressions corresponding to the URI components determined to not be legal additions into equivalent, legal forms, that are pattern matching sub-expressions. For example, intermediate projections which introduce transient types can be eliminated if doing so does not change the meaning of the original LINQ query expression. If resource bound expression tree modifier  is unsuccessful in performing a conversion for one or more of the sub-expressions, an error may be indicated (by resource bound expression tree modifier  or by translation validator ).",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 14","FIGS. 12A and 12B","FIG. 14"],"b":["1400","618","1006","1200","1400","1200","1400","1402","1406","1408","1410","1202","1206","1208","1210","1200"]},"In the current example, resource bound expression tree modifier  performed a modification of resource bound expression tree , including removing a ResourceSetExpression node from tree portion  because the type f_AnoymousType0<Order, OrderDetail> was determined not to be a legal entity type by translation validator  based on metadata, to generate tree portion  shown in . Furthermore, if this removal is successful, resource bound expression tree modifier  rewrites an OrderByQueryOptionExpression selector LambdaExpression node (tree portion ) so the node only references the type of the ResourceSetExpression node (tree portion ), to generate tree portion  shown in .","After completion of step , resource bound expression tree  is generated as a complete resource bound LINQ query expression that identifies all of the resources targeted by LINQ query . Resource bound expression tree  still contain sub-expressions which represent operators and simple expressions which can be directly translated to REST URI syntax later (in step ). For example, a LINQ query predicate for a .NET type will be translated to a resource bound key predicate or a filter query option (based on the context of the sub-expression in the original LINQ expression) which is bound to the specific resource type but still contains the sub-expression for the predicate in terms of the native LINQ query expression representation.","D. Example Embodiments for Translating a Resource Bound Expression Tree to a URI","Referring back to flowchart  in , in step , the resource bound expression tree is translated into a URI. In an embodiment, URI generator  may be configured to perform step . As shown in , URI generator  receives resource bound expression tree . URI generator  is configured to translate resource bound expression tree  to a URI, to generate URI . URI  is representative of LINQ query  (), in the form of a URI syntax. In an embodiment, URI generator  is configured to format URI  according to a URI syntax\/convention that is shared between\/commonly understood by first computer system  and second computer system , which may be a standardized URI format (e.g., defined according to the RFC 3986 Standard, published in January 2005 by The Internet Society), a proprietary URI format, or other URI format.","In an embodiment, URI generator  may be configured to translate resource bound expression tree  to a URI by traversing the expression tree of resource bound expression tree , and translating resource bound expression tree  to URI segments and\/or query options, and translating sub-expressions of URI  to specific query option operations.","For example, with regard to Example Query 1 shown above, URI generator  may generate URI  as follows:","http:\/\/base\/myservice\/Orders(5)\/OrderDetails?$orderby=Price","Referring to resource bound expression tree  shown in , URI generator  may generate the above URI from resource bound expression tree  as follows: The \u201chttp:\/\/base\/myservice\/Orders(5)\/\u201d portion of the URI is generated from tree portion , the \u201c\/OrderDetails?\u201d portion of the URI is generated from tree portions  and , and the \u201c$orderby=Price\u201d portion of the URI is generated from tree portion .","URI  may be used to query the data source at second computer system . As shown in , first computer system  includes a network interface , and second computer system  includes a network interface  and a URI query processor . URI  is received by network interface  from LINQ query to URI translator . Network interface  is configured to transmit a query in the form of URI  in a first communication signal  from first computer system . First communication signal  may transmitted from first computer system  through first communication link , network , and second communication link , to second computer system . First communication signal  may be transmitted in any form, including in the form of a stream of packets (e.g., IP packets). Network interface  of second computer system  receives first communication signal .","Network interface  extracts URI  from first communication signal , and URI  is received by URI query processor . URI query processor  is configured to process queries directed to an associated data source (e.g., a database that stores data in storage ) in the form of URIs. For instance, URI query processor  may be configured as a RESTful interface, as would be known to persons skilled in the relevant art(s). URI  may be a request for a resource, such as data  stored in storage  associated with second computer system . In such an example, URI query processor  retrieves data  from storage  based on URI . As shown in , URI query processor  outputs data , which is received by network interface . Network interface  generates a second communication signal , which is a response signal that includes the requested data . Second communication signal  may be transmitted from second computer system  through second communication link , network , and first communication link , and is received by first computer system . Second communication signal  may be transmitted in any form, including in the form of a stream of packets (e.g., IP packets).","Second communication signal  is received by network interface  of first computer system . Second communication signal  includes data . Network interface  extracts data  from second communication signal . The extracted data  may be received by the requesting application (e.g., application  shown in ) and\/or may be stored in storage  (as indicated by dotted lines in ).","Network interfaces  and  may each be any type of network interface (e.g., network interface card (NIC)), wired or wireless, such as an as IEEE 802.11 wireless LAN (WLAN) wireless interface, a Worldwide Interoperability for Microwave Access (Wi-MAX) interface, an Ethernet interface, a Universal Serial Bus (USB) interface, etc.","LINQ query to URI translator , expression tree normalizer , resource bound expression tree generator , URI generator , URI query processor , expression tree pruner , expression tree standardizer , sub-expression evaluator , sub-expression to URI component mapper , translation validator , and resource bound expression tree modifier  may be implemented in hardware, software, firmware, or any combination thereof. For example, LINQ query to URI translator , expression tree normalizer , resource bound expression tree generator , URI generator , URI query processor , expression tree pruner , expression tree standardizer , sub-expression evaluator , sub-expression to URI component mapper , translation validator , and\/or resource bound expression tree modifier  may be implemented as computer program code configured to be executed in one or more processors. Alternatively, LINQ query to URI translator , expression tree normalizer , resource bound expression tree generator , URI generator , URI query processor , expression tree pruner , expression tree standardizer , sub-expression evaluator , sub-expression to URI component mapper , translation validator , and\/or resource bound expression tree modifier  may be implemented as hardware logic\/electrical circuitry.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 15","b":["1500","102","104","1500","1500","1500","1500","1500"]},"As shown in , computer  includes a processing unit , a system memory , and a bus  that couples various system components including system memory  to processing unit . Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS) is stored in ROM .","Computer  also has one or more of the following drives: a hard disk drive  for reading from and writing to a hard disk, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM, DVD ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer. Although a hard disk, a removable magnetic disk and a removable optical disk are described, other types of computer-readable media can be used to store data, such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","A number of program modules may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. These programs include an operating system , one or more application programs , other program modules , and program data . Application programs  or program modules  may include, for example, computer program logic for implementing query to URI translator , compiler , LINQ query to URI translator , expression tree normalizer , resource bound expression tree generator , URI generator , URI query processor , expression tree pruner , expression tree standardizer , sub-expression evaluator , sub-expression to URI component mapper , translation validator , resource bound expression tree modifier , flowchart , flowchart , flowchart , and\/or flowchart  (including any step of flowcharts , , , and ), and\/or any further embodiments as described above.","A user may enter commands and information into the computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to bus , but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device is also connected to bus  via an interface, such as a video adapter . In addition to the monitor, computer  may include other peripheral output devices (not shown) such as speakers and printers.","Computer  is connected to a network  (e.g., the Internet) through a network adaptor or interface , a modem , or other means for establishing communications over the network. Modem , which may be internal or external, is connected to bus  via serial port interface .","As used herein, the terms \u201ccomputer program medium\u201d and \u201ccomputer-readable medium\u201d are used to generally refer to media such as the hard disk associated with hard disk drive , removable magnetic disk , removable optical disk , as well as other media such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","As noted above, computer programs and modules (including application programs  and other program modules ) may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. Such computer programs may also be received via network interface  or serial port interface . Such computer programs, when executed or loaded by an application, enable computer  to implement features of embodiments of the present invention discussed herein. Accordingly, such computer programs represent controllers of the computer .","The invention is also directed to computer program products comprising software stored on any computer useable medium. Such software, when executed in one or more data processing devices, causes a data processing device(s) to operate as described herein. Embodiments of the present invention employ any computer-useable or computer-readable medium, known now or in the future. Examples of computer-readable mediums include, but are not limited to storage devices such as RAM, hard drives, floppy disks, CD ROMs, DVD ROMs, zip disks, tapes, magnetic storage devices, optical storage devices, MEMs, nanotechnology-based storage devices, and the like.","While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be understood by those skilled in the relevant art(s) that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Accordingly, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. Data Communication Systems","III. Example Embodiments","III. Further Example Embodiments","IV. Conclusion"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form a part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the pertinent art to make and use the invention.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 12A and 12B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
