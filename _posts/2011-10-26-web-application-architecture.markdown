---
title: Web application architecture
abstract: A web application architecture can use a wrapper application to provide a virtual machine environment within a web browser and web applications can run on the wrapper application. The wrapper application can provide life cycle management for the web applications and provide other functions such as log in and log out for all of the web applications in the environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384101&OS=09384101&RS=09384101
owner: Apple Inc.
number: 09384101
owner_city: Cupertino
owner_country: US
publication_date: 20111026
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Patent Application No. 61\/511,938, filed Jul. 26, 2011, and this provisional patent application is hereby incorporated herein by reference.","The present invention relates to web applications and in particular to web applications which can provide such services as email services or calendar services or contact services, etc., through the use of a web browser on a client device which interacts with one or more web servers to provide the particular web service.","Web application systems in the prior art allow a user to access and interact with their email through a web browser. For example, web email allows a user to see and interact with their email through the use of a standard web browser rather than an email client. For example, email systems maintained on Microsoft's Exchange Server allow a user to access their email, calendar, and contacts through a web browser on any machine which can be connected to a network, so that the use of Entourage or Microsoft Outlook is not necessary to access email, etc. Internet service providers, such as Comcast, and Internet search providers, such as Google and Yahoo, also allow access to a user's email and other services through a conventional web browser.","Various embodiments of a web application architecture are described herein. In one embodiment, a web application architecture includes a wrapper application which is configured to run on a standard web browser which itself runs on an operating system of a data processing system. A set of applications are configured to run on the wrapper application (for example, each application runs inside an iframe of the wrapper application), and each of the applications in the set of applications is configured to provide data to and from one or more web servers. The one or more web servers can store email data, calendar data, contact data, and other types of data. The wrapper application is configured to provide life cycle management for each application in the set of applications and can provide for switching between applications in the set of applications. The wrapper application can be considered a virtual-machine-like operating system which is running on the web browser which itself is running on another operating system, such as a preemptive multitasking operating system. In one embodiment, the set of applications can include an email application, and a calendar application, and a contact or address book application. In one embodiment, when each application in the set is presented, it is presented as the front most application with the other applications completely hidden or at least partially obscured, depending on the embodiment. In one embodiment, each of the applications, when presented, is presented within the same single web browser window which is provided by the web browser. In one embodiment, calls are transferred, through one or more Application Programming Interfaces (APIs), between the wrapper application and each application in the set of applications. These calls can be transferred when each of the applications is launched and when each of the applications is switched between being front most and not front most. The life cycle management provided by the wrapper application can include the launching and quitting of each application in the set of applications. Moreover, the wrapper application can transfer calls between the wrapper application and the web browser in order to support the running of each of the applications in the set of applications. In one embodiment, each application in the set of applications remains executing when it is not in the front most state (e.g., it is hidden completely or partially or suspended as described herein). In one embodiment, the wrapper application can present a set of icons, each icon representing an application in the set of applications, in response to a call from the web browser and the set of icons can form a palette of available applications to select or switch to.","In one embodiment, a method according to the present invention can include executing a first operating system, executing a web browser on the first operating system, executing a wrapper application on the web browser, and executing at least one application on the wrapper application. The wrapper application an provide life cycle management for the at east one application which can be part of a set of applications, such as an email application, a calendar application, a contact or address book application, etc. In one embodiment, the method can also include transferring at least one call, through an API, between the wrapper application and each application in the set of applications when each application is running or launching or terminating. Further, the method can also include transferring at least one call between the web browser and the wrapper application when, for example, the first application is launched. The transferring of at least one call can be one of issuing, initiating, invoking, or receiving a call or software message through an API.","At least in some embodiments, a machine readable non-transitory storage medium containing executable programming instructions can be used to implement the methods described herein. Also, data processing systems can be configured to operate as described herein, and these data processing systems can include desktop computers, laptop computers, tablet systems, smart phones, embedded devices, and other electronic devices such as other consumer electronic devices.","Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.","The above summary does not include an exhaustive list of all aspects of the present invention. It is contemplated that the invention includes all systems and methods that can be practiced from all suitable combinations various aspects summarized above, and also those disclosed in the Detailed Description below.","Various embodiments and aspects of the inventions will be described with reference to details discussed below, and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However, in certain instances, well-known or conventional details are not described in order to provide a concise discussion of embodiments of the present invention.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification do not necessarily all refer to the same embodiment. The processes depicted in the figures that follow are performed by processing logic that comprises hardware (e.g. circuitry, dedicated logic, etc.), software, or a combination of both. Although the processes are described below in terms of some sequential operations, it should be appreciated that some of the operations described may be performed in a different order. Moreover, some operations may be performed in parallel rather than sequentially.","A web application architecture can utilize a wrapper application which can provide a virtual-machine-like environment or operating system running on a web browser. A set of one or more web applications, such as an email application or a calendar application or a contacts application or another application can run on top of the wrapper application which can provide life cycle management for each of the applications in the set of applications. The wrapper application can allow for each of the applications to continue to execute after they are launched while switching between applications in the set of applications, and this can all be performed within a single web browser window. The wrapper application can provide for a single log in point to authenticate a user for all of the web applications in the set of applications, and the wrapper application can provide for automatic log out in all of the launched web applications once a log out (or expiration of an authentication time period) has occurred in one application. This environment created through this architecture can provide a better user interface for a user because, for example, fewer windows need to be opened and the state and context of each executing web application can be maintained as a user switches between applications without having to open up multiple windows or multiple tabs in a single web browser window. This environment can also allow for notification (e.g., push notifications) to be provided for hidden applications and can allow for application errors to be isolated and recoverable without effecting other applications.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["101","103","104","105","107","106","107","108","109","110"]},"The set of applications  can be web applications or web services applications, such as web email applications, web calendar applications, web contact or address book applications, web document applications (e.g., access to iWork documents), map applications such as applications for navigation or applications for finding a device, such as finding a smart phone, and other applications which can be implemented as a web application through a web browser which is in communication with one or more web servers to exchange data between the web application and the one or more web servers. The user data, such as emails, calendar data, contact data, etc. can be stored on one or more web servers and can be accessed and used through a web browser on a client device. Examples of user interfaces for various web applications are provided in  and are described further below. These applications in the set of applications can operate on one or client devices, such as the client device  shown in  which can have the data processing system hardware , and a client device can have the architecture shown in  and can be a desktop computer or a laptop computer or a tablet system or a smart phone, or a gaming device such as a game console or other consumer electronic devices. The one or more APIs  can provide a variety of calls for functions or operations between the set of applications  and the wrapper application .  provide examples of such APIs and the calls for such APIs, and further background information in connection with APIs is provided in conjunction with . It will be understood that the term transfer or transferring in connection with a call or API includes one of issuing or initiating or invoking or receiving a call or software message through the API. In one embodiment, each of the applications in the set of applications can be written in part or entirely in JavaScript, and in one embodiment, each of the applications can execute, in one embodiment, inside an iframe which runs in the wrapper application  which itself can be written at least in part in JavaScript and which runs on the web browser .","The wrapper application  can provide, in one embodiment, a virtual machine environment for the set of applications  and can run on the web browser  and can transfer calls between the wrapper application on and the web browser through the API .  provides some examples of calls through the API . In one embodiment, the wrapper application owns the URL text entry field in the web browser and uses calls to the web browser to control the URL field and uses calls to the web browser to control the title bar; for example, the wrapper application can, through calls between the wrapper application and the web browser, change the name in the title bar to reflect the currently front most application. Examples of how the wrapper application controls the name in the title bar are shown in . The wrapper application can provide for life cycle management for each application in the set of applications. In one embodiment, this can include launching and quitting each of the applications. Furthermore, the wrapper application can provide other features and functions and operations including switching between applications, and handling errors of an application (e.g., tearing down a misbehaving or crashed application and offering to relaunch the application for a user). Further, in one embodiment the wrapper application can force a shutdown of an inactive or crashed or badly behaving application. Further, the wrapper application can also provide a single log in and single log out point for the user and for all the applications in the set of applications. In one embodiment, the wrapper application may not include certain features of a traditional operating system, such as a kernel, and memory handling, and scheduling of the operations of processes and threads, although in another embodiment, the wrapper application may include these functions or features or a portion of these functions or features of a traditional operating system.","In one embodiment, the wrapper application can also provide for push notification to one or more of the web applications in the set of applications , and can, in one embodiment, allow a push notification to be presented for an application which is not front most through a user interface on the application which is front most in the set of applications . In one embodiment, the wrapper application and the set of applications  operate in a memory space which is defined by the memory space of the web browser and operate within a thread or process which is defined by the web browser's window in which the wrapper application and the set of applications  are running.","Web browser  can be a conventional web browser, such as Internet Explorer from Microsoft, or Safari from Apple Inc. of Cupertino, Calif., or Firefox, or Opera, or other known web browsers. A web browser is a software application program that processes a web page encoded in a markup language, such as HTML; the web page is retrieved by the web browser through one or more URLs (Uniform Resource Locator). The web browser in one embodiment is configured to process, using a layout engine in the web browser, the markup language of the web page into a DOM (document object model) of the web page, and further the web browser can be configured to process a cascading style sheet associated with the web page to present the web page. In one embodiment, the web browser  can use one or more APIs  to interact with the operating system , and these APIs can support calls to the operating system for windowing and networking functions, such as TCP\/IP, etc. as is known in the art.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 2","FIG. 1","FIG. 6","FIG. 16","FIG. 1","FIG. 2","FIG. 2","FIGS. 5A-5D","FIGS. 5A-5D","FIG. 6"],"b":["201","109","110","203","107","109","107","105","107","205","103","103","205","207","607","209","103","211","103","211","103","103"]},"While  shows a method which can be used to get the software stack shown in  to be up and running,  shows a method in one embodiment for the use of that software stack, which includes switching between the applications in the set of applications  which are, in one embodiment, each executing in an iframe within the wrapper application  which itself runs on web browser . In operation , the wrapper application, such as wrapper application  presents icons, representing available applications in the set of applications , in a user interface within a single window of a web browser. An example of such a user interface is shown in  and in . Alternative user interfaces presenting such icons is also shown in . When a user selects one of those icons, this will cause the corresponding application in the set of applications  to launch if not previously launched and will cause that application to be front most. For example, in operation , the wrapper application receives a selection of one of the icons which is referred to as the first application in operation . The selection may be from a user positioning a cursor on the icon or the use tapping on the icon with the user's finger or other inputs known in the art. In response to this selection in operation , the wrapper application launches the first app or application if not previously launched and makes that first app the front most app or application. All other available applications that are not front most are either completely hidden or partially obscured depending upon the implementation of the user interface. In the examples shown in , the other available applications which are not front most are completely hidden and the user can return or switch to those by selecting an icon or other command. In one embodiment, that icon can be referred to as a switcher icon such as the icon  shown in  as well as . The selection of that icon will cause the presentation of the set of icons shown in , or each icon represents the set of available applications for the authenticated user. After the first app or application has been made front most, the user can then interact with it. This is shown in operation  in which the first app receives and processes user inputs and interacts with one or more web servers, such as a calendar server or email server or a contact\/address book server, etc.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 6","FIG. 6"]},"In one embodiment, as shown in operation , the first app is running within an iframe inside the wrapper application  which itself is running within the web browser's single window which is provided by web browser . At any point in time during the use of the first app, the user can decide to switch to one of the other available apps in the set of applications , and this is shown in operation  in which the web browser receives in one embodiment the input to switch applications. For example, the web browser can receive an input to the switcher icon  and can pass through a call that input to the first app which in turn calls the wrapper application  which then presents the icons as in operation  described above. For example, the set of icons again represent the available set of applications and can be presented in a user interface as shown  or in the alternative user interface shown in  or the alternative user interface shown in . As shown in operation , the wrapper application can present, in response to the input to switch received in operation , the icons of the available applications within the same web browser's single window that previously displayed the first app. In other words, the method of  can use the same single web browser window. In one embodiment, the wrapper application causes the complete hiding of the first app when the icons are presented after selection of the switcher icon. For example, if the first app is an email application as shown in  and if the user selects the switcher icon , this causes the presentation of the set of icons shown in  and the email application  is no longer presented within the web browser's single window and it has been completely hidden from view while the set of icons is presented.  shows an alternative user interface in which the previously used application continues to be presented while the set of icons used to switch between applications or select applications is displayed in a region in the web browser's window which can be referred to as a drawer region; similarly,  shows an example of a user interface where the previously used application, such as the first app in the method of , continues to be presented behind the set of icons which are used to select or switch between applications in the set of applications . In operation , the system receives a selection of another application which may be referred to as the second app, which is one of the applications in the set of applications . In response to this selection, the wrapper application launches the second app (if not previously launched) and makes the second app the front most app. Further, the wrapper application will cause all other executing applications to be at least partially hidden or obscured, however, those other applications can, in one embodiment, still remain executing with a saved context and data. So, for example, if a user was entering contact data for a new personal contact and decided, while entering that data to switch to the calendar application or the email application, that new data and the context of that data will remain saved while it is hidden at least partially and those hidden applications continue to execute with the saved context and data, including the context of the text input focus and position of the last input as well as the user data entered. In one embodiment, this may extend even to modal dialogue boxes presented within the last executed application such that the state of those modal dialogue boxes is retained while the application is not front most within the same single web browser window. Also in operation , the set of icons presented by operation  will also be removed so that the user, in one embodiment, sees only the second application or second app while the other apps are at least partially hidden.","An example of operations , , and  will now be provided while referring to . Operation  can, in one embodiment, present the user interface shown in  which presents the icons for a set of applications  which are available to the authenticated user. The presentation of those icons can occur by selecting the switcher icon . It will be assumed that the user was previously using the email web application  as shown in  and decided to switch to the contact web application in the set of applications . This can be performed by selecting the switcher icon . In an alternative embodiment, this could be performed by selecting the set of available applications in the set of applications  through a pull-down menu or other menu or other user interface known in the art. The selection of the switcher icon  causes the presentation of the icons shown in  after the user had been previously using the email application . Then the user can select the contacts icon shown in  to cause the presentation of the user interface of the contacts application  shown in  which, in the context of operation , is the second app which is launched by wrapper application . At this point the user can close the web browser window by selecting a close command or selecting the close button  shown in . Alternatively, the user can decide to log out or sign out by selecting the signout button  shown in . In response, in operation , the wrapper application will cause each executing application to save its data and will then terminate and tear down each launched application and will log out the user for each launched application. In this way, the wrapper application provides a single point for the user to deal with all of the launched applications and to terminate all launched applications and log out of the web services for each of those web applications. In this particular embodiment, this simplifies the user interface and the user's interaction with the variety of web services as it does not require the user to log out of each individual web service.","While the method shown in  shows the use of two applications in the set of applications , it will be appreciated that more applications can be launched and used concurrently and all, in one embodiment, being presented within the same web browser window, without a tab interface, and each of which executes as an iframe or in an iframe within the wrapper application which is running on the web browser in the same web browser window. In one embodiment, the memory space of that web browser window is also allocated to the wrapper application and each application in the set of applications  which are restricted to run within that memory space allocated to that particular web browser window.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIG. 4","FIGS. 5A-5D","FIG. 5B","FIG. 4","FIGS. 5A-5D","FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 11","FIG. 4","FIGS. 8B and 11 through 15"],"b":["103","105","104","503","505","401","401","107","403","405","405","503","407","407","1101","1101","409","813","313","315","401","403","405","407","409","105","411","411","413","103","105"]},"The flowchart of  shows the interaction between a client device running a web browser , which can be the web browser  of  and several other systems such as one or more web servers. In particular, authentication server  can be the setup service  shown in  and the app server  can be any one of the web servers A or B or C shown in . The content distribution network  can be part of the set of servers  or be a separate service or web server which is configured to provide the content of the wrapper application software and the applications in the set of applications  which run on the wrapper application . It will be understood that the application server  is, for example, an email server providing the web mail for the email application  shown in  or alternatively the application server  can be a web server providing data for the contact application  shown in , etc. Hence, application server  can be the email server A in  or can be the calendar server  shown in  or the contact server B shown in  or other web servers that interact with a web application. The method shown in  can begin with the user inputting the URL www.icloud.com, or another URL, into the URL text entry field in the web browser  which can be the web browser  shown in . If the set of applications and the wrapper application have not been previously cached in the web browser's cache, then as shown in , one or more GET requests can be performed by the browser requesting the set of applications and the wrapper application which are returned to the browser as shown in . The wrapper application as shown in  shows a log in user interface, and in response to a proper authenticated log in, the user can then obtain the set of applications after obtaining the wrapper application in response to the first GET request. After the user presents valid authentication or log in data, then the browser  communicates with the authentication server  which can be the setup server  shown in . In particular, referring to , the client device  communicates through one or more networks, such as the Internet  with the setup service  by providing the log in information which can include the user name and password. In response to the valid log in information, the setup server  sends back an authentication token which can be in the form of one or more cookies (which can be marked as SSL and HTTP\u2014only so JavaScript cannot see them) and one or more addresses of the appropriate email servers and other servers which the web applications  use; the addresses in one embodiment can be referred to as a \u201cbag\u201d as shown in . After receiving data from the appropriate web server, an application in the set  presents its user interface (e.g., in the case of an email application in the set of applications , the email app  as shown in  is shown within the web browser's window). This completes the log in process shown in log in sequence  of . The downloaded applications and downloaded wrapper application can in one embodiment be maintained within the web browser's caches so that they do not need to be repeatedly downloaded whenever the browser is relaunched or whenever the main operating system is relaunched or restarted, etc. In another embodiment, the wrapper application and each of the applications in the set of applications  can be downloaded upon each user log in.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIGS. 5A-5D","FIGS. 5A-5D","FIGS. 5A-5D","FIG. 5B","FIGS. 5A-5D","FIGS. 5C-5D"],"b":["103","401","507","509"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 6","FIG. 6","FIGS. 5A-5D"],"b":["103","105","107","605","603","601","601","601","607","607","515"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 7","b":["105","601","601","601","705","605","106","105","709"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 8A","FIG. 16","FIG. 1","FIG. 8A","FIG. 8A"],"b":["801","801","1670","110","801","802","803","801","804","803","107","109","804","105","103","804","806","805","105","804","807","808","809","808","809","804","813","814","804","103","810","103","811","103","812","103","105"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIGS. 11 through 15","FIG. 11","FIG. 12","FIG. 13"],"b":["103","805","106","805","103","103"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 14","FIG. 15"],"b":["103","1501"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 16","FIG. 16"]},"As illustrated in , the system , which is a form of a data processing system, includes the bus(es)  which is coupled with the processing system , power supply , memory , and the nonvolatile memory  (e.g., a hard drive, flash memory, Phase-Change Memory (PCM), etc.). The bus(es)  may be connected to each other through various bridges, controllers, and\/or adapters as is well known in the rt. The processing system  may retrieve stored instruction(s) from the memory  and\/or the nonvolatile memory , and execute the instructions to perform operations as described above. The bus  interconnects the above components together and also interconnects those components to the optional dock , the display controller & display device , Input\/Output devices  (e.g., NIC (Network Interface Card), a cursor control (e.g., mouse, touch screen, touchpad, etc.), a keyboard, etc.), and the optional wireless transceiver(s)  (e.g., Bluetooth, WiFi, Infrared, cellular telephone receiver etc.). The data processing system  may be a handheld computer, a personal digital assistant (PDA), a mobile telephone, a portable gaming system, a portable media player, a tablet or a handheld computing device which may include a mobile telephone, a media player, and\/or a gaming system or other type of consumer electronic devices. As another example, the data processing system  may be a network computer or an embedded processing device within another device.","One or more Application Programming Interfaces (APIs) may be used in some embodiments. An API an interface implemented by a program code component or hardware component (hereinafter \u201cAPI-implementing component\u201d) that allows a different program code component or hardware component (hereinafter \u201cAPI-calling component\u201d) to access and use one or more functions, methods, procedures, data structures, classes, and\/or other services provided by the API-implementing component. An API can define one or more parameters that are passed between the API-calling component and the API-implementing component.","An API allows a developer of an API-calling component (which may be a third party developer) to leverage specified features provided by an API-implementing component. There may be one API-calling component or there may be more than one such component. An API can be a source code interface that a computer system or program library provides in order to support requests for services from an application. An operating system (OS) can have multiple APIs to allow applications running on the OS to call one or more of those APIs, and a service (such as a program library) can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.","In some embodiments the API-implementing component may provide more than one API, each providing a different view of or with different aspects that access different aspects of the functionality implemented by the API-implementing component. For example, one API of an API-implementing component can pr vide a first set of functions and can be exposed to third party developers, and another API of the API-implementing component can be hidden (not exposed) and provide a subset of the first set of functions and also provide another set of functions, such as testing or debugging functions which are not in the first set of functions. In other embodiments the API-implementing component may itself call one or more other components via an underlying API and thus be both an API-calling component and an API-implementing component.","An API defines the language and parameters that API-calling components use when accessing and using specified features of the API-implementing component. For example, an API-calling component accesses the specified features of the API-implementing component through one or more API calls or invocations (embodied for example by function or method calls) exposed by the API and passes data and control information using parameters via the API calls or invocations. The API-implementing component may return a value through the API in response to an API call from an API-calling component. While the API defines the syntax and result of an API call (e.g., how to invoke the API call and what the API call does), the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling (API-calling component) and an API-implementing component. Transferring the API calls may include issuing, initiating, invoking, calling, receiving, returning, or responding to the function calls or messages; in other words, transferring can describe actions by either of the API-calling component or the API-implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant, key, data structure, object, object class, variable, data type, pointer, array, list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.","Furthermore, data types or classes may be provided by the API and implemented by the API-implementing component. Thus, the API-calling component may declare variables, use pointers to, use or instantiate constant values of such types or classes by using definitions provided in the API.","Generally, an API can be used to access a service or data provided by the AI-implementing component or to initiate performance of an operation or computation provided by the API-implementing component. By way of example, the API-implementing component and the API-calling component may each be any one of an operating system, a library, a device driver, an API, an application program, or other module (t should be understood that the API-implementing component and thr API-calling component may be the same or different type of module from each other). API-implementing components may in some cases be embodied at least in part in firmware, microcode, or other hardware logic. In some embodiments, an API may allow a client program to use the services provided by a Software Development Kit (SDK) library. In other embodiments an application or other client program may use an API provided by an Application Framework. In these embodiments the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these embodiments provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations, an API call can report to an application the capabilities or state of a hardware device, including those related to aspects such as input capabilities and state, output capabilities and state, processing capability, power state, storage capacity and state, communications capability, etc., and the API may be implemented in part by firmware, microcode, or other low level logic that executes in part on the hardware component.","The API-calling component may be a local component (i.e., on the same data processing system as the API-implementing component) a component (i.e., on a different data processing system from API-implementing component) that communicates with the API-implementing component through the API over a network. It should be understood that an API-implementing component may also act as an API-calling component (i.e., it may make API calls to an API exposed by a different API-implementing component) and an API-calling component may also act as an API-implementing component by implementing an API that is exposed to a different API-calling component.","The API may allow multiple API-calling components written in different programming languages to communicate with the API-implementing component (thus the API may include features for translating calls and returns between the API-implementing component and the API-calling component); however the API may be implemented in terms of a specific programming language. An API-calling component can, in one embedment, call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug-in provider and another set of APIs from another provider (e.g. the provider of a software library) or creator of the another set of APIs.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 18","FIG. 18"],"b":["1800","1810","1820","1820","1830","1820","1830","1820","1810","1820","1810","1820","1830"]},"It will be appreciated that the API-implementing component  may include additional functions, methods, classes, data structures, and\/or other features that are not specified through the API  and are not available to the API-calling component . It should be understood that the API-calling component  may be on the same system as the API-implementing component  or may be located remotely and accesses the API-implementing component  using the API  over a network. While  illustrates a single API-calling component  interacting with the API , it should be understood that other API-calling components, which may be written in different languages (or the same language) than the API-calling component , may use the API .","The API-implementing component , the API , and the API-calling component  may be stored in a machine-readable non-transitory storage medium, which includes any mechanism for storing information in a form readable by a machine (e.g., a computer or other data processing system). For example, a machine-readable medium includes magnetic disks, optical disks, random access memory; read only memory, flash memory devices, etc. and can be a local storage medium or a storage medium on a remote device that is coupled to a client device by one or more networks.","In  (\u201cSoftware Stack\u201d), an exemplary embodiment, applications can make calls to Services  or  using several Service APIs and to Operating System (OS) using several OS APIs. Services  and  can make calls to OS using several OS APIs.","Note that the Service  has two APIs, one of which (Service  API ) receives calls from and returns values to Application  and the other (Service  API ) receives calls from and returns values to Application . Service  (which can be, for example, a software library) makes calls to and receives returned values from OS API , and Service  (which can be, for example, a software library) makes calls to and receives returned values from both OS API  and OS API Application  makes calls to and receives returned values from OS API .","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE DESCRIPTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not limitation, in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 5A-5D"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
