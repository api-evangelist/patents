---
title: Processing a plurality of requests simultaneously in a web application
abstract: A mechanism is provided for sending a plurality of requests to a server. A set of calls is received in a client from a set of client applications. Each call is for a request to be sent to the server and each call comprises a plurality of parameters. For each call, the client determines whether there is a request identifier in the plurality of parameters. Responsive to the call including the request identifier, the client creates a request using the plurality of parameters. The client sends the request to the server via a request connection. The client then determines whether an acknowledgement that indicates that the server has received the request has been received from the server. Responsive to receiving the acknowledgement, the client processes a next call in the set of calls.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07908346&OS=07908346&RS=07908346
owner: International Business Machines Corporation
number: 07908346
owner_city: Armonk
owner_country: US
publication_date: 20090420
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application relates generally to an improved data processing apparatus and method and more specifically to an apparatus and method for processing a plurality of requests simultaneously in a Web application.","Changing trends in the use of World Wide Web technology and Web design that aim to enhance creativity, communications, secure information sharing, collaboration, and functionality of the Web has had an enormous impact on the Internet. Web applications are much more responsive thanks to Web development techniques, such as Asynchronous JavaScript and XML (Ajax), reverse Ajax, or the like. Web pages that use Ajax are more responsive and interactive because they exchange small amounts of data with the server \u201cbehind the scenes\u201d so that the entire Web page does not have to be reloaded each time there is a need to fetch data from the server. Reverse Ajax (or Comet) leaves open a connection to the server so that the server can send data to the client as soon as it is available.","The more a Web page utilizes techniques such as Ajax and Comet, the more responsive and rich it will be. For instance, a Web page that uses one Ajax request to fetch data for an entire table will not be as up to date or as interactive as a Web page that uses many Comet style connections to fetch data for each row or each cell in the table as soon as new data is available. The problem with using these techniques is that the Hypertext Transfer Protocol (HTTP) 1.1 specification states that \u201cA single-user client should not maintain more than 2 connections with any server or proxy\u201d and this recommendation is followed by most browsers, including Internet Explorer, and the like.","The two connection limit issue means that holding one connection open for Comet can therefore impact performance. The browser may be unable to send a new user-initiated Ajax request while the browser loads, for example, a series of images. Another problem arises if a Web page uses Ajax to retrieve many pieces of information from the server at the same time. Imagine a systems management application that uses Ajax to fetch the status of twenty different machines in a table. The Web page would only be able to retrieve two status values at any given time because of the two connection limit issue.","Ajax and Comet are two very useful techniques that allow for the creation of very rich internet applications. However, the two HTTP connection limit issue means that these techniques have to be used carefully and sparingly at times. Many JavaScript\u2122 libraries exist that utilize Ajax, two major libraries being Prototype and Dojo. Neither toolkit allows more than one outstanding Ajax request from the client at a time. The following paragraph from the Alternatives section of the Comet Wikipedia\u00ae page talks more about alternatives that are available:\n\n","In one illustrative embodiment, a method, in a data processing system, is provided for sending a plurality of requests to a server. The illustrative embodiment receives a set of calls from a set of client applications. In the illustrative embodiment each call is for a request to be sent to the server and each call comprises a plurality of parameters. For each call, the illustrative embodiment determines whether there is a request identifier in the plurality of parameters. The illustrative embodiment creates a request using the plurality of parameters in response to the call including the request identifier. The illustrative embodiment sends the request from the client to the server via a request connection. The illustrative embodiment determines whether an acknowledgement has been received from the server. In the illustrative embodiment the acknowledgement indicates that the server has received the request. The illustrative embodiment then processes a next call in the set of calls in responsive to receiving the acknowledgement.","In other illustrative embodiments, a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program, when executed on a computing device, causes the computing device to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","In yet another illustrative embodiment, a system\/apparatus is provided. The system\/apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which, when executed by the one or more processors, cause the one or more processors to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","These and other features and advantages of the present invention will be described in, or will become apparent to those of ordinary skill in the art in view of, the following detailed description of the example embodiments of the present invention.","The illustrative embodiments provide a mechanism that allows Web developers to send a plurality of requests to a server. No matter how many requests are made to the server at anytime, there will be, at most, two connections open to the server. The illustrative embodiments allow applications to be very rich while at the same time staying under the two connection limit issue while still using browser-native technologies.","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method, or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.","Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, radio frequency (RF), etc.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java\u2122, Smalltalk\u2122, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In addition, the program code may be embodied on a computer readable storage medium on the server or the remote computer and downloaded over a network to a computer readable storage medium of the remote computer or the users' computer for storage and\/or execution. Moreover, any of the computing systems or data processing systems may store the program code in a computer readable storage medium after having downloaded the program code over a network from a remote computing system or data processing system.","The illustrative embodiments are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Thus, the illustrative embodiments may be utilized in many different types of data processing environments including a distributed data processing environment, a single data processing device, or the like. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments,  are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. While the description following  will focus primarily on a single data processing device implementation of a mechanism that processing a plurality of requests simultaneously in a Web application, this is only an example and is not intended to state or imply any limitation with regard to the features of the present invention. To the contrary, the illustrative embodiments are intended to include distributed data processing environments and embodiments in which a plurality of requests may be simultaneously processed in a Web application.","With reference now to the figures and in particular with reference to , example diagrams of data processing environments are provided in which illustrative embodiments of the present invention may be implemented. It should be appreciated that  are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.","With reference now to the figures,  depicts a pictorial representation of an example distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system  may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system  contains at least one network , which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network  may include connections, such as wire, wireless communication links, or fiber optic cables.","In the depicted example, server  and server  are connected to network  along with storage unit . In addition, clients , , and  are also connected to network . These clients , , and  may be, for example, personal computers, network computers, or the like. In the depicted example, server  provides data, such as boot files, operating system images, and applications to the clients , , and . Clients , , and  are clients to server  in the depicted example. Distributed data processing system  may include additional servers, clients, and other devices not shown.","In the depicted example, distributed data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, the distributed data processing system  may also be implemented to include a number of different types of networks, such as for example, an intranet, a local area network (LAN), a wide area network (WAN), or the like. As stated above,  is intended as an example, not as an architectural limitation for different embodiments of the present invention, and therefore, the particular elements shown in  should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.","With reference now to , a block diagram of an example data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system  is an example of a computer, such as client  in , in which computer usable code or instructions implementing the processes for illustrative embodiments of the present invention may be located.","In the depicted example, data processing system  employs a hub architecture including north bridge and memory controller hub (NB\/MCH)  and south bridge and input\/output (I\/O) controller hub (SB\/ICH) . Processing unit , main memory , and graphics processor  are connected to NB\/MCH . Graphics processor  may be connected to NB\/MCH  through an accelerated graphics port (AGP).","In the depicted example, local area network (LAN) adapter  connects to SB\/ICH . Audio adapter , keyboard and mouse adapter , modem , read only memory (ROM) , hard disk drive (HDD) , CD-ROM drive , universal serial bus (USB) ports and other communication ports , and PCI\/PCIe devices  connect to SB\/ICH  through bus  and bus . PCI\/PCIe devices may include, for example, Ethernet adapters, add-in cards, and PC cards for notebook computers. PCI uses a card bus controller, while PCIe does not. ROM  may be, for example, a flash basic input\/output system (BIOS).","HDD  and CD-ROM drive  connect to SB\/ICH  through bus . HDD  and CD-ROM drive  may use, for example, an integrated drive electronics (IDE) or serial advanced technology attachment (SATA) interface. Super  (SIO) device  may be connected to SB\/ICH .","An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system  in . As a client, the operating system may be a commercially available operating system such as Microsoft\u00ae Windows\u00ae XP (Microsoft and Windows are trademarks of Microsoft Corporation in the United States, other countries, or both). An object-oriented programming system, such as the Java\u2122 programming system, may run in conjunction with the operating system and provides calls to the operating system from Java\u2122 programs or applications executing on data processing system  (Java is a trademark of Sun Microsystems, Inc. in the United States, other countries, or both).","As a server, data processing system  may be, for example, an IBM\u00ae eServer System P\u00ae computer system, running the Advanced Interactive Executive (AIX\u00ae) operating system or the LINUX\u00ae operating system (eServer, System p, and AIX are trademarks of International Business Machines Corporation in the United States, other countries, or both while LINUX is a trademark of Linus Torvalds in the United States, other countries, or both). Data processing system  may be a symmetric multiprocessor (SMP) system including a plurality of processors in processing unit . Alternatively, a single processor system may be employed.","Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as HDD , and may be loaded into main memory  for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit  using computer usable program code, which may be located in a memory such as, for example, main memory , ROM , or in one or more peripheral devices  and , for example.","A bus system, such as bus  or bus  as shown in , may be comprised of one or more buses. Of course, the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit, such as modem  or network adapter  of , may include one or more devices used to transmit and receive data. A memory may be, for example, main memory , ROM , or a cache such as found in NB\/MCH  in .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash memory, equivalent non-volatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the illustrative embodiments may be applied to a multiprocessor data processing system, other than the SMP system mentioned previously, without departing from the spirit and scope of the present invention.","Moreover, the data processing system  may take the form of any of a number of different data processing systems including client computing devices, server computing devices, a tablet computer, laptop computer, telephone or other communication device, a personal digital assistant (PDA), or the like. In some illustrative examples, data processing system  may be a portable computing device which is configured with flash memory to provide non-volatile memory for storing operating system files and\/or user-generated data, for example. Essentially, data processing system  may be any known or later developed data processing system without architectural limitation.",{"@attributes":{"id":"p-0043","num":"0043"},"figref":"FIG. 3","b":["302","304","306","308","304","310","302","310","310","312","306","310","302","308"]},"Parameters that may be received by the function within scripting language library  may include a processor (a Uniform Resource Locator (URL) or Java\u2122 class name that will handle the request on the server), the response type to expect (XML, HTML, JavaScript Object Notation (JSON), or the like), a list of parameters to send on the request, a handler in client applications  that may be called when a response is returned from server component , or the like. Another parameter in the request from client applications  that may also be received by the function within scripting language library  is a request identifier (ID). If the request ID is not specified by client applications , scripting language library  may generate a unique ID for the request.","The remaining description of  uses HTTP standard communication mechanisms. In the illustrative embodiments, the HTTP standard communication mechanism to send requests from scripting language library  to server component  in request manager server  is Asynchronous JavaScript and Extensible Markup Language (XML) (Ajax). In the illustrative embodiments, the HTTP standard communication mechanism to receive responses in the scripting language library  from server component  in request manager server  is Comet (or reverse Ajax). However, the illustrative embodiments recognize that any type of Web development technique may be used to create interactive Web applications to send requests or to allow a Web server to send a response to a client without the client explicitly requesting the response without departing from the spirit and scope of the illustrative embodiments.","Scripting language library  maintains, at most, two connections to server component ; request connection  and response connection . On startup, scripting language library  establishes response connection  in order to receive responses from server component . Response connection  is left open until a response is available on server component . When scripting language library  receives a request from client applications , scripting language library  establishes request connection  in order to send the request to server component , creates a request using the various parameters received from client applications , stores a copy of the request in request list  for use when a response is received from server component , and sends the request to the server component  via request connection . Thus, request connection  is only active when requests are sent. Request connection  uses Ajax to send the requests to server component .","Server component  receives the request from scripting language library  and builds a \u201ctask\u201d using the request ID or unique ID, handling the request using any request parameters included with the request. Server component  queues the task in request queue  and then returns an acknowledgment of receiving the request to scripting language library  immediately so that scripting language library  may send more requests to server component . Scripting language library  uses the acknowledgment to begin processing other request to be sent to server component  and waits for the actual response to the requests to be returned on response connection . Thus, upon receiving the acknowledgement from server component , scripting language library  is now able to accept additional requests from other ones of client applications . Server component  then calls one of server side processors  to execute the task as specified in the received request. When the specified one of server side processors  completes execution of the task associated with the request, server component  queues the response from the task in response queue  in order to respond to scripting language library  on response connection  using Comet. Server component  sets the request ID or unique ID in the response header so that the response can be matched to its associated request on scripting language library . Server component  processes the response in response queue  and sends the response to scripting language library .","Scripting language library  receives the response from server component  and uses the request ID or unique ID from the response to find an associated request object in request list . Scripting language library  then calls a function, such as an European Computer Manufacturers Association (ECMA) script (ECMAScript), a JavaScript\u2122, a Jscript\u00ae, or the like, in client applications  that is identified from the request object and passes the response to the handler in client applications . Scripting language library  then opens another response connection  to server component  to wait for another response. If there is a response waiting on server component  when response connection  is established by scripting language library , then server component  returns the response immediately so scripting language library  may process the response. If there are no responses waiting on server component , scripting language library  leaves response connection  open, so that, when an expected response is available on server component , the response may be sent to scripting language library .","Thus, the illustrative embodiment queues requests on the server via a request connection using Ajax. The server builds tasks to process the requests keeping track of the request IDs or unique IDs. When the server completes a task, the response is added to a response queue. When the response queue is processed the response is sent back to the client via a response connection using Comet. The request ID or unique ID is sent back with the response so that it can be used to match the response to its original request. Once the request associated with the request ID or unique ID is found, an associated handler is identified and the response is forwarded to the handler for processing.",{"@attributes":{"id":"p-0050","num":"0050"},"figref":"FIG. 4","b":["408","410","410","1","410","402","408","2","404","408","410","412","3","408","402","416","410","410","4"]},"Server component  receives the request from scripting language library  and builds a \u201ctask\u201d using the request ID or unique ID, handling the request using any request parameters included with the request (step ). Server component  then queues the task in request queue  and builds an acknowledgment of receiving the request to be sent to scripting language library  (step ). Server component  sends the acknowledgement back to scripting language library  on the request connection so that scripting language library  may send more requests to server component  (step ).","Server component  then executes the queued task asynchronously and the task calls the server side processor specified in the parameters of the request, in this example, ClientOneProcessor  (step ). ClientOneProcessor  creates a response to the task (step ), queues the response in response queue , and sends a notification to server component  that the response queue should be processed (step ). Server component  takes the response from response queue  and sets the request ID or unique ID in the response header so that the response can be matched to its associated request in scripting language library  and sends the response to scripting language library  on the response connection (step ). Scripting language library  receives the response from server component  and uses the request ID or unique ID from the response to find an associated request object in the stored list in scripting language library  (step ). Upon obtaining the request from the stored list, scripting language library  formats the response and passes the response to the handler in client application  specified in the request (step ). Scripting language library  then re-establishes a response connection to server component  in order to receive other responses from server component  (step ). If server component  has a response waiting in its response queue, server component  returns the response back to scripting language library  immediately so scripting language library  may process the response and re-establish the response connection. If server component  does not have a response when the response connection is made, server component  maintains the connection to the client until a response is ready to be sent to scripting language library .","In addition to the above described steps, there are other steps that may occur during the process. For example, once scripting language library  receives the acknowledgement from server component  in step , scripting language library  may automatically establish another request connection to server component  if another call has been received from another client application. Additionally, once the server component  queues a response from a task in step , the server component  may queue another response from another request that has completed execution. Additionally, once scripting language library  receives a response to a request from server component  in step , scripting language library  may establish another response connection to server component  to receive other responses from the server.","Thus the illustrative embodiments provide for:\n\n",{"@attributes":{"id":"p-0055","num":"0063"},"figref":"FIG. 5A","b":["502","504","506","506","508","506","510","508"]},"From step , the scripting language library stores a copy of the request as a request object in a list for use when a response is received from the server component (step ) and then sends the request to the server component via the request connection (step ). At this point, the scripting language library determines if an acknowledgement has been received from the server component (step ). If at step  an acknowledgement has not been received, then the operation returns to step  to wait for an acknowledgement. If at step  the scripting language library receives an acknowledgement from the server component, the operation returns to step  so that the scripting language library is ready to receive additional calls from the client applications.",{"@attributes":{"id":"p-0057","num":"0065"},"figref":"FIG. 5B","b":["518","520","520","520","520","522","524","526","518"]},{"@attributes":{"id":"p-0058","num":"0066"},"figref":"FIG. 6A","b":["602","604","606","608","602"]},{"@attributes":{"id":"p-0059","num":"0067"},"figref":"FIG. 6B","b":["610","612","614","616","618","610"]},{"@attributes":{"id":"p-0060","num":"0068"},"figref":"FIG. 6C","b":["620","622","624","620"]},"Thus, the illustrative embodiments provide mechanisms for queuing requests on the server via a request connection. The server builds tasks to process the requests keeping track of the request IDs or unique IDs. When the server completes a task, the response is sent back to the client via a response connection. The request ID or unique ID is sent back with the response so that it can be used to match the response to its original request. Once the request associated with the request ID or unique ID is found, an associated handler is identified and the response is forwarded to the handler for processing.","As noted above, it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment, the mechanisms of the illustrative embodiments are implemented in software or program code, which includes but is not limited to firmware, resident software, microcode, etc.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The invention, as well as a preferred mode of use and further objectives and advantages thereof, will best be understood by reference to the following detailed description of illustrative embodiments when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0012","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0016"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0017","num":"0017"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0018","num":"0018"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0019","num":"0019"},"figref":"FIG. 6C"}]},"DETDESC":[{},{}]}
