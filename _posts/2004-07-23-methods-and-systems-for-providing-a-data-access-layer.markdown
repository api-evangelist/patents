---
title: Methods and systems for providing a data access layer
abstract: A preferred system for providing data access comprises an application program interface configured to delegate a request to at least one service providers also included in the system. The service providers may include a synchronization manager configured to maintain, based upon the request, data consistency between a first server containing the service providers and a second server and a cache manager configured to cache, based upon the request, a portion of a database query. In addition, the service providers may include a pre-fetch service configured to anticipate a database query, perform the anticipated query, and cache the results of the anticipated query, and a security manager configured to determine a restriction on the request based upon a role of a user associated with the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07680797&OS=07680797&RS=07680797
owner: Verizon Data Services LLC
number: 07680797
owner_city: Temple Terrace
owner_country: US
publication_date: 20040723
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND INFORMATION","SUMMARY","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["This application claims the benefit of U.S. provisional application No. 60\/489,988, filed Jul. 25, 2003, the disclosure of which is expressly incorporated herein by reference.","U.S. patent application Ser. No. 10\/898,110, filed on even date herewith in the name of Amit Singh et al. and entitled METHODS AND SYSTEMS FOR PROVIDING CAPABILITY MANAGEMENT AND USER ADMINISTRATION and U.S. patent application Ser. No. 10\/898,111, filed on even date herewith in the name of Tao Yang et al. and entitled METHODS AND SYSTEMS FOR PROVIDING DATA FORM MANAGEMENT, both assigned to the assignee of the present application, the disclosures of which are expressly incorporated herein by reference.","Each of the past three centuries has been dominated by a single technology. The eighteenth century included great mechanical systems ushering in the industrial revolution. The nineteenth century saw the steam engine's development. During the twentieth century, the key technology was information gathering, processing, and distribution. Other developments include worldwide telephone networks, radio and television, the birth and unprecedented growth in the computer industry, and communication satellites.","At the beginning of the twenty-first century, these areas are rapidly converging, and the differences between collecting, transporting, storing, and processing information are quickly disappearing. For example, enterprises with hundreds of offices spread over a wide geographical area routinely expect to inspect the current status of even their most remote office at the push of a button. As capabilities to gather, process, and distribute information grow, the demand for even more sophisticated information processing platforms grows faster.","One such sophisticated platform for building distributed enterprise applications is a Java 2 Platform, Enterprise Edition (J2EE) from Sun Microsystems. J2EE services are performed in a middle tier between a user's machine and an enterprise's databases and legacy information systems. J2EE comprises a specification, reference implementation, and set of testing suites. Its core components include, for example, Enterprise JavaBeans (EJBs), JavaServer Pages (JSPs), and Java servlets. Other Java 2 Platforms include Java 2 Platform, Standard Edition (J2SE) and Java 2 Platform, Micro Edition (J2ME).","EJBs provide a Java environment for developing and running distributed applications. EJBs are written as software modules that contain the business logic of the application. They reside in and are executed in a runtime environment called an \u201cEJB Container,\u201d which provides a host of common interfaces and services to the EJB. There are three types of EJBs: i) session beans that can be used to perform processing; ii) entity beans that can be used to represent data, which can be a row or a table in a database, and iii) message driven beans that can be generated to process Java Messaging Service (JMS) messages. EJBs inherently provide future scalability and also allow multiple user interfaces to be used. For example, both a Web browser and a Java application could be used to access EJBs, or one could be switched for the other at a later date.","JSPs are an extension to the Java servlet technology that provides a simple programming vehicle for displaying dynamic content on a Web page. The JSP is a hypertext markup language (HTML) page with embedded Java source code that is executed in the Web server or application server. The HTML provides the page layout that will be returned to the Web browser, and the Java provides the processing, for example, to deliver a query to the database and fill in the blank fields with the results. The JSP is compiled into bytecode (into a servlet) when first encountered by the server.","Java servlets are Java applications that run in a Web server or application server and provide server-side processing, typically to access a database or perform e-commerce processing. Because they are written in Java, servlets are portable between servers and operating systems. The servlet programming interface (Java Servlet API) is a standard part of J2EE. If a Web server, such as Microsoft's Internet Information Server (IIS), does not run servlets natively, a third-party servlet plug-in can be installed to add the runtime support.","Most enterprise applications developed in Java need to access databases for data storage and retrieval. Furthermore, many of them need to implement cache mechanisms or other database query performance improvements, or need to implement security restrictions for the access to database data. Most applications implement independently what they need specifically for there applications and may also implement these features repeatedly in various components of the same application.","Thus, there is a need for improved systems and methods for providing a data access layer. For instance, there is a need to provide a data access layer to implement cache mechanisms or other database query performance improvements. Furthermore, there is a need for such improved systems and methods to allow applications to implement these features repeatedly in various components of the same application.","In accordance with the current invention, a data access layer method and system are provided that avoid the problems associated with prior data access layer methods and systems as discussed herein above.","In one embodiment according to the present invention, a system for providing data access comprises an application program interface configured to delegate a request to at least one of the following service providers also included in the system, a synchronization manager configured to maintain, based upon the request, data consistency for shared data held in the memory of a first server and a second server, a cache manager configured to cache, based upon the request, a portion of a database query, a pre-fetch service configured to anticipate a database query, perform the anticipated query, and cache the results of the anticipated query, and a security manager configured to determine a restriction on the request based upon a role of a user associated with the request.","In another embodiment according to the present invention, a method for providing data access comprises delegating a request to at least one service provider included in a data access layer, maintaining data consistency between a first server containing the data access layer and a second server if the request is directed toward a synchronization manager, caching, based upon the request, a portion of a database query if the request is directed toward a cache manager, anticipating a database query, performing the anticipated query, and caching the results of the anticipated query if the request is directed toward a pre-fetch service, and determining a restriction on the request based upon a role of a user associated with the request if the request is directed toward a security manager.","In yet another embodiment according to the present invention, a computer-readable medium on which is stored a set of instructions for providing data access, which when executed perform stages comprising delegating a request to at least one service provider included in a data access layer, maintaining data consistency between a first server containing the data access layer and a second server if the request is directed toward a synchronization manager, caching, based upon the request, a portion of a database query if the request is directed toward a cache manager, anticipating a database query, performing the anticipated query, and caching the results of the anticipated query if the request is directed toward a pre-fetch service, and determining a restriction on the request based upon a role of a user associated with the request if the request is directed toward a security manager.","Both the foregoing general description of embodiments according to the present invention and the following detailed description thereof are exemplary and are intended to provide further explanation of the invention as claimed.","Reference will now be made to various preferred embodiments according to this invention, examples of which are shown in the accompanying drawings and described below. In the drawings, the same reference numbers represent the same or similar elements in the different drawings whenever possible.","Consistent with an exemplary embodiment of the present invention, a system for providing data access may comprise an application program interface configured to delegate a request to at least one service provider also included in the system. The service providers may include a synchronization manager configured to maintain, based upon the request, data consistency between a first server containing the service providers and a second server, and a cache manager configured to cache, based upon the request, a portion of a database query. In addition, the service providers may include a pre-fetch service configured to anticipate a database query, perform the anticipated query, and cache the results of the anticipated query, and a security manager configured to determine a restriction on the request based upon a role of a user associated with the request. Consistent with an exemplary embodiment of the present invention, the aforementioned elements of the system for providing data access may comprise, be disposed, or implemented within a computer system , as shown in , as described below. Computer system  is exemplary and other devices and systems may comprise the aforementioned elements and still be consistent with embodiments of the present invention.","As herein embodied and illustrated in , the system for providing data access may comprise a data access layer (DAL) . Elements of a data access layer (DAL)  may comprise an application program interface (API) , an application module , a synchronization manager , a message service , a cache manager , a pre-fetch service , a security manager , a monitoring service , a database utility , and a database . Consistent with an exemplary embodiment of the present invention, the aforementioned exemplary elements comprising system  may comprise, be disposed, or implemented within a server , as shown in , as described below. Server  is exemplary and other devices and systems may comprise the aforementioned elements and still be consistent with embodiments of the present invention.","System  may comprise a fully re-usable \u201cconsolidated framework\u201d for data management that any java-based enterprise application, for example, can use. System  may include a monolithic implementation of some functionalities that are commonly needed in Java-based enterprise applications, for example, including data access, such as cache mechanism, query performance improvement, and some unique features to help better control data access (retrieval, access, control and management). In most applications, these functionalities may be performed disjointedly using different libraries or products. Many enterprise applications developed in J2SE\/J2EE, for example, may benefit from using system , since it may avoid substantial efforts to redevelop the same functionalities over and over again as well as centralizing various data and memory management tasks.","Many enterprise applications developed in J2SE\/J2EE, for example, may need to perform functions including accessing a database for data storage and retrieval. Many of these applications may need to implement functions including a cache mechanism or other database query performance improvements, or may need to implement security restrictions for the access to database data. Many enterprise applications may include subprograms that implement these functions independently, and thus unnecessarily repeat these functions within the same application.","Consistent with embodiments of the present invention, system  may comprise a fully re-usable framework for data access that any Java-based enterprise application, for example, can use. System  may provide a uniform application programming interface, API , by which any Java application, for example, can access its features. Therefore, there may be no need to develop the same features repeatedly in separate applications, which generally requires substantial development effort.","Moreover, generic data access mechanisms may be centralized in system . Thus any code change for further improvement may be localized in this layer. Therefore, any improvement may benefit all application modules, application module  for example, using system . Furthermore, system  may implement some very useful and unique mechanisms. Such mechanisms may include synchronization manager  that may help maintain data coherence among a cluster of related servers or monitoring service  that may monitor the activity of \u201cconnection pools\u201d that may help avoid running out of available connections because of unclosed connections.","Referring to , API  may comprise a common interface for application modules, such as other Java application components, to access system . API  may delegate requests to different service providers in system  such as security manager , pre-fetch service , cache manager , and synchronization manager . Database utility  may provide common functions to access database . Message service  may comprise a layer handling communications among servers, which may be used by synchronization manager . Monitoring Service  may monitor the state of system , and may provide periodic clean up or checkup.","Synchronization manager  may comprise a generic mechanism that may help to maintain data coherence among servers, in particular clustered servers. With respect to data coherence, some shared data may be present in the memory of clustered application servers in many enterprise applications. If the data is only updated in the memory of one server while other servers do not know about the update, this inconsistency of data in memory of multiple servers may cause problems. Instead of using database  for data synchronization, which may adversely affect performance, synchronization manager  receives update notification from one server where the update occurs and propagates the detailed update information to all other interested servers, so that other servers may refresh their data in memory directly. Message service  may comprise a transport layer responsible for propagating the update information among servers.","Cache manager  may cache database query results for display and later repeated retrieval. For example, when an enterprise application performs a database query and displays the result on a browser, it usually displays only the first page because of a huge returned database query result. Cache manager  may cache the several pages (caller specified or default number of pages) of query results adjacent to the page being displayed, thus no database query may be repeated when a user selects to view the next or previous pages. Another way of caching is to cache the database query result with an expiration time. In this way, the query result can be provided to any user who requests it until the expiration time passes. Once it expires, the database query may need to be performed again. This may be useful in the situation where the query result remains unchanged for a period, for instance, non-real-time reports that are updated only periodically. In order to conserve memory, cache manager  may remove old entries in cache when needed or requested.","Pre-fetch service  provides the capability to run database queries in the background and to cache the results even before it is requested to do so. In this way the query result may be returned more quickly when it is requested. This can be particularly useful when the application returns a page of query results to the user on the browser and there is a good chance that the user will click on a hyperlink on the page again, which would incur another database query.","Security manager  may maintain data access control based on roles. A role may comprise an abstraction of a user group where the users have the same permission to access system functionalities or application user data. When a data access request is passed to application module  from a user, the request may be delegated to system , under the scrutiny of security manager . Based on the current role of the user, security manager  may determine the restriction on the requested data access, and then may choose to grant, decline, or revise the request.","Monitoring service  may monitor the state of system  and provide a performance matrix in the form of logs and reports, for example. It also may include running threads to perform periodic clean-ups or health checks. A typical running thread may comprise a thread monitoring the requests for database connections from a connection pool maintained by an application server. One problem may arise when application module  requests database connections from the connection pool for database access, but fails to return the used connection back to the pool. In this case, eventually all connections are taken. Thus, no connections may be available for uses, which may result in the application's failure. In system , the requests and usage of database connections may be recorded, thus allowing monitoring service  to periodically check the state. Furthermore, the monitoring service  may send notifications when connections are nearly running out and close connections that have been idle for a long time to save the application. Monitoring service  may also provide performance metrics on the usage of database connections and other database resources.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["205","215","220","205","210","1","215","225","2","225","230","3","230","235","4","235","205","240","210","240","5","240","245","6","245","250","7","250","255","8","260","9"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3","b":["125","110","110","110","105","1","130","2","130","125","3","125","150","4","125","305","5","110","105","6","105","125","7","125","305","8"]},"As herein embodied and illustrated in  is a diagram of a system architecture for a computer system  with which the invention may be implemented. Consistent with an exemplary embodiment of the present invention, servers, as described above including, server  and , may comprise, be disposed, or implemented within computer system . Although the description may refer to terms commonly used in describing particular computer systems, such as a personal computer, the description and concepts equally apply to other computer systems, such as network computers, workstations, and even mainframe computers having architectures dissimilar to .","Computer system  includes a central processing unit (CPU) , which may be implemented with a conventional microprocessor, a random access memory (RAM)  for temporary storage of information, and a read only memory (ROM)  for permanent storage of information. A memory controller  controls the RAM .","A bus  interconnects the components of computer system . A bus controller  controls the bus . An interrupt controller  receives and processes various interrupt signals from the system components.","Mass storage may be provided by diskette , CD ROM , or hard drive . Data and software may be exchanged with computer system  via removable media such as diskette  and CD ROM . Diskette  inserts into diskette drive  which, in turn, connects to bus  via a controller . Similarly, CD ROM  inserts into CD ROM drive  which, in turn, connects to bus  via controller . Hard disk  is part of a fixed disk drive  that connects to bus  by controller .","User input to computer system  may be provided by a number of devices. For example, a keyboard  and mouse  connect to bus  via controller . In addition, other input devices, such as a pen, a tablet, or speech recognition mechanisms, may connect to bus  and an appropriate controller and software. A direct memory access (DMA) controller  performs direct memory access to RAM . User output may be generated by a video controller  that controls video display .","Computer system  also includes a communications adaptor  that allows the system to be interconnected to additional computing resources via a local area network (LAN) or a wide area network (WAN), such as the Internet, schematically illustrated by bus  and network . Signals traveling through network  can generally be referred to as \u201ccarrier waves\u201d that transport information. Although aspects of the embodiments are herein described as being stored in memory in the form of instructions, those aspects may be stored on other computer-readable media, such as secondary storage devices like hard disks, floppy disks, or CD ROM, or other forms of RAM or ROM, or a carrier wave.","Operation of computer system  is generally controlled and coordinated by operating system software. The operating system controls allocation of system resources and performs tasks, such as memory management, process scheduling, networking, and services, among other things.","It will be appreciated that a system in accordance with an embodiment of the invention can be constructed in whole or in part from special purpose hardware or a general purpose computer system, or any combination thereof. Any portion of such a system may be controlled by a suitable program. Any program may in whole or in part comprise part of or be stored on the system in a conventional manner, or it may in whole or in part be provided in to the system over a network or other mechanism for transferring information in a conventional manner. In addition, it will be appreciated that the system may be operated and\/or otherwise controlled by means of information provided by an operator using operator input elements (not shown) which may be connected directly to the system or which may transfer the information to the system over a network or other mechanism for transferring information in a conventional manner.","The foregoing description has been limited to a specific embodiment of this invention. Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the embodiments disclosed herein. It is intended that the specification and examples be considered as exemplary only, with a true scope of the invention being indicated by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
