---
title: Capturing data from user selected portions of a business process and transferring captured data to user identified destinations
abstract: A graphical user interface (GUI) displays a flow of activities of a business process, including any portion thereof from which capture of data is permitted. The GUI receives, in an operation, at least an indication of a business process portion from which data is to be captured (“sensor”), an identification of an endpoint to which captured data is to be transferred, and a type of the endpoint which identifies (through a mapping) a predetermined software. A sensor may be added any number of times (through a single GUI or though multiple GUIs) by repeatedly performing the operation. Also, a given sensor may be associated with multiple endpoints. Computer(s) executing the business process check whether or not a sensor is present, on execution of the business process portion, and if present, then execute the corresponding predetermined software(s) to transfer data from the sensor directly to the respective endpoint(s).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08473453&OS=08473453&RS=08473453
owner: Oracle International Corporation
number: 08473453
owner_city: Redwood Shores
owner_country: US
publication_date: 20090227
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO PARENT APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation application of U.S. application Ser. No. 11\/282,977 filed on Nov. 18, 2005 now U.S. Pat. No. 7,499,951 by Ralf Mueller et al, entitled \u201cCAPTURING DATA FROM USER SELECTED PORTIONS OF A BUSINESS PROCESS AND TRANSFERRING CAPTURED DATA TO USER IDENTIFIED DESTINATIONS\u201d which is incorporated by reference here in its entirety.","Orchestration enables users to create new applications (typically business processes) from pre-existing applications (typically web services) that execute on different computers that are interconnected by a network, such as the Internet. A description of such a business process (that performs orchestration) may be expressed in an industry-standard language, such as WS-BPEL (Web Services Business Process Execution Language), formerly called BPEL4WS or BPEL. BPEL is being standardized by OASIS (Organization for the Advancement of Structured Information Standards) of Billerica, Mass., USA.","Visual tools to assist users in orchestration display a graphical user interface (GUI) wherein users can drag and drop certain shapes to represent pre-existing applications, and interconnect them. Use of such a tool eliminates the need for users to write software in BPEL. Visual tools that generate BPEL-compliant software include Oracle's BPEL-PM (BPEL Process Manager) 2.0, IBM's WBISF (WebSphere Business Integration Server Foundation) 5.1, Microsoft's BizTalk Server 2004, and SAP's NetWeaver.","A \u201cbusiness activity monitoring\u201d (BAM) process collects data from multiple computers that are processing credit card applications, and displays the data in a user interface called a dashboard. The data may be obtained via a BAMInterceptor class of the type available in Microsoft's BizTalk Server 2002. Microsoft's BAMInterceptor class allows the application to be instrumented in a generic way, so that verbosity and content can be controlled via configuration. For more information, see the URL obtained by replacing $ with \u2018\/\u2019 in the following: hftp:$$msdn.microsoft.com$library$default.asp?url=$library$en-us$sdk$htm$frlrfmicrosoftbiztalkbameventobservationbaminterceptorclass topic.asp","Microsoft describes use of BAM Interceptor as follows (\u201cyou\u201d is the user). In each step of your application where you could have data of interest, you call Interceptor OnStep, provide an identifier for the step, and provide some data or arbitrary object that you are using in your application. You must implement a callback function so when the callback occurs, your callback procedure gets the current step ID and your data object . . . . Microsoft's BAM interceptor decides which data to request at each step, based on a configuration that you can create programmatically. . . . After you create an interceptor instance, you can store it for later use at runtime. You may keep different pre-created interceptors representing different preferences for the data and milestones for BAM. The BizTalk Orchestration Engine accommodates interception, which allows changing what data is collected for BAM at runtime using the Tracking Profile Editor.","Note that Microsoft's BizTalk appears to requires its users (i.e. process designers) to manually modify their source code (i.e. edit software) for a business process to add the BAM interceptor, and to redeploy such a modified process. Microsoft also appears to require its process designers to manually program a callback procedure which must receive and process a current step ID and a data object from the modified process.","US Patent Publication 2003\/0225769 filed by Chkodrov et al. on May 31, 2002 as application Ser. No. 10\/157,968, assigned to Microsoft and entitled \u201cSupport for real-time queries concerning current state, data and history of a process\u201d is incorporated by reference herein in its entirety. This publication describes defining interesting portions of a workflow of a business or other type of process. Using a tracking profile editor, a portion of a given workflow is selected and associated with a named process part. A profile is generated based on the given workflow and selected items of payload data. The output of the tracking profile editor may be saved, for example, as an XML file. A tracking profile compiler receives the created tracking profile and generates a star schema, a flattened view and OLAP cube based on the tracking profile. Note that Chkodrov's Tracking Profile appears to be limited to BAM.","US Patent Publication 2003\/0225769 states that an interceptor receives each event or payload data of interest, checks the interceptor configuration to determine whether the event is an event of interest or whether the payload data is payload data of interest, and if so, serializes the event or payload data, along with a timestamp, into a tracking stream. A tracking service extracts information pertaining to the monitored events from the tracking stream and stores the information in a queryable database. The tracking service continually monitors the tracking stream and processes events, calling a proper stored procedure to store information pertaining to events in the database. Alternatively, each event may have a specific event number and a hash table may be accessed using the event number to select an address of a stored procedure to execute.","The above-described US Patent Publication 2003\/0225769 refers to US Patent Publication 2003\/0225820 which was also filed by Chkodrov et al. on May 31, 2002 as application Ser. No. 10\/160,844 entitled \u201cSystem and method for collecting and storing event data from distributed transactional applications\u201d which is also incorporated by reference herein in its entirety. For background on related technologies, see US Patent Publication 2004\/0176968 by Syed, et al. on Mar. 7, 2003 and entitled \u201cSystems and methods for dynamically configuring business processes\u201d also incorporated by reference herein in its entirety.","For more background, see US Patent Publication 2005\/0049924 by DeBettencourt et al. filed on Aug. 27, 2003 and entitled \u201cTechniques for use with application monitoring to obtain transaction data\u201d; See also US Patent Publication 2005\/0071243 by Somasekaran et al. filed on Sep. 30, 2003 and entitled \u201cNon-disruptive business process debugging and analysis\u201d; see also US Patent Publication 2003\/0115334 by Bhat et al. entitled \u201cBusiness transaction monitoring system and method\u201d filed Nov. 4, 2002; see also US Patent Publication 2002\/0038228 by Waldorf et al. entitled \u201cSystems and methods for analyzing business processes\u201d filed Mar. 28, 2001; all of the just-described patent publications (in this paragraph) are incorporated by reference herein in their entirety.","In accordance with the invention, a graphical user interface (GUI) displays a flow of portions of a business process, such as activities, from which capture of data is possible. The GUI receives, in one or more operations, at least an indication of a business process portion from which data is to be captured (\u201csensor\u201d), as well as an identification of an destination to which captured data is to be transferred and a type of the destination (which identifies, through a mapping, a predetermined software). A sensor may be added any number of times (through a single GUI or though multiple GUIs) by repeatedly performing the operation. Also, a given sensor may be associated with any number of destinations (also called \u201cendpoints\u2019).","Definitions of sensors (which describe the business process portion to be monitored), and destination identification and type (together called \u201csensor action\u201d) are prepared by a GUI of some embodiments and transmitted to one or more computers that execute the business process. Computer(s) executing the business process in accordance with the invention check whether or not a sensor is present, on execution of a business process portion, and if present, then execute the corresponding predetermined software(s) to transfer data from the sensor directly to the respective destination(s).","Sensors in accordance with the invention can be of one or more of the following kinds: (1) activity sensors which monitor execution of activities within a business process (e.g. execution time of an invoke activity or variable values modified as a result of executing the activity) (2) fault sensors that monitor occurrence of faults within the business process (e.g. divide by zero), and (3) variable sensors that monitor variables (or parts thereof) of the business process (e.g. input and\/or output data of the business process). Moreover, sensor actions can be used to transfer data being captured (by presence of a sensor), to one or more of the following types of destinations: (1) queue, (2) database, and (3) custom. A given sensor can be associated with any number of sensor actions and vice versa, depending on the embodiment.","In accordance with the invention, a computer is programmed with an illustrative method  to use a graphical user interface (GUI) to display (as per act  in ) a drawing of activities of a business process (e.g. in a flow chart), and receive (as per act ) through the GUI a selection of any portion thereof (called \u201csensor\u201d) from which capture of data is to be performed. For example, a human (\u201cuser\u201d) may simply point and click on any portion of the business process shown in the drawing, such as a single activity or several activities grouped into a structured activity, or a variable or a fault. Note that a user can identify any portion of a business process as being suitable for capture of data therefrom. In response to such user input, the computer displays (as per act ) an indication in the GUI that a sensor is now associated with the user-selected portion of the business process. The computer (hereinafter \u201cGUI computer\u201d) is further programmed to automatically generate (as per act ) a definition of the sensor, expressed as, for example, metadata in an industry-standard format, such as XML.","A sensor definition typically includes at least an identification of an activity within the business process, and optionally also includes an identification of the business process itself. Depending on the embodiment, the sensor definition may also include additional values that may be identified in a similar manner (by user selecting an item from a displayed figure) or alternatively by a user typing in such additional values. Examples of additional values include the \u201ckind\u2019 of event that is to trigger a sensor and the data structure being targeted whose data is to be captured at the sensor.","In one illustrative embodiment, the GUI computer displays in act  an icon in the form of a magnifying lens adjacent to a business process portion whose data is to be captured. Instead of an icon any other indication, may be made by the GUI computer to acknowledge the user's interest in a business process portion, e.g. by changing the color of the activity to a predetermined color and\/or changing any other attribute such as brightness of the activity, in the drawing of the business process.","In embodiments wherein the GUI computer is different from another computer that executes the business process, the sensor definition is transferred therebetween (as per act ). On receipt of the sensor definition, one or more computer(s) executing the business process, begin to collect data of interest to the user. Specifically, such business process computer(s) of some embodiments check sensor definition(s) on execution of each portion of the business process (e.g. before and\/or after execution of each activity), and collect data of interest to the user as indicated in the sensor definition(s).","While in some embodiments, after act  (), the GUI computer proceeds directly to act , in several embodiments the GUI computer returns to act  as per branch  () to permit the user to identify additional sensors. Moreover, although in some embodiments, after act  the computer proceeds to act , in other embodiments, the computer goes directly to act  as per branch  () in which case the display is not updated until after the description of the user-selected portion (in a sensor definition) is generated in act . Therefore, a specific order of performance of acts - relative to one another may be different, depending on the embodiment. Hence, several such embodiments will be apparent to the skilled artisan in view of this disclosure.","In some embodiments, the sensor definition is transferred (in act ) along with a transfer of the description of the business process (which may be, e.g. expressed in WS-BPEL) from the GUI computer to one or more business process computer(s), i.e. during deployment of the business process. In such embodiments, a change in sensor definition requires re-deployment of the business process. In other embodiments, the sensor definition is transferred independent of transfer of the business process description. The GUI computers of such other embodiments accept identification of a sensor even at run time, i.e. after deployment of a business process, and the corresponding business process computers dynamically process changes to sensors during execution of the business process, thereby to eliminate the need to re-deploy a modified business process. Also, many embodiments permit one or more users to add a sensor (for a given activity or variable as per C in , or fault) any number of times (e.g. through a single GUI or though multiple GUIs) by repeatedly performing sensor addition.","Identification of sensors through a GUI as per acts - and automatic generation of one or more sensor definition(s) as per act  eliminates the need to manually change software to add an interceptor to invoke a callback procedure, as required in the prior art described in the Background section above. Specifically, a GUI as described herein allows a user who is not a programmer to set up one or more sensors by using a pointing device (e.g. point and click or drag and drop), which is a significant improvement over a prior art requirement for a programmer to modify source code and write a callback procedure. Note further that in some embodiments, a user who is not a programmer may still manually prepare definition of a sensor on their own, bypassing the GUI.","In some embodiments, the data captured as specified in a sensor is stored in a predetermined format and\/or in a predetermined data store, while in other embodiments, the captured data is transferred to one or more destinations that are user configurable and\/or in a format that is user configurable. Specifically, in some illustrative embodiments, a GUI computer of the type described above in reference to FIG. lA receives from the user one or more attributes of the destinations, e.g. identity of queues and\/or databases and\/or format of the data, and prepares one or more descriptions of the destinations containing such configuration information (to generate a sensor action definition) as described next in reference to method  of .","In act  () the GUI computer displays a screen and receives via fields in the screen one or more attributes, such as the identity of a destination (e.g. in the form of an XPATH expression) and a type of the destination (e.g. queue or database or custom in case of user-defined software interface), to which captured data is to be transmitted (called \u201csensor action\u201d). Next, in act , the GUI computer generates a description of the configuration information received in act  (called \u201csensor action definition\u201d). Note that after act , while the GUI computer goes to act  in some embodiments, in other embodiments the GUI computer returns to act . Furthermore each of acts  and  may be repeated any number of times.","In act , the GUI computer displays another screen and receives via fields in the screen one or more correlations, between each sensor and one or more sensor actions. Note that a given sensor of a given business process may be associated in act  with any number of (i.e. one or more) sensor actions. Next, in act  the GUI computer generates a description of one or more correlations received in act . In act , the GUI computer may additionally generate the definition of any sensor actions that were not previously generated (e.g. in act ). Then, in act  the GUI computer transmits the definitions that were prepared in act  and\/or act  to one or more business process computers, thereby to notify these computers to transfer any collected data in accordance with configuration specified in the definitions.","In some embodiments, the GUI computer prepares a description of associations together with sensor actions, in a single file in act  although in other embodiments the sensor actions are described in one file (generated in act ) that is separate and distinct from another file containing the description of associations (generated in act ). Furthermore, in some embodiments, the GUI computer prepares a single file containing various descriptions, e.g. definitions of each of sensors, sensor actions and associations. Moreover, in some embodiments, all of the configuration information described above in reference to sensors and sensor actions is received in a single operation although in other embodiments such information can be received in any relative order. For example, all sensors may be configured via the GUI in a first loop, all sensor actions may be configured via the GUI in a second loop, and all associations between sensors and sensor actions may be configured via the GUI in a third loop, with the first two loops being executed in any order relative to one another, followed by the third loop.","In many embodiments, two attributes of a sensor action that are supplied to a GUI computer by the user at runtime (during execution of the business process) are: (1) an identification of a destination to which captured data is to be transferred and (2) a type of the destination, which is selected from a predetermined set of types. Each sensor action type that is selectable by the user is previously associated with and uniquely identifies (through a predetermined mapping) a predetermined software to be executed (to perform at least one action) when transferring information to the identified destination. Identification of predetermined software and one or more destination(s) via corresponding fields in the graphical user interface eliminates the need for a user (when enabling data capture) to write their own procedure as required by prior art. Hence a GUI computer of the type described above is simpler and more user-friendly than prior art.","A computer that executes a business process in accordance with the invention is responsive to receipt of sensors, sensor actions and associations therebetween. Specifically, the computer is programmed as illustrated in method  to check (as per act  in ) if a sensor is present on execution of each portion of a business process (e.g. on execution of each activity, such as an invoke activity, a receive activity, and a throw activity). If a sensor is present, the business process computer automatically performs capture of data (as per act ) as specified in the sensor definition. The captured data is transferred directly by the business process computer (as per act ) to one or more destination(s) as identified in the corresponding associations, by executing predetermined software(s), e.g. identified from the type of the destination(s). Transfer of data to one or more destinations directly by the business process computer eliminates the need to access a database to store data or to retrieve stored procedures.","As noted above, a business process computer of some embodiments transfers captured data by execution of predetermined software that is identified in sensor action definition(s). A user may select such software implicitly, e.g. by identifying in a GUI (via \u201cdrag-drop\u201d or \u201cpoint-click\u201d action on a pointing device such as a mouse), a type of destination for receipt of capture data as being, for example, a database or a queue, wherein each type is associated with its own software that is predetermined, e.g. written ahead of time. A destination's type is also referred to as \u201cpublish type.\u201d Such GUI-based selection of a publish type by the user eliminates the need for the user to write software for a destination, for whose type such software already exists. Several such embodiments implement tight integration (the UI software and the runtime software) with business process modeling.","In alternative embodiments, instead of using a GUI, sensor definitions and\/or sensor action definitions may be manually prepared, as per acts  and  (). Manual preparation of such definitions does not require any programming skills because the definition of sensors and\/or sensor actions merely contains descriptions of configuration information, such as the identity of an activity whose data is to be captured and\/or the identity of a destination to which the data is to be transferred. As the definitions in many embodiments are expressed in a human-readable language, such as the eXtensible Markup Language (XML), the definitions can be prepared as, e.g. descriptions of the business process portion being monitored and\/or data to be captured and\/or software to be executed and\/or destinations to which captured data is to be transferred, in a simple text editor in conformance with predetermined schema(s) for sensors and\/or sensor actions. Hence, such embodiments are completely meta-data driven and no coding skills are required (other than to understand schema) to write the definitions of sensors and\/or sensor actions. Note that in other embodiments definitions of sensors and\/or sensor actions may be expressed in languages that are not human understandable, and a parser or other such software tool may be required for a human to review and\/or modify the definitions.","In some embodiments, software which handles captured data applies a filter (that may be user configured), when accepting the captured data for transfer to a destination. Alternatively, or in addition, such software of some embodiments uses an industry standard interface to transfer the captured data to the destination (that is user configured), e.g. by sending messages, via Java Messaging Service (JMS). The captured data may be additionally or alternatively transferred using another industry standard interface to store\/retrieve data, such as Java Database Connectivity (JDBC) API for cross-DBMS connectivity to a wide range of SQL databases and access to other tabular data sources, such as spreadsheets or flat files.","Sensors and sensor actions of some embodiments as illustrated in  differ from prior art in a number of ways, as discussed next. Sensors in many embodiments are completely meta-data driven, and require no code to be written. Specifically, a designer of the business process can remain completely unaware of the presence or absence of such sensors. In such embodiments, sensors are overlayed on top of a business process (e.g. via a GUI), by users interested in monitoring the process. The overlay implementation allows sensors to be easily added or removed (or enabled\/disabled) without modifying an already deployed process, independent of the lifecycle of the business process.","Moreover, overlay is implemented in some embodiments by updating sensors and\/or sensor actions in a computer that is executing the business process, in a store therein that is independent of business process execution, such that changes to the store do not require the business process to be stopped and re-started. Hence, changes to sensors and sensor actions are implemented on the fly in such embodiments, without affecting (or only minimally affecting) the real-time execution of a business process. In contrast, the prior art interceptors described in the Background section above appear to require the process designer to make changes to the business process itself, to enable the business process to be monitored. Hence, prior art interceptors are intrusive and inflexible because if changed, the business process must be modified and redeployed.","Moreover, prior art interceptors as described in the Background section above, are believed to be limited to sending their captured data to a single destination, namely the BAM product. In contrast, sensor actions as described herein can be configured (through a GUI) to selectively capture data and to publish selections of captured data to a database, and\/or to reports, and\/or to Java Messaging Service (JMS) destinations (e.g. queues or topics), and\/or BAM. Therefore, depending on configuration, data may be captured, for example, only when the data satisfies one or more user-specified criteria of the sensor. In contrast, prior art described in the Background section above transfers a complete data object to an interceptor written by the user, and the user's interceptor has to evaluate the data object for compliance with such criteria. Depending on the embodiment, a sensor action may even be configured (through the GUI) to contain one or more user-provided callback procedures, which therefore allows the captured data to be sent to any computer, including a computer that generates BPEL reports.","Furthermore, sensors and sensor actions of some embodiments as illustrated in  differ from debuggers in a number of ways, as discussed next. As noted above, sensors in many embodiments are implemented as an overlay, so that the business process itself remains unchanged regardless of what data is being captured. In contrast, debuggers are intrusive because they attach to the process. Furthermore, debugger breakpoints generally slow down the process being debugged significantly, which limits the use of debuggers primarily for testing purposes. One cannot have a debugger attached to a production process. In contrast, sensors have a very slight performance impact on the business process being monitored, when implemented by overlaying on executing production processes for continuous monitoring.","Also, a debugger (to the inventors' knowledge) attaches to a specific instance of an executing process or program.\u2014i.e. one cannot have a debugger monitor all instances at the same time\u2014since each process has different values for the same variable. However, a sensor of most embodiments may be transmitted to all computers that are running instances of a business process, to monitor all instances thereof. Moreover, a debugger (to the inventors' knowledge) does not have a mechanism to publish data to external systems after a breakpoint occurs. Specifically, most debuggers known to the inventors display the data of the variables only within a user interface of the debugger itself. In contrast, a sensor of the type described herein can be associated with a sensor action that sends out not only the sensor data but also other system data such as \u201cprocess name, timestamp, machine name, datatype\u201d etc to the publisher (JMS, database, custom etc.)","Finally, note that debuggers generally (to the inventors' knowledge) do not maintain any state information across breakpoints. In contrast, sensors of some embodiments can be configured to track various types of information over time, such as the time taken (i.e. duration) to execute an activity. In one such example, an activity sensor of several embodiments is triggered at the start and at the end of an activity (as well as on occurrence of any event such as a re-trial of the activity), and predetermined software for the sensor action automatically computes the time required for the activity to complete (i.e. duration of the activity).","A method in accordance with the invention, as illustrated in , enables the user to use a GUI to activate capture of data from a business process at a business document level. Any work done by a business process, is monitored at a very high level of abstraction, namely at the level of modeling of the business process. Therefore, a prior art requirement for the user to write their own callback function and\/or stored procedure is eliminated in accordance with the invention by allowing the user to simply select a predetermined software (indirectly by specifying the destination's type), and provide the identity of the destination to which captured data is to be sent by the predetermined software. Also, as noted elsewhere herein, a user may specify a given captured data from a given sensor to be sent to multiple destinations, by associating the multiple destinations with a given sensor. Also, when creating a sensor, the user may select a predetermined software that is different (or same) for each destination, depending on a type of the destination (e.g. queue, or topic, or database).","In some embodiments, one or more computers are programmed with four softwares, namely a business process manager  (), sensor registry , a data capture agency  and a sensor agency . Business process manager  receives each of documents ,  and  () from business process modeler . On receipt these documents, business process manager  stores the information contained therein in a sensor registry  (), by performing acts - and - which are described below in reference to . The remaining softwares ,  and  (together called \u201csensor framework\u201d) are used during execution of the business process, as described below in reference to .","In some embodiments, sensor registry  maintains a catalog of sensors and sensor actions. The configuration of sensors and sensor actions are stored in a normalized relational schema in an Oracle Database. The sensor registry  of such embodiments performs the following actions: maintains sensors and sensor actions for business processes across domains, registers new sensors and sensor actions for a business process, unregisters (delete) sensors and sensor actions for some business processes, responds to queries from data capture agency  and sensor agency , and caches sensor and sensor action metadata for fast access (which are maintained in a database in non-volatile memory).","In such embodiments, data capture agency  is notified by business process manager  whenever an event happens. In response to each event, data capture agency  captures the appropriate data from the business process context after querying sensor registry  for presence of sensors and at least one associated sensor action, and sends the captured data (as specified in the respective sensor) to sensor agency . Note that if no sensor action is associated with a given sensor, then no data is captured which improves efficiency. Note also that if no sensor is defined, then again no data is captured, which further improves efficiency. In several embodiments, sensor agency  is responsible for accepting captured data from data capture agency , querying the sensor registry  for associated sensor actions, executing the predetermined software identified for the sensor actions to publish the sensor data to all of the identified destinations, and to manage custom data publishers.","Note that in the following discussion, it is assumed that acts to be performed by a business process are articulated in the language BPEL, although as would be apparent to the skilled artisan, any other language may be used.","In act  () of some embodiments, a business process manager  starts up in act  and after initializing one or more variables, goes to act . In act , business process manager  reads a descriptor of a business process to be deployed (also called \u201cdeployment descriptor\u201d) which may be expressed in the language BPEL as noted above. The deployment descriptor of some embodiments contains information whether or not sensors and sensor actions are configured for the BPEL process and if configured, provides the file name(s) of the configuration files for sensors and sensor actions. Then, in act , business process manager  uses information from the just-described descriptor to deploy the BPEL process in the business process manager . Then in act , the business process manager  checks if this particular BPEL process has any sensors. If not, then business process manager  simply goes to act  to check if there are any additional BPEL processes to be deployed and if so returns to act  and if not goes to act  where it waits for receipt of tuples (that identify one or more sensors as being enabled or disabled).","If in act  () business process manager  finds that the current business process has one or more sensors, e.g. if a document containing sensor definition  exists (having the name \u201csensors.xml\u201d in one embodiment), then business process manager  registers the sensors as per act  in a sensor registry. Specifically, on finding that sensors exist, sensor registry  is invoked which performs acts - (). Note that sensor registry  is implemented in some embodiments via functions that are called in-line by manager  (i.e. the same process which executes business process manager  continues to execute after a context switch). However, other embodiments may implement sensor registry  as a separate process and\/or separate thread from business process manager . In act , sensor registry  reads sensor document  and goes to act . In act , functions of the sensor registry  store (i.e. persist) various attributes of the sensors being defined in nonvolatile storage  (such as a disk) which is used as the sensor registry 's storage.","In act , if a definition  () for sensor actions is not yet received for the current business process which is being deployed then sensor registry  simply returns control back to business process manager , which continues on to act  (described above). In act  () if sensor action definition  is received (e.g. at the same time as sensor definition ) then branch  is followed to perform act . In act , sensor registry  reads each sensor action, which in some embodiments, contains at least three items namely a sensor being enabled, a destination to which data from the enabled sensor is to be transferred and a type which identifies a predetermined software to be executed, to perform the transfer to a destination of that type.","Depending on the embodiment and the implementation, such a tuple may contain one or more additional items, such as a property that identifies configuration information needed to interface with the destination and a filter that identifies a Boolean expression to be applied to the data in deciding whether or not to transfer and\/or what data to transfer. Next, sensor registry  performs act  () wherein each tuple read in act  is stored (i.e. persisted) to non-volatile storage .","In act  () if a sensor action definition  is received (e.g. at a later time than the time at which sensor definition  is received), then as per act  business process manager  once again invokes sensor registry  which performs act  to read the tuples (i.e. the sensors and sensor actions) in definition  and act  to persist them to nonvolatile storage . As noted above, on completion of act  control returns to business process manager  () which once again waits to receive another definition  for the business process.","Referring to , a business process  is executed in computers  and  by business process manager , which performs acts - as follows. Specifically, in act , business process manager  starts up business process . Next, business process  waits to receive input, as illustrated by act . When input is received, the business process performs act , to execute a next activity that uses the input, wherein the next activity is identified in a process definition  (which is expressed in the language BPEL in some embodiments). On completion of act , the business process manager  does not go to act  as may be done in the prior art. Instead, on completion of act , business process manager  goes to act  to check whether or not a sensor is present.","In act , if a sensor is not present, then control transfers to act  wherein business process manager  checks if there are any more activities to be performed (as per definition ) and if so returns to act  (described above). If there are no more activities to be performed then business process manager  goes to act  to generate output to be sent in a reply, and thereafter goes to act  that completes execution of business process .","In act , if business process manager  finds that there is a sensor present in any portion of the activity executed in act  then the software piece \u201cdata capture agency\u201d  is invoked in line (in some embodiments although in other embodiments software piece  may be run as a separate thread). In act , the data capture agency  receives a notification of the sensor being present. The embodiment illustrated in  supports enabling and disabling of sensors, and hence in act , the data capture agency  checks if the sensor is enabled in which case data needs to be collected. In some embodiments, enablement of a sensor is programmatically determined by the data capture agency  via a hash table which uses the sensor name as key.","If the answer in act  is no, then data capture agency  returns control to the business process manager , e.g. in act  (described above). If the answer in act  is yes, then the data capture agency  performs act  to capture the data from this sensor, and thereafter proceeds to act . In act , the data capture agency  uses the captured data to invoke another software piece, namely \u201csensor agency\u201d . Sensor agency  of several embodiments is invoked as an in-line function by data capture agency  in which case act  is performed only after completion of acts -. Delay between performance of acts  and  may be reduced by using as endpoints a JMS queue and\/or topic. In alternative embodiments, sensor agency  may be implemented as a separate process and\/or separate thread from data capture agency .","In act , the sensor agency  receives the captured data from data capture agency . Next, in act , sensor agency  checks a sensor action associated with the sensor, to see if a filter is present therein for use in transferring the captured data. If not then control transfers to act  (described below). If in act , data capture agency  determines that a filter is present, then control transfers to act  wherein appropriate data is inserted into a Boolean condition. If this Boolean condition is not true, then control transfers to act  (described below).","If in act , sensor agency  determines that the Boolean condition is true, then control transfers to act  to transfer (e.g. by publishing) the captured data to one or more destination(s) identified in the tuples description in sensor action definition  (). When performing act , the sensor agency  is further programmed to identify and execute one of predetermined softwares A and B (), to effectuate the transfer of captured data. A predetermined software to be executed at this stage is identified by use of the destination's type from the tuple, with a mapping of the destination type to the predetermined software.","Such a mapping is hardcoded in software of some embodiments (e.g. in a switch-case statement) in which the number of destination types is small (e.g. 3-4). In alternative embodiments, a mapping between a destination type and the interface software for that destination type is implemented in a table of a relational database or by use of a hash function, when the number of endpoint types is large (e.g. 10-15). In the exemplary embodiment illustrated in , if the destination type was queue type, then predetermined software A (which is queue interface software) is automatically selected by use of the mapping (i.e. without any user input other than their input of endpoint type), and this software is then executed to effectuate the transfer of captured data.","Predetermined software A can be used to send data to any of destinations A-M (wherein A\u2266J\u2266M), because all these destinations are of type queue. Hence, when invoking predetermined software A to interface with a destination, the sensor agency  passes to it a specific identity of the destination which was identified by the user when enabling the sensor. An identified destination A may be located in, for example, a business activity monitor (BAM) computer  which may contain other destinations which are of the same type or different type, such as a database P. Additional destinations J, M, Q, and R to which captured data may be transferred, can be located in other computers, such as a warehouse builder, an enterprise manager and a web portal.","Queue interface software A handles any destination which is of queue type and hence software A can be used to send information to any destination which is of type queue, such as queues A-M, depending on an identity with which software A is invoked. In , software A receives an identity of queue A from sensor agency , and hence sends captured data to queue A (as shown by the solid line ). Similarly, software B is used to transfer data to any destination which is of type database, such as any of databases P-R (as indicated by a dashed line ). Software B is identified for use with such destinations when the user indicates that the sensor's data is to be transferred is to a destination of type \u201cdatabase\u201d and also provides an identity of one of databases P-R.","In addition, a user may supply their own custom software C for use in interfacing to any type of destination not already supported, such as an email server Z (e.g. if the captured data is to be sent by email). Although some embodiments as just described enable a user to identify any one of several databases P-R as the destination of the data being captured, other embodiments enable the user to select merely the type to be database (i.e. without requiring the user to specify an identity of the database as illustrated in ). In such a case, the captured data is persisted in a database of a default name and located at a default location. As noted above, softwares A and B are written ahead of time prior to the user's selection of a destination's type, and hence are available during execution of a business process to automatically send data to destinations of the respective types.","In some embodiments, predetermined software to be executed for a sensor action is identified from the publish type as follows. If \u2018publish type\u2019 (looked up in the sensor registry for the current sensor action) is equal to \u2018JMSTopic\u2019 or \u2018JMSQueue\u2019 then J2EE JNDI mechanism is used to identify the underlying JMS queue or topic given its name in the property \u2018Publish Target\u2019. If publish type is equal to \u2018Database\u2019, the predetermined software is a database publisher which is provided to the sensor agency at startup (in its initialization file). If publish type is \u2018Custom\u2019, the predetermined software is identified by a Java Class Name provided in property \u2018Publish Target\u2019.","While embodiments having a small number of publish types may use a series of if statements as just described, other embodiments that support a large number of publish types use an in-memory hash table for fast lookup. One or more such hash tables may be initially (at startup) retrieved from non-volatile memory of sensor registry  (wherein initial versions of hash tables may be stored prior to execution of the business process). Note that the hash tables may be modified (i.e. re-configured) during execution, e.g. when sensor and\/or sensor action definitions are received and\/or if a business process is re-deployed.","When invoking a predetermined software A, sensor agency  passes to it the location of data which has been captured and needs to be transferred as well as the name of the destination (i.e. endpoint) to which the data is to be transferred. In embodiments that receive any additional attributes of the destination from the user (such as a property or a filter), the additional attributes are also supplied to the predetermined software. In some embodiments, all such information is stored in a block, and an address of the block is passed to the predetermined software A.","In several embodiments, the block contains header information (e.g. as shown in the top half of ) appended to the captured data, for use in identifying the entity that captured the data, such as process name, process instance, application server mid-tier instance, exact timestamp when the data was captured, and identity of event that triggered the data capture. In alternative embodiments, such information is simply placed on a stack and a context switch is performed by sensor agency , thereby to begin execution of predetermined software A (i.e. perform act  in ).","On completion of execution of the predetermined software, sensor agency  completes act  and goes to act  to check if there are any more destinations to which the captured data is to be transferred and if so then sensor agency  takes branch  and returns to act  (described above). Act  implements support for multiple sensor actions for a given sensor, as shown by the presence of branch  in box . Moreover, act  provides support for user-selectable software to be performed in a sensor action.","As noted above, sensor registry  of some embodiments maintains a hash table (in memory or cache) that maps a sensor to its sensor actions. In one embodiment, the hash table uses as key a given sensor name, and as value a list of sensor actions for the given sensor name. Sensor registry  of such embodiments also provides functions that access the hash table to retrieve a list of destinations for a given sensor, e.g. Boolean hasSensorAction(String sensorName) and List getSensorActions(String sensorName).","Note that the number of additional destinations associated with a given sensor (whose data has been captured) determines the number of times that branch  is taken. When the captured sensor data has been transferred to all destinations associated with the given sensor, then branch  is taken to return to act  in the business process manager , which then continues its execution of the business process  (as described above).","A graphical user interface (GUI)  () of a business process modeler (BPM) in some embodiments of such a computer  () displays (as per act  in ) each sensor that exists, overlaid on a drawing of business process . A sensor may be identified by, for example, an icon I () of a magnifying lens that is shown adjacent to a business process portion I such as an activity from which data is to be captured. Depending on the embodiment, identification of each sensor by the GUI may be performed in any manner, e.g. by highlighting business process portion I (in a predetermined color such as red for a disabled sensor and green for an enabled sensor) instead of or in addition to icons I.","A user of GUI  may supply the configuration information in act  () even after a business process  has been deployed (e.g. while it is executing), because sensors can be created at any time in the embodiments illustrated in . Specifically, the user can identify which (if any) of the portions A-IN in business process  is to be monitored, i.e. to start the capture of data therefrom. In some embodiments, no further detail is needed to define a sensor, i.e. other than to select a business process portion whereby the GUI computer automatically assigns a name to the sensor and makes note of the activity (or other portion) of the business process that is to be monitored. Such embodiments may send the captured data to a default destination, and permit the user to override the default in another screen.","Some embodiments require additional detail from a user to create each sensor (e.g. sensor name and sensor action), and the additional information is received through an additional screen which may be displayed, e.g. as soon as the user double clicks a mouse button after placing the cursor on portion I (see  in ). Specifically, in such embodiments GUI  displays another screen  (called \u201cproperty inspector\u201d) of the type illustrated in . In this property inspector screen , the user creates a sensor by selecting the \u201csensors\u201d tab , which results in display of a screen C shown in  for creating a sensor for an activity. Note that activity sensor screen C () is displayed in this sequence because property inspector screen  was invoked by selecting an activity (in this example the activity \u201cInvoke\u201d) in GUI  (). Alternatively, a user may directly go to process structure panel  (), and right click on item  labeled \u201csensors\u201d and on doing so, a drop-down list box showing three types of sensors namely activity, fault and variable is displayed. On selection of an \u201cactivity\u201d sensor in this box, screen C () is displayed.","When screen C is first displayed to the user, field C is already filled in by the GUI computer, with the name of the activity which is to be monitored. In this embodiment, the user is required to type in a name for the sensor being created in field C (although as noted elsewhere, such a name may be automatically generated in some embodiments). Field C contains the default value \u201cALL\u201d which means data capture is be performed whenever the activity changes state (e.g. on invocation of the activity, on completion of the activity, when the activity has an error and when the activity is re-tried). A user may select a specific state of an activity, if the sensor being created is for capturing data in only that specific state.","In screen C, user-selected data to be captured is identified in an array C which is initially empty. In some embodiments, the user clicks on a \u201cCreate\u201d button to reach a screen (not shown) which lists all variables that are defined for the current activity. On the user selecting a variable in the list (or a portion of the variable's name) a row C is automatically filled by the GUI computer, using information C, C and C from the variable's definition in the schema for the business process.","Screen C contains a panel C for correlation of the sensor being created with a sensor action. Initially, no sensor actions are associated with the current sensor (although one or more sensor actions may have been defined by the user for other sensors). Hence, the user needs to click on the Add button to reach a screen (not shown) that displays a list of all previously defined sensor actions.","The user selects one or more sensor actions in this list (of sensor actions) to associate them with the sensor being created in which case the associated sensor actions are listed in the panel C. In , the user has selected BAMFeed action C for association with the sensor. Note that the just-described list of sensor actions may be empty if no sensor actions were previously defined, and if so the user must click on a create button to reach a sensor action screen (e.g. screen in ).","After receipt of configuration information about a sensor, a description of one or more received values (e.g. see ) is generated by the GUI computer in an act  (), e.g. in a predetermined language such as XML. During such generation, the GUI converts values from an internal format (in which the values are initially held on receipt from the user) into XML format in accordance with a schema of the type illustrated in , and thereafter stores the result in a sensor file (e.g. named \u201csensor.xml\u201d) of the type shown in . In the embodiment illustrated in , not all received values are articulated in the sensor definition D, e.g. sensor action name \u201cBAMFeed\u201d in  is not present in . As noted below, in this embodiment the association of a sensor with its sensor actions is actually articulated in the sensor action definition.","In other embodiments such an association between a sensor and its actions may be articulated in the sensor definition itself. Moreover, instead of XML any other language may be used describing the sensors, depending on the embodiment. After act , addition of sensor I is complete, and GUI  returns to displaying (as per act  in ), a modified version of the business process drawing now containing an icon for sensor I (see ) to inform the user that this sensor is currently in existence.","It is not necessary for a user to enter an association of a sensor with an action during sensor definition in screen C in , because such association may be done at a later stage (e.g. the user may set up all sensors first, followed by setting up of sensor actions, followed by forming associations therebetween). When a user finishes identifying all sensors and\/or sensor actions for a given business process  (e.g. by clicking a button), computer  transmits the one or more definitions  to computers - that execute the business process, and thereafter proceeds to perform the actions illustrated in  (described above).","In some embodiments, if a user has defined a sensor, a sensor action and also an association, then the icon that is displayed for sensor I is modified, e.g. the magnifying lens is shown in a different color or is shown shaded as compared to the icon displayed when only the sensor exists (without a sensor action associated thereto). Many embodiments do not make a distinction, in the drawing shown in , between sensors with and without sensor actions defined, i.e. the same magnifying glass icon I is displayed if a sensor is configured for activity I regardless of any sensor actions associated with that sensor.","Sensors of the type described above in reference to  provide a much more fine-grained way for a user to \u2018show interest\u2019 in certain aspects of the business, e.g. by providing Activity sensors with embedded variable sensors, that is the sensor fires in the case where an activity reaches a certain state (\u2018completed\u2019) and then the variable sensor contains the data of that activity, for example: \u201cGive billing address of PO if shipping completed successfully\u201d","The specific manner in which a destination's identification and type are received by GUI  can differ depending on the embodiment. In some embodiments, double clicking of the mouse on icon I causes the property inspector screen to be displayed by the GUI, which contains one or more fields for the user to enter identification of the destination (i.e. endpoint) as well as selection of an action to be performed to transfer captured data to the destination. Examples of such screens in one embodiment are illustrated in , G, I and K (described below).","An identified sensor, and a corresponding identified destination (with its type) are implicitly associated with one another in some embodiments by performance of acts  and  () in a single operation. As noted above, a destination's identity and type are two attributes of a sensor action that are used in some embodiments. In certain embodiments, a user may associate a sensor with one or more sensor actions explicitly in a screen for creating a sensor (e.g. ) by identifying therein name(s) for the sensor action(s), with the sensor action itself being created in another screen (e.g. in ).","Some embodiments of the GUI computer  describe each association between a sensor and a sensor action as a tuple of (sensor, endpoint, and endpoint type) in a sensor action definition (expressed in XML). Note that such a tuple may include one or more additional pieces of information, such as a filter to be applied to the captured data and\/or other configuration information about the endpoint. If the business process is not executed in GUI computer , in which the sensor and sensor action are defined, then the description(s) generated by computer  is\/are transferred to one or more computers - () for use therein during execution of the business process.","In some embodiments, it is possible for computer(s) - to receive a definition  () of the business process  as well as a definition  of sensors ahead of time and already be executing the business process prior to receipt of any sensor actions. Specifically, the one or more computer(s) - () execute a business process one activity at a time, while checking before\/during\/after execution of each activity as to whether or not capture of data is enabled. No data capture is performed in computers - that are executing a business process , until receipt of a sensor action definition of at least one tuple, after which time data capture becomes possible for the business process portions that have sensor(s).","If a sensor action is configured for a given sensor I in a definition , then data from business process portion I is captured (as per act  in ). The data that is captured (similar or identical to that shown in ) is predetermined, e.g. by a user who has marked the business process portion as having a sensor. The captured data is then transferred (as per act ) to the endpoint associated with sensor I in sensor action definition  (). Note that the transfer is performed directly without an intermediate step of storing in a database and the related latency. The transfer of captured data is effectuated by execution of a specific predetermined software (similar to that shown in ) that is uniquely associated with a type of the endpoint identified in the sensor action definition.","One example of predetermined software implements a first-in-first-out (FIFO) mechanism, and is used if the endpoint's type indicates the endpoint as being a queue. Another example of predetermined software implements a SQL query A () to store the data if the endpoint's type indicates the endpoint as being a database. Note that transfer of data to an end point may be disabled in a manner similar to that described above for enabling, e.g. by the user marking a tuple that was previously enabled as now being \u201cdisabled\u201d in GUI , whereby GUI  notifies the one or more computers - of the same. Note also that the data actually transferred may be more than, less than or different from the captured data, e.g. if a header is added to the data, or if the data is filtered prior to transfer as described below.","A sensor in accordance with the invention can be created and\/or enabled any number of times (e.g. by double clicking the business process portion I even when a sensor icon I is displayed adjacent thereto), which can make the sensor become associated with multiple endpoints. All endpoints associated with a given sensor are displayed in a list  in the property inspector (). Hence, a given sensor of a given business process may be associated with any number of endpoints (and respective actions to be performed to transfer data to the endpoints). In such a case, the one or more computers - that execute the business process  are programmed in accordance with the invention to automatically transfer the sensor's data to the multiple endpoints. As noted above, specifying multiple endpoints for a single sensor causes the computers - to transfer the same data to each of the multiple endpoints which therefore receive this data in real time.","Note that GUI  is described above as being displayed by a business process modeler (BPM) software in computer . If a BPM user enables a sensor I by identifying an endpoint B having type C, the GUI  transfers description of a first tuple (A, B, C) to computers - (in a sensor action definition). A GUI of another application such as a business activity monitor (BAM) software may also display the same sensor I (also overlaid on the drawing of business process ) to its user. In this example, a BAM user may also enable sensor I (i.e. the same sensor I previously enabled by the BPM user). If the BAM user identifies a different endpoint D (and its type E) when enabling sensor I then, computers - may receive a second tuple (A, D, E). Therefore, in computers -, the same sensor I becomes associated with two endpoints B and D (endpoint B was identified by the BPM user and endpoint D was identified by the BAM user).","In this example, two tuples are provided to computers - by the BAM and BPM softwares that operate independent of each other. Hence data captured by sensor I is transferred to both endpoints B and D by execution of predetermined softwares associated with the corresponding types C and E respectively. The predetermined softwares that are executed transfer the captured data in real time to the respective endpoints, thereby to eliminate latency that is otherwise created if such data were required to be persisted in a database prior to transfer to the identified endpoints.","Moreover, identification of multiple endpoints through the GUI and use of predetermined softwares eliminates the need for a user to manually program a callback function or a stored procedure to effectuate the transfer to each individual endpoint. Also, in such embodiments, disabling a transfer from a sensor (e.g. sensor A) to one of multiple endpoints (e.g. endpoint B) does not affect transfer of data captured from that sensor to one or more remaining endpoints (e.g. endpoint D) for which the sensor (e.g. sensor A) continues to remain enabled.","Note that definitions ,  and  that are sent to computers - (which execute the business process) may be articulated by GUI computer  in languages that may be same as or different from each other, depending on the embodiment. For example, in some embodiments, definitions ,  and  are all expressed in a common language, such as the extensible markup language (XML), while in other embodiments one or more definitions are expressed in languages different from one another. Even when expressed in the common language XML, one of the definitions, namely definition  is expressed in a predetermined grammar thereof, such as BPEL (described in the Background section above).","Also, in many embodiments, all three definitions ,  and  are maintained in three corresponding documents. Maintaining definition  separate from definition  ensures that definition  remains unchanged, and therefore compatible with any tool in conformance with the language in which definition  is expressed (e.g. BPEL). Even if not articulated in the language BPEL, definition  may contain a number of similar activities, for example, an invoke activity to invoke a web service, a receive activity to wait for a message from an external source and a throw activity to raise an exception error.","Furthermore, definition  () may identify any portion of a business process  articulated in definition  regardless of whether that portion is logic or data or a combination thereof. In several embodiments, at least one sensor in definition  is identified as a portion of the business process that contains a variable whose data is transferred on being enabled, while another sensor contains a fault on whose occurrence the captured data is transferred. In one embodiment, the fault sensor simply identifies the fault occurrence. However, if a user has chosen a \u2018database\u2019 publish type, a SQL query is used to get the number of faults.","Maintaining definition  separate from definition  ensures that sensors defined in definition  can be enabled or disabled independent of their definition, e.g. enabled or disabled during run time. Furthermore, articulating definition  in the same language as definition  ensures that a common input mechanism (e.g. the same lexical analyzer) can be used by computers - for processing both definitions  and .","A fault sensor and a variable sensor can be created in a manner similar to that described above in reference to . Specifically, the user may select \u201cfault\u201d in a list of sensor types that is displayed on selection of the sensor item  in , and on doing so screen G () is displayed to the user. The user then types in the name of a sensor being created in field G, and selects a namespace in field G, as well as a name of the fault in field G. Sensor actions are selected in panel G similar to that described above in reference to panel C.","The definition of a fault sensor which is generated by the GUI computer is illustrated in . This definition is also generated in conformance with the schema for sensor definitions illustrated in . Note that in , \u201cis\u201d labeled H is mapped to a name space that corresponds to the fault named in field G. Moreover, the user may define a variable sensor in a manner similar to definition of the fault sensor, as illustrated in . The variable sensor monitors for any changes in a variable (or a portion thereof) in the target identified in field I. Note that in the illustration shown in , two sensor actions I and I are invoked whenever there is a change in this variable.","In some embodiments of the invention, a screen A () is displayed in response to the user double clicking on a sensor action item  in panel  (). Note, however, that this screen A may alternatively be reached through one of the sensor creation screens illustrated in , G and I by clicking the \u201cAdd\u201d button therein. In the example screen A shown in , the sensor action is named \u201cBAMFeed\u201d. Screen A contains a number of fields, such as a field A labeled \u201cName\u201d in which the user may supply a name to be used in referring to this tuple (also called \u201csensor action\u201d).","Screen A also contains a field A labeled \u201cPublish Type\u201d in which the user selects a type for the endpoint, e.g. from an enumerated set shown in a drop-down list box that is displayed by clicking in field A. In the example shown in , there are three choices for the value in field A namely \u201cJMS Queue\u201d, \u201cDatabase,\u201d and \u201cCustom\u201d, and the user has selected the endpoint type to be \u201cJMS Queue\u201d. Note that although in some embodiments only three choices are displayed in field A for selection by a user, other embodiments may display fewer or more choices. For example,  shows (in the list  in portion FIG. D) that four choices are displayed to the user in one specific embodiment.","The embodiment illustrated in  permits a user to supply their own software for interfacing to an endpoint by identifying the endpoint's type as being \u201ccustom\u201d in field A as shown in screen A illustrated in . In the example shown in , the user has identified in field A an endpoint of name \u201cloanflow.LoanFlowTicker\u201d to be accessed by custom software. On clicking the \u201cOK\u201d button on screen A, the user is prompted to supply additional information in a screen  () which elicits from the user, the configuration information about the custom software in greater detail.","For example, in field  of screen  () the user identifies a name of the new class of the custom software to be LoanFlowTicker. Moreover in field  of screen  the user identifies a package in which the new class is contained to be \u201cloanflow\u201d. Note that screen  contains another field  in which the user supplies the identity of another package which is being extended, e.g. Java.lang.Object. By identifying and providing custom software C () which has the name \u201cloanflow.LoanFlowTicker\u201d, the user can programmatically do whatever they want with the data captured by sensor I. In an example of the type of arbitrary action permitted, custom software C of  prepares an email message based on certain values in the captured data (), and transfers the email message to an email server Z for onward transmission to an email address (e.g. the user's email address).","Therefore, in screen  () the user provides configuration information identifying e.g. the custom software's name, and location, such as Java class which conforms to a publicly-documented Java API or other such software identity as will be apparent to the skilled artisan. An example of such custom software is provided in . Instead of providing custom software, in other embodiments, the user may simply select one of predetermined softwares A and B in screen A by selecting an appropriate one of several predetermined values (such as \u201cdatabase\u201d or \u201cJMS Queue\u201d) that are selectable in field A of .","A user's selection of one such predetermined software eliminates the need for the user to write custom software. Instead by simply pointing and clicking the user is able to create or modify the type of destination(s) to which captured data is to be transferred. Specifically, a non-custom publish type selected by a user in field A requires an actual endpoint, such as a queue or a database to be identified in the publish target field A (discussed in next paragraph). Such an endpoint may be located in a computer  (shown at the bottom of ) that may contain a business activity monitor (BAM) software. Computer  of some embodiments is different from computers - in which the business process is being executed, although in other embodiments a single computer may be used.","Screen A also contains a field A labeled \u201cPublish Target\u201d in which the user identifies the endpoint. In the example shown in , the user has identified the endpoint to be \u201cjms\/bamTopic\u201d, which is a name that can be resolved by JNDI to identify the underlying physical Queue or Topic. JNDI is a J2EE standard used to resolve names to their underlying physical entities (queues, topics, databases etc.) In this embodiment, the user may use any XPATH expression to identify the endpoint in field A. Note that an endpoint identified by a user in publish target field A () is interfaced by predetermined software that executes within computers - in which the business process is being executed although in alternative embodiments such an endpoint (to which the data is transferred) may be hardcoded in the software (which may be predetermined or custom as discussed above).","In several embodiments, a field A labeled \u201cFilter\u201d is optionally received from the user, and in this example in  the user has left it blank (such a filter is discussed elsewhere herein). The field A indicating enablement of the sensor action has the value \u201cchecked\u201d by default when screen A is first displayed to the user, and this field becomes \u201cunchecked\u201d when clicked on by the user, as may be done when data transfer from a previously enabled sensor is to be discontinued.","On clicking the \u201cOK\u201d button on screen A () the GUI articulates a sensor action definition  (e.g. in XML) as shown in , for instructing computers - to supply the captured data to custom software C (), based on the information supplied by the user. Specifically, the information entered by the user in fields A, A, A and A of screen A () is stored temporarily in variables in a memory of the GUI computer, when generating a definition  () of the sensor action, after the user finishes entering the information in screen A. Sensor action definition  contains not only a tag \u201caction\u201d which describes the sensor action itself, but also one or more \u201csensorName\u201d tags with which the sensor action is associated as shown in . As noted elsewhere, a sensor action may be associated in a screen for creating or editing a sensor as shown in , G and I.","Sensor action definition  () may be articulated by the GUI computer, in conformance with an XML Schema Definition of the type shown in . Reference numerals in several of  for corresponding items (such as definitions and descriptions) are obtained by replacing letter suffixes in the reference numerals, wherein the letter suffixes correspond to respective figure numbers. For example, definition D in  defines the endpoint's type field A in . Definition  of  is optional and not shown in . After articulation of definition  (), the GUI computer returns to displaying the business process overlaid with sensors (similar to that illustrated in ), which in some embodiments, shows a modified version of sensor I to indicate that this sensor is enabled.","At this stage, as noted elsewhere, a user may again double click on the same portion I, to associate multiple endpoints with sensor I. In response to configuring multiple sensor actions, multiple definitions  are produced in some embodiments, one for each sensor action. Also a user may double click on a different portion N for example, to enable data capture therefrom. The user may associate a common sensor action with multiple sensors in the respective screens (e.g. see ), in which case a common sensor action definition  () is generated to contain multiple sensor names, such as C and  (). A sensor which has multiple actions may be illustrated in some embodiments of  by displaying a modified version of the sensor icon, such as a double magnifying lens to indicate the presence of multiple actions, although in other embodiments no distinction is made between sensors with one or more actions.","The GUI computer, of some embodiments is implemented by the software JDeveloper BPEL Designer to maintain a single sensor action file (called sensorAction.xml) that contains all sensor action definitions. The sensor action file is identified in a deployment descriptor of the BPEL process. The sensor action file in the GUI computer is automatically kept in synchronization with the sensors and actions that the user models in BPEL designer in the GUI computer. Such a sensor action file () is eventually (e.g. in response to a user indicating completion of sensor and\/or sensor action configuration) transmitted to the one or more business process computers ,  for storage in the sensor registry  () in a non-volatile memory therein.","In one illustrative embodiment, business process manager  receives such files from the GUI computer and stores them in the sensor registry , although in other embodiments sensor registry  interfaces directly with the GUI computer for receipt and storage of such configuration files  and . Note that files  and  contain pure metadata in many embodiments, which respectively (a) trigger data collection by the sensor framework in response to events identified by the business process manager , and (b) identify the endpoints to which the data is transferred by the sensor framework, e.g. by use of standard J2EE JMS APIs (to enqueue the sensor data in the JMS Queue). As files  and  () contain merely metadata, there is no requirement to use business process manager  to simply store such files in the sensor registry .","As is well known to the skilled artisan, JMS is a commonly available set of APIs and frameworks that support reliable, scalable, portable, and asynchronous messaging among J2EE applications. JMS supports two basic styles of message-based endpoints, namely a queue and a topic. Multiple receivers can listen for messages in a queue, but the arrived message can be retrieved by only one receiver. Once the message is retrieved, it is deleted from the queue and is no longer available to other receivers. A topic endpoint lets multiple subscribers listen for messages that are published to the topic. Unlike a queue, a message published to a topic does not get deleted once it is retrieved. The message stays on the topic and is available for all subscribers. In the example illustrated in , a common predetermined software A is used to transfer data to both styles of endpoints (queue and topic), because both have a message interface (although after receipt each handles the message differently).","Referring to , screen G contains a publish type field G wherein the user has selected the value JMS Queue, and another field G labeled \u201cJMS Connection Factory\u201d in which the user supplies a property of the endpoint to be used in finding the endpoint. The user may type into field G the identity of an object that contains the configuration parameters in conformance with the Java Messaging System (JMS) Application Programming Interface (API) which is to be used to access the endpoint. The configuration parameters in such an object may identify, for example, a namespace in which the endpoint is to be found, wherein the namespace conforms to Java Naming and Directory Interface (JNDI). In the example shown in , the user has identified the object to be \u201cjms\/QueueConnectionFactory\u201d in the field G, and the GUI computer generates a property name tag H () in conformance with the sensor action type's property description  ().","In an example screen I illustrated in , the user has named in field I the sensor action to have the value \u201cBigMoneyBAMAction\u201d and selected in publish type field I the value to be \u201cJMS Queue\u201d (which is same as in screen G in ). The user has also set, in field I (in screen I in ) a value of property JMS Connection Factory to be \u201cjms\/QueueConnectionFactory\u201d (also same as in screen G). In screen I however, the user identifies a different endpoint in field I to be \u201cjms\/bigMoneyQueue\u201d, than the endpoint identified in field G. In the example illustrated in , the user also specifies a filter in field I, to pass data only when the loan amount is larger than $100,000.","When definitions  of the two respective endpoints \u201cjms\/bigMoneyQueue\u201d and \u201cjms\/bamTopic\u201d are both transferred (e.g. in a single sensor action document) to computers  and , a sensor registry in these computers is updated to identify the two endpoints \u201cjms\/bigMoneyQueue\u201d and \u201cjms\/bamTopic\u201d as the destinations of any data captured from sensor I. Note that while endpoint \u201cjms\/bamTopic\u201d receives all the data captured by sensor I, the other endpoint jms\/bigMoneyQueue receives only that data which has been filtered by the user-specified filter (in field I of screen I in ), i.e. when the Boolean condition is satisfied. Referring to , data captured from sensor I is transferred without any filtering in act  by an initial performance of act  for the endpoint jms\/bamTopic, followed by the \u201cY\u201d branch out of act  to return to act , followed by filtering in act  and transfer of the filtered data in a repeated performance of act  for the endpoint jms\/bigMoneyQueue. Note that transfer of captured data in a predetermined format (as shown in , in accordance with a schema shown in ) to each of the two endpoints \u201cjms\/bigMoneyQueue\u201d and \u201cjms\/bamTopic\u201d is performed as soon as the data is captured, without an intermediate step of storing the data in a database.","Although the captured data is not stored in a database prior to transmission to an endpoint, it is possible for the user to select an endpoint to be a database itself, in which case the captured data is stored in the database (instead of or in addition to transfer to any other endpoints specified by the user). Selection of a database is illustrated in a screen K in  wherein the user has named this action to be \u201cPersisting Action\u201d in field K. In this particular embodiment, the user merely selects the endpoint type in field K to be the database type, and there is no need for the user to supply any further information. On the user clicking the \u201cOK\u201d button, the graphical user interface (GUI) articulates a definition  (i.e. sensor action) e.g. in XML as shown in .","On screen K () if desired, the user may optionally supply a Boolean condition to be applied to captured data in field K before the data is persisted into the database. Note that there is no field named \u201cPublish Target\u201d in screen K in  because selection of a \u201cdatabase\u201d type as the endpoint type, in this embodiment, results in automatic identification of a default database which has a default location. In the illustrative embodiment shown in , there are place-holders for such fields, e.g. place-holder  which is shown hatched. Other embodiments may enable the user to supply an XPATH expression to identify a specific database (which may be one of several databases as illustrated in ), by receiving the database's identity in a field named \u201cPublish Target\u201d which is added to screen K in these other embodiments.","In some embodiments, two properties are added to a file () which is used to deploy the business process, to identify the files ,  and  that contain the respective names of the business process file (named \u201cbpel.xml\u201d), the sensor file (named \u201csensor.xml\u201d) and the sensor action file (named \u201csensorAction.xml\u201d). By using separate files in these embodiments, for the sensor and sensor actions definitions, the business process file is kept unchanged, thereby to implement an overlay of the sensors and sensor actions on the business process (instead of modifying the business process itself).","Computers ,  and  of the type illustrated in  may contain one or more hardware and software components of the type discussed next. Specifically, a computer system  includes a bus  () or other communication mechanism for communicating information, and a processor  coupled with bus  for processing information. Computer system  also includes a main memory , such as a random access memory (RAM) or other dynamic storage device, coupled to bus  for storing information and instructions to be executed by processor .","Main memory  also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Computer system  further includes a read only memory (ROM)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to bus  for storing information and instructions.","Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","As described elsewhere herein, transportation planning is performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform one or more acts described herein and illustrated in . In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201cnon-transitory computer-readable medium\u201d as used herein refers to any memory that participates in providing instructions to processor  for execution. Such a memory may take many forms, including but not limited to, non-volatile memory and volatile memory. Non-volatile memory includes, for example, optical or magnetic disks, such as storage device . volatile memory includes dynamic memory, such as main memory .","Common forms of non-transitory computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic memory, a CD-ROM, any other optical memory, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . Local network  may interconnect multiple computers (as described above). For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network  now commonly referred to as the \u201cInternet\u201d. Local network  and network  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a mission (which is part of a transportation plan) through Internet , ISP , local network  and communication interface .","The instructions for performing acts - and - in  or alternatively acts - in  may be executed by processor  as they are received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain the just-described instructions and any related data in the form of a carrier wave and\/or an optical disk.","Note that  is a very low-level representation of many hardware components of a computer system. Several embodiments have one or more additional software components in main memory  as shown in : Operating System  (e.g. Microsoft WINDOWS 2000), Database Server  (e.g. Oracle Server v9i2 for the source computer; e.g. Oracle Server v8i for the target computer), Java Development Kit  (e.g. JDK v68), Java XMLParser  (e.g. xmlparser available from Oracle Corporation), JDBC drivers  (e.g. JDBC driver available from Oracle Corporation). A computer system for computers  and\/or  may also include additional softwares such as business process manager , sensor framework , application server  (whereas a computer system for the GUI computer  may include business process modeler ).","In some embodiments of the invention, the sensor data is persisted in a database using a predefined relational schema. The following public views can be used from a client GUI (such as Oracle Warehouse Builder, portal, etc.) to query the sensor values using SQL. A view called BPMPROCESSES gives an overview of all the deployed business processes across the domains of a Business Process Manager (BPEL PM).",{"@attributes":{"id":"p-0144","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["Name","Type","Size","I?","N?","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NAME","NVARCHAR2","100","U1, 1","N","Name of the"]},{"entry":[{},{},{},{},{},"BPEL process"]},{"entry":["REVISION","VARCHAR2","50","U1, 2","N","Revision of the"]},{"entry":[{},{},{},{},{},"BPEL process"]},{"entry":["DOMAIN_ID","VARCHAR2","50","U1, 3","N","BPEL PM domain"]},{"entry":[{},{},{},{},{},"name"]},{"entry":["BASE_URL","NVARCHAR2","256",{},"N","The base URL of"]},{"entry":[{},{},{},{},{},"the BPEL suite"]},{"entry":["SENSOR_URL","NVARCHAR2","256",{},"N","The URL of the"]},{"entry":[{},{},{},{},{},"sensor file"]},{"entry":["SENSOR_ACTION_URL","NVARCHAR2","256",{},"N","The URL of the"]},{"entry":[{},{},{},{},{},"sensor action file"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"A view, called BPMPROCESSANALYSIS REPORT gives an overview of all the process instances of the BPEL PM. Another view called BPMPROCESSINSTANCES is a subset of view BPMPROCESSANALYSISREPORT and contains only those process instances where sensors are defined for the corresponding BPEL process and the sensor action performed at least once. Both these views have the following schema.",{"@attributes":{"id":"p-0146","num":"0145"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["Name","Type","Size","I?","N?","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","NUMBER",{},"PK","N","Unique (cube) instance Id"]},{"entry":["BPEL_PROCESS_NAME","NVARCHAR2","100",{},"N","Name of the BPEL process"]},{"entry":["BPEL_PROCESS_REVISION","VARCHAR2","50",{},"N","Revision of the BPEL"]},{"entry":[{},{},{},{},{},"process"]},{"entry":["DOMAIN_ID","VARCHAR2","50",{},"N","BPEL PM domain name"]},{"entry":["TITLE","VARCHAR2","50",{},"Y","User defined title of the"]},{"entry":[{},{},{},{},{},"BPEL process"]},{"entry":["STATE","NUMBER",{},{},"Y","State of the BPEL process"]},{"entry":[{},{},{},{},{},"instance"]},{"entry":["STATE_TEXT","VARCHAR2",{},{},"Y","Text presentation of the"]},{"entry":[{},{},{},{},{},"state attribue"]},{"entry":["PRIORITY","NUMBER",{},{},"Y","User defined priority of the"]},{"entry":[{},{},{},{},{},"BPEL process instance"]},{"entry":["STATUS","VARCHAR2","100",{},"Y","User defined status of the"]},{"entry":[{},{},{},{},{},"BPEL process"]},{"entry":["STAGE","VARCHAR2","100",{},"Y","User defined stage property"]},{"entry":[{},{},{},{},{},"of a BPEL process"]},{"entry":["CONVERSATION_ID","VARCHAR2","100",{},"Y","User defined conversation"]},{"entry":[{},{},{},{},{},"id of a BPEL process"]},{"entry":["CREATION_DATE","TIMESTAMP",{},{},"N","The creation timestamp of"]},{"entry":[{},{},{},{},{},"the process instance"]},{"entry":["MODIFY_DATE","TIMESTAMP",{},{},"Y","Timestamp when the"]},{"entry":[{},{},{},{},{},"process instance was"]},{"entry":[{},{},{},{},{},"modified"]},{"entry":["TS_DATE","DATE",{},{},"Y","Date portion of modify_date"]},{"entry":["TS_HOUR","NUMBER",{},{},"Y","Hour portion of modify_date"]},{"entry":["EVAL_TIME","NUMBER",{},{},"Y","Evaluation time of the"]},{"entry":[{},{},{},{},{},"process instance in msecs"]},{"entry":["SLA_COMPLETION_TIME","NUMBER",{},{},"Y","SLA completion time in"]},{"entry":[{},{},{},{},{},"msecs"]},{"entry":["SLA_SATISFIED","VARCHAR2","1",{},"Y","\u2018Y\u2019 or \u2018N\u2019"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"Still another called BPMACTIVITYSENSORVALUES contains all the activity sensor values of the monitored BPEL processes:",{"@attributes":{"id":"p-0148","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["Name","Type","Size","I?","N?","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","NUMBER",{},"PK","N","Unique Id"]},{"entry":["PROCESS_INSTANCE","NUMBER",{},{},"N","ID of process instance"]},{"entry":["BPEL_PROCESS_NAME","NVARCHAR2","100","U1, 1","N","Name of the BPEL"]},{"entry":[{},{},{},{},{},"process"]},{"entry":["BPEL_PROCESS_REVISION","VARCHAR2","50","U1, 2","N","Revision of the BPEL"]},{"entry":[{},{},{},{},{},"process"]},{"entry":["DOMAIN_ID","VARCHAR2","50","U1, 3","N","BPEL PM domain"]},{"entry":[{},{},{},{},{},"name"]},{"entry":["SENSOR_NAME","NVARCHAR2","100",{},"N","The name of the"]},{"entry":[{},{},{},{},{},"sensor that fired"]},{"entry":["SENSOR_TARGET","NVARCHAR2","256",{},"N","The target of the fired"]},{"entry":[{},{},{},{},{},"sensor"]},{"entry":["ACTION_NAME","NVARCHAR2","100",{},"N","The name of the"]},{"entry":[{},{},{},{},{},"sensor action"]},{"entry":["ACTION_FILTER","NVARCHAR2","256",{},"Y","The filter of the action"]},{"entry":["CREATION_DATE","TIMESTAMP",{},{},"N","The creation date of"]},{"entry":[{},{},{},{},{},"the activity sensor"]},{"entry":[{},{},{},{},{},"value"]},{"entry":["MODIFY_DATE","TIMESTAMP",{},{},"Y","The timestamp of last"]},{"entry":[{},{},{},{},{},"modification"]},{"entry":["TS_DATE","DATE",{},{},"Y","The Date part of"]},{"entry":[{},{},{},{},{},"modify_date"]},{"entry":["TS_HOUR","NUMBER",{},{},"Y","The hour part of"]},{"entry":[{},{},{},{},{},"modify_date"]},{"entry":["ACTIVITY_NAME","NVARCHAR2","100",{},"N","The name of the"]},{"entry":[{},{},{},{},{},"BPEL activity"]},{"entry":["ACTIVITY_TYPE","VARCHAR2","30",{},"N","The type of the BPEL"]},{"entry":[{},{},{},{},{},"activity"]},{"entry":["ACTIVITY_STATE","VARCHAR2","30",{},"Y","The state of the"]},{"entry":[{},{},{},{},{},"activity"]},{"entry":["EVAL_POINT","VARCHAR2","20",{},"N","The eval point of the"]},{"entry":[{},{},{},{},{},"activity sensor"]},{"entry":["ERROR_MESSAGE","NVARCHAR2","2000",{},"Y","An error message"]},{"entry":["RETRY_COUNT","NUMBER",{},{},"Y","The number of retries"]},{"entry":[{},{},{},{},{},"of the activity"]},{"entry":["EVAL_TIME","NUMBER",{},{},"Y","Evaluation time of the"]},{"entry":[{},{},{},{},{},"activity in msecs"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"Still another view called BPMFAULTSENSOR",{"@attributes":{"id":"p-0150","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["Name","Type","Size","I?","N?","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","NUMBER",{},"PK","N","Unique Id"]},{"entry":["PROCESS_INSTANCE","NUMBER",{},{},"N","ID of process"]},{"entry":[{},{},{},{},{},"instance"]},{"entry":["BPEL_PROCESS_NAME","NVARCHAR2","100","U1, 1","N","Name of the"]},{"entry":[{},{},{},{},{},"BPEL process"]},{"entry":["BPEL_PROCESS_REVISION","VARCHAR2","50","U1, 2","N","Revision of the"]},{"entry":[{},{},{},{},{},"BPEL process"]},{"entry":["DOMAIN_ID","VARCHAR2","50","U1, 3","N","BPEL PM"]},{"entry":[{},{},{},{},{},"domain name"]},{"entry":["SENSOR_NAME","NVARCHAR2","100",{},"N","The name of the"]},{"entry":[{},{},{},{},{},"sensor that fired"]},{"entry":["SENSOR_TARGET","NVARCHAR2","256",{},"N","The target of the"]},{"entry":[{},{},{},{},{},"fired sensor"]},{"entry":["ACTION_NAME","NVARCHAR2","100",{},"N","The name of the"]},{"entry":[{},{},{},{},{},"sensor action"]},{"entry":["ACTION_FILTER","NVARCHAR2","256",{},"Y","The filter of the"]},{"entry":[{},{},{},{},{},"action"]},{"entry":["CREATION_DATE","TIMESTAMP",{},{},"N","The creation"]},{"entry":[{},{},{},{},{},"date of the"]},{"entry":[{},{},{},{},{},"activity sensor"]},{"entry":[{},{},{},{},{},"value"]},{"entry":["MODIFY_DATE","TIMESTAMP",{},{},"Y","The timestamp"]},{"entry":[{},{},{},{},{},"of last"]},{"entry":[{},{},{},{},{},"modification"]},{"entry":["TS_DATE","DATE",{},{},"Y","The Date part of"]},{"entry":[{},{},{},{},{},"modify_date"]},{"entry":["TS_HOUR","NUMBER",{},{},"Y","The hour part of"]},{"entry":[{},{},{},{},{},"modify_date"]},{"entry":["ACTIVITY_NAME","NVARCHAR2","100",{},"N","The name of the"]},{"entry":[{},{},{},{},{},"BPEL activity"]},{"entry":["ACTIVITY_TYPE","VARCHAR2","30",{},"N","The type of the"]},{"entry":[{},{},{},{},{},"BPEL activity"]},{"entry":["MESSAGE","CLOB",{},{},"Y","The fault"]},{"entry":[{},{},{},{},{},"message"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Still another view called BPMVARIABLESENSOR VALUES contains all the variable sensor values, as shown below.",{"@attributes":{"id":"p-0152","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["Name","Type","Size","I?","N?","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","NUMBER",{},"PK","N","Unique Id"]},{"entry":["PROCESS_INSTANCE","NUMBER",{},{},"N","ID of process instance"]},{"entry":["BPEL_PROCESS_NAME","NVARCHAR2","100","U1, 1","N","Name of the BPEL process"]},{"entry":["BPEL_PROCESS_REVISION","VARCHAR2","50","U1, 2","N","Revision of the BPEL"]},{"entry":[{},{},{},{},{},"process"]},{"entry":["DOMAIN_ID","VARCHAR2","50","U1, 3","N","BPEL PM domain name"]},{"entry":["SENSOR_NAME","NVARCHAR2","100",{},"N","Name of sensor that fired"]},{"entry":["SENSOR_TARGET","NVARCHAR2","256",{},"N","Target of the sensor"]},{"entry":["ACTION_NAME","NVARCHAR2","100",{},"N","Name of the action"]},{"entry":["ACTION_FILTER","NVARCHAR2","256",{},"Y","Filter of the action"]},{"entry":["ACTIVITY_SENSOR","NUMBER",{},{},"Y","Id of corresponding activity"]},{"entry":[{},{},{},{},{},"sensor value"]},{"entry":["CREATION_DATE","TIMESTAMP",{},{},"N","Creation date"]},{"entry":["TS_DATE","DATE",{},{},"N","The Date part of"]},{"entry":[{},{},{},{},{},"creation_date"]},{"entry":["TS_HOUR","NUMBER",{},{},"N","The hour part of"]},{"entry":[{},{},{},{},{},"creation_date"]},{"entry":["VARIABLE_NAME","NVARCHAR2","256",{},"N","The name of the BPEL"]},{"entry":[{},{},{},{},{},"variable"]},{"entry":["CRITERIA_SATISFIED","VARCHAR2","1",{},"Y","\u2018Y\u2019 or \u2018N\u2019"]},{"entry":["TARGET","NVARCHAR2","256"]},{"entry":["UPDATER_NAME","NVARCHAR2","100",{},"N","The name of the activity or"]},{"entry":[{},{},{},{},{},"event that updated the"]},{"entry":[{},{},{},{},{},"variable"]},{"entry":["UPDATER_TYPE","NVARCHAR2","100",{},"N","The type of BPEL activity or"]},{"entry":[{},{},{},{},{},"event"]},{"entry":["VALUE_TYPE","SMALLINT",{},{},"N","The value type of the"]},{"entry":[{},{},{},{},{},"variable (coresponds to"]},{"entry":[{},{},{},{},{},"java.sql.Types values)"]},{"entry":["VARCHAR2_VALUE","NVARCHAR2","2000",{},"Y","The value of \u2018String\u2019 like"]},{"entry":[{},{},{},{},{},"variabales"]},{"entry":["NUMBER_VALUE","NUMBER",{},{},"Y","The value of number like"]},{"entry":[{},{},{},{},{},"variables (float, double, int,"]},{"entry":[{},{},{},{},{},"etc.)"]},{"entry":["DATE_VALUE","TIMESTAMP",{},{},"Y","The value of date like"]},{"entry":[{},{},{},{},{},"variables"]},{"entry":["BLOB_VALUE","BLOB",{},{},"Y","The value of binary data"]},{"entry":[{},{},{},{},{},"variables"]},{"entry":["CLOB_VALUE","CLOB",{},{},"Y","The value of clob like"]},{"entry":[{},{},{},{},{},"variables (XML)"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"Still another view called BMPERRORS contains all the errors from BPM services, as shown below.",{"@attributes":{"id":"p-0154","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["Name","Type","Size","I?","N?","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","NUMBER",{},"PK","N","Unique Id"]},{"entry":["BPEL_PROCESS_NAME","NVARCHAR2","100","U1, 1","N","Name of the BPEL"]},{"entry":[{},{},{},{},{},"process"]},{"entry":["BPEL_PROCESS_REVISION","VARCHAR2","50","U1, 2","N","Revision of the BPEL"]},{"entry":[{},{},{},{},{},"process"]},{"entry":["DOMAIN_ID","VARCHAR2","50","U1, 3","N","BPEL PM domain name"]},{"entry":["CREATION_DATE","TIMESTAMP",{},{},"N","The creation date of the"]},{"entry":[{},{},{},{},{},"activity sensor value"]},{"entry":["TS_DATE","DATE",{},{},"N","The Date part of"]},{"entry":[{},{},{},{},{},"creation_date"]},{"entry":["TS_HOUR","NUMBER",{},{},"N","The hour part of"]},{"entry":[{},{},{},{},{},"creation_date"]},{"entry":["ERROR_CODE","NUMBER",{},{},"N","Error code"]},{"entry":["EXCEPTION_TYPE","NUMBER",{},{},"N","Type of the error"]},{"entry":["EXCEPTION_SEVERITY","NUMBER",{},{},"N","Severity of the error"]},{"entry":["EXCEPTION_NAME","NVARCHAR2","200",{},"N","Name of the error"]},{"entry":["EXCEPTION_DESCRIPTION","NVARCHAR2","2000",{},"Y","A short description of"]},{"entry":[{},{},{},{},{},"the error"]},{"entry":["EXCEPTION_FIX","NVARCHAR2","2000",{},"Y","A description on how to"]},{"entry":[{},{},{},{},{},"fix the error"]},{"entry":["EXCEPTION_CONTEXT","VARCHAR2","4000",{},"Y","The context of the error"]},{"entry":["COMPONENT","NUMBER",{},{},"N","The BPM component"]},{"entry":[{},{},{},{},{},"that caused the error"]},{"entry":["THREAD_ID","VARCHAR2","200",{},"N","The Java thread name"]},{"entry":[{},{},{},{},{},"where the error"]},{"entry":[{},{},{},{},{},"occurred"]},{"entry":["STACKTRACE","CLOB",{},{},"N","The Java stack trace"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"Numerous modifications and adaptations of the embodiments described herein will become apparent to the skilled artisan in view of this disclosure. Note that although some embodiments use a single screen (e.g. see ) to receive a tuple including a sensor's identity and also an identity of its sensor action, other embodiments may receive such a tuple differently. Specifically, in an alternative embodiment, sensors are displayed in a left column and endpoints are displayed in a right column and the user selects a sensor in the left column and one or more endpoints in the right column, and after being satisfied as to the selections in the two columns, clicks on a button to form an association therebetween, and the computer responds by articulating a tuple in the manner described above. Moreover, sensors and sensor actions of the type described above can be reviewed, changed and deleted, as well as new ones added by a graphical user interface (GUI) in the same computer  or in a computer which is completely different from computer  (in which a business process is being modeled). For example, the GUI may be generated by a business activity monitor (BAM) computer . Numerous modifications and adaptations of the embodiments described herein are encompassed by the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 1A and 1B","b":["110","120","110","120"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2A","FIG. 1C"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIGS. 2B and 2C","FIG. 2A"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3A-3C","FIG. 1A"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3D"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3E","FIG. 3D"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3F","FIG. 3A","FIG. 3D"],"b":"112"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIGS. 3G and 3I","FIG. 3C"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIGS. 3H and 3J","FIG. 3D","FIGS. 3G and 3I"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIGS. 4A","FIG. 3C"],"b":["4","4","4","4"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIGS. 4C","FIG. 3D","FIGS. 4A"],"b":["4","4","4","4","4","4"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4D"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 4E","FIG. 4D"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 4F","FIG. 4E"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4M"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 5A","FIG. 3A"],"b":["112","112","112"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIGS. 6A and 6B","FIGS. 1A-1C"]}]},"DETDESC":[{},{}]}
