---
title: Method, system, computer program product, and article of manufacture for construction of a computer application interface for consumption by a connector builder
abstract: An interface of an application program is identified by parsing the source code of the application program to identify meta information, and the meta information and a link pointing to an original location of the meta information within the application program are stored in a repository. A user may then be allowed to query the repository to determine which source files and which interfaces comprise the application program. Responsive to the query, a new source file is constructed which contains the interfaces comprising the application program. The new source file and a link pointing to a location of the new source file are also stored in the repository. A meta language document is constructed which contains a description of the application program interfaces to enable a a connector building tool to build an interface to the application program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06915487&OS=06915487&RS=06915487
owner: International Business Machines Corporation
number: 06915487
owner_city: Armonk
owner_country: US
publication_date: 20001211
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["A portion of the Disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","The present invention relates in general to software re-engineering, and more particularly to identifying an interface of an application program.","2. Description of the Related Art","With the advent of the World Wide Web (Web), many enterprises prefer to leverage existing mainframe application programs by connecting a Web front-end to those existing mainframe application programs. These mainframe application programs may include transaction systems such as the IBM\u00ae Customer Information Control System (CICS\u00ae), the IBM\u00ae Information Management System (IMS), or the IBM\u00ae DB2\u00ae relational database system. (IBM\u00ae, CICS\u00ae, and DB2\u00ae are registered trademarks of International Business Machines Corporation in the United States, other countries, or both.) To bridge between the Web front-end and the existing mainframe application program, a block of code, commonly known as a connector, is generated. Tools that generate a connector are available from various manufacturers, such as the IBM\u00ae Enterprise Access Builder, IBM\u00ae WebSphere Application Development Studio, IBM\u00ae VisualAge\u00ae Interspace, IBM\u00ae VisualAge\u00ae for Java\u00ae, or Microsoft\u00ae COM Transaction Integrator (COMTI). (VisualAge\u00ae is a registered trademark of International Business Machines Corporation in the United States, other countries, or both. WebSphere is a trademark of International Business Machines Corporation in the United States, other countries, or both. Java and all Java-based trademarks are trademarks of Sun Microsystems, Inc. in the United States, other countries, or both. Microsoft is a trademark of Microsoft Corporation in the United States, other countries, or both.) To generate a connector from a specified source code file comprising a mainframe application program, a connector tool parses the source code contained in a specified source code file to obtain the information necessary to generate the connector. This conventional approach may generate the appropriate connector if the specified source code file contains the complete information necessary to generate the connector. However, the specified source code file may not contain any of the necessary information or may only contain a portion of the necessary information. For example, it may be a COBOL source code file containing a COPY statement which points to another source code file, a COBOL COPYBOOK, which actually contains the necessary information. Typically, this complete information is contained in and dispersed among multiple source code files. Thus, there is a need for a connector tool which can generate a connector based upon information dispersed among multiple source code files.","Conventional connector generators are also language dependent, such as a Java-to-COBOL connector generator, a Java-to-CICS connector generator, or a C++-to-COBOL connector generator. The Java-to-COBOL connector generator cannot be used to generate a C++-to-COBOL connector, and the C++-to-COBOL connector generator cannot be used to generate a Java-to-COBOL connector. Thus, generating a second connector for a second language involves a repetition of the identification, parsing, selection, and editing steps which were performed for the generation of the first connector. Even if the same connector is being re-generated, i.e., the second connector is the same language as the first connector, the steps are repeated. The reuse of prior parsing, identification, and editing is difficult as conventional systems fail to store this information in a form which is consummable by a connector building tool. Thus, there is a need for a connector tool which supports multiple target languages, and which reuses information and analysis from one generation to the next or from one language to another language.","Conventional methods have failed to provide solutions to these problems. Thus, there is a clearly felt need for a method, system, article of manufacture, and computer program product for providing improved identification of an interface of an application program dispersed among multiple files for consumption by a connector building tool.","The present invention comprises a method, system, computer program product, and article of manufacture for identifying an interface of an application program. The source code of the application program is parsed to identify meta information, and the meta information and a link pointing to an original location of the meta information within the application program are stored in a repository. A user may then be allowed to query the repository to determine which source files and which interfaces comprise the application program. Responsive to the query, a new source file is constructed which contains the interfaces comprising the application program. The new source file and a link pointing to a location of the new source file are also stored in the repository. A meta language document is constructed which contains a description of the application program interfaces to enable a connector building tool to build an interface to the application program.","One aspect of a preferred embodiment of the present invention parses source code of an application program to identify meta information.","Another aspect of a preferred embodiment of the present invention stores the meta information and a link pointing to an original location of the meta information within the application program in a repository.","Another aspect of a preferred embodiment of the present invention allows a user to query the repository to determine which source files and which interfaces comprise the application program.","Another aspect of a preferred embodiment of the present invention constructs a new source file which contains the interfaces comprising the application program.","Another aspect of a preferred embodiment of the present invention stores in the repository the new source file and a link pointing to a location of the new source file.","Another aspect of a preferred embodiment of the present invention constructs a meta language document which contains a description of the application program interfaces to enable a a connector building tool to build an interface to the application program.","A preferred embodiment of the present invention has the advantage of providing improved identification of an application program's interface in a language-independent manner.","A preferred embodiment of the present invention has the further advantage of identifying an application program's interface dispersed among multiple files.","A preferred embodiment of the present invention has the further advantage of providing a single source file containing the interfaces comprising the application program.","A preferred embodiment of the present invention has the further advantage of providing an identification of the interfaces comprising the application program which relieves a connector building tool of the burden of parsing multiple different languages.","A preferred embodiment of the present invention has the further advantage of providing improved usability in a tool for identifying application program interfaces.","A preferred embodiment of the present invention has the further advantage of providing improved functionality in a tool for identifying application program interfaces.","An embodiment of the invention is now described with reference to the figures where like reference numbers indicate identical or functionally similar elements. Also in the figures, the left most digit of each reference number corresponds to the figure in which the reference number is first used. While specific configurations and arrangements are discussed, it should be understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other configurations and arrangements can be used without departing from the spirit and scope of the invention. It will be apparent to a person skilled in the relevant art that this invention can also be employed in a variety of other devices and applications.","Referring first to , there is depicted a graphical representation of a data processing system , which may be utilized to implement the present invention. As may be  seen, data processing system  may include a plurality of networks, such as Local Area Networks (LAN)  and , each of which preferably includes a plurality of individual computers  and , respectively. Alternatively, networks  and  may be intranets or portions of the internet. Of course, those skilled in the art will appreciate that a plurality of Intelligent Work Stations (IWS) coupled to a host processor may be utilized for each such network. Each said network may also consist of a plurality of processors coupled via a communications medium, such as shared memory, shared storage, or an interconnection network. As is common in such data processing systems, each individual computer may be coupled to a storage device  and\/or a printer\/output device  and may be provided with a pointing device such as a mouse .","The data processing system  may also include multiple mainframe computers, such as mainframe computer , which may be preferably coupled to LAN  by means of communications link . The mainframe computer  may also be coupled to a storage device  which may serve as remote storage for LAN . Similarly, LAN  may be coupled via communications link  through a sub-system control unit\/communications controller  and communications link  to a gateway server . The gateway server  may be an IWS which serves to link LAN  to LAN . Preferably, server  is a web application server which passes transactions from a requester  on the internet  to the mainframe  upon which a back-end application serving the transaction is executing.","With respect to LAN  and LAN , a plurality of documents or resource objects may be stored within storage device  and controlled by mainframe computer , as resource manager or library service for the resource objects thus stored. Of course, those skilled in the art will appreciate that mainframe computer  may be located a great geographic distance from LAN  and similarly, LAN  may be located a substantial distance from LAN . For example, LAN  may be located in California while LAN  may be located within North Carolina and mainframe computer  may be located in New York.","Software program code which employs the present invention is typically stored in the memory of a storage device  of a stand alone workstation, LAN server, or host from which a developer may access the code for distribution purposes, the software program code may be embodied on any of a variety of known media for use with a data processing system such as a diskette or CD-ROM or may be distributed to users from a memory of one computer system over a network of some type to other computer systems for use by users of such other systems. Such techniques and methods for embodying software code on media and\/or distributing software code are well-known and will not be further discussed herein.","As will be appreciated upon reference to the foregoing, it is often desirable for a user to link an application program on the mainframe  to the internet  and\/or World Wide Web, where the application program was not originally designed for Web or internet based transactions. A preferred embodiment of the present invention assists the user in performing such a Web-enablement adaptation of the application program by providing improved identification of an interface of an application program dispersed among multiple files for consumption by a connector building tool.","Referring now to , a block diagram of a preferred embodiment of the present invention, known as a Connector Builder Assistant (CBA), is illustrated. The primary objective of the Connector Builder Assistant is to assist a user in the finding of useful application program assets for Web-enablement and the building of connectors from various environments (e.g., Java, C++) to these mainframe application program assets (such as COBOL, CICS, IMS, or DB2 transactions). Although the preferred embodiment is presented in the context of a COBOL and CICS example, the invention may be applied to provide connectors from other languages to other transaction targets, such as IMS. Source files , such as COBOL source files including copybooks  for an application , are parsed by a source code scanner  to identify meta information , and the meta information  is stored in a repository . The location  of the original source files ,  and  for all of the meta information is also stored in the repository  providing linkage  back to the source files  for a given metadatum . This repository  may then be queried  by a user to determine which source files ,  and  comprise the application , and more specifically, which interfaces  comprise the application . Using editor-style commands , the user may construct a new source file  that comprises the interface definition required by a connector tool  to build a connector  to the application. This may involve selecting  and\/or modifying  a portion out of one file, expanding another file (i.e., COPYBOOK) inline, or a combination of the two. This is a non-destructive operation in that the original files remain unchanged. An XMI (XML Metadata Interchange) document  is then created that contains the information required by the connector tool  in a canonical format. The XMI document is able to represent interfaces for many languages such as COBOL, PLI, Assembler, C, C++, and others. The production of the XMI document  allows the connector tool  to consume the XMI instead of consuming the actual program source files , , and . This relieves the connector tool  from the burden of parsing multiple different languages and various dialects of those languages.","Referring now to , the flowcharts  and  illustrate the operations preferred in carrying out the preferred embodiment of the present invention. In the flowcharts, the graphical conventions of a diamond for a test or decision and a rectangle for a process or function are used. These conventions are well understood by those skilled in the art, and the flowcharts are sufficient to enable one of ordinary skill to write code in any suitable computer programming language.","After the start  of the process , the user accesses the repository , preferably via a URL (uniform resource locator), which causes process block  to present a list of previously analyzed applications. The items in the presented list are HTML anchors; clicking on any of the HTML anchors selects the application program for which a connector is to be created. The user may also run various queries such as transactions within an application, transactions by site, transactions by region, or transactions accessing a particular data store (file or database). Filters may also be added to the queries such as a filter to show screen-based transactions only or a filter to show LINK transactions only. If the user selects one of these queries, then a list of transactions is presented according to applications, sites, regions, or data stores as appropriate to the query. The user may then select one or more transactions from the list.","Process block  allows the user to select an application, site, region, or data store  for which a connector  is to be built. Decision block  determines if the selected application  has been previously analyzed. If not, then process block  locates the selected application , and process block  performs application analysis to parse the source code  of the application program  to identify meta information . Thereafter, process block  stores in the repository  the meta information  and a link  pointing to an original location  of the meta information within the application program .","Process block  then allows the user to query the repository  to determine which source files (, , and ) and which interfaces  comprise the application program . Responsive to the query, process block  displays a list  of the transactions comprising the application program as shown in FIG. . For each transaction contained in the application program , a visual indicia  is displayed such as an HTML anchor which navigates  via a link  to an entry point of the source code  corresponding to the transaction to aid the user in determining whether the transaction should be included in the connector being developed. As the transaction name may not be sufficient to enable this determination, the user may evaluate meta information describing the transaction , the input\/output specification  for the transaction, or other information in the source code implementation ( and ) of the transaction to make this determination as shown in FIG. . Process block  may display a visual indicia  which navigates to documentation stored in the repository  corresponding to the transaction.","For example, the results of a query for CICS ECI transactions may be displayed in the form of a list of transactions as shown in FIG. . For each transaction, the Connector Builder Assistant displays:\n\n","For each transaction, an indication is also displayed as to whether this transaction is a LINK transaction, a BMS transaction, or an undetermined type of transaction. A check button  is displayed adjacent each transaction which the user may click to select the transaction for inclusion in the connector. For a link transaction, under the transaction name and description are displayed one or more HTML anchors  representing links  stored in the repository  which navigate  to the interface  associated with the transaction. For a BMS transaction, under the transaction name and description are displayed one or more HTML anchors which navigate to the BMS map descriptions for the transaction. No I\/O HTML anchors are displayed for an undetermined transaction. The process then continues to process block  on FIG. . This path is illustrated by flowchart connector  on FIG.  and flowchart connector  on FIG. . Process block  displays other HTML anchors as appropriate.","Process block  allows the user to select a displayed transaction for inclusion in the connector and configuration . For each selected transaction  and , process block  may display a data structure , such as the CICS example shown in , corresponding to the selected transaction  to enable the user to choose the selected transaction's input and output data structures. Although the invention is presented in the context of this CICS example, the invention may be practiced to select transactions and data structures of other transaction systems.  illustrates a CICS ECI Transaction Configuration page which lists all  level COBOL data structures which are candidates for an input data structure , and, as a separate list, all variables which are candidates for an output data structure. The two data structure lists are ordered by I\/O likelihood. I\/O likelihood is computed as follows from highest to lowest:\n\n","Process block  allows the user to select a data structure , and for the selected data structure , process block  computes input and output fields and overlays the fields  on the selected data structure . The input and output fields  are used by a connector builder tool  to determine what get and set methods to create on the connector . IO Interface Analysis computes the IO fields and IO interface of a given program using the data in the repository about variables set and referenced within a callable program and all the programs it calls. The IO Interface analysis propagates through CALL, LINK, and XCTL statements within the analyzed program. This process may be recursive as the called program may in turn call another. Process block  allows the user to edit  the computed fields  if the user disagrees with the computed results provided by the IO Interface Analysis; and process block  analyzes the selections and editions to determine if an error exists in the selection. For example, if the user selects an undetermined transaction type, then a warning may be given that no information will be exported to the connector other than the transaction name. If the user selects a transaction whose type is determined, but whose information is incomplete, a warning is given. If the user has selected no transactions, an error is given.","Thereafter, process block  constructs a new source file  containing the interfaces which comprise the application program , and stores the new source file  and a link  pointing to a location of the new source file  in the repository . In the preferred embodiment, this file is a copybook-like file containing all  level data structures which are an input or output, as well as input and output information, in a human readable form  and\/or an XML file . The user may view the HTML rendered report  which lists the application name; connectivity information such as that needed to configure TCP and the ECI client; each transaction of the application by name; and for a LINK transaction, the input and output COMMAREAs together with any data element descriptions that may be in the analysis repository; or for a BMS transaction, the input and output BMS maps together with any screen and data element descriptions that may be in the analysis repository. Additionally, if information about the data item usage (input only, output only, or input\/output) in the transaction is known, it is listed in this report. Process block  then constructs a meta language document  containing a description of the application program interfaces to enable a connector building tool  to build a connector interface  to the application . The process then ends at process block .","Returning now to decision block , if the selected application is found, then processing continues to process block  which allows the user to query the repository to determine which source files and which interfaces comprise the application program.","Using the foregoing specification, the invention may be implemented using standard programming and\/or engineering techniques using computer programming software, firmware, hardware or any combination or sub-combination thereof. Any such resulting program(s), having computer readable program code means, may be embodied within one or more computer usable media such as fixed (hard) drives, disk, diskettes, optical disks, magnetic tape, semiconductor memories such as Read-Only Memory (ROM), Programmable Read-Only Memory (PROM), etc., or any memory or transmitting device, thereby making a computer program product, i.e., an article of manufacture, according to the invention. The article of manufacture containing the computer programming code may be made and\/or used by executing the code directly or indirectly from one medium, by copying the code from one medium to another medium, or by transmitting the code over a network. An apparatus for making, using, or selling the invention may be one or more processing systems including, but not limited to, central processing unit (CPU), memory, storage devices, communication links, communication devices, servers, input\/output (I\/O) devices, or any sub-components or individual parts of one or more processing systems, including software, firmware, hardware or any combination or sub-combination thereof, which embody the invention as set forth in the claims.","User input may be received from the keyboard, mouse, pen, voice, touch screen, or any other means by which a human can input data to a computer, including through other programs such as application programs.","One skilled in the art of computer science will easily be able to combine the software created as described with appropriate general purpose or special purpose computer hardware to create a computer system and\/or computer sub-components embodying the invention and to create a computer system and\/or computer sub-components for carrying out the method of the invention. Although the present invention has been particularly shown and described with reference to a preferred embodiment, it should be apparent that modifications and adaptations to that embodiment may occur to one skilled in the art without departing from the spirit or scope of the present invention as set forth in the following claims."],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENT","Creating a Connector Builder Project","Identifying Transactions to be Analyzed","Identifying Data Structures","Creating Analysis and Report Files"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention and the advantages thereof, reference is now made to the Description of the Preferred Embodiment in conjunction with the attached Drawings, in which:",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},"FIG.  and  are flowcharts illustrating operations preferred in carrying out the preferred embodiment of the present invention; and",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 5","FIG. 6","FIG. 7"],"b":"296"}]},"DETDESC":[{},{}]}
