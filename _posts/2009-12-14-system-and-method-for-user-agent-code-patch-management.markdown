---
title: System and method for user agent code patch management
abstract: A system and method for executing a user agent in an electronic device. Upon each startup of the user agent, the electronic device loads binary code of a base version of the user agent into memory, and determines whether a binary patch has previously been downloaded. If the patch has been downloaded, it is applied to the base version and the updated base version is executed. The binary patch may be downloaded from a server, which compiles the binary patch on the basis of stored source code of the base version and stored source code of one or more enhancements selected by the electronic device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08701104&OS=08701104&RS=08701104
owner: Opera Software ASA
number: 08701104
owner_city: Oslo
owner_country: NO
publication_date: 20091214
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The invention relates generally to extending the functionality of a user agent such as a web browser which is implemented in a handheld or mobile device.","Computer users typically use user agent applications such as web browsers to access documents and other resources that are available over a computer network, and perform other functions such as communicate with friends, play games, and upload resources to the network to be accessed by others.","Typically, an application programming interface (API) is built into a user agent for the purpose of extending the user agent's functionality. Such an API defines ways in which other software applications may request services from the user agent. This allows \u201cadd-on\u201d or \u201cplugin\u201d software to be written to extend the functionality of the user agent, based on vocabulary and calling conventions defined within the relevant API. Furthermore, the API information can be published to allow third parties to develop add-ons or plugins for the user agent.","However, user agents such as web browsers are increasingly being used on mobile or handheld devices with limited processing, memory, and storage capabilities. Examples of such devices include cellular telephones, personal digital assistants (PDA's), \u201cnetbooks,\u201d etc. The installation of add-on or plugin software consumes memory and storage of such devices, as does the inclusion of the API in the user agent. Also, downloading add-on or plugin software to mobile\/handheld devices can be slow, due to the amount of data being downloaded and the limited bandwidth and processing capabilities of such devices.","Furthermore, it is not possible for an add-on or plugin to change the actual native code of the device. Thus, the binary code of the base version of the user agent cannot be changed or updated using software extensions such as add-ons or plugins.","A system and method is described herein which allows the functionality of a user agent to be extended in an improved manner.","An exemplary embodiment is directed to a system and method for executing a user agent in an electronic device. Such method may include storing binary code of a base version of the user agent in a first data storage area of the device; utilizing a processor in the device to initiate execution of the user agent by: loading the binary code of the base version in the first data storage into memory, determining whether a binary patch exists in a second data storage area of the device, executing the binary code of the base version if the binary patch is determined not to exist, and applying the binary patch to update the binary code of the base version and executing the updated binary code if the binary patch is determined to exist.","According to this exemplary embodiment, a binary patch can be downloaded to the electronic device via a network while the user agent is running. Furthermore, this binary patch can be downloaded from a server in response to the electronic device receiving user input designating one or more selectable enhancements to the user agent, and transmitting a message to the server identifying the designated enhancement(s).","Thus, according to the abovementioned exemplary embodiment, enhancements to the user agent can be downloaded as a binary patch. This helps reduce the size of downloadable enhancements, thereby providing faster downloading of user agent enhancements and saving storage space in the electronic device.","Another exemplary embodiment is directed a system and method implemented in a server for providing to the electronic device a binary patch including the designated enhancement(s). Such server may include a data storage device which stores the source code of a base version of a user agent installed in the device, and source code of a plurality of enhancements to the user agent. The method according to this embodiment may include: receiving a message from an electronic device designating one or more of the enhancements via the network; compiling a combination of the source code of the one or more designated enhancements into a binary patch, based on the source code of the base version; and transmitting the binary patch to the device via the network.","In this exemplary embodiment, as a process for compiling the combination of source code of the designated enhancement(s) into the binary patch, the server may perform the following: compile the source code of the base version alone to produce a first binary executable; compile the source code of the base version together with a combination of the source code of the one or more designated enhancements to produce a second binary executable; compare the second binary against the first binary executable to determine changes therein; and produce the binary patch to contain the determined changes. For example, if it is determined that code optimization in compiling the first binary executable (i.e., of the base version alone) removed code which is needed by the code of the designated enhancement(s), such removed code may be re-inserted by the binary patch. On the other hand, it may be determined that code optimization for compiling the second binary executable caused some code to be removed from the base version, which was not removed by optimization when compiling the first binary executable. I.e., it can be determined whether some of the code in the base version can be replaced (or rendered unnecessary) by code in the designated enhancement(s).","Further scope of applicability of the present invention will become apparent from the detailed description given hereinafter. However, it should be understood that the detailed description and specific examples, while indicating preferred embodiments of the invention, are given by way of illustration only, since various changes and modifications within the spirit and scope of the invention will become apparent to those skilled in the art from this detailed description.","The drawings will be described in detail in the course of the detailed description of the invention.","The following detailed description of the invention refers to the accompanying drawings. The same reference numbers in different drawings identify the same or similar elements. Also, the following detailed description does not limit the invention. Instead, the scope of the invention is defined by the appended claims and equivalents thereof.","The present invention is directed toward a system and method of implementing a user agent (e.g., web browser) into an electronic device (e.g., mobile phone or PDA) in which the functionality of the user agent can be extended quickly and easily, and without requiring too much processing and storage resources from the device. This can be accomplished by storing a binary executable of the base version of the user agent, and downloading software extensions (also referred to as \u201cenhancements\u201d to the user agent) as a binary patch. The binary executable (also referred to as \u201cbinary\u201d) of the base version can be stored in a protected storage area of the device. The binary patch can be stored persistently in a dedicated storage area of the device, until such time the user decides to further enhance the user agent or, possibly, revert back to the base version. The user agent may then be restarted to apply the enhancement(s).","Thereafter, each time the user agent is started, the binary of the base version may be loaded into memory so that the binary patch can be applied by a binary patch utility installed in the device. This patching may result in, e.g., removing part of the base version of the user agent no longer needed, restore part of the base version removed by an earlier optimization (when the source code of the base version was compiled), and\/or insert new code from the enhancement(s).","As such, it is not necessary to install an API in the electronic device, or otherwise customize the code on the device, to extend the functionality of the user agent. Instead, the binary patch utility handles this. Also, since enhancements are downloaded in the form of binary patches, downloads are fast and involve only a small amount of data.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","100","100","100"]},"In , a device  has various functional components including a central processor unit (CPU) , memory , data storage , a video interface , a network interface , and communication port(s) . These components may be in communication with each other by way of a system bus .","The memory , which may include ROM, RAM, flash memory, or any other combination of fixed and removable memory, stores various software components when they are running on the system, and data relating to the running processes. According to an exemplary embodiment, the software components and data which are in memory  at a given time may include a basic input\/output system (BIOS) , a virtual machine , a binary patch utility , a binary of the base version of the user agent , and a binary patch . Examples of other software components which may be found in memory , but which are not shown in , include an operating system, various applications and device drivers, and other executable files or instructions such as macros and scripts. Also, the memory  may include various types of data (not shown) which are used by software components as they are executed.","As discussed above, one of the running software components in memory  may include a virtual machine  which is compiled into the device . A \u201cvirtual machine\u201d refers to a software implementation of a machine or computer which executes other programs like an actual machine or computer. As such, the virtual machine  may comprise a series of computer instructions which, when executed by the CPU , interprets and executes the code of other programs, e.g., base version of the user agent . The programs executed by the virtual machine  are limited to the resources and abstractions provided within the virtual machine ; such programs cannot break out of this virtual world and access other resources. The virtual machine  program may kept in data storage  (described below), transferred to memory  when the device  is turned on, and executed by the CPU  to cause the device  to perform operations consistent with principles of the present invention described herein.","According to an exemplary embodiment, the virtual machine  may be designed to run applications which are compiled into a byte-code binary. For instance, the base version of the user agent  may be compiled into the form of a byte-code binary to be executed by the virtual machine .","Thus, in an exemplary embodiment, the base version of the user agent  may be written in a programming language which can be compiled into a byte-code binary. Such a programming language could include one or both of the following attributes: names from the source code are not included in the byte-code binary, and code optimization is performed when compiling source code. Also, it is contemplated that software extensions, e.g., enhancements to the base version of user agent , can be written in the same type of programming language as the base version , although any enhancement would ultimately be sent to the device  as a binary patch  to be applied to the base version  by the binary patch utility .","It is also possible for the binary patch utility  to be compiled as a byte-code binary to be executed by the virtual machine . Alternatively, the binary patch utility  may be integrated as part of the virtual machine , or otherwise implemented on the device  in any manner which allows it to be executed when needed.","While the virtual machine  has been described as being configured to run byte-code binaries in an exemplary embodiment, this is not intended to be limiting on the present invention. For instance, the virtual machine  may be designed to run other types of binary executables, as will be contemplated by persons of ordinary skill in the art. The virtual machine  could also be configured to provide an environment for writing add-ons or extension software to be compiled separately, rather than being deployed as a binary patch against the base version .","Referring again to , the data storage component  may include a flash memory, hard disk drive, removable storage device (e.g., memory card), other types of volatile or non-volatile storage devices, or any combination thereof. According to an exemplary embodiment, a binary of the base version of the user agent  may be stored in a protected area of data storage , e.g., a read-only storage area, and loaded into memory  upon startup of the user agent. For example, the binary of the base version  may be installed into a particular read-only, non-volatile area of data storage  at some point in the manufacturing process of the device . However, it is not required for the protected storage area to be read-only. For instance, it is contemplated that the binary of the base version  could be downloaded by the user after the device  has shipped, and kept in a designated area of data storage . It might be beneficial, however, to provide some measure in the device  to protect the binary of the base version  from being deleted or modified while in data storage .","The data storage component  may also include another type of storage area for the binary patch , which is downloaded as an enhancement to the user agent (i.e., base version ) consistent with principles of the invention described herein. The binary patch  should be persistently stored in data storage , i.e., it should survive shutdowns of the program effecting the download (e.g., user agent) and of shutdowns of the device  itself. According to an exemplary embodiment, when a binary patch  is downloaded, it may be stored in a particular location in data storage  set aside for downloaded enhancements, and remain there until it is replaced with another binary patch  providing another enhancement, or (as an optional feature) the user chooses to revert the functionality of the user agent back to its base version.","Referring again to , the communication ports  may be connected to one or more local devices  such as user input devices, a printer, a media player, external memory devices, and special purpose devices such as, e.g., a global positioning system receiver (GPS). Communication ports , which may also be referred to as input\/output ports (I\/O), may be any combination of such ports as USB, PS\/2, RS-232, infra red (IR), Bluetooth, printer ports, or any other standardized or dedicated communication interface for local devices .","The video interface device  is connected to a display unit . It is possible that the display unit  might have a touch-sensitive screen allowing the display unit  to double as a touch-sensitive input device. The touch-sensitive input device aspects of the display unit  may be considered as one of the local devices  communicating over a communication port . Further, for exemplary embodiments in which the electronic device  is implemented as a PDA, mobile telephone, or other small portable device, the display unit  will generally be an integrated display such as an LCD display. However, it will be readily apparent that the principles of the present invention may be applied to situations where the display unit  is not integrated with the other elements of the computing device , e.g., where the display unit  is a standalone monitor.","The network interface device  provides the device  with the ability to connect to a network in order to communicate with an external server  and\/or a remote device . The communication network , which in  is only illustrated as lines connecting the network interface  with the server  and remote device , may be, e.g., a local area network, a mobile telephone network (e.g., GSM, UMTS, or CDMA), a wireless network such as Wi-Fi Wireless LAN (IEEE 802.11) or WiMAX (IEEE 802.16), or the Internet. The server  may be configured to distribute enhancements to the user agent in the form of binary patches , in accordance with principles of the invention, as will be described in more detail below. The remote device  may in principle be any computing device with similar processing and communications capabilities as the device , but may also be another server or some other unit providing a networked service.","It will be understood that the device  illustrated in  is not limited to any particular configuration or embodiment regarding its size, resources, or physical implementation of components. For example, more than one of the functional components illustrated in  may be combined into a single integrated unit of the device . Also, a single functional component of  may be distributed over several physical units. Other units or capabilities may of course also be present. Furthermore, while the device  may be a mobile device of limited resources such as a PDA, cell phone, or netbook, as suggested earlier, it could also be any type of general purpose computer such as a desktop PC.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 2"],"b":["156","100","156"]},"The functional components illustrated in  may be implemented by a programmer as software modules which are compiled into the binary executable of the base version of the user agent . However, it is also possible that the functionality associated with any of these components could alternatively be implemented by hardware in the device , or implemented partly by the base version  software and partly by hardware, as will be contemplated by those skilled in the art. It will further be understood that, some of the functionality described below in connection with  may alternatively be implemented as part of an operating system (not shown) or the BIOS  of the device , or even as an enhancement to the user agent which is implemented by downloading a binary patch  consistent with principles of the present invention described herein.","The base version of the user agent  includes a user interface  that may be displayed on the display unit  shown in . The user interface  may include an address field  where the user may input or select the universal resource locator (URL) of a document or a service he or she wants to retrieve. For example, the user may use a keyboard or other type of input device to type in the URL in the address field . The address field  may also be a link that is displayed and may be activated by the user by touch according to principles of the present invention (alternatively, such a link may also be activated using a pointing device such as a mouse). Alternatively the URL may be specified in the code of a document or script already loaded by the user agent.","In any case, the URL may be received by a window and input manager  that represents the input part of the user interface  associated with, or part of, the base version of the user agent . The URL may then be forwarded to a document manager , which manages the data received as part of the document identified by the URL.","The document manager  forwards the URL to a URL manager , which instructs a communication module  to request access to the identified resource. The communication module  may be capable of accessing and retrieving data from a server  or remote device  over the network  using the hypertext transfer protocol (HTTP), or some other protocol such as HTTPS or FTP. The communications module  communicates with the server  or remote device  using the network interface . The communication module  may also be capable of accessing data that is stored in local memory  or data storage .","If communications outside the device  is required to be encrypted, e.g., as specified by the protocol used to access the URL, encryption\/decryption module  handles communication between the URL manager  and the communication module .","The data received by the communication module  in response to a request is forwarded to the URL manager . The URL manager  may then store a copy of the received content in local memory  using a cache manager  which administers a document and image cache . If the same URL is requested at a later time, the URL manager  may request it from the cache manager , which will retrieve the cached copy from the cache  (unless the cached copy has been deleted) and forward the cached copy to the URL manager . Accordingly, it may not be necessary to retrieve the same data again from a server  or remote device  when the same URL is requested a second time.","The URL manager  forwards the data received from the communication port  or cache  to a parser  capable of parsing content such as HTML, XML and CSS. The parsed content may then, depending on the type and nature of the content, be processed further by an ECMAScript engine , a module for handling a document object model (DOM) structure , and\/or a layout engine .","This processing of the retrieved content is administered by the document manager , which may also forward additional URL requests to the URL manager  as a result of the processing of the received content. These additional URL's may, e.g., specify images or other additional files that should be embedded in the document specified by the original URL.","When the data representing the content of the specified document has been processed it is forwarded from the document manager  in order to be rendered by a rendering engine  and displayed on the user interface .","The various functional components thus described may be programmed as a corresponding set of software modules in source code, which are compiled into the binary (e.g., byte-code binary) which is executed by the virtual machine . Of course, the functionality of various components in  may be programmed into fewer larger modules, and the functionality of a single component in  may be distributed or replicated over several software modules in the source code.","Further, as mentioned above, it is not necessary for the base version of the user agent  to be programmed to include all of the functionality and\/or components illustrated in . It is even contemplated that some of the functionality in  may be implemented by enhancements which are downloaded to the device  as a binary patch .","As mentioned above, the functionality of the base version of the user agent  may be extended or enhanced by software which is downloaded to the electronic device  in the form of a binary patch . According to an exemplary embodiment, such software enhancements may be stored in source code form in one or more servers . When an electronic device  requests an enhancement or combination of enhancements from a particular server , the server  may compile the source code of the requested enhancement(s) into an optimized binary patch  for downloading to the device .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 3","b":"130"},"Among the modules in  is a client communication module  that may be configured to receive requests from devices  via the network . The client communication module  may receive HTTP(S) requests over TCP\/IP, but consistent with the principles of the invention, the communication device  may also communicate using other standards or protocols and other types of networks than the Internet. By way of example, the client communication module  may be configured to communicate, directly or indirectly, over a mobile telephone network such as GSM, UMTS, CDMA or over wireless networks such as Wi-Fi Wireless LAN (IEEE 802.11) or WiMAX (IEEE 802.16).","The client communication module  may be connected to an authentication and authorization module , which determines whether a requesting client needs to be authenticated and determines whether the client is authorized to access requested resources from the server . Authentication and authorization can be handled by methods that are well known by those skilled in the art. One example of such methods is username\/password combinations.","For instance, the client may be an electronic device  requesting one or more enhancements to the base version of the user agent , or requesting a list of enhancements available on the server . However, according to an exemplary embodiment, the server  may also be configured to serve requests for other resources on the network , which are identifiable by URL's or universal resource identifiers (URI's).","The server  may maintain a log  of requests and the results of authentication via a logging module . The log  may be stored in a data storage device  comprised of a hard disk drive, an optical disk drive, a disk array formed of multiple disk drives, solid-state storage (e.g., flash drive), magnetic tape, any other type of data storage as will be contemplated by those of ordinary skill in the art, or any combination thereof.","Furthermore, the data storage device  may also store the source code of the base version of the user agent , and the source code for each enhancement thereof which is available through the server . This is collectively illustrated as source code  in . A compiler  is further provided in server  for compiling such source code , which corresponds to a combination of one or more enhancements selected by a user of an electronic device , into a binary patch .","According to an exemplary embodiment, the process of compiling the selected enhancement(s) into the binary patch  may include compiling the source code of base version of the user agent  into one binary executable, and also compiling the source code of the base version  together with the source code of the selected enhancement(s) into another binary executable. For instance, this could be done as part of a process of compiling the binary patch  to contain changes implemented by the selected enhancement(s) against the base version  (such process being described in more detail below). The aforementioned binary executables may be produced by the compiler  in byte-code binary form. As such, the source code  for the base version  and enhancements may be written in a programming language which is designed specifically to be compiled into byte-code binary form.","Also, the compiler  may be designed to implement code optimization as part of the compilation process. Code optimization generally refers to a process for tuning the output of the compiler  to minimize or maximize some attribute of the resultant binary, e.g., minimize time for execution and\/or minimize the amount of memory occupied. For example, the code optimization implemented by the compiler  may be designed to perform one or more of the following processes: removing unused classes, methods, or fields from the source code; in-lining methods in the source code; turning virtual methods into final methods and removing them from the virtual method table in a class; and other optimization processes known in the art.","As mentioned earlier, the compiler  may compile the source code of the base version of the user agent  alone into a first binary executable, and also compile the source code of the base version  together with the source code of one or more selected enhancements into a second binary executable. As such, the compiler  may include an analyzer component  which analyzes the two binaries in order to detect changes in the second binary executable against the first binary executable, i.e., to detect changes implemented by the selected enhancement(s) against the base version . Please note, the terms \u201cfirst binary executable\u201d and \u201csecond binary executable\u201d are used merely to distinguish the two binaries, and should not be interpreted as indicating a particular sequence in which the two binaries are to be compiled. For example, it does not make a difference whether the compiler  produces the second binary executable before the first, or vice versa.","The analyzer  may be implemented in the compiler  to be functionally equivalent to a diff utility. Persons ordinarily skilled in the art will understand that a diff utility can be used to output the differences between two binary files as a patch (or a \u201cdiff\u201d as sometimes referred to in the art). Thus, the analyzer  may be used to generate the binary patch  on the basis of the first and second binary executable. However, a diff utility is only one example of the type of analyzer component  which may be implemented in the compiler . For instance, the analysis of the analyzer component  may be enhanced with respect to conventional diff utilities, by taking into consideration certain aspects of format binary code in order to reduce the size of the binary patch . For instance, if all unused methods or routines in the first binary executable were to be removed, this could require many more addresses in the code to be updated, and considerably increase the size of the binary patch . Thus, the analyzer  could decide to allow certain unused methods or routines to remain, in order to reduce the size of the binary patch .","Among the types of changes to be detected by the analyzer  is the insertion of new code from the selected enhancement(s) into the second binary executable. However, the analyzer  may also be able to detect other types of changes in the second binary executable against the first binary executable.","For instance, the analyzer  may detect optimizations in the binary of the base version  (i.e., the first binary executable) which are no longer valid in view of the selected enhancements. An example of this is as follows. The compiler optimization of the base version  alone may have removed a method or class which is needed by one of the selected enhancements. This could be detected by finding part of the base version  which was included in the optimized second binary executable, but not found in the optimized first binary executable.","The analyzer  might also detect another type of change, by finding parts of the optimized binary of the base version  which are no longer needed in view of the selected enhancement(s). This could be accomplished by finding code in the optimized first binary executable, which is not found in the optimized second binary executable. However, as described above, the analyzer  might decide not to remove all unused methods or code, in an effort to reduce the size of the binary patch .","The analyzer  may cause the compiler  to output the detected changes as the binary patch . As such, when the binary patch  is applied by the binary patch utility , it may modify the binary of the base version  in the device  as follows: inserts the new code of the selected enhancement(s); removes parts of the base version  code which are no longer needed; and\/or restores parts of the base version  code which were removed by optimization, but are required by the selected enhancement(s).","In addition, the binary patch  might be used to apply transformations (e.g., addition or logical XOR operations) to certain data in the binary code of the base version , rather than simply overwriting such data. As an example, the binary patch  may implement a transformation like adding the value 2 to the 4-byte value at a designated address in the binary of the base version . This would allow encoding the value 2 as a single byte, instead of overwriting all 4 bytes in the given example. Such a feature can increase the efficiency in updating several consecutive addresses in the binary of the base version .","Referring again to , the server  may also include a developer interface  whereby the source code  for the base version of the user agent  and the available software enhancements are imported into the data storage device . Different enhancements may be imported at different times via the developer interface . For example, the source code for certain software extensions or enhancements may be developed not only after the base version  is compiled into the devices , but also after other enhancements are already made available in the server  for downloading. Furthermore, it is contemplated that an updated base version of the user agent  may be developed and imported into the data storage device  to replace the old one (which may or may not also require at least one of the stored enhancements to be replaced).","In an exemplary embodiment, the developer interface  may comprise a programming interface, with the necessary input\/output devices (not shown) to allow programmers to develop and test the source code  on the server . On the other hand, the server  may also include a source communication module  connected to the developer interface , which allows the source code  to be imported from external computers or servers via network . However, it is contemplated that the use of a network  to receive the source code  is optional; thus the source communication module  is illustrated in  using dotted lines. Furthermore, even though the source communication module  is illustrated as being connected to network , it may be connected to an entirely different network than the one used for receiving enhancement requests from electronic devices .",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 4","FIG. 4"],"b":["100","130","100","130","160","130","100","336","130","156","100"]},"An explanation of exemplary processes which may be performed in an electronic device  and a server , in order to implement aspects of the present invention described herein, will now be described in connection with . Furthermore,  illustrates an exemplary sequence of data communications and processes between the device  and server  for implementing certain aspects of the present invention.","It should be noted that  is provided solely for the purpose of describing example embodiments. The sequence of operations and processes illustrated therein is not intended to be limiting on the invention. As such, it would be possible to change the sequence of the operations\/processes illustrated in these figures, and\/or omit one or more of the illustrated operations or processes, without departing from the spirit and scope of the present invention.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIGS. 5 and 6","FIGS. 5 and 6"],"b":["100","152","101","100","100","152"]},{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 5","FIG. 5"],"b":["100","10","156","103","100","103","130","156","103","156"]},"Next, block S illustrates that a command to start up the user agent is received. For instance, such a command may be issued by the user via an input device, after the device  has been turned on and booted up. Alternatively, such command may be issued automatically as a part of the normal routine for powering up the electronic device . According to block S, the binary code of the base version  is transferred from its particular area of data storage  into memory .","According to decision block S of , a determination is made as to whether a binary patch  is currently stored in another designated area of data storage . This step is also illustrated in . Solely for purposes of distinguishing the areas of data storage  of the base version  and the binary patch , respectively, the area of data storage  provided for the base version  may be referred to as the \u201cfirst data storage area,\u201d while the area of data storage  provided for the binary patch may be referred to as the \u201csecond data storage area,\u201d within the written description and attached claims.","Particularly, whenever an enhancement to the base version of the user agent  is downloaded to the device , it can be persistently stored in the same second data storage area, replacing a previously-downloaded patch  if necessary. This helps simplify the operation of S in determining whether a binary patch  should be applied to the binary of the base version , and eliminate the need to choose between different possible patches  to be applied. As mentioned earlier, the binary patch  is persistently stored in such area of data storage  in the sense that it remains there until it is replaced by a subsequently downloaded binary patch  or (optionally) until the user decides to discard the enhancements and revert back to the functionality of the base version .","Referring again to , if S determines that no binary patch  is stored in the designated area of data storage , then the binary of the base version  is executed as illustrated in block S. On the other hand, if a binary patch  is found, the binary of the base version  is updated by applying the binary patch  to it, as shown in block S. The binary patch utility  may be called to perform this operation. Then, as illustrated in block S, the updated binary code resulting from application of the binary patch  may be executed. As illustrated in , the result of executing either the binary of the base version  (S), or the updated binary (S), is that a user agent is now running on the device .",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 6","FIG. 8"],"b":["100","130","158","100"]},"According to block S of , the electronic device  downloads from a server  a list of available enhancements to the user agent. For example, as illustrated in , this downloading process may involve the following: the electronic device  transmitting a request (e.g., HTTP request) to the server  via the network  (e.g., Internet), the designated server  performing whatever process is necessary to generate a list, and the server  transmitting such list to the device  as a response to the request. In S, the device  may download a complete list of the enhancements stored in the server , or download only a partial list, e.g., as an update to a previously-obtained list.","Since the electronic device  now has information on the available enhancements, the user may designate which of these enhancements are to be downloaded. This is illustrated in block S of , and also shown in . For example, a list of available enhancements may be presented to the user via display unit  (or some other output unit) in a manner allowing for the user to highlight, click on, or otherwise select items from such list. It is contemplated that a user could use a keyboard, mouse or other pointing device, voice command recognizer, or any other type of input device to input his\/her selections to the electronic device .","It should be understood, however, that it is not absolutely necessary to output the available enhancements to the user as a list. For instance, a configuration wizard (i.e., sequence of dialog boxes) may be run on the electronic device  to guide the user through the choice of available enhancements for the user agent.","Also, it is not absolutely necessary for the user to explicitly designate the enhancement(s) to be downloaded in S. Instead, there may be logic in the device  for automatically designating one or more available enhancement(s) to be downloaded from the server  according to S. As an example, the device  may be configured to automatically select the newest enhancements as they are made available on the server . Else, enhancements may be automatically designated for downloading on the basis of predetermined user preferences which may be, for example, input by the user during setup, or automatically determined by analyzing usage history with respect to the user agent.","In , block S shows that the electronic device  may transmit a request or message to the server  which identifies the enhancement(s) selected by the user. As shown in , this may cause the server  to execute a process for compiling the designated enhancement(s) into a binary patch  (as will be described below in connection with ). After the binary patch  is compiled, it may be downloaded to the device  as shown in block S of  (and also illustrated in ). Particularly, the downloaded binary patch  will be persistently stored in its designated area of the data storage  (i.e., the second data storage area).","As shown in block S of , the user agent may be restarted so that the downloaded binary patch  can be applied to the binary of the base version , thereby allowing the designated enhancements to the user agent to be implemented. This restart may be performed automatically once the download of the binary patch  is completed. As shown in , this might cause the electronic device  to repeat part of the process of executing the user agent (e.g., starting at S of ). However, the restart of S in  need not be automatic; it may occur when the user decides to shut down, and eventually restart, the user agent or electronic device .",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 7","b":["130","158","130","130","330"]},"As illustrated in block S of , the source code  of the base version of the user agent  and available enhancements thereof are stored in the data storage device  of the server . The source code  may be updated from time to time, e.g., by adding source code of new enhancements and possibly removing the source code of outdated enhancements.","According to block S, the server  transmits the list of available enhancements to an electronic device . As illustrated in , this list may be generated and transmitted in response to a request from the device . Alternatively, the server  may be programmed to automatically transmit to the electronic device  a listing of the most recently-added enhancements from time to time (e.g., such transmissions may be broadcast to multiple devices ).","Referring again to , block S shows that the server  may receive a request or from an electronic device  designating one or more of the available enhancements of the user agent to be downloaded. As illustrated in , the receipt of such request may initiate a process, whereby the server  ultimately compiles a binary patch  and transmits it to the device . An example of such a process is illustrated by blocks S, S, S, S, and S of .","According to S, the server  may utilize its compiler  to compile only the source code of the base version of the user agent  into an optimized binary executable (referred to hereinabove as \u201cthe first binary executable\u201d). As shown in S, the compiler  may perform a separate operation of compiling the source code of the base version  together with the source code of the designated enhancement(s) into another optimized binary executable (referred to hereinabove as \u201cthe second binary executable\u201d). The order in which S and S are performed is not important, and may be switched from that in .","According to S of , the server  may analyze the first and second binary executables in order to detect changes in the second binary executable against the first binary executable, i.e., to detect changes implemented by the designated enhancement(s) against the base version . Such analysis is described above in connection with the analyzer component  of . According to such analysis, the second binary executables may be compared against the first binary executable in order to detect the changes such as:\n\n","It should be noted that the three types of changes listed above is not intended to be an exhaustive list of the types of changes that might be applied to the binary of the base version  as a result of implementing the designated enhancement(s)","According to S of , the binary patch  is generated, containing the detected changes in the second binary executable against the first binary executable. As described above in connection with , the analyzer component  in the server  may be designed to output the changes in the second binary executable against the first as the binary patch . For example, the analyzer  may be installed as a diff utility, or functionally equivalent software, capable of performing S and S.","As such, the binary patch  may be compiled so that it capable of implementing any of the following types of modifications to the binary of the base version  when applied by the binary patch utility : inserting new code of the selected enhancement(s) (i.e., Type 1 changes); re-inserting that was removed from the base version  by previous optimization, but is now needed by the designated enhancement(s) (i.e., Type 2 changes); and\/or removing code that is rendered obsolete by the code of the selected enhancement(s) (i.e., Type 3 changes).","In S of , the binary patch  is transmitted by the server  to the electronic device , where the binary patch  can be applied to the binary of the base version  according to the binary patch utility .","The invention being thus described, it will be obvious that the same may be varied in many ways. Such variations are not to be regarded as departure from the spirit and scope of the invention, and all such modifications as would be obvious to one skilled in the art are intended to be included within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will become more fully understood from the detailed description given hereinbelow and the accompanying drawings which are given by way of illustration only, and thus are not limitative of the present invention, and wherein",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
