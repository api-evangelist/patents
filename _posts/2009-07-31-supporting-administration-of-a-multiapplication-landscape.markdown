---
title: Supporting administration of a multi-application landscape
abstract: A computer-implemented method for supporting administration of a multi-application landscape includes initiating, in a multi-application computer system, a business process that involves executing multiple applications and uses run control statements associated with process steps of the business process where a business process state is subject to change. The run control statements are executed as part of performing the business process. For each run control statement being executed, at least one of multiple state indicators associated with the run control statement is selected, the state indicator representing run-state information of the business process. A representation of the business process state is generated and stored in a repository, the representation comprising (i) each state indicator selected in executing the run control statements, and (ii) an identifier for the process step where the business process state changed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08286181&OS=08286181&RS=08286181
owner: SAP AG
number: 08286181
owner_city: Walldorf
owner_country: DE
publication_date: 20090731
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This document relates to information processing.","System maintenance is an area of continuous concerns for owners and administrators of enterprise business systems. Approaches have been used in the past to maintain or restore a system after a failure or crash. New challenges can also arise, for example due to the use of linked up software applications that implement business scenarios. In some systems, multiple business processes exchange data across complex application landscapes, and use various applications and data computations for this purpose. It is important that the underlying technology provide a stable environment for maintaining diverse software, databases and operating system components. One challenge for the administrator\/owner is to keep the application environment under control at any given time. The goal is usually to avoid incidents to business processes and to sustain the application landscape with regard to smaller and larger changes. When parts of a system environment are to be restored after a breakdown, for example, this task can be complicated without detailed information about states of system components at the time of the incident.","In a first aspect, a computer-implemented method for supporting administration of a multi-application landscape includes initiating, in a multi-application computer system, a business process that involves executing multiple applications and uses run control statements associated with process steps of the business process where a business process state is subject to change. The method includes executing the run control statements as part of performing the business process. The method includes, for each run control statement being executed, selecting at least one of multiple state indicators associated with the run control statement, the state indicator representing run-state information of the business process. The method includes generating a representation of the business process state and storing the representation in a repository, the representation comprising (i) each state indicator selected in executing the run control statements, and (ii) an identifier for the process step where the business process state changed.","Implementations can include any or all of the following features. The multi-application computer system can include a hardware layer, a software layer, and a business process layer. The method can further include defining inter-dependencies of business cases associated with the business process layer, the business cases including multiple process steps and sub-process steps performed throughout the multi-application landscape to fulfill enterprise tasks. The run control statements can be included in source code of applications of the software layer. The run control statements can be included in a batch processing mechanism, the batch processing mechanism comprising starting and stopping applications of the software layer. The run-state information can include a state and a time of the business process. The repository can include a business case directory table, an active business case table, and a run-time history table. The business case directory table can include representations of a process owner, a process unit, and a process dependency, the active business case table can include representations of the state indicators and the identifiers for active business processes, and the run-time history table can include representations of the run-state information of completed business processes. Storing the representation in the repository can include initiating an agent that collects the state indicators and sends the state indicators to the repository. The multi-application computer system can include a hardware layer, a software layer, and a business process layer, and the agent can collect the state indicators from at least one of the hardware layer, the software layer, and the business process layer. The agent can evaluate at least one of XML, log files, and extracts of application tools from the hardware layer and the software layer, and can receive the state indicators from a call of the run control statement from the business process layer. The method can further include monitoring the repository for business process state changes. The monitoring can include displaying the representations of the business process states and performing maintenance on the multiple applications of the business process.","The method can be implemented using a computer program product tangibly embodied in a computer-readable storage medium and including instructions that when executed by a processor perform the method.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings, and from the claims.","Like reference symbols in the various drawings indicate like elements.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","105","110","115","105","110","115","105","110","100"]},"The business process layer  combines the software layer  and hardware layer  to achieve enterprise solutions. The business process layer  may include business processes  comprised of business cases , . A business case ,  describes a procedure of activities to fulfill enterprise tasks. A business case ,  may consist of several process steps  which can be performed on different systems, and a process step  itself may be comprised of sub-process steps. A business process  is a collection of business cases , , interconnecting multiple process steps  of business cases , . A business process  may consume or calculate data and can invoke maintenance services. Examples of business processes  include enterprise product ordering, invoicing, inventory management, financial transactions, and the like.","The hardware layer  performs the functions of processing, server tasks such as file sharing, memory storage, network interconnect, and the like. The hardware layer  may include one or more servers , , , , processing components, circuit boards, storage components, network components, and the like. The hardware layer  may be configured in any type of arrangement, including client-server, service-oriented, IT service management architectures, and the like. The hardware layer  is here the lowest layer, and is connected to the software layer  through software applications running on the hardware components. The business process layer  combines multiple hardware and software layer components into business processes , where each business process may use a different combination of components on the hardware layer  and the software layer .","For instance, business process step BPS  may require functionality from server  and server , while business process step BPS  may require functionality from server  and server . On the hardware layer , information about progress of a process can be found in log files. Applications can write processing messages into these log files. These messages may reflect the current state of the hardware and can be used to determine business process run-state information. An advantage of determining business process run-state information in this manner is that less effort is required to set up the monitoring because the hardware log files are already typically in place within a multi-application landscape .","The software layer  is a higher layer than the hardware layer  and lower than the business process layer . The software layer  may contain application programs , ,  for performing software functions, database systems  for storing information, tools to exchange data across the multi-application landscape , and the like. The software layer  may be configured in any type of arrangement, including client-server, service-oriented, or IT service management architectures, and the like. The software layer  may use any of a variety of software languages, such as C++, Java, COBOL, to name a few. The software layer performs sub-process steps that make up the process steps  of business processes within the business process layer. Applications , ,  and databases  of the software layer  may have their own monitoring tools to measure activities and make them visible. These monitoring tools may be used to check for intensive data load, monitor processes, prove the parallelization of user work, and the like. Data produced by these monitoring tools may be extracted to XML or log files within the software layer , and these files may be used to identify run-states of process activities on the business process layer . An advantage of determining run-state information using the software layer  is that little development work needs to be done.","As will be described below, information of run-states of active business processes  may be collected and stored synchronously. Such information may support system maintenance activities and may assist administration during failure recovery. This improves planning, changing, and optimizing the multi-application landscape . To achieve these improvements, the system may provide knowledge about the business processes  and their dependencies within the multi-application landscape .","As shown in , a single business process  can invoke process activities across part of, or the whole multi-application landscape  on more than one server , , , , and use different applications and exchange data from the software layer . For instance, if a server  fails or a database  stops processing, then one or more business processes  can be affected. As will be described in examples below, to determine the impact to process activities across the enterprise and to recover in such a scenario, the system can provide information about run-states, dependencies, and other useful data for maintenance activities.","Referring now to  and , an exemplary embodiment of an RT-BCDB  for supporting administration of the multi-application landscape  will be described. Here, an architecture for the RT-BCDB is illustrated. RT-BCDB can include a database for collecting information about business processes  of the multi-application landscape . The RT-BCDB  may include a directory , a run-time history table , an active business cases table , and an application programming interface (\u201cAPI\u201d) .","The directory  is here a list within the RT-BCDB  that provides information such as system owners for business cases, processes, processing units, process steps, process owners, dependencies, to name a few examples. Each business case ,  may be associated with an identifier  so that when the business case ,  appears in another location within the RT-BCDB  it can be referenced to find more information. For example, whenever a business case ,  is active its identifier  can be found in the active business case table  and the user can check it against the directory  for more information. This information could include, among other items, the systems of the multi-application landscape  upon which the business cases ,  rely. Knowing the system where the business case ,  or related processing is performed can be important to improving maintenance of the multi-application landscape .","The run-time history table  is here a table within the RT-BCDB  that stores executions of business processes . Each row of the table  may be associated with a terminated business case , . An entry of the run-time history table  may describe the business case , , its process activity, the state of termination of the business case , , and the time it took the business case ,  to execute from start to termination, or its \u201crun-time.\u201d A run-time history table  is not limited to this information, but may comprise any information relevant to understanding the business case ,  process step  for supporting maintenance of the multi-application landscape . As one example, a \u201cBC.PS. s, time\u201d entry  could represent process step  of process  of business case , where business case  terminated with state \u201cs\u201d (successfully) and in \u201ctime\u201d milliseconds.","The active business case table  is another table within the RT-BCDB . The active business case table  here stores run-states of business cases ,  that are currently running in the multi-application landscape  to provide real-time capabilities for business processes  maintenance. Each entry in the active business case table  may represent the state of the process step  of any currently active business case , . As one example, a \u201cBC.PS.. success\u201d entry  could represent process step  of process  of business case  which has a run-state of \u201csuccess.\u201d Other examples of run-states that could be found within the active business case table  include \u201cactive,\u201d \u201cstopped,\u201d \u201cabort,\u201d \u201cwait,\u201d and others depending on the business processes states being stored in the RT-BCDB .","The API  is the interface for data collection  and monitoring  between the RT-BCDB  and one or more layers of the multi-application landscape . API data collection  may be performed by one or more agents. The agents can collect information of run-states from one or more of the hardware , software , and business process  layers. The agents can then write the collected run-state information along with any other desired information into the table of active business cases . In one exemplary embodiment, the agents could be implemented through script or other software files executed within an operating system or other application on the software layer . In another exemplary embodiment, the agents could be implemented at the business process layer  by requiring business cases process steps  to use agents at various points within their execution to collect run-state information.","API monitoring  communicates the RT-BCDB  information to third parties so that system maintenance may be performed. The API monitoring  may connect to third party applications for representing the RT-BCDB  information in the form of available business cases , , the progress or states of business cases , , and any other information required to perform system maintenance, optimization, or the like. In one exemplary embodiment, the third party is a computer which displays RT-BCDB  information for a system administrator person to use as required to improve system maintenance. In another exemplary embodiment, the third party is a software application that automatically implements improvements to system maintenance without external intervention.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["300","100","302"]},"An agent  can collect information from one or more layers in the landscape . For example, an agent A can collect information from a hardware layer and\/or from a software layer. Collected hardware information can reflect the status or operation of a server, a storage component, a network component, and\/or of any other hardware component. Collected software information can reflect the status or operation of an application program, a database system, a tool, and\/or of any other software feature. The collected software information could be obtained using a monitoring tool with an interface to check for intensive data load, monitor processes, prove parallelization, or provide information about execution of SQL statements, just to name a few examples. The agent B is here also shown to be collecting information from the software layer and can be an agent dedicated to this layer, to name just one example. Information collection in hardware and\/or software layers can involve evaluation of XML files, plain log files or extracts of application tools. For example, an agent can inspect information sources in the respective layer and identify run-state information using pattern matching.","As another example, the agent C can collect information from at least the business process layer. Collected business process information can relate to operation or characteristics of an enterprise solution and\/or process activities thereof, for example. Information collection in a business process layer can involve obtaining run states from one or more calls of run control commands in the application source code.","Referring now to , a business process is initiated (step ) in a multi-application computer system. For example, an employee in a business could initiate the processing of an invoice of an enterprise's product sale. The employee could initiate the invoice process by entering information about the product sale into an enterprise computer terminal. This invoice process could, for example, be represented at the business process layer  by business process  using business case  and process steps . The invoicing process could require the execution of one or more applications of the software layer  of the multi-application landscape . These applications could exercise one or more components of the hardware layer  of the multi-application landscape . For example, the applications could require server  to communicate with server  within the hardware layer .","Referring now to  and , run control statements are executed (step ) after the business process is initiated. In one exemplary embodiment, run control statements are executed in association with process steps  of business process  at times where the business process  is subject to changing its state.","Next, state indicators associated with the executed run control statements are selected (step ). The state indicators represent run-state information of the initiated business process. In an exemplary embodiment, the process step  of filling a purchase order could be executed and could result in the business process  being in a state of \u201cactive,\u201d \u201cexception\u201d or \u201csuccessful,\u201d to name a few examples. That is, depending on where in the code execution is currently performed, a representative state indicator can be selected.","Next, an agent can collect the run-state information (step ) as represented by the selected state indicators. For example, as described above in reference to , an agent  can collect run-state and other information from one or more layers in the landscape , for example by using pattern-matching. Referring again to , after collecting the run-state information the agent communicates the run-state information to a repository (step ). For example, the agent could communicate the run-state information to the RT-BCDB  as described above in reference to  and .","Once the repository receives the run-state information, a representation of the business process state is generated (step ). For example, referring to , a representation of the run-state information of process step  of business case  which terminated successfully could generate the representation of \u201cBC.PS. success\u201d  along with other exemplary representations.","Next, the business process state can be stored in the repository (step ). In one exemplary embodiment, the generated representation of the business process state is stored in the RT-BCDB database. If the business process is active, for example, the representation could be stored in the active business cases table  of the RT-BCDB . Another example would be if the business process had terminated, in which case the representation could be stored in the run-time history table  of the RT-BCDB .","When the run-state information of the multi-application landscape's business processes is stored in the repository, a third party user can request the business process states from the repository (step ). For example, the third party user could be a person reviewing the active business cases  and run-time history table  of the RT-BCDB  as displayed on a computer screen. The person could send a request to view the business process states by pressing a key on the computer, which in turn could cause a software command to be sent to the RT-BCDB API interface . In another example, the third party user requesting business process states could be another computer process, software application, or batch processing mechanism, to name a few. In this example, the request for business process state information could be automated.","After a request for the business process state information has been made as above, the third party user can perform maintenance (step ) on the multi-application landscape. In the exemplary embodiment where the third party user is a person, the person could decide which business processes were in states needing maintenance and perform administrative tasks. These administrative tasks could include implementing recovery, optimization, scheduling, rebalancing of application loads, moving business cases ,  to run at different times, updating and upgrading applications and business cases , , and indentifying potential failure situations, to name a few examples. In another embodiment where the request for information (step ) was sent by an automated process, the administrative tasks (e.g., those mentioned above) could be performed by the automated process.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 5","b":"500"},"Here, the application code includes a function call . For example, a function call can initiate a function that generates a purchase order in an ERP system. Here, the application also includes exception code  for handling an exceptional situation (e.g., when the function call  returns a nonzero code). For example, the exception code  can include a call to an \u201cExceptionHandling\u201d routine.","Here, run control statements  have been inserted in the application code. A run control statement can be identified by a name (such as \u201cRunControl\u201d) and can relate to a specific process step of a business process. When the run control statement is executed in that process step, the run control statement issues a predefined run state. The run state can be identified using a state indicator, for example any of the indicators \u201cactive,\u201d exception\u201d and \u201csuccessful\u201d described here.","A run control statement A can be executed before the function call . The run control statement A relates to the process step \u201cBC.PS,\u201d which can refer to process step number  of a business case number . When the run control statement A is executed, the run state is \u201cactive\u201d. That is, when program execution reaches the function call , but before the function call  is executed, the process step number  of the business case number  has an \u201cactive\u201d state.","A run control statement B can be executed after the exception code . Like the run control statement A, the run control statement B relates to the process step \u201cBC.PS,\u201d and when executed, the state of the process step number  of the business case number  is \u201cexception\u201d. As indicated above, the exception can occur when the function call  returns a nonzero code.","A run control statement C can be executed after the function call  and, if applicable, the call to the \u201cExceptionHandling\u201d routine. Like the previously described run control statements, the run control statement C relates to the process step \u201cBC.PS,\u201d and when executed, indicates that the process step number  of the business case number  is \u201csuccessful\u201d. Thus, the run control statement C when executed, whether after an exceptional or non-exceptional call of the PurchaseOrder function, can report that the process step has been successfully performed.","A run control statement can be inserted into source code by the developer of the application program or by another person with access to the source code. For example, in an interpreted language (such as COBOL, or the ABAP language used in systems from SAP AG), the source code can be made available also at a time after the initial application has been created, and the run control statement(s) can be inserted into the source code at such time. As another example, for a compiled language (such as C++) the run control statement would need to be inserted in the source code at the time the program is developed. Accordingly, an application developer who wishes the program to be compatible with information collection performed by agents or otherwise as described herein, can add the run control statements during the programming process.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 6","b":["600","600","600","610","620","630","640","610","620","630","640","650","610","600","610","610","610","620","630","640"]},"The memory  stores information within the system . In some implementations, the memory  is a computer-readable medium. The memory  is a volatile memory unit in some implementations and is a non-volatile memory unit in other implementations.","The storage device  is capable of providing mass storage for the system . In one implementation, the storage device  is a computer-readable medium. In various different implementations, the storage device  may be a floppy disk device, a hard disk device, an optical disk device, or a tape device.","The input\/output device  provides input\/output operations for the system . In one implementation, the input\/output device  includes a keyboard and\/or pointing device. In another implementation, the input\/output device  includes a display unit for displaying graphical user interfaces.","The features described can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device, for execution by a programmable processor; and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.","The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a LAN, a WAN, and the computers and networks forming the Internet.","The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of this disclosure. Accordingly, other implementations are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
