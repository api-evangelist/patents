---
title: Storage device drivers and cluster participation
abstract: The representation of storage devices on computers (e.g., as logical volumes) may be complicated by the pooling of multiple storage devices in order to apply redundancy plans such as mirroring and checksumming. Presented herein is a storage device driver configured to operate as a storage device interface generating representations of the storage regions of the storage devices; to claim those regions as a storage controller; and to expose pooled storage regions as logical disks. Additionally, the storage device driver may support the inclusion of storage devices in a cluster, comprising nodes that may be appointed as managers of the storage pool configuration; as managers of the storage devices; as owners having exclusive read/write access to the storage pool or cluster resources; and as cluster resource writers having exclusive write access to a cluster resource. The nodes of the cluster may interoperate to share the storage devices while avoiding write conflicts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08886910&OS=08886910&RS=08886910
owner: Microsoft Corporation
number: 08886910
owner_city: Redmond
owner_country: US
publication_date: 20110912
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Within the field of computing, many scenarios involve the generation of logical representations of storage devices on a computer. As a first example, a locally attached hard disk drive may be attached to a computer using a bus, and may interface with the computer through a storage device driver that presents one or more partitions of the hard disk drive to the computer as a logical volume. As a second example, a network-attached storage (NAS) appliance, such as a Redundant Array of Inexpensive Disks (RAID) array, may be loaded with hard disk drives and may communicate with over a network with a computer, which may mount a volume exposed by the NAS appliance as a network volume. As a third example, a virtual hard disk drive (VHD) may be generated as a block of storage allocated on another device, and may be presented to the computer as a virtual volume. These and other examples may suggest that a variety of physical and virtual storage devices with varying properties and interfaces may be presented to a computer. In order to reduce the complexity of interacting with this variety of storage devices, the computer may specify a logical representation standard, such that a driver may present a logical representation of the storage device that the computer may utilize as storage in a comparatively standard manner, irrespective of the type, location, characteristics, or complexity of the underlying storage device.","Also within the field of computing, many scenarios involve a cluster of interoperate nodes connected by a network, such as a server farm of devices that cooperatively provide a service. In these scenarios, the nodes may share one or more storage pools, and may establish protocols for using such storage devices (e.g., in order to reduce write conflicts and deadlocks). The storage pools may be provided by the shared capacity of one or more storage devices, each of which may be connected to a storage device and\/or to the network, and the capacity provided by such storage devices may be aggregated in many ways.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","A storage device may be utilized by one or more computers in a large variety of ways. As a first example, the entire capacity of a storage device may be allocated for a single logical volume, or may be partitioned and exposed as two or more logical volumes. As a second example, the capacity of a first storage device may be pooled with the storage capacity of a second storage device (e.g., in a spanning or striping arrangement). As a third example, a storage pool that aggregates the capacity of two or more storage devices may be created with a resiliency plan that enables features such as recovery in the event of a storage device failure, error detection, and error correction. Such resiliency plans may include a mirroring plan, wherein an identical copy of a data set is stored on each storage device, and a parity plan, wherein data stored on some devices may be backed by one or more parity calculations (e.g., checksums) stored on other devices, so that if any storage device fails or becomes unavailable, the data stored on the storage device may be reconstructed using the corresponding data and corresponding parity calculations stored on the other storage devices. As a fourth example, it may be advantageous to segment the capacity of a storage device into different storage pools; e.g., a particular storage device may allocate some capacity to a first pool aggregated with capacity from a first set of storage devices, and some additional capacity to a second pool aggregated with capacity from a different set of storage devices, and the remaining capacity to an unpooled logical representation. As a fifth example, the storage device may be shared by and concurrently accessible to several computers, such as the nodes of a cluster, which may have to intercommunicate and use the storage device in a manner that reduces write conflicts, resiliency inconsistencies, and deadlocks. Moreover, it may be advantageous to expose the storage device to one or more computers not through a specialized storage controller that operates in a comparatively isolated and opaque manner, but through a software interface that may robustly interact with the computing environment.","Presented herein are techniques for representing storage devices on a computer that may facilitate many of these scenarios. In accordance with the techniques presented herein, a computer may include a storage device driver that implements a set of layers that present the storage devices to the operating environment of the computer in different contexts. In particular, the storage device driver comprises a storage device interface component, which interacts with a storage device in a low-level manner (e.g., issuing read and write requests, handling buffer semantics such as flushing, and applying the addressing protocol of the storage device), and that exposes a set of storage region representations of the storage regions of the storage device (e.g., representations of the partitions or capacity slabs allocated on the storage device); a storage controller driver component that claims storage region representations, applies the capabilities of storage device relationships (e.g., capacity pooling and resiliency schemes), and presents a pooled storage region representation; and a storage port driver component that claims pooled storage region representations and presents to the operating environment logical representations of the pooled storage regions of the storage devices. The architecture of the storage device driver may therefore enable considerable flexibility in the provisioning of a set of storage devices, and may expose respective storage devices to the operating environment as several different representations that enable both simplified utilization and rich information as to the provisioning and utilization of the storage device. Additionally, these capabilities may be implemented as a storage device driver within the operating environment of the computer, thereby reducing the involvement of specialized hardware components that may isolate and complicate the storage scenario.","The techniques presented herein also relate to the exposure of the storage device to a cluster of nodes that may cooperatively utilize the storage device. In such scenarios, the storage device driver may be further configured to facilitate clustering considerations, such as administration of a storage pool or cluster resource and the negotiation of ownership and permissions among the nodes. These and other advantages may be achieved through the architecture and configuration of a storage device driver that may present storage devices within the operating environment of a computer in accordance with the techniques presented herein.","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.","A. Introduction","Within the field of computing, many scenarios involve the representation of storage devices on a computer. As a first example, a hard disk drive or a solid-state storage device may be directly attached to a computer, such as using a Serial ATA (SATA) connector or a Universal Serial Bus (USB) connector, and a storage device driver provided on a firmware of the storage device may perform the tasks involved in exposing the storage device within the operating environment of the computer. The capacity of the hard disk drive may be completely allocated as a single logical volume, or may be partitioned or otherwise segmented into two or more subsets of capacity that may each be exposed as logical volumes. As a second example, a computer may comprise one or more optical disc drives (e.g., DVD-ROM drives), and the storage device drivers of the optical disc drives may interoperate with other components of the operating environment (e.g., disc burning applications) to expose the capabilities of the optical disc drive (e.g., optical disc erase and printing techniques) as well as the limitations thereof (e.g., high latency and limited random write access). As a third example, one or more hard disk drives may be loaded into a storage appliance, which may manage the hard disk drives and present a pooled representation to the computer. As one example, in a Redundant Array of Inexpensive Disks (RAID) appliance, a RAID controller manages an array of hard disk drives by exchanging I\/O requests, monitoring the status and health of the hard disk drives, and applying a variety of features. For example, the RAID controller may generate a logical volume isolate don one hard disk drive; a logical volume that that spans two or more of hard disk drives (in a sequential or striped manner); a logical volume that is mirrored on two or more hard disk drives (e.g., where a data set is stored as an identical copy on each storage device); and a logical volume that, upon writing a data set to some storage devices, writes a parity calculation of the data set to another storage device, so that, in the event of an abrupt failure, disconnection, or other type of inaccessibility of a storage device, the data on the inaccessible storage device may be reconstructed using the corresponding data and the parity calculations on the other storage devices). However, the RAID controller may abstract away many of the details of the storage device array, and may represent the array within the operating environment of a computer as a single network volume. As a fourth example, a virtual hard drive (VHD) may be generated from the storage capacity of one or more other storage devices. The VHD may be presented to the operating environment as a simulation of a physical storage device, and the storage device driver for the VHD may translate access requests for respective addresses within the VHD into requests targeted at the storage devices providing the capacity for the VHD including the specified addresses.","These and other types of storage devices may present an indication of the variety of storage devices that may be attached to a computer. Configuring the operating environment of a computer to interact with each storage device in a specialized manner, in view of the characteristics of the storage device, may be very difficult, particularly since new types, features, and properties of storage devices are frequently developed. Rather, the complexity of such variety may be managed in at least two ways. First, the operating environment may be configured not to interact directly with a storage device, but interact with a storage device driver that is configured to translate specialized interactions with the storage device (e.g., burst access capabilities to hard disk drives, flush semantics of write buffers, and burn and wipe semantics of optical disc drives) into comparatively generalized operations (e.g., Read, Write, Format, and List Contents). Second, the operating environment may define a logical representation of storage devices that are to be exposed by all storage device drivers for all storage devices. Such logical representations may enable an enumeration of storage devices by the operating environment and a comparatively uniform interaction by the operating environment with each storage device, irrespective of the particular properties thereof.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","102","108","102","108","102","102","102","102","102","102","108","108","102","110","102","108","104","102","116","102","104","102","102","102","112","102","104","108","104","112","102","102","102","116","114","114","102","116","102","102","102","102","102","108","114","116","104","108","102","116"]},"As an additional complication, a storage device  may be concurrently accessible to a set of computers  with various degrees of interoperation. In particular, a set of computers  may be configured to interoperate as the nodes of a cluster. The cluster may be provided to achieve various tasks, such as shared computational capacity for high-performance computing applications and concurrent processing capabilities that provide a service to a large set of users and\/or devices. Such clusters may also be configured with many sophisticated features, such as failover capabilities where the responsibilities of a node that crashes, becomes disconnected from the cluster, or otherwise fails may be automatically and promptly assumed by a substitute node, thereby reducing the interruption in the provision of the services that were assigned to the failed node. In particular, a cluster of nodes may interact with one or more storage devices , and may have concurrent access thereto. However, unrestricted and uncoordinated access by the nodes of the cluster to the storage devices  may result in many problems, including write conflicts (e.g., a race condition between two or more data sets concurrently writing to a particular location of a storage device , resulting in a non-deterministic outcome and inconsistently written data, such as an arbitrary amalgamation of disparate data sets written to the same location by different nodes of the cluster); redundancy failures (e.g., a failure of a resiliency scheme, such as a party calculation technique, caused by race conditions and resulting in failures of resiliency guarantees and potential data corruption); and deadlocks (e.g., an exclusive locking of a data set or storage device  by a first node that causes problems for other nodes endeavoring to access the data set or storage device ). Moreover, it may be desirable to provision a storage device  to participate in two or more storage pools , and\/or to communicate with the nodes of two or more clusters. Configuring an operating environment in a flexible manner that enables such complex scenarios may represent a difficult task.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["200","102","206","208","200","102","202","102","104","202","102","102","104","108","202","102","116","204","116","102","116","202","102","116","206","208","206","206","116","204","208","206","208","208","208","102","206","204","116","206","102","202","116","204","202","102","104","116","204"]},"In view of the complexities in the configuration of sets of storage devices , storage pools  among storage devices , and interoperation with clusters  of nodes , it may be difficult to configure the storage devices  and the computers  (both individually and as a node  of a cluster ) to fulfill such complexities in a performant manner, while also reducing the administrative complexity and simplifying the logical representations of the storage devices  and the availability of provisioned capacity. Some of these complexities may be resolved, e.g., by encapsulating some functionality in a specialized hardware controller, such as a RAID storage controller, that may implement selected storage features  for various storage devices  while presenting a simplified representation to a computer . However, the simplicity achievable through a specialized hardware controller may present several disadvantages. As a first example, specialized hardware involves an additional acquisition and operating cost, as well as specialized administration and user training. As a second example, the specialized hardware may impose additional limitations on the storage devices . For example, RAID controllers often involve an exclusive claim of the entire storage capacity  of the storage devices  participating in a single storage pool, which may be incompatible with the diverse configuration of each of the fourth, fifth, and sixth storage devices  in the exemplary scenario  of . As a third example, the simplicity provided by a RAID controller may also represent an abstraction of the details of the storage devices  and the obfuscation of information that may be of value to a computer  or to a node  of a cluster . For example, the cause of poor performance exhibited by a storage pool  while accessing to a particular data set may be identified by examining where and how the data set is stored on the storage devices . However, the RAID controller may abstract away such information, and it may be difficult to determine where the data set is located or how it is being accessed through the RAID controller. As a fourth example, hardware controllers may be difficult to update with new functionality; e.g., a high-performance cluster  may involve a specialized data access technique, but a hardware controller may not be robustly configurable or sufficiently flexible to implement the technique, whereas a software-based controller of the storage devices  may be readily configurable. These and other factors may encourage a reduction of hardware components in the control of storage devices  in complex storage scenarios.","B. Presented Techniques","Presented herein are techniques for representing storage devices  on a computer  that may enable some advantages over other representation techniques. In accordance with these techniques, a storage device driver may be devised that is capable of interacting with storage device  while applying many types of storage features , and that may represent storage devices  in a simplified and standardized manner (e.g., as a logical representation , such as a logical disk) while also exposing the underlying details of the storage devices  (e.g., the aggregation of a set of storage devices  into a storage pool , and the accessing of the storage devices  by a cluster  of nodes  having various clustering circumstances). Moreover, the storage device driver may be implemented as a software driver, and may provide these robust features while fully conforming with an existing storage device driver architecture of an operating environment, and may operate alongside conventional storage device drivers supporting and representing other storage devices .","In particular, the techniques presented herein involve the representation of a storage device  on a computer  through a particular architecture of layers, each of implementing a particular sets of storage features , and expose one or more storage devices  in a different context. For example, the techniques may be implemented as a software driver comprising, at a low level, a storage device interface component configured to generate a storage region representation of respective storage regions of respective storage devices . The storage region representations may comprise, e.g., a low-level representation within the operating environment of the computer  of an existing storage region of the storage device  (e.g., a physical address range, a partition, or a capacity slab). The software driver may also include, at a middle level, a storage controller driver component that is configured to aggregate respective storage regions into storage pools , and may implement various storage features  of the storage pool  (e.g., applying a mirroring resiliency plan by translating each receive write request into identical requests directed to different storage regions of different storage devices ). Additionally, the storage controller driver component may claim the storage region representations of storage regions that are involved in the storage pool (e.g., indicating within the operating environment of the computer  that the storage region is reserved and exclusively used by the storage controller driver component, and is not available for access by other components), and may expose the storage pool  as a pooled storage region representation (e.g., a representation within the operating environment of the computer  of the storage pool , optionally indicating the characteristics of the storage pool , such as implemented storage features ). The storage device driver may also include, at an upper level, a storage port driver component that is configured to generate a logical representation from the pooled storage region representations generated by the storage controller driver component. For example, the storage port driver component may represent the storage pool  within the operating environment of the computer  as a logical disk.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3","b":["300","102","108","300","102","108","102","304","116","302","204","304","102","108","306","306","308","102","102","102","308","310","304","102","304","108","306","312","310","116","302","304","302","312","310","108","304","116","314","116","108","118","204","306","316","314","108","318","316","116"]},"As depicted in the exemplary scenario  of , the techniques presented herein may present many advantages over other representations of the storage devices . As a first example, the architecture of the techniques as a storage device driver  may enable this rich feature set to be implemented within the existing storage driver architecture of many computers , and to operate alongside conventional storage device drivers  (e.g., the simple storage device driver  depicted in  that simply represents a single storage device  as a logical volume ). However, this exemplary storage device driver  also exposes several representations of the storage devices , including storage region representations  for the storage regions  of the storage devices , a pooled storage region representation  for the storage pool , and a logical representation  in the manner of a storage port driver. This layered presentation enables individuals and processes of the computer  to examine the storage devices  in different contexts and at varying levels of detail, including the top-level representation of a simple capacity store, a mid-level representation of the storage pool  and the storage features  implemented therein, and a low-level representation of the storage devices  and the storage regions  implemented thereupon. In addition, representing the storage devices  in a layered manner enables robust flexibility in the configuration of storage regions of storage devices  as storage region representations; in the pooling of storage region representations into storage pools  having various sets of storage features ; and the exposure and use of a storage pool  as a logical representation that may be apportioned and utilized in many ways. Moreover, because the storage device driver  of the storage device  executing within the operating environment of the computer  is aware of the rich complexities of the storage scenario, the storage device driver  may, at various layers, implement additional features. For example, if the computer  is a node  of a cluster , and if a storage device  and\/or storage pool  is accessed by the computer  as part of the cluster , the storage device driver  may implement features of the clustering environment (e.g., verifying permissions and access rights, and notifying other nodes  of the cluster  of such accesses), and may do so at the device driver level, thereby achieving the implementation of complex storage scenario details in the fundamental and comprehensive accessing of the storage devices  at the level of a storage device driver . These and other advantages may be achievable through the representation of storage devices  on a computer  in accordance with the techniques presented herein.","C. Exemplary Embodiments",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["306","102","108","306","108","108","306","102","108","306","102","116","204","31","306","308","310","304","102","306","312","116","304","102","310","304","102","116","302","116","314","116","306","316","314","318","314","306","102","108"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4","b":["400","102","108","400","108","108","108","400","402","404","108","306","108","102","306","406","310","304","102","306","408","116","304","102","410","310","304","102","116","412","302","116","414","314","116","306","314","416","310","108","306","400","102","108","418"]},"Still another embodiment involves a computer-readable medium comprising processor-executable instructions configured to apply the techniques presented herein. Such computer-readable media may include, e.g., computer-readable storage media involving a tangible device, such as a memory semiconductor (e.g., a semiconductor utilizing static random access memory (SRAM), dynamic random access memory (DRAM), and\/or synchronous dynamic random access memory (SDRAM) technologies), a platter of a hard disk drive, a flash memory device, or a magnetic or optical disc (such as a CD-R, DVD-R, or floppy disc), encoding a set of computer-readable instructions that, when executed by a processor of a device, cause the computer to implement the techniques presented herein. Such computer-readable media may also include (as a class of technologies that are distinct from computer-readable storage media) various types of communications media, such as a signal that may be propagated through various physical phenomena (e.g., an electromagnetic signal, a sound wave signal, or an optical signal) and in various wired scenarios (e.g., via an Ethernet or fiber optic cable) and\/or wireless scenarios (e.g., a wireless local area network (WLAN) such as WiFi, a personal area network (PAN) such as Bluetooth, or a cellular or radio network), and which encodes a set of computer-readable instructions that, when executed by a processor of a device, cause the computer to implement the techniques presented herein.","An exemplary computer-readable medium that may be devised in these ways is illustrated in , wherein the implementation  comprises a computer-readable medium  (e.g., a CD-R, DVD-R, or a platter of a hard disk drive), on which is encoded computer-readable data . This computer-readable data  in turn comprises a set of computer instructions  configured to operate according to the principles set forth herein. In one such embodiment, the processor-executable instructions  may be configured to perform a method of representing storage devices on a computer, such as the exemplary method  of . Some embodiments of this computer-readable medium may comprise a nontransitory computer-readable storage medium (e.g., a hard disk drive, an optical disc, or a flash memory device) that is configured to store processor-executable instructions configured in this manner. Many such computer-readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.","D. Variations","The techniques discussed herein may be devised with variations in many aspects, and some variations may present additional advantages and\/or reduce disadvantages with respect to other variations of these and other techniques. Moreover, some variations may be implemented in combination, and some combinations may feature additional advantages and\/or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments (e.g., the exemplary method  of ) in order to confer individual and\/or synergistic advantages upon such embodiments.","D1. Scenarios","A first aspect that may vary among embodiments of these techniques relates to the scenarios wherein such techniques may be utilized. As a first variation of this first aspect, these techniques may be used with many types of storage devices , including hard disk drives, solid-state storage devices, nonvolatile memory circuits, tape-based storage devices, and magnetic and optical discs. Such storage devices  may also be directly connected to a computer  implementing these techniques; may be accessible through a wired or wireless local area network (e.g., an 802.11 WiFi network or ad-hoc connection, or an infrared connection); and\/or may be accessible through a wired or wireless wide-area network (e.g., a cellular network or the internet).","As a second variation of this first aspect, the storage devices  may store many types of data sets. For example, the capacity of the storage devices  may be used to store binary storage systems storing various types of binary objects; file systems storing files; media libraries storing media objects; object systems storing many types of objects; databases storing records; and email systems storing email messages. Additionally, such data sets may be organized in many ways, such as an unordered set, a sequence, a hierarchical structure such as a tree, or a collection of tuples.","As a third variation of this first aspect, portions or all of these techniques may be implemented within one or more components within the computing environment, such as a set of software instructions stored in a volatile or nonvolatile of a computer or device having access to the storage devices  (e.g., an operating system process or a hardware driver); by a storage system configured to interface with the storage devices  (e.g., a hardware storage controller); or in respective storage devices .","As a fourth variation of this first aspect, the storage devices  may be configured to allocate capacity in various ways. For example, the storage devices  may be configured to allocate capacity as a set of partitions exposing logical volumes; as a set of extents associated with spaces; or as a set of capacity slabs that may be further provisioned and associated with spaces. Those of ordinary skill in the art may devise many scenarios wherein the techniques presented herein may be utilized.","D2. Storage Device Driver","A second aspect that may vary among embodiments of these techniques relates to variations in the implementation of the storage device driver . As a first variation, the architecture of the storage device driver  may vary in many respects. The exemplary scenario  of  illustrates one suitable architecture of an exemplary storage device driver  comprises a storage device interface component  as a lower-level interface to the storage devices , a storage controller driver component  as a mid-level interface that implements the storage pool  and the storage device relationships , and storage port driver component  as an upper-level interface that generates the top-level representation of the storage pool  within the operating environment of the computer . However, many variations in this architecture may be devised that may nevertheless capture the techniques presented herein. As one such example, the storage controller driver component  may be implemented as a pooling component that aggregates storage devices  into a storage pool , and a separate storage device relationship component that implements the storage device relationships  of the storage pools  (e.g., a distinct component implemented in a layer above, below, or alongside the pooling component). Many such architectural variations may be devised while remaining compatible with the techniques presented herein.","As a second variation of this second aspect, respective components of the storage device driver  may generate various representations of the storage devices  in different contexts, and may do so in many ways. As a first example, one or more components may generate a representation of the storage devices that is visible within the operating environment of the computer . Alternatively, a component may generate a representation that is internal to the storage device driver , and may expose the representation only to a higher-level component for consumption thereby. For example, the storage controller driver component  may generate a pooled storage region representation  that is visible to other processes of the computer , or may present the pooled storage region representation  only to the storage port driver component  for further representation as a logical representation . As a second example, respective components may claim a representation of the storage devices  generated by a lower-level component. For example, for respective storage region representations  generated by the storage device interface component  for storage regions  that are involved in a storage pool , the storage controller driver component  may claim such storage region representations  by completely consuming and hiding them from other processes of the operating environment of the computer  (e.g., entirely removing storage devices  hosting such storage regions  from a storage device enumeration), such that the storage regions  are not visibly represented and do not appear to exist. Alternatively, the storage controller driver component  may simply alter the storage region representations , e.g., simply changing the inclusion of the storage devices  in the storage device enumeration to a specialized storage device type, or replacing the representation with the pooled storage region representation to the storage device enumeration, thereby allowing such representations to remain visible but marked as reserved for inclusion in the pooled storage region representation . As another alternative, the storage controller driver component  may claim the storage region representations in a nonexclusive manner, e.g., by associating the pooled storage region representation  with the underlying storage region representations , but may allow other processes to interact with a storage region representations  in a similar manner as those of unspooled storage regions . Those of ordinary skill in the art may devise many variations in the architecture and operation of the storage device driver  while implementing the techniques presented herein.","D3. Simple Clustering","A third aspect that may vary among embodiments of these techniques relates to the adaptation of the techniques presented herein (e.g., the configuration of the storage device driver ) for simple clustering scenarios. For example, the computer  within which the storage device driver  represents the storage devices  may be included as a node  in a simple cluster , wherein respective nodes  may have access to a set of storage devices  (including those attached to this computer , to other nodes , and\/or accessible over a network). In a simple cluster , respective nodes  may request exclusive access among the nodes  to a storage pool  accessible to the storage devices . For example, the storage pool  may only be accessible to one node  of the cluster  at a time, and the nodes  may negotiate access through various concurrency mechanisms. In particular, the node may be configured to select a storage pool owner having exclusive access to a storage pool , who may remain the storage pool owner until relinquishing ownership of the storage pool  and\/or until ownership is revoked by the cluster . For example, the nodes  of the cluster  may detect various substitution events that may compel the selection of a substitute pool owner (e.g., a load rebalancing event indicating a rebalancing from a first node  of the cluster  to a second node  of the cluster ; a disconnection event, indicating a disconnection of the storage pool owner from the cluster ; and a failure event indicating the failure of a node , such as a failure of the storage pool owner). In such events, the other nodes  of the cluster  may automatically choose a new storage pool owner of the storage pool  among the remaining available nodes  of the cluster  (or may simply revoke ownership of the storage pool  until and unless claimed by another node ).","The storage device driver  may be configured to support the inclusion of the computer  as a node  in a simple cluster  scenario. As a first example, if the computer  is selected as a storage pool owner of a storage pool , the storage device driver  may indicate that the storage pool is accessible to the computer  as a node  of the cluster  (e.g., by automatically generating the pooled storage region representation  and\/or logical representation  of the storage pool , and\/or by automatically mounting the storage pool  as a logical disk upon detecting the designation of the computer  as the storage pool owner). As a second example, if another node  is selected as the storage pool owner, or if ownership is revoked from the computer , the storage device driver  may indicate that the storage pool  is inaccessible to the computer  (e.g., by automatically unmounting the storage pool  as a logical disk, and\/or by automatically withdrawing the logical representation  and\/or the pooled storage region representation  arising from the storage pool ).","In a further variation of this third aspect, the nodes  of the cluster  may be configured to distinguish between storage pools  having a redundancy plan (e.g., storage pools  including a storage feature  such as mirroring or parity calculations), and may select storage pool owners only for such storage pools , while allowing any node  of the cluster  to access storage pools  not having a redundancy plan. This differentiation of storage pools  may reflect the significant and potentially catastrophic effects of granting concurrent access by multiple nodes  to a storage pool  having such a redundancy plan; e.g., if two nodes  write to portions of a storage pool  that result in a mismatch of the checksum with the corresponding data sets, the integrity of completely unrelated data sets may be compromised, and, indeed, the integrity of the entire storage pool  may be jeopardized. By contrast, storage pools  that do not feature a redundancy plan may not be compromised by write conflicts; e.g., the validity of a written data set may be impaired by a write conflict, but is unlikely to jeopardize the integrity of the entire storage pool . Therefore, the storage device driver  may be configured to recognize and enforce access exclusively through the designation of a storage pool owner for storage pools  having a redundancy scheme, but may not apply such rigorous restrictions to other storage pools . Those of ordinary skill in the art may devise many variations in the configuration of the storage device driver  to support simple clustering scenarios in accordance with the techniques presented herein.","D4. High-Availability Clustering","A fourth aspect that may vary among embodiments of these techniques relates to the representation by the storage device driver  of storage devices  on a computer  that is included as a node  of a high-availability cluster . By contrast with simple clustering scenarios, a high-availability cluster  may present a tighter degree of interoperation among the nodes . For example, such clusters  may include more sophisticated mechanisms for sharing storage pools , and for sharing pool resources (e.g., groups of storage devices  and\/or storage regions ); and more sophisticated mechanisms for providing and protecting access to respective storage devices , storage regions , and storage pools . By integrating with the complexities of the storage scenario in a comprehensive manner (e.g., by encapsulating the storage devices , storage regions , storage pools , storage device relationships , storage features , and logical representations , as well as the enrollment of the computer  as a node  of a high-availability cluster ), the storage device driver  may be capable of implementing such access controls and other features of the high-availability cluster .","As a first variation of this fourth aspect, the storage device driver  may be configured to recognize the designation of a node  of the cluster  (including the computer  on which the storage device driver  is installed) as a storage pool manager of a storage pool . In high-availability clusters , a storage pool  may include a storage pool configuration, which may be stored on respective storage devices  participating in the storage pool . For example, the storage pool configuration may indicate the logical representations  arising from the storage pool ; the provisioning and allocation of the storage regions  of the storage devices  that manifest storage pool ; and the details of storage features  (e.g., the calculation of parity values using a particular parity algorithm). The storage pool configuration may be updated infrequently, but such changes may represent a significant modification of the storage devices . Accordingly, it may be advantageous to ensure that such changes are written only by one node , and are promptly broadcast from that node  to all other nodes  of the cluster  (e.g., rather than disseminating such information in a decentralized manner). Therefore, it may be advantageous for the cluster  to select a node  as a storage pool manager that has exclusive write access to the storage pool configuration on respective storage devices . Other nodes  that seek to change the storage pool configuration (e.g., initiating the creation of a new logical representation  within the storage pool ) may be prohibited from directly updating the storage pool configuration, and may instead forward such requests to the storage pool manager of the storage pool  within the cluster . Additionally, the storage pool manager may be configured to broadcast an update to the other nodes  of the cluster  upon updating the storage pool configuration, prompting the other nodes  to re-read the storage pool configuration in order to promote correct access to the storage devices  and storage regions  comprising the storage pool .","In such circumstances, the storage device driver  may be configured to participate in and\/or be informed of this selection, and may accordingly enforce the access to the storage pool configuration on the respective storage devices . As a first example, the storage device driver  may detect that the nodes  of the cluster  are configured to select a storage pool manager that is configured (predominantly or exclusively) to update the storage pool configuration. If the computer  on which the storage device driver  is installed is selected as the storage pool manager, the storage device driver  may enable the computer  to access the storage pool configuration of respective storage devices  and storage pools . However, if the computer  is not the storage pool manager, the storage device driver  may prohibit such accesses, and\/or may automatically forward such accesses to the current storage pool manager. Indeed, in some embodiments, the storage device driver  may even participate in the selection of the storage pool manager among the nodes  of the cluster  (possibly by communicating with the storage device drivers  installed on the other nodes  of the cluster ), and\/or in the dissemination of information about updates to the storage pool configuration (e.g., upon the computer  updating the storage pool configuration of the storage pool , the storage device driver  may invoke a broadcast interface of the cluster  to notify the other nodes  of the cluster  of the update to the storage pool configuration).",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 6","b":["600","206","208","116","102","600","102","304","116","208","206","318","208","206","306","208","318","304","116","102","602","116","102","604","602","102","116"]},"In the exemplary scenario  of , the storage device drivers  operating on each node  of the cluster  may facilitate the cluster  in various ways. For example, rather than enabling any of the nodes  of the cluster  to access the storage pool configuration  on any storage device , the storage device drivers  may initiate, participate in, and\/or monitor the selection, among the nodes  of the cluster , of a storage pool manager  that is granted exclusive write access to the storage pool configuration . The storage device drivers  may permit an update of the storage pool configuration  to be initiated by the storage pool manager , and\/or forward to the storage pool manager  for initiation, and may permit the storage pool manager  to update  the storage pool configuration  of a storage device . Upon receiving the update, the storage devices  may be automatically synchronize  the storage pool configurations  to propagate to the other storage devices . Alternatively, the storage pool manager  and\/or the storage device drivers  may synchronize  the storage pool configurations . Additionally, each storage device drivers  may prohibit the node  upon which it is installed to update  the storage pool configuration  if it is not the storage pool manager  of the storage pool . In this manner, the storage device drivers  facilitate the operation of the high-availability cluster .","As a further example of this first variation of this fourth aspect, the storage device drivers  may toggle exclusive access to the storage pool configuration  of a storage device  in view of whether the storage device  is currently claimed by a cluster . It may be appreciated that if the storage device  is not utilized by a cluster  and\/or a storage pool , then it may be permissible to enable any computer  to update the storage pool configuration  (since it may not be heavily relied upon by other nodes  of a cluster ). In one such scenario, the storage pool configuration  of respective storage pools  may comprise a clustering participation indicator, such as a particular bit or value that indicates whether a cluster  has claimed the storage pool . The storage device driver  may be configured to set the clustering participation indicator of the storage pool configuration  of the storage pool  upon detecting that the storage pool  has joined a cluster , and to clear the clustering participation indicator of the storage pool configuration  of the storage pool  upon detecting that the storage pool  has left a cluster . Moreover, upon receiving a request to update the storage pool configuration  of a storage pool , the storage device driver  may determine whether the clustering participation indicator of the storage pool configuration  of the storage pool  is set. If so, the storage device driver  may refrain from and the computer is not the storage pool manager of the storage pool , prohibit updates  to the storage pool configuration  of the storage pool  unless the computer  has been selected as the storage pool manager  of the storage pool . For example, the storage device driver  may toggle the representation of the storage pool configuration  on the node  between a read\/write state and a read-only state based on whether the storage device  is participating in the cluster , and whether the node  has been selected as the storage pool manager  of the storage pool .","As a second variation of this fourth aspect, the storage device driver  may promote the claiming of storage pools  and storage devices  by a cluster  in which the computer  on which the storage device driver  is installed is enrolled as a node . In such scenarios, it may be advantageous to restrict access to a storage device  to the nodes of a cluster ; e.g., concurrent access to a storage device  may be achieved and\/or facilitated by dependable communication among the nodes  of the cluster  accessing the storage device . Therefore, respective storage devices  may comprise a registration list, where registrations of computers  that are permitted to access the storage device  may be recorded, and such registrations may specify that respective computers  are authorized to write to storage regions  involved in a storage pool  of the cluster . The storage device  may be configured to enforce this permission by accepting write requests (and, optionally, also read requests and\/or other access requests) only from computers  included in the registration list. Therefore, when a node  of the cluster  initiates an access of a storage device , the node  may first access the registration list stored on the storage device , and may add itself to the registration list. Additionally, a node  of the cluster  may be selected as a storage device manager of the storage device , and may monitor the registration list (e.g., through frequent polling or a publication\/subscription notification system) to ensure that only nodes  enrolled in the cluster  are included in the registration list. If the storage device manager identifies a registration on the registration list of a computer  that is not enrolled as a node  of the cluster  (e.g., a node  that has been disconnected or evicted from the cluster ), the storage device manager may remove registrations from the registration list for the computer . The storage device manager may be selected in many ways, e.g., through election or self-selection; alternatively, the storage pool manager  of the cluster  may also operate as the storage device manager of the storage devices  utilized by the cluster . Moreover, the storage device  may promote the maintenance of the registration list by including a reservation for the node  selected as the storage device manager, and allowing only the node  having the reservation to update the registration list. The storage device drivers  may participate in this protection mechanism of the storage devices  in various ways, e.g., by automatically requesting a registration when the computer  accesses a storage device ; by initiating, participating in, and\/or monitoring the selection of the storage device manager; and\/or by prohibiting the computer  from accessing storage devices  for which the computer  does not have a registration.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 7","FIG. 7"],"b":["700","102","702","700","206","208","306","102","318","306","102","116","208","206","108","206","102","702","704","208","102","208","706","704","702","102","108","206","108","206","108","102","208","206","606","708","102","710","702","208","708","708","712","702","208","704","102","208","206","708","108","704","208","206","708","704","108","702","704","700","108","102","102","704","108","102","702","208","206"]},"Registration lists  may also present additional uses to the cluster , e.g., as a sharing mechanism to negotiate access to a storage pool  represented on the storage devices . As one example, the registration lists  may enable high-availability clusters  to avoid similar problems encountered by as simple clusters  with respect to concurrent access to storage pools  having redundancy plans, wherein granting concurrent access by multiple nodes  to a storage pool  having a redundancy plan may have significant and potentially catastrophic effects. For example, if two nodes  write to portions of a storage pool  that result in a mismatch of the checksum with the corresponding data sets, the integrity of completely unrelated data sets may be compromised, and, indeed, the integrity of the entire storage pool  may be jeopardized. In order to avoid such concurrent access problems, respective nodes  (including the storage device drivers  installed thereupon) may, upon receiving a request from a computer  to access a storage pool  having a redundancy plan, read the registration list  of the storage device ; for the nodes  having a registration  on the registration list , request the other nodes  to unmount the storage pool , and may access the storage pool  of the storage device  after receiving an unmount confirmation from all of the other nodes . Similarly, respective computers  (including the storage device drivers  installed thereon) may be configured to, upon receiving from a node  a request to unmount a storage pool , unmount the storage pool  (if it is currently mounted), and send an unmount confirmation to the node . The registration list  may therefore promote the sharing of storage pools  and storage devices  among the nodes  of the cluster  while avoiding some problems of concurrent access to storage pools  having redundancy plans.","As a fourth variation of this fourth aspect, the cluster  may comprise various cluster resources (e.g., one or more logical representations ) that may be reserved for access by a particular node . For example, a node  may be delegated to provide a particular service of the cluster  (e.g., a load balancing server), and in order to fulfill this role, the node  may be permitted to access a cluster resource, such as a logical volume where the identities and workloads of respective nodes  of the cluster  are recorded, or where load-balancing determinations are logged. In such scenarios, the cluster  may provide various types of access to the selected node . As a first example, the node  may be selected as a cluster resource owner, and may be granted exclusive read and write access to the cluster resource, while other nodes  may be prohibited from accessing the cluster resource in any way. As a second example, the node  may be selected as a cluster resource writer, and may be granted exclusive read and write access to the cluster resource, while other nodes  are granted read-only access to the cluster resource (and may forward requests for writes tot eh node  selected as the cluster resource writer). The storage device drivers  may initiate, participate in, and\/or monitor the selection of the cluster resource owners and\/or cluster resource writers of respective cluster resources, and may enforce such selections on the node  on which each storage device driver  is installed. Additionally, upon detecting a substitution event (e.g., a failure, a disconnected, or a load-balancing determination) involving a node  of the cluster  selected as a cluster resource owner and\/or cluster resource writer, the storage device drivers  may initiate a selection of a substitute cluster resource owner and\/or a substitute cluster resource writer of the cluster resource. This mechanism may be particularly utilized to regulate access to the storage pool configuration  of a storage pool  through the selection of a cluster resource writer (e.g., storage pool manager ) having exclusive write access to the cluster resource (e.g., the storage pool configuration ), while granting read access to the other nodes  of the cluster .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","b":["714","700","714","102","208","206","208","206","208","716","714","716","718","714","102","208","206","720","714","718","714","208","716","718","714","714","102","306","208","206"]},"A particular type of cluster resource  that may be accessed in this manner is a maintenance region, wherein metadata regarding various storage regions  involved in the cluster  may be recorded. For example, the maintenance region may record the health of storage pools  having a redundancy plan; e.g., when a storage device  or storage region  fails, a node  of the cluster  may, while performing a repair of the storage pool , record health information about the health of the storage pool  in the maintenance region. The maintenance region may also include information about the availability of respective storage devices  (e.g., whether a storage device  is temporarily or permanently detached) and dirty region information (e.g., redundant data sets of a storage region  that are to be synchronized, such as checksums to be updated).","The maintenance region may be used to facilitate the repair of a storage region  that has experienced a failure, such as a detachment, data corruption, or damage to the storage device  storing the storage region . A node  of the cluster  (particularly a node  designated as the cluster resource writer  for the maintenance region) may be configured to update the maintenance region to record detected health updates. If the health update prompts a repair operation for the storage region , the cluster resource writer  may (optionally) first wait for a brief waiting period to determine whether the storage region  is restored (e.g., the health update may comprise a \u201cdetached\u201d indicator that is caused by a temporary network disconnection). However, either promptly upon detecting the health update or after the waiting period expires, the cluster resource writer  may determine that the storage region  has failed, and may initiate a repair operation. Some repair operations may be completed by rewriting or reconstructing the data in the storage region , e.g., to repair data corruption caused by a race condition through the use of resilient data stored elsewhere in the storage set. However, other repairs may involve discarding a storage region  and\/or a storage device  that has irrevocably failed and reallocating space for a corresponding storage pool , which may have to involve the storage pool manager  to perform the reallocation. Therefore, the cluster resource writer  may directly notify the storage pool manager  of the health update of the storage region  and the invocation of the repair operation. Alternatively, the cluster resource writer  may simply update the maintenance region with the health update, and the storage pool manager  may monitor the maintenance region in order to detect health updates that may prompt a reconfiguration of the storage pool configuration . In either scenario, the cluster resource writer  may be unable to revoke the initiation of the repair operation (since the storage pool manager  may already have marked the damaged storage region  as unusable and\/or allocated new capacity for the storage region ). Additionally, the cluster resource writer  may be unable to take further action in the repair operation until capacity is allocated.","Upon receiving the notification and\/or detecting the health update of the maintenance region prompting the repair operation, the storage pool manager  may allocate a new storage region , and may update the storage pool configuration  to reflect the allocation. The storage pool manager  may then notify the cluster resource writer  that new capacity has been allocated. This notification may be explicit and direct (e.g., the storage pool manager  may directly contact the cluster resource writer  to indicate the capacity allocation), or may be implicit (e.g., a notification of the update of the storage pool configuration  may be automatically propagated to the other nodes  of the cluster , and the cluster resource writer  for the maintenance region may detect the allocation of the substitute storage region  in the update of the storage pool configuration ). In either scenario, upon receiving the notification that new capacity has been allocated, the cluster resource writer  may initiate the reconstruction of the data into the substitute storage region  in order to repair the storage region . In this manner, the storage pool manager  and the cluster resource writer  for the maintenance region may implicitly collaborate to achieve the repair of the storage region . Those of ordinary skill in the art may devise many adaptations for use with high-availability clusters  of the techniques presented herein.","E. Computing Environment",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 8","FIG. 8"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 8","FIG. 8"],"b":["800","802","802","806","808","808","804"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media.","The term \u201ccomputer readable media\u201d may include communication media. Communication media typically embodies computer readable instructions or other data in a \u201cmodulated data signal\u201d such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","F. Usage of Terms","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
