---
title: Method and system to provision and manage a computing application hosted by a virtual instance of a machine
abstract: A system and method are described for provisioning and managing virtual instances of a computing application running within a public virtualization space (referred to as a hosted service system). A hosted service system may be configured to provide automated administration of the computing application, replacing the administration tasks that would otherwise be performed by the customer when running in an on-premise production deployment and to provide encrypted networking and other services that are specific to the public virtualization environment and are designed to provide a secure integration fabric between a customer's own private data center and virtual instances of the computing application running within an insecure public virtualization service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569240&OS=09569240&RS=09569240
owner: Adobe Systems Incorporated
number: 09569240
owner_city: San Jose
owner_country: US
publication_date: 20090721
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This disclosure relates generally to the technical fields of software and\/or hardware technology and, in one example embodiment, to systems and methods for provisioning and managing a computing application hosted by a virtual instance of a machine.","The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","Enterprise application software has traditionally been delivered using three-tiered architecture, with a user interface tier, a server or business logic tier, and a database tier. These applications are typically deployed locally by a customer within their own data center, on their own hardware, and with their own support staff. Each application operates within its own \u201csilo\u201d of hardware, software, and support that does not leverage any of the resources that all such enterprise applications share. The initial cost to deploy an enterprise application with this architecture is substantial, in both dollars and time, and this initial cost has always been an obstacle to the sale of enterprise software to the small and medium business (SMB) market.","A two-tiered application architecture that relies upon a web browser-based client tier and a remotely deployed internet-accessible server tier to provide functionality that was previously delivered via a locally deployed three-tiered application is commonly referred to as software-as-a-service (SaaS) or Cloud Computing. A SaaS approach is intended to leverage the shared functions of computing applications, together with shared hardware, data, and support capacities, in order to provide a user experience with improved scalability, extensibility, maintainability, and with significantly reduced up-front costs. The term software-as-a-service (SaaS) is used as a blanket term for a set of features that uses a two-tiered network-accessible hosted service architecture.","The phrase \u201ccloud computing\u201d refers to an architectural paradigm in which computation is moved from local servers to a remote service that provides computation as a commodity or utility. A \u201ccloud\u201d is typically a large collection of shared commodity computation resources that can be interchangeably provisioned for client computation requests. Cloud computing is frequently used in SaaS application architectures and may be viewed as an implementation choice for application deployment that leverages shared resources and improved cost structure of the cloud. A cloud computing approach may be used to implement a variety of computational paradigms, such as virtual machines, jobs, remote procedure calls, traditional servers, etc.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.","Some portions of the detailed description that follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification, the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here, and generally, considered to be a self-consistent sequence of operations or similar signal processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification, therefore, a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals, typically represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the special purpose computer or similar special purpose electronic computing device.","A system and method are described for provisioning and managing virtual instances of a computing application running within a public virtualization space, such as the virtualization space provided by Amazon's Elastic Compute Cloud (EC2) service. A system for provisioning and managing a computing application hosted on an instance of a virtual machine may be referred to as a hosted service system. In one example embodiment, a hosted service system may be configured to provide automated administration of the computing application, replacing the administration tasks that would otherwise be performed by the customer when running in an on-premise production deployment. In addition, a hosted service system may be configured to provide encrypted networking and other services that are specific to the public virtualization environment and are designed to provide a secure integration fabric between a customer's own private data center and virtual instances of the computing application running within an insecure public virtualization service. The technology within an example hosted service system may hide the behavior of the underlying virtualization service and the insecure network environment, and provide instances of a computing application that are substantially indistinguishable (e.g., in terms of reliability, security, and performance) from local on-premise deployments of the computing application.","An example computing application that a hosted service system may provision and manage is Adobe\u00ae LiveCycle\u00ae Enterprise Suite (ES) offered by Adobe Systems Incorporated (\u201cLiveCycle\u201d). It will be noted, that while embodiments of the hosted service system are described with reference to LiveCycle, the hosted service system may be utilized advantageously to provision and manage any computing application within a public virtualization space. Furthermore, while references are made to Amazon EC2 service, other virtualization services may be utilized.","In operation, a user can access a provider's web site and request to launch a computing application that can be deployed remotely on a virtual instance of a machine (on a cloud) such that the user no longer is required to deploy the computing application locally, within their own data center, on their own hardware. A request may be triggered by a user, e.g., by activating a visual control such as a \u201cStart\u201d button presented on a web page. In response to such request, the generic instance of the requested computing application is provisioned on a cloud and then personalized in accordance with the specific user's requirements.","When a hosted service system receives a request from a client computer system to launch a computing application, a call is made to the application programming interface (API) associated with the virtualization service to trigger the loading of the machine image associated with the requested computing application. The machine image is a read-only boot image for a virtual instance. The associated virtual instance launched on a cloud is loaded with the contents of the machine image. The virtual instances launched by the virtualization service are transient, meaning that they do not persist in any way after they are terminated. Thus, no changes that may be made to a virtual instance after booting are reflected in the associated machine image. In one example embodiment, a hosted service system is provided to facilitate establishing a secure communications channel for communications with the virtual instance and for configuring a personalized state of the virtual instance over the secure communications channel.","An example method and system to provision and manage a computing application hosted by a virtual instance of a machine (also referred to as merely \u201cvirtual instance\u201d) may be described with reference to an architecture diagram illustrated in . The architecture  may include a client computer system  and a hosted service system . In one example embodiment, the hosted service system  is to provision and manage an enterprise SaaS product (e.g., virtual instances of LiveCycle) utilizing a cloud-based computing service as a virtualization infrastructure. Cloud based computing services are shown in  as a virtualization service  and a network storage service . In one embodiment, a hosted service system  utilizes Amazon EC2 as a virtualization service and Amazon Simple Storage Service (Amazon S3) as a network storage service. The client computer system  and the hosted service system  may be in communication with each other via a communications network that may be a public network (e.g., the Internet).","The virtualization service  may load a virtual instance  running the computing application onto a cloud. The virtual instance  may be accessed by the client  via a browser application . As mentioned above, a user in control of the client computer system may send a request to the hosted service system  to load the computing application. The request may be initiated via a user interface  provided by the hosted service system  to the client computer system  via the browser application .","The user interface , in one embodiment, provides both an end-user's and a system administrator's view of the virtual instance (that runs the computing application) and also permits issuing control operations to the virtual instance and permits viewing the resulting changes in the state of the computing application. For example, where the computing application is LiveCycle, an end-user may manipulate various electronic forms. The user interface  may also serve as a source of information for the hosted service system, including documentation, downloads, and support. The user interface , in one embodiment, uses Adobe\u00ae Flex\u00ae software, offered by Adobe Systems Incorporated, as the user interface technology for the implementation of the user interface. The user interface , in one embodiment, uses an XML (Extensible Markup Language)-based representational state transfer (REST) style secure communications protocol to synchronize its operations with the control server . A request to access the user interface may be authenticated using one of a variety of authentication techniques.","The request from the client computer system  to load the virtual instance  is received at the control server , which responds to the request by activating an access interface  provided by the virtualization service . The control server , in one example embodiment, provides coordination between the components of the architecture , provides administration and monitoring of the virtualization service , and also may be configured to audit system usage and resource allocation with respect to the virtual instance . The control server  includes a database to store information pertaining to various aspects of system usage. The control server , in one embodiment, runs within a standard Hypertext Transfer Protocol Secure (HTTPS)-compliant web server and may be deployed as a publically accessible web application that is available outside a firewall. The control server , in one embodiment, is implemented using Ruby on Rails\u2122 technology.","The virtualization service  accesses the storage  of the network storage system  to obtain a machine image in order to load the associated virtual instance . The machine image can be uploaded to the network storage system by the control server  utilizing an access interface  provided with the network storage system . As mentioned above, the machine image obtained by the virtualization service  from the network storage system  permits the virtualization service  to load a generic virtual instance\u2014a virtual instance running the computing application in a state that is neither personalized for any particular user nor reflects any state that is different from a newly installed computing application. In order to facilitate personalization of the computing application running as part of the virtual instance, the control server  loads a public encryption key and a certain launch configuration onto the network storage , which is accessible by the virtualization service , and provides additional information to the virtual instance  to permit the virtual instance  to configure the computing application to a desired state.","The communications between the virtual instance  and the control server , after the public key and launch configuration have been retrieved from the network storage , may include monitoring the state of the virtual instance  and providing additional information to the virtual instance . For example, the virtual instance  may request from the control server  the private encryption key. The control server  may also monitor the state of the virtual instance  as the personalization process progresses, and periodically update its database with the status of the personalization process. This monitoring continues after personalization is complete, for as long as the virtual instance  remains executing.","The hosted service system  further includes a secure networking client  to provide a bidirectional, encrypted, compressed connection between a machine in the end-user's secure network environment (e.g., the client computer system ) and a virtual instance running within the virtualization infrastructure (the virtual instance ). The networking client  manages various aspects of transmission control protocol (TCP) traffic forwarding, encryption, and network discovery, such that the user can access the virtual instance  as if it was running locally on the user's machine. In this mode, the user's network security envelope is extended to surround the virtual instance  using comparable levels of encryption and protection against network security threats.","An example system to manage a computing application running on a virtual instance may be discussed with reference to .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 2"],"b":["200","200","220","250","260","270","220","224","222","226","230"]},"The agent  is provided to permit communications between the virtual instance  and the network storage system , the client computer system , and the control server . The agent  includes an operating system (OS) adapter  to facilitate communication between the agent  and the operating system  and an application interface  to facilitate communications between the computing application  and the agent . A network storage interface  is configured to facilitate communications between the network storage system  and the agent . A network component  is configured to facilitate communications between the client computer system  and the agent . A public web server  is configured to facilitate communications between the control server  and the agent .","The control server , in one example embodiment, is a web server that provides a web application architecture, in which objects are modeled within a relational database and actions performed on those objects are methods within a set of controllers. Example controllers include a site controller, an EC2 controller, and an administration controller. The site controller supports the user interface and handles all command functions. The EC2 controller acts as an adapter to the Amazon EC2 API and handles commands directed to the virtual instance . The EC2 controller also monitors the state of the virtual instance . The administration controller supports several asynchronous background operations that run periodically to monitor usage, resource limits, and the state of Amazon's EC2 service and the virtual instance running within it. These controllers operate upon the following object models. The user object represents each authenticated user within the hosted service system . The instance object monitors all aspects of the state of the virtual instance . The image object represents an EC2 AMI within the hosted service system  and is used to translate command requests to start instances into actual running instances within EC2. Some components of the control server  may be described with reference to .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 3","FIG. 1"],"b":["300","300","120","310","320","330","340","350","310","320","330","120","340","340","350"]},"The control server  may further include a backup monitor . The backup monitor , in one example embodiment, may be configured to monitor backup operations performed by the virtual instance and to store data indicating a location of a backup object generated by the backup operation. The backup object may be used to restore the state of the computing application the next time the same user requests that the computing application is instantiated on a cloud. The backup monitor  may be implemented as an administration controller discussed above with reference to .","In one example embodiment, the control server  may be configured to detect whether a request from the client computer system to instantiate a computing application indicates that the computing application is to be loaded in a default state or in a persisted, previously stored state. If the request indicates that the computing application is to be loaded in a previously stored state, the encryption module  pushes a private decryption key onto the virtual instance. The private decryption key may be used by the virtual instance for decrypting an encrypted backup object stored at the network storage system.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":"400"},"The method  may be performed by processing logic that may comprise hardware (e.g., dedicated logic, programmable logic, microcode, etc.), software (such as run on a general purpose computer system programmed to perform particular functions pursuant to instructions from program software or on a dedicated machine), or a combination of both. The processing logic, according to example embodiments, may reside in any of the modules shown in  and . The modules illustrated in  and  may be implemented as software, hardware, or a combination of both.","As shown in , the method  commences with operation , where the hosted service system  of  generates a machine image that can be used by the virtualization service  of  to load a virtual instance including a computing application. The hosted service system  stores the generated machine image on the network storage system  of . At operation , the controller  of  receives a request to instantiate the computing application. At operation , the controller  requests that the virtualization service  loads a virtual instance comprising a virtual computing system hosting the computing application. At operation , the controller  provides a public encryption key to the network storage system . As explained above, the public encryption key is used for establishing a secure communication channel between the hosted service system  and the virtual instance. At operation , a launch configuration (e.g., in a form of a file) is generated based on the request from the client computer system. The controller  provides the launch configuration to the network storage system . The controller  communicates with the virtual instance via the secure communications channel established between the hosted service system  and the virtual instance at operation . The secure communications channel makes it possible to secure the configuration and the state of the virtual instance within a public virtualization provider such as the virtualization service .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 11","b":"1100"},"The example computer system  includes a processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory  and a static memory , which communicate with each other via a bus . The computer system  may further include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)). The computer system  also includes an alphanumeric input device  (e.g., a keyboard), a user interface (UI) cursor control device  (e.g., a mouse), a disk drive unit , a signal generation device  (e.g., a speaker) and a network interface device .","The disk drive unit  includes a computer-readable (or machine-readable) medium  on which is stored one or more sets of instructions and data structures (e.g., software ) embodying or utilized by any one or more of the methodologies or functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , the main memory  and the processor  also constituting machine-readable media.","The software  may further be transmitted or received over a network  via the network interface device  utilizing any one of a number of well-known transfer protocols (e.g., Hyper Text Transfer Protocol (HTTP)).","While the machine-readable medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention, or that is capable of storing or encoding data structures utilized by or associated with such a set of instructions. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic media. Such medium may also include, without limitation, hard disks, floppy disks, flash memory cards, digital video disks, random access memory (RAMs), read only memory (ROMs), and the like.","Thus, method and system method for provisioning and managing a computing application hosted by a virtual instance of a machine have been described. The embodiments described herein may be implemented in an operating environment comprising software installed on a computer, in hardware, or in a combination of software and hardware. Although embodiments have been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["Embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
