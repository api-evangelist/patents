---
title: System and method for efficient file content searching within a file system
abstract: A system and method for efficient file content searching within a file system. In one embodiment, the system may include a storage device configured to store data and a file system configured to manage access to the storage device. The file system may be configured to detect a search operation to determine the presence of a given data pattern within a first file stored on the storage device, and to store an indication of the given data pattern and an indication of result data of the search operation in a first record associated with the first file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07636710&OS=07636710&RS=07636710
owner: Symantec Operating Corporation
number: 07636710
owner_city: Mountain View
owner_country: US
publication_date: 20040304
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates to computer systems and, more particularly, to storage systems.","2. Description of the Related Art","Computer systems often process large quantities of information, including application data and executable code configured to process such data. In numerous embodiments, computer systems provide various types of mass storage devices configured to store data, such as magnetic and optical disk drives, tape drives, etc. To provide a regular and systematic interface through which to access their stored data, such storage devices are frequently organized into hierarchies of files by software such as an operating system. Often a file defines a minimum level of data granularity that a user can manipulate within a storage device, although various applications and operating system processes may operate on data within a file at a lower level of granularity than the entire file.","In many conventional file-based computer systems, data of interest may be distributed across numerous files located in disparate logical and physical areas of the storage system. Different computing platforms often provide various types of search applications through which a user may determine which files include a particular data pattern, such as a text string. For example, a code developer may use such a search application to identify which files within a large and complex code base include a particular revision string, so that those files may be selected for an operation.","However, typical search applications require reading the entire contents of a file to determine whether a given data pattern occurs in that file, even though in most cases a given data pattern comprises a small portion of total file content if it exists in a given file at all. Further, many typical search applications lack history, such that if a search for a given data pattern within a given file is repeated, the entire contents of the file may be reexamined in the course of the search. Such redundant file access may substantially decrease the performance of a system that frequently performs file content searches.","Various embodiments of a system and method for efficient file content searching within a file system are disclosed. In one embodiment, the system may include a storage device configured to store data and a file system configured to manage access to the storage device. The file system may be configured to detect a search operation to determine the presence of a given data pattern within a first file stored on the storage device, and to store an indication of the given data pattern and an indication of result data of the search operation in a first record associated with the first file.","In one specific implementation of the system, subsequent to detecting the search operation, the file system may be further configured to scan the first record to determine whether the indication of the given data pattern is stored therein, and in response to determining that the indication is stored therein, to access only a portion of the first file.","In another specific implementation of the system, if the given data pattern is not present in the first file, the file system may be further configured to store the indication of the given data pattern in the first record. On the other hand, if the given data pattern is present in the first file, the file system may be further configured to store the indication of the given data pattern and pattern location information in a second record.","A method is also contemplated that, in one embodiment, may include storing a plurality of files, detecting a search operation to determine the presence of a given data pattern within a first file, and storing an indication of the given data pattern and an indication of result data of the search operation in a first record associated with the first file.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Storage System and File System Overview","Turning now to , a block diagram of one embodiment of a storage system is shown. In the illustrated embodiment, storage system  includes a plurality of host devices and coupled to a plurality of storage devices and via a system interconnect . Further, host device includes a system memory  in the illustrated embodiment. For simplicity of reference, elements referred to herein by a reference number followed by a letter may be referred to collectively by the reference number alone. For example, host devices and and storage devices and may be referred to collectively as host devices  and storage devices .","In various embodiments of storage system , host devices  may be configured to access data stored on one or more of storage devices . In one embodiment, storage system  may be implemented within a single computer system, for example as an integrated storage server. In such an embodiment, for example, host devices  may be individual processors, system memory  may be a cache memory such as a static RAM (SRAM), storage devices  may be mass storage devices such as hard disk drives or other writable or rewritable media, and system interconnect  may include a peripheral bus interconnect such as a Peripheral Component Interface (PCI) bus. In some such embodiments, system interconnect  may include several types of interconnect between host devices  and storage devices . For example, system interconnect  may include one or more processor buses (not shown) configured for coupling to host devices , one or more bus bridges (not shown) configured to couple the processor buses to one or more peripheral buses, and one or more storage device interfaces (not shown) configured to couple the peripheral buses to storage devices . Storage device interface types may in various embodiments include the Small Computer System Interface (SCSI), AT Attachment Packet Interface (ATAPI), Firewire, and\/or Universal Serial Bus (USB), for example, although numerous alternative embodiments including other interface types are possible and contemplated.","In an embodiment of storage system  implemented within a single computer system, storage system  may be configured to provide most of the data storage requirements for one or more other computer systems (not shown), and may be configured to communicate with such other computer systems. In an alternative embodiment, storage system  may be configured as a distributed storage system, such as a storage area network (SAN), for example. In such an embodiment, for example, host devices  may be individual computer systems such as server systems, system memory  may be comprised of one or more types of dynamic RAM (DRAM), storage devices  may be standalone storage nodes each including one or more hard disk drives or other types of storage, and system interconnect  may be a communication network such as Ethernet or Fibre Channel. A distributed storage configuration of storage system  may facilitate scaling of storage system capacity as well as data bandwidth between host and storage devices.","In still another embodiment, storage system  may be configured as a hybrid storage system, where some storage devices  are integrated within the same computer system as some host devices , while other storage devices  are configured as standalone devices coupled across a network to other host devices . In such a hybrid storage system, system interconnect  may encompass a variety of interconnect mechanisms, such as the peripheral bus and network interconnect described above.","It is noted that although two host devices  and two storage devices  are illustrated in , it is contemplated that storage system  may have an arbitrary number of each of these types of devices in alternative embodiments. Also, in some embodiments of storage system , more than one instance of system memory  may be employed, for example in other host devices  or storage devices . Further, in some embodiments, a given system memory  may reside externally to host devices  and storage devices  and may be coupled directly to a given host device  or storage device  or indirectly through system interconnect .","In many embodiments of storage system , one or more host devices  may be configured to execute program instructions and to reference data, thereby performing a computational function. In some embodiments, system memory  may be one embodiment of a computer-accessible medium configured to store such program instructions and data. However, in other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM included in storage system  as storage devices . A computer-accessible medium may also include volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, that may be included in some embodiments of storage system  as system memory . Further, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link, which may be included in some embodiments of storage system  as system interconnect .","In some embodiments, program instructions and data stored within a computer-accessible medium as described above may implement an operating system that may in turn provide an environment for execution of various application programs. For example, a given host device  may be configured to execute a version of the Microsoft Windows operating system, the Unix operating system, the Apple Macintosh operating system, or another suitable operating system. Additionally, a given host device may be configured to execute application programs such as word processors, web browsers and\/or servers, email clients and\/or servers, and multimedia applications, among many other possible applications.","During execution on a given host device , either the operating system or a given application may generate requests for data to be loaded from or stored to a given storage device . For example, code corresponding to portions of the operating system or an application itself may be stored on a given storage device , so in response to invocation of the desired operation system routine or application program, the corresponding code may be retrieved for execution. Similarly, operating system or application execution may produce data to be stored.","Many operating system embodiments provide data and control structures for organizing the storage space provided by storage devices  into files. In various embodiments, the data structures may include one or more tables configured to store information such as, for example, the identity of each file, its location within storage devices  (e.g., a mapping to a particular physical location within a particular storage device), as well as other information about each file as described in greater detail below. Also, in various embodiments, the control structures may include executable routines for manipulating files, such as, for example, function calls for changing file identity and for modifying file content as described in greater detail below. Collectively, these data and control structures may be referred to herein as a file system, and the particular data formats and protocols implemented by a given file system may be referred to herein as the format of the file system.","In some embodiments, a file system may be integrated into the operating system such that any access to data stored on storage devices  is governed by the control and data structures of the file system. Different operating systems may implement different native file systems using different formats, but in some embodiments, a given operating system may include a file system that supports multiple different types of file system formats, including file system formats native to other operating systems. In such embodiments, the various file system formats supported by the file system may be referred to herein as local file systems. Additionally, in some embodiments, a file system may be implemented using multiple layers of functionality arranged in a hierarchy, as illustrated in .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"],"b":["200","210","220","210","212","212","210","200","200","200","212","230","214","214","212","205","220","230","30","200","212","20","25"]},"As described above with respect to storage system  of , a given host device  may reside in a different computer system from a given storage device , and may access that storage device via a network. Likewise, with respect to operating system , in one embodiment a given process such as process A may execute remotely and may access storage devices  over a network. In the illustrated embodiment, file system  includes network protocols  to support access to the file system by remote processes. In some embodiments, network protocols  may include support for the Network File System (NFS) protocol or the Common Internet File System (CIFS) protocol, for example, although it is contemplated that any suitable network protocol may be employed, and that multiple such protocols may be supported in some embodiments.","File system  may be configured to support a plurality of local file systems. In the illustrated embodiment, file system  includes a VERITAS (VxFS) proprietary format local file system A, a Berkeley fast file system (FFS) format local file system B, and a different proprietary (X) format local file system X. However, it is contemplated that in other embodiments, any number or combination of local file system formats may be supported by file system . To provide a common interface to the various local file systems , file system  includes a virtual file system . In one embodiment, virtual file system  may be configured to translate file system operations originating from processes  to a format applicable to the particular local file system  targeted by each operation. Additionally, in the illustrated embodiment operating system  includes device drivers  through which local file systems  may access storage devices . Device drivers  may implement data transfer protocols specific to the types of interfaces employed by storage devices . For example, in one embodiment device drivers  may provide support for transferring data across SCSI and ATAPI interfaces, though in other embodiments device drivers  may support other types and combinations of interfaces.","In the illustrated embodiment, file system  also includes filter driver . In some embodiments, filter driver  may be configured to monitor each operation entering file system  and, subsequent to detecting particular types of operations, to cause additional operations to be performed or to alter the behavior of the detected operation. For example, in one embodiment filter driver  may be configured to combine multiple write operations into a single write operation to improve file system performance. In another embodiment, filter driver  may be configured to compute a signature of a file subsequent to detecting a write to that file. In still another embodiment, filter driver  may be configured to store information, such as records, associated with particular files subsequent to detecting certain kinds of operations on those files, as described in greater detail below. It is contemplated that in some embodiments, filter driver  may be configured to implement one or more combinations of the aforementioned operations, including other filter operations not specifically mentioned.","It is noted that filter driver  is part of file system  and not an application or process within user space . Consequently, filter driver  may be configured to operate independent of applications and processes within the user space . Alternatively, or in addition to the above, filter driver  may be configured to perform operations in response to requests received from applications or processes within the user space .","It is further noted that in some embodiments, kernel space  may include processes (not shown) that generate accesses to storage devices , similar to user space processes . In such embodiments, processes executing in kernel space  may be configured to access file system  through a kernel-mode API (not shown), in a manner similar to user space processes . Thus, in some embodiments, all accesses to storage devices  may be processed by file system , regardless of the type or space of the process originating the access operation.","Numerous alternative embodiments of operating system  and file system  are possible and contemplated. For example, file system  may support different numbers and formats of local file systems , or only a single local file system . In some embodiments, network protocol  may be omitted or integrated into a portion of operating system  external to file system . Likewise, in some embodiments virtual file system  may be omitted or disabled, for example if only a single local file system  is in use. Additionally, in some embodiments filter driver  may be implemented within a different layer of file system . For example, in one embodiment, filter driver  may be integrated into virtual file system , while in another embodiment, an instance of filter driver  may be implemented in each of local file systems .","Optimizing File Search Operations","As described above, file system  may be configured to manage access to a plurality of files stored on storage devices . In some embodiments, operating system  and\/or processes  may be configured to search one or more files to determine whether the searched files contain a particular data pattern. For example, an application program such as the Unix \u201cgrep\u201d, \u201cegrep\u201d, or \u201cfgrep\u201d command or the Microsoft Windows operating system \u201cfile search\u201d utility may be invoked to determine whether a particular text string occurs in a set of files. In some embodiments, search applications may be capable of specifying data patterns of arbitrary complexity, such as regular expressions, for example. Also, in some embodiments search applications may be configured to process binary data patterns and files in addition to textual patterns and files.","Once invoked, the search application may execute as one of processes , for example, and may generate read operations to file system  in order to retrieve the contents of the specified files. Depending on the search application, multiple files may be specified as the target of the search operation by providing multiple file names as arguments to the search application, using wildcards, specifying folder or directory names, or via any other suitable means. As the data from each specified file is retrieved via file system , the search application may examine the retrieved data to determine whether it includes the specified search data pattern, employing any suitable search algorithm. Depending on the implementation of the search application, searching of a given file may terminate after the first match or a specified number of matches (if any) of the search data pattern is detected, or may proceed until the end of the file is reached, reporting all matches detected. In some embodiments, these or other aspects of search application functionality may be selected by a user via command-line arguments, menus, or similar means.","In some conventional embodiments, search applications may result in the entirety of each specified file being read, even if an identical search (i.e., specifying the same data pattern and target file set) has already been performed. Redundantly accessing files under such circumstances may potentially increase file system activity and decrease overall system performance. For example, in such embodiments, two successive searches for the same pattern in the same file may each result in all corresponding file data being read and searched twice, which may take substantially longer processing time than performing the search a single time.","In one embodiment, file system  may be configured to detect search operations on files, and to store data patterns specified by such search operations as well as search result data in records corresponding to searched files.  illustrates one such embodiment of a file system. The embodiment of file system  shown in  may include those elements illustrated in the embodiment of ; however, for sake of clarity, some of these elements are not shown. In the illustrated embodiment, file system  includes filter driver , an arbitrary number of files , and a Respective metadata named stream associated with each of files . File system  further includes a respective negative search named stream and a respective positive search named stream associated with each of files . It is noted that a generic instance of one of files or named streams , or may be referred to respectively as a file  or named stream ,  or , and that files and named streams , or may be referred to collectively as files  and named streams ,  or , respectively.","Files  may be representative of files managed by file system . Each of files  has a corresponding metadata named stream , which may be referred to simply as metadata . Each of metadata named streams  may be configured to store information about its corresponding file, which may be referred to herein as metadata. In various embodiments, metadata may include information such as (but not limited to) the file identity, size, ownership, and file access permissions, as well as records corresponding to detected search operations, as described below. In the illustrated embodiment, filter driver  may be configured to coordinate the reading and writing of file data for files  and of file metadata for corresponding metadata streams .","Additionally, in the illustrated embodiment, each of files  has a corresponding negative search named stream , which may be referred to simply as negative stream , and a corresponding positive search named stream , which may be referred to simply as positive stream . Each of negative streams  and positive streams  may be configured to store information relating to search operations performed on the corresponding file , as described in greater detail below. In the illustrated embodiment, filter driver  may be configured to coordinate the reading and writing of such search operation records for negative streams  and positive streams .","It is noted that files , metadata , negative streams  and positive streams  may be physically stored on one or more storage devices, such as storage devices  of . However, for purposes of illustration, each of these elements is shown as conceptually residing within file system .","Storing Records of File Operations and Detecting Search Operations","In some embodiments of file system , filter driver  may be configured to detect various operations, such as read or write operations to a given file received by file system  from various applications. Subsequent to detecting an operation destined for a particular file , filter driver  may be configured to store a record of the detected operation in metadata  corresponding to the targeted file . In various embodiments, the record stored by filter driver  subsequent to detecting a file operation may include various kinds of information about the targeted file  and the operation detected, such as the file identity, file type, operation type, file size, file content signature (such as, e.g., a hash or Message Digest 5 (MD5) signature), file owner, and\/or file permissions, for example. Additionally, the record may include information about the process or application originating the operation, such as the application name, invocation arguments, process ID, or other available information.","In one particular embodiment, file system  may be configured to detect a search operation to determine whether a given data pattern is present within one or more files. For example, filter driver  may be configured to detect that a particular file read operation was generated by a search application by examining the name of the application originating the operation and\/or the arguments with which the application was invoked. In some embodiments, filter driver  may be configured with a list of names of search applications, and may determine that a file read application received from one of the listed applications is a search operation. In such embodiments, it is noted that filter driver  may be able to detect a search operation without any specific action by or modification of the search application; i.e., detection of the search operation may be transparent to the search application. In other embodiments, filter driver  may provide a facility, such as a registration application programming interface (API), through which applications may register themselves as search applications, thus allowing filter driver  to recognize arbitrary search applications by name or other identifying data. In still other embodiments, filter driver  may be configured to provide an API specific to search operations, such as by providing an alternative set of function calls for invoking file operations, or by providing one or more mechanisms for overloading standard file operation function calls with search-specific semantics. In such embodiments, a given search application may use the search-specific API to interact with file system  when performing search-related file operations, and filter driver  may detect operations received via such an API as search operations. Numerous other mechanisms via which file system  may be configured to detect search operations are possible and contemplated.","Once a search operation destined for a particular file  has been detected, filter driver  may be configured to store a record of the search operation in corresponding metadata named stream . It is contemplated that storage of such a record may take place at any time subsequent to detection of the relevant operation. For example, in one embodiment, storage of the record may be delayed until the operation on file is complete, while in another embodiment, storage of the record may occur prior to completion of the operation. In the latter case, if the operation is not guaranteed to complete (i.e., is speculative), filter driver  may provide a mechanism to delete a record stored in advance of its corresponding operation in case the operation does not complete.","In one embodiment, the record stored by filter driver  subsequent to detecting a search operation may be generated and stored in Extensible Markup Language (XML) format, although it is contemplated that in other embodiments, any suitable format may be used. One example of an XML-format record is as follows:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<record sequence=\u201c3\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<path>\/test1\/foo.txt<\/path>"]},{"entry":[{},"<type>ascii<\/type>"]},{"entry":[{},"<user id=1598>username<\/user>"]},{"entry":[{},"<group id=119>groupname<\/group>"]},{"entry":[{},"<perm>rw-r--r--<\/perm>"]},{"entry":[{},"<md5>d41d8cd98f00b204e9800998ecf8427e<\/md5>"]},{"entry":[{},"<size>58937<\/size>"]},{"entry":[{},"<process>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<name>grep<\/name>"]},{"entry":[{},"<args>grep release4 \/test1\/*.txt<\/args>"]},{"entry":[{},"<pid>7168<\/pid>"]},{"entry":[{},"<ppid>409<\/ppid>"]},{"entry":[{},"<pgrpid>409<\/pgrpid>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/process>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/record>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["320","310","221","205","205"],"i":["a","a"]},"For this example, the number associated with the \u201crecord sequence\u201d field indicates that this record is the third record associated with file . The \u201cpath\u201d field includes the file identity, and the \u201ctype\u201d field indicates the file type, which in one embodiment may be provided by the process issuing the file create operation, and in other embodiments may be determined from the extension of the file name or from header information within the file, for example. The \u201cuser id\u201d field records both the numerical user id and the textual user name of the user associated with the process issuing the file create operation, and the \u201cgroup id\u201d field records both the numerical group id and the textual group name of that user. The \u201cperm\u201d field records file permissions associated with file in a format specific to the file system  and\/or the operating system. The \u201cmd5\u201d field records an MD5 signature corresponding to the file contents, and the \u201csize\u201d field records the length of file in bytes.","Additionally, the \u201cprocess\u201d field may include subfields recording information about the process performing the content access operation. The \u201cname\u201d subfield records the name of the process or application originating the operation, and the \u201cargs\u201d subfield records the arguments given when the named process was invoked. The \u201cpid,\u201d \u201cppid,\u201d and \u201cpgrpid\u201d subfields record the process ID, the ID of the parent of the process, and the group ID of the process, respectively. It is contemplated that in alternative embodiments, filter driver  may store records corresponding to detected search operations that include more or fewer fields, as well as fields having different definitions and content. It is further contemplated that in some embodiments, filter driver  may detect a search operation and process it as described below without generating a record within metadata stream  as shown above.","Processing Search Operations Within the File System","In the illustrated embodiment, file system  may be configured to utilize information stored in negative stream  and positive stream  to optimize processing of detected search operations on corresponding file . Specifically, negative stream  may be configured to store records, such as XML records illustrated below, that indicate whether a given search data pattern is known not to exist within its corresponding file . Similarly, positive stream  may be configured to store records that indicate that a given search data pattern is known to exist within corresponding file  as well as the location(s) within file  at which the search data pattern is found.","Upon detecting a search operation as described above, in one embodiment filter driver  may be configured to determine the data pattern specified by the search operation. For example, filter driver  may examine the arguments with which the application originating the search operation was invoked and parse those arguments according to the application's syntax. Referring to the example described above, filter driver  may determine that the data pattern specified for the \u201cgrep\u201d operation is the text string \u201crelease4\u201d. As noted previously, in some embodiments the data pattern may include wildcards, regular expression syntax, or other abstract pattern-matching syntax.","After determining the data pattern specified by the search operation, in one embodiment filter driver  may be configured to scan negative stream  and positive stream  to determine whether an indication of the specified data pattern is stored in either stream. In some embodiments, filter driver  may be configured to match the specified data pattern against the contents of negative stream  and positive stream  literally. In embodiments where the specified data pattern may include abstract syntax, filter driver  may be configured to evaluate the syntax as well as the syntax of the contents of streams  and  to determine whether an indication of the specified data pattern is stored in either stream. For example, two literally distinct regular expressions may identify the same data pattern when evaluated.","If an indication of the specified data pattern is not stored in either stream, in one embodiment filter driver  may be configured to search the file  targeted by the detected search operation to determine whether the specified data pattern exists therein. For example, in one embodiment filter driver  or another module within file system  may implement a search algorithm that may be executed within kernel space  of . In another embodiment, filter driver  may be configured to call an external search application that may be executed within user space  of . In some such embodiments, the external search application to be called may be selected when file system  is initialized or as desired by a programmer or system administrator, such as through an API.","If no match for the specified data pattern is found after filter driver  searches file , in one embodiment filter driver  may be configured to store an indication of the data pattern within negative stream . In one embodiment, filter driver  may store the data pattern as an XML record within negative stream . For example, if the pattern \u201crelease4\u201d mentioned in the example illustrated above is not found after filter driver  searches file \u201cfoo.txt\u201d, filter driver  may store the record",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<pattern>release4<\/pattern>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"330"},"Similarly, if a match for the specified data pattern is found after filter driver  searches file , in one embodiment filter driver  may be configured to store an indication of the data pattern within positive stream , as well as information regarding where the pattern was found within file . In one embodiment, filter driver  may store the data pattern as an XML record within positive stream . For example, the pattern \u201crelease4\u201d mentioned in the example illustrated above may occur within file \u201cfoo.txt\u201d at line  and line  of the file. Further, line  may be located within block  of the file and line  may be located within block  of the file, where block dimensions and boundaries are determined by file system  (e.g., file system  may organize and manipulate file contents using 1024-byte blocks). In such a case, after searching for the pattern \u201crelease4\u201d in file \u201cfoo.txt\u201d, filter driver  may store the following XML record within the corresponding positive stream :",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<occurs>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<pattern>release4<\/pattern>"]},{"entry":[{},"<record>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<linenumber>20<\/linenumber>"]},{"entry":[{},"<blocknumber>2<\/blocknumber>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/record>"]},{"entry":[{},"<record>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<linenumber>485<\/linenumber>"]},{"entry":[{},"<blocknumber>4<\/blocknumber>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/record>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/occurs>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Any suitable index in addition to or in place of line and block numbers may be employed to index corresponding portions of a file. For example, in some embodiments, byte offsets measured from the beginning of the file may be used in place of line and block numbers in records such as the one just shown. Also, it is contemplated that in other embodiments, different XML tags may be used to delimit and structure the records stored in negative stream  and positive stream , or a syntax other than XML may be used to structure the records. It is further contemplated that in some embodiments, the target file  of a search operation may not be formatted as a text file (e.g., file  may be a binary file). In some such embodiments, if a given target file  is not a text file, line numbers may not be relevant to indexing the file, and they may be omitted from records within corresponding positive stream .","As described above, in one embodiment filter driver  may be configured to scan negative stream  and positive stream  after receiving a search operation to determine whether an indication of the specified search data pattern is stored in either stream. For an embodiment employing the format of the example records just shown, filter driver  may be configured to scan the \u201cpattern\u201d fields recorded in each stream. If the specified data pattern matches a pattern stored in negative stream , filter driver  may be configured to return a negative search indication to the application originating the search operation without accessing the contents of corresponding file . For example, filter driver  may indirectly and transparently return a negative search indication to an originating application by causing an end-of-file indication to be sent to the originating application without any file data; i.e., filter driver  may cause file  to appear to be of null length to the originating application. In such a case, the originating application may attempt to search the null file data returned by file system  for the specified search data pattern, which attempt may fail provided that the null pattern is not a valid match for the search data pattern. In another embodiment, filter driver  may indirectly and transparently return a negative search indication to an originating application by returning data of the same length as file , but wherein the returned file data includes only whitespace characters (e.g., spaces, tabs) and\/or newline characters.","In embodiments where file system  implements a search-specific API as described above, filter driver  may be configured to directly indicate negative search results to originating applications, for example through a function call or other defined interface, rather than by returning an end-of-file indication. It is noted that regardless of the specific mechanism by which negative search results are indicated to an originating search application, those negative search results may be indicated without actually accessing the contents of the targeted file , thus potentially reducing file system activity.","If the specified data pattern matches a pattern stored in positive stream , filter driver  may be configured to access only those portions of file  indicated by the matching record in positive stream , and to return those portions of file data to the originating application. In one embodiment, filter driver  may be configured to transparently return those specific file portions by returning whitespace characters (e.g., spaces, tabs) and\/or newline characters up until the line or block indicated in the matching record in positive stream , and then reading the indicated block of corresponding file  and returning file data for only that block to the originating application. If a given data pattern matches multiple times in a given file , as indicated by multiple records corresponding to the data pattern such as illustrated above, filter driver  may follow a given returned data block with additional whitespace and\/or newline characters until the next line or block indicated by a record is reached. For example, if a search operation specifies the data pattern \u201crelease4\u201d and a positive stream  contains an \u201coccurs\u201d record as illustrated above, filter driver  may be configured to access and return only blocks  and  of corresponding file , interspersing these blocks with the appropriate number of whitespace and\/or newline characters. The originating search application may attempt to search the whitespace\/newline-padded file data returned by file system  for the specified data pattern, but may only match that data pattern in the portions of the targeted file  actually returned by file system , provided that the characters used to substitute for unread portions are not valid search pattern data.","In embodiments where file system  implements a search-specific API as described above, filter driver  may be configured to directly indicate positive search results to originating applications. For example, in one such embodiment, filter driver  may be configured to return specific portions of a file  as well as information on where the specific portions are located within file  through a function call or other defined interface, rather than by returning such portions embedded in a stream of whitespace characters. As with negative search results described above, it is noted that regardless of the specific mechanism by which positive search results are indicated to an originating search application, those positive search results may be indicated while actually accessing only portions of the targeted file , thus potentially reducing file system activity.","If the contents of a given file  are modified, for example by a file write operation, the data patterns stored in corresponding negative stream  and positive stream  may no longer accurately reflect the modified file contents. That is, the stored data patterns may no longer exhibit referential integrity with respect to the modified contents of given file , as the information to which the stored data patterns referred at the time the data patterns were stored may have changed. In some embodiments, filter driver  may be configured to clear the records stored in negative stream  and positive stream  following a write to the corresponding file , for example by truncating the streams  and  to zero length. In other embodiments, filter driver  may be configured to examine stored data patterns against the modified contents to determine the validity of each stored record following modification of file content. For example, in one such embodiment filter driver  may search file  for each data pattern stored in negative stream  and positive stream , and may update the streams accordingly. Additionally, in some embodiments, filter driver  may be configured to remove records from negative stream  and positive stream  to reduce storage required by the streams. For example, filter driver  may be configured to remove older records from a given stream if the size of the stream exceeds a threshold or after a period of time has elapsed.","It is noted that the order in which negative stream  and positive stream  are searched may vary in various embodiments. In one embodiment, subsequent to detecting a search operation, filter driver  may be configured to first search for the specified data pattern in negative stream . If the pattern is not found, filter driver  may next search positive stream , and may finally search the specified file  itself. In another embodiment, filter driver  may be configured to search some or all of negative stream , positive stream , and file  concurrently, or in a different order. Further, in some embodiments of file system  that provide a search-specific API, the order and degree of concurrency in which these items are searched may be specified by a search application. For example, such specification may occur in response to heuristics that may suggest whether a given data pattern is more likely to be found or not found in a given file, and thus more likely in a positive or negative stream, or whether a given search is known to have or have not been recently performed, and thus whether a data pattern is likely to exist in either stream.","It is further noted that in some embodiments, file system  may implement support for one of negative stream  or positive stream , but not the other, or may implement the management of negative stream  and\/or positive stream  described above in a module other than filter driver . Additionally, in some embodiments, negative stream  and\/or positive stream  may be omitted entirely, and records corresponding to negative and positive search results may be stored directly within metadata stream  or another named stream. In such embodiments, the records may be delimited with XML field tags other than those illustrated above, in order to distinguish positive search records from negative search records.","Finally, it is contemplated that various types of indexing may be applied to the contents of a given negative stream  or positive stream , or to the search-related contents of file system  as a whole. For example, in one embodiment file system  may be configured to index the records stored in a given negative stream  or positive stream  such as by pre-parsing the syntax of the records stored therein and storing the record data in a parsed format (such as a binary format), thus reducing the time needed to search a given stream. Additionally, in one embodiment file system  may be configured to generate and maintain additional named streams or files that index existing negative streams  and positive streams . For example, file system  may be configured to generate a negative index stream including records of particular negative streams  in which a given search data pattern is determined to occur, as well as a similar positive index stream. File system  may be further configured to use such index streams to reduce the number of accesses to negative streams  and positive streams  in response to search activity, in a manner similar to that in which a given negative stream  and a given positive stream  may reduce accesses to their corresponding file  as described above.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["400","221","310","205","205"]},"When a search operation is detected, in one embodiment negative stream  may be scanned to determine whether an indication of the data pattern specified by the search operation is stored therein (blocks , ). If an indication of the specified data pattern is stored therein, a negative indication may be returned to the originating application without accessing corresponding file  (block ). For example, filter driver  may be configured to return an end-of-file indication to the originating application in this case, or may indicate negative search status via an API.","If no indication of the specified data pattern is detected in negative stream , in one embodiment positive stream  may be scanned to determine whether such an indication is stored in a record therein (blocks , ). If such an indication is found, only the data blocks of file  indicated by the record may be accessed (block ). Those data blocks may be returned to the originating application (block ). For example, in one embodiment, the data blocks may be returned in a manner transparent to the originating application by embedding them in a stream of whitespace characters generated by filter driver . In another embodiment, the data blocks may be returned directly to the originating application along with information regarding their location within the file, such as through an API.","If no indication of the specified data pattern is detected in positive stream , the corresponding file  may be searched to determine whether the data pattern is stored therein, and the appropriate record may be stored in negative stream  or positive stream  dependent on the result of the search (block ).","It is noted that in some embodiments of the method, negative stream , positive stream , and file  may be searched in a different order or concurrently. It is further noted that in some embodiments of the method, only one or the other of negative stream  and positive stream  may be implemented, or both types of records may be combined in a single named stream.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 5","FIG. 1 through 3","FIG. 5","FIGS. 3 and 4"],"b":["500","330","340"]},"Subsequent to storage of a record of a file search operation, an operation to modify the content of the corresponding file may be detected (block ). For example, in one embodiment filter driver  may detect a file write operation to a file having records stored in a corresponding negative stream  or positive stream .","Upon detection of a content-modifying operation on a file, stored search records corresponding to that file may be cleared (block ). For example, in one embodiment filter driver  may be configured to truncate negative stream  and positive stream  to zero length upon detecting a content-modifying operation, such as a file write operation, on corresponding file . In an alternative embodiment, it is contemplated that each stored search record may be examined, for example by filter driver , to assess its referential integrity following detection of a content-modifying operation. In such an embodiment, only those records whose integrity is affected by the content-modifying operation may be cleared.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
