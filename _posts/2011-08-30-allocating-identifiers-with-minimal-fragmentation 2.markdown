---
title: Allocating identifiers with minimal fragmentation
abstract: In certain embodiments, a system includes one or more memory units and one or more processing units. The memory units store blocks that each include a number of identifiers. The memory units include executable instructions that upon execution by the processing units cause the system to receive a request to allocate an identifier to an entity. The request includes data identifying the entity. A target block of identifiers is identified. The target block includes more unallocated identifiers than any other block. The target block is split into first and second blocks. The identifiers of the second block are each higher than any identifier of the first block. The second block is assigned to the entity, and a lowest identifier of the second block is allocated to the entity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09608930&OS=09608930&RS=09608930
owner: AMAZON TECHNOLOGIES, INC.
number: 09608930
owner_city: Seattle
owner_country: US
publication_date: 20110830
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["An organization may have control over allocation of a block of Internet Protocol addresses (or other identifiers). The organization may allocate these IP addresses to various entities, such as customers of the organization. Because the computing needs of an entity may change, the quantity of IP addresses allocated to that entity by the organization may vary over time. Eventually, as addresses are allocated and deallocated across the various entities, the IP addresses may become fragmented. That is, one or more of the IP addresses allocated to a particular entity may not be contiguous with other IP addresses allocated to that entity.","In certain embodiments, a request to allocate an identifier such as an Internet Protocol (IP) address is received. The request may comprise data that identifies an entity requesting allocation of the identifier. A target block of identifiers (such as a Classless Inter-Domain Routing (CIDR) block) from a number of blocks of identifiers may be selected. Each block may be assigned to a respective entity of a number of entities. The target block may comprise more unallocated identifiers than any of the other blocks. That is, it may be the block with the most consecutive identifiers that have not yet been allocated to an entity. The target block may be split into first and second blocks. In certain embodiments, each of the identifiers of the second block is higher than any identifier of the first block. The identifiers of the second block may be assigned to the entity and a lowest identifier of the second block may be allocated to the entity.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1","b":["100","100","100","100"]},"In the illustrated example, system  includes allocation server , network , programmable execution service , and entities . Allocation server  includes one or more processors , memory , and interface . Memory  may store IP address allocation logic  and IP address allocation table . IP address allocation table  may store various IP addresses that allocation server  may allocate to entities  using IP address allocation logic . These example elements of system  are described below in greater detail.","Each of allocation server , programmable execution service , and entities  may include one or more processing systems at one or more locations and may include any suitable combination of hardware, firmware, and software. Each processing system may include any appropriate input devices, output devices, mass storage media, processors, memory, or other suitable components for receiving, processing, storing, and communicating data. For example, each processing system may include a personal computer, workstation, network computer, kiosk, wireless data port, personal data assistant (PDA), one or more Internet Protocol (IP) telephones, one or more cellular\/smart phones one or more servers, a server pool, one or more processors within these or other devices, or any other suitable processing device. Each of allocation server , programmable execution service , and entities  may be a stand-alone computer or may be a part of a larger network of computers associated with an entity.","Programmable execution service  may provide resizable computing capacity to one or more of entities  and may facilitate requests for allocation of IP addresses (described below in further detail). In certain embodiments, programmable execution service  may provide a collection of remote computing services offered over a network (which may or may not be network ). Those computing services may include, for example, storage, compute processing, networking, power, applications, or any other suitable computing resources that may be made available over a network. In certain embodiments, an entity  accessing those computing services may gain access to a suite of elastic information technology (IT) infrastructure services as the entity  requests those services. Programmable execution service  may provide a scalable, reliable, and secure distributed computing infrastructure. For example, programmable execution service  may include various computing resources and may provide an environment in which one or more of the computing resources are made available over a communication network (e.g., network ) to one or more remote computer systems (e.g., entities  or other systems).","In certain embodiments, allocation server  may be operable to manage the allocation and deallocation of IP addresses among entities -. Entity  may be any anything capable of being assigned a group of IP addresses. For example, entity  may be an individual, a group of individuals, a business organization, a subunit of a business organization, a business project, a software application, one or more operating systems (e.g., a particular type of operating system), one or more computers (e.g., a particular type of computer), or other suitable unit. Assignment of a group (e.g., a block) of IP addresses to an entity  may comprise reserving the group of IP addresses for use by the entity . Allocation of an IP address to an entity  may comprise associating the IP address with the entity  and allowing the entity  to use the IP address. For example, an IP address may be allocated to a computing resource or other suitable processing element owned and\/or used by the entity . In some embodiments, one or more IP addresses may be allocated to one or more computing resources hosted by programmable execution service . For example, a web server or virtual private cloud hosted by programmable execution service  may be allocated one or more IP addresses. Deallocation of an IP address from an entity  may comprise disassociating the IP address with the entity  and freeing up the IP address for future allocation to the same or a different entity . In some embodiments, a deallocated IP address may be removed from a Domain Name System (DNS) lookup table.","In some embodiments, allocation server  may perform allocation of IP addresses on behalf of an organization that controls a plurality of IP addresses received from an Internet registry. As just one example, the organization could be the owner and\/or operator of allocation server  (and\/or programmable execution service ) and the one or more entities  may be customers of the organization. Allocation server  may include one or more processors  and one or more memory units , referred to for simplicity primarily in the singular as processor  and memory . Processor  may include one or more microprocessors, controllers, or any other suitable computing devices or resources. Processor  may work, either alone or with other components of system , to provide a portion or all of the functionality of its associated computer system described herein. Memory  may take the form of any suitable combination of volatile and non-volatile memory including, without limitation, magnetic media, optical media, read-access memory (RAM), read-only memory (ROM), removable media, or any other suitable memory component.","IP address allocation logic  may include logic for assigning groups (e.g., blocks) of IP addresses to entities -and allocating IP addresses to entities -. In certain embodiments, IP address allocation logic  may access IP address allocation table  when performing the assignment and allocation of IP addresses. In some embodiments, IP address allocation logic  may communicate its assignments and allocation of IP addresses to IP address allocation table  for storage therein. In general, IP address allocation logic  may be effectuated by any suitable combination of hardware, software, and\/or firmware.","IP address allocation table  may store the IP addresses that allocation server  may allocate to entities -using IP address allocation logic . IP address allocation table  may also store various assignments of groups of IP addresses to entities -and allocation of IP addresses to entities -. IP address allocation table  may store the IP addresses, assignments, and allocations in any suitable data structure, such as a table. In general, IP address allocation table  may be effectuated by any suitable combination of hardware, software, and\/or firmware.","Interface  may be used for the communication of signaling and\/or data between allocation server  and one or more networks (such as network ), programmable execution service  (or a component therein), and\/or entities -. For example, interface  may perform any formatting or translating that may be needed to allow allocation server  to send and receive data to and from one or more networks (such network ), programmable execution service  (or a component therein), and\/or entities -over a wired or wireless connection. Interface  may also be used to establish any wired or wireless connections between allocation server  and one or more networks (such as network ), programmable execution service  (or a component therein), and\/or entities -. In a particular embodiment, interface  may be coupled to a web server configured to receive web Application Programming Interface (API) calls from clients and\/or requests for web pages that enable entities  to request IP addresses.","Various entities -may request allocation of one or more IP addresses from allocation server . These requests may be direct or indirect requests for IP addresses. For example, a direct request may ask for a certain number of IP addresses while an indirect request may request use of one or more computing resources associated with allocation server  (such as one or more resources of programmable execution service ) that utilize one or more IP addresses. In some embodiments, an indirect request by an entity  may result in a request by programmable execution service  on behalf of entity  for allocation of one or more IP addresses. For example, programmable execution service  may determine based on a request for computing resources and\/or recent computing resource usage by a particular entity  that the entity  needs more IP addresses. Programmable execution service  may then send an appropriate request to allocation server . Allocation server  may fill these requests by allocating one or more IP addresses to each requesting entity  and storing the IP address assignments in IP address allocation table , described below.","Over time, the computing needs of the various entities -may change. Accordingly, the entities -may send various requests (direct or indirect) seeking allocation or deallocation of IP addresses over time. As allocation server  fills these requests, the IP addresses allocated to the entities -may become fragmented. That is, the IP addresses allocated to a particular entity  may not be contiguous and\/or aggregatable (e.g., drawn from the same CIDR block). In certain embodiments, a first IP address is contiguous with a second IP address if the binary value of the first IP address is one less or one more than the binary value of the second IP address. For example, in IP version 4 (IPv4), the IP address 0.0.0.255 is contiguous with the IP addresses 0.0.0.254 and 0.0.1.0. A CIDR block is a group of IP addresses defined by a starting (e.g., lowest) IP address and a bit-length prefix \u201cN.\u201d The bit-length prefix N specifies the number of leading bits (starting with the leftmost bit) that are common in the binary representation of the IP addresses of the respective CIDR block. In IPv4, for example, the number of IP addresses in a CIDR block is 2^(32-N). A CIDR block is often expressed as the starting IP address, a slash, and the bit-length prefix. For example, in IPv4, a CIDR block expressed as 10.0.0.0\/30 would include the IP addresses 10.0.0.0, 10.0.0.1, 10.0.0.2, and 10.0.0.3. The leading 30 (i.e., the bit-length prefix) bits of the binary representation of these IP addresses is the same. The size of a CIDR block is sometimes referred to as a \/N. Thus, a single IP address in IPv4 may be referred to as a \/32 and a block of 256 addresses may be referred to as a \/24.","Avoiding fragmentation of the IP addresses allocated to an entity  across several CIDR blocks may be difficult in a dynamic environment where IP addresses are frequently allocated and deallocated in a limited address space (e.g., a set of available IP addresses). In certain embodiments, system  implements IP address allocation techniques designed to minimize fragmentation of IP addresses in a dynamic allocation environment. In some embodiments, allocation server  is operable to implement a method that minimizes fragmentation of the IP addresses it allocates to entities .","System  provides just one example of an environment in which the IP address allocation techniques of the present disclosure may be used. The present disclosure contemplates use of the IP address allocation techniques in any suitable computing environment. Additionally, although functionality is described as being performed by certain components of system , the present disclosure contemplates other components performing that functionality. As just one example, functionality described with reference to allocation server  may be performed by one or more components of programmable execution service . Furthermore, although certain components are illustrated as being combined or separate, the present disclosure contemplates separating and\/or combining components of system  in any suitable manner. As just one example, allocation server  and programmable execution service  may be combined in a suitable manner.","Certain embodiments of the present disclosure may provide some, none, or all of the following technical advantages. For example, certain embodiments allocate IP addresses using techniques that minimize fragmentation of the IP addresses. The capability to express the IP addresses allocated to each entity  as contiguous IP addresses in as few CIDR blocks as possible may be advantageous. For example, this may enable an entity  to reference a relatively small set of CIDR blocks for firewall rules related to the IP addresses of the entity . As another example, protecting an entity  from denial of service (DoS) attacks may be relatively easier if the IP addresses of the entity  can be referenced using a small set of CIDR blocks. As another example, external parties that want to block access to a particular entity  may be able to block a small set of CIDR blocks that are stable, rather than several \/32s that change over time.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2","FIG. 3"],"b":["218","100","218","1","5","1","5","112","1","5","112","204","211","218","206","207","208","210","218","220","222","224","226","228","230","232","234"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3","FIG. 1"],"b":["300","100"]},"The method begins at operation . At operation , a request for allocation of an IP address is received. For example, allocation server  may receive a request for allocation of an IP address from entity  or programmable execution service . At operation , it is determined whether the requesting entity  is currently assigned one or more blocks of IP addresses. For example, IP address allocation logic  of allocation server  may access IP address allocation table  to determine whether the requesting entity  is currently assigned at least one block of IP addresses. If the requesting entity has not been assigned one or more blocks of IP addresses, the method moves to operation .","At operation , a target block is identified. For example, IP address allocation logic  may access IP address allocation table  and identify a target block of IP addresses stored therein. In some embodiments, a target block is a block derived from an initial block and that includes more contiguous unallocated IP addresses than any other block derived from the initial block. A block is derived from the initial block if the block is smaller than the initial block and all of the IP addresses of the block are also included in the initial block. In certain embodiments, a block will not be considered for the selection of a target block if over half of the IP addresses in the block have already been allocated to an entity .","At operation , the target block is split into two smaller blocks (an upper block and a lower block). For example, IP address allocation logic  may determine the boundaries of the upper block and lower block and communicate these boundaries to IP address allocation table  for storage therein. The boundaries of the two smaller blocks may be determined using any suitable method. In some embodiments, the two smaller blocks may be split along CIDR boundaries. For example, one smaller block may be a fraction of the size of the target block, where the denominator of the fraction is a power of two, and the other smaller block may comprise the remainder of the target block. In some embodiments, at least one of the smaller blocks may be expressed as a single CIDR block. In some embodiments, the two smaller blocks may have an equal size (i.e., they may each have the same number of IP addresses). In some embodiments, the sizes of the two smaller blocks may be determined using a heuristic method. For example, the sizes of the two smaller blocks may be determined according to one or more parameters, such as a past IP address usage history of one or both of the entities to which the smaller blocks are being assigned, the number of blocks and\/or IP addresses available for assignment and\/or allocation, information included in the request for allocation of the IP address (e.g., a request to reserve a particular number of IP addresses for the entity), or any other suitable parameter or combination of parameters.","In some embodiments, each smaller block includes a set of contiguous IP addresses. The IP addresses of the lower block are each lower than any address of the upper block. A first IP address is lower than a second IP address if the binary value of the first IP address is less than the binary value of the second IP address. Similarly, a first IP address is higher than a second IP address if the binary value of the first IP address is greater than the binary value of the second IP address. As an example, IP address 0.0.1.0 is lower than 0.1.0.0 and higher than 0.0.0.1.","At operation , the upper block of the split blocks is assigned to the requesting entity  and the lower block is assigned to the same entity  that the target block was previously assigned to (because it already has IP addresses allocated within the lower block). For example, IP address allocation logic  may assign the upper block to the particular requesting entity  and communicate this assignment to IP address allocation table  for storage therein. In some embodiments, IP address allocation logic  may also indicate to the IP address allocation table  that the lower block should be assigned to the same entity  that the target block was assigned to.","At operation , an IP address from a block assigned to the requesting entity  is allocated to the requesting entity . For example, IP address allocation logic  may access one or more blocks assigned to the requesting entity  via IP address allocation table , determine which IP address should be allocated to the entity , allocate the IP address to the entity , and communicate this allocation to IP address allocation table  for storage therein. In certain embodiments, the lowest unallocated IP address of a block assigned to the requesting entity  is allocated to the requesting entity . In some embodiments, the lowest unallocated IP address of the largest block of multiple blocks assigned to the entity  is allocated to the entity . This method of allocation may result in a fewer number of larger blocks being assigned to an entity , which may result in more blocks and larger blocks that are available to be split. If a request seeks allocation of multiple IP addresses, the IP addresses may each be allocated at operation , starting with the lowest available IP address of the appropriate block, then the next lowest available IP address of the block, and so on. If a request from an entity  asks for a number of IP addresses that exceeds the number of available IP addresses in the block assigned to the entity , a new block may be allocated to the entity  (described in more detail below in conjunction with operation ). The method ends at operation . One or more operations of method  may be performed again when an additional request is received from an entity .","If a request for allocation of an IP address is received at operation  and it is determined that the requesting entity  has been assigned one or more blocks of IP addresses, the method moves to operation . For example, IP address allocation logic  may access IP address allocation table  and determine that the requesting entity  has already been assigned at least one IP address block. At operation  it is determined whether there is at least one unallocated IP address in any block assigned to the requesting entity. For example, IP address allocation logic  may access one or more blocks assigned to the requesting entity  that are stored in IP address allocation table  and determine whether these blocks include at least one unallocated IP address. If the requesting entity  does not have any unallocated IP addresses available, the method moves to operation , otherwise the method proceeds to operation .","At operation , a new block is identified and assigned to the requesting entity. For example, IP address allocation logic  may access IP address allocation table , identify a new block of IP addresses, assign the block to the requesting entity , and communicate this assignment to the IP address allocation  for storage therein. In certain embodiments, the new block is at least as big as the largest block (i.e., the block with the most IP addresses) assigned to the requesting entity . In some embodiments, the new block comes from a reserved address space that does not overlap with the initial block. A reserved address space may comprise one or more blocks that are not subject to splitting or are split only under special circumstances. For example, a block may be marked such that it cannot be split into blocks smaller than a certain size (such as a \/24 CIDR block). As another example, a block may be split in order to provide a block to an entity  that has filled up an existing block but not to provide a block to an entity  that has not been assigned a block yet. In some embodiments, blocks of the reserved address space may be assigned to an entity  in response to a determination of a preferred block size for the entity . For example, a new entity  may request a \/23 block and the block may be assigned to the new entity  without performance of one or more operations of method .","The allocation of IP addresses depicted in  will now be described in conjunction with the method for allocating IP addresses depicted in . Allocation server  may control allocation of the IP addresses of an initial block . A block of is a plurality of contiguous IP addresses. Some blocks may be CIDR blocks (each block of  is labeled with its CIDR denotation). For example, initial block  is a CIDR block expressed as 10.0.0.0\/28. The numerals depicted in each box of block  correspond to the decimal value of the last (rightmost) octet in an IPv4 address. Thus, the box containing numeral 0 in block  corresponds to the address 10.0.0.0 and the box containing numeral 15 corresponds to the address 10.0.0.15.","In sequence , block  is not assigned and its constituent IP addresses are unallocated. The first entity  to request allocation of an IP address may be assigned the entire initial block . For example, E (i.e., entity one) requests allocation of an IP address from allocation server . Since E is the first entity  to request an IP address, the entire block  is assigned to E. After the assignment, the lowest IP address of block  (10.0.0.0) is allocated to E (allocated blocks in  are depicted by diagonal shading). The result is shown in sequence .","Various operations of method  of  may be performed as additional requests for IP addresses are received from the various entities E-E. The method begins at operation . At operation , allocation server  receives a request for allocation of an IP address from a requesting entity . For example, E may submit a request for an IP address.","At operation , allocation server  determines whether the requesting entity  is currently assigned one or more blocks of IP addresses by the allocation server. In some embodiments, allocation server  may examine IP address allocation table  to determine whether the requesting entity  has been assigned at least one block. As an example, when E submits a request for an IP address, allocation server  may determine that E has not yet been assigned a block.","The method will then move to operation . At operation , a target block is identified. At operation , the target block is split into two smaller blocks (an upper block and a lower block). Each smaller block includes a set of contiguous IP addresses. The IP addresses of the lower block are each lower than any address of the upper block. In sequence , only one block exists. Accordingly, block  is the target block and it is split into two blocks  and . At operation , the upper block of the split blocks is assigned to the requesting entity  and the lower block is assigned to the same entity  that the target block was previously assigned to. As an example, block  is assigned to the requesting entity E and block  is assigned to E.","At operation , an IP address from a block assigned to the requesting entity  is allocated to the requesting entity  by allocation server . As an example of operation , the lowest unallocated IP address (i.e., 10.0.0.8) of block  assigned to E is allocated to E. The result is shown in sequence . The method ends at operation .","One or more operations of method  may be performed again when an additional request is received from an entity . For example, E may request allocation of an IP address and the request is received by allocation server  at operation . At operation , allocation server determines that there are no blocks assigned to E. At operation , the existing blocks  and  are examined to determine a target block with the most contiguous unallocated IP addresses. Because blocks  and  each have seven unallocated IP addresses, either block may be chosen. Block  is chosen and split into lower block  and upper block . At operation , lower block  is assigned to E and upper block  is assigned to E. The lowest IP address of block  is allocated to E at operation . The result is shown in sequence .","Allocation server  then receives a request for an IP address from E at operation . At operation , the allocation server determines that there are no blocks assigned to E. At operation , block  is identified as the target block because it has more contiguous unallocated IP addresses than blocks  and . Block  is split into two equal size blocks  and . At operation , block  is assigned to E and block  is assigned to E. The lowest IP address of block  is allocated to E at operation . The result is shown in sequence .","After sequence , E requests one IP address, E requests three IP addresses, and E requests one IP address. In each case, at operations  and  of method , it will be determined that at least one block is already assigned to each respective requesting entity  and that each block includes at least one unallocated IP address. In each case, at operation , an IP address from the block assigned to the requesting entity  is allocated to the requesting entity . As depicted, the lowest unallocated IP address(es) of each block is assigned to the respective requesting entity . The results of the fulfillment of the requests from E, E, and E are shown in sequence .","Allocation server  then receives a request for an IP address from new entity E at operation . At operation , it is determined that no blocks have been assigned to E. At operation , the blocks are examined to determine which block has the most contiguous unallocated IP addresses. Block  is identified and split into lower block  and upper block . At operation , block  is assigned to E and block  is assigned to E. At operation , the lowest unallocated IP address of block  is allocated to E. The result is shown in sequence .","Allocation server  then receives an additional request for allocation of an IP address from E at operation . At operation , it is determined that E has been assigned at least one block of IP addresses. At operation , allocation server  determines whether there is at least one unallocated IP address in any block assigned to the requesting entity . Block  is the only block assigned to E and it does not have any unallocated IP addresses available, so the method moves to operation .","At operation , a new block is identified and assigned to the requesting entity . As an example of operation , a new block  is assigned to the requesting entity E. The new block  is from an address space that does not overlap with the initial block . In some embodiments, one or more of the unallocated IP addresses of the additional block may be constructively allocated (i.e., marked as allocated) when the block is assigned to the requesting entity . This may be done before the entity  requests allocation of the IP addresses. This will make the new block less likely to be chosen as a target block for splitting when a new entity  requests allocation of an IP address. As an example, one of the addresses of block  may be allocated to E and two of the addresses may be constructively allocated (depicted by horizontal shading). The result is shown in sequence . After sequence , if a request for an IP address is received from a new entity , block  will not be chosen for splitting even though it has the highest number of actual unallocated blocks because it will be treated as having only one unallocated block.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 1"],"b":["400","100","402","404","112","104","112","104","112","108","108","112","112","112","108","112","112"]},"At operation , one or more blocks of IP addresses assigned to entity  are identified. At operation , allocation server  determines the smallest block (i.e., the block with the least amount of IP addresses) of the one or more blocks of IP addresses assigned to entity . At operation , a particular IP address of the smallest block is identified. The IP address may be any suitable IP address of the smallest block. In some embodiments, the IP address is the highest allocated IP address of the smallest block. At operation , entity  is notified that the particular IP address will be deallocated. This operation gives the entity  time to adjust to the deallocation and\/or notify third parties of the change in the IP addresses that are allocated to the entity  before the IP address is deallocated. At operation , allocation server  deallocates the particular IP address. If the IP address deallocated is the last allocated address in its respective block, the block is no longer assigned to entity  and becomes available for future assignment to an entity . This may result in each entity  being assigned a fewer number of larger blocks, thus minimizing fragmentation of the IP addresses allocated to an entity . The method ends at step .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 5","FIG. 1"],"b":["500","100","502","504","506","402","404","406","400","508","104","112","510","512","514","516","412","414","416","400"]},"In certain embodiments, allocation server  is operable to query IP address allocation table  to determine a list of CIDR blocks that include all of the IP addresses allocated by allocation server  to a particular entity . In some embodiments, the list of CIDR blocks is the shortest list of CIDR blocks that include all of the IP addresses allocated to the particular entity  and that do not include IP addresses allocated to other entities. In some embodiments, this information may be provided through an application programming interface (API). In certain embodiments, the API is publicly available so that anyone may query for a list of CIDR blocks assigned to the particular entity .","In some embodiments, allocation server  controls the allocation of IP addresses to various entities  that utilize programmable execution service . An entity  may be identified by data included in a request for allocation or deallocation of one or more IP addresses. Data may indicate the identity of an entity  in any suitable way. For example, an entity  that is a customer may be identified by data comprising a customer name or customer number.","In some embodiments entities  are customers of a programmable execution service  that provides resizable compute capacity to a plurality of customers. The programmable execution service  and allocation server  may be owned and\/or controlled by a vendor that is distinct from the customers of the programmable execution service. In some embodiments, an entity  may specify its particular computing needs to programmable execution service  and the programmable execution service  may determine how many IP addresses will be allocated to meet those computing needs. Allocation server  may then allocate an appropriate number of IP addresses.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 6","FIG. 1"],"b":["600","100","600","600","104","108","112","600"]},"Computer system  may have one or more input devices  (which may include a keypad, keyboard, mouse, stylus, or other input devices), one or more output devices  (which may include one or more displays, one or more speakers, one or more printers, or other output devices), one or more storage devices , and one or more storage media . An input device  may be external or internal to computer system . An output device  may be external or internal to computer system . A storage device  may be external or internal to computer system . A storage medium  may be external or internal to computer system .","System bus  couples subsystems of computer system  to each other. Herein, reference to a bus encompasses one or more digital signal lines serving a common function. The present disclosure contemplates any suitable system bus  including any suitable bus structures (such as one or more memory buses, one or more peripheral buses, one or more a local buses, or a combination of the foregoing) having any suitable bus architectures. Example bus architectures include, but are not limited to, Industry Standard Architecture (ISA) bus, Enhanced ISA (EISA) bus, Micro Channel Architecture (MCA) bus, Video Electronics Standards Association local (VLB) bus, Peripheral Component Interconnect (PCI) bus, PCI-Express bus (PCI-X), and Accelerated Graphics Port (AGP) bus.","Computer system  includes one or more processors  (or central processing units (CPUs)). A processor  may contain a cache  for temporary local storage of instructions, data, or computer addresses. Processors  are coupled to one or more storage devices, including memory . Memory  may include RAM  and ROM . Data and instructions may transfer bi-directionally between processors  and RAM . Data and instructions may transfer uni-directionally to processors  from ROM . RAM  and ROM  may include any suitable computer-readable storage media.","Computer system  includes fixed storage  coupled bi-directionally to processors . Fixed storage  may be coupled to processors  via storage control unit . Fixed storage  may provide additional data storage capacity and may include any suitable computer-readable storage media. Fixed storage  may store an operating system (OS) , one or more executables (EXECs) , one or more applications or programs , data  and the like. Fixed storage  is typically a secondary storage medium (such as a hard disk) that is slower than primary storage. In appropriate cases, the information stored by fixed storage  may be incorporated as virtual memory into memory . In certain embodiments, fixed storage  may include network resources, such as one or more storage area networks (SAN) or network-attached storage (NAS).","Processors  may be coupled to a variety of interfaces, such as, for example, graphics control , video interface , input interface , output interface , and storage interface , which in turn may be respectively coupled to appropriate devices. Example input or output devices include, but are not limited to, video displays, track balls, mice, keyboards, microphones, touch-sensitive displays, transducer card readers, magnetic or paper tape readers, tablets, styli, voice or handwriting recognizers, biometrics readers, or computer systems. Network interface  may couple processors  to another computer system or to network . Network interface  may include wired, wireless, or any combination of wired and wireless components. Such components may include wired network cards, wireless network cards, radios, antennas, cables, or any other appropriate components. With network interface , processors  may receive or send information from or to network  in the course of performing operations of certain embodiments. Certain embodiments may execute solely on processors . Certain embodiments may execute on processors  and on one or more remote processors operating together.","In a network environment, where computer system  is connected to network , computer system  may communicate with other devices connected to network . Computer system  may communicate with network  via network interface . For example, computer system  may receive information (such as a request or a response from another device) from network  in the form of one or more incoming packets at network interface  and memory  may store the incoming packets for subsequent processing. Computer system  may send information (such as a request or a response to another device) to network  in the form of one or more outgoing packets from network interface , which memory  may store prior to being sent. Processors  may access an incoming or outgoing packet in memory  to process it, according to particular needs.","Certain embodiments involve one or more computer-storage products that include one or more tangible, computer-readable storage media that embody software for performing one or more operations of one or more processes described or illustrated herein. In certain embodiments, one or more portions of the media, the software, or both may be designed and manufactured specifically to perform one or more operations of one or more processes described or illustrated herein. Additionally or alternatively, one or more portions of the media, the software, or both may be generally available without design or manufacture specific to processes described or illustrated herein. Example computer-readable storage media include, but are not limited to, CDs (such as CD-ROMs), FPGAs, floppy disks, optical disks, hard disks, holographic storage devices, ICs (such as ASICs), magnetic tape, caches, PLDs, RAM devices, ROM devices, semiconductor memory devices, and other suitable computer-readable storage media. In certain embodiments, software may be machine code which a compiler may generate or one or more files containing higher-level code which a computer may execute using an interpreter.","As an example and not by way of limitation, memory  may include one or more tangible, computer-readable storage media embodying software and computer system  may provide particular functionality described or illustrated herein as a result of processors  executing the software. Memory  may store and processors  may execute the software. Memory  may read the software from the computer-readable storage media in mass storage device  embodying the software or from one or more other sources via network interface . When executing the software, processors  may perform one or more operations of one or more processes described or illustrated herein, which may include defining one or more data structures for storage in memory  and modifying one or more of the data structures as directed by one or more portions the software, according to particular needs.","In certain embodiments, the described processing and memory elements (such as processors  and memory ) may be distributed across multiple devices such that the operations performed utilizing these elements may also be distributed across multiple devices. For example, software operated utilizing these elements may be run across multiple computers that contain these processing and memory elements. Other variations aside from the stated example are contemplated involving the use of distributed computing.","In addition or as an alternative, computer system  may provide particular functionality described or illustrated herein as a result of logic hardwired or otherwise embodied in a circuit, which may operate in place of or together with software to perform one or more operations of one or more processes described or illustrated herein. The present disclosure encompasses any suitable combination of hardware and software, according to particular needs.","Although the present disclosure describes or illustrates particular operations as occurring in a particular order, the present disclosure contemplates any suitable operations occurring in any suitable order. Moreover, the present disclosure contemplates any suitable operations being repeated one or more times in any suitable order. Although the present disclosure describes or illustrates particular operations as occurring in sequence, the present disclosure contemplates any suitable operations occurring at substantially the same time, where appropriate. Any suitable operation or sequence of operations described or illustrated herein may be interrupted, suspended, or otherwise controlled by another process, such as an operating system or kernel, where appropriate. The acts can operate in an operating system environment or as stand-alone routines occupying all or a substantial part of the system processing.","Although the present disclosure has been described with several embodiments, diverse changes, substitutions, variations, alterations, and modifications may be suggested to one skilled in the art, and it is intended that the disclosure encompass all such changes, substitutions, variations, alterations, and modifications as fall within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0004","num":"0003"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 6","FIG. 1"]}]},"DETDESC":[{},{}]}
