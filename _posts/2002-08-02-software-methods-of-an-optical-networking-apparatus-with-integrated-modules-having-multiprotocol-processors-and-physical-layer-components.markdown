---
title: Software methods of an optical networking apparatus with integrated modules having multi-protocol processors and physical layer components
abstract: A unified API is provided to an optical networking apparatus to facilitate uniform access, control or interaction with its multi-protocol optical networking modules (MPONM) by its applications. Each of the MPONM has a multi-protocol processor with a number of function blocks and physical layer components. Corresponding service routines are provided for the function blocks and the physical layer. Functions of the function block/physical layer service routines are externalized through the same unified API, thereby enabling accesses and interactions with physical layer components of a MPONM to be conducted in the same high level manner as accesses and interactions with function blocks of the multi-protocol processor of the MPONM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07907607&OS=07907607&RS=07907607
owner: Null Networks LLC
number: 07907607
owner_city: Las Vegas
owner_country: US
publication_date: 20020802
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Terminology","Section Headings, Order of Descriptions and Embodiments","OVERVIEW","Networking Applications","Module Data Structure","Module Initialization Function","Physical Layer Architecture, Transactions and Transaction Flow","Example Operation of a Physical Layer Service Routine","CONCLUSION AND EPILOGUE"],"p":["The present invention relates to software methods and networking apparatuses. More specifically, the present invention relates to software methods to provide uniform access, control and\/or interaction with function blocks of multi-protocol processors and physical layer components of multi-protocol optical networking modules (MPONM) in an optical networking apparatus.","With advances in integrated circuit, microprocessor, networking and communication technologies, an increasing number of devices, in particular, digital computing devices, are being networked together. Devices are often first coupled to a local area network, such as an Ethernet based office\/home network. In turn, the local area networks are interconnected together through wide area networks, such as SONET networks, ATM networks, Frame Relays, and the like. Of particular importance is the TCP\/IP based global inter-network, the Internet. Historically, data communication protocols specified the requirements of local\/regional area networks, whereas telecommunication protocols specified the requirements of the regional\/wide area networks. The rapid growth of the Internet has fueled a convergence of data communication (datacom) and telecommunication (telecom) protocols and requirements. It is increasingly important that data traffic be carried efficiently across local, regional, as well as wide area networks.","As a result of this trend of increased connectivity, an increasing number of applications that are network dependent are being deployed. Examples of these network dependent applications include but are not limited to, the world wide web, email, Internet based telephony, and various types of e-commerce and enterprise applications. The success of many content\/service providers as well as commerce sites depend on high speed delivery of a large volume of data across wide areas. As a result, high speed data trafficking devices, such as high speed optical, or optical-electro routers, switches and so forth, are needed.","Unfortunately, because of the multiplicity of protocols, including datacom and telecom protocols, that may be employed to traffic data in the various types of networks, designers and developers of networking components and equipment, such as line cards, routers and switchers, have to wrestle with a multitude of prior art protocol processors. Each of these protocol processors is typically dedicated to the support of either local\/regional or regional\/wide area protocols, in their designs of these components\/equipment. This burden is costly, and slows down the advancement of high speed networks.","U.S. patent application Ser. Nos. 09\/860,207 and 09\/861,002, both filed on May 18, 2001, entitled \u201cA MULTI-PROTOCOL NETWORKING PROCESSOR WITH DATA TRAFFIC SUPPORT SPANNING LOCAL, REGIONAL AND WIDE AREA\u201d, and \u201cAN OPTICAL NETWORKING MODULE INCLUDING PROTOCOL PROCESSING AND UNIFIED SOFTWARE CONTROL\u201d respectively, disclosed a novel highly flexible multi-protocol processor capable of supporting high-speed data traffic in local, regional, and wide area networks, and a multi-protocol optical networking module that can be constructed from such a multi-protocol processor. Resultantly, sophisticated optical-electrical networking apparatuses such as optical-electrical routers and switches may be built more efficiently with multiple ones of the disclosed multi-protocol optical networking module (each having its own multi-protocol processor and physical layer components).","In turn, the task for developing networking applications for such sophisticated optical-electrical networking apparatus with multiple ones of the disclosed multi-protocol optical networking module (each having its own multi-protocol processor and physical layer components) have become much more difficult. In particularly, conventionally, interactions with the multi-protocol processors and the physical layer components are made through interfaces that are very dissimilar. The later is typically at a lower bits and bytes level, while the former is at a higher variable or symbolic level.","Accordingly, a software architecture, including methods, that reduces the complexity and improves the ease for developing networking applications for such complex networking apparatuses with multiple ones of the disclosed multi-protocol optical networking module (each having its own integrated multi-protocol processor and physical layer components) is desired.","The present invention includes software methods, in particular, an application programming interface (API) for networking applications to interact with function blocks of multi-protocol processors and physical layer components of MPONM of an optical-electrical networking apparatus.","In the following description, various aspects of the present invention will be described. However, it will be apparent to those skilled in the art that the present invention may be practiced with only some or all aspects of the present invention. For purposes of explanation, specific numbers, materials and configurations are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that the present invention may be practiced without the specific details. In other instances, well-known features are omitted or simplified in order not to obscure the present invention.","Parts of the description will be presented in data processing terms, such as data, variables, methods, request, return, and so forth, consistent with the manner commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. As well understood by those skilled in the art, these quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, and otherwise manipulated through electrical and\/or optical components of a processor and its subsystems.","Part of the descriptions will be described using networking terms, including but are not limited to:",{"@attributes":{"id":"p-0021","num":"0020"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Egress","Outgoing data path from the system to the network"]},{"entry":[{},"HDLC","High-Level Data Link Control. A communication"]},{"entry":[{},{},"protocol used in Packet Over SONET switching"]},{"entry":[{},{},"network."]},{"entry":[{},"Ingress","Incoming data path from the network to the system"]},{"entry":[{},"IP","Internet Protocol"]},{"entry":[{},"LAN","Local Area Network"]},{"entry":[{},"MAC","Media Access Control layer, defined for Ethernet"]},{"entry":[{},{},"systems"]},{"entry":[{},"POS","Packet Over SONET"]},{"entry":[{},"PPP","Point to Point Protocol"]},{"entry":[{},"SONET","Synchronous Optical NETwork, a PHY"]},{"entry":[{},{},"telecommunication protocol"]},{"entry":[{},"WAN","Wide Area Network"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The term \u201cphysical layer components\u201d refer to the electro optical components of a MPONM. Examples of such physical layer components include, but are not limited to, laser diodes, temperature sensors, analog-to-digital (A\/D) and digital-to-analog (D\/A) converters, clock sources, photo diodes, general purpose input\/output interface (GPIO), serial digital I\/O interfaces, and persistent storage units such as EEPROM (Electrically Erasable Programmable Read-Only-Memory).","Section headings are merely employed to improve readability, and they are not to be construed to restrict or narrow the present invention.","Various operations will be described as multiple discrete steps in turn, in a manner that is most helpful in understanding the present invention, however, the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular, these operations need not be performed in the order of presentation.","The phrase \u201cin one embodiment\u201d is used repeatedly. The phrase generally does not refer to the same embodiment, however, it may. The phrases \u201ccomprising\u201d, \u201cincluding\u201d, \u201chaving\u201d are synonymous, unless the context dictates otherwise.","Referring now to  and -, wherein three block diagrams illustrating an overview of the software method of the present invention, in accordance with one embodiment, including an optical-electrical networking apparatus having multiple MPONM within which the present invention may be practiced, is shown. As illustrated in , for the embodiment, optical networking apparatus  includes a number of MPONM -, a control processor , and memory , coupled to each other through system bus . As illustrated in more detail in , each of MPONM -includes at least one multi-protocol processor  having a number of function blocks, and physical layer components .","In various embodiments, the various MPONM -may be connected to system bus  in like or different manners. For examples, all MPONM -may be connected via corresponding serial or parallel interfaces, or some MPONM * are connected via corresponding serial interfaces, while others are connected via corresponding parallel or other bus interfaces.","Accordingly, for the embodiment, various device drivers  are provided to facilitate the various corresponding types of interfaces for connecting MPONM -to system bus . That is, a serial interface oriented device driver  is provided to facilitate connection of some or all of MPONM -via corresponding serial interfaces, a parallel interface oriented device driver  is provided to facilitate connection of some or all of MPONM -via corresponding parallel interfaces, and so forth.","As described earlier, MPONM * is the subject matter of the earlier identified co-pending '002 U.S. patent application, and multi-protocol processor  is the subject matter of the earlier identified '207 U.S. patent application. In one embodiment, the function blocks of multi-protocol processor  include a system interface block, a network interface block, a MAC block, an Ethernet 64\/66 coder, an Ethernet-Over-SONET coder block, a PPP protocol and HDLC processor block, a HDLC Packet Over SONET coder block, a SONET path processor block, a SONET section and line processor block, and a control interface (not separately shown). The various function blocks are selectively employed in combination to service data transmission and receipt in accordance with a selected one of a number of frame or packet based protocols, including non-synchronous packet based protocols, frame based protocols encapsulated within a synchronous protocol, as well as streaming and packet variants of the synchronous protocol. These protocols include at least one each a datacom and a telecom protocol.","Briefly, the system interface block is employed to facilitate input of egress data from the system and output of ingress data to the system from the MPONM. The MAC block is employed to perform data link sub-layer media access control processing on egress and ingress MAC data. The Ethernet 64\/66 coder and Ethernet-Over-SONET Coder blocks are provided to perform physical sub-layer 64\/66 and Ethernet-Over-SONET coding and decoding for the egress and ingress MAC data respectively.","The PPP\/HDLC processor block is employed to perform data link sub-layer point-to-point protocol and high level data link control processing on IP, PPP, and HDLC data. The PPP\/HDLC processor is employed to frame or de-frame IP and POS data, providing appropriate encapsulation or de-encapsulation, in accordance with PPP and HDLC. The HDLC POS coder block is provided to perform physical sub-layer Packet Over SONET coding and decoding for the egress and ingress HDLC data respectively.","The SONET path processor block is provided to perform path processing for \u201cpacketized\u201d SONET data and coded frame-based data, whereas the SONET section and line processor block is provided to perform section and line processing for \u201cpacketized\u201d as well as \u201cstreaming\u201d SONET data. The network interface block is provided to facilitate output of egress data and input of ingress data.","The control interface is employed to facilitate interaction between the multi-protocol processor and external devices.","In one embodiment, the physical layer components include a laser, a number A\/D and D\/A converters, photo diodes, temperature sensors, clock source, GPIO, serial digital I\/O interfaces and EEPROM. Each of these components is used to perform its conventional function known in the art.","Thus, if networking applications  are required to access, control or otherwise interact with each of these function blocks of each of the multi-protocol processors, and\/or physical layer components of the MPONM, directly and via different approaches, the complexity, if not prohibitive, is at least not very productive for the average software developers.","Further, in one embodiment, the EEPROM, in addition to its conventional role of storing operation parameters for various physical layer components, is advantageously employed as a persistent store for operational data of the various function blocks of the companion multi-protocol processor . Resultantly, the needs and frequencies for networking applications  to access the EEPROM are significantly higher than prior art arrangements, which in turn increases the need to improve the ease for networking applications  to access the physical layer components, in particular, the embedded EEPROM.","Accordingly, under the present invention, MPONM API  with externalized function block\/physical layer function calls, and function block\/physical layer service routines , are provided for interfacing with corresponding ones of the function blocks of the multi-protocol processors and the physical layer components of the MPONM *.","Further, as illustrated in these service routines , or more specifically, their externalized callable functions -, are accessed through unified MPONM API , thereby insulating networking applications  from the complexity of the function blocks of the multi-protocol processors and the physical layer components of the MPONM *.","For the embodiment, unified MPONM API  further includes at least a module initialization function (not separately shown), to be described in more detail below.","Moreover, because MPONM API  is a unified API for accessing and interacting with the function blocks of multi-protocol processor  as well as physical layer components  of the MPONM *, i.e. via the same higher symbolic level of interactions, accesses and interactions with physical layer components  of the MPONM * are further simplified for networking applications .","For the embodiment illustrated in , the externalized higher level function calls supported by the corresponding physical layer service routines  include, but are not limited to,\n\n","The term \u201cexternalized\u201d is used in the current context from the visibility perspective of networking applications  for ease of understanding. Such characterization has no significance as to the essence of the present invention.","Except for unified MPONM API , including the externalized physical layer related function calls and the module initialization function, the teachings of the present invention incorporated with function block\/physical layer service routines , and the manner networking applications  and function block\/physical layer service routines  cooperate with unified MPONM API , networking applications  and function block\/physical layer service routines  otherwise represent a broad range of such elements known in the art, and are typically application dependent. Accordingly, except for the manner networking applications  and function block\/physical layer service routines  cooperate with unified MPONM API , these elements will not be otherwise further described.","[The asterisk at the end of a reference number denotes a \u201cwild card\u201d, representing any of the trailing suffixes of the reference numbers employed in a figure. For example, * stands for , or any one of the other  references of FIG. .]",{"@attributes":{"id":"p-0045","num":"0050"},"figref":["FIGS. 2","FIG. 2"],"i":["a","b ","a"],"b":["2","112","114","112","112","114","106","202"]},"In one embodiment, networking application  identifies the particular MPONM * by providing the \u201chandle\u201d of the device driver  handling the connecting interface through which the particular MPONM * is connected to bus , and if applicable, information (such as memory mapped addresses, port numbers and so forth) associated with how the particular MPONM * is mapped on the connecting interface.","As will be described in more detail below, in response, the module initialization function of unified MPONM API , in conjunction with the function block\/physical layer service routines , advantageously creates an instance of a MPONM structure  for the desired MPONM * to be initialized (if the module data structure  has not been previously created for the MPONM *) to facilitate subsequent access, control and\/or interaction with the MPOMN * by networking applications . As part of the process, a handle to the module data structure  for the MPONM * is returned. More specifically, in one embodiment, the \u201chandle\u201d is a pointer to the data structure  of the MPONM *.","Thus, as illustrated, networking application  saves the returned handle (or pointer) to the module data structure  for the MPONM , upon receipt of the handle (or pointer) from the initialization function of unified MPONM API .","Thereafter, networking application  determines if another MPONM  is to be initialized, block . If so, operations - are repeated; else the initialization process for networking application  continues and proceeds to completion.","In other embodiments, the module initialization function may support each initialization request requesting initialization of one or more desired MPONM * instead. For these embodiments, more than one desired MPONM * may be specified in a single request, with the request returning multiple corresponding handles (or pointers) for the successfully initialized ones of the requested MPONM *.","As illustrated in , upon having a need to request a service or having an operation performed in a function block\/physical layer of a MPONM *, networking application  retrieves the handle (or pointer) to the module data structure  of the MPONM *, block , formats, and submits the request to an appropriate one of the functions of service routines  externalized through unified MPONM API . Thus, each request is directed towards a function block or the physical layer, within which the requested operation is to be performed. However, the implicit reference to a function block or the physical layer is not particularized to a MPONM *; and neither is an identification of the MPONM * provided. Instead, the MPONM * within which an identified function block or physical layer the requested operation is to be performed is implicitly identified. More specifically, for efficiency of operation, the handle (or pointer) of the module data structure  of the MPONM  is provided.","As those skilled in the art would appreciate, the implicit reference through the handle or pointer of the module data structure  of the MPONM * of interest, improves the ease of the use for the software developers of networking applications , who are more used to working with handles\/pointers, as opposed to having to be cognizant of specific hardware modules, and hardware details, including the details of the connection interfaces through which the MPONM * are correspondingly connected.","Further, as will be described in more detail below, whether the access, control or interaction is made with a function block of the multi-protocol processor  or one or more components of the physical layer  of a MPONM *, networking application  may request the operation to be performed in the same manner, i.e. by invoking an externalized function of unified MPONM API .","Resultantly, the complexity for developing networking applications  that involve access, control and\/or otherwise interact with physical layer components  of a MPONM * is significantly reduced.",{"@attributes":{"id":"p-0055","num":"0060"},"figref":"FIG. 3","b":["118","118","106"]},"As illustrated, each data structure  includes a root object  and cross function block\/physical layer objects * having cross function block\/physical layer shared data variables. Examples of data included in root object  include but are not limited to data and\/or pointers employed in interacting with the appropriate device driver  for the particular MPONM *. Examples of such cross function\/physical layer shared data block variables include a module identifier, registers for putting data into and getting data out of selected ones of the function blocks\/physical layer of the MPONM *.","Additionally, each module data structure  includes a number of \u201canchor\u201d data objects *, one each for the function blocks\/physical layer supported. \u201cAnchor\u201d data objects * may include a number of function block\/physical layer specific control data variables. Examples of such function block\/physical layer specific control data variables include status variables denoting e.g. whether the corresponding function block\/physical layer service routine  was successful in performing certain requested operations, and data structure that serves as an index into the contents of an EEPROM of the physical layer components.","Further, attached with each \u201canchor\u201d data objects * of the function blocks\/physical layer are function block\/physical layer specific data objects *, having function block\/physical layer specific operational data variables. Examples of such function block\/physical layer specific operational data variables include, but are not limited to, bit masks, data rates, filter criteria, transmit (TX) and receive (RX) optical power, TX laser bias current, TX laser modulation current, TX laser temperature, laser on\/off state, and so forth.","In alternate embodiments, the present invention may be practiced using other data organization approaches.",{"@attributes":{"id":"p-0060","num":"0065"},"figref":"FIG. 4","b":"114"},"As illustrated, for the embodiment, upon receipt of a request to initialize a MPONM *, the module initialization function of unified MPONM API  determines if the MPONM * has previously been initialized before, block . More specifically, the initialization function determines whether the module data structure  of the MPONM * has previously been created or not (e.g. as a result of responding to another initialization request for the same MPONM  by the same or another networking application ). If so, the module initialization function returns the handle\/pointer of the data structure  of the MPONM  immediately, block .","Otherwise, i.e. if the module data structure  has not been previously created before, the module initialization function creates the root object and global cross function block\/physical layer objects -* of the module data structure  of the MPONM , block .","Thereafter, the module initialization function successively calls the corresponding function block\/physical layer service routines  of the function blocks and physical layer component collections to contribute to the creation of data structure  (including anchor and function block specific data objects * and *) to facilitate subsequent access, control or interaction with MPONM * by networking applications , block .","For the embodiment, after each invocation, the initialization function further determines if the contributory creation expected of the invoked function block\/physical layer service routine is successful, block . If an error is returned for the contributory creation, the initialization function successively undoes all prior successful additions to the data structure , block , and returns an error notice to the network application , block .","If the contributory creation was determined to be successful at block , the initialization function further determines if additional function block\/physical layer service routines  are to be invoked, block . If at least one additional function block\/physical layer service routines  is to be invoked, the initialization function continues operation at block  as earlier described.","If not, the cooperative creation initialization process is completed, and the initialization function returns the handle\/pointer of the data structure  of MPONM * as earlier described, block .","Thereafter, when a need to have an operation performed within a function block of the multi-protocol processor or the physical layer (of a MPONM *) arises, in like manner, the applicable externalized function of the service routine is invoked without explicitly identifying the MPOPNM *, only the working data structure  of the MPONM *. Resultantly, accessing, controlling or otherwise interacting with MPONM * by networking applications  is streamlined.","Note that as alluded to earlier, the exact manner a function block\/physical layer service routine  contributes in the creation of the data structure of a MPONM *, i.e. the kind of data variables the function block\/physical layer service routine  adds to, maintains, or otherwise manipulates, using data structure  is application dependent. Similarly, the nature and the manner the function block\/physical layer service routine  interacts with the MPONM * in particular a function block of its multi-protocol processor or its physical layer components, are application dependent. They vary from function block to function block, or in the nature of the components.","Further, in various embodiments, invocation of the function block service routines  to contribute to the creation of the module data structure  may be made in a predetermined order, to address certain application dependencies, such as data dependencies between data of different function blocks.","Referring now to -, wherein three block diagrams illustrating an exemplary physical layer architecture, exemplary intra physical layer inter-component transactions, and an exemplary transaction flow, for a MPONM, in accordance with one embodiment each, are shown.","As illustrated in , for the embodiment, selected ones of physical layer components -of a MPONM * are coupled to each other directly, , and , and via a local bus , and . As described earlier, physical layer components -may include one or more of a laser, a number A\/D and D\/A converters, photo diodes, temperature sensors, clock, GPIO, serial digital I\/O interface, EEPROM, and so forth. For the embodiment, physical layer components -include in particular, a local microcontroller.","An example of local bus  is the well-known I2C two-wire bus. In alternate embodiments, other local buses such as the Serial Peripheral Interface (SPI) bus, the Universal Serial Bus (USB), or the ISA bus may be employed instead.","For the embodiment, intra physical layer inter component transactions  include\n\n","Implementations of these individual exemplary transactions - are component and\/or bus dependent, and within the ability of those ordinarily skilled in the art, accordingly will not be further described.","In alternate embodiments, the present invention may be practiced with the physical layer having more or less transactions for the various components -to interact.",{"@attributes":{"id":"p-0076","num":"0087"},"figref":"FIG. 6","i":"c ","b":["604","106","612","604","632","604","602","634"]},"Next, for the example transaction flow, the first component uses \u201cset pin\u201d , \u201cget pin\u201d  \u201cread status\u201d , \u201csend\/get data byte\u201d  or other transaction of like kind, to drive a read\/write indicator onto local bus , block , to conduct the transaction with the identified component *, blocks -.","For the example transaction flow, each \u201cread\/write\u201d interaction with a component * includes the sending\/receiving of an acknowledgement. Blocks - are repeated a number of times until the entire transaction is completed. For example, the reading of a data byte is repeated 8 times to read 8 bytes out of a EEPROM of the physical layer of a MPONM *.","Finally, for the example transaction flow, upon completing the transactions, the first component uses \u201cstop transaction\u201d  to drive an \u201cend of transaction\u201d condition onto local bus , block , thereby allowing other transactions to begin.","For transactions between directly connected components, they may be conducted without at least the operation of block  (driving the slave address of the counterpart component onto a shared bus). For other embodiments, such transactions may also possibly be conducted without the operations of blocks - (starting and stopping transaction).",{"@attributes":{"id":"p-0081","num":"0092"},"figref":"FIG. 7","b":["116","116","116","117","702","706","704"]},"Eventually, when all required transactions to effectuate the requested operation have been successfully performed, or when a fatal error is encountered for one of the transactions to be performed, the physical layer service routine  returns control to the calling networking application . If applicable, return of control may also include one or more results of the operation and\/or acknowledgement of successful\/unsuccessful completion of the operation.","Accordingly, the high level functions  to interact with physical layer components * externalized through unified MPONM API  may be supported, achieving the desired result of insulating the complexity and dissimilar manner of interaction from developers of networking applications .","Thus, it can be seen from the above descriptions, a novel highly flexible unified MPONM API equipped to streamline and improve the ease of network applications in accessing, controlling or otherwise interacting with function blocks of multi-protocol processors and physical layer components of MPONM has been described.","While the present invention has been described in terms of the above described embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described. The present invention can be practiced with modification and alteration within the spirit and scope of the appended claims. Thus, the description is to be regarded as illustrative instead of restrictive on the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be described by way of exemplary embodiments, but not limitations, illustrated in the accompanying drawings in which like references denote similar elements, and in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIGS. 2","FIG. 1"],"i":["a","b "],"b":"2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIGS. 5","FIG. 1"],"i":["a","b "],"b":"5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 6","i":["a","c "],"b":"6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 7","FIG. 1"]}]},"DETDESC":[{},{}]}
