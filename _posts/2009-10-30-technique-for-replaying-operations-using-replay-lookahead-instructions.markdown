---
title: Technique for replaying operations using replay look-ahead instructions
abstract: A technique for reliably replaying operations in electronic-design-automation (EDA) software is described. In this technique, the EDA software stores operations performed by a user during a design session, as well as any replay look-ahead instructions, in a log file. When repeating the first operation, the replay look-ahead instruction ensures that the same state is obtained in the EDA environment as was previously obtained. For example, if an interrupt occurred when the first operation was previously performed, the replay look-ahead instruction may specify when the interrupt occurred during the performance of the operation so that the effect of the interrupt may be simulated when replaying the first operation. Alternatively, if a blocking user-interface request occurred when the first operation was previously performed (such as a mandatory query), the replay look-ahead instruction may include one or more events associated with the user answer to the blocking user-interface request so that the same user answer may be provided when replaying the first operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08397186&OS=08397186&RS=08397186
owner: Synopsys, Inc.
number: 08397186
owner_city: Mountain View
owner_country: US
publication_date: 20091030
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority under 35 U.S.C. 119(e) to U.S. Provisional Application Ser. No. 61\/226,155, entitled \u201cReplay Look-Ahead,\u201d by Jeffrey Thomas Brubaker, filed on Jul. 16, 2009, the contents of which are herein incorporated by reference.","1. Field","This disclosure generally relates to electronic design automation. More specifically, this invention relates to a technique for reproducibly obtaining a state in an electronic-design-automation environment by replaying operations using replay look-ahead instructions.","2. Related Art","Electronic-design-automation (EDA) software is widely used to design circuits. Typically, EDA software maintains a log file of all commands or operations performed by a user during a design session. These stored operations are often repeated (which is sometimes referred to as \u2018replayed\u2019) in order to: debug a circuit design and\/or to program the EDA software to perform batch operations. Note that replaying at least a subset of the stored operations in a log file is sometimes referred to as \u2018replaying\u2019 the subset of the operations.","In order to be useful to designers, replay should reliable. Therefore, ideally all of the operations a user may perform using EDA software should support replay. Furthermore, after replaying a sequence of one or more of these operations, the same state in the EDA software should be reproducibly obtained. However, these reliability requirements are often not achieved using existing EDA software.","For example, the log files associated with existing EDA software often do not include information with sufficient temporal granularity to reproducibly obtain the same state in the EDA software when operations are replayed. In particular, a log file may include a particular operation that was performed, but may not include a conditional event that occurred during this operation. As a consequence, when this operation is subsequently replayed, the occurrence of the conditional event and the previous user response are unknown, so the correct state in the EDA software is not obtained.","This lack of reproducibility increases the time and effort needed to design circuits, thereby increasing their cost. In addition, by undermining the user's perception of the reliability of features, such as replay, the user experience is degraded, which can impact customer retention and sales of EDA software.","One embodiment of the present disclosure provides a computer system that replays a sequence of operations, which were previously performed by a user, in an electronic-design-automation (EDA) environment, such as that provided by EDA software. During operation, the computer system accesses the sequence of operations and at least one replay look-ahead instruction in a log file associated with the EDA environment. Note that the replay look-ahead instruction provides operational information, which specifies how a first operation in the sequence of operations is to be performed. Moreover, in the absence of the replay look-ahead instruction, replaying the first operation does not result in the same state in the EDA environment as occurred when the first operation was previously performed by the user. Then, the computer system performs the sequence of operations, where performing the first operation in the sequence of operations is based at least on the replay look-ahead instruction.","In some embodiments, the replay look-ahead instruction is associated with an interrupt, provided by the user, when the first operation was previously performed. (For example, the interrupt may indicate that the user pressed \u2018Ctrl-C\u2019 to interrupt an operation or, based on a displayed progress bar, the user may have pressed a \u2018cancel\u2019 button to interrupt an operation.) This replay look-ahead instruction may specify when the interrupt occurred during the performance of the first operation. Furthermore, when replaying the first operation, the effect of the interrupt may be simulated, thereby achieving the same state in the EDA environment as occurred when the first operation was previously performed by the user.","In some embodiments, the replay look-ahead instruction is associated with a blocking user-interface request that occurred when the first operation was previously performed. Note that a user answer to the blocking user-interface request is required in order for the first operation to complete. Moreover, when the first operation was previously performed by the user, the user answer included a sequence of events. When replaying the first operation, the sequence of events may be simulated to provide the user answer, thereby achieving the same state in the EDA environment as occurred when the first operation was previously performed by the user.","In some embodiments, the replay look-ahead instruction is associated with one or more user preferences that specify a configuration of the EDA environment. For example, the configuration of the EDA environment may include a window size and\/or position. Furthermore, when replaying the first operation, a window in a graphical user interface may be configured based at least on the window size and\/or position, thereby achieving the same state in the EDA environment as occurred when the first operation was previously performed by the user. Note that the same state may be achieved in the EDA environment when replaying the first operation even if a display size is different relative to a display size when the first operation was previously performed by the user. Alternatively or additionally, the same state may be achieved in the EDA environment when replaying the first operation even if an original user's preferences are unavailable to the user performing the replay, which can occur when bug reports are submitted.","Another embodiment provides a method including at least some of the above-described operations.","Another embodiment provides a computer-program product for use in conjunction with the computer system.","Table 1 illustrates a log file in accordance with an embodiment of the present disclosure.","Table 2 illustrates pseudo-code for operations in accordance with an embodiment of the present disclosure.","Table 3 illustrates pseudo-code for operations in accordance with an embodiment of the present disclosure.","Note that like reference numerals refer to corresponding parts throughout the drawings. Moreover, multiple instances of the same type of part are designated by a common prefix separated from an instance number by a dash.","The following description is presented to enable any person skilled in the art to make and use the disclosure, and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art, and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present disclosure. Thus, the present disclosure is not intended to be limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein.","Embodiments of a computer system, a method, and a computer-program product (i.e., software) for use with the computer system are described. During the method, commands or operations (which are henceforth referred to as operations) in an electronic-design-automation (EDA) environment, such as that provided by EDA software, are reliably replayed. In particular, the EDA software stores operations performed by a user during a design session, as well as any replay look-ahead instructions, in a log file. When replaying a first operation, the replay look-ahead instruction ensures that the same state is obtained in the EDA environment as was previously obtained. For example, if an interrupt occurred when the first operation was previously performed, the replay look-ahead instruction may specify when the interrupt occurred during the performance of the operation so that the effect of the interrupt may be simulated when replaying the first operation. Alternatively, if a blocking user-interface request occurred when the first operation was previously performed (such as a mandatory query), the replay look-ahead instruction may include one or more events associated with the user answer to the blocking user-interface request so that the same user answer may be provided when replaying the first operation.","By facilitating the same state in the EDA environment, this replay technique helps make the EDA software easier to use, which increases user productivity and lowers circuit development costs. In addition, by increasing reproducibility, the replay technique improves users' perception of the reliability of features, such as replay, which improves the user experience, and thus, customer retention and sales of EDA software.","We now describe embodiments of design and fabrication of integrated circuits or chips.  presents a flowchart  illustrating the various operations in the design and fabrication of an integrated circuit. This process starts with the generation of a product idea (), which is realized during a design process that uses EDA software (). When the design is finalized, it can be taped-out (). After tape-out, a semiconductor die is fabricated () and packaging and assembly processes () are performed, which ultimately result in finished chips ().","Note that the design process that uses EDA software () includes operations -, which are described below. This design flow description is for illustration purposes only. In particular, this description is not meant to limit the present disclosure. For example, an actual integrated circuit design may require a designer to perform the design operations in a different sequence than the sequence described herein.","During system design (), designers describe the functionality to implement. They can also perform what-if planning to refine the functionality and to check costs. Note that hardware-software architecture partitioning can occur at this stage. Exemplary EDA software products from Synopsys, Inc. of Mountain View, Calif. that can be used at this stage include: Model Architect\u00ae, Saber\u00ae, System Studio\u00ae, and Designware\u00ae products.","Then, during logic design and functional verification (), VHDL or Verilog code for modules in the circuit is written and the design is checked for functional accuracy. More specifically, the design is checked to ensure that it produces the correct outputs. Exemplary EDA software products from Synopsys, Inc. of Mountain View, Calif. that can be used at this stage include: VCS\u00ae, Vera\u00ae, Designware\u00ae, Magellan\u00ae, Formality\u00ae, ESP\u00ae and Leda\u00ae products.","Next, during synthesis and design for test (), VHDL\/Verilog is translated to a netlist. This netlist can be optimized for the target technology. Additionally, tests can be designed and implemented to check the finished chips. Exemplary EDA software products from Synopsys, Inc. of Mountain View, Calif. that can be used at this stage include: Design Compiler\u00ae, Physical Compiler\u00ae, Test Compiler\u00ae, Power Compiler\u00ae, FPGA Compiler\u00ae, Tetramax\u00ae, and Designware\u00ae products.","Moreover, during netlist verification (), the netlist is checked for compliance with timing constraints and for correspondence with the VHDL\/Verilog source code. Exemplary EDA software products from Synopsys, Inc. of Mountain View, Calif. that can be used at this stage include: Formality\u00ae, Primetime\u00ae, and VCS\u00ae products.","Furthermore, during design planning (), an overall floor plan for the chip is constructed and analyzed for timing and top-level routing. Exemplary EDA software products from Synopsys, Inc. of Mountain View, Calif. that can be used at this stage include: Astro\u00ae and IC Compiler\u00ae products.","Additionally, during physical implementation (), the placement (positioning of circuit elements) and routing (connection of the same) occurs. Exemplary EDA software products from Synopsys, Inc. of Mountain View, Calif. that can be used at this stage include: the Astro\u00ae and IC Compiler\u00ae products.","Then, during analysis and extraction (), the circuit function is verified at a transistor level, which permits refinement. Exemplary EDA software products from Synopsys, Inc. of Mountain View, Calif. that can be used at this stage include: Astrorail\u00ae, Primerail\u00ae, Primetime\u00ae, and Star RC\/XT\u00ae products.","Next, during physical verification (), the design is checked to ensure correctness for: manufacturing, electrical issues, lithographic issues, and circuitry. Exemplary EDA software products from Synopsys, Inc. of Mountain View, Calif. that can be used at this stage include the Hercules\u00ae product.","Moreover, during resolution enhancement (), geometric manipulations of the layout are performed to improve manufacturability of the design. Exemplary EDA software products from Synopsys, Inc. of Mountain View, Calif. that can be used at this stage include: Proteus\u00ae, Proteus\u00aeAF, and PSMGED\u00ae products.","Additionally, during mask-data preparation (), the \u2018tape-out\u2019 data for production of masks to produce finished chips is provided. Exemplary EDA software products from Synopsys, Inc. of Mountain View, Calif. that can be used at this stage include the Cats\u00ae family of products.","Embodiments of the present disclosure can be used during one or more of the above-described stages. Specifically, in some embodiments the present disclosure can be used in EDA software , which may provide a custom schematic editor and simulation environment.","We now describe embodiments of a technique for reliably replaying a sequence of operations.  presents a flowchart illustrating a method  for replaying a sequence of operations, which were previously performed by a user, in an EDA environment, such as that provided by EDA software that executes on a computer system. During operation, the EDA software accesses the sequence of operations and at least one replay look-ahead instruction in a log file associated with the EDA environment (operation ). Note that the replay look-ahead instruction provides operational information, which specifies how a first operation in the sequence of operations is to be performed. Moreover, in the absence of the replay look-ahead instruction, replaying the first operation does not result in the same state in the EDA environment as occurred when the first operation was previously performed by the user. Then, the EDA software performs the sequence of operations (operation ), where performing the first operation in the sequence of operations is based at least on the replay look-ahead instruction.","In some embodiments of method  there are additional or fewer operations. Moreover, the order of the operations may be changed and\/or two or more operations may be combined into a single operation.","Table 1 illustrates a log file, which is generated during one or more design sessions. This log file includes time-stamped entries for all of the operations in an EDA environment that were performed by a user, and which are associated with a circuit design. These operations are indicated by entries designated with a \u2018\/i\u2019 or a \u2018\/o\u2019 in the log file.",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[12:10:09.48] \/i de::open [dm::findCellView {layout} -cellName"},{"entry":"{AD4FUL} -libName {ADFULG}]]"},{"entry":"[12:10:09.49] \/o Extracting net \u201cnet A\u201d"},{"entry":"[12:10:10.49] \/o Extracting net \u201cnet B\u201d"},{"entry":"[12:10:11.49] \/o Extracting net \u201cnet C\u201d"},{"entry":"[12:10:12.49] \/o Extracting net \u201cnet D\u201d"},{"entry":"[12:10:12.49] \/r deInterrupt <loopId:leExtractConnectivity>"},{"entry":"<positionId:net3>"},{"entry":"[12:10:15.45] \/r giDialog gi::pressButton {cancel} -in [gi::getDialogs"},{"entry":"{giPrompt}]"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"However, when a given operation is performed, a state may occur in the EDA environment that may not replay correctly (i.e., if the given operation is replayed the same state may not be obtained). For example, this problem may occur: if the user interrupts the given operation while it is being performed (for example, by hitting \u2018Ctrl-C\u2019 on a keyboard); if, in response to a user action or the given operation, a dialog box, which requires a mandatory response in order for the given operation to be performed, is displayed (which is sometimes referred to as a \u2018blocking dialog box\u2019); and\/or if user preferences are used to configure a graphical user interface (such as a window). (In some cases more than one blocking dialog box is displayed. For example, if a user runs out of disk space while saving a design, a dialog box may allow the user to save the design somewhere else (such as by pressing a \u2018Save As\u2019 button). In these embodiments, the button press and all inputs into the next dialog box (which asks where to save the design) may need to be replayed.) Note that in the first two examples, the incorrect state can be obtained during replay because the given operation was stopped after it had started but before it had completed.","To address this problem, when the operations are performed during the one or more design sessions, one or more replay look-ahead instructions (which may be indicated by entries designated with a \u2018\/r\u2019) may be included in the log file. The replay look-ahead instructions specify how a preceding operation (and, more generally, an adjacent or proximate operation) should be performed during replay so that the same state is obtained (therefore, the replay look-ahead instructions are sometimes referred to as \u2018look-ahead messages\u2019). Note that the replay look-ahead instructions may each include an affected module or handler, and associated data. For example, if an interrupt occurred when a preceding operation in the log file was previously performed, the replay look-ahead instruction may indicate that it is associated with an interrupt handler, and the associated data may specify a location in the EDA software (such as a loop identifier, loopId, and a position identifier, positionId) where the interrupt occurred. During replay, the effect of the interrupt may be simulated at the location so that the same state in the EDA environment is obtained. Alternatively, if a blocking dialog box occurred when the preceding operation was previously performed, the replay look-ahead instruction may indicate that it is associated with a dialog replay module, and the associated data may include a sequence of one or more events (such as one or more TCL commands) that specify the user actions in response to the blocking dialog box (i.e., the mandatory user response or answer). Furthermore, if user preferences were loaded during the one or more design sessions to configure the EDA environment (such as one or more window(s)), the replay look-ahead instruction may indicate that it is associated with a window-framework module, and the associated data may include a window size and\/or position. When the operations in the log file are replayed, one or more windows may be configured based on the window size and\/or position. In this way, the visual presentation of the EDA environment may be unchanged during replay even if the display size is changed relative to the display used during the one or more design sessions.","As noted previously, in an exemplary embodiment an interrupt occurred during a design session. For example, a user may have opened a large circuit design (such as the \u2018de::open\u2019 operation on the first line of the log file in Table 1). In response, the EDA software may have opened the circuit design by extracting connectivity (via the \u2018leExtractConnectivity\u2019 operation), as indicated by the net names in the log file as it moves through the circuit design.","While waiting for a progress bar in a progress-indicator dialog box, the user may have hit Ctrl-C during extraction of net D. If the log file only includes the \u2018de::open\u2019 operation, it will not replay correctly, i.e., the same EDA-environment state will not be obtained. Consequently, the log file may include a replay look-ahead instruction that indicates that an interrupt occurred, as well as information specifying where the interrupt occurred during execution of the EDA software. Therefore, if the EDA software was in the process of walking through net D in the circuit design when the interrupt occurred, the replay look-ahead instruction may include the loopId and the positionId corresponding to net D, as shown in Table 1. (Note that, in response to the interrupt, the EDA software posted a blocking dialog box with the query \u201cAre you sure?,\u201d which the user canceled.)","During replay, each operation in the log file may be read by a replay connectivity engine, and replay look-ahead instructions for interrupts immediately after operations may be placed into a look-ahead buffer. When executed, the given operation may query the look-ahead buffer, filtered by its service name (for example, using an application programming interface), to control its execution path. And after the given operation is performed, the look-ahead buffer may be cleared. Thus, based on the replay look-ahead instructions, when it reaches net D, the interrupt handler may simulate an interrupt at the correct location in the EDA software (as specified by the loopId and the position Id). This allows the EDA software to reproduce issues encountered when the user interrupted an operation that took a long time to run.","It is possible that when an interrupt occurs, the given operation cleans up and leaves the design-session and database states unchanged. However, it is also possible that some processing is skipped and that a partial result is obtained (for example, when connectivity extraction of a single net is cancelled). In this case, if the given operation is replayed without an interrupt the same system state will not be obtained.","In some embodiments, the EDA software includes utilities that: continue to respond to exposure events, report progress during a long operation and\/or allow the user to interrupt either via a Cancel button or Ctrl-C. In particular, these utilities may include graphical and non-graphical support that presents a progress dialog box when the graphical user interface in the EDA software is enabled, and which outputs to a file when the graphical user interface in the EDA software is disabled. Moreover, the EDA software may support: Ctrl-C interrupt checking in both the graphical and non-graphical user interfaces; bounded (for example, percentages) and unbounded progress support so that operations without a definite end can report that work is being performed; passing of update\/paint events to all widgets so that the EDA software continues to respond to exposures and feels \u2018alive;\u2019 and\/or support for replaying interrupts (e.g., storing replay look-ahead instructions in a log file). For example, the EDA software may include two interfaces: one that provides unbounded interrupt checking and another that provides the progress display. Note that the unbounded interface may be stack managed for safety. Furthermore, more than one instance of this object may exist on the stack at a single time if, for example, an outer loop and an inner loop, which is called by the outer loop, each provide interrupt handling.","Note that, for proper replay, the loop identifier for interrupts associated with an operation entry in the log file may be unique. For example, if there are two instances of the interrupt handler in a single operation in the log file, replay may not simulate the two interrupts correctly. This problem is illustrated in Table 2, which includes pseudo-code for operations. In particular, the same loop identifier (loopId) is used for two separate interrupt handlers even though there will be only a single \/r entry in the log file. This example will not replay properly unless \u2018theName\u2019 is replaced with a unique name for each call to the do_something procedure.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"procedure do_something { } {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"set i [db::createInterruptHandler theName]"]},{"entry":[{},"for {set j 0} {$j < 10} {incr j} {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"puts $j"]},{"entry":[{},"db::checkForInterrupt \u201citeration$j\u201d -handler $i"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"db::destroy $i"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"db::eval {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"do_something"]},{"entry":[{},"do_something"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In another exemplary embodiment, the log file supports replay of an operation that had a blocking state during its execution in the design session. Note that a block state may be associated with a modal or blocking dialog box (such as a dialog box that indicates \u201cAre you sure?\u201d or an error notification), which requires a user response or answer before the EDA software will complete execution of an associated operation. For example, when a user attempts to delete a file in a library manager, the user is prompted to confirm the request or the delete operation will not be performed. Consequently, during replay, the same answer or response will need to be provided or the same state in the EDA environment will not be obtained.","Another illustration is shown in Table 3, which includes pseudo-code for operations. If an error is encountered during dm::createLib, which results in the display of a modal dialog box, dm::createLib is not performed until the user dismisses the modal dialog box. As a consequence, the gi::pressButton operation does not execute, even though it was logged to press a button in the modal dialog box. Consequently, without the appropriate user response, replay will not continue correctly.",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lm::showCreateLibrary"]},{"entry":[{},"dm::createLib libName -path libPath -dmSystem oaDMTurbo"]},{"entry":[{},"gi::pressButton ok -in [gi::getDialogs dmCreateLibrary]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"To address this type of problem, a replay look-ahead instruction included in the log file may indicate that a blocking dialog box occurred, and may include a sequence of one or more events associated with the user answer or response (i.e., the user interaction with the blocking dialog box). When this sequence of events is performed in the blocking dialog box during replay, the same state in the EDA environment may be obtained. For example, as shown in Table 1, in response to the \u201cAre you sure?\u201d blocking dialog box, the user response is \u201cCancel,\u201d which allows the \u2018de::open\u2019 operation to return.","Note that in some embodiments replay look-ahead instructions associated with a blocking dialog box are designated with a \u2018\/r\u2019 in the log file. During replay, before presenting or posting the blocking dialog box, these \/r entries may be read into a read-ahead buffer. Then, the preceding operation in the log file that posts the blocking dialog box may be evaluated using the information in the read-ahead buffer.","In some embodiments, operations are evaluated one at a time. If these operations post additional blocking dialog boxes, then these dialog boxes will be evaluated using entries in the read-ahead buffer. The last entry in the read-ahead buffer commits or cancels the blocking dialog box, which causes the operation that posted the blocking dialog box to complete and return control to the EDA software. This capability allows blocking dialog boxes to be logged and replayed.","We now describe embodiments of a computer system that reliably replays a sequence of operations.  presents a block diagram illustrating a computer system  that performs method  (). Computer system  includes: one or more processors , a communication interface , a user interface , and one or more signal lines  coupling these components together. Note that the one or more processing units  may support parallel processing and\/or multi-threaded operation, the communication interface  may have a persistent communication connection, and the one or more signal lines  may constitute a communication bus. Moreover, the user interface  may include: a display , a keyboard , and\/or a pointer , such as a mouse.","Memory  in computer system  may include volatile memory and\/or non-volatile memory. More specifically, memory  may include: ROM, RAM, EPROM, EEPROM, flash, one or more smart cards, one or more magnetic disc storage devices, and\/or one or more optical storage devices. Memory  may store an operating system  that includes procedures (or a set of instructions) for handling various basic system services for performing hardware-dependent tasks. Memory  may also store procedures (or a set of instructions) in a communication module . These communication procedures may be used for communicating with one or more computers and\/or servers, including computers and\/or servers that are remotely located with respect to computer system .","Memory  may also include multiple program modules (or sets of instructions), including: circuit-design module  (or a set of instructions), interrupt handler  (or a set of instructions), dialog-replay module  (or a set of instructions) and\/or window-framework module  (or a set of instructions). Moreover, circuit-design module  may include: log module  (or a set of instructions) and\/or replay connectivity engine  (or a set of instructions). Note that one or more of these program modules (or sets of instructions) may constitute a computer-program mechanism.","During a design session, a user may use circuit-design module  to edit or simulate one or more circuits , such as: circuit A - and\/or circuit B -. Moreover, log module  may store entries associated with operations in an EDA environment provided by circuit-design module  in one or more log files . Note that if an operation did not complete (for example, because of an interrupt) or a blocking dialog state occurred during execution of an operation, then log module  may store replay look-ahead instructions for the operation in the one or more log files . In addition, user preferences , which may be loaded by circuit-design module  at the start of a design session, may be stored by log module  as one or more replay look-ahead instructions in the one or more log files .","Subsequently, during replay, replay connectivity engine  may use the operations and the replay look-ahead instructions in the one or more log files  to ensure that the same state is obtained in the EDA environment as during the design session. For example, if there were one or more interrupt(s) during an operation, replay connectivity engine  may store the replay look-ahead instruction(s) in look-ahead buffer . Then, interrupt handler  may use this information to simulate interrupt(s) at the appropriate location(s) in circuit-design module .","Alternatively, if a blocking state occurred during an operation, replay connectivity engine  may store the replay look-ahead instruction (such as a sequence of one or more events associated with the user response or answer to a blocking dialog box) in read-ahead buffer . Then, dialog-replay module  may use this information to provide the user response or answer when the blocking dialog box occurs during replay.","Furthermore, window-framework module  may use window-size information in the replay look-ahead instructions to ensure that the visual presentation of one or more windows in a graphical user interface associated with circuit-design module  is unchanged during replay relative to the design session, even if display  is changed.","Instructions in the various modules in the memory  may be implemented in: a high-level procedural language, an object-oriented programming language, and\/or in an assembly or machine language. Note that the programming language may be compiled or interpreted, e.g., configurable or configured, to be executed by the one or more processing units .","Computer system  may include a variety of devices, such as: a personal computer, a laptop computer, a server, a work station, a main-frame computer, and\/or other device capable of manipulating computer-readable data.","Although computer system  is illustrated as having a number of discrete items,  is intended to be a functional description of the various features that may be present in computer system  rather than a structural schematic of the embodiments described herein. In practice, and as recognized by those of ordinary skill in the art, the functions of computer system  may be distributed over a large number of servers or computers, with various groups of the servers or computers performing particular subsets of the functions. Consequently, computer system  may be at one location or may be distributed across multiple locations, such as computing systems that communicate via a network (such as the Internet or an intranet).","In some embodiments, some or all of the functionality of computer system  may be implemented in one or more: application-specific integrated circuit (ASICs), field-programmable gate array (FPGAs), and\/or one or more digital signal processors (DSPs). Note that the functionality of computer system  may be implemented more in hardware and less in software, or less in hardware and more in software, as is known in the art.","We now discuss embodiments of data structures that may be used in computer system .  presents a block diagram illustrating a data structure . This data structure may include one or more log files , which may be associated with corresponding design sessions. For example, log file - may include operations , and, for at least some of operations , replay look-ahead instructions . Thus, replay look-ahead instruction - may include information about a sequence of one or more events associated with a user answer or response to a blocking dialog box that occurred during operation - in a design session, and replay look-ahead instruction - may include information about an interrupt that occurred during operation - in the design session.","In some embodiments, computer system  () and\/or data structures  include fewer or additional components. Moreover, two or more components may be combined into a single component and\/or a position of one or more components may be changed.","While the preceding embodiments have used EDA software as an illustrative example, the technique for reliably replaying operations may be used with a wide variety of software, including: software applications, software development tools, firmware, operating systems and\/or software testing tools.","The foregoing descriptions of embodiments of the present disclosure have been presented for purposes of illustration and description only. They are not intended to be exhaustive or to limit the present disclosure to the forms disclosed. Accordingly, many modifications and variations will be apparent to practitioners skilled in the art. Additionally, the above disclosure is not intended to limit the present disclosure. The scope of the present disclosure is defined by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4","FIG. 3"]}]},"DETDESC":[{},{}]}
