---
title: Development of manifest for java embedded server bundle
abstract: An apparatus and method for facilitating development of Java Embedded Server bundles which includes a module containing a set of development tools used in the creation of Java Embedded Server bundles. The module may include a code template tool having sample code segments; a Java Embedded Server manifest generator tool that creates Java Embedded Server manifest files for Java Embedded Server bundles; a Java Embedded Server jar packager tool that packages Java Embedded Server bundles; and a web page link tool having links to Java Embedded Server-related web pages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07131111&OS=07131111&RS=07131111
owner: Sun Microsystems, Inc.
number: 07131111
owner_city: Santa Clara
owner_country: US
publication_date: 20010119
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates to the field of software development tools.","The basic functionality of a computer is dictated by the type of operating system it uses. Various operating systems exist in the market place, including Solaris from Sun Microsystems, Macintosh from Apple Computers, the \u201cWindows\u201d Operating Systems, e.g., Windows 95\/98 and Windows NT, from Microsoft, and Linux. The different types of operating systems will be referred to herein as \u201cplatforms\u201d. Prior to the popularity of the Internet, software developers wrote programs specifically designed for individual platforms. Thus, a program written for one platform could not be run on another. However, the advent of the Internet made cross-platform compatibility a necessity.","Prior art  illustrates a conceptional arrangement wherein a first computer () running the Solaris platform and a second computer () running the Windows 98 platform are connected to a server () via the internet (). A resource provider using the server () might be any type of business, governmental, or educational institution. The resource provider has a need to be able to provide its resources to both the user of the Solaris platform and the user of the Windows 98 platform, but does not have the luxury of being able to custom design its content for the individual platforms.","The Java\u2122 programming language was developed by Sun Microsystems to address this problem. The Java\u2122 programming language was designed to be simple for the programmer to use, yet able to run securely over a network and work on a wide range of platforms.","Referring to , in order to create a Java\u2122 application, the developer first writes the application in human-readable Java\u2122 source code. As used herein, the term \u201capplication\u201d refers to both true Java\u2122 applications and Java\u2122 \u201capplets\u201d which are essentially small applications usually embedded in a web page. In the example shown, the application \u201cProgram\u201d () is created as a human-readable text file. The name of this text file is given the required five-character extension \u201cjava\u201d.","The Java\u2122 compiler or \u201cjavac\u201d () is used to compile the source code into a machine-readable binary file (). The text file will contain Java\u2122 language commands, e.g., \u201cimport java.awt.frame\u201d. A discussion of the Java\u2122 language itself is beyond the scope of this document. However, complete information regarding the Java\u2122 programming language and the Java\u2122 platform are available from Sun Microsystems both in print and via the internet at java.sun.com. The resulting binary file () will automatically receive the same file name as the source text file, but will use \u201c.class\u201d as the trailing extension. The Java\u2122 runtime environment incorporates a Java\u2122 \u201cvirtual machine\u201d (JVM) () to convert the \u201c.class\u201d byte codes into actual machine executions (). The machine executions (like drawing windows, buttons, and user prompt fields) will occur in accordance to the application developer's code instructions. Because Sun Microsystems specifically designed the JVM () to run on different platforms, a single set of \u201c.class\u201d byte codes will execute on any platform where a JVM () has been installed. An Internet browser such as Netscape and Microsoft Explorer that incorporates a JVM () is called a \u201cjava-enabled\u201d browser.","The cross-platform architecture of the Java\u2122 programming language is illustrated in , which shows how the Java\u2122 language enables cross-platform applications over the Internet. In the figure, the computer () running the Solaris platform and the computer () running the Windows  platform are both provided with the JVM (). The resource provider creates a Java\u2122 application using the Java\u2122 software development kit (\u201cSDK\u201d) () and makes the compiled Java\u2122 byte codes available on the server (), which in this example is running on a Windows NT platform. Through standard internet protocols, both the computer () and the computer () may obtain a copy of the same byte code and, despite the difference in platforms, execute the byte code through their respective JVM.","As the popularity of the Internet has increased, users have become accustomed to many different types of interfaces. Thus, aesthetic conformity has become less of an issue. At the same time, speed, functionality, and versatility have become increasingly important. Therefore, the Java\u2122 2 standard edition SDK includes a new \u201cpackage\u201d for the developer called \u201cswing\u201d that is essentially library of \u201clightweight components\u201d. This new package is simply one library that is possible; other libraries may be created and in fact are available from third parties. Swing provides the developer with the option and flexibility to use lightweight components and thus improves performance in a given application. A detailed discussion of the use of the Java\u2122 abstract windowing toolkit (AWT) and the Swing package is beyond the scope of this document. Complete documentation is available from Sun Microsystems both in print and at the web site java.sun.com.","Forte\u2122 for Java\u2122 products (), formerly called NetBeans, are visual programming environments written entirely in Java\u2122 and Swing. These products are commonly regarded as the leading Integrated Development Environment (IDE). IDEs are easily customizable and extensible, as well as platform independent, as is illustrated in . Forte\u2122 for Java\u2122 () includes a powerful Form Editor (), integrated full-featured text editor (), visual GUI design (), debugger (), and compiler (). Forte\u2122 for Java\u2122 () is also completely modular. Also, Forte\u2122 for Java\u2122 () is built around a set of Open Application Programming Interface (API's) which allow it to be easily extensible. This means that the IDE functionality for editing, debugging, GUI generation, etc. is represented in modules that can be downloaded and updated dynamically as is illustrated in . Instead of waiting months for a completely new release, as soon as new versions () or new modules () are available, users can update that individual version or module via the Update Center ().","In one aspect, the invention is an apparatus and a method for facilitating the development of Java Embedded Server bundles, which includes a module containing a set of development tools used in the creation of Java Embedded Server bundles.","In one or more embodiments, the module may be adapted for inclusion in an Integrated Development Environment (IDE), the module may be accessible via a drop-down menu, and the module may be updated via an update mechanism while included in the IDE.","In one or more embodiments, the module may include a code template tool having sample code segments; a Java Embedded Server manifest generator tool that creates Java Embedded Server manifest files for Java Embedded Server bundles; a Java Embedded Server jar packager tool that packages Java Embedded Server bundles; and a web page link tool having links to Java Embedded Server-related web pages.","Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.","The invention described here may be implemented on virtually any type computer regardless of the platform being used. For example, as shown in , a typical computer () comprising a processor (), associated memory (), and numerous other elements and functionalities typical to today's computers (not shown). The computer () may further comprise input means, such as a keyboard () and a mouse (), and an output device, such as a monitor (). Those skilled in the art will appreciate that these input and output means may take other forms. Computer () is connected via a connection means () to the Internet (). The computer () is configured to run a JVM (), implemented either in hardware or in software.","Returning to the Forte\u2122 for Java\u2122 Integrated Development Environment (IDE) () example shown in , it would be desirable to have a module to be used within Forte\u2122 for Java\u2122 () or any other IDE having all development tools necessary to create Java\u2122 Embedded Server (JES) bundles in one package.","Java Embedded Server Module (i.e., a plug-in module) () for the Forte for Java\u2122 IDE (), as shown in , contains tools which facilitates creation of Java Embedded Server bundles. The Java Embedded Server Module () contains a code template tool (), a Java Embedded Server Manifest Generator tool () to help in creating a valid Java Embedded Server manifest file for the bundle, and a Jar Packager tool () which helps packaging up the bundle. Also, links to web pages () containing documentation and other information about Java Embedded Server are included. Further, access to Java Embedded Server Swing-based tools from within the module may be included.","An embodiment of the plug-in Java Embedded Server module () is accessed via a drop-down menu in Forte for Java\u2122 () entitled \u2018Java Embedded Server\u2019 () as shown in . As can be seen, the drop-down menu consists of three submenus entitled \u2018Manifest Generator\u2019 (), \u2018Jar Packager\u2019 (), and \u2018Product Info and Downloads\u2019 () which provide access to a selected feature of the Java Embedded Server module () identified by submenu name. The submenus are displayed by clicking on the \u2018Java Embedded Server\u2019 menu name () with the mouse (). By continuing to hold the mouse button down and dragging the mouse pointer over the desired submenu name, the submenu name is selected upon release of the mouse button. The result of selecting the submenu is the launching of the application to perform the selected submenu feature by the system.","Referring to , an example for the usage of Java Embedded Server module () by a bundle-writer for developing Java Embedded Server bundles follows. The bundle-writer first uses the Java Embedded Server code template tool to retrieve and organize code that can be used as a starting point for the remaining development (ST). The bundle-writer then finishes the code for the bundle (ST) and is ready to package the code to be used with the Java Embedded Server Framework.","In order to accomplish this, a valid manifest file for the Java Embedded Server bundle must be written. The bundle-writer uses the Java Embedded Server Manifest Generator tool () to create a valid manifest file (ST). Next, the bundle-writer uses the Jar Packager tool () to create the bundle's jar file (ST). The bundle-writer must then debug the bundle. Using the Forte for Java\u2122 debugger (), the bundle-writer can correct any problems that need to be fixed (ST). Using the supplied links within the \u2018Java Embedded Server\u2019 menu () to \u2018Product Info and Downloads\u2019 () which provides online Java Embedded Server documentation, the bundle-writer can find the material that may be a resource to what changes need to be made (ST). Further links are contained, including links to documentation, FAQ's, technical support that can be used by the programmer to come up with a solution to the problem. These supplied links may also be used as reference points during all stages in the bundle development cycle (ST). The code is compiled by the compiler () (ST) and the bundle-writer can update the jar file content with a click of the mouse () (ST). With the code compiled, the bundle is created and the process ends (ST).","An embodiment of the Java Embedded Server Code Template tool (), as shown in , is used to get a bundle-writer started writing Java Embedded Server bundles. The bundle-writer begins using the Java Embedded Server code templates (), which have been provided for the bundle-writer. The Java Embedded Server code templates are accessed through the \u2018New From Template\u2019 dialog box (). The \u2018New From Template\u2019 dialog box () appears when the \u2018New From Template\u2019 menu item is selected from \u2018Tools\u2019 menu (), similar to any template within Forte\u2122 for Java\u2122 (). As can be seen, the \u2018Java Embedded Server\u2019 folder () is listed under the \u2018Templates\u2019 folder () in the \u2018New From Template\u2019 dialog box (). In one embodiment, the Java Embedded Server templates () comprise the following:\n\n","Once the template file(s) appear in the Forte\u2122 for Java\u2122 Text Editor (), the bundle-writer can begin developing the bundle from sample code.","An embodiment of the Java Embedded Server Manifest Generator tool (), as shown in , is an aid in creating valid manifest files for Java Embedded Server bundles. The Manifest Generator () saves development time by providing each Java Embedded Server manifest header name  along with the description (), the syntax (), and an example of the use of the particular manifest header () (e.g., Bundle-Name). To start the Java Embedded Server Manifest Generator (), the \u2018Manifest Generator\u2019 menu item () is selected from the \u2018Java Embedded Server\u2019 menu (). Two text boxes are located near the top of the screen which hold the descriptions () and syntax () of the manifest header, a listing of each Java Embedded Server manifest header name to the left and its corresponding manifest header value () in the text field () to the right. Also, action buttons () appear at the bottom of the screen.","When first starting the Java Embedded Server Manifest Generator (), text is displayed inside each of the two help boxes at the top of the screen. These help boxes display the description () and syntax () of each manifest header (). To view the help file on a particular manifest header name , the name of the particular manifest header  is selected for the left help box or the corresponding text field () is selected from the right help box. The selection is made by clicking or tabbing to the area. A brief description () of the manifest header is displayed in the box labeled \u2018Manifest Header Description\u2019 () and the syntax () is displayed in the box labeled \u2018Manifest Header Syntax.\u2019","A particular header name () in the generated manifest file is included when the header's checkbox () is selected. When checking a header name (), the corresponding text field background changes from gray to white. The value of the header () is entered into the text field () immediately to the right of the header name (). Another way to include a header () into the manifest file is to type the value () into the text field (). As soon as the manifest header value () is entered into the text field (), a checkbox () gets checked.","Before or after entering the manifest header values (), the name of the manifest file to be generated is selected. If the file already exists, a prompt is given to overwrite the existing file. It is recommended to use the extension \u201c*.MF\u201d, \u201c*.mf\u201d, or \u201c*.txt\u201d when naming the manifest file. The reason is because these extensions are, by default, textual objects that Forte\u00b7 for Java\u2122 () recognizes.","After selecting the file name and entering in the manifest header values (), selecting the \u2018Create\/Edit\u2019 button () generates the manifest file. The manifest file is placed in a file in the text editor () to view its contents and\/or make any final modifications. To generate the file, but not start the editor, the \u2018Create\u2019 button () can be selected. Once the file is generated, a message reflecting the completion is displayed. To clear all entered data and start over, the \u2018Clear\u2019 button () can be selected. When finished, the \u2018Close\u2019 button () is used to exit.","In one embodiment of the Java Embedded Server Manifest Generator (), a simple template of all the possible Java Embedded Server 2.0-related manifest headers () is included. Once the template is chosen, all of the manifest headers () are put into a file in the editor. The bundle-writer fills in the necessary values () next to each header () that is being used. In one embodiment, the bundle's source files are parsed to generate the entire or at least portions of the manifest file.","When the bundle-writer is ready to package up the Java Embedded Server bundle using the Jar Packager (), select the contents to be packaged from the Explorer window () a shown in . For example, if the bundle is in the package com.my.company.bundle, one should select the \u2018com\u2019 folder () in the Explorer window (). Either one of the following can be used to start the Jar Packager ():\n\n","Various embodiments of the invention have been described above using the Java\u2122 environment running on a Solaris or Windows native platform. However, the methodology described is not limited in its implementation to a particular programming language, nor is the inclusion of the Solaris and Windows platform examples intended to be limiting as to the types of native platforms on which the invention may be employed. Accordingly, the invention is not limited to the particular embodiments or platforms described in the exemplary embodiments above, but rather is limited only of the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
