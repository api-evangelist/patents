---
title: Analysis hints
abstract: A system and method for assisting with analysis and recognition of ink is described. Analysis hints may be associated with a field. The field may receive electronic ink. Based on the identity of the field and the analysis hint associated with it, at least one of analysis and recognition of ink may be assisted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07643687&OS=07643687&RS=07643687
owner: Microsoft Corporation
number: 07643687
owner_city: Redmond
owner_country: US
publication_date: 20050318
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","A. Factoring","B. Redefinition","C. Inline Coding","D. Divorce","E. Rewriting","Analysis Hints as Context Nodes","Analysis Hint as a Type Specific Class","Analysis Hint And Ink Analysis"],"p":["1. Field of the Invention","Aspects of the present invention relate to computing systems. More particularly, aspects of the present invention relate to providing hints for handwriting recognition.","2. Description of Related Art","In addition to working with text, computers now have the ability to record and modify electronic ink. The electronic ink may be kept in its native form or may be recognized as text. Recognition of electronic ink is not always perfect. The recognition process may vary based on the legibility of a person's handwriting in addition to the context in which the person is writing.","Computing systems provide alternates to users such that a user may select which recognition result is correct for received handwriting. However, conventional representations of alternates do not address complex representations of electronic ink. For instance, conventional representations of alternates are limited to analyzing a single line or few lines of electronic ink. Computing systems did not account for contextual value of electronic ink extending beyond five or so lines.","Also, similar handwriting may have different meaning based on the context of the area in which someone is writing.","A system is needed that uses information relating to an input region to improve recognition.","Aspects of the present invention address one or more of the problems described above, thereby improving recognition results based on knowledge of expected content to be entered.","Aspects of the present invention relate to providing hints to handwriting recognition engine so as to more accurately recognize a user's handwriting. The hints may be associated with input regions. In some embodiments, the hints may be associated with a form. In other embodiments, the hints may be part of a context tree representing received handwritten ink.","This document is divided into sections to assist the reader. These sections include:","overview, characteristics of ink, terms, general-purpose computing environment, representation of alternates, objects and object relationships, application programming interfaces, lattice creation, and analysis hints.","It is noted that various connections are set forth between elements in the following description. It is noted that these connections in general and, unless specified otherwise, may be direct or indirect and that this specification is not intended to be limiting in this respect.","Overview","According to various examples of the invention, hints may be provided to a recognition engine. The hints may help in the analysis of a user's handwriting. The hints may take various forms. In some instances, the hints may be tied to a database of known values (names in a company address book) or to expected types of characters (numbers only). The hints may be associated with received ink alone. Alternatively, the hints may be stored as part of a tree that describes the content of a document.","With respect to a tree structure, the structure may include both electronic ink and textual representations of the ink. The tree may also contain non-ink content, including but not limited to native text, text recognized from ink, text recognized from speech, drawings, pictures, charts, presentations, spreadsheets, mathematical equations, musical notations, audio and\/or video clips, and other information. As the textual representations may vary based on context and legibility of a person's handwriting, alternate representations of the textual information may also be included in the tree structure. Aspects of the present invention include representation of the tree structure through the use of one or more lattices with alternate recognition results.","Using a data structure relating to the context of the received ink (with possible recognition results stored therein) the tree structure, a software operating system or application may readily traverse the data structure and obtain alternates when needed. The data structure may define various elements in a document. For instance a node in the data structure may correspond to an ink stroke, and may further classify that ink stroke as either a text ink stroke or a drawing ink stroke. The alternates may be modified in order by the hint associated with an input region.","The data structure may be represented as a tree structure. Of course, other data structures may be used as well (including but not limited to one or more tables, databases, directed acyclic graphs and the like).","This type of data structure may also associate document elements into meaningful groups, such as words, lines and paragraphs. Thus, if a software application maintains a tree structure that describes a paragraph of handwritten electronic ink, the leaf nodes may associate individual strokes of electronic ink with word nodes corresponding to the words in the paragraph. The tree structure may then associate the word nodes with line nodes corresponding to lines in the paragraph. Each line node may then be associated with a node corresponding to the paragraph. Further, a software operating system or application may maintain a tree or other data structure that associates a node corresponding to an electronic ink stroke with a recognition result. These data structures thus can be used to both define relationships between associated electronic ink strokes and improve the handling of alternate recognition results of the ink.","Yet another node may be an analysis hint itself. One can then cross link the hint to the recognition result and the result to the hint. Thus, one can query the hint to obtain ink or recognition results associated with the hint. Similarly, one can query ink strokes to determine recognition results as being associated with an analysis hint.","As described below, these data structures can be used with an ink analysis tool according to various examples of the invention to analyze electronic ink in a document. According to various examples of the invention, a software operating system or application may obtain an analysis of electronic ink within a document by first creating a data structure for a document. The data structure describes the relationship between document elements that have already been analyzed, and thus provides the context in which the new electronic ink will analyzed. Document elements may include non-ink elements including, for instance, an input field in a form where users are requested to write. This data structure or \u201cink analyzer object\u201d also includes the new electronic ink that has not been analyzed. That is, the ink analyzer object also includes electronic ink for which a relationship with other documents elements has not been established. The analysis hints may then be used to help the recognizer more accurately recognize the ink.","At least two operations may be performed on received ink. The first operation is a layout analysis and writing\/drawing classification process that analyzes the received ink and creates a tree structure. The second operation is a recognition process that recognizes electronic ink and returns text values for recognized ink from the tree structure, with the lattice including alternate recognitions of the electronic ink. Other operations may be performed on the received ink as well and are not limited to the analysis and recognizing processes described here. For example, layout analysis and writing\/drawing classification determines a local grouping of strokes. Recognition determines what words in a language (or shapes or other types of data) the strokes represent.","Recognition alternates may be associated with the lattice and forwarded along with parent documents or other files. Alternatively, the lattice and alternative recognition results may be created anew on each computing system. The results of the recognition operation are stored in a data structure. One embodiment of the data structure may be a lattice. Multiple lattice structures may be contained within an ink analysis structure as a tree of context nodes. When ink is persisted in a storage structure (for instance, ink serialized format or any other ink storage structure), one may include a persisted form of the ink analyzer which may or may not include recognition results. The recognition results, in one form as a lattice, may include text values for recognized ink and alternate recognition values. If one includes the recognition results, the stored recognition results may be exchanged between machines, thereby allowing a machine that does not have a recognizer the ability to modify which alternates are chosen for recognition results Thus, the lattice and alternates, once in existence, may be used on machines with and without recognizers. This ability may further support the extensibility of recognition results to all machines, irrespective of whether downstream machines have the ability to recognize ink or other inputs.","Lattice elements may be entities within the lattice that store (or at least reference) data. The data in the lattice elements are not limited to text. Lattice elements may include or reference any number of recognizable entities including but not limited to recognized ink, unrecognized ink, typed-in text, a mathematical equation, musical notations, and the like. For instance, if one was using a math recognizer, each one of the elements may have math XML (or the like) as the value of each element. Different elements may still reverence specific strokes and the next column, but the data is not limited to plain text.","Characteristics of Ink","As known to users who use ink pens, physical ink (the kind laid down on paper using a pen with an ink reservoir) may convey more information than a series of coordinates connected by line segments. For example, physical ink can reflect pen pressure (by the thickness of the ink), pen angle (by the shape of the line or curve segments and the behavior of the ink around discreet points), and the speed of the nib of the pen (by the straightness, line width, and line width changes over the course of a line or curve). Further examples include the way ink is absorbed into the fibers of paper or other surface it is deposited on. These subtle characteristics also aid in conveying the above listed properties. Because of these additional properties, emotion, personality, emphasis and so forth can be more instantaneously conveyed than with uniform line width between points.","Electronic ink (or ink) relates to the capture and display of electronic information captured when a user uses a stylus-based input device. Electronic ink refers to a sequence or any arbitrary collection of strokes, where each stroke is comprised of a sequence of points. The strokes may have been drawn or collected at the same time or may have been drawn or collected at independent times and locations and for independent reasons. The points may be represented using a variety of known techniques including Cartesian coordinates (X, Y), polar coordinates (r, \u0398s), and other techniques as known in the art. Electronic ink may include representations of properties of real ink including pressure, angle, speed, color, stylus size, and ink opacity. Electronic ink may further include other properties including the order of how ink was deposited on a page (a raster pattern of left to right then down for most western languages), a timestamp (indicating when the ink was deposited), indication of the author of the ink, and the originating device (at least one of an identification of a machine upon which the ink was drawn or an identification of the pen used to deposit the ink) among other information.","Among the characteristics described above, the temporal order of strokes and a stroke being a series of coordinates are primarily used. All other characteristics can be used as well.",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Terms"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Term","Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Ink","A sequence or set of strokes with properties."]},{"entry":[{},"A sequence of strokes may include strokes in"]},{"entry":[{},"an ordered form. The sequence may be"]},{"entry":[{},"ordered by the time captured or by where the"]},{"entry":[{},"strokes appear on a page or in collaborative"]},{"entry":[{},"situations by the author of the ink. Other"]},{"entry":[{},"orders are possible. A set of strokes may"]},{"entry":[{},"include sequences of strokes or unordered"]},{"entry":[{},"strokes or any combination thereof. Further,"]},{"entry":[{},"some properties may be unique to each stroke"]},{"entry":[{},"or point in the stroke (for example, pressure,"]},{"entry":[{},"speed, angle, and the like). These properties"]},{"entry":[{},"may be stored at the stroke or point level, and"]},{"entry":[{},"not at the ink level."]},{"entry":["Ink object","A data structure storing ink with or without"]},{"entry":[{},"properties."]},{"entry":["Stroke","A sequence or set of captured points. For"]},{"entry":[{},"example, when rendered, the sequence of"]},{"entry":[{},"points may be connected with lines."]},{"entry":[{},"Alternatively, the stroke may be represented"]},{"entry":[{},"as a point and a vector in the direction of the"]},{"entry":[{},"next point. In short, a stroke is intended to"]},{"entry":[{},"encompass any representation of points or"]},{"entry":[{},"segments relating to ink, irrespective of the"]},{"entry":[{},"underlying representation of points and\/or"]},{"entry":[{},"what connects the points."]},{"entry":["Document","Any electronic file that has a viewable"]},{"entry":[{},"representation and content. A document may"]},{"entry":[{},"include a web page, a word processing"]},{"entry":[{},"document, a note page or pad, a spreadsheet,"]},{"entry":[{},"a visual presentation, a database record,"]},{"entry":[{},"image files, and combinations thereof."]},{"entry":["Tree of Context Nodes","A data structure that describes the"]},{"entry":[{},"relationship between document elements that"]},{"entry":[{},"have already been analyzed and document"]},{"entry":[{},"elements that have yet to be analyzed. The"]},{"entry":[{},"data structure may optionally further include"]},{"entry":[{},"non-ink information (e.g., typed text, images,"]},{"entry":[{},"charts, and the like). This non-ink"]},{"entry":[{},"information may be used to aid in the"]},{"entry":[{},"recognition and\/or analysis of the ink content."]},{"entry":[{},"Further, the non-ink content may be"]},{"entry":[{},"annotated by the ink when an annotation"]},{"entry":[{},"engine is used. Because new content is"]},{"entry":[{},"availed to existing content, the existing"]},{"entry":[{},"content provides a context for the new"]},{"entry":[{},"information."]},{"entry":["Render or Rendered","The process of determining how information"]},{"entry":["or Rendering","(including text, graphics, and\/or electronic"]},{"entry":[{},"ink) is to be displayed, whether on a screen,"]},{"entry":[{},"printed, or output in some other manner."]},{"entry":["Computer-readable","Any available media that can be accessed by"]},{"entry":["medium","a user on a computer system. By way of"]},{"entry":[{},"example, and not limitation, \u201ccomputer-"]},{"entry":[{},"readable media\u201d may include computer"]},{"entry":[{},"storage media and communication media."]},{"entry":[{},"\u201cComputer storage media\u201d includes volatile"]},{"entry":[{},"and nonvolatile, removable and non-"]},{"entry":[{},"removable media implemented in any method"]},{"entry":[{},"or technology for storage of information,"]},{"entry":[{},"such as computer-readable instructions, data"]},{"entry":[{},"structures, program modules or other data."]},{"entry":["Computer storage media","\u201cComputer storage media\u201d includes, but is"]},{"entry":[{},"not limited to, RAM, ROM, EEPROM, flash"]},{"entry":[{},"memory or other memory technology; CD-"]},{"entry":[{},"ROM, digital versatile disks (DVD) or other"]},{"entry":[{},"optical storage devices; magnetic cassettes,"]},{"entry":[{},"magnetic tape, magnetic disk storage or other"]},{"entry":[{},"magnetic storage devices; or any other"]},{"entry":[{},"medium that can be used to store the desired"]},{"entry":[{},"information and that can be accessed by a"]},{"entry":[{},"computer."]},{"entry":["Communication media","\u201cCommunication media\u201d typically embodies"]},{"entry":[{},"computer-readable instructions, data"]},{"entry":[{},"structures, program modules or other data in"]},{"entry":[{},"a modulated data signal, such as a carrier"]},{"entry":[{},"wave or other transport mechanism, and"]},{"entry":[{},"includes any information delivery media."]},{"entry":["Modulated data signal","The term \u201cmodulated data signal\u201d means a"]},{"entry":[{},"signal that has one or more of its"]},{"entry":[{},"characteristics set or changed in such a"]},{"entry":[{},"manner as to encode information in the"]},{"entry":[{},"signal. By way of example, and not"]},{"entry":[{},"limitation, communication media includes"]},{"entry":[{},"wired media, such as a wired network or"]},{"entry":[{},"direct-wired connection, and wireless media,"]},{"entry":[{},"such as acoustic, RF, infrared and other"]},{"entry":[{},"wireless media. Combinations of any of the"]},{"entry":[{},"above should also be included within the"]},{"entry":[{},"scope of \u201ccomputer-readable media.\u201d"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, and removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data .","Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In some aspects, a pen digitizer  and accompanying pen or stylus  are provided in order to digitally capture freehand input. Although a direct connection between the pen digitizer  and the user input interface  is shown, in practice, the pen digitizer  may be coupled to the processing unit  directly, parallel port or other interface and the system bus  by any technique including wirelessly. Also, the pen  may have a camera associated with it and a transceiver for wirelessly transmitting image information captured by the camera to an interface interacting with bus . Further, the pen may have other sensing systems in addition to or in place of the camera for determining strokes of electronic ink including accelerometers, magnetometers, and gyroscopes.","It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well-known protocols such as TCP\/IP, Ethernet, FTP, HTTP and the like is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.","A programming interface (or more simply, interface) may be viewed as any mechanism, process, protocol for enabling one or more segment(s) of code to communicate with or access the functionality provided by one or more other segment(s) of code. Alternatively, a programming interface may be viewed as one or more mechanism(s), method(s), function call(s), module(s), object(s), etc. of a component of a system capable of communicative coupling to one or more mechanism(s), method(s), function call(s), module(s), etc. of other component(s). The term \u201csegment of code\u201d in the preceding sentence is intended to include one or more instructions or lines of code, and includes, e.g., code modules, objects, subroutines, functions, and so on, regardless of the terminology applied or whether the code segments are separately compiled, or whether the code segments are provided as source, intermediate, or object code, whether the code segments are utilized in a runtime system or process, or whether they are located on the same or different machines or distributed across multiple machines, or whether the functionality represented by the segments of code are implemented wholly in software, wholly in hardware, or a combination of hardware and software.","Notionally, a programming interface may be viewed generically, as shown in  or .  illustrates an interface Interface as a conduit through which first and second code segments communicate.  illustrates an interface as comprising interface objects I and I (which may or may not be part of the first and second code segments), which enable first and second code segments of a system to communicate via medium M. In the view of , one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although  show bi-directional flow and interfaces on each side of the flow, certain implementations may only have information flow in one direction (or no information flow as described below) or may only have an interface object on one side. By way of example, and not limitation, terms such as application programming interface (API), entry point, method, function, subroutine, remote procedure call, and component object model (COM) interface, are encompassed within the definition of programming interface.","Aspects of such a programming interface may include the method whereby the first code segment transmits information (where \u201cinformation\u201d is used in its broadest sense and includes data, commands, requests, etc.) to the second code segment; the method whereby the second code segment receives the information; and the structure, sequence, syntax, organization, schema, timing and content of the information. In this regard, the underlying transport medium itself may be unimportant to the operation of the interface, whether the medium be wired or wireless, or a combination of both, as long as the information is transported in the manner defined by the interface. In certain situations, information may not be passed in one or both directions in the conventional sense, as the information transfer may be either via another mechanism (e.g. information placed in a buffer, file, etc. separate from information flow between the code segments) or non-existent, as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation, e.g., depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration, and so this list should be considered illustrative and non-limiting.","This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are, however, other ways to implement a programming interface, and, unless expressly excluded, these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of , but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown, some interfaces can be described in terms of divisible sets of functionality. Thus, the interface functionality of  may be factored to achieve the same result, just as one may mathematically provide 24, or 2 times 2 times 3 times 2. Accordingly, as illustrated in , the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA, InterfaceB, Interface C, etc. while achieving the same result. As illustrated in , the function provided by interface I may be subdivided into multiple interfaces I, I, I, etc. while achieving the same result. Similarly, interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I, I, I, etc. When factoring, the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of , the functional spirit of interfaces Interface and I remain the same as with , respectively. The factoring of interfaces may also follow associative, commutative, and other mathematical properties such that the factoring may be difficult to recognize. For instance, ordering of operations may be unimportant, and consequently, a function carried out by an interface may be carried out well in advance of reaching the interface, by another piece of code or interface, or performed by a separate component of the system. Moreover, one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.","In some cases, it may be possible to ignore, add or redefine certain aspects (e.g., parameters) of a programming interface while still accomplishing the intended result. This is illustrated in . For example, assume interface Interface of  includes a function call Square (input, precision, output), a call that includes three parameters, input, precision and output, and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario, as shown in , it could just as well be ignored or even replaced with a meaningless (in this situation) parameter. One may also add an additional parameter of no concern. In either event, the functionality of square can be achieved, so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system; however, once it is recognized that precision is not necessary for the narrow purpose of calculating the square, it may be replaced or ignored. For example, instead of passing a valid precision value, a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly, as shown in , interface I is replaced by interface I\u2032, redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I\u2032, redefined to ignore unnecessary parameters, or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects, such as parameters, which are not needed for some purpose, and so they may be ignored or redefined, or processed elsewhere for other purposes.","It may also be feasible to merge some or all of the functionality of two separate code modules such that the \u201cinterface\u201d between them changes form. For example, the functionality of  may be converted to the functionality of , respectively. In , the previous 1st and 2nd Code Segments of  are merged into a module containing both of them. In this case, the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus, for example, formal Call and Return statements may no longer be necessary, but similar processing or response(s) pursuant to interface Interface may still be in effect. Similarly, shown in , part (or all) of interface I from  may be written inline into interface I to form interface I\u2033. As illustrated, interface I is divided into Iand I, and interface portion Ihas been coded in-line with interface I to form interface I\u2033. For a concrete example, consider that the interface I from  performs a function call square (input, output), which is received by interface I, which after processing the value passed with input (to calculate the square of an input) by the second code segment, passes back the squared result with output. In such a case, the processing performed by the second code segment (squaring input) can be performed by the first code segment without a call to the interface.","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in , one or more piece(s) of code (Divorce Interface(s), since they divorce functionality and\/or interface functions from the original interface) are provided to convert the communications on the first interface, Interface, to conform them to a different interface, in this case interfaces InterfaceA, InterfaceB and InterfaceC. This might be done, e.g., where there is an installed base of applications designed to communicate with, say, an operating system in accordance with an Interface protocol, but then the operating system is changed to use a different interface, in this case interfaces InterfaceA, InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment, and so an intermediary is used to make the old and new interfaces compatible. Similarly, as shown in , a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to, for example, interfaces Iand I, redesigned to work with DI, but to provide the same functional result. Similarly, DI and DI may work together to translate the functionality of interfaces I and I of  to a new operating system, while providing the same or similar functional result.","Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example, there may be a system in which a code segment presented in an intermediate language (e.g. Microsoft IL, Java ByteCode, etc.) is provided to a Just-in-Time (JIT) compiler or interpreter in an execution environment (such as that provided by the Net framework, the Java runtime environment, or other similar runtime type environments). The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment, i.e., to conform them to a different interface as may be required by the 2nd Code Segment (either the original or a different 2nd Code Segment). This is depicted in . As can be seen in , this approach is similar to the Divorce scenario described above. It might be done, e.g., where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol, but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed-base applications to the new interface of the operating system. As depicted in , this approach of dynamically rewriting the interface(s) may be applied to dynamically factor, or otherwise alter the interface(s) as well.","It is also noted that the above-described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways, serially and\/or in parallel, or with other intervening code. Thus, the alternative embodiments presented above are not mutually exclusive and may be mixed, matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that, as with most programming constructs, there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein, but nonetheless are represented by the spirit and scope of the invention, i.e., it is noted that it is at least partly the functionality represented by, and the advantageous results enabled by, an interface that underlie the value of an interface.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["201","201","202","203","204","202","202","201","204"]},"The stylus  may be equipped with one or more buttons or other features to augment its selection capabilities. In one embodiment, the stylus  could be implemented as a \u201cpencil\u201d or \u201cpen\u201d , in which one end constitutes a writing portion and the other end constitutes an \u201ceraser\u201d end, and which, when moved across the display, indicates portions of the display are to be erased. Other types of input devices, such as a mouse, trackball, or the like could be used. Additionally, a user's own finger could be the stylus  and used for selecting or indicating portions of the displayed image on a touch-sensitive or proximity-sensitive display. Consequently, the term \u201cuser input device\u201d, as used herein, is intended to have a broad definition and encompasses many variations on well-known input devices such as stylus . Region  shows a feedback region or contact region permitting the user to determine where the stylus  as contacted the display surface .","In various embodiments, the system provides an ink platform as a set of COM (component object model) services that an application can use to capture, manipulate, and store ink. One service enables an application to read and write ink using the disclosed representations of ink. The ink platform may also include a mark-up language including a language like the extensible markup language (XML). Further, the system may use DCOM as another implementation. Yet further implementations may be used including the Win32 programming model and the .Net programming model from Microsoft Corporation.","Representation of Alternates",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 3","FIG. 4","FIG. 3"],"b":["301","311","302","304","305","306","307","308","309"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 4","FIG. 3","FIG. 3"],"b":"401"},"It is appreciated that various nodes may be used in addition (or replacing those above) including a sentence node (that contains an entire sentence), a list node (that contains a list), and a list item node (that contains an element of a list).",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 5","FIG. 4","FIG. 5"]},"The lattice at F includes five columns. Each column includes alternates that represent alternate recognition results from a recognition engine. Column Frepresents the word \u201chello,\u201d as appearing in . Here, \u201chello\u201d may be referred to as the top alternate. The lattice column includes reference to the strokes that make up the word (here, strokes Sand S). The lattice column Falso includes additional alternates (here, \u201chellos\u201d and \u201chello.\u201d). Lattice column Freferences strokes S-Sand includes entries for \u201cthis\u201d and alternates \u201cthesis\u201d and \u201cThis\u201d. Lattice column Freferences strokes Sand Sand includes entries for \u201cis\u201d and alternate \u201ci5\u201d. Lattice columns Fand Fare separator (or spacer) columns. The lattice at G includes three columns. Lattice column Greferences strokes S-Sand includes \u201ca\u201d and alternates {an, or, aw, An, attest, detest}. Lattice column Greferences strokes S-Sand includes recognition result \u201ctest\u201d and no alternates. Lattice column Gis a separator column.","A tree structure may contain one or more lattices. With respect to , the lattice at F and the lattice at G may be combined together into a larger lattice. The lattice as a combination of the lattice at F and the lattice at G may include a total of nine columns, with the ninth column being a separator column between the lattice at F and the lattice at G. Specifically, this new separator column may be added as separator column F. Likewise, one may separate lattices into smaller lattices. The separate lattices may be sent individually or in a group to a recognizer or queried for information. If a separator column starts or ends a smaller lattice, the separator column may be removed so that columns with content remain. Of course, separator columns may remain as an alternative approach.","The recognition results and alternates stored in each lattice column may be referred to as lattice elements. Each lattice element may include a designation of how many strokes were used to produce a recognition results. For instance, the second entry in lattice column F\u201chellos\u201d includes a designation (here, \u201c2\u201d) that represents how many strokes were used to form the recognition result. For column F, the recognition result \u201cthis\u201d used three strokes to form this result. However, the recognition result \u201cthesis\u201d used five strokes to form this result. Next, each lattice element includes a pointer to the next column. Here, the lattice elements of column Fpoint to column F. Similarly, the \u201cthis\u201d lattice element of column Fpoints to column Fhas the next column. However, the \u201cthesis\u201d lattice element of column Fpoints to no existing column (here, represented as column 5). Of course, the pointer of each lattice element to a nonexistent column may instead be a pointer to a predetermined column that represents the end of a lattice.","A designation of lattice elements among the columns may be referred to as a lattice path. The lattice path indicates a particular alternate recognition value (e.g., a storing a particular interpretation of ink).","The lattice arrangement supports a representation of operations on selection across multiple words.  shows an example where a user has selected the words in line F. the resulting selection may be represented as a selection lattice (namely, a collection of selected nodes in the lattice). Here, the selection lattice includes columns F-F.  shows an alternate selection of words from two lines. Here, the selection includes {this is test} and the resulting selection lattice may include columns F, F, F, G, and G. Separator column Gmay or may not be added in automatically to properly space columns Fand Gfrom each other.","The lattices of  were created based on the line level nodes of . Lattices may be formed at any of the levels of .  shows a lattice corresponding to paragraph node H. Here, a total of nine columns are shown. The lattice columns represent the word nodes of  and their alternates. The lattice of  shows a lattice corresponding to word node A.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 8","sub":"8 "},"This is because in some languages a separator string is not used between lines. For instance, in character-based languages (e.g., Chinese), spaces may not be used. In these situations, an empty character may be used in place of the separator column. A recognizer may provide the separator column or empty character as needed. For instance, in an ink sentence with English words followed by Japanese characters followed by more English words, one may parse and direct the various portions to appropriate recognizers (for instance, by identifying the ink with a language or recognizer). The English recognizer may return alternates bounded by separator spaces. The Japanese recognizer may return alternates bounded by empty characters.","The outputs may be merged so as to produce a single lattice with the combination of separator columns and empty characters separating the results from different recognizers. Of course, using recognizers that produce the same type of separating space\/empty character (for instance, English and French recognizers) may result in only one separating space\/empty character being stored, not two, as the same type of linguistic pattern is used.","Objects and Object Relationships","This section and the following section (Application Programming Interfaces) describe the objects, their relationships between each other, and interface for interacting with the various models.","Various relationships exist between the lattice objects described above.  shows illustrative examples of these relationships. Some, all, or additional information may be included in each object described below.","Lattice  is an object that may be created by a parser or recognizer. The lattice may be serialized so as to be easily accessed from a single node. One may access the entire lattice by requesting the lattice from the given node. One may obtain recognition data at different levels within the lattice by requesting information from the lattice object. One may create a lattice at any node by merging or splitting existing lattices. The lattice returned for a node may only reference strokes found under that node. To see all recognition data in a tree in a single lattice, one may request a lattice associated with a root node of a tree.","The lattice  may include:\n\n","Separators (left and right, up and down, and others) may be stored as part of a column or as disconnected columns within the lattice. These left and right separators generally only have a single element with the string data for the separator. These left and right separators are marked as the top alternate for these columns. However, they are not returned as an alternate when requesting alternates from the lattice. This allows for easier merging of alternates in the lattice. Alternatively, these separator columns may be returned or removed as needed.","Various methods may be performed on the lattice. These include:\n\n","Lattice column  is a column in the lattice. The lattice column generally corresponds to the segmentations in the lattice. Alternates are referenced by storing a pointer to the various lattice elements in each column. If the lattice element is the top alternate, then the column will reference the lattice element as the top alternate.","The lattice column may include:\n\n","The following methods may be performed on the lattice column:\n\n","Lattice element  may reside in each column. The lattice element is a portion of a lattice path. The lattice element stores the string data associated with a stroke or word. Strokes associated with a lattice element are generally taken from the beginning of the list of strokes associated with a lattice column. This allows another lattice column to contain a subset of strokes and have separate lattice elements associated with the subset. A lattice element may be designated by the lattice column as the top alternate for the column.","The lattice element may include:\n\n","Methods operable on the lattice element may include:\n\n","Lattice path  is a path through the lattice columns and includes a collection of lattice elements across multiple lattices. The lattice path may include:\n\n","The following methods may be performed with the lattice path:\n\n","Alternate Collection  is an object that references the selection lattice. The alternate collection may include:\n\n","The following provides a sample of methods that may be useable with an alternate collection. Other methods are described below in the following sections:\n\n","The various objects may have methods associated with them as well. These methods may be called by an application programming interface (API). The following classes may be used to better handle information in a tree.","First, a method may be used to obtain alternates from an ink analysis engine. A first method on the ink analysis object includes a \u201cget alternate\u201d method which returns a collection of alternative objects for the entire tree, specified nodes, or specified strokes. Here, this method requests context nodes referencing supplied nodes. So, for instance, one may request alternates from a given line node. The system will respond with the collection of alternates, or at least a top-level alternate, for the given node.","A new class of objects (an analysis alternate class) may be provided. A method operable on the analysis alternate class may return a text recognition confidence level. Here, one may determine the level of confidence data in a lattice element. Also, another method operable on the analysis alternate class includes a \u201cget recognized string\u201d method. Here, this method obtains a recognition result associated with the lattice elements in this alternate's lattice path.","Second, an analysis alternate collection class of objects may also be used. This class includes a number of methods including a \u201cget this analysis alternate\u201d, which may be the result of a returned value in the \u201cget alternates\u201d method on the ink analyzer above.","The following methods may be used with an analysis context tree. First, a \u201cget alternates\u201d method may be applied to the analysis alternate collection. This method may include a specification of the context nodes for which alternates are sought. Second, another \u201cget alternates\u201d method may be applied to the analysis alternate collection, but here the maximum number of alternates may also be specified. For instance, referring to lattice column Gof , one may request a few alternates as compared to the entire alternate collection associated with the lattice column.","A third \u201cget alternates\u201d method may request alternates for specified strokes to be returned.","Another method may include a \u201cmodify top alternate\u201d method in which one may modify which alternate should be specified as the top alternate. For instance, if the user selected one alternate over another, the selected alternate may be considered the top alternate for future selections. Yet another method may include a \u201cmodify top alternate\u201d method that automatically confirms the alternate selection so that it remains as the top alternate while other ink analyses occur around it. For instance, a user may select a new top alternate. The new top alternate may have a different segmentation of the tree. This new segmentation is taken as the preferred segmentation of the tree based on the selection of this alternate. The preferred segmentation alters the shape of the tree by altering the grouping of strokes and\/or words. In this regard, each selection of a new alternate may ripple into a completely new tree.","Alternates may be obtained by passing nodes or strokes to the analysis context. These strokes need not be from contiguous portions of the context tree (see, for instance,  above). The ink analyzer object may return an array of leaf context nodes where the strokes in the nodes match the strokes or nodes passed via the GetAlternates( ) method. From these leaf nodes, the client can move its focus as it obtains parent or children nodes or strokes to explore the complete tree structure as if these nodes were in the top alternate.","A lattice alternate is a collection of string data for words and the strokes corresponding to those words, along with properties (recognition confidence, etc.).","The leaf nodes may be created one per word. To create parent nodes, one may consider multiple leaf nodes that may or may not stem from the same stroke collection. Non-leaf nodes may be further applied as alternates.","Application Programming Interfaces","Various application programming interfaces may be used with aspects of the invention. The following lists application programming interfaces and their functions.","The analysis context may be a root node in a tree. A set of methods directed to analyzing the ink in the analysis context may be exposed. The analysis context is the root node in the context trees described herein. The ink analyzer object that relates to the analysis context may expose at least two sets of methods.","First, a \u201cget alternates\u201d set of methods may be exposed. Here, the \u201cget alternates\u201d set may include a variety of definitions of which four are described here. GetAlternates(Context Node [ ] nodes) requests alternates from a context node or nodes (for instance, line, word, paragraph, or other nodes) and specifies the nodes for which the alternates are to be obtained. For example, as applied to , GetAlternates applied to node A would return the collection of \u201chello,\u201d, \u201chellos\u201d, and \u201chello.\u201d GetAlternates may also be applied based on specification of one or more strokes. For instance, GetAlternates applied to strokes S-Smay return the collection of \u201cthis\u201d, \u201cthesis\u201d, and \u201cThis\u201d. The text returned may or may not include additional strokes. In the instance of \u201cthesis\u201d, additional strokes S-Smay also be used.","The GetAlternates method may or may not include an indication of the maximum number of alternates to be returned. So, if the maximum number of alternates was set to two, then GetAlternates(node A) would return \u201chello,\u201d and \u201chellos\u201d. but not \u201chello.\u201d","Further, if no context node or stroke is specified, GetAlternates may return alternates for the entire analysis context.","Second, another method may include Modify Top Alternate. Here, the modify top alternate represents what the analysis context will look like if a selected alternate is applied. In the example of , if the alternate \u201cthesis\u201d is chosen, then the result from modify top alternate may include \u201chello, thesis a test\u201d. For each alternate returned in GetAlternates above, a different yet fully complete analysis context tree may be viewed. The get alternates and modify top alternates are views into the lattice described above. Further, modify top alternates can also modify the tree structure to match the segmentation of the newly selected alternate.","The alternate modification may include the ability to specify whether the alternate selection should prevent future analysis from replacing the current selection of an alternate. This specification may be, for instance, a Boolean argument specified in the call to the \u201cmodify top alternate\u201d method as confirmation that the top alternate should be replaced.","Each alternate object returned from get alternates may reference an array of leaf context nodes for the set of strokes or nodes passed into the get alternates method. Using the get alternates method and other methods for obtaining strokes and nodes, a user may obtain parent and child nodes and strokes and evaluate how the tree will look if an alternate is applied.","The alternate trees may be created ahead of time or may be dynamically created once requested by the get alternates method. One advantage of waiting until after one has requested the alternates is that this approach minimizes unneeded creation of unwanted trees. In this latter approach, once the alternate object is created, it may only reference the relevant leaf ContextNodes. If the tree is further explored by the user, (by asking for the parent of a leaf node), each parent node may be dynamically created as requested.","The following methods may be used with the ink analyzer object. These methods aid finding nodes and converting between context nodes and strokes. StrokesToContextNodes takes a collection of strokes and returns an array of context nodes that reference the stroke. In a first approach, each stroke may be referenced by only one node (while parent and grandparent nodes may in turn reference the one node). Here, only a top alternate references a stroke. In an alternative approach, the combination of alternates in a reference a single stroke. In particular, more than one context node may reference a stroke (for instance, strokes Sand Smay be referenced by lattice columns Fand F, corresponding to nodes B and C). In these cases, StrokesToContextNodes may return the context nodes that reference the stroke. In responding to a StrokesToContextNodes method, the set of returned context nodes may or may not include nodes that contain strokes outside of passed strokes.","In some cases, the nodes may be all the same level. In other cases, the nodes may include a hierarchy of nodes (for example, including paragraph and root nodes). The hierarchy of nodes may be used to provide a complete picture of the context nodes that reference supplied strokes.","For instance, in , one may request nodes associated with strokes then all strokes associated with the returned nodes. If one started with stroke S, the result may include strokes Sand S. Likewise, if one started with strokes Sand S, the result may yield strokes S, S, S, and S.","The next method, ContextNodesToStrokes passes context nodes and returns a collection of strokes contained in the referenced context nodes. Word, line, and paragraph, and root nodes may be passed with this method. Other types of nodes may be included as well including music notation nodes, math nodes, drawing nodes, picture nodes, chart nodes, and nodes that define a writing region, an alignment level, and the like.","With respect to the analysis alternate class, three methods may be associated with the class. First, RecognitionConfidence allows one to retrieve the confidence of a recognizer with a result. Second, RecognizedString specifies the string value of an alternate. Using RecognizedString, one may request values of alternates associated with nodes without having to incrementally traverse the context nodes as described above. Third, GetProperty allows one to obtain any properties set on the lattice object by a recognizer of an object in the analysis alternate class (for instance, a recognition confidence). Here, one may specify a GUID or other identifying information and obtain the value of the property.","Two methods may be used to obtain information related to text ranges. First, a GetNodesFromTextRange allows one to obtain specific context nodes based on a text range. The text range may be the start and stop positions, the start and length information, or other representations of text ranges. Using the ink in  and the lattice at F in , one can map between a text range (7, 4) to obtain strokes ,,. Where 7 means skip over the first 6 characters \u201chello,\u201d and 4 means take the next 4 characters. () would yield -. The system may prevent the splitting of a word from the recognizer, so (0,1), (0,2), (0,3), (0,4), (0,5), and (0,6) will all yield s, s.","The second method GetTextRangeFromNodes allows one to obtain specific text ranges from supplied context nodes. From the supplied context nodes, one may receive start and stop positions, the start and length information, or other representations of text ranges. This method may expand a set of strokes to ensure that only complete words are included.","The context node objects may be the same. Alternatively, they may be different based on what node they reference. For instance, word and line-specific context nodes may have additional properties including values associate with strokes (for instance information relating to ascender, descender, midline, and baseline characteristics of the ink). The return values of these properties may include various points. For instance, a first point may describe the x,y coordinates of the start of the line. The second point may describe the x,y coordinates of the end point. The values may be calculated at the line level by using the start and end values of contained ink words or may be an average for the contained ink words. This may apply to line nodes, paragraph nodes, list nodes, and list item nodes, among others.","The system may support additional classes that relate to the status of an analysis of ink. For instance, the system may include an analysis status class. Here, an application may want to know if an analysis run was successful, without any errors. The results of the analysis operations may return an analysis status object that summarizes the state of the run. The object may include information regarding the success of the analysis. For instance, the object may include a simple Boolean representing the success of the analysis (for instance, \u201ctrue\u201d if the analysis run did not have any warnings or errors). If the run was not successful, the object may include a list of warnings and the impact of the warnings. The object may include a list of regions changed by the analysis.","Lattice Creation",{"@attributes":{"id":"p-0127","num":"0178"},"figref":"FIGS. 11 and 12","b":["1101","1104","1103","1105"]},"Although it's true that the recognizer can use this context to improve recognition of nearby ink, it is also important that the recognizer will never revert to incorrect recognition results for the pinned ink itself. At various times, portions of the page may need to be re-analyzed (e.g. if another stroke is written nearby). In these cases, pinned ink would retain the corrected results, rather than reverting to the old, incorrect result, or some new, also incorrect result.",{"@attributes":{"id":"p-0129","num":"0180"},"figref":["FIG. 11","FIG. 12"]},{"@attributes":{"id":"p-0130","num":"0181"},"figref":"FIG. 12","b":"1"},"Next,  includes a second analysis context tree having analysis context F, paragraph G, line H, and ink word \u201care\u201d I. Here, the user has precisely identified (or \u201cpinned\u201d) the ink word \u201care\u201d I.","Finally,  includes a third analysis context tree having analysis context J, paragraph K, line L, and ink word \u201cyou?\u201d M. Alternate  off of this analysis context tree includes paragraph K\u2032, line L\u2032, and ink word \u201cyon\u201d M\u2032.","Alternatively, the three trees shown in  may be combined or remain as a single tree. For instance, if a user selects one alternate, that alternate may be fixed while the other alternates for other nodes may still be modified based on subsequent selections of alternates. Here, the nodes may remain as a single tree, as compared to separating the nodes into separate trees.","Analysis Hints","Analysis during handwriting recognition is often slow because of the complex analysis of shapes of the strokes and efforts to match patterns along with the number of values that a handwriting recognition program processes. As described herein, analysis hints minimize the possible list of text values for each field that parsers and recognizers use to recognize handwriting so there are fewer options to match against and, thus, a better chance of getting the correct recognition. More specifically, for each field a different analysis hint is constructed to describe the expected type of content. The field can be bound to some characteristic. A state field is bound to some list of know states. In one aspect, the present invention may be used to determine which strokes should be associated or bound to the available analysis hints. Depending on how this is calculated, it will determine the recognition values per analysis hint based on the number of strokes and the types of hints (word lists, guides, etc) associated with the analysis hint.",{"@attributes":{"id":"p-0135","num":"0186"},"figref":"FIG. 13","b":["1301","1302","1303","1304","1305","1306","1301","1307","1308","1314","1302"]},"For each one of these fields , a different analysis hint can be constructed to describe the expected type of content. The name field  can be bound to all employee names in the company (for instance). The State field  can be bound to the list of know states for a particular country. The country field  can be bound to a fixed list of countries. And the telephone field  can be bound to just numbers, no letters.",{"@attributes":{"id":"p-0137","num":"0188"},"figref":["FIG. 14","FIG. 14","FIG. 14","FIG. 14"],"b":["1401","1402","1401","1406","1403","1406","1406","1402","1407"]},"One of the primary applications of analysis hints may be with free-form, form filling applications. For example, one may scan in a government form (a tax or driver's license form) and associate various regions with a hint (for example, a zip code field may be inclined to recognize numbers only as based on an analysis hint associated with the field). In free-form fields, a user may sloppily allow his or her handwriting to spill from one field to another.","As described above, analysis hints in some embodiments may be represented as context nodes in a context tree. Here, analysis hints may represent another type of non-ink context node. By including analysis hints in the collection of context nodes, one may easily associate the gap between ink content, non-ink content for annotations and hints. This is a more seamless integration for advanced users of the API.","The analysis hint class derives from the context node. The context node may take a number of forms including a root node, an inkword node, a stroke node, and an analysis hint node. Of course, other nodes are possible and may be used in place of these nodes (for instance, a sentence node in place of a line node). Also, the analysis hint may be implemented as something other than a context node and serve the same set of purposes.","Another property of the analysis hint context node is a location property. The location property indicates where the analysis hint exists. For instance, the location property may indicate the size and location of input regions  and .  show various examples of how input regions may interact in their physical location. In , input region A  is separate from input region B . Here, ink strokes fall into one of regions A  or B . In , region B  overlaps region A . To address this conflict, region A  's location may be set to \u2018global\u2019 or \u2018infinite\u2019, thereby having it act as a residual input region for strokes not associated with input region B . Alternatively, the system may prevent regions from overlapping each other. This alternate approach may simplify the handling of the regions.","When a hint with a finite region intersects with the one hint that has an infinite region, the following may occur:\n\n","For instance, the following table lists input regions, whether they intersect, values, and results. For reference, a factoid is a property associated with the analysis hint that indicates what type of input is expected. Factoids may include the following: Digit, Email, Web-related information (for instance a URL or Web address), FileName, One character, percent, PostalCode, upperchar, currency, and the like.",{"@attributes":{"id":"p-0144","num":"0197"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Settings of Hint","Settings of Hint",{},{}]},{"entry":["Region A 1501","Region B 1502","Intersection?","Result"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Factoid = web","Factoid = digit","No","OK - regions operate"]},{"entry":[{},{},{},"independently of each other"]},{"entry":["Factoid = web","Factoid = digit","Yes","Unclear which region takes"]},{"entry":[{},{},{},"precedence"]},{"entry":["Factoid = web","Factoid = digit","Yes","Region B overrides region A."]},{"entry":["Location = infinite","Location is fixed size",{},"Region A loses the web"]},{"entry":[{},{},{},"factoid for the region"]},{"entry":[{},{},{},"occupied by hint B"]},{"entry":["Factoid = web","Location is fixed size","Yes","Because Hint A has a factoid"]},{"entry":["Location = infinite","Override Language",{},"value and Hint B does not,"]},{"entry":[{},"ID = ABC",{},"Hint B will inherit the factoid"]},{"entry":[{},{},{},"value from infinite Hint A."]},{"entry":[{},{},{},"However, hint B will have a"]},{"entry":[{},{},{},"separate language specified"]},{"entry":[{},{},{},"(here, override language"]},{"entry":[{},{},{},"ABC)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The Language ID is an identification of the language being used. For instance, American English may be listed as a first ID and German list as a second ID.","The recognition engine and\/or the analysis engine can create a context link (also referred to herein as a ContextLink) between the AnalysisHint ContextNode and the highest common parent ContextNode of the data associated with the analysis hint. Alternatively, the content link may also link to lower ContextNodes. A context link (ContextLink) allows one to access strokes once one knows the name of the analysis hint node (by being able to use the context link to traverse the context tree to arrive at the strokes). Similarly, one can determine recognition results from knowledge of the strokes (here, one can hit test the stokes to determine with which analysis hint they are associated and then traverse the context tree based on the context link to arrive at the recognition results for the ink). In other words, a ContextLink is a way of expressing an association between otherwise unrelated ContextNodes in the tree. The association is one of a set of predefined or extensible relationships, each having specific meaning.","All of the above bindings can aid in the analysis of the handwriting recognition. By scoping down the possible list of text values for each field the parsers and recognizers used to recognize the handwriting will have fewer options to match against and thus a better chance of getting the correct recognition.","Various approaches can be used to associate strokes with analysis hints and their associated regions.","The following code sample is an illustrative example of an analysis hint-to-stroke association that may be used in accordance with aspects of the invention. Here, the system may group ink with an analysis hint or field based on the location of the ink compared to the field. For instance, if >50% of a bounding box of an ink word resides in a field, then the system may consider the ink word to be associated with the field or analysis hint.",{"@attributes":{"id":"p-0150","num":"0203"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Establish the links between AnalysisHint nodes and"},{"entry":"\/\/ the most common parent of all the nodes that"},{"entry":"\/\/ belong to the hint"},{"entry":"AddHintsLinks(page)"},{"entry":"{"},{"entry":"\u2003For each hint in the list of hints for the page do"},{"entry":"\u2003{"},{"entry":"\u2003\u2003If the hint is not a global hint then"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Clear node candidate list"},{"entry":"\u2003\u2003\u2003\/\/ First determine which leaf nodes belong to the hint"},{"entry":"\u2003\u2003\u2003For each leaf node in the page"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003If IsNodeInsideHint return true then"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003Add the node to the candidate nodes list"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\/\/ See if all the children of a container node are part of the hint"},{"entry":"\u2003\u2003\u2003While there are node candidates left do"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003Clear the votes"},{"entry":"\u2003\u2003\u2003\u2003Clear the list of parent nodes"},{"entry":"\u2003\u2003\u2003\u2003\/\/ Each node will vote for its parent"},{"entry":"\u2003\u2003\u2003\u2003For each node in the candidate node list do"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003If the node's parent is not null then"},{"entry":"\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003If the votes list contain the parent node then"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003Increment the votes for the parent node"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003by 1"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003Set the votes for the parent node to 1"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003If the parent node does not belong to the list of"},{"entry":"\u2003\u2003\u2003\u2003\u2003parent nodes then"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003Add the parent node to the list of parent"},{"entry":"\u2003\u2003\u2003\u2003\u2003nodes"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003If any parent node has all its children linked to this hint then"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003Remove all the children from the list of candidate nodes"},{"entry":"\u2003\u2003\u2003\u2003\u2003for the hint"},{"entry":"\u2003\u2003\u2003\u2003\u2003Add this parent node to the list"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\/\/ Associate all the nodes in the candidate nodes for the hint list"},{"entry":"\u2003\u2003\u2003with link"},{"entry":"\u2003\u2003\u2003For each node in the list of candidate nodes for the hint do"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003Add the link between the node and the hint"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\/\/ Clean up the hint by removing unused links"},{"entry":"\u2003\u2003\u2003For each link in the hint's list of link do"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003If the link is was not updated this time remove it"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003Else"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\/\/ This is the case of a global hint"},{"entry":"\u2003\u2003\u2003Add the link between the hint and the root node"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"\/\/ Node to Analysis Hint Association."},{"entry":"\/\/ Determines if the node is inside a hint."},{"entry":"\/\/ This is done by examining all the strokes associated"},{"entry":"\/\/ with this node and check if enough portion of"},{"entry":"\/\/ the strokes fall inside the location of the node."},{"entry":"Bool IsNodeInsideHint(node)"},{"entry":"{"},{"entry":"\u2003Set the percentage inside variable to 0"},{"entry":"\u2003If the node is a hint node return false"},{"entry":"\u2003If the location of the node is infinite return true"},{"entry":"\u2003If the location of the node is empty return false"},{"entry":"\u2003If the node is a leaf node"},{"entry":"\u2003{"},{"entry":"\u2003\u2003If the node has strokes then"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Set the count of points outside the hint to 0"},{"entry":"\u2003\u2003\u2003Set the count of points inside the hint to 0"},{"entry":"\u2003\u2003\u2003For each stroke of the node do"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003For each point of the stroke do"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003If the point in inside the hint then"},{"entry":"\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Increment the count of point inside the hint"},{"entry":"\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003Else"},{"entry":"\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Increment the count of points outside the hint"},{"entry":"\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003If the percentage of points inside the hint is greater than the"},{"entry":"\u2003\u2003threshold return true, otherwise return false."},{"entry":"\u2003}"},{"entry":"\u2003Else if this is a container node"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/ If any of the node's children falls outside the hint return false"},{"entry":"\u2003\u2003For each subnode of the node do"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003If IsNodeInsideHint for the subnode returns false then"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003Return false;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003Return true;"},{"entry":"\u2003}"},{"entry":"\u2003Return false"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The analysis hint may be a type of class added to the available types of context nodes. An analysis hint instance specifies a location in an application's document space where a specific recognition or analysis classification is expected. For example, in a rectangular area where ink input is expected, such as a name field applications can specify that they only expect to have regular word written in this area. This reduces a recognition engine's chance of detecting drawings, lists, shapes etc. in this area.","A number of methods may be used with the analysis hints to obtain information from or push information to the analysis hints. The following is an illustrative list of the various methods that permit interaction with the analysis hint:\n\n","The ink analyzer may include several helper methods to aid in the creation, deletion and manipulation of AnalysisHint objects.\n\n","If an AnalysisHint already exists that has an infinite location, that hint will be returned.","One application of analysis hints is in the realm of forms. The form factor and ability of stylus-based computers present an opportunity for people to enter and capture digital information on location with an ease of pen and paper. This form filling scenario has been a significant theme for stylus-based computing applications; it is a natural way of transitioning from paper form while having the benefit of digital format and storage.","For form filling scenarios, there are cases where handwritten inputs need to be converted to text (recognized) accurately at the time of input to reduce or eliminate data conversion later, e.g. in filling out driver license application form by an applicant. There are also cases where it is more important to quickly capture the information and allow conversion at later time, for example a doctor filling out information after diagnosing a patient. For the first cases, the form can be designed specifically for a stylus-based computer, e.g. with large gaps between fields so no ambiguity of which ink strokes belong to which field or by converting it in place so incorrect recognition can be detected and corrected right away.","For the latter cases, the goal is more toward quick input, thus there is no luxury of asking intermediate correction or having large gaps between fields. In fact, it may be preferable to retain the paper form format as much as possible to eliminate possible retraining\/confusion on the part of the user due to layout change (scanned paper form).","Due to the density of fields in such forms, there is higher probability that a stroke meant for a field is partially written on nearby fields instead. This is especially true for ascenders, descenders, dots of \u201ci\u201ds or \u201cj\u201ds, \u201ccrosses\u201d of \u201ct\u201ds, accent marks etc.  shows an example where ink bleeds from one field to a neighboring field. Here, form  includes three fields , , and . Ink , , and  reside in the fields, respectively. However, ink  \u201cJohn\u201d extends into field . Likewise, ink from field  spreads into both fields  and .","When the fields on the form are aligned horizontally or positioned next and close to each other, it is often the case that the user does not have enough room to fit all the necessary ink in the fields. This forces the user to start and\/or end the ink outside and beyond the defined field.  shows an example of an email address form with field  and password field . Here, ink  spreads beyond the bounds of field . Similarly, ink  spreads beyond the bounds of field .","Thus, a simple containment algorithm is not always sufficient to determine where each stroke belongs. To support these scenarios, one can use layout analysis, usually used for free form ink analysis, to link ink with fields.","During a layout analysis, based on spatial and temporal information of strokes, the algorithm determines the structure (layout) of the ink document: what strokes make up a word, what words make up a line, and what lines make up a paragraph.","Having the correct layout, it then can be determined that the cross of the \u201cT\u201d and dot of the \u201ci\u201d in \u201cThird St.\u201d (ink ) above is part of the \u201cStreet address\u201d field , and not part of \u201cLast name\u201d field . Similarly the \u201chotmail.com\u201d ink strokes  are known to be part of \u201cEmail address\u201d field , and not \u201cPassword\u201d field .","Aspects of the present invention provide a way for developers to add \u201cAnalysis Hints\u201d to specify the location and type of information expected on every field in a form. The hint is designed to assist a handwriting recognition engine (or handwriting recognizer) to recognize text more accurately, for example, if a number is expected in a field then a handwriting stroke is recognized as \u201c9\u201d instead of letter \u201cg\u201d.","Free form layout analysis is part of an ink parser to determine the layout of a document: which strokes make up a word, which words make up a line, which lines make a paragraph etc. Ink analysis technologies in accordance with aspects of the present invention may be spatial only. Alternatively, analysis technologies in accordance with aspects of the present invention may further include both spatial and temporal information to determine the layout of a document regardless of writing orientation. In this regard, analysis accuracy increases with the density of writing or with the increased spacing of fields on a document. The form filling scenario usually produce less dense handwriting, thus potentially not enough information to do layout analysis with high accuracy. However, the existence of analysis hints can assist layout analysis to produce accurate layout analysis.",{"@attributes":{"id":"p-0165","num":"0274"},"figref":"FIG. 20","b":["2000","2001","2002","2003","2001","2004","2005","2002","2004","2005","2003","2004","2005"]},"Results of layout analysis can be used to associate ink strokes to a field more accurately by the following rules:\n\n","It is appreciated that the percentages provided herein are for example only. For instance, a majority (listed above as >80%) may alternatively range to >50% to 100% as a threshold. There is no predefined limit to the percentages. Rather, one may alter the values based on a user's handwriting skills to more accurately parse the user's handwriting. Alternatively, the percentages may be fixed by implementation of the system. In any event, the particular numbers are for illustration only.","These rules are represented in the flowchart of . In step , the system determines whether >50% of a word region overlies a field. If yes, then the system associates all strokes of the word region with the field in step . If no from step , the system determines in step  whether >80% of strokes overlie a region. If yes, then the system associates all strokes with the field in step . If no, then the system determines if a line spans several fields in step . If yes, then the system breaks the line into multiple lines in step . If no, from step , then the system determines if several lines are in a field in step . If yes, then the system combines the lines in step . If no, then the system repeats to step  or does not modify the word analysis in step .","The existence of Analysis Hints can be used to assist layout analysis as described below.","First, having analysis hints usually implies restricted handwriting. Orientations of lines inside and around the hint are usually similar to that of hints orientations. Having this information restricts the layout analysis to only produce such hypotheses, thus improving accuracy and performance. The following are errors that may be corrected using analysis hints.\n\n","Second, a single analysis hint signifies a unit of layout structure. Thus, if several structures exist in one analysis hint, it should be evaluated whether combining them into one structure is also possible. If it is, then the combined structure is preferable.",{"@attributes":{"id":"p-0172","num":"0287"},"figref":["FIG. 3","FIG. 24","FIG. 24"],"b":["2401","2402","2403","2402","2403","2401"]},"Third, when an analysis hint exists for a recognizer having a single word mode, then a parser may coerce the strokes in the hint region to be forced into a single word.  shows password field  with first ink  and second ink . The analysis hint coerces the two inks  and  into a single word.","Fourth, analysis hints may include language IDs. This helps the parser keep words of different languages separate. As shown in , region  with ink - has a first language ID associated with its analysis hint, region  with ink - has a second language ID associated with its analysis hint, and region  with ink  has a third language ID associated with its analysis hint, resulting in the ink of different language IDs remaining separate and recognized in the languages associated with the language IDs of the analysis hints.","Fifth, recognition guides are regions into which users enter single characters. As shown in , Analysis hints with recognition guides  allow a developer to provide a more specific layout (lines and columns) to indicate to the recognizer that the lines are broken into individual characters. The existence of this recognition guide can also be used by the parser's layout analysis process to create structures (words, lines and paragraph) based on the recognition guide dimensions. However, when the strokes do not follow the guide  as shown in , layout analysis still is able to fall back to its original algorithm to produce a correct result.","The present invention has been described in terms of preferred and exemplary embodiments thereof. Numerous other embodiments, modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limited in the accompanying figures.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 1B through 1M"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 6-7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 8-9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 13-14","b":"16"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 15A-15C"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 18-28"}]},"DETDESC":[{},{}]}
