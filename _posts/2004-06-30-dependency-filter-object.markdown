---
title: Dependency filter object
abstract: A dependency filter object for use in a server cluster is described. In an implementation, a method includes bringing online one or more resource objects included in a dependency tree. Each of the resource objects corresponds to a resource available in a server cluster. The dependency tree includes a dependency filter object that specifies a dependency of a first one of the resource objects on a second one of the resource objects. The bringing online of the first resource object is managed according to the specified dependency on the second resource object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08020034&OS=08020034&RS=08020034
owner: Microsoft Corporation
number: 08020034
owner_city: Redmond
owner_country: US
publication_date: 20040630
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Exemplary Environment","Exemplary Procedures","Exemplary Operating Environment","CONCLUSION"],"p":["The present application claims priority under 35 U.S.C. \u00a7119(e) to U.S. Provisional Patent Application No. 60\/560,716, filed Mar. 12, 2004, and titled \u201cDependency Filter Object\u201d, the disclosure of which is hereby incorporated by reference in its entirety.","The present invention generally relates to server clusters, and more particularly relates to a dependency filter object for use in a server cluster.","A server cluster is a group of independent servers connected by a network and managed as a single system. The clustering of the servers provides a number of benefits over independent servers. One such benefit is that cluster software, which is run on the servers in a cluster, may be configured to automatically detect application failures or the failure of another server in the cluster. Upon detection of such failures, failed applications may be restarted on a surviving server without a substantial reduction in service. The server cluster may also be configured such that clients of the server cluster view the cluster as a single physical system, even though the system may include services provided by one or more of several servers. A client, for instance, may create a TCP\/IP session with a service in the cluster using a known IP address. This address appears to the cluster software as a resource in the same group (i.e., a collection of resources managed as a single unit) as the application providing the service. In the event of a failure, the cluster \u201cmoves\u201d the entire group to another system.","Other benefits include the ability for administrators to inspect the status of cluster resources, and accordingly balance workloads among different servers in the cluster to improve performance. Such manageability also provides administrators with the ability to update one server in a cluster without taking important data and applications offline. As can be appreciated, server clusters are useful in providing high availability for critical database management, file and intranet data sharing, messaging, general business applications, and the like.","A cluster works with a number of basic system components, known as \u201cresources\u201d, which provide some service to clients in a client\/server environment or to other components within the system. Resources may correspond to physical devices, such as disks, to purely software constructs, such as processes, databases, and IP addresses. A resource may be implemented as a resource DLL and hosted by a resource monitor host process running in a cluster node. The resource DLL for a resource is responsible for the control and health monitoring of the underlying component. For instance, a resource DLL for a disk resource contains code which will bring the disk online, offline and monitor its health.","An application is typically represented as a collection of resource groups in the cluster. A resource group in a cluster is a containment unit for resources and is the basic unit of failover. A group could contain one or more directed acyclic graphs of resources where the directed links define dependencies between resources. A dependency between two resources defines an order in which those resources are brought online and offline. For example, a Structured Query Language (SQL) database resource can specify a dependency on a disk resource and a network name resource. The network name will be used by clients to connect to the SQL service. These dependencies allow the cluster runtime to instantiate and shutdown the various resource objects that form an application in a well-defined manner. Thus, in the above example when the group contains the three resources is taken offline, the dependent SQL resource is first taken offline followed by the provider disk resource and provider network name resource, the latter two in no particular order. In addition to defining a start and stop order for resources, the dependency of resources also defines the order in which resources are \u201cterminated\u201d. Terminate refers to a notification delivered to a resource DLL in response to a failure event, when such a notification is delivered the resource that receives that notification typically takes the underlying application offline. Thus, in the above example, if the disk fails, the SQL resource is terminated first followed by the disk resource. The terminate processing may also be identical to the offline order of those resources. In this model, however, the failure of a provider resource always causes the termination of a dependent resource. Therefore, dependent resources are not currently provided with a choice of not getting a terminate notification or of specifying a redundant dependency on multiple provider resources. Continuing with the SQL example, there is no support for the SQL resource to express a dependency on two disk resources (e.g., D and D) such that SQL resource can come online if one or both of the disks are online.","Accordingly, there is a continuing need to improve server cluster dependency between resource objects.","A dependency filter object for use in a server cluster is described. An application is typically represented as a collection of resource groups in the cluster, where directed links define dependencies across the resource objects. Dependency filter objects are a mechanism to describe combined effects of dependencies on the resource objects. For example, the dependency filter object may be consulted during runtime to determine which actions are to be performed on a dependent resource when a state, e.g. online, offline, and so forth, changes for one or more provider resource objects of that particular resource object. For example, a network name resource may depend on multiple IP addresses resources \u201cIP\u201d and \u201cIP\u201d, respectively. A dependency filter object may be utilized to specify dependencies such that the network name resource may tolerate the failure of one of the IP address resources, may be brought on line if either of the IP addresses are online, and so on. Thus, the dependency filter object may be utilized to provide flexibility in how dependent and provider resources are brought online, taken offline, maintained, and so on.","In an implementation, a method includes bringing online one or more resource objects included in a dependency tree. Each of the resource objects corresponds to a resource available in a server cluster. The dependency tree includes a dependency filter object that specifies a dependency of a first one of the resource objects on a second one of the resource objects. The bringing online of the first resource object is managed according to the specified dependency on the second resource object through the dependency filter object.","In an additional implementation, a system includes a plurality of resource objects and a dependency filter object. Each of the resource objects corresponds to a resource on a server in a server cluster. The dependency filter object specifies a dependency in execution, on the server, of a first one of the resource objects with respect to a second one of the resource objects.","In another implementation, a system includes a plurality of resource objects and a dependency filter object. Each of the plurality of resource objects corresponds to a resource in a server cluster. The dependency filter object is callable by a first one of the resource objects to determine whether to fail the first resource object when a second one of the resource object fails.","In a further implementation, a system includes a plurality of resource objects, a dependency filter object, and a cluster service. Each of the plurality of resource objects corresponds to a resource in a server cluster. The cluster service is for managing execution of the plurality of resource objects. The dependency filter object is callable by the cluster service to determine whether to bring a dependent one of the resource objects offline before a provider one of the resource objects is brought offline and whether to bring the dependent resource object online after the provider resource object is brought online.","The same numbers are used throughout the disclosure and figures to reference like components and features.","Overview","A dependency filter object for use in a server cluster is described. An application in a server cluster may be represented as a directed acyclic graph of resource objects, where the directed links define dependencies between the resource objects. For example, one resource object may be dependent on another resource object, the first object is referred as the \u201cdependent\u201d resource object and the second one is referred to as a \u201cprovider\u201d resource object. A dependency between resource objects defines the order in which the resource objects are brought online and offline. In addition, the dependency may also define how dependent resource objects are handled in the case of failure of a provider resource object. Thus, dependency filter objects are a mechanism to describe the combined effects of dependencies on a resource object. The server cluster, during runtime, may consult the dependency filter object to determine which actions are to be performed on a dependent resource when a state changes for one or more provider resource objects for that particular resource object.","The dependency filter object may be utilized to provide a variety of functionality. In a first example, the dependency filter object provides fault tolerance to an application via redundancy. The dependency filter object, for instance, can be used to describe a resource object \u201cX\u201d as depending on either one of redundant resource objects \u201cY\u201d and \u201cY\u201d. Therefore, resource object \u201cX\u201d is brought online after either resource object \u201cY\u201d or \u201cY\u201d has been brought online, and resource object \u201cX\u201d is brought offline if both \u201cY\u201d and \u201cY\u201d are taken offline (e.g., if both resources objects fail), and so on. Therefore, the dependency filter object may be utilized to describe this dependency such that resource object \u201cX\u201d is able to take advantage of the redundancy provided by resource objects \u201cY\u201d and \u201cY\u201d. A variety of other dependencies may also be described through use of the dependency filter object, examples of which may be found in the following discussion starting in relation to .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","102","102","104","1","104","104","104","1","104","106","106","104","1","104","104","1","104","102","104","1","104","102","104","1","104","102"],"i":"n"},"The cluster  may be configured such that a client connecting to the cluster  \u201cbelieves\u201d that the cluster  is a single physical system, but in actuality the client is connecting to a service which may be provided by one of several systems, e.g. the plurality of server ()-(N). For example, the client  may communicate with the cluster  over a network . The network  may be the same as or different from network . Network , for instance, may be configured as a wide area network (WAN) and network  may be configured as a LAN, both network  and network  may be configured as the Internet, and so on. Other networks that may be utilized for connecting the plurality of servers ()-(N) to form the cluster  include direct connections (e.g., serial and parallel connections) as well as wireless connections. In one usage scenario, the client  communicates with the cluster via a public network , e.g. a wide area network, while intracluster traffic is on a \u201cprivate\u201d network. Thus, the public network could spread in a wide area while the private network is provided by on the same subnet. Although the cluster  illustrates connection of the plurality of servers ()-(N) over a single network , one or more of the plurality of servers ()-(N) may be remotely connected part of the cluster . For example, server () is illustrated as communicatively coupled to the cluster  over network .","The client  may initiate a TCP\/IP session with a service in the cluster  by using a known IP address. This address appears to the cluster software as a resource in the same group (i.e., a collection of resources managed as a single unit) as the application providing the service. In the event of a failure, the cluster service may \u201cmove\u201d the entire group to another system.","The cluster  may also provide the ability for administrators to inspect the status of cluster resources, and accordingly balance workloads among different servers in the cluster to improve performance. Such manageability also provides administrators with the ability to update one of the plurality of servers ()-(N) in the cluster  without taking data and applications offline. Thus, the cluster  may be utilized in situations in which data availability and persistency is desired, such as database management, file and intranet data sharing, messaging, general business applications and the like.","The cluster  includes a plurality of resource objects (), where \u201cm\u201d can be any integer from one to \u201cM\u201d, each of which are configured to provide one or more services to the client  (e.g., in a client\/server arrangement) and\/or to other components within the system. Each resource object () may be utilized to reference a software and\/or hardware component , . The software component , for instance, may be configured as a process , a database , an IP address , and other  software components. The hardware component  may be configured as a physical device, such as an input device , an output device , a storage device  (e.g., a hard disk drive), and other  hardware components. Although the software and hardware components ,  are illustrated separately, the software and hardware components ,  may be combined. Thus, a wide variety of disparate resource objects may be utilized by the cluster .","A system administrator may create the cluster  through execution of a cluster service  on one of the plurality of servers ()-(N). For a new cluster, a database  is created and the initial cluster member information (containing one node) is added thereto. The administrator then configures any devices that are to be managed by the cluster software. At this time, a cluster exists having a single member, after which an installation procedure is run on each of the other members of the cluster , i.e. servers (), (N).",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","134","200","202","204","202","102","104","2","202","204"]},"In , the cluster service  components and corresponding general relationships are represented pictorially in a single system (e.g., server () of ) of the cluster  of . The cluster service  controls operation of the cluster on the system. The cluster service  includes a node manager  that manages node configuration information and network configuration information (e.g., the paths between nodes). The node manager  operates in conjunction with a membership manager , which executes protocols that determine cluster membership when a change in membership of the cluster occurs, such as when a node is added, removed, and so on. A communications manager , also referred to as a kernel driver, manages communications with all other systems, e.g. servers (), (N) of , of the cluster via one or more network paths. The communications manager  may send periodic messages, commonly referred to as heartbeats, to other communications managers executed on the other systems of the cluster to provide a mechanism for verifying that the communications path(s) are operating correctly and that the other systems are operational. Through the communications manager , the cluster service  may be in constant communication with the other systems of the cluster. In a small cluster, for instance, communications may be fully connected, i.e., all systems of the cluster are in direct communication with all other systems. As previously described, in one implementation each of the servers may be communicatively coupled in the same subnet.","The cluster service  also includes a configuration database manager  (database manager) which implements the functions that maintain a cluster configuration database on a local device (e.g., a disk and\/or memory) and may also include the configuration database  of  on one or more common persistent storage devices. The configuration database  of  may maintain information about the physical and logical entities in the cluster, including the cluster itself, nodes, resource types, network configuration, groups, and resources. The database manager  may cooperate with counterpart database managers of other nodes in the cluster to maintain configuration information consistently across the cluster. Global updates are used to ensure the consistency of the cluster database in all systems. The database manager  also provides an interface to the configuration database  of  for use by the other cluster service components. A log manager  provides a facility that works with the database manager  to maintain cluster state information across a situation in which a cluster shuts down and a new cluster is later formed with no members common to the previous cluster, which may be referred to as a temporal partition.","A resource control manager  (hereinafter referred to as the \u201cresource manager\u201d), when executed, makes resource\/group management decisions and initiate appropriate actions to those decisions, such as startup, restart and failover. The resource manager  is responsible for stopping and starting the system's resources, managing resource dependencies, and for initiating failover of groups. A group could contain one or more directed acyclic graphs of resources where the directed links define dependencies between resources. A dependency between two resources defines an order in which those resources are brought online, offline, are maintained when online, and so on. For example, a group may include a resource that depends on a network name, which in turn depends on an Internet Protocol (IP) address, all of which are collected in a single group, as example of which is shown in . In an embodiment, dependencies of the resources in the group are maintained in a directed acyclic graph, known as a dependency tree, which is also described in greater detail in relation to . In an implementation, group operations performed on a group may affect all resources contained within that group.","The resource manager  receives resource and system state information from at least one resource monitor  and the node manager  to make decisions about groups. In one implementation, for instance, the resource manager  is responsible for deciding which systems in the cluster should \u201cown\u201d which groups. Those systems that own individual groups, for instance, turn control of the resources within the group over to respective resource managers .","An event processor  connects the components of the cluster service  and handles event notification operations. The event processor , for instance, may propagate events to applications and both to and from the components within the cluster service . The event processor  also performs miscellaneous services, such as delivering signal events to cluster-aware applications . The event processor , in conjunction with an object manager , further maintains various cluster objects. A global update manager  operates to provide a global update service that is used by other components within the cluster service .","Systems in the cluster maintain a consistent view of time. One of the systems, referred to as the time source, includes a resource that provides the time service. In an implementation, the time service, which maintains consistent time within the cluster, is implemented as a resource rather than as part of the cluster service , itself. In another implementation, an underlying service provides the time service functionality.","From the point of view of systems in the cluster (e.g. servers ()-(N) of ), systems in the cluster may be in one of a variety of distinct states, such as offline, online, paused, joining, and so on. These states may be visible to other systems in the cluster, and thus may be considered the state of the cluster service . When offline, a system is not a fully active member of the cluster. When online, a system is a fully active member of the cluster, and can honor cluster database updates, maintain heartbeats, can own and run groups, and so on.","A paused system is a fully active member of the cluster, and thus may honor a cluster database update and may maintain heartbeats. Thus, online and paused may be treated as equivalent states by portions of the cluster software. A system that is in the paused state, however, does not honor requests to take ownership of groups. The paused state is provided to allow maintenance of the system to be performed.","After initialization is complete, the external state of the system is offline. To join a cluster, following the restart of a system, the cluster service  is started automatically when the cluster service is configured by default with an autostart service. The system configures and mounts local, non-shared devices. Cluster-wide devices are left offline while booting, because the devices may be in use by another node. In an implementation, the system may attempt to communicate over the network with last known members of the cluster. When the system discovers any member of the cluster, it performs an authentication sequence in which the existing cluster system authenticates a \u201cnewcomer\u201d and returns a status of success if authenticated, or fails the request if not. For example, if a system is not recognized as a member or the system's credentials are invalid, then the request to join the cluster is refused. If successful, the database in the arriving system is examined, and if it is out of date, it is sent an updated copy. The joining system may use this shared database to find shared resources, bring the shared resources online as needed, and to find other cluster members. If a cluster is not found during the discovery process, the system may attempt to form its own cluster.","When leaving a cluster, a cluster member will send a \u201ccluster exit\u201d message to all other members in the cluster, which is used to notify the other members of the cluster member's intent to leave the cluster. In an implementation, the exiting cluster member does not wait for responses from the other members and therefore immediately proceeds to shutdown all resources and close all connections managed by the cluster software. Sending a message to the other systems in the cluster when leaving saves the other systems from discovering the absence by a time-out operation.","Once online, a system can have groups thereon. In an implementation, a group may be \u201cowned\u201d by only one system at a time, and the individual resources within a group are present on the system which currently owns the group. As a result, at any given instant, different resources within the same group are not owned by different systems across the cluster. Groups can be failed over or moved from one system to another as atomic units. Each group has a cluster-wide policy associated therewith comprising an ordered list of owners. A group fails over to systems in a configured order.","When an entire system in the cluster fails, its groups are pulled from the failed system to another system. This process is similar to pushing a group, but without a shutdown phase on the failed system. In another implementation, the groups are pushed. To determine what groups were running on the failed system, the systems maintain group information on each node of the cluster in memory in the resource manager  to track which systems own which groups.","When a previously failed system returns to an online status, the resource manager  is executed to decide whether to move a portion of the groups back to that system, in an action referred to as failback. To automatically failback, groups specify a preferred owner. Groups specifying the newly online system as the more preferred owner than the node in which the group is currently hosted are pushed from the current owner to the new system. Protection, in the form of a timing window, is included to control when failback occurs.","Resource objects  are managed by the cluster software, and are generally available to one system in the cluster at any instance in time, although the resource objects  can be brought online on any system in the cluster. In an implementation, any one of the resource objects  may depend on other resource objects, however, circular dependencies are not allowed. This forms a directed acyclic graph, known as a dependency tree, which is further described in relation to .","If one of the resource objects  depend on another resource object, that resource object is brought online after the other resource (or resources) on which it depends are already online, and is taken offline before the other resource. Moreover, each resource object  has an associated list of systems in the cluster  of  on which that particular resource object may execute. For example, a disk resource may be hosted on systems that are physically connected to the disk device. Also associated with each resource object is a local restart policy, defining the desired action in the event that the resource cannot continue on the current system.","The resource objects  may have a common set of states and methods that may be applied to any resource in order to generally control the resource and to detect failures or initiate failure recovery thereof. In this manner, the cluster software components are able to treat disparate resource objects such as physical devices and application programs identically. The controlling software treats the resource objects  abstractly and is aware of well-defined states within which the resource object can exist to generally control the resource object and to handle failure recovery of the resource object at an abstract level. To monitor the resource objects , the resource monitor  executes in one or more processes that are separate from the cluster service  and communicate therewith via Remote Procedure Calls (RPC). The resource monitor  controls and monitors the health of one or more resource objects  via callbacks thereto. For example, if a resource, e.g. cluster aware application , fails the resource manager  may choose to restart the resource locally up to some predetermined number of times, and to take the resource offline along with one or more resources that are dependent thereon. If the resource manager  takes the resource offline (such as if local restart attempt fails too many consecutive times), the resource manager  indicates that the group including the resource should be restarted on another system in the cluster, which is known as pushing the group to another system. A cluster administrator may also manually initiate such a group transfer. In general, the resource manager  works to transition the resource objects  from an initial offline (unavailable) state to an online (available) state. States common to resources include offline, offline pending, online, online pending and failed.","Resource components may be implemented as Dynamically Linked Libraries (DLLs) loaded into the address space the resource monitor . For example, the resource component DLLs may include application resource DLLs , , a logical resource DLL , and a physical resource DLL , and other DLLs, such as file and print shares, network addresses and names, Internet Server service DLLs, and so on.","Each specific resource DLL is responsible for the actual creation, deletion and management of a respective one of the resource objects  (e.g., physical device, application, other software construct, and the like) that provides the service. For example application resource DLL  is responsible for cluster aware application . Likewise, logical resource DLL  is responsible for logical resource object , application resource DLL  is response for cluster unaware application , and physical resource DLL  is responsible for physical resource object .","Methods may be applied the resource objects  for control thereof, such as Open, (to create an instance of a specific resource), Close, (to destroy an instance of a specific resource), Online, (to bring the resource into a usable state), Offline, (to bring the resource into an unusable state) and Terminate, (a forced Offline method). A variety of other methods may be provided, including methods directed to property management and monitoring the health of the resources.","The controlling Methods (Open, Close, Online, Offline and Terminate) are used to create and control an instance of a specific resource. The Open and Close methods are used to create and destroy an instance of a given resource, respectively. The Offline method instructs the resource DLL to make the specific instance of a resource object unavailable for use on the local system. The Terminate method is similar to the Offline method, except that it is used when a clean shutdown of the resource might not be possible.","Dependency Trees","An application, as previously described, may be represented as resource groups in a cluster. A resource group in a cluster is one or more directed acyclic graphs of resources objects where the directed links define dependencies across resources. The resources in the graph are represented through the use of resource objects. The dependencies allow the cluster runtime to instantiate and terminate the various software components that form an application in a well-defined manner. Dependency filter objects provide a mechanism to describe the combined effects of dependencies of resource objects in a dependency tree. The resource manager consults the dependency filter objects to decide which action, if nay, should be taken regarding a dependent resource when the state of any provider resource for that particular resource changes.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 3","b":["300","302","304","300","306","308","310"]},"As illustrated in , the SQL resource object  has a dependency, i.e. is dependent, on the first and second network name resource objects , . In this case, the corresponding first and second network names resources are provider resource objects and the SQL resource is a dependent resource object. The first network name resource object , in turn, has a dependency on an IP address resource object  and the second network name resource  ahs a dependency on IP address resource object . Therefore, if the user attempts to bring the SQL resource object  online from an offline state when the IP and first network name resource objects ,  are offline and the second network name resource object  and IP address resource object  is online, the cluster service  (e.g., through execution of the resource manager ) will first attempt to bring the IP address resource object  online, next the first network name resource object , and finally the SQL resource object .","The dependency tree  also includes a dependency filter object . The dependency filter object  causes the cluster service  to evaluate actions to be taken to bring online, bring offline, and\/or terminate resource objects in the dependency tree . For example, a state transition of a provider resource, e.g. the second network name resource object , may cause the cluster service  to evaluate the actions it must take on dependent resource objects, e.g. the SQL resource object . The cluster service  decides upon the actions based upon the dependency filter object  configured for that particular set of dependencies. For example, the dependency filter object  may specify that the SQL resource object  is dependent on redundant resource objects, e.g. the first and second network name resource objects , . Therefore, the SQL resource object  is not terminated unless both the first and second network name resource objects ,  fail. In this way, the dependency filter object  allows the cluster service  to control the behavior of the dependency tree  in a more flexible manner. By using the dependency filter object , a resource may depend on multiple redundant providers. The dependency filter object  also allows different resource objects to express dependency on the same resource object at different levels of redundancy. For example, a dependent resource object may be dependent on any two of a plurality of provider resource objects, while another dependent resource object may be dependent on any one of the plurality of provider resource objects.","A variety of behaviors may be described using the dependency filter object . In a first example, the dependency filter object  describes a permissible number of provider resources that should be available to bring online the dependent resource. The dependency filter object  may specify \u201cM out of N and P out of N\u201d provider resource objects, where \u201cN\u201d is the total number of provider resource objects, \u201cM\u201d is the number of provider resource objects that should be available to bring online the dependent resource, and \u201cP\u201d is the number of provider resources that are to remain available to prevent the dependent resource from being terminated. For instance, the dependency filter object  may specify that a dependent resource should be brought online (e.g., SQL resource ) when \u201cM\u201d or more of the \u201cN\u201d provider resource objects (e.g., first and second network name resource objects , ) affiliated with the dependency filter object  have been brought online, and stop the dependent resource (e.g., SQL resource ) only if less than P of the provider resources affiliated through the dependency filter object  have failed or be brought offline.","In an additional example, the dependency filter object  expresses desired behaviors by using Boolean expressions. The dependency filter object , for instance, may utilize any regular Boolean Expression to express dependencies, such as \u201cResource A depends on ((Resource B && Resource C)\u2225(Resource E && Resource F))\u201d.","In yet another example, the dependency filter object  specifies particular collections of resource object dependencies. For instance, the dependency filter object  may specify that \u201cresource objects A+B+C out of 32 resource objects\u201d are sufficient to bring the dependent resource object online. Although three examples of the specifying of dependencies have been discussed, a wide variety of other techniques may be utilized to describe desired behaviors, additional examples of which are illustrated in .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 4","b":["400","402","420","422","428","422","428","422","428"]},"Dependency filter object , for example, is positioned between resource object  and resource objects , . Resource object  is dependent on resource objects , , i.e. the resource objects ,  are provider resources to a resource corresponding to the resource object . Resource objects , ,  are represented pictorially as including the letters \u201cA\u201d, \u201cC\u201d, and \u201cD\u201d, respectively. The dependency filter object  describes the dependency of the resource object  on resource objects , . As illustrated, dependency filter object  specifies the resource object  is dependent on \u201c1 of (C, D)\u201d. Therefore, resource object  will remain online as long as one of the resource object  or the resource object  is online. In order to bring resource object  online, only one of resource object  or resource object  needs to be brought online.","Dependency filter object  is illustrated as being positioned between resource object  and resource objects , ,  which are represented pictorially as including letters \u201cC\u201d, \u201cD\u201d, and \u201cE\u201d, respectively. Dependency filter object  specifies that resource object  is dependent on a collection of resource objects \u201cC, D\u201d. Therefore, resource object  may be brought online and\/or remain online if resource objects ,  are online, regardless of whether resource object  is online. The arrow between resource object  and resource object  is representative of a directed link which indicates that resource object  is also dependent on resource object . Thus, a dependency filter object is not needed to describe each dependency in the dependency tree .","Dependency filter object  is illustrated as being positioned between resource object  and resource objects ,  which are represented pictorially as including letters \u201cG\u201d and \u201cH\u201d, respectively. Dependency filter object  specifies that resource object  is dependent on resource objects \u201cG or H\u201d by using a Boolean expression. Therefore, resource object  may be brought online and\/or remain online if resource object  or resource object  is online. It should be noted that in this example, dependent filter object  acts in a manner similar to dependency filter object , even though the respective dependencies were specified utilizing different techniques.","Lastly, dependency filter object  is illustrated as being positioned between resource object  and resource objects , , ,  which are represented pictorially as including letters \u201cG\u201d, \u201cH\u201d, \u201cI\u201d, and \u201cJ\u201d, respectively. Dependency filter object  specifies that resource object  is dependent on resource objects - by using the Boolean expression \u201c(G and (H or J) or (I and (H or J))\u201d. Therefore, resource object  may be brought online and\/or remain online if resource objects  and  are online, if resource objects  and  are online, if resource objects  and  are online, and so on. For example, resource objects ,  and resource objects ,  may be redundant. The dependency filter object  may therefore express this redundancy such that different permissible combinations of the resource objects - may be online to bring the resource object  online or to keep it online. Although single dependency filter object associated with particular resources are illustrated, a plurality of dependency filter objects may also be utilized. For example, in such an instance, dependencies may be \u201canded\u201d across the plurality of dependency filter objects that may be associated with a dependent resource. In another implementation, a single dependency filter object may provide support for a plurality of general regular expressions to describe dependencies.","A dependency filter object may be implemented as a programmable object that can expose one or more interfaces to provide a variety of functions. The dependency filter object, for instance, may expose interfaces to describe if the dependent resource objects should be brought online when bringing a particular provider resource object online and if the dependent resource should be terminated in response to failure of a provider resource object and should be brought offline if a particular provider resource object is brought offline. Exemplary functions are discussed below.","EvaluateUpstreamOnline","The dependency filter object may expose an \u201cEvaluateUpstreamOnline\u201d function for use in bringing resource objects online in compliance with the specified dependencies in the dependency tree. When a resource object corresponding to a particular resource transitions to an online state, the cluster service consults one or more dependency filter objects affiliated with that provider resource object to determine which \u201cupstream\u201d resource objects should also be brought online. Therefore, the cluster service may bring the provider resource objects \u201conline\u201d first before the dependent resource object is brought online. Additional discussion of bringing a resource object online may be found in relation to .","EvaluatelsAlive","The dependency filter object may also expose an \u201cEvaluateIsAlive\u201d function for determining whether an executing resource object should declare failure due to failure of a provider resource object. For example, a resource object may consult the dependency filter object related to the resource object it detects a failure in a given provider resource. By consulting the dependency filter object, the resource object may determine if it should fail by invoking the \u201cEvaluateIsAlive\u201d function affiliated with the dependency filter object. Additional discussion of bringing resource objects offline during execution in response to failure by another resource object may be found in relation to .","EvaluateUpstreamTerminate","The dependency filter object may also expose an \u201cEvaluateUpstreamTerminate\u201d function for use in determining whether to bring an executing resource object offline due to unavailability of another resource object. The cluster service, for instance, may consult each dependency filter object affiliated with a provider resource object when that resource object transitions to a failed state or is brought to an offline state by an administrator. The cluster service determines, through examination of the dependency filter object, which upstream resources should also be terminated by invoking the \u201cEvaluateUpstreamTerminate\u201d function affiliated with the dependency filter object. Additional discussion of terminating resource objects during execution in response to termination of another resource object may be found in relation to .",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 5","FIG. 2"],"b":["500","502","134","202","202","204","202"]},"At block , the cluster service , when executed, locates the requested resource object  in a dependency tree . The dependency tree  may or may not correspond to the dependency trees ,  illustrated in , respectively. The request , for instance, may specify a particular resource object be brought online to provide the corresponding resource, such as a software module and\/or a hardware device. The cluster service  may utilize the specification in the request  to find the resource object  that corresponds to the request . In block , the resource object  is illustrated in phantom to indicate that although the resource object  is found, it is not currently online.","At block , the cluster service  is executed to determine one or more dependencies of the resource object  in the dependency tree . For example, the cluster service , when executed, may \u201cwalk\u201d the dependency tree  to locate objects that are related to execution of the resource object . The dependency filter object , for instance, may follow the \u201cM out of N, P out of N\u201d technique, as previously described in relation to , in which the source object  is specified by the dependency filter object  as \u201c2 out of 2, 1 out of 2\u201d. Therefore, the resource object  can be brought online if both resource objects ,  are online.","At block , the provider resource objects are brought online according to the dependencies determined at block . For example, the cluster service  will ask the resource objects ,  to come online, which is illustrated in block  through the use of solid borders for both of the resource objects , .","At block , when the specified provider resource objects are online, the requested resource object  is brought online. In this instance, once resource objects ,  are brought online at block , the resource object  is then brought online according to the dependencies specified by the dependency filter object . Resource object  is illustrated in block  as being online through use of a solid border when depicting the resource object . Thus, in this implementation, the dependency filter object  was utilized to describe an order in which the resource object , ,  of the dependency tree should be brought online. The dependency filter object  may also be utilized during \u201cruntime\u201d to determine which actions should be performed to manage the resource objects , , , an example of which is described in relation to the following figure.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 6","FIG. 5","FIG. 5"],"b":["600","518","510","510","602","508","514","516","510","508","514","516"]},"At block , a resource object  in the dependency tree  fails. The resource object  is illustrated in phantom in block  to indicate that the resource object  is no longer available to provide corresponding functionality. At block , another resource object of the dependency tree  becomes aware of the failure of the resource object . For example, the resource object  may \u201ctime-out\u201d after a pre-determined amount of time elapses during which the resource object  has not received data from the resource object . In another example, the resource object  sends periodic messages to the other resource object  to provide a mechanism for detecting that the communications path(s) are operating correctly and that the other resource object  is operational.","At block , the dependency filter object  is analyzed by a dependent resource object to determine if that resource object should declare failure in response to its failure to perform the necessary functions or operations related to resource object . The resource object , for instance, may utilize the \u201cEvaluateIsAlive\u201d function of the dependency filter object  to determine conditions for the dependency of the resource object  on the other resource objects ,  of the dependency tree . In this instance, the resource object  determines if it should fail by invoking the \u201cEvaluateIsAlive\u201d function affiliated with the dependency filter object . This allows the policy to be encoded in a dependency filter object and allows the provider resource to query the policy when desired. As previously described, the dependency filter object  specifies the dependency of the resource object  on the other resource objects ,  using the \u201cM out of N, P out of N\u201d technique in which the resource object  is specified by the dependency filter object  as \u201c2 out of 2, 1 out of 2\u201d. Therefore, the resource object  can be brought online if both resource objects ,  are already online. The resource object , however, may remain online as long as one of the two resource objects ,  remains online. In this instance, the resource object  remains online even though the resource object  failed. It should be noted that in this instance the resource object  itself determines conditions for continued execution through use of the dependency filter object . In the previous implementation that was described in relation to , the cluster service  utilized the dependency filter object  to determine when resource  may be brought online. The cluster service  may also utilize the dependency filter object  to determine whether bring the resource objects , ,  offline, an example of which is discussed in relation to the following figure.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 7","FIG. 5","FIG. 2"],"b":["702","508","514","516","510","704","516","516","134","202","516","204"]},"At block , the dependency filter object  is analyzed by the cluster service  to determine the effect of bringing the resource object  offline on other resource objects of the dependency tree . The cluster service , for instance, analyzes the dependency filter object  affiliated with a provider resource object, e.g. resource object , when it transitions to an offline state. By invoking the \u201cEvaluateUpstreamOffline\u201d function affiliated with the dependency filter object , the cluster service  determines which \u201cupstream\u201d resource objects, if any, should also be brought offline. In the case of termination, the \u201cEvaluateUpstreamTerminate\u201d function may be utilized as previously described. Continuing with the previous example, the dependency filter object  specifies that the resource object  may remain online if either resource object  or resource object  is online. Therefore, at block , the other resource objects ,  are managed by the cluster service  as specified by the dependency filter object , which in this instance specifies that resource object  remains online. Thus, when the specified dependency of the dependency filter object  is met, the resource object  remains, otherwise the resource object  is taken offline.","The various components and functionality described herein are implemented with a number of individual computers.  shows components of a typical example of a computer environment , including a computer, referred by to reference numeral . The computer  may be the same as or different from the plurality of servers ()-(N) of . The components shown in  are only examples, and are not intended to suggest any limitation as to the scope of the functionality of the invention; the invention is not necessarily dependent on the features shown in .","Generally, various different general purpose or special purpose computing system configurations can be used. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, network-ready devices, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The functionality of the computers is embodied in many cases by computer-executable instructions, such as software components, that are executed by the computers. Generally, software components include routines, programs, objects, components, data structures, and so on, that perform particular tasks or implement particular abstract data types. Tasks might also be performed by remote processing devices that are linked through a communications network. In a distributed computing environment, software components may be located in both local and remote computer storage media as previously described in relation to .","The instructions and\/or software components are stored at different times in the various computer-readable media that are either part of the computer or that can be read by the computer. Programs are typically distributed, for example, on floppy disks, CD-ROMs, DVD, or some form of communication media such as a modulated signal. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory.","For purposes of illustration, programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","With reference to , the components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures.","Computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media. \u201cComputer storage media\u201d includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital video discs (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more if its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection and wireless media such as acoustic, RF, infrared and other wireless media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or software components that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , applications , software components , and program data . The applications , for instance, may be configured as the resource group  having the plurality of resource objects shown in .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as data media interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface.","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer-readable instructions, data structures, software components, and other data for computer . In , for example, hard disk drive  is illustrated as storing operating system \u2032, applications \u2032, software components \u2032, and program data \u2032. Note that these components can either be the same as or different from operating system , applications , software components , and program data . Operating system \u2032, applications \u2032, software components \u2032, and program data \u2032 are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard , and pointing device (not shown), commonly referred to as a mouse, trackball, or touch pad. Other input devices may include source devices (such as a microphone  or camera  which provide streaming data), joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through an input\/output (I\/O) interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , computers may also include other rendering devices (e.g., speakers) and one or more printers, which may be connected through the I\/O interface .","The computer may operate in a networked environment using logical connections to one or more remote computers, such as a remote device . The remote device  may be the same as or different from the remote client  of . The remote device  may be a personal computer, a network-ready device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Although the WAN  shown in  is the Internet, the WAN  may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the like.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the Internet . The modem , which may be internal or external, may be connected to the system bus  via the I\/O interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote device . By way of example, and not limitation,  illustrates remote software components  as residing on remote device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 7","FIG. 5"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
