---
title: System and method for ensuring referential integrity for heterogeneously scoped references in an information management system
abstract: A system and method are provided for an information management system (IMS) to manage heterogenous references in the system, to ensure “referential integrity”, without changing the underlying relational database management system (RDBMS) of the IMS. One or more system tables are kept that are not visible to system users. In one embodiment, the RDBMS' mechanisms to ensure referential integrity for homogenous references is used in conjunction with the system table to extend referential integrity to heterogenous references. In another embodiment, the triggers of the RDBMS, in conjunction with the system table, are used to ensure referential integrity of heterogenous references.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07080085&OS=07080085&RS=07080085
owner: International Business Machines Corporation
number: 07080085
owner_city: Armonk
owner_country: US
publication_date: 20000712
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The present invention relates to methods and systems for ensuring referential integrity (\u201cno dangling pointers\u201d) in databases containing heterogeneously scoped references.","Information management systems (IMS) such as digital library servers typically use a relational database management system (RDBMS) to manage data records in a database. As an example, an IMS might manage document data, with the desire that the RDBMS maintain so-called \u201creferential integrity\u201d for elements in the database. What is meant by \u201creferential integrity\u201d is that if a row of a table (referred to as a \u201ctarget\u201d table) that is referenced by a row in another table (referred to as a \u201csource\u201d table) by means of a foreign key (referred to as a \u201cpointer\u201d) is sought to be deleted or changed, either the deletion or change is disallowed or the pointer is removed from the source table, so that no \u201cdangling pointers\u201d (i.e., links to nonexistent database elements) remain.","This is but one example of what is meant by \u201creferential integrity\u201d. In general, when one entity refers to another, a dependency relationship is created that represents a referential constraint the integrity of which might be desirable to maintain. As recognized herein, not all such constraints need have their integrity maintained; rather, deciding which constraints to maintain is a balance between application requirements and what can be maintained efficiently.","In existing RDBMS systems such as the system known as \u201cDB2\u201d and marketed by the present assignee, maintaining referential integrity assumes homogenous linking, i.e., that all links from a column of a source table point to tuples in a single predetermined target table. As recognized herein, however, in some cases, such as, for example, digital libraries, a column of links can exist in a table that do not all point to a single common target table. This is because different data types can exist in these cases, so that, for example, one link in a column of a source table might point to a target table representing a particular type of document, another link in the column might point to a target table representing another particular type of document, while yet a third link might point to an image, all of them nonetheless being interrelated. Such links are referred to as \u201cheterogeneously scoped\u201d links, whereby the scope (or target) of these links consists of multiple pre-determined tables. A special case is \u201cunscoped\u201d links, whereby the target tuple of a link can be in any table.","Accordingly, \u201cheterogenous scoping\u201d refers to the ability to create and manage a column of links whose targets are not restricted to being tuples of a single table. It will readily be appreciated by the skilled artisan that heterogenous scoping would provide a flexible and generic linking ability that can be exploited by, e.g., a digital library system to support a relatively more complex data model.","One way to provide heterogenous linking referential integrity is to modify the RDBMS. This is not a trivial task. Accordingly, the present invention is directed to a system and method for providing heterogenous linking referential integrity without modifying the RDBMS, but rather by providing a transparent software layer within the IMS or between the RDBMS and IMS that exploits existing RDBMS functionality to extend referential integrity to heterogeneously scoped links.","The invention is a general purpose computer programmed according to the inventive steps herein. The invention can also be embodied as an article of manufacture\u2014a machine component\u2014that is used by a digital processing apparatus and which tangibly embodies a program of instructions that are executable by the digital processing apparatus to undertake the present invention. This invention is realized in a critical machine component that causes a digital processing apparatus to perform the inventive method steps herein. The invention is also a computer-implemented method for undertaking the acts disclosed below.","Accordingly, a system is disclosed for providing referential integrity for heterogenous links. The system includes an RDBMS that provides referential integrity for homogenous links, and an IMS communicates with the RDBMS. A software layer is within the IMS or between the RDBMS and IMS for causing the RDBMS to provide referential integrity for heterogenous links.","In a preferred embodiment, the software layer includes at least one table that is maintained by the software layer. The table is accessed upon an attempted deletion or updating of a link, and the attempted deletion or updating is selectively disallowed by the software layer, based on the table. If desired, the software layer can establish at least one trigger, such as an update trigger or delete trigger, that is useful in selectively disallowing operations. Also, if desired the preferred software layer can include at least one stored procedure accessible by an application to insert or delete a tuple while ensuring referential integrity in heterogenous links associated with the tuple.","In another aspect, a computer-implemented method for preventing dangling pointers in heterogeneously scoped links includes providing at least one heterogeneously scoped link (HSL) table that is separate from an RDBMS having stored therein plural tuples arranged in tables. At least one table has a heterogeneously scoped link column, and the table is associated with the heterogeneously scoped link column. The method envisions accessing the HSL table to ensure referential integrity in the RDBMS.","In still another aspect, a computer program product includes computer usable code means that are programmed with logic for ensuring referential integrity in an RDBMS. The RDBMS has at least one table with at least one column of heterogeneously scoped links. The program product includes computer readable code means for accessing a table that is not part of the RDBMS, e.g., that is maintained by the program product. Computer readable code means use the table to ensure that operations on tuples do not result in a heterogeneously scoped link pointing to no tuple.","The details of the present invention, both as to its structure and operation, can best be understood in reference to the accompanying drawings, in which like reference numerals refer to like parts, and in which:","Referring initially to , a system is shown, generally designated . To give the present invention context, an exemplary system  having an information management system (IMS) such as a digital library that cooperates with an underlying relational database management system (RDBMS) is described herein, it being understood that the present principles for ensuring referential integrity of unscoped or heterogeneously scoped links (sometimes collectively referred to herein for convenience as \u201cheterogeneously scoped links\u201d, or simply \u201cheterogenous links\u201d) applies to system architectures other than the one shown.","Accordingly, the system  includes at least one user computer  having a software-implemented application  that generates queries. Input to the user computer  is via one or more input devices , and query results can be output on an output device . The input device  can be any suitable device, such as a keyboard, keypad, mouse, joystick, trackball, voice-recognition software, and so on. The output device  can be a monitor, a speaker, another computer or computer network, a printer, and so on.","As shown in , the user computer  communicates with an information management system (IMS) , such as a digital library server, via an IMS communication path  using high-level application programming interfaces (API). The IMS  communicates with a relational database system (RDBMS) , such as the present assignee's DB2, that stores records of documents managed by the IMS . One or both of the IMS  and RDBMS  can be hosted on a server computer , or each can have its own associated computer.","As intended herein, either or both of the user computer \/server computer  can be a server computer made by International Business Machines Corporation (IBM) of Armonk, N.Y. Other digital processors, however, may be used, such as personal computers, laptop computers, mainframe computers, palmtop computers, personal assistants, or any other suitable processing apparatus can be used.","In any case, the processor of the computers access appropriate software to undertake the logic of the present invention, which may be executed by a processor as a series of computer-executable instructions. In the preferred embodiment shown in , the software is contained in a software layer or module  that is between the IMS  and RDBMS  in the architecture shown or alternately that is inside the IMS , and that is accessed by the IMS  and\/or RDBMS . The instructions contained in the module  may be stored on a data storage device with a computer readable medium, such as a computer diskette having a computer usable medium with a program of instructions stored thereon. Or, the instructions may be stored on random access memory (RAM) of a computer, on a DASD array, or on magnetic tape, conventional hard disk drive, electronic read-only memory, optical storage device, or other appropriate data storage device. In an illustrative embodiment of the invention, the computer-executable instructions may be lines of C or C++ or Java code.","Indeed, the flow charts herein illustrate the structure of the logic of the present invention as embodied in computer program software. Those skilled in the art will appreciate that the flow charts illustrate the structures of computer program code elements including logic circuits on an integrated circuit, that function according to this invention. Manifestly, the invention is practiced in its essential embodiment by a machine component that renders the program code elements in a form that instructs a digital processing apparatus (that is, a computer) to perform a sequence of function steps corresponding to those shown.","Commencing at block  in , in one embodiment a referential integrity (RI) table is created containing a unique identification column. Such a table is shown in  and designated , containing ID column . Multiple RI tables  can be used in IMS  partitions, if desired.","As shown in , an unscoped or heterogeneously scoped link  from an RDBMS table  (\u201cthe referencing tuple\u201d) maintains a direct link  to a target tuple in a target RDBMS table  (\u201cthe referenced tuple\u201d). In the present invention, when referential constraint is requested, the link  is also related to a row  of the RI table  by means of a unique identification in the ID column . Other rows  of the RI table  represent other unscoped or heterogeneously scoped links. As indicated at blocks  and  of , for each data table created or used by the IMS , a null-able RDBMS foreign key with a RESTRICT delete rule and referencing the corresponding data table, is added to a foreign key column  of the RI table .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4","b":["56","58","60"]},"On the other hand, when referential constraint is requested the logic moves to block  to insert a row into the RI table , containing a unique ID identifying the row and a foreign key pointing to the referred-to tuple. Moving to block , all other foreign key fields are set to NULL. Proceeding to block , the unique is stored in the link reference to refer to the inserted RI table  row. For retrieval and traversal operations involving the link, the direct reference  () is used, thereby avoiding the overhead of indirection. To unlink, such as to nullify the link  or to delete the referencing tuple  from its RDBMS table, the corresponding row  of the RI table  is also deleted using the ID stored in the link at block . To change the target of a link to a different referenced tuple, the steps are the same as those of unlinking followed by those of linking.","To support SET NULL and CASCADE delete rules in addition to the RESTRICT rule, an inverse reference can be added to the RI tables, identifying the source unscoped link instance. Triggers can be defined on the RI tables to change a propagated deletion or update on the RI table to a deletion of the respective RI row, and either an update of the source unscoped link to NULL, or a deletion of the respective referencing tuple.","Now referring to , an alternate means for ensuring referential integrity for non-homogeneously scoped links can be seen. Commencing at block  in , an ICMULINK user defined type (UDT) is defined for columns that contain heterogeneously scoped links. In addition, at least one link table is created, as are a Scope table and a Column table.","Specifically,  illustrates the details of the ICMULINK UDT. As shown, the UDT uses a fixed-length character string (preferably a CHAR(70) SQL data type) as the base data type, and sufficient information is encoded in the string to undertake the logic below. The module  interprets the string as consisting of a number of fields laid out in a predefined format, but this format is hidden from the application , which only uses well-defined user-defined functions (UDFs) to query and operate on the data in the RDBMS .","As shown in the particularly preferred ICMULINK UDT shown in , a LinkID field is a 16 byte field that is a unique identifier for an unscoped (or heterogeneously-scoped) link. An 18 byte LinkTableName field contains the name of the link table in which the link resides. Also, an 18 byte TargetTableName filed contains the name of the target table associated with the link.","Still considering , the primary key of the target tuple in the target table is contained in an eight byte TargetID field. The TargetID field contains a 64-bit integer (corresponding to the BIGINT SQL data type). Further, a single byte field represents delete semantics associated with the link. In one preferred embodiment, \u201c1\u201d indicates RESTRICT delete rule, \u201c2\u201d indicates SET NULL, and \u201c3\u201d indicates CASCADE delete. A one-byte field indicating whether referential integrity is to be maintained follows, and then a 4-byte field indicating a user-specified link type. Finally, an unused field is provided for expansion.","In , the link table  contains one row for each heterogeneously scoped or unscoped link for which referential integrity is to be maintained. The schema-definition of the Link table  in SQL is:",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CREATE TABLE ICMSTLINKTABLE0001("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LINKID CHAR(16) NOT NULL,"]},{"entry":[{},"SRCTBLNM CHAR(18),"]},{"entry":[{},"SRCID BIGINT,"]},{"entry":[{},"SRCCOLNM VARCHAR(18),"]},{"entry":[{},"DSTTBLNM CHAR(18),"]},{"entry":[{},"DSTID BIGINT,"]},{"entry":[{},"DELSEM CHAR(1),"]},{"entry":[{},"PRIMARY KEY(LINKID)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the above schema the 16-byte link identifier is the primary key for the table. Columns , , and  together locate the heterogeneously scoped link column, whereas columns  and  uniquely identify the referenced tuple. To improve the performance of the below-described triggers, the following index is defined on the Link table :\n\n","Having described the Link table,  shows an exemplary Scope table . Essentially, the Scope table  groups a collection of tables into a \u201cscope\u201d by correlating a scope ID with the names of the tables in the scope. A table may participate in multiple scopes. The schema-definition in SQL for the Scope Table is:",{"@attributes":{"id":"p-0042","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CREATE TABLE ICMSTSCOPEDEFN("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SCOPEID INTEGER NOT NULL,"]},{"entry":[{},"TABLENAME VARCHAR(18) NOT NULL"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},"CREATE INDEX ICMSTSCOPEDEFNINDX ON"]},{"entry":[{},"ICMSTSCOPEDEFN(SCOPEID)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Now considering , an exemplary Column table  can be seen. For each heterogeneously scoped or unscoped link column defined in the database, a row is maintained in the Column table. The Column table  contains both the name of the column (ULINKCOLNAME) and name of the table containing the column (TABLENAME), along with the scope ID for the link column and a delete semantics byte that is set according to the above principles. The Column table  has the following schema definition:",{"@attributes":{"id":"p-0044","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CREATE TABLE ICMSTULCOLINFO("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TABLENAME VARCHAR(18) NOT NULL,"]},{"entry":[{},"UNLINKCOLNAME VARCHAR(18) NOT NULL,"]},{"entry":[{},"SCOPEID INTEGER NOT NULL,"]},{"entry":[{},"DELSEM CHAR(1) NOT NULL,"]},{"entry":[{},"PRIMARY KEY(TABLENAME, ULINKCOLNAME)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"At block  in , for each table that could potentially be the target of a heterogeneously scoped link, a DO loop is entered in which UPDATE and DELETE triggers are created on the table at block . The appropriate one of the triggers is respectively activated only when an update operation changes the primary key of an affected tuple or when a delete operation is executed on one or more tuples. The Link table  (and, for column-level operation, the Column table ) is checked to determine whether a tuple sought to be updated is a target tuple of a heterogeneously-scoped link, and if so the update operation is disallowed. In the case of a delete, the delete trigger checks the Link table to determine whether the tuple is listed as a target tuple of a link with RESTRICT delete semantics associated with it. If so, the delete is disallowed at block . Otherwise, the delete is allowed.","Exemplary respective outlines for the update and delete triggers are as follows:",{"@attributes":{"id":"p-0047","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CREATE TRIGGER ICMUPDATE000000123"},{"entry":"NO CASCADE BEFORE UPDATE OF ID ON T"},{"entry":"REFERENCING OLD AS O"},{"entry":"FOR EACH ROW MODE DB2SQL"},{"entry":"WHEN (EXISTS (SELECT*FROM ICMSTLINKTABLE0001"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WHERE DSTTABLENAME = \u2019T\u2019 AND DSTID = O.ID))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"SIGNAL SQLSTATE \u201985001\u2019 (CANNOT UPDATE TARGET OF"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"UNSCOPED LINK)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CREATE TRIGGER ICMDELETE000000124"},{"entry":"NO CASCADE BEFORE UPDATE OF ID ON T"},{"entry":"REFERENCING OLD AS O"},{"entry":"FOR EACH ROW MODE DB2SQL"},{"entry":"WHEN (EXISTS (SELECT*FROM ICMSTLINKTABLE0001"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WHERE DSTTABLENAME = \u2019T\u2019 AND DSTID = O.ID AND"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DELSEM=\u20191\u2019))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"SIGNAL SQLSTATE \u201985002\u2019 (CANNOT DELETE TARGET OF"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UNSCOPED LlNK)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The present invention recognizes that information stored in the ICMULINK attribute might be packaged in a proprietary format with internally meaningful identifiers and codes, an application-friendly interface is desirable. These are provided in the preferred embodiment by a set of UDFs that operate on the ICMULINK attributes. A UDF can be provided to parse the internal structure of an ICMULINK attribute to provide applications with individual field values. Also, a UDF can be provided to determine whether two link attributes passed as input point to the same tuple. Moreover, a UDF can be provided to generate ICMULINK attributes according to the above format using, as input, the target and linktype information, as well as the other parameters shown in . Additionally, a UDF can be provided to retarget an unscoped link, in the event that an application finds it useful to change the target of a link without changing any of its properties.","At block  in , for each heterogeneously scoped or unscoped link column defined in the database using the ICMULINK data type, a DO loop is entered in which a row is inserted into the Column table at block , and one or more rows are also inserted into the Scope table if a new scope is defined. When applications create or delete tables in the RDBMS  and insert or delete or modify tuples according to allowed operations as provided for in  above, the module  preferably modifies the tables shown in  accordingly. To do this, the module  includes a set of RDBMS-stored procedures that are provided to IMS  and applications  so that an application can invoke the relevant stored procedure in conjunction with update, delete, and insert operations, as indicated at blocks  and  in . It is to be understood that, as an alternative, the same logic can be implemented natively in the module  instead of a RDBMS stored procedures.","When an application creates a new table, it calls a prepareTarget stored procedure, passing it the name of the table being created and the name of the primary key column. The stored procedure generates and executes the necessary triggers discussed previously at blocks  and . In C code, this stored procedure can be represented by:\n\n","When a new link column is added as discussed at blocks  and , a stored procedure is called with the following input parameters to create a new entry in the Column table : name of table containing new column, name of column, scopeID associated with the column (0 by default), and column-level delete semantics to be applied (0 by default).","In C code, this stored procedure can be represented by:\n\n","For dropping a table, an application is provided with the following stored procedure, using the table name as sole parameter:\n\n","The above procedure first checks the Link table  for links pointing to tuples in the table to be dropped, and if any exist, the table is prevented from being dropped. Otherwise, all system entries pertaining to the table are deleted.","In contrast, to insert a tuple in a table, the name of the table, primary key of the tuple, link being inserted as part of the tuple insertion, and column name of the link are passed to the following stored procedure, which is invoked by an application:\n\n","The above procedure first determines whether the target table referenced by the link to be inserted is part of the scope that is associated with the link column, using the Scope table  and Column table . If the check fails the procedure returns an exception. Otherwise, the procedure next determines whether referential integrity is to be maintained for the new link, and if not returns and ends. When referential integrity is to be maintained, however, the procedure accesses the target table to determine whether the tuple referenced by the new link exists, and if not an exception is returned, but if the tuple is found the procedure creates a new entry in the Link table .","For deleting a tuple containing a link attribute, a procedure is called to determine whether referential integrity is to be maintained for the link, and if so the corresponding entry in the Link table  is deleted. The procedure is called by an application using the link attribute being deleted as input, and the procedure can accordingly be represented as void ICMULinkDelete (char*link).","When an application wishes to update a link attribute of a tuple, it passes the name of the relevant table, primary key of the tuple, old and new values of the link attribute, and name of the link value being modified to the following stored procedure:\n\n","The procedure combines the above operations of the delete and insert procedures to undertake the update.","To update the primary key of a tuple containing a link attribute, an application sends the new primary key value and link attribute of the tuple to a procedure which, when referential integrity is being maintained, extracts the link ID and locates and modifies the corresponding entry in the Link table . The procedure can be represented as:\n\n","The above stored procedure first handles the change to the link attribute by invoking the ICMULinkModify stored procedure, passing the \u201cold\u201d primary key to support this update, and then the new primary key is passed to complete the procedure.","Completing the description of the stored procedures, an expected common operation in digital libraries is the migration of a tuple from one table to another. Accordingly, an application wishing to do this can invoke an ICMMigrateTarget stored procedure by passing to it the old and new table names and primary key of the tuple. The procedure first determines, from the Link table , whether a link exists having the tuple as a target, and for each such link the new location of the tuple and corresponding link attributes of source tuples are changed in the Link table. This procedure, in C code, can be expressed as void IcMMigrateTarget (char*origTable, char*newTable, sqlint64 primaryKey).","Preferably, an application using the above procedures ensures that the SQL statement and procedure calls are executed together in one atomic statement, so that if the call to the stored procedure does not succeed, the SQL statement can be rolled back.","While the particular SYSTEM AND METHOD FOR ENSURING REFERENTIAL INTEGRITY FOR HETEROGENEOUSLY SCOPED REFERENCES IN AN INFORMATION MANAGEMENT SYSTEM as herein shown and described in detail is fully capable of attaining the above-described objects of the invention, it is to be understood that it is the presently preferred embodiment of the present invention and is thus representative of the subject matter which is broadly contemplated by the present invention, that the scope of the present invention fully encompasses other embodiments which may become obvious to those skilled in the art, and that the scope of the present invention is accordingly to be limited by nothing other than the appended claims, in which reference to an element in the singular is not intended to mean \u201cone and only one\u201d unless explicitly so stated, but rather \u201cone or more\u201d. All structural and functional equivalents to the elements of the above-described preferred embodiment that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the present claims. Moreover, it is not necessary for a device or method to address each and every problem sought to be solved by the present invention, for it to be encompassed by the present claims. Furthermore, no element, component, or method step in the present disclosure is intended to be dedicated to the public regardless of whether the element, component, or method step is explicitly recited in the claims. No claim element herein is to be construed under the provisions of 35 U.S.C. \u00a7 112, sixth paragraph, unless the element is expressly recited using the phrase \u201cmeans for\u201d or, in the case of a method claim, the element is recited as a \u201cstep\u201d instead of an \u201cact\u201d."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 9","FIGS. 6\u20138"]}]},"DETDESC":[{},{}]}
