---
title: Automatic upgrade of pluggable components
abstract: When a component is to be loaded or executed, the version of the component to be loaded may be compared with available versions of the component. If an upgraded version of the component is available, the upgraded version of the component may be enabled to dynamically and deterministically update itself. The component may be an object in an object model. The upgraded version of the component may update itself by calling an update method. The component may be upgraded with minimum user intervention, dynamically as the object is loaded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07788662&OS=07788662&RS=07788662
owner: Microsoft Corporation
number: 07788662
owner_city: Redmond
owner_country: US
publication_date: 20040728
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","Overview"],"p":["The invention relates to keeping persistent software state in sync with the current software version and in particular to automatically upgrading pluggable components in an object model.","Keeping persistent software state and persistent state of the components used by the software updated and in sync with the current version of the software and the components is a ubiquitous problem in computer science. Suppose, for example, that version one of an application is designed to work with version one of a component. The component may be, for example, a dataset providing input to the application. Suppose further that the creation of the dataset is a non-trivial task. Now suppose that a new version, version two, of the application becomes available. The new version of the application may require a new format for the dataset. Attempting to load the previous version of the dataset into the new version of the application typically results in failure.","It would be helpful if there were an easy way to upgrade persistent state of the revised components to a format compliant with the new version of the components, automatically, so that it \u201cjust works\u201d.","Within the context of an object model, typically an application object model is extensible through the creation of user-created objects and objects provided by third-party vendors. It would be helpful if a version of an object model application and a version of components (objects) associated with the object model application could be sensed. It would also be helpful if the presence of new versions of components could be sensed and if new versions of components exist, the persistent state associated with the old versions of the components could be automatically upgraded to a format compliant with the new version. It would also be helpful if this could be done automatically as components are being loaded from persistent storage.","When a component is to be loaded or executed, the version of the component to be loaded may be compared with available versions of the component. If an upgraded version of the component is available, the upgraded version of the component may be enabled to dynamically and deterministically update itself. The component may be an object in an object model. The upgraded version of the component may update itself by calling an update method. The component may be upgraded with minimum user intervention, dynamically, as the object is loaded.","Metadata associated with an outdated component for which an upgraded version of the outdated component is available may be modified automatically with minimal user intervention. The metadata may be updated dynamically as a result of attempting to load or execute the outdated component.","The outdated component and\/or the upgraded component may be an object in an object model, the object associated with metadata. An updated version of the object may be available, requiring an updated version of the metadata. The metadata associated with the outdated component may be modified in place to generate updated metadata compatible with the upgraded component. The metadata may be modified automatically with minimal user intervention dynamically upon initiation of a load or execute operation.","The outdated component and\/or the upgraded component may be pluggable. The outdated component and\/or the upgraded component may be provided by a software vendor, created by a user or provided by a third party.","Serialization refers to the process of receiving an object and converting its state information into a form that can be stored or transported. An object writes its current state, usually indicated by the value of its member variables, to temporary storage (e.g., memory or network streams) or to persistent storage. The object can be re-created by reading, or deserializing, the object's state from storage. In some embodiments of the invention, the serialized data representing the potentially outdated object is metadata presented in XML or in another suitable language or form capable of capturing metadata. The XML or other suitable language or form may be modified to generate metadata representing or describing the updated component.","Upon receiving a load request, in some embodiments of the invention a DTS (Data Transformation Services) persistence engine may determine if a component such as the object defined by the XML metadata is outdated. An outdated package or container may include the metadata for one or more components (objects) for which a more current version may or may not be available. As the DTS engine loads the package, the DTS engine may attempt to update the metadata so that the updated metadata is compatible with the upgraded or more current component available in the object model.","In some embodiments of the invention, the DTS object model or application itself may be updated when a new version of the application software is shipped by the software vendor. The DTS persistence engine may determine the updateability of an existing package and may apply a series of transformations to it (e.g., to the existing XML) to update the existing package so that it is compatible with the updated version of DTS. For extensible objects, including user-developed objects and pluggable objects, the DTS persistence engine may enumerate through all the extensible objects of that type installed on the computer. (For example, to determine if the version of a connection manager defined by the metadata in the DTS package has been superseded by a more current version of the connection manager available in the object model, all the connection manager objects available in the object model runtime might be enumerated through. If a more current version of the connection manager is found in a registry of objects in the object model, the version of the connection manager defined by the metadata in the DTS package may have been superseded. In some embodiments of the invention, the object model may call an update method on the more current version of the object, resulting in updating of metadata, or persistent state, to the most current format. In some embodiments, the persisted data for the instance of the outdated object is passed to the instance of the updated object through the Update( ) method, and the XML is changed in place in the serialized package. The updated serialized package may be persisted.","An object model may be defined as a collection of objects and relationships. Each of the objects may be associated with one or more properties that govern the execution behavior of the object.","In an illustrative implementation, a Data Transformation Service (DTS) provides a set of tools that allows for the extraction, transformation\/consolidation and loading of data from one or more sources into one or more destinations supported by DTS connectivity. By using DTS tools to graphically build DTS packages or by programming a package with the DTS object model, custom data movement solutions tailored to the specialized business needs of an organization may be created. The components of DTS may be implemented as objects in a data transformation object model.","A DTS package is an organized collection of connections, DTS tasks, DTS transformations and workflow constraints assembled either programmatically or with a DTS tool and saved to Microsoft\u00ae SQL Server\u2122, or to an XML file. Generally, each package includes one or more steps that are executed sequentially or in parallel when the package is run. When executed, the package connects to the appropriate data source(s), extracts data from the source(s), (optionally) transforms the data, and loads the transformed data into one or more destinations.","A DTS package may include one or more extensible objects such as tasks, connection managers, logging providers, \u201cfor each\u201d enumerators, and so on. A DTS task is a discrete set of functionality, executed as a step in a DTS package. Each task defines a work item to be performed as part of the data movement and data transformation process, or as a job to be executed. Examples of commonly used DTS tasks include importing and exporting data, transforming data, copying database objects, and sending messages to and receiving messages from other users and packages, and so on. A DTS transformation may include one or more functions or operations applied to a piece of data before the data is loaded into the destination. A DTS transformation may be composed of a number of DTS sub-transformations, connected together into a transformation chain; that is, the output of a first sub-transformation may be input to the next sub-transformation in the chain and so on.","A DTS connection manager establishes valid connections to source and destination data and to any additional data sources (for example, lookup tables). A DTS connection manager enables connections to data stored in a wide variety of OLE DB-compliant formats as well as custom or nonstandard formats. The following varieties of connections and others are enabled:\n\n","A logging provider generates messages associated with the execution of a package and provides failure and other types of notifications. Logging and failure notification options may be accessed by setting an output file to which notifications are set. Business rules may be applied to data without writing code for scheduling, logging, notification of failure or completion, or file downloading.","The DTS runtime is an execution environment that handles the execution time behavior of the objects in the DTS object model. A component of the DTS runtime is the DTS engine or DTS persistence engine (terms used interchangeably herein) which may load a DTS package for execution by the DTS runtime and\/or may persist a package to stable storage. In addition to the vendor-provided DTS runtime, DTS engine and DTS tasks, connections, log providers and so on, users and third parties can provide pluggable extensible components for use with the DTS system.","In accordance with some embodiments of the invention, the version of the DTS package and the DTS object model and\/or a component or components thereof may be automatically sensed and updated. Version serialization may be employed to update the outdated DTS package with an updated version of the DTS object model and\/or a component or components thereof. The DTS object model may be vendor-supplied while extensible objects may come from the vendor supplying the DTS system or from third parties.","In some embodiments of the invention, one or more properties including UpdatePackage and\/or UpdateObjects may be set on an object, although it will be understood that the invention is not limited to properties so named.","Serialization is the process of receiving an object and converting its state information into a form that can be stored or transported. An object writes its current state, usually indicated by the value of its member variables, to temporary storage (e.g., memory or network streams) or persistent storage. The object can be re-created by reading, or deserializing, the object's state from storage.","The serialized stream may be encoded using XML, SOAP, a compact binary representation, etc. A formatter object used to encode the serialized stream may determine the format. The formatter may be a pluggable component of a channel. A custom formatter can be plugged in to replace the standard XML or binary formatters. A pluggable formatter may allow the serialization of objects in supplied formats such as binary and SOAP. A custom formatter may be created.","The complement of serialization is deserialization, which converts a data stream into an object. Together, these processes allow data to be easily stored and transferred.","In some embodiments of the invention, a DTS engine serializes packages into XML. At load time, the DTS engine may determine if a package is an outdated version. When the DTS engine loads an outdated version of a package, the DTS engine may attempt to update the package.","In some embodiments of the invention, the DTS system is updated when a new version of the application software is shipped by the software vendor. The DTS runtime may determine the version of the existing package and apply a series of transformations to the old XML to update the package to be compatible with the newly installed version of DTS. For extensible objects, the DTS runtime may enumerate through all the extensible objects of that type installed on the computer. (For example, for an outdated connection manager, all the connection manager objects available in the object model may be enumerated through to determine if an updated connection manager is available.) In some embodiments of the invention, the object model calls a method (e.g., CanUpdate method) on each object to determine if the object is capable of upgrading the outdated object in the input. If the object reports that it is capable of upgrading the outdated object, the persisted data for the instance of the outdated object may be passed to the instance of the updating object through the Update( ) method. The Update( ) method applies some transformation to the data and returns the upgraded data, which may then be incorporated back in to the serialized package. The updated serialized package may be persisted again to finalize the upgrade process.","Exemplary Computing Environment",{"@attributes":{"id":"p-0033","num":"0035"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0035","num":"0037"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","Automatic Updating of Pluggable Components",{"@attributes":{"id":"p-0045","num":"0047"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":["200","110","200"]},"In , system  may comprise one or more of the following: an execution environment , an application , and one or more components represented in  by component A , component B , component C , etc. Components such as exemplary component A , component B , component C , etc. may be supplied by a software vendor supplying application  or may be supplied by a third party. Components such as exemplary component A , component B , component C , etc. may include sub-components. For example, component A  may include a subcomponent A (not shown) which may itself include a subcomponent A (not shown) and so on. It will be understood that a component may be nested to any suitable number of levels. Similarly, component A  may include one or more subcomponents such as subcomponent A. Component A , component B , component C , etc. may be objects in an object model. Component A , component B , component C , etc. may be associated with a version or version information. That is, an initial component (e.g., version one of component A) may be provided and be subsequently modified or updated so that a new copy of the component (e.g., version two of component A) including the modifications or updates is subsequently provided.","System  may receive input  which may represent or include metadata for one or more components, represented in  by component D metadata , component E metadata , component F metadata , etc. Components such as those defined by exemplary component metadata D , component E metadata , component F metadata , etc. may be supplied by a software vendor supplying application  and\/or execution environment  or may be supplied by a third party. Components such as those defined by exemplary component D metadata , component E metadata , component F metadata , etc. may include one or more sub-components. For example, the component defined by component D metadata  may include a sub-component D (not shown) and subcomponent D (not shown). Sub-components may themselves include subcomponents, that is, sub-component D may itself include a subcomponent D (not shown). It will be understood that a component or sub-component may be nested to any suitable number of levels. Components defined by Component D metadata , component E metadata , component F metadata , etc. may be objects in an object model. Component D metadata , component E metadata , component F metadata , etc. may be associated with a version or version information. That is, an initial version of a component may be provided and be subsequently modified or updated so that a new copy of the component including the modifications or updates is subsequently provided, as described above. The initial component may be referred to as an outdated component when an updated (more current) component version becomes available. The updating or upgrading may occur automatically (without user intervention) and dynamically (as the input is loaded or when an execution request has been entered).","In accordance with some embodiments of the invention, metadata for components such as component D metadata , component E metadata , component F metadata , etc. may be automatically updated or upgraded as described more fully below.",{"@attributes":{"id":"p-0049","num":"0051"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["302","304","304","312","312","302","304"]},"For example, suppose the DTS object model is associated with or includes version 2 of a communication manager , version 3 of a task  and version 1 of a log provider . Suppose package  includes metadata for version 1 of the communication manager , metadata for version 1 of the task  and metadata for version 1 of the log provider . In accordance with some embodiments of the invention, package  may be upgraded to include metadata compatible with version 2 of the communication manager and metadata compatible with version 3 of the task. (Log provider metadata  may remain unchanged because a more current version of the log provider is not available within the DTS object model.) The process of upgrading the components is described more fully below.",{"@attributes":{"id":"p-0051","num":"0053"},"figref":"FIG. 4","b":"402"},"At step , a load may be initiated. The input to be loaded may be loaded in response to an execution command prior to execution or alternatively may be loaded into an editor or design tool prior to modification. For example, suppose package  is to be loaded.","At step , the version indicated in the metadata of the input may be compared with available versions of the component registered with the current version of the application installed. For example, suppose the input (e.g., a DTS package) includes metadata associated with version x of component A and metadata associated with version y of component B. The version number of component A may be compared with available versions of component A in the object model. Similarly, the version y of component B indicated by the metadata associated with component B may be compared with available versions of component B in the object model. More specifically, suppose component A is a log provider. The version of component A may be compared with all the versions of log providers available in the DTS application.","At step , if the available version(s) of the component in the object model are not more current than the version of the component indicated by the metadata associated with that component in the input, the metadata of the next component may be processed. At step , if the available version(s) of the component in the object model is more current than the version of the component indicated by the metadata for that component in the input, the metadata may be upgraded to be compatible with the more current version of the component. The modified metadata may be persisted. At step , if the version of the component defined by the metadata in the input is more current than that component available in the object model, a message may be returned and (optionally) error processing performed. Steps  and - may be repeated until all the metadata for all the components in the input (including all nested components) are processed. That is, to continue the example above, after the log provider component is processed, the communication manager may be processed next and so on until all the components in the input have been processed. At step  the input (e.g., DTS package) may be persisted.","In some embodiments of the invention, the version of the communication manager defined by the metadata in the DTS package may be compared with available versions of the communication manager in the DTS application. For example, version 1 of the communication manager defined by the metadata in the DTS package may be compared with version 2 of the communication manager in the DTS application. Assuming that version 2 is more current than version 1, the metadata defining version 1 of the communication manager may be modified to be compatible with version 2 of the communication manager.","Similarly, the version (version 1) indicated by the metadata for the task in the DTS package may be compared with available versions of the task in the DTS application (suppose version 3 of the task is available) and thus the metadata for version 1 of the task in the package may be modified to be compatible with version 3 of the task, again assuming that version 3 is more current than version 1.","Finally, the version of the log provider indicated by the metadata in the DTS package may be compared with available versions of the log provider in the DTS application. Both the package and the application have version 1 of the log provider, so in some embodiments of the invention, processing continues at the next step. Had a component in the package or a reference thereto been a more current version than the application version, say, for example, the log provider referred to in the package were version 3, in some embodiments, an error message would be returned and (optionally) error processing performed.","At step , the updated input may be persisted. The input may be persisted in a database, a file or in any suitable persisted state.",{"@attributes":{"id":"p-0059","num":"0061"},"figref":["FIG. 5","FIG. 4","FIG. 5","FIG. 5"],"b":"502"},"At step  input to an application, as described above, may be received.","At step , a load may be initiated. In some embodiments of the invention, the input received is in the form of an XML file. The XML file may represent a serialized object, that is the metadata for the object may be represented in XML. In the load process, the XML nodes may be deserialized or converted back into objects within the DTS object model. The input may include one or more nodes, each node including metadata defining a component. Each of those components may include one or more components. A component in some embodiments of the invention, as described above, may comprise an object. The object may comprise one or more sub-objects. The load may be initiated for the purpose of execution. The load may be initiated for the purpose of modifying the input (e.g., the DTS package), as for example, within a design tool.","At step , the version of the component defined by the metadata in the input may be compared to one or more versions of the component in the object model. If the version of the component in the object model is more current than (i.e., is an upgraded version of) the version of the component received in the input to be loaded, in some embodiments of the invention, the application may make a call into the more current component and the component may determine if the upgrade can be performed. In some embodiments of the invention, the application may query the component to determine if the component is upgradeable. For example, the value of the UpdatePackage property or the UpdateObjects property may be requested. If the component cannot perform the upgrade, an error may be returned and processing may continue at step . If the value of the appropriate property indicates that the component is upgradeable, processing may continue at step . The newer more current component may be loaded. If the appropriate property indicates that the component cannot be upgraded, in some embodiments of the invention, the outdated version of the component is loaded. Alternatively, an error message may be displayed.","At step , in some embodiments of the invention, the application, in response to determining that the component is upgradeable, passes the outdated object and the version number of the outdated object to the upgraded version of the component for upgrading.","At step  the upgrade may be performed. In some embodiments of the invention, upgrading the component may entail updating an XML file, representing the serialized object or objects within the DTS package. In some embodiments of the invention, the upgrade is performed by calling an update method on the updated object. At step , the component may be persisted. For example, the updated XML file representing the serialized objects (the package) may be persisted.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the creation and\/or implementation of domain-specific programming models aspects of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5","FIG. 4"]}]},"DETDESC":[{},{}]}
