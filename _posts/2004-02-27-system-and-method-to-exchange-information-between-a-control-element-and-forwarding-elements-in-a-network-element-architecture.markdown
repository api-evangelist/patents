---
title: System and method to exchange information between a control element and forwarding elements in a network element architecture
abstract: A network element comprises a control element (CE), a plurality of forwarding element (FEs) and an interconnect in communication with said CE and at least one of said FEs. Communication across the interconnect between the CE and the plurality of FEs is done in accordance with a protocol that includes a binding phase used to provide a data channel between the CE and a first one of the FEs. The binding phase is further used to provide a control channel between the CE and the first one of the FEs, the control channel used to transport control and configuration messages. The control channel is separate from the data channel. The protocol also includes a capability discovery phase, a configuration operation phase and an unbind phase executed between the CE and the FE.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07428219&OS=07428219&RS=07428219
owner: Intel Corporation
number: 07428219
owner_city: Santa Clara
owner_country: US
publication_date: 20040227
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Not Applicable","Not Applicable.","The present application relates generally to a network element architecture and, more particularly, to a mechanism for exchanging information between a control element and forwarding elements in the network element architecture.","In recent years, a trend has emerged in the networking industry in which Internet Protocol (IP) network elements (NEs) have begun to evolve from highly customized and integrated designs to modular pieces of equipment. NEs appear to external entities as a monolithic piece of network equipment, such as a router, network address translator (NAT), firewall, or load balancer. Internally, however, the NE (such as a router) is composed of numerous logically separated entities that cooperate to provide a given functionality (such as routing).","Two types of network element components are commonly used in a NE: a control element (CE) and multiple forwarding elements (FEs). Control elements typically provide control functionality e.g., routing and signaling protocols. Forwarding elements typically handle data path operations for each packet.","There are several known mechanisms used for exchanging information between control elements and forwarding elements in NEs. Most of these mechanisms are FE and\/or interconnect specific. Typically, the exchange of information between an FE and a CE occurs across a single channel carrying both control and configuration messages as well as data packets. Further, the messages tend to be large in size. The NE may also be susceptible to Denial of Service (DoS) attacks in which the network element is flooded with bogus control protocol packets, which saturate the channel established between the FE and the CE.","Before describing the present mechanism for exchanging information between a control element and a set of forwarding elements, some introductory concepts and terminology are explained.","A Forwarding Element, Control Element Separation (ForCES) protocol \u201cForCES Protocol\u201d refers to the ForCES post-association phase protocol. The ForCES Post-Association Phase Protocol is a protocol used for post-association phase communication between CEs and FEs (defined below). The ForCES Protocol is a master-slave protocol in which the CEs are masters and the FEs are slaves. This protocol includes both the management of the communication channel (e.g., connection establishment, heartbeats) and the control messages themselves. This protocol could be a single protocol or could include multiple protocols working together, and may be unicast-based or multicast-based.","A forwarding element (FE), sometimes referred to as a forwarding plane, comprises a logical entity providing per-packet processing and handling as directed by a CE. Functions performed by the FE include LPM (longest prefix matching) packet forwarding, packet classifying, traffic shaping, metering, and network address translating. In one embodiment the FE implements the ForCES protocol.","A control element (CE), sometimes referred to as a control plane, comprises a logical entity instructing one or more FEs regarding how to process packets. CEs handle functionality such as the execution of control and signaling protocols. Some examples of control functions that can be implemented in the CE include routing protocols as well as control and signaling protocols. In one embodiment the CE implements the ForCES protocol.","The Network Processing Forum (NPF) Application Programming Interface (API), published August 2002, is a programming interface to control plane applications. The NPF API makes the existence of multiple forwarding planes as well as vendor-specific details transparent to the control plane applications. Thus, the protocol stacks and network processors available from different vendors can be easily integrated with the NPF APIs.","The Routing Information Protocol (RIP) comprises an interior gateway protocol that specifies how routers exchange routing table information. The Open Shortest Path First (OSPF) protocol is an interior gateway routing protocol developed for IP networks based on the shortest path first or link-state algorithm. Routers use link-state algorithms to send routing information to nodes in a network by calculating the shortest path to each node based on a topography of the network constructed by each node. Each router sends the portion of the routing table that describes the state of the router's own links.","Type-Length-Value (TLV) is a method of encoding parameters within a protocol message. TLV encoding typically includes one octet of type (T), one octet of length (L) and octets of value (V). The Type field indicates the type of items in the Value field. The Length field indicates the length of the Value field. The Value field comprises the payload portion of the packet.","Generic Routing Encapsulation (GRE) is an encapsulation protocol used for encapsulating packets inside a network layer protocol such as IP.","Referring now to , a block diagram of a network is shown. The network includes a first network router  coupled across a local area network (LAN)  to three systems , , and . The systems , , and  may be work stations, desktop computers , laptop computers or the like. The first router  is also coupled to a second router  which is coupled to three systems , , and  across LAN . First router  includes a control element  and multiple forwarding elements , , and . Second router includes a control element  and multiple forwarding elements ,  and . With such an arrangement packets can be transferred from one system to another. For example, system  can transfer packets to system  by forwarding the packet to forwarding element  resident in first router . The control element  of first router  directs the packet received in forwarding element  to forwarding element . The packet is directed out of router  from forwarding element  to forwarding element  of second router . The control element  of second router  directs the packet from forwarding element  to forwarding element . The packet is then directed from forwarding element  to system .","Referring now to , network element , such as a switch or a router, typically include a control element  and multiple forwarding elements and . The control element  controls and configures the forwarding elements and and the forwarding elements and manipulate the network traffic. In general, the control element  executes signaling and\/or routing protocols (e.g. RIP, OSPF) and provides control information to the forwarding elements and . The forwarding elements and make decisions based on this information and perform operations on packets such as forwarding, classification, filtering, and the like.","The standardized Application Program Interfaces (APIs) within the control element  and forwarding elements , enable system vendors, Original Equipment Manufacturers (OEMs), and end users of network elements to mix and match components available from different vendors to achieve a device of their choice. The Network Processing Forum (NPF) API is an industry standard API for this purpose and provides a flexible and well-known programming interface to the control plane applications. The NPF API makes the existence of multiple forwarding elements, as well as vendor-specific details, transparent to the control element applications. Thus, the protocol stacks and network processors available from different vendors can be readily integrated with the NPF APIs.","In the illustrative embodiment, a NE includes a CE , a Transport Plugin  and FEs and . The CE  is used to provide the implementation for the NPF APIs described above. The CE  is aware of multiple FEs and and has the intelligence to perform one-to-many mapping of the FEs for the application. The transport plugin  facilitates communication between the CE and FEs and implements the transport protocol.","The presently described protocol provides a mechanism for exchanging information between the CE  and one or more FEs , in a network element architecture. In a particular embodiment the protocol is referred to as the FLEX (ForCES Light-weight Extensible) protocol. The FLEX protocol may form a part of the Transport Plugin .","The inventive protocol is a stateless, request-response protocol between the control element  and the forwarding elements , in an NE. The protocol is relatively lightweight in terms of both low message parsing overhead and utilization of small message sizes, which may be accomplished by using TLV or compact binary encapsulation for the message or packet payload. In one embodiment, the protocol has a fixed length header that is 8-bytes long followed by a variable length payload, with the messages being 32-bit aligned. An example packet header includes a version field, a flags field, a message type field and a command correlator field. The version field is one byte long and contains the version number of the protocol being used. The flags field is also one byte long and contains various flags that are used in protocol headers. The message type field is two bytes long and defines the message type (e.g., bind request, bind response, etc.). The command correlator field is four bytes long and is used to distinguish between commands of the same type. The command correlator field contains a sequence number for the command which is used in order to distinguish between the response to the commands of the same type. For example, a CE may issue a bind request to a first FE and a bind request to a second FE. The command correlator field assigns a different sequence number to each bind request such that the response to the first bind command can be distinguished from the response to the second bind request.","The inventive protocol is extensible by separating the data model from the base protocol. Thus, the message functionality is defined by the inventive protocol while the data within the message is defined by the data model. The inventive protocol provides the base functionality messages (e.g. configure request) while data that is included inside the messages (e.g. an IP forwarding table) is defined by the data model. Since the inventive protocol is separate from the data model, the inventive protocol is extensible and can carry different types of information. A separate FE model defines the data that needs to be exchanged or the payload for the inventive\/base protocol.","The protocol implements separate control and data channels. Referring again to , the data channel ,  carries control protocol packets, such as RIP or OSPF packets, which are either redirected from the FEs , to the CE  or are to be forwarded from the CE  to another FE. The control channel ,  carries other control and configuration messages. The present protocol's separation of the control channel from the data channel allows the use of different transports for the control channel than those transports used in the data channel. The present protocol supports different interconnects by allowing different encapsulations for different interconnects. For example, when an IP interconnection is used, the inventive protocol uses TCP for the control channel. The present protocol meets ForCES requirements including command bundling, message priority, dynamic association and failover support.","The separation of the control and data channel helps make the present protocol robust against Denial of Service (DoS) attacks. In a DoS attack, a malicious user tries to bring down the system or network element by flooding the network element with bogus control protocol packets. If a single channel is used to carry both control messages from CE to FE as well as control protocol packets from FE to CE, the single channel would be overwhelmed by the bogus control protocol packets in case of a DoS attack. By separating information transferred between the CE  and the FEs , into two separate channels, the control channel can continue to work properly even when the data channel is overwhelmed during a DoS attack. Thus, the protocol is more robust against DoS attacks.","In one embodiment, the information exchange between the CE  and FE , using the present protocol includes multiple phases: a binding phase, a capability and topology discovery phase (also referred to as a capability discovery phase), and a configuration operation phase.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["110","112","100","112","100","114","100","110","100","110"]},"In the capability discovery phase, the CE  sends a capability request  to the FE . The FE , in response to receiving the capability request , sends back a capability response  with its capability information to the CE . For example, information such as the FE can perform IPv4 forwarding, 5-tuple packet classification, etc. The CE  also sends a topology request  to the FE . The FE  responds to the topology request  with a topology response  which includes the FE's topology information relative to other FEs. For example, information such as FE A is directly connected to FE B, C. If the CE  deems the FE's capabilities and topology acceptable and if the CE  is ready to control and configure the FE , the CE  sends a start FE operation message  to the FE . After the start FE operation message is received by the FE , the FE  can report events and send packets to the CE . A heartbeat message exchange also starts after the start FE operation message  is sent. The heartbeat is a periodic \u201cpinging\u201d of the CE and FE to ensure that they are still active. If the CE  is not capable of controlling or configuring the FE based on the FE's capabilities or topology, the CE  sends an unbind message  to the FE at this point.","In the configuration operation phase, a configuration request  is sent from the CE  to the FE . In response to receiving the configuration request , the FE  sends back a configuration response  to the CE . The configuration response  will indicate whether the configuration request  was successful or it failed for some reason. The CE  also sends a query request  to the FE . In response to receiving the query request , the FE  sends back a query response  to the CE . For example, the CE could send a query request  to query the status of a port on the FE  and the query response  would indicate the status of that port. Asynchronous FE events , such as port down events, are also reported to the CE . Packet redirection  between the CE  and the FE  also takes place i.e. control packets such as RIP, OSPF messages are redirected to the CE  from the FE  and vice-versa over the Data channel. Heartbeat messages are also exchanged between the CE  and FE  according to an interval set during the binding phase.","During the shutdown or unbinding phase, the FE  or the CE  send an unbind message  to the other which ends their association. In  the unbind message  is shown being sent from the FE  to the CE , although the CE  could have sent the unbind message  to the FE .","The information exchange between the CE and FEs can have several embodiments, which are FE or interconnect specific. The inventive protocol provides mechanisms for information exchange that provides reliability (using TCP\/IP), robustness against DoS attacks (separation of control and data channel), extensibility (separation of protocol & data model) and low overhead\/good performance (using TLV encoding).","Referring now to  an NE (in this example a router)  which implements the present protocol is shown. The NE  includes three FEs , and as well as a CE  and an interconnect . In one embodiment the interconnect  is realized as a switch fabric. Host  sends a packet to FE on port-. The packet is forwarded from FE to FE . FE receives the packet and forwards it over the egress port to host . In the NE , the present protocol is used to exchange information between the FEs and by way of CE .","The process starts with the CE  performing a bind operation with FE , FE and FE . As a result of the bind operations a data channel is established between the FE and CE , as is another data channel between CE  and FE . A control channel is established between the FE and the CE , as is another control channel between the CE  and the FE . As described above, the capability discovery phase is executed as is the configuration operation phase. configuration request messages are used to download any configuration information from the CE  to the FEs and and the configuration response messages are used to notify the CE  about the result or status of the configuration requests.","A flow chart of the presently disclosed method is depicted in . The rectangular elements are herein denoted \u201cprocessing blocks\u201d and represent computer software instructions or groups of instructions. The diamond shaped elements, are herein denoted \u201cdecision blocks,\u201d represent computer software instructions, or groups of instructions which affect the execution of the computer software instructions represented by the processing blocks.","Alternatively, the processing and decision blocks can be performed by functionally equivalent circuits such as a digital signal processor circuit or an application specific integrated circuit (ASIC). The flow diagrams do not depict the syntax of any particular programming language. Rather, the flow diagrams illustrate the functional information one of ordinary skill in the art requires to fabricate circuits or to generate computer software to perform the processing required in accordance with the present mechanism for exchanging information between a control element and a set of forwarding elements. It should be noted that many routine program elements, such as initialization of loops and variables and the use of temporary variables are not shown. It will be appreciated by those of ordinary skill in the art that unless otherwise indicated herein, the particular sequence of processing blocks and\/or decision blocks described is illustrative only and can be varied without departing from the spirit of the mechanism for exchanging information between a control element and a set of forwarding elements. Thus, unless otherwise stated the processing blocks and\/or decision blocks described below are unordered meaning that, when possible, the processing blocks and\/or decision blocks can be performed in any convenient or desirable order.","Referring now to , the process starts and processing block  is executed. In processing block  a binding phase is performed between the FE and the CE. In the binding phase, the FE sends a bind request to the CE. In response to receiving the bind request, the CE sends back a bind response to the FE. This step also signifies the establishment of the control channel between the FE and the CE.","In processing block  a data channel is established between the CE and the FE. During the binding phase, encapsulation information is exchanged between the CE  and the FE , which enables the provision of a separate data channel for the exchange of data packets between the CE and the FE. The GRE protocol, for example, may be used for data channel formation.","In processing block  the capability discovery phase is executed wherein the CE sends a capability request to the FE. The FE, in response to receiving the capability request, sends back a capability response with its capability information to the CE. As part of the capability discovery phase the CE also sends a topology request to the FE. The FE responds to the topology request with a topology response which includes the FE's topology information relative to other FEs. If the CE deems the FE's capabilities and topology acceptable and if the CE is ready to control and configure the FE, the CE sends a Start FE Operation message to the FE. After the Start FE Operation message is received by the FE, the FE can report events and send packets to the CE.","Processing block  is performed next, wherein the configuration operation phase is performed. In this phase a configuration request is sent from the CE to the FE. In response to receiving the configuration request, the FE sends back a configuration response to the CE. The CE also sends a query request to the FE. In response to receiving the query request, the FE sends back a query response to the CE. Packet redirection between the CE and the FE also takes place over the data channel.","In processing block  an unbind of the CE and the FE takes place. The FE or the CE sends an unbind message to the other which ends their association. After the unbind, the process ends.","The present protocol provides a mechanism for exchanging information between the control element and one or more forwarding elements in a network architecture. Some of the features of this mechanism include extensibility (achieved by separation of the protocol and the data model), reliability (by using TCP\/IP), improved performance (by using TLV encoding) and robustness against Denial of Service (DoS) attacks via separation of the Data and Control channel.","Having described preferred embodiments of the mechanism for exchanging information between a control element and a set of forwarding elements it will now become apparent to those of ordinary skill in the art that other embodiments incorporating these concepts may be used. Additionally, the software included as part of the mechanism for exchanging information between a control element and a set of forwarding elements may be embodied in a computer program product that includes a computer useable medium. For example, such a computer usable medium can include a readable memory device, such as a hard drive device, a CD-ROM, a DVD-ROM, or a computer diskette, having computer readable program code segments stored thereon. Accordingly, it is submitted that that the mechanism for exchanging information between a control element and a set of forwarding elements should not be limited to the described embodiments but rather should be limited only by the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present mechanism for exchanging information between a control element and a set of forwarding elements will be more fully understood from the following detailed description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
