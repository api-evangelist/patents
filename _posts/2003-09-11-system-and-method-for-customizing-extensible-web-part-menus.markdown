---
title: System and method for customizing extensible web part menus
abstract: A system and method that allows Web Part developers to customize Extensible Web Part Menus by programmatically adding, deleting, or modifying the commands that appear in the Extensible Web Part Menu. The customization may be performed by the Web Part developer either through a portal page on a server platform or on a client platform. Once the customization to the Extensible Web Part Menu is complete, the Web Part renders the customized Extensible Web Part Menu in a manner that is completely integrated into the rest of the Web Part on the portal page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07464369&OS=07464369&RS=07464369
owner: Microsoft Corporation
number: 07464369
owner_city: Redmond
owner_country: US
publication_date: 20030911
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention is directed to Extensible Web Part Menus and more particularly to customizing Extensible Web Part Menus.","In this age of information overload, one of the biggest hurdles that Web Page designers face is finding, consolidating, and sharing mission-critical information in a single, easy-to-access Web portal page. Digital dashboards and the applications that host them, such as Microsoft\u00ae SharePoint\u2122 Portal Server and Microsoft\u00ae Windows\u2122 SharePoint\u2122 Services (WSS) Server, are helping to make these tasks easier.","Digital dashboards are customized portals that consolidate personal and business information into one location and benefit businesses by reducing the time and effort needed to locate and manage information from multiple sources. Information in digital dashboards can come from internal or external sources, and can be accessed online or offline. Best of all, digital dashboards can be highly interactive, allowing for dynamic information management and analysis. Knowledge workers can view and interact with digital dashboards by using applications such as Microsoft\u00ae Internet Explorer.","Web Parts are the core building blocks of digital dashboard. Web Parts use technologies such as Extensible Markup Language (XML), Hypertext Markup Language (HTML), and scripts on Active Server Pages (ASPs) to render componentized information in digital dashboards. The use of Web Parts has lead to a new title for the knowledge workers who design them: Web Part developers.","When Web Part developers create Web Parts for use with a Web portal, there may be instances in which the Web Part developers may need to manipulate portions of the Web Part User Interface (UI). For example, each time a Web Part developer inserts a new Web Part on the Web page, it may be necessary to customize the menu commands for that particular Web Part. Typically, a standard menu, which contains a standard set of default commands, is displayed for each Web Part on the Web portal page, regardless of the type of Web Part.","For example, a standard set of default commands may include a MINIMIZE\/RESTORE command, a CLOSE command, a DELETE command, a MODIFY MY WEB PART command, an EXPORT command, and a HELP command. Thus, the same menu is displayed for a \u201cmap\u201d Web Part and for a \u201csearch\u201d Web Part and a \u201ctable\u201d Web Part. Unfortunately, the standard default commands may not be applicable to every type of Web Part. For example, if a Web Part developer creates a Web Part to display graphical images, he or she may not want the user to be able to export the image to another application program and therefore may want to eliminate or disable the EXPORT command. Similarly, if a Web Part contains a map image, the Web Part developer may want to provide the user with a ZOOM IN command and a ZOOM OUT command. However, because the commands are not included in the default command set for a standard menu, the Web Part developer cannot provide them to the user.","Therefore, there is a need for a method to allow Web Part developers to customize the Extensible Web Part Menu for each Web Part. In particular, there is a need for a method to allow Web Part developers to programmatically add, remove, or alter the functionality of the standard default commands in a Web Part's Extensible Web Part Menu on a portal page and render the customized Extensible Web Part Menu in such a manner as to completely integrate it into the rest of the Web Part.","The present invention meets the needs described above in a method to allow Web Part developers to programmatically add, delete, or modify the commands in a Web Part Extensible Web Part Menu. The customization of the Web Part Extensible Web Part Menu may be performed through a portal page on a server platform or through a Web page in an application program running on a client platform. The Web Part will then render the customized Extensible Web Part Menu in a manner that is completely integrated into the rest of the Web Part on the portal page.","Generally described, the invention includes a method and system that allows a Web Part developer to customize an Extensible Web Part Menu to include commands that are suited to the particular Web Part. The Web Part developer begins by accessing an object model associated with the Web Part through a portal page on a server platform. To customize the Extensible Web Part Menu, the Web Part developer first creates a call that overrides the object model for the default Extensible Menu. Next, the determination is made whether to add a new command. If the Web Part developer determines to add a new command, then the Web Part developer defines the new command and then inserts the command into the Extensible Web Part Menu. The new command may either be added to the end of the Extensible Web Part Menu or inserted between two existing commands. If however, the determination was made not to insert a new command, a second determination is made whether to modify the properties of an existing command. If the Web Part developer determined to modify an existing command, the position of the desired command if first located within the Extensible Web Part Menu. Next, the Web Part developer alters any properties associated with the command by changing the appropriate values of the properties.","However, if the Web Part developer does not want to modify, any of the existing commands, a final determination is made whether to remove an existing command from the Extensible Web Part Menu. If the Web Part developer wants to remove a command, he or she first identifies the position of the command and then places an appropriate call to remove the command from the Extensible Web Part Menu. By using the appropriate call, the Web Part developer may remove either the first instance of the command, every instance of the command, or may elect to remove all of the commands from the Extensible Web Part Menu. Therefore, the Web Part developer has complete control over the Extensible Web Part Menu and is able to customize the commands within the Extensible Web Part Menu to achieve the desired effect.","The various aspects of the present invention may be more clearly understood and appreciated from a review of the following detailed description of the disclosed embodiments and by reference to the appended drawings and claims.","The present invention is typically embodied in a Web Part Menu object model. The Web Part developer will be able to customize the content of the Extensible Web Part Menu on the server platform through a Web portal design program, such as the Microsoft\u00ae SharePoint\u2122 application program or the Microsoft\u00ae SharePoint\u2122 Services. Specifically, the Web Part developer will be able to modify the characteristics of existing commands, add commands in addition to the default commands to the menu items on each Web Part on the portal page, or delete commands from the Extensible Web Part Menu. The customization of the Extensible Web Part Menu occurs by accessing the object model for the Web Part that the Web Part developer wants to customize. The Web Part developer then adds the appropriate code to modify, add, or delete the commands in the default Extensible Web Part Menu. Typically, the object model is written in the C# programming language, however those skilled in the art will appreciate that other programming languages may be used to program the object model without departing from the scope of the invention.","The current commands for the default Extensible Web Part Menu include a MINIMIZE\/RESTORE command, a CLOSE command, a DELETE command, a MODIFY MY WEB PART command, an EXPORT command, and a HELP command. Typically, the default Extensible Web Part Menu is downloaded from the server platform only once per visit to a portal page. Therefore, each Web Part on the portal page uses the same default Extensible Web Part Menu unless an Extensible Web Part Menu for a particular Web Part has been modified in the object model on the server platform or the user's rights require modification. For example, the Web Part administrator can limit the user's rights to access each command on the Extensible Web Part Menu. If the Web Part administrator does not give a user the rights or permission to perform a certain command, that particular command may not be displayed in the Extensible Web Part Menu. A summary of the default commands and when they are displayed in the Extensible Web Part Menu is provided in Table 1.",{"@attributes":{"id":"p-0021","num":"0020"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Summary of Default Commands for Extensible Web Part Menu."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Menu Item","When Displayed"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Minimize","Rights = Personalize Web Part Page,"]},{"entry":[{},{},"Author Page( )"]},{"entry":[{},{},"FrameState!=Minimize"]},{"entry":[{},"Restore","Rights = Personalize Web Part Page,"]},{"entry":[{},{},"Author Page( )"]},{"entry":[{},{},"FrameState!=Minimize"]},{"entry":[{},"Close","Rights = Personalize Web Part Page,"]},{"entry":[{},{},"Author Page( )"]},{"entry":[{},"Delete","Rights = Personalize Web Part Page,"]},{"entry":[{},{},"Author Page( )"]},{"entry":[{},"Modify My Web Part or","Rights = Personalize Web Part Page,"]},{"entry":[{},"Modify Shared Web Part","Author Page( )"]},{"entry":[{},"Export","Rights = Personalize Web Part Page,"]},{"entry":[{},{},"Author Page( )"]},{"entry":[{},"Help","Rights = Browse( ) and"]},{"entry":[{},{},"HelpLink!=Null"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The Web Part developer may customize the Extensible Web Part Menu by modifying the characteristics of the existing commands, adding new commands, or deleting existing commands that are unnecessary for the particular Web Part.","The Web Part developer begins customizing the Extensible Web Part Menu by accessing the object model for the Web Part on the server platform and inserting the appropriate calls to the object model. First, the Web Part developer makes a call to override the CreateWebPartMenu( ) method that creates the default Extensible Web Part Menu. For example, the following C# code may be used to override the CreateWebPartMenu( ) method:\n\n","Next, within the public override void CreateWebPartMenu( ) method, the Web Part developer defines the new command using the MenuItem object. The MenuItem object may be created using the following forms:\n\n","where the displayText property is a string that identifies the name of the command as it appears in the Extensible Web Part Menu, the MenuID property is a string that identifies the a unique identifier for the command, the ClientEvent is a Javascript string, which is executed on the client platform when the menu option is selected, and OnClick is an event that occurs on the server platform when the user clicks on the menu command.","The Web Part developer also sets any appropriate properties for the newly created commands. For example, the Web Part developer can specify whether a separator should be displayed above the command with the BeginSection property, or specify that a \u201ccheck\u201d should be displayed next to the command when the command is selected using the Checked property. A summary of the properties, including the property name, property type, and a description of each property for the MenuItem( ) member is provided in Table 2.",{"@attributes":{"id":"p-0027","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Summary of Properties used by the MenuItem Object."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Enabled","Boolean","\u201ctrue\u201d if the menu item is enabled;"]},{"entry":[{},{},"otherwise \u201cfalse.\u201d The default is set"]},{"entry":[{},{},"to \u201ctrue.\u201d"]},{"entry":["Visible","Boolean","\u201ctrue\u201d if the command will be made"]},{"entry":[{},{},"visible on the Extensible Web Part"]},{"entry":[{},{},"Menu; otherwise, \u201cfalse.\u201d The"]},{"entry":[{},{},"default is \u201ctrue.\u201d"]},{"entry":["MenuItems","MenuItemCollection","Gets a value indicating the collection"]},{"entry":[{},{},"of MenuItems objects associated"]},{"entry":[{},{},"with the Extensible Web Part Menu."]},{"entry":["IsParent","Boolean","\u201ctrue\u201d if the command contains a"]},{"entry":[{},{},"child command; \u201cfalse\u201d if the"]},{"entry":[{},{},"command stands alone. The default"]},{"entry":[{},{},"is \u201cfalse.\u201d"]},{"entry":["Checked","Boolean","\u201ctrue\u201d if a check should be placed"]},{"entry":[{},{},"next to the command in the"]},{"entry":[{},{},"Extensible Web Part Menu when the"]},{"entry":[{},{},"command is selected; otherwise,"]},{"entry":[{},{},"\u201cfalse.\u201d The default is \u201cfalse.\u201d"]},{"entry":["Caption","String","The text caption of the command."]},{"entry":["BeginSection","Boolean","\u201ctrue\u201d if a separator should be"]},{"entry":[{},{},"displayed above the command in the"]},{"entry":[{},{},"Extensible Web Part Menu;"]},{"entry":[{},{},"otherwise, \u201cfalse.\u201d The default is"]},{"entry":[{},{},"\u201cfalse.\u201d"]},{"entry":["MenuID","String","A unique identifier for the command"]},{"entry":[{},{},"item."]},{"entry":["ClientEvent","String","JavaScript for the click event, which"]},{"entry":[{},{},"need to be downloaded to the client"]},{"entry":[{},{},"platform as OnClientClick."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"A summary of the Methods associated with the MenuItem objects is provided in Table 3.",{"@attributes":{"id":"p-0029","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Summary of the Methods for the MenuItem Object."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Method","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"OnClick","Raises the Click Event on the server platform."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Finally, a summary of the Events associated with the MenuItem Object is shown in Table 4.",{"@attributes":{"id":"p-0031","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Summary of Events used with the MenuItem Object."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Event","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Click(Internal)","Occurs when the command is clicked or"]},{"entry":[{},{},"selected using an access key defined for the"]},{"entry":[{},{},"command."]},{"entry":[{},{},"The Click event occurs during the load, as it"]},{"entry":[{},{},"must occur before the Extensible Web Part"]},{"entry":[{},{},"Menu is rendered and cannot occur during the"]},{"entry":[{},{},"initialization, as all of the server platform"]},{"entry":[{},{},"controls will not have finished initializing."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Typically, the commands that the Web Part developer may add may be stored in a standard library. Thus, when the new commands are created, calls to the appropriate subroutine are automatically carried out. However, the present invention allows the Web Part developer to create customized commands that may not be contained in a standard library. In these instances, the Web Part developer may create the necessary subroutines and or function using C#, which will define the action of the customized commands. These subroutines are then saved in the object model and called by the newly created command when the Extensible Web Part Menu is rendered in the Web Part on the Web portal page.","After the new commands for Extensible Web Part Menu are created, the Web Part developer inserts the commands into the Extensible Web Part Menu using the MenuItemCollection method, which has the following form:\n\n",{"@attributes":{"id":"p-0034","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Summary of Properties associated with the MenuItemCollection Object."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Property","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Count","Int","The number of MenuItem"]},{"entry":[{},{},{},"objects in the collection"]},{"entry":[{},"Item[int index]","MenuItem","Returns the MenuItem at"]},{"entry":[{},{},{},"the specified indexed"]},{"entry":[{},{},{},"location in the collection."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0035","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Summary of Methods associated with the MenuItemCollection Object."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Add(MenuItem)","Adds a previously created"]},{"entry":[{},"MenuItem to the end of the"]},{"entry":[{},"current Extensible Web Part"]},{"entry":[{},"Menu."]},{"entry":["Insert(Int, MenuItem)","Adds a previously created"]},{"entry":[{},"MenuItem at the specified"]},{"entry":[{},"index within the menu item"]},{"entry":[{},"collection."]},{"entry":["GetEnumerator( )","Returns an enumerator that"]},{"entry":[{},"can iterate through the menu"]},{"entry":[{},"item collection."]},{"entry":["CopyTo(MenuItem[ ], int)","Copies the entire menu"]},{"entry":[{},"item collection into a"]},{"entry":[{},"one-dimensional array"]},{"entry":[{},"starting at the specified"]},{"entry":[{},"index."]},{"entry":["AddRange(MenuItem[ ])","Adds an array of previously"]},{"entry":[{},"created MenuItem objects to"]},{"entry":[{},"the menu item collection."]},{"entry":["Clear","Removes all MenuItem objects"]},{"entry":[{},"from the menu item collection."]},{"entry":["Contains(MenuItem)","Determines if the specified"]},{"entry":[{},"MenuItem is a member of the"]},{"entry":[{},"menu item collection."]},{"entry":["IndexOf(MenuItem)","Retrieves the first index of"]},{"entry":[{},"a specific MenuItem in the"]},{"entry":[{},"menu item collection."]},{"entry":["Remove(MenuItem)","Removes the first instance of"]},{"entry":[{},"the specified MenuItem from the"]},{"entry":[{},"menu item collection."]},{"entry":["RemoveAt(Int)","Removes the MenuItem from the"]},{"entry":[{},"menu item collection at the"]},{"entry":[{},"specified index."]},{"entry":["ItemFromID(string)","Returns a MenuItem in a menu"]},{"entry":[{},"item collection, and all"]},{"entry":[{},"sub-menu item collections"]},{"entry":[{},"with an ID matching the"]},{"entry":[{},"parameter. Returns NULL"]},{"entry":[{},"if no such MenuItem exists."]},{"entry":["Replace(MenuItem oldItem, MenuItem","Returns VOID. Replaces the"]},{"entry":["newItem)","first instance of the first"]},{"entry":[{},"MenuItem parameter with the"]},{"entry":[{},"second MenuItem parameter."]},{"entry":[{},"If the first MenuItem"]},{"entry":[{},"parameter does not exist,"]},{"entry":[{},"then the second MenuItem"]},{"entry":[{},"parameter is added to the"]},{"entry":[{},"end of the Extensible Web"]},{"entry":[{},"Part Menu."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Below is an example of an end-to-end scenario involving several property checks to add several commands to the Extensible Web Part Menu. The scenario creates three new commands, one of which is a parent command and two are child commands.\n\n","The code is then passed to the Web Part on the Web portal page where it is rendered in a manner that is completely integrated into the rest of the Web Part on the portal page to display the newly created commands.","Turning now to the figures, in which like numerals refer to like elements through the several figures,  illustrates an example of a suitable computing system environment  on which the invention may be implemented. The computing system environment  is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment  be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment .","The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory  to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules, and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball, or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0048","num":"0097"},"figref":"FIG. 2","b":["200","205","200","210","200","215","200","210","200","215","200","200","215","200","215"]},"The Extensible Web Part Menu  is displayed by selecting the icon  using a standard pointing device, such as a mouse, stylus, keyboard, and the like. Upon selecting the icon , the Extensible Web Part Menu  appears as a \u201cdrop-down\u201d window over the display area . The Extensible Web Part Menu  looks and behaves, other than the commands displayed, exactly as a standard menu in a Web Part Page header. The Extensible Web Part Menu  contains a set of default commands, which are displayed for each Web Part . In the present invention, the default commands are a MINIMIZE (or RESTORE command if the Web Part  is minimized) command , a DELETE command  (which is only displayed in the design mode), a CLOSE command , a MODIFY MY WEB PART command , an EXPORT command , and a HELP command .","Additionally, Web Part developers may also include icons associated with the menu commands. For Example, in the default Extensible Web Menu , for the Web Capture Web Part, the MODIFY MY WEB PART command  has an icon  associated with it. In the present invention, the icon , is an image of a window and a ruler. Similarly, the HELP command  also has an icon  associated with it, which in the present invention is an image of a question mark contained in a circle.","The Web Part developers are able to leverage the discoverability of the Extensible Web Part Menu  by adding commands that are custom suited to the particular Web Part . For example, if the Web Part  was a Search Web Part, the Web Part developer could add a \u201cNew Search\u201d command to the Extensible Web Part Menu , which would display the original search window in the display area. Similarly, if the Web Part  was a Map Web Part that contained a map of a city street, from a mapping application program, such as the Microsoft\u00ae Streets and Trips application program, the Web Part developer could display a \u201cZoom In\u201d command and a \u201cZoom Out\u201d command inside the Extensible Web Part Menu .",{"@attributes":{"id":"p-0052","num":"0101"},"figref":["FIG. 3","FIG. 2"],"b":["200","305","210","215","305","305","205","315","310","315","315","205"],"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":{"@attributes":{"id":"ul0009-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":"\/\/----------------------------------------------------------------------------------------\n        \n        "}}}},"The C# code inserted the REFRESH command  into the second position in the Extensible Web Part Menu  using the Index numbers of the MenuItems command using the following line of code:\n\n",{"@attributes":{"id":"p-0054","num":"0130"},"figref":"FIG. 4","b":["400","205","400","405","205","205"],"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":{"@attributes":{"id":"ul0017-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":"public override void CreateWebPartMenu( )"}}}},"Overriding the CreateWebPartMenu( ) method does not overwrite the default Extensible Web Part Menu . Rather the override function allows the Web Part developer to insert the appropriate calls to the CreateWebPartMenu( ) method to either alter the characteristics of the existing command, add additional commands, or delete existing commands from the Extensible Web Part Menu . The calls included after the public override void CreateWebPartMenu( ) method are used in conjunction with the CreateWebPartMenu( ) method to render the customized Extensible Web Part Menu . For instance, when the customized Extensible Web Part Menu  is rendered in a Web Part, the CreateWebPartMenu( ) method is first called to render the default Extensible Web Part Menu . Then, if the public override void CreateWebPartMenu( ) method is encountered, any calls located within the public override void CreateWebPartMenu( ) method will be used to modify the default menu. For instance, the Web Part developer may include methods to add new commands, and to delete or modify existing commands listed in the default Web Part Menu .","At , a determination is made whether the Web Part developer want to either add a new menu command to the Extensible Web Part Menu  or delete an existing command from the Extensible Web Part Menu . If the Web Part developer wants to add a new menu item, then the \u201cYES\u201d branch is followed to , where a new menu command is created using a MenuItem object. The MenuItem object can be created using the following methods:\n\n","where displayText, MenuId, OnClick, and ClientEvent are variables that are used to characterize and identify the particular menu command. Specifically, the displayText variable is a string that identifies the name of the command as it appears in the Extensible Web Part Menu. The MenuID property is a string that identifies a unique identifier for the command. The ClientEvent is a string, which is downloaded to Web portal page upon the execution of the event handler and is executed when the menu option is clicked. The OnClick variable is an event handler that is executed on the server when the user clicks on the command using the left button on a pointing device, such as a mouse. For example, if a Web Part developer wanted to create a new command called \u201cNEWCOMMAND\u201d with a MenuID value of \u201cSampleID\u201d, the Web Part Developer may use the following method:\n\n","Once the new command has been created, the Web Part developer sets the appropriate properties associated with the newly created command at . For each command, there are a number of \u201cstandard\u201d properties available to alter the characteristics of the particular command. The \u201cstandard\u201d properties may include but are not limited to: an Enabled property, a Visible property, a MenuItems property, an IsParent property, a Checked property, a Caption property, a BeginSection property, a MenuID property, and a ClientEvent property. Each of these properties are discussed in detail below.","The Enabled property is a Boolean variable that allows the Web Part developer to either enable or disable the command. When the Enabled property is set to \u201ctrue,\u201d the command is enabled and available for selection by the user. However, when the Enabled property is set to \u201cfalse,\u201d the command is unavailable for selection. The default value for the Enabled property is set to \u201ctrue.\u201d","Another property associated with each command is the Visible property. The Visible property is a Boolean value and is used to indicate whether the command will be visible to the user on the Extensible Web Part Menu . If the Visible property is set to the Boolean value \u201ctrue,\u201d then the command is visible on the Extensible Web Part Menu . If the Visible property is set to \u201cfalse,\u201d then the command is not displayed on the Extensible Web Part Menu . The default value for the Visible property is \u201ctrue.\u201d","Yet another standard property is the IsParent property. The IsParent property is a Boolean value that indicates whether the command stands by itself or has a sub-menu associated with it. Therefore, when the IsParent property contains the value \u201ctrue,\u201d the command has a sub-menu with at least one child command associated with it, which is indicated by identifying indicia, such as an icon or arrow, which is located proximate to the command. When the user selects a command with the IsParent property set to \u201ctrue\u201d the sub-menu will be displayed with the appropriate child commands. The default value for the IsParent property is \u201cfalse.\u201d Thus, the default is to have each command stand alone, without having a submenu attached to it.","The Checked property is a Boolean value and is used to place an icon, such as a check mark, next to the command in the Extensible Web Part Menu  whenever that particular command is selected.","The Caption property is string that is used to indicate the caption associated with the particular command. The value of the Caption property is the name of the command that is displayed in the Extensible Web Part Menu .","The BeginSection property is a Boolean variable that is used to display a separator immediately above the command in the Extensible Web Part Menu . The BeginSection property is typically used to logically section off similar commands within a given Extensible Web Part Menu . If the BeginSection property value is set to \u201ctrue,\u201d then when Web Part is rendered, a separator is displayed immediately above the menu command. The default value for the BeginSection property is \u201cfalse\u201d so that all of the commands are initially placed in a single grouping.","Once the appropriate properties for the newly created menu command have been set, the new command is added to the Extensible Web Part Menu  at . To add the new command, the Web Part developer places the MenuItem( ) object for the new command into the public override void CreateWebPartMenu( ) object. At this point, the MenuItem( ) is associated with the MenuItemCollection object for the Extensible Web Part Menu , so that command will be displayed when the Extensible Web Part Menu  is rendered in the Web Part Page.","Returning to , if the determination is made not to add a new menu command to the Extensible Web Part Menu , the \u201cNO\u201d branch is followed to , in which the determination is made whether the Web Part developer wants to modify the characteristics of an existing menu command. If the determination is made that the Web Part developer wants to modify an existing menu command, then the \u201cYES\u201d branch is followed to . At  the existing menu command is located within the MenuItemCollection object. One of two methods may be used to locate the menu command depending on how each of the menu commands is indexed within the MenuItemCollection object. If a menu commands are indexed using MenuIDs, then the position of the menu commands may be determined using the GetItemFromID( ) method, which has the form:\n\n","Once the position of the appropriate menu command has been located, the Web Part developer may set the appropriate properties at  to modify menu command in the way the Web Part developer desires, such as changing the name of the menu command, determining whether a check mark should be displayed, and so forth. Alternatively, the Web Part developer may modify the command by creating a brand new property. For example, the Web Part developer may want to change the font, the font color, or the like of a particular menu item to distinguish it from the other menu commands on the Extensible Web Part Menu .","Returning to , if the determination is made that the Web Part developer does not want to modify the characteristics of any existing menu command, then the \u201cNO\u201d branch is followed to , in which the determination is made whether the Web Part developer wants to remove an existing menu command from the Extensible Web Part Menu . If the determination is made to remove an existing menu command, then the \u201cYES\u201d branch is followed to , in which the menu command to remove is located within the MenuItemCollection object using the either the GetItemFromID( ) method or the IndexOf( ) method described above. At  the Web Part developer removes the unwanted item from the Extensible Web Part Menu  by inserting an appropriate call (described below) in the public override void CreateWebPartMenu( ).",{"@attributes":{"id":"p-0069","num":"0152"},"figref":["FIG. 5","FIG. 4"],"b":["500","425","205","500","505","205","205","510"],"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":{"@attributes":{"id":"ul0025-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":"Add(MenuItem)\n\nwhere MenuItem is the name of the new menu command the Web Part developer wants to add. The Add( ) method adds the created MenuItem to the end of the current Extensible Web Part Menu . It should be noted at this point that the Web Part developer may add a standard command, which is applicable to the application program, to the Extensible Web Part Menu , or the Web Part developer may add a brand new command, which he or she has created.\n"}}}},"However, if the Web Part developer does not want to add the newly created menu command to the end of the Extensible Web Part Menu , the \u201cNO\u201d branch is followed to , in which the determination is whether the newly created menu command should be inserted at a known point in the current Extensible Web Part Menu . In some instances, it may be more appropriate to insert a newly created menu command next to a similar, existing command in the Extensible Web Part Menu  because it will appear in a more logical order for the user. If the determination is made to insert the newly created menu command at a certain location, then the \u201cYES\u201d branch is followed to , where the Web Part developer inserts the new menu command using the Insert( ) method. The Insert( ) method allows the Web Part developer to add a previously created menu command at a specified index within the MenuItemCollection object. The Insert( ) method has the form:\n\n","If, however, at  the determination is made not to insert the newly created menu command at a know point in the Extensible Web Part Menu , then the \u201cNO\u201d branch is followed to , which is the final option for adding new menu commands. If the Web Part Developer does not want to add a single menu command, then the Web Part developer will typically want to add a group of menu commands that contain a number of related menu commands, to the Extensible Web Part Menu . In this instance, the Web Part developer may use the AddRange( ) method for inserting a group of menu commands. The AddRange( ) method adds an array of previously created MenuItem objects to the MenuItemCollection object to the end of the Extensible Web Part Menu . The AddRange( ) method has the following form:\n\n","where MenuItem[ ] is an array of menu commands to be inserted into the Extensible Web Part Menu . This method may be used for quickly adding multiple commands to the MenuItemCollection( ). Additionally, it may also be used for adding a submenu to the Extensible Web Part Menu , which contains multiple subcommands",{"@attributes":{"id":"p-0073","num":"0160"},"figref":["FIG. 6","FIG. 4"],"b":["600","455","205","600","605","205","610"],"ul":{"@attributes":{"id":"ul0031","list-style":"none"},"li":{"@attributes":{"id":"ul0031-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":"Remove(MenuItem)\n\nwhere MenuItem is the menu command to be removed. Any subsequent instances of the menu command will remain in the Extensible Web Part Menu . For example, a particular command may be located in the main, or \u201cparent\u201d Extensible Web Part Menu , and also as a child command under a \u201cparent\u201d menu command. In this case, using the Remove( ) method would delete the command from the main Extensible Web Part Menu , which is the first instance, and leave the duplicate \u201cchild\u201d command unchanged.\n"}}}},"Returning to , if the determination is made not the remove a single menu command, the \u201cNO\u201d branch is followed to , in which a second determination is made whether to remove a menu command from a particular location in the Extensible Web Part Menu . If the determination is made to remove a menu command from a particular location, then the \u201cYES\u201d branch is followed to  where the menu command is removed using the RemoveAt( ) method, which has the form:\n\n","where Int is the index of the menu command to be removed from the MenuItemCollection. For example, if the Web Part developer wants to remove the REFRESH command  from the Extensible Web Part Menu  in , the Web Part developer may insert the following command:\n\n","Returning to , if the determination is made not to remove a menu command from a particular location in the Extensible Web Part Menu , the \u201cNO\u201d branch is followed to , where a third determination is made whether to remove all of the menu commands from the Extensible Web Part Menu , in which case the \u201cYES\u201d branch is followed to . At  the Web Part developer inserts a Clear( ) method into the Web Part code. The Clear( ) method removes every instance for all of the MenuItem objects from the Extensible Web Part Menu .","However, the DELETE command is prohibited from being removed from the Extensible Web Part Menu . This is a precaution to insure that unwanted or dangerous content, which may have been imported into the Web Part Page can still be removed. If the DELETE command is removed from the Extensible Web Part Menu  during customization, the object model will actually remove the DELETE command from the Extensible Web Part Menu . However, when the Web Part engine renders the customized Extensible Web Part Menu , the engine first checks to see whether the DELETE command was removed. If the DELETE command was removed, the Web Part engine will append the DELETE command to the end of the customized Extensible Web Part Menu . This ensures that the users of the Web Part Page will always have the ability to delete unwanted content from the Web Part Page.","Other alternative embodiments will become apparent to those skilled in the art to which an exemplary embodiment pertains without departing from its spirit and scope. Accordingly, the scope of the present invention is defined by the appended claims rather than the foregoing description."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
