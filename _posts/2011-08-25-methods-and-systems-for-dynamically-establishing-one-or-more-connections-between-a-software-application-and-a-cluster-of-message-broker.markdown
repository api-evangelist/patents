---
title: Methods and systems for dynamically establishing one or more connections between a software application and a cluster of message broker
abstract: An exemplary method includes a broker-based messaging system detecting a request provided by a software application for the software application to connect to any one of a plurality of brokers included in a cluster of brokers, dynamically identifying, in response to the request and in accordance with a connection distribution heuristic, a broker included in the cluster of brokers and that is available for connection to the software application, and attempting to establish a connection between the software application and the broker. Corresponding methods and systems are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09038091&OS=09038091&RS=09038091
owner: Verizon Patent and Licensing Inc.
number: 09038091
owner_city: Basking Ridge
owner_country: US
publication_date: 20110825
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND INFORMATION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["Message-oriented middleware is infrastructure that increases the interoperability, portability, and flexibility of software applications by allowing the software applications to communicate one with another by transmitting messages therebetween. Message-oriented middleware reduces the complexity of developing software applications that span multiple operating systems and network protocols by insulating application developers from the details of the various operating system and network interfaces. Accordingly, software developers can more easily integrate new software applications with existing software applications.","In typical message-oriented middleware configurations, messages are transmitted from one software application to another by way of one or more message brokers (\u201cbrokers\u201d). However, before a software application can transmit a message by way of a broker, it has to establish a connection (e.g., a TCP\/IP connection) with the broker. Unfortunately, brokers have various capacity and resource limitations. For example, some brokers cannot handle more than a certain number (e.g., two thousand) of concurrent connections.","These limitations can be problematic for a software application that needs to establish multiple concurrent connections with a broker (e.g., in order to concurrently communicate with multiple software applications). For example, a particular software application may need to establish thousands of concurrent connections with a broker. In so doing, the broker may become overloaded, fail, or otherwise enter into a fault state in which it is unable to relay messages to and from software applications associated therewith. An inoperable broker can cause undesirable delays, consume valuable network resources, and result in frustrating experiences for end users who rely on the software applications associated with the broker.","Methods and systems for dynamically establishing one or more connections between a software application and a cluster of message brokers (\u201cbrokers\u201d) are described herein. As will be described in more detail below, a broker-based messaging system may detect a request provided by a software application for the software application to connect to any one of a plurality of brokers included in a cluster of brokers, dynamically identify, in response to the request and in accordance with a connection distribution heuristic, a broker included in the cluster of brokers and that is available for connection to the software application, and attempt to establish a connection between the software application and the broker. If the attempt is successful, the broker-based messaging system may allow the application to transmit one or more messages by way of the established connection. If the attempt is unsuccessful, the broker-based messaging system may dynamically select and attempt to connect to one or more other brokers included in the cluster of brokers until a successful connection is established between the software application and a broker included in the cluster.","The methods and systems described herein may reduce or altogether eliminate the risk of a software application overloading a single broker with multiple concurrent connections by dynamically distributing the connections among a plurality of brokers included in a predetermined cluster of brokers. This is because each broker included in the cluster of brokers may be configured to operate in a similar manner (i.e., each broker may facilitate transmission of one or more messages between software applications). Hence, a software application may establish a connection with any of the brokers included in a cluster of brokers in order to communicate with another software application.","As used herein, the term \u201csoftware application\u201d may include, but is not limited to, a software product (e.g., a software program), a module within a software product, and\/or any other software component (e.g. an enterprise java bean, a servlet, etc.) as may serve a particular implementation. As used herein, an \u201coriginating software application\u201d is one that generates a message to be sent to another software application (referred to herein as a \u201crecipient software application\u201d). A software application may be executed by one or more computing devices.","As used herein, a \u201cmessage\u201d generated by a software application may include any data that may be read or otherwise processed by a message broker and\/or a recipient software application. A message may be transmitted in encrypted form, as cleartext (i.e., non-encrypted form), and\/or in any other manner as may serve a particular implementation.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","100","102","104","106","102","106","102","106"]},"Detection facility  may be configured to detect a request provided by a software application for the software application to connect to any one of a plurality of brokers included in a cluster of brokers. This may be performed in any suitable manner. For example, the connection request provided by the software application may be detected locally (e.g., by one or more application programming interfaces (\u201cAPIs\u201d) residing on a computing device that executes the software application). Additionally or alternatively, the connection request may be detected remotely (e.g., by a global directory service (\u201cGDS\u201d) subsystem or server located remotely from the software application). Examples of both approaches will be provided in more detail below.","Connection management facility  may be configured to perform one or more connection management operations associated with one or more software applications and one or more clusters of brokers. For example, in response to a connection request being detected by detection facility , connection management facility  may utilize a connection distribution heuristic to dynamically identify a broker included in a cluster of brokers and that is available for connection to the software application. As will be described in more detail below, the connection distribution heuristic utilized by connection management facility  may include either a de-centralized connection distribution heuristic wherein the broker is dynamically identified by the software application itself (i.e., by a computing device executing the software application) or a centralized connection distribution heuristic wherein the broker is dynamically identified by a GDS subsystem. Exemplary de-centralized and centralized connection distribution heuristics will be described in more detail below.","Once an available broker has been identified, connection management facility  may attempt to establish a connection between the software application and the identified broker. This may be performed in any suitable manner. For example, an API associated with the software application (e.g., an API included within the software application or otherwise implemented by a computing device executing the software application) may transmit a connection request directly to the identified broker, which may process and grant the connection request by allowing the API to establish any suitable type of connection between the software application and the broker.","The connection established between the software application and the broker may include any suitable type of connection as may serve a particular implementation. For example, the connection may include a secure connection (e.g., a secure sockets layer (\u201cSSL\u201d) connection or a TCP\/IP connection) or a non-secure connection (e.g., a non-SSL connection).","In some examples, the connection established between the software application and the broker may include a synchronous connection configured to facilitate synchronous messaging by the software application. In synchronous messaging, the software application sends a message to a recipient software application by way of a connection with a broker and waits for a response from the recipient software application before a subsequent message can be transmitted over the same connection. This makes the connection unusable until the response message is received. Alternatively, the connection established between the software application and the broker may include an asynchronous connection configured to facilitate asynchronous messaging by the software application. In asynchronous messaging, the software application does not have to wait for a response message before transmitting another message over the same connection to the broker.","Synchronous messaging protocols are desirous in many applications because they are relatively easier to implement and maintain than asynchronous messaging protocols. However, because synchronous messaging protocols do not allow a software application to concurrently transmit multiple messages by way of the same connection, a software application configured to implement a synchronous messaging protocol must establish multiple connections with one or more brokers to process concurrent messages. Hence, the methods and systems described herein may be beneficial for software applications that implement synchronous messaging protocols.","In some examples, connection management facility  may detect whether an attempt to establish a connection between a software application and a broker is successful. This may be performed in any suitable manner. For example, an API associated with the software application may detect that the broker has accepted a connection request from the software application and thereby determine that the connection has been successfully established. In response, connection management facility  may allow the software application to transmit one or more messages by way of the established connection. This also may be performed in any suitable manner. For example, an API associated with the software application may turn control of the established connection over to the software application so that the software application may transmit one or more messages by way of the established connection.","Alternatively, connection management facility  may determine that the attempt to establish a connection between the software application and the broker is unsuccessful. An unsuccessful attempt to establish a connection between the software application and the broker may be caused by any of a number of different factors. For example, the broker may become disabled or otherwise malfunction in between the time that is identified as being available for a connection and when an attempt to establish a connection with the broker is initiated. In response to an unsuccessful attempt to establish a connection between the software application and the broker, connection management facility  may automatically perform any suitable type of fail-over operation. For example, connection management facility  may dynamically identify another broker included in the cluster of brokers and that is available for connection to the software application and then attempt to establish a connection between the software application and the newly identified broker. This process may be repeated until a successful connection is established.","Storage facility  may be configured to maintain message data  and application programming interface (\u201cAPI\u201d) data . It will be recognized that storage facility  may maintain additional or alternative data as may serve a particular implementation.","Message data  may include data representative of one or more messages generated and\/or received by a software application. Message data  may additionally include delivery instructions corresponding to one or more messages. For example, message data  may include an identifier (e.g., a name or identification number) of an intended recipient software application and\/or computing device that executes the recipient software application.","API data  is representative of one or more APIs configured to facilitate integration of one or more software applications executed by one or more computing devices with one or more brokers and\/or one or more GDS servers. For example, one or more APIs implemented by one or more computing devices may interface with one or more software applications executed by the one or more computing devices to facilitate encryption of messages generated by the one or more software applications, communication with the one or more brokers and\/or GDS servers (e.g., establishment of one or more connections with the one or more brokers and\/or GDS servers), and\/or any other function as may serve a particular implementation.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 2"],"b":["200","100","200","202","204","206","202","204","206","204","204"]},"Software application subsystem , message broker subsystem , and GDS subsystem  may communicate using any communication platforms and technologies suitable for transporting data, including known communication technologies, devices, media, and protocols supportive of remote or local data communications. Examples of such communication technologies, devices, media, and protocols include, but are not limited to, data transmission media, communications devices, Transmission Control Protocol (\u201cTCP\u201d), Internet Protocol (\u201cIP\u201d), File Transfer Protocol (\u201cFTP\u201d), Telnet, Hypertext Transfer Protocol (\u201cHTTP\u201d), Hypertext Transfer Protocol Secure (\u201cHTTPS\u201d), Session Initiation Protocol (\u201cSIP\u201d), Ethernet, and any other suitable communications technologies, devices, media, and protocols.","In some examples, software application subsystem , message broker subsystem , and GDS subsystem  may communicate via one or more networks, including, but not limited to, wireless networks, broadband networks, closed media networks, cable networks, satellite networks, the Internet, intranets, local area networks, public networks, private networks, optical fiber networks, and\/or any other networks capable of carrying data and communications signals between software application subsystem , message broker subsystem , and GDS subsystem .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["300","100","202","204","206","302","302","202","204","206","202","204","206"]},"Software application subsystem , message broker subsystem , and GDS subsystem  may each be implemented by one or more computing devices. For example, software application subsystem  may be implemented by one or more computing devices configured to execute an originating software application and one or more computing devices configured to execute a recipient software application. Alternatively, software application subsystem  may be implemented by a single computing device configured to execute both the originating and recipient software applications.","In some examples, software application subsystem , message broker subsystem , and GDS subsystem  are implemented by distinct computing devices. Alternatively, subsystems - may be implemented by the same computing device. Any other implementation of subsystems - may be realized in accordance with the systems and methods described herein.","In certain embodiments, system  may be implemented entirely by software application subsystem . For example, a computing device executing a software application may utilize one or more APIs to detect a request provided by a software application to connect to any one of a plurality of brokers included in a cluster of brokers, dynamically identify a broker included in the cluster of brokers and that is available for connection to the software application in accordance with a de-centralized connection distribution heuristic, and attempt to establish a connection between the software application and the broker. As will be described in more detail below, in order for software application subsystem  to entirely implement system , software application subsystem  may be configured to periodically acquire cluster information and broker information from GDS subsystem . The cluster information may identify a plurality of brokers included in the cluster of brokers, and the broker information may provide location information (e.g., an IP address, port number, etc.) for each of the plurality of brokers.","In alternative embodiments, system  may be at least partially implemented by GDS subsystem . For example, GDS subsystem  may detect (e.g., receive) a request provided by a software application (or an API associated with the software application) for the software application to connect to any one of a plurality of brokers included in a cluster of brokers, dynamically identify a broker included in the cluster of brokers and that is available for connection to the software application in accordance with a centralized connection distribution heuristic, and transmit broker information to the software application (or to an API associated with the software application). The software application (or a computing device executing the software application) may then utilize the broker information to attempt to establish a connection between the software application and the identified broker.","Various components and features of software application subsystem , message broker subsystem , and GDS subsystem  will now be described. It will be recognized that software application subsystem , message broker subsystem , and GDS subsystem  may each include additional or alternative components as may serve a particular implementation.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIG. 4"],"b":["202","202","402","404","406","408"]},"Communication facility  may be configured to facilitate communication between software application subsystem  and message broker subsystem . For example, communication facility  may be configured to establish and\/or assist in establishing one or more connections between software application subsystem  and message broker subsystem  over which one or more messages may be transmitted from software application subsystem  to message broker subsystem  and\/or from message broker subsystem  to software application subsystem . The one or more connections established between software application subsystem  and message broker subsystem  may include any type of connection as described herein.","Communication facility  may additionally or alternatively be configured to facilitate communication between software application subsystem  and global directory service subsystem . For example, if system  is configured to utilize a de-centralized connection distribution heuristic, communication facility  may be configured to transmit a request to GDS subsystem  for cluster information identifying each broker included in a cluster of brokers and broker information associated with each broker included in the cluster of brokers (i.e., location information that will allow software application subsystem  to locate and connect to each particular broker). Alternatively, if system  is configured to utilize a centralized connection distribution heuristic, communication facility  may transmit to GDS subsystem  a request provided by a software application for the software application to connect to any one of a plurality of brokers included in a cluster of brokers. This request may include a name of the cluster of brokers to which the software application is to connect.","Connection management facility  may be configured to at least partially implement connection management facility . For example, if system  is configured to utilize a de-centralized connection distribution heuristic, connection management facility  may acquire and locally store cluster and broker information from GDS subsystem . By locally storing the cluster and broker information (e.g., storing data representative of the cluster and broker information in a local cache), connection management facility  may use the stored information to dynamically identify and connect to a broker without having to consult with GDS subsystem  each time the software application provides a request to establish a new connection with a broker included in the cluster of brokers. An example of this will be described in more detail below.","Connection management facility  may be further configured to attempt to establish a connection between the software application and a broker identified (either by connection management facility  or by GDS subsystem ) as being available for connection to the software application. This may be performed in any of the ways described herein.","Messaging facility  may be configured to process a message generated by an originating software application and\/or a message received by a recipient software application. Exemplary, but not exclusive, processing of a message that may be performed by messaging facility  includes encrypting a message, decrypting a message, preparing a message for transmission to a recipient software application via message broker subsystem , processing of a message received from message broker subsystem , etc. Messaging facility  may be further configured to transmit (e.g., direct communication facility  to transmit) one or more messages to one or more recipient software applications.","Storage facility  may be configured to maintain cluster data , broker data , message data , and API data . It will be recognized that storage facility  may maintain additional or alternative data as may serve a particular implementation.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 5","b":["204","204"]},"As shown in , message broker subsystem  may include a communication facility , a delivery facility , a registration facility , and a storage facility , which may be in communication with one another using any suitable communication technologies. Each of these facilities will now be described.","Communication facility  may be configured to facilitate communication between message broker subsystem  and software application subsystem . For example, communication facility  may be configured to establish and\/or assist in establishing one or more connections between message broker subsystem  and software application subsystem  over which one or more messages may be transmitted from software application subsystem  to message broker subsystem  and\/or from message broker subsystem  to software application subsystem . In some examples, communication facility  may be configured to receive a message intended for delivery to a recipient software application by way of one of the established one or more connections.","Communication facility  may additionally or alternatively be configured to facilitate communication between message broker subsystem  and GDS subsystem . For example, communication facility  may be configured to transmit registration data associated with one or more brokers included in one or more clusters of brokers and\/or any other data to GDS subsystem  as may serve a particular implementation.","Delivery facility  may be configured to deliver (and\/or attempt to deliver) one or more messages received from one or more originating software applications to one or more recipient software applications in accordance with delivery instructions included within the message(s). To this end, delivery facility  may be configured to utilize one or more connections established by communication facility .","Registration facility  may be configured to register a software application with message broker subsystem . For example, communication facility  may receive a request from a software application to be either statically (i.e., permanently) or dynamically (i.e., temporarily) registered with a broker. Registration facility  may authenticate the request in any suitable manner. For example, registration facility  may verify a correct name, user identification (\u201cuser ID\u201d), and\/or password included in the request received from the software application. In response to a successful authentication, registration facility  may transmit the name and\/or user ID to GDS subsystem  so that GDS subsystem  may maintain a record of the registration.","Registration facility  may be further configured to register a particular broker with a particular cluster of brokers. For example, registration facility  may add a broker to a cluster of brokers. In response, registration facility  may transmit the name of the broker to GDS subsystem  and indicate that the broker is now registered with the cluster of brokers. In this manner, GDS subsystem  may maintain a current list of all the brokers included in the cluster.","Storage facility  may be configured to maintain message data  representative of one or more messages to be delivered to a recipient software application and registration data  representative of data utilized by registration facility . Storage facility  may maintain additional or alternative data as may serve a particular implementation.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 6","FIG. 6"],"b":["206","206","602","604","606","608"]},"Communication facility  may be configured to facilitate communication between GDS subsystem  and software application subsystem . For example, if system  is configured to utilize a de-centralized connection distribution heuristic, communication facility  may receive a request from software application subsystem  for cluster and broker information so that software application subsystem  may identify a broker with which a software application may connect. Alternatively, if system  is configured to utilize a centralized connection distribution heuristic, communication facility  may receive a request provided by a software application for the software application to connect to any one of a plurality of brokers included in a cluster of brokers.","Communication facility  may be further configured to facilitate communication between GDS subsystem  and message broker subsystem . For example, communication facility  may receive registration data from message broker subsystem .","Connection management facility  may be configured to at least partially implement connection management facility . For example, if system  is configured to utilize a de-centralized connection distribution heuristic, connection management facility  may be configured to provide cluster and broker information to software application subsystem  for local storage by software application subsystem . Alternatively, connection management facility  may use a centralized connection distribution heuristic to dynamically identify a broker that is available for connection and then direct communication facility  to transmit broker information associated with the identified broker to software application subsystem .","Registration management facility  may be configured to perform any registration management operation associated with one or more brokers and\/or software applications. For example, registration management facility  may be configured to manage (e.g., maintain, store, update, receive, transmit, etc.) broker information, cluster information, and\/or software application information.","To illustrate,  shows an exemplary broker information table  comprising broker information data that may be maintained by GDS subsystem . The broker information data may be maintained in the form of a look-up table, in a database, and\/or in any other manner as may serve a particular implementation.","As shown, broker information table  may include a list of broker names, location IP addresses, and location port numbers associated with each of a plurality of brokers implementing message broker subsystem . The information included within broker information table  may be accessed by one or more message brokers and\/or software applications to determine appropriate delivery instructions for messages to be transmitted from one software application to another.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 8","b":["800","206"]},"As shown, cluster information table  may include a list of cluster names and names of various brokers included in each cluster. For example, a cluster named \u201ccluster A\u201d has three brokers included therein (i.e., \u201cbroker A,\u201d \u201cbroker B,\u201d and \u201cbroker C.\u201d). As mentioned, a particular broker may be included in more than one cluster. For example, the broker named \u201cbroker A\u201d is included in both cluster A and cluster B. The information included within cluster information table  may be used by connection management facility  to identify a particular broker that is available for connection to a software application.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 9","b":["900","206"]},"As shown in , table  indicates a current registration type (e.g., static or dynamic) of a plurality of software applications each currently registered with (e.g., connected to) one of a plurality of brokers. In the example of , three software applications (i.e., applications AZ, AY, and AX) are each currently registered with one of three brokers included in a cluster of brokers (i.e., cluster A).","Table  may also indicate a total number of established connections between a software application and the brokers included in a particular cluster. For example, table  indicates that application AX currently has multiple established connections (represented by \u22121, \u22122, \u22123, etc.) with the brokers included in cluster A. To illustrate, table  indicates that application AX currently has nine established connections with the brokers included in cluster A. Four of these connections (i.e., connections AX-, AX-, AX-, and AX-) are with broker A, three of these connections (i.e., connections AX-, AX-, and AX-) are with broker B, and two of these connections (i.e., connections AX- and AX-) are with broker C.","Registration management facility  may dynamically update any of tables , , and  in response to registration data transmitted thereto by software application subsystem  and\/or message broker subsystem . For example, each time application AX establishes a new connection with one of brokers A, B, and C, software application information table  may be updated accordingly.","Returning to , storage facility  may be configured to maintain broker information data  (e.g., information that may be included in broker information table ), cluster information data  (e.g., information that may be included in cluster information table ), software application information data  (e.g., information that may be included in software application information table ), and\/or any other data as may serve a particular implementation.","In some examples, GDS subsystem  may be implemented by multiple GDS servers. Each server may be located at a distinct location, for example. In some examples, the data maintained by each GDS server may be synchronized so that each GDS server always has current registration data associated with each software application and message broker that is a part of system .",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 10","FIG. 10","FIG. 10"],"b":["1000","1000","100","202","204"]},"In step , a broker-based messaging system detects a request provided by a software application for the software application to connect to any one of a plurality of brokers included in a cluster of brokers. Step  may be performed in any of the ways described herein.","In step , the broker-based messaging system dynamically identifies, in response to the request and in accordance with a connection distribution heuristic, a broker included in the cluster of brokers and that is available for connection to the software application. Step  may be performed in any of the ways described herein.","In step , the broker-based messaging system attempts to establish a connection between the software application and the broker. Step  may be performed in any of the ways described herein.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 11","FIG. 11","FIG. 11"],"b":["1100","1100","202"]},"In step , a software application subsystem acquires cluster information and broker information from a global directory service subsystem. As described above, the cluster information may identify a plurality of brokers included in a cluster of brokers and the broker information may provide location information for each broker included in the cluster of brokers. Step  may be performed in any of the ways described herein.","In step , the software application subsystem detects a request provided by a software application to connect to any one of the plurality of brokers included in the cluster of brokers. Step  may be performed in any of the ways described herein.","In step , the software application subsystem dynamically identifies, in response to the request and in accordance with the cluster information and a de-centralized connection distribution heuristic, a broker included in the cluster of brokers and that is available for connection to the software application. Step  may be performed in any of the ways described herein.","In step , the software application subsystem attempts, in accordance with the broker information, to establish a connection between the software application and the broker. Step  may be performed in any of the ways described herein.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 12","FIG. 12","FIG. 12"],"b":["1200","1200","206"]},"In step , a GDS subsystem receives a request provided by a software application for the software application to connect to any one of a plurality of brokers included in a cluster of brokers. Step  may be performed in any of the ways described herein. For example, the GDS subsystem may receive the request from an API associated with the software application.","In step , the GDS subsystem dynamically identifies, in response to the request and in accordance with a centralized connection distribution heuristic, a broker included in the cluster of brokers and that is available for connection to the software application. Step  may be performed in any of the ways described herein.","In step , the GDS subsystem transmits broker information identifying the broker to the software application. The software application (i.e., a computing device executing the software application) may then use the broker information to attempt to connect to the identified broker. Step  may be performed in any of the ways described herein.","Specific implementations and examples of the methods and systems described herein will now be described in connection with . It will be recognized that the implementations and examples described in connection with  are merely illustrative of the many possible implementations and examples of the methods and systems described herein.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 13","FIG. 13"],"b":["1300","100","900","1302","1302","1","1302","3","1304","1306","1","1306","2","1306","1306","1","9"]},"As shown, client - is configured to communicate with a first GDS server - and client - is configured to communicate with a second GDS server -. As described above, GDS servers - and - (collectively \u201cGDS servers \u201d) may be synchronized so that they always have current registration data associated with each software application and message broker that is a part of system .",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 13","b":["900","1310","900","1312"]},"In some examples, each client  may independently use a de-centralized connection distribution heuristic to distribute connections requested by software application AX among brokers A, B, and C.","To illustrate, client - may initially (or at any other point in time) acquire and locally cache cluster information associated with cluster A and broker information associated with the brokers included in cluster A (i.e., brokers A, B, and C). Client - may then detect a request provided by software application AX to connect to any of the brokers included in cluster A. As described above, the connection request may include the name of cluster A.","In response to the request, client - (i.e., one or more APIs executed by client -) may use a de-centralized connection distribution heuristic to select a broker that is available for connection to software application AX. The de-centralized connection distribution heuristic may include any suitable heuristic that attempts to distribute connections initiated by software application AX among the brokers included in cluster A. For example, the de-centralized connection distribution heuristic may include a round-robin load balancing heuristic that identifies a \u201cnext available\u201d broker for connection to software application AX. In other words, client - may rotate through the available brokers in a specified order and select the next available broker for connection to software application AX.","Hence, as shown in  and in software application information table , client - may establish a first connection (e.g., connection AX-) with broker A in response to a first connection request provided by software application AX, a second connection (e.g., connection AX-) with broker B in response to a second connection request provided by software application AX, a third connection (e.g., connection AX-) with broker C in response to a third connection request provided by software application AX, and a fourth connection (e.g., connection AX-) with broker A in response to a fourth connection request provided by software application AX.","Client - may go through a similar, yet independent, process for connections AX- through AX-. Hence, as shown in  and in software application information table , client - may establish a fifth connection (e.g., connection AX-) with broker A in response to a fifth connection request provided by software application AX, a sixth connection (e.g., connection AX-) with broker B in response to a first connection request provided by software application AX, a seventh connection (e.g., connection AX-) with broker C in response to a seventh connection request provided by software application AX, an eighth connection (e.g., connection AX-) with broker A in response to an eighth connection request provided by software application AX, and a ninth connection (e.g., connection AX-) with broker B in response to a ninth connection request provided by software application AX.","With the connections thus established, software application AX may concurrently transmit messages to one or more recipient software applications. For example, software application AX may utilize connection AX- to communicate with software application AZ and connection AX- to communicate with software application AY.","As mentioned, one benefit of the de-centralized connection distribution heuristics described herein is that clients  may select brokers for connection to software application AX without having to consult with GDS servers - and\/or - each time a new connection request is detected. This conserves both time and resources. However, because each client  may independently implement the de-centralized connection distribution heuristics described herein, overall distribution of connections may not be exactly uniform. To illustrate, in the example of , broker A has four connections to software application AX, broker B has three connections to software application AX, and broker C has two connections to software application AX.","Hence, in some alternative embodiments, a centralized connection distribution heuristic may be used to evenly distribute connections among the brokers included in cluster A. It will be recognized that the decision to use a de-centralized connection distribution heuristic or a centralized connection distribution heuristic may be made manually by a user associated with system , automatically by system  in response to a resource availability, or any other suitable manner as may serve a particular implementation.","An exemplary implementation  of system  in which a centralized connection distribution heuristic is employed is illustrated in . The components shown in  are the same as those shown in . However, in the example of , GDS servers  are configured to use a centralized connection distribution heuristic to distribute connections requested by software application AX among brokers A, B, and C. In other words, each time software application AX needs to establish another connection with any one of the brokers included in cluster A, one of clients  transmits a connection request provided by software application AX to either GDS server . The recipient GDS server  may then use a centralized connection distribution heuristic to select a broker that is available for connection to software application AX. As with the de-centralized connection distribution heuristic, the centralized connection distribution heuristic may include any suitable heuristic that attempts to distribute connections initiated by software application AX among the brokers included in cluster A. For example, the centralized connection distribution heuristic may include a round-robin load balancing heuristic that identifies a \u201cnext available\u201d broker for connection to software application AX. In other words, the recipient GDS server  may rotate through the available brokers in a specified order and select the next available broker for connection to software application AX.","Hence, as shown in , connections AX- through AX- are evenly distributed among the brokers included in cluster A. To illustrate, brokers A, B, and C each have three connections to software application AX.","In certain embodiments, one or more of the processes described herein may be implemented at least in part as instructions embodied in a non-transitory computer-readable medium and executable by one or more computing devices. In general, a processor (e.g., a microprocessor) receives instructions, from a non-transitory computer-readable medium, (e.g., a memory, etc.), and executes those instructions, thereby performing one or more processes, including one or more of the processes described herein. Such instructions may be stored and\/or transmitted using any of a variety of known computer-readable media.","A computer-readable medium (also referred to as a processor-readable medium) includes any non-transitory medium that participates in providing data (e.g., instructions) that may be read by a computer (e.g., by a processor of a computer). Such a medium may take many forms, including, but not limited to, non-volatile media, and\/or volatile media. Non-volatile media may include, for example, optical or magnetic disks and other persistent memory. Volatile media may include, for example, dynamic random access memory (\u201cDRAM\u201d), which typically constitutes a main memory. Common forms of computer-readable media include, for example, a disk, hard disk, magnetic tape, any other magnetic medium, a CD-ROM, DVD, any other optical medium, a RAM, a PROM, an EPROM, a FLASH-EEPROM, any other memory chip or cartridge, or any other tangible medium from which a computer can read.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 15","FIG. 15","FIG. 15","FIG. 15","FIG. 15"],"b":["1500","1500","1502","1504","1506","1508","1510","1500","1500"]},"Communication interface  may be configured to communicate with one or more computing devices. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, an audio\/video connection, and any other suitable interface.","Processor  generally represents any type or form of processing unit capable of processing data or interpreting, executing, and\/or directing execution of one or more of the instructions, processes, and\/or operations described herein. Processor  may direct execution of operations in accordance with one or more applications  or other computer-executable instructions such as may be stored in storage device  or another computer-readable medium.","Storage device  may include one or more data storage media, devices, or configurations and may employ any type, form, and combination of data storage media and\/or device. For example, storage device  may include, but is not limited to, a hard drive, network drive, flash drive, magnetic disc, optical disc, random access memory (\u201cRAM\u201d), dynamic RAM (\u201cDRAM\u201d), other non-volatile and\/or volatile data storage units, or a combination or sub-combination thereof. Electronic data, including data described herein, may be temporarily and\/or permanently stored in storage device . For example, data representative of one or more executable applications  (which may include, but are not limited to, one or more of the software applications described herein) configured to direct processor  to perform any of the operations described herein may be stored within storage device . In some examples, data may be arranged in one or more databases residing within storage device .","I\/O module  may be configured to receive user input and provide user output and may include any hardware, firmware, software, or combination thereof supportive of input and output capabilities. For example, I\/O module  may include hardware and\/or software for capturing user input, including, but not limited to, a keyboard or keypad, a touch screen component (e.g., touch screen display), a receiver (e.g., an RF or infrared receiver), and\/or one or more input buttons.","I\/O module  may include one or more devices for presenting output to a user, including, but not limited to, a graphics engine, a display (e.g., a display screen, one or more output drivers (e.g., display drivers), one or more audio speakers, and one or more audio drivers. In certain embodiments, I\/O module  is configured to provide graphical data to a display for presentation to a user. The graphical data may be representative of one or more graphical user interfaces and\/or any other graphical content as may serve a particular implementation.","In some examples, any of the facilities described herein may be implemented by or within one or more components of computing device . For example, one or more applications  residing within storage device  may be configured to direct processor  to perform one or more processes or functions associated with detection facility , connection management facility , communication facility , connection management facility , messaging facility , communication facility , delivery facility , registration facility , communication facility , connection management facility , and\/or registration management facility . Likewise, storage facility , storage facility , storage facility , and\/or storage facility  may be implemented by or within storage device .","In the preceding description, various exemplary embodiments have been described with reference to the accompanying drawings. It will, however, be evident that various modifications and changes may be made thereto, and additional embodiments may be implemented, without departing from the scope of the invention as set forth in the claims that follow. For example, certain features of one embodiment described herein may be combined with or substituted for features of another embodiment described herein. The description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate various embodiments and are a part of the specification. The illustrated embodiments are merely examples and do not limit the scope of the disclosure. Throughout the drawings, identical or similar reference numbers designate identical or similar elements.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 10-12"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
