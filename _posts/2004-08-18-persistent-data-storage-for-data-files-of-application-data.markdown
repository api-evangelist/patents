---
title: Persistent data storage for data files of application data
abstract: A system for efficiently storing application data which allows a practically infinite number of physically separate storage devices to be used as archival storage means by one or more application programs. Application data is organized among the devices such that files with a similar expiry date (that is the date beyond which the files are no longer required to be archived) are grouped together on the same physical device, such that after the expiry date the device used for such files may be erased and re-used. Optionally, files with particular content-types may be grouped on the same physical device, or among physical devices of the same type.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08099394&OS=08099394&RS=08099394
owner: Computer Associates Think, Inc.
number: 08099394
owner_city: Islandia
owner_country: US
publication_date: 20040818
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This invention relates to a data storage system and data storage method, and more particularly to the long term archiving of electronic communications and other documents.","Recent increases in regulation, for example from bodies such as the Securities and Exchange Commission (SEC), National Association of Securities Dealers (NASD), their counterparts in other countries, and by legislation such as the Sarbanes-Oxley Act in the United States, have significantly increased the requirement to retain copies of electronic communications, such as electronic mail, instant messages, and other document types.","Coupled with the significant growth in the use of electronic communications and documents, the storage and management costs of retaining such data have escalated enormously, particularly for large organizations with many thousands of employees.","Recent studies show that a typical corporate employee currently handles around 7 megabytes of electronic mail per day. This number is forecast to increase to around 14 megabytes by 2007. Assuming an average 5 year retention requirement, this means that the storage needs of a 25,000 user organization could grow to over 300 terabytes, just for electronic mail.","In the past, much of the long term document retention needs of an organization have been satisfied using technologies such as magnetic tape and in some cases write-once optical devices. For many organizations however these are no longer viable options. This is because of an increasing need to be able to rapidly retrieve individual documents and to be able to search the content of all stored documents in a matter of seconds. Slow access times mean that this is impossible in the case of magnetic tape, and impractical in the case of optical devices which also suffer from relatively low capacity.","Currently, the only viable option is high capacity on-line data storage, which is produced by a relatively small number of large scale storage manufacturers, costing in the region of US$100,000 per terabyte. This is in sharp contrast to the \u2018commodity\u2019 end of the market where disk drive prices have fallen sharply while capacities have increased. A 30 gigabyte capacity hard disk can be purchased for as little as US$50, equivalent to around $1,700 per terabyte. One must, however, be cautious when making comparisons of this type, because large scale systems include infrastructure such as power supplies and controllers, and provide manageability and resilience, thus lowering the effective cost of ownership; however, such comparisons do illustrate the point that there is a wide pricing gap between the two.","The industry generally has also been slow to recognize that the requirements for long term on-line archival storage are fundamentally different to those of \u2018normal\u2019 on-line storage applications. In particular, in a traditional on-line storage environment, data \u2018read\u2019 activity generally exceeds \u2018write\u2019 activity by several, if not many, times. Consequently, on-line storage is usually optimized for reading, by the use of techniques such as caching.","In contrast, archiving, particularly of transient data such as email and instant messages, demands very high write performance in order to rapidly process the constant stream of incoming data\u2014otherwise the messages have to either be delayed, or a temporary copy of them must be made, placing additional demands on the messaging system.","Storage technology has evolved considerably in recent years, with three new storage technologies emerging.","Network Attached Storage (NAS) couples one or more hard disk drives with a processor, memory and network connection to provide an inexpensive server dedicated to data storage, which can be accessed by any other networked system.","NAS has become a commodity item, available from a wide range of manufacturers at a cost below US$10,000 per terabyte. It has a relatively low capacity however, currently a maximum of 1 terabyte in a single physical device.","Storage Area Networking (SAN) adopts a different approach, providing a pool of physical storage devices connected by a dedicated high speed network. Application and file servers connect to this dedicated network and share the available storage pool, which can be easily expanded without needing to take servers off-line.","SAN is available from a number of manufacturers, but requires purpose designed high speed networking components, which increase its cost considerably over NAS. It supports a large pool of storage devices, but typically does not share logical storage volumes between servers.","Content Addressable Storage (CAS) is specifically designed for archiving static documents, ie those which do not change over their storage lifetime. Applications pass a copy of the document they want stored, and are returned a unique \u2018token\u2019 which the application uses to subsequently retrieve the document. CAS provides the advantage that multiple copies of the same document are automatically identified and only a single copy is stored.","Since CAS manages its own operating system its capacity is practically unlimited, but the requirement to calculate the unique token for every file written creates an overhead which limits write performance. In terms of capital cost however, CAS is currently at the top of the scale.","The invention is defined by the independent claims to which reference should now be made. Advantageous features are set forth in the dependent claims.","The preferred system provides a storage scheme for applications requiring persistent data storage, that is storage of data that once written is kept secure for an extended period of time until it is no longer required. This is in contrast to ordinary data storage in which it is assumed data read, write and erase operations are carried out more frequently.","The applications preferably operate on one or more computers connected by a computer network to one or more storage devices. The term computer is understood to mean a server, client or stand-alone machine.","The invention allows a practically infinite number of physically separate storage devices to be used as archival storage means by one or more application programs. Application data is organized among the devices such that files with a similar expiry date (that is the date beyond which the files are no longer required to be archived) are grouped together on the same physical device, such that after the expiry date the device used for such files may be erased and re-used. Optionally, files with particular content types may be grouped on the same physical device, or among physical devices of the same type.","The invention allows the storage system to start small, with perhaps only a few physical storage devices, and to be expanded by adding additional devices over time. This avoids a large initial capital outlay. Since the capacity of each physical device can be different, the invention allows the latest technology devices to be used whenever additional storage devices are added. This allows the most advantageous price\/capacity ratio to be achieved.","The invention also provides means for load scalability, such that data may be read or written as multiple parallel streams between applications and devices providing practically unlimited performance, particularly in writing data to the storage means.","The result is a high capacity, high speed storage system able to meet the archiving needs of even the largest organizations, at a cost which is an order of magnitude less than current solutions, and which allows advances in storage technology to be taken full advantage of.","The invention also provides means for data to be secured, such that it cannot be deleted by an external process until its expiry data has been reached, an important requirement in regulatory environments.","The preferred embodiment of the invention will now be described in more detail with reference to the drawings.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["1","2","3","4","5","6","7"]},"Each NAS device is accessible to each of the Application Programs using standard file sharing methods, such as those under the usual UNC naming convention, each NAS device having a unique identifier by which it is addressed. As shown in , each NAS device has a conventional file system comprising a directory structure and files in the usual manner.  illustrates the directory structure of a NAS device having the unique identifier 001 (shown as \u2018NASDEV001\u2019). Files named \u2018File0000\u2019 to \u2018File9999\u2019 are stored in directory , which is itself a subdirectory of directory . Finally, directory  is contained within the top-level directory \u2018Share0\u2019. By way of illustration the path name to one of the files (File 0003) is also shown: \u2018\\\\NASDEV001\\Share0\\100\\200\\File0003\u2019.","Arranging files in directories and subdirectories is preferred, as it makes looking-up any given file more efficient. This is pertinent in the case of the preferred system, where reading and writing data speeds should be optimised.","The security provisions for ensuring controlled access to data may be provided by means of the usual username\/password authentication, and\/or by making the network  a private network accessible only to the Application Servers and allowing the Application Programs to control access. Such security provisions are assumed to be known and so will not be discussed further.","The Broker Application maintains a Device table with each row of the table corresponding to a single NAS device, and each column corresponding to various configuration and status conditions of the NAS devices.  shows an example implementation of the Device table maintained by the Broker .","The first column  contains a Device ID such that each storage device can be separately and uniquely referenced.","The next column  indicates the current status of each of the respective devices. The status may be \u2018Full\u2019, indicating that the storage capacity of the device has been entirely used up; \u2018In Use\u2019 meaning that data has been written to the device but that storage space remains; \u2018Off-Line\u2019 meaning that the device has been temporarily or permanently disconnected and is not presently available to receive data; and \u2018Free\u2019 which indicates that the device is empty and can be written to.","The Broker manages the device table such that all \u2018Free\u2019 devices appear after devices with another status. This includes devices which are being \u2018recycled\u2019 after erasure of the data they contain and which is no longer needed. Thus, when all of the data in a \u2018Full\u2019 device is past its expiry date, the device status will be set to \u2018Free\u2019 and its entry in the Device table will be relocated to the bottom of the table. The data can be erased and the device made ready to receive new data.","The next column , in the table indicates a \u2018Content Type\u2019 for the data that is stored in the device. When an Application Program requests write permission from one of the storage devices, it will indicate to the Broker process the content type of the data to be stored. The application Program therefore sets the content type for the data. The content types themselves may however be defined by a user or system administrator to reflect the types of data that are required to be stored. The content type \u20181\u2019 illustrated in , may for example, indicate \u2018e-mail\u2019 data, and \u20182\u2019 may indicate word processor files, or html pages. Content type codes may also be used to subdivide data of a given type, such as word processor files for examples, by importance. The code \u20183\u2019 for example may indicate word processor files that are of particular importance, and should be saved for a longer period of time than regular word processor files.","Preferably, each device stores only one type of data content as this makes the recycling of the device more straightforward, and operation of the preferred system more efficient. However, it is also possible that different regions of the same device are used independently to store different respective content types.","The next column  in the Device table, entitled \u2018Target Expiry Date\u2019, records the date on which it is anticipated that erasure of the contents of the device, and reclamation of the storage space will take place. This date is preferably set by the user or system administrator of the storage system, as a means of exercising control over the storage of the data in the respective storage devices. Depending on the implementation chosen, the target expiry date may be a fixed, inflexible date, such that data which is required to be stored until after the target expiry date is not allowed to be stored in the respective device. Alternatively, it could be a flexible date in which case data that is required to be stored until after the target expiry date is allowed to be stored, providing the date until which it is required falls within a predetermined margin of the target date.","The \u2018Actual Expiry Date\u2019, shown in column , on the other hand, reflects the latest date until which an item of data is to be stored. If data is subsequently received that must be stored until a later date than the indicated \u2018Actual Expiry Date\u2019, the Actual Expiry Date is updated.","The next column , entitled \u2018Kilobytes Waiting\u2019 indicates how much data allocated to a particular storage device has yet to be physically written to the device. As there is a finite rate at which data can be written to each device (currently 5 Mb per second for a typical NAS device), it is necessary to monitor the data feed to try and avoid any particular device being overloaded.","The column  entitled \u2018Kilobytes Free\u2019 records how much remaining device space there is to store data, and lastly the column  entitled \u2018Current File\u2019 indicates the current file number. As illustrated in , this preferably ranges from 0 to 9999 and will be incremented by 1 each time a new file is written. Other naming conventions, or ranges of numbers are also possible.","There now follows a description of how data is stored and retrieved by the preferred system:",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4","b":["1","41","7"]},"The Broker returns (Step ) either a fully qualified pathname or a set of identifiers from which the fully qualified pathname can be constructed. According to the implementation, the file can be created (that is an entry made in the appropriate directory on the appropriate device) by the Broker and then subsequently opened by the Application Program, or the file can be created and opened (Step ) by the Application Program itself (as shown in ). The Application Program then immediately writes the data file to the said location (Step ). The Application Program then stores (Step ) either the fully qualified pathname or the identifiers which are used to construct it, such that the file can be read back at a later stage.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 4","FIG. 3"],"b":["41","51","52","56"]},"In making this determination, the Broker considers a number of factors. Firstly, that the intended content type of the data (passed as a parameter by the Agent) matches that of the device in the table. As mentioned earlier, the necessity for the data content type to match that of the device can be waived depending on the implementation. Secondly, that the device has enough free space to hold the file (the file size being passed by the Agent as a parameter, and the table containing the current amount of free space on the device). Thirdly that the target expiry date of the device is within a given time period of the required expiry date (passed as a parameter by the agent). Lastly that the amount of data waiting to be written to the device does not exceed a given threshold representing an overload condition of the device.","The content type is entirely determined by the Application Program. It is used to group content of a certain type together. This might, for example, be used to keep mail from different departments on different devices. The content type field could also be used for other purposes, for example to differentiate different types of device, allowing more important files to be stored on more resilient storage devices, for example keeping customer communications on devices with mirrored disk drives.","Various algorithms can be used in considering whether storage of data with a given required expiry date or a given device is acceptable. At its most simple, the target date can be a hard expiry date set in advance by the system administrator, such that if the required expiry date occurs at any time after the target date then the device is considered unsuitable for the data. Alternatively, an algorithm can determine that the data will be accepted by the device if the required expiry date is not more than, say, 3 months beyond the target expiry date.","Most advantageously, the algorithm considers multiple factors, including the amount of free space on the device, and the rate at which it is filling with data (and hence the date it is likely to become full). The objective is to fill a given device with data files which have the earliest possible expiry date, such that the device may be eligible for re-use as soon as possible, and without wasting space.","The overload threshold amount is typically the amount of data that the device is able to process in a given time period. The frequency with which the \u2018Kilobytes waiting\u2019 field  is updated preferably matches this time period. A suitable allowance can be made for read activity; for example the threshold might be reduced to 80% of the device's throughput capacity.","If it is determined that the current operating parameters of the device are suitable to allow the data to be stored, then control passes to step , where the device table is updated as follows. If the required expiry date of the data being stored is later than the actual expiry date in the table, then the actual expiry date is replaced by it. The field containing the amount of data waiting to be written is increased by the size of the file to be written (passed as a parameter by the Agent). The field containing the amount of free space on the disk is reduced by the size of the file to be written. For this purpose, the size of the file to be written may be rounded up to a multiple of the device's disk allocation unit size in order to maintain a more accurate free space count. The current file number is then incremented.","The incremented file number is then used to construct a UNC file path, and this is returned to the Agent in step . It will be appreciated that while the table in  shows a simple current file number, this could be used to construct a more complex path such as that described with reference to . The purpose of a more complex path is to limit the number of files in a given directory, since most operating systems become less efficient as the number of directory entries in a given directory increases. If new directories need to be created, then this can be done by the Broker at this stage.","If, in Step , the device is not found to be suitable, such as if the Content Type does not match, insufficient storage space remains, or if allocating the data to the device will result in an overload condition, then control passes to Step , where a check for an alternative storage device is made. Assuming there is another device, control passes to step  in which the next device in the device table is considered. The status of that device is then determined as before in Steps  to . A device pointer may be used in Steps  to  in conjunction with the device identifiers shown in column  to monitor the current device under consideration.","If no alternative device is found in step , then control passes to step  where an error is returned to the Agent since no suitable device can be found on which to store the file.","If in Step , the device is not found to have an \u2018In-Use\u2019 status, then control passes to Step , where a check is made to see if the device is \u2018Free\u2019.","If the device has a status of \u2018Free\u2019 then the table update in Step  is as follows. The status is changed from \u2018Free\u2019 to \u2018In-Use\u2019. The content type is set to the requested content type (passed by the Agent as a parameter). The target expiry date is set either to the requested expiry date (passed by the Agent), or by some suitable algorithm to a date beyond it. The amount of data waiting is set to the size of the file to be written (again passed by the Agent), and the current file number is set to 1. If the amount of free space on the drive has not already been set, then it is determined by the Broker and set in the table accordingly.","Control then passes to step  where the current file number is used to construct and return the UNC pathname as before.","As explained earlier, the Broker Application maintains the device Table such that devices with status \u2018Free\u2019 are added to the bottom of the table. This ensures that suitable devices which are already \u2018in-use\u2019 are used in preference to new, empty devices. This ensures that the available storage space is used efficiently.","If the device status is not determined as \u2018Free\u2019 in step , then control passes to step  where it is determined if there are any more devices in the table. If not, then control passes to step  where an error is returned to the Agent since no suitable device can be found on which to store the file.","In the case of a device being rejected because of an overload condition in the Kilobytes waiting column, the Broker may retry the overloaded device again after a predetermined delay to see if it has become available before issuing an error. An appropriate notification may be given to the Application Program that requested write permission while this is occurring.","Otherwise, the device pointer is incremented (step ) and control passes back to step , where the next device in the table is considered.","It will be appreciated that new devices can be added to the system at any time by extending the Device table, adding an entry for the new device at the end of it, and setting the status for that device to \u2018Free\u2019. The Broker  can be implemented to periodically check for new devices and update the device table automatically.","Another process that must be carried out by the Broker application is to periodically reduce the field containing the amount of data waiting to be written to each device by the amount of data that can be written in such period. For example, if a given device is capable of accepting data at a rate of 5 megabytes per second (a typical performance rate) then the table can be updated once every second, reducing the amount in the data waiting field by 5 megabytes. If this causes the data waiting amount to be negative, then it is set to zero as all data waiting will have been written. It will be appreciated that the update period and adjustment amount can be proportionately varied.","Because each hardware component in the preferred embodiment is connected via a network switch, multiple Application Programs each have a full capacity connection to each Storage device. Since the Broker avoids overloading a device by moving write activity to another device, performance of the overall system can scale to much higher levels than with a single connection storage sub-system.","The Broker can also be configured to remove write and\/or delete access to each file after a given time interval. For example, 5 seconds after the Broker passes the UNC pathname back to the Agent it can change access control to the file on the device such that it is write protected and cannot be deleted by any other process. This is achieved using a call to a standard operating system function on the device. While 5 seconds will likely be sufficient time for the Application to open the file and begin writing data to it, in the case of a large file the Application Program may not have completed the task. However in the case of typical operating systems this does not cause a problem, since access rights are only checked at the time a file is opened. Alternatively, the Broker can periodically check that the file has been created, written to, and closed before changing the access rights.","This method of locking the file ensures that it cannot be accidentally deleted by any process other than by the Broker, which is configured not to do so until the expiry date for each file has been reached, when the Broker can either remove the deletion protection, or optionally delete the file itself. Thus the system effectively becomes a write once, read many (WORM) device, at least until the expiry date of each file, and as such meets both the regulatory requirements for storage compliance (such as SEC and NASD rules) and the organization's need to free storage for re-use as soon as possible.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 6","b":["61","45","62","63"]},"Although the preferred embodiment of the invention has been described as comprising a number of NAS devices, it will be appreciated that any suitable storage devices, or combination of storage devices, could also be used."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will now be described in more detail, by way of example, and with reference to the drawings in which:",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
