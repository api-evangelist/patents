---
title: System and method for moving graphical objects on a computer controlled system
abstract: A user interface method and system for positioning graphical objects in the display area of a free form system. A selected object may operate in a first state where it can be moved to different positions within the display area. The selected object may further operate in a second state where movement of the selected object causes other graphical objects within its path of movement to also move. The state of the selected object is indicated by a visually distinct presentation of the graphical object, for example when in the first state the graphical object is shown to have shadow to provide the visual clue that it is “above” the other graphical objects in the display area. A user may dynamically switch between states based on signals provided to the system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07068288&OS=07068288&RS=07068288
owner: Xerox Corporation
number: 07068288
owner_city: Stamford
owner_country: US
publication_date: 20030221
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This non-provisional application claims the benefit of U.S. Provisional Application No. 60\/357,850, entitled \u201cZooming Interfaces For Sensemaking, Visualization, and Navigation\u201d which was filed on Feb. 21, 2002, and is hereby incorporated by reference in its entirety.","Reference is made to the following commonly-assigned copending U.S. patent applications: (1) Ser. No. 10\/369,613, entitled \u201cMethod and System for Incrementally Changing Text Representation\u201d, by Benjamin B. Bederson et al. (D\/A1687), (2) Ser. No. 10\/369,614, entitled \u201cMethod and System for Incrementally Changing Text Representation\u201d, by Benjamin B. Bederson et al. (D\/A1687Q), (3) Ser. No. 10\/369,612, entitled \u201cMethods and Systems for Navigating a Workspace\u201d, by Lance E. Good et al. (D\/A1309), (4) Ser. No. 10\/369,624, entitled \u201cMethods and Systems for Interactive Classification of Objects,\u201d by Lance E. Good et al. (D\/A2121), (5) Ser. No. 10\/369,617, entitled \u201cMethods and Systems for Indicating Invisible Contents of Workspace\u201d, by Lance E. Good et al. (D\/A1310), and (6) Ser. No. 10\/371,017, entitled \u201cSystem and Method for Interaction of Graphical Objects on a Computer Controlled System\u201d, by Lance E. Good et al. (D\/A1311), all filed herewith and the disclosure(s) of which are incorporated herein.","The present invention is related to the field of computer controlled display systems, in particular techniques which optimize use of available display space and minimize user disruption when performing tasks causing the interaction of graphical objects on the computer controlled display system.","Blackboards, electronic whiteboards and other two-dimensional free form workspaces have long been used for supporting brainstorming, sensemaking, and other generative tasks where information is created and organized incrementally. Sensemaking is a term used to describe activities that interweave retrieving, creating and using information. As the amount of information placed in these workspaces grows, the competition for display space increases. If users need to interrupt their ideation to rearrange the information in the workspace, make space for new information, or perform other \u201chousekeeping\u201d functions to enable use of the workspace, they risk disruption of their train of thought or \u201closing the flow\u201d resulting in the possible loss of ideas. Often, the information contained in the workspace is represented as graphical objects. Thus, there is a general need in systems providing a two-dimensional (2D) workspace for techniques that provide intuitive and timely manipulation and interaction of graphical objects.","The use of computer controlled two-dimensional workspaces for organizing information is well known in the art. Some of these systems include the Alternate Reality Kit (S, R. Experiences with the Alternate Reality Kit: an example of the tension between literalism and magic. 87, April 1987, pp. 61\u201367), Aquanet (M, C. AND R, R. Two Years Before the Mist: Experiences with Aquanet, , November 1992, pp. 53\u201362), Cognoter (S, M., B, D., F, G., L, S. T, D. WYSIWIS Revised: Early Experiences with Multi-User Interfaces. -, December 1986, pp. 276\u2013290), Flatland (M, E., I, T., E, W., LM, A. Flatland: New Dimensions in Office Whiteboards. 99 , May 1999, pp. 346\u2013353), MUSE (F, G. Z, X. MuSE: A Multiscale Editor, 98, November 1998, pp. 107\u2013116), PowerPoint (MPP. http:\/\/www.microsoft.com\/office\/powerpoint\/), Storyspace (ESS. http:\/\/www.eastgate.com\/Storyspace.html), Tivoli (P, E., McCALL, K., , T. H, F. Tivoli: An Electronic Whiteboard for Informal Workgroup Meetings, , April 1993, pp. 391\u2013398), VIKI (M, C., S, F., C, J. VIKI: Spatial Hypertext Supporting Emergent Structure, 1994 , September 1994, pp. 13\u201323), and Web Squirrel (ESWShttp:\/\/www.eastgate.com\/squirrel\/Welcome.html).","In order to minimize \u201closing the flow\u201d when using such systems, the manner in which a user interacts and the system responds is critical. A number of techniques have been disclosed in the art which purportedly facilitate the use of such systems. Some techniques provide for certain operations to be automatically performed. One such operation is the handling of related information in some coordinated fashion, e.g. as a list or group. For example, PowerPoint, Tivoli, and VIKI all have notions of a list structure to automate the alignment and ordering of list items. Although PowerPoint and Tivoli also use this list structure to assist in inserting items into the list, neither of these systems provide an interactive preview of the resulting insertion. Such a preview is useful in understanding the effect of updating a list structure. Storyspace and VIKI also have the notion of a subspace (i.e. a separate and distinct interaction space within another space) to automate the maintenance of a spatial, hierarchical collection of objects.","Several systems have also employed features for automating object interactions. The Flatland system uses a bumping concept to avoid the occlusion of objects on a whiteboard surface. Moving or growing an object could cause it to transitively bump other objects and if an object hits the edge of the whiteboard (i.e. the visible display area) it would automatically shrink. Data Mountain (R, G., C, M., L, K., R, D., T, D., D, M. Data Mountain, Using Spatial Memory for Document Management, 98, November 1998, pp. 153\u2013162) also employs bumping to reduce the occlusion of web pages on an inclined plane; facile movement and placement of the pages is permitted while keeping at least some part of the page visible. The Alternate Reality Kit provided a more diverse collection of object interaction contracts, such as gravity or spring forces, to simulate object interactions in a virtual world with alternate physics principles. Lastly, PowerPoint provides automatic panning, a type of object interaction to keep the current text entry point in view. However, PowerPoint does not return your position to the original viewpoint when the text entry is completed.","Another technique known in the art is to provide specialized tools to enable movement or the organization of objects. The alignment stick (R, R. R, K. A New Direct Manipulation Technique for Aligning Objects in Drawing Programs. 96, November 1996, pp. 157\u2013164 and R, R. An alternative way of drawing. CHI '99 Proceedings, 1999, 175\u2013182) provides a tool for providing direct manipulation of layouts. The broom alignment tool (R, J., K, M. R, D. Sweeping away disorder with the broom alignment tool. Conference Companion of CHI '99) is similar to the alignment stick, but it can also distribute objects along its length. The user can cycle through different distribution policies by pressing the space bar. Furthermore, moving the broom backward automatically undoes the alignment operation.","A user interface method and system for positioning graphical objects in the display area of a free form system is disclosed herein. A selected object may operate in a first state where it can be moved to different positions within the display area. The selected object may further operate in a second state where movement of the selected object causes other graphical objects within its path of movement to also move. This enables simplified organization of graphical objects in the display area by eliminating the need of a specialized tool or command to perform such an operation. The state of the selected object is indicated by a visually distinct presentation of the graphical object, for example when in the first state the graphical object is shown to have shadow to provide the visual clue that it is \u201cabove\u201d the other graphical objects in the display area. A user may dynamically switch between states based on signals provided to the system.","The system is generally comprised of: an input element for generating input signals for selection and manipulation of said visual information objects; and a processing element coupled to said input element for generating output display signals representing said visual information objects by interpreting a selected visual information object in a first mode for moving said selected visual information object without causing movement of other visual information objects in the path of movement of said selected visual information object and a second mode for moving said selected visual information object and moving other visual information objects in the path of movement of said selected visual information object.","A system and method for graphical object interaction that enables a user to effectively and efficiently organize and process large amounts of data is described herein. When utilizing the system a user is able to reduce disruptions to their activity caused by the limited display space constraints of a computer controlled display system. So for example, when a user is entering or organizing information on a workspace area of the system, they need not be distracted by the need to rearrange items in order to enter new information. This allows the user to stay \u201cin the flow\u201d of providing such new information.","The system and method of the currently preferred embodiment are implemented in a sensemaking system as described below. In such a sensemaking environment, instances of information content are referred to herein as \u201cvisual information objects\u201d. Visual information objects are in turn handled by the system as graphical objects. It should also be noted and emphasized that certain of the techniques described herein may be applied generally to the field of user interfaces for computer controlled display systems and may be utilized for other types of applications that utilize graphical objects other than the sensemaking activities described herein.","Description of a Sensemaking Activity",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1","b":["101","102"]},"It has been determined that users transition around such a graph and between the two workspaces in the course of developing their ideas. When the transition steps are too cumbersome, or when resource conflicts in external cognition interfere with progress, the steps take longer or must be repeated. This may cause the user to \u201close the flow\u201d or become disrupted from their sensemaking activity.","It has been determined that user interface techniques for working with such workspaces can help a user stay in the flow. For example, when generating content, a key requirement for staying in the flow is to maintain a visible region of work\u2014that is, to keep the item(s) that the user is working on, together with as much context as possible, visible to the user. The system may adjust the view or move objects to accomplish this. A policy favoring limited occlusion or non-occlusion helps prevent items from getting lost during system manipulations.","The following are assumptions about key cognitive resources for a sensemaking activity on a workspace. A cognitive resource is one that aids in the performance of some mental task.","Display space. The system's display space is a primary resource for external cognition. Information requires display space and display space is limited. In general, a display space is too small to show all of the information at once. Many of the design elements in the currently preferred embodiment involving zooming, panning, and peripheral awareness indicators are intended to make trade-offs in the allocation of display space. In making these trade-offs the user and system determine what information elements to display and how much display space to allocate to each element in order to support the active sensemaking task. The management of a display space influences the cost structure of all three activity steps in the writing workspace: generating, arranging, and navigating.\n\nPersistence of spatial arrangement. A user uses a system's interactive blackboard-like writing workspace to create and arrange items. The meaning of the information is held both in the content (that is, words or graphical objects such as diagrams, graphs, etc.) as well as in the spatial arrangement. A user tends to locate closely related items near each other so that they can be conveniently used together. Parallel arrangements of items suggest parallel meanings. Persistence of arrangement speeds access in that the user roughly remembers the location of items and does not need to search for them. It also speeds understanding when a user uses parallel visual structures to imply parallel meanings. The user invests time to arrange items, and presumably benefits both from convenient use and speedier access because he remembers where things are. If the system automatically changes the arrangement radically or in some non-intuitive or illogical fashion, the user will invest more time and energy to learn the new arrangement and possibly to rearrange it.\n","Limited focus. A user cannot think about everything at once. The system provides several kinds of \u201cfocus+context\u201d mechanisms to support a user in focusing on what is important. These mechanisms include grouping operators for objects, peripheral awareness indicators on spaces, and automatic reduction of the scale of the contents of hierarchical spaces so that users can focus on the \u201cbig picture\u201d or overall categories while maintaining limited awareness about internal details. The management of this resource especially influences the navigation step in the workspace.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 1"],"b":["201","101","202","102","201","201","202","203","204"]},"Further illustrated is a menu bar  which provides a plurality of function menus that may be selected in a point and click or pull down fashion, as well as a toolbar  for directly invoking commonly used functions. The manner of user operation of the menu bar  and corresponding function menus and toolbar  is according to well known user interface techniques, thus further description of their operation is not deemed necessary. The various functions provided in menu bar  include those for creating or manipulating visual information objects, viewing or modifying contracts and entering a repair cycle. Toolbar  includes functions for entering text, creating space objects and moving objects.","System Operation Overview","During the course of a sensemaking activity, the user will alternate between steps of generating content, arranging the visual information objects, and navigating between different parts of the workspace. The system manages key resources for external cognition with contracts on its visual information objects to minimize \u201chousekeeping functions\u201d and to help keep a user in the flow.","The first step is the generation of content. In the system, for example, content corresponds to the words contained in text boxes or various organizational structures. These could also be graphical information objects, such as images, charts, etc. The contracts in the system's visual information objects are intended to support a user in staying in the flow while generating content. The system does not require that a user \u201cmake space\u201d before entering information or otherwise generating content. A user can start at any point in the workspace and start typing or otherwise entering objects. As a text box or a list grows, the system bumps other objects or pans the containing space as needed so that the user can maintain focus and stay in the flow of generating content. Similarly, as a user is adding elements to a list, the contracts make space for the new items in the list and enforce vertical alignment. The user does not need to stop entering to arrange the items.","The system also simplifies the controls for arranging objects. Contracts are active during content generation and automatically arrange objects without additional user action using bumping, transitive bumping, and panning. The system also simplifies the \u201cmove\u201d operation by providing visual feedback of the process. The simple pick-up-and-move operation has visual feedback with drop shadows that provide cues showing which objects are being moved. As the user moves an object or set of objects over a space, the moving objects are scaled while in motion to the appropriate scale for the space so that the user can see how objects will fit in. When a user moves objects to put them into a list, the list opens up and makes room for them. In one smooth action, the user can move an object and decide just where to drop it in the list. The list dynamically moves its elements around to prepare room for it. When the user releases the mouse button, all of the objects are dropped into the selection point in the list and scaled to have the appropriate font size for the list. If a user drops an object in a space in a way that would occlude some other objects, an action suggestive of stepping on a bar of soap moves objects out of the way. In addition, if a user wants to create some space in the middle of arranging objects, the user can dynamically turn the movement of an object into a \u201csnowplow\u201d mode. The drop shadow indicating selection disappears and the user can push other objects out of the way. This action does not require the user to fetch a tool or to drop the object first and then select the objects to be moved. The user uses the object to push other objects to make room. These automatic actions keep the user in the flow during arrangement, without requiring the distraction of selecting, moving, or resizing other objects.","The system also provides simplified navigation. Navigation or panning, is the work by a user to get an appropriate view of some part of the workspace. One way that the system supports navigation is by the automatic reduced scaling of the contents of nested workspaces. This gives the usual benefits of a hierarchical view where it is easier to see either the higher level structure or to drill down to see details. The system provides a simple one-click interface to dive down to a subspace so that it grows to fill the display space or to return back to the containing space. The system also provides \u201cCity Lights\u201d peripheral awareness indicators to help keep a user oriented to the presence of objects that are clipped and not currently in view.","The system has been implemented for operation on computer based systems having a graphical user interface such as those utilizing the Windows\u00ae Operating System from Microsoft, Inc. or the Mac OS operating System from Apple Computer, Inc. Such graphical user interfaces have the characteristic that a user may interact with the computer system using a cursor control device and\/or via a touch-screen display, rather than solely via keyboard input device. Such systems also have the characteristic that they may have multiple \u201cwindows\u201d wherein discrete operating functions or applications may occur. Further, such computer based system will be preferably of a \u201cfree form\u201d type wherein a user may create and manipulate objects independent of positional constraints. Examples of such free form systems include electronic whiteboards or paint and\/or draw application programs. A more complete description of such a computer-based system upon which the present invention may be implemented is described below with reference to .","Visual Information Objects","To support sensemaking activities, three basic types of visual information objects are commonly used\u2014text objects, lists, and spaces. A fourth type, graphical objects such as images, diagrams, drawings and the like, may also be used. However, the currently preferred embodiment will be described with respect to the first three types, but it would be apparent to one of skill in the art to use all or any subset of the four types. The behavior of these objects under different kinds of interactions such as creation, movement or growing, is governed by policies, represented as contracts. Each type of visual information object has its own kind of contract. Further, each instance of a visual information object may have its own instance of a contract that is different from contracts of other visual information objects of the same type.","Text objects are visual information objects that contain textual information. Instantiations of text objects are referred to as a \u201ctext box(es)\u201d. List objects are visual information objects that arrange and present items in some ordered sequence, e.g. in a vertical tabular format. Instantiations of list objects are referred to as a \u201clist(s)\u201d. A space object is a visual information object that is used to arrange other visual information objects. Instantiations of space objects are referred to as a \u201cspace(s)\u201d.","Contracts in the currently preferred embodiment of the present invention govern both objects themselves and the \u201cchildren\u201d or elements of composite objects. For example, contracts for a list govern both the behavior of the visual list object and also the behavior of objects that are members of the list. Note that if an element is \u201cremoved\u201d as an element of a composite object it is no longer governed by the parent object. Such relationships can be established explicitly (e.g. in a list), or implicitly (e.g. subspace within a space).","Listed below are examples of properties of visual information objects governed by contracts.\n\n","The visual information objects of the present invention are implemented using well known software development techniques and data structures and are described in more detail below.","The No-Occlusion Principle","When the populated space contains more information than can be displayed in the view space using a reasonable scale, something has to give. Other systems have addressed this by using 2.5D or 3D techniques such as having windows that partially overlap or cover up other windows. Using such systems, users can cause occlusion unintentionally, such as when a new object is created on top of an existing one. In such cases, the user is focused on manipulating some objects and may not notice that another object has been occluded. As a result, objects that the user needs for the next steps of sensemaking may become difficult to access or may have disappeared for no obvious reason. Detecting occlusions requires the user's attention and resolving them may require breaking their flow of concentration.","Many of the contracts described below enforce a no-occlusion principle. In practice, this often means that instead of objects covering up other objects, they \u201cbump\u201d them aside. Bumping behavior arises when objects are moved, when objects grow to contain more information, and when they are re-sized by the user.","Text Box Objects","Text box objects are visual information objects for containing text. An easy way to start developing and capturing ideas is to create text boxes anywhere in an open space for the ideas that come to mind, as shown in . Referring to , text boxes \u2013 are displayed.",{"@attributes":{"id":"p-0064","num":"0070"},"figref":["FIG. 4","FIG. 4"],"b":["401","402","401"]},"What happens to a text box when a user types depends on which contract is in force. In a usual case for the currently preferred embodiment, the user just begins typing. In this case, the vertical line disappears and a cursor appears at the point where text is entered as the user enters text. As suggested by the text box , a user can type and the text box will grow to the right as the user adds characters, and shrink to the left if the user backspaces. In the currently preferred embodiment, the box can grow to the right until reaching a maximum number of default characters, e.g. 33. If the user continues typing, line wrap will occur and a second line of text will appear left aligned and below the first line. Referring briefly to , the text box  can later be stretched to change the aspect ratio. This operation does not change the text size (font size), but does cause the line wrap to be recomputed. The stretching of a text box is accomplished by \u201cselection\u201d of the text box, typically by a point and click operation using the cursor control device, and then selecting and dragging an anchor point, e.g. point , to a desired width. Alternative methods of stretching, e.g. after selection clicking the mouse button to cause stretching to the right by predetermined character increments, would not depart from the spirit and scope of the present invention.","In another stretching variant interaction shown in , a user can immediately stretch vertical bar  to the right, creating a pre-sized region for the text. In this example, the contract lets the text grow to the right to fill the region. When the characters reach the right hand side, the text box grows downwards and system will wrap lines (i.e. begin entering text on a new line).","None of the operations relating to the \u201clength\u201d of the text box affect the visual size (roughly \u201cfont size\u201d) of the text itself. In the currently preferred embodiment a text box scaling operation that uses predetermined keys on the keyboard, e.g. the Page Up and Page Down keys, can be used to grow or shrink the scale of the text box and the text within it. The scaling contract preserves the aspect ratio and line wrapping within a text box.","Lists","A list is a visual information object in the system that arranges items in an ordered sequence. In the currently preferred embodiment, this arrangement is vertically oriented. A list has a title (written in a title bar) and zero (0) or more members.  shows an example of a list titled \u201cThings to Pack.\u201d","Lists can be created by selecting a set of items, e.g. text boxes, and invoking an operation to cause them to be treated as a list. In the currently preferred embodiment of the present invention, this is accomplished by using a \u201clistify\u201d menu operation on a set of selected items.","In the currently preferred embodiment, an alternative way to make a list is to start typing an item in a text box, and then ending with a carriage return (typically the enter key of a keyboard coupled to a computer controlled display system).  shows a step in the making of a list from a text box. The user has typed the word \u201cSodas\u201d  followed by depressing the Enter key followed by entering the term \u201cCoke\u201d . The system created a list whose title is \u201cList\u201d  with the two members \u201cSodas\u201d  and \u201cCoke\u201d .","The title \u201cList\u201d is the default for a list structure that is provided upon initial creation of the list structure. The title of the list can then be set by a separate operation\u2014either dragging one of the list elements into the title position to make it the title or positioning the cursor and entering text directly in the title position.","The basic contract for lists causes all members to be left aligned. Items in a list have a default size (font size) and new items that are added to the list are given the same size. As new items are added to a list, the list grows downwards.","Lists are recursive in that they can have other lists as members. This is illustrated in .  shows a list  where one of the members of the list, i.e. list , is itself a list. The outer list  is titled \u201cThings to Pack\u201d and the inner list  is titled \u201cGear.\u201d It should be noted that any visual information object can be an item in a list, so Spaces can be members of lists as well.","Like text boxes, lists have contracts that govern scaling. In the currently preferred embodiment, lists can be scaled by first selecting them and then using the Page Up and Page Down keys. When the scale of a list is reduced, the system preferentially reduces the size of the list members more than the size of the title, as shown in .  illustrates lists \u2013 wherein the lists are successively reduced in scale. In this way, when a list is made very small, the user can still read what the list represents and get a rough sense of its size although the elements in the list may be too small to read.","Spaces","The top-level writing workspace of the system of the currently preferred embodiment is itself an instance of a space. A space is conceptually similar to a blackboard for creating and arranging visual information objects, such as text boxes, lists, and other spaces.","One feature of spaces in the system is that nested spaces reduce the scale of their members. This is illustrated in . This reduction in scale reflects the sense that each level of nesting corresponds to a deeper level of detail. Details are made smaller so as to provide more space for the \u201chigher\u201d or bigger ideas. Nested spaces also darken the background of their open space as another visual cue to the depth of the containment relationship.  shows how a list and some text boxes are scaled and the backgrounds of spaces are shaded differently in nested spaces.","It should be noted that spaces and lists are both composite objects. Their behaviors are different in several important ways and it is instructive to compare some of the differences in their contracts. Like lists, spaces have members. Unlike lists, spaces do not enforce a vertical alignment property for arranging the members. Further, spaces do not grow in size when more members (i.e. information) are added to them.","One way to understand a space is to think of it as a finite window over an infinite canvas. Because the window has a finite size, any visual information objects on the canvas that are not directly under the window are clipped. That part of the canvas on which there are visual information objects is referred to as \u201cpopulated space\u201d and that part which can be seen at any given time is referred to as \u201cviewed space.\u201d Many of the contract elements for spaces are intended to govern trade-offs in managing what information about populated space appears in the viewed space.",{"@attributes":{"id":"p-0079","num":"0085"},"figref":"FIG. 12","b":["1201","1202","1201"]},"To provide peripheral awareness of clipped objects in the populated space, a peripheral awareness indicator that is referred to as \u201cCity Lights\u201d is provided. City Lights are described more generally in co-pending application entitled \u201cMethods and Systems for Indicating Invisible Contents of Workspace\u201d, Ser. No. 10\/369,617. As the name suggests, a peripheral awareness indicator operates such that a person can see the \u201cglow\u201d of the lights of a distant city in the night sky before they can see the city itself. A peripheral awareness indicator provides information about clipped objects. Such information about a clipped object could include its direction from the boundary of the viewed space, its size, its distance, its type, its recency or time since last edit, or a summary of its information content.","The peripheral awareness indicator of the currently preferred embodiment provides limited information about the size, direction, and distance of clipped objects as illustrated by . In , the boxes \u2013 represent items (visual information objects) that are inside the viewed space, and the boxes \u2013 indicate clipped items in populated space. The city lights are shown as visually distinct markings on the outer bounding box of the viewed space, see markings \u2013. An orthogonal projection from the clipped items onto the bounding box of populated space delineates the edges of the city lights. City lights for objects that are in the \u201ccorner\u201d and have no orthogonal projection onto the sides of the viewed space are shown as small corner indicators (see marking ). City lights for clipped objects that are nearer than a near boundary (i.e. \u201cnear objects\u201d) have a first visually distinct characteristic, e.g. a first color. City lights for clipped objects that are farther away (i.e. \u201cfar objects\u201d) have a second different visually distinct characteristic, e.g. a second color different from the first color. Indicators for near objects are permitted to occlude indicators for far objects because some indicator of an object in the direction of the far object remains. In the currently preferred embodiment, the position of the near\/far boundary defaults to half of the width of the viewed space.","Preferably, the computation of the peripheral awareness indicators in the currently preferred embodiment is fast enough to allow them to be computed and re-displayed in real time when a space is being panned.  illustrates several versions of spaces with the same contents but panned to different points. Referring to , space  has no clipping of information objects  or . At  a panning of space  to the right causes clipping of information object  and a resulting indicator . At  a panning of space  up and to the left causes information object  to be clipped and a resulting indicator . At , a panning of space  far to the left causes both the information objects  and  to be clipped and display of resulting indicators  and .","As a user works in the writing space, it is sometimes important to be able to zoom down to work on the details of a contained subspace. A zooming operation on a space will cause it to expand to fill the display area of the entire writing workspace.  shows an example of a session where much of the information in the \u201crestaurants\u201d space  is clipped.",{"@attributes":{"id":"p-0084","num":"0090"},"figref":"FIG. 16","b":"1501"},"Operations Governing Interaction Behaviors","The contracts described above focus mainly on the allocation of static display space. In the following, what is described are operations that govern the moving, growing, and bumping of information display objects.","Since the spatial organization of objects is used to convey meaning, the system provides operations for moving objects. The user operations for moving an object follows a sequence typical for those used in graphical user interfaces. The user first moves the cursor over the target object and clicks on it to select it. Still pressing the mouse button, the user then moves the object so that the cursor is over the place where the object is to be placed. Releasing the mouse button drops the object. It should be noted that in the currently preferred embodiment, that prior to releasing the mouse button and dropping the object, the described actions will occur. This could enable a user to decide if this is the desired course of action to be taken. If the user does not drop the object, the system, and the visually displayed objects, will revert back to their original state. This is illustrated in .",{"@attributes":{"id":"p-0087","num":"0093"},"figref":"FIG. 17","b":["1701","1701","1702"]},"Automatic Scaling: Moving Objects into Subspaces","In this example, the user proceeds to move the text box  into the \u201cPlaces to Eat\u201d space . In the system of the currently preferred embodiment, spaces reduce the scale for objects contained within them, so the floating image of the text box  immediately reduces in size as shown in . The text box  reduces in size further as the user moves deeper into the hierarchy of spaces to the \u201cRestaurants in Disneyland\u201d space  as shown in .","Automatic List Growth: Moving Objects into Lists","The user next moves the \u201cPlaza Gardens\u201d text box  over the list \u201cMain Street Restaurants\u201d . The list  fluidly grows to make space for the new item.  shows how list items move out of the way to make space as the floating text box is moved over the list.","These examples show how the contracts for display of an object interact in a fluid way when objects are moved in the system\u2014reducing the scale of objects as they move over spaces or making room for an object in a list. Collectively, they support the user in being able to gracefully move an object using a single, simple gesture, without needing to attend to details of scaling, making room, or re-arranging other objects.",{"@attributes":{"id":"p-0091","num":"0097"},"figref":["FIGS. 21\u201323","FIG. 21","FIG. 22","FIG. 23"],"b":["2101","2102"]},"Stepping on the Soap: Placing an Object Between Two Objects","Interactions can also occur over white space. When an object is dropped between two objects and there is not enough room to display the object in that location, the objects move out of the way to make room for it. This action is referred to as \u201cstepping on the soap\u201d, to suggest the way a slippery bar of soap can shoot out from under your foot if you step on it in the shower. The system selects an object to move and a direction to move it that minimizes the overall perturbation as illustrated in .","Referring to , a user positions a floating object  between two stationary objects  and  before dropping it. Referring to , when the user drops the floating object , the action causes the objects  and  to move out of the way.","The Snowplow: Using an Object to Move Other Objects","\u201cSnowplow\u201d is an alternate contract for moving an object \u201con\u201d the surface, and may be instigated by the user selecting an object and initiating an action indicating that the snowplow mode be invoked. Invoking the snowplow mode causes the drop shadow to disappear and the user can use the moving object to push other objects around. When any edge of the moving object touches another object, the other object is pushed in whatever direction the user pushes. The user can push a number of objects into any configuration. Terminating the snowplow mode, e.g. by lifting the shift key, ends snowplow mode and causes the moving object to again float above the surface and display a drop shadow. In either mode, the moving object is released when the cursor control button is released indicating the object is no longer selected.","The \u201csnowplow\u201d operation is illustrated with reference to . Referring to , an object  has been selected and the shift key depressed. The desired end effect is to have object  positioned between objects  and . Note that in , there is not enough room between the objects  or  for it to be placed. For example, for object  representing a space, it may be desirable to have it positioned between another space, object  and a text box . In any event, referring to , object  is used to move object  to the left. In , object  is used to move object  to the right. As illustrated in , there is now enough room between objects  and  for object  to be positioned. It should be noted that the \u201csoap\u201d operation may also have been used to obtain the desired effect for the example illustrated in .","Many of the actions of movement\u2014making space in a list, stepping on the soap, or snowplow mode\u2014are all effects of the \u201cno occlusion\u201d rule in contracts for visual information objects. Another consequence of this rule is that whenever the movement of one object causes it to bump into another, the second object is also moved. Bumping is transitive: all of the objects that bump cause the other objects that they bump to move.","The no occlusion rule in contracts can have effects for any operation that changes the area that a visual information object might occupy. The previous section illustrated actions triggered when a sensemaker moves an object, including scaling and bumping. Described below are further effects of the no occlusion rule.","Automatic Bumping: Growing an Object into Another","Bumping can also be triggered when an object grows. A text box can grow when a user adds more text to it and a list grows when a user adds more items to it. Any visual information object can grow if the user explicitly changes its scale. An object can also occupy more space if a user selects it and then reallocates the space assigned to it. Grabbing and stretching the corners of a text box can cause it to change its aspect ratio. Grabbing and stretching the corners of a space changes the area available for the \u201cviewed space.\u201d When any of these operations would cause an object to occlude another object, the system bumps the second object so that no occlusion occurs.","Automatic Panning: Keeping Text Entry in View","Growth of a visual information object can also cause panning of the viewed space.  shows a sequence in which panning occurs.","Referring to , a user starts typing the text \u201cSu Hong's Restaurant\u201d into a text box  at the edge of the \u201cPlaces to Eat\u201d space . As illustrated in , in order to keep the typing region in view as the text box grows to the right, the system pans the containing space to the left. When the user finishes typing, as illustrated in , the space is restored to its former position so that the text box  is clipped.","The same effect occurs if a user adds information to a list that is near the edge of a containing space. The space pans automatically while the user is working on the list and restores the viewed space to the original pan position when the user selects another object.","Zoom-Anti-Zoom: an Alternative to Bumping and Panning for Adding Material","An alternative technique for governing the growth of text boxes is one that is termed \u201cZoom-Anti-Zoom\u201d or \u201cZAZ.\u201d The intended effect of ZAZ is to enable a user to stay focused on entering new text without causing the text box to bump into other objects. Instead, the ZAZ contract automatically changes the scale (roughly the font size) and camera position for rendering of the text boxes. The manner of representation and rendering of visual information objects is described in greater detail below. In effect, the text gets smaller as the box gets more full. Since this approach would eventually have the effect of making the text too small to see, the system also \u201cmoves the user closer\u201d to the text so that its apparent size stays about the same. When the user selects another object, the containing space is restored to its original scale and the text appears in its greatly reduced size. The user can then move it or scale it as desired.","This combination of scaling the text and the background simultaneously is illustrated by the sequence in . Referring to , a user is operating in space  and entering text into text box . It is noticed that as text is entered it will \u201cbump\u201d into subspace . Referring now to , it is observed that the \u201csize\u201d of the text in the text box  appears to be the same (the effect of the increased scaling), but also, subspace  appears to grow in size (the effect of zooming in). Referring to , the scaling of text in text box  continues as does the zooming. Zooming is now to the extent that vertical limits of subspace  exceed the bounds of the view area of space . Thus, city lights indicators  are displayed. Finally, referring to  when the user leaves text entry mode, the original view is restored. Note that the text is now displayed in a much reduced scale corresponding to the amount of text entered.","Representing Interaction Behaviors and Display Characteristics as Parameterized Contracts","In the currently preferred embodiment, contracts are made explicit to represent interaction and display policies as parameterized contracts. The term contracts and policies in this context is meant to indicate how the visual information object will interact with other objects and be displayed when it is itself being interacted with directly or indirectly by the user. The parameters within the contracts may apply to all the visual information objects. Alternatively, a contract may be created to control behavior of an individual visual information object. A description of exemplary user interfaces to these contracts is presented below. It would have been apparent to one of ordinary skill in the art to utilize other well known user interface techniques to provide parameters for such contracts,","Contracts for Spaces",{"@attributes":{"id":"p-0105","num":"0111"},"figref":["FIGS. 37\u201339","FIG. 37","FIG. 37","FIG. 37","FIG. 37"],"b":["3701","3702","3703","3701","3704","3705","3706","3707","3708","3709"]},{"@attributes":{"id":"p-0106","num":"0112"},"figref":["FIG. 38","FIG. 38"],"b":["3702","3801","3802","3803","3804"]},{"@attributes":{"id":"p-0107","num":"0113"},"figref":"FIG. 39","b":["3703","3901","3902","3903","3901","3902","3903"]},"Contracts for Lists","Lists and spaces in the system of the currently preferred embodiment are similar in that both kinds of objects are composite\u2014holding other visual information objects in their interiors. Lists differ from spaces in that they impose an alignment on their interior objects. The contract for growth for lists and for spaces is similar.  shows an example of a user interface to the contract governing interior objects in a list.","The user interface to the interior of a list offers controls for formatting, such as whether the elements of a list have a leading \u201cbullet\u201d  and whether items are indented . It also offers controls governing the magnification of items moved into a list . Behavior controls  are offered that can govern scrolling and panning behavior when viewing the contents of a large list based on known techniques such as a fish-eye, focus-context approach. Finally, the radio buttons  and  govern whether the list attempts to display all objects in the area provided for the list, or whether it employs clipping. The resulting behaviors are similar as those for the Space object.","Contracts for Text Boxes",{"@attributes":{"id":"p-0110","num":"0116"},"figref":["FIG. 41","FIG. 41","FIG. 41"],"b":["4101","4102","4103","4104","4105"]},"Selectable Contracts and the Repair Cycle","A useful feature of the system is a \u201crepair cycle\u201d for easily managing the system's automated behaviors. The user has the option of entering the repair cycle whenever the system makes automated contract adjustments in response to a user action. Once in the repair cycle, the user can undo this previous transaction under the current contract and replay the action under other contracts to find the most satisfying result. A repair cycle is illustrated in .","Referring to , the cycle begins when the user completes a transaction  with the system resulting in automatic contract-mediated adjustments . The user can undo the transaction and modify the current contract to preview the results of other contract options . The cycle ends when the user is satisfied with the current contract.","In the example sequence shown in , the current contract on the text box specifies that the text box grow horizontally to accept new text and perform zoom-anti-zoom when competing for space with other objects. In the repair cycle, the user can preview and select alternate contracts such as line wrapping instead of horizontal growth, or bumping instead of zoom-anti-zoom.","The repair cycle is invoked using conventional well known means such as a function option via the menu structure of the sensemaking application and\/or a predetermined key combination or sequence on the keyboard. When invoked the user will be presented with an interface to undo the last transaction performed. Once the transaction is \u201cundone\u201d, the contract user interface (as described with respect to ) for the visual information object initiating the transaction will be presented to the user, to enable the user to select the desired changes. Alternatively, a user may select to alter the contract(s) of a different visual information object.","Software Implementation of the Currently Preferred Embodiment","The currently preferred embodiment is implemented on a computer based system having a \u201cwindows\u201d supported Graphical User Interface (GUI), such as Windows from Microsoft Corporation of Redmond Wash., or MAC OS from Apple Computer of Cupertino, Calif. Such a GUI will typically support operations such as \u201ctap\u201d for selecting\/deselecting a graphic object or \u201cdouble tap\u201d for invoking an operation that may be associated with the graphic object being tapped on. Once an object is selected it may be dragged and dropped to a desired location in the workspace. Mechanisms for providing such user interface operations are well known in the art. Thus no further description for creating such UI operations is deemed necessary.","The currently preferred embodiment has been implemented using object oriented programming techniques of the Java programming environment in combination with a 2D graphics toolkit available from the University of Maryland known as JAZZ. The JAZZ toolkit can be used to create graphics based applications. JAZZ utilizes a \u201cscene graph\u201d model that contains the graphic object information used to render a scene. In this case, the scene being rendered is the sensemaking workspace. A scene graph is comprised of a tree structure that contains information about the objects to be rendered for display as well as \u201ccameras\u201d for providing different views. In the currently preferred embodiment, each Visual Information object and camera is represented by a node on the tree structure. As objects are moved, their position within the scene graph will correspondingly change. JAZZ provides a set of tools that may be used to build applications with a zoomable interface. This feature is exploited when implementing the various panning and zooming operations. Further information regarding JAZZ can be found on the World Wide Web at the website for the University of Maryland.","Each Visual Information Object type is defined by a class and each Visual Information Object is an instance of a class. So in the currently preferred embodiment, there is an object class defined for each of the space, list and text objects. As described above, each Visual Information Object has a distinct user interface. In the system of the currently preferred embodiment, such user interface is implemented using tools provided in the Graphics User Interface (GUI) Library known as SWING (which is available on the Java 2 platform from Sun Microsystems). Such user interface tools are part of the class definition for each Visual Information Object type.","Input from a user is responded to by an Event Handler that is also provided by JAZZ. The input could correspond to movement of the cursor control device, selection, deletion, movement or creation of a Visual Information Object.",{"@attributes":{"id":"p-0119","num":"0125"},"figref":["FIG. 43","FIG. 43"],"b":["4301","4302","4303","4302","4303","4306","4306","4306","4304","4305","4307","4305"]},"Movement of Visual Information Objects",{"@attributes":{"id":"p-0120","num":"0126"},"figref":["FIG. 44","FIG. 44"],"b":["4401","4402","4403","4404","4405","4406","4407","4405","4408"]},"The system then determines where the visual information object is positioned on the workspace and respond accordingly. In one instance it looks to see if it is positioned over a List structure, step . If it is positioned over a list structure, then a preview of the insertion is presented, step . The system then detects whether it is \u201cdropped\u201d into the list, step . If it is dropped into the List structure, then it is \u201cincorporated\u201d into the list structure, step  and any transitive bumping of other visual information objects as a result of the growth of the list occurs, step . Note that incorporation means that the visual information object dropped takes on various characteristics or attributes of the list into which it is inserted. For example, if a text box is inserted into a text list, then the scale and font of the inserted text box takes on the scale and font of the list.","As movement continues, it is detected if the visual information object is dropped into a space visual information object, step . If it is, then it is incorporated and displayed into the space visual information object, step . Note that in this instance incorporation not only includes incorporating attributes of the space, e.g. scaling, but it will also determine whether or not there is room on the area within the space visual information object and bumping of other visual information objects as described above may occur.","It is determined that the visual information object is to be dropped on an open area on the workspace, step . It is first checked to see if there is enough room in the open area to accommodate the visual information object, step . If yes, the visual information object is dropped and displayed in normal unselected mode, step . If there is not enough room, visual information objects are bumped to make space, step . The visual information object is then displayed in original mode per step . If the visual information object is not dropped, then the system continues detecting for user action per the steps starting at step .","Computer Controlled Display System","The computer controlled display system as may be utilized in the present invention is embodied in the computer based system illustrated with reference to . Referring to , the computer based system is comprised of a plurality of components coupled via a bus . While there may in some embodiments be multiple instances of the same type of component, only a single instance of each type is described herein. The bus  illustrated here is simplified in order not to obscure the present invention. The bus  may consist of a plurality of parallel buses (e.g. address, data and status buses) as well as a hierarchy of buses (e.g. a processor bus, a local bus and an I\/O bus). In any event, the computer system is further comprised of a processor  for executing instructions provided via bus  from Internal memory  (note that the Internal memory  is typically a combination of Random Access or Read Only Memories). When in operation, program instructions for carrying out the various functional components of the present invention are stored in internal memory . The processor  and Internal memory  may be discrete components or a single integrated device. The processor  and internal memory  comprise circuitry for performing the various processing functions described herein. Also coupled to the bus  is external storage . The external storage  is typically a high capacity storage media such as magnetic or optical disk storage.","Also coupled to the bus  is a display  and a pointing device . The pointing device  may be a stylus, mouse, track-ball or other cursor control device. The network connection  provides means for attaching to a network, e.g. a Local Area Network (LAN) card or modem card with appropriate software. Such access may be to the Internet or to local Intranets or both. Besides communication access, the network connection  may be used to access various resources (i.e. servers) such as shared computing, storage or printing resources.","Moreover, the computer controlled display upon which the computer controlled system may be implemented includes the various forms of interactive systems such as electronic whiteboards, laptop or workstation computers, Personal Digital Assistants, Notebook computers, mainframe systems, client-server systems and the like. Further, the system may be \u201cdedicated\u201d to the sensemaking activity or could be part of a general purpose computer based system.","Finally, it should be noted that the invention has been described in relation to software implementations, but the invention may be implemented with specialized hardware built to operate in a systems architecture as described above.","Although the invention has been described in relation to various implementations, together with modifications, variations, and extensions thereof, other implementations, modifications, variations, and extensions are within the scope of the invention. The invention is therefore not limited by the description contained herein or by the drawings, but only by the claims."],"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED CASES","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 15\u201316"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 17\u201319"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 20","FIGS. 17\u201319"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 21\u201323"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 24\u201325"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIGS. 26\u201329"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 30\u201332"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 33\u201336"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 37\u201338"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIGS. 39\u201340"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 45"}]},"DETDESC":[{},{}]}
