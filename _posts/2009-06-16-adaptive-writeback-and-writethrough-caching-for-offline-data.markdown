---
title: Adaptive write-back and write-through caching for off-line data
abstract: Techniques for facilitating communication between an application and a server are provided. An intermediary sits between an application and a server. The intermediary intercepts and responds to communications on behalf of the intended recipient of the communication. In one technique, the intermediary relays a request to the server and receives a response from the server. The intermediary updates a local store with data that is implied by the protocol to which the request conforms and determined based on the request. In another technique, the intermediary intercepts a request to access data on the server. The intermediary determines, based on characteristics of a computing device, that the request should be responded to using data that is available in a local store. The intermediary responds to the request using that data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08868707&OS=08868707&RS=08868707
owner: Oracle International Corporation
number: 08868707
owner_city: Redwood Shores
owner_country: US
publication_date: 20090616
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION","1.0 General Overview","2.0 Structural and Functional Overview","2.1 Structural Overview","2.2 Functional Overview","3.0 Managing Data","3.1 Accessing, Creating, and Modifying Data","3.2 Interposition","3.3 Local Storage of Data","3.4 Write-Through Caching of Data","3.5 Write-Back Caching of Data","3.6 Bi-Directional Synchronization","3.7 Example Embodiment","3.8 Protocols","3.9 Security Considerations","4.0 Hardware Overview"],"p":["The present invention relates generally to management and delivery of data and, more specifically, to techniques for managing off-line data.","Many mobile computing applications rely on data that resides on a machine that is remote to the device on which the application runs. Although an application may be robust, lack of network connectivity or access to a required server may cause the application to behave unpredictably or provide incorrect information. For example, a calendar application running on a smart-phone may display an error when it is unable to access the server on which the calendar information resides.","Lack of network availability or server connectivity may occur because of a variety of factors. For example, servers are often not configured for high-availability. Further, networks may not reach many locations, and are therefore not ubiquitous. This lack of connectivity disappoints users that rely on instantaneous information. Mobile networks are particularly problematic in this way, due to limited coverage in areas that may seem random to the ordinary user.","To ensure predictable behavior in mobile computing applications, many applications allow for off-line data storage. There are several methods of providing off-line storage: 1) Data is stored locally, and backed up on the server; 2) A local cache and a server store are used, each relying on distinct data models and access methods; and 3) A local cache and a server store are used, each relying on the same data model but using distinct access methods.","Where data is stored locally, and backed up on the server, as in the first method, a database, application server, and application client may be installed on a client device. Data in the database and any other application data need to be synchronized with the remote system. The synchronization techniques used are application specific.","In the second method, the local database is often better suited to local processing, and stores a transformation of the online data. Due to the application-specific transformation of data, applications sharing data must conform to the transformation. Further, in this model, applications employ a data switch between on-line and off-line operation, explicitly accessing the local database when off-line. This method in effect creates two separate applications that are accessible via the same user interface.","In the third method, the data model remains the same among the application and the server, but the access methods differ. Applications use HTTP requests and responses when working on-line, and store the responses in a local database. This storage is used for off-line operation. Applications must still employ a data switch, but data is not transformed. Using the locally stored data, however, results in additional processing not required for on-line operation.","The approaches described in this section are approaches that could be pursued, but not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated, it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Embodiments are described herein according to the following outline:\n\n","In one embodiment, an intermediary lies between a client program and a server. The intermediary intercepts a request from an application running on a computing device. The request, which conforms to a protocol, is a request to store data at a location remote to the device and the intermediary. Without storing the data at the server, the intermediary responds to the request. The response conforms to the protocol, and specifies to the application that the request to store data has been honored. The intermediary intercepts another request from the application, which also conforms to the protocol. This time, the request is a request to access at least a portion of the data at the server. The intermediary responds to the request by returning at least a portion of the data, without accessing the server.","In another embodiment, the intermediary subsequently causes the data to be stored at the server.","In an embodiment, the intermediary intercepts another request to access at least a portion of the data at the server. The intermediary accesses the data and stores the data at a location local to the intermediary. In one embodiment, the data is stored as a bitstream.","In an embodiment, upon intercepting a request to retrieve data from a server, the intermediary determines that the server is unreachable. The intermediary responds to the request by providing stored data.",{"@attributes":{"id":"p-0020","num":"0034"},"figref":"FIG. 1","b":["110","112","114","114","120","120","120","180","170","120","130"]},"Intermediary  is coupled to control panel  and storage . Intermediary  may be a browser plug-in, and be embedded in the same process as client program .","Control panel  may be used to configure intermediary  or other elements in the system for which the control panel has been given authorization to configure. Synchronization manager (Sync manager)  is coupled to Network . Sync manager  manages the synchronization of data between storage  and server . Sync manager  may be a browser plugin and may be embedded into the same process as client program .","Although  provides a specific architecture, this architecture is flexible, and represents only one embodiment. Certain elements of  may be combined, connected in a different way, or even separated further. For example, intermediary and sync manager  may be combined. Further, intermediary  may be combined with client program . Other elements, such as Network  may be discarded altogether in favor of a private network connecting client program  directly to server . Finally, server  may be a local server or a server running on the same computing device as client program .","Application client  is an application that may request remote data. For example, application client  may represent a to-do list application, calendar application, or expense report application for a mobile device such as a smart-phone, personal digital assistant, or laptop. In an embodiment, application client may run on a computing device that is not a mobile device.","Server  may be a computing device running server software or other proprietary software capable of honoring requests from an application client. Server  is capable of storing data either locally or remotely. For example, server  may be coupled to a database management system (DBMS) such as a DBMS offered by Oracle Corporation. Server  may use a DBMS as a repository for application data such as the data required by application client .","Application client  interacts with server  through a user agent such as client program . Client program  may be a web browser capable of communicating with server  using standard protocols such as Hypertext Transfer Protocol (HTTP).","Intermediary  is a protocol-aware interposition agent capable of intercepting and responding to communications between an application such as application client  and a server such as server . Furthermore, intermediary  may interact with multiple applications and servers. Intermediary  may be configured, via control panel , to intercept and respond only to communications that are associated with particular applications. For example, a mobile device may have five applications, but intermediary  may be configured to intercept communications associated with two of the applications, and not the other three.","Intermediary  may use storage  to store intercepted application requests and data from server . Sync manager  may be configured to periodically synchronize data residing in storage  with data managed by server . Alternatively, sync manager  may synchronize data at hard-coded intervals, upon the detection of particular events, or upon manual intervention.","Web data may be accessed and manipulated through the use of a variety of protocols and methods. Hypertext Transfer Protocol (HTTP), Secure Hypertext Transfer Protocol (S-HTTP), File Transfer Protocol (FTP), Internet Message Access Protocol (IMAP) are some examples of application layer protocols that may be used to manipulate remote data. Many data access and management protocols work in conjunction with other protocols, such as HTTP. Atom is one such protocol.","Atom is a term used to refer to Atom-based protocols. The Atom Syndication Format is an XML based protocol that defines the way that web feeds are presented. The Atom Publishing Protocol is an HTTP-based protocol that defines the requirements for updating, creating, and modifying web-based resources. Atom allows users to view, edit, and add content to a particular grouping of data, or container object comprising contained objects, called a \u201cfeed.\u201d Many protocols offer such feeds. An example of an Atom feed can be seen below:",{"@attributes":{"id":"p-0031","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<?xml version=\u201c1.0\u201d encoding=\u201cutf-8\u201d?>"]},{"entry":[{},"<feed xmlns=\u201chttp:\/\/www.w3.org\/2005\/Atom\u201d>"]},{"entry":[{},"\u2003<title>Example Feed<\/title>"]},{"entry":[{},"\u2003<link href=\u201chttp:\/\/example.org\/\u201d\/>"]},{"entry":[{},"\u2003<updated>2003-12-13T18:30:02Z<\/updated>"]},{"entry":[{},"\u2003<author>"]},{"entry":[{},"\u2003\u2003<name>John Doe<\/name>"]},{"entry":[{},"\u2003<\/author>"]},{"entry":[{},"\u2003<id>urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6<\/id>"]},{"entry":[{},"\u2003<entry>"]},{"entry":[{},"\u2003\u2003<title>Atom-Powered Robots Run Amok<\/title>"]},{"entry":[{},"\u2003\u2003<link href=\u201chttp:\/\/example.org\/2003\/12\/13\/atom03\u201d\/>"]},{"entry":[{},"\u2003\u2003<id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a<\/id>"]},{"entry":[{},"\u2003\u2003<updated>2003-12-13T18:30:02Z<\/updated>"]},{"entry":[{},"\u2003\u2003<summary>Some text.<\/summary>"]},{"entry":[{},"\u2003<\/entry>"]},{"entry":[{},"<\/feed>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Atom feeds represent collections of data and metadata. A feed may contain multiple entries, also known as entry documents. An Atom feed has a unique Uniform Resource Locator (URL). Accessing and manipulating data on a server that supports Atom Publishing Protocol is done via the URL for that feed. Operations such as GET, POST, PUT, and DELETE are performed on URLs. Each group of data and each entry in the grouping correspond to a URL. For example, adding an entry to a group of data results in the creation of a new URL. This may be done via a POST request on the feed URL. Removing an entry may be done by sending an HTTP DELETE request to the appropriate edit URL.","Individual entries may also be edited, added, and modified. To edit an entry, an editable representation of the entry may be requested by URL. Once modifications are made, a simple PUT request may be issued to the entries Edit URL to save the modified entry.","Atom is not limited to the use and distribution of text-based data. Audio recordings, photographs, and other documents may be added to an Atom feed. A wide variety of media objects may be uploaded and managed using Atom. To upload a media file, a POST request is sent to the collection URL, but instead of including an Atom Entry Document, a representation of the media resource is included.","Atom and other protocols provide formats for data publishing and retrieval. Rather than creating content management formats, application developers may configure an application to recognize a particular format, defined by a protocol.","Although protocols such as Atom may be used to create and deliver content, it is also possible for the creation of an entry in a feed to trigger an event. For example, an expense report application on a mobile device may allow the user to add an entry to an expense report residing on a remote server. The remote server, detecting an entry to the expense report, may react to the addition by sending a notification to a person designated as the approver of expenses.","In addition to event triggering, many protocols such as Atom exhibit side effects that are implied by the protocol. These protocol side effects are referred to herein as \u201cobservable side effects\u201d because these side effects of a request are implied by the protocol used, and may be assumed based on protocol-specific information in the response. The observable side effects of a first request using the protocol may make changes to state or data that may be viewed or accessed by a client in a subsequent request. For example, a client may send a request to a server, asking for X to be changed. However, in the process of changing X, according to the protocol, Y must be changed. An observer would become aware of Y when the response is sent. A subsequent request for Y will result in the delivery of the altered version of Y. In Atom, a request may be made, requesting that a server change an entry in a feed. Necessarily, the feed is also changed. When the response is sent, confirming the change, an observer of the response will become aware of the feed having changed on the server.","While Atom may be used to provide examples of embodiments of the invention, the invention is not limited to a particular protocol. Section 3.5 further discusses the use of various protocols in embodiments of the invention.","An application client  may send a request, often using a client program  such as a web browser, to a server . A request may be in any format or conform to any protocol that the application client  and server  are capable of understanding. For example, a request to view or add an entry to a task list may conform to the Atom protocol.","The application client  may, however, reside on a mobile computing device such as a smart-phone, personal digital assistant (PDA) or laptop computer. If the mobile computing device experiences intermittent connectivity, the application client  may exhibit undesirable behavior. For example, the application client  may display only partial data, outdated data, no data at all, or even an error message.","An intermediary , acting as an interposition agent, may intercept and respond to requests from the application client  to the server . By interposing between the application client  and the server , the intermediary  can take control of the communications in a way that may optionally be transparent to the application client .","Intermediary  may optionally operate as a plug-in to the client program . In one embodiment, intermediary  may be automatically downloaded from a network upon the detection of an event or request associated with intermediary . Optionally, intermediary  may operate as a software module, a library or as a layer of software. In one embodiment, intermediary  may be embedded into the application client  or another program, and may run in the same process as the program in which intermediary  is embedded. In another embodiment, intermediary  may be executed upon the detection of a triggering event. For example, a request may be made to a program that has registered intermediary  as the handler of the particular type of request. Upon receiving the request, the program may cause intermediary  to execute.","Intermediary  may be configured to support protocols that are used to access and manipulate web data. For example, intermediary  may be configured to support Atom, Really Simple Syndication (RSS), or any other protocol. If all requests between an application client  and server  conform to a protocol supported by the intermediary , then the intermediary  may respond to an intercepted request in a manner that conforms to the protocol used by the application client .","Control panel  may be used to configure intermediary . For example, intermediary  may be configured to intercept requests and replies for a variety of applications residing on the computing system. Configuration may also take place automatically, through installation routines performed during the installation of an application on the computing system.","Control panel  may also be used to monitor synchronization status. For example, if a synchronization operation results in an error, control panel  may report these errors. Control panel  may take the form of a web page or other application program, and may reside locally or at a server.","Intermediary  may be configured to handle all requests from one or more applications. If intermediary  is configured to respond to an application in a manner conforming to a protocol, that application may assume that network connectivity exists at all times. This is because the application can expect a response from the intermediary if there is no connectivity. If there is connectivity, the application can expect a response from the server. For example, an application developer may write an application in such a way that the application expects constant connectivity to a particular server. The intermediary  may be configured to manage all communications between the application and the server. Thus, the application developer need not program a contingency into the application, such as a separate database and file structure to store offline data. Without the intermediary , the application would need to take into consideration the intermittent nature of the network connection by detecting the network status and providing data to the application from either the network or an offline data store.","The intermediary  may be configured to respond only to requests that occur when network connectivity is unavailable. Alternatively, the intermediary may be configured to respond to particular requests by applications for which the intermediary has been configured, or all requests.","Intermediary , sync manager , or any other associated component may be configured to perform actions described herein based on built-in or configurable policies. Policies may be related to time, power consumption, communication privacy, network usage cost, network availability, conflicts caused by server contention, or user expressed preferences. Other configurable policies may also be implemented. For example, a policy may be based on the time of day, or a specified time interval, or schedule. Other policies may be device related, such as those related to power consumption and processing power.","In an embodiment, application client  may send a request addressed to server . The request conforms to a protocol. For example, the request may conform to the Atom protocol, and the expected response may be to provide a listing of news stories in the Atom feed format. The intermediary  may intercept this request, formulate a response, and respond to the application client  with the expected data. The response may include any number of indicators. For example, the response may include data freshness information, alerting the application to the age of the data provided. Another indicator may disclose to the application program  that the response is from an intermediary, and not from server .","An application client  may make any type of request conforming to a protocol supported by the intermediary . Intermediary  may intercept and respond to all of these requests.","Application client  may make a request to store or publish data on server . If the request is made using a protocol known to the intermediary , then the intermediary  may respond to the request. In this case, intermediary  may intercept the request to store information on server  and respond to the application on behalf of server , informing application client  that the request to store data was successful. Intermediary  may respond according to the protocol, indicating success, even if the data has not actually been stored on server  and the request has in fact not been successful.","In some cases, intermediary  may not be configured to recognize a particular protocol. In such circumstances, intermediary  may ignore the request. Alternatively, intermediary  may intercept the request that does not conform to a configured protocol, and then forward the request to server  for processing.","In another embodiment, intermediary  may be configured to recognize a subset of methods available to a particular protocol. For example, some protocol methods may require more processing than is appropriate for the intermediary . Optionally, intermediary  may be configured to recognize all methods available to a protocol, but policies may cause a particular method to be ignored. For example, certain methods may be ignored when battery power is low.","Intermediary  may respond in any way that conforms to the protocol being used. For example, intermediary may have access to data that is not even on server . Furthermore, server  may be unavailable. In such a case, intermediary may respond to a request for data by providing data to the requesting application client , even if the data provided is not stored on the server  from which the data was requested. Intermediary  may inform the application client regarding the source, circumstances, and context of the data being delivered, or may be configured to \u201ctrick\u201d the application into determining that the data actually came from the server, making the intermediary transparent to the application client .","Data may be stored locally in storage . Storage  may be in the form of volatile or non-volatile memory, and may be accessible by intermediary . Storage may be compressed, encrypted, or otherwise modified to meet design, architecture, security, or performance goals. Alternatively, all or a portion of storage  may reside at a remote location that is different from server . However, local storage of data allows data to be available to applications even when a network connection is unavailable.","For example, storage  may contain a copy of a particular Atom feed that originated from server . Application client  may request the particular Atom feed using the URL for the feed. Intermediary  may intercept this request, and Intermediary  may respond to the request with the copy of the particular Atom feed from storage . Thus, the application client  may make a request from server , but will receive the feed that is stored locally in storage . Although this may be particularly useful when a network connection is unavailable, this condition is not required, and other benefits may be realized even when network connectivity is available.","As an optimization, data stored locally may be stored in a bitstream. A bitstream represents the data in a form consistent with the form the data would conform to when the data is sent over a network. Storing data in a bitstream eliminates the need for data transformation, reducing overhead, and allowing applications to receive data in one expected format. Thus, when intermediary  honors a request for data using data in storage , intermediary  sends the data to the requesting application in the form of a bitstream. Therefore, an application that is programmed to accept only network data need not be altered to accept other formats. This is because the bitstream is delivered to the application in the same format in which it was stored in storage .","Local storage  may also store publishing data that has not yet been stored on the server. For example, application client  may request to publish an entry to an Atom data feed on server . If server  is unavailable, intermediary  may intercept the request to store data and cause the data to be stored locally. The intermediary , which has been configured to conform to at least the Atom protocol, may then respond to the application client , indicating that the storage operation was successful. This implies to the application client  that the data has been stored on server , even though the data has not been stored on server , but has only been stored in local storage . Subsequently, application client  may make a request for the very data that was meant to be stored on server . Application client , informed that the data has been stored on server , properly makes a request to server  for the data. However, in the case where network connectivity has yet to be restored, the requested data may still only exist in local storage . Intermediary  intercepts the request and returns the requested data from local storage .","Finally, each element in an Atom feed may have a corresponding URL, so a request made to the URL for an element in a feed is capable of being honored by the intermediary if the feed has been stored locally, even if this is the first request for the particular URL. This functionality may be credited to the intermediary's understanding of a particular protocol. For example, if the intermediary knows the URL structure of an Atom feed, it may allow direct access to any element in the feed without requiring a request for the entire feed.","In an embodiment, intermediary  performs advanced protocol enabled write-through caching of web data. Write-through means that the intermediary  relays the request to the server in real-time. The intermediary  can process the responses received from the server as well as other observable side effects of the protocol. This method differs from traditional caching techniques because the intermediary  is protocol aware. Intermediary  is capable of performing protocol-specific operations on data received from a server or other sending entity.","For example, intermediary  may issue a request to server  on behalf of client . The request may be a request to change the data value associated with a particular resource. However, as a side-effect of changing this value, the value of a second resource may be changed. Intermediary  receives a response from server , which, by implication, makes intermediary  aware of the second resource. Because intermediary  understands the protocol being used, intermediary  will understand the nature of the side-effect and take appropriate actions such as requesting the second resource from server .","In an embodiment, write-back caching of data is performed. A request originating from an application is intercepted and processed locally by intermediary . The intermediary is capable of handling interception management and processing. Optionally, the functions of the intermediary may be performed by separate logical entities. For example, the intermediary may perform interception management while a local server performs protocol specific interception processing.","In an embodiment, local processing is performed using data in local store . The resulting data is then stored in the local store . Resulting data, for example, may represent data that previously existed in the local store , and that has been altered, updated, or otherwise affected by local processing. In an embodiment, local processing may result in the removal of data. In such a case, the data removal may be reflected in the local store . Optionally, a backup may be made of altered or deleted data.","The original request is stored so that it may be processed later by server . The intermediary  or other logic associated with intermediary  responds to the application that issued the request using the result of local processing. In an embodiment, the request is subsequently sent to server  for processing.","In an embodiment, the application receives the result of the local processing as a response. In another embodiment, the application additionally receives the result of the server processing as a response.","If inconsistencies exist between the local data after local processing and the server data after server processing, the intermediary  may resolve the inconsistency. The inconsistency resolution process may be configured based on any policy-related criteria, rules, or application-specific decision making process.","For example, an address book may be updated locally to reflect a new phone number for a particular contact that exists in a feed. Meanwhile, the phone number may be updated on the server. When the request to update the phone number is sent to the server, the server may respond with a message indicating a conflict in data. The intermediary  may, based on configured rules or policy criteria, instruct the server to accept the local phone number. In another embodiment, the intermediary  may instruct the server  to keep the server data and discard the local changes. In this case, the intermediary may also store the server data locally.","Requests by the application to store data may be stored and synchronized at a later time. For example, application  may request to publish an entry to an Atom data feed on server . If the network connection between client program  and server  is unavailable, intermediary  may intercept and store the request. Although intermediary  will store the entry locally in storage , server  will not be updated with the entry until network connectivity is restored. Once network connectivity is restored, sync manager  may forward the request to server  for processing.","Bi-directional synchronization support may be enabled. Sync manager  performs synchronization operations. Since data from the server may be stored locally and data meant to be published to the server may be stored locally, it is prudent to ensure continuity between the local storage  and the data managed by the server  for the application.","Atom feeds in particular are designed for archiving, and provide permanent identifiers for each piece of information in a feed. This makes it possible to correlate copies of the same data. Atom feeds also contain timestamps, further simplifying the data synchronization process.","Local data in local storage  may be updated every time a request is honored by server . For example, in the presence of network connectivity, application client  may make a request to server  for feed information. Since network connectivity is available, the intermediary, in an embodiment, may not manage the request but may transparently intercept the reply from server . After intercepting the reply, a copy of the bitstream may be stored in local storage .","Alternatively, sync manager  may be configured via control panel  to periodically synchronize data for particular applications. In such an embodiment, data in local storage  may be synchronized with data managed by server , even if no request is made by application client . This ensures that in a case where network connectivity is unavailable, the application will have access to the most up-to-date data possible.","Multiple applications using a variety of protocols may concomitantly rely on the intermediary  and sync manager . Due to the ability of the intermediary  and sync manager  to support protocols, synchronization operations are application independent. This enables application developers to reduce the overall footprint of applications on a device.","Any number of requests may be stored locally at a given time. For example, several applications which are unrelated to each other may make requests which are intercepted and stored by the intermediary . Using control panel , sync manager may be configured to automatically synchronize data related to all applications when network connectivity is established. Alternatively, Sync manager  may be configured to synchronize applications according to preferences unique to each particular application. For example, a first application may be configured to synchronize only upon user direction, while a second application may be configured to synchronize every 10 minutes. A third application may be configured to synchronize every time connectivity is established and a request is pending.",{"@attributes":{"id":"p-0075","num":"0089"},"figref":"FIG. 2","b":["205","110","180","210","130","215","220","255"]},"At step , the intermediary  relays the request to the server . At step , the server  performs the remove, update, or store operation. At step , the server  sends a response to the intermediary  in a manner conforming to the particular protocol. At step , the intermediary updates the local store  with data from the response, and the intermediary updates the local store  with observable side effects implied by the particular protocol. At step , the intermediary  provides the server  response to the application . At step , the application  requests retrieved data associated with observable side effects implied by the protocol. At step , the intermediary  satisfies the request with data from the local store .","At step , the Intermediary stores the request along with the order in which the request was received. At step , the intermediary locally processes the request according to the protocol. At step , the intermediary updates the local store  with the result of local processing. At step , without contacting the server  the intermediary  responds to the request, in a manner conforming to the protocol, with data from the local store , and specifies that the request has been honored. At step , the intermediary  detects network connectivity. At step , the synchronization manager  sends the stored request to the server . At step , the server  sends a response to the synchronization manager . At step , the synchronization manager  updates the local store  with data from the response, and updates the local store  with protocol specific observable side effects. At step , the synchronization manager  removes the stored request from the local store .","A protocol defines rules for syntax (including data formats), data types, semantics, interface functions and\/or behavior. For example, a protocol may define the way a message must be formatted in order to be understood by another entity that recognizes the rules of the protocol, and how the other entity behaves in response to a message.","There are two larger categories of protocols: simple protocols and complex protocols. Simple protocols and complex protocols may each be used in an embodiment.","A simple protocol is a protocol that is capable of getting and setting information, but does not have involve side effects or have the ability to create or remove locations. For example, a simple protocol may allow access to and updating of a memory location. However, a simple protocol will not facilitate allocation of additional memory space. Furthermore, simple protocols do not allow for observable side effects, such as the updating of a second value, in addition to a first value, in response to a request to update only a first value. In an embodiment, one or more simple protocols are used.","Complex protocols, on the other hand, allow the creation and elimination of locations. For example, Atom Publishing Protocol allows for the creation of web-based resources, such as elements of a feed.","Protocols may be those promulgated by recognized standards bodies such as the World Wide Web Consortium (W3C) or the Internet Engineering Task Force (IETF). Examples of such protocols that are supported include Hypertext Transfer Protocol (HTTP) and extensions of HTTP, Lightweight Directory Access Protocol (LDAP), Atom Publishing Protocol, and Hypertext Markup Language (HTML) 5 Offline Application Cache Protocol. Protocols may also be proprietary protocols, such as Hierarchy Extensions to Atom Feeds. (http:\/\/www.oracle.com\/technology\/tech\/feeds\/spec\/draft-divilly-atompub-hierarchy-00.txt) The intermediary , control panel , and sync manager  may natively support many useful protocols. Other protocols may be added as necessary.","Representational State Transfer (REST) based protocols are particularly well-suited for integration with embodiments, as these protocols use URLs to locate and manage data. Although most REST based protocols such as Atom are capable of a large variety of operations, the four basic operations are as follows:",{"@attributes":{"id":"p-0084","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["HTTP Method","Action","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["POST","CREATE","Create a new resource"]},{"entry":["GET","RETREIVE","Retrieve a representation of a resource"]},{"entry":["PUT","UPDATE","Update a resource"]},{"entry":["DELETE","DELETE","Delete a resource"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Although the use of the Atom protocol has been discussed for consistency and clarity, a person skilled in the art will recognize that any number of protocols may be used. Intermediary  may be configured to recognize any useful protocol, including custom protocols. A custom protocol may even be created by an application developer. Intermediary  is capable of supporting non-standard operations implemented by custom protocols or other protocols that expand on standard operations, and is therefore not limited to using only POST, GET, PUT, and DELETE.","Intermediary , when configured with a particular protocol, is capable of emulating any entity that uses that protocol. For example, an intermediary configured with the Atom protocol is capable of recognizing a request for an Atom data feed or an entry within the feed. It is the ability to recognize protocol specific information that allows the intermediary  to respond to requests in place of the server . This is because the intermediary predicts and formulates the response that a server would provide to the requester, given a particular request.","Intermediary  is also capable of making requests to a server  on behalf of an application . These requests may be requests by the application that are stored due to lack of network connectivity, or they may be requests formulated by the intermediary . For example, intermediary  may be configured to request a particular feed on a periodic basis. Application client  may be unaware of this configuration, and intermediary  may request data from server  several times without a request being made by the application client . Although the application may be unaware of the periodic updates, the user benefits from such updates in a case where network connectivity fails. If synchronization has been occurring periodically, when the application makes a request for data, the data may be more up-to-date than it would have been if the sync manager  were configured to only synchronize upon request by the application, and periodic synchronization had not occurred.","In an embodiment, a request may require authentication to be honored. For example, a request by an application to publish data at a server may require authentication with that server. In such a case, the intermediary will not facilitate the first communication between the application and the server. The communication will be intercepted, along with any session, authentication, and other protocol specific information required to facilitate authenticated connectivity. The intermediary  may then perform as an interposition agent, but will attach authentication specific information along with subsequent communications.","The intermediary  may use session specific identifiers issued by a server for authentication purposes. This allows the intermediary  to determine whether the same authentication information is being used for a particular request as was used in a previous request. If new authentication information is used, it is possible that a particular session has been terminated.","A server issuing session specific identifiers may invalidate the identifiers when a session is terminated. The intermediary  will destroy locally persistent data related to the session and residing in the data store upon invalidation of the session specific identifiers.","Using session identifiers, rather than credentials provided by the user, such as a username and password information, has additional security advantages. Session identifiers are only useful for the particular session. Thus, they are less valuable for purposes other than the intended use, making session identifiers less of a target for theft.","Since the intermediary  is protocol aware, it will detect when an authenticated session has been terminated. In this case, the session information will no longer be used, and additional session identifiers may be used in future sessions.","According to one embodiment, the techniques described herein are implemented by one or more special-purpose computing devices. The special-purpose computing devices may be hard-wired to perform the techniques, or may include digital electronic devices such as one or more application-specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs) that are persistently programmed to perform the techniques, or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware, memory, other storage, or a combination. Such special-purpose computing devices may also combine custom hard-wired logic, ASICs, or FPGAs with custom programming to accomplish the techniques. The special-purpose computing devices may be desktop computer systems, portable computer systems, handheld devices, networking devices or any other device that incorporates hard-wired and\/or program logic to implement the techniques.","For example,  is a block diagram that illustrates a computer system  upon which an embodiment of the invention may be implemented. Computer system  includes a bus  or other communication mechanism for communicating information, and a hardware processor  coupled with bus  for processing information. Hardware processor  may be, for example, a general purpose microprocessor.","Computer system  also includes a main memory , such as a random access memory (RAM) or other dynamic storage device, coupled to bus  for storing information and instructions to be executed by processor . Main memory  also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions, when stored in storage media accessible to processor , render computer system  into a special-purpose machine that is customized to perform the operations specified in the instructions.","Computer system  further includes a read only memory (ROM)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to bus  for storing information and instructions.","Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","Computer system  may implement the techniques described herein using customized hard-wired logic, one or more ASICs or FPGAs, firmware and\/or program logic which in combination with the computer system causes or programs computer system  to be a special-purpose machine. According to one embodiment, the techniques herein are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another storage medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions.","The term \u201cstorage media\u201d as used herein refers to any media that store data and\/or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non-volatile media and\/or volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Common forms of storage media include, for example, a floppy disk, a flexible disk, hard disk, solid state drive, magnetic tape, or any other magnetic data storage medium, a CD-ROM, any other optical data storage medium, any physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, NVRAM, any other memory chip or cartridge.","Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example, transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card, cable modem, satellite modem, or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are example forms of transmission media.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution.","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus, the sole and exclusive indicator of what is the invention, and is intended by the applicants to be the invention, is the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
