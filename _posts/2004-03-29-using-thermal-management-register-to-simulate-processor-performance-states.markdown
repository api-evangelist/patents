---
title: Using thermal management register to simulate processor performance states
abstract: Systems, methodologies, media, and other embodiments associated with simulating a processor performance state by controlling a thermal management signal are described. One exemplary system embodiment includes a data structure for storing bit patterns that facilitate controlling a GPIO (General Purpose Input Output) block and addresses of locations to which the bit patterns can be written. The example system may also include a logic configured to receive a request to produce a performance state in a processor and to cause a frequency and voltage to be established in the processor in response to a thermal management signal being generated in response to writing the bit pattern(s) to the address(es).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07430502&OS=07430502&RS=07430502
owner: Hewlett-Packard Development Company, L.P.
number: 07430502
owner_city: Houston
owner_country: US
publication_date: 20040329
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Microprocessors produce heat when operating. The amount of heat is directly proportional to the operating frequency and voltage employed by the microprocessor. Thus, some systems attempt to manage heat production by selectively controlling processor frequency and voltage. The Advanced Configuration and Power Interface (ACPI) standard was produced in part to address challenges associated with thermal management and to facilitate controlling processor frequency and voltage via processor performance states. The ACPI specification facilitates standardizing how an operating system can monitor system usage and\/or temperature and then react to various conditions by changing a processor performance state. These processor performance states have typically been available in laptop systems and not in desktop systems.","A processor performance state may specify a frequency and voltage at which a processor is to operate. To facilitate implementing a processor performance state, a processor may include an internal machine specific register (MSR) that can be programmed to control the frequency and voltage associated with a processor performance state. Additionally, a microprocessor may include hardware specifically allocated for an emergency response to an overheated condition. For example, an Intel\u00ae Pentium\u00ae 4 processor includes a thermal management register (TM2) that can be employed to facilitate controlling temperature. Conventionally, the TM2 register is accessed in response to a processor overheated (PROCHOT) signal being asserted on a line (e.g., PROCHOT line) available to the processor. The PROCHOT signal is typically generated by a thermal management circuit in response to detecting a thermal condition (e.g., overheated). For example, Prior Art  illustrates an example circuit that can be employed to trigger the PROCHOT signal when a processor is overheating.","The following includes definitions of selected terms employed herein. The definitions include various examples and\/or forms of components that fall within the scope of a term and that may be used for implementation. The examples are not intended to be limiting. Both singular and plural forms of terms may be within the definitions.","\u201cComputer communication\u201d, as used herein, refers to a communication between two or more computing devices (e.g., computer, personal digital assistant, cellular telephone) and can be, for example, a network transfer, a file transfer, an applet transfer, an email, a hypertext transfer protocol (HTTP) transfer, and so on. A computer communication can occur across, for example, a wireless system (e.g., IEEE 802.11), an Ethernet system (e.g., IEEE 802.3), a token ring system (e.g., IEEE 802.5), a local area network (LAN), a wide area network (WAN), a point-to-point system, a circuit switching system, a packet switching system, and so on.","\u201cComputer-readable medium\u201d, as used herein, refers to a medium that participates in directly or indirectly providing signals, instructions and\/or data. A computer-readable medium may take forms, including, but not limited to, non-volatile media and volatile media. Non-volatile media may include, for example, optical or magnetic disks and so on. Volatile media may include, for example, optical or magnetic disks, dynamic memory and the like. Common forms of a computer-readable medium include, but are not limited to, a floppy disk, a flexible disk, a hard disk, a magnetic tape, other magnetic medium, a CD-ROM, other optical medium, punch cards, paper tape, other physical medium with patterns of holes, a RAM, a ROM, an EPROM, a FLASH-EPROM, or other memory chip or card, a memory stick, and other media from which a computer, a processor or oilier electronic device can read.","\u201cData store\u201d, as used herein, refers to a physical and\/or logical entity that can store data. A data store may be, for example, a database, a table, a file, a list, a queue, a heap, a memory, a register, and so on. A data store may reside in one logical and\/or physical entity and\/or may be distributed between two or more logical and\/or physical entities.","\u201cLogic\u201d, as used herein, includes but is not limited to hardware, firmware, software and\/or combinations of each to perform a function(s) or an action(s), and\/or to cause a function or action from another logic, method, and\/or system. For example, based on a desired application or needs, logic may include a software controlled microprocessor, discrete logic like an application specific integrated circuit (ASIC), a programmed logic device, a memory device containing instructions, or the like. Logic may include one or more gates, combinations of gates, or other circuit components. Logic may also be fully embodied as software. Where multiple logical logics are described, it may be possible to incorporate the multiple logical logics into one physical logic. Similarly, where a single logical logic is described, it may be possible to distribute that single logical logic between multiple physical logics.","An \u201coperable connection\u201d, or a connection by which entities are \u201coperably connected\u201d, is one in which signals, physical communications, and\/or logical communications may be sent and\/or received. Typically, an operable connection includes a physical interface, an electrical interface, and\/or a data interface, but it is to be noted that an operable connection may include differing combinations of these or other types of connections sufficient to allow operable control. For example, two entities can be operably connected by being able to communicate signals to each other directly or through one or more intermediate entities like a processor, operating system, a logic, software, or other entity. Logical and\/or physical communication channels can be used to create an operable connection.","\u201cSignal\u201d, as used herein, includes but is not limited to one or more electrical or optical signals, analog or digital signals, data, one or more computer or processor instructions, messages, a bit or bit stream, or other means that can be received, transmitted and\/or detected.","\u201cSoftware\u201d, as used herein, includes but is not limited to, one or more computer or processor instructions that can be read, interpreted, compiled, and\/or executed and that cause a computer, processor, or other electronic device to perform functions, actions and\/or behave in a desired manner. The instructions may be embodied in various forms like routines, algorithms, modules, methods, threads, and\/or programs including separate applications or code from dynamically linked libraries. Software may also be implemented in a variety of executable and\/or loadable forms including, but not limited to, a stand-alone program, a function call (local and\/or remote), a servelet, an applet, instructions stored in a memory, part of an operating system or other types of executable instructions. It will be appreciated by one of ordinary skill in the art that the form of software may be dependent on, for example, requirements of a desired application, the environment in which it runs, and\/or the desires of a designer\/programmer or the like. It will also be appreciated that computer-readable and\/or executable instructions can be located in one logic and\/or distributed between two or more communicating, co-operating, and\/or parallel processing logics and thus can be loaded and\/or executed in serial, parallel, massively parallel and other manners.","Suitable software for implementing the various components of the example systems and methods described herein include programming languages and tools like Java, Pascal, C#, C++, C, CGI, Perl, SQL, APIs, SDKs, assembly, firmware, microcode, and\/or other languages and tools. Software, whether an entire system or a component of a system, may be embodied as an article of manufacture and maintained or provided as part of a computer-readable medium as defined previously. Another form of the software may include signals that transmit program code of the software to a recipient over a network or other communication medium. Thus, in one example, a computer-readable medium has a form of signals that represent the software\/firmware as it is downloaded from a web server to a user. In another example, the computer-readable medium has a form of the software\/firmware as it is maintained on the web server. Other forms may also be used.","\u201cUser\u201d, as used herein, includes but is not limited to one or more persons, software, computers or other devices, or combinations of these.","Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a memory. These algorithmic descriptions and representations are the means used by those skilled in the art to convey the substance of their work to others. An algorithm is here, and generally, conceived to be a sequence of operations that produce a result. The operations may include physical manipulations of physical quantities. Usually, though not necessarily, the physical quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a logic and the like.","It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. It should be borne in mind, however, that these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, it is appreciated that throughout the description, terms like processing, computing, calculating, determining, displaying, or the like, refer to actions and processes of a computer system, logic, processor, or similar electronic device that manipulates and transforms data represented as physical (electronic) quantities.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["200","230","200","210","210","220","220","210","220"]},"A bit pattern may be retrieved from the data structure  and written to the GPIO block . Writing the bit pattern to the GPIO block  can cause the processor  to have its internal operating frequency and internal operating voltage changed. For example, the GPIO block  may receive the bit pattern and, based on the bit pattern, selectively control the PROCHOT signal presented to the processor . A first value for the PROCHOT signal may cause the processor  to enter a first state (e.g., frequency\/voltage combination) while a second signal on the PROCHOT line may cause the processor  to enter a second state (e.g., frequency\/voltage combination). The frequency and voltage combination established may be controlled, at least in part, by a bit pattern written into the thermal management register (e.g., TM2) in the processor . Thus, the system  may also facilitate writing a bit pattern from the data structure  to the processor . To determine whether the desired frequency and voltage have been established, a value may be read from a status register (not illustrated).","The system  may also include a logic  configured to receive requests from an operating system . The request may concern, for example, establishing one of two desired processor performance states in the processor . Thus, system  may receive the request from the operating system  and select a bit pattern from the set of bit patterns stored in the data structure  based on the processor performance state requested by the operating system . The bit pattern may be retrieved from a look-up table, for example. The bit pattern may be written to the GPIO block  and\/or the TM2 register to facilitate simulating a processor performance state. The GPIO block  may then cause the PROCHOT signal to be controlled, which may in turn cause the processor  to be placed in the desired processor performance state. The operating system  may operate like it is establishing a desired processor performance state in the processor  by making a request to the logic . However, the logic  may analyze the request, determine a suitable PROCHOT signal, and select a bit pattern to write to the GPIO block  and\/or the TM2 register based on the request, where the bit pattern will cause the desired processor performance state to be simulated through the creation of and response to the PROCHOT signal.","In one example, the data structure  is stored in a memory that is operably connectable to a Basic Input Output System (BIOS) configured to facilitate controlling a function(s) performed by the processor . In another example, the data structure  may be an ACPI table stored in a memory that is operably connectable to a BIOS. In yet another example, the data structure  may be an ACPI table stored in a BIOS (e.g., a ROM BIOS).","The data structure  may store a set of bit patterns and the logic  may be configured to select a bit pattern from the data structure based on a request from the operating system . For example, a request to enter a lower performance state may lead to a first bit pattern(s) being selected from a set of bit patterns while a request to enter a higher performance state may lead to a second bit pattern(s) being selected from the set of bit patterns. A lower performance state may be produced by causing a first signal (e.g., 5V) to be placed on the PROCHOT line and by a first bit pattern being provided to the TM2 register. A higher performance state may be produced by causing a second signal (e.g.; 0V) to be placed on the PROCHOT line and by a second bit pattern being provided to the TM2 register. Changing the states may include causing the processor to lower its core to bus ratio and operating voltage. Concerning the bit patterns that may be stored, read, and\/or processed by the system , the bit patterns may control individual bit lines or may be used collectively as patterns. For example, eight bits represented as 0xff (hexadecimal) may be used to control establishing a high processor performance state (e.g., high voltage, high frequency) while eight bits represented as 0x00 (hexadecimal) may be used to control establishing a low processor performance state (e.g., low voltage, low frequency). Similarly, a bit pattern like 0xf0 may signal an intent to toggle a processor performance state from high to low or low to high. While eight bit patterns are described, it is to be appreciated that the bit patterns may be represented by a greater and\/or lesser number of bits.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 1"],"b":["310","300"]},"The system  includes a simulation logic  configured to receive a request to place a processor in a performance state and in response to receiving the request to cause a signal to be provided to the combination logic , where the signal facilitates controlling the PRBCHOT signal line and thus processor frequency and voltage. In one example, the simulation logic  may access a data structure that stores a GPIO block address, a thermal management register address, a status register address, bit patterns to write to the GPIO block, and\/or bit patterns to match to values read from the status register. The data structure may be stored, for example, in a ROM-BIOS.","The simulation logic  may receive a request to place a processor in a performance state. However, the processor may not have performance states implemented. For example, while processors used in laptop systems may have processor performance states available, processors used in desktop systems may not. Therefore, the simulation logic  may acquire the address of a GPIO block configured to cause a signal to be provided to the combination logic . The simulation logic  may write a bit pattern to the GPIO block that causes the GPIO block to provide the signal to the combination logic . The combination logic  may then in turn cause a signal (e.g., 0V, 5V) to be placed on the PROCHOT line, which may cause a processor to read a frequency\/voltage data from a thermal management register (e.g., TM2) and change its operating frequency and voltage accordingly. Thus, the simulation logic  can cause the processor to change frequency and voltage and thus simulate processor performance states.","Example methods may be better appreciated with reference to the flow diagrams of . While for purposes of simplicity of explanation, the illustrated methodologies are shown and described as a series of blocks, it is to be appreciated that the methodologies are not limited by the order of the blocks, as some blocks can occur in different orders and\/or concurrently with other blocks from that shown and described. Moreover, less than all the illustrated blocks may be required to implement an example methodology. Furthermore, additional and\/or alternative methodologies can employ additional, not illustrated blocks.","In the flow diagrams, blocks denote \u201cprocessing blocks\u201d that may be implemented with logic. A flow diagram does not depict syntax for any particular programming language, methodology, or style (e.g., procedural, object-oriented). Rather, a flow diagram illustrates functional information one skilled in the art may employ to develop logic to perform the illustrated processing. It will be appreciated that in some examples, program elements like temporary variables, routine loops, and so on are not shown. It will be further appreciated that electronic and software applications may involve dynamic and flexible processes so that the illustrated blocks can be performed in other sequences that are different from those shown and\/or that blocks may be combined or separated into multiple components. It will be appreciated that the processes may be implemented using various programming approaches like machine language, procedural, object oriented and\/or artificial intelligence techniques.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["400","400"]},"The method  may include, at , receiving a request to establish a processor performance state in a processor. The request may come, for example, from an operating system and\/or an application that desires to have the processor set to a desired processor performance state. The request may be generated in response to an action (e.g., choice made from a graphical user interface), to a state (e.g., thermal condition), to an analysis (e.g., predicted CPU utilization), and the like. By way of illustration, an operating system may determine that a first application like a manual data entry application may only require a small amount of a processor's capacity and thus may request a lower processor performance state. By way of further illustration, the operating system may subsequently determine that a second application like a real-time three-dimensional rendering program may require a greater amount of a processor's capacity and thus may request a higher processor performance state.","The method  may then proceed, at , to access a data store configured to store simulation data. The data store may be accessed to acquire, for example, a bit pattern to write to a GPIO block and\/or to the TM2 register. The data store may also be accessed to acquire the address of the GPIO block, the address of the TM2 register, and the like. Thus, rather than the method  directly driving an internal clock frequency for a processor and changing an internal operating voltage for a processor by writing to frequency and\/or voltage controlling apparatus configured to implement the processor performance state, as might be anticipated by the operating system, a different set of actions like writing a bit pattern to the GPIO block and\/or the TM2 register may occur. The operating system may remain unaware that a different set of actions is occurring. Thus the fact that a simulated processor performance state is produced rather than a true processor performance state may be transparent to the operating system. The operating system may even remain unaware that it is interacting with a processor that does not implement processor performance states.","The method  may then proceed, at , to simulate a processor performance state by writing to the GPIO block and\/or the TM2 register and causing the PROCHOT signal to be asserted (e.g., signifying processor is overheating) or deasserted (e.g., signifying processor is not overheating). In one example, the method  may facilitate simulating processor performance states that correspond to a higher performance state and a lower performance state.","While  illustrates various actions occurring in serial, it is to be appreciated that various actions illustrated in  could occur substantially in parallel. By way of illustration, a first process could receive requests to establish one of two processor performance states. Similarly, a second process could access data like bit patterns to write to the GPIO block and\/or the TM2 register and the address of the GPIO block and\/or TM2 register, while a third process could facilitate simulating the desired processor performance state by writing a retrieved bit pattern to the GPIO block and thus causing the PROCHOT signal to be asserted or deasserted. While three processes are described, it is to be appreciated that a greater and\/or lesser number of processes could be employed and that lightweight processes, regular processes, threads, and other approaches could be employed.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5","b":["500","500","510"]},"The method  may also include, at , establishing a GPIO block address in the data store. The GPIO block address may be the address of a block to which a bit pattern can be written to facilitate controlling the thermal management line to produce a simulated processor performance state. Additionally, a status register address may be established. The status register address may be the address of a register from which data related to a processor performance state can be read. Thus, in one example, the method  may include populating a data structure with a set of bit patterns stored in an ACPI table, writing the address of an ACPI status register to the ACPI table, and writing the address of a GPIO block that facilitates operably controlling the thermal management line.","The method  may also include, at , receiving a request to establish a processor performance state. The request may come from an operating system, an application, a user, and so on. In one example, the operating system may be Microsoft\u00ae Windows\u00ae XP. Instead of directly driving an internal processor frequency and an internal processor voltage by writing internal machine specific registers dedicated to implementing processor performance states, the method  may instead, at , acquire a bit pattern that can be written to the GPIO block and\/or the thermal management register. Since ACPI data structures and methods may virtualize a hardware environment, the method  may also include, at , acquiring an address of the GPIO block to which the bit pattern acquired at  can be written. The bit pattern and the GPIO block address may be acquired from the data store configured at  and , for example. After acquiring the bit pattern and the GP block address, the method  may, at , write the bit pattern to the GPIO block and\/or the thermal management register. In one example, writing the bit pattern to the GPIO block causes a signal to be placed on a PROCHOT line into the processor. Placing the signal on the PROCHOT line can cause the processor to change its operating frequency and voltage and thus a processor performance state can be simulated.","The method  may also include, at , making a determination concerning whether writing the bit pattern to the GPIO block caused the desired processor performance state to be simulated\u2014did the write take? The determination may be made, for example, by reading a status register. Thus, the method  may include acquiring an address of a status register (e.g., ACPI status register) configured to report a value(s) (e.g., processor operating frequency, processor operating voltage) related to performance state, reading the value from the status register, and selectively reporting a success or error condition based on the value. If the determination at  is Yes, then the method  may conclude. In another example, the method  may return to  and wait for another request to simulate another processor performance state. But if the determination at  is No, then another determination may be made at  concerning whether a retry limit of status checks has occurred. If the retry limit has been exceeded, an error condition may be reported, otherwise the method  may return to  for another status check.","While  illustrates various actions occurring in serial, it is to be appreciated that various actions illustrated in  could occur substantially in parallel. By way of illustration, a first process could establish bit patterns and addresses, a second process could receive requests to establish processor performance states, a third process could acquire bit patterns and addresses, a fourth process could write bit patterns, and a fifth process could determine whether the desired processor performance state has been simulated. While five processes are described, it is to be appreciated that a greater and\/or lesser number of processes could be employed and that lightweight processes, regular processes, threads, and other approaches could be employed.","In one example, methodologies are implemented as processor executable instructions and\/or operations stored on a computer-readable medium. Thus, in one example, a computer-readable medium may store processor executable instructions operable to perform a method that includes receiving a request to establish a processor performance state in a processor, accessing a data store to acquire simulation data that facilitates controlling the state of a thermal management signal and a thermal management register, and causing the processor performance state to be simulated by causing the processor to have its operating frequency and voltage changed in response to writing a bit pattern to the GPIO block. While the above method is described being stored on a computer-readable medium, it is to be appreciated that other example methods described herein can also be stored on a computer-readable medium.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 6","b":["600","602","604","610","608","600","630","602","630","602","602","640","602","602"]},"The processor  can be a variety of various processors including dual microprocessor and other multi-processor architectures. The memory  can include volatile memory and\/or non-volatile memory. The non-volatile memory can include, but is not limited to, ROM, PROM, EPROM, EEPROM, and the like. Volatile memory can include, for example, RAM, synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), and direct RAM bus RAM (DRRAM).","A disk  may be operably connected to the computer  via, for example, an input\/output interface (e.g., card, device)  and an input\/output port . The disk  can include, but is not limited to, devices like a magnetic disk drive, a solid state disk drive, a floppy disk drive, a tape drive, a Zip drive, a flash memory card, and\/or a memory stick. Furthermore, the disk  can include optical drives like a CD-ROM, a CD recordable drive (CD-R drive), a CD rewriteable drive (CD-RW drive), and\/or a digital video ROM drive (DVD ROM). The memory  can store processes  and\/or data , for example. The disk  and\/or memory  can store an operating system that controls and allocates resources of the computer .","The bus  can be a single internal bus interconnect architecture and\/or other bus or mesh architectures. While a single bus is illustrated, it is to be appreciated that computer  may communicate with various devices, logics, and peripherals using other busses that are not illustrated (e.g., PCIE, SATA, Infiniband\u00ae, 1394, USB, Ethernet). The bus  can be of a variety of types including, but not limited to, a memory bus or memory controller, a peripheral bus or external bus, a crossbar switch, and\/or a local bus. The local bus can be of varieties including, but not limited to, an industrial standard architecture (ISA) bus, a microchannel architecture (MSA) bus, an extended ISA (EISA) bus, a peripheral component interconnect (PCI) bus, a universal serial (USB) bus, and a small computer systems interface (SCSI) bus.","The computer  may interact with input\/output devices via i\/o interfaces  and input\/output ports . Input\/output devices can include, but are not limited to, a keyboard, a microphone, a pointing and selection device, cameras, video cards, displays, disk , network devices , and the like. The input\/output ports  can include but are not limited to, serial ports, parallel ports, and USB ports.","The computer  can operate in a network environment and thus may be connected to network devices  via the i\/o devices , and\/or the i\/o ports . Through the network devices , the computer  may interact with a network. Through the network, the computer  may be logically connected to remote computers. The networks with which the computer  may interact include, but are not limited to, a local area network (LAN), a wide area network (WAN), and other networks. The network devices  can connect to LAN technologies including, but not limited to, fiber distributed data interface (FDDI), copper distributed data interface (CDDI), Ethernet (IEEE 802.3), token ring (IEEE 802.5), wireless computer communication (IEEE 802.11), Bluetooth\u00ae (IEEE 802.15.1), and the like. Similarly, the network devices  can connect to WAN technologies including, but not limited to, point to point links, circuit switching networks like integrated services digital networks (ISDN), packet switching networks, and digital subscriber lines (DSL).",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 7","b":["700","710","710","710","700","710","750","750"]},"The image forming device  may receive print data to be rendered. Thus, image forming device  may also include a memory  configured to store print data or to be used more generally for image processing. The image forming device  may also include a rendering logic  configured to generate a printer-ready image from print data. Rendering varies based on the format of the data involved and the type of imaging device. In general, the rendering logic  converts high-level data into a graphical image for display or printing (e.g., the print-ready image). For example, one form is ray-tracing that takes a mathematical model of a three-dimensional object or scene and converts it into a bitmap image. Another example is the process of converting HTML into an image for display\/printing. It is to be appreciated that the image forming device  may receive printer-ready data that does not need to be rendered and thus the rendering logic  may not appear in some image forming devices.","The image forming device  may also include an image forming mechanism  configured to generate an image onto print media from the print-ready image. The image forming mechanism  may vary based on the type of the imaging device  and may include a laser imaging mechanism, other toner-based imaging mechanisms, an ink jet mechanism, digital imaging mechanism, or other imaging reproduction engine. A processor  may be included that is implemented with logic to control the operation of the image-forming device . In one example, the processor  includes logic that is capable of executing Java\u00ae instructions. Other components of the image forming device  arc not described herein but may include media handling and storage mechanisms, sensors, controllers, and other components involved in the imaging process.","Referring now to , an application programming interface (API)  is illustrated providing access to a system  for simulating processor performance states using a thermal management line (e.g., PROCHOT) and a thermal management register (e.g., TM2). The API  can be employed, for example, by a programmer  and\/or a process  to gain access to processing performed by the system . For example, a programmer  can write a program to access (e.g., invoke operation, monitor operation, control operation) the system  where writing the program is facilitated by the presence of the API . Rather than programmer  having to understand the internals of the system , the programmer  merely has to learn the interface to the system . This facilitates encapsulating the functionality of the system  while exposing that functionality.","Similarly, the API  can be employed to provide data values to the system  and\/or retrieve data values from the system . For example, a process  that requests that certain processor performance states be established for a processor may make the requests to the system  via the API  by, for example, using a call provided in the API . Thus, in one example of the API , a set of application programming interfaces can be stored on a computer-readable medium. The interfaces can be employed by a programmer, computer component, logic, and so on to gain access to a system  that simulates processor performance states by manipulating a thermal management signal on a thermal management line available to a processor. The interfaces can include, but are not limited to, a first interface  that communicates a bit pattern data, a second interface  that communicates a GPIO address data, and a third interface  that communicates a state data that describes a processor performance state simulated by the system , where the system  used the bit pattern data and the GPIO address data to generate a signal related to a processor thermal condition to cause the processor performance state to be simulated.","While example systems, methods, and so on have been illustrated by describing examples, and while the examples have been described in considerable detail, it is not the intention of the applicants to restrict or in any way limit the scope of the appended claims to such detail. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the systems, methods, and so on described herein. Additional advantages and modifications will readily appear to those skilled in the art. Therefore, the invention is not limited to the specific details, the representative apparatus, and illustrative examples shown and described. Thus, this application is intended to embrace alterations, modifications, and variations that fall within the scope of the appended claims. Furthermore, the preceding description is not meant to limit the scope of the invention. Rather, the scope of the invention is to be determined by the appended claims and their equivalents.","To the extent that the term \u201cincludes\u201d or \u201cincluding\u201d is employed in the detailed description or the claims, it is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as that term is interpreted when employed as a transitional word in a claim. Furthermore, to the extent that the term \u201cor\u201d is employed in the detailed description or claims (e.g., A or B) it is intended to mean \u201cA or B or both\u201d. When the applicants intend to indicate \u201conly A or B but not both\u201d then the term \u201conly A or B but not both\u201d will be employed. Thus, use of the term \u201cor\u201d herein is the inclusive, and not the exclusive use. See, Bryan A. Garner, A Dictionary of Modern Legal Usage 624 (2d. Ed. 1995)."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate various example systems, methods, and so on that illustrate various example embodiments of aspects of the invention. It will be appreciated that the illustrated element boundaries (e.g., boxes, groups of boxes, or other shapes) in the figures represent one example of the boundaries. One of ordinary skill in the art will appreciate that one element may be designed as multiple elements or that multiple elements may be designed as one element. An element shown as an internal component of another element may be implemented as an external component and vice versa. Furthermore, elements may not be drawn to scale.","Prior Art  illustrates an example thermal management circuit for generating a processor overheated (PROCHOT) signal.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
