---
title: Programming model for synchronizing browser caches across devices and web services
abstract: A computer user may use a computing environment comprising a set of computers that respectively feature a web browser having a browser cache containing many types of data objects, including application resources and user-generated data files. However, the contents of a browser cache significantly contribute to the computing environment of a computer, and the computing environments presented by each computer may diverge, providing an inconsistent computing environment. Instead, the contents of browser caches of the computers comprising the computing environment may be synchronized across computers. Additionally, the browser cache may be synchronized with the other data objects of a computing environment (such as relevant portions of the filesystem); the synchronizing may be implemented as an out-of-browser process executing independently of the applications, and even when the browser is not executing; and the synchronization may be exposed through a programmatic access with which web applications may interact.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08812451&OS=08812451&RS=08812451
owner: Microsoft Corporation
number: 08812451
owner_city: Redmond
owner_country: US
publication_date: 20090311
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A webserver often stores a set of data objects, such as HTML pages, media objects, data stores, and executable scripts, that are provided to a web browser and rendered thereby to present a set of web pages comprising a website. Web browsers typically include a browser cache where received items may be stored for reuse in subsequently rendered web pages, thereby improving the performance of the web browser, economizing the resources of the webserver, and optionally providing limited capabilities to render the web pages when the webserver cannot be accessed. In contrast with other types of data objects within a computer system (such as user documents, application and operating system binaries, and application configuration information), the data objects contained in the browser cache have typically been regarded as temporary and disposable.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Developments in web technologies have resulted in more sophisticated types of websites, which may incorporate web applications that execute within the web browser. The data objects comprising such websites and web applications are often stored in the browser cache, and it may be desirable to enable the rendering of such websites and the execution of such web applications when the webserver is inaccessible, such as when the web browser is not connected to a network or when the webserver is offline. Such data objects may also be stored in several types of browser caches (e.g., an application cache that stores application resources of a browser-hosted application and a content cache that stores data objects retrieved from websites, such as HTML documents and images.)","Contemporary users often utilize a set of computers (e.g., a portable computer, a workstation, and a cellphone device), and these computers may collectively present to the user a computing environment, such as the user's documents, installed applications, application and operating system configuration information, user profiles, representations of various individuals (e.g., contacts stored in a directory), etc. Moreover, particular aspects of these computers may be synchronized to improve the consistency of the computing environment across all such computers. However, respective computers may comprise a browser having a browser cache, the contents of which may differ as the user interacts differently with each computer. If the contents of the browser cache include an expanding set of significant data objects, such as applications available offline and saved user documents, then the divergence of such web caches among such computers may lead to computer-specific differences, such as inconsistent sets of available applications, conflicting versions of stored documents, and discrepancies in media libraries.","In order to reduce such inconsistencies and version conflicts, the browser caches of such computers may be synchronized. Among a set of computers sharing a computing environment, a computer may be configured to monitor the state of its browser cache for alterations, and to synchronize with the browser caches of the other computers according to various synchronization policies. This browser cache synchronization may also be included in the synchronization of the general computing environment among such computers, thereby improving the efficiency of the synchronization process and economizing computing resources. In addition, a programmatic interface may be provided to permit applications executing in the web browser to interact with the browser cache synchronization, such as by requesting the synchronization of various data objects and by identifying information about the synchronization policies of the browser cache. By maintaining the consistency of the browser caches of the various computers utilized by the user, these techniques may promote the consistency of the user's data objects and the computing environment.","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures are shown in block diagram form in order to facilitate describing the claimed subject matter.","In the field of a computing, a webserver may provide to various visitors the content of web pages. In earlier generations of websites, such content typically involved only simple types of data objects, such as HTML documents, graphics incorporated in such HTML documents, and client-side JavaScript scripts. These data objects were delivered to a web browser that rendered the web pages comprising the website on behalf of a user.","Early in the development of web browsers, a browser cache was developed where some or all such data objects might be stored upon receipt in order for later re-use, thereby improving the performance of the web browser by avoiding redundant downloading of the data object and economizing the consumption of computing resources on the server. The data objects stored in the browser cache might also be used to render a representation of the content if the server was inaccessible, e.g., if the server was offline or if the computer was not connected to a network. While the caching of such data objects may have improved the performance of the web browser by reducing redundant network transfers, these data objects were regarded as temporary and disposable. Many browsers include an option to delete the contents of the browser cache as a temporary space-saving mechanism, since the items may often be obtained again during the user's next visit to the website.","Contemporary websites often involve more advanced types of content than in earlier generations of web development. In particular, a website may incorporate one or more applications that include executable binaries, data sources, and user-data objects, such as user-generated documents. These applications may also involve a diverse set of data objects that may be used by the web browser in presenting the application, and that may be stored in the browser cache. Moreover, the browser cache may store data objects that may be used to provide access to certain aspects of a website while the website is inaccessible (e.g., when the computer is not connected to a network, or when the website is offline.) In view of these expanded capabilities, the data objects stored in a browser cache comprise a significant portion of the user's computing environment. Contemporary browsers may also provide multiple caches of different types; e.g., data objects comprising applications resources of an application that may execute in a web browser may be stored in a browser application cache, while data objects retrieved from visited websites, such as HTML documents and images embedded therein, may be stored in a browser content cache. Both types of caches may promote the performance of the web browser in a similar manner, but the storing of resources in particular caches may provide additional advantages (e.g., a user may be able to request an emptying of the content cache while preserving the contents of the application cache.)","Another trend in modern computing environments involves a growing scope of computers that a user may utilize. For example, a user may often utilize a personal workstation, a portable computer of a notebook, palm, or pocket form factor, a cellphone, a media player, a camera, and a gaming console. While these computers may have specialized purposes and scenarios, the user may regard all of them as together comprising the computing environment. Moreover, the computing environment may comprise a large and diverse set of data objects (e.g., media objects, documents, applications, and operating system preferences), and these data objects may be shared across all such computers. For example, these data objects may be automatically synchronized to provide a more consistent user experience, so that a change to the computing environment on one computer (e.g., the addition of new media objects or applications, or alterations to a document) may be automatically propagated throughout the computing environment.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["10","12","14","28","30","18","32","16","22","24","20","16","24","22","12","22","12","16","26","18","20","32","18","32","18","18"]},"However, problems may arise if each of these various computers comprises a browser having a browser cache, and if such browser caches incorporate data objects that comprise a significant portion of the user's computing environment. Because the browser caches in earlier generations of browsers only stored temporary and disposable data objects, even if the data objects in the computing environment are synchronized, the browser caches of the computers may not be included in this synchronization. Accordingly, the browser caches of various computers that comprise the user's computing environment may diverge, leading to different computing environments on different computers (e.g., different versions of a document stored in the browser cache, or different sets of browser-stored applications that may be available on different computers.) As further illustrated in the exemplary scenario  of , even if the documents  and other data objects in the computing environment  are automatically synchronized among the computers, the contents of the respective browser caches  may fall out of synchronization. As a first example, the data object  comprising a first document (\u201cDOC 1\u201d) might exist in different versions in each computer, which might occur if the document were updated at different times on the different devices but not synchronized. As a second example, data objects  may be present in one browser cache  but not in another browser cache ; e.g., the data object  named \u201cDOC 3\u201d is included in the browser cache  of the workstation , but not in the browser cache  of the notebook computer . As a third example, an application  may be stored for offline access in some computers, but not in other computers; e.g., in this exemplary scenario , the \u201cApplication\u201d application  is stored for offline access on the workstation  and the notebook computer , but not on the cellphone device . While some of these discrepancies might arise at the selection of the user  (e.g., an instruction from the user  to exclude the application  from the cellphone device ) or based on logical rationale (e.g., an inability to execute the application  with the cellphone device  due to storage space, performance, or hardware limitations), in other cases these discrepancies might be undesirable and avoidable, but may nevertheless arise due to the absence of a mechanism to synchronize the browser caches  of the computers comprising the computing environment of the user .",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 2"],"b":["40","40","14","28","30","16","20","24","22","18","32","40","42","20","16","20","16","42","44","20","24","20","24","42","46","44","20","20","44","30","24","20","24","20","28","20","24","46","28","20","44","28","24","24","46","24","20","14"]},"As a second example illustrated in , the browser cache monitoring component  may detect the writing of the \u201cDOC 3\u201d data object  and its absence from the browser cache  of the notebook computer , and upon this detection, the browser cache synchronization component  of the workstation  may deliver the \u201cDOC 3\u201d data object  to the browser cache  of the notebook computer . As a third example, the browser cache monitoring component  of the notebook computer  may detect the storing of the data objects  comprising the application resources of the application , and the browser cache synchronizing component  of the notebook computer  may, upon detecting the absence of such data objects  from the browser cache  of the cellphone device , send these data objects  to the cellphone device . In this manner, the browser caches  of the various computers may be brought into synchrony, thereby presenting the user with a consistent computing environment (including the current version of the \u201cDOC 1\u201d data object , the presence of the \u201cDOC 3\u201d data object , and the availability of the application  on all computers.)","More generally, and in view of these scenarios,  presents an exemplary embodiment  of the techniques discussed herein as an exemplary system  configured to synchronize a browser cache  of a browser  on a computer  with a remote store  of a remote computer . The exemplary system  may comprise a browser cache monitoring component , which may be configured to detect a writing of at least one data object  in the browser cache , and a browser cache synchronizing component , which may be configured, upon the browser cache monitoring component  detecting the writing, to synchronize the browser cache  with the remote store . The exemplary system  may comprise, e.g., a set of instructions stored in a memory  of the computer  and executable on a processor  in order to support the browser cache  and the synchronization of the computing environment of the computer  with other computers (such as the remote computer ) utilized by a particular set of users.","Another embodiment of these techniques involves a computer-readable medium comprising processor-executable instructions configured to apply the techniques presented herein. An exemplary computer-readable medium that may be devised in these ways is illustrated in , wherein the implementation  comprises a computer-readable medium  (e.g., a CD-R, DVD-R, or a platter of a hard disk drive), on which is encoded computer-readable data . This computer-readable data  in turn comprises a set of computer instructions  configured to operate according to the principles set forth herein. In one such embodiment, the processor-executable instructions  may be configured to implement a system configured to synchronize a browser cache of a browser on a computer with a remote store of a remote computer, such as the exemplary system  of . Many such computer-readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.","The techniques discussed herein may be devised with variations in many aspects, and some variations may present additional advantages and\/or reduce disadvantages with respect to other variations of these and other techniques. Moreover, some variations may be implemented in combination, and some combinations may feature additional advantages and\/or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments (e.g., the exemplary system  of ) to confer individual and\/or synergistic advantages upon such embodiments.","A first aspect that may vary among embodiments of these techniques relates to the type of synchronization that may be performed between the browser cache  and the remote store . The process of synchronizing data objects may have many variables that may be differently adjusted to suit different scenarios. As a first example, the synchronization may be triggered by many events. In one such embodiment, the synchronization may be triggered promptly after the browser cache monitoring component  detects a writing of a data object  to the browser cache . While prompt synchronization may provide a high degree of synchrony between the browser cache  and the remote store , this triggering may be inefficient, e.g., by establishing a connection between the computer  and the remote computer  upon each writing, and\/or by establishing a series of connections and data transfers in a short timeframe for a data object  that is updated several times in a short time frame. In another such embodiment, the synchronization may be triggered upon the browser monitoring component  detecting the writing, but after a particular threshold has been met, e.g., after a defined threshold period has elapsed without further writing to the browser cache , and\/or after a defined threshold amount of data has been written to the browser cache . Alternatively or additionally, a synchronizing may be triggered by the remote computer ; e.g., the remote computer  may sent a notification to the computer  to synchronize the browser cache  with the remote store , and the browser cache synchronizing component  may be configured, upon receiving the notification from the remote computer  to perform this synchronization. This type of configuration may be advantageous between computers having a peer relationship, e.g., two computers wherein the browser cache  of either computer  may be altered. As another alternative, the synchronizing may be triggered periodically, such as at a predetermined time on a weekly basis or after a certain amount of time has elapsed since the last synchronization. As yet another alternative, the synchronizing may be triggered based on other factors, such as when the processor  is detected to have been idle for a threshold period of time, or when an availability of network bandwidth is detected.","As a second variation of this first aspect, the synchronization may occur in many ways. As a first example, the computer  may simply deliver to the remote computer  any data objects  that change on the computer , without examining the contents of the remote store . This configuration may be suitable, e.g., where the remote computer  comprises an archival server that only receives updates from the computer . As a second example, the browser cache synchronizing component  may enquire as to the contents of the remote store  of the remote computer , and may compare respective data objects  to determine the data objects  that are missing or outdated in the remote store  and due for updating. Alternatively, the browser cache synchronizing component  may deliver a list of the contents of the browser cache  to the remote computer  for comparison with the contents of the remote store , and may receive from the remote computer  a list of operations to be performed in order to synchronize the browser cache  and the remote store . In either embodiment, this comparing may take into account many factors, e.g., the modification dates of the data objects , the sizes or types of the data objects , a version identifier attributed to various data objects , and\/or a hashcode representing the contents of the data objects . The browser cache synchronizing component  may then send to the remote computer  the data objects  that are to be delivered in order to synchronize the browser cache  and the remote store . Alternatively or additionally, the browser cache synchronizing component  may also request data objects  that are newly stored or more recently updated on the remote computer , and may store such data objects  upon receipt in the browser cache . Alternatively or additionally, if a data object  is found to have changed in both the browser cache  and the remote store , the browser cache synchronizing component  and\/or the remote computer  may determine whether to select one of the representations of the data object  as authoritative and may replace the non-authoritative representations. Alternatively, it may be possible to merge the representations of the data object  to produce a hybrid data object  containing all such changes, and to replace both instances with the hybrid data object .","One feature of this second variation that illustrates some of the variable complexity of synchronization relates to the discovery of data objects in the remote store  that are not present in the browser cache . Such data objects  might exist if either newly stored in the remote store  since the last synchronization, or if such data objects  were removed from the browser cache . In one such embodiment, if the browser cache synchronizing component  detects a data object  in the remote store  that is not present in the browser cache , it may request the remote computer  to remove the data object  from the remote store  (thereby presuming a removal from the browser cache .) Conversely, the browser cache synchronizing component  may be configured to receive requests from the remote store  to remove data objects  from the browser cache  that have been removed from the remote store , and may act accordingly to maintain synchrony. Alternatively or additionally, the browser cache monitoring component  may endeavor to detect a removing of at least one removed data object  in the browser cache , and the browser cache synchronizing component  may then request the remote computer  to remove the data object  from the remote store  (thereby presuming a new addition to the remote store .) In yet another embodiment, the browser cache monitoring component configured to detect a removing of at least one removed data object  from the browser cache , and may request the removal of such removed data objects  from the remote store . Any data objects  thereafter identified in the remote store  may be presumed to have been recently added to the remote store . In yet another embodiment, the browser cache  and\/or the remote store  may maintain a journal of modifications to the respective data object stores, and may examine or compare such journals to determine an accurate synchronization operation.","As a third variation of this first aspect, these techniques may be selectively applied to particular data caches offered by the web browser. Because data objects received by a web browser may be useful in different contexts (e.g., application resources belonging to an application and content-type data objects that are used in the rendering of a web page, such as HTML documents, style sheets, and embedded media objects), the web browser may store such data objects in different caches (e.g., an application cache configured to store application resources and a content cache configured to store content-type data objects.) The synchronization techniques related herein may be applied to the contents of such caches in various ways. As a first example, the synchronization may be applied uniformly to all data objects in all such caches. As a second example, the synchronization may be applied only to particular caches configured to store data objects of more significant value (e.g., an application cache), and to disregard the contents of data caches configured to store less useful data objects. As a third example, the synchronization may be applied differentially to such caches; e.g., an application cache may be synchronized in full and on a frequent basis, while a content cache may be synchronized only with regard to a portion of the data objects stored therein (e.g., data objects retrieved or accessed within a recent time frame), and may be synchronized on a less rigorous schedule.","Additional variations of this first aspect may relate to more sophisticated forms of synchronization. As a first example, the browser cache synchronizing component  and\/or the remote store  may be configured to synchronize only a portion of the data objects , such as a subset of data objects  matching at least one synchronized data object criterion. For example, the browser cache synchronizing component  may be configured to synchronize only data objects  comprising user data files, and\/or only data objects  comprising application binaries, and\/or only data objects  belonging to a particular user or application, and\/or only data objects  not exceeding a particular data size. The browser cache synchronizing component  may therefore disregard other data objects  stored in the browser cache  during the synchronization. As a second example, a synchronization policy may be devised that describes various aspects of the synchronization, such as the synchronization triggering policy (e.g., the set of circumstances under which a synchronization may begin), a synchronization type policy (e.g., a unidirectional synchronization vs. a bidirectional synchronization), a data object comparing policy (e.g., the criteria by which two representations of a data object are compared to detect differences), a data object type merging policy (e.g., the types of data objects  that may be merged and the logic for doing so), and\/or a data object conflict resolution policy (e.g., the logic by which differing representations of a data object  are resolved.) It may be advantageous to define several synchronization policies describing a variety of forms of synchronization (e.g., a first synchronization policy applied during an infrequent synchronization and a second synchronization policy applied during a frequent, incremental synchronization.) Moreover, the synchronization policies may be defined either by the computer  or by the remote computer , depending on the relationship therebetween. Those of ordinary skill in the art may devise many techniques for initiating and performing the synchronization of the browser cache  and the remote computer  while implementing the techniques discussed herein.","A second aspect that may vary among embodiments of these techniques relates to the architecture of the implementation. As a first example, the browser cache monitoring component  and the browser cache synchronizing component  may execute in various manners within the computer . In a first such embodiment, the browser cache monitoring component  may be configured to execute on the computer  within the browser , e.g., as part of the browser  or a plug-in installed therein. This implementation may be helpful if the browser cache monitoring component  is primarily tasked with monitoring the browser cache  for changes in order to trigger a synchronizing by the browser cache monitoring component , because such changes may likely arise only when the browser  is executing. By contrast, and alternatively or additionally, the browser cache synchronizing component  may be configured to execute on the computer  as a process outside of the browser , e.g., as a background service of the computer . This may be advantageous because the synchronizing may occur independently of the browser , e.g., by synchronizing changed data objects  without interfering with the rendering of web pages and the executing of applications  by the browser , and by permitting the synchronizing of the browser cache  with the remote store  to occur when such applications  are not executing, and even if the browser  is not executing. For example, when the computer  is connected to a network but when the user  is not using the browser  (e.g., when the computer  is idle), the browser cache synchronizing component  may retrieve some updated data objects  from the remote store  and store them in the browser cache , and such objects may be used in the browser  when the user  requests to use these data objects  (e.g., invokes an application  incorporating such web objects ), even if the computer  is in an offline state.","As a second example of this second aspect, the architecture of the embodiments of these techniques may account for the actions of other processes within the computer  while implementing the features described herein. For example, it may be advantageous to implement the browser cache synchronizing component  as a process executing outside of the browser , but this independence may permit a competitive interference of these two processes. As a first example, the browser cache synchronizing component  may attempt to replace a data object  that is in use by the browser , causing a data violation error. As a second example, the browser cache synchronizing component  and the browser  may each update a data object , and if an object synchronization construct is not used, a race condition may arise, resulting in a loss of data and potential logical problems. In order to avoid such problems and improve the implementation of these techniques, the browser cache monitoring component  and\/or the browser cache synchronizing component  may respect the actions of other processes. As a first example, the browser cache synchronizing component  may request an access lock (such as a semaphore or a mutex) on a data object  before synchronizing the data object  with the remote store , and may release the lock on the data object  upon completing the synchronizing of the data object . Alternatively or additionally, the browser cache monitoring component  may be configured, upon detecting an updating of a data object  by the browser cache synchronizing component  that is in use by the browser , to notify the browser  of the availability of the updated data object , and the browser may reload the updated data object  at a convenient moment in the operation of the browser  (e.g., when the data object  is not actively in use.)","As a third example of this second aspect, the synchronizing performed by the browser cache synchronizing component  may be included in a broader synchronizing of the computing environment  with the remote store . In a first such implementation, two computers may share data objects  stored both within the browser cache  and stored outside of the browser cache  but within the computing environment  (e.g., files stored in the filesystem of the computer , user profiles stored by the operating system, and records stored in a database.) A synchronization process may be devised to synchronize a large and diverse set of data objects  stored and accessed in many data object systems, including data objects  stored in the browser cache , during a single synchronization. This may be helpful, e.g., for permitting a user  to specify a single synchronization policy to be applied to all data objects  regardless of how such data objects  are stored, and for permitting one component to perform the synchronizing of such data objects  instead of implementing multiple synchronization components that independently (and perhaps conflictingly) synchronize different sets of data objects .","In one such embodiment, the computing environment  may represent a deployable computing environment, and the remote computer  may comprise a computing environment host. In order to reduce the complex variety and decentralization of the objects comprising a contemporary computing environment, a deployable representation of the computing environment may be devised, where the objects comprising the computing environment are organized in a data object hierarchy, which may be hosted by a computing environment host. This computing environment host may be configured to store a representation of the entire set of computers that comprise the computing environment  of the user ; to coordinate the synchronization of the computing environment  among such computers; to store an authoritative representation of the computing environment  (e.g., the particular representations of data objects  that carry priority in resolving version conflicts); and\/or to manage the deployment of the computing environment  or a portion thereof to particular computers , such as newly added computers. (It may be appreciated that the remote store  in this scenario may not necessarily correspond to a browser cache on the computing environment host , which may comprise a file server that does not even contain a browser, but may instead, e.g., represent a portion of the filesystem of the computing environment host  allocated to store the deployable computing environment .) The data object hierarchy may be delivered to various devices to represent the same computing environment (including the same user profiles, applications, data files, etc.), and each device may render the computing environment in a consistent manner but customized based on the capabilities of the device (e.g., a hard keyboard interface for receiving data entry from a keyboard device attached to a workstation, and a touchscreen software keyboard interface for receiving data entry from a cellphone device.) A user of the deployable computing environment may therefore interact with the deployable computing environment in a platform- and device-independent manner, while also achieving at least some of the advantages over alternative accessing techniques, such as synchronous or asynchronous invoking, batching of standard operations, and mobile agents. Moreover, if the data objects  comprising the computing environment  are represented in a uniform manner and managed in a consistent way within the deployable computing environment (regardless of the particular data object system through which such data objects  are accessed), a set of services may be devised to apply to all of the data objects of the computing environment. However, those of ordinary skill in the art may devise many such scenarios in which the techniques discussed herein may be applied.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5","b":["80","82","84","82","84","86","90","94","92","88","86","98","86","94","84","82","84","82","32","84"]},"With reference to this second aspect, if the computer  features a computing environment  representing a deployable computing environment  managed by a computing environment host , the techniques discussed herein may be implemented with particular advantages related thereto. As a first example, if the computing environment host  serves as the remote computer , it may be advantageous to represent the browser cache  as part of the computing environment . Moreover, if the remote store  comprises the representation of the deployable computing environment  managed by the computing environment host , then the synchronization of the entire computing environment , including the browser cache , may be performed together. For example, a computing environment component may be devised that manages the synchronization of a large set of data objects  of the computer  with the computing environment host , including data objects  stored within the browser cache  as well as data objects  stored in and accessible through other data object systems, such as files in the filesystem, configuration information stored in the system registry, and user profiles stored by the operating system. The synchronization may then be performed uniformly on the contents of the browser cache  as well as the rest of the computing environment , and other services (e.g., an authenticating service and a compression service) may be devised and uniformly applied to all such data objects . Again, it may be desirable to perform the synchronization of all such objects  as a single synchronization process, and\/or in a single component, such as a computing environment component that synchronizes all data objects  of the deployable computing environment  with the computing environment host . Moreover, the computing environment host  may also handle the delivery of such data objects to other computers that share the computing environment, such that each computer  may primarily communicate with the computing environment host  but may nevertheless receive data objects  originally created or recently updated on other computers .","As a fourth example of this second aspect, the browser cache monitoring component  and\/or the browse cache synchronizing component  may feature a synchronization programmatic interface, which may permit applications  executing within the browser  to interact with the synchronizing of the data objects  in the browser cache . As a first example, the synchronization programmatic interface may permit applications  to identify details of the synchronization, such as the date of the last synchronization of a data object  and the source of the data object . In one such embodiment, the synchronization programmatic interface may comprise at least one synchronization policy disclosing operation configured to disclose at least one property of at least one synchronization policy of the synchronization, and at least one synchronization policy setting operating configured to set at least one property of at least one synchronization policy. For example, an application may be supplied by an application host that updates a particular application resource on a fixed schedule, such as an antivirus software vendor that supplies a new antivirus definition database at midnight each Sunday. The application host may therefore configure the application  to instruct the browser cache synchronizing component , via the synchronization programmatic interface, to update the data object  comprising this application resource at the predetermined time. The application  may also use the synchronization programmatic interface to identify the date and time of the last such synchronization of the data object  (e.g., in order to notify a user  if the virus definition database is out of date), and\/or to restrict the synchronization of the data object  only with trusted sources identified by the application host (e.g., so that an virus definition database may only be retrieved directly from the antivirus software vendor.) Alternatively or additionally, the browser cache synchronizing component  may expose a synchronization programmatic interface configured to invoke the browser cache synchronizing component  to synchronize the browser cache  (or a portion thereof) with the remote store . For example, an application  may be permitted to invoke a synchronizing of a particular data object  by the browser cache synchronizing component  through an operation of the synchronization programmatic interface (e.g., if a user of an antivirus application requests a prompt updating of a virus definition database.)","Additionally, the synchronization programmatic interface may be implemented in a familiar and well-established manner, which may permit applications to utilize the interfaces conveniently and without significant redesign. For example, a web browser plug-in designed to support applications  executing in a web browser  may expose a JavaScript-based synchronization programmatic interface, e.g., as a set of operations that may be invoked in JavaScript to read and write various data objects  in the browser cache . Alternatively or additionally, synchronization the programmatic interface may support higher-level languages, e.g., object-oriented languages such as Java and C#; may expose more sophisticated details of the computing environment, such as the scheduling of the synchronization service, the freshness and policies of the local cache, and the relationships of the computers comprising the computing environment (e.g., which computer serves as the host of an authoritative representation of a particular data object); and\/or may include more sophisticated programming constructs that permit more powerful programmatic access (e.g., event subscriptions and data feeds that may notify applications of computing environment events, such as the synchronization of a particular data object.) In this manner, the programmatic interface may expose a wide variety of aspects of the computing environment in a sophisticated manner, while also adhering to familiar programming models that may be readily adopted by developers without having to redesign or rewrite large portions thereof utilizing different programming techniques. Those of ordinary skill in the art may devise many architectures and features thereof while implementing the techniques discussed herein.","A third aspect that may vary among embodiments of these techniques relates to data-object-specific features that may be included in various implementations thereof. As a first example, a data object  that an application  requests to be stored in the browser cache  may have one or more unusual properties, such as a large data object or a numerous set of associated data objects. Some browser caches  may be unable to accommodate such caching. For example, a browser cache  may impose a size limit on particular data objects, and a particular data object  may be too large to store in the browser cache  (e.g., a large database that may be provided for offline access by the application .) Instead, the browser  may be configured to store such data objects  outside of the browser cache  and in the computing environment , such as a file in a filesystem, and to store in the browser cache  a reference to the data object  stored outside of the browser cache . Moreover, the browser cache monitoring component  may be configured to monitor the updating of the data object  stored outside of the browser cache  along with the updating of data objects  stored within the browser cache ; and\/or the browser cache synchronizing component  may be configured to synchronize such data objects  stored outside the browser cache  along with the data objects  stored within the browser cache .","As a second example of this third aspect, a data object  stored in the browser cache  may comprise an application resource of an application  configured to execute within the browser . The browser cache monitoring component  and\/or the browser cache synchronizing component  may be configured to handle such data objects  in a particular manner. In a first such scenario, the data object  may comprise an application installer package, which may be invoked to install the application  within the browser . The browser cache synchronizing component  may therefore be configured, upon receiving the data object  from the remote computer , to invoke the application installer package to install the application . As a second example, the application  with which the data object  is associated may be associated with an application host, and may be configured to execute in an application host connection context, such as a connected context or a disconnected context. In one such scenario, the data object  may comprise an offline application resource, and the application  may be configured to use the offline application resource when the application  executes in a disconnected context. Those of ordinary skill in the art may devise many techniques for configuring the browser cache monitoring component  and\/or the browser cache synchronizing component  with respect to particular types of data objects  while implementing the techniques discussed herein.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 6","FIG. 6"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 6"],"b":["100","102","102","106","108","108","104"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
