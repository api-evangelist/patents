---
title: Anomaly-based detection of SQL injection attacks
abstract: A method for detecting a SQL injection attack comprises a training phase and a detection phase. In the training phase, a plurality of SQL queries is transformed into a respective plurality of SQL token domain queries which are processed using a n-gram analysis to provide a threshold and an averaging vector. In the detection phase, each newly arrived SQL query is transformed into a new SQL token domain query, and the n-gram analysis is applied together with the averaging vector and the threshold to each new SQL token domain query to determine if the new SQL query is normal or abnormal. The detection may be online or offline.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08225402&OS=08225402&RS=08225402
owner: 
number: 08225402
owner_city: 
owner_country: 
publication_date: 20090408
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","EXPERIMENTAL RESULTS"],"p":["This application claims the benefit of U.S. provisional patent application 61\/043,442, filed Apr. 9, 2008, which is incorporated herein by reference in its entirety.","The invention relates in general to methods and systems for detection of anomalies (abnormalities) that deviate from normal behavior in multi-dimensional data and more particularly to online based detection of Structured Query Language (SQL) injection attacks.","Web applications have become a popular way to provide services over the Internet. Common applications include activities such as reading news and emails, shopping online and paying bills. As the use of these applications grows, we witness an increase in their vulnerabilities to attacks via the Internet. One of the most dangerous attacks is \u201cSQL injection\u201d, performed by malicious insertion of crafted SQL queries into a vulnerable web page. Through SQL injection, an attacker gains unrestricted and unauthorized access to the underlying database. This may result in stealing of confidential financial information such as credit card numbers, modification of sensitive and personal data records, and more.","The challenge of a security system facing these types of attacks is to perform full-proof intrusion detection without any misdetections and false alarms. To achieve this, most security systems use signatures developed and gathered manually. This approach is problematic, because security systems using signatures can only detect attacks which are already known but cannot detect attacks with slight modifications or new attacks. Thus, known anomaly detection based approaches either fail to address the full range of SQL injection attacks or have technical limitations that prevent their adoption and deployment in real world installations.","SQL Injection Attacks","SQL is a textual language used to interact with relational databases. It is a standard interactive and programming language for querying, modifying and managing databases. A \u201cquery\u201d is a typical execution unit and includes a collection of SQL statements. SQL statements can modify the structure of a database, add or remove schemes and manipulate database content.","A SQL attack is performed by embedding SQL statements and meta-characters into a query. To launch an attack, a malicious user needs to craft input strings and to send them to an application. The malicious user may then gain unauthorized access to the database, observe sensitive and confidential data, leak the data out of the web site, or even destroy the data in the database. Web applications, which read inputs from users (e.g. through web forms) and use these inputs to compose a query to the underlying database are vulnerable. A SQL attack is caused by insufficient input validation and inability to perform such input validation. Hackers have developed new methods to bypass these validations and to hack into applications. Moreover, the use of input validation techniques is labor consuming, which makes them impractical for use.","Even though the vulnerabilities that lead to SQL attacks are well known and well understood, such attacks continue to emerge due to lack of effective techniques for detecting and preventing them. Programming techniques which utilize sophisticated input validation may prevent some of these attacks, but are usually ineffective.","SQL Injection Attacks Examples.","We show several ways in which an attack can exploit known vulnerabilities. Three different examples of attacks are given. These attacks show how a potential attacker can modify the original intention of the query as designed by its programmer. The examples are based upon the following typical query:","SELECT * FROM employeelist WHERE firstName=\u2018\u201c.$firstName.\u201d\u2019 AND lastName=\u2018\u201c.$lastName.\u201d\u2019","The query performs a search for an employee record in a database table called employeelist according to given first and last names. If such a record exists, then it is returned. Otherwise, nothing is returned. Parameters such as first and last names are supplied by the application user through, for example, a web form. The following examples demonstrate that by entering specific meta-characters and crafted strings as parameters, the original behavior of the query changes. As a result, a complete employeelist database table is retrieved (instead of the one searched employee record).","Example 1 demonstrates a tautology-based attack. The user submits for firstName and lastName the values some_string and \u2018OR \u2018b\u2019=\u2018b, respectively. Therefore, the WHERE clause is evaluated to be true. The constructed query looks as follows:","SELECT * FROM employeelist WHERE firstName=\u2018some_string\u2019 AND lastName=\u201cOR \u2018b\u2019=\u2018b\u2019","Example 2 demonstrates a tautology-based attack combined with a \u201ccommenting\u201d technique. The user submits for firstName and lastName the values \u2018 OR 1=1# and some_string, respectively. The SQL special character \u2018#\u2019 denotes the beginning of a comment. Therefore, part of the WHERE clause (until the \u2018#\u2019 character) is evaluated to be true, while the rest of it becomes irrelevant due to the presence of the comment sign. The constructed query looks as follows:","SELECT * FROM employeelist WHERE firstName=\u2202OR 1=1#\u2019 AND lastName=\u2018some_string\u2019","Example 3 demonstrates the use of a \u201cUNION SELECT\u201d attack combined with a \u201ccommenting\u201d technique. The SQL \u2018UNION\u2019 command combines the results of two queries. The attacker submits for firstName and lastName the values \u2018union select * from employeelist# and some_string, respectively. By doing that, the attacker adds another injected query, which can be fully controlled. The returned result is a union of the first query and the second query, which is an injected query. The constructed query looks as follows:","SELECT * FROM employeelist WHERE firstName=\u201cunion select * from employeelist #\u2019 and lastName=\u2018some_string\u2019","Related Work","A wide range of solutions that address the SQL injection phenomena have been proposed over the years. These solutions range from development of new programming techniques to fully automated frameworks for detection and prevention of these attacks. Some of the latest methods which handle SQL injections are reviewed next.","a) AMNESIA (see W. G. Halfond and A. Orso, \u201cAMNESIA: Analysis and Monitoring for NEutralizing SQL-Injection Attacks\u201d, Proceedings of the IEEE and ACM International Conference on Automated Software Engineering (ASE 2005), Long Beach, Calif., USA, November 2005) is a model based technique which uses static analysis and runtime monitoring. It is based on the assumption that it is possible to describe a model for legitimate SQL queries by analyzing the source code that generates them. In the static analysis part, AMNESIA uses offline program analysis to build a model for the legitimate and expected queries that can be generated by the application. It scans the source code in order to find the points where SQL queries are constructed. It then builds a model for each point. In the dynamic part, it monitors the dynamically generated queries at runtime and checks their compliance with the statically generated model. Queries that violate the model represent potential hazard and are thus prevented from being executed on the database while being reported.","b) CSSE (see T. Pietraszek and C. V. Berghe, \u201cDefending Against Injection Attacks through Context-Sensitive String Evaluation\u201d, Proceedings of Recent Advances in Intrusion Detection (RAID2005), 2005) is a technique for defending against SQL injection attacks by tracking the query fragments origin and taint information (if existing). This technique uses a context sensitive analysis to detect and reject queries which include untrusted inputs. At the first step, it marks with metadata all the user originated data in order to keep track of the fragments' origin. This is done by overriding Personal Home Page (PHP) interpreter functions. PHP is a scripting language originally designed for producing dynamic web pages. This way, the metadata allows distinguishing between developer-provided and user-provided strings. Then, it intercepts all the application programming interface (API) calls to the database layer. CSSE checks if there is any metadata associated with the SQL expression and then performs the necessary checks on the un-trusted parts.","c) Parse-Tree (see G. T. Buehrer, B. W. Weide, and P. A. G. Sivilotti, \u201cUsing Parse Tree Validation to Prevent SQL Injection Attacks\u201d, International Workshop on Software Engineering and Middleware (SEM), 2005) is based on comparing the grammatical structure of a SQL query and an expected query model at runtime. The first one is the original query, which does not include the user's input tokens. The second one is the resulting query after incorporating the user's input. The comparison is done between the parse trees of these queries. This technique determines if the two queries are equal by comparing their tree structures. It uses an API which provides parsing and string building capabilities. Concatenation of SQL query fragments is done using this API.","d) SQLRand (see S. W. Boyd and A. D. Keromytis, \u201cSQLrand: Preventing SQL Injection Attacks\u201d, Proceedings of the 2nd Applied Cryptography and Network Security (ACNS) Conference, pages 292-302, June 2004) performs instruction-set randomization of SQL keywords. It provides a framework which allows developers to create SQL queries using encoded keywords instead of normal ones. The SQL standard keywords are manipulated by appending thereto a random integer. This is something that cannot easily be guessed by an attacker. A proxy filter intercepts these queries to the database. Its primary obligation is to validate the random SQL query, de-randomize the keywords and then forward the SQL query to the database. A query, that includes a user attack, is evaluated as an invalid expression because hard-coded keywords are randomized while the user's input keywords are not. The system design includes a library for the developer to rewrite the keywords.","All the above proposed solutions suffer from the same deployment problem. Since every solution intercepts a SQL query after incorporating the user's input, the detection system cannot be installed physically before the web server itself. Since large organizations have many web servers, these systems have to be duplicated. This makes them less suited for deployment.","Yet another anomaly detection solution for the SQL injection attack problem is provided in U.S. patent application Ser. No. 12\/263,473 by Averbuch et al., filed Nov. 2, 2008. In this solution, multidimensional data which is reduced in dimension to form clusters of normal data, with abnormal data points residing outside the clusters.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},"The solution provided in the invention is anomaly based, in contrast with signature-based solutions such as SNORT\u00ae, which is an open source network intrusion prevention and detection utilizing a rule-driven language that combines the benefits of signature, protocol and anomaly based inspection methods. The present solution is based on the idea that \u201cnormal\u201d queries have certain common characteristics (features). These features are used to form a statistical model. Normal queries satisfy this model, whereas a SQL injection attack violates it. Thus, a SQL injection attack is classified as having an abnormal behavior.","The normal behavior of queries sent to a database is learned in a training phase by extracting relevant features from them and by building a unique, \u201cnormal\u201d profile that identifies them. Then, each newly arrived query sent to the database is analyzed in a detection phase according to the normal profile. Every deviation from the normal profile is classified as an anomaly.","The training phase includes processing of training data which includes several SQL queries. Each SQL query in the training data is transformed into a \u201cSQL token domain query\u201d, in a token domain characterized by an alphabet built from elements called tokens. Each symbol of the SQL query is searched for its associated token and is replaced with the associated token. A n-gram operation (or \u201canalysis\u201d) is applied to the SQL token domain queries to provide a threshold and an averaging vector.","In the detection phase, each newly arrived (or \u201cnew\u201d) SQL query is transformed into a new SQL token domain query. As in the training phase, each symbol of the SQL query is searched for its associated token and is replaced by it. The n-gram operation is applied together with the averaging vector and the threshold to the SQL token domain query to determine if the newly arrived SQL query is normal or abnormal.","Together with the ability to successfully detect SQL injection attacks, the solution provided herein can be deployed into the network's root (, segments A and B). In addition, it can be integrated into an existing infrastructure smoothly and transparently without the need to access any source code or to impose new programming methodologies.","According to the invention there is provided a method for detecting a SQL injection attack, including the steps of transforming a new SQL query into a new SQL token domain query and applying a n-gram analysis together with a threshold and an averaging vector to the new SQL token domain query to determine whether or not the SQL query is an injection attack query. In some embodiments, these steps are performed online. In some embodiments, these steps are performed offline.","In some embodiments of the method, the steps of transforming a new SQL query into a new SQL token domain query and applying a n-gram analysis together with a threshold and an averaging vector to the new SQL token domain query are preceded by the steps of transforming a plurality of SQL queries into respective SQL token domain queries and applying a n-gram analysis to the SQL token domain queries to obtain the threshold and the averaging vector. The latter two steps are performed offline.","According to the invention there is provided a computer-readable storage medium having computer readable code embodied therein, the computer-readable code used for detecting a SQL injection attack and comprising program code for transforming a new SQL query into a new SQL token domain query and program code for applying a n-gram analysis together with a threshold and an averaging vector to the new SQL token domain query to determine whether or not the SQL query is an injection attack query. In some embodiments, the computer-readable code further comprises program code for transforming a plurality of SQL queries into respective SQL token domain queries and program code for applying a n-gram analysis to the SQL token domain queries to obtain the threshold and the averaging vector.","According to the invention there is provided a method for detecting a SQL injection attack, comprising the steps of: in a training procedure, obtaining a threshold and an averaging vector from a plurality of SQL token domain queries; and, in a detection procedure, applying a n-gram analysis together with the threshold and the averaging vector to a new SQL token domain query to determine whether or not the SQL query is an injection attack query.","The anti-SQL injection attack solution provided by the invention was evaluated empirically through tests on real and simulated datasets and exhibited excellent results.","Mathematical Background","N-Gram Data Analysis","A n-gram is a sub-sequence of n overlapping items in a given sequence. The analyzed items are symbols that can be either characters or words. n-gram models are widely used in various areas of statistical natural language processing where it is applied to predict and validate grammatical inferences. Other common fields are signal processing, speech recognition, cryptography, network intrusion detection systems (see K. Wang, J. Parekh and S. Stolfo, \u201cAnagram: a content anomaly detector resistant to mimicry attack\u201d, Recent Advances in Intrusion Detection (RAID), 2006, pp. 226-248) and more. For example, the 2-gram character model in the sentence \u201cgood evening everyone\u201d is \u2018go\u2019, \u2018oo\u2019, \u2018od\u2019, . . . , \u2018ne\u2019. By using the n-gram model, one builds a histogram which represents the frequency of any sequence in an input sentence.","In our case, we apply the n-gram model to SQL queries which have already changed their textual representation to a token representation. A n-gram histogram for such a query has 12\u2033 bins, since each item can be one of 12 possible tokens. The n-gram processing generates large matrices. To make this processing practical, the matrices dimensionality is reduced by applying the random projection (RP) algorithm described next.","Random Projection","Random projection is a technique for dimensionality reduction. In RP, the original high-dimensional data is projected onto a lower-dimensional subspace using a random matrix whose columns have unit lengths. Although it is a \u201ccrude\u201d technique, RP has been found to be computationally efficient and sufficiently accurate for dimensionality reduction of high-dimensional data sets.","Let Xbe a matrix of size m\u00d7n, m is the number of observations (rows) and n is the original dimensionality of the data (columns). Let k be the desired, reduced dimensionality of the data (k<<n). Let Rbe a random matrix of size n\u00d7k where every column i, 1\u2266i\u2266k is randomly distributed and has unit length. Therefore, Xis the projection of the original data X onto a lower k-dimensional subspace using the random matrix R: X=X\u00b7R.","There are several ways how to choose random matrix R. Most often, the elements Rof R are Gaussian distributed, but there are other possibilities. Two choices with simpler distributions were proposed in D. Achlioptas, \u201cDatabase-friendly random projections\u201d, in Proceedings of the ACM Symposium on the Principles of Database Systems, pp. 274-281, 2001:",{"@attributes":{"id":"p-0037","num":"0036"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["R","ij"]},"mo":"=","mrow":{"mo":"{","mrow":{"mrow":[{"mtable":{"mtr":[{"mtd":[{"mrow":{"mo":"+","mn":"1"}},{"mrow":{"mi":["with","probability"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mfrac":{"mn":["1","2"]}}}]},{"mtd":[{"mrow":{"mo":"-","mn":"1"}},{"mrow":{"mi":["with","probability"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mfrac":{"mn":["1","2"]}}}]}]},"mo":["\u2062","\u2062"],"mstyle":{"mtext":{}},"msub":{"mi":["R","ij"]}},{"msqrt":{"mn":"3"},"mo":"\u2062","mrow":{"mo":"{","mrow":{"mtable":{"mtr":[{"mtd":[{"mrow":{"mo":"+","mn":"1"}},{"mrow":{"mi":["with","probability"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mfrac":{"mn":["1","6"]}}}]},{"mtd":[{"mn":"0"},{"mrow":{"mi":["with","probability"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mfrac":{"mn":["2","3"]}}}]},{"mtd":[{"mrow":{"mo":"-","mn":"1"}},{"mrow":{"mi":["with","probability"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mfrac":{"mn":["1","6"]}}}]}]},"mo":"."}}}],"mo":"="}}}}},"br":{},"sub":["m\u00d7n","n\u00d7k "]},"Building the SQL Token Domain Query","The model for transforming a SQL query into a SQL token domain query was developed according to certain guidelines:\n\n",{"@attributes":{"id":"p-0053","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Token name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Command","SQL commands: SELECT, INSERT, UPDATE, etc"]},{"entry":["Support","SQL reserved words which are not commands: FROM, "]},{"entry":[{},"WHERE, LIKE, etc"]},{"entry":["Log","SQL logical conditions: AND, OR, NOT, etc"]},{"entry":["Punc","SQL punctuation signs: ( ), [ ], *, etc"]},{"entry":["Comm","SQL comments signs: -, #, etc"]},{"entry":["Math","SQL mathematical signs: +, \u2212, \/, etc"]},{"entry":["Comp","SQL comparison signs: <, \u2266, >, \u2267, etc"]},{"entry":["Quote","SQL quotation marks: \u2018, \u201c, etc"]},{"entry":["Identifier","Table and column names, etc"]},{"entry":["Literal","Values which relate to user's input"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":[{},{}]},{"@attributes":{"id":"p-0054","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Token name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Begin","The beginning of a SQL query"]},{"entry":[{},"End","The end of SQL query"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{},{},{},{},{},{}]},"We apply the n-gram model to SQL token domain queries. For example, by applying a 2-gram on the previously given representation","begin-command-identifier-punc-identifier-punc-identifier-support-identifier-comp literal-end","we get the token frequency in a 2-gram model shown in Table 3:",{"@attributes":{"id":"p-0056","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"2-gram sequence","Frequency"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"begin-commad","1"]},{"entry":[{},"command-identifier","1"]},{"entry":[{},"identifier-punc","2"]},{"entry":[{},"punc-identifier","2"]},{"entry":[{},"identifier-support","1"]},{"entry":[{},"support-identifier","1"]},{"entry":[{},"identifier-comp","1"]},{"entry":[{},"comp-literal","1"]},{"entry":[{},"literal-end","1"]},{"entry":[{},"rest of sequences","0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0057","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"3-gram sequence","Frequency"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"begin-commad-identifier","1"]},{"entry":[{},"command-identifier-suuport","1"]},{"entry":[{},"identifier-support-identifier","1"]},{"entry":[{},"support-identifier -comp","1"]},{"entry":[{},"identifier-comp-quote","1"]},{"entry":[{},"comp-quote-literal","1"]},{"entry":[{},"quote-literal-quote","1"]},{"entry":[{},"literal-quote-end","1"]},{"entry":[{},"rest of sequences","0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"sup":"n "},"An exemplary process (method) and algorithm for detection of SQL injection attacks is described next. The process includes two steps: offline training from designated datasets and online detection of newly arrived SQL queries.\n\n",{"@attributes":{"id":"p-0059","num":"0062"},"figref":"FIG. 2","b":["200","202","206","202","204","206"]},{"@attributes":{"id":"p-0060","num":"0063"},"figref":"FIG. 3","b":["200","310","320","330","340","350","360","370"],"sub":["M","M ","M","M ","M ","M ","M","M ","M","V","V"]},"In one embodiment, in the detection phase represented by the flow shown in , the SQL queries are processed upon their arrival (if the processing is in real time). In an alternative embodiment, the SQL queries are processed offline. The inputs to the detection phase are a newly arrived SQL query and T and Afrom the training phase. Each newly arrived SQL query is transformed into a SQL token domain query in step . Then, an n-gram analysis is applied to this query, yielding matrix Fin step . Fis reshaped as a row vector (denoted by F) in step . Each entry in Fis divided by a corresponding entry in averaging vector Ain step  to obtain F. An inner product of Fwith a Gaussian random vector is computed in step . The result is denoted by S. The newly arrived SQL query is classified as either normal or abnormal based on a comparison of S with T performed in step . If S>T, the SQL query is abnormal. Otherwise, it is normal.","Detailed Description of the Training and Detection Algorithms","Notation:","SQL query: q","SQL queries training set: Q={q, . . . , q}","SQL tokens alphabet: {\u03c3, . . . , \u03c3}","SQL tokens pattern: w=\u03c3[\u03c3, . . . , \u03c3]*\u03c3","Number of elements in a set A is denoted by |A|","sql_token_modelfunc: A function which operates on a SQL query and produces its token representation","diffusion_maps_func: A function that operates on the training dataset and filters out its anomalies","Algorithm 1 describes the training phase. To simplify the presentation, the pseudo-code of the algorithm is described only for n=2. The pseudo-code can be generalized to any n. In this invention, the algorithm was tested for n=2, . . . , 12.","Algorithm 1: Training Phase\u2014Model Construction","Input: Q(step )",{"@attributes":{"id":"p-0063","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Output: T, A(steps 360 and 370)"},{"entry":"T = 0"},{"entry":"F(i,j) = 0,i,j = 1,..., N"},{"entry":"for l = 1 to |Q| do"},{"entry":"\u2003w=sql_token_model(q)\u2003\u2003\u2003(step 310)"},{"entry":"\u2003\u2003for k = 1 to |w|\u22121 do"},{"entry":"\u2003\u2003\u2003for i,j = 1 to N do"},{"entry":"\u2003\u2003\u2003\u2003if w(k) = \u03c3and w(k + 1) = \u03c3then (step 320 where n = 2)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003F(i,j) = F(i,j) + 1"},{"entry":"\u2003\u2003\u2003\u2003\u2003end"},{"entry":"\u2003\u2003\u2003end"},{"entry":"end"},{"entry":"F=(F(1,1),..., F(1,N),..., F(i,1),..., F(i,N),..., F(N,N))"},{"entry":"T(l,i) = F(i),i=1,...,N\u2003\u2003(step 330)"},{"entry":"l = l + 1"},{"entry":"end"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":[{},{},{},{}],"sub":["M ","M","V ","V"],"b":"350","sup":["2 ","2 "],"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["A(j)=A(j)+C(i,j), j=1, . . . , N","S=\u03a3C(i,j)\u00b7R(j) (step )","if S>T then\n        \n        ","end\n\nend\n"]}}}},{"@attributes":{"id":"p-0064","num":"0072"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mrow":{"msub":{"mi":["A","V"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"j"}},"mo":"=","mfrac":{"mrow":{"msub":{"mi":["A","V"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"j"}},"mi":"m"}},{"mi":"j","mo":"=","mn":"1"}],"mo":[",",",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msup":{"mi":"N","mn":"2"}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"step","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"370"}}}]}}}},"br":[{},{},{},{},{},{},{},{}],"sub":["V","M","1"],"b":["400","460","410"],"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":{"@attributes":{"id":"ul0008-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["for i, j=1 to N do\n        \n        ","end\n\nend\n\nF=(F(1,1), . . . , F(1,N), . . . , F(i,1), . . . , F(i,N), . . . , F(N,1), . . . , F(N,N))\n"]}}}},{"@attributes":{"id":"p-0065","num":"0078"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":[{"mrow":{"msub":{"mi":["F","V"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"j"}},"mo":"=","mfrac":{"mrow":[{"msub":{"mi":["F","V"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"i"}},{"msub":{"mi":["A","V"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"i"}}]}},{"mi":"i","mo":"=","mn":"1"}],"mo":[",",",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msup":{"mi":"N","mn":"2"}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"step","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"430"}}}]},{"mtd":[{"mrow":{"mi":"S","mo":"=","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"j","mo":"=","mn":"1"},"msup":{"mi":"N","mn":"2"}},"mo":"\u2062","mrow":{"mrow":[{"msub":{"mi":["F","V"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"i"}},{"msub":{"mi":["R","V"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"j"}}],"mo":"\u00b7"}}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"step","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"440"}}}]}]}}},"br":{},"b":"460","ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":{"@attributes":{"id":"ul0012-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":"q is classified as abnormal\n\nend\n\nelse\n\nq is classified as normal\n\nend\n\nend Algorithm 2\n"}}}},"Simulation Environment","In order to test the proposed algorithm, we built a physical network which simulates a typical network environment. The physical network included a client machine running a browser and a server machine running an environment which includes an HTTP server, a SQL database and a web site. In addition, it included four intrusion detection systems (IDS) connected in a row: two hardware appliances and two IDSs implemented in software. The simulation network was used for:\n\n",{"@attributes":{"id":"p-0067","num":"0090"},"figref":"FIG. 6"},"Client Machine","The client machine runs the SQL simulation engine. The engine was conceived and developed in order to provide a large variety of SQL queries. The simulator can operate in three different modes:\n\n","This query launches an attack which results in the retrieval of the Employeelist table.\n\n","The server machine runs a full web site environment. This environment includes three components: Apache HTTP server, PHP application and MySQL server.\n\n",{"@attributes":{"id":"p-0071","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE 5"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Employeelist table","Message table"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Column name","Data type","Column name","Data type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"Eid","INTEGER","Mid","INTEGER"]},{"entry":[{},"firstName","VARCHAR","Sender","VARCHAR"]},{"entry":[{},"lastName","VARCHAR","Date","DATETIME"]},{"entry":[{},"email_id","VARCHAR","Messageid","VARCHAR"]},{"entry":[{},{},{},"Subject","TEXT"]},{"entry":[{},{},{},"Body","TEXT"]},{"entry":[{},{},{},"Folder","VARCHAR"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0072","num":"0111"},"figref":"FIG. 7","ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":{"@attributes":{"id":"ul0025-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":["1. A query template is designed (denoted by A);","2. The user's input is extracted from the HTTP request (denoted by B);","3. The user's input is used to create a dynamically generated query (denoted by C);","4. The query is sent to the database (denoted by D);","5. The response is used to generate an HTML page which is then sent back to the user (denoted by E).\n\nFor example, when a user fills a web form with the values David and Johnson for \u201cfirstName\u201d and \u201clastName\u201d, respectively, then the following URL is generated:\n\nhttp:\/\/www.server.com\/query1.php?firstName=David&lastName=Johnson.\n\nNow, the application extracts the parameters from the HTTP request and embeds them in the query template. The following query is generated and sent to the database:\n\nSELECT * from employeelist where firstName=\u2018David\u2019 and lastName=\u2018Johnson\u2019\n\nExploitation of the site vulnerability is easily achieved by entering the string\n\n\u2018OR \u2018b\u2019=\u2018b.\n\nas parameter \u201clastName\u201d. The resulting query becomes:\n\nSELECT * from employeelist where firstName=\u2018David\u2019 and lastName=\u201cOR \u2018b\u2019=\u2018b\u2019\n\nThe database interprets everything after the WHERE token as a logical condition. This condition in this case is evaluated to be TRUE. Therefore, the database returns all the information about all the users.\n"]}}}},"To verify the algorithm, we used three pairs of datasets. Each pair included two datasets: one for the training phase and the other for the detection phase. Each dataset was a list of SQL queries. These datasets originated from two different sources: one pair was generated by a SQL engine and the other two were recorded in academic network and they are called ASQL. Here is a brief overview of the different sources:\n\n","The simulation datasets were generated by the SQL engine.","Training set: This dataset was generated by the simulator using the \u2018Normal Mode\u2019 option. It included 100000 random SQL queries.","Testing set: This dataset was generated by the simulator using the \u2018Mixed Mode\u2019 option with one attack per 50 valid queries. 2000 queries were generated this way. The attacks were chosen randomly and were embedded into this set.",{"@attributes":{"id":"p-0077","num":"0123"},"figref":["FIGS. 8 and 9","FIG. 8","FIG. 9"]},"From these graphs, we see that our system achieved 100% of true detections for n=4, . . . , 9 with 0% of false positive and false negative detections. When n=1, 2, 3, then this technique does not produce any false positive detection while having some false negative detection. Starting from n=10, we get false positive detections. High values of n introduce noise to the detection process. Nevertheless, they do not produce any false negative detection. Table 6 summarizes the results from .",{"@attributes":{"id":"p-0079","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"Gram ","Total ","False ","False "]},{"entry":[{},"number","detections","positive %","negative %"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","28","0","30"]},{"entry":[{},"2","39","0","2.5"]},{"entry":[{},"3","39","0","2.5"]},{"entry":[{},"4","40","0","0"]},{"entry":[{},"5","40","0","0"]},{"entry":[{},"6","40","0","0"]},{"entry":[{},"7","40","0","0"]},{"entry":[{},"8","40","0","0"]},{"entry":[{},"9","40","0","0"]},{"entry":[{},"10","41","0.05","0"]},{"entry":[{},"11","42","0.1","0"]},{"entry":[{},"12","48","0.4","0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"This capture started on 6 Jan. 2008 and ended on 8 Jan. 2008. More than 12000 queries were captured during this time. We used them as follows:","Training set: 10000 queries were used as the training set.","Testing set: 2000 queries were used as the testing set. In addition, we embedded several SQL injection attacks into it to make sure it undoubtedly included malicious queries.",{"@attributes":{"id":"p-0081","num":"0127"},"figref":["FIGS. 10 and 11","FIG. 10","FIG. 11","FIGS. 8 and 9"]},"Table 7 summarizes the results from .",{"@attributes":{"id":"p-0082","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 7"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"Gram ","Total ","False ","False "]},{"entry":[{},"number","detections","positive %","negative %"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","20","0","50"]},{"entry":[{},"2","40","0","0"]},{"entry":[{},"3","40","0","0"]},{"entry":[{},"4","41","0.05","0"]},{"entry":[{},"5","41","0.05","0"]},{"entry":[{},"6","41","0.05","0"]},{"entry":[{},"7","41","0.05","0"]},{"entry":[{},"8","41","0.05","0"]},{"entry":[{},"9","41","0.05","0"]},{"entry":[{},"10","41","0.05","0"]},{"entry":[{},"11","41","0.05","0"]},{"entry":[{},"12","41","0.05","0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"This capture started on 10 Jan. 2008 and ended on 21 Jan. 2008. More than 147,000 queries were captured during this time. We used them as follows:","Training set: 145000 queries were used as the training set.","Testing set: 2000 queries were used as the testing set. In addition, we embedded several SQL injection attacks into it to make sure it undoubtedly included malicious queries.",{"@attributes":{"id":"p-0086","num":"0132"},"figref":["FIGS. 12 and 13","FIG. 12","FIG. 13","FIGS. 8 and 9","FIGS. 12 and 13"]},{"@attributes":{"id":"p-0087","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 8"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"Gram ","Total ","False ","False "]},{"entry":[{},"number","detections","positive %","negative %"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","20","0","50"]},{"entry":[{},"2","40","0","0"]},{"entry":[{},"3","40","0","0"]},{"entry":[{},"4","40","0","0"]},{"entry":[{},"5","40","0","0"]},{"entry":[{},"6","40","0","0"]},{"entry":[{},"7","40","0","0"]},{"entry":[{},"8","40","0","0"]},{"entry":[{},"9","40","0","0"]},{"entry":[{},"10","40","0","0"]},{"entry":[{},"11","40","0","0"]},{"entry":[{},"12","40","0","0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The algorithm with n=3, . . . , 9 produces the best results. In the first experiment, n=4, . . . , 9 produce 100% of success, having neither false positive nor false negative detections. In the second experiment, n=2, 3 produce the best results, where n=4, . . . , 12 yield only one false positive detection. This can be attributed to the small size of the training set which was extremely small. Except this, the results are close to perfect. In the third experiment, n=2, . . . , 12 produce 100% success, having neither false positive nor false negative detections.","Comparison to Cisco IDS-4125","The testing procedure includes the following steps:",{"@attributes":{"id":"p-0089","num":"0000"},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":{"@attributes":{"id":"ul0029-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0030","list-style":"none"},"li":["1. Training: The training set was generated by the SQL simulation engine. It included 4000 valid queries.","2. Detection: The testing set included 14 different attack queries. They were based on the examples presented in the section on \u2018SQL injection attack examples\u2019 with minor changes. In addition, the testing set included 14 valid queries.\n\nOnly 2 of the 14 (15%) attacks were detected by CISCO4215. The attacks were detected by the signature-based engine due to the existence of suitable signatures in the IDS database. No attacks were detected by the anomaly detection engine in CISCO4215. There were no false positives detections.\n\nComparison to Imperva SecureSphere 5.0\n"]}}}},"The test included the following phases:\n\n","The test included only a dataset with 14 different attack queries. They were based on the examples presented in the section on \u2018SQL injection attacks examples\u2019 with minor changes. Since these IDSs are signature-based, there is no use of a training phase. The results show that AMS detected 9 of the 14 (65%) attacks, whereas SNORT failed to detect any attack.","Comparison Summary","A summary of the above comparisons between systems that detect SQL injection attacks is given in Table 9:",{"@attributes":{"id":"p-0093","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 9"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Machine\/Algorithm","Success in %"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SNORT","0"]},{"entry":[{},"AMS","65"]},{"entry":[{},"CISCO4215","15"]},{"entry":[{},"IMPERVA","36"]},{"entry":[{},"This invention","100"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"As seen, the four known solutions (SNORT, AMS, CISCO4215 and Imperva) had only limited to none success in the detection of SQL injection attacks. None of the four known solutions detected all the attacks. Thus, the systems protected by these solutions remain unsecured and vulnerable.","Tables 10 and 11 provide a full overview of the comparisons among the tested systems. The markings mean the following: S=SNORT, A=AMS, C=CISCO4215, I=IMPERVA, T=this invention, X=Failure, V=Success. The tests were conducted using the PHP application described in . The following queries, except the last one, are based upon the template:","SELECT * FROM employeelist WHERE firstName=\u2018\u201c.$firstName.\u201d\u2019 AND lastName=\u2018\u201c.$lastName.\u201d\u2019",{"@attributes":{"id":"p-0096","num":"0145"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"7pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 10"},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["Parameters and resulting query","S","A","C","I","T"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["firstName=\u2019 UNION SELECT * from employeelist#","X","V","V","V","V"]},{"entry":["lastName=some_ string",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018\u2019 UNION SELECT * from",{},{},{},{},{}]},{"entry":["employeelist#\u2019and lastName=\u2018some_string\u2019",{},{},{},{},{}]},{"entry":["firstName=\u2019 or 1=1#","X","V","X","V","V"]},{"entry":["lastName=some_string",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018\u2019 or 1=1\\#\u2019and",{},{},{},{},{}]},{"entry":["lastName=\u2018some_string\u2019",{},{},{},{},{}]},{"entry":["firstName=some_string","X","V","X","X","V"]},{"entry":["lastName=\u2019 or \u2018b\u2019=\u2018b",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018some string\u2019and",{},{},{},{},{}]},{"entry":["lastName=\u2018\u2019 or \u2018b\u2019=\u2018b\u2019",{},{},{},{},{}]},{"entry":["firstName=some_string","X","V","X","X","V"]},{"entry":["lastName=\u2019 or 2=2 or \u2018c\u2019=\u2018d",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018some_string\u2019 and",{},{},{},{},{}]},{"entry":["lastName=\u2018\u2019 or 2=2 or \u2018c\u2019=\u2018d\u2019",{},{},{},{},{}]},{"entry":["firstName=\u2019 or 1#","X","X","X","X","V"]},{"entry":["lastName=some_string",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018\u2019 or 1#\u2019 and",{},{},{},{},{}]},{"entry":["lastName=\u2018some_string\u2019",{},{},{},{},{}]},{"entry":["firstName=some_string","X","V","X","X","V"]},{"entry":["lastName=\u2019 or 1 or \u2018a\u2019=\u2018b",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018some_string\u2019 and",{},{},{},{},{}]},{"entry":"lastName=\u2018\u2019 or 1 or \u2018a\u2019=\u2018b\u2019"},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0097","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"7pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 11"},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["Parameters and resulting query","S","A","C","I","T"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["firstName=some_string","X","X","X","X","V"]},{"entry":["lastName=\u2019 or 1 or lastName=\u2018b",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018some_string\u2019 and",{},{},{},{},{}]},{"entry":["lastName=\u2018\u2019 or 1 or lastName=\u2018b\u2019",{},{},{},{},{}]},{"entry":["firstName=\u2019; DROP table new_table#","X","V","X","V","V"]},{"entry":["LastName=some_string",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018\u2019; DROP table new_table#\u2019 and",{},{},{},{},{}]},{"entry":["lastName=\u2018some_string\u2019",{},{},{},{},{}]},{"entry":["firstName=\u2019; CREATE table new_table(size int)\\#","X","X","X","V","V"]},{"entry":["lastName=some_string",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018\u2019; CREATE table",{},{},{},{},{}]},{"entry":["new_table(size int)",{},{},{},{},{}]},{"entry":["#\u2019 and lastName=\u2018some_string\u2019",{},{},{},{},{}]},{"entry":["firstName=\u2019; INSERT into table new_table values","X","V","V","X","V"]},{"entry":["(5)\u2014",{},{},{},{},{}]},{"entry":["lastName=some_string",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018\u2019; INSERT into new_score",{},{},{},{},{}]},{"entry":["table values (5)",{},{},{},{},{}]},{"entry":["--\u2019 lastName=\u2018some_string\u2019",{},{},{},{},{}]},{"entry":["firstName=\u2019; INSERT into table new_table","X","V","X","X","V"]},{"entry":["values(5)\u2014",{},{},{},{},{}]},{"entry":["lastName=some_string",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018\u2019; INSERT into new_table",{},{},{},{},{}]},{"entry":["values(5)",{},{},{},{},{}]},{"entry":["--\u2019 lastName=\u2018some_string\u2019",{},{},{},{},{}]},{"entry":["firstName=\u2019; INSERT into table new_table values(5)","X","V","X","X","V"]},{"entry":["#",{},{},{},{},{}]},{"entry":["lastName=some_string",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018\u2019; INSERT into new_table",{},{},{},{},{}]},{"entry":["values(5) #\u2019",{},{},{},{},{}]},{"entry":["lastName=\u2018some_string\u2019",{},{},{},{},{}]},{"entry":["firstName=\u2019; WAITFOR delay \u20180:0:10\u2019#","X","X","X","V","V"]},{"entry":["lastName=some_string",{},{},{},{},{}]},{"entry":["WHERE firstName=\u2018\u2019; WAITFOR delay \u20180:0:10\u2019#\u2019",{},{},{},{},{}]},{"entry":["and",{},{},{},{},{}]},{"entry":["lastName=\u2018some_string\u2019",{},{},{},{},{}]},{"entry":["eid=1 or 1","X","X","X","X","V"]},{"entry":"WHERE eid=1 or 1"},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}}}},"As seen from Tables 10 and 11, neither the known anomaly-based IDSs nor the signature-based IDSs had satisfactory performance in detecting SQL injection attacks. Detection percentage varies from very low (SNORT) to Medium (AMS). The signature-based IDSs succeeded in detecting attacks which matched existing signatures in their signatures database. New attacks or old ones with minor changes in them could not be detected this way. The anomaly-based IDSs did not succeed either. Despite the fact that a profile was dynamically established, the system could not identify anomalous behaviors. The signature-based mechanism succeeded partially.","In summary, the invention disclosed herein delivers complete success in identifying all the SQL injection attacks by using the described approach for anomaly-based detection.","The various features and steps discussed above, as well as other known equivalents for each such feature or step, can be mixed and matched by one of ordinary skill in this art to perform methods in accordance with principles described herein. Although the disclosure has been provided in the context of certain embodiments and examples, it will be understood by those skilled in the art that the disclosure extends beyond the specifically described embodiments to other alternative embodiments and\/or uses and obvious modifications and equivalents thereof. Accordingly, the disclosure is not intended to be limited by the specific disclosures of embodiments herein. For example, any digital computer system can be configured or otherwise programmed to implement the methods disclosed herein, and to the extent that a particular digital computer system is configured to implement the methods of this invention, it is within the scope and spirit of the present invention. Once a digital computer system is programmed to perform particular functions pursuant to computer-executable instructions from program software that implements the present invention, it in effect becomes a special purpose computer particular to the present invention. The techniques necessary to achieve this are well known to those skilled in the art and thus are not further described herein.","Computer executable instructions implementing the methods and techniques of the present invention can be distributed to users on a computer-readable medium and are often copied onto a hard disk or other storage medium. When such a program of instructions is to be executed, it is usually loaded into the random access memory of the computer, thereby configuring the computer to act in accordance with the techniques disclosed herein. All these operations are well known to those skilled in the art and thus are not further described herein. The term \u201ccomputer-readable medium\u201d encompasses distribution media, intermediate storage media, execution memory of a computer, and any other medium or device capable of storing for later reading by a computer a computer program implementing the present invention.","Accordingly, drawings, tables, and description disclosed herein illustrate technologies related to the invention, show examples of the invention, and provide examples of using the invention and are not to be construed as limiting the present invention. Known methods, techniques, or systems may be discussed without giving details, so to avoid obscuring the principles of the invention. As it will be appreciated by one of ordinary skill in the art, the present invention can be implemented, modified, or otherwise altered without departing from the principles and spirit of the present invention. Therefore, the scope of the present invention should be determined by the following claims and their legal equivalents.","All patents, patent applications and publications mentioned in this specification are herein incorporated in their entirety by reference into the specification, to the same extent as if each individual patent, patent application or publication was specifically and individually indicated to be incorporated herein by reference. In addition, citation or identification of any reference in this application shall not be construed as an admission that such reference is available as prior art to the present invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention is herein described, by way of example only, with reference to the accompanying drawings, wherein:",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
