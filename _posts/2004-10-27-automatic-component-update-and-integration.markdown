---
title: Automatic component update and integration
abstract: An application development environment is described that updates one or more component tools offered in the application development environment. The application development environment determines the address of a server site related to the application under edit. After accessing this server site, the application development environment searches for one or more components related to the application being edited. The application development environment downloads and compares the server site components with one or more local components associated with the application. If a difference is detected, and a user authorizes the update, the application development environment revises the local components with the downloaded components and updates the component tools to facilitate presentation of the new components to the developer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07890919&OS=07890919&RS=07890919
owner: Adobe Systems Incorporated
number: 07890919
owner_city: San Jose
owner_country: US
publication_date: 20041027
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates, in general, to application development environments and, more specifically, to an automatic update and integration of software components.","Over the last ten years, computers and computing technology have grown tremendously due, in no small part, to the growth and reach of the Internet. Computer applications, once delivered on a disk in some kind of marketing package, are now available and even operable over the Internet. These Internet applications allow consumers to take advantage of the logic behind the application without buying the software for installation on a local computer. The prevalence of Internet connections has also allowed developers to create automatic updating features for computer applications. As such applications are started up, an update feature will typically establish a connection with a remote server over the Internet to search for any updates to the code or features of the application and download those to the application. The user may then execute the update file and restart the application once the update file has finished updating the application. Application development, as a consequence, now encompasses not only building or coding stand-alone software applications that users can buy on disk or download from a remote server, but also developing Internet-active applications that can either run on a client machine and check for updates and\/or other information via the Internet or run on a remote server, while serving their logic to client users over the Internet. Application development environments have also evolved correspondingly to account for the development process including such interactions with remote servers.","Programming techniques have also evolved during the growth of computing technology. Modular programming techniques, such as Object Oriented Programming (OOP), have been developed that encourages reuse and\/or interchange of pieces of software between or within programs. Self-sufficient modules may be created that contain the data and processing and then formed as objects within the program. Thus, a developer would spend the time to develop the module or class once and then be able to use it in various instances throughout one or a number of programs. One such modular concept is the use of components for developing interactive applications.","Components are modular pieces of software that have a variable set of parameters that allows a developer to change the appearance and\/or function of the component object at runtime. Application development environments such as MACROMEDIA INC.'s MACROMEDIA FLASHMX\u2122, MACROMEDIA INC.'s DREAMWEAVER\u2122, and the like, include various pre-built components that developers may use in building various applications. The components generally include parameters that the developer may set in order to customize the application of the component as desired by the developer. By using components, developers may save considerable time creating complex applications. Components include items such as interface controls, including radio buttons, check boxes, input fields, scroll bars, and the like; data components, which allow loading and manipulating information from data sources; media components, that allow playback and control of streaming media; manager components, that allow managing non-visual components such as focus or depth, popups, styles, and the like; as well as various other program elements.","Application development environments that utilize components typically provide various interface elements to the developer in order to assist him or her in deploying components more easily. Insert bars, code hinting, and tag or component inspectors are each examples of different interface elements that some application development environments may provide to facilitate the use of components. An insert bar is typically a toolbar that displays icons or buttons corresponding to the available components. When the developer selects the icon that corresponds to the desired component, the application development environment creates an instance of the component and places it in the editing region.","Application development environments typically employ one or both of a code view edit mode, in which the actual code or script is presented to the user for text-editing, a design view mode, in which the code of the underlying application is rendered to the developer as it would be rendered in operation (e.g., a Hypertext Markup Language (HTML) page being rendered in a Web browser). In the design view mode, the developers generally graphically manipulate the application as rendered on the display. When the application development environment inserts the component selected, it will place the component in which ever edit mode the developer is using. The developer would then be able to manipulate the position and parameters of the component to fit it within the application being developed. Therefore, in order to properly display the component on the design view canvas, the application development environment typically has access to the visual representation of the component. In existing application development environments, only the visual representation of standard or built-in components are available. Any components that are design by the user or other individual developers will not be available for visual rendering in the design view surface or canvas of the application development environment. Thus, existing application development environments typically cannot display user-created components on the design view surface or canvas.","Code hinting is a help feature that is used by many application development environments in a code view editing mode. As the user types code, a popup box appears near the insertion point that lists possible code, components, or application programming interface (API) methods or commands associated with the input typed by the developer. The developer may then scroll through the list and pick the specific component, tag, method, or the like from the displayed list instead of typing the desired information to completion. Again, as the developer makes the particular selection, the application development environment inserts the code and\/or visual rendering of the component or object in the edit region.","Tag or component inspectors are a version of a property inspector that is directed specifically to programming tags or commands rather than the properties of an object. A tag or component inspector is typically a visual interface element that presents the available information on a highlighted tag or piece of code. It generally lists the properties, settings, elements, and the like of the highlighted code and also usually provides an edit interface that allows the developer to edit the code from within the tag inspector rather than in the code view or design view of the editing region. For example, a developer may highlight a button component tag, which causes the properties of the button component to appear on the tag inspector. If the developer desired to modify the shape or color of the button component, he or she could manipulate the color and\/or shape properties directly in the tag inspector interface. As the user updates the properties in the tag inspector, the editing region updates to reflect either the updated code or re-renders to the updated visual representation of the component.","Many application development environments also allow users and developers to create their own components. The developers may save these customized components along with the pre-existing components for use in future projects. However, application development environments generally cannot include the user-defined custom components in the various component interfaces, such as the insert bar, code hinting, and tag inspectors. Moreover, the user-defined custom components cannot be displayed on the design view canvas or surface. These component interfaces and the design view canvas are typically limited to the objects that are defined by the manufacturer before each version of the software ships. Therefore, developers would have little opportunity to modify the source or object code of the application development environment. Moreover, once the application has been manufactured and shipped, new components developed by third parties or the manufacturer itself typically may not be updated into the component interface until any subsequent software version release.","The present invention is directed to a system and method for updating components and component tools within an application development environment. When a developer opens an application for editing in an application development environment, the application development environment determines a server site that is connected with the application under edit. The application development environment accesses that server site over the Internet, local area network (LAN), wide area network (WAN), or the like and searches for any components or component archives that maybe compatible or associated with the application under edit. The application development environment downloads copies of these components or component archives to the developer's local computer.","The downloaded components are compared against the local components to determine whether or not there are any differences. If differences are detected, the developer may select to update the local components with the downloaded components. Using the downloaded components, the application development environment updates any of the component tools to reflect the updated components. Within this process, the application development environment generates component information files from the downloaded components that may be used by the component tools to present the component functionality to the developer.","The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter which form the subject of the claims of the invention. It should be appreciated that the conception and specific embodiment disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present invention. It should also be realized that such equivalent constructions do not depart from the invention as set forth in the appended claims. The novel features which are believed to be characteristic of the invention, both as to its organization and method of operation, together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood, however, that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["10","101","100","101","101","103","100","103"]},"After the application development environment connects with remote server  and finds the various component archives or component files in the class paths, it downloads the components on remote server  defined for the application development environment into a temporary location on client computer . It then compares the downloaded components to the components available locally on client computer . If the application development environment discovers new components or determines that any of the components have been deleted or modified, the a dialog box is presented to the user informing the user of the discovered components and requesting to load the components from remote server  into the application development environment running on client computer . If the user selects to replace the local components with the downloaded components, the application server copies all of the components downloaded from remote server  into the component data structure, thus, completely replacing the set of components operable on the application development environment.","As the application development environment replaces the component set, it also updates any available component interfaces, such as insert bars, code hinting, component inspectors, or the like, with the information about the newly downloaded components. Therefore, as the user continues working with application development environment, any component interface elements available to the user will be populated with the new or modified components for use in developing the various applications. The update process occurs at runtime, such that the user is not required to re-start the application in order to install the downloaded components.","Remote server  may be a server provided by the manufacturer of the application development environment, or may be a server maintained by another user or third party. If provided by a third party, the application development environment may have the capability to accept user input of the address for such third party servers along with the expected class paths for the components. Various individuals may create custom components to be loaded onto remote server . For example, a developer operating client computer  may develop one or more custom components that he or she wishes to share with the developer community. The developer would upload these custom components to remote server  via Internet  in the locations appropriate for components compatible with the application development environment. Therefore, when the user of client computer  starts the application development environment, he or she may be able to download custom components from remote server  that were created by the developer at client computer .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2A","FIG. 2A","FIG. 1","FIG. 1"],"b":["20","101","20","20","103","20","103","202","204","20","202","204"]},"In the example illustrated in , the developer has dragged DateField component  onto stage  for DateField component instance . Application development environment  is shown with a design view mode of editing stage . The developer's editing actions cause the visual representation of DateField component  to be presented as DateField component instance  on stage . The addition of DateField component  to application development environment  also includes adding the underlying code used to program the visual representation and functionality of DateField component . Thus, as the developer places DateField component instance  onto stage , the corresponding code is copied into the code defining the application being developed.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2B","FIG. 1"],"b":["20","204","206","20","103","20","204"]},"The developer is shown to have selected monthNames parameter  from component inspector . When this selection occurs, property dialog  is presented to the user that provides an interface for the user to modify the selected parameters of the component, DateField component instance . Thus, the component interface functionality of application development environment  is populated with the information regarding DateField component , such that component inspector  and, consequently, property dialog  is able to present the appropriate component parameters to the user for manipulation.","In the example illustrated in , application development environment  is shown to be the MACROMEDIA FLASH MX\u2122 development environment. As such, the application developed within stage  is developed in an FLA file format, which is the native file format for the MACROMEDIA FLASH MX\u2122 development environment. When the developer is ready to deploy the MACROMEDIA FLASH\u2122 application, the FLA file is compiled into a Small Web File (SWF) format. A SWF is the movie clip that runs the MACROMEDIA FLASH\u2122 application on an interactive multimedia runtime container, such as the MACROMEDIA FLASH\u2122 PLAYER. MACROMEDIA FLASH\u2122 components are compiled into SWF Component (SWC) files that may be loaded into the MACROMEDIA FLASH MX\u2122 development environment and, thereafter, deployed and\/or consumed by the resulting SWF applications. In practice, SWC files may be generated using MACROMEDIA FLASH MX\u2122, FLEX BUILDER\u2122, or even a MACROMEDIA FLEX\u2122 server.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3","b":["30","103","301","301","301","302","306","303","301"]},"Component schema  is a descriptive file that describes, in detail, the attributes and functionality of the component. Component schema  includes the particular class represented by the underlying component, it also includes what additional assets or tags that are used to instantiate the component, whether the component is visible in a design view mode of application development environment , the styles, events, effects, and properties of the component, any available information about the types of each property, including the possible values and any default values, whether the property can be databound to an outside source, any default events for triggering actions, and the like. CAR  also includes component code , which is the actual code that implements the underlying component. When the developer adds a component to an application, component code  is inserted into the code supporting the application under development.","CAR  also includes component executable . Component executable  is executable code, in either compiled format or un-compiled format, that is executed by user interface  in displaying the component in the design view canvas or surface. If component executable  is contained in un-compiled format, component handler  runs it through the compiler in application development environment . When operating in a design view editing mode, application development environment  uses component executable  to render and display the component.","It should be noted that many of the files making up CAR  are automatically generated by application development environment  as a developer creates a custom component. Such technology for generating the archive files is well-known in the art. For example, SWC files, which are component archive files native to MACROMEDIA FLASH\u2122, FLEX\u2122, and the like, may be generated for the developer in the MACROMEDIA FLASH\u2122 development environment or the FLEX\u2122 compiler. The component code, which may be written in ACTIONSCRIPT\u2122, or the like, is processed by the MACROMEDIA FLASH\u2122 development environment or the FLEX\u2122 compiler, which creates the other archive files and packages the entire group into the SWC file.","In operation of application development environment , CAR  arrives from remote server . Component handler  processes CAR  into its various pieces and uses those pieces to populate the various component features and component interfaces offered by application development environment . Insert bar  is illustrated as a static array of nodes, ---N. Nodes ---N contains a static icon representation of the standard components offered by application development environment . The static array for insert bar  is usually created by the manufacturer of application development environment  prior to release of the application. Instead of remaining static, however, as was the case in prior application development environments, application development environment  defines dynamic array  within node - of insert bar . Thus, as new components are received from remote server , dynamic array  is supplemented with any new component icons in nodes ---M.","Component handler  strips icon  from CAR  and adds it to one of the nodes of dynamic array , for example, node -. therefore, when application development environment  updates user interface (UI) , the graphical interface for insert bar  is redrawn with the new component icon installed from node -. Thus, the various embodiments of the present invention operate to make the static array defined for insert bar  dynamic.","Application development environment  also includes code hinting , which supplies code hints to a developer in the code view editing mode, and tag inspector , which supplies a visual editing interface for components selected in the design view editing mode. Both code hinting  and tag inspector  are component interfaces that use a library of tag informations in tag info  to populate the hinting portions offered by code hinting  and the editing interface offered by tag inspector . Component handler  strips out classes  and component schema  from CAR  for processing by tag info generator . Tag info generator  reads through component schema  and classes  to and generates the tag info files stored in tag info . As noted above, tag infos contain a wealth of information that describes the use and operation of the underlying component. Therefore, as a developer is operating in the code view editing mode of UI , application development environment  will execute the logic of code hinting , which pulls the tag informations from tag info  corresponding to the components that potentially match the code being entered by the developer and populates the code hinting interface displayed on UI  with those tags corresponding to the potentially matching components.","Similarly, when the developer is operating in the design view editing mode of UI , application development environment  executes the logic of tag inspector , which pulls the tag information from tag info  corresponding the component that the developer has selected on UI . The logic of tag inspector  populates the tag inspector interface on UI  with the appropriate tags, properties, and property editing tools that are defined in the tag info supporting the selected component.","It should be noted that in additional and\/or alternative embodiments of the present invention, component handler  includes logic that monitors the components and component archives arriving from remote server  and automatically repopulates dynamic array  of insert bar , and tag info  with the new, modified, or deleted components. Therefore, the developer is not required to restart application development environment  to implement new or changed component groups.","Additional and\/or alternative embodiments of the present invention may be implemented in application development environments directed to the development of Rich Internet Applications (RIAs). An example of such an application development environment is MACROMEDIA INC.'S FLEX BUILDER\u2122. The additional and\/or alternative embodiments of the present invention are not limited to operation in the FLEX BUILDER\u2122 development environment, but may be used in various other application development environments. FLEX BUILDER\u2122 is a development environment utilizing server-side code that assists in developing rich RIAs for application with MACROMEDIA INC.'s FLEX\u2122. FLEX\u2122 is a presentation server that delivers standards-based runtime services for deploying the presentation tier of rich client applications developed in MACROMEDIA, INC.'s MXML\u2122. MXML\u2122 is a specialized, XML-based language for developing RIAs and is native to the FLEX BUILDER\u2122 development environment. It allows definition of the final appearance of an application's user interface without specifying a time-based sequence of steps for constructing that interface, but also includes availability of program logic, delivered by ACTIONSCRIPT\u2122, or the like, within the declarative MXML\u2122 statements. The FLEX\u2122 server utilizes an interactive multimedia runtime container (iMRC), specifically a MACROMEDIA FLASH\u2122 player, as a container for delivering the rich media applications to a client. FLEX BUILDER\u2122 also uses an iMRC, specifically a MACROMEDIA FLASH\u2122 player, to deliver its design view editing canvas or surface to the developer.","The FLEX\u2122 server is essentially a Web Archive (WAR) file deployed on an application server, such as SUN MICROSYSTEM INC.'s JAVA 2 ENTERPRISE EDITION\u2122 (J2EE\u2122) server. The FLEX\u2122 server includes a compiler that uses MXML\u2122 and ACTIONSCRIPT\u2122 files along with a set of built-in components and converts the files into SWF movie files that run in a Web browser with the MACROMEDIA FLASH\u2122 player. Thus, as the developer develops a RIA using MXML\u2122, ACTIONSCRIPT\u2122, and any built-in FLEX\u2122 components, the compiler creates the SWF that operates the RIA. A user would then use a particular Uniform Resource Locator (URL) request in a Web browser to access the RIA SWF.","Because FLEX BUILDER\u2122 is a development environment capable of developing Internet applications, the resulting application may be deployed on some Internet-accessible server. Developers may have several different applications under development at any given time. Moreover, depending on the purpose of the given RIA or Internet application, components that are particularly suited for one application may not be suited for other applications. As the developer gathers various components, the component interfaces for the application development environments may become cluttered with various components and component groups, many of which may only be useful for one or two specific applications.","It should be noted that in additional and\/or alternative embodiments of the present invention, components may be associated with a particular application under development corresponding to a location of the server where the final application will be deployed. Therefore, when the developer switches focus from one application to another within the application development environment, the component interface elements will repopulate with the components associated with that application.","In commercial application development, multiple developers typically work together in a development team with multiple persons working on the same application. As one developer creates new components that are applicable to the application, he or she may store the component archive on the server site that each developer may access either over the Internet or through a local area network (LAN), file transfer protocol (FTP), or the like. One developer starting up the application for editing will cause the application development environment to access the server site for component updates. Therefore, each of the developers on the development team may have access to all of the components.","In an application development environment, such as FLEX BUILDER\u2122, the FLEX\u2122 sites have a site definition associated with it, such that FLEX BUILDER\u2122 searches the site definition to find the location of the server location. A configuration file is, thereby, maintained for the application. The configuration file contains the different class paths for the application components. The application development environment uses these class paths, while accessing the server location to find the areas on the server that contains the defined component groups. In the FLEX\u2122 and FLEX BUILDER\u2122 environments, components may be represented as SWC files, MXML\u2122, and\/or ACTIONSCRIPT\u2122. Therefore, the application development environment would download all such SWC, MXML\u2122, and\/or ACTIONSCRIPT\u2122 files it locates at the various class paths on the server.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4","b":["400","401","402","403","404","407","405","406","404","407"]},"It should be noted that although examples of the various embodiments of the present invention have been described using the details of specific application development environments, such as FLEX BUILDER\u2122, DREAMWEAVER\u2122, FLASH MX\u2122, and the like, the additional and\/or alternative embodiments of the present invention may be implemented using any type of application development environment that utilizes components in its programming environment. In addition to the specific examples from MACROMEDIA INC., additional example application development environments may include BORLAND SOFTWARE CORPORATION's DELPHI\u2122, JBUILDER\u2122, MICROSOFT CORPORATION's FRONTPAGE\u2122, ADOBE SYSTEMS INC.'s GO LIVE\u2122, or the like. The various embodiments of the present invention are not limited to specific examples of such application development environments.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 5","b":["500","50","50","50","50","50","500"]},"Component update dialog  presents each of the downloaded components to the developer by name  and status . Component  is shown to the developer as being deleted from the group of components associated with the application under edit. Component  is shown to be modified, while components , including components -, are each new. The developer may then select OK button  to update the local components with the components downloaded from the server site connected with the application under edit.","When the user of an application development environment, such as FLEX BUILDER\u2122, chooses to update the local components with the components downloaded from the server, FLEX BUILDER\u2122 uses a command line tool to convert any MXML\u2122 and ACTIONSCRIPT\u2122 components into SWC files. Each of the SWC files is then read in order to create an internal representation of the component tags, attributes, class names, and the like. FLEX BUILDER\u2122 then generates an MXML\u2122 file from the internal representations that includes an instance of each of the components that are being updated. Once the MXML\u2122 file has been created, with each instance of every component, another command line tool converts this MXML\u2122 file into a SWF, thus, packaging all of the downloaded\/updated components into a single file, such as a SWF file, that contains compiled executable code that may render the components in a design view canvas or surface. An application programming environment, such as FLEX BUILDER\u2122, may provide a default name for such a SWF file that contains all of the updated components. This single component file, the SWF file in this example, may then be loaded by the design view canvas or surface in order to render instances of component which may then be directly manipulated by a developer.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 6","FIG. 5"],"b":["50","600","50","601","602","601","603","604","507"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 7","FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"b":["50","708","50","700","708","708","701","512","702","507","2","703","508","704","508","2","705","510","706","511","707","708"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 8A","b":["80","800","80","800","80","801","800","800","801","800"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 8B","FIG. 3"],"b":["80","800","80","313","800","802","800","802","800"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 9","b":["901","902","903","904","905","906","907"]},"If a difference is detected in step , a dialog box is presented, in step , to a user for update selection. The application development environment determines, in step , whether the user authorizes an update. If the user does not authorize an update, no further action is taken, in step . However, if the user authorizes such an update, in step , the local components are revised with the downloaded component archives. Once revised, the application development environment begins updating any component interfaces or component tools.","In step , a determination is made whether the application development environment has an insert bar. If an insert bar does exist, component icons from the downloaded component archives are inserted, in step , into the insert bar logic. In addition, tag infos are generated, in step , using the class definitions, component schema, and component code from the downloaded component archives. These tag infos are then stored into a tag info library associated with the application in step  A determination is made, in step , whether the application development environment has a code hinting feature. If so, then the code hinting logic is provided access to the tag info library in step . A determination is also made, in step , whether the application development environment has a tag inspector. If so, then the tag inspector logic is provided access to the tag info library in step .","The program or code segments making up the various embodiments of the present invention may be stored in a computer readable medium or transmitted by a computer data signal embodied in a carrier wave, or a signal modulated by a carrier, over a transmission medium. The \u201ccomputer readable medium\u201d may include any medium that can store or transfer information. Examples of the computer readable medium include an electronic circuit, a semiconductor memory device, a ROM, a flash memory, an erasable ROM (EROM), a floppy diskette, a compact disk CD-ROM, an optical disk, a hard disk, a fiber optic medium, a radio frequency (RF) link, and the like. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, and the like. The code segments may be downloaded via computer networks such as the Internet, Intranet, and the like.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 10","b":["1000","1001","1002","1001","1001","1001","1002","1003","1004","1002","1003","1004"]},"Bus  is also coupled to input\/output (I\/O) controller card , communications adapter card , user interface card , and display card . The I\/O adapter card  connects storage devices , such as one or more of a hard drive, a CD drive, a floppy disk drive, a tape drive, to computer system . The I\/O adapter  is also connected to a printer (not shown), which would allow the system to print paper copies of information such as documents, photographs, articles, etcetera. Note that the printer may be a printer (e.g. dot matrix, laser, etcetera.), a fax machine, scanner, or a copier machine. Communications card  is adapted to couple the computer system  to a network , which may be one or more of a telephone network, a local (LAN) and\/or a wide-area (WAN) network, an Ethernet network, and\/or the Internet network. User interface card  couples user input devices, such as keyboard , pointing device , etcetera to the computer system . The display card  is driven by CPU  to control the display on display device .","Although the present invention and its advantages have been described in detail, it should be understood that various changes, substitutions and alterations can be made herein without departing from the invention as defined by the appended claims. Moreover, the scope of the present application is not intended to be limited to the particular embodiments of the process, machine, manufacture, composition of matter, means, methods and steps described in the specification. As one will readily appreciate from the disclosure, processes, machines, manufacture, compositions of matter, means, methods, or steps, presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized. Accordingly, the appended claims are intended to include within their scope such processes, machines, manufacture, compositions of matter, means, methods, or steps."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention, reference is now made to the following descriptions taken in conjunction with the accompanying drawing, in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
