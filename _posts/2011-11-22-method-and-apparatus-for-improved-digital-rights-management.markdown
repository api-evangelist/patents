---
title: Method and apparatus for improved digital rights management
abstract: A method and apparatus for improved digital rights management is provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08863310&OS=08863310&RS=08863310
owner: Samsung Information Systems America, Inc.
number: 08863310
owner_city: San Jose
owner_country: US
publication_date: 20111122
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY CLAIM","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF ONE OR MORE EMBODIMENTS"],"p":["This application claims priority under 35 U.S.C. Section 120 and is a continuation-in-part of U.S. patent application Ser. No. 13\/267,810, filed on Oct. 6, 2011, and titled \u201cMethod and Apparatus for Improved Digital Rights Management, which is incorporated by reference herein.","The disclosure relates generally to an improved method and apparatus for digital rights management.","In recent years, mobile devices (such as cellular phones, PDAs, iPhones\u00ae and iPads\u00ae by Apple Computer\u00ae, and Droid\u00ae devices by Google\u00ae and others) have become more powerful than prior generations of mobile devices and now offer additional functionality beyond just voice communication. For instance, many mobile devices today allow users to perform web browsing on the Internet, receive emails, and store and play video and audio content. Such devices contain increasingly powerful processors and enhanced video and audio capability. It is typical now for users to store audio, video, and other data files on numerous computing devices, including mobile devices. For example, a user might store an MP3 file containing a song on his or her mobile device, on a PC at home, in a cloud server, or on other computing devices. This environment is presenting increasingly complex challenges in the realm of digital rights management, whereby copyright owners (such as record labels and movie studios) attempt to prevent unauthorized digital copies of copyrighted works from being made.","Record labels and movie studios often work in conjunction with software companies to create applications that facilitate the use, storage, or sharing of digital content owned by the record label or movie studio. For example, in the realm of computing devices, record labels and movie studios will work with software companies to validate and approve the proposed software application. Although the record label or movie studio may trust that the proposed software application is not designed to allow unauthorized copies of digital content to be created, they often want additional assurances that the software application will not be tampered with by knowledgeable users, such as hackers, who wish to create unauthorized copies. Thus, record labels and movie studios want to be able to detect if the application on a certain computing device has been altered from its original state, which might suggest that a \u201chacker\u201d had changed the software and is intended to create unauthorized copies of the content once it is loaded onto the computing device. Record labels and movie studios also want to be able to detect if the computing device itself or its operating system has been tampered with in a way that might enable a user to create unauthorized copies.","Record labels and movie studios sometimes provide licenses to play digital content subject to certain time restrictions. For example, a customer might purchase a license to watch a video within a 7-day \u201crental window\u201d after the initial purchase to be completed within a 24-hour \u201cplay window\u201d after the user initially begins playing the digital content. If a user purchases a license on Sunday at 7 pm, that user would then be permitted to watch the video at any point up until the following Sunday at 7 pm, but once the user started watching the video, he or she would need to complete the viewing within 24 hours. This is a standard licensing practice.","One challenge of this business model is that a customer can attempt to \u201ctrick\u201d the system by purchasing a license from a computing device and then changing the system clock on the computing device, which the computing device and its applications utilize to derive the current date and time. For example, a user could purchase a time-restricted license and then change the system clock on the computing device so that he or she could have a rental window larger than 7 days in which to watch the video. Or, the user could start watching the video and then change the date of the device to an earlier date, so that he or she could view the video in a play window larger than 24 hours.","What is needed is a mechanism to ensure that altering the system clock on a computing device will not change the effective length of temporal rental windows and play windows for the playing of digital content. What is further needed is a mechanism to detect alterations to the system clock on a computing device to enhance the digital rights management for copyrighted works played on the computing device.","In the prior art, another challenge is that a customer can \u201chack\u201d a computing device to obtain root user privileges, which would enable that user to alter the operating system and other key components of the computing device. This in turn might enable the user to make unauthorized copies of digital content. What is needed is a mechanism to detect instances where evidence exists that indicates that a user might have obtained root user privileges and to prevent that computing device thereafter from obtaining digital content.","In accordance with the disclosure, a method and apparatus for improved digital rights management are disclosed.","In one embodiment, the system keeps track of the beginning and end points of each rental window instead of just one of those points as is currently the case in the prior art. For example, rather than just identifying Sunday, Oct. 9, 2011, as the end point of a 7-day rental window, the system would also store the date of Sunday, Oct. 2, 2011, as the beginning point of the 7-day rental window. Similarly, once a user starts playing the digital content, the system would store the beginning date and time when the playing commenced, as well as the end date and time. If a user tried to alter the date and time of his or her device, the overall length of the effective rental window and play window would not change.","In another embodiment, an application running on a computing device maintains a record of the system clock at various points in time, unbeknownst to the user. The application stores the system clock value (which can be used to derive the date and time) of the device in a log file each time the device is booted up. The application then compares the current system clock value with the last system clock value stored in the log file. If there is an inconsistency (such as the current system clock value being lower that the last system clock value stored in the log file), then the application will create data indicating the inconsistency, and this data optionally can be used to deny future requests from that device to obtain digital data or to restrict the type of digital data that can be obtained by that device.","In another embodiment, the system searches for known software tools on a computing device that enable a user to obtain root user privileges or to hide the fact that root user privileges have been obtained. If such tools are found, the system prevents the computing device from obtaining digital content.","In another embodiment, the system attempts to write to files on a computing device that are normally write-protected as part of the operating system. If the system succeeds in writing to such a file, it prevents the computing device from obtaining digital content.","In another embodiment, the system calculates a hash value for a framework file on a computing device and compares it to hash values for known framework files. If no match is found, the system prevents the computing device from obtaining digital content.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["10","10","12","16","18","12","12","14","12","10","16","10"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["10","10","11","13","11","15","12","17","19","11","13","15","17","19","10"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["10","10","20","10","16","10","22","24","26"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["40","40","10","24","26","10","44","46","48","40","50","46"]},"The service unit  may include a user information storage unit  that stores information about each user of the computing device service system including user billing information and user service personalization information. The service unit  may also have a billing server  that performs a billing operation for the services provided to the user. In the example shown in , the billing for the services are communicated over a secure link , such as a secure socket layer (SSL) connection, to a carrier billing system  so that the computing device carrier can provide the bill for the services on the monthly invoice of the user of the computing device. Alternatively, the service unit  can directly bill the user. The service unit  may also include a live content ingester , a clip digester  and a content\/asset storage unit  that handle the service content (such as music, movies, etc.) from a third party  that will be delivered by the computing device service system. Third party  optionally can be a record label or movie that owns the digital content utilized by service unit . The live content ingester receives any live content and processes it and then stores the live content in the content\/asset storage unit  in various output encoding and file formats. The clip digester  receives non-live content and data, processes it and then stores the clips in the storage unit  in various output encoding and file formats.","The service unit  may further include a menu\/personalization unit , a reporting unit , a content provisioning unit , a log database  and a data mining unit . The menu\/personalization unit , the reporting unit , the content provisioning unit  and the data mining unit  may preferably each be server computers. The menu\/personalization unit generates and delivers the computing device service user interfaces to the user that may also be customized by the user based on the customization information stored in the user information storage unit . The content provisioning unit  optionally may support the real-time streaming protocol (RTSP) and the hypertext transfer protocol (HTTP) and may deliver or stream the service content to the computing device over the link . The content provisioning unit  may request the service content from the content store  and may store service content information in the log store . The reporting unit  may generate a report about various aspects of the service unit and its operations. The data mining unit  collects user behavior information which is then mined to determine any recommendations and personalizations for users of the system.","A user of computing device  can run multimedia application  or software application  to listen to music, an audiobook or eBook, or other audio programming or to watch a movie, TV show, or other video content streamed or transmitted from content provisioning unit . In one embodiment, content provisioning unit  will send digital content to the computing device  and will also send metadata to the computing device . Digital content can include digital video, audio, images, text, or any other data in digital form. The metadata can include information such as the title of the song or video, the duration of the song or video, etc. The metadata also can include a URL for a website housed on third-party server  that offers products for sale that are relevant to the content being streamed to computing device . Examples of such products might include ringtones that contain the same music being streamed to computing device , CDs containing the same music, DVDs containing the video being streamed to computing device , etc.","Computing device  typically utilizes a system clock that is implemented by operating system . For UNIX systems, the system clock typically is implemented as a count of the seconds that have elapsed since Jan. 1, 1970. For Microsoft Windows systems, the system clock typically is implemented as a count of the number of 100-nanosecond ticks since Jan. 1, 1601. Other known mechanisms exist for implementing the system clock and the disclosure is not limited to any particular implementation of the system clock. The system clock can be used to derive the current date and time. Absent modification, a system clock typically is reliable and accurate. However, it is possible for skilled programmers to \u201chack\u201d the system clock to alter it (clock skew). This can be problematic when the rights to play digital content are purchased only for a certain rental window and\/or play window.","One embodiment of the digital rights management system that handles clock skew will now be described with reference to . When the user purchases a license to digital content for a certain rental window and\/or play window, software application  will store the date and time of the purchase (using the system clock) and also immediately will calculate the date and time at which the user's rights to that digital content will expire. For example, with reference to , a user might purchase digital content at time  (which corresponds to a specific date and time). That purchase will have a certain rental window of time associated with it, such as 7 days. Based on that rental window parameter, software application  will calculate the date and time at which the right will expire. Here, the rental window of time is time T, which can be 7 days, etc., and the expiration date and time will be time +T, which is noted here as time . The purchase also will have a play window associated with the purchase that will represent the amount of time in which the user has to interact the digital content once he or she starts the digital content. Here, the user starts interacting with the digital content (for example, starts watching a video) at time . The play window has a predetermined amount of time, here T, after which the rights will expire. Software application will store time , and will calculate the value of time +T, which is noted here as time . Software application stores all four values\u2014, , , and , in memory  and\/or non-volatile storage .","Once a purchase is made and time values , , , and  are stored in computing device , if the user changes the system clock of computing device , software application  will not permit the user to increase the amount of time with which he or she can interact with the digital content or will disable playback of the digital content altogether. For example, in one embodiment, if the user previously purchased the digital content at time  and then changed the system clock to a time prior to time , such as time \u2212T, then after that change is made, software application  will recognize that the user's right to view the digital content has not yet been triggered because time  has not yet occurred based on the now erroneous system clock. Specifically, the user will need to wait a time interval of Tbefore he or she will be able to start interacting with the digital content. In another embodiment, if software application  determines that the current system clock value is actually before time  (which would not happen absent alteration of the system clock), then software application  can refrain from playing the digital content at all and optionally can display a warning message to the user and\/or send a message to service unit  indicating that the system clock on computing device  has been tampered. This would allow service unit  optionally to terminate all services provided to computing device  or its user.","If the user instead had purchased the digital content at time  and started watching the digital content at time , then changed the system clock to an earlier point by an amount T, software application  can disable playback of the digital content. In one embodiment, if software application  determines that the current system clock value is actually before time  (which would not happen absent alteration of the system clock), then software application  can refrain from playing the digital content at all and optionally can display a warning message to the user and\/or send a message to service unit  indicating that the system clock on computing device  has been tampered. This would allow service unit  optionally to terminate all services provided to computing device  or its user.","In another embodiment shown with reference to , software application  can maintain elapsed rental window value  and elapsed play window value . Elapsed rental window value  will start at the full value of the rental window (e.g., 7 days or T) and will be decremented in real time. Elapsed rental window value  will start at the full value of the play window (e.g., 24 hours or T) and will be decremented in real time once play of the digital content begins. In this manner, elapsed rental window value  and elapsed rental window value  will represent absolute countdown values. Once either value reaches 0, software application  will cease playback of the digital content. Once the elapsed rental window value  and elapsed play window  are established, any changes made to the system clock will not affect those values and will not enable a user to lengthen the effective play time of the digital content. Elapsed rental window value  and elapsed play window value  can be stored in memory  and\/or non-volatile storage .","Another embodiment will now be described with reference to . Software application  is installed on computing device  (step ). Software application  then will create a log file that is stored in memory  and\/or non-volatile storage , and will store the current system clock value C(or an equivalent value, such as date and time) in the log file (step ). Thereafter, at periodic intervals during operation of software application , software application  will store the current system clock value C(or an equivalent value) in the log file (step ). When software application  is initiated and\/or when mobile  is booted up, software application  will compare the current system clock value C(or an equivalent value), which it obtains from software application , against the previous entry Cin the log file (step ). If software application  detects a discrepancy during step  (such as Cbeing smaller than C), software application  will store warning data  indicating the discrepancy (step ). Thereafter, if software application  requests digital content from service unit  for playback or storage, service unit  can deny the request or alter the digital content sent to software application  based on warning data  (step ). Warning data  optionally can comprise a string of data following a predetermined format understood to both software application  and service unit  that indicates the nature of the discrepancy. It also optionally can comprise a flag, an interrupt signal, or register bits.","Operating system  in computing device  typically cannot be altered by a normal user, except as part of an authorized software upgrade. Alterations to operating system  are permitted only by a \u201croot user,\u201d which is a user that has special read\/write privileges for the operating system files. Normal users typically do not have \u201croot user\u201d privileges. However, hackers can run special software on computing device  to obtain root user privileges. As a root user, the hacker can modify individual files within the operating system, and this could enable them to copy digital content files that otherwise would have been protected by digital rights management mechanisms. This also might enable them to alter the system clock, as discussed above.","An embodiment will now be described with reference to  that enables computing device  and\/or service unit  to determine if a user improperly has obtained root privileges. There are known software tools that can enable a user to obtain root user privileges or to hide the fact that root privileges have been obtained. One known software tool is called SuperUser. By hiding the fact that root privileges have been obtained, a hacker could render prior art anti-tampering mechanisms ineffective. In this embodiment, service unit  maintains a dataset  containing a list of known files that are used by these types of software tools (step ). Service unit  then causes a software program  to run on computing device  that searches for the files listed in dataset  (step ). If the software detects such a file, service unit  will generate data (such as a flag or interrupt signal) indicating that the user of computing device  may have obtained root user privileges (step ). Thereafter, service unit  optionally can reject any requests for digital content by computing device , or can provide only digital content of a lesser quality (such as sub-standard, low resolution video instead of normal resolution video) in response to requests from computing device  for digital content to circumvent any attempts by the user to create unauthorized copies of the normal digital content (step ).","Certain files in operating system  within computing device  typically are write-protected, meaning that a user or other software cannot change those files. Hackers sometimes will change this property, either by gaining root user privileges or through other means, so that they can alter the operating system. Another embodiment detects this behavior and is described with reference to . Service unit  maintains a dataset  containing a list of known files within a given operating system  that were implemented by the creator of the operating system as write-protected files (step ). Service unit  causes computing device  to run a software program  that methodically attempts to write to one or more of the files listed in dataset  (step ). Under normal conditions, the software program  will receive an error message each time it attempts to write to a write-protected file, which will indicate that the operating system has not been tampered with. If, however, the software program actually succeeds in writing to one of the files, then no error message will be received within a certain window of time , and service unit  can conclude that the operating system has been tampered with (step ). Thereafter, service unit  optionally can reject any requests for digital content by computing device , or can provide only digital content of a lesser quality (such as sub-standard, low resolution video instead of normal resolution video) in response to requests from computing device  for digital content to circumvent any attempts by the user to create unauthorized copies of the normal digital content (step ).","In another embodiment discussed with reference to , service unit  will check to see if certain key files within operating system  have been modified. Operating system  typically includes a framework file  that contains Application Programming Interfaces (APIs) that are run by computing device . These APIs are lines of code that constitute library tools that can be utilized by other parts of operating system  or other software. A typical user will not do anything that would cause the framework file  to change. Therefore, in one embodiment, service unit  will calculate a hash value of the framework file  (step ). It does this by applying a hash function  to the framework file , which results in a hash result . Service unit  then compares the hash result  to a list  of hash results previously obtained by applying hash function  on known framework files (step ). If there is a match, then service unit  can conclude that the framework file  has not been altered. If there is no match, then service unit  can conclude that the framework file  has been altered (step ). Thereafter, service unit  optionally can reject any requests for digital content by computing device , or can provide only digital content of a lesser quality (such as sub-standard, low resolution video instead of normal resolution video) in response to requests from computing device  for digital content to circumvent any attempts by the user to create unauthorized copies of the normal digital content (step ).","While the foregoing has been with reference to particular embodiments, it will be appreciated by those skilled in the art that changes in these embodiments may be made without departing from the principles and spirit of the disclosure, the scope of which is defined by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
