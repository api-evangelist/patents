---
title: Internet enabled computer system management
abstract: System configuration is verified. Configuration information for a managed system is generated. The configuration information indicates existing software and hardware residing on the managed system. The configuration information is sent from the managed system to a management system. The management system compares the configuration information from the managed system with database information that indicates software and hardware supported by the management system in order to generate validity information that indicates any software or hardware on the managed system that is not supported by the management system. The validity information is sent from the management system to the managed system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08301587&OS=08301587&RS=08301587
owner: Hewlett-Packard Development Company, L.P.
number: 08301587
owner_city: Houston
owner_country: US
publication_date: 20040701
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["Computer system management as currently implemented relies heavily on such known management platforms as Hewlett-Packard Co.'s (\u201cHP\u201d) OpenView, IBM's NetView, Sun Microsystem's SunNet Manager, and others. These platforms are typically used with third party tools that perform the specific tasks required to manage particular devices, including Intel-based PC desktop computers and server systems, network devices such as hubs, bridges, and routers, and other similar equipment. Examples of these third party tools include HP's NetServer Assistant for managing the NetServer line of computers and Interconnect Manager used for managing network devices such as routers. As a general rule, these tools are complex, expensive, and difficult to use without extensive training.","The Internet makes it possible to create applications that perform many of the functions now performed by management platforms and third party add-on tools in a much simpler manner. These applications will be easier to use by novices than known tools and will lower the overall cost of system management.","The embodiments of the present invention described herein require certain generic computer systems and components to function. There must be a set of computer systems or network devices that must be managed. A set of client systems are used to manage the sets of computer systems and\/or network devices. In some cases, the managed system and the client system are the same system. At the manufacturer's site, a system is located and used for warehousing and analyzing data from the managed systems. The manufacturer's system is only needed for implementing such management features as analysis and verification of system information, transmission of advisory information back to users and system registration.","Any of the known web browsers such as Netscape Corp.'s Netscape Navigator or Microsoft Corp.'s Internet Explorer must be installed on all client systems used as management systems and at least one of the managed or client systems must have an Internet HTTP Server (Web Server) running on it. Finally, an implementation of one of the known technologies that make it possible to retrieve and\/or alter configuration information is needed on the managed and client systems, including an implementation of any one of Simple Network Management Protocols (\u201cSNMP\u201d), DMTF\/DMI, ISO\/CMIP or other proprietary protocols.","With these required components, all of which are known, the system's configuration can be viewed or changed over the Internet using an HTML document to list and display the managed systems, together with icons that represent the state of the managed systems. By using \u201cactive controls\u201d or Java scripts, the state of the managed systems can be dynamically updated by changing the color of associated icons or the displayed text. Using embedded commands or identifiers within template documents, a program can be created to automatically acquire needed system information.","In another embodiment, an HTML CGI document containing desired system information and a reference link back to the system at the manufacturer's selected site is created, allowing the manufacturer's system to retrieve this system information automatically. The system information is then analyzed against a list of currently valid system configurations to detect potential problems. In turn, if potential problems are detected, the information is sent back to the managed system automatically.","The various embodiments of the present invention can operate within any particular realization of the generalized system architecture shown in . This generalized architecture comprises a set of computer systems , a set of network devices , or any combination of computer systems  and network devices , all of which must be managed. A set of client systems  are used to manage the computer systems  and the network devices . In at least one embodiment, it is possible that the managed computer system  and the client system  doing the management comprise the same system.","In several embodiments of the present invention, a manufacturer's system  is used for warehousing and analyzing data from and for the managed systems. Manufacturer's system  is only necessary for implementing such features as analysis and verification of managed systems' information, system registration, and transmission of advisory information back to the customers.","A web browser such as Netscape Corp.'s Navigator or Microsoft Corp.'s Internet Explorer must be installed on all client systems  used to manage other systems. At least one of the managed systems  or the client systems  needs an Internet HTTP server, also known as a Web Server, running on it. Finally, the managed systems  and the client systems  need an implementation of at least one of several known or proprietary technologies that permit the retrieval and altering of desired configuration information. These implementations can include any one of SNMP, DMTF\/DMI, or ISO\/CMIP.","Configuration Management","In a first embodiment of the present invention, configuration management is accomplished by using various Web-based elements. As shown in , an HTML document  that lists the managed systems and devices is created (, step ). Document  contains a list of system names linked to Uniform Resource Locators (\u201cURL\u201ds) that point uniquely to a Common Gateway Interface (\u201cCGI\u201d) or a Microsoft Internet Server Application Programming Interface (\u201cMS ISAPI\u201d) script program . When invoked or executed by user actions (, steps  and ), which actions include clicking on the system name, script program  generates HTML document  that contains the system information, which can then be displayed (, step ). Document  can be automatically generated by a program using an auto-discovery algorithm such as HP's OpenView or it may be manually created using an HTML editor, in which case the users will need to know the URLs for the systems being managed.","In this implementation, script program  can be located either on the system\/device being managed or on another system that has an HTTP (Web Server) server, or on both systems. This allows one system to be a proxy for another system or to be a backup system. This is helpful when the particular system of interest is down or if the system cannot run an HTTP server. Using proxies creates redundancy and also permits using the management facilities described herein with devices that are not able or do not want to run an HTTP server.","An HTML configuration template document  is created using any preferred HTML editor (, step ). Document  will contain such standard HTML elements as labels, icons, text, references to Java scripts, active objects and other documents as necessary. In places where the actual parameter values are displayed, a placeholder is embedded. The placeholder includes an identifying start meta character at the beginning and an end meta character at the end of the placeholder to make the placeholder identifiable to script program . The body of the placeholder contains identification information such as SNMP object ID, that uniquely identifies the attribute whose value is to be retrieved and displayed.","The CGI or ISAPI script program  is invoked by the HTTP server as a result of an end user request for information, which the user initiates by \u201cclicking\u201d on the icon or symbol labeled with the device name in the system\/device list of document  (, step ). When invoked, script program  retrieves parameters passed to it using standard CGI\/ISAPI interfaces (, step ). In this embodiment of the present invention, the parameters are: a) information type (existing\/new); b) IP address of the system of interest; c) SNMP community name; d) system configuration file name; and e) template file name. The information type parameter indicates whether the program is to return an existing configuration file or whether it must create a new one. The IP address parameter identifies the system for which information is to be retrieved (the managed system). The SNMP community name (an SNMP artifact used for security) identifies the community to which the SNMP agent used for retrieving the requested information belongs. The system configuration file name is the name of the file to which newly retrieved information is written to. The template file name is the name of the template file the program will use to determine what information is to be retrieved.","After script program  retrieves this information, it parses the template document, sequentially retrieves the embedded object identifiers, performs an SNMP or other request to retrieve the value of the requested attribute (object), converting the retrieved value to a meaningful form if necessary, and replaces the embedded placeholder with this value (, step ). Once all required values have been obtained, script program  writes the generated file, document , out to disk using the system configuration file name retrieved from the passed parameters (, step ). It then passes a reference back to the HTTP server indicating that the server should return this file to the user initiating the request (, arrow from step  to step ).","Real Time System Configuration Verification","In this embodiment, system configuration information can be verified in real time with minimal customer effort. This function is difficult to implement under existing non-Web based technologies and is typically not provided by vendors.","The process to verify system configurations starts with the user loading HTML document  and clicking on the appropriate icon or label representing the system of interest. This causes CGI script program  to be executed on one of the managed systems . Script program  then fills the fields in a template form , creating document  (described below). The process by which script program  fills template form  to create document  is similar to that described in the preceding embodiment. Once document  is filled out by program , document  is returned to the user's Web browser as document (, step ).","Document  is a CGI form in which all the fields are labeled. For example, in addition to including a label \u201cSystem Name\u201d, there is a field value parameter which is assigned the value of System Name, e.g. \u201cMango\u201d.","CGI form document  contains a \u201csubmit\u201d button. When a user clicks on this button (, step ), the contents (name-value pairs) of document  are transmitted to the system referenced in the form URL. In this case, the referenced system is system  at the manufacturer's location (, step ). On receiving document , the HTTP server on system  executes a script program  defined in the URL. Program  parses document  and saves the parameter values retrieved from it in a database .","Script program  then executes program  on system  with a pointer to the data that was just entered database  (, step ). Program  retrieves this data and compares specific system configuration information such as version numbers of the software components and supported hardware\/software against those in a standard\/supported system configuration database , which is independently created (, step ). The results of this comparison reveal differences between the configurations of the managed systems  and currently valid configurations. Examples of these differences could be differences in the versions of software\/firmware\/hardware components or the presence of hardware\/software components that are known to have potential problems. Once these differences are determined, program  prepares a difference report formatted as an HTML document, document , and passes it back to script program  (, step  to step ). Program  then returns document  to the client browser  from which the request originated using a standard HTTP protocol (, step  to step ).","Mail\/HTTP-Based System Configuration Verification and Customer Advisories","The previously described methods for Configuration Management and Real Time System Configuration Validation assume a user invokes a Web browser and requests system information. In the following embodiment, configuration information is created and transmitted without user intervention, the advisory corresponding to potential problems or out of date components, and the advisory being transmitted back to the user asynchronously via the Internet or other e-Mail mechanisms.","This method requires a program  running on one or more of the managed systems  (, step ). A modified version of program , called here program , plus a modified version of program , called here program , run on system  at the vendor's location. In addition to these programs, an e-Mail system must be running on system . The e-Mail system must be able to send and receive electronic mail messages to and from other systems that are connected to the Internet.","Program  executes at predetermined periodic intervals on systems . It can be configured to run on each of the managed systems , on one of the managed systems , or on some number of systems between these extremes. In those cases where program  is not running on all the systems, it behaves as a proxy agent and is able to retrieve information from the other systems for which it is configured to be a proxy.","When program  executes, it retrieves data from one or more of the managed systems  using one of the standard or proprietary protocols such as SNMP or DMI. It then creates a set of files , one for each system it is configured for, which contains detailed system information. The specifics of the information are determined by template document . In addition to the system information, program  also creates appropriate e-Mail headers that include mailing lists so that document  has a format and fields compatible with the e-Mail system so that document  can be sent to the configured destinations.","Program  submits files  to the e-Mail program by placing them in the outgoing bin or, alternatively, communicating directly with the e-Mail server using standard APIs such as MAPI.","The e-Mail system takes the files generated by program  and delivers them to the recipient, which in this implementation is program  running on system . Program  extracts the system information and downloads it into database  (, step ).","Program  executes at configured intervals on system . It extracts information from database  sequentially, compares this information with standard information of valid configurations in database  and generates a set of files, called document , one for each system for which configuration analysis is performed or on which configuration obsolescence is detected (, step ). Program  adds appropriate e-Mail system headers that include destination addresses of configured recipients and writes these to the outgoing bin of the e-Mail system or uses the e-Mail system's APIs to submit them to the e-Mail system (, step ). The e-Mail system in turn delivers them to the recipient.","System Registration","In general, most customers do not fill out system registration forms. Perhaps the customer sees no benefit to spending time filling out the forms. This embodiment of the present invention eliminates some of the effort needed to fill out these forms. It also makes possible the collection of substantially more system information, making it possible to send advisory information back to customers automatically when components become obsolete or when problems are discovered, using the previously described embodiments.","After the customer has received the newly purchased system, installation is accomplished by executing an installation program. The last part of the installation program is modified so that it executes program  (, step ). Program  brings up an electronic form document  for the customer to fill out (, step ). The customer fills out basic information such as the customer's name and e-Mail address. After this information is entered, program  uses template document  to gather system configuration information in a manner similar to program  and creates document  by appending the basic customer information to configuration information using the CGI form \u201cName-Value\u201d format (, step ).","Document  is an HTML form consisting of name-value pairs for customer information, entered by the customer, and the system configuration information entered by program . The form URL points to program  on system .","After creating document , program  takes one or both of the following actions: (1) transmits document  as a CGI script form to system  at the manufacturer's site using the HTTP protocol (, step ), and (2) adds e-Mail headers to document  and places it in the outgoing bin of the electronic mail system located somewhere in the customer's network. The mail system delivers document  to systems on a predetermined mail distribution list. The specific action taken depends on: (1) whether the customer wants a real time check of his system configuration and (2) whether the customer wants systems at multiple locations to save this configuration information. After transmitting these documents, program  waits for a response on the same TCP\/IP port as a web browser, typically port .","To the web server on system , document  transmitted over HTTP looks identical to a CGI form request that would have been generated had document  been displayed in the context of a web browser and had a user clicked on the \u201cValidate Configuration\u201d button. This results in the same actions described under the \u201cReal Time System Configuration Verification\u201d section (, step ). Program  retrieves information in document , enters it into database , and executes program  with a pointer to the data just entered in database  (, step ). Program  retrieves the data just entered and compares it with standard\/supported system database  (, step ). The differences between the configuration of the system being currently registered and the standard configuration are then formatted as an HTML document  and passed back to the script program . Program  then returns document  to the system being registered. Document  is then received by program  (, step ), which was waiting for a response on port . Program  then writes document  to a file (, step ) and executes the web browser with a command line parameter pointing to it (, step ). This causes document  to be displayed by the web browser on the system being registered and provides immediate feedback on any potential configuration problems.","System Alert Monitoring and Exception Handling","A system alert condition is generated when some system parameter exceeds predetermined boundary conditions. For example, if the system temperature goes too high, an alert is triggered. Traditional methods for handling alerts use industry standard or proprietary protocols such as SNMP or DMTF\/DMI and send alert information packets to receiving system management consoles like HP's OpenView. At these consoles icons representing the systems from which the alerts originate change colors (from, for example, green to red). This notifies the administrator that something is wrong.","In this embodiment, program  executes on managed systems  waiting for alerts from the local SNMP or DMI agents (, steps  and ). On reception of an alert, program  decodes the alerts using the alert ID to index into an alert translation data file document . Based on the alert ID the alert data file returns an alert record consisting of the following fields: (1) alert type, (2) alert description, (3) system name, (4) the name of an icon bit map file used to display this alert in the web browser, and (5) a URL reference to the help files, document , that provides additional information about the alert. This record is entered into a local trap Management Information Base (\u201cMIB\u201d) table, if SNMP is used, or another document  (, step ).","Like program , program  also receives SNMP or DMI alerts on the management system . When an alert is received, program  determines the system from which the alert came, based on the addressing information in the alert packet (, step ). It then launches the local web browser with command line parameters that point to the CGI script program  and the system name from which the alert was received. Script program  reconstructs document  using appropriate icons specified in document  or the SNMP local trap MIB (, step ), links the icons to help files associated with the icons and returns document  to the browser as described under the earlier Configuration Management embodiment (, step ). The browser in turn displays document . When a user clicks on the icon representing system\/sub-system status, the browser displays the help document that was linked to the icon.","In an alternative implementation of this embodiment (see ), document  is modified by changing the header information to produce document . When program  receives a request from the HTTP server it uses the modified document  to create document  which is identical to document  except for the header information (, step ). The header information indicates to the web browser that document  must be updated periodically. Each time the browser requests an update (, step ), program  is executed by the HTTP server (, step ) and it re-creates document  with the latest system status and configuration information and returns it to the web browser. This ensures that all alerts generated since the last update are reflected in the system status section of the newly created document .","In a third alternative implementation of this embodiment (see ), program , a modified version of program , here called program , and the HTTP web server all execute on managed systems . Program  is similar to program , except that it executes program  upon receiving an alert in addition to its normal functions. In this implementation, document  is replaced by document . Document  is identical to document  except the header information is modified to indicate that it is a \u201cmulti-part-with-replace\u201d document, a known type of document. When web browsers receive such documents, they connect to the web browser asynchronously. When a user initiates a request in this implementation, program  uses document  to create document  (, step ), which is document  with a modified header. As the header information from the template is directly copied to the output document, document  is also a \u201cmulti-part-with-replace\u201d document. When an alert is received by program  (, steps  and ), it launches program  with an appropriate command line indicating it should re-create document  and re-transmit it to the web browser (, step ). The technique used here to asynchronously send documents on alert conditions to the web browser is commonly referred to as \u201cServer Push\u201d, i.e., documents are pushed from the HTTP server without being explicitly requested by the web browser.","In a fourth implementation of this particular embodiment (see ), document  is modified to include references to \u201cactive objects\u201d such as a Java applet or an ActiveX program to create document . In this implementation, program  uses document  as input and produces document , which is similar to document  but includes the references to the active objects in document . A property of such active objects is that displaying them causes the browser to execute the \u201cbytecode\u201d corresponding to the active objects. The executing embedded programs (the active objects) in turn read the system status file document  at programmed intervals and change the displayed icons to correspond to the current system state in the same manner as described for the other implementations of this embodiment."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 6","b":["7","8","9"]}]},"DETDESC":[{},{}]}
