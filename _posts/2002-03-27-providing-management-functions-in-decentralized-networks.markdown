---
title: Providing management functions in decentralized networks
abstract: Methods, systems, and computer program products are disclosed for providing management functions in decentralized networks. Persistent identifiers are defined for nodes, allowing nodes to be identified across sessions and invocations, even though they re-enter the network with a different network address. Paths taken by content resources as they traverse the network (e.g. which nodes forwarded the content) are persisted, along with reputation information about nodes (e.g. indicating how successful they are at answering queries from peers). Trust relationships can be derived using the persisted information. A tiered broadcast strategy is defined for reducing the number of messages exchanged. Preferred embodiments leverage a web services implementation model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07039701&OS=07039701&RS=07039701
owner: International Business Machines Corporation
number: 07039701
owner_city: Armonk
owner_country: US
publication_date: 20020327
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED INVENTIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The present invention is related to the following commonly-assigned inventions, all of which were filed concurrently herewith and which are hereby incorporated herein by reference: U.S. Pat. Ser. No. 10\/109,373), titled \u201cInterminable Peer Relationships in Transient Communities\u201d; U.S. Pat. Ser. No. 10\/107,696), titled \u201cContent Tracking in Transient Communities\u201d; U.S. Pat. Ser. No. 10\/108,088), titled \u201cPersisting Node Reputations in Transient Communities\u201d; U.S. Pat. Ser. No. 10\/108,014), titled \u201cBroadcast Tiers in Decentralized Networks\u201d; and U.S. Pat. Ser. No. 10\/107,960), titled \u201cManaging Storage Resources in Decentralized Networks\u201d.","1. Field of the Invention","The present invention relates to computer networks, and deals more particularly with methods, systems, and computer program products for providing management functions in decentralized networks.","2. Description of the Related Art","In peer-to-peer, or \u201cP2P\u201d, networks, each communicating node has a networking program which allows it to initiate communications with another node having that program. The nodes are considered \u201cpeers\u201d because the network is decentralized, with each node having the same capabilities (for purposes of the P2P exchange). The promise of P2P networks is a more efficient network where resources such as central processing unit (\u201cCPU\u201d) cycles, memory, and storage go unwasted. These networks are ad hoc, in that nodes may join and leave the networks at will. Thus, P2P networks may be characterized as \u201ctransient\u201d networks.","Prior art P2P network programs provide facilities for dynamic query and discovery of peers. However, the existing techniques suffer from several drawbacks. Lack of persistent network addresses is one such drawback. Due to the dynamic addressing schemes with which network addresses are assigned to nodes, each time a particular node enters a P2P network, it will typically have a different Internet Protocol (\u201cIP\u201d) address. (Users with a dial-up account have different IP addresses for each log-in. Users of some \u201calways-connected\u201d networks such as certain digital subscriber line, or \u201cDSL\u201d, accounts may also have a different IP address for different log-ins.) This lack of persistent network addressing makes it difficult for nodes to \u201cremember\u201d where a particular service or content resource is available. Instead, when a node needs content or some type of service, it must typically issue a new discovery request and then determine how to choose from among a potentially large number of responses. This communication results in very bursty traffic.","Another drawback of existing P2P networks is that they have no trust model: because nodes have no persistent network addresses, there are no existing means of persistently tracking which nodes are considered trustworthy and which are not. Thus, when a node (or the user at that node) chooses a peer node from which to obtain a service or content, there is no \u201ctrack record\u201d or history available for use in determining how to select from among the set of nodes which answered the dynamic query. This absence of a trust model also means that existing P2P networks do not provide support for secure transactions among members of transient communities. (The JXTA project from Sun Microsystems, Inc. is a P2P architecture which provides the notion of a \u201cpeer group\u201d or \u201cshared space\u201d, where nodes within the peer group may publish services. Among these services are a set of core services including membership, access, and resolver services. The defined approach applies the client\/server models of authentication, authorization, and naming to peer groups. That is, the notion of centralization is maintained, but only at the peer group level. These peer groups are not properly characterized as being a transient community. Likewise, the Groove\u00ae product from Groove Networks, Inc. provides a set of \u201cshared services\u201d within a peer community, where this set includes security, member, and access control services. The security mechanisms are public key infrastructure (\u201cPKI\u201d) for authentication, and key exchange with shared secret keys for confidentiality. The requirement thus implied for digital signatures, digital certifications, and a shared security service negates the notion of a transient community.)","One popular P2P network is known as \u201cGnutellaNet\u201d. GnutellaNet uses a protocol that allows users to exchange files directly between the storage resources of their computers, without first going to a \u201cdownload\u201d web site. \u201cNapster\u201d is another well known P2P network implementation, in which users connect to a centralized web site to identify MP3 music files which they can then download from one another's computers. Whereas Napster is adapted specifically for MP3 files, GnutellaNet allows downloading any type of file content. A number of other P2P network implementations exist.","P2P networks have the potential to be more efficient than client\/server networks. This increased efficiency potential arises from the fact that P2P networks have no centralized server. In the client\/server model, the bulk of processing capability resides on a centralized server, and thus the processing load tends to be concentrated at this server. In P2P networks, there is the potential for distributing tasks across all the nodes in the network, resulting in more efficient use of network resources. The dynamic nature of P2P systems, and their potential for efficient load distribution, has been promoted as making them the next evolution in information technology (\u201cIT\u201d) architecture. However, because of limitations such as those described above, existing P2P networks have been relegated to the consumer and \u201cfor-free\u201d markets, and are not well suited for conducting high volume business (such as eBusiness or Business-to-Business transactions). (And as stated above, existing P2P implementations are not well suited for secure transactions within transient communities, which are typically critical for eBusiness.)","Furthermore, conventional P2P systems are unmanaged and homogenous, making it impractical to implement P2P within a large-scale, robust IT architecture where many different types of devices must be capable of interoperating in a manageable way.","What is needed are techniques for capitalizing on the advantages and potential of P2P networks, while avoiding the drawbacks and limitations of existing approaches.","An object of the present invention is to provide techniques for capitalizing on the advantages and potential of P2P networks, while avoiding the drawbacks and limitations of existing approaches.","Another object of the present invention is to provide techniques for improving P2P networks.","Yet another object of the present invention is to provide techniques for providing management functions in decentralized networks.","Other objects and advantages of the present invention will be set forth in part in the description and in the drawings which follow and, in part, will be obvious from the description or may be learned by practice of the invention.","To achieve the foregoing objects, and in accordance with the purpose of the invention as broadly described herein, the present invention provides methods, systems, and computer program products for improving peer-to-peer computing networks. In one aspect of preferred embodiments, the improvements comprise providing management functions in a decentralized network. Preferably, this technique comprises: associating a persistent node identifier with each of the nodes in the network, such that an identity of the nodes can be resolved even though a current network address assigned to the node upon entering the network may vary from one entry to another; asserting, by a particular node, that it is allowed to perform a management function; and using the persistent node identifier of the particular node to verify whether the particular node is allowed to perform the management function. The technique preferably further comprises associating a reputation with each of the nodes, wherein the reputation of each node is located using the node's persistent node identifier, and using the persistent node identifier then preferably further comprises locating the reputation of the particular node using its persistent node identifier; and concluding that the particular node is allowed to perform management functions if the particular node has a suitable reputation.","The suitability of the reputation is preferably based on behavior of the particular node over time, and may be initialized with an externally determined value and then dynamically revised based on the node's interactions with other nodes in the network.","The management function may request the node receiving the assertion to replicate traffic to the particular node (and may indicate selected types or categories of that traffic), to send information (such as reputations, content, and content traversal paths) to the particular node, to change information stored by the receiving node, and so forth. The node receiving the request preferably performs the request only after concluding that the particular node is allowed to perform the management function (which may further comprise issuing a challenge to the particular node and receiving a successful response, verifying that a digital signature of the request is the signature of the particular node, etc.).","The present invention will now be described with reference to the following drawings, in which like reference numbers denote the same element throughout.","The present invention defines techniques for improving P2P network operations. A persistent identifier is assigned to each network participant, i.e. node, such that the node can be identified after it leaves and re-enters the network. The path taken by content traversing the network is tracked and persisted as well. Persisting content paths and contextual nodal information, as disclosed herein, enables maintaining peer relationships across invocations. The disclosed techniques thereby address shortcomings of the prior art, allowing relationships among peer devices to persist beyond a single session even though the community in which the participants communicate is, by definition, a transient community.","The disclosed techniques support the inherent dynamic network addressing characteristics of P2P networks, while providing support for heterogenous network nodes. The persisted information may be leveraged to support business enterprise operations including network management, transactions, and the application of security policies.","Furthermore, the disclosed techniques facilitate providing self-healing networks. A self-healing network is one in which the network applies task management\/monitoring at run-time, independent of human interaction or management by a separate computing system. The techniques disclosed herein enable nodes to cultivate relationships with their peers and persist this information, such that malicious or poorly performing nodes can be identified as such (and then can be prevented from adversely affecting the network, once detected), relative to performance and functional integrity. (See http:\/\/www.research.ibm.com\/autonomic\/, which discusses the concept of self-healing networks in general, using the term \u201cautonomic computing\u201d. The techniques described therein do not teach self-healing in transient network communities without a centralized authority.)","The techniques disclosed herein also facilitate improved efficiency in P2P network operations. Rather than requiring queries to be broadcast to an entire subnet, as in a prior art P2P network, the present invention discloses a tiered broadcast technique which capitalizes on the persisted knowledge of the nodes in the network to reduce the amount of network traffic generated.","Various peer nodes will coexist within a typical P2P network. The peer network itself may represent a set of vertical peers which interact with one another in a consumer\/supplier relationship (for example, carrying out a sequence of related business activities which comprise a service that may be defined as a directed graph between sub-services). Or, the network may represent a set of horizontal peers providing a common function. The techniques of the present invention may be used to augment the P2P architecture for providing automation and management capabilities to such nodes.","As an example, a group of peer nodes might provide storage resources within a Storage Area Network, or \u201cSAN\u201d. A Storage Service Provider (\u201cSSP\u201d) maintains SANs on a subscription or pay-per-use basis for its customers, and typically has service level agreements (\u201cSLAs\u201d) in place which specify the SSP's service commitments to those customers. Customer billing may be adversely affected if the SLA commitments are not met. In a P2P network, nodes which need storage can issue a dynamic network query to find other nodes providing this capability. This type of dynamic query and discovery of peers is available in prior art P2P networks. However, as stated earlier, existing P2P networks have no trust model, and no ways of knowing how to select a \u201cgood\u201d storage-providing node. Using the techniques of the present invention, an SSP can manage autonomous storage partitions as P2P storage utilities having reputations which are determined in real time, reflecting how well storage requests are currently being handled. Using this dynamically computed information, storage devices which are best able to respond to storage requests can be determined, facilitating dynamic allocation of storage to requesters. Furthermore, specific storage resources which can answer particular content requests can be more easily identified using techniques of the present invention. Responsiveness and performance commitments within an SLA can therefore be more consistently realized. (How well a storage node handles storage requests may comprise the success rate of responding to requests, how efficient the node is at responding to requests, the available storage capacity of the node, what content is available from that node, etc.)","By persisting content paths and contextual nodal information, as will be described in more detail below, peer nodes are able to maintain their relationships with one another, and their knowledge of one another, across sessions\u2014even though one or more of the nodes may leave and subsequently re-enter the P2P network (where those re-entering nodes typically have changing network addresses). Furthermore, according to the techniques disclosed herein, as contextual information about a specific node is obtained, the node develops what is referred to herein as a \u201creputation\u201d. This reputation can then be used as the basis for a trust model. Reputations are described in more detail below. (See the discussion of  for a description of the information which is preferably persisted for a node's reputation.)","Preferred embodiments of the present invention are deployed using a web services model and a web services approach to P2P networking, as will be described with reference to , although the disclosed techniques may be adapted for use in other environments as well. The advantageous techniques of the present invention are discussed herein primarily as applied to file sharing (i.e. identifying which content is available from which nodes; remembering the path taken by particular content as it traverses the network; requesting content from a peer, and receiving that content; etc.). However, this is for purposes of illustration and not of limitation. In addition to simple file sharing interactions, the disclosed techniques may be used with more complex interactions. For example, as is known in the art, the web services model facilitates carrying out complex interactions. In general, a \u201cweb service\u201d is an interface that describes a collection of network-accessible operations. Web services fulfill a specific task or a set of tasks, and may work with one or more other web services in an interoperable manner to carry out their part of a complex workflow or a business transaction which is defined as a web service. As an example, completing a complex purchase order transaction may require automated interaction between an order placement service (i.e. order placement software) at the ordering business and an order fulfillment service at one or more of its business partners. When this process is described as a web service, a node using techniques of the present invention may locate the peer nodes capable of carrying out this service, and select a particular node (e.g. based on the node's reputation). Upon request, the located peer node performs the service (which typically comprises a number of sub-services) and then returns a result of that service to the requesting node.","Web services technology is a mechanism which is known in the art for distributed application integration in client\/server networks such as the World Wide Web, and enables distributed network access to software for program-to-program operation in these networks. Web services leverage a number of open web-based standards, such as HTTP, SOAP and\/or XML Protocol, Web Services Description Language (\u201cWSDL\u201d), and Universal Description, Discovery, and Integration (\u201cUDDI\u201d). HTTP is commonly used to exchange messages over TCP\/IP (\u201cTransmission Control Protocol\/Internet Protocol\u201d) networks such as the Internet. SOAP is an XML-based protocol used to invoke methods in a distributed environment. XML Protocol is an evolving specification of the World Wide Web Consortium (\u201cW3C\u201d) for an application-layer transfer protocol designed to enable application-to-application messaging. XML Protocol may converge with SOAP. WSDL is an XML format for describing distributed network services. UDDI is an XML-based registry technique with which businesses may list their services and with which service requesters may find businesses providing particular services.","Distributed application integration in client\/server networks is achieved by issuing UDDI requests to locate distributed services through a UDDI registry, and dynamically binding the requester to a located service using service information which is conveyed in a platform-neutral WSDL format using SOAP\/XML Protocol and HTTP messages. (References herein to SOAP should be construed as referring equivalently to semantically similar aspects of XML Protocol.) Using these components, web services provide requesters with transparent access to program components which may reside in one or more remote locations, even though those components might run on different operating systems and be written in different programming languages than those of the requester. (For more information on SOAP, refer to http:\/\/www.w3.org\/TR\/2000\/NOTE-SOAP-20000508, titled \u201cSimple Object Access Protocol (SOAP) 1.1, W3C Note 8 May 2000\u201d. See http:\/\/www.w3.org\/2000\/xp for more information on XML Protocol. More information on WSDL may be found at http:\/\/www.w3.org\/TR\/2001\/NOTE-wsdl-20010315, titled \u201cWeb Services Description Language (WSDL) 1.1, W3C Note 15 Mar. 2001\u201d. For more information on UDDI, refer to http:\/\/www.uddi.org\/specification.html\u201d. HTTP is described in Request For Comments (\u201cRFC\u201d) 2616 from the Internet Engineering Task Force, titled \u201cHypertext Transfer Protocol\u2014HTTP\/1.1\u201d (June 1999).)","Referring now to , preferred embodiments of the techniques disclosed herein leverage the IBM web services interoperability stack  to provide underlying support for communications among nodes within the P2P network. This is by way of illustration, however, and not of limitation: other support mechanisms may be leveraged without deviating from the inventive concepts disclosed herein. Components of web services interoperability stack  will now be described.","Preferably, a directed graph is used to model the operations involved in executing a web service comprised of multiple sub-services, using prior art techniques. See, for example, commonly-assigned U.S. Patent Pub. No. 2003\/0055624 (Ser. No. 09\/956,276, filed Sep. 19, 2001), entitled \u201cDynamic, Real-Time Integration of Software Resources through Services of a Content Framework\u201d. In the techniques disclosed therein, nodes of the graph represent the operations carried out when performing the service (where these operations may also be referred to as sub-services), and the graph edges which link the graph nodes represent potential transitions from one service operation to another. These graph edges, or \u201cservice links\u201d, can be qualified with one or more transition conditions, and also with data mapping information if applicable. The conditions specify under what conditions the next linked service should be invoked. Often, these conditions will be determined using the results of a previous service invocation. Data mapping refers to the ability to link operations of the directed graph and transfer data from one operation to another. For example, the data mapping information may indicate that the output parameters of one subservice are mapped to the input parameters of another sub-service.","The Web Services Flow Language (\u201cWSFL\u201d) is preferably used for supporting these directed graphs. This is indicated in  by service flow support . The manner in which the directed graphs are processed by a WSFL engine to carry out a complex web service is not pertinent to an understanding of the present invention, and will not be described in detail herein. A detailed discussion of WSFL may be found in the WSFL specification, which is entitled \u201cWeb Services Flow Language (WSFL 1.0)\u201d, Prof. Dr. F. Leymann (May 2001). This document may be obtained from IBM and is also available on the Internet at http:\/\/www-4.ibm.com\/software\/solutions\/webservices\/pdf\/WSFL.pdf.","Automated discovery  and publication  of web services (e.g. web services available from various ones of the nodes in the P2P network) are preferably provided using UDDI messages to access a UDDI registry. A WSDL layer  supports service description documents. SOAP may be used to provide XML-based messaging . Protocols such as HTTP, File Transfer Protocol (\u201cFTP\u201d), e-mail, message queuing (\u201cMQ\u201d), and so forth may be used for network support . At run-time, services are found within a registry using the UDDI service discovery process, and bound to using information from their WSDL definitions. The WSFL runtime then uses these definitions to aggregate the services.","According to preferred embodiments of the present invention, file sharing operations are facilitated using information retrieved from a UDDI registry, and more complex web services may also be supported in this same manner. (Refer to the discussion of , below, for more information on use of the registry.)","The present invention discloses techniques whereby nodes in a P2P network can be modeled as classes, rather than as strictly peers. For example, the present invention describes \u201csystem\u201d nodes. As used herein, the term \u201csystem node\u201d refers to nodes within the P2P network which provide functions of the type that would be managed by a system administrator in conventional client\/server networks. These functions comprise network operations such as network management, load balancing, monitoring, security, and so forth. A P2P network having nodes that implement the present invention may span local area networks and enterprises, and is bound only by extent of the world wide web. (See, for example, the discussion of the \u201cspy\u201d message, which enables a node to learn about nodes which may be located on different subnets. In prior art P2P networks, on the other hand, broadcast traffic is typically limited to nodes within the subnet due to the configuration of filters which monitor IP addresses.) Thus, various classes of nodes may join the network, and new types of nodes may join the network; using the techniques disclosed herein, this occurs in a non-disruptive fashion.","This concept of classes of nodes, and system nodes in particular, is an optional aspect of the present invention, and may be used to create a hybrid form of P2P networks where some nodes may direct other nodes or influence information stored by those nodes. The special functions available to system nodes will be discussed in more detail herein.","According to preferred embodiments, nodes implementing the present invention use a web service model which runs within the context of an Apache extensible Interaction System (\u201cAXIS\u201d) engine with handlers that leverage the AXIS chaining framework. (Refer to http:\/\/xml.apache.org\/axis\/index.html for more information on Apache AXIS, which is an implementation of the SOAP protocol by the Apache Software Foundation.)","\u201cAXIS\u201d is a run-time environment for SOAP services, wherein web services run using a container model. A servlet called a \u201crouter\u201d receives an inbound SOAP request message, determines which code is required to carry out that request, deserializes objects required for that code, and invokes the code. When the invoked code completes execution, the router serializes the result into an outbound SOAP response message.","The term \u201cAXIS chaining\u201d refers to configurable \u201cchains\u201d, or sequences, of message handlers that dictate the order of execution for inbound and outbound messages. A \u201chandler\u201d is executable code that implements a particular function, and can be linked with the function of other handlers (through the chaining mechanism). The handlers perform pre- or post-processing of SOAP requests. A deployment descriptor is used to specify how a particular service is to be deployed, including how to serialize\/deserialize the objects used by that service and what AMS handler chain to use. For example, SOAP message exchanges may use encrypted data. Upon receiving a message containing encrypted data, a decryption handler would decrypt the data (as a pre-processing step) and pass it to the appropriate message-processing code. When a result is returned, an encryption handler encrypts the result (as a post-processing step) prior to transmitting the result in another SOAP message.","An AXIS engine supports three types of handler chains. One is a transport chain, specifying the message transport mechanism (such as HTTP). Another is a service-specific chain. For a particular service \u201cXYZ\u201d, for example, the service-specific chain prescribes what handlers to invoke when a message is received for service XYZ or generated by service XYZ. The third handler chain is a global chain, specifying handlers that are to be invoked for all messages.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 2"},"In preferred embodiments, a run-time engine  embodying the present invention comprises an AXIS execution engine ; three AXIS handlers , ,  in a global handler chain; a linkbase repository ; a meta-data repository ; and a digital certificate repository . This run-time engine  is preferably embodied within a web service, illustrated by web service . A web service may optionally choose to implement a tModel instance . As is known in the art, a tModel indicates the behaviors or specifications which are implemented by a web service. tModels are stored in a UDDI registry to facilitate scanning the registry for implementations of a particular service. tModels may be used within the context of preferred embodiments of the present invention to specify the types of queries a web service supports. One or more content repositories, exemplified by content repository , store a node's local content and\/or references to remotely-located content which may be accessed by the node represented by run-time engine .","Three AXIS handlers are used in preferred embodiments, as will be described in more detail, and are referred to herein as a \u201cPath Intimater\u201d , a \u201cGossip Monger\u201d , and a digital signature (\u201cDSIG\u201d) handler . These handlers will now be described.","As stated earlier, the present invention defines techniques for persisting contextual node information and the paths traversed by content which is shared among nodes of the P2P network. The Path Intimater  manages the persisted content paths, which are defined herein as using a directed graph model. In these directed graphs, the graph nodes correspond to peer nodes through which the content has traveled, and the graph arcs represent the content passing between the peer nodes which are connected by each arc. (These directed graphs are not to be confused with the directed graphs discussed earlier, which are used to define complex web service interactions and which are supported using WSFL.)","According to preferred embodiments, the XML Linking (\u201cXLink\u201d) language is used as the means of representing the directed graphs which define persisted content paths. The XLinking language is defined in \u201cXML Linking Language (XLink) Version 1.0, W3C Recommendation 27 Jun. 2001\u201d, which may be found on the Internet at location http:\/\/www.w3.org\/TR\/xlink\/. As is known in the art, XLink syntax may be used to define simple, markup-style links (comprising outbound links which point to remotely-located resources and inbound links which identify resources linked to the local node), or more complex \u201cextended\u201d links. (It is not known in the art, however, to use XLink links as disclosed herein.) Extended links are used to represent graphs of nodes and the arcs between them. One type of extended link is a \u201cthird party\u201d link. Third party XLinks associate remote resources, meaning that the link specification is stored separately from the content it links together. , described below, illustrates how preferred embodiments of the present invention may leverage XLinks for persisting content traversal path definitions (or more generally, message traversal path definitions).","Note that while preferred embodiments are described herein as using the persisted path definitions to remember paths taken by content resources, this is by way of illustration and not of limitation. Path definitions may also be persisted for other information, such as the results of executing a service. Thus, the term \u201ccontent\u201d as used herein may be interpreted as representing any type of information transmitted between nodes, and in particular, \u201ccontent\u201d is used as a shorthand for referring to already-generated content or content that may be generated by requesting a node to execute a service. Furthermore, the persisted paths may be interpreted as representing the path of a message, without regard to the type of information carried by that message.","When a collection of third party XLinks is stored together in an XML document, the collection is referred to as a \u201clinkbase\u201d or a \u201clinkbase document\u201d. Thus, a linkbase as the term is used herein refers to a collection of traversal path definitions expressed as third party XLinks. Linkbase identifiers are defined using a format disclosed herein to uniquely identify nodes in the P2P network. (Refer to the discussion of , below, for more information about linkbase identifiers.)","Thus, the Path Intimater  manages persisted message paths as linkbases. These linkbases contain linksets, where a linkset defines the path traversed by a particular content resource. These linkbases are discussed in more detail herein.","The Path Intimater  is responsible for appending a SOAP header of the form shown in  to outbound SOAP messages to convey content traversal information. This header  contains a <traversalPathRef> tag  (which, in the example of , is prepended with a name space identifier of \u201cp\u201d for \u201cpath\u201d), and this <traversalPathRef> tag provides a reference  to a linkset which stores the traversal path of the specified content within the peer network. In the example of , the value of the \u201chref\u201d attribute  indicates that the traversal path information is stored in a linkbase document accessible using the Uniform Resource Locator (\u201cURL\u201d) \u201chttp:\/\/9.56.34.12\/linkbase\/lb.xml\u201d.","The Path Intimater  of the receiver is responsible for updating the receiver's linkbase accordingly upon receipt of an incoming SOAP header with a <traversalPathRef> element. This processing comprises adding the linkbase identifier the receiving node in an arc at the end of the traversal path identified by reference . (Thus, if the receiving node subsequently forwards the content associated with the traversal path, then the revised traversal path identified in the SOAP header described with reference to  will properly identify the forwarding node.) Refer to , below, for more information about how traversal paths identify paths between nodes.","The Gossip Monger  manages reputations as meta-data pertaining to nodes. In addition the Gossip Monger will process content meta-data and evaluate that content meta-data when revising node reputations. Preferred embodiments of the present invention leverage the Resource Description Framework (\u201cRDF\u201d) notation to specify the meta-data for describing both content and nodes. (RDF is a notation designed for specifying web-based meta-data. Refer to \u201cResource Description Framework, (RDF) Model and Syntax Specification, W3C Recommendation 22 Feb. 1999\u201d, provided on the Internet by the W3C at http:\/\/www.w3.org\/TR\/REC-rdf-syntax\/, for more information on RDF.) Because P2P networks are highly distributed, and IP addresses of nodes can change over time, as has been described, the Gossip Monger disclosed herein provides an evolutionary trust model where trust evolves over time. Initially, a node trusts itself, and over time the node gathers meta-data about content it receives through interactions with its peers and the path taken by that content. This gathered meta-data may be considered as providing a type of history or audit trail. The more content is received from a particular peer with positive results, the stronger the trust relationship with that peer will become. Optionally, a node may also derive trust from relationship information it obtains from its peers, where this relationship information describes interactions the peers have had with other peer nodes (which the node itself may not have interacted with).","Referring now to , preferred and alternative techniques for specifying reputation data are illustrated. In preferred embodiments, a node's reputation comprises an indication of the services provided by the node and\/or content which is available from the node, and the quality of service provided by that node. A node's reputation is preferably embodied as meta-data in messages sent from the node (and stored by receivers). In preferred embodiments, the quality of service is specified as a numeric value (referred to as the \u201cstature\u201d value) which represents how successful this specific node is at answering queries it receives from other nodes in the network. The quality of service component of a node's reputation may, in some cases, indicate a malicious node (for example, a node which has exhibited a tendency to be a source of rogue agents or resources). The ability to associate a reputation with a dynamically addressed node facilitates trust in the decentralized P2P world, and once the reputation information is available, a trust model employing security policies may be applied to P2P interactions. A major inhibitor to eBusiness in P2P networks is thereby removed. (Note that while preferred embodiments are described herein with reference to reputations that are learned dynamically, it may be desirable in a particular implementation to initialize or preconfigure the reputation of one or more nodes, for example to allow a systems administrator to facilitate systems administration, and such an implementation is considered to be within the scope of the present invention. This approach may be used to give selected nodes a relatively high stature, effectively designating those nodes as system nodes.)","According to preferred embodiments, transient nodes in a P2P network are identified using a linkbase identifier (\u201cID\u201d), or \u201cLBuuid\u201d, where this LBuuid has the form:\n\n","As an example of the LBuuids disclosed herein, the node represented by the sample reputation in document  of  has the LBuuid\n\n","Note that, at a given point in time, the current IP address of the node represented by the LBuuid in  is not guaranteed to be that indicated in the LBuuid, and is more than likely some other value obtained from a dynamic address assignment mechanism upon a subsequent entry into the P2P network. The LBuuid persistently representing a node is associated with the node's current IP address through a mapping stored in a resource set. (Resource sets are described below, with reference to .)","The <Description> tag  brackets the reputation information for this node. In the example a child tag named <QuerySet>  is specified, and has a \u201cstature\u201d attribute. In preferred embodiments, the stature attribute has a numeric value that indicates how successful (or unsuccessful) this node is at performing queries. The stature attribute value is preferably specified as a non-integer value ranging between \u22121 and +1, where a negative stature value indicates a malicious node. Preferably, a corresponding \u201ctotalQueries\u201d attribute is also specified, and its value is an integer indicating the total number of queries processed by the node. Thus in the example of , a node has received 2,145 queries and has successfully performed  percent of those queries. (An optional \u201cID\u201d attribute is shown in the example, which uses the conventional UUID format to provide a value which may be used to uniquely identify this query set .)","In an alternative embodiment, stature (i.e. success rate) information may be associated with individual queries, rather than with an entire query set. This alternative is illustrated in , where the \u201cstature\u201d and \u201ctotalQueries\u201d attributes have been specified on the <Query> tags rather than on the <QuerySet> tag. As will be obvious, other representations for the stature information may be used without deviating from the concepts of the present invention. For example, a single attribute might be used, having a value of the form \u201c34 percent of 2145\u201d or \u201c34, 2145\u201d. As another alternative, rather than using a stature value ranging between \u22121 and +1, separate attributes might be used to indicate unsuccessful (or malicious) results and successful results; or, counters might be used rather the percentages.","Returning to the discussion of , in the syntax used for preferred embodiments, <QuerySet> tag  has one or more <Query> child elements, where this collection of <Query> elements enumerates the set of queries (preferably expressed as regular expressions) which may be satisfied by this node. In this example, the node can satisfy three different queries , , .","The regular expression syntax of the first <Query> tag  indicates that the node can process queries of the form \u201cpurchase_order 999-9999-999\u201d\u2014that is, the text string \u201cpurchase_order\u201d followed by 3 numeric values, a hyphen, 4 numeric values, another hyphen, and 3 numeric values. (In the example used herein, these numeric fields are intended to specify a customer number.)","The second <Query> tag  in the example query set indicates that the node can process queries expressed as the text string \u201cpartner profile list\u201d. The third <Query> tag  represents queries which are text strings ending in \u201c-NDA.tiff\u201d.","Optionally, different or additional information may be used to determine a node's reputation, and thus the information represented by  is for purposes of illustration and not of limitation. For example, it may be useful to track a node's efficiency, and reputation data may be used for this purpose. If efficiency is measured as response time for handling queries, for example, then a response time attribute might be added to the node's reputation (either as a query-specific value using the approach of , or more generally using the approach of ). As stated earlier, a node's reputation is processed by a Gossip Monger handler. Thus, the reputation handling described herein may be extended by a handler as needed to support additional or different types of reputation data.","Tracking a node's efficiency facilitates making a more advised selection among content\/service providers than is available in prior art P2P networks. When used in the SSP environment discussed earlier, an SSP using this node efficiency information can make run-time decisions about how to select a storage resource and provision storage resources, thus improving service to customers of the SSP and increasing the likelihood of meeting commitments in SLAs.","A reputation provides hints to remote nodes about the capabilities of a node, and as described herein, provides that information in terms of the node's ability to respond to queries. When used for the purpose of file sharing, issuing a query to a node represents asking the node \u201cDo you have a file of this description?\u201d. A responding node supplies its reputation to inform the requester that it can answer that query (i.e. it can provide the requested file), and also to indicate how successful it has been in the past at serving files (using the approach in ) or at serving this particular file (using the approach in ).","Referring now to , an example showing the preferred technique for specifying content meta-data (that is, information about particular content) is illustrated. Using meta-data information of this form, a node can programmatically determine what content queries it can respond to. In preferred embodiments, RDF is used for specifying content meta-data in a similar manner to how RDF was used for reputation meta-data (see ). As shown in the example in , the \u201cabout\u201d attribute  of <Description> tag  specifies the identifier of the content described by document . The value of an \u201cabout\u201d attribute is, according to preferred embodiments, an identifier that specifies a file name or other storage location where the content for responding to a particular query is stored. Thus, in the example, this content is stored at location \u201cpurchase_order 123-4567-890.xml\u201d. This identifier serves as a persistent content key which can be used to associate content meta-data with the actual content.","The <Description> tag  in the example syntax has child tags <Creator>  and <synopsis> . A <Creator> tag preferably has a date attribute and a time attribute, the values of which specify the date and time of creation of the described content. (Alternatively, the date and time might be combined into a single \u201cDate_Time\u201d attribute.) The value of the <Creator> tag  identifies the person (in this example) who created the content. Alternatively, a process identifier might be used as the value of the <Creator> tag, such as the LBuuid of the P2P node from which the content originated. The <synopsis> tag  preferably has a free text value, and may be used to provide a human-readable description of the corresponding content. Thus, in the example, <synopsis>  indicates that the content stored at \u201cpurchase_order 123-4567-890.xml\u201d is a purchase order for AMEX customer # 123-4567-890.","The information in the <Description> element, or selected portions thereof, may be presented to a human user, for example to assist that person in selecting a content\/service provider from among multiple candidates. In a more automated environment, information from the <Description> element may be analyzed by a programmatic selection process. As will be obvious, the content meta-data shown in the example is merely illustrative of the type of information that may be stored, and the form in which that information may be expressed.","The Gossip Monger is responsible for appending a SOAP header of the form shown in  to outbound SOAP messages to inform a receiving node of reputation information. This appended reputation header  contains a <reputationRef> tag  that provides a reference (using \u201chref\u201d attribute ) to a reputation repository where the transmitting node's reputation information is stored. (This stored reputation information pertains to the transmitting node itself, and preferably also contains reputation information about peer nodes of which the transmitting node is aware.)","The Gossip Monger  of the receiver identifies reputation meta-data as a header field within an inbound SOAP message, and processes the reputation meta-data as further described herein.","The Digital Signature handler  digitally signs message entities so as to ensure message integrity and sender authentication. This handler preferably follows the SOAP Digital Signature specification from the W3C, and leverages a PKI to manage certificates and apply\/verify signatures. SOAP digital signatures and PKI techniques are known in the art, and will not be described in detail herein.","Given the appropriate AXIS handlers or Gossip Monger privileges, a system node may actually read\/write to remote peer linkbases and meta-data repositories directly, for example to forcefully add themselves to a peer group, to insert content traversal path definitions, or to manage a peer's reputation (e.g. to modify node X's stored reputation information such that it now identifies a member Z of node X's peer group as being malicious). Preferably, this type of system management capability is implemented using a new AXIS handler, where the system management function may be considered as a Super Gossip Monger in that it can override the functioning of other Gossip Mongers. Or, when multiple classes of nodes are supported, the existing AXIS handlers may be adapted to recognizing identifiers of the classes, and determining which operations can be accessed by the corresponding nodes. For example, while \u201cclass 0\u201d nodes (i.e. the default peer nodes) may make queries and assert their reputations, traversal paths, and so forth, nodes of another \u201cclass N\u201d (such as the system nodes described herein) may be permitted to read and write linkbases and repositories, effectively managing the network views maintained by nodes. (Refer to  and , below, for more information about implementing system management capabilities using an additional AXIS handler.)","Returning now to the discussion of the content paths stored in linkbases, a linkbase according to preferred embodiments of the present invention is comprised of a volatile component and a persistent component. The volatile component is referred to herein as a \u201cresource set\u201d, and the persistent component is the collection of traversal path definitions. The resource set is illustrated by XML document  of . The resource set is defined as a collection of XLink locator links. One group of these links is used to define the mapping between dynamically-assigned network addresses and persisted LBuuid values for every node that the current node is aware of. These links are specified as <node> elements. Another group is used to define links that map descriptions of downloaded content to locations where that content currently resides in a local content repository. These links are specified as <content> elements.","The linkbase resource set is preferably stored as an in-memory table to enable fast look-ups of the mappings. Thus, if a node wants to interact with a peer node, it can consult this table to find the node's current address. The root element of the document storing the resource set is <ResourceSet>, which is defined as an extended XLink (see the \u201ctype\u201d attribute at ).","As shown in , the first three elements , ,  are <node> elements which define mappings between newly resolved network endpoints (i.e. URLs) and persistent linkbase IDs. The \u201chref\u201d attributes of the <node> elements identify the new endpoints, and the \u201crole\u201d attributes identify the persisted LBuuids. The fourth element  is a <content> element which specifies a content resource, and identifies local content which has been downloaded from the peer network. The \u201chref\u201d attributes of the <content> elements identify the current storage location of the content, and the \u201crole\u201d attributes identify the persisted storage location identifiers.","Each <node> element is a locator XLUink (see, for example, the \u201ctype\u201d attribute at ) with an \u201chref\u201d attribute indicating the network endpoint of the node which is maintaining the linkbase with ID equal to the value of the \u201crole\u201d attribute. For example, \u201chref\u201d attribute  has the value \u201chttp:119.56.34.12\/soap\/rpcroutert\u201d. According to the mapping in element , this URL represents the node which is managing the linkbase having the persistent LBuuid \u201c9.37.43.2-Mar. 4, 2001-12:02:05:37-NetZero.net\u201d. The first <node> element  pertains to the local node (having a \u201clocal\u201d attribute whose value is set to \u201ctrue\u201d), whereas the other node> elements ,  pertain to remote nodes (having a \u201clocal\u201d attribute whose value is set to \u201cfalse\u201d).","The <content> element  is also a locator XLink. The \u201chref\u201d attribute  of this mapping indicates that the storage location \u201cfile:\/\/usr\/awesley\/etc\/downloads\/purchase_order 123-4567-890.xml\u201d is currently used for storing the local content identified as \u201cpurchase_order 123-4567-890.xml\u201d (see \u201crole\u201d attribute ).","The persistent component of the linkbase (i.e. the traversal path definitions) is represented within the resource set by the collection of arcs which denote the traversal path of a specific content resource from one node to another, where nodes are identified by their respective linkbase ID (i.e. LBuuid) values.","Referring now to , a sample traversal path definition  is provided. This example illustrates how a directed graph is used for tracking the path taken by a content resource since it entered the P2P network. The traversal path is specified using a <traversalPath> element . One or more <arc> elements, represented in the example by elements  and , are XLink elements which have a \u201ctype\u201d attribute of \u201carc\u201d. (See, for example, reference numeral .) These <arc> attribute values specify movement of the content from one node to another. Arc XLink elements leverage the roles of resource and locator nodes. The locator nodes are defined in the resource set, as illustrated by , and the resource nodes sit identified using the \u201cresource\u201d attribute of the <era> nodes in . This will now be described with reference to the path beginning at <arc> link , which specifies that the content identified at  as \u201cpurchase_order 123-4567-890.xml\u201d (which, according to element  of FIG. ,is currently stored at location \u201cfile:\/\/usr\/awesley\/etc\/downloads\/purchase_order 123-4567-890.xml\u201d, and which represents a purchase order for customer 123-4567-890) was generated by (or at least entered the network at) the node managing the \u201c12-37.43.5-Mar. 3, 2001-08:35:13:04-MindSpring.com\u201d linkbase (see the value of \u201cfrom\u201d attribute ). The value of the \u201cto\u201d attribute  indicates that This content was then downloaded by the node managing the \u201c12.37.43.5-Mar. 2, 2001-03:45:23:02-MindSpring.com\u201d linkbase.","Continuing with the <arc> node , the value of \u201cresource\u201d attribute  is identical to the value of \u201cresource\u201d attribute , and the \u201cfrom\u201d attribute  has the same value as the \u201cto\u201d attribute  of the previous <arc> element , indicating that this is a further traversal for the same content. Thus, the final \u201cto\u201d attribute  indicates that the content was downloaded by the current node. If an application reading the linkbase identified at  wishes to access the content specified at , it may do so by leveraging the <content> XLink defined in the resource set. See reference numeral , where the corresponding <content> element is defined. By matching the value of the \u201cresource\u201d attribute  to the value of \u201crole\u201d attribute , this <content> element  is selected from the resource set, and the actual location of the content is then found using the value of its \u201chref\u201d attribute . Thus, in the general case, the persisted arcs represented by <arc> elements in a traversal path definition connect linkbases through their \u201cresource\u201d attribute value and the \u201crole\u201d attribute value of a <content> element in the resource set, where that <content> element provides the location of a persisted content resource.","Preferred embodiments of the present invention use a bootstrap flow, described herein as having seven stages, to initialize all nodes on the network at load time (including system nodes, when implemented). This flow will now be described with reference to . In the first stage (Block ), the node in question resolves its own IP address. Assuming the node does not have a static IP address, a dynamic address assignment technique of the prior art (such as the Dynamic Host Configuration Protocol, or \u201cDHCP\u201d, or the Auto IP protocol, etc.) is preferably used for this purpose. (If a node has a static IP address, then it may skip this stage.)","As a precursor to the second stage, a test is made (Block ) to see if the node already has an LBuuid of the form disclosed herein. If the result of this test is negative, then in stage two, an LBuuid for the node's linkbase is generated (Block ). This negative result occurs on the first invocation of the peer node, when the linkbase must also be initialized. The LBuuid generated in this stage serves as the UUID for the node's linkbase, where the LBuuid is of the form:\n\n","Preferably, the \u201ca\u201d parameter serves as an indicator of the provider of the IP address (e.g. its domain name), as described earlier. Alternatively, \u201ca\u201d may be a parameter as used in prior art UUIDs, which use a random number. Any UUID generation algorithm may be used, however to allow for accountability and tracking as has been described above, it is preferred that the generated value be in a form that provides the ability to trace a linkbase to its owner and thereby track a content resource to its origin (and the peer nodes which downloaded it).","When initializing the linkbase, a set of arcs is created to represent how the node's local content has traversed the network. (Refer to , where examples are discussed.)","Once an LBuuid is available for the node's linkbase, stage three commences to broadcast an \u201calive\u201d message from the node (Block ). The alive message advertises the node's presence on the network. In preferred embodiments of the present invention, the alive message leverages SOAP over HTTMU. HTTMU is a UDP multicast-based version of HTTP, and allows the alive message to be sent to all nodes on the subnet. A sample alive message is illustrated in , where a <notification> element  has a \u201ctype\u201d attribute  set to \u201calive\u201d. According to preferred embodiments, the alive message also specifies the LBuuid value for the node's linkbase (see the <linkBaseID> element at ) and a reference to the node's version of its own reputation (see the <reputationRef> element at ). The reputation information is shown in  as being provided by a simple link to a document identified through an \u201chref\u201d attribute . The value of this attribute provides a URL where the node's reputation information is persisted. Thus, the alive message informs peer nodes of how to find the sending node's persisted identifier and the location of its reputation. The alive message also preferably includes call back information which indicates a callback address for the response message (see the \u201ccallback\u201d attribute ), where the node's current IP address is provided, and another attribute  specifying one of the following:","1) An inquiry Uniform Resource Indicator (\u201cURI\u201d) which points to a UDDI registry, along with a binding key for a file-sharing service available from this node. Thus, when using the web services model with a UDDI registry, the alive message in this option identifies not only the registry that holds the publish and inquiry Application Programming Interface (\u201cAPI\u201d) for this service, but also the binding key for this file-sharing service.","2) Some non-UDDI way to discover a node's file-sharing service, such as a Web Services Inspection Language (\u201cWSIL\u201d) reference. WSIL is a notation designed for assisting in the inspection of a site for available services and for specifying a set of rules indicating how inspection-related information should be made available for consumption. WSIL is defined by IBM and Microsoft, and consolidates concepts found in earlier endeavors referred to as \u201cADS\u201d from IBM and \u201cDISCO\u201d from Microsoft. (Refer to \u201cWeb Services Inspection Language (WS-Inspection) 1.0\u201d, Keith Ballinger et al. (November 2001), published by IBM on the Internet at http:\/\/www-106.ibm.com\/developerworks\/library\/ws-wsilspec.html, for more information on WSIL.)","In the example in , the second option has been selected, and thus attribute  is a \u201cwsil\u201d attribute which specifies a URL at which WSIL information is stored.","Continuing on to stage four (represented by Block ), the node listens for a SOAP over HTTP response to be sent by peers who receive the alive message sent at Block . According to preferred embodiments, the response message from each of these remote nodes is also an alive message, and specifies the LBuuid for the remote peer, along with a URL identifying where to find the remote node's self-managed reputation information. As described earlier, a node's reputation includes a stature value representing how successful that node is at handling queries. (As discussed with reference to , the stature value may represent all of the node's queries, or query-specific values may be provided.)","If the local (receiving) node has its own version of the remote node's reputation, then the two reputations are preferably merged for storing in a local repository (such as an in-memory table) which the local node creates to represent the remote nodes it knows about (i.e. the remote nodes in its resource set). According to preferred embodiments, when the local node's view of the remote node diverges from the remote node's view of its reputation, the merge operation comprises copying the remote node's input over the local node's information. (This may be appropriate when the local node has been absent for the network for some period, during which time the remote node's reputation was revised; or, the local node might have missed some propagation of the remote node's activities for other reasons, causing it to fall behind in what it knows about that remote node.) However, if the local node has identified the remote node as malicious, then (in the general case) the local node preferably ignores the remote node's incoming view of its reputation. Other techniques for deriving a local reputation value for a remote node may be used without deviating from the scope of the present invention, such as averaging the local view with the remote node's view, or extrapolation (e.g. to incorporate what the local node knows, and what it does not know, about another node's interactions).","When a system-level Gossip Monger is defined, and has permission to inject reputation information into repositories maintained by peer nodes, then the local Gossip Monger may have its view of a remote node's reputation overridden by this system-level Gossip Monger.","In stage five (represented by Block ), the local node issues what is referred to herein as a \u201cspy\u201d message. Preferably, this spy message is sent directly to all peers who have responded (at Block ) to the local node's initial \u201calive\u201d request, and essentially requests that each peer propagate the alive request to each node on the network of which that peer is aware. Multi-homed peers (i.e. those which support more than one network connection) may then forward the alive request to peers beyond the current subnet. These peer nodes will then respond with alive response messages of their own, enabling the local node to dynamically learn the P2P network topology. The information gathered from the returned alive messages is used to build the LBuuid to URL mappings (in the local node's resource set), thereby enabling the node to resolve the identities of its peer nodes.","Note that spy messages are considered an optional aspect of the present invention, and the depth of propagation for spy messages is preferably determined by the requesting application. The spy message may have an optional depth attribute which determines the maximum number of sequential forwards. The spy message preferably provides a UUID for the message, in order to avoid recursive processing of spy messages which trigger endless loops.",{"@attributes":{"id":"p-0110","num":"0112"},"figref":"FIG. 10","b":["1005","1000","1010"]},"Returning to the discussion of , in stage six (represented by Block ), the local node uses alive messages it receives in response to its own alive message (and in response to its spy message, when implemented) to update its in-memory table entries which map network endpoints to the linkbase IDs of remote nodes. The collection of these entries comprises the <node> elements in the local linkbase's resource set, as illustrated by the example in . The update process comprises updating URLs as necessary, such that the in-memory table identifies the current location of the node associated with each LBluuid. (Note that because the resource set is an XML document, which is preferably stored using a Document Object Model or \u201cDOM\u201d tree, adding new entries corresponds to creating new DOM tree nodes. Techniques for building DOM tree nodes from XML syntax elements are well known in the art.)","A node may also update locally stored reputation information pertaining to the remote nodes which return alive messages in response to the spy message. Refer to the discussion of Block , where this reputation updating is described with reference to the nodes responding to the node's own alive message.","Lastly, in stage seven (Block ), the local node listens for alive messages from other peer nodes, preferably over a reserved HTTPMU channel, and sends an alive message in response (which is analogous to the alive response messages described with reference to Block ). This listening process is preferably ongoing, enabling the node to maintain awareness of its peers on the P2P network and revise its resource set (which caches correlations between LBuuids and URLs) and the locally-stored peer reputation information accordingly.",{"@attributes":{"id":"p-0114","num":"0116"},"figref":"FIG. 11","b":"1100"},"In Block , an optimization process is preferably performed, whereby the node evaluates the reputations of its peer nodes to resolve what are referred to herein as \u201cbroadcast tiers\u201d. These broadcast tiers specify a hierarchical approach to query resolution, and the peer nodes in each tier are selected based on their perceived ability to satisfy the query. This hierarchical approach attempts to reduce the number of query request messages and response message which traverse the network. Preferably, a pattern matching approach is used to determine which nodes can answer a particular query, using the <QuerySet> in each node's reputation. Refer to . For example, if a particular node cannot answer the \u201cpurchase_order 999-9999-999\u201d query pattern represented using the syntax at , then it is inefficient to send a query of that form to this particular node. Instead, the nodes whose reputations indicate that they support this query, and which have relatively higher stature values, would be selected as a first broadcast tier.","As an optional enhancement of this pattern matching operation, a site summary may be leveraged. \u201cSite summary\u201d refers to a content syndication technique provided using RDF and known in the art as \u201cRSS\u201d. A site summary may comprise a set of content descriptions, describing the content\/services available from a particular site (i.e. the node's query set). When the set of descriptions is changed, for example to add new content for a site, the description can be proactively pushed to syndicators of the content using RSS. Nodes initially learn of one another's reputations via the alive messages, as discussed above. As the nodes participate in interactions with other nodes, their reputations (including their stature, and possibility their query set) typically change. It may happen that some nodes do not interact with other nodes frequently, causing those nodes' view of each other's reputation to become outdated. Site summaries may therefore be used advantageously to periodically propagate reputation information among the nodes in the network.","The request is sent to the identified \u201cpriority provides\u201d in Block . Preferably, the queries are sent using a directed \u201cbroadcast\u201d approach (over HTTP), where the resource set is used to determine the current IP address of each of the target nodes. (If broadcast tiers are not used, then the targets of the query message may be determined in another manner, including sending the message to all peers represented in the resource set.) A sample query embodied in a SOAP message  is illustrated in . As shown in this example, the <query> tag  has as its value  the text string representation of the query, where the account number of interest (\u201c123-4567-890\u201d) has been provided as an input parameter value. (Note that this query will be interpreted by the receiving peers as a type of probe, whereby they are being queried to determine whether they do in fact support this query, and what they assert as being their current stature for answering the query. The message sent at 1120 is not an actual content request.)","If no satisfactory response is received from any nodes in the first tier (i.e. none of the queried peers is able to respond to the query with an acceptable stature), then control returns to Block  where a second tier comprised of the next best set of peers is identified. (Preferably, a time interval, which may be configurable, is used to limit the time spent waiting for the queried peers to respond.) This second tier preferably comprises those peers which also support this query but have lower stature values than the first tier. The requests are then sent again by Block .","This process of sending query requests to peers in various tiers will continue until all non-malicious peer nodes have been queried, or a satisfactory response to the query request has been received. Control then reaches Block .","Note that in some cases, it may be productive to eventually send the query request to nodes which do not indicate support for the query: because of the ad hoc nature of the network, the local node will typically not know the most current information about the reputations of all of its peers (including their query sets) all of the time. Thus, a peer node which can do a good job of responding to the requested query may be found, even though the local node's information does not show that peer as being a good candidate.","Returning again to , assuming that one or more of the queried peers responds that they do in fact support this query, in Block  the local Gossip Monger handler processes the meta-data from the responding nodes. That is, the response message from the remote peers will contain meta-data describing the content which best satisfies the request within the remote node's content repository, and information from this response message is preferably cached locally for processing by Block . See the sample SOAP response message  in , where a <content-meta-data> tag  in the SOAP header provides a simple XLink element that points to the location of the content meta-data. In the example, the value of \u201chref\u201d attribute  indicates that information identified as \u201cpurchase_order123-4567-890.rdf\u201d is embedded herein as the first child of the <queryResponse> element (see the xpointer syntax at ). The <queryResponse> element is shown at , and contains an RDF specification of the content meta-data (see ) from the responding node. As shown in this example, the responder indicates the name of the document it would return (see the \u201cabout\u201d attribute value at ); content creator information including the date and time of creation, as well as the name of the creator (see the <Creator> element ); and a synopsis pertaining to the named document (see the <synopsis> element ).","The content meta-data from the collection of responding nodes is then evaluated by the user. As stated earlier, this user evaluation may be performed by a human, or by a programmatic process. When the user is a human, the value of the <synopsis> element  is preferably displayed on a graphical user interface panel, and other values from the <Description> element  may also be displayed if desired. After analyzing the content meta-data, the user identifies his\/her\/its preference for which peer or peers best satisfies the query, and a request for the content is then issued as a SOAP POST request (Block ).",{"@attributes":{"id":"p-0123","num":"0125"},"figref":["FIG. 14","FIG. 12"],"b":["1400","1405","1410","1330","1410"]},"The peer node preferably returns the requested content encoded as a SOP response message with a multipart Multi-purpose Internet Mail Extensions (\u201cMIME\u201d) structure. Upon receiving the requested content, the receiving mode processes that content (Block ). A specification being promulgated by W3C which is titled \u201cSOAP Messages with Attachments, W3C Note  Dec. 2000\u201d (see http:\/\/www.w3.org\/TR2000\/NOTE-SOAP-attachments-20001211) describes a standard way to associate a SOAP message with one or more attachments in their native format using a multipart MIME structure for transporting the attachments. An example of the SOAP response message is shown at  of , wherein the response to the content request is specified in a MIME attachment as represented by reference numeral . According to preferred embodiments, the SOAP response also has headers indicating the traversal path of this content since entering the peer network (see ), and the remote peer satisfying the request preferably also provides a URL identifying its own representation of its reputation(see ).","The processing performed at Block  comprises extracting the traversal path and remote reputation information (after first decrypting the message, if required, using a decryption handler).","The digital signature handler then verifies all digital signatures on this message (Block ). If authentication of the sender fails, or message integrity checks fail, then this will adversely impact the reputation of the peer, and the reputation asserted by that peer node will preferably be ignored. (Alternatively, it might be desirable in a particular implementation to decrement the local version of this peer node's reputation under such circumstances.)","The locally-maintained reputations of all peer nodes who were issued the content request  are updated (Block ) to reflect their success rate at satisfying queries. Preferably, this comprises incrementing the value of a \u201ctotalQueries\u201d attribute, and incrementing or not incrementing a success count, as appropriate for this particular responder, followed by recomputing the stature. In preferred embodiments, the stature is computed by dividing the success count by the totalQueries value. These updated values are then locally stored. In alternative embodiments, the stature may be computed in other ways.","In Block , assuming the peer has been successfully authenticated, the traversal path information obtained from that peer's response message (see reference numeral  of document  in ) will be stored locally and associated with the newly-received content. (See <content> element  in resource set  of  for an example.) In addition, the traversal path will be extended to include the current node as the latest target node in the directed graph (that is, by creating a new <arc> element of the form shown at  in ).","Finally, the received content is presented to the application (Block ), which then processes that content in an application-specific manner. The requester flow of  then ends for this content request.","Note that as an optional extension of the processing shown in , the user may provide feedback on whether the content ultimately satisfied his\/herlits request, which may impact the stature of the provider node.","Turning now to , a preferred embodiment of the provider flow with which a (remote) peer node evaluates and responds to content requests will be described. This process begins at Block , where the peer node receives a query and extracts the query string from the received query.","In Block , the peer node performs a pattern matching operation to match the extracted query string against its own content meta-data to determine whether it can answer this query. (Refer to , where a sample <QuerySet> element identifies the queries a particular node can support.) Note that a particular implementation of the present invention may leverage a site summary to expedite this pattern matching process, as described earlier with reference to identifying target nodes for query messages.","If this peer node can perform the requested query, it creates a SOAP response message of the form described above with reference to Block  (which discussed the requesting node receiving the responses from potential content providers) and returns that message to the requester (Block ). As discussed above, this response message contains a SOAP envelope which encompasses an RDF message having meta-data that describes the content offered by this peer node for satisfying the query request.","Note also that in sortie cases, the response message sent by Block  may contain multiple RDF messages. This may happen when a particular node is able to support a query in more than one way. Furthermore, it may happen that the query request specified using SOAP header  (sent as described with reference to Block ) contains more than one query pattern (e.g. fonnatted as more than one <query> tag ). The response may contain a plurality of RDF messages in this case as well.","After issuing a response message, the provider node listens for incoming content requests from the requester node (Block ). Rather than the \u201ccan you support this query\u201d message received in Block , this awaited content request is a \u201cplease perform this query\u201d request. According to preferred embodiments, the node will listen for the incoming content request for a configured time interval. If the time interval elapses without receiving the awaited request, then processing of this content request is considered to be complete, and control is therefore shown as returning to Block  to await the next \u201ccan you support this query\u201d request message. (As will be obvious, a separate thread is preferably used, such that the node watches for incoming requests on an on-going basis.) Otherwise, if the awaited \u201cplease perform this query\u201d request message is received, then processing transfers from Block  to Block .","Block  invokes processing of the requested query, and formats the result as a SOAP response message using multipart MIME attachments (as described above with reference to ).","In Block , the Path Intimater of the provider node prepends a reference to the content's traversal path as a SOAP header for the outbound message. Refer to , where SOAP header  provides the traversal path definition information, as illustrated by . (As described earlier, the <traversalPathRef> tag  in header document  provides a reference  to a linkset which stores the traversal path of the specified content within the peer network.) The present invention also updates the locally-stored content traversal path definition (e.g. as being generated by this node with particular date and time values, or forwarded by this node with particular date and time values, as appropriate).","The provider node's Gossip Monger then updates the node's local reputation (Block ), stores the updated information, and includes the reputation information in a SOAP header of the outbound message. (Refer again to , where SOAP header  encompasses the responding node's version of its reputation, as illustrated by .) When updating its reputation, the provider node preferably counts the interaction as a failure to satisfy the content request if the time interval expires without receiving a \u201cplease perform this query\u201d request. Otherwise, the provider node preferably counts this interaction as a success. Taking the success or failure outcome into account, the \u201cstature\u201d attribute is recomputed, as discussed above with reference to Block  of . (Note that the failure processing would be performed as a result of a negative result at Block .)","The generated response message is then digitally signed (including the SOAP headers and attachments) by the Digital Signature handler (Block ), and the response message is then returned to the requester.",{"@attributes":{"id":"p-0140","num":"0142"},"figref":"FIGS. 17A\u201317C"},"Due to the evolutionary trust model disclosed herein, any node may potentially achieve management stature and thereby operate as a system node. Thus, the system management functionality may be deployed in all nodes on the network if desired, or in a plurality of nodes. The management code in a system node is preferably certified by a certificate authority, enabling other nodes to trust messages issued by that code: digital signatures on these messages allow the Management handler in receiving nodes to verify the source of the messages.","In preferred embodiments, the Management handler supports two new header types, which are referred to herein as \u201cpeek\u201d and \u201caccess\u201d. The peek header may be used to inform a node that its traffic is to be monitored by the system node. The access header may be used to read from, or write to, a node's linkbase, reputation repository, or content repository.",{"@attributes":{"id":"p-0143","num":"0145"},"figref":"FIG. 17A","b":["1700","1710"]},{"@attributes":{"id":"p-0144","num":"0146"},"figref":["FIGS. 17B and 17C","FIG. 17B"],"b":["1730","1750","1750","1740"]},"In the example <access> header  in , which illustrates a read operation, the command provides a \u201clinkBaseURI\u201d attribute  to identify a linkbase to which the system node seeks access. In the example, the value of this attribute uses xpointer notation to signify that the <content> element is to be located within the <ResourceSet> document, where the example document is stored at \u201chttp:\/19.56.34.12\/linkbase\/Ib.xml\u201d. Attributes may alternatively be provided on the access command for accessing the reputation repository or content repository. The \u201chref\u201d attribute  provides an address of the system node, enabling the receiving node to identify the sender of the header and, for the read command, to return the requested information.","Preferably a receiving node ascertains the system node's stature in the process of verifying the sender, to determine whether the sending system node has earned sufficient trust to be performing management functions. The digital signatures added by the Management handler are also preferably verified to ensure that the header messages originated from the corresponding system node. Optionally, the receiving node may issue a challenge to the sender in order to verify the sender's identity; this is facilitated through use of \u201chref\u201d attributes that identify the sending system node, as indicated in the examples in .","Referring now to , a management flow is shown that may be implemented by system nodes for carrying out system management capabilities (e.g. to monitor and manage the peer community). In Block , the system node invokes the peek operation; preferably, the peek header is sent to nodes as they join the network (which may be detected by their issuance of \u201calive\u201d messages, as described above with reference to ).","Once the peer nodes begin replicating their SOAP traffic to the system node, the system node monitors that traffic (Block ). In particular, the system node preferably monitors all transmissions of reputations and content. The system node can therefore observe what the various peer nodes are asserting their reputations to be, including references to their reputation repositories, and can also observe whether content from particular nodes is being accepted as constituting a successful interaction.","In Block , the system node is shown as evaluating the monitored traffic to detect security events. Preferably, the system node triggers a security event when false reputation information is asserted and also when tainted content is being propagated. For example, if a node asserts that it has a high positive stature value, but the system node has observed many peers rejecting content from this node, then the system node may conclude that the asserting node is a malicious node. Similarly, the system node may detect peer nodes rejecting particular content, and may conclude that the content is tainted; a security event is preferably triggered in this situation as well.","When a detected security event involves a false reputation (see Block ), the management flow at the system node transfers to Block , where the system node issues an access command to access that node's reputation (preferably using a write operation to impose the system node's view of the reputation on receiving nodes). Note that the system node may inform a node of it's own reputation, or of the reputation of another peer node. A reserved area may be provided within the reputation repository (where this reserved area cannot be overwritten by a malicious node), and the write operation may then cause information to be written into this reserved area. Malicious nodes can be prevented from writing into this area of the repository to falsely establish high stature values. When a node subsequently accesses the reputation repository, it preferably interprets information stored in the reserved area as taking preference over other data pertaining to the same reputation. Alternatively, if a reserved area is not used, then the information sent by the system node on the access header may be written into non-reserved storage. (Note that peer nodes may also send reputation information to one another, as has been described, either in the form of a reputation reference or a message containing reputation information.)","The test in Block  determines whether the security event was related to tainted content. If so, then processing reaches Block , where the system node issues an access command to assert that content stored by a peer is tainted (e.g. to access and overwrite linkbase data in order to modify traversal paths). The linkbase may also use a reserved area, into which the system node can write content path traversal information.","The system node may also be allowed to issue commands to overwrite the node's locally-stored content, if desired in a particular implementation, as discussed earlier with reference to use of other attributes on the access header. Processing of access commands that affect the content repository may be performed in an analogous manner to that which has been described for commands affecting the reputation and content traversal paths.","Once the security event processing is complete, control returns to Block  to continue monitoring traffic of the peer nodes. (As will be obvious, the security processing is preferably performed by a separate thread, such that the monitoring is not interrupted.)","While the monitoring function has been described with reference to security, implementations of the present invention may use information gathered from monitoring peer node traffic for other purposes. Examples of other uses include failover and high availability scenarios. In a failover scenario, for example, the access command can be used to replace references to a failing node with references to a backup node, or perhaps to delete references to a node which has failed. These changes may be made by identifying the failed node in the resource set, and replacing or deleting the entries referring to the node's LBuuid. In a high availability scenario, when the system node detects that a particular peer node is overloaded, or perhaps that resources of other nodes are under utilized, the access command can be used to modify linkbase references to content (or to a service) such that traffic is re-directed to a different node where the content (or the service) may alternatively be obtained.","As has been demonstrated, the techniques disclosed herein provide a framework for a managed peer-to-peer network, and enable maintaining peer relationships across invocations and reusing those relationships and identities as ad hoc communities are formed. As discussed above, peer nodes may enter and leave the network at will, and the techniques disclosed herein enable providing security, management, and other system-level functions in the presence of these transient communities. The disclosed techniques enable transient communities in P2P networks to be managed, and allow for exchange of secure transactions where message integrity can be ensured in transient communities.","The Hailstorm project (also referred to as \u201c.Net My Services\u201d) from Microsoft Corporation has been characterized as a P2P technology. However, the P2P support therein appears to be limited to instant messaging. Other existing P2P networking products such as JXTA, which was discussed earlier, do not provide the features disclosed herein for use in transient communities.","As will be appreciated by one of skill in the art, embodiments of the present invention may be provided as methods, systems, or computer program products. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment combining software and hardware aspects. Furthermore, the present invention may take the form of a computer program product which is embodied on one or more computer-usable storage media (including, but not limited to, disk storage, CD-ROM, optical storage, and so forth) having computer-usable program code embodied therein.","The present invention has been described with reference to flow diagrams and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each flow and\/or block of the flow diagrams and\/or block diagrams, and combinations of flows and\/or blocks in the flow diagrams and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, embedded processor or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions specified in the flow diagram flow or flows and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function specified in the flow diagram flow or flows and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the flow diagram flow or flows and\/or block diagram block or blocks.","While the preferred embodiments of the present invention have been described, additional variations and modifications in those embodiments may occur to those skilled in the art once they learn of the basic inventive concepts. Note also that while preferred embodiments have been described with reference to the web services environment the disclosed techniques may also be used in other P2P network environments. Furthermore, while preferred embodiments have been described herein with reference to SOAP messages and particular syntax for message headers, documents, etc., this is for purposes of illustration and not of limitation; alternative message formats and alternative syntax may be used without deviating from the scope of the present invention. Additionally, whereas reference is made herein to transient networks, it may happen that the network topology stabilizes over time, and thus the term \u201ctransient networks\u201d may be construed as referring to networks that have an architecture which supports a transient topology. Therefore, it is intended that the appended claims shall be construed to include the embodiments and all such variations and modifications as fall within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3A","FIG. 3B"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 12","FIG. 11","FIG. 13"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 14","FIG. 11"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIGS. 17A\u201317C"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
