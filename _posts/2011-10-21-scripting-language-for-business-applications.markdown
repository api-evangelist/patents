---
title: Scripting language for business applications
abstract: The present disclosure involves systems, software, and computer implemented methods for providing a scripting language for business applications. One process includes operations for providing a scripting language editor for generating software components for a business application, the scripting language editor configured to receive scripting language input. A scripting language file saved by the scripting language editor is identified. Metadata associated with at least one of a business object or a data type of a platform of the business application is retrieved. A business application language file is generated based on the scripting language file and the retrieved metadata.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959477&OS=08959477&RS=08959477
owner: SAP SE
number: 08959477
owner_city: Walldorf
owner_country: DE
publication_date: 20111021
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates to software, computer systems, and computer implemented methods for providing a scripting language for business applications.","Business applications, such as Enterprise Resource Planning software, may consist of modular application components that are combinable to meet the needs of a specific business scenario. After initial release or development of the business application, additional application components, features, or add-ons may be developed to enhance the functionality of the business application. In some cases, development of the business application and add-on components may be conducted internally within a business organization, such as a business application software developer, using comprehensive business application programming languages. The business application, however, may also support the addition of add-on components developed and delivered by third parties. The third party developers of the add-on components may need additional support from the business application software developer for programming add-on components. Some third parties may not be familiar with the business application programming language of the business application software developer.","The present disclosure describes techniques for providing a scripting language for business applications. A computer program product is encoded on a tangible storage medium, where the product comprises computer readable instructions for causing one or more processors to perform operations. These operations may include providing a scripting language editor for generating software components for a business application, the scripting language editor configured to receive scripting language input. A scripting language file saved by the scripting language editor is identified. Metadata associated with at least one of a business object or a data type of a platform of the business application is retrieved. A business application language file is generated based on the scripting language file and the retrieved metadata.","These and other embodiments may optionally include one or more of the following features. The metadata is retrieved from a backend system hosting a runtime environment for the business application language file. The operations further include transmitting the business application language file to the backend system. The operations further include preventing a user of the scripting language editor from accessing data associated with users of other instances of the scripting language editor, wherein the other instances of the scripting language editor are connected to the backend system. Generating the business application language file includes translating scripting language code in the scripting language file into a business application language associated with the business application. The scripting language file includes scripting language code snippets and the business application language file includes business application language code snippets. The business application language file includes Advanced Business Application Programming (ABAP) code. The scripting language editor includes a visual programming shell providing core source code editing features. Identifying the scripting language file includes designating the scripting language file for compilation in response to a save of the scripting language file in the scripting language editor.","While generally described as computer implemented software embodied on tangible, non-transitory media that processes and transforms the respective data, some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the disclosure will be apparent from the description and drawings, and from the claims.","This disclosure generally describes computer systems, software, and computer implemented methods for providing a scripting language for business applications. Software developers may create additional components for a business application to add functionality. The additional components may be implemented in a programming language compatible with the business application. For example, the business application may originally be developed within an organization using a business application language. Although the software developers may use the same business application language to develop additional components for the business application, a scripting language may allow the software developers to draft programming code in the scripting language without using the business application language. The scripting language may include a focused set of features tailored for developing additional or supplemental components for the business application platform or for implementing development artifacts associated with the business application platform. Accordingly, developers who may not have experience or knowledge regarding the business application language may still develop software components or development artifacts for the business application using the scripting language.","In some implementations, the scope of the scripting language may be at the code snippet level for exits and callbacks. A scripting language compiler translates the scripting language snippets into business application language snippets. The business application language snippets may be stored as an additional component for the business application and may be executed at runtime for an end-user of the business application. The compiler may use a domain-specific metamodel to translate the scripting language into a business application language. The metamodel may be based on metadata retrieved from a Master Data Repository System (MDRS), allowing the compiler to consume model entities associated with the business application as path expressions within the scripting language. The model entities retrieved from the MDRS may include, for example, business objects, nodes, actions, queries, associations, data types, or messages.","The environment for implementing the scripting language may include a sandbox environment for limiting a software developer's access to data associated with other software developers. For example, the sandbox environment for the scripting language may prevent software developers that have produced malicious or erroneous components from tampering with or accidentally accessing the data of other users. The script execution runtime may strictly monitor or disable security-relevant features, such as direct access to database tables. Instead, data access may occur through the business object infrastructure. In some implementations, the business application development environment and the scripting language compiler may hide various implementation frameworks within the business application platform from the user. Accordingly, documentation overhead and ramp-up time may be decreased while increasing development productivity through a simplified programming model.","Turning to the illustrated example,  illustrates an example environment  for providing a scripting language for business applications. The illustrated environment  includes or is communicably coupled with one or more client systems  and servers , , and , at least some of which may communicate across network . In general, environment  depicts an example configuration of a system capable of providing a scripting language for developing additional components or development artifacts for a business application. In some implementations, the runtime system  for the scripting language may be implemented on a server, such as server , accessible to a user at client system  through a network . Further, the runtime system , scripting framework , and other services provided by server , may be distributed across multiple servers, such as servers  and , in a distributed cluster-based environment, for example. In a distributed cluster-based environment, one or more additional servers (e.g., servers  and ) may be included in environment , each server having components similar to those depicted in  for server  and providing services associated with distributed applications hosted by the servers in the distributed cluster-based environment. In certain instances, client system  and servers , , and  may be logically grouped within a cloud computing network. The client system  may include a scripting editor  and compiler  for the scripting language that communicates with the scripting framework . Accordingly, the system may be provided as an on-demand solution through the cloud computing network as well as a traditional server-client system or a local application at client . Alternatively, the scripting editor , compiler , and scripting framework  may be provided through a traditional server-client implementation or locally at client system  without the need for accessing a hosted application through network .","In general, server  is any server that stores one or more applications , where at least a portion of the applications  may be hosted applications executed via requests and responses sent to users or clients within and communicably coupled to the illustrated environment  of . For example, server  may be a Java Platform, Enterprise Edition (JEE)-compliant application server that includes Java technologies such as Enterprise JavaBeans (EJB), JEE Connector Architecture (JCA), Java Messaging Service (JMS), Java Naming and Directory Interface (JNDI), and Java Database Connectivity (JDBC). In some instances, the server  may store a plurality of various applications , while in other instances, the server  may be a dedicated server meant to store and execute only a single application . In some instances, the server  may comprise a web server or be communicably coupled with a web server, where the applications  represent one or more web-based applications accessed and executed via network  by client system  of the environment to perform the programmed tasks or operations of the application .","At a high level, the server  comprises an electronic computing device operable to receive, transmit, process, store, or manage data and information associated with the environment . The server  illustrated in  may be responsible for receiving application requests from one or more client applications or business applications associated with client system  of environment , responding to the received requests by processing said requests in the associated application , and sending the appropriate response from the application  back to the requesting client application. The server  may also receive requests and respond to requests from other components on network . Alternatively, the application  at server  may be capable of processing and responding to requests from a user locally accessing server . Accordingly, in addition to requests from the external client system  illustrated in , requests associated with the applications  may also be sent from internal users, external or third-party customers, other automated applications, as well as any other appropriate entities, individuals, systems, or computers.","As used in the present disclosure, the term \u201ccomputer\u201d is intended to encompass any suitable processing device. For example, although  illustrates a single server , environment  may be implemented using one or more servers such as servers  and , as well as computers other than servers, including a server pool. Indeed, server  and client system  may be any computer or processing device such as, for example, a blade server, general-purpose personal computer (PC), Macintosh, workstation, UNIX-based workstation, personal digital assistant (PDA), mobile phone, palmtop computer, tablet, or any other suitable device. In other words, the present disclosure contemplates computers other than general purpose computers, as well as computers without conventional operating systems. Further, illustrated server  and client system  may be adapted to execute any operating system, including Linux, UNIX, Windows, Mac OS, or any other suitable operating system.","In the present implementation, and as shown in , the server  includes a processor , an interface , a memory , and one or more applications . The interface  is used by the server  for communicating with other systems in a client-server or other distributed environment (including within environment ) connected to the network  (e.g., client system , as well as other systems communicably coupled to the network ). Generally, the interface  comprises logic encoded in software and\/or hardware in a suitable combination and operable to communicate with the network . More specifically, the interface  may comprise software supporting one or more communication protocols associated with communications such that the network  or interface's hardware is operable to communicate physical signals within and outside of the illustrated environment .","In some implementations, server  may include a user interface, such as a graphical user interface (GUI). The GUI comprises a graphical user interface operable to, for example, allow the user of the server  to interface with at least a portion of the platform for any suitable purpose, such as creating, preparing, requesting, or analyzing data, as well as viewing and accessing source documents associated with business transactions. Generally, the GUI provides the particular user with an efficient and user-friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields, pull-down lists, and buttons operated by the user. For example, GUI may provide interactive elements that allow a user to select from a list of suggested entries for input into a data field displayed in GUI. More generally, GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of application . The GUI is often configurable, supports a combination of tables and graphs (bar, line, pie, status dials, etc.), and is able to build real-time portals, where tabs are delineated by key characteristics (e.g. site or micro-site). Therefore, the GUI contemplates any suitable graphical user interface, such as a combination of a generic web browser and command line interface (CLI) that processes information in the platform and efficiently presents the results to the user visually.","Generally, example server  may be communicably coupled with a network  that facilitates wireless or wireline communications between the components of the environment  (i.e., between the server  and client system ), as well as, with any other local or remote computer, such as additional clients, servers, or other devices communicably coupled to network  but not illustrated in . In the illustrated environment, the network  is depicted as a single network in  but may be a continuous or discontinuous network without departing from the scope of this disclosure, so long as at least a portion of the network  may facilitate communications between senders and recipients.","Network  may be all or a portion of an enterprise or secured network, while in another instance at least a portion of the network  may represent a connection to the Internet. In some instances, a portion of the network  may be a virtual private network (VPN), such as, for example, the connection between client system  and server . Further, all or a portion of network  may comprise either a wireline or wireless link. Example wireless links may include 802.11a\/b\/g\/n, 802.20, WiMax, and\/or any other appropriate wireless link. In other words, network  encompasses any internal or external network, networks, sub-network, or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network  may communicate, for example, Internet Protocol (IP) packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information between network addresses. Network  may also include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), all or a portion of the Internet, and\/or any other communication system or systems at one or more locations. Network , however, is not a required component of the present disclosure, and the elements hosted by server , such as the runtime system  and scripting framework , may be implemented locally at a client system  or locally at server .","Client system(s)  may have access to resources such as server  within network . In certain implementations, the servers within the network , including server  in some instances, may comprise a cloud computing platform for providing cloud-based services. The terms \u201ccloud,\u201d \u201ccloud computing,\u201d and \u201ccloud-based\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure. Cloud-based services may be hosted services that are provided by servers such as , , and  and delivered across a network to a client platform to enhance, supplement, or replace applications executed locally on a client computer. Clients  may use cloud-based services to quickly receive software upgrades, applications, and other resources that would otherwise require a lengthy period of time before the resources may be delivered to client systems . Additionally, other devices may also have access to cloud-based services, such as on-demand services provided by servers accessible through network . A cloud platform deployment implementation, however, is not a required element of the present disclosure, and other distributed infrastructures such as cluster-based systems may also be used.","As illustrated in , server  includes a processor . Although illustrated as a single processor  in , two or more processors may be used according to particular needs, desires, or particular embodiments of environment . Each processor  may be a central processing unit (CPU), a blade, an application specific integrated circuit (ASIC), a field-programmable gate array (FPGA), or another suitable component. Generally, processor  executes instructions and manipulates data to perform the operations of server  and, specifically, the one or more plurality of applications . Specifically, the server's processor  executes the functionality required to receive and respond to requests from client system  and respective client applications  or other servers  and  in environment , as well as the functionality required to perform the other operations of the application .","Regardless of the particular implementation, \u201csoftware\u201d may include computer-readable instructions, firmware, wired or programmed hardware, or any combination thereof on a tangible, non-transitory, medium operable when executed to perform at least the processes and operations described herein. Indeed, each software component may be fully or partially written or described in any appropriate computer language including C, C++, Java, Visual Basic, assembler, Perl, any suitable version of 4GL, as well as others. Some software may be associated with BPM notations including BPMN, BPEL, UML state charts, event-driven process chains (EPC), Petri Nets, and the like. It will be understood that while portions of the software illustrated in  are shown as individual modules that implement the various features and functionality through various objects, methods, or other processes, the software may instead include a number of sub-modules, third party services, components, libraries, and such, as appropriate. Conversely, the features and functionality of various components may be combined into single components as appropriate. In the illustrated environment , processor  executes one or more applications  on server .","At a high level, each of the one or more applications  is any application, program, module, process, or other software that may execute, change, delete, generate, or otherwise manage information according to the present disclosure, particularly in response to and in connection with one or more requests received from the illustrated client system  and its associated client applications  or from other servers or components through a network . In certain cases, only one application  may be located at a particular server . In others, a plurality of related and\/or unrelated applications  may be stored at a single server , or located across a plurality of other servers  and , as well. In certain cases, environment  may implement a composite business process application . For example, portions of the composite application may be implemented as Enterprise Java Beans (EJBs) or design-time components may have the ability to generate run-time implementations into different platforms, such as JEE (Java Platform, Enterprise Edition), ABAP (Advanced Business Application Programming) objects, or Microsoft's .NET, among others.","Additionally, one or more of the applications  may represent web-based applications accessed and executed by client system  or client applications  via the network  (e.g., through the Internet). Further, while illustrated as internal to server , one or more processes associated with a particular application  may be stored, referenced, or executed remotely. For example, a portion of a particular application  may be a web service associated with the application that is remotely called, while another portion of the application  may be an interface object or agent bundled for processing at a client system . Moreover, any or all of the applications  may be a child or sub-module of another software module or enterprise application (not illustrated) without departing from the scope of this disclosure. Still further, portions of the application  may be executed by a user working directly at server , as well as remotely at client system .","As illustrated, server  may also include a runtime system  with a scripting framework . The server  may function as a backend system in connection with one or more client systems  to support a scripting language for business application components and artifacts. For example, a developer at client  may use a scripting editor  to generate scripting language code. In some implementations, the scripting language code may be in the form of code snippets. A compiler  may translate the scripting language code snippets into business application code  and store the code  in memory  at the server . The runtime system  may include the generated business application code  into a base class context. The base class may offer reusable convenience methods for the business application code generation. Accordingly, the runtime system  provides support for the scripting language translation process, allowing the compiler  to generate wrapper method calls rather than low level code, for example. In some implementations, the scripting framework  within the runtime system  identifies business application code  associated with certain business objects to be executed from memory  and dynamically builds session local reports. Further, the scripting framework  may provide access into a number of different execution environments for the generated business application code .","In general, server  also includes memory  for storing data and program instructions. Memory  may include any memory or database module and may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, random access memory (RAM), read-only memory (ROM), removable media, or any other suitable local or remote memory component. Memory  may store various objects or data, including classes, frameworks, applications, backup data, business objects, jobs, web pages, web page templates, database tables, repositories storing business and\/or dynamic information, and any other appropriate information including any parameters, variables, algorithms, instructions, rules, constraints, or references thereto associated with the purposes of server  and its one or more business process applications .","Memory  may also store data objects such as software components . In general, software components  may include stand-alone applications, modules, embedded applications, user interfaces, widgets, functions, or any other application or software module. In some implementations, software components  may include binary units that export and import functionality using a standardized interface mechanism. Software components  may represent one or more logical or organization-related processes or tasks. The underlying infrastructure of a software component  may support composition of components by providing mechanisms for introspection, event-handling, persistence, dynamic linking, and layout management.","In certain instances, software components  may be independent of a particular system, language, platform, application, or tool. Accordingly, software components  may be integrated with other software components from different providers, for example, into a common system. In certain instances, software components  may include additional functionality developed to supplement a business application. For example, a user of client system  may generate source code in a scripting language to develop an additional software component to add functionality to a current business application. Although the business application may be associated with a business application language, a compiler  at the client system  may translate the scripting language source code into the business application language as an add-on component to the business application. An end-user of the business application may then select the add-on component from memory . In some instances, different developers may store a plurality of software components  in memory  for end-users to select from. Further, software components  may include development artifacts, such as use cases, class diagrams, models, requirements, intermediate-level documentation, executable files, and design documents, for example.","Memory  may also store scripting language code  and business application code . The scripting language code  may be received from the client system  after a developer has drafted and saved the scripting language code  using a scripting editor  at the client system . In some instances, a copy of the scripting language code  is stored at both the client system  and the server . The scripting language code  may be translated into business application code  by a compiler  at the client system . Although the compiler  is illustrated as being located at the client system  in , the compiler  may also be located at the server  in some instances. In certain implementations, the client system  may need access to business model metadata  associated with the underlying business application for which the software components  are designed. The business model metadata  may also be stored in memory  or in any repository storing master data for business models, such as a Master Data Repository System (MDRS), for example. In some implementations, the compiler  may employ a proxy approach by reading the business model metadata  for common and global data types of the underlying business application platform to map the data types and business objects into the scripting language. Accordingly, the compiler  may retrieve the business model metadata  in order to generate the business application code . The generated business application language code  may be generated at the client  but transmitted to the server  for storage in memory . In some instances, the generated business application language code  may include business application language snippets that can be executed using the runtime system .","The illustrated environment of  includes one or more clients . Each client  may be any computing device operable to connect to or communicate with at least the server  and\/or via the network  using a wireline or wireless connection. In some implementations, as illustrated in , client  can also include a processor , an interface , a graphical user interface (GUI) , a client application , and a memory . In general, client  comprises an electronic computer device operable to receive, transmit, process, and store any appropriate data associated with the environment  of . It will be understood that there may be any number of clients  associated with, or external to, environment . For example, while illustrated environment  includes one client , alternative implementations of environment  may include multiple clients communicably coupled to the server , or any other number of clients suitable to the purposes of the environment . Additionally, there may also be one or more additional clients  external to the illustrated portion of environment  that are capable of interacting with the environment  via the network . Further, the term \u201cclient\u201d and \u201cuser\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover, while each client  is described in terms of being used by a single user, this disclosure contemplates that many users may use one computer, or that one user may use multiple computers.","The GUI  associated with client  comprises a graphical user interface operable to, for example, allow the user of client  to interface with at least a portion of the platform for any suitable purpose, such as creating, preparing, requesting, or analyzing data, as well as viewing and accessing source documents associated with software components. Generally, the GUI  provides the particular user with an efficient and user-friendly presentation of data provided by or communicated within the system. The GUI  may comprise a plurality of customizable frames or views having interactive fields, pull-down lists, and buttons operated by the user. For example, GUI  may provide interactive elements that allow a user to enter, modify, select, or model elements of software components in GUI . A view of a software component and related components may be presented and accessible to the user through GUI , such as through a web browser, for example. More generally, GUI  may also provide general interactive elements that allow a user to access and utilize various services and functions of client application . The GUI  is often configurable, supports a combination of tables and graphs (bar, line, pie, status dials, etc.), and is able to build real-time portals, where tabs are delineated by key characteristics (e.g. site or micro-site). Therefore, the GUI  contemplates any suitable graphical user interface, such as a combination of a generic web browser, intelligent engine, and command line interface (CLI) that processes information in the platform and efficiently presents the results to the user visually.","As used in this disclosure, client  is intended to encompass a personal computer, touch screen terminal, workstation, network computer, kiosk, wireless data port, smart phone, personal data assistant (PDA), one or more processors within these or other devices, or any other suitable processing device. For example, each client  may comprise a computer that includes an input device, such as a keypad, touch screen, mouse, or other device that can accept user information, and an output device that conveys information associated with the operation of the server  (and application ) or the client  itself, including digital data, visual information, client application , or GUI . Both the input and output device may include fixed or removable storage media such as a magnetic storage media, CD-ROM, or other suitable media to both receive input from and provide output to users of client  through the display, namely, GUI .","While  is described as containing or being associated with a plurality of elements, not all elements illustrated within environment  of  may be utilized in each alternative implementation of the present disclosure. For example, although  depicts an environment implementing a hosted application at server  that can be accessed by client system , in some implementations, server  executes a local application that features an application user interface (UI) accessible to a user directly utilizing GUI . Further, although  depicts a server  external to network , servers may be included within the network  as part of a cloud network solution, for example. Additionally, one or more of the elements described herein may be located external to environment , while in other instances, certain elements may be included within or as a portion of one or more of the other described elements, as well as other elements not described in the illustrated implementation. Further, certain elements illustrated in  may be combined with other components, as well as used for alternative or additional purposes in addition to those purposes described herein.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2","b":["200","210","212","210","212","230","216","210","222","210","218","220","216","222","212","210","222"]},"In some implementations, the script editor  is used to generate scripting language source code files , which are passed to the repository client  to extract scripting language snippets  for storage in a repository  at a backend server system . In certain instances, the source code files  are stored locally at the repository client  while copies of the source code are replicated on the backend server system  so that other developers may concurrently work on the same source code files . The backend server system  may include components for executing a runtime system  and a business application language based scripting framework  for business application source code. In some implementations, the repository  may also store business application language snippets . The cross compiler  may retrieve the scripting language snippets  from the repository  for compiling and store the compiled business application language snippets  back in the repository . The scripting framework  may be responsible for executing the compiled business application language snippets  at runtime.","In some implementations, the runtime system  at the backend server system  may put the generated business application language snippets  into a base class context. The base class may offer reusable convenience methods for business application language code generation so that the cross compiler  does not need to produce low level code (e.g., LCP calls) required at runtime. The cross compiler  may instead generate wrapper method calls, for association access or query execution, for example. The base class in the scripting language runtime may perform delta checks of business object node data before and after the script code execution and write changes back to the persistency.","The scripting framework  may retrieve relevant scripting language snippets , generated by the cross compiler , for a particular business object to be executed from the repository . The scripting framework  may dynamically build a session local report , which may be cached in a business application language report cache  in the runtime system . In some instances, the session local report  is invalidated once the modification timestamp of a related business application language snippet  has changed.","The scripting language may maintain its extensibility through metadata driven context libraries that may be plugged into the language in a flexible manner without hard-coding context specific language or keywords into the scripting language grammar. In some implementations, this may be achieved through reuse service components (RSC). Because the cross compiler  may need to produce source code that may be based on re-usable convenience methods provided by the scripting framework , the development of the context-plugs in the cross compiler  and the runtime system  may need to be coordinated and supplied with the same metadata.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["300","316","326","212","314","312","314","212","232","324","312","322","212","232","212"]},"The cross compiler  transforms code written in a source language into a different target language, such as a binary object code for execution. In some cases, such as when the cross compiler  is used for converting from a scripting language to a business application language, the higher level source language is translated to a lower level target language, which may further be compiled to executable code in a subsequent step to take advantage of the existing target language infrastructure and to avoid the need to produce platform-dependent binary code.","The cross compiler  may include a number of sub-components used in different phases when compiling the scripting language into the business application language. During lexical analysis, a lexer component of the cross compiler  may be responsible for converting the input sequence characters of the source document into a sequence of tokens. The lexer component may be internally organized into a scanner and a tokenizer. The resulting tokens are categorized blocks of text, such as symbols, identifiers, operators, delimiters and the language keywords. The tokens may be described by regular expressions that are interpreted by a tool generating the lexer code.","In some implementations, during syntactical analysis or parsing phase, a syntax analysis component parses the tokens provided by the lexer, in order to determine the syntactical structure of the source program. The parser may construct a parse tree, such as an Abstract Syntax Tree (\u201cAST\u201d), by transforming the linear input token sequence taken from the lexer into a tree structure according to the rules of a formal grammar description outlining the language's syntax. Syntactical errors may be reported in this phase of the cross compiler .","During a semantic analysis phase, the cross compiler  may add semantic information to the parse tree that was produced during the syntactical analysis phase. Also, symbol tables are populated and semantic checks, such as static type checking, are performed, potentially rejecting semantically incorrect input. In some implementations, the cross compiler  may utilize a broad meta model for the business application language, stored in the Master Data Repository System (MDRS) , when performing semantic analysis of the scripting language code.","The code generation phase transforms the intermediate representation (AST) to the output language. In the case of target platform binary code generation, additional optimization may be necessary to perform complex CPU register and memory allocations. As the described cross compiler  does not produce machine language but another high level language, the code generation may be a transformation to the target language instructions having a granularity similar to the source language.","In some implementations, instead of implementing a complete compiler with each of the components described above, a compiler-compiler or compiler generator may be used as the cross compiler . For example, Another Tool for Language Recognition (\u201cANTLR\u201d) is a parser generator tool capable of automatically generating a lexer and parser for different programming languages, defined through an Extended Backus Naur Form (\u201cEBNF\u201d) grammar description. ANTLR also offers support for the code-generation phase though its \u201cStringTemplate\u201d mechanism. However, ANTLR allows enriching the EBNF grammar definition with custom code actions, which may be used to perform semantic analysis, triggered through the defined and implemented \u201cparse events.\u201d Using a compiler generator tool such as ANTLR may allow switching of the \u201ctarget generation language,\u201d e.g., from C# to C++ if the scripting language cross compiler  is moved to the backend\/kernel.","In certain implementations, the cross compiler  may be configured for multi-pass parsing of source code if required by the language features of the scripting language. For instance, there may be statements in the source code that affect the translation of other statements in previous lines of the source. In such cases, the first pass may collect translation-relevant information first, while the actual translation is performed during a subsequent pass. The ANTLR parser-generator may support multi-pass parsing by transforming an existing AST to a modified version of it. To do so, the source AST is first serialized to a linear tree node stream by injecting UP and DOWN tokens, which encode the previous tree structure. Accordingly, the usual EBNF grammar-based compiler generation approach may be reused for each AST to AST transformation step. The target of a parse pass does not necessarily need to be an AST again but may also emit the final target language representation when using the StringTemplate output type in the ANTLR grammar options. This may allow for incorporating the compiler's code generation step as another compiler pass run, as shown in .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 4","b":["400","212","402","420","404","420","406","408","212","410","412","412"]},"In some implementations, custom action code may be included directly into the EBNF grammar descriptions that are the basis for ANTLR's parser generation, using the same target language that is configured for the compiler generator. This action code may be used to perform semantic analysis, such as creating symbol tables (e.g., for variable declarations), generating type inferences, and performing checking actions.","The action code embedded into the grammar description may be given access to the tokens that are available in the current rule scope. Grammar code actions may also be defined to be executed before and after rule evaluation, and parameters and return values may be specified for each matched grammar rule execution. In some implementations, rule-scope bound variables may be defined. This may avoid the need to transport information as rule parameters and rule return values through several levels of the rule invocation stack. Further, recursive rule invocations, such as rule-scope bound variables, may be maintained on a stack.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 5","b":["500","212","550","502","560","570","560","504","570","570","570","560","506","570","570"]},"In addition to checking the existence of the variable in the variable symbol table , the scripting language parser  may initiate a \u201cCheckOrInferAssignmentType\u201d action code  to verify whether the given type of a variable name matches the appropriate variable type corresponding to a given expression associated with the variable name. The \u201cInferRightOperandType\u201d action code  is called to check the context accessor  for inferring the appropriate variable type based on the context of the variable name. The \u201cRetrieveType\u201d action code  is used to retrieve the variable type from the variable symbol table . If another variable type is already inferred for the variable, the mismatch is reported as an error using the \u201cReportError\u201d action code . If the type of the variable has not been inferred yet, the derived type is stored as part of the corresponding variable symbol table  entry using a \u201cRegisterInferredType\u201d action code .","In some implementations, the cross compiler  may use a StringTemplate library for producing target language output. Although the cross compiler  may use grammar actions that directly emit target language elements into a buffer or stream, the target language production code may be hard coded into the grammar description and may require a certain fixed language. This may restrict the code generation step of the cross compiler  in an inflexible way. For example, the code generation action code may not be portable if the target language for the generated compiler code needs to be changed at a later time. On the other hand, the target language of the compiler itself is hard coded into the actions, requiring a significant re-factoring effort if another code generation target language is desired.","Utilizing the StringTemplate library for code generation may introduce an additional layer of abstraction that relieves the inflexibility of using a certain target language, in both aspects, described above. The StringTemplate library exposes a well-defined application programming interface (\u201cAPI\u201d) to emit named template code while filling place-holder variables in the templates with concrete values. The place-holder variables may also be filled with collections and nested with various different templates. The defined templates may either be accessed and explicitly used through the StringTemplate API, or directly used though special syntax from within ANTLR grammar descriptions. The templates may be used through special syntax if the grammar output type is configured to \u201ctemplate\u201d construction, instead of \u201cAST.\u201d Because the StringTemplate library may be ported to different platforms and is available for multiple ANTLR compiler-compiler target languages, grammar changes are not needed even if the ANTLR parser generation target language is changed. Further, the generated compiler's target language is no longer bound to the action code but is instead branched out to the template definition files. These declarative template definition files may be replaced with template code for different target languages.","In certain implementations, the scripting language may include language extensibility features. For example, new keywords may be added to the scripting language, although the introduction of keywords may be limited in frequency to prevent conflicts or compatibility issues between existing code or local variables and new keywords. In some instances, \u201cnative language methods\u201d may be used to integrate new features into the scripting language. The methods may be bound to certain base types, which may be imported or may belong to the core of the scripting language. Examples may include an \u201cexecute\u201d method bound to query types, \u201ccreate\u201d methods bound to association types, or \u201cdelete\u201d methods bound to business object nodes.","In some implementations, new build-in types may be introduced to the scripting language. An instance of new types may be bound to meta model instances, such as business object nodes, for example, which may be accessible through path expressions (e.g., queries, associations). Multiple methods may then be bound to the newly introduced types using various mechanisms for generically binding certain interfaces (e.g., aggregation of methods) to a type. In other instances, the required methods may be bound directly to the meta model entity (e.g., as an association).","The language extensibility features may also include global snippet accessibility for the scripting language code. Global snippet accessibility may allow external context representations to be passed into snippets when a method signature of a scripting language snippet to be implemented is predefined by the execution context. Accordingly, references to external context information within a snippet may be maintained without being bound to specific base types, as required by certain method or library calls. In some cases, the scripting language may also support a library concept, where various extension libraries may be imported using an \u201cimport\u201d statement. The methods that are grouped within a library may be called statically using the imported library name. In other cases, a parameter of a library method signature may be defined as an instance parameter so that the library method is automatically bound to the type of the instance parameter and may therefore be used within any path expression that evaluates to that type, if imported.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 6","FIG. 6"],"b":["600","612","614","618","656","662","602","610","602","610","602","610","612","612"]},"The overall scripting language compiler translates the scripting language source code into a business application language. The scripting language compiler reads metadata associated with the business application programming model , such as metadata obtained through business object descriptions, from a backend system . In some implementations, a stateless HTTP channel to the backend system  is used to read the metadata from Repository Services  located in the backend system . The generated business application language code is also stored in the backend system  using a repository client  of the integrated development environment . The repository client  may include an interface between the scripting language editor  and cross compiler , and the repository services  and repository  on the backend system . Further, the repository client  may manage transmission and storage of source code files from the integrated development environment  at the client to the backend system .","In some implementations, individual business application snippets  are stored during design time, while the actual execution of the code is triggered at runtime. Different execution triggers may initiate the processing of the business application language load . In certain implementations, persisted business application language classes may be used in place of the business application load generation approach.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIGS. 7A-7B","FIG. 7A","FIG. 7B"],"b":["700","702","610","610","716","702","612","702","610","610","702","702","612"]},"In some instances, the visual programming shell  may include a third-party integrated development environment, such as Microsoft Visual Studio, for example. Accordingly, the visual programming shell  may provide various script editing features such as syntax highlighting, code completion, and the like. The visual programming shell  may offer a mechanism to integrate with the integrated development environment  by implementing integration packages. The integration packages may be deployed to the target machines through installation into an existing visual programming shell  instance on a client device of the developer . In other instances, the developer  may install a separate instance of the visual programming shell  and deploy the integration packages through the separate instance of the shell.","In some implementations, the scripting language editor  may use the core editor, editor services , or language service environment  of the visual programming shell  to provide source code editing functionality to the developer . Core editor features such as, for example, block commenting, uncommenting, indenting, copy & paste, undo, and the like, may be provided without custom implementation. Code formatting may also be integrated using services of the visual programming shell . In certain instances, the core editor of the visual programming shell  is configured with a custom language service interface  based on the file extension of the current source code file  in use. The language service interface  may allow for implementation of various programming language related features, such as syntax highlighting, code completion, error list access and source file compilation triggers.","In some implementations, after a scripting language file is saved by the scripting language editor , the source code is automatically stored in a local file system at state (2). For example, development artifacts  associated with the current project may be controlled by a project system module  in the visual programming shell . The project system module  may manage cases where multiple users are generating source code for a business application using the integrated development environment , including handling locking mechanisms when performing multiple updates to source code. The project system module  ensures consistency of development artifacts  when multiple users of the integrated development environment  access the same resources. For example, the project system module  may coordinate the storage and use of development artifacts , including the scripting language source code  generated from the scripting language editor . When a scripting language source file  is saved by the scripting language editor , the save event may be intercepted to obtain the scripting language source file type. Additionally, a repository synchronizer  within the repository client  may push the content of the scripting language source code  to the repository services  at the backend system . Further, in certain implementations, the compilation of the scripting language source file may be triggered in response to the developer  entering lines of scripting language text into the scripting language editor or at periodic intervals.","After a scripting language source file compilation is triggered by the language service environment , the scripting language service interface  may call the cross compiler  for converting the scripting language code to the business application language code during state (3). In order to perform semantic analysis and translation of the scripting language source code into the business application language, the cross compiler  may need access to the business application model associated with the underlying business application platform. In some implementations, access to the business application model may be provided through a metadata provider component . The metadata provider component  may include a model application programming interface (API) that allows components within the integrated development environment  to read metadata associated with a business application model from a backend system . The metadata may include reuse library services, business objects  and data types  stored in a Master Data Repository System (MDRS)  at the backend system . In certain instances, the metadata may be transferred in an XML exchange format, and an MDRS deserializer  at the repository client  may cache the metadata in a model cache repository . The cross compiler  may then receive metadata associated with the business application model from the metadata provider component  at state (4) to translate the scripting language code  into business application language code . In some implementations, the compilation and translation of the scripting language code  may occur after each save event of the scripting language source code , at periodic intervals, or substantially continuously while the developer  enters code in the scripting language editor .","After the cross compiler  generates business application language snippets  based on the scripting language source code  and business application model metadata, the business application language snippets  are sent to the backend system  through the repository client  at state (5). At the backend system , repository services  may store the business application language snippets  in a repository  on the backend system . At the conclusion of the design time process, the cross compiler  may, in some implementations, trigger generation of a business application language report to detect potential syntax errors in the generated business application language code  at state (6). The detection of potential errors at state (6) may ensure that the compiled business application language code may be executed at runtime. The errors detected at the backend system  during state (6) may be related to issues with components that were not detectable at design time through the integrated development environment , for example.","After the generated business application snippets  are stored in the repository , the business application snippets  may comprise one or more add-on components of a business application that an end-user may retrieve for deployment and execution. At runtime, the scripting framework  may read the business application snippets  that are relevant to a complete development artifact, such as a business object, to build an overall report and create a business application language load , through a load generator , for execution by the business application virtual machine  at state (7). The overall report may, in some instances, be stored in the repository . In other instances, instead of generating a report, a business application language class may be generated at state (8) that consists of individual classes for each business application snippet  to be dynamically transformed into the business application language load  at runtime. At runtime, a number of various supported execution contexts  may trigger the scripting language runtime  at state (9) to execute the business application language snippets .",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 8","b":["800","805","810","815"]},"A business application language file is generated based on the scripting language file and the retrieved metadata at . Generating the business application language file may include translating scripting language code in the scripting language file into a business application language associated with the business application. The scripting language file may include scripting language code snippets and the business application language file may include business application language code snippets. In some implementations, the business application language file includes Advanced Business Application Programming (ABAP) code. In certain implementations, the business application language file may be transmitted to the backend system. Further, a user of the scripting language editor may be prevented from accessing data associated with users of other instances of the scripting language editor, wherein the other instances of the scripting language editor are connected to the backend system.","The preceding figures and accompanying description illustrate example processes and computer implementable techniques. Environment  (or its software or other components) also contemplates using, implementing, or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time, including concurrently, individually, or in combination. In addition, many of the steps in these processes may take place simultaneously and\/or in different orders than as shown. Moreover, environment  may use processes with additional steps, fewer steps, and\/or different steps, so long as the methods remain appropriate.","In other words, although this disclosure has been described in terms of certain embodiments and generally associated methods, alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly, the above description of example embodiments does not define or constrain this disclosure. Other changes, substitutions, and alterations are also possible without departing from the spirit and scope of this disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 7A-7B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 8","FIG. 1"]}]},"DETDESC":[{},{}]}
