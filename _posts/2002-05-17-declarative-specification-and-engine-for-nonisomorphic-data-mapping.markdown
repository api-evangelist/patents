---
title: Declarative specification and engine for non-isomorphic data mapping
abstract: A mapping engine is provided to populate data elements of a first data structure of a first data representation with values of corresponding data elements of a second data structure of a second data representation, in accordance with at least a mapping specification. The two data structures may have different data shapes. The mapping specification may have a number of data element and data attribute mapping directives, including repeating data items. A population operation in a reversed direction may also be performed using the same mapping specification. The mapping specification may also specify an external mapping specification for a subset of the mapping operations. The external mapping specification may comprise unidirectional function pairs. In one embodiment, the mapping engine performs order dependent mapping facilitating the use of separate mapping rules for different instances of the same data element based upon the relative position of the data element instances within an input data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06859810&OS=06859810&RS=06859810
owner: BEA Systems, Inc.
number: 06859810
owner_city: San Jose
owner_country: US
publication_date: 20020517
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Overview","Map Engine","Mapping Specification","XML-to-Objects Mapping","Objects-to-XML Mapping","Conclusion and Epilogue"],"p":["This patent application claims priority to Provisional Patent Application No. 60\/339,379 filed on Dec. 10, 2001, which is hereby fully incorporated by reference.","1. Field of the Invention","The present invention generally relates to the field of data processing. More specifically, the present invention relates to non-isomorphic data mapping.","2. Background Information","EXtensible Markup Language or \u2018XML\u2019 is rapidly emerging as the de-facto standard for describing data structures to be transmitted between software applications and web services. While most software applications and web services are written in modern programming languages, such as Java or C++, none of these programming languages provide native support for representing and manipulating XML data structures. Consequently, programmers are either forced to develop or adopt external software packages for representing and manipulating XML data structures within the context of their applications and web services, or to attempt to map XML data structures to programming language data structures of their applications and web services or vice versa.","Existing processes for mapping between XML and programming language data structures focus on isomorphic mapping of the data where, although the data may be represented differently (e.g. as objects of a class versus nodes of a tree), the corresponding data structures are nonetheless required to maintain same relative shape. More specifically, in an isomorphic mapping, a one-to-one correspondence between both the elements and the element relationships of the data structures involved in the mapping is required.",{"@attributes":{"id":"P-00008","num":"00008"},"figref":["FIG. 1","FIG. 1"]},"This isomorphic relationship between the respective data structures required by prior art mapping solutions results in a tight coupling between the associated applications. In an environment where different people, on different schedules and platforms, build applications for different purposes (i.e. such as the Internet), a change in the code of one application (i.e. changing the shape of one of its data structures) can cause the other applications to break at one or more integration points. Even if the code of the other applications were modified to adapt to the first application's change, the fixes would only be temporary until another application was changed. Moreover, any such adaptive modification made to an application's code would likely require the services of a programmer causing additional costs and delay to be incurred.","In the following description, various aspects of the present invention will be described. However, it will be apparent to those skilled in the art that the present invention may be practiced with only some or all aspects of the present invention. For purposes of explanation, specific numbers, materials and configurations are set forth in order to provide a thorough understanding of the present invention. However, it will also be apparent to one skilled in the art that the present invention may be practiced without the specific details. In other instances, well-known features are omitted or simplified in order not to obscure the present invention.","Parts of the description will be presented in terms of operations performed by a processor based device, using terms such as receiving, analyzing, determining, generating, and the like, consistent with the manner commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. As well understood by those skilled in the art, the quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, and otherwise manipulated through mechanical and electrical components of the processor based device; and the term processor include microprocessors, micro-controllers, digital signal processors, and the like, that are standalone, adjunct or embedded.","The term \u201cdata structure\u201d is used herein to describe a wide variety of data organizations and relationships corresponding to a variety of programming and data representation languages. For example, a data structure may refer to a hierarchical association between data elements of an XML representation, or to one or more objects and\/or classes of a procedural programming language such as Java. Similarly, the terms \u201cdata element\u201d and \u201cdata object\u201d are used interchangeably herein to refer to data items within a given data structure.","Various operations will be described as multiple discrete steps in turn, in a manner that is most helpful in understanding the present invention, however, the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular, these operations need not be performed in the order of presentation. Further, the description repeatedly uses the phrase \u201cin one embodiment\u201d, which ordinarily does not refer to the same embodiment, although it may.","Referring now to , wherein an overview of the present invention is illustrated. As shown, map engine  is equipped to perform non-isomorphic data mapping between differently shaped data structures such as data structures , , and  associated with applications A, B and C, respectively. In the illustrated embodiment, applications A, B and C exchange information with one another via map engine , and message  having data structure . In accordance with one aspect of the present invention, if the code of one of applications A, B and C were to be modified so as to change the shape of the corresponding data structure (e.g., adding a new data item), the remaining applications would not break, as a 1-to-1 correspondence between elements of the respective data structures is not required due to the presence of map engine(s) . In accordance with one embodiment of the invention, map engine  is equipped to perform bi-directional data mapping (i.e. both a mapping from a first data structure to a second differently shaped data structure, and a mapping from the second data structure to the first data structure) based upon a single declarative data mapping specification (such as, or ). In accordance with another aspect of the invention, data mapping specifications and can be generated from one or more instances of an input data structure annotated to identify the data elements to be mapped to and from the second data structure. In yet another aspect of the invention, data mapping specifications and can delegate portions of their specifications to external data mapping specifications while still maintaining bi-directional mapping characteristics. In one embodiment, the external data mapping specification may be another bi-directional map in accordance with the teachings of the present invention or a pair of unidirectional (e.g., procedural) mapping functions. In yet another aspect of the invention, map engine  is equipped to perform order-dependent data mappings whereby the order in which XML data occurs can be used to determine how it will be mapped. For example, the first instance of a data element named \u201cLOCATION\u201d can be mapped to a data object named \u201csender-location\u201d, while the second instance of the \u201cLOCATION\u201d data element can be mapped to a different data object named \u201creceiver-location\u201d. In one embodiment of the invention, message  includes an XML data structure including data elements corresponding to application A, that are mapped by way of map engine  of the present invention to Java programming language data objects associated with applications B and C.",{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 3","b":["2","30","31","30","31","30"]},"In the illustrated embodiment, map engine  is equipped with interpreter  to interpret data mapping specification  that has been annotated with mapping directives in accordance with yet another aspect of the present invention. In one embodiment, interpreter  includes a parser (not shown) that parses data mapping specification  prior to receiving an input data structure. In one embodiment, the parser reads and parses data mapping specification  in accordance with known parsing techniques to identify one or more expressions and\/or sub-expressions contained therein based upon predetermined syntax, semantics and\/or grammar. In one embodiment, a read operation is defined so as to cause the parser to read one of a start tag, attribute, text value, or end tag from an XML input data structure. In one embodiment, interpreter  continues to read and evaluate expressions until the entire data mapping specification  has been read and parsed. Moreover, interpreter  may optionally apply one or more optimizations to the resulting operations specified by the expressions analyzed. The optimizations may be any one or more of the applicable optimization techniques known in the art.","In the illustrated embodiment, map engine  is shown to include interpreter . In one embodiment, map engine  may be invoked by a host compiler\/interpreter via an application programming interface (API) (e.g. with type table  as a portion of the API). In such an embodiment, the host compiler may pass information describing the names and types of the host programming language objects participating in the mapping process. For example, the host compiler may derive (e.g. from the symbol table) a type-table that is passed to map engine  describing the names and types of objects map engine  should build from the input data structure or should use to build the output data structure.","In one embodiment, interpreter  is equipped to operate in accordance with a grammar to identify one or more syntactical constructs within a data mapping specification indicating that a data mapping is to be performed. Although the following description includes examples of a syntax that can be used to perform data mappings in accordance with various embodiments of the present invention, it should be noted that other syntaxes might similarly be used without departing from the spirit and scope of the invention. Furthermore, the following data mapping examples illustrate data mappings between XML and Java language elements, however, the examples are not in any way intended to be limiting on the applicability of the invention solely to XML-Java and Java-XML mappings. The bi-directional non-isomorphic mapping of the present invention may be practiced on data elements of any two of a wide range of data representations.","In one embodiment of the invention, a unique XML map namespace that is known by interpreter  to be associated with the data mapping syntax described below is declared within data mapping specification . In one embodiment, all tags, text attributes, and attribute values that are not declared to be in the map namespace are treated as literal content. In one embodiment, elements and attributes are indicated as being part of the map namespace with a namespace prefix (e.g., xm) associated with a unique namespace identifier (e.g., <hypertext transfer protocol>:\/\/bea.com\/map). In addition, a shorthand notation, such as a set of curly braces surrounding an element (e.g., \u201c{ . . . }\u201d) can be used to represent elements or attributes in the namespace. Likewise, other shorthand notations can be used so long as the interpreter is equipped to associate the shorthand notation with the corresponding elements or attributes.","The <xm:value> tag is used in the data mapping specification of the present invention to specify to map engine  to derive the value of a specific programming language object from a given element value in the XML data structure or derive the value of a given element from a specific programming language object, depending upon the direction of the mapping to be performed. In one embodiment, the <xm:value> tag has an attribute \u201cobj\u201d that specifies the name of a single programming language object, optionally preceded by it's type, as follows:",{"@attributes":{"id":"P-d0e1679","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<NAME><xm:value obj=\u201cjava.lang.String name\u201d\/><\/NAME>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Alternatively, the <xm:value> tag may equivalently be represented using the shorthand notation as follows:",{"@attributes":{"id":"P-d0e1733","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<NAME>{java.lang.String name}<\/NAME>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The <xm:attribute> tag has similar syntax and semantics to that of the <xm:value> tag described above, except that the <xm:attribute> tag matches attribute values instead of element values and includes a \u201cname\u201d attribute to specify the attribute, which value is to be mapped. The <xm:attribute> tag applies to the value of the attribute with the specified name in the closest parent tag. For example, the shorthand directive of",{"@attributes":{"id":"P-d0e1792","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<TAXID type=\u201c{taxidtype}\u201d>{taxid}<\/TAXID>,"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"P-d0e1846","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<TAXID>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xm:attribute name=\u201ctype\u201d obj=\u201ctaxidtype\u201d>"]},{"entry":[{},"<xm:value obj=\u201ctaxid\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/TAXID>,"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"P-d0e1950","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<TAXID type=\u201cEIN\u201d>54-231422<\/TAXID>."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The xm:multiple attribute is used to specify mapping of data within repeating tags in an XML document to corresponding data collections in a programming language, such as Java, as follows:",{"@attributes":{"id":"P-d0e2009","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<ORDER xm:multiple=\u201cString desc in descriptions, int qty in quantities\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<DESCRIPTION>{desc}<\/DESCRIPTION>"]},{"entry":[{},"<QUANTITY>{qty}<\/QUANTITY>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ORDER>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"30"},{"@attributes":{"id":"P-d0e2107","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ORDER>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<DESCRIPTION>Red ball<\/DESCRIPTION>"]},{"entry":[{},"<QUANTITY>4<\/QUANTITY>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ORDER>"]},{"entry":[{},"<ORDER>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<DESCRIPTION>Blue ball<\/DESCRIPTION>"]},{"entry":[{},"<QUANTITY>1<\/QUANTITY>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ORDER>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The <xm:use> tag is used to specify an external mapping specification to be used to specify\/perform a subset of the mapping. In one embodiment, the xm:use tag takes a single argument identifying the name and signature (i.e., the list of objects on which it operates) of the external map as follows:",{"@attributes":{"id":"P-d0e2271","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xm:use call=\u201cMyScript(int a, MyStructure b)\u201d>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"DocumentFragment toXML ([an argument list matching the xm:use referenced types]);","Object[ ] fromXML (Node);","In the toXML case, the arguments listed in the <xm:use> tag are sent, in order, as arguments to the toXML method of the class. With the added flexibility of the xm:use directive, it is possible to break complex mapping problems into simpler sub-problems and use procedural code for sub-problems.",{"@attributes":{"id":"P-00048","num":"00048"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 4C"],"i":["a ","b ","c ","b ","a","a","a"],"b":"40"},"Map specification  further illustrates the use of an xm:multiple directive that is associated with a repeating \u201citem\u201d element within the XML instance document. Accordingly, for each <ITEM> element found within the instance document, a new member \u201ci\u201d of a Java List entitled \u201citems\u201d (e.g. as specified by the Process Order method of ) is created. Moreover, the data found to exist between each occurrence of the <ITEM><\/ITEM> tag pair is mapped to members of the new item \u201ci\u201d in the List. Within the ITEM element of the instance document exist two children elements entitled \u201cDESCRIPTION\u201d and \u201cQUANTITY\u201d. Based upon map specification , the values associated with the description and quantity elements within the instance document will be mapped to the desc and qty members of an item \u201ci\u201d which will be added to the \u201citems\u201d List of . While this illustration uses a Java array, the present invention may also be used with other collection types, including lists and maps.",{"@attributes":{"id":"P-00050","num":"00050"},"figref":"FIG. 5","b":["52","54","56"]},{"@attributes":{"id":"P-00051","num":"00051"},"figref":"FIGS. 6","i":["a","c "],"b":["6","5","60","62","64","66","68","70","64","78","80","82","83","78","84","86","88","90","84","92","94","96","98","92","72","76","74"]},{"@attributes":{"id":"P-00052","num":"00052"},"figref":"FIGS. 7","i":"a-d ","b":["5","100","104","106","108","110","112","114","115","116","118","112","120","120","121","122","123","124","123","124","122","126","128","130","131","132","133","134","110","112","136","138","140","142"]},{"@attributes":{"id":"P-00053","num":"00053"},"figref":["FIG. 8","FIG. 4","FIG. 9","FIG. 4","FIGS. 4","FIG. 4"],"i":["c ","a","c","b "],"b":["8","9"]},"To begin, the <ORDER> tag of mapping specification  of is pushed onto the stack as shown by stack representation (a). Next, beginning at position (), the map engine reads a first input node (e.g., the <ORDER> tag) from the XML instance document of FIG. . The input node that was read is then compared against the target nodes found within the top of the target stack. Since the input <ORDER> tag of the instance document literally matches the target <ORDER> node, the children of the matched target node in mapping specification  are then pushed onto the stack as shown by stack representation (b), and the read indicator of the instance document is advanced to position (). The next input node is read from the instance document and is compared to the TOS target nodes of stack representation (b). Since a literal \u201cCUSTOMER\u201d match is found, the children of the matched target node are pushed onto the stack as shown by stack representation (c), and the read indicator of the instance document is advanced to position (). The @ID=\u201c1\u201d nomenclature is used in the example to represent the XMAttribute object found within the <CUSTOMER> tag of map specification . The next input node (e.g., ID=\u201c1\u201d) is read from the instance document and is compared to the TOS target nodes of stack representation (c). Since ID=\u201c1\u201d is an attribute node and there is a XMAttribute object in the TOS target nodes with a matching name, the value \u201c1\u201d is assigned to the \u201cC.ID\u201d object, resulting in stack representation (d). Additionally, the position indicator is advanced to position (). Since the <FAVCOLOR> input node does not match any of the TOS target nodes, the position indicator is moved to a position immediately following the end tag corresponding to the input node (), and a new input node is selected. This effectively causes the non-matching input node to be skipped. Next, the <NAME> input node is read and compared against the TOS target nodes of stack representation (e). Since the <NAME> input node matches the <NAME> target node, the children of the matched node are pushed onto the stack. Accordingly, the value {C.NAME} is pushed onto the stack as shown by stack representation (e), and the position indicator is moved to position (). Since {C.NAME} is an xm:value and \u201cJason\u201d is a text node, the value of \u201cJason\u201d is assigned to the C.NAME object and the position indicator is advanced to position (). If the data type of the value read does not match the data type expected by the data object, a simple type conversion such as \u201ctoString\u201d can be utilized. Since position () corresponds to an end tag, the target stack is popped and the position indicator is again advanced. At position () the <SHIPADDRESS> input node is read and matched with the <SHIPADDRESS> target node of stack representation (f), resulting in the push of the {c.address} XMValue object onto the stack and yielding stack representation (g). Since {c.address} is an XMValue object and position () indicates a text node, \u201c1ST STREET\u201d is assigned to c.address and the stack is popped. The above-described process will continue until no additional input nodes remain to be read in the instance document, or until all map specification directives have been processed.","In one embodiment of the invention, a marker is used to track which of the TOS target nodes an input node has been compared against. As the input node is compared against each of the TOS target nodes in order, the marker is advanced to point to the next TOS target node. In one embodiment, when the marker reaches the end of the list of TOS target nodes, it wraps around to indicate the first target node on the TOS. Accordingly, in situations where the order of XML tags is significant (e.g., where two elements have the same name, but have different contexts), the order of the input XML tags can be tracked and separate mapping rules used based on position. Similarly, in situations where the order of XML tags is not significant, the same implementation can be used just the same.","In the Objects-to-XML mapping, an XML document fragment is built from a set of programming language objects as dictated by the map specification. In one embodiment, an annotated DOM representing the XML map specification is generated for use in generating the XML output. Certain annotation nodes, such as XMValue and XMAttribute objects will cause XML output to be generated based on the value of the programming language objects identified by the annotation nodes.",{"@attributes":{"id":"P-00057","num":"00057"},"figref":"FIGS. 10","i":"a-b ","b":["140","144","146","148","152","154","156","158","160","152","178","144","180","164","166","168","170","172","174","174","176","168","174"]},{"@attributes":{"id":"P-00058","num":"00058"},"figref":"FIG. 11","b":["200","202","204","200","206","208","210","212","204","206","206","210","202","212"]},"Thus, it can be seen from the above description, a declarative specification and engine for non-isomorphic data mapping has been described. While the present invention has been described referencing the illustrated and above enumerated embodiments, the present invention is not limited to these described embodiments. Numerous modification and alterations may be made, consistent with the scope of the present invention as set forth in the claims to follow. Thus, the above-described embodiments are merely illustrative, and not restrictive on the present invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The present invention will be described by way of exemplary embodiments, but not limitations, illustrated in the accompanying drawings in which like references denote similar elements, and in which:",{"@attributes":{"id":"P-00011","num":"00011"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00012","num":"00012"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00013","num":"00013"},"figref":"FIG. 3","b":"2"},{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 4","i":"a "},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 4","i":"b "},{"@attributes":{"id":"P-00016","num":"00016"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"i":["c ","b ","a"]},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":["FIGS. 6","FIG. 5"],"i":["a","c "],"b":"6"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":["FIGS. 7","FIG. 5"],"i":"a-d "},{"@attributes":{"id":"P-00020","num":"00020"},"figref":["FIG. 8","FIG. 4C"]},{"@attributes":{"id":"P-00021","num":"00021"},"figref":["FIG. 9","FIG. 4"],"i":"a; "},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIGS. 10","i":"a-b "},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
