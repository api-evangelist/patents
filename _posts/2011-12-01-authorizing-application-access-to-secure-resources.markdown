---
title: Authorizing application access to secure resources
abstract: An application submits a permission request to a resource server. In response to receiving the request, the resource server generates a user interface that asks the user to grant or deny the requested permissions. If the permissions are granted, data is stored indicating that the application has the requested permissions. When a runtime request for a resource is received, the resource server determines whether the request has been made by a user, by an application, or by an application on behalf of a user. If the request is made by an application only, the request is granted only if the application has permission to access the resource by way of a direct call not on behalf of a user. If the request is made by an application on behalf of a user, the request is granted only if both the user and the application have sufficient permission.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015807&OS=09015807&RS=09015807
owner: Microsoft Technology Licensing, LLC
number: 09015807
owner_city: Redmond
owner_country: US
publication_date: 20111201
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Many world wide web (\u201cWeb\u201d) applications allow the installation and use of custom third-party applications that extend the capabilities of the Web application. These third-party applications typically execute, from a permissions perspective, as the current user of the Web application. As a result, such third-party applications can typically perform any action that the current user could perform, typically within some restricted boundaries set for an application executing in conjunction with the Web application. This requires that the system administrator who installs the third-party application place significant trust in the application since the application can read, modify, or delete any information in the Web application that any of the application's user have access to.","One solution to the problem described above is to limit access by third-party applications to only certain functionality provided by a Web application. For instance, a third-party application may only be given access to certain capabilities of a Web application by limiting the application programming interfaces (\u201cAPIs\u201d) exposed to the application. Another approach to the problem described above is to limit the scope of the trust decision made by the system administrator that installs the application. For example, environments within a Web application may be isolated from one another so that third-party applications can be installed, in separate environments without risk of corrupting other environments. This solution might be utilized, for instance, to limit an application's access to an environment that exposes sensitive data. This solution, however, is severely limiting given the fact that one of the most common reasons to utilize third-party applications is to aggregate data across different environments. Consequently, applications that apply to all of a company's environments across a Web application deployment are difficult or impossible to install in this scenario.","As mentioned above, third-party applications typically execute, from a permissions perspective, as the current user of the Web application. This means that the applications can only perform actions that their users have permission to perform. In many situations, however, it is desirable to allow a user or group of users, through the use of an application, to perform an action that their permissions would not permit them to perform directly. For example, an expense reporting application might approve an expense report when certain conditions are met (e.g., a small value), but a user should not have permission to approve the expense report directly without performing the operation through the application. This type of operation is not possible when the application executes as the current user. Some systems address this limitation by allowing applications to elevate permissions to a system account, which has no permission restrictions within the system. This solution, however, may make system administrators even more unwilling to install applications in environments that expose sensitive information.","It is with respect to these and other considerations that the disclosure made herein is presented.","Concepts and technologies are described herein for authorizing application access to secure resources. Through an implementation of the technologies disclosed herein, an owner of a secure resource can grant privileges to an application to utilize the secure resource. Utilizing the granted privileges, the application can directly (i.e. without a user) utilize the secure resource at runtime to the same extent as the owner of the resource. If a user utilizes the application to access the secure resource, however, the use of the resource is limited to the extent of the user's privileges. In this way, an application's privileges can be elevated to the level of the owner of a secure resource when the application accesses the secure resource directly. But, access to the secure resource is limited to the extent of a user's permissions when the user utilizes the application to access the resource.","According to one aspect presented herein, a Web application, such as a document repository application, is configured to allow the use of custom third-party applications that extend the capabilities of the Web application. In order to obtain permissions to access and utilize secure resources managed by the Web application, such as items in a content database, an application first submits a permission request to a resource server executing as a part of the Web application. The permission request identifies the scope and rights requested by the application. The permission request might also request that the application be granted permission to utilize one or more secure resources by way of a direct call that is not on behalf of a user. The permission request might be submitted by way of a hypertext transfer protocol (\u201cHTTP\u201d) request, an application manifest, user interface (\u201cUI\u201d) provided by the Web application, through an API provided by the Web application, or in another manner.","In response to receiving a permission request, the resource server is configured to identify one or more permission providers associated with the secure resources for which permissions are requested. The resource server then requests data from each identified permission provider that describes the permissions requested for an associated secure resource. The data is then aggregated into a UI that is displayed to the current user of the Web application. The UI asks the user to grant or deny the requested permissions to the application. If the user grants the application the requested permissions, data is stored indicating that the application has the requested permissions. At runtime, this data is utilized to process runtime requests by the application for secure resources managed by the Web application.","When a runtime request to perform an action on a secure resource is received by the resource server, the resource server determines whether the request has been made by a user, by an application only, or by an application on behalf of a user. If the request is made by an application only, the resource server grants the request only if the application has been granted permission in the manner described above to access the secure resource by way of a direct call that is not on behalf of a user. If the request is made by an application on behalf of a user, the resource server grants the request only if both the user and the application have permission to perform the requested action. The resource server also stores history data attributing the performance of the action on the secure resource to a user, to the application, or to both the user and the application.","This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.","The following detailed description is directed to concepts and technologies for authorizing application access to secure resources. As discussed briefly above, using the technologies disclosed herein, an application executing in conjunction with a Web application can directly utilize secure resources at runtime to the same extent as the owner of the resources. When a user uses the application to utilize the secure resources, both the user and the application must have appropriate permissions to utilize the secure resources. Additional details regarding these and other features will be provided below with regard to .","While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and various programs on one or more computer systems, those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","In the following detailed description, references are made to the accompanying drawings that form a part hereof, and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings, in which like numerals represent like elements through the several figures, aspects of a computing system and methodology for authorizing application access to a secure resource will be described.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["104","102","102","102","102","102","126"]},"The document repository system  may restrict access to the items in the content data store  based upon permissions. For instance, permissions may be set for the users of the document repository system  such that only certain users are permitted to access or modify certain of the items in the content data store . Because the items stored in the content data store  are secured using permissions in the manner described above, these items are referred to herein as secure resources A-N (collectively, secure resources ).","It should be appreciated that while the secure resources  are primarily described herein as items in a content data store , the secure resources  might be any other type of computing resource for which access is controlled based upon permissions. It should also be appreciated that while the embodiments disclosed herein are primarily described in the context of a document repository system , the embodiments disclosed herein are not limited to such an implementation. Rather, the embodiments disclosed herein can be utilized with any type of computing system that permits an application to access secure resources.","In one embodiment, the document repository system  includes a resource server  for controlling access to the secure resources . The resource server  is one or more software and\/or hardware components configured to receive and respond to requests to access the secure resources . The resource server  also provides functionality for registering applications, such as the application , to utilize the secure resources .","The application  is an application that is configured for use with the document repository system . For instance, the application  might extend the functionality provided by the document repository system . The application  might be a Web-based application or might execute directly upon the document repository system . In order to provide the desired functionality, the application  typically utilizes one or more of the secure resources . It should be appreciated that while the application  is primarily described herein as an application for extending the functionality provided by a document repository system , the embodiments utilized herein might be practiced with other types of applications.","In order to gain authorization to utilize the secure resources , the application  provides a permission request  to the resource server  in one embodiment. The permission request  is data that defines a scope  of the access requested by the application  and a right  that defines the permissions requested for the specified scope. The permission request  might also include an \u201capplication-only\u201d request  that requests that the application  be granted permission to utilize one or more of the secure resources  by way of direct calls that are not on behalf of a user. The application  might submit the permission request  by way of a hypertext transfer protocol (\u201cHTTP\u201d) request, an application manifest , a user interface (\u201cUI\u201d) provided by the document repository system , through an API provided by the document repository system , or in another manner. One example permission request  will be described below with regard to .","In response to receiving a permission request  from an application , the resource server  identifies one or more permission providers A-N (collectively, permission providers ) that have registered as providers of permissions for the secure resources A-N, respectively. In the example shown in , for instance, the permission provider A has registered as a provider of permissions for the secure resources A. If the scope  in the permission request  encompasses the secure resource A, the resource server  would identify the permission provider A as a relevant permission provider for the permission request .","In order to register with the resource server , each permission provider  indicates to the resource server  the scope of resources that the permission provider is associated with. Each permission provider  might also register callback functions with the resource server . For instance, each permission provider  might register a callback function with the resource server  through which the resource server  can obtain data describing the permissions associated with a secure resource . As will be described in detail below, the resource server  may utilize this data to construct a UI indicating to a user the permissions requested by an application  in a permission request .","Each permission provider  might also register a callback function through which the resource server  can provide a notification that a permission request  has been granted. The resource server  stores the registration data, including data identifying the callback functions, in a permission providers data store . Additional details regarding one process for registering the permission providers  will be provided below with regard to .","Once the resource server  has identified the permission providers  relevant to the permission request , the resource server  calls the callback function of each identified provider  for obtaining the data that describes the permissions requested. The resource server  might pass the scope  and right  in the permission request  to the identified permission providers  along with a current context that identifies the current user. In turn, each called permission provider  determines whether the current user has sufficient privileges to grant the application  the permissions requested in the permission request .","If the user does not have sufficient privileges to grant the application  the requested permissions, the permission request  will be denied. If the user does have sufficient privileges to grant the permission request , each permission provider  will return data to the resource server  that can be utilized to construct the UI indicating to the user the permissions requested by the application . This data may be in the form of hypertext markup language (\u201cHTML\u201d), plain text, or in another format suitable for direct inclusion in a UI element, such as a dialog box.","Once the resource server  has received responses from the identified permission providers , the resource server  aggregates the received data into a UI that is displayed to the current user. The UI sets forth the descriptions of the requested permissions and asks the user to grant or deny the permissions requested by the application  in the permission request . One such illustrative UI will be described below with regard to . If the user grants the application  the requested permissions through the UI, the resource server  stores data in the permission data store  indicating that the application  has the requested permissions. At runtime, the resource server  utilizes this data to process requests by the application  to perform actions on the secure resources . Additional details regarding the runtime processing performed by the resource server  will be provided below with regard to FIGS.  and A-B.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 2"],"b":["200","116"]},"The routine  begins at operation , where a permission provider  provides an indication to the resource server  of the scope of secure resources for which the permission provider  should be registered. The routine  then proceeds to operation , where the permission provider  provides a callback function to the resource server  through which the data describing requested permissions can be obtained. As discussed briefly above, the resource server  can utilize this information to generate a UI requesting that a user approve or deny a permission request .","From operation , the routine  proceeds to operation , where the permission provider  provides a callback function to the resource server  that the resource server  can use to notify the permission provider  that a permission request  has been granted. It should be appreciated that the information provided at operations , , and  might be provided in one or multiple data structures. This information might also be formatted using the extensible markup language (\u201cXML\u201d), using another structured language format, or in another manner altogether.","From operation , the routine  proceeds to operation , where the resource server  stores the scope and callback functions identified by the permission provider  in the permission providers data store . Once the data has been stored, the routine  proceeds from operation  to operation , where it ends.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIGS. 3A-3B","b":["300","104","114","300","114","106","300","304","114","116","108","106","114","118","116","108","116","300","304","306"]},"At operation , the resource server  passes the requested scope , right , application-only request , if any, and the current context to each of the registered permission providers  from which permission is requested. In response to receiving this information, each permission provider  determines if the current user has sufficient authority to grant the requested permissions. This may be accomplished, for instance, by referencing data stored in the permission data store  that indicates the privileges held by the current user. If the user cannot grant the requested permissions to the application , the routine  proceeds from operation  to operation , where the permission request  is denied. Additionally, a UI may be presented to the user indicating that the permissions cannot be granted. The routine  then proceeds from operation  to operation , where it ends.","If the user does possess sufficient privileges to grant the permission request , the routine  proceeds from operation  to operation  (shown in ). At operation , the resource server  calls the callback function of each identified permission provider  to obtain data describing the permission requested of each permission provider . In turn, each of the called permission providers  provides the requested information to the resource server . The routine  then proceeds from operation  to operation .","At operation , the resource server  aggregates the data received from the permission providers  into a UI and presents the UI to the current user. As mentioned above, the UI also asks the user to approve or reject the grant of privileges to the application  set forth in the permission request . One such UI will be described below with regard to .","If the user rejects the grant of privileges to the application , the routine  proceeds from operation  to operation . At operation , the permission request  is denied. Additionally a UI may be presented to the user indicating that the requested permissions cannot be granted. The routine  then proceeds from operation  to operation , where it ends.","If the user approves the permission request , the routine  proceeds from operation  to operation . At operation , the resource server calls the callback function exposed by each identified permission provider  for indicating that the permission request  was granted. The routine  then proceeds to operation , where data is stored in the permission data store  indicating the grant of the requested permissions to the application . As mentioned above, this data is utilized at runtime to determine whether requests received from the application  for secure resources  should be approved or denied. From operation , the routine  proceeds to operation , where it ends.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4A","FIG. 4A"],"b":["106","106","104","106"]},"For each secure resource for which privileges are requested, the permission request  also specifies the requested right. For example, the permission request  shown in  requests the right to read contact, read calendars, and to write to a document library. It should be appreciated that other types of rights might also be requested. It should also be appreciated that while the permission request shown in  has been expressed utilizing XML, other structured or unstructured languages might also be utilized. Other elements, configurations, and arrangements of data might also be utilized to express the scope , right , application-only request , and any other elements of a permission request .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4B","FIG. 4B","FIG. 4A"],"b":["400","104","114","400","106","400","106"]},"The user interface  includes text explaining to a user that an application has requested access to the secure resources . The user interface  also includes text describing the various permissions requested by the application  in the permission request . As discussed above, this information might be obtained from the permission providers  associated with the scope  set forth in the permission request  by way of a callback function. The information received from the permission providers  is displayed in the fields A-D in one embodiment.","In the example shown in , for instance, the data received from a permission provider  for a document library describing a requested permission may be shown in the field A. The data received from a permission provider  for user profiles may be displayed in the field B. The data received from a permission provider  for calendars describing the requested permission may be shown in the field C. The data received from a permission provider  for contacts may be displayed in the field B. The current user may select the UI control B to grant the requested privileges. Alternatively, the user may select the UI control A to deny the permission request .","It should be appreciated that the user interface shown in  is merely illustrative and that more or less data might be presented. For example, additional fields  might be presented, including fields indicating that an application-only request  has been made. Additionally, the presented data might be presented in a different manner or utilizing different UI controls than shown in . Other variations will be apparent to those skilled in the art.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 5"],"b":["502","104","504","114","502","504","122","102","104","104","504","122","502","502","104","504","104","502"]},"In order to determine whether a resource request  is made by a user  only, by an application  only, or by an application  on behalf of a user , an appropriate authentication mechanism might be utilized. Through such a mechanism, a user identity A is presented to the resource server  when a resource request A is made by a user  only. An application identity C is presented to the resource server  when a resource request C is made by an application  only. Similarly, application and user identities  are presented to the resource server  when a resource request B is made by an application  on behalf of a user . An appropriate protocol may be utilized to present the identities  to the resource server  when resource requests  are made. Other mechanisms might also be utilized to authenticate the user  and the application  and to indicate to the resource server  when a resource request  has been made by a user  only, by an application  only, or by an application  on behalf of a user .","In response to receiving a resource request , the resource server  determines whether the resource request  was made by a user , by an application  only, or by an application  on behalf of a user . The resource server  then retrieves data from the permission data store  to determine if the resource request  can be granted or should be denied. If a resource request  is made by an application  only, the resource server  grants the request  only if the application  has been granted permission in the manner described above to access the secure resource  by way of a direct call that is not on behalf of a user. If the resource request  is made by an application  on behalf of a user , the resource server  grants the request  only if both the user  and the application  have permission to perform the requested action. The resource server  might also store data in a history data store  attributing the performance of the action on the secure resource  to the user , to the application , or to both the user  and the application , as appropriate. Additional details regarding these processes will be provided below with regard to .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIGS. 6A-6B","b":["600","504","122","600","602","114","504","504","600","604","114","504","502","504","502","600","604","610"]},"At operation , the resource server  utilizes the permission data store  to determine if the user  making the request has sufficient privileges to perform the action requested in the received resource request . If the user  does not have sufficient privileges, the routine  proceeds from operation  to operation , where the received resource request  is denied. The routine  then proceeds from operation  to operation , where it ends.","If the user  has sufficient privileges, the routine  proceeds from operation  to operation , where the action requested in the received resource request  is performed. For instance, a read operation, write operation, or another type of operation might be performed on the secure resource . Once the action has completed, the routine  proceeds to operation , where the resource server  stores data in the history data store  attributing the performed action to the user . For instance, data may be stored indicating that the user  performed a write operation on a secure resource . From operation , the routine  proceeds to operation , where it ends.","If, at operation , the resource server  determines that the received resource request  was not made by a user  only, the routine  proceeds to operation . At operation , the resource server  determines whether the received resource request  was made by an application  on behalf of a user . If the received resource request  was made by application  on behalf of the user , the routine  proceeds from operation  to operation .","At operation , the resource server  utilizes the permission data store  to determine if both the application  and the user  have sufficient privileges to perform the action requested in the received resource request . If either the application  or the user  does not have sufficient privileges, the routine  proceeds from operation  to operation , where the received resource request  is denied. The routine  then proceeds from operation  to operation , where it ends.","If both the application  and the user  have sufficient privileges, the routine  proceeds from operation  to operation , where the action requested in the received resource request  is performed. Once the action has been completed, the routine  proceeds to operation , where the resource server  stores data in the history data store  attributing the performed action to both the application  and the user . For instance, data may be stored indicating that the application  performed a delete operation on a secure resource  on behalf of the user . From operation , the routine  proceeds to operation , where it ends.","If, at operation , the resource server  determines that the received resource request was not made on behalf of both a user  and an application , the routine  proceeds from operation  to operation . At operation , the resource server  determines whether the received resource request  was made on behalf of only the application . If the received resource request  was not made on behalf of only an application , the routine  proceeds from operation  to operation  where the received resource request  is denied. The routine  then proceeds from operation  to operation , where it ends.","If the resource server  determines that the received resource request  was made on behalf of only an application , the routine  proceeds from operation  to operation  (shown in ). At operation , the resource server  utilizes the permission data store  to determine if the application  has sufficient privileges to perform the action requested in the received resource request . If the application  does not have sufficient privileges, the routine  proceeds from operation  to operation , where the received resource request  is denied. The routine  then proceeds from operation  to operation , where it ends.","If the application  does have sufficient privileges, the routine  proceeds from operation  to operation , where the action requested in the received resource request  is performed. Once the action has completed, the routine  proceeds to operation , where the resource server  stores data in the history data store  attributing the performed action to only the application . From operation , the routine  proceeds to operation , where it ends.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 7","FIG. 7"]},"The computer architecture shown in  includes a central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the CPU . A basic input\/output system (\u201cBIOS\u201d) (not shown) containing the basic routines that help to transfer information between elements within the computer , such as during startup, is stored in the ROM . The computer  further includes a mass storage device  for storing an operating system , application programs, and other program modules, which will be described in greater detail below.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable storage media provide non-volatile storage for the computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled, in the art that computer-readable storage media can be any available computer storage media that can be accessed by the computer .","By way of example, and not limitation, computer-readable storage media may include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. For example, computer-readable storage media includes, but is not limited, to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, digital versatile disks (\u201cDVD\u201d), HD-DVD, BLU-RAY, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other non-transitory medium which can be used to store the desired information and which can be accessed by the computer .","It should be appreciated that the computer-readable media disclosed herein also encompasses communication media. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media. Computer-readable storage media does not encompass communication media.","According to various embodiments, the computer  may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer  may connect to the network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems. The computer  may also include an input\/output controller  for receiving and processing input from a number of other devices, including a keyboard, mouse, or electronic stylus (not shown in ). Similarly, an input\/output controller may provide output to a display screen, a printer, or other type of output device (also not shown in ).","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the computer , including an operating system  suitable for controlling the operation of a networked desktop, laptop, or server computer. The mass storage device  and RAM  may also store one or more program modules. In particular, the mass storage device  and the RAM  may store one or more software components for providing the functionality described above, such as the application  or the resource server , or another type of program or service. The mass storage device  and RAM  may also store the other program modules and data disclosed herein.","In general, software applications or modules may, when loaded into the CPU  and executed, transform the CPU  and the overall computer  from a general-purpose computing system into a special-purpose computing system customized to perform the functionality presented herein. The CPU  may be constricted from any number of transistors or other discrete circuit elements, which may individually or collectively assume any number of states. More specifically, the CPU  may operate as one or more finite-state machines, in response to executable instructions contained within the software or modules. These computer-executable instructions may transform the CPU  by specifying how the CPU  transitions between states, thereby physically transforming the transistors or other discrete hardware elements constituting the CPU .","Encoding the software or modules onto a mass storage device may also transform the physical structure of the mass storage device or associated computer readable storage media. The specific transformation of physical structure may depend on various factors, in different implementations of this description. Examples of such factors may include, but are not limited to: the technology used to implement the computer readable storage media, whether the computer readable storage media are characterized as primary or secondary storage, and the like. For example, if the computer readable storage media is implemented as semiconductor-based memory, the software or modules may transform the physical state of the semiconductor memory, when the software is encoded therein. For example, the software may transform the states of transistors, capacitors, or other discrete circuit elements constituting the semiconductor memory.","As another example, the computer readable storage media may be implemented using magnetic or optical technology. In such implementations, the software or modules may transform the physical state of magnetic or optical media, when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations may also include altering the physical features or characteristics of particular locations within given optical media, to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope and spirit of the present description, with the foregoing examples provided only to facilitate this discussion.","Based on the foregoing, it should be appreciated that technologies for authorizing application access to a secure resource have been disclosed herein. Although the subject matter presented herein has been described in language specific to computer structural features, methodological acts, and computer readable media, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features, acts, or media described herein. Rather, the specific features, acts and mediums are disclosed as example forms of implementing the claims.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3A-3B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 6A-6B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
