---
title: Demonstrating integrity of a compartment of a compartmented operating system
abstract: A computing platform  runs a compartmented operating system  and includes a trusted device  for forming an integrity metric which a user can interrogate to confirm integrity of the operating system. Also, the integrity of an individual compartment  is verified by examining status information for that compartment including, for example, the identity of any open network connections, the identity of any running processes, and the status of a section of file space allocated to that compartment . Hence, the integrity of an individual compartment  of the compartmented operating system  can be demonstrated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09633206&OS=09633206&RS=09633206
owner: Hewlett-Packard Development Company, L.P.
number: 09633206
owner_city: Houston
owner_country: US
publication_date: 20020607
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The subject matter of the present application may also be related to the following U.S. Patent Applications: \u201cOperation of Trusted State in Computing Platform,\u201d Ser. No. 09\/728,827, filed Nov. 28, 2000; \u201cPerformance of a Service on a Computing Platform,\u201d Ser. No. 09\/920,554, filed Aug. 1, 2001; \u201cSecure E-Mail Handling Using a Compartmented Operating System,\u201d Ser. No. 10\/075,444, filed Feb. 15, 2002; \u201cElectronic Communication,\u201d Ser. No. 10\/080,466, filed Feb. 22, 2002; \u201cMultiple Trusted Computing Environments with Verifiable Environment Entities,\u201d Ser. No. 10\/175,183, filed Jun. 18, 2002; \u201cRenting a Computing Environment on a Trusted Computing Platform,\u201d Ser. No. 10\/175,185, filed Jun. 18, 2002; \u201cInteraction with Electronic Services and Markets,\u201d Ser. No. 10\/175,395, filed Jun. 18, 2002; \u201cMultiple Trusted Computing Environments,\u201d Ser. No. 10\/175,542, filed Jun. 18, 2002; \u201cPerforming Secure and Insecure Computing Operations in a Compartmented Operating System,\u201d Ser. No. 10\/175,553, filed Jun. 18, 2002; \u201cPrivacy of Data on a Computer Platform,\u201d Ser. No. 10\/206,812, filed Jul. 26, 2002; \u201cTrusted Operating System,\u201d Ser. No. 10\/240,137, filed Sep. 26, 2002; \u201cTrusted Gateway System,\u201d Ser. No. 10\/240,139, filed Sep. 26, 2002; and \u201cApparatus and Method for Creating a Trusted Environment,\u201d Ser. No. 10\/303,690, filed Nov. 21, 2002.","The present invention relates in general to a method for demonstrating the integrity of a compartment of a compartmented operating system, and to a trusted device and computing platform for performing the same.","Compartmented operating systems have been available for several years in a form designed for handling and processing classified (military) information, using a containment mechanism enforced by a kernel of the operating system with mandatory access controls to resources of the computing platform such as files, processes and network connections. The operating system attaches labels to the resources and enforces a policy which governs the allowed interaction between these resources based on their label values. Most compartmented operating systems apply a policy based on the Bell-LaPadula model discussed in the paper \u201cApplying Military Grade Security to the Internet\u201d by C I Dalton and J F Griffin published in Computer Networks and ISDN Systems 29 (1997) 1799-1808.","Whilst a compartmented operating system is secure offering a relatively high degree of containment, it is desired to provide a method for demonstrating the integrity of a compartment. In particular, it is desired to demonstrate that a compartment is in a trusted state and will operate in a predicted manner. As one example, it is desired to confirm that the compartment is free from subversion, either arising inadvertently or through an unauthorised attack.","An aim of the present invention is to provide a method for demonstrating the integrity of an operating system compartment. Another aim is to provide a computing platform allowing demonstration of the integrity of an operating system compartment.","According to a first aspect of the present invention there is provided a method for demonstrating integrity of an operating system compartment in a computing platform having a trusted device, comprising the steps of: (a) providing a host operating system; (b) confirming a status of the host operating system using the trusted device; (c) providing a compartment of the host operating system; and (d) confirming a status of the compartment.","The step (b) preferably comprises providing an integrity metric of the host operating system, which may be compared against an integrity metric in a previously formed certificate, to verify integrity of the host operating system. Preferably, the integrity metric is formed by the trusted device.","The step (d) preferably comprises providing status metric of the compartment, which may be compared against a status metric in a previously formed certificate, to verify integrity of the compartment. Here, the step (d) comprises comparing the current state of the compartment against an expected state. The status metric is formed by the host operating system, or preferably is formed by the trusted device.","Preferably, the step (d) comprises providing information about the current state of the compartment, including information about any one or more of (i) a section of file space allocated to the compartment; (ii) any processes allocated to the compartment; or (iii) any communication interfaces allocated to the compartment. Preferably, the step (d) comprises confirming that the compartment only has access to an expected section of file space. Preferably, the step (d) comprises confirming that the allocated section of file space is in an expected condition. Preferably, the step (d) comprises confirming that only an expected process or processes are allocated to the compartment. Preferably, the step (d) comprises confirming that only expected IPC channels are open. Preferably, the step (d) comprises confirming that only expected communication interfaces are allocated to the compartment.","Also according to this first aspect of the present invention there is provided a method for use in a computing platform having a trusted device, the method comprising the steps of: (a) providing a host operating system; (b) verifying a status of the host operating system by comparing an integrity metric formed by the trusted device against an integrity metric in a previously formed certificate; (c) providing a compartment of the host operating system; and (d) verifying a status of the compartment by comparing a status metric formed by the trusted device against a status metric in a previously formed certificate.","According to a second aspect of the present invention there is provided a computing platform, comprising: a host operating system; at least one compartment provided by the host operating system; a trusted device arranged to confirm a status of the host operating system; and a status unit arranged to confirm a status of the compartment.","Preferably, the trusted device forms an integrity metric of the host operating system. Preferably, the trusted device forms the integrity metric during boot of the host operating system. Optionally, the integrity metric is updated periodically while the host operating system is running.","Preferably, the status unit comprises at least one of the host operating system or the trusted device.","Preferably, the status unit provides a current status of the compartment to be compared against an expected status. The status unit ideally provides a status metric based on the current status. Preferably, the current status identifies any one or more of (i) a section of file space allocated to the compartment, (ii) any processes allocated to the compartment, (iii) any IPC channels open for any process allocated to the compartment, or (iv) any communication interfaces allocated to the compartment.","Preferably, the status unit confirms a condition of the section of file space allocated to the compartment. Preferably, the condition of the section of file space allocated to the compartment is used to determine whether the section of file space has been corrupted.","Also according to this second aspect of the present invention there is provided a computing platform, comprising: a host operating system; a compartment provided by the host operating system; and a trusted device arranged to obtain an integrity metric of the host operating system for comparison against an integrity metric in a previously formed certificate, and arranged to obtain a status metric of the compartment for comparison against a status metric in a previously formed certificate.","Further, according to a third aspect of the present invention there is provided a trusted device for use in a computing platform providing a host operating system having at least one compartment, the trusted device comprising: means arranged in use to obtain an integrity metric of the host operating system for comparison against an integrity metric in a previously formed certificate; and means arranged in use to obtain a status metric of the compartment for comparison against a status metric in a previously formed certificate.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["20","20","21","22","21","211","21","212"]},"In the preferred embodiment the hardware  includes a trusted device . The trusted device  is suitably a physical component such as an application specific integrated circuit (ASIC). Preferably the trusted device is mounted within a tamper-resistant housing. The trusted device  is coupled to the computing unit , and ideally to the local user interface unit . The trusted device  is preferably mounted on a motherboard of the computing unit . The trusted device  functions to bind the identity of the computing platform  to reliably measured data that provides an integrity metric of the platform.","Preferably, the trusted device  performs a secure boot process when the computing platform  is reset to ensure that the operating system  of the platform  is running properly and in a secure manner. During the secure boot process, the trusted device  acquires the integrity metric of the operating system  by examining operation of the computing unit  and the local user interface unit . The integrity metric is then available for a user to determine whether to trust the computing platform to operate is a predicted manner. In particular, a trusted computing platform is expected not to be subject to subversion such as by a virus or by unauthorised access.","WO 00\/48063 (Hewlett-Packard) discloses an example computing platform suitable for use in preferred embodiments of the present invention. In this example the trusted device  acquires a hash of a BIOS memory of the computing unit  after reset. The trusted device  receives memory read signals from the main processor and returns instructions for the main processor to form the hash. The hash is stored in the trusted device , which then returns an instruction that calls the BIOS program and a boot procedure continues as normal.","Preferably, the trusted device  controls the local user interface  such that a local user can trust the display of data provided on a visual display unit. WO 00\/73913 (Hewlett-Packard) discloses an example system for providing a trustworthy user interface by locating a driver for the visual display unit within the trusted device .","The hardware  may also comprise a trusted user interface for performing secure communication with a user device such as a smart card held by the user. The trusted user interface allows the user to perform trusted communications with the trusted device  in order to verify the integrity of the computing platform . The use of a smart card or other token for trusted local user interaction is described in more detail in WO 00\/54125 (Hewlett-Packard) and WO 00\/54126 (Hewlett-Packard).","The computing platform  provides a computing environment  which gives access to resources of the computing platform, such as processor time, memory area, and filespace. Preferably, a plurality of discrete computing environments  are provided. Each computing environment is logically distinct, but shares access to at least some of the resources of the computing platform with other computing environments.","Suitably, the computing environment  runs as a compartment. The actions or privileges within a compartment are constrained, particularly to restrict the ability of a process to execute methods and operations which have effect outside the compartment , such as methods that request network access or access to files outside of the compartment. Also, operation of the process within the compartment is performed with a high level of isolation from interference and prying by outside influences.","Preferably, the compartment is an operating system compartment controlled by a kernel of the host operating system . This is also referred to as a compartmented operating system or a trusted operating system.","The preferred embodiment of the present invention adopts a simple and convenient form of operating system compartment. Each resource of the computing platform which it is desired to protect is given a label indicating the compartment to which that resource belongs. Mandatory access controls are performed by the kernel of the host operating system to ensure that resources from one compartment cannot interfere with resources from another compartment. Access controls can follow relatively simple rules, such as requiring an exact match of the label. Examples of resources include data structures describing individual processes, shared memory segments, semaphores, message queues, sockets, network packets, network interfaces and routing table entries.","Communication between processes is controlled by IPC (Inter-Process Communication) channels. Communication between compartments is provided using narrow kernel level controlled interfaces to a transport mechanism such as TCP\/UDP. Access to these communication interfaces is governed by rules specified on a compartment by compartment basis. At appropriate points in the kernel, access control checks are performed such as through the use of hooks to a dynamically loadable security module that consults a table of rules indicating which compartments are allowed to access the resources of another compartment. In the absence of a rule explicitly allowing a cross compartment access to take place, an access attempt is denied by the kernel. The rules enforce mandatory segmentation across individual compartments, except for those compartments that have been explicitly allowed to access another compartment's resources. Communication between a compartment and a network resource is provided in a similar manner. In the absence of an explicit rule, access between a compartment and a network resource is denied.","Suitably, each compartment is allocated an individual section of a file system of the computing platform. For example, the section is a chroot of the main file system. Processes running within a particular compartment only have access to that section of the file system. Advantageously, through kernel controls, a process is restricted to the predetermined section of file system and cannot escape. In particular, access to the root of the file system is denied.","Advantageously, a compartment provides a high level of containment, whilst reducing implementation costs and changes required in order to implement an existing application within the compartment.","Referring to , it is desired to run a process  in one of the computing environments . In practical embodiments, many processes run on the computing platform simultaneously. Some processes are grouped together to form an application or service.","Each computing environment is suitably an operating system compartment  that contains a section of file space, a group of one or more processes, and a set of allowed communication interfaces to other compartments and to network resources. It is desired to demonstrate the integrity of a compartment by confirming that the compartment is in an expected state. In one example the expected state requires that any one or more of the following are in a particular condition, namely (a) the compartment only has access to an expected section of file space, (b) that the predetermined section of file space is in an expected condition, e.g. has not been corrupted by a virus, (c) only the expected process or processes are running; (d) only expected IPC channels are open; and (e) only expected communication interfaces are available. Preferably, information about any one or more of these conditions or other suitable criteria is combined to form a status metric. Suitably, the status metric is individual to the compartment  and describes the current status of that compartment.","The status metric can include many elements. For example, data event logging is performed as described in WO 00\/73880 (Hewlett-Packard) and applied specifically to the compartment . Also, a file digest is produced by applying a hash function to one or more data files stored in the section of file space allocated to the compartment, as described in WO 00\/73904 (Hewlett-Packard).","Preferably, the status metric is formed by the trusted device . To achieve the status metric, the trusted device  communicates with other components of the computing platform  such as the computing unit .","Preferably, information about the compartment used to form the status metric is gathered in response to hooks (e.g. IOCTALS, SYSCALLS) into a kernel of the host operating system .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2","b":"24"},"The method can be initiated by a local user of the computing platform , or a remote user coupled directly or indirectly to the computing platform .","Optionally, in step  authentication and authorisation checks are made to confirm that the party requesting demonstration of the integrity of a compartment is allowed access to that information.","In step  integrity of the computing platform is verified. Particularly, integrity of the host operating system  is verified. Preferably, the trusted device  provides an integrity metric of the host operating system .","In step , the status of a compartment  of the host operating system  is verified. Compartment status verification suitably includes providing access to information about the compartment or, preferably, providing a status metric containing the information in a specified form.","Preferably, the integrity metric of the host operating system and\/or the status metric of the compartment are each compared against a certificate issued by a trusted party that is prepared to vouch for the integrity of the computing platform. A challenge and response may occur, such as the user sending a random number sequence to the computing platform and receiving the random number in return in an encoded format. If the verification is successful, the computing platform is considered a trusted computing platform. The user trusts the computing platform because the user trusts the trusted party. The trusted party trusts the computing platform because the trusted party has previously validated the identity and determined the proper integrity metric of the platform. More detailed background information concerning an example method for verifying the computing platform and the host operating system using an integrity metric is given in WO 00\/48063 (Hewlett-Packard). A similar approach is adopted to verify the status metric of the compartment.","A method and computing platform have been described which allow demonstration of the integrity of a compartment of a compartmented operating system. Advantageously, a chain of trust is established firstly by verifying the host operating system, and then by verifying a particular compartment of the host operating system."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a better understanding of the invention, and to show how embodiments of the same may be carried into effect, reference will now be made, by way of example, to the accompanying diagrammatic drawings in which:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
