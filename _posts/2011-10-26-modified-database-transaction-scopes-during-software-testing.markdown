---
title: Modified database transaction scopes during software testing
abstract: While testing a software application that is associated with a database during a testing technique, a computer system may take over transaction scopes of transactions with the database so that data generated by the software application during the testing and communicated to the database is not persisted in the database (even though this data may be persisted in the database during normal operation). Furthermore, after the testing is completed, the computer system may restore the database to an initial state prior to the testing by rolling back the data which was not persisted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152630&OS=09152630&RS=09152630
owner: INTUIT INC.
number: 09152630
owner_city: Mountain View
owner_country: US
publication_date: 20111026
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates to techniques for testing a software application associated with a database. More specifically, the present disclosure relates to a technique for testing a software application associated with a database without committing data into the database by modifying transaction scopes of transactions with the database.","Many software applications store and retrieve data from associated databases. In order to ensure proper operation when changes to a software application are deployed, it is often necessary to test the software application in conjunction with its associated database. For example, when testing a payroll software application, the associated database may be set up with the data that is needed during the testing, such as the current employees of a company. Then, the test may be performed by running payroll for the company. Moreover, the resulting data in the database may be validated to confirm that it matches what is expected based on business logic associated with the payroll software application. Next, regardless of whether the test succeeded or failed, the data in the database may be cleaned up so that the database can be reused in additional testing.","However, it can be difficult to restore the database to its initial state prior to the testing because the testing may leave the database in a \u2018bad\u2019 state. In particular, after the testing is completed, the data in the database may be very different than the initial state of the database. Correcting all of the changes to the database that occurred during the testing can be time-consuming and expensive.","For example, restarting the database after each test can significantly increase the time needed for testing and, thus, is usually very expensive. Alternatively, the database may be restored by \u2018undoing\u2019 the data that was committed or stored in the database during the testing. However, it can be very difficult to correctly undo changes. This is especially the case when a failure occurred during the testing, which can leave the database in an unknown state, and thus can result in additional test failures that necessitate future cleanup operations.","The disclosed embodiments relate to a computer system that tests a software application associated with a database. During operation, the computer system executes a test script for testing the software application, where the test script checks a set of test conditions. Then, while the test script executes, the computer system takes over transaction scopes of transactions with the database so that data generated by the software application during the testing and communicated to the database is not persisted in the database. Note that, during operation of the database other than during the execution of the test script (e.g., during normal operation), the data may be persisted in the database. Moreover, on completion of the test script, the computer system restores the database to an initial state prior to the execution of the test script by rolling back the data which was not persisted.","Note that the transaction scopes may be associated with atomic operations performed by the database.","Moreover, taking over of the transaction scopes may be implemented in the database. For example, taking over of the transaction scopes may be implemented in control logic associated with the database.","Alternatively or additionally, taking over of the transaction scopes may be implemented externally to the database. For example, taking over of the transaction scopes may be implemented using an application-programming-interface associated with the database.","In some embodiments, prior to executing the test script, the computer system determines the set of test conditions. Additionally, prior to restoring the database, the computer system may validate the data.","Furthermore, the database may be restored even if the software application fails the test script. In some embodiments, the database is restored without restarting the database.","Another embodiment provides a method that includes at least some of the operations performed by the computer system.","Another embodiment provides a computer-program product for use with the computer system. This computer-program product includes instructions for at least some of the operations performed by the computer system.","Table 1 provides pseudo-code in accordance with an embodiment of the present disclosure.","Note that like reference numerals refer to corresponding parts throughout the drawings. Moreover, multiple instances of the same part are designated by a common prefix separated from an instance number by a dash.","Embodiments of a computer system, a technique for testing a software application associated with a database, and a computer-program product (e.g., software) for use with the computer system are described. While testing the software application during the testing technique, the computer system may take over transaction scopes of transactions with the database so that data generated by the software application during the testing and communicated to the database is not persisted in the database (even though this data may be persisted in the database during normal operation). Furthermore, after the testing is completed, the computer system may restore the database to an initial state prior to the testing by rolling back the data which was not persisted.","By readily restoring the database to a known or \u2018good\u2019 state, this testing technique may facilitate efficient testing of software applications. In particular, the testing may be cheaper, more accurate and less time-consuming than existing testing techniques that persist or commit the data in the database during the testing. For example, the testing technique can restore the database to the initial state without restarting the database or trying to roll back persisted changes to the database. In this way, the testing technique may improve the quality of software applications, which may increase user satisfaction and, thus, sales of the software applications.","In the discussion that follows, the user may include: an individual (for example, an existing customer, a new customer, a service provider, a vendor, a contractor, etc.), an organization, a business and\/or a government agency. Furthermore, a \u2018business\u2019 should be understood to include: for-profit corporations, non-profit corporations, organizations, groups of individuals, sole proprietorships, government agencies, partnerships, etc.","We now describe embodiments of the testing technique.  presents a flow chart illustrating a method  for testing a software application associated with a database, which may be performed by a system (such as system  in ) and\/or a computer system (such as computer system  in ) in this system. During operation, the computer system executes a test script for testing the software application associated with the database (operation ), where the test script checks a set of test conditions.","Then, while the test script executes, the computer system takes over transaction scopes of transactions with the database so that data generated by the software application during the testing and communicated to the database is not persisted in the database (operation ). Note that, during operation of the database other than during the execution of the test script (such as during normal operation), the data may be persisted in the database. Moreover, note that the transaction scopes may be associated with atomic operations performed by the database.","On completion of the test script, the computer system restores the database to an initial state prior to the execution of the test script by rolling back the data which was not persisted (operation ). Note that the database may be restored without restarting the database.","In some embodiments, prior to executing the test script (operation ), the computer system optionally determines the set of test conditions (operation ). However, in some embodiments the set of test conditions are predetermined. Additionally, prior to restoring the database (operation ), the computer system may optionally validate the data (operation ). However, the database may be rolled back (operation ) whether the test script succeeded or failed.","In some embodiments, taking over of the transaction scopes is implemented in the database. For example, taking over of the transaction scopes may be implemented in control logic (i.e., hardware) associated with the database. Alternatively or additionally, taking over of the transaction scopes may be implemented externally to the database. For example, taking over of the transaction scopes may be implemented using an application-programming-interface (e.g., hardware) associated with the database. However, in general the testing technique may be implemented in hardware and\/or software.","In some embodiments of method , there may be additional or fewer operations. Moreover, the order of the operations may be changed, and\/or two or more operations may be combined into a single operation.","In an exemplary embodiment, a software application associated with a database (which includes a collection of data records, files and\/or other database objects) is tested by using one or more \u2018commitless\u2019 transactions, in which data that is normally persisted or stored in the database (for example, on one or more hard-disk drives) is not persisted. These commitless transactions allow a test script to execute against the database and validate the resulting data, and then clean up the data without further intervention or coding from a test engineer (and, more generally, a user of the testing technique). Furthermore, after execution of the test script, the database may be ready for use in further testing without the cost of a full restart of the database. Thus, the commitless transactions may enable a controlled roll back of the data after execution of a test script (even if the software application failed the test) while leaving the tested code in the software application unchanged.","In general, data associated with transactions tends to be persisted in a database. By taking over the transaction scopes of the transactions, the data may not be persisted. Note that atomic operations, such as begin, end, commit, roll back, and other persistence operations, define the transaction scope of a given database transaction. In the testing technique, the commitless transactions can be implemented by rerouting requests associated with the transactions. For example, using the database application programming interface, during the testing technique the data may be stored in metadata fields in a database transaction log. This approach may allow the test code to execute, validate the data (including returning data from the database in response to queries) and then roll it back, without committing the data in the database (such as storing it on one or more hard-disk drives).","In an exemplary embodiment, the java.sql.connection interface is used as a so-called \u2018commitless connection.\u2019 In particular, this java.sql.connection interface may be used to manage a database transaction, such as commit and roll back. Moreover, the commitless connection may define or wrap a second connection, which is used to communicate with the database. Note that most messages to the commitless connection will pass through to the second connection. However, commit and roll back messages may be ignored and destroyed. When the commitless connection is released, the second connection may be asked to roll back and close. This operation may clean up any data submitted to the database during the lifetime of the commitless connection.","During the testing technique, commitless transactions may be included in the runtime execution of test scripts. This may be implemented using a variety of frameworks, such as JMock (a library that supports test-driven development of Java\u2122 code), Guice (an open-source framework for the Java\u2122 platform) or Spring (a platform to build and run Java\u2122 applications). Note that Java\u2122 is a trademark of Oracle Corporation (of Redwood Shores, Calif.).","For example, using JMock a test framework may be configured to use a mock driver manager. The driver manager may control the creation of connections. Then, the real connection to the database may be wrapped with a commitless connection. The test script may subsequently exercise the code in the software application, but the database messages may run through the commitless connection. Moreover, when the connection is released, the database may be restored to the same state it was in prior to running the test script.","Table 1 provides pseudo-code for a CommitConnection that implements the testing technique for a payroll software application.",{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class CommitlessConnection implements Connection {"},{"entry":"\u2003\/\/ This is the \u2018real\u2019 connection object."},{"entry":"\u2003private Connection conn;"},{"entry":"\u2003\/\/ Contructor, used by the test script."},{"entry":"\u2003public CommitlessConnection(Connection conn) throws SQLException {"},{"entry":"\u2003\u2003this.conn = conn;"},{"entry":"\u2003\u2003\/\/ turn off auto commit"},{"entry":"\u2003\u2003conn.setAutoCommit(false);"},{"entry":"\u2003}"},{"entry":"\u2003\/\/ This code is called by the test script once the test script is complete and the data is no longer"},{"entry":"\u2003required."},{"entry":"\u2003public void releaseConnection( ) throws SQLException {"},{"entry":"\u2003\u2003\/\/ roll it back"},{"entry":"\u2003\u2003conn.roll back( );"},{"entry":"\u2003\u2003conn.close( );"},{"entry":"\u2003}"},{"entry":"\u2003@Override"},{"entry":"\u2003public void setAutoCommit(boolean autoCommit) throws SQLException {"},{"entry":"\u2003\u2003\/\/ ignore because it is already set to false;"},{"entry":"\u2003}"},{"entry":"\u2003@Override"},{"entry":"\u2003public boolean getAutoCommit( ) throws SQLException {"},{"entry":"\u2003\u2003return false;"},{"entry":"\u2003}"},{"entry":"\u2003@Override"},{"entry":"\u2003public void commit( ) throws SQLException {"},{"entry":"\u2003\u2003\/\/ do nothing"},{"entry":"\u2003}"},{"entry":"\u2003@Override"},{"entry":"\u2003public void roll back( ) throws SQLException {"},{"entry":"\u2003\u2003\/\/ do nothing"},{"entry":"\u2003}"},{"entry":"\u2003@Override"},{"entry":"\u2003public void close( ) throws SQLException {"},{"entry":"\u2003\u2003\/\/ ignore because there is no close."},{"entry":"\u2003}"},{"entry":"\u2003@Override"},{"entry":"\u2003public Statement createStatement( ) throws SQLException {"},{"entry":"\u2003\u2003\/\/ pass through... "},{"entry":"\u2003\u2003return conn.createStatement( );"},{"entry":"\u2003}"},{"entry":"\u2003\/\/there may be other passed through messages those shown above."},{"entry":"}"},{"entry":"\/\/JMockit is used to initialize the commitless transaction. It overrides the MockDbUtil class, which \/\/functions"},{"entry":"as a simple factory class."},{"entry":"@MockClass(realClass=DbUtil.class)"},{"entry":"public class MockDBUtil {"},{"entry":"\u2003private static CommitlessConnection connection;"},{"entry":"\u2003@Mock"},{"entry":"\u2003public static Connection createConnection( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003if (connection == null) {"},{"entry":"\u2003\u2003\u2003\u2003\/\/ Initialize the DB connection properties"},{"entry":"\u2003\u2003\u2003\u2003\/\/ Load the jdbc-odbc bridge driver"},{"entry":"\u2003\u2003\u2003\u2003Class.forName (driver).newInstance( );"},{"entry":"\u2003\u2003\u2003\u2003\/\/ Set a timeout for login and query"},{"entry":"\u2003\u2003\u2003\u2003DriverManager.setLoginTimeout(75);"},{"entry":"\u2003\u2003\u2003\u2003\/\/ Attempt to connect to a driver. Each one of the registered drivers"},{"entry":"\u2003\u2003\u2003\u2003\/\/ will be loaded until one is found that can process this URL"},{"entry":"\u2003\u2003\u2003\u2003Connection con = DriverManager.getConnection (url, user, password);"},{"entry":"\u2003\u2003\u2003\u2003\/\/ Select a database"},{"entry":"\u2003\u2003\u2003\u2003con.setCatalog (catalog);"},{"entry":"\u2003\u2003\u2003\u2003connection = new CommitlessConnection(con);"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003return connection;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ When the data is thrown away is controlled from the test script."},{"entry":"\u2003\u2003public static void cleanupConnection( ) throws SQLException {"},{"entry":"\u2003\u2003if (connection !=null) {"},{"entry":"\u2003\u2003\u2003connection.releaseConnection( );"},{"entry":"\u2003\u2003\u2003connection = null;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"public class Paycheck {"},{"entry":"\u2003\/\/ add a paycheck"},{"entry":"\u2003public void addPaycheck(PaycheckData data) {"},{"entry":"\u2003\u2003Connection connection = MockDbUtil.createConnection( );"},{"entry":"\u2003\u2003preparePaycheckForinsertion(data);"},{"entry":"\u2003\u2003boolean success = insertData(data, connection);"},{"entry":"\u2003\u2003if (success) {"},{"entry":"\u2003\u2003\u2003connection.commit( );"},{"entry":"\u2003\u2003\u2003} else {"},{"entry":"\u2003\u2003\u2003connection.roll back( );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003connection.close( );"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"\/\/Test script. Setup the MockDBUtil so that any call to DBUtil in the tested script goes through"},{"entry":"\/\/ this object."},{"entry":"@UsingMocksAndStubs( {MockDBUtil.class } )"},{"entry":"public class PaycheckTest {"},{"entry":"\u2003\/\/ After any test is run, cleanup the connection."},{"entry":"\u2003@After"},{"entry":"\u2003public void cleanUpConnection( ) throws Exception {"},{"entry":"\u2003\u2003MockDBUtil.cleanupConnection( );"},{"entry":"\u2003}"},{"entry":"\u2003@Test"},{"entry":"\u2003public void testAddPaycheck( ) {"},{"entry":"\u2003\u2003Paycheck paycheck = Paycheck.init( );"},{"entry":"\u2003\u2003PaycheckData data = samplePaycheckData( );"},{"entry":"\u2003\u2003paycheck.addPaycheck(data);"},{"entry":"\u2003\/\/ verify the data is in the database."},{"entry":"\u2003Connection connection = DbUtil.createConnection( );"},{"entry":"\u2003ResultSet rs = getPaycheckData(connection);"},{"entry":"\u2003verifyPaycheckResultSet(rs);"},{"entry":"\u2003connection.close( );"},{"entry":"\u2003} \/\/the data is cleaned up at the end of this call."},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"We now describe embodiments of the system and the computer system, and their use.  presents a block diagram illustrating a system  that performs method  (). In this system, computer system  may perform testing of a software application that is associated with database . In particular, as discussed previously, computer system  may execute a test script for testing the software application, including communicating instructions, queries and responses with database  via network . Note that the test script and the software application may be resident on computer system  or may be stored remotely in system .","While the test script executes, computer system  may take over transaction scopes of transactions with database  so that data generated by the software application during the testing and communicated to database  is not persisted in database . For example, the test script may use a database application interface to instruct a software database management system  to reroute data associated with transactions during execution of the test script to transaction log  instead of storing or persisting the data in one of data structures  (which may be stored on one or more hard-disk drives). Furthermore, on completion of the test script, computer system  may instruct database management system , via network , to restore database  to an initial state prior to the execution of the test script by rolling back the data which was not persisted. This roll back may be performed without restarting database ; for example, the data in transaction log  may be erased.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3","FIG. 1"],"b":["210","100","210","310","312","314","322","310","312","322","314","316","318","320"]},"Memory  in computer system  may include volatile memory and\/or non-volatile memory. More specifically, memory  may include: ROM, RAM, EPROM, EEPROM, flash memory, one or more smart cards, one or more magnetic disc storage devices, and\/or one or more optical storage devices. Memory  may store an operating system  that includes procedures (or a set of instructions) for handling various basic system services for performing hardware-dependent tasks. Memory  may also store procedures (or a set of instructions) in a communication module . These communication procedures may be used for communicating with one or more computers and\/or servers, including computers and\/or servers that are remotely located with respect to computer system .","Memory  may also include multiple program modules (or sets of instructions), including testing module  (or a set of instructions). Note that one or more of these program modules (or sets of instructions) may constitute a computer-program mechanism.","During method  (), testing module  may optionally determine set of test conditions . Alternatively, set of test conditions  may be predetermined. Then, testing module  may perform testing of a software application  that is associated with a database  by executing one or more test scripts  based on set of test conditions .","While the one or more test scripts  execute, testing module  may take over transaction scopes of transactions  with database  so that data  generated by software application  during the testing and communicated to database  is not persisted in database . In some embodiments, testing module  may validate data  and may optionally determine one or more optional acceptance conditions  (such as pass or fail) associated with the one or more test scripts .","Furthermore, on completion of the one or more test scripts , testing module  may instruct database  to restore database  to an initial state  prior to the execution of the one or more test scripts  by rolling back data  which was not persisted. This roll back may occur without restarting database .","Instructions in the various modules in memory  may be implemented in: a high-level procedural language, an object-oriented programming language, and\/or in an assembly or machine language. Note that the programming language may be compiled or interpreted, e.g., configurable or configured, to be executed by the one or more processors .","Although computer system  is illustrated as having a number of discrete items,  is intended to be a functional description of the various features that may be present in computer system  rather than a structural schematic of the embodiments described herein. In practice, and as recognized by those of ordinary skill in the art, the functions of computer system  may be distributed over a large number of servers or computers, with various groups of the servers or computers performing particular subsets of the functions. In some embodiments, some or all of the functionality of computer system  may be implemented in one or more application-specific integrated circuits (ASICs) and\/or one or more digital signal processors (DSPs).","Computer systems (such as computer system ), as well as computers and servers in system  () may include one of a variety of devices capable of manipulating computer-readable data or communicating such data between two or more computing systems over a network, including: a personal computer, a laptop computer, a tablet computer, a mainframe computer, a portable electronic device (such as a cellular phone or PDA), a server and\/or a client computer (in a client-server architecture). Moreover, network  () may include: the Internet, World Wide Web (WWW), an intranet, a cellular-telephone network, LAN, WAN, MAN, or a combination of networks, or other technology enabling communication between computing systems.","System  () and\/or computer system  () may include fewer components or additional components. Moreover, two or more components may be combined into a single component, and\/or a position of one or more components may be changed. In some embodiments, the functionality of system  () and\/or computer system  may be implemented more in hardware and less in software, or less in hardware and more in software, as is known in the art.","The foregoing description is intended to enable any person skilled in the art to make and use the disclosure, and is provided in the context of a particular application and its requirements. Moreover, the foregoing descriptions of embodiments of the present disclosure have been presented for purposes of illustration and description only. They are not intended to be exhaustive or to limit the present disclosure to the forms disclosed. Accordingly, many modifications and variations will be apparent to practitioners skilled in the art, and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present disclosure. Additionally, the discussion of the preceding embodiments is not intended to limit the present disclosure. Thus, the present disclosure is not intended to be limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3","FIG. 1"]}]},"DETDESC":[{},{}]}
