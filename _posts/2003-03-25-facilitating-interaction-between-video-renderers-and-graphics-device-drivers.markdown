---
title: Facilitating interaction between video renderers and graphics device drivers
abstract: Facilitating interaction may be enabled through communication protocols and/or APIs that permit information regarding image processing capabilities of associated graphics hardware to be exchanged between graphics device drivers and video renders. In a first exemplary media implementation, electronically-executable instructions thereof for a video renderer precipitate actions including: issuing a query from a video render towards a graphics device driver, the query requesting information relating to process amplifier (ProcAmp) capabilities; and receiving a response at the video renderer from the graphics device driver, the response including the requested information relating to ProcAmp capabilities. In a second exemplary media implementation, a graphics device driver precipitates actions including: receiving a query at the graphics device driver from a video renderer, the query requesting information relating to ProcAmp capabilities; and sending a response to the video renderer from the graphics device driver, the response including the requested information that relates to ProcAmp capabilities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07451457&OS=07451457&RS=07451457
owner: Microsoft Corporation
number: 07451457
owner_city: Redmond
owner_country: US
publication_date: 20030325
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED PATENT APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","ProcAmpControlQueryCaps","ProcAmpControlQueryRange","The ProcAmpStream Object","ProcAmpOpenStream","ProcAmpBlt","ProcAmpCloseStream","De-interlace Container Device","Calling the DDI from a User-Mode Component","ProcAmpControlQueryCaps","ProcAmpControlQueryRange","ProcAmpControlOpenStream","ProcAmpControlBlt","ProcAmpControlCloseStream"],"p":["This U.S. Non-provisional Application for Letters Patent claims the benefit of priority from (i) co-pending U.S. Provisional Application for Letters Patent Ser. No. 60\/372,880 (filed Apr. 15, 2002) and (ii) co-pending U.S. Provisional Application for Letters Patent Ser. No. 60\/413,060 (filed Sep. 24, 2002).","Specifically, this U.S. Non-provisional Application for Letters Patent claims the benefit of priority from, and hereby incorporates by reference herein the entire disclosure of, co-pending U.S. Provisional Application for Letters Patent Ser. No. 60\/413,060, filed Sep. 24, 2002, and titled \u201cMethods for Hardware Accelerating the \u2018ProcAmp\u2019 Adjustments of Video Images on a Computer Display\u201d.","Specifically, this U.S. Non-provisional Application for Letters Patent also claims the benefit of priority from, and hereby incorporates by reference herein the entire disclosure of, co-pending U.S. Provisional Application for Letters Patent Ser. No. 60\/372,880, filed Apr. 15, 2002, and titled \u201cMethods and Apparatuses for Facilitating De-Interlacing of Video Images\u201d.","This U.S. Non-provisional Application for Letters Patent is related by subject-matter to U.S. Pat. No. 7,219,352, issued on May 15, 2007, and titled \u201cMethods And Apparatuses For Facilitating Processing Of Interlaced Video Images For Progressive Video Displays\u201d. This U.S. Pat. No. 7,219,352 is also hereby incorporated by reference herein in its entirety.","This disclosure relates in general to processing image\/graphics data for display and in particular, by way of example but not limitation, to facilitating interaction between video renderers and graphics device drivers using a protocol for communicating information therebetween, as well as consequential functionality. Such information may include queries, responses, instructions, etc. that are directed to, for example, ProcAmp adjustment operations.","In a typical computing environment, a graphics card or similar is responsible for transferring images onto a display device and for handling at least part of the processing of the images. For video images, a graphics overlay device and technique is often employed by the graphics card and the overall computing device. For example, to display video images from a DVD or Internet streaming source, a graphics overlay procedure is initiated to place and maintain the video images.","A graphics overlay procedure selects a rectangle and a key color for establishing the screen location at which the video image is to be displayed. The rectangle can be defined with a starting coordinate for a corner of the rectangle along with the desired height and width. The key color is usually a rarely seen color such as bright pink and is used to ensure that video is overlain within the defined rectangle only if the video is logically positioned at a topmost layer of a desktop on the display screen.","In operation, as the graphics card is providing pixel colors to a display device, it checks to determine if a given pixel location is within the selected graphics overlay rectangle. If not, the default image data is forwarded to the display device. If, on the other hand, the given pixel location is within the selected graphics overlay rectangle, the graphics card checks to determine whether the default image data at that pixel is equal to the selected key color. If not, the default image data is forwarded to the display device for the given pixel. If, on the other hand, the color of the given pixel is the selected key color, the graphics card forwards the video image data to the display device for that given pixel.","There are, unfortunately, several drawbacks to this graphics overlay technique. First, there is usually only sufficient hardware resources for a single graphics overlay procedure to be in effect at any one time. Regardless, reliance on the graphics overlay technique always results in constraints on the number of possible simultaneous video displays as limited by the hardware. Second, the pink or other key color sometimes becomes visible (i.e., is displayed on an associated display device) when the window containing the displayed video is moved vigorously around the desktop on the display screen.","Third, a print screen command does not function effectively inasmuch as the video image that is displayed on the display device is not captured by the print screen command. Instead, the key color is captured by the print screen command, so the printed (or copied and pasted) image includes a solid rectangle of the key color where the video is displayed on the display device.","Another technique for displaying video images entails using the host microprocessor to perform video adjustments prior to transferring the video image to the graphics processor for forwarding to the display device. There are also several drawbacks to this host processor technique. First, the host microprocessor and associated memory subsystem of a typical computing environment is not optimized for the processing of large video images. Consequently, the size and number of video images that can be displayed are severely restricted. Second, for the host microprocessor to work efficiently, the video image must reside in memory that is directly addressable by the host microprocessor. As a result, other types of hardware acceleration, such as decompression and\/or de-interlacing, cannot be performed on the video image.","In short, previous techniques such as the graphics overlay procedure and reliance on the host processor result in visual artifacts, are too slow and\/or use memory resources inefficiently, are hardware limited, constrain video presentation flexibility, and\/or do not enable a fully-functional print screen command. Accordingly, there is a need for schemes and\/or approaches for remedying these and other deficiencies by, inter alia, facilitating interaction between video renderers and graphics device drivers.","Facilitating interaction between video renderers and graphics device drivers may be enabled through communication protocols and\/or application programming interfaces (APIs) that permit information regarding image processing capabilities of associated graphics hardware to be exchanged between a graphics device driver and a video render. Image processing capabilities include video processing capabilities; video processing capabilities include by way of example, but not limitation, process amplifier (ProcAmp) control adjustments, de-interlacing, aspect ratio corrections, color space conversions, frame rate conversions, vertical or horizontal mirroring, and alpha blending.","In an exemplary method implementation, a method facilitates interaction between one or more video renderers and at least one graphics device driver, the method including actions of: querying, by a video render of the one or more video renderers, the at least one graphics device driver regarding video processing capabilities; and informing, by the at least one graphics device driver, the video render of at least a subset of video processing capabilities that the at least one graphics device driver can offer to the video renderer.","In a first exemplary media implementation, electronically-executable instructions thereof for a video renderer precipitate actions including: issuing a query from a video render towards a graphics device driver, the query requesting information relating to ProcAmp capabilities; and receiving a response at the video renderer from the graphics device driver, the response including the requested information relating to ProcAmp capabilities.","In a second exemplary media implementation, electronically-executable instructions thereof for a graphics device driver precipitate actions including: receiving a query at a graphics device driver from a video renderer, the query requesting information relating to ProcAmp capabilities; and sending a response to the video renderer from the graphics device driver, the response including the requested information that relates to ProcAmp capabilities.","In an exemplary system implementation, a system facilitates interaction between a video renderer and a graphics device driver, the system including: video rendering logic that is adapted to prepare queries that request information relating to ProcAmp capabilities that can be applied to video that is to be displayed; and graphics device driving logic that is adapted to prepare responses that indicate what ProcAmp capabilities can be applied to video that is to be displayed.","Other method, system, apparatus, protocol, media, arrangement, etc. implementations are described herein.","Exemplary Video Processing Pipelines and ProcAmp Adjustments","Exemplary Video Processing Pipeline with a ProcAmp Adjustment",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","104","100","102","106","108","104","102","104","104","102","106","106"]},"After one or more additional image processing operations (not explicitly shown in ), the graphics hardware produces image memory block , which includes an RGB render target. The RGB render target of image memory block  may be displayed on a display device by the graphics hardware without additional image processing operations. Also, image memory block  includes image data for each pixel of a screen of a display device such that no image data need be retrieved from other memory during the forwarding of the image data from image memory block  to the display device.","ProcAmp adjustment operation  refers to one or more process amplifier (ProcAmp) adjustments. The concept of ProcAmp adjustments originated when video was stored, manipulated, and displayed using analog techniques. However, ProcAmp adjustment operations  may now be performed using digital techniques. Such ProcAmp adjustment operations  may include one or more operations that are directed to one or more of at least the following video properties: brightness, contrast, saturation, and hue.","Exemplary ProcAmp-Related Video Properties","The following descriptions of brightness, contrast, saturation, and hue, in conjunction with possible and\/or suggested settings for manipulating their values, are for an exemplary described implementation. Other ProcAmp adjustment guidelines may alternatively be employed.","Brightness: Brightness is alternatively known as \u201cBlack Set\u201d; brightness should not be confused with gain (contrast). It is used to set the \u2018viewing black\u2019 level in each particular viewing scenario. Functionally, it adds or subtracts the same number of quantizing steps (bits) from all the luminance words in a picture. It can and generally does create clipping situations if the offset plus some luminance word is less than 0 or greater than full range. It is usually interactive with the contrast control.","Contrast: Contrast is the \u2018Gain\u2019 of the picture luminance. It is used to alter the relative light to dark values in a picture. Functionally, it is a linear positive or negative gain that maps the incoming range of values into a smaller or a larger range. The set point (e.g., no change as gain changes) is normally equal to a code 0, but it is more appropriately the code word that is associated with a nominal viewing black set point. The contrast gain structure is usually a linear transfer ramp that passes through this set point. Contrast functions usually involve rounding of the computed values if the gain is set is anything other than 1-to-1, and that rounding usually includes programmatic dithering to avoid visible artifact generation \u2018contouring\u2019.","Saturation: Saturation is the logical equivalent of contrast. It is a gain function, with a set point around \u201czero chroma\u201d (e.g., code 128 on YUV or code 0 on RGB in a described implementation).","Hue: Hue is a phase relationship of the chrominance components. Hue is typically specified in degrees, with a valid range from \u2212180 through +180 and a default of 0 degrees. Hue in component systems (e.g., YUV or RGB) is a three part variable in which the three components change together in order to maintain valid chrominance\/luminance relationships.","Exemplary ProcAmp-Related Adjusting in the YUV Color Space","The following descriptions for processing brightness, contrast, saturation, and hue in the YUV color space, in conjunction with possible and\/or suggested settings for manipulating their values, are for an exemplary described implementation. Other adjustment guidelines may alternatively be employed. Generally, working in the YUV color space simplifies the calculations that are involved for ProcAmp adjustment control of a video stream.","Y Processing: Sixteen (16) is subtracted from the Y values to position the black level at zero. This removes the DC offset so that adjusting the contrast does not vary the black level. Because Y values may be less than 16, negative Y values should be supported at this point in the processing. Contrast is adjusted by multiplying the YUV pixel values by a constant. (If U and V are adjusted, a color shift will result whenever the contrast is changed.) The brightness property value is added (or subtracted) from the contrast-adjusted Y values; this prevents a DC offset from being introduced due to contrast adjustment. Finally, the value 16 is added back to reposition the black level at 16. An exemplary equation for the processing of Y values is thus:\n\n\u2032=((16)\u00d7)+16,\n\n","UV Processing: One hundred twenty-eight (128) is first subtracted from both U and V values to position the range around zero. The hue property alone is implemented by mixing the U and V values together as follows:\n\n\u2032=(128)\u00d7Cos()+(128)\u00d7Sin(), and\n\n\u2032=(128)\u00d7Cos()\u2212(128)\u00d7Sin(),\n\n","Exemplary Video Processing Pipeline with Two Processing Operations",{"@attributes":{"id":"p-0044","num":"0046"},"figref":"FIG. 2","b":["200","202","206","108","200","102","204","108","202","206"]},"For second video processing pipeline  generally, image memory block  includes an RGB texture. Image memory block  results from image memory block  after application of image processing operation . Image memory block  is produced from image memory block  after image processing operation .","Other image processing operations, in addition to a ProcAmp control adjustment, may be performed. For example, any one or more of the following exemplary video processing operations may be applied to video image data prior to its display on a screen of a display device:\n\n","When possible, the desired video (and\/or other image) processing operations are combined into as few operations as possible so as to reduce the overall memory bandwidth that is consumed while processing the video images. The degree to which the processing operations can be combined is generally determined by the capabilities of the graphics hardware. Typically, color space conversion processing and aspect ratio correction processing are applied to many, if not most, video streams. However, vertical\/horizontal mirroring and alpha blending are applied less frequently.","For second video processing pipeline , ProcAmp adjustment processing and color space conversion processing are combined into image processing operation . Aspect ratio correction processing is performed with image processing operation . Optionally, vertical\/horizontal mirroring and\/or alpha blending may be combined into image processing operation . As illustrated, the graphics hardware that is implementing second video processing pipeline  uses two image processing operations and three image memory blocks to produce image memory block  as the RGB render target. However, some graphics hardware may be more efficient.","Exemplary Video Processing Pipeline with One Processing Operation",{"@attributes":{"id":"p-0050","num":"0057"},"figref":"FIG. 3","b":["300","302","108","300","302","102","108","108","102","302","302"]},"Third video processing pipeline  is shorter than second video processing pipeline  (of ) because image processing operation  combines ProcAmp adjustment processing, color space conversion processing, and aspect ratio correction processing. The number of stages in a given video processing pipeline is therefore dependent on the number and types of image processing operations that are requested by software (e.g., an application, an operating system component, etc.) displaying the video image as well as the capabilities of the associated graphics hardware. Exemplary software, graphics hardware, and so forth are described further below with reference to .","Exemplary Video-Related Software and Graphics Hardware",{"@attributes":{"id":"p-0053","num":"0060"},"figref":"FIG. 4","b":["400","410","422"]},"The configuration of block diagram  is only an example of a video data processing apparatus or system. It should be understood that one or more of the illustrated and described elements and\/or functions may be combined, rearranged, augmented, omitted, etc. without vitiating an ability to facilitate interaction between video renderers and graphics device drivers.","Apparatus or system  includes transform logic , which, for example, may include instructions performed by a central processing unit (CPU), a graphics processing unit, and\/or a combination thereof. Transform logic  is configured to receive coded video data from at least one source . The coded video data from a source  is coded in some manner (e.g., MPEG-2, etc.), and transform logic  is configured to decode the coded video data.","By way of example, source  may include a magnetic disk and related disk drive, an optical disc and related disc drive, a magnetic tape and related tape drive, solid-state memory, a transmitted signal, a transmission medium, or other like source configured to deliver or otherwise provide the coded video data to transform logic . Additional examples of source  are described below with reference to . In certain implementations, source  may include multiple source components such as a network source and remote source. As illustrated, source  includes Internet  and a remote disk-based storage .","The decoded video data that is output by transform logic  is provided to at least one video renderer . By way of example but not limitation, video renderer  may be realized using the Video Mixer and Renderer (VMR) of a Microsoft\u00ae Windows\u00ae Operating System (OS). In a described implementation, video renderer  is configured to aid transform logic  in decoding the video stream, to cause video processing operations to be performed, to blend any other auxiliary image data such as closed captions (CCs) or DVD sub-picture images with the video image, and so forth. And, at the appropriate time, video renderer  submits or causes submission of the video image data to graphics interface logic  for eventual display on a display device .","The resulting rendered video data is thus provided to graphic interface logic . By way of example but not limitation, graphic interface logic  may include, for example, DirectDraw\u00ae, Direct3D\u00ae, and\/or other like logic. Graphic interface logic  is configured to provide an interface between video renderer  and a graphics device . As illustrated, graphics device  includes a graphics processor unit (GPU) , a video memory , and a digital-to-analog converter (DAC) . By way of example but not limitation, graphics device  may be realized as a video graphics card that is configured within a computing or other electronic device.","The image data output by graphic interface logic  is provided to a graphics device driver  using a device driver interface (DDI) . In , device driver interface  is depicted as having at least one application programming interface (API)  associated therewith. Device driver interface  is configured to support and\/or establish the interface between video renderer  and graphics device driver .","As illustrated at apparatus\/system  and for a described implementation, device driver interface  and graphics device driver  may further be categorized as being part of either a user mode  or a kernel mode  with respect to the associated operating system environment and graphics device . Hence, video renderer  and device driver interface  are part of user mode , and graphics device driver  is part of kernel mode . Those communications occurring at least between device driver interface  and graphics device driver  cross between user mode  and kernel mode .","In this described implementation, the video image data that is output by video renderer  is thus provided to graphics processor unit . Graphics processor unit  is configurable to perform one or more image processing operations. These image processing operations include ProcAmp adjustments and\/or other video processing operations as indicated by ProcAmp adjustment logic  and\/or other video processing operations logic , respectively. ProcAmp adjustment operations and other exemplary video processing operations, such as de-interlacing and frame rate conversion, are described further below as well as above.","The output from graphics processor unit  is provided to video memory . When video memory  is read from, the resulting image data can be forwarded to a digital-to-analog converter , which outputs a corresponding analog video signal that is suitable for display on and by display device . In other configurations, display device  may be capable of displaying the digital image data from video memory  without analog conversion by a digital-to-analog converter .","Exemplary Protocol between a Video Renderer and a Graphics Device Driver",{"@attributes":{"id":"p-0064","num":"0071"},"figref":"FIG. 5","b":["500","410","422"]},"Communications\/signaling diagram  includes multiple communication exchanges and communication transmissions between video renderer  and graphics device driver . Optionally, the communications may be enabled and\/or aided by graphic interface  (of ) and\/or device driver interface , along with any applicable APIs  thereof.","A communications exchange  is directed to establishing video processing (VP) capabilities. Specifically, video renderer  requests or queries at transmission A graphics device driver  regarding video processing capabilities that are possessed by and that are to be provided by graphics device driver . In response B, graphics device driver  informs video renderer  of the allotted video processing capabilities.","The allotted video processing capabilities include those video processing operations that graphics device driver  is capable of performing. These may include one or more of ProcAmp control adjustment operations, de-interlacing operations, aspect ratio correction operations, color space conversion operations, vertical\/horizontal mirroring and alpha blending, frame rate conversion operations, and so forth. Graphics device driver  may choose to provide all or a portion of the remaining video processing operational bandwidth. By allotting less than all of the remaining video processing operations bandwidth, graphics device driver  is able to hold in reserve additional video processing operations bandwidth for subsequent requests.","A communications exchange  is directed to establishing control property capabilities for a specified video processing operation. In a request A that is sent from video renderer  to graphics device driver , video renderer  specifies a particular video processing operation allotted in response B. Request A may also include an inquiry as to what or which property capabilities graphics device driver  is able to perform with respect to the particular video processing operation. In a response B, graphics device driver  informs video renderer  as to the property capabilities that are available for the specified particular video processing operation. Communications exchange  may be omitted if, for example, there are not multiple control property capabilities for the particular video processing operation.","A communications exchange  is directed to establishing which of the other allotted video processing operations may be performed simultaneously with the particular video processing operation as specified. In a request A, video renderer  issues a query to graphics device driver  to determine which video processing operations, if any, may be performed simultaneously with the particular video processing operation. Graphics device driver  informs video renderer  in response B of the video processing operations that is possible for graphics device driver  to perform simultaneously with the particular video processing operation. By way of example, it should be noted that (i) transmissions A and A and\/or (ii) transmissions B and B may be combined into single query and response transmissions, respectively.","A communications exchange  is directed to establishing values for a specified control property of the particular video processing operation. In a request A, video renderer  specifies in an inquiry a control property for the particular video processing operation. The specified control property may be selected from the available control properties provided in response B. Graphics device driver  provides values that are related to the specified control property for the particular video processing operation to video renderer . These values may be numerical set points, ranges, etc. that video renderer  can utilize as a framework when instructing graphics device driver  to perform the particular video processing operation. Communications exchange  may be repeated for each available control property that is indicated in response B. Alternatively, one such communication exchange  may be directed to multiple (including all of the) control properties of the available control properties.","A communications exchange  is directed to initiating a video processing stream object. In an instruction A, video renderer  sends a command to graphics device driver  to open a video processing stream object. This command may be transmitted on behalf of an application or other software component that is trying to present video images on display device . In a response B, graphics device driver  returns a handle for the video processing stream object to the requesting video renderer .","In a transmission A, video renderer  instructs graphics device driver  to perform the particular or another allotted video processing operation. The perform video processing operation command may include selected numerals to set and\/or change values for one or more control properties for the particular video processing operation. In response, graphics device driver  performs a video processing operation B as requested in transmission A. Typically, at least one video renderer  is assigned to each application that is to be displaying video. Whenever such an instigating application requests a video processing operation, for example, video renderer  forwards such request as a video processing operation instruction, optionally after re-formatting, translation, and so forth, to graphics device driver .","Perform video processing operation commands A and resulting video processing operations B may be repeated as desired while the video processing stream object is extant. When the video is completed or the relevant software is terminated, a close video processing stream object instruction  is transmitted from video renderer  to graphics device driver .","The approaches of , , and , for example, are illustrated in diagrams that are divided into multiple blocks and\/or multiple transmissions. However, the order and\/or layout in which the approaches are described and\/or shown is not intended to be construed as a limitation, and any number of the blocks\/transmissions can be combined and\/or re-arranged in any order to implement one or more systems, methods, media, protocols, arrangements, etc. for facilitating interaction between video renderers and graphics device drivers. Furthermore, although the description herein includes references to specific implementations such as that of  (as well as the exemplary system environment of ) and to exemplary APIs, the approaches can be implemented in any suitable hardware, software, firmware, or combination thereof and using any suitable programming language(s), coding mechanism(s), protocol paradigm(s), graphics setup(s), and so forth.","Exemplary General API Implementation",{"@attributes":{"id":"p-0076","num":"0083"},"figref":["FIG. 6","FIG. 6"],"b":["600","410","422"]},"In flow diagram , video renderer  is associated with nine (9) blocks -, and graphics device driver  is associated with six (6) blocks -. Each of blocks - and - corresponds to at least one action that is performed by or on behalf of video renderer  and graphics device driver , respectively.","Flow diagram  is described below in the context of exemplary general APIs. These general APIs as described herein can be divided into two functional groups of methods, apparatus logic, etc. The first group can be used to determine the video processing capabilities of a graphics device. The second group can be used to create and use video processing operation stream objects.","These exemplary general APIs may correspond to APIs  (of ) that are illustrated as being part of device driver interface , which supports graphic interface  and interfaces with graphics device driver . APIs  are thus illustrated as being part of device driver interface  that is in user mode portion . However, such APIs  may alternatively be located at and\/or functioning with other logic besides device driver interface . Such other logic includes, by way of example only, video renderer , graphic interface , some part of kernel mode portion , and so forth.","The general APIs described below in this section may be used to extend\/enhance\/etc. Microsoft\u00ae DirectX\u00ae Video Acceleration (VA), for example, so as to support any of a number of video processing operations (e.g., ProcAmp adjustments, frame rate conversions, etc.) for video content being displayed in conjunction with a graphics device driver. Additional related information can be found in a Microsoft\u00ae Windows\u00ae Platform Design Note entitled \u201cDirectX\u00ae VA: Video Acceleration API\/DDI\u201d, dated Jan. 23, 2001. \u201cDirectX\u00ae VA: Video Acceleration API\/DDI\u201d is hereby incorporated by reference in its entirety herein.","Although the actions of flow diagram  are described herein in terms of APIs that are particularly applicable to the current evolution of Microsoft\u00ae Windows\u00ae operating systems for personal computers, it should be understood that the blocks thereof, as well as the other implementations described herein, are also applicable to other operating systems and\/or other electronic devices.","In the following examples, the output of the video processing operation(s) is provided in an RGB render target format such as a target DirectDraw\u00ae surface. Doing so precludes the need for conventional hardware overlay techniques. Additionally, an entire screen as viewable on a display device, including any video images, exists and, furthermore, is present in one memory location so that it can be captured by a print screen command. This print screen capture can then be pasted into a document, added to a file, printed directly, and so forth.","In flow diagram , video renderer  may have already been informed by graphics device driver  that associated graphics hardware is capable of performing ProcAmp adjustment video processing operations or video renderer  may determine the existence of ProcAmp capabilities, or the lack thereof, as follows. At block , video renderer  provides a description of the video to be displayed and requests graphics processing capabilities with respect to ProcAmp control properties.","Video renderer  makes the video description provision and\/or the control properties request to graphics device driver  via one or more transmissions as indicated by the transmission arrow between block  and block . The description of the video enables graphics device driver  to tailor the available\/possible\/etc. video processing capabilities based on the type of video. For example, a predetermined set of capabilities may be set up for each of several different types of video.","At block , graphics device driver  provides video renderer  a listing of the available ProcAmp control properties. This list may include none or one or more of brightness, contrast, hue, and saturation. At block , video renderer  receives the available ProcAmp control properties from graphics device driver . Actions of blocks  and  may be performed responsive to the communication(s) of block . Alternatively, video renderer  may make a separate inquiry to elicit the actions of block .","At block , graphics device driver  provides video renderer  with those video processing operations that may possibly be performed simultaneously\/concurrently with ProcAmp adjustment operations. Such video processing operations may include none or one or more of YUV2RGB, StretchX, StretchY, SubRects, and AlphaBlend. Other such video processing operations may include de-interlacing, frame rate conversion, and so forth. At block , video renderer  receives the possible simultaneous video processing operations from graphics device driver .","An exemplary general API for implementing at least part of the actions of blocks , , , , and  is provided as follows:","This API enables video renderer  to query graphics device driver  to determine the information related to the input requirements of a ProcAmp control device and any additional video processing operations that might be supported at the same time as ProcAmp adjustment operations are being performed.",{"@attributes":{"id":"p-0089","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"ProcAmpControlQueryCaps("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] DXVA_VideoDesc* lpVideoDescription,"]},{"entry":[{},"[out] DXVA_ProcAmpControlCaps* lpProcAmpCaps"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Graphics device driver  reports its capabilities for that mode in an output DXVA_ProcAmpControlCaps structure for lpProcAmpCaps.",{"@attributes":{"id":"p-0091","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct_DXVA_ProcAmpControlCaps {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD Size;"]},{"entry":[{},"DWORD InputPool;"]},{"entry":[{},"D3DFORMAT OutputFrameFormat;"]},{"entry":[{},"DWORD ProcAmpControlProps;"]},{"entry":[{},"DWORD VideoProcessingCaps;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} DXVA_ProcAmpControlCaps;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The Size field indicates the size of the data structure and may be used, inter alia, as a version indicator if different versions have different data structure sizes.","The InputPool field indicates a memory pool from which the video source surfaces are to be allocated. For example, the memory pool may be located at local video memory on the graphics card, at specially-tagged system memory (e.g., accelerated graphics port (AGP) memory), general system memory, and so forth. The D3D and DirectDraw documentations also provide a description of valid memory pool locations.","The OutputFrameFormat field indicates a Direct3D surface format of the output frames. The ProcAmp device can output frames in a surface format that matches the input surface format. This field ensures that video renderer  will be able to supply the correct format for the output frame surfaces to the ProcAmp control hardware. Note that if the DXVA_VideoProcess_YUV2RGB flag (see below) is returned in the VideoProcessingCaps field, video renderer  can assume that valid output formats are specified by this field as well as an RGB format such as RGB32. RGB32 is an RGB format with 8 bits of precision for each of the Red, Green, and Blue channels and 8 bits of unused data.","The ProcAmpControlProp field identifies the ProcAmp operations that the hardware is able to perform. Graphics device driver  returns the logical of the combination of the ProcAmp operations that it supports:\n\n","The VideoProcessingCaps field identifies other operations that can be performed concurrently with a requested ProcAmp adjustment. The following flags identify the possible operations:\n\n","At block  of flow diagram , video renderer  selects a ProcAmp control property from those received at block . At block , video renderer  requests one or more values for the selected ProcAmp control property from graphics device driver . At block , graphics device driver  sends to video renderer  values for the requested ProcAmp control property. Such values may relate to one or more of a default value, an increment value, a minimum value, a maximum value, and so forth.","At block , video renderer  receives from graphics device driver , and is thus informed of, one or more values for the selected ProcAmp control property. As indicated by the flow arrow from block  to block , the actions of blocks , , , and  may be repeated for more than one including all of the available ProcAmp control properties. Alternatively, video renderer  may query graphics device driver  for more than one including all of the available ProcAmp control properties in a single communication exchange having two or more transmissions.","An exemplary general API for implementing at least part of the actions of blocks , , , and  is provided as follows:","For each ProcAmp property (brightness, contrast, saturation, hue, etc.), video renderer  queries graphics device driver  to determine the minimum, maximum, step size (increment), default value, and so forth. If the hardware does not support a particular ProcAmp control property, graphics device driver  may return \u201cE_NOTIMPL\u201d in response to the ProcAmpControlQueryRange function.","Although graphics device driver  can return any values it wishes for the different ProcAmp control properties, the following settings values are provided by way of example (all tabulated values are floats):",{"@attributes":{"id":"p-0102","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]},{"entry":[{},"Property","Minimum","Maximum","Default","Increment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Brightness","\u2212100.0 F","100.0 F","0.0 F","\u20020.1 F"]},{"entry":[{},"Contrast","\u2003\u2009\u20090.0 F","\u200210.0 F","1.0 F","0.01 F"]},{"entry":[{},"Saturation","\u2003\u2009\u20090.0 F","\u200210.0 F","1.0 F","0.01 F"]},{"entry":[{},"Hue","\u2212180.0 F","180.0 F","0.0 F","\u20020.1 F"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]}}}}},"If the default values result in a null transform of the video stream, video renderer  is allowed to bypass the ProcAmp adjustment stage in its video pipeline if the instigating application does not alter any of the ProcAmp control properties.",{"@attributes":{"id":"p-0104","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"ProcAmpControlQueryRange("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] DWORD VideoProperty,"]},{"entry":[{},"[in] DXVA_VideoDesc* lpVideoDescription,"]},{"entry":[{},"[out] DXVA_VideoPropertyRange* lpPropRange"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"VideoProperty identifies the ProcAmp control property (or properties) that graphics device driver  has been requested to return information for. In a described implementation, possible parameter values for this field are:\n\n","lpVideoDescription provides graphics device driver  with a description of the video that the ProcAmp adjustment is going to be applied to. Graphics device driver  may adjust its ProcAmp feature support for particular video stream description types.","lpPropRange identifies the range (min and max), step size, and default value, for the ProcAmp control property that is specified by the VideoProperty parameter\/field.",{"@attributes":{"id":"p-0108","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct_DXVA_VideoPropertyRange {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FLOAT MinValue;"]},{"entry":[{},"FLOAT MaxValue;"]},{"entry":[{},"FLOAT DefaultValue;"]},{"entry":[{},"FLOAT StepSize;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} DXVA_VideoPropertyRange, *LPDXVA_VideoPropertyRange;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"At block  of flow diagram , video renderer  sends an open ProcAmp stream object command to graphics device driver . In response, graphics device driver  opens a ProcAmp stream object at block . At block , video renderer  instructs graphics device driver  to perform a ProcAmp adjustment operation. In response, graphics device driver  performs the requested ProcAmp adjustment operation at block .","As indicated by the curved flow arrow at block , video renderer  may continue to send perform ProcAmp adjustment operation instructions to graphics device driver  as long as desired (e.g., whenever required by an instigating application displaying the video stream). At block , video renderer  instructs graphics device driver  to close the ProcAmp stream object. Graphics device driver  then closes the ProcAmp stream object at block .","An exemplary general API for implementing at least part of the actions of blocks , , , , , and  is provided as follows:","After video renderer  has determined the capabilities of the ProcAmp control hardware, a ProcAmpStream object can be created. Creation of a ProcAmpStream object allows graphics device driver  to reserve any hardware resources that are required to perform requested ProcAmp adjustment operation(s).","The ProcAmpOpenStream method creates a ProcAmpStream object.",{"@attributes":{"id":"p-0114","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"ProcAmpOpenStream("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] LPDXVA_VideoDesc lpVideoDescription,"]},{"entry":[{},"[out] HDXVA_ProcAmpStream* lphCcStrm"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The HDXVA_ProcAmpStream output parameter is a handle to the ProcAmpStream object and is used to identify this stream in future calls that are directed thereto.","The ProcAmpBlt method performs the ProcAmp adjustment operation by writing the output to the destination surface during a bit block transfer operation.",{"@attributes":{"id":"p-0117","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"ProcAmpBlt("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] HDXVA_ProcAmpStream hCcStrm"]},{"entry":[{},"[in] LPDDSURFACE lpDDSDstSurface,"]},{"entry":[{},"[in] LPDDSURFACE lpDDSSrcSurface,"]},{"entry":[{},"[in] DXVA_ProcAmpBlt* ccBlt"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The source and destination rectangles are used for either sub-rectangle ProcAmp adjustment or stretching. Support for stretching is optional (and is reported by Caps flags). Likewise, support for sub-rectangles is not mandatory.","The destination surface can be an off-screen plain, a D3D render target, a D3D texture, a D3D texture that is also a render target, and so forth. The destination surface may be allocated in local video memory, for example. The pixel format of the destination surface is the one indicated in the DXVA_ProcAmpCaps structure unless a YUV-to-RGB color space conversion is being performed along with the ProcAmp adjustment operation. In these cases, the destination surface format is an RGB format with 8 bits or more of precision for each color component.","The ProcAmpCloseStream method closes the ProcAmpStream object and instructs graphics device driver  to release any hardware resource associated with the identified stream.",{"@attributes":{"id":"p-0121","num":"0144"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"ProcAmpCloseStream("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HDXVA_ProcAmpStream hCcStrm"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Exemplary Specific API Implementation","The particular situation and exemplary APIs described below in this section are specifically applicable to a subset of existing Microsoft\u00ae Windows\u00ae operating systems for personal computers. However, it should nevertheless be understood that the principles, as well as certain aspects of the pseudo code, that are presented below may be utilized (as is or with routine modifications) in conjunction with other operating systems and\/or other environments.","DDI Mapping for a ProcAmp Interface","For compatibility with the DDI infrastructure for a subset of existing Microsoft\u00ae Windows\u00ae operating systems, the API described above in the previous section can be \u201cmapped\u201d to the existing DDI for DirectDraw and DirectX VA. This section describes a ProcAmp interface mapping to the existing DirectDraw and DX-VA DDI.","The DX-VA DDI is itself split into two functional groups: the \u201cDX-VA container\u201d and the \u201cDX-VA device.\u201d The purpose of the DX-VA container DDI group is to determine the number and capabilities of the various DX-VA devices contained by the display hardware. Therefore, a DX-VA driver can only have a single container, but it can support multiple DX-VA devices.","It is not feasible to map the ProcAmpQueryCaps call on to any of the DDI entry points in the DX-VA container group because, unlike the rest of DX-VA, the container methods use typed parameters. However, the DX-VA device DDI group does not use typed parameters, so it is feasible to map the ProcAmp control interface to the methods in the device group. This section describes a specific example of how the ProcAmp interface can be mapped to the DX-VA device DDI.","The DX-VA device methods do not use typed parameters, so these methods can be reused for many different purposes. However, the DX-VA device methods can only be used in the context of a DX-VA device, so a first task is to define and create a special \u201ccontainer device.\u201d","U.S. Pat. No. 7,219,352, issued on May 15, 2007, which is titled \u201cMethods And Apparatuses For Facilitating Processing Of Interlaced Video Images For Progressive Video Displays\u201d and which is incorporated by reference herein above, includes description of a de-interlace container device. That Patent's described de-interlace container device is re-used here for the ProcAmpQueryCaps function.","The DX-VA de-interlace container device is a software construct only, so it does not represent any functional hardware contained on a physical device. The ProcAmp control sample (device) driver pseudo code presented below indicates how the container device can be implemented by a driver.","An exemplary sequence of eight (8) tasks to use the DDI from a user-mode component such as a (video) renderer is as follows:","1. Call GetMoCompGuids to get the list of DX-VA devices supported by the driver.","2. If the \u201cde-interlace container device\u201d GUID is present, call CreateMoComp to create an instance of this DX-VA device. The container device GUID is defined as follows:","DEFINE_GUID(DXVA_DeinterlaceContainerDevice, 0x0e85cb93,0x3046,0x4ff0,0xae,0xcc,0xd5,0x8c,0xb5,0xf0, 0x35,0xfc);","3. Call RenderMocomp with a dwFunction parameter that identifies a ProcAmpControlQueryModeCaps operation. Again, the lpInputData parameter is used to pass the input parameters to the driver, which returns its output through the lpOutputData parameter.","4. For each ProcAmp adjustment property supported by the hardware the renderer calls RenderMocomp with a dwFunction parameter that identifies a ProcAmpControlQueryRange operation. The lpInputData parameter is used to pass the input parameters to the driver, which returns its output through the lpOutputData parameter.","5. After the renderer has determined the ProcAmp adjustment capabilities of the hardware, it calls CreateMocomp to create an instance of the ProcAmp control device. The ProcAmp control device GUID is defined as follows:","DEFINE_GUID(DXVA_ProcAmpControlDevice, 0x9f2009 13,0x2ffd, 0x4056,0x9f,0x1e,0xe1,0xb5,0x08,0xf2,0x2d,0xcf);","6. The renderer then calls the ProcAmp control device's RenderMocomp with a function parameter of DXVA_ProcAmpControlBltFnCode for each ProcAmp adjusting operation.","7. When the renderer no longer needs to perform any more ProcAmp operations, it calls DestroyMocomp.","8. The driver releases any resources used by the ProcAmp control device.","This method maps directly to a call to the RenderMoComp method of the de-interlace container device. The DD_RENDERMOCOMPDATA structure is completed as follows:\n\n","DXVA_ProcAmpControlQueryCapsFnCode.\n\n","Note that the DX-VA container device's RenderMoComp method can be called without BeginMoCompFrame or EndMoCompFrame being called first.","This method maps directly to a call to the RenderMoComp method of the de-interlace container device. The DD_RENDERMOCOMPDATA structure is completed as follows:\n\n","DXVA_ProcAmpControlQueryRangeFnCode.\n\n","DXVA_ProcAmpControlQueryRange structure.",{"@attributes":{"id":"p-0148","num":"0180"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct_DXVA_ProcAmpQueryRange {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","Size;"]},{"entry":[{},"DWORD","VideoProperty;"]},{"entry":[{},"DXVA_VideoDesc","VideoDesc;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} DXVA_ProcAmpControlQueryRange,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"*LPDXVA_ProcAmpControlQueryRange;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":{"@attributes":{"id":"ul0021-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":"lpOutputData will point to a DXVA_VideoPropertyRange structure."}}}},"Note that the DX-VA container device's RenderMoComp method can be called without BeginMoCompFrame or EndMoCompFrame being called first.","This method maps directly to a CreateMoComp method of the DD_MOTIONCOMPCALLBACKS structure, where the GUID is the ProcAmp Device GUID, pUncompData points to a structure that contains no data (all zeros), and pData points to a DXVA_VideoDesc structure.","If a driver supports accelerated decoding of compressed video, the renderer can call the driver to create two DX-VA devices\u2014one to perform the actual video decoding work as defined by the DirectX VA Video Decoding specification and another to be used strictly for ProcAmp adjustments.","**Example: Mapping CreateMoComp to ProcAmpControlOpenStream**","The exemplary pseudo code below shows how a driver can map the CreateMoComp DDI call into calls to ProcAmpControlOpenStream. The pseudo code shows how the CreateMocComp function is used for ProcAmp. If a driver supports other DX-VA functions such as decoding MPEG-2 video streams, the sample code below can be extended to include processing of additional DX-VA GUIDs.",{"@attributes":{"id":"p-0153","num":"0186"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD APIENTRY"]},{"entry":[{},"CreateMoComp("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LPDDHAL_CREATEMOCOMPDATA lpData"]},{"entry":[{},")"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Make sure its a guid we like."]},{"entry":[{},"if (!ValidDXVAGuid(lpData\u2212>lpGuid)) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DbgLog((LOG_ERROR, 1,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"TEXT(\u201cNo formats supported for this GUID\u201d)));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lpData\u2212>ddRVal = E_INVALIDARG;"]},{"entry":[{},"return DDHAL_DRIVER_HANDLED;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Look for the deinterlace container device GUID"]},{"entry":[{},"if (*lpData\u2212>lpGuid == DXVA_DeinterlaceContainerDevice) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DXVA_DeinterlaceContainerDeviceClass* lpDev ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"new DXVA_DeinterlaceContainerDeviceClass("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"*lpData\u2212>lpGuid,"]},{"entry":[{},"DXVA_DeviceContainer);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (lpDev) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpData\u2212>ddRVal = DD_OK;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpData\u2212>ddRVal = E_OUTOFMEMORY;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"lpData\u2212>lpMoComp\u2212>lpDriverReserved1 ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(LPVOID)(DXVA_DeviceBaseClass*)lpDev;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return DDHAL_DRIVER_HANDLED;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Look for the ProcAmp Control device GUID"]},{"entry":[{},"if (*lpData\u2212>lpGuid == DXVA_ProcAmpControlDevice) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DXVA_ProcAmpControlDeviceClass* lpDev ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"new DXVA_ProcAmpControlDeviceClass("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"*lpData\u2212>lpGuid,"]},{"entry":[{},"DXVA_DeviceProcAmpControl);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (lpDev) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LPDXVA_VideoDesc lpVideoDescription ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(LPDXVA_VideoDesc)lpData\u2212>lpData;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpData\u2212>ddRVal ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpDev\u2212>ProcAmpControlOpenStream("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpVideoDescription);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (lpData\u2212>ddRVal != DD_OK) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"delete lpDev;"]},{"entry":[{},"lpDev = NULL;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpData\u2212>ddRVal = E_OUTOFMEMORY;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"lpData\u2212>lpMoComp\u2212>lpDriverReserved1 ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(LPVOID)(DXVA_DeviceBaseClass*)lpDev;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return DDHAL_DRIVER_HANDLED;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"lpData\u2212>ddRVal = DDERR_CURRENTLYNOTAVAIL;"]},{"entry":[{},"return DDHAL_DRIVER_HANDLED;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}}]}},"br":{}},"In addition to the CreateMoComp DDI function, a driver can also be capable of implementing the GetMoCompGuids method of the DD_MOTIONCOMPCALLBACKS structure. The following exemplary pseudo code shows one manner of implementing this function in a driver.",{"@attributes":{"id":"p-0155","num":"0188"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ This is a list of DV-VA device GUIDs supported by"]},{"entry":[{},"\/\/ the driver - this list includes decoder, ProcAmp and"]},{"entry":[{},"\/\/ the de-interlacing container device. There is no significance to"]},{"entry":[{},"\/\/ the order of the GUIDs on the list."]},{"entry":[{},"DWORD g_dwDXVANumSupportedGUIDs = 2;"]},{"entry":[{},"const GUID* g_DXVASupportedGUIDs[2] = {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"&DXVA_DeinterlaceContainerDevice,"]},{"entry":[{},"&DXVA_ProcAmpControlDevice"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"DWORD APIENTRY"]},{"entry":[{},"GetMoCompGuids("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PDD_GETMOCOMPGUIDSDATA lpData"]},{"entry":[{},")"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD dwNumToCopy;"]},{"entry":[{},"\/\/ Check to see if this is a GUID request or a count request"]},{"entry":[{},"if (lpData\u2212>lpGuids) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dwNumToCopy ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"min(g_dwDXVANumSupportedGUIDs,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpData\u2212>dwNumGuids);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for (DWORD i = 0; i < dwNumToCopy; i++) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpData\u2212>lpGuids[i] ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"*g_DXVASupportedGUIDs[i];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dwNumToCopy = g_dwDXVANumSupportedGUIDs;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"lpData\u2212>dwNumGuids = dwNumToCopy;"]},{"entry":[{},"lpData\u2212>ddRVal = DD_OK;"]},{"entry":[{},"return DDHAL_DRIVER_HANDLED;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This method maps directly to a RenderMoComp method of the DD_MOTIONCOMPCALLBACKS structure, where:\n\n",{"@attributes":{"id":"p-0157","num":"0195"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct_DXVA_ProcAmpControlBlt {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","Size;"]},{"entry":[{},"RECT","DstRect;"]},{"entry":[{},"RECT","SrcRect;"]},{"entry":[{},"FLOAT","Alpha;"]},{"entry":[{},"FLOAT","Brightness;"]},{"entry":[{},"FLOAT","Contrast;"]},{"entry":[{},"FLOAT","Hue;"]},{"entry":[{},"FLOAT","Saturation;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} DXVA_ProcAmpControlBlt;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":{"@attributes":{"id":"ul0025-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":"lpOutputData is NULL."}}}},"Note that for the DX-VA device used for ProcAmp, RenderMoComp can be called without calling BeginMoCompFrame or EndMoCompFrame.","**Example: Mapping RenderMoComp to ProcAmpControlBlt**","The exemplary pseudo code below shows how a driver can map the RenderMoComp DDI call into calls to ProcAmpBlt. The sample code shows how the RenderMoComp function is used for ProcAmp adjustment. If the driver supports other DX-VA functions such as decoding MPEG-2 video streams, the sample code below can be extended to include processing of additional DX-VA GUIDs.",{"@attributes":{"id":"p-0160","num":"0199"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"DWORD APIENTRY"},{"entry":"RenderMoComp("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LPDDHAL_RENDERMOCOMPDATA lpData"]},{"entry":[{},")"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (lpData\u2212>dwFunction == DXVA_ProcAmpControlBltFnCode)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DXVA_ProcAmpControlDeviceClass* pDXVADev ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(DXVA_ProcAmpControlDeviceClass*)pDXVABase;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DXVA_ProcAmpControlBlt* lpBlt ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(DXVA_ProcAmpControlBlt*)lpData\u2212>lpInputData;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LPDDMCBUFFERINFO lpBuffInfo = lpData\u2212>lpBufferInfo;"]},{"entry":[{},"lpData\u2212>ddRVal = pDXVADev\u2212>ProcAmpControlBlt("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lpBuffInfo[0].lpCompSurface,"]},{"entry":[{},"lpBuffInfo[1].lpCompSurface,"]},{"entry":[{},"lpBlt);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return DDHAL_DRIVER_HANDLED;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"lpData\u2212>ddRVal = E_INVALIDARG;"]},{"entry":[{},"return DDHAL_DRIVER_HANDLED;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"This method maps directly to a DestroyMoComp method of the DD_MOTIONCOMPCALLBACKS structure.","**Example: Mapping DestroyMoComp to ProcAmpControlCloseStream**","The following exemplary pseudo code shows how a driver can map the DestroyMoComp DDI call into calls to ProcAmpControlCloseStream. The sample code shows how the DestroyMoComp function is used for ProcAmp control. If the driver supports other DX-VA functions such as decoding MPEG-2 video streams, the sample code below can be extended to include processing of additional DX-VA GUIDs.",{"@attributes":{"id":"p-0163","num":"0202"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"DWORD APIENTRY"},{"entry":"DestroyMoComp("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LPDDHAL_DESTROYMOCOMPDATA lpData"]},{"entry":[{},")"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DXVA_DeviceBaseClass* pDXVABase ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(DXVA_DeviceBaseClass*)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpData\u2212>lpMoComp\u2212>lpDriverReserved1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (pDXVABase == NULL) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lpData\u2212>ddRVal = E_POINTER;"]},{"entry":[{},"return DDHAL_DRIVER_HANDLED;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"switch (pDXVABase\u2212>m_DeviceType) {"]},{"entry":[{},"case DXVA_DeviceContainer:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lpData\u2212>ddRVal = S_OK;"]},{"entry":[{},"delete pDXVABase;"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case DXVA_DeviceProcAmpControl:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DXVA_ProcAmpControlDeviceClass* pDXVADev ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(DXVA_ProcAmpControlDeviceClass*)pDXVABase;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpData\u2212>ddRVal = pDXVADev\u2212"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":">ProcAmpControlCloseStream( );"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"delete pDXVADev;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return DDHAL_DRIVER_HANDLED;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0164","num":"0203"},"figref":"FIG. 7","b":["700","700"]},"Exemplary electronic device operating environment  is only one example of an environment and is not intended to suggest any limitation as to the scope of use or functionality of the applicable electronic (including computer, game console, television, etc.) architectures. Neither should electronic device environment  be interpreted as having any dependency or requirement relating to any one or to any combination of components as illustrated in .","Additionally, facilitating interaction between video renderers and graphics device drivers may be implemented with numerous other general purpose or special purpose electronic device (including computing system) environments or configurations. Examples of well known electronic (device) systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, thin clients, thick clients, personal digital assistants (PDAs) or mobile telephones, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, video game machines, game consoles, portable or handheld gaming units, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, some combination thereof, and so forth.","Implementations for facilitating interaction between video renderers and graphics device drivers may be described in the general context of electronically-executable instructions. Generally, electronically-executable instructions include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Facilitating interaction between video renderers and graphics device drivers, as described in certain implementations herein, may also be practiced in distributed computing environments where tasks are performed by remotely-linked processing devices that are connected through a communications link and\/or network. Especially in a distributed computing environment, electronically-executable instructions may be located in separate storage media, executed by different processors, and\/or propagated over transmission media.","Electronic device environment  includes a general-purpose computing device in the form of a computer , which may comprise any electronic device with computing and\/or processing capabilities. The components of computer  may include, but are not limited to, one or more processors or processing units , a system memory , and a system bus  that couples various system components including processor  to system memory .","System bus  represents one or more of any of several types of wired or wireless bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures may include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus, some combination thereof, and so forth.","Computer  typically includes a variety of electronically-accessible media. Such media may be any available media that is accessible by computer  or another electronic device, and it includes both volatile and non-volatile media, removable and non-removable media, and storage and transmission media.","System memory  includes electronically-accessible storage media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules\/instructions that are immediately accessible to and\/or being presently operated on by processing unit .","Computer  may also include other removable\/non-removable and\/or volatile\/non-volatile storage media. By way of example,  illustrates a hard disk drive or disk drive array  for reading from and writing to a (typically) non-removable, non-volatile magnetic media (not separately shown); a magnetic disk drive  for reading from and writing to a (typically) removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d); and an optical disk drive  for reading from and\/or writing to a (typically) removable, non-volatile optical disk  such as a CD-ROM, DVD, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are each connected to system bus  by one or more storage media interfaces . Alternatively, hard disk drive , magnetic disk drive , and optical disk drive  may be connected to system bus  by one or more other separate or combined interfaces (not shown).","The disk drives and their associated electronically-accessible media provide non-volatile storage of electronically-executable instructions, such as data structures, program modules, and other data for computer . Although exemplary computer  illustrates a hard disk , a removable magnetic disk , and a removable optical disk , it is to be appreciated that other types of electronically-accessible media may store instructions that are accessible by an electronic device, such as magnetic cassettes or other magnetic storage devices, flash memory, CD-ROM, digital versatile disks (DVD) or other optical storage, RAM, ROM, electrically-erasable programmable read-only memories (EEPROM), and so forth. Such media may also include so-called special purpose or hard-wired integrated circuit (IC) chips. In other words, any electronically-accessible media may be utilized to realize the storage media of the exemplary electronic system and environment .","Any number of program modules (or other units or sets of instructions) may be stored on hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of general example, an operating system , one or more application programs , other program modules , and program data . By way of specific example but not limitation, video renderer , graphic interface , and device driver interface  (all of ) may be part of operating system . Graphics device driver  may be part of program modules , optionally with a close linkage and\/or integral relationship with operating system . Also, an instigating program such as Windows\u00ae Media\u00ae 9 is an example of an application program . Image control and\/or graphics data that is currently in system memory may be part of program data .","A user that is changing ProcAmp or other video settings, for example, may enter commands and\/or information into computer  via input devices such as a keyboard  and a pointing device  (e.g., a \u201cmouse\u201d). Other input devices  (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to processing unit  via input\/output interfaces  that are coupled to system bus . However, they and\/or output devices may instead be connected by other interface and bus structures, such as a parallel port, a game port, a universal serial bus (USB) port, an IEEE 1394 (\u201cFirewire\u201d) interface, an IEEE 802.11 wireless interface, a Bluetooth\u00ae wireless interface, and so forth.","A monitor\/view screen  (which is an example of display device  of ) or other type of display device may also be connected to system bus  via an interface, such as a video adapter . Video adapter  (or another component) may be or may include a graphics card (which is an example of graphics device ) for processing graphics-intensive calculations and for handling demanding display requirements. Typically, a graphics card includes a GPU (such as GPU ), video RAM (VRAM) (which is an example of video memory ), etc. to facilitate the expeditious performance of graphics operations. In addition to monitor , other output peripheral devices may include components such as speakers (not shown) and a printer , which may be connected to computer  via input\/output interfaces .","Computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . By way of example, remote computing device  may be a personal computer, a portable computer (e.g., laptop computer, tablet computer, PDA, mobile station, etc.), a palm or pocket-sized computer, a gaming device, a server, a router, a network computer, a peer device, other common network node, or another computer type as listed above, and so forth. However, remote computing device  is illustrated as a portable computer that may include many or all of the elements and features described herein with respect to computer .","Logical connections between computer  and remote computer  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, the Internet, fixed and mobile telephone networks, other wireless networks, gaming networks, some combination thereof, and so forth.","When implemented in a LAN networking environment, computer  is usually connected to LAN  via a network interface or adapter . When implemented in a WAN networking environment, computer  typically includes a modem  or other means for establishing communications over WAN . Modem , which may be internal or external to computer , may be connected to system bus  via input\/output interfaces  or any other appropriate mechanism(s). It is to be appreciated that the illustrated network connections are exemplary and that other means of establishing communication link(s) between computers  and  may be employed.","In a networked environment, such as that illustrated with electronic device environment , program modules or other instructions that are depicted relative to computer , or portions thereof, may be fully or partially stored in a remote memory storage device. By way of example, remote application programs  reside on a memory component of remote computer  but may be usable or otherwise accessible via computer . Also, for purposes of illustration, application programs  and other electronically-executable instructions such as operating system  are illustrated herein as discrete blocks, but it is recognized that such programs, components, and other instructions reside at various times in different storage components of computing device  (and\/or remote computing device ) and are executed by data processor(s)  of computer  (and\/or those of remote computing device ).","Although systems, media, methods, protocols, approaches, processes, arrangements, and other implementations have been described in language specific to structural, logical, algorithmic, and functional features and\/or diagrams, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or diagrams described. Rather, the specific features and diagrams are disclosed as exemplary forms of implementing the claimed invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like and\/or corresponding aspects, features, and components.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
