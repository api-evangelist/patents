---
title: Architecture for automating analytical view of business applications
abstract: The present invention provides an architecture for obtaining an analytical view of data. The invention includes a model service component for receiving an indication of a first object model and generating a dimensional model and a second object model from the first object model. The second object model is analytical in that it preserves relationships identified in the dimensional model, but allows the user to obtain information in terms of objects instead of specifying the data in terms of the dimensional model. The architecture also includes a navigational component that allows a user to navigate from the second object model to underlying data represented by the first object model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07908125&OS=07908125&RS=07908125
owner: Microsoft Corporation
number: 07908125
owner_city: Redmond
owner_country: US
publication_date: 20090609
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["The present application is a continuation of and claims priority of U.S. patent application Ser. No. 10\/748,391, filed Dec. 30, 2003, now U.S. Pat. No. 7,546,226, issued Jun. 9, 2009, the content of which is hereby incorporated by reference in its entirety.","The present invention deals with accessing saved data. More specifically, the present invention deals with an overall architecture for logically extending to the conventional transaction based application framework an Analytical View (AV) of business data and its supporting subsystems. The AV is based on a design time service referred to as model service, a programming model referred to as Business Intelligence Entities (BIEs) and a runtime service to provide a metadata driven information navigation functionality. The AV feature set addresses enterprise application requirements for analysis and decision support, and complements the transactional feature set currently provided by a conventional application framework.","Prior business database accessing systems focused primarily on the transactional portion of the data accessing system. In other words, transactional data (in non-aggregated form) was generated and saved to the database for later retrieval, reporting and viewing. In such systems, it was very difficult, to retrieve the data in such a way that a user could obtain an analytical view of the data. There were a variety of reasons that this type of viewing of the data was very difficult, and those are addressed below.","When designing software applications involving business transactions, application developers conventionally use a model driven architecture and focus on domain specific knowledge. The model driven architecture often includes business objects (or business entities) involved in the business transactions, such as business entities corresponding to customers, orders and products. These entities are modeled as objects following the paradigm of object orientation.","Each object encapsulates data and behavior of the business entity. For example, a Customer object contains data such as name, address and other personal information for a customer. The Customer object also contains programming code, for example, to create a new Customer, modify the data of an existing Customer and save the Customer to a database.","The object model also enables a description of relationships among the business entities modeled. For example, a number of Order objects can be associated with a Customer object representing the customer who makes those orders. This is known as an association relationship. Other types of relationships can also be described, such as compositions. An Order, for example, can be \u201ccomposed of\u201d a collection of OrderLines. These OrderLines do not exist independently of the Order they belong to. In this way, application developers convert the business logic associated with their applications to a set of models. Applications are built that implement this business logic, often using on-line transaction processing (OLTP).","Objects in an object model typically store their data in a relational database. To satisfy traditional reporting requirements, data is retrieved through the relational database using extraction, transformation and loading (ETL) processes. Data is retrieved, using these processes, into a staging area known as a data mart.","Currently, there is a knowledge gap between users who work on data marts and those who perform OLTP application development. Those who work on data marts do not normally have knowledge about how the object model is constructed. Therefore, when the data is retrieved through the ETL processes, the business logic (such as the relationships and classes, etc.) that was built into the object model is lost.","Traditionally, therefore, in order to facilitate user's reporting requirements, another model known as a dimensional model is built from the data in the data mart. The dimensional model includes a Fact table, that has measures, and associated tables, that are referred to as dimensions. Once the dimensional model is built, a user can specify a query against the dimensional model to obtain data in a somewhat logical fashion, even through the business logic built into the object model was lost.","This type of system, however, requires that a great deal of time be spent in reconstructing the business logic (or at least part of the business logic) to obtain the dimensional model. This can require companies that use such systems to maintain two groups of programmers, one to develop the business logic and implement it in an object model, and another to support the reporting structure required by the company. Of course, this duplication of personnel is both costly and inefficient.","The present invention provides an architecture for obtaining an analytical view of data. The invention includes a model service component for receiving an indication of a first object model and generating a dimensional model and a second object model from the first object model. The second object model is analytical in that it preserves relationships identified in the dimensional model, but allows the user to obtain information in terms of objects instead of specifying the data in terms of the dimensional model. The architecture also includes a navigational component that allows a user to navigate from the second object model to underlying data represented by the first object model.","Appendix A is an example of an XML focal point specification file.","Appendix B is an example of a mapping file.","Appendix C is an example of pseudo code illustrating the operation of the model services system.","Appendix D illustrates the interfaces supported by components of the model services system and the business intelligence entity generator.","Various aspects of the present invention deal with an architecture that allows a user to obtain an analytical view of data. However, prior to describing the present invention in greater detail, one illustrative environment in which the present invention can be used will be described.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user-input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["200","200","202","204","206","200","204","206","204","206","200","204","200"]},"In prior systems, in order to support a desired reporting structure, data was first retrieved from a persistent data store (such as a relational database)  using extraction, transformation, and loading (ETL) processes and placed in a data mart  which acted as a staging area for the data prior to retrieving it.","Then, developers supporting the reporting structure for the user generated a dimensional model, such as model . The dimensional model typically includes a Fact table  which has measures noted therein. The Fact table  also has a plurality of dimensions illustrated as D-D in . The dimensional model  was typically created based on the particular features in the data that the user desired to report on and analyze. Thus, some of the business logic implemented in object model  was recreated in dimensional model .","However, typically, the application developers that implement business logic through object models are different, and have a different knowledge base, than those who develop dimensional models. Therefore, a great deal of time and effort has traditionally been spent in reconstructing at least a part of the business logic implemented through object model  in obtaining a dimensional model  which can be used for reporting.","Another difficulty associated with some prior art techniques is that even to generate reports from dimensional model  required the report generator to be familiar with multi-dimensional expressions (MDX). MDX can be difficult to learn because it has a complex syntax, and it is different than the object oriented expressions required to create and interact with object model . Therefore, even after dimensional model  was constructed, generating reports has still required personnel with specialized knowledge, other than that used in object oriented programming.","Prior to describing the invention in greater detail, the concept of foreign key relationships will be discussed.  is a simplified diagram illustrating the concept of a foreign key relationship.  shows that a Fact table  includes other tables associated with \u201ctime\u201d and \u201ccustomer\u201d as dimensions. Therefore, Fact table  includes a TimeID field  and a CustomerID field .","The Time table  includes a primary key referred to as TimeID in field . The primary key uniquely identifies a record in the Time table . Time table  also contains a number of additional fields related to time, such as day, week and month.","Customer table  also includes a primary key field that contains a primary key referred to as CustomerID . The primary key of the Customer table uniquely identifies a record in the Customer table. Of course, the Customer table also includes additional items associated with the customer, such as customer name.","Therefore, the primary key in a table is a unique identifier for the records in that table. However, the TimeID field  and CustomerID field  in Fact table  are identifiers which refer to other tables (in this case  and , respectively). Therefore, the keys contained in fields  and  in Fact table  are foreign keys. Some complexity arises with respect to foreign key relationships. For example, a table cannot be deleted if its primary key is a foreign key in another table, without dealing with the foreign key relationship. Otherwise, such a deletion breaks the integrity constraints typically imposed on such systems.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 4","b":["231","232","232"]},"In one illustrative embodiment, the data can be queried in terms of entities  through object-relational data accessing system . A user-input query is provided in terms of the entities , or attributes of those entities, and the entity query is translated into a relational database statement executed against relational database . Data accessing system  then formats the data, as a desired result set, and provides it to the user.","However, because entities  are often arranged in terms of transactional processing, it can be difficult, even with the flexibility provided by data accessing system , to obtain an analytical view of the business data stored in relational database . Therefore, in accordance with one embodiment of the invention, model service\/BI generator system  is provided. System  illustratively includes model service component  and entity generator component .","As discussed in greater detail later in the specification, system  automatically generates a dimensional model, such as UDM cube , and stores it in data store  (which can be implemented in the same store as database ). System  also illustratively automatically generates business intelligence entities (BI entities)  from UDM cube  and the information represented by entities . In addition, BI entity data accessing system  allows a user to query the data represented by BI entities  in terms of objects. System  accesses UDM cube  to obtain the data represented by BI entities  and presents that data to the user in terms of the BI entities referenced in the query. Since the BI entities are generated at least based in part on the dimensions of dimensional model , they can represent an analytical, aggregated, view of the data.","Navigation service  allows a user to navigate from data represented by BI entities , back to the original entities  that contain the data. For instance, a user viewing data represented by BI entities  can \u201cdrill down\u201d to the original transactional data that gave rise to the data in BI entities . This navigation is provided through navigation service .",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 4","FIG. 4D"],"b":["239","239"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 4A","FIG. 4A"],"b":["250","252","254","256","250","258","260","262","258"]},"Focal points  represent certain data in the object model that is marked by the user as being a focal point of analysis. Focal points  can illustratively be specified in an XML specification file. One example of an XML specification file is shown in Appendix A hereto.","Object description  is an input which describes the object orientation relationships in a set of metadata corresponding to a set of objects (such as business entities ). This can take the form of, for example, a UML class diagram. One example of a UML class diagram for a plurality of business entities (Customer, Order and OrderLine) is illustrated in .","Persistent data store mappings  map the data referred to by the object model to the persistent data store, in one illustrative embodiment the relational database  shown in . These are illustratively created by the user in the form of a map file, an example of which is found in Appendix B. The map file shown in Appendix B maps from a Customer entity to relational database tables.","Model services system  receives inputs ,  and  and automatically generates a dimensional model  based on those inputs. In accordance with one embodiment of the present invention, dimensional model  is inferred from the inputs supplied by the user, and there is no requirement for a second set of developers to be involved in recreating the business logic to obtain model . In one embodiment, and as will be discussed in greater detail below, model services system  uses the associations and compositions in the object model specified by the object model description  to infer foreign key relationships in dimensional model . System  also uses the focal points of analysis defined by the user in file  and the persistent data store mappings  to automatically create dimensional model  and access data through model .","However, even a system which automatically generates dimensional model  can be improved. For example, obtaining information through dimensional model  still requires the user to know MDX or some sort of dimensional model querying language. Therefore, in accordance with another embodiment of the present invention, entity generator  is provided. Entity generator  creates business intelligence entities  in the form of objects, from the cubes and dimensions in dimensional model . This is also described in greater detail below.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 4C","FIG. 4A","FIG. 4C","FIG. 4C"],"b":["254","256","254","264","231","258","258","266","268","270","266"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 4C","FIG. 4C"],"b":["262","262","270","272","274","272","274","270"]},"By looking at the entities and their relationships in object model description , it can be seen that the dimensional model will require a snowflake-schema, such as that shown in dimensional model representation . It can thus be inferred that two dimensions will be created, Order and Customer. The Order dimension will have two levels, Order and OrderLine. The measures (or numeric values) in the Fact table  will include UnitPrice and Quantity and will come from the OrderLine entities.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 4D","FIG. 4","FIG. 4","FIG. 4D","FIG. 4D"],"b":["239","241","241","232","262","239","241","243"]},"In one illustrative embodiment, the different query expressions used by different query provides  are not unified. Instead, during design time, \u201ctype\u201d information is gathered from selected objects and used to prepare the expressions for queries. This design time metadata is gathered by object model  and is persisted in a global metadata store (or in metadata store ). The metadata is gathered by unified query builder .","During run time, the design time metadata for a query is received by subsystem  and is serialized by serializer . Based on its type information, the query is provided to a designated query provider  through a common provider interface . The query providers  can access the information, in one embodiment, through a suitable security layer . If the received query requires access to two different query providers , it can be virtualized in a dataset first.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 4D","b":["251","253","255"]},{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 5","FIG. 6A","FIG. 5","FIGS. 5 and 6A","FIG. 5","FIG. 5"],"b":["250","250","250","300","302","304","302","306","308","310","304","312","314","316","260","262"]},"Model services component  provides a main user interface to accept focal point specification , object description  and ER mappings . Model services component  can also invoke the functionality associated with map system , dimensional model construction system  and entity generator . Thus, as a first step in the conversion process, model services system  receives, through the top level interface implemented by component , focal point specification , object description  and persistent data storage mappings . This is indicated by block  in .","For the sake of the present example, a more detailed object description than that shown in  is warranted. Therefore, assume for the sake of the present description that model services system  receives, as the object description, the UML class diagram shown in . It is similar to that shown in , except that it is slightly more complex and includes a bit more detail.","Model services component  provides these inputs to map system  and invokes certain functionality in map system . Using the ER mapper, the user produces serialized ER maps  to describe how the object model is mapped to the relational database. These serialized maps  are then loaded by map loader . Map loader  deserializes those maps and converts them to entity map (EM) objects . The precise form of EM objects  is not important. They are simply objects generated from the serialized maps  that are predefined such that the structure of EM objects  is known by map walker . Loading maps  and creating EM objects  is indicated by block  in .","Map walker  navigates EM objects  and generates a data set schema to represent tables and columns that the entities are mapped to in the relational database, and to represent the relationship among them. Navigating the EM objects to create data set schema  is indicated by block  in . The data set schema  generated by map walker  forms the basis for constructing a dimensional model cube in the dimensional model. Map walker  can also fill in any additional information in the data set schema  required by the dimensional model. In addition, map walker  generates queries  to tables in the relational database that will be used to define Fact tables in the dimensional models. Schema  is then provided to dimensional model construction system . In particular, model generator  builds dimensional model cubes based on schema . Building the dimensional model cubes from data set schema  is illustrated by block  in  and is described in greater detail below with respect to .","Model materializer  provides an interface to materialize the dimensional models generated by model generator . Materializing the dimensional models is indicated by block  in . Model processor  provides an interface to process the models materialized by model materializer . It should be noted that, at this point, the dimensional model can be queried using MDX or any other language used to query a multi-dimensional model. However, in accordance with a further embodiment of the present invention, entity generator  is invoked by system  to generate BI entities  from the dimensional model created. Creating BI entities from the dimensional model objects is illustrated by block  in  and is described in greater detail below with respect to .",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 7","FIG. 5","FIG. 7","FIG. 7"],"b":["310","304","400","402"]},"Foreign key relationships among the table and column objects created are projected based on the associations and compositions among objects described in the object model description (such as the UML class diagram) being processed. The map walker  then traverses foreign key relationships from each table object created, for a corresponding entity that has been marked as a focal point for analysis. Recall that the focal points are specified by a focal point specification file which has also been input by the user. The foreign key relationships are traversed in a many-to-one direction toward table objects whose corresponding entity has been marked as a focal point for analysis, in order to generate a named query. The named query can be synthesized by combining the identified tables using an appropriate persistent data store query statement (such as a structured query language (SQL) statement). Thus, the named query is designed to reach out to other dimensions associated with each table object, based on focal points specified by the user.","The named queries are then used to create logical view objects for the dimensional model. This is indicated by block . A dimensional model cube is then built for each logical table object, with other table objects linked to it as dimensions. This is indicated by block .  illustrates one exemplary class diagram for a generalized form of a multi-dimensional object in the dimensional model.  illustrates one exemplary dimensional model materialized and illustrating the foreign key relationships between the Fact table and the various dimensions associated with it.","Appendix C illustrates another embodiment of pseudo code illustrating how model services system  calls the various components thereof in order to implement the functionalities discussed.","It should be noted, at this point, that the dimensional model, an example of which is shown in , has been automatically generated by inferring foreign key relationships from the structure (compositions and associations) in the object model. The user can query the automatically generated dimensional model using tools designed for that purpose. As discussed above, MDX is a language designed to query a dimensional database.","An exemplary query for querying the dimensional model illustrated by  is shown in .  shows a screen shot having a query field  which contains an MDX query expression.  also includes a result field  which contains the results returned by the query.","As also indicated above, MDX and other dimensional model querying languages can have fairly complex syntax or be otherwise difficult to learn. Therefore, another embodiment of the present invention converts the automatically created dimensional model into another set of objects referred to herein as BI entities  so that they can be queried by users using object oriented expressions, rather than the complicated syntactical expressions required by dimensional model querying languages. To satisfy the reporting requirements of the client it is not enough to query the original object model, because the dimensional model may have a Fact table which has attributes from two different entities in the object model as dimensions thereof. Therefore, in order to make it easier to access the dimensional model, in accordance with one embodiment of the present invention, BI entities  are created.","BI entities  provide a conventional object oriented view of the underlying dimensional model . A user can thus create efficient query criteria and consume dimensional data in a manner in which the actual querying of the dimensional model is performed transparently to the user. BI entities  hide the dimensional model details, such as the cube, the dimensions, the hierarchy, the native query language, etc., and the user is only required to use objects and attributes.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":["FIG. 11A","FIG. 11B"],"b":["258","500","502","504","506","258","262"]},"In order to generate BI entities , recall that entity generator  has access to underlying dimensional model . Entity generator  first retrieves a Fact table from dimensional model . This is indicated by block  in . Entity generator  then generates a primary BI entity for the Fact table retrieved. The numerical values (or measures) in the Fact table become the properties of the newly created BI entity. Generating a primary BI entity for the retrieved Fact table is indicated by block  in .","Entity generator  then generates a non-primary BI entity for each dimension of the Fact table. It should be noted that nested classes can be used to maintain the original structure, hierarchy, and levels of the dimensional model. Generating the non-primary BI entities is indicated by block  in . Entity generator  performs these operations for each Fact table in dimensional model , as indicated by block .  shows an interface implemented by Model Service to generate the code for accessing the dimension model created. The interface allows Model Service to convey information on the structure of the dimensional model to the code generator. A dimensional model consists of a cube with measures and a number of dimensions with hierarchies and attributes.  shows the relationships among these components of the dimensional model. The interface for invoking entity generator  is illustrated in . Appendix D illustrates the interfaces supported by the various components of system , and by entity generator .",{"@attributes":{"id":"p-0109","num":"0108"},"figref":["FIG. 14","FIG. 14","FIG. 15","FIG. 16"],"b":["262","500","520","500","522","504","520","504"]},"The user input query , input through BI criteria , is converted by BI service component  into a dimensional model query expression, such as an MDX expression, which can be executed against the dimensional model . One exemplary class diagram for BI service component  is illustrated in . Translation of the user input query  into the dimensional model query and execution of the dimensional model query against the dimensional model are indicated by blocks  and  in . Of course, MDX is used as an example only, and any of a wide variety of different dimensional model query expressions can be supported by the BI criteria component . The following is one exemplary list of MDX expressions which are supported by BI service component  and BI criteria component , although it should be emphasized that other, different, or additional expressions can be supported as well:\n\n","Table 1 lists one exemplary set of MDX operators which are supported.",{"@attributes":{"id":"p-0112","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Supported Operators"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Equivalent"]},{"entry":[{},"MDX Operators","C# Operators"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"+ (Arithmetic)","+"]},{"entry":[{},"\u2212 (Arithmetic)","\u2212"]},{"entry":[{},"* (Arithmetic)","*"]},{"entry":[{},"\/ (Arithmetic)","\/"]},{"entry":[{},"< (Comparison)","<"]},{"entry":[{},"> (Comparison)",">"]},{"entry":[{},"<= (Comparison)","<="]},{"entry":[{},">= (Comparison)",">="]},{"entry":[{},"<> (Comparison)","!="]},{"entry":[{},"= (Comparison)","=="]},{"entry":[{},"AND (Bitwise)","&&"]},{"entry":[{},"OR (Bitwise)","||"]},{"entry":[{},"NOT (Bitwise)","!"]},{"entry":[{},"XOR (Bitwise)","{circumflex over (\u2009)}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The following illustrates one exemplary criteria definition which forms the user input query  in the C-Sharp programming language.",{"@attributes":{"id":"p-0114","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Criteria criteria = new Criteria(typeof(Sales));"},{"entry":"criteria.CalculatedMembers.Add(Sales.Measures, \u201cTotalSales\u201d,"},{"entry":"Sales.SaleDollars * Sales.SaleUnits);"},{"entry":"\/\/criteria with column selection"},{"entry":"criteria.Column.Selection.Add(Sales.Measures.AllMembers( ));"},{"entry":"\/\/criteria added with row selection"},{"entry":"criteria.Row.Selection.Add(Sales.Product.Category.Category.Members( )"},{"entry":");"},{"entry":"criteria = new Criteria(typeof(Sales));"},{"entry":"criteria.CalculatedMembers.Add(Sales.Measures, \u201cProfitable\u201d,"},{"entry":"Sales.SaleDollars > Sales.Expense);"},{"entry":"\/\/criteria with column selection"},{"entry":"criteria.Column.Selection.Add(Sales.Measures.AllMembers( ));"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"After the dimensional model query is executed, BI service component  then returns a result set as indicated by block  in .","Finally, BI metadata discovery component  can also be provided. BI metadata discovery component  is illustratively provided to perform a system wide BI entity search and to return detailed metadata retrieved for one or more BI entities. Of course, this can be useful to the user.","An example of how data is accessed may be helpful. By way of example, assume that a Sales cube in dimensional model  has two measures, SalesUnits and SalesDollars, and one dimension \u201cproduct\u201d which in turn has only one hierarchy \u201ccat\u201d, which in turn, has one level \u201ccategory\u201d. The generated BI class codes illustratively looks as follows:",{"@attributes":{"id":"p-0118","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"namespace Microsoft.TestNamespace.SubNameSpace {"},{"entry":"\u2003\/\/ Sales EntityCube"},{"entry":"[Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Metadata-"},{"entry":"Info(\u201c31236ae6-d9a8-417c-a6c6-abf450a27b1d\u201d, \u201csales\u201d)]"},{"entry":"\u2003public sealed class Sales :"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.EntityCube {"},{"entry":"\u2003\u2003\/\/ Product Dimension"},{"entry":"\u2003\u2003private static Microsoft.TestNamespace.SubNameSpace.Product"},{"entry":"product = new"},{"entry":"Microsoft.TestNamespace.SubNameSpace.Product(typeof(Sales));"},{"entry":"\u2003\u2003\/\/ SalesUnit Measure"},{"entry":"\u2003\u2003private static Microsoft.TestNamespace.SubNameSpace.SaleUnits"},{"entry":"saleUnits = new"},{"entry":"Microsoft.TestNamespace.SubNameSpace.SaleUnits(typeof(Sales));"},{"entry":"\u2003\u2003\/\/ SaleDollars Measure"},{"entry":"\u2003\u2003private static"},{"entry":"Microsoft.TestNamespace.SubNameSpace.SaleDollars saleDollars ="},{"entry":"new"},{"entry":"Microsoft.TestNamespace.SubNameSpace.SaleDollars(typeof(Sales));"},{"entry":"\u2003\u2003\/\/ Measures collection"},{"entry":"\u2003\u2003private static"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Measures"},{"entry":"measures = new"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Measures(typeof(Sales));"},{"entry":"\u2003\u2003\/\/ Dimensions collection"},{"entry":"\u2003\u2003private static"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Dimensions"},{"entry":"dimensions = new"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Dimensions(typeof(Sales));"},{"entry":"\u2003\u2003\/\/ Product Dimension"},{"entry":"\u2003\u2003public static Microsoft.TestNamespace.SubNameSpace.Product"},{"entry":"Product {"},{"entry":"\u2003\u2003\u2003get {"},{"entry":"\u2003\u2003\u2003\u2003return product;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ SalesUnit Measure"},{"entry":"\u2003\u2003public static Microsoft.TestNamespace.SubNameSpace.SaleUnits"},{"entry":"SaleUnits {"},{"entry":"\u2003\u2003\u2003get {"},{"entry":"\u2003\u2003\u2003\u2003return saleUnits;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ SaleDollars Measure"},{"entry":"\u2003\u2003public static Microsoft.TestNamespace.SubNameSpace.SaleDollars"},{"entry":"SaleDollars {"},{"entry":"\u2003\u2003\u2003get {"},{"entry":"\u2003\u2003\u2003\u2003return saleDollars;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ Measures collection"},{"entry":"\u2003\u2003public static"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Measures"},{"entry":"Measures {"},{"entry":"\u2003\u2003\u2003get {"},{"entry":"\u2003\u2003\u2003\u2003return measures;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ Dimensions collection"},{"entry":"\u2003\u2003public static"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Dimensions"},{"entry":"Dimensions {"},{"entry":"\u2003\u2003\u2003get {"},{"entry":"\u2003\u2003\u2003\u2003return dimensions;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"namespace Microsoft.TestNamespace.SubNameSpace {"},{"entry":"\u2003\/\/ Product Dimension"},{"entry":"[Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Metadata-"},{"entry":"Info(\u201cefee9c2f-e003-43b4-a1cc-0741b72d0823\u201d, \u201cProduct\u201d)]"},{"entry":"\u2003public sealed class Product :"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Dimension {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Category Hierarchy"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003private"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.Category"},{"entry":"category;"},{"entry":"\u2003\u2003public Product(System.Type entityCubeType) :"},{"entry":"\u2003\u2003\u2003\u2003base(entityCubeType) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003this.category = new"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.Category(this);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Category Hierarchy"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003public"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.Category"},{"entry":"Category"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003get {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return this.category;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"namespace"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace {"},{"entry":"\u2003\u2003\u2003\/\/ Category Hierarchy"},{"entry":"[Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Metadata-"},{"entry":"Info(\u201c1808b148-2c5f-46fa-aa4c-102c7e0929cd\u201d, \u201ccategory\u201d)]"},{"entry":"\u2003public sealed class Category :"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Hierarchy {"},{"entry":"\u2003\u2003\/\/ All Level"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003private"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.CategoryNamespace.All"},{"entry":"all;"},{"entry":"\u2003\u2003\/\/ Category Level"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003private"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.CategoryNamespace.Category"},{"entry":"category;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003public"},{"entry":"Category(Microsoft.TestNamespace.SubNameSpace.Product parent) :"},{"entry":"\u2003\u2003\u2003\u2003base(parent) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003this.all = new"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.CategoryNamespace.All(this);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003this.category = new"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.CategoryNamespace.Category(this);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ All Level"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003public"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.CategoryNamespace.All"},{"entry":"All"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003get {"},{"entry":"\u2003\u2003\u2003\u2003return this.all;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ Category Level"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003public"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.CategoryNamespace.Category"},{"entry":"Category"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003get {"},{"entry":"\u2003\u2003\u2003\u2003return this.category;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"namespace"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.CategoryNamespace"},{"entry":"{"},{"entry":"\u2003\/\/ All Level"},{"entry":"[Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Metadata-"},{"entry":"Info(\u201c74f06e63-7b3f-46ae-ae03-2c97be8ed4d2\u201d, \u201call\u201d)]"},{"entry":"\u2003public sealed class All :"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Level {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003public"},{"entry":"All(Microsoft.TestNamespace.SubNameSpace.ProductNamespace.Category"},{"entry":"parent) :"},{"entry":"\u2003\u2003\u2003\u2003base(parent) {"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"namespace"},{"entry":"Microsoft.TestNamespace.SubNameSpace.ProductNamespace.CategoryNamespace"},{"entry":"{"},{"entry":"\u2003\/\/ Category Level"},{"entry":"[Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Metadata-"},{"entry":"Info(\u201c66068192-c3e2-42a0-9c2f-b76fe70a221e\u201d, \u201ccategory\u201d)]"},{"entry":"\u2003public sealed class Category :"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Level {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003public"},{"entry":"Category(Microsoft.TestNamespace.SubNameSpace.ProductNamespace.Category"},{"entry":"parent) :"},{"entry":"\u2003\u2003\u2003\u2003base(parent) {"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"namespace Microsoft.TestNamespace.SubNameSpace {"},{"entry":"\u2003\/\/ SalesUnit Measure"},{"entry":"[Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Metadata-"},{"entry":"Info(\u201ccf84c740-787c-48f0-9f28-e800912c04db\u201d, \u201cSaleUnits\u201d)]"},{"entry":"\u2003public sealed class SaleUnits :"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Measure {"},{"entry":"\u2003\u2003public SaleUnits(System.Type entityCubeType) :"},{"entry":"\u2003\u2003\u2003\u2003base(entityCubeType) {"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"namespace Microsoft.TestNamespace.SubNameSpace {"},{"entry":"\u2003\/\/ SaleDollars Measure"},{"entry":"[Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Metadata-"},{"entry":"Info(\u201c327eabf7-82a7-4de5-9802-68aab18a65b5\u201d, \u201csaleDollars\u201d)]"},{"entry":"\u2003public sealed class SaleDollars :"},{"entry":"Microsoft.BusinessFramework.ReportingAnalysis.Analytics.Client.Measure {"},{"entry":"\u2003\u2003public SaleDollars(System.Type entityCubeType) :"},{"entry":"\u2003\u2003\u2003\u2003base(entityCubeType) {"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"One example of a user input query input through BI criteria component  is as follows:",{"@attributes":{"id":"p-0120","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Criteria criteria = new Criteria(typeof(Microsoft_EntityTest));"},{"entry":"\/\/criteria with column selection"},{"entry":"criteria.Column.Selection.Add"},{"entry":"(Microsoft_EntityTest.FACT_Product_Product_UnitsInStock,"},{"entry":"\u2003\u2003\u2003Microsoft_EntityTest.FACT_OrderLine_OrderLine_UnitPrice);"},{"entry":"\/\/criteria added with row selection"},{"entry":"criteria.Row.Selection.Add(Microsoft_EntityTest.Order.Members( ));"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"An illustrative and exemplary result set returned based on the user input query is shown in .","Navigational service  (shown in ) is now discussed in greater detail.","Various aspects of the present invention pertain to a system for enabling a user to extract useful information from a collection of business. The foundation underlying navigation service  is based upon the identification and user-utilization of navigation paths between related data elements. The general nature of five specific navigation paths will now be described in the context of the data processing environments described in relation to . Detailed data relationships that enable these data navigation paths are described below with respect to .","As was discussed above in relation to , data store  illustratively contains data aggregations corresponding to transaction data stored in database . The first data navigation path relates to the process of traversing from an OLAP data element to corresponding transaction data. For the purpose of illustration, this navigation path will hereafter be referred to as \u201cdrill down\u201d navigation (also can be referred to as \u201cdrill through\u201d navigation).","An example will help to describe the nature of a drill down navigation.  is a screen shot demonstrating a presentation of aggregated data (e.g., OLAP data) to a user of a business application. The screen shot shows a graph illustrating the fact that a company's sales for calendar 1996 in the U.S. was $5,949.00. Assuming the user is interested in figuring out all of the U.S. customers that purchased the associated product in 1996, he can illustratively use a drill down navigation. Through a drill down navigation, the user is able to drill down to a customer transaction table.  is an example of a screen shot demonstrating the result of the drill down navigation, which is a customer transaction table showing U.S. customers who purchased the relevant product in calendar 1996.","The second data navigation path involves moving from transactional data to an associated aggregated collection of data (e.g., from transactional data to corresponding OLAP data, or from database  data to data in data store ). For the purpose of illustration, this process of moving from transactional data to aggregated data is hereafter referred to as \u201cdrill up\u201d navigation.","An example will help to describe the nature of a drill up navigation. The customer transaction table illustrated in the screen shot of  is an appropriate starting point for illustrating a drill up navigation. Each customer in the table has illustratively been assigned a city, as well as an ID category. If a user is interested in determining the aggregated total sales order quantity for all customers under the ID category \u201cALFKI\u201d, a drill up navigation can be utilized to produce such information.  is a screen shot illustrating the result of the drill up navigation and shows a graph showing that the sales order quantity for the customer ID \u201cALFKI\u201d is 225.58.","It is common for the data in data store  to be aggregated into a hierarchical scheme. For example, the following scheme is typical of organization within the data warehouse:",{"@attributes":{"id":"p-0129","num":"0134"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CUSTOMER"]},{"entry":[{},"\u2003\u2002-->LOCATION"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003-->Region"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002-->City"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003-->Customer Name"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Accordingly, an example set of data warehouse data is organized as follows:",{"@attributes":{"id":"p-0131","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CUSTOMER"]},{"entry":[{},"\u2003\u2002-->LOCATION"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003-->Northwest"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002-->Seattle"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003-->Boeing"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002-->Portland"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003-->Starbucks"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003-->Midwest"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002-->Minneapolis"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003-->Target"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Hierarchical schemes are utilized within the data warehouse because they are a relatively natural way to organize data. Given such organization, it becomes relatively simple to query data based on obvious aggregation patterns. For example, in accordance with the above example scheme, a user could easily query to find out what customers are in Portland, or to find out what customers are located in the Northwest, etc.","The third data navigation path involves moving through collections of data that are hierarchically organized. For the purpose of illustration, the third data navigation path will hereafter be referred to as \u201cdrill to detail\u201d navigation. A drill to detail navigation enables a user to move through certain levels of data based on inherent hierarchical organization.","An example will bring light to the nature of a drill to detail navigation.  is an example of a screen shot that provides aggregated information (e.g., data in store ) to a user of a business application. The screen shot includes a chart showing that U.S. sales for a company in calendar 1997 was $15,072.00. Assuming the user wants to see the monthly sales for calendar 1997, he\/she can perform a drill to detail navigation. In other words, he\/she can drill to the monthly sales for 1997. The ability to move between data sets in this manner is illustratively supported by the hierarchical organization of data store .  is a screen shot example showing a graph that represents monthly sales for 1997. The user is illustratively able to drill from the  aggregation to the narrower  aggregation.","It is possible for data, such as data in data store , to be organized in association with a framework that includes a multi-dimensional star-oriented schema, a simple example of which is illustrated in . Within , Sale  is associated with two dimensions, namely, customer  and product . Shipment  is associated with the same two dimensions. It should be noted that Sale  could just as easily be associated with dimensions that are different than the dimensions of Product . In accordance with one embodiment, Sale  and Shipment  are each independent objects or entities. In accordance with another embodiment, however, Sale  and Shipment  are independent data stores.","When dimensions are shared as they are in , the stage is set for the fourth data navigation path. For the purpose of illustration, the fourth data navigation path will hence forth be referred to as \u201cdrill across\u201d navigation. With a drill across navigation, a user is able to navigate from a first object (or data warehouse) to an object (or data warehouse) that is similarly situated in terms of having a related dimension. For example, with reference to , if a user is looking at a collection of data related to Sale , he\/she can drill across and view data pertaining to Product . A drill across navigation enables the user to switch between sets of inherently related data.","An example will help shed light on the nature of a drill across navigation.  is an illustration of a sample screen shot that contains a portion of a graph that is viewed by a user of a business application. The graph generally presents sales information. More specifically, the graph presents sales order quantity to product relationship data for a company. To simplify the illustration, only a few rows of the graph are shown. A complete graph will include additional rows. It is assumed that the data organization scheme supporting the graph includes a sales data warehouse and a product data warehouse that share the same dimension, namely a product dimension. Accordingly, assuming the user is interested in determining a stock value for a product underlying the graph of , he\/she can drill across from the  graph to view stock value information.  is an example of a screen shot having a graph containing a stock value for a product.","In accordance with one embodiment of the present invention, the described fourth navigation path is based on an analysis of a dimensional model (such as UDM ), or based on a BI entity model (such as BI entities ). In accordance with one embodiment of the present invention, a fact-to-fact drill across navigation is available in instances where dimensions are shared.","The fifth data navigation path is called an ad hoc logic association navigation, hence forth referred to as a \u201clogic association\u201d navigation. This navigation path is essentially a user-defined shortcut between two sets of related data. In one embodiment, a user applies his\/her business knowledge to identify properties within a first data collection that are related to properties in a second data collection. The related properties are then utilized as the basis for a data navigation path between the first and second collections of data.","An example will help to describe the fifth navigation path. A user illustratively creates a \u201cCustomer\u201d object within a data warehouse. The same user also illustratively creates a \u201cCustomer-Related-Information\u201d object. It is assumed that the user has a fundamental understanding of his\/her business. In accordance with the fifth navigation path, the user applies his\/her business knowledge to identify a property within the Customer object that is related to a property in the Customer-Related-Information object. The user is allowed to identify the related property relationship ad hoc at run time to enable data navigation between their associated objects. As opposed to the previously described four data navigation paths, the fifth path is generally not based on an underlying physical relationship, but instead is based on a user's understanding of his\/her business.","In accordance with one embodiment of the present invention, a metadata store is created to catalog relationships between data elements. The above-described data navigation paths are illustratively defined and implemented through analysis of the relationship data in the metadata store.",{"@attributes":{"id":"p-0142","num":"0147"},"figref":"FIG. 27","b":["1101","1100","1104","1100","1102","1104","1102","1104","1102"]},"In accordance with one embodiment, the analysis of metadata store  and the identification of navigation paths are performed at run time. Accordingly, with the possible exception of input required for logic association navigations, user knowledge is generally not required to enable utilization of the navigation paths. The navigation paths are identified and provided to the user simply based on data relationships reflected in the data processing system.","Population of metadata store  with data relationship information  will now be described in greater detail. It should be noted, however, that the specific type of relationship data stored within metadata store  can be customized to support a particular navigation path. For example, it is within the scope of the present invention to develop a new navigation path and configure the system to store corresponding relationship data within metadata store , if such data is not already being stored. For the purpose of illustration, examples of relationship data that is stored within metadata store  to support the above-described and other data navigation paths will be described in detail.","It is common for data warehouse  () or data store  () to be organized in accordance with a framework that enables a user to define objects and relationships. An example of such a framework was illustrated and described in relation to . In accordance with one aspect of the present invention, at least some of the relationships underlying the object-relational framework represent potential navigation paths, and are therefore utilized to populate metadata store . For example, based on a UML object diagram, the relationships between objects (e.g., associations and compositions) represent potential navigation paths and are therefore illustratively identified and cataloged in metadata store . Other known object relationships, such as inheritance relationships, also represent potential navigation paths and are therefore also illustratively cataloged in metadata store .","In accordance with one aspect of the present invention, some of the data relationships  stored in metadata store  are from other sources as well. For instance, the data relationship  in metadata store  are related to mappings , dimensional model  and\/or BI entity object model .","Similarly, in accordance with one embodiment, relational mappings of the transition from the regular object model entities  () to the BI entity object model  () represent potential navigation paths, and are therefore added to metadata store . For reference, the regular object model objects are business entities, while the objects associated with the OLAP data warehouse object model are BI entities.","The mappings between the business entities and the BI entities are illustratively saved to metadata store . The mappings ultimately enable report navigation between the OLAP and OLTP domains. Also, navigation paths between BI entities are enabled for report navigation, including the ability to look across BI entities and to review transaction data associated with a BI entity.",{"@attributes":{"id":"p-0149","num":"0154"},"figref":["FIG. 28","FIG. 4"],"b":["1301","234","1302","1304"]},"Exemplary correlations between specific data relationships and navigation paths will now be described, however, the present invention is not limited to the described examples.","In accordance with one aspect of the present invention, drill up and drill down navigation paths are derived based on the relationships between BI entities and their corresponding business entities. As has been described, the mappings generated during the generation of BI entities are cataloged to the metadata store. These mappings are illustratively the foundation that enables drill up and drill down navigations.","In accordance with another aspect of the present invention, model service system  is configured to identify the manner in which two UML models are related, and to generate shared dimensions for corresponding dimensional model cubes. Then, BI entities become the natural reflection of the star-oriented model, wherein for each dimension there will be generated one non-primary BI entity. To enable drill across navigation paths, the mappings between non-primary BI entities and their corresponding dimensions are illustratively cataloged to the metadata store. The relationships between BI entities are also identified. Accordingly, when two BI entities refer to the same shared dimension, a drill across is possible.","In accordance with another aspect of the present invention, to enable the foundation for drill to detail navigation paths, hierarchical relationships are cataloged to the metadata store when the BI entity model  is generated from the UML model  by model service .","With reference to  it was described that navigation service  analyzes the data in metadata store  in order to identify and implement navigation paths . In accordance with additional aspects of the present invention, illustrative architectural characteristics and functional methodology will now be described with regard to navigation service .",{"@attributes":{"id":"p-0155","num":"0160"},"figref":["FIG. 29","FIG. 27","FIG. 27"],"b":["1104","1401","1402","1100","1401"]},"In accordance with step , the navigation service provides a plurality of links to the user. The links, which are displayed to the user, represent data navigation paths that are available for execution. The links are identified based on the review of the metadata. As is represented by step , the user selects a link and communicates the selection to the navigation service. In accordance with step , the navigation service retrieves data corresponding to the user's selection. Finally, in accordance with step , the result of the navigation is returned to the user, thereby providing him\/her with the desired data set.",{"@attributes":{"id":"p-0157","num":"0162"},"figref":"FIG. 30","b":["1502","1504","1506","1508"]},"Examples of the clients are now discussed, but these are examples only and do not limit the scope of the invention. Client  is illustratively a client based in the Microsoft Business Framework (MBF) but could by any other framework as well. The Microsoft Business Framework is a set of developer tools and software classes offered by Microsoft Corporation of Redmond, Wash. Client  is illustratively a client based in Windows, an operating system offered by Microsoft Corporation, but could be based on any other operating system as well. Client  is illustratively based in Microsoft Office, a software package offered by Microsoft Corporation, but could be based on any other software package as well. Client  is a more generic identifier representing a web-based client.","In accordance with one embodiment, at least one of the illustrated clients are BAPI clients in that they are configured to support object-oriented programming via an interface defined in terms of objects and methods based in what is known as the Business Application Program Interface (BAPI). In other words, a BAPI client application navigates information using BAPI. To support the BAPI clients, the illustrated architecture includes a BAPI provider manager and an MBF BIPath API , but any other BI path API could be used.","Provider manager  is illustratively configured to operate in conjunction with a plurality of providers. A few specific providers, to which the present invention is not limited, are illustrated in . Providers , ,  and  are configured to support different types of navigation, such as navigation based on analysis of BI Entity data, as described herein. Provider  illustratively provides navigation via analysis of metamodel data. Provider  is a generic block indicating other providers that the architecture can easily be extended to support (e.g., navigation based on other sources). At least one provider is illustratively a BAPI provider configured to operate in conjunction with the other BAPI components of the architecture.","In accordance with one aspect of the present invention, one of the BAPI clients sends a navigation Request to BAPI provider manager  through BAPI. The BAPI provider manager then either delegates the Request to a set of specific providers or broadcasts to all providers. The BAPI provider manager  then aggregates results returned from different providers and sends them back to the requesting BAPI client.","In accordance with one embodiment, when a new BAPI provider is implemented, it will implement the BAPI API and extend the Request\/Response objects if necessary to provide additional functionality. The new BAPI provider will then be plugged into the BAPI provider manager  and make itself available for requests. After this, the BAPI client will be able to request the service from the new BAPI provider to obtain any additional offered functionality.","Accordingly, a BAPI client includes an application that navigates information using BAPI. The BAPI, which will illustratively be exposed, is the principle interface implemented by a BAPI provider. A BAPI providers is an implementation of BAPI API: a BAPI client navigates to obtain a different information perspective via a BAPI provider. The framework can then be extended through implementation of future\/other providers through the similar Request\/Response object exchange format. There therefor can be type specific BAPI providers (Hypermedia providers, BIPath providers, etc.). This can be done through implementation of BAPI in a provider specific manner to support custom Request\/Response objects. The BAPI provider plugs itself into the BAPI provider manager and is used by the BAPI client in a delegation (if type is specified)\/broadcasting pattern.","It should be emphasized that the client systems involved can be web services or non-web services. The submitted Requests illustratively, although not necessarily, include a data context used by a provider in the creation of a Response. In accordance with one embodiment, certain providers are associated with their own particular type of data navigation path. For its type of path, the navigation provider is configured to identify corresponding navigation paths based on a received Request.","In accordance with one embodiment, when a new type of data navigation path is desired, a corresponding new provider is simply registered and integrated. Accordingly, any entity can illustratively develop a navigation path provider to expand on the types of navigations available to client users. In other words, the provider layer is essentially plug-and-play with the service layer to enable relatively simple extensions of service functionality.",{"@attributes":{"id":"p-0166","num":"0171"},"figref":"FIG. 31","b":["1904","1904","1922","1920","1922","1920"]},"Within , the providers are generically lists as providers  (e.g., providers that provide navigation paths based on business entity information), providers  (e.g., providers that provide navigation paths based on BI Entity enformation), and providers  (e.g., other ISV providers including providers that provide navigation paths based on \u201cother\u201d sources).","As is illustrated, requests are delegated (or broadcast) to providers ,  and , which respond with a response. In accordance with block , the responses are then provided to BAPI client  in an aggregated form (aggregation is optional). In accordance with one embodiment, the responses are provided to client  in the form of a collection of links. A link is selected by a user of the client and a corresponding \u201cTraverseLink( )\u201d command is sent to API . A corresponding navigation command is then sent to one or more providers so as to produce a data result, which is provided to client .","It should be emphasized that the Request\/Response objects can be extended by users. For example, each provider is configured to generate potentially different Requests\/Responses (e.g., exemplified in  by the different sizes of response circles).","As was described above in relation to , the process of intelligent data navigation includes generation of a plurality of data navigation links available for a data context received from the user. , in accordance with one aspect of the present invention, is a combination block-flow diagram illustrating the process of collecting available navigation links in association with the described system architecture.","The process illustratively begins when a user  interacts with a data navigation program (e.g., a plug-in navigation application implemented within a main application such as a spreadsheet or other application). Through the interaction, the user illustratively passes to a navigation service  a data context and request for navigation links. Navigation service  illustratively delegates (or broadcasts) a request for links to each of a plurality of navigation providers -. Each navigation provider - is illustratively configured to support a different type of data navigation path. Each navigation provider interacts with metadata service  to review information within metadata store  (e.g., store  in ) based on the data context provided by the user to service  to identify navigation paths of its own respective type. Each navigation provider - then returns a list of links to service , the list of links corresponding to navigation paths available for the provider's respective navigation type. Service  illustratively aggregates all available navigation links and provides them to the user .","In accordance with one aspect of the present invention, as has been alluded to, as opposed to delegating a request for links to a suitable navigation provider, the request can instead be broadcast to multiple providers. In accordance with one embodiment, no navigation type is specified by a client in a broadcast request object. The clients do not specify a type so that the request will be broadcasted to multiple providers (e.g., all registered providers). The providers that know about the request will illustratively respond while other providers will not. This is different than the \u201cdelegating\u201d scenario.","As was described above in relation to , the described process of intelligent data navigation also includes a user executing or traversing one particular link from the received aggregated list of links. , in accordance with one aspect of the present invention, is a combination block-flow diagram illustrating the process of traversing one particular navigation link in association with the described system architecture.","The  process begins with user  selecting one of the available navigation links returned in response to his\/her request for navigation. The selected link is provided to the navigation provider - to which it corresponds. In the illustrated example, the link is provided to drill across provider . The provider that receives the link passes criterion related to the link to either data service  or database service . Service  serves providers that will provide data warehouse (e.g., data warehouse ) information to the user, while service  services providers that will provide database (e.g., database ) information to the user. Based on the received criterion, service  or  will interact with either data warehouse  or database , respectively, to obtain the information that corresponds to the navigation destination associated with the link. The information, which is illustratively the executed navigation, is provided to user  through service layer .","In accordance with one aspect of the present invention, the metadata in the metadata store (e.g., store  in ) is maintained in an XML format.","In accordance with one embodiment, the interface with which navigation providers interact to provide the described intelligent navigation capability can illustratively be described as follows:",{"@attributes":{"id":"p-0177","num":"0182"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"<<interface>>"},{"entry":"Navigation Service Provider"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"+GetProviderInfo ([in]providerInfoRequest:XmlElement):XmlElement"},{"entry":"+GetDrillPath ([in]DrillPathRequest:XmlElement):XmlElement"},{"entry":"+TraverseLink([in]TraversReuest:XmlElement):XmlElement"},{"entry":"+Navigate (NavigateRequest : XmlElement) : XmlElement"},{"entry":". . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Finally, in accordance with one aspect of the present invention,  is an exemplary request\/response class diagram that pertains to the processes associated with acquiring links in response to a user request for intelligent data navigation, and to the process of traversing one of the links selected by the user. As is illustrated, the processes are routed through a serialization base associated with an XML interface. It should be noted that the configuration of  is but one example of a system that is suitable to support the described intelligent navigation capabilities.","In accordance with one aspect of the present invention, following are a listing of code snippets that illustrate one exemplary implementation of the described extensible system.","The first code snippet (a) describes in code an example process of acquiring a listing of navigation links, and then traversing a navigation link. Comments denoted within the code snippet with \u201c\/\/\u201d explain the functionality of each line of code.",{"@attributes":{"id":"p-0181","num":"0186"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"a. Get Links and Traverse Link"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/init INavigateProxy"},{"entry":"INavigateProxy navigateProxy= ...;"},{"entry":"\/\/create get links request"},{"entry":"GetLinksRequest getLinksRequest = new GetLinksRequest( );"},{"entry":"\/\/set containment key"},{"entry":"getLinksRequest.ContainmentKey = ...;"},{"entry":"\/\/add data context"},{"entry":"getLinksRequest.DataContext.Add(\u201cMicrosoft.EntityTests.Customer.CustomerID\u201d, 01963656\u201d);"},{"entry":"\/\/create a link filter"},{"entry":"getLinksRequest.InclusiveFilters.Add(typeof(Microsoft.EntityTests.Sales), \u201cTurnOver\u201d, \u201cProfit\u201d) ;"},{"entry":"\/\/set link categories"},{"entry":"getLinksRequest.LinkCategoryCollection.Add(\u201cMicrosoft.BusinessFramework.IntelliDrill.DrillUp\u201d);"},{"entry":"\/\/send get links request"},{"entry":"GetLinksResponse getLinksReponse = navigateProxy.GetLinks(getLinksRequest);"},{"entry":"\/\/traverse the link if a link is returned"},{"entry":"TraverseLinkRequest traverseLinkRequest = new TraverseLinkRequest( );"},{"entry":"traverseLinkRequest.Link = getLinksReponse.Links[0];"},{"entry":"traverseLinkRequest.ContainmentKey = ...;"},{"entry":"traverseLinkRequest.SecurityDescriptor = ...;"},{"entry":"\/\/send traverse link request"},{"entry":"NavigateResponse navigateResponse = navigateProxy.TraverseLink(traverseLinkRequest);"},{"entry":"\/\/get dataset back"},{"entry":"DataSet dataset = (DataSet) navigateResponse.Result;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The code snippet listed in part (a) assumes a scenario wherein, in response to a Request, a user is provided with a plurality of links. In accordance with one embodiment, the user simply asks for a link (or a type of link) and is directly provided a result. In essence, the GetLinks and TraverseLink processes are combined into a consolidated function. This consolidated function is illustratively called a Navigate function. Snippet (b) described a Navigate function.",{"@attributes":{"id":"p-0183","num":"0188"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"b. Navigate"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/init INavigateProxy"},{"entry":"INavigateProxy navigateProxy= ...;"},{"entry":"\/\/create navigate request"},{"entry":"NavigateRequest navigateRequest = new NavigateRequest( );"},{"entry":"\/\/set containment key"},{"entry":"navigateRequest.ContainmentKey = ...;"},{"entry":"\/\/add data context"},{"entry":"navigateRequest.DataContext.Add(\u201cMicrosoft.Entity-"},{"entry":"Tests.Customer.CustomerID\u201d, \u201c01963656\u201d);"},{"entry":"\/\/create a link filter"},{"entry":"navigateRequest.InclusiveFilters.Add(typeof(Microsoft.EntityTests.Sales),"},{"entry":"\u201cTurnOver\u201d, \u201cProfiit\u201d)"},{"entry":"\/\/set link categories"},{"entry":"navigateRequest.LinkCategoryCollection.Add(\u201cMicro-"},{"entry":"soft.BusinessFramework.IntelliDrill.DrillUp\u201d);"},{"entry":"\/\/set security descriptor"},{"entry":"navigateRequest.SecurityDescriptor = ...;"},{"entry":"NavigateResponse navigateResponse ="},{"entry":"navigateProxy.Navigate(navigateRequest);"},{"entry":"\/\/get dataset back"},{"entry":"DataSet dataset = (DataSet) navigateResponse.Result;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with one aspect of the present invention, in order to support new providers, a flexible architecture is provided wherein Request\/Response objects are extensible. For example, a user can define tailored instances of GetLinks and other elements so as to extend the base class for new providers. Snippet (c) demonstrates the flexible architecture.",{"@attributes":{"id":"p-0185","num":"0190"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"c. Request\/Response Extensibility"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class MyGetLinksRequest : GetLinksRequest"},{"entry":"{"},{"entry":"public MyGetLinksRequest(XmlElement request) : base(request) { ... }"},{"entry":"public String MyProperty { ... }"},{"entry":"..."},{"entry":"}"},{"entry":"public class MyTraverseLinkRequest : TraverseLinkRequest"},{"entry":"{"},{"entry":"..."},{"entry":"}"},{"entry":"public class MyNavigateRequest : NavigateRequest"},{"entry":"{"},{"entry":"..."},{"entry":"}"},{"entry":"public class MyNavigateResponse : NavigateResponse"},{"entry":"{"},{"entry":"..."},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Note:"},{"entry":"Request\/Response Extensibility can illustratively be implemented by either extending the base class or using property bag."}]}}]}}},"In accordance with one aspect of the present invention, the extensible architecture extends to provider functionality. Snippet (d) is an example.",{"@attributes":{"id":"p-0187","num":"0192"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"d. Provider Extensibility"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class MyNavigateProvider : INavigateProvider"]},{"entry":[{},"{"]},{"entry":[{},"public XmlElement GetLinks(XmlElement request)"]},{"entry":[{},"{"]},{"entry":[{},"\/\/get object model from xml element"]},{"entry":[{},"MyGetLinksRequest getLinksRequest ="]},{"entry":[{},"new MyGetLinksRequest(request);"]},{"entry":[{},"\/\/do whatever with the request object"]},{"entry":[{},"...."]},{"entry":[{},"}"]},{"entry":[{},"public XmlElement GetLinks(XmlElement request)"]},{"entry":[{},"{"]},{"entry":[{},"..."]},{"entry":[{},"}"]},{"entry":[{},"public XmlElement GetLinks(XmlElement request)"]},{"entry":[{},"{"]},{"entry":[{},"..."]},{"entry":[{},"}"]},{"entry":[{},"public String LinkCategory"]},{"entry":[{},"{"]},{"entry":[{},"Get"]},{"entry":[{},"{"]},{"entry":[{},"return \u201cMicrosoft.BusinessFramework.IntelliDrill.MyDrillType\u201d;"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Snippet (e), in accordance with one aspect of the present invention, demonstrates how the extended architecture is implemented within the original system to enable extended functionality for new providers.",{"@attributes":{"id":"p-0189","num":"0194"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"e. Extensibility usage"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/init INavigateProxy"},{"entry":"INavigateProxy navigateProxy= ...;"},{"entry":"\/\/create get links request"},{"entry":"MyGetLinksRequest getLinksRequest = new MyGetLinksRequest( );"},{"entry":"\/\/set containment key"},{"entry":"getLinksRequest.ContainmentKey = ...;"},{"entry":"\/\/add data context"},{"entry":"getLinksRequest.DataContext.Add(\u201cMicrosoft.Entity-"},{"entry":"Tests.Customer.CustomerID\u201d, \u201c01963656\u201d);"},{"entry":"\/\/create a link filter"},{"entry":"getLinksRequest.InclusiveFilters.Add(typeof(Microsoft.EntityTests.Sales),"},{"entry":"\u201cTurnOver\u201d, \u201cProfit\u201d) ;"},{"entry":"\/\/set link categories"},{"entry":"getLinksRequest.LinkCategoryCollection.Add(\u201cMicro-"},{"entry":"soft.BusinessFramework.IntelliDrill.MyDrillType\u201d);"},{"entry":"\/\/set property for the extended request"},{"entry":"getLinksRequest.MyProperty = ...;"},{"entry":"\/\/send get links request"},{"entry":"GetLinksResponse getLinksReponse ="},{"entry":"navigateProxy.GetLinks(getLinksRequest);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"It can thus be seen that the present invention provides a number of significant advantages over prior systems. One aspect of the present invention automatically generates a dimensional model from an object model. The automatic generation is performed by inferring the dimensional model from relationships specified in the object model and user-designated focal points, as well as mappings back to the relational database.","In another embodiment of the present invention, objects are provided to abstract away from the specifics of a dimensional model. Therefore, a user can access a dimensional model using only object oriented expressions, without requiring specific knowledge of any dimensional model querying language.","Of course, in another embodiment of the present invention, both systems are used together such that the dimensional model is automatically created from a user-specified object model, and the entities which abstract away from the dimensional models are automatically created as well. Thus, all a user must do is provide the focal points, a description of the object model and its persistent data storage mappings, and this embodiment of the present invention automatically generates the necessary components for the user to access the data according to a desired reporting structure using only object oriented expressions without going through the laborious tasks of manually creating a dimensional model and then generating dimensional model-specific queries against the dimensional model.","Similarly, navigation is provided. A user can navigate between and among transactional and analytical representations of the data.","Although the present invention has been described with reference to particular embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4C","FIG. 4A"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4D","FIG. 4"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 6A","FIG. 5"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIGS. 19-23"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIGS. 25 and 26"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 34"}]},"DETDESC":[{},{}]}
