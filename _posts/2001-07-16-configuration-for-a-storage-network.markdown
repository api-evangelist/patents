---
title: Configuration for a storage network
abstract: A storage system which supports distributed management of client configurations by storing such configuration information for a number of products across the storage network in a central repository is provided. The system further includes an external parser configuration file to provide a framework allowing users to access configuration data. The parser is separate from the configuration information repository. The parser is key-driven and extensible, facilitating programming, updates and modifications without modifying the binary library containing the configuration information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06917929&OS=06917929&RS=06917929
owner: Sun Microsystems, Inc.
number: 06917929
owner_city: Santa Clara
owner_country: US
publication_date: 20010716
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to data storage. More particularly, the present invention relates to controlling configuration information for components of a storage network.","A storage network is a network that connects a set of host computers with one or more storage devices. Host computers typically store configuration information regarding the capabilities and requirements of components in the storage network. Configuration information may describe the physical devices connected to the network and can include, for example, the amount of memory on the storage devices, data bus types, installed system software services, specific user and group application profiles, and hardware specifications.","A drawback of current data storage products is the use of an excessive number of configuration files. Since the host computers are relatively self-sufficient and store their own configuration information, the task of data and application management on a host computer has become increasingly burdensome. Current data storage products have numerous text-based files, which needed to be individually edited in order to achieve a working configuration. Although it is possible to propagate minor changes or fixes to applications that reside on a server on the network to the host computers, any significant upgrade, fix or installation of a new application that affects every host in the network requires that each host computer be accessed and updated individually by a network administrator. With the increasing number of host computers being connected to storage networks, installing major revisions or upgrades to application software or to general configuration software is expensive, inefficient, and time-consuming.","An illustrative embodiment of the present invention employs an external parser configuration file that is used by a parser that parses configuration information stored in a central repository. The parser and parser configuration file, which defines rules for parsing data, are separate from the central configuration repository. The parser configuration is key-driven and extensible. The parser facilitates programming and modifications to the configuration without the need for modifying the underlying code that is responsible for managing the configuration information. The illustrative arrangement allows changes and updates to the network storage system to be implemented quickly, without the necessity of rebuilding and recompiling application programs that use configuration information from the repository.","The illustrative embodiment of the present invention consolidates configuration information into a location that can be shared and managed across a cluster. As used herein, a \u201ccluster\u201d refers to two or more computer systems that are linked together in order to handle variable workloads or to provide continued operation in the event one fails. The illustrative embodiment provides a storage system which supports distributed configuration management by storing configuration information for a number of components across the storage network in a central repository. The centralization of configuration information allows a network administrator to manage subsystem configurations from the server, and to propagate all types of changes to applications from the server.","The present invention will be described with reference to the Figures. While the invention will be described in conjunction with an illustrative embodiment in a storage network, it will be understood that the invention is not limited to the illustrated embodiment. To the contrary, it is intended to cover alternatives, modifications, and equivalents as may be included within the spirit and scope of the invention as defined by the appended claims.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["10","11","11","11","12","12","12","13","11","11","11","17","17","17","16","16","16","14","10","11","11","11","12","12","12"],"i":["a","b","c ","a","b","c ","a","b","c","a","b","c ","a","b","c ","a","b","c ","a","b","c "]},"According to the illustrative embodiment, configuration information for the data storage system is centralized in a central location in the storage network and is accessible by multiple hosts. A configuration repository  contains the configuration information regarding the components of the network . The central configuration repository  allows a network administrator to update, modify and manage configuration information for each of the computers in the storage network from a single server. According to the illustrative embodiment, the configuration repository  may be either a shared file on a distributed file system or a shared disk partition. The configuration information is accessible by multiple hosts within the network. Those skilled in the art will appreciate that other alternative arrangements may be used in practicing the present invention.","According to the illustrative embodiment, the configuration information stored in the configuration repository  is divided into two major sections: a shared configuration section and a persistent data section. The data stored in the configuration section is assumed to be ASCII string data in the illustrative embodiment. Those skilled in the art will appreciate that in alternative embodiments, the configuration information may be stored in alternative formats, such as in a word processing document, a custom format, hexadecimal, etc. The shared configuration section contains configuration information that is accessed and utilized used by command line interfaces (CLI's) of the hosts and the management service applications. The CLI's provide the facilities to allow an administrator to initiate, dump and rebuild existing applications. The library configuration CLI utilities can add and delete entries to the configuration, allowing the installation programs on the hosts to create and upgrade the shared configuration section when needed.","The second configuration section contains persistent data. \u201cPersistent data\u201d, as opposed to transient data, refers to data that is persistently stored. An example of persistent data is configuration information related to user environments that is stored on persistent storage. When a user logs on, his or her last saved environment needs to be retrieved so he or she does not have to reset the environment. A library configuration user level application programming interface (API) is utilized for retrieving and saving persistent configuration information for the data storage product software.","With respect to , a parser  is connected to the configuration repository and performs parsing operations on the configuration information stored in the configuration repository  under the control of an extensible parser configuration file . The parsed configuration information is then transmitted to the applications, which utilize the configuration information to perform data processing. According to the illustrative embodiment, the parser  is key-driven to facilitate the parsing of configuration information. The parser rule configuration file  defines the parser rule architecture for controlling and processing the configuration information. The parsing grammar includes an extensible parser configuration and an actual key for entering or retrieving data. The parser configuration exists on disk and in core once the parser configuration file is opened and may be updated to extend the key that is used to retrieve or place data from or into the appropriate configuration section (shared configuration or persistent). One skilled in the art will recognize that the parser configuration is not limited to a file, but can comprise any suitable collection of data for defining the parser rules.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2","b":["18","19","18","20","19","21"]},"The parser configuration file, according to the illustrative embodiment, defines the order of data and supplies routines to retrieve, read, write and query data in the configuration sections. In other words, the parser configuration file defines a set of rules for how data is parsed out. A sample parser configuration file defining rules for parsing information for the configuration section according to the illustrative embodiment is as follows:","scm.thread.size","ii.master.shadow.bitmap.mode.overflow.group.cnode.options","sndr.phost.primary.pbitmap.shost.secondary.sbitmap.mode.type.group.cnode.options\n\n","The syntax of the separate, extensible parser configuration file of the illustrative embodiment is as follows:\n\n","Each entry in the two configuration information sections is prefaced with a tag, which is used for retrieval. Each section further contains a comment indicating the nature of the fields displayed. For example, the \u2018service_tag\u2019 is used for general retrieval and organization of data entries. The name fields are positionally ordered and are used to retrieve or input the particular field of interest. If a value is not present for a given field, a place holder is inserted. According to the illustrative embodiment, empty or null entries in the configuration are specified with a \u2018-\u2019 as a place holder, and a dot \u2018.\u2019 is used for separation of fields (i.e. as a delimiter) in the parser configuration. The rules can be programmatically used and persist across the configuration. According to the illustrative embodiment, the values are formatted as ASCII strings.","The parser configuration rules in the parser configuration file define the positional order of fields and how they may be retrieved from and\/or written into the specified configuration information section (shared configuration or persistent). For example, the parser rule:\n\n","This key returns all of the specified strings as defined in the parser configuration. If the user only needs the master volume, then the following key can be used:\n\n","The parser configuration for the persistent data section utilizes the same service tags as the configuration section, such that the defined syntax for the key can reference a given set of data in the configuration repository.",{"@attributes":{"id":"p-0028","num":"0038"},"figref":"FIG. 3","b":["31","19","19","32","18","33","18","15","19","34","11","11","11"],"i":["a","b","c. "]},"The entries in the configuration repository  may be built into a tree hierarchy, as illustrated in FIG.  and defined by the parser configuration file . The illustrated tree contains the tag and the fields and the positional orders of the tag and field for the parser configuration. As discussed above, the configuration information is divided into either a shared configuration section  or a persistent data section . Tags  in the parser configuration file  define the various components of the data storage network and the particular attributes of these components. Fields  are organized in hierarchical order under the tags  and contain values describing the particular attributes or descriptions of the components in the data storage network.","For example, in the parser configuration file of the illustrative embodiment, the tag \u201cscm\u201d is utilized for the features of a storage cache in the storage devices. The tag \u201csv\u201d is used for the configuration of a storage volume driver. The field \u201ccnode\u201d defines in which cluster disk service group or resource the entry will participate in the configuration and the field \u201cmode\u201d defines an access mode for a particular device for which the storage volume driver is to be enabled. The \u201csndr\u201d tag defines volume sets and their host location. The fields defined after the sndr tag include \u201cphost\u201d, which defines the server on which the primary volume resides, \u201cpbitmap\u201d, which defines the volume partition or file in which the bitmap of the primary partition is stored, \u201cshost\u201d, which defines the server on which the secondary volume resides, \u201csbitmap\u201d, which defines the volume partition or file in which the bitmap of the secondary file is stored and \u201cmode\u201d, which defines the sndr operating mode. The \u201cbitmaps\u201d tag is directed to a file system used to contain file-based bitmaps. The tag \u201cii\u201d contains the volume names of a master, shadow and bitmap volume enabled in a software program for creating and storing a point-in-time copy of data. The \u201cste_tm\u201d tag is utilized to define the port configuration for the nodes in the storage network. The tag \u201cste_vd\u201d is used to define parameters for configuring a virtual disk storage device. The tag \u201cste_ph\u201d is used to configure a phantom device on the storage network.","According to the illustrative embodiment, the parser configuration is extensible and can be easily modified and updated through a set of file handling routines defined by an API, without having to modify the binary library containing precompiled routines for programs that run on the hosts of the data storage network. Once the parser configuration is installed, it is not necessary to change the parser configuration unless adding a new field to the configuration.",{"@attributes":{"id":"p-0032","num":"0042"},"figref":"FIG. 5","b":["51","52","53","54"]},"Additional routines are utilized for extracting or modifying data according to the extensible parser rules set forth in the parser configuration file. For example, the command \u201cint cfg_get_cstring(CFGFILE *fd, const char *key, void *value, int val_len)\u201d returns information from the shared configuration section in the value as specified by the key in the configuration section. The command \u201cint cfg_put_cstring(CFGFILE *fd, const char *key, void *value, int val_len)\u201d is utilized to put or replace a specified key, as specified in the \u201ccfg_get_cstring( )\u201d command, with a new value in the configuration section. The command \u201cint cfg_get_pstring(CFGFILE *fd, const char *key, void *value, int val_len)\u201d returns information from the persistent section in the value as specified by the key. Finally, the command \u201cint cfg_put_pstring(CFGFILE *fd, const char *key, void *value, int val_len)\u201d puts or replaces a specified key, as specified in cfg_get_pstring( ), with new value in the persistent section.","The implementation and use of a central configuration repository allows a network administrator to manage configuration information for each of the computers in the storage network from a single server. Thus, any software updates, version upgrades, or installation of new applications that require knowledge of and access to configuration information for any of the components of the network can be implemented from the central repository and propagated to the individual hosts. Users of the hosts , and do not have to exit applications and, moreover, the storage network does not have to be brought down for maintenance in order to install or propagate the new upgrade or version of the application.","The use of a separate, extensible parser according to the teachings of the illustrative embodiment significantly improves and facilitates modifications and changes to the parser rules driving the configuration of the storage network. Changes can be made quickly and easily without having to modify or recompile any programs running on the storage network. New templates can be loaded and replicated through the system affecting the operation of the network as a whole.","The described embodiment is merely illustrative and should not be considered restrictive in any way. Details of the parser configuration file and data storage network may vary substantially without departing from the spirit of the invention, and exclusive use of all modifications that come within the scope of the appended claims is reserved. It is intended that the invention be limited only to the extent required by the appended claims and the applicable rules of law. The scope of the invention is to be measured by the appended claims, rather than the preceding description, and all variations and equivalents that fall within the range of the claims are intended to be embraced therein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
