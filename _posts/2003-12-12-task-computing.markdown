---
title: Task computing
abstract: A computer-based system includes task computing enabling users to define tasks by combining available functionality and to execute such tasks. The computer-based system of includes available functionality which originates in devices, computing applications and electronic services available through local and remote procedure calls including Web Services, UPnP, CORBA, RMI, RPC, DCE, DCOM or comprises previously defined tasks. All available functionality is abstracted to the user as a service and each service is expressed in a service description language, and the services have a semantic description associated with them.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561069&OS=08561069&RS=08561069
owner: Fujitsu Limited
number: 08561069
owner_city: Kawasaki
owner_country: JP
publication_date: 20031212
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is related to, and claims the benefit of priority to, U.S. Provisional Application No. 60\/434,432, filed Dec. 19, 2002 in the U.S. Patent and Trademark Office, entitled \u201cTask Computing\u201d by Ryusuke Masuoka and Yannis Labrou, the contents of which are incorporated herein by reference.","This application is related to, and claims the benefit of priority to, U.S. Provisional Application No. 60\/501,012, filed Sep. 9, 2003 in the U.S. Patent and Trademark Office, entitled \u201cTask Computing\u201d, by Rysusuke Masuoka, et al., the contents of which are incorporated herein by reference.","This application is related to, and claims the benefit of priority to, U.S. Provisional Application No. 60\/511,741, filed Oct. 17, 2003 in the U.S. Patent and Trademark Office, entitled \u201cTask Computing\u201d, by Ryusuke Masuoka, Yannis Labrou, and Zhexuan Song, the contents of which are incorporated herein by reference.","1. Field of the Invention","The present invention is generally related to personal and pervasive computing, and, more particularly, to preparing and executing computing tasks.","2. Description of the Related Art","Current State of Computing: Personal Computing","Personal computing is the paradigm of a user operating a single device and accessing\/using the applications that reside on that device. Personal computing requires that the user has a sufficient understanding of her computing environment and of the applications that are available on her machine, so that the knowledgeable user can adequately utilize the available resources to execute complex tasks. This is computing as most of us experience it on a daily basis; the burden of learning how to achieve complex tasks resides with the user, who has to understand each of the applications running on her machine and of the functions that they support, to manually transfer data between applications (cut & paste), to manually invoke each application and the specific functionality that relates to the task and to eventually devote her full attention (and time) to the execution of the complex task. Accomplishing complex tasks relies on the user's understanding of the task on one hand and of the available resources (devices and applications) on the other, so that the user herself can combine them into a workflow that the user will execute and the final outcome of which will be a completed task.","Early Examples of a Shift from Personal Computing","We will briefly discuss some examples, outlining the technical aspects of them and pointing to their limitations. These examples indicate a more task-oriented view of the personal computing environment","In one feature of an operating system, when the user inserts a music CD into the CD tray, a window pops up suggesting to the user tasks he\/she can perform from that point on. A typical listing of these options includes:","Play Audio CD","Copy Music from CD","Open folder to view files","Take no action","Each of these options also mentions the application to be used to perform the action. The focus is on the action, or task to be performed rather than the application used to perform the task.","Similarly, if a digital video camera is connected to the computer a pop window pops-up with the following possible actions for the user to perform:","Record Video","Capture Video","Perform no action","In either case, the operating system uses a pre-specified list of actions, or tasks, that is associated with the occurrence of a specific event (inserting a music CD, or connecting a digital camera), so that when the event occurs, the relevant listing of actions is presented to the user to act upon. In that sense, the system's response is hardwired and does not include flexibility beyond that which as been programmed into the system as to the possible actions to be performed as a result of the triggering event. In other words, the system shows the same set of the actions that can take place when a digital camera is connected to the computer; the programmer of the operating system has prepared this specific list of actions for the particular event. Applications can change the items in the list, but there is not an easy way for end-users to change it.","In another feature of an operating system, the user is presented with a choice of actions. That is, a separate list of tasks is presented to the user for each of the following file types: Documents, Pictures, Photo Album, Music, Music Artist, Music Album, and Videos. For example, if the file type is a picture, a list of \u201cpicture tasks\u201d is presented:","View (pictures) as a slide show","Order prints online","Print the picture","Set the picture as background","Copy pictures to a CD","This list of tasks is again pre-compiled and associated with the specific file type. There is not an easy way for end-users to modify the list. As in the other examples, the focus is on the task that can be performed and not on the application to be used for executing the task. Moreover the user does not need to know which application will be used for the task. If the user chooses to execute one of the suggested tasks, the proper application will be instantiated accordingly and invoked (launched).","In an example of office suite software, a smart tags feature is available. The smart tag feature highlights text in the current document while using an editor and offers the user a drop down menu of actions that can be performed with the object that that text denotes. For example, if the text represents a name, then this feature may identify the object associated with that name to be a person, and may offer the following list of possible actions:","Send mail (to that person)","Schedule a meeting (with that person)","Open Contact (of that person)","Create a Contact (for that person)","The options are enabled by identifying that the string of characters in the document might represent a name. The system relies on the syntactic features of the text to identify that this particular piece of text represents a name. Note, that a string of characters that does not resemble a typical American name (e.g., Lusheng Ji), may not be identified as a name related to a person. The reason is that the part of the system that identifies a piece of text as a name is a pretty simple program (script) that attempts to identify easily identifiable patterns in the syntactic form of the text. Once the \u201cnature\u201d of the text is identified (correctly or incorrectly), e.g., person, address, etc., a pre-compiled list of possible actions is presented to the user. It is possible for application programmers to create smart tags for other domains and applications, such as identifying addresses and invoking a map application, etc.","Another example of an attempt to present to the user a more task-oriented view of the computing environment is now discussed. When a user types an address in the search box of a search engine, the service will return (above the usual search results) a link to a mapping function that, if followed, will provide a map of the address.","However, it is not obvious that the user might be searching for the map of the typed address. Other reasonable possibilities exist: the user might want a phone number listing associated with this address, or if that address is a business, the user might want to see this business' BETTER BUSINESS BUREAU record, or to check the weather in that vicinity, and so on. In its current form, the search engine guesses what type of \u201cthing\u201d (in this case an address) the typed text stands for and it returns a hard-wired task associated with this type of entry.","In Summary","All the examples mentioned above exhibit similar features:","In some manner the type or nature of the user's input (text or event) is guessed; in effect the system attempts to infer the meaning (semantics) of a string, relying on its syntactic features","The system makes a guess of plausible tasks that the user might wish to perform given that input; that guess is hardwired into the system, so effectively it is not the system that makes the guess in real time, but it is the programmer of the system that made the guess when programming the system, way before the user got to interact with it.","The appropriate application, is automatically invoked upon the user's selection (whatever the user selected in the second step), instantiated with the proper input (whatever the system guessed in the first step).","Examples of the related art increase the user's convenience, but also include the following features:","The functionality has been designed into the application; the application's programmers have programmed (hard-wired) the system's response. As a result, this is not a flexible and scaleable approach because the range of possibilities has been decided during design time","The system has limited ways to accommodate the user's actions and wishes, nor it can accurately \u201cperceive\u201d the nature (semantics or meaning) of the input. Despite the different technologies used in each of the examples, the system relies on correctly guessing the meaning of the input by its syntactic features","The system employs a cause-effect (or trigger-response) mechanism, in the sense that a certain type of input results to a single action (application invocation). Complex user tasks, entail more complex workflows with complex sequences of events and actions, that would be impossible (technologically speaking) with the simplistic techniques used in these discussed examples.","In summary, during the current transitional state of personal computing, we observe attempts to speculate on the user's task by guessing the meaning of input based on its syntactic features, and invoking the right application with proper input; this approach is hardwired and brittle.","The Limitations of Personal Computing","We argue that Personal Computing exhibits substantial limitations, due to the following reasons:","As personal computing reaches the masses it is unreasonable to expect a high degree of computing experience and proficiency by the average non-expert user.","Personal computing is also problematic for the advanced user as well, because it can be time-consuming","Personal computing is an inadequate framework for the emerging paradigm of pervasive computing as described in the following.","Computing environments are becoming increasingly more complex for the average user. This is due to both the complexity and proliferation of applications and devices available to the users. Although the tasks that a user can perform in a computing environment have rapidly increased the required user proficiency has also increased. To make matters worse the user base of computer users have been rapidly expanding to reach users with very little (or none at all) computing expertise. The goal of the computing industry is to make computing available to the non-expert user. This goal is in conflict with the increasing complexity of computing environments.","Even when the end-user possesses substantial expertise, taking advantage of what is possible in today's computing environment takes considerable time. This is due to the fact that effectively advanced users have become \u201cprogrammers\u201d of their personal computing environments. Consider the more complex tasks that an advanced user might perform frequently, such as deciding to attend a talk that she sees announced on a web page: the user has to find the address of the place where the talk takes place, check for conflicts with her personal calendar, find directions to the location, create an entry in a calendaring application and so on. Doing so requires cutting and pasting between applications (assuming that the user is proficient enough to know which applications to use in order to accomplish the task) and executing a carefully choreographed workflow that uses available resources to accomplish the desired complex task. To make matters worse, if the user needs to perform the same or similar task in the future, she will have to do all of that again.","Personal computing, i.e., the idea of a user owning and operating a computer that runs the user's applications and \u201cholds\u201d the user's data is giving way to computing environments with less well-defined boundaries. As computers get permanently connected to computer networks the distinctions between local and remote applications and data collapse, or even worse, they are confusing to computer users. Moreover, users can access and interact with devices that are not computers in the sense of personal computers but still possess significant computing power and can serve the users' goals and help them accomplish a variety of tasks (cameras, printers, smart appliances, etc.). This new computing environment, often referred to as pervasive computing environment requires a fundamentally different approach to the problem of the user accomplishing things in it. For one thing, the average user may not even be aware of what is possible or feasible in such environments, as available resources (devices and applications) may be constantly changing, and moreover the user cannot rely on the convenience of a flexible and unified user interface for managing the interaction with such an environment. In other words, the personal computing approach is infeasible in a setting replete with devices and applications that are not a priori known to the user.","Task computing is a new paradigm for how users interact with devices and services that emphasizes the tasks that users want to accomplish while using computing devices rather than how to accomplish them. Task computing fills the gap between what users want done and the service that might be available in their environments. Task computing presents substantial advantages over traditional approaches, such as the current personal computing paradigm, namely, it is more adequate for non-expert computer users, it is a time-saver for all types of users and is particularly suited for the emerging pervasive computing type of computing environments.","We discuss the requirements of a Task Computing Environment (TCE), which is a framework that support Task Computing, by providing support for:","The workflows of Task Computing","Description of tasks and services","Specification, Execution and Re-Usability of tasks by end-users (that rely on the description of tasks and services)","Manipulation including creation and removal of services by the end-users","We elaborate on Task Computing Environment (TCE) embodiments; such an embodiment, when viewed as an embodied system comprises the following:","One or more Task Computing Clients (TCC's)","One or more Semantically Described Services (SDS's)","One or more Semantic Service Discovery Mechanisms (SSDM's)","and optionally includes one or more Semantically Described Service Control Mechanisms (SDSCM's)","We present in detail two Task Computing Client embodiments, called TCC I and TCC II, embodiments of multiple Semantically Described Services and Semantically Described Service Control Mechanisms.","We conclude with detailed walkthroughs of Task Computing use cases using STEER.","The above-mentioned aspects of the present invention can be attained by a computer-based system, method, and computer-readable medium comprising a computer system executing task computing, thus enabling users to define tasks by combining available functionality and to execute such tasks.","These together with other aspects and advantages which will be subsequently apparent, reside in the details of construction and operation as more fully hereinafter described and claimed, reference being had to the accompanying drawings forming a part hereof, wherein like numerals refer to like parts throughout.","In this document we discuss Task Computing and its embodiments.","Overview of Task Computing","Task Computing is aimed at assisting the user in accomplishing complex tasks using the functionality at her disposal, without prior knowledge of the environment of available such functionality and without the need to directly interact with or understand the sources of that functionality. An essential element of task computing is that the user knows and understands her task and the Task Computing Environment (TCE) understands devices and services and how to interact with them. The two of them combined, user and TCE can co-operate in accomplishing arbitrarily complex tasks.","In today's computing environments the user is surrounded by functionality that is presented to the user in the form of either devices or computer-mediated services, such as electronic services (e-services) available over the Internet, applications that run on computing devices that the user operates, or simply devices that support a specific function. Examples of such devices and e-services include phones, displays, entertainment centers, televisions, PDA's, mobile phones, audio players, fax machines, printers, weather services, map services, etc.",{"@attributes":{"id":"p-0151","num":"0150"},"figref":["FIG. 1","FIG. 1"],"b":["100","110"]},{"@attributes":{"id":"p-0152","num":"0151"},"figref":["FIG. 2","FIG. 1"],"b":"200"},"More particularly,  shows the technologies and protocols have matured for the user  to access devices and e-services easily. As for network  aspect, they have evolved from standalone network, to the Internet to and wireless networks. As for devices  aspect, they have evolved from standalone devices to networked devices to UPnP and JINI. As for network configuration  aspect, they evolved from Server\/Client to PP,\/Ad-hoc. As for web technology  aspect, they evolved from web as \u201cthe eye-ball web\u201d for human consumption to to web services as the transactional web and the Semantic Web for machine-actionable,\u2014readable, and understandable web. As for OS and applications  aspect, they evolved from object oriented to .NETand other remote object and remote procedure call technologies.",{"@attributes":{"id":"p-0154","num":"0153"},"figref":["FIG. 3","FIG. 3"],"b":["300","110","302","304","306","204","304","202","302","210","306"]},{"@attributes":{"id":"p-0155","num":"0154"},"figref":["FIG. 4","FIG. 3"]},"More particularly,  shows tasks and services . As shown in , the input from the web , devices , and OS\/applications  results, respectively, in web accessible services , device actions , and OS applications , all of which support the accomplishment of tasks .","\u201cTask Computing\u201d is defined as computation to fill the gap between tasks (what user wants to be done), and services (functionalities that are available to the user).","A Task Computing Environment (TCE) is a framework that supports Task Computing, by providing support for:","The workflows of Task Computing","Description of tasks and services","Specification, Execution and Re-Usability of tasks by end-users (that rely on the description of tasks and services)","Manipulation including creation and removal of services by the end-users","We use the term \u201ctask\u201d to refer to an action (or a series of actions) that a user wants to perform. In that sense, tasks are (potentially complex) actions that users conceive, which might or might not be computationally feasible in their entirety.","A task that is being carried out by a computing system (or a collection thereof) should be thought of as a computationally feasible implementation of a user's conceptualization of a task. In Task Computing, the user bears partial (or complete) responsibility for \u201ctranslating\u201d the task conceptualization (in her mind) into a computational implementation of a task. This process might be interactive and collaborative between the user and the TCE, in the sense that the user might further define or refine her initial task conceptualization into a computational task implementation.","A computational implementation of a task is a single service (an atomic service) or a set of services organized (composed) in a workflow (a composite service). So, a task can be comprised of either a single service if the task exactly matches with the service (i.e. if the service is exactly what the user wants to be done) or it can be comprised of a workflow of services. We will refer to both atomic services and composite services, simply as services.","The fact that services (atomic or composite) exist (somewhere) does not mean that they can be used by a particular user in order to accomplish tasks. In other words the availability of services alone does not enable Task Computing by itself. Such services need to be discovered, filtered according to the context and requirements of a particular user and states of the services, presented to the user in a way that the user can create tasks with them and eventually the created tasks need to be executed on the user's behalf and with the user's participation. That process (discovery, filtering, task specification, task execution) and optionally manipulation of services are the end user's view of Task Computing, in the sense that from her perspective Task Computing involves going through these steps of the Task Computing workflow. We next elaborate on the Task Computing workflows.","The Workflows of Task Computing","The Task Computing workflow describes the process (sequence of steps) that a user goes through when performing Task Computing. Although the workflow might not be necessarily manifested in its entirety in the User Interface (in the sense that not necessarily each element of the workflow is explicitly represented by an element in the User Interface) supporting this workflow and its variations, is a necessary element of any TCE.","A Task Computing Workflow includes the following functions:","Discovery of devices and offered services (either by said devices or broader network\/Internet) by the user's TCE. Discovery refers both to finding out that services exist and how to access them. For Task Computing purposes, discovery includes discovery of the descriptions associated with said services, their usages and states. Except for devices and services, discovery might include items such as tasks, either previously defined by the current user or by other users. A variety of discovery mechanisms are discussed later but it should be noted that an explicit user-driven search is also a mode of discovery.","Flit ring of said discovered devices and services, based on the user's context. The purpose of filtering is to reduce a potentially unwieldy number of discovered services to a manageable subset that is more relevant to the user's context and current situations (using a variety of potentially user-selectable criteria) and\/or the task that the user attempts to accomplish. A variety of filtering mechanisms and\/or criteria are discussed later but it should be noted that an explicit user-driven filtering (which could include a search against a list of already discovered services) is a mode of filtering.","Task Specification, during which the user who knows and understands the task she wants to accomplish, composes the task by connecting together the available (filtered) services (and tasks). This task specification can be accomplished in a variety of ways (preferably using a graphical user interface, GUI). There is no unique UI for accomplishing the said step of the Task Computing workflow, although we will present some examples later on.","A user can also save a specified task for future use.","Task Execution of a specified task, during which the user only interacts with the execution of the task in order to provide necessary input for the proper execution of the involved sub-tasks of services and to monitor the execution the task, but all the lower-level invocation and interaction with the affected devices and systems is left to the computing system that supports the task computing framework.","It should be noted that Discovery>Filtering>Task Specification>Task Execution prescribes a general workflow for task computing; its elements are intended to describe the user's Task Computing experience while using a Task Computing Environment. From a TCE's perspective, considering the TCE as a computing system that \u201cdelivers\u201d Task Computing, the four constituents of a Task Computing workflow, constitute the basic functions that the TCE ought to support and their inter-relationships.","Additional elements might be introduced in the Task Computing workflow. Also, some of these elements might be eliminated from a User Interface perspective, although most likely such a step might still take place in the background, within the TCE. For example, a user might select to skip the Task Specification phase, because the output of the Filtering phase might be presented to the user in a way that it matches a user task without further elaboration needed by the user. Or, a user might skip filtering because the discovered services (and tasks) are too few, or a previously compiled repository of tasks and services is used and no further filtering is necessary. Typically Task Execution can not be omitted as a step of a Task Computing workflow, as it denotes the final outcome of a Task Computing user experience.","In  we present diagrams of the basic Task Computing Workflow and its variations.","In the Task Computing Workflow Variation (I)  shown in , service or task discovery  is executed, then service or task filtering  is executed, followed by task specification , and then by task execution .","In the Task Computing Workflow Variation (II)  shown in , service or task discovery  is executed, then service or task filtering  is executed, followed by task specification , and then by task execution . At the completion of task specification , control may return to service or task discovery .","In the Task Computing Workflow Variation (III)  shown in , service or task discovery  is executed, then service or task filtering  is executed, followed by task specification , and then by task execution . At the completion of task specification , control may return to task filtering .","In the Task Computing Workflow Variation (IV)  shown in , service or task discovery  is executed, then service or task filtering  is executed, followed by task specification , and then by task execution . At the completion of task execution , control may return to service or task specification .","In the Task Computing Workflow Variation (V)  shown in , service or task discovery  is executed, then service or task filtering  is executed, followed by task specification , and then by task execution . At the completion of task execution , control may return to task filtering .","In the Task Computing Workflow Variation (VI)  shown in , service or task discovery  is executed, then service or task filtering  is executed, followed by task specification , and then by task execution . At the completion of task execution , control may return to task specification .","In the Composite Task Computing Workflow  shown in , service or task discovery  is executed, then service or task filtering  is executed, followed by task specification , and then by task execution . The Composition Task Computing Workflow shows that at the completion of each function subsequent to service or task discovery  (that is, at the completion of service or task filtering , task specification , or task execution ), control may return to any prior function.","Two major classes of variations exist that involve iterations from each of the Task Specification and Task Execution phases to prior steps of the workflow. The rational for these variations rests with the user-driven nature of Task Computing. During the Task Specification stage the user might decide that she needs to refine or modify her task and an additional Discovery\u2192Filtering, or just Filtering phase might be required for the user to discover additional potentially helpful services, or to broaden to narrow the output of the Filtering stage (by modifying the filtering criteria). Similarly, during execution, a failure (or some other exception) due to network problems, service failure, or some other difficulty in executing a sub-task of a specified task, might require that the user seeks an alternative\/substitute service (through further Discovery and\/or or Filtering) or even a modification of the task itself. A Task Computing Environment should allow for multiple such iterations and\/or \u201cmixing\u201d of such workflows; for example, the user might go from Task Execution\u2192Filtering\u2192Task Specification, as suggested in one workflow and then from Task Specification\u2192Discovery\u2192Filtering\u2192Task Specification\u2192Task Execution, as suggested in another workflows. We could have illustrated the above by simply allowing multiple iterations from each of Filtering, Task Specification, and Task Execution to any prior stage, but we felt that the illustration we used (and the additional comments) better denote the rational behind each of the workflow classes.","We provide next some additional comments about each of the constituent components of the Task Computing Workflows. A Task Computing Environment may manifest itself to the user in the form of an integrated UI with different panes that represent each (or multiple) steps of the Task Computing Workflows. In addition, pop-up windows may appear on demand, presenting additional information to the end user or in order to assist the user with providing necessary input. Furthermore the form of the UI might differ depending on the type of client device (e.g., PDA vs. a desktop or laptop computer) and\/or the nature of the user's context (e.g., pervasive computing environment vs. web browsing.) There can be interfaces by voice, Braille, tactile, etc. Voice interface would be especially useful for mobile phone and in-car applications.","Discovery","Discovery involves finding the services that can be consumed\/used by the TCE. Discovery includes identifying programmatic interfaces for interacting with these services and descriptions of such services, including their input and output parameters, details on the functions they perform, the conditions for using them, their effects, and so on.","There are a variety of service discovery mechanisms. A TCE might implement multiple service discovery mechanisms and any single service might be discoverable through multiple service discovery mechanisms. In general, there is no preferred discovery mechanism for a given service but there are mechanisms that might be more efficient or easier to implement, depending on the location of the service and\/or its description.","Discovery might take place in a variety of modes. We distinguish between an active discovery mode, a passive discovery mode and a hybrid discovery mode.","Discovery is closely related to finding the functional aspects of contexts (or situations) where the computing device, therefore its owner, is in. Discovery finds the set of functionalities the context offers. In that sense, each discovery mechanism represents a certain context (or a set of contexts). For example, a local service discovery mechanism represents the context of the computing device itself, giving the functionalities available on it. The UPnP discovery mechanism represents the context of the sub-network the computing device is in. A discovery mechanism by Web Services can be set up on the Internet for a certain community with which the owner of the computing device has a membership. Bluetooth and InfraRed (IR) communications have limited ranges compared to the wireless LAN technology. But the discovery mechanisms accompanying Bluetooth and IR are not necessarily inferior to those accompanying wireless LAN (such as UPnP). Because of their limited ranges, they give better localization of the computing device and its owner, leading to better determination of the functionalities the discovery mechanisms have to offer.","Active Service Discovery Mechanisms","The TCE queries some facility (a computer system, or a network thereof), such as a broker, a facilitator, a directory (such as UDDI server), a yellow pages-like service, a Service Discovery System-(UPnP, Bluetooth SDP, InfraRed (IR), Jini, Rendezvous, Salutation)-implementing network node, or some search engine for services for a listing of services. That query might be a request for a complete listing of available (known) services by that computing system, or some narrower search query submitted to that system. Such a request might be made to a peer network (instead of a single computer system) like the file-sharing peer networks. A peer network might be a broad one (such as the aforementioned systems) or more localized ones, such as TCE's peers in the same subnet as the current user. Such a query might be either pre-specified or dynamically created, by either the TCE itself (and\/or one of its components) or by the user, or through a collaboration between the user and the TCE. This search might be based on keywords (provided by the user) or it might be driven by a machine-level understanding of a user's context and task. Any of the above types of search might be also thought of as an \u201cInteractive\/User-assisted discovery\u201d. The query might also be determined in real-time while the user is in the process of performing discovery or some other step of the Task Computing workflow. For example, as the user attempts to specify a task, the TCE might infer that the user might be interested in having some additional (not yet discovered) service or task available for her current task, and without the user explicitly requesting so, it might attempt to discover such a service or task (alternatively, the user might explicitly perform such additional discovery herself). The latter is an important feature of a TCE; a TCE might proactively perform discovery given a user's dynamically changing context.","An additional type of active discovery might include a look-up or a query against a previously compiled listing of available devices, services and tasks, stored locally (on a user's client device) or on another peer device that is accessible by the user's client device (e.g., a friend's PDA using an infrared communication link); this local store might be used regardless of whether the user is online (connected to a network) or offline, or even in combination with other modes of discovery.","Passive Service Discovery Mechanisms","Passive discovery typically involves some service discovery system, such as UPnP, Bluetooth SDP, Jini, Rendezvous, Salutation, etc. In such a case the TCE is equipped with the ability to understand and process the protocols and mechanisms of the discovery system (the TCE might be enabled for multiple such systems); as a result the TCE can discover services by virtue of being connected (or having access) to a network where services that implement one (or more) of these systems might broadcast (or multicast) their presence and availability to other devices on the same network or sub-net, or even across networks. In a variation of this type of discovery, proxies that can discover devices, services and tasks using any of the aforementioned protocols might be accessible by a TCE (for querying), or might automatically update the TCE regarding the availability of said devices, tasks and services.","Hybrid Service Discovery Mechanisms","A hybrid discovery mode is also possible; such a mode might include both the active and passive methods. An example is to use a web service as a discovery mechanism. The discovery procedure includes two steps. In the first step, TCC registers a callback interface (for example, a WSDL URL) to a registry. Whenever a change happens (a new service, a service removed, etc.), the registry calls the given callback interface to inform TCC about the change. The second step is optional. Though the callback mechanism is quite efficient in the use of network bandwidth, it has some drawbacks. For instance, it can not be used if TCC is behind a firewall and the callback interface is inaccessible from the registry. The second step is designed for that purpose. TCC polls the registry in a given interval or whenever necessary. And the registry returns all changes after the last polling or all available services. Note that the second step can be treated as an independent discovery mechanism, and in that situation, the mechanism should be categorized as an active method.","Filtering","At any given time, not all discovered services are relevant to the user for Task Computing purposes. The purpose of the filtering phase of the Task Computing workflow is to narrow the discovered services to those that fit the user's current context. On occasion, the output of this filtering might not further narrow the output of discovery. This filtering ought to be dynamic in the sense that as the user's context changes the output of the filtering should be dynamically updated (on occasion, upon the user's explicit request).","We use the term \u201cuser's context\u201d broadly to refer to the various criteria that may be used in order to select (filter) a subset of services from the output of discovery. Such criteria might include any of the following or a combination there of:","User profile","Task at hand","User device characteristics","User location","User motion status","User network connectivity","User specified keywords (similar to a search query)","Features of a set of services when considered as a whole, such as","Number of services","Similarity between the services","Output of the application of mathematical or logical formulas on service-related values for the purpose of expressing any constraint or criteria that the user deems relevant. Examples of this kind includes total resources needed to execute all the services in the set, such as total fee or total time.","Individual service features, such as","Cost of using\/accessing the service such as fee and time","Provider of the service","Reputation of the service,","Input and output parameters and their values including the application of mathematical or logical formulas on such values for the purpose of expressing any constraint or criteria that the user deems relevant","Etc.","A user might save contexts (a context being an application of one or more filtering criteria) so that she can refer to them by name and automatically invoke them by name. Although filtering might be handled automatically by the TCE, the user might explicitly drive the filtering process by entering keywords, or selecting from a variety of criteria. It is also possible that the TCE's proactive filtering and the user driven filtering might occur concurrently and\/or iteratively.","Task Specification","Task specification is the process during which the end user \u201ctranslates\u201d a task into a service (either an atomic service or a composite service). For that purpose, the user utilizes the services that are the output of the filtering process. This user-driven process can be thought of as one of specifying a workflow of services that when executed will accomplish the user's task. A service composition is the output of task specification; the task specification is a process during which the user (alone, or while collaborating with the TCE), browses through filtered services attempting to create a service composition that matches the task in the user's mind. Occasionally we might refer to task specification as task composition.","Task[R. M.3] specification relies on the input, output and other requirements of available services, in order to only present to the user feasible possible compositions. Such requirements include the types and\/or values of input\/output parameters, conditions for using, accessing, invoking a service, effects that the service might have if invoked, etc. The outcome of a task specification is a sequence involving multiple services (in the general case it is a directed acyclic graph) which is valid and that can be executed in its entirety. On occasion, the sequence might only be one service long, in the case that a user decides that an existing service or task matches the task that the user has in mind.","In specifying a task the user is aided by a user interface which attempts to present to the user the available services in a way that (a) assists the user in creating service compositions that can be executed correctly and (b) helps the user identify services most relevant to her task. This presentation ought to be dynamic in the sense that as the user's context, or even, as the user selects a different service (in a task specification) the available and relevant services should be updated. There are a variety of ways that the TCE can assist the user with respect to these goals. For example, the TCE can present services in pair-wise listings depending on the matching or perhaps partial matching, of output and input between services in the same pair; typically (but not exclusively), such matching relies on the semantics of the services and of their input and output parameters. Instead of using listings, the TCE might highlight services that can precede (or follow) a user-highlighted (or selected) service; again, for doing so, the TCE relies on the semantics of the services and of their input and output. Alternatively, the TCE might present the filtered services, in a hierarchy organized by either the type of service or of the type or value of any input or output parameter, or of some other service feature (location, fee, newness, prioritization, preconditions, effects, etc.). In general any or all of the criteria or means that can be used to filter services (per the discussion of the filtering stage) can be used to guide the presentation of services during the task specification process; such criteria or means can be used to organize the filtered services in a way that will make it easier for the user to select and match services for the purpose of fulfilling a task.","The ways that services can be composed in a workflow, generally will depend on the services' properties, such as their semantics. Specifically, parameters taken into account in order to decide how services can be composed, include any or all of the following: the data types of their data inputs and outputs, the semantic types of their data inputs and outputs, the conditions that have to be satisfied prior to executing the service and the effects of the successful execution of the service. Feasible and possible task specifications might be further restricted by domain-specific logic (for example, if a service prints documents, the domain of the service includes printers, printing and documents), or application logic, or business logic, or task logic (generally expressed in the form of statements in some logic). The aforementioned logic might describe additional restrictions to be observed while specifying a task from a collection of services. Such restrictions might include whether a service can be used more than once in the same task specification, or whether two services can be used together in a composition, etc.","We will refer to the parameters taken into account in order to decide the ways that services can be composed, as the composition logic.","One simple example of composition logic, that takes into account the semantics of the services, is one that matches the semantic output of a service to the semantic input of another service. If the semantic output of the first service matches the semantic input of the second service then there exists a partial workflow where the first service is followed by the second service. Thanks to the semantics, such a matching need not be exact, meaning that the matching between semantic types of input and output parameters might be inexat (for example, the matching based on semantic proximity), or that matching might take into account the relative positions of parameters into the relevant ontological hierarchies.","It is important to note that the user can save such compositions and give the names (for the task that they stand) for future use (like macros in applications). Such pre-compiled task specifications can also be saved and used as bookmarks in the user's TCE client. Users may choose to share such task specifications. As mentioned earlier, for task specification purposes, such previously defined macros, as just new services.","Another mode of task specification might not be user-driven but TCE-driven. In that case the TCE given the available services from the output of the filtering stage might suggest service compositions, or partial service compositions, that could be presented to the user for approval. Such compositions might or might not be eventually executed (see discussion of Task Execution next). The TCE might use any of the criteria or means that the user might use for creating service compositions, as discussed previously in this section.","Task Execution","Task execution is the step of executing a specified task. The input to Task Execution is typically the output of the Task Specification phase, which is a service. That service is either a composite service that was specified by the user during Task Specification, or an atomic service that corresponds to the user's task. The TCE is responsible for the execution, not the user, although the user might be required to provide supplemental input during the execution of the service composition or to act in order to manage failure or exception during this execution. For that reason Task Execution may be also thought of as a User-Monitored Task Execution, in the sense that it might not necessarily take place with the user in a passive role, waiting for the output of the executed composition, but she might have to provide input, select an alternative course in case of failure, cancel execution and go back to a discovery, filtering or task specification, etc.","Task execution entails passing proper input to services (while handling the necessary translations between systems and protocols in a way that is transparent to the end-user), requesting user input when necessary and carrying out all the actions involved with the composed task. These tasks present challenges due to the fact that a specified task has been specified using semantic information about the services it invokes and the input and output parameters of such services but on the other hand that semantic information is not what is used for the execution of the task. In other words, the service composition is an abstraction that by itself is not a piece of executable code. The TCE is responsible for translating the service composition to a series of actions and calls that can be directly used to execute the services involved in the task. A second source of challenges arises from the fact that just because a service composition is feasible (one of the goals that the TCE attempts to satisfy during the Task Specification stage) it does not mean that it will be executed correctly. Potential problems include erroneous semantic information about the constituent services, failures of the systems on which such services are actually running, network-related problems, etc.","So the TCE during Task Execution ought to handle grounding, i.e., binding the service in the task specification abstraction to the actual underlying service and its parameters, properly translating semantic terms (for input and output) to the actual syntactic terms that the service uses, or, translating between semantic objects that reference different ontologies.","One of the main technical challenges in Task Computing has to do with the fact that services are defined in semantic layer, so are the input\/output parameters of the services. However, when we invoke services, we must provide the syntactic parameters to the services because services are implemented in syntactic layer. Grounding is a procedure to transform a semantic instance into a syntactic instance.","The benefit of splitting the semantic layer and the syntactic layer is as follows. In some cases, although several services have the same semantic input, due to their implementation details, the syntactic instance could be different. We can group those services in semantic level without worrying about such differences.",{"@attributes":{"id":"p-0235","num":"0234"},"figref":"FIG. 12","b":["1200","1202","1204","1206","1208","1204","1206","1208"]},"If we do not split the semantic layer and the syntactic layer, three services are totally different. If we have an address object, it could only match at most one service. Now we have a more flexible framework. First, we define a \u201cSemantic Address Instance\u201d  is the semantic parameter of all three services. Next we create an instance mapping at the semantic layer. The mapping extracts the business address information from a contact item. In the figure, the mapping is represented by a dashed arrow. Started from the \u201cSemantic Address Instance\u201d, we define three groundings, one for each service. Groundings describe the details of transforming an address instance into a syntactic parameter and are represented by solid arrows.","Both semantic instance mapping and grounding are described in a semantic service description language  such as OWL-S. Since they are complicated to generate manually, a tool, namely OntoLink, is used. OntoLink has a powerful graphical user interface which helps user to define the relationship between two semantic instances and creates mapping and grounding afterwards.","Ontolink is a graphical tool for specifying mappings between (a) semantic descriptions of services and WSDL descriptions of services (this process is also known as grounding) and (b) between ontologies, or instances belonging in different ontologies. The output of the tool is a specification expressed in a language known as XSLT (known in the art).","OWL-S is a tool for describing ontological knowledge and is known in the art.","Also, the TCE needs to monitor service execution and provide for handling exception and failure. Exception and failure might occur at both the system layer (the system that is offering the service and its connectivity and\/or accessibility to the user), or at the service layer. When failure occurs at the service layer, such failure might be due to either an incorrect invocation of, or binding to the service, or it might be due to additional, unforeseen requirements and\/or credentials being necessary for accessing and\/or using the service. In any of these cases the TCE need to make an attempt to rectify the problem, which might include involving the user entering (perhaps) additional information and\/or taking some action; such actions might include a re-specification of the task.","Finally it is possible that Task Specification and Execution take place in an interleaved manner, i.e., a partial Task Specification is executed and the user goes back to Task Specification, extending the service composition, executing it, and so on. In other words, Task Specification and Task Execution need not be sequential stages of the Task Computing workflow, but they might take place concurrently, in either a user-driven, user-controlled manner, or in a semi-automated, but user-monitored manner.","Elements of a Task Computing User Interface","Each step of the Task Computing workflow should be manifested in the user interface. This does not necessarily mean that there is a distinct visual (in the case of a Graphical User Interface or GUI) or other elements dedicated to each of the steps of the Task Computing workflow. In fact, it is possible that multiple workflow steps might be presented at (or invoked through) a single user interface element.","A GUI for a TCE might employ multiple user interface features for assisting the user during each of Discovery, Filtering, Specification and Execution. Such features include drop down menus, search boxes, checklist buttons, icon highlighting with pop-up text, cursor over text, etc. For example, as the user moves the cursor (when using a GUI) over a graphical representation of a service, icons of other services that the cursor-indicated service might be matched with (preceding them or following them) might be highlighted. Or, when the discovered and filtered services are insufficient for the task that the user is attempting a \u201cSearch for more Services\u201d option might become available.","Enabling Services for Task Computing","While discussing the challenges of task execution we discussed the concepts of semantic service instance mapping and service grounding. The approaches discussed also assist users with incorporating new services into Task Computing, meaning providing to existing services an adequate semantic description so that the service can be used for Task Computing purposes.  display two possible ways.",{"@attributes":{"id":"p-0247","num":"0246"},"figref":["FIG. 13","FIG. 13"],"b":["1300","1302","1212","1304","1306","1302","1304","1306","1212","1306","1212","1306","1306","1212"]},{"@attributes":{"id":"p-0248","num":"0247"},"figref":["FIG. 14","FIG. 14"],"b":["1400","1302","1306","1306","1308","1304","1302","1304","1306","1306","1308","1302","1306","1212","1306"]},"These mechanisms are not usually employed by end-users, but they are mainly used by the providers of the services or third parties that have an interest in these services in order to make the services available for Task Computing.","The Service Description (we also refer to it as a S-Memo) itself is a file, or a pointer to a file that can be distributed from service owners and administrators to end users. As discussed, the S-Memo includes not only the semantic details of a service, but also the service invocation method. End-users can use a service for Task Computing if they have access to a S-memo. Even though while performing Task Computing end-users will discover services automatically, it is also possible that the end-users are explicitly informed of a new service through receiving a S-memo or a pointer to it. Such a memo can be distributed by e-mail, it can be automatically distributed by the service itself to users in the same subnet with the service, or passed from one user to the other.  describes these mechanisms.","More particularly,  shows end-user system development\/deployment based on S-memo . As shown in , the end user  may receive S-Memos from devices  through UPnP, from a developer\/IT department  through Email, and\/or from OS and applications from her own computing device. Then the end user  invokes the services of devices , services , and\/or services on her own computing device to accomplish her task. The end user may share S-Memos with other end users .","On Task Computing Environment (TCE) Embodiments","A Task Computing Environment (TCE), when viewed as an embodied system comprises the following:","One or more Task Computing Clients (TCC's)","One or more Semantically Described Services (SDS's)","One or more Semantic Service Discovery Mechanisms (SSDM's)","Optionally:","One or more Semantically Described Service Control Mechanisms (SDSCM's)","A \u201cTask Computing Client (TCC)\u201d is a client that supports the workflows associated with the Task Computing Environment.",{"@attributes":{"id":"p-0260","num":"0259"},"figref":"FIG. 16","b":["1600","1602","1302"]},"As shown in , a user  invokes tasks to, and receives presentations from, the task computing client (TCC) . The TCC  executes the tasks and receives services  and semantic service discovery .","TCC  functionalities includes, but not limited to, the following:","A User Interface (UI) that allows the user to interact with the major functionalities that the TCE supports (Discovery, Filtering, Composition, Execution). These functionalities are mapped to modules or engines that are user accessible through the user interface:","Discovery Function (DF) finds (services and) their associated descriptions; the above is true even if the DF only queries a third party as opposed to receiving itself announcements. TCC can have multiple DF's corresponding to the service discovery technologies (such as UPnP, Jini, Bluetooth SDP, etc.).","Filtering Function (FF) filters the discovered services depending on user preference and context.","Specification Function (CF or Task Specification Function) can match services given their semantics and allows a user to specify arbitrary and complex sequences (not necessarily linear sequences) of services for subsequent execution (tasks).","Execution\/Monitoring Function (EF) does the actual calling of services invocation interfaces, is responsible for coordination between called services during execution and manages the interaction of called services with the user during execution.","The minimally required functionalities of a TCC are Discovery Function (DF), Task Specification (TF) and Execution\/Monitoring Function (EF).","Components (modules) that implement the functionalities of a TCC can be physically located in a system other than the end user's device. For example, in one of our PDA implementations, all the components of TCC except for the User Interface (in that case a Web browser) execute on a separate computing device. Many of the TCC functions can be provided as services themselves.","The components (modules) that implement the functions of TCC can be owned and\/or operated by the different entities. Those components can again be discovered as services themselves.","A \u201cSemantically Described Service (SDS)\u201d  comprises one or more service invocation interfaces and their accompanying semantic-layer descriptions.","Service invocation interfaces can be implemented by any method\/mechanism for calling them (and\/or interacting with them) including but not limited to SOAP & WSDL, UPnP, JINI, RPC, RMI, CORBA, COM, DCOM, KQML, FIPA-ACL, etc. A service can have multiple service invocation mechanisms.","The service invocation interfaces need not to be on the same machine nor under the same managing authority as the service that they describe.","The semantic-layer description or \u201cSemantic Service Description (SSD)\u201d  of the service might include semantic description of its I\/O, process model, etc. using any appropriate semantic language. SSD's about services should include (at a minimum):","A semantic layer description of the service","How to execute the service","The semantic service description can be physically located anywhere. It does not have to reside in the same entity physically and logically as the service interfaces, nor does it have to be managed by the same authority that manages and\/or owns the implemented service and\/or its interfaces. For example:","Anyone can give an SSD (Semantic Service Description)  to a service invocation interface or a set of service invocation interfaces (interfaces can be distributed across multiple entities)","A TCC can keep SSD's internally.","Semantic service descriptions can be in any appropriate semantic language. An example of such an appropriate language is OWL-S. But, it is possible that the semantic description of the service is a simple proprietary language that only specifies explicitly the I\/O of the service, in which case any semantic language for describing the I\/O will suffice. (e.g., RDF, DAML, DAML-S, etc.)","A Semantic Service Discovery Mechanism (SSDM) is a mechanism to find SSD's. Optionally a SSDM finds the status (active, inactive, etc.) of the service.","There are many SSDM's. A TCC might employ multiple SSDM's and a service might be discoverable by multiple SSDM's.","In pervasive environments, UPnP, Bluetooth SDP, Salutation, Jini, Rendezvous are very dynamic SSDM's and actively inform other client devices about the presence of services). Generally speaking, a TCC, when using one of these mechanisms for discovering services that are available in the same subnet as the computing device that the TCC is executing.","For discovering services on the Internet, UDDI or a GOOGLE-equivalent for services can be used for service discovery; the TCC will query them for available services given search criteria.","Agent communication languages (KQML, FIPA ACL, . . . ) provide a vocabulary for querying agents on the network about services that the agents might be aware of.","For services that are running on the same computing device as the TCC, a variety of mechanisms exist, such as using the registry mechanism of the OS, or other mechanisms that we discuss later.","Also, the user types in\/cuts and pastes the URL or some kind of reference for the SSD of the service (such as the S-memo).","The user scans a bar-code associated with the service, on the device in order to get the URL, some kind of reference, or the description itself for the SSD of the service.","A Web Service (or any other remote procedure call mechanism) can be used as one of SSDM's.","Local cache for previously- or often-used services can be considered as one of SSDM's.","Local or remote databases for SSD's of well-known services can be considered as SSDM's. The discovery modules queries those databases for SSD's for a found service using the IDs specific to the discovery mechanism used to find the service. For example, assume a service is found through UPnP as a UPnP device. The discovery module tries standard ways of obtaining its SSD's. When the attempts fails, the discovery module queries the local and\/or remote databases for its SSD's using its Unique Device Name (UDN) of UPnP.","Definition (SDSCM)","A Semantically Described Service Control Mechanism (SDSCM) is a mechanism to let some entity (not necessarily a user of TCC nor even a human) to manage and control the provisioning of (create, provide, hold, remove, and etc.) SDS's.","SDSCM includes, but not limited to:","Semantic Instance Scraper for Applications","White Hole Service","PIPE (Pervasive Instance Provision Environment)","Notification services. Those do not use a subscription model, but notify the user by making the information providing service available as necessary.","Even though SDSCM is not an absolute requirement for task computing, SDSCM is crucial for creating a more dynamic Task Computing Environment. (More embodiments are given later.)","User Interfaces","As an important part of TCC, User Interface presents the discovery results to users, helps users to specify and submit a task for invocation. In this section, we give six versions of a User Interface for a TCC.","Full Version",{"@attributes":{"id":"p-0303","num":"0302"},"figref":"FIG. 17","b":"1700"},"There are five panes in this UI for this particular embodiment . The top left one is the discovery pane. It has a list that shows all services (functionality) that can be discovered. Above the list, there is a drop down list which allows users to sort the service list in different manners based on such as alphabetical order, service type, discovery time, etc. To view the detailed information, users single-click the service they are interested in, and details about it will be shown in the detail pane which is on the left bottom of the window. The center top one is the composition pane. In the composition pane, there are several groups that comprise object name, two drop down lists and two buttons. The services in the left drop down list are called consumers and the services in the right one are called producers. In each group, any consumer can be combined with any producer since the output from producer can be used for the input for the consumer. This enables for this UI to present more combinations in a compact display area. When the consumer\/producer pairs are seen from left to right, they are in the reverse order of the actual executions of the pairs. This is made intentionally so that the pair can be read as an English sentence (for example, \u201cOpen\u201d \u201cLocal File\u201d) as the producer can be easily perceived as a noun phrase while the consumer can be perceived as a verb or adjective phrase that acts on it. This allows the users perceive what kinds of tasks are available more quickly. For other languages such as Japanese that has the reverse order of verb and its objective noun, it should be presented in the order of their executions. The object name shown above the pair of drop-down menus (such as \u201cFile,\u201d \u201cSchedule,\u201d \u201cContact,\u201d etc.) is the object name of the output of the producer. The buttons in this pane are \u201cExecute\u201d and \u201cConstruct\u201d. When users click \u201cExecute\u201d the current selected consumer and producer will be combined as a task and executed. Or when users click \u201cConstruct\u201d, the current consumer and producer becomes the base for further construction and are shown in the construction pane. The construction pane is the right top one where users build a customized task. In the construction pane, the task that is currently being built is shown. Users may add a new service to the top\/bottom of the service sequence, or remove the first\/last service in the sequence by click buttons either in the tool bar or click the \u201c+\u201d or the \u201c\u2212\u201d button in the pane. Users can click the \u201cClear\u201d button in the tool bar to remove the current sequence and restart the building procedure. When the sequence is completed, users may click \u201cExecute\u201d button to execute it. The right bottom one is the information pane. In the information pane, TC operation messages are shown. And for each execution, a new tab will be added to the information pane, which displays the current execution monitoring information. The user can also begin a construction (task specification) by selecting a service from the discovery pane and the hitting the construct button.","As mentioned above, the panes are coordinated with each other so that the user can quickly accomplish her tasks.","When the user lets her cursor hover over one of the service names in the composition pane or construction pane, the description of the service taken from its SSD in OWL-S will be shown in a pop-up box.","Except the composition pane, any one of all other four panes can be hidden or shown by choosing the corresponding menu item.","A save pane can be also added to this user interface as necessary for the user to save the compositions she deems worthy.","Tab Version",{"@attributes":{"id":"p-0310","num":"0309"},"figref":"FIG. 18-22"},"Like full version, there are five panes in this User Interface. Each is a tab of a large form.  displays the discovery pane. A list in the discovery pane shows all services. Users can sort the list in six different orders by selecting the drop down list in the tool bar. To view more about a service in the detail pane, users can select the service and the \u201cDetail\u201d button. Users can construct a new task from a specific service. The way to do that is to double click the service and the construction pane will be popped up with the selected service in it. More particularly,  shows a user interface tab version (I) .",{"@attributes":{"id":"p-0312","num":"0311"},"figref":["FIG. 19","FIG. 19"],"b":"1900"},{"@attributes":{"id":"p-0313","num":"0312"},"figref":["FIG. 20","FIG. 20"],"b":"2000"},{"@attributes":{"id":"p-0314","num":"0313"},"figref":["FIG. 21","FIG. 21"],"b":"2100"},"When users are satisfied with the task, they click the \u201cExecute\u201d button to run the task.",{"@attributes":{"id":"p-0316","num":"0315"},"figref":["FIG. 22","FIG. 22"],"b":"2200"},"In this particular embodiment, each tab contained only one pane and  are executed in sequence as discussed herein above. It can be made so that a tab contains more than one panes related closely each other.","Flow Version",{"@attributes":{"id":"p-0319","num":"0318"},"figref":["FIGS. 23-33","FIGS. 27-33"]},"We next describe the user experience for the User Interface of  and for the User Interface of ).","There are two panes in this UI. The left pane contains a listing of all the services (functionality) that can be combined with the services (functionality) that appear in the right pane. The user may double-click a service (or click it a second time after it has been selected) in order to move it from the left pane to the right pane. To remove a service from the right pane the user can double-click it, or she can select it (by clicking on it) and then click the remove button at the top-right corner. Adding to, or removing a service from the right pane automatically updates the listing of services on the left pane. When a service is moved from left pane to right pane the TCC automatically arranges it in the correct position among the services of the left pane. If there are more than one correct position for the selected services, the user will be asked to choose one correct position to insert the service.","The sequence of services in the right pane should be read as an English sentence from top to bottom. When the sequence is \u201ccomplete\u201d, meaning it represents a composition that can be executed, as determined by the TCC, the execution button on the top-right corner will become active. Sometimes, as services are added onto the right pane, a \u201c+\u201d might appear between services; this means that one or more services will have to be added at the position of the \u201c+\u201d for the composition to be completed.","Whenever possible, i.e., the remaining service or services on the left panel can only be used in one composition in combination with the services on the right panel, the system will automatically complete the composition on the right pane.","While the user creates a composition, she may use the left and right arrows (on the top) to move back and forth in the composition creation process. The user can always start anew by pressing the restart button at the top-left corner.","The bottom of the UI window displays information about the current selected service on the left pane or, if no service is selected, information about the current state of the composition, such as the number of possible compositions (\u201cpossibilities\u201d). The bottom line of the UI window can be disabled by pressing on the help button; the bottom line will disappear and then the user can add and remove service by single-clicking on them (instead of double-clicking).","We next describe sample screenshots of the creation of a composition using the User Interface of , by elaborating on each of the Figures.",{"@attributes":{"id":"p-0327","num":"0326"},"figref":["FIG. 23","FIG. 23"],"b":"2300"},{"@attributes":{"id":"p-0328","num":"0327"},"figref":["FIG. 24","FIG. 24"],"b":["2400","2"]},{"@attributes":{"id":"p-0329","num":"0328"},"figref":["FIG. 25","FIG. 25"],"b":"2500"},{"@attributes":{"id":"p-0330","num":"0329"},"figref":["FIG. 26","FIG. 26"],"b":"2600"},"The User Interface of  operates in the same way as the one previously described, except that the icons have been replaced by buttons; the forward (right) arrow (and its functionality) and the help function (with the associated explanation at the bottom of the User Interface) have been omitted.","We next describe sample screenshots of the creation of a composition using the User Interface of , by elaborating on each of the Figures.",{"@attributes":{"id":"p-0333","num":"0332"},"figref":["FIG. 27","FIG. 27"],"b":"2700"},{"@attributes":{"id":"p-0334","num":"0333"},"figref":["FIG. 28","FIG. 28"],"b":"2800"},{"@attributes":{"id":"p-0335","num":"0334"},"figref":["FIG. 29","FIG. 29","FIG. 28"],"b":"2900"},{"@attributes":{"id":"p-0336","num":"0335"},"figref":["FIG. 30","FIG. 30"],"b":"3000"},{"@attributes":{"id":"p-0337","num":"0336"},"figref":["FIG. 31","FIG. 31","FIG. 30"],"b":"3100"},{"@attributes":{"id":"p-0338","num":"0337"},"figref":["FIG. 32","FIG. 32","FIG. 31"],"b":"3200"},{"@attributes":{"id":"p-0339","num":"0338"},"figref":["FIG. 33","FIG. 33"],"b":"3300"},"Web-based Version",{"@attributes":{"id":"p-0341","num":"0340"},"figref":"FIGS. 34-38","b":"1602"},"The device (such as a computer) that is executing (running) the Task Computing Client  also hosts a web server. Users can use PDA or Mobile Phone to talk to the web server to discover and filter services and to construct and execute tasks. The User Interface is designed in HTML, or any other web page designing language, so that it can be viewed with any web client application (such as INTERNET EXPLORER, NETSCAPE NAVIGATOR, OPERA BROWSER, MOSAIC, etc.).",{"@attributes":{"id":"p-0343","num":"0342"},"figref":["FIG. 34","FIG. 34"],"b":"3400"},{"@attributes":{"id":"p-0344","num":"0343"},"figref":["FIG. 35","FIG. 35"],"b":"3500"},{"@attributes":{"id":"p-0345","num":"0344"},"figref":["FIG. 36","FIG. 36"],"b":"3600"},{"@attributes":{"id":"p-0346","num":"0345"},"figref":["FIG. 37","FIG. 37"],"b":"3700"},{"@attributes":{"id":"p-0347","num":"0346"},"figref":["FIG. 38","FIG. 38"],"b":"3800"},{"@attributes":{"id":"p-0348","num":"0347"},"figref":"FIGS. 33-38"},"Menu-based Version","The user uses nested menus to compose\/construct\/execute tasks. It can be part of TCC, OSs, and applications. The nested menu is constructed dynamically from the available services to Task Computing Environment at that time. This nested menu is especially useful when they are used for the context menus for objects in OSs and applications. The nested menu is constructed for the semantic objects that particular object can be mapped into.",{"@attributes":{"id":"p-0351","num":"0350"},"figref":["FIG. 39","FIG. 39","FIG. 39"],"b":["3900","3910","3912","3910","3912","3910","3912","3914","3916"]},"If the composition ends with some output, the system can be set up so that either (1) the system does not show the \u201cExecute\u201d item in the right-click menu or (2) the system executes the composition anyway and ignore the output or (3) the system tries to compose automatically the services at the end of the given composition and then execute it.","The system can also be set up so that the Execute\/Construct\/Properties menu items  show up in the menu when (for example) the user's cursor hovers over the service for certain duration of time.","In the above description, we described the way to extend the composition starting from no-input services. We can also start, for example, no-output service and extend the composition in the other direction. Or we can start any service (that might or might not have input\/output), and let the user extend the composition both ways.",{"@attributes":{"id":"p-0355","num":"0354"},"figref":["FIG. 40","FIG. 40"],"b":["4000","3908"]},"In case of OSs currently widely available (Windows, Unix OSs, etc.), the file extension can be used to determine the semantic object into which the object is mapped into. For example, .jpg\/\u201cImage File\u201d, .mpg\/\u201cVideo File\u201d, .vcf (vCard)\/\u201cContact\u201d, .ics (iCalendar)\/\u201cSchedule\u201d and so on. In case of the file itself is already contains the semantic objects, one or plural of the semantic objects contained in the file are used for the services to composed. For example, owl file in OWL (Web Ontology Language) can contain semantic objects.","We can extend this approach to OWL-S files that describe the semantic services. When the user right-clicks an OWL-S file, it is going to show the services composable to the service the OWL-S file describes.","In case of applications, one can start the composition, for example, a contact or schedule item in personal information management (PIM) software. Or one can start the composition from the attachments in an email in email software. Web browser software can create icons or menus dynamically for the semantic or non-semantic objects it finds in the page or linked from the page, and let the user start the composition from there.","Command-line Version",{"@attributes":{"id":"p-0360","num":"0359"},"figref":"FIG. 41","b":"4100"},"It does not have to be always in the order of consumer to producer. The user can move the cursor to in front of some service and hit, for example, Shift-TAB to complete toward the left-side. It can be made so that the cursor jumps to only the service boundaries for the efficiency.","Detailed Description of Task Computing Clients (TCC's)","We next describe two Task Computing Clients in more detail. We will refer to them as TCC I and TCC II respectively.","These two make non-essential assumptions about the TCE, with respect to the technologies used by the Semantically Described Services (SDS's). Other technologies can be used interchangeably. Those assumptions are:","SOAP\/WSDL and UPnP for service invocation interfaces","DAML-S or OWL-S for semantic service descriptions","UPnP for service discovery of services in the same subnet as the TCC. Listening to a pre-assigned socket for service discovery of services running on the same device as the TCC.","The services available in this TCE consume and generate data that are semantically described in an ontology that is illustrated in .",{"@attributes":{"id":"p-0369","num":"0368"},"figref":"FIG. 42","b":"4200"},"In , \u201cThing\u201d is a class defined in RDF namespace, which is the root of all semantic instance classes. \u201cContact\u201d, \u201cSchedule\u201d, \u201cAddress\u201d and \u201cFile\u201d are four classes directly inherited from \u201cThing\u201d. \u201cFLA Location\u201d, which indicates the address within the FLA office, is a subclass of \u201cAddress\u201d. \u201cMedia File\u201d, which has three subclasses: \u201cAudio File\u201d, \u201cVideo File\u201d and \u201cImage File\u201d, is a subclass of \u201cFile\u201d. And \u201cWeb Page\u201d is another subclass of \u201cFile\u201d as well. Finally, \u201cAddress\u201d is a property of \u201cContact\u201d.","Task Computing Client I",{"@attributes":{"id":"p-0372","num":"0371"},"figref":["FIG. 43","FIG. 43","FIG. 43"],"b":["4300","4400","4302","4304","4400","4306","4304","4308","4400","4310","4312"]},"When a local service  is added to or removed from the TCE framework, a register or deregister message is sent to the local service manager . The local service manager  relays it to \u201cTCC I\u201d . For register message, the local service manager  also tells \u201cTCC I\u201d  where to find the SSD . For a pervasive service  and an e-service , the UPnP device module  is in charge of sending add or remove messages to the network environment, which is discovered by \u201cTCC I\u201d . For an add message, a UPnP call is provided. When \u201cTCC I\u201d  discovers the message, it will use the call to find the SSD  of the service. Normally, the SSD is in a web server module. Next \u201cTCC I\u201d  connects to the web server and retrieves the SSD .","From the SSD , \u201cTCC I\u201d  finds out the necessary information to invoke services. To invoke them, TCC I  directly submits local web service calls to local services, UPnP or WSDUSOAP service calls to pervasive services, and WSDUSOAP service calls to e-services.","TCC I  Components","Basically, TCC I  comprises five parts: Main logic with user interface, discovery and filtering engine, composition engine, execution monitor, and execution engine.",{"@attributes":{"id":"p-0377","num":"0376"},"figref":"FIG. 44","b":"4400"},"Main Logic with User Interface ","\u201cMain Logic\u201d  is the central part of TCC I  for two reasons.","Firstly, it provides a (G)UI module which manages the interactions with the user in the task computing environment and supports the workflows of Task Computing. Any of the user interfaces described earlier can be used as the medium for the TCC to interact with the user.","Secondly, the main logic relays messages for other modules and glues them into a complete system. It receives the discovery results and use composition engine's interface to register and deregister services; it queries the composition engine to get necessary service-related information and shows it to users; it helps users to design a task; it passes the task to the execution monitor to execute it; and it displays the monitor information and gives user a clear view about the execution.","Discovery and Filtering Engine ","\u201cDiscovery and Filtering Engine (DE)\u201d discovers services and retrieves the SSD's of services. The DE contains UPnP control points, which monitor the network and accept add\/remove messages issued by pervasive services and a local port listener, which monitors a pre-defined socket and accepts add\/remove messages from local services. When a new service is discovered, the DE also retrieves the SSD. For pervasive services, the DE makes a \u201cgetDescriptionURL\u201d call to get the URI of the SSD; for local services, the URI of the SSD is included in the message, therefore no further action is required. Then the DE tells the main logic about the changes along with the SSD if necessary.","Often-used remote ontology description files are installed in the ontology cache at the installation time of TCC I. In the composition engine, when a remote ontology file is required, a connection to fetch the remote version will be tried first. If the connection cannot be established successfully, the cached file is used instead; if the remote file is retrieved, the corresponding caches version is also checked to make sure that they are consistent with the latest version. If it is not, the cached version is replaced with the latest one.","Inference Engine (Composition Engine) ","\u201cInference Engine (IE)\u201d  parses the SSD of services and responds to service-related queries by other modules. It provides a standard interface for other modules to register and deregister a service. When a new service is registered, the SSD of the service is parsed and the service information is added into an internal knowledge base; when a service is deregistered, the information that is related to the service is removed from the knowledge base. The knowledge base is used to answer various queries, such as \u201clist all available services\u201d or \u201clist all service compositions\u201d or provides all pairs of matched services.","Prolog or some other languages can be used to represent the composition logic that determines how services can be matched against one another for composition (task specification) purposes. The prioritizations are also performed by the inference engine. The matches are prioritized based on such metrics as newness, exactness of match, and user preference","Execution Engine ","\u201cExecution Engine (EE)\u201d  parses execution plans and designs strategies to execute them. The strategies include the sequence of service invocation, parameter passing from one service to another, parameter transformation, and so on.","Then based on the strategies, it makes the appropriate calls to invoke the services, such as UPnP, WSDL\/SOAP, or any other remote procedure call interfaces, depending on the invocation interface that the service implements. It needs to have a very dynamic way of invocations. Namely it needs to make a call dynamically from the name of the function and the parameter list and not by calling a pre-compiled API.","It also needs to support asynchronous calls. In order to support such calls, it may include a JavaSpace-like component for asynchronous services, which can deal with UPnP Event callback, general polling, SMTP SOAP, and other mechanisms.","Execution Monitor ","\u201cExecution Monitor\u201d  is a module between the EE  and the main logic . It launches a monitor for each execution plan. Without a monitor, users may notice whether a task is successfully executed or not, but nothing more. With a monitor, users can check the status of a task: which service calls have been completed and which are not. If a task fails, the monitor tells user at which point error occurs.","TCC I Flow","Main Logic ",{"@attributes":{"id":"p-0396","num":"0395"},"figref":"FIG. 45","b":["4402","4402","4402","1","4402","2","4402","3","4402","4","4402","5","4402","6","4402","7"]},"Each one of the user's request - is handled in the main logic . If user wants to view the details of a service -, the information is retrieved from the composition engine and displayed in the GUI -. If user wants to design a new task, the current construction status is evaluated -, and all possible compositions are found from the composition engine -. The compositions are displayed in the GUI -, which help user to make decisions. If user plans to execute the constructed task or a given composition, a new execution monitor is generated - and the execution plan is sent to the monitor. It is the execution monitor that submits the plan to the EE -. The remaining work of the main logic is to display the monitor information - and to wait for new user's requests.","Discovery",{"@attributes":{"id":"p-0399","num":"0398"},"figref":"FIG. 46","b":["4600","4400","4404","4406","4400","4600","1","4400","4406","4600","2","4600","3","4600","4","4406"]},"TCC I  uses UPnP as the main method of service discovery for services in the same subnet as the TCC.","The discovery module implements UPnP control points to send queries to the network and search pervasive services. Sometimes services are slow in reporting their existence while being queried, or in some situation, the queries are ignored or missed due to various reasons. As the result, services may not be found in a prompt manner. We introduce the idea of multiple UPnP (or other service discovery) control points in the service discovery module. We start not one, but multiple (usually five to ten for TCC I) control points. Each one independently sends queries. The discovered results of control points are summarized in the discovery module and the duplicated messages are filtered. Experiments show that in this way, with slightly more resource consumption, the pervasive service discovery performance has been significantly improved.","When some services have trouble with providing valid semantic descriptions, they will be ignored by the discovery module. However, because of the attributes of UPnP, those devices will repeatedly announce their existence and the checking procedures following each announcement in TCC I consume a lot of resources. In order to address this problem, TCC I creates a black list to remember \u201cbad\u201d services along with time stamps which indicate what is the last time the services are discovered. Later, if a service in the black list is discovered again, TCC I compares the stored time stamp with the current time. If the time span is within a pre-defined bound, TCC I simply ignores the discovery message; otherwise TCC I will check the description again. If the description is valid at the recheck, TCC I will remove the service from the black list; or TCC I will update the time stamp as the current time stamp for the service and block it longer.","The discovery for local services works as follows.","A pre-defined socket is defined for this purpose. TCC I listens to the socket all the time. When a service is added (removed), the SSD of the service is copied to (remove from) a pre-defined directory (e.g. C:\\Program Files\\tce\\psmgr). Then a message is sent to the socket. The format of the message is \u201ca<SSD filename>\u201d (\u201cr<SSD filename>\u201d). When TCC I finds the message, it first knows that the SSD is at pre-defined directory+<SSD filename>. The TCC I registers the SSD for add message and deregister it for remove message.","Displaying discovered services","The discovered services may be categorized and\/or explained for the user's easier understanding and better decisions. Categorizations can be done several metrics including, but not limited to:","Input and\/or Output signature","Service Category","Internal, Local, Pervasive, Remote","Distance from the user","Free or For Fee","These categorization metrics can be set by the user a priori. The results of the categorization can be presented to the user by using, but not limited to:","Fonts (typeface, size, color, . . . ), background (color, pattern), frame (weight of the stroke, . . . ), voice (male\/female, pitch, speed), listing under the categories","Groupings based on the categorizations can be mapped into (G)UI elements such as drop-down menu.","Explanations for the service can be given in many ways including, but not limited to:","Pop-up menu when the cursor is over it or when any action is made for the service","Show it in certain fixed area such as a status bar","Separate page to show the details of the services","What can be in the explanations of the service include, but not limited to:","Detailed textual description of the service","Service categories","Input to the service and (the link to) its ontology","Output to the service and (the link to) its ontology","Process model of the service in text or in graphical representation","Other attributes\/parameters\/metric of the service","Multimedia (icon, voice, image, video, etc.) descriptions","(The link to) Its OWL-S file","Along with a text description, we made it possible for a service to have icon, image, video, and voice descriptions of the service in its SSD. In its SSD, the service can have links to those descriptions or descriptions themselves (maybe encoded in texts). Those descriptions support multimodal interfaces and navigate the users better. For example, we can create a voice interface for blind people or while the user is driving car. In other cases, we can use its video description as an instructional visual manual about how to use the service.",{"@attributes":{"id":"p-0429","num":"0428"},"figref":"FIG. 47","b":"4700"},{"@attributes":{"id":"p-0430","num":"0429"},"figref":"FIG. 48","b":"4800"},{"@attributes":{"id":"p-0431","num":"0430"},"figref":"FIG. 49","b":"4900"},"Filtering","Services are filtered based on parameters for services. Parameters in semantic service descriptions such as Service Parameters in OWL-S files are used for the filtering. Example filtering includes:","Location, especially relative to the current user location such as \u201cin the same room,\u201d \u201con the same floor,\u201d or \u201cin the same building.\u201d","Distance from the user.","In case of printing service","Printer Speed, Black and white or color, Free or for a fee, Estimated time for execution","Task computing environment provides the user dynamic ways and user interfaces of filtering services based on semantic service descriptions. Since the semantics of the service parameters are known, the user interface can support the user input by constraining it based on its ontology.",{"@attributes":{"id":"p-0439","num":"0438"},"figref":"FIG. 50","b":"5000"},"Search E-Services","For e-services, the search for those services will be the major conduit through which a particular service starts being used. After its initial hit or use, its semantic service description (SSD) can be kept in SSD cache. For our purpose, we assume there is some well-known SSD Repositories on the Internet that lets the user query for services. But UDDI, DISCO and other services search mechanism can be incorporated into the task computing environment. This is not limited to web services, but also includes other service invocation mechanisms.","This \u201csearch\u201d can be invoked mainly from Composition and Construct panes. One of the items in a pull-down menu for the services is \u201cSearch Web services\u201d. When this is chosen, it pops up a page to let the user search the e-service with the input and output fixed. In that page, the user can change, add, remove, or modify the conditions for the search if the user so wishes.",{"@attributes":{"id":"p-0443","num":"0442"},"figref":"FIG. 51"},"Composition","The composition engine (IE)  supports the Task Specification process. The composition engine  uses the SSD's of the discovered and filtered services and its composition logic, in order to determine how services can be composed. The matches are also prioritized based on such metrics as newness, exactness of match, and user preference. Other modules will query the composition engine about service matches.",{"@attributes":{"id":"p-0446","num":"0445"},"figref":"FIG. 52","b":["5200","4406","5200","1","5200","2","4406","5200","3","5200","4","5200","5","5200","6","5200","7"]},"The prioritizations of the compositions are based on the followings, but not limited to:","Newness of service discovered","Exactness of match","Quality of ontology translation","Frequency of usage","User preference","There can be incorporated learning mechanisms on the user's preference on the composition based on the feedbacks of the user's decisions from Main Logic module. Similar learning methods used in Japanese IME (Input Method Editor) can be employed.","Compositions may be filtered again based on the features as composed sets themselves such as:","Total cost","Total time to execute","Proximity of all the services in the composition set","The information on those features can be also provided for the users, for example, through a pop-up window when the cursor is hovered over the \u201cExecute\u201d button.",{"@attributes":{"id":"p-0459","num":"0458"},"figref":"FIG. 53","b":"5300"},"In TCC I, the compositions are grouped together based on the input\/output signatures. We can also group those compositions based on the service categories in SSD's such as \u201cViewer\u201d and \u201cPrint\u201d service categories (they both have the same input\/output type).","The results of compositions may be categorized for later presentation. As in the categorization for single services, categorizations can be done with several metrics including, but not limited to:","Service Category","Internal, Local, Pervasive, Remote","Distance from the user","Free or For Fee","These categorization metrics can be set by the user a priori like the case for the categorizations for single services.","In order to provide a sense of control for the user, how things are presented is very important and we take a great care in presentations and explanations.","We reverse the order of the composed services in the composition pane for easier understanding of the task. The order of execution, for example, is first \u201cFLA, URL\u201d and then \u201cView on Projector\u201d. But in the composition pane, the order in which the composition is presented is first \u201cView on Projector\u201d and then \u201cFLA, URL\u201d to match the order of English sentences.","For the composition and construction pane, service groupings based on the categorizations can be mapped into (G)UI elements such as drop-down menu.","How to present the user in an interactive way, how he\/she can interact with services is a crucial part of task computing. Other examples include:","Changes of prioritization based on the user's action are reflected in (G)UI. For example, if the user selects a service from the drop-down menu in the composition or construction pane, preceding or following drop-down menus change their orderings of their menu items based on prioritization","We have other unobtrusive ways of presenting the users necessary information for deciding which service or composition to execute. The information box pops up showing the description of the service when you choose a service from the drop down menu in the composition pane.","This human-readable description of the service is taken from its SSD.","We can also give the user clues on the service compositions. When the mouse cursor hovers over the \u201cExecute\u201d button, the pop-up box appears to show the total cost, estimated time, and other metrics for the execution of the particular composition.","Ontology Translation","By filling the gap between related instances in different ontologies, the system can enhance the utility of the system greatly. The different conceptualizations in the different ontologies can provide many ways of presenting the same information. For example, different conceptualizations for the address may result in the following (but not limited to):","(address) An example instance is (\u201c8400 Baltimore Avenue, College Park, Md., 20740-2496, USA\u201d)","(street-address, city, state, zip-code, country) An example instance of this conceptualization is (\u201c8400 Baltimore Avenue\u201d, \u201cCollege Park\u201d, \u201cMd.\u201d, \u201c20740-2496\u201d, \u201cUSA\u201d)","(street-address, city, state) An example instance of this conceptualization is (\u201c8400 Baltimore Avenue\u201d, \u201cCollege Park\u201d, \u201cMd.\u201d)","(street-address, city) This conceptualization assumes that every address it deals with is in Maryland. An example instance is (\u201c8400 Baltimore Avenue\u201d, \u201cCollege Park\u201d)","(street-name, street-number, city, state) An example instance of this conceptualization is (\u201cBaltimore Avenue\u201d, \u201c8400\u201d, \u201cCollege Park\u201d, \u201cMd.\u201d)","In order to fill the gap, we need to, (but not limited to):","Omit some part of information","Supplement additional information","Parse the textual parts","Reorganize","Information on how those ontology translation can be done might be provided internally, by SSD's, or externally (ex. search the Web services for ontology translation). The functionality can be provided by (, but not limited to):","XSLT","Code in Scripting language","References to local executables","The knowledge whether ontology translation between two objects is possible or not also affects service composition, too. Also some metrics on ontology translation can affect prioritization. For example, the composition with more accurate ontology translation involve might be more preferred over the composition with less accurate ontology translation involved.","Construction","If the user chooses so, the user can modify the service composition by adding, removing, changing services, etc. The services that can be added are filtered and prioritized based on their SSD's. With \u201cclick and choose\u201d operations, the user can easily modify the construction.","Services can be added not only to the beginning and the end of the composition, but between services as well. One example is the \u201cInstance viewer service\u201d (See \u201cSDS Embodiments\u201d), which always have the same input and output.",{"@attributes":{"id":"p-0495","num":"0494"},"figref":"FIG. 54","b":"5400"},"Execution","Both the semantic layer and the syntactic layer are involved in task execution. Task is defined in the semantic layer and the execution goes through the syntactic layer.",{"@attributes":{"id":"p-0498","num":"0497"},"figref":["FIG. 55","FIG. 55"],"b":["5500","5502","5504","5506"]},"The execution procedure is as follows. First TCC I  analyzes the SSD  of \u201cContact from Outlook\u201d  and knows that this service takes no input and return a contact item as output. Then TCC I  sends a web service call to \u201cContact from Outlook WS\u201d  with no input. After the web service is executed, the result is returned. Note that the result is a syntactic string. Then the grounding part of the SSD  of \u201cContact from Outlook\u201d  tells TCC I  how to map the string to a semantic \u201cContact\u201d object. TCC I  follows the instruction and generates a \u201cContact\u201d object and sends it to the second service, i.e. \u201cBusiness address of\u201d . \u201cBusiness address of\u201d  service indicates how to extract the business address from a contact item. TCC I  completes the operation and generates an \u201cAddress\u201d object from the input. The \u201cAddress\u201d object is then sent to \u201cRoute from FLACP\u201d . Similarly, after grounding, the \u201cAddress\u201d object is mapped to a syntactic string. TCC I then invokes a UPnP call and uses the string as the input. Finally, \u201cRoute from FLACP UPnP\u201d  completes the request.","Service Invocation","To execute a service in the task, the Main Logic module  determines which interface to call using the grounding information in its SSD . (There can be multiple interfaces for one service of the same type and different types. A service can have, for example, one UPnP interface and two WSDUSOAP interfaces.) Which grounding to call can depend on the followings, but not limited to:","System capability. For example, PDA might have only UPnP service invocation module and choose to use UPnP grounding.","System or user preference.","Many things can happen during the execution of the sequence of the composed services. The events include:","UPnP service became unavailable before the execution","Failed service invocation due to","Change of the location during the execution","Lost network connectivity","The user can execute the service composition without any intervention or the user can monitor the execution of the composition if the user so wishes. Through enough interactivity with the user through Monitor pane, we can make those events less painful for the user. Such interactivities include:","Notify the user if any of service yet to be executed becomes unavailable","Provide the user an easy way to reconstruct the composition as needed","After deciding which grounding to use, the system needs to unmarshall semantic instances used in the Main Logic module  into the parameters for the service invocations and marshal back the result of the invocation into the semantic instances. Marshalling\/Unmarshalling module does this by the ground information extracted from the SSD of the service about to be invoked.","Marshalling and Unmarshalling","Grounding information can be in (, but not limited to):","XSLT","Code in Scripting language","References to Web Services for marshalling\/unmarshalling","References to local executables","For example, the \u201caddress\u201d semantic instance with attribute\/value pairs of (\u201cstreet address\u201d, \u201c8400 Baltimore Avenue\u201d), (\u201ccity\u201d, \u201cCollege Park\u201d), (\u201cstate\u201d, \u201cMd.\u201d), (\u201czip code\u201d, \u201c20740-2496\u201d), and (\u201ccountry\u201d, \u201cUSA\u201d) might have to be unmarshalled into a set of parameters such as (\u201c8400 Baltimore Avenue\u201d, \u201cCollege Park\u201d, \u201cMd.\u201d) for a mapping service for USA addresses. Or the same \u201caddress\u201d semantic instance might have to be unmarshalled into another set of single parameter such as (\u201c8400 Baltimore Avenue, College Park, Md., 20740-2496, USA\u201d) for another mapping service.","Usually the difficulty is with unmarshalling the result of service invocation into semantic objects. Those cases may include unmarshalling the textual representation of information into more structured semantic instances. For example, an address providing service might give \u201c8400 Baltimore Avenue, College Park, Md., 20740-2496\u201d as a result for its invocation and it needs to be unmarshalled back into the \u201caddress\u201d semantic instance with attribute\/value pairs of (\u201cstreet address\u201d, \u201c8400 Baltimore Avenue\u201d), (\u201ccity\u201d, \u201cCollege Park\u201d), (\u201cstate\u201d, \u201cMd.\u201d), (\u201czip code\u201d, \u201c20740-2496\u201d), and (\u201ccountry\u201d, \u201cUSA\u201d). In such cases, we need some kind of functions or services to parse the textual representation. The function or the service may be provided through the code in some scripting language in the SSD, by a web service, or by a local executable. It will be invoked with the result of the service invocation (ex. a textual representation of an address) to obtain a semantic instance (ex. an \u201caddress\u201d semantic instance with attribute\/value pairs).","With parameters obtained in the previous step, the execution module invokes the service. The result is handed to Marshalling\/Unmarshalling module for marshalling into semantic instances to be consumed at the Main Logic module.","Asynchronous Service Invocation","Traditionally, the WSDL +SOAP web service invocation adopts a synchronous model, i.e. when the invocation request is sent to the web service, the results of the service are sent back as the response message. There are two drawbacks in this model. First, if the service takes very long time to be done, TCC may encounter the timeout message. Or if not, during the processing period, TCC has to wait for response, and can not do anything else. Second, during the service processing period, if more information is needed from the user, in the current model, it is very hard for the web service to get it.","In our TCE embodiment, we deal with the first problem by introducing asynchronous web service invocation. Asynchronous web service invocation works as follows. When TCC first submits a web service request, a unique id is generated by the web service and is given back to TCC as a reference. Later, TCC sends a new request to the web service with the id and checks whether or not the answer for the previous request is ready. There are three possible responses. If the processing has not been completed yet, nothing will be returned. Or if the processing has been completed, the answer will be returned. Or if there is an error during the processing, the error message will be returned. TCC may poll the web service in a given interval and handle other transactions between two consecutive poll operations.","The solution for the second drawback is as follows. In SSD of the service, we define an extra field called Service Control UI. Meanwhile, besides the web service, another web server is designed which allows the user to enter extra information and then the web server sends it to the web service.",{"@attributes":{"id":"p-0526","num":"0525"},"figref":"FIG. 56","b":["5602","312","5604","1602","5602","1602","5602","1602","5602","5602","5606","5606","5606","1602","5602","5604","5604","5604","5602","5602","5606","1602","1602","5602"]},"We have synchronous and asynchronous web service invocation, and we have optional extra web server support for some web services. How could the TCC  know which invocation method it should use for a given service?","One solution is to define everything in the SSD of the service. In the embodiment, we adopt another method.",{"@attributes":{"id":"p-0529","num":"0528"},"figref":["FIG. 57","FIG. 57"],"b":["5700","4400","5702","5704"]},"There are two ways to determine a service is asynchronous  or synchronous  and with or without the user interface. The first case is described above where the TCC inspects the description file (not necessarily a semantic one. For example, its WSDL file) and determines it by the additional names of interfaces available other than the name of the original interface it is about to invoke.","Another way to determine it is to use the SSD of the service. The SSD can have the description of how the service should be invoked along with how the service control page should be accessed.","When only single page interface is available, the following integration between the execution monitor page and the Service Control UI is extremely useful. For example, when the web-based UI is used, and the client devices are small devices such as PDA or Mobile Phone that allow very limited display spaces. As we discussed, to invoke a service with Service Control UI, user must go to the web server to enter extra information or to control the services. It means that in a web-based UI, a new browser has to be launched. However, in PDA or Mobile Phone, it does not support multiple browsers.","We modify the execution monitor in web-based UI to solve the problem.  show an example. This time, we execute a task with two services: \u201cJeff's File\u201d and \u201cView on browser\u201d. \u201cJeff's File\u201d is a server that allows user to select a file from a list and returns the file. \u201cView on browser\u201d is a server that display a file in a browser. Notice that user's choice is an extra input for the first service.",{"@attributes":{"id":"p-0534","num":"0533"},"figref":["FIG. 58","FIG. 58"],"b":"5800"},{"@attributes":{"id":"p-0535","num":"0534"},"figref":["FIG. 59","FIG. 59"],"b":"5900"},{"@attributes":{"id":"p-0536","num":"0535"},"figref":["FIG. 60","FIG. 60"],"b":"6000"},"Monitoring","Execution Monitor  is a module to show the information of the invocation of execution plans. After an execution plan is decided through composition and construction, a new monitor instance is created. A standard interface is defined between services and monitors so that the implementation details of execution monitor is hidden from TCC I . Service execution threads send messages to each monitor and the monitor display them in a user-understandable manner.","Many things can happen during the execution of the sequence of the composed services. The events include:","UPnP service became unavailable before the execution","Failed service invocation due to","Change of the location during the execution","Lost network connectivity","The user can execute the service composition without any intervention or the user can monitor the execution of the composition if the user so wishes. Through enough interactivity with the user through Monitor pane, we can make those events less painful for the user. Such interactivities include:","Notify the user if any of service yet to be executed becomes unavailable","Provide the user an easy way to reconstruct the composition as needed",{"@attributes":{"id":"p-0547","num":"0546"},"figref":"FIG. 61","b":"6100"},"Save","Composition can be saved as a macro if the user so wishes. But just saving a specific sequence of the services does not always make sense in the pervasive environment. Unlike the Internet environment where you have always connectivity to the services, you will find a different set of services in a different place. For example, \u201cView on Projector\u201d in one room and \u201cView on Projector\u201d in another room are independent services. Still it is extremely useful if we can use those services interchangeably in the sequence in the macro.","Therefore what we specify for each operation of the macro sequence is not always exactly a particular service, but the conditions for the services which are acceptable for the position. For example, instead of specifying the service exactly such as \u201cView on Projector in the room \u201d as a step in the macro sequence, we can have a condition such as \u201cservice of \u2018View on Projector\u2019 category with a resolution better than 1024\u00d7768\u201d for the step. We can go a step further by generalization. By expressing the specific service for the service as the condition, \u201cservice exactly matches with that specific service (or SDS)\u201d, we can say the every step in the macro sequence is a condition that the service for the step must satisfy. The difference between a \u201cservice exactly matches with a specific service\u201d and \u201cservice exactly matches with a specific SDS\u201d that the former addresses the match at the service invocation level (such as UPnP, WSDUSOAP) while the latter addresses the semantic level correspondence. An SDS can have multiple groundings in one or more service invocation technologies.","Those macros can also be services discovered in discovery of task computing workflow. When in a particular environment, availability of the services are checked, which satisfy the conditions for the steps in a macro. Only when all the services that enable the macro are available, it appears as discovered or available.","The conditions can range from the exact match (i.e. specifying a particular service), input\/output signatures, to the service category. The UI for specifying the conditions can be dynamically generated from the SSD's for the service in the position.",{"@attributes":{"id":"p-0553","num":"0552"},"figref":"FIG. 62","b":"6200"},"TCC II, Task Computing Client (TCC) II","TCC I, discussed herein above, is an embodiment of TCC. TCC II is another embodiment of TCC. The User Interface and other TCC modules of TCC II are running in different devices. This makes it possible for devices such as PDA (personal digital assistant), mobile phone or any device Web browser-enabled to access TCE over many kinds of communication links without installing TCC on the devices.","TCC II is designed for users who want to use task computing services but do not have TCE installed in their client-side devices. TCC II lowers the requirement of using TCE because all it needs is a web browser.","As an embodiment of TCC, TCC II has complete module of service discovery, service composition, service construction, and service execution. The most important difference is that TCC I is running on user's device and TCC II is running on a separate device, such as a FNS. TCC II has a build-in web server. Users connect to the web server to retrieve the service information and consume services.",{"@attributes":{"id":"p-0558","num":"0557"},"figref":"FIG. 63","b":["6300","6300","6304","1604","4400","6302","6300"]},"SSD Embodiments","As to the SSD (Semantic Service Description), we can rely on the standards like DAML-S and OWL-S. As to multiple natural language support in the SSD, A semantic service description can use Unicode or a particular natural language encoding to accommodate the description in one language. A semantic service description can use Unicode or some encoding that can handle multiple natural language encodings to have the descriptions in many natural languages in one SSD. In case of semantic service descriptions based on XML, one can use the \u201cencoding\u201d attribute for the tag you want to have in multiple natural languages. You repeat the tag with different \u201cencoding\u201d attributes with the corresponding natural languages.",{"@attributes":{"id":"p-0561","num":"0560"},"figref":"FIG. 64","b":["6400","6400"]},"As to TCC, TCC can use his or her own language, typically the selected natural language of the OS of their device. This makes it possible for each user accessing the same TCE may have a different \u201cview\u201d of the TCE according to the selected natural language.","SSD Cache","This SSD cache keeps SSD's for well-known, remote, or macro (previously saved) services. SSD's for well-known services are the SSD's for the well-known services without support for providing their SSD's. SSD's for remote services are the SSD's for remote services once or often used by the user. SSD's for macro services are the SSD's for macros saved in Save pane or obtained from other users or repositories.","SDS Embodiments","Next, we will give Semantically Described Service (SDS) embodiments. Services are abstractions of functionality that is of interest to the user. Such functionality generally emanates from at least three different types of sources: devices, applications and over-the-web e-services. These three sources are loosely defined categories, as the boundaries between these categories are highly malleable. Broadly speaking, device-originating services are associated with the core functionality that the device is designed to deliver; for example, a phone's (device) main functionality is making phone calls (service). Similarly, application-originating functionalities are associated with a computing application that is executing on a computing device; for example a Personal Information Management (PIM) application's functionalities, includes storing and retrieving contact information of persons. Finally e-services functionality is associated with web services that are executing on some remote server and deliver the functionality through access to the web, beyond the boundaries of a user's local network. This broad categorization is only offered as rough way to distinguish between the nature of services. It will be often be the case with the services described next that they belong in multiple categories. For example a video streaming service that is associated with the user's home stereo, is typically a device service when the user uses it while at home but it can also be viewed as an e-service when the user uses it while at work to stream a song from his computer to his home stereo for his roommate to listen to.","It should be noted again how fluid these distinctions are; manufacturers offer smarter consumer devices, often with network access (for example network appliances), and software companies develop applications that attempt to deliver consumer-device type functionality (MICROSOFT's Media Player, for viewing DVD's or listening to CD's). It is worth noting that in Task Computing the origins of such functionality is irrelevant to the user as the user is only interested in combining such functionality for the purposes of defining a task.","Device-based Services","View on Display","This service displays web pages or various kinds of documents on a device such as a projector, a plasma display, an LCD display. It accepts a URL as input and provides a control panel to the user. When it is invoked with a URL pointing to a webpage or a document, the displaying device shows the web page or the document. The user can control the displaying device through the control panel. Through its control panel, she can move the page up and down, follow a link to a new the web page, load a new URL, and so on.","View on Multiple Devices","This service displays web pages or various kinds of documents on multiple devices such as a projector, a plasma display, an LCD display. The devices show exactly the same content. The devices can be dispersed geographically as long as they are connected by a network with the location where the service is running. The service accepts a URL pointing to a webpage or a document as input and provides a control panel to the user. When it is invoked with a URL, multiple devices show the web page or the document. The user can control the devices simultaneously through the control panel. Through the control panel, she can move the page up and down, follow a link to a new the web page, load a new URL, and so on.","Map Viewer","(A) This service shows the map around the location specified by the user on its display with the location marked. It accepts a location or an address as input and provides a control panel to users. (B) This service shows the map around the fixed location or address on its display with the location marked. It accepts no input and provides a control panel to users.","Map Router","This service shows the route between two locations on its display. The service accepts one or two locations or addresses, or the list of locations or addresses and provides a control panel to users. The service provides the route (A) between a fixed location or an address for the service and the user-specified location or address, (B) between two user-specified locations or addresses, or (C) displays a route between all locations or addresses in a list of such (optionally using a fixed location as the starting or ending point). It is sometimes important for the service provider to limit the starting location or the goal location to a fixed location for the service since it will prohibit its unlimited use of the service as a general mapping service.","Floor\/Campus\/Building\/Museum\/Mall\/Hospital Map Viewer","This service is essentially same as \u201cmap viewer\u201d service except the map has more structure in it than a road map.","Instance Providing Service","This service provides a semantic instance. (A) It accepts no input and produces a URL as output which points to the semantic instance (which in turn is usually served by the Web server on the same machine). (B) It accepts no input and produces a semantic instance (such as OWUDAML instance) as output. The service can be used to provide semantic instances pertinent to the pervasive environment such as the contacts of the people on the floor or schedules for the particular room. This service can also be used to provide the list of semantic instances of the same kind such as a list of contacts or schedules.","Print","This service prints the file specified by a URL. (A) It accepts a URL and has no output. When it is invoked with a URL, it prints out the fixed number of copies of the file specified by the given URL in a fixed format. (B) It accepts a URL and has no output. When it is invoked with a URL, the display shows a print option box to let users set the printing parameters and then to print out the file specified by the given URL. (C) It accepts a URL and produces a control panel as output. When it is invoked with a URL, it returns a control panel to let users set the printing parameters and then print out the file specified by the given URL.","Print Name Card","This service prints one or more name cards from a given contact. (A) It accepts a contact and has no output. When it is invoked with a contact, it prints out a fixed number of name cards for the contact in a fixed format. (B) It accepts a contact and has no output. When it is invoked with a contact, the display shows a option box to let users set the parameters for name card printing and then to print out the name cards accordingly. (C) It accepts a contact and produces a control panel as output. When it is invoked with a contact, it returns a control panel to let users set the parameters and then print out the name cards for the contact accordingly.","Fax","This service faxes the file specified by a URL to a specified telephone number. It accepts one or multiple URL's and one telephone number as input and produces no output or a control panel for the user to control the service as output. When it is invoked with one or more URL's and a telephone number, it faxes the printout image(s) to the specified telephone number. When the control panel is returned, the user can control how the faxes are sent or specify the cover pages for the faxes.","Play Video Service","This service lets the user play videos. It accepts one URL as input and either it produces no output or it produces a control panel for the user to control the service as its output. When it is invoked, it plays the video file indicated by the URL. When the control panel is returned, the user can control how it is played on the device.","Play Audio Service","This service lets the user play audios. It accepts one URL as input and either it produces no output or it produces a control panel for the user to control the service as its output When it is invoked, it plays the audio file at the URL. When the control panel is returned, the user can control how it is played on the device.","Digital Photo Frame","Digital Photo Frame accepts an image file as input and returns a control panel as output. It shows the image file in its display (often in a photo frame form) and lets the user control the orientation, zoom level, print the image, etc. through its control panel.","Location Determination","This service provides the current location of the device (therefore of the user who uses it). It accepts service-specific parameters and produces a location. Parameters can be the MAC address of the WLAN card or the list of pairs of access point MAC address and its signal strength. When it is invoked, it produces a location, such as a link into a location ontology.","Directory Publisher","This service publishes a set of objects: files, contacts, schedules, addresses, and so on. As a semantic service, it requires no input and returns an object (such as a file, a contact, a schedule, an address, and so on) as its output accordingly. When invoked, it lets the user select a single object from the object set and then returns user's selection.","Bank (Thing\/Service)","This service lets users dynamically create a SDS from an object or the SSD given as its input to share with other TCE users or for later use themselves. While the service is invoked, users may use the control panel to set the password, expiration, limit on invocation count, discovery mechanism to use, and other properties of the SDS, to be newly created by this Bank service.","Normally, Bank service is helpful in three different ways.","Firstly, Bank for services is very useful when the user creates a particular task pertinent to the pervasive environment and then wants to use the task represented by the semantic service composition in the environment later. A task itself is a service. This scenario can be easily realized by using Local Service Selector and Copy Service Locally along with the Service Bank. Service Bank can be specialized by making the service accept only services with certain characteristics such as free\/for a fee, estimated time for execution, and providers of the service.","The second way of using Bank service is to create a SDS by providing the SSD given as its input through the selected or default service discovery mechanism.","Finally, the user can leave files, URL's, contacts, schedules, services, and other semantic instances pertinent to the environment through Bank service. Bank can be made to provide each instance by an individual service or to provide all the instances of the same kind in one or more lists. When the service can have multiple lists, the user can create a list for the instance the user adds or the user can add the instance to one of the existing lists. By using this type of services, for example, the user can leave a presentation file in the conference room, which is often used in the room. Or after setting up the next meeting in the same room at the end of a meeting and inserting the schedule for the next meeting in the calendar program, the user can leave the schedule in the room for other users who come to the room. (In this case, the utility would be higher if the Schedule Bank used is hooked up with schedule management system for the room, which has remotely accessible interface.)","When the input is a \u201cFile\u201d object, Bank service can be set up so that it copies the file locally and provides the file from the same machine the Bank service is running.","The Banks can be combined with some relevant back-end systems for more utility. For example, file system for a file bank and contact\/schedule management software for contact\/schedule banks.","This service is also an SDSCM. Refer to the descriptions of Bank in \u201cSDSCM Embodiments\u201d for SDSCM aspect of Bank services.",{"@attributes":{"id":"p-0606","num":"0605"},"figref":"FIG. 65","b":"6500"},"Telephone Dialer Service","It accepts a telephone number as its input and returns nothing. When invoked, it will dial the number on the phone device (can be analog\/digitalNoiP) for the user.","Wireless\/Wired TC Storage","This is best implemented in the current small USB storage form factor, but it can be in any form factor. It comes with (1) network interface (2) [Optionally] Folder Publishing Service (3) [Optionally] Save in Folder Service (Maybe of a specific file type such as image or audio) (4) [Optionally] Bank Service. The services, (1) to (3) may be of a specific file type such as image or audio or can provide the separate services for the different file types.","The network interface can be Ethernet (wired), wireless LAN, Bluetooth, or InfraRed. In cases of wireless LAN network interface, it might be acting as an access point or can be in ad-hoc mode so that other devices can get on the network (in the infrastructure mode or the ad-hoc mode) to connect to the device). In other cases of wireless LAN network interface, it may try to get on the network it finds or have simple interface (on the device itself or over the wireless) to configure the SSID and\/or WEP key of the network the device is supposed to connect.","Copy to Removable Storage","This service lets the user copy files onto removable storage such as Floppy disk, CD-R\/CD-RW, DVD-R\/-RW\/-RAM\/+RW, memory cards, USB storage (usually for a fee). It accepts one or multiple URL's as input and produces no output or a control panel for the user to control the service as output. When it is invoked, it copies the files specified by URL's to the removable storage. When the control panel is returned, the user can control how the copies are done. (such as to make the Audio CD, Photo CD, simple data disk)","Emailer (Pervasive)","This service lets the user send an email to a specified email address. It accepts an email address as input and has no output. When it is invoked with an email address, it pops up a dialog box to let the user input\/edit messages and send it to that email address.","Other two possible embodiments for Emailer (Pervasive) is as follows: (A) It accepts an email address as input and produces a URL as output. When it is invoked with an email address, it returns a URL to a Web page that let the user edit and send an email. (B) The service has its own display and user input devices such as keyboard and mouse. It accepts an email address as input and has no output. When it is invoked with an email address, the display shows a window in its display that lets the user edit and send an email.","Application-based Services","Internal Services","The following services are implemented internally for TCC I for maximum efficiency.","List Chooser","This service lets the user choose an item from the list of instances of the same kind. The service might also let the user sort the instances based on one or more of its attributes.","Property Chooser","This service lets the user choose one of the attributes (or properties) from the instance. This service can also be invoked with an attribute to choose from. In the latter case, it will be executed without any user intervention.","Your Input","Based on the ontology of any object, this service lets the user input the values for the attributes of the object and produces the instance with those values. This service can be made so that it usually appears along with other instance providing services as a service that provides the same kind of instance.","Instance Viewer","This service lets users check and modify the instance. It can also be used as a debugging tool. Since it has the same signature for input and output, the service can be inserted between any services or appended at the end.","Local Services","The following services are applications running at the same machine as TCC I for maximum efficiency. Everything that appears as an item in the context menus, task menus in Windows OS's can be made into a local service in the Task Computing Environment. Some of the local services are listed below.","Local Instance Selector","Local Instance Selectors are the services that let the user select one or more instances local to the computing devices and make those instances available as semantically described instances. Local Instance Selectors include, but not limited to, Generic Local Instance Selector, Local File Selector, Favorite URL Selector, Contact Selector, Schedule Selector, Address Selector, and Local Service Selector.","Generic Local Instance Selector","Generic Local Instance Selector lets the user choose any semantic instance available locally for the computing device. This service can be realized by combining all other available Local Instance Selectors local on the computing device.","Local File Selector","This service lets the user choose a local file and expose it globally through the local web server. It accepts no input and produces a URL as output. When it is invoked, it pops up a dialog box to let the user choose a local file, copies the file to the Web folder, and returns the URL to the file.","Favorite URL Selector","This service lets the user choose a URL from Favorites folder (or any folder) and provides the URL. It accepts no input and produces a URL as output. When it is invoked, it will pop up a dialog box to let the user choose a URL from Favorites folder (or any folder) and returns the URL.","Address Selector","This service lets the user choose an address and expose it globally through the local web server. It accepts no input and produces a URL as output. When it is invoked, it pops up a dialog box to let the user choose an address from, for example, your contact management system, copies the information as a semantic instance to the Web folder, and returns the URL to the semantic instance or the instance directly.","Contact Selector","This service lets the user choose a contact and expose it globally through the local web server. It accepts no input and produces a URL as output. When it is invoked, it pops up a dialog box to let the user choose a contact from, for example, your contact management system, copies the information as a semantic instance to the Web folder, and returns the URL to the semantic instance or the instance directly.","Schedule Selector","This service lets the user choose a scheduled event and expose it globally through the local web server. It accepts no input and produces a URL as output. When it is invoked, it pops up a dialog box to let the user choose a schedule from, for example, your schedule management system, copies the information as a semantic instance to the Web folder, and returns the URL to the semantic instance or the instance directly.","Local Service Selector","This service lets the user choose SSD's from caches, local databases, file systems or anywhere local to the computing devices and make the services described by the SSD's available as semantic instances.","Semantic Instance Copier","Semantic Instance Copiers get the semantic instances produced by other services and copy them locally into the applications appropriate for the type of the semantic instances. It can execute its function with or without user intervention. In the former case, a pop-up window or some other user interface lets the user modify the object, decide how and where the instance is copied, or cancel the copy procedure. Semantic Instance Copiers include, but not limited to, Generic Semantic Instance Copier, Copy Locally, Add URL to Favorites, Insert into Contact List, Insert into Schedule List, and Copy Service Locally.","Generic Semantic Instance Copier","Generic Semantic Instance Copier lets the user copy any semantic instances into appropriate applications. This service can be realized by combining all other available Semantic Instance Copiers local on the computing device.","Copy Locally","This service lets the user save the file specified by a URL. It accepts an URL as input and has no output. When it is invoked, it pops up a dialog box to let the user choose where to save the file specified by the URL.","Add URL to Favorites","This service lets the user save a URL in Favorites folder (or any folder). It accepts a URL as input and has no output. When it is invoked, it pops up a dialog box to let the user save the URL with the user-specified name in Favorites folder (or any folder).","Insert into Contact List","This service lets the user insert a contact into the contact management software (for instance, MICROSOFT OUTLOOK). It accepts a contact as input and has no output. When it is invoked with a contact, it will insert the contact into the contact management software. Optionally it might pop up a dialog box to let the user check and modify the contact information.","Insert into Schedule List","This service lets the user insert a schedule into the schedule management software (for instance, MICROSOFT OUTLOOK). It accepts a schedule as input and has no output. When it is invoked with a schedule, it will insert the schedule into the schedule management software. Optionally it might pop up a dialog box to let the user check and modify the schedule information.","Copy Service Locally","This service lets the user copy SSD's provided by other services as semantic instances into caches, databases, file systems or anywhere local to the computing device.","Emailer (Local)","This service lets the user send an email to the specified email address. It accepts an email address as input and has no output. When it is invoked with an email address, it pops up a dialog box to let the user edit and send an email.","URL Viewer (Local)","This service lets the user browse the Web page specified by a URL. It accepts a URL as input and has no output. When it is invoked with a URL, it pops up a browser set to the Web page and lets the user browse it locally. Currently we invoke MICROSOFT INTERNET EXPLORER with the URL specified for this service.","Location Determination (Local)","This service provides the current location of the computing device (therefore the user who uses it). It accepts no input and produces a location. When it is invoked, it produces a location, which is a link into a location ontology based on Mini-beacon, GPS, etc. (Client-side location determination technologies). Location determination service based on user input, pops up a dialog box or a map to let the user specify the location when it is invoked.","Database Publisher (from Table, Item)","By specifying a whole of or part of a table from a database, the database publisher automatically creates an ontology based on the schema of the table and publishes a semantic service that lets the user choose an object from the whole or the part of the table in the database and output the selected object as its output.","Or by specifying an item out of a table from a database, the database publisher automatically creates an ontology based on the schema of the table and publishes a semantic object providing service that produces the selected object as its output when it is executed.","Web-based Services (E-services)","Place Information","This service provides information related to a given location, such as devices in the room, closest bathroom, who occupied the room. It accepts a location as input and produces a URL to the Web page with the information as output.","Hosted Services","Hosted services are services specially designed for TCC II. They include \u201cUpload File,\u201d its variant such as \u201cUpload Audio File,\u201d \u201cURL to input,\u201d \u201cView on Browser\u201d and its variants such as \u201cPlay on Browser\u201d. \u201cUpload File\u201d and \u201cURL to input\u201d let the user upload a file from the user's device and an URL and return them respectively as their output. Hosted services use the service control UI to accomplish their functionalities.","\u201cView on Browser\u201d receives a \u201cFile\u201d and returns nothing. \u201cView on Browser\u201d simply lets the user view the file on the same browser as TCC II. \u201cView on Browser\u201d is implemented as a synchronous Web Service with UI. It redirects the service control UI access to the input URL.","Remote Services","Remote services (here by this we mean Web services realized by WSDUSOAP interface) are usually introduced into the Task Computing Environment through the semantic service search. But on some occasions, remote services might be suggested without any semantic service descriptions (SSD's). In these cases, TCC I attempts to get their SSD's by trying to download them by changing the extension of their WSDL URL's or searching well-known sites for their SSD's.","Well-known Services","For well-known services, we can keep their semantic service descriptions locally or at some known sites. When we come across such services (UPnP, WSDUSOAP, etc.), we can use those SSD's to incorporate those services in our Task Computing Environment.","The TCC I might have SSD's for well-known remote services such as AMAZON.COM or GOOGLE in its cache and let the user use those services as other SDS's. Or if the TCC I comes across a WSDUSOAP service without any SSD, it can still use the service as a SDS by dynamically creating a SSD.","SDSCM Embodiments","In this chapter, we will give Semantically Described Service Control Mechanism (SDSCM) embodiments. A Semantically Described Service Control Mechanism (SDSCM) is a mechanism to let some entity (which can be a user of TCC or any software) manage the services by including, but not limited to:","Create services","Change discovery mechanism for the service to use","Hold services","Remove services","Modify parameters for services including:","Set the timeout for services","Set the access controls for services","Set the availability for services (local, global, authenticated user, etc.)","SDSCM's can be accessed in many ways including, but not limited to, through user interaction with user interfaces SDSCM's provide, through local API's, and through service invocation mechanisms. The last method of interaction with SDSCM's (i.e. through service invocation mechanisms) enables SDSCM's to be treated as SDS's with appropriate SSD's.","We list below some of the embodiments of SDSCM's.","PIPE (Pervasive Instance Provision Environment)","PIPE is a tool to publish and manage semantic instances and semantic services. PIPE itself can be considered as an SDSCM since it is providing a Web Service API to create and manage SDS's. It has two major functions.","Firstly, as a management tool, PIPE gives users sophisticated control over instances and services.",{"@attributes":{"id":"p-0695","num":"0694"},"figref":"FIG. 66","b":"6600"},"Secondly, it works as the core of other SDSCM's. A web service interface is defined in PIPE and other applications, such as White Hole or Image Service, publish services\/instances through the interface.","In many services, it needs to dynamically change the IP addresses in their SSD's. On the other hand, the user can have zero-configuration TCE if TCE components can accommodate IP address changes automatically.","It is a very important issue for PIPE which provides many semantic object providing services. PIPE runs a separate thread which monitors the possible IP address change. If the IP address change happens, the applications will do the corresponding changes. For example, SSD's are represented by template files in which any occurrence of IP address in the file is represented by a token. When the PIPE is initialized, the token is replaced by the real IP address. After the IP address change is detected, the templates are loaded again and the new IP address is used to generate the latest version of SSD's.","Another way (though slow) is to have only templates. Only when the request for the SSD's is received, it checks the IP address and uses the IP address to generate new SSD's.","Semantic Instance Scraper for Applications","The service scrapes semantic instances found in the application the user is currently using and makes them available locally and globally (or for restricted people\/devices). Semantic instances can be scraped including, but not limited to, from some semantic descriptions or from syntactical analyses of texts and objects. It can be made so that it will cache the semantic instances for a while (for example, a day) even after the user goes on to other activities. Some of the applications the scraper will be implemented for, include, but not limited to:","Web Browser","Emailer","Spreadsheet","Word Processor","Database","Presentation","The scrapers will invoke an API of PIPE to publish the scraped semantic instances.","White hole (Thing, Service)","White hole service uses a drag-and-drop interface to publish objects and services. The objects from OS's and applications, such as files, URL's, contact items from contact management software, schedule items from schedule management software, can be dropped into the White hole dynamically. The White hole will analyze the dropped object type and generate the corresponding semantic instance accordingly. In case the dropped object is a SSD file or an URL to an SSD, it will use the SSD respectively.","It has its Management Interface (basically PIPE) to publish and manage the services. It also enables the user to set, along with other parameters, the default time to make the items unavailable and\/or removed. White hole is very useful in the PP (Peer-to-peer) environment where this service enables the users to exchange the information dynamically.",{"@attributes":{"id":"p-0712","num":"0711"},"figref":"FIG. 67","b":"6700"},"Public Contact\/Schedule\/File Directory","This SDSCM lets the user make a contact or schedule or file directory available globally through the display for the service. The SDSCM is a special use of the white hole SCSCM along with Contact\/Schedule\/File Management Software in a public space. By default, the service disappears after a certain period of time. This service is best fit to the public spaces such as malls, tall buildings, and campuses.","Semantic Instance Bank Service","File Bank","URL Bank","Contact Bank","Schedule Bank","Address Bank","Service Bank","This category of services let the user to deposit one or more files, URL's, contacts, schedules, addresses, services, or any other semantic instances in the environment. It accepts one or more URL's, URL's, contacts, schedules, addresses, services or other semantic instances as input and produces no output or a control panel for the user to control the service as output. When it is invoked, it copies the instances and creates a service providing the instances. It uses PIPE to publish those instance providing services and let other people use the PIPE to manage those newly created services.","This service is also an SDS. Refer to the descriptions of Bank in \u201cSDS Embodiments\u201d for SDS aspect of Bank services.","Universal Bank","This Universal Bank service is the most general of all Semantic Instance Bank Services. This service matches any service producing any semantic instances. (The service accepts \u201cThing\u201d which is the super class of all objects.) When it is invoked it copies the instance and provides the instance along with an SDS for the instance providing service. When it is running as an internal or local service, it can act as a semantic instance cache.","This Universal Bank does not eliminate the needs for more specialized Banks such as banks for file, schedules, because in some environments, it is not always desirable to let the user leave any kind of object in the environment.","Image\/AudioNideo Service Control","This type of SDSCM lets the user create multimedia contents and the SDSCM automatically makes the multimedia contents available as semantic objects providing services for those multimedia contents. Or the SDSCM lets the user make the multimedia contents available and control how they are made available.","For example, Scan SDSCM lets the user scan his or her material and expose the scanned data as Image Instance providing service. The display lets the user set the scanning parameters and try scanning until he or she is satisfied. When the result is satisfactory, the user can make the data available pervasively, for example, to copy the data locally (by combining with it \u201ccopy locally\u201d service). The user can set the temporary password on the display. The service can charge the user based on the number of page or amount of the data.","Digital cameras and video camera SDSCMs can create Image and Video Instance providing services as Scan SDSCMs. Or digital audio recorder SDSCM can create Audio Instance providing services.","Removable Media Publisher","When the user inserts or connects a removable media into the computing device, this removable media publisher asks the user if the user wants to publish the files on the removable media. For example, the user inserts an audio CD into a computer, and then the removable media publisher asks the user if she wants to publish the audio files on the audio CD as an audio file providing service that lets others choose the audio file from the audio CD and produces the selected audio file as its output. Other possibilities include: (1) the removable media publisher to publish an image providing service when the user plugs in a USB digital camera into the computer (2) the removable media publisher to publish a certain type of file providing service when the user connects a storage card to the computer. In case (2), you can make it so that the removable media publisher publishes multiple types of file providing services if it finds multiple types of files in the storage card.","The removable media publisher can be made so that it launches a publishing service(s) automatically when it detects some removable media is inserted or connected to the computer.","Fax Receiver","Fax SDSCM creates Image, File, or Fax Data instance providing service when it receives a fax. It creates multiple image instance providing services for multiple pages or creates a file instance providing service for such as a PDF file to include all the fax pages, or Fax Data instance providing service specialized for fax data. It can be combined with OCR (optical character recognition) service to produce more structured object for the fax data including sender's information, title, memo, etc.","Control Panel Handover","Control Panel Handover is an SDSCM to hand over the service control user interface from one user to another. This is applicable to any SDS with a control panel, such as \u201cView on Display,\u201d \u201cMap Viewer,\u201d \u201cMap Router\u201d. The service provides a \u201cHandover\u201d button on its control panel. When the user clicks the button, a new service (or new services) is created that provides the URL to the control panel. Other user(s) can check the newly created service and combine it with some viewing services to display the control panel and then control the original SDS.","The newly created service can be designed so that it disappears after a certain number of invocations to limit the number of people that get the access to the control panel. (Usually set to one). The service can also be set to expire after certain period of time so that it is only valid for a given time period. It can be made so that the control panel that the original user was using closes automatically or asks the user if she wants to close it and closes it if the answer is yes or keeps it if the answer is no.","Walkthroughs of Use Cases","Next we will describe Task Computing use cases, using TCC I.","In the walkthrough, there are file, schedule, and contact providing services. Those are the local or pervasive Instance Providing Services, which provide file, schedule, and contact respectively.","Office","Let us assume that the reader is a salesperson and meet Bob and his group for the first time in their conference room. You are allowed to connect to the wireless network provided for visitors. Your TCC I finds many services in the room. You go to \u201cComposition Pane.\u201d","Business Card Exchange","Business Card Exchange=Contact Providing Service+Insert into Contact List","TCC I finds a composition of \u201cContact Providing Service\u201d for Bob running on his PDA and \u201cInsert into Contact List\u201d on your PDA. You think Bob is going to be very important for your business, so you just hit the \u201cExecute\u201d button to execute the composition. \u201cContact Providing Service\u201d for Bob will be executed and TCC I gets his contact. Then TCC I executes \u201cInsert into Contact List\u201d running locally on your PDA with his contact. Just before \u201cInsert into Contact List\u201d inserts Bob's contact, the service pops up a confirmation dialog box for you to check the information the service is going to insert into your contact management software. You hit \u201cOK\u201d button for the service to go ahead and insert it into your contact management software.","Presentation","Project the presentation=Local File Selector+View on Projector (URL Viewer)","You start your presentation of your product. You have your presentation file on your PDA. You use the composition of \u201cLocal File Selector\u201d and \u201cView on Project (URL Viewer)\u201d services in the conference room. As a result, you have your presentation projected on the screen projected and the control page on your PDA. Using the control page, you control your presentation wirelessly. No hustle connecting the VGA cable and hitting the right function keys.","Leave the presentation=Local File Selector+File Bank","Bob asks you to leave your presentation file if there is no problem. Of course there is no problem. You just think that you should have created the \u201cFile Providing Service\u201d for the presentation file when you executed \u201cLocal File Selector\u201d last time. Anyway, you execute the composition of \u201cLocal File Selector\u201d and \u201cFile Bank\u201d service in the conference room. Now the presentation file is available from the File Providing Service provided by the File Bank.","Print the Manual","Print the manual=Favorite URL+Print (Pervasive)","Bob asks you for more detailed materials on your product. You remember that there is the product manual on your company Web site and that you have the URL to the manual in your Favorites folder. You execute the composition of local \u201cFavorite URL\u201d and \u201cPrint (Pervasive)\u201d in the conference room. You pick up the printout at the printer in the conference room and give it to Bob.","Buy a Book by the Member","Buy a Book=Book Providing Service+AMAZON.COM (as a Well-known Service)","During the meeting, you are introduced to a new book by Bob. You find the conference room the \u201cBook Providing Service\u201d which provides the book semantic instance for the Bob's book. You execute the composition of the \u201cBook Providing Service\u201d and AMAZON.COM Web Service. Even though AMAZON.COM Web Service does not provide its SSD, the TCC I has an SSD for this well-known service and the TCC I can use AMAZON.COM Web Service as one of SDS's. By executing the composition, you can check the information on the book and buy it.","Schedule for the Meeting Held in the Room","Bob and you schedule a next meeting in the same room. Bob creates the schedule item in his schedule management system on his PDA. He then drags the item in the \u201cWhite Hole Service.\u201d","Schedule Providing Service (White Hole Service)+Insert into Schedule List","You execute the composition of the \u201cSchedule Providing Service\u201d provided by \u201cWhite Hole Service\u201d on Bob's PDA and your local \u201cInsert into Schedule List\u201d service.","Schedule Providing Service (White Hole Service)+Schedule Bank","In the meanwhile, Bob executes the composition of the \u201cSchedule Providing Service\u201d provided by \u201cWhite Hole Service\u201d and the \u201cSchedule Bank\u201d in the conference room for other people to use the \u201cSchedule Providing Service\u201d for the next meeting in the conference room, which will be provided by the \u201cSchedule Bank\u201d after the execution.","Bob stops the \u201cSchedule Providing Service\u201d on his PDA using White Hole Service Management Window.","Get the Direction to the Airport Nearby","Address providing service (Pervasive)+Map Router","Now you are ready to go. Bob suggests that you execute the composition of the \u201cAddress Providing Service\u201d for the airport you are going to use and the \u201cMap Router\u201d service. The conference room provides the \u201cAddress Providing Services\u201d for the points of interest in the area for visitor's convenience. You see the route from Bob's office to the airport on one of LCD's in the room that provides the Map Router service. You control the Map Router service from its control page in your browser on your PDA.","Presentation Later","Presentation by Bob=File Providing Service (File Bank)+View on Projector (URL Viewer)","When Bob later explains your product to other members of his company, he uses the presentation file you left in the conference room. He executes the composition of \u201cFile Providing Service\u201d for your presentation file provided by the File Bank and \u201cView on Project (URL Viewer)\u201d services in the conference room to give the presentation.","Public Spaces","The following scenarios are applicable to public spaces such as malls, airports, and train stations. Here we pick up scenarios at a mall.","You plan to get together with your friend for holiday shopping.","Leave a Memo","Location Determination (Local\/Pervasive)+L-Note","You have been waiting for your friend for fifteen minutes. You are sure your friend will come eventually, but you want have a seat and a cup of coffee. So you execute the \u201cLocation Determination\u201d service provided by the mall and the \u201cL-Note\u201d service also provided by the mall to leave a note for your friend. The \u201cLocation Determination\u201d provides your current location, which is fed into the \u201cL-Note\u201d service to produce an URL for you to leave a memo at your current location.","You leave a memo telling your friend you will be waiting at a coffee shop nearby.","Find the Memo","Location Determination (Local\/Pervasive)+L-Note","Your friend comes in late. But your friend does not find you there. Your friend executes the \u201cLocation Determination\u201d service and the \u201cL-Note\u201d service to find your message and read it.","Internet Kiosk","Read the news=Favorite URL+View on Kiosk (URL Viewer)","You arrive at the coffee shop nearby in the mall, get your cup of coffee and sit at a table. You find an Internet Kiosk on your desk. An Internet Kiosk is essentially a LCD with a computer. The computer is hidden and in order to avoid people messing with it, it provides neither keyboard nor mouse. It should be used through the control page which \u201cView on Kiosk (URL Viewer)\u201d provides.","You decide to read the news on the Internet Kiosk to kill your time. You execute the combination of your local \u201cFavorite URL\u201d and the \u201cView on Kiosk (URL Viewer)\u201d provided at the coffee shop. You choose your favorite news site from the dialog box which \u201cFavorite URL\u201d pops up. Then the news site appears on the Internet Kiosk. You control the Kiosk from the control page in your browser on your PDA.","Share the photos=Local File Selector\/White Hole Service+View on Kiosk (URL Viewer)","After a while your friend appears with apologies. You accept the apologies. Then you and your friend start to talk about your last trip. You show a couple of your best shots on the Kiosk by executing the composition of the \u201cLocal File Selector\u201d and the \u201cView on Kiosk (URL Viewer).\u201d You choose the photo file in the dialog box and the photo is shown on the Kiosk.","Public Directory","Then you and your friend wander off into the mall.","Public Contact\/Schedule Directory+Insert into Contact\/Schedule List","You find a public contact\/schedule directory. You find the contact of the store you want to go in the directory. You drag and drop it into the white hole. Then the Contact Providing Service appears on the TCC I. You execute the service and \u201cInsert into Contact List\u201d service to insert the store contact into your contact management system on your PDA.","You also find an interesting event on the directory. With similar steps, you insert the event schedule into your schedule management system on your PDA.","After ten minutes (the mall manager has set the default timeout period), the services will disappear.","List of Store Contact Providing Service+List Chooser+Insert into Contact List","Another possible scenario is something like the following. The TCC I finds the \u201cList of Store Contact Providing Service\u201d. The TCC I shows the composition of \u201cList of Store Contact Providing Service\u201d, \u201cList Chooser\u201d and \u201cInsert into Contact List\u201d as \u201c\u2018Insert into Contact List\u2019 \u2018One of\u2019 \u2018Store Contacts\u2019\u201d. Executing the composition, you get a pop-up dialog box for you to choose one of the store contacts from the list. After your choice, you have the contact inserted into your contact management system on your PDA.","Floor Map","Location Determination (Local\/Pervasive)+Floor Map","You find your location in the mall by executing the composition of the \u201cLocation Determination\u201d service and the \u201cFloor Map\u201d service. You get the floor map of the mall with your location high-lighted.","Filtering Services Based on Location","Based on the floor, or area you are in, you can filter the services. The TCC I uses one of \u201cLocation Determinations\u201d to filter the services. The TCC I uses the ontology of \u201cLocation\u201d, which the \u201cLocation Determination\u201d produces, for the level (such as floor or area) used in the filter. You can choose the level on which the Services are filtered on the TCC I. With this filtering you can have reasonable number of the services on the TCC I. If you choose the area-level filtering, you get only the services in the area or local on your PDA.","Get the Direction","Address Selector+Map Router","After the shopping, you and your friend decide to go to the restaurant you found a few months ago. You have the address of the restaurant in your contact management system, but you do not know how to get there from the mall. Luckily you find a kiosk with \u201cMap Router\u201d on it, provided by the mall for the visitor's convenience. You find the way on the kiosk by executing the composition of \u201cAddress Selector\u201d and \u201cMap Router\u201d and choosing the address of the restaurant in the \u201cAddress Selector\u201d dialog popup.","P2P","In this section, we pick up some of P2P scenarios. The following scenarios do not necessarily need the Internet connection. They should work over the ad-hoc mode of WLAN or Bluetooth without any problem. One of the possible limitations of having no access to ontologies is that the compositions of services are limited to exact matches of input and output signatures. They can be circumvented by having once-used, often-used, and\/or well-known ontologies kept locally on the computing device.","Share Restaurant Information","White Hole Service+Insert into Contact List","You want to share with your friend the information on the restaurant you found recently. You drag and drop the contact item from your contact management system into the White Hole Service on your PDA. Then your friend executes the composition of the Contact Providing Service on your PDA and the \u201cInsert into Contact List\u201d on your friend's PDA to insert the contact into his or her contact management system.","Share the Photo from the Last Trip","White Hole Service+Copy Locally","You want to share with your friend the photo from the last trip. You drag and drop the photo file from your file management system into the White Hole Service on your PDA. Then your friend executes the composition of the File Providing Service on your PDA and the \u201cCopy Locally\u201d on your friend's PDA to copy the photo file into his or her file system.","Share the Favorite Music","White Hole Service+Copy Locally","You want to share with your friend the newly released music you like. You drag and drop the music file from your file management system into the White Hole Service on your PDA. Then your friend executes the composition of the File Providing Service on your PDA and the \u201cCopy Locally\u201d on your friend's PDA to copy the music file into his or her file system.","Benefits","Task Computing presents substantial benefits for both end-users and the developers.","End-users","A primary beneficiary of task computing is the end user. End users stand to benefit from task computing because: (a) task computing lessens the required expertise for taking advantage of today's complex environment, (b) they can save time when performing complex tasks, and (c) task computing is a more natural and efficient way for users to interact with pervasive computing environments.","Task computing seeks to redefine how users interact with and use computing environments. The fundamental premise of task computing is to present to the user the tasks that are possible in the user's current context, to assist the user in creating more complex tasks by using simpler tasks as building blocks and to guide the user through the execution of the complex tasks. Once complex tasks are defined by the user (or perhaps by other users) such tasks can be re-used, very much like macros in popular applications today. Unlike macros (at least the ones that MICROSOFT OFFICE users are familiar with), the building block tasks and the resulting complex tasks may span multiple applications and multiple computing platforms (not a single device). In fact, one of the goals of task computing is that the user does not need to know or care about how the actual constituent tasks are executed or where (on which machine) they might be executed on. The ultimate objective of task computing is to present to the user an abstract view of resources (devices and services) that can be used in an ad hoc manner by the user, in order to execute tasks of arbitrary complexity.","We can sum up the advantages of task computing for end users as follows:","Computing for the everyday user Task computing does not require from the user a deep understanding of her computer environment and the available resources in it. Task computing presents to the user the possibilities (things to do) that are possible and feasible in the user's current context and guides the user though the process of creating and executing more complex (and re-usable) tasks","A Time Saver for All Users","For both the novice, and the advanced user, task computing offers time savings because the system (and not the user) manages the workflow and the transfer of data between applications in a manner consistent with the user's context and objectives. Moreover, since tasks, once created, are reusable, the user only has to define a complex task once.","Pervasive Environment Solution","Emerging computing environments are pervasive computing environments, full of devices and services that are not a priori known to the end users. Moreover, user devices (the devices that users use to access the functionalities of pervasive environments, e.g., PDA's, mobile phones, etc.) in such environments have physically and functionally limited user interfaces, which means that the personal computing environment practice of the users as \u201cprogrammers\u201d is infeasible. By presenting to the users a view of only those functionalities that are feasible and by partially automating the execution of complex tasks in such environment, while relegating the users to monitoring the task execution and providing input on a need basis, task computing addresses the idiosyncrasies of pervasive computing environments in a way that personal computing practices can not do. In addition, task computing, due to its real-time nature, meaning that the users can \u201csee\u201d what is feasible at the time they choose to specify and execute a task, addresses the dynamism of pervasive computing environment, where devices and services can come and go at any time and typically the end users know little about them in advance.","Developers and Businesses","End users though, are not the only affected parties that stand to benefit from task computing. Businesses and developers that develop applications for them are the other beneficiaries. Over the last 10 years we have been experiencing a revolution affected by the advent of the web. The web has made a wealth of systems and applications available to individual users; at the same time the businesses that own and control such systems have had to \u201cbring\u201d these (typically back-end) systems to the web through the labors of developers. This revolution changes the way users interact with computing systems but as revolutions go, this is an incomplete one. Users are the ones interacting with the applications, doing the searching, typing, cutting and pasting, processing and understanding whatever output these applications offer. Savvy users understand how to use a particular application (web site) for a particular task or goal, or, as it often happens, how to interact with multiple web sites in order to accomplish a single goal. There are two fundamental shortcomings with this approach: (a) Users are too involved and are relied upon in order to execute complex tasks, as described earlier in this document, and (b) Businesses are not getting their money's worth out of the investment of bringing their applications onto the web. Making an application or a system into a web application results into a static system, in the sense that all functionality presented to the user is carefully, but also inflexibly, exposed into the web application (the user-facing view of the application). Moreover, this functionality can not be easily combined with the functionality of other web applications (perhaps owned by other businesses) in order to create new interesting applications. Finally, this design-time construction is time-consuming, error-prone and as a result very expensive.","The latter point is an important one and needs to be further elaborated upon. The widespread efforts to deploy web services are partially motivated by the limitations of the current web applications. A success of web services will make it easier to develop new applications by using existing web applications, specifically by exposing functionalities of existing web applications as web services, and then employing them as building blocks for the new applications. Still, web services are a design-time technology, in the sense that these new \u201cmeta\u201d-applications are still going to be static applications with the functionality and flexibility that their designers designed into their implementations.","Task Computing aims at dissociating functionality from the systems that provide them and enriching them so that users can combine them for more complex tasks in whatever way they wish. This new paradigm has a profound effect and benefit for the process of providing end-user functionality in the computer industry.",{"@attributes":{"id":"p-0829","num":"0828"},"figref":["FIG. 68","FIG. 68"]},"The Task Computing paradigm enables the delivery of a lot more additional capabilities (things that the user can do) to the user with a lot less investment at the layers below, i.e., functionality provided by devices and applications and the platforms that support them.",{"@attributes":{"id":"p-0831","num":"0830"},"figref":"FIG. 69"},"Yet another benefit of Task Computing is that it greatly enhances the value of e-services, such as Web Services and UPnP services because it multiplies their user base and their potential usage. Web services are built by programmers\/developers and they are intended to be used by developers. This constraint has to do with the complexity of their programmatic interfaces that require a substantial know-how in order for them to be used in creating an application and also because the lack of deeper semantics associated with the functionalities of these e-services and their inner workings require a human inspection. Moreover, even simply discovering (or just becoming aware) of these e-services is a developer-driven process due to the lack of semantics. Because Task Computing makes these e-services available to the very broad user base of all people with web access (and a Task Computing client), and because each such user can combine each of these e-services in a variety of ways, often for tasks that are different than the tasks that the e-service was designed for, developers of such e-services receive both more users and uses for the e-services they develop.","Referring again to , because of the introduction of the semantic layer abstraction of a web service, on top of an existing web service and due to the fact that the user's tasks are conceived, defined and as far as the user is concerned, executed at this semantic layer, upgrading the actual service (web service) that provides the service, or modifying it, or replacing is only a matter of changing the grounding of the semantic description of the web service to the new service at hand, in a way that is unnoticeable to the user; this way there is no cost associated with the process of changing a deployed web service.","This is the appeal of task computing. As opposed to static meta-applications, the user can create in real-time their own \u201capplications\u201d, by creating and executing, in real-time their own tasks. The benefit for developers and businesses is that the functionality that businesses make available as web services can be exploited (used) in a variety of unplanned ways at the whim of individual users.","Applications","Task computing relies on the ability to semantically describe services and information content. Based on the semantic descriptions of services, the system enables users to do tasks through intensive interactivity. In that sense, task computing can be thought of as a semantics-enabled application that is broadly related to the next iteration of the Web, referred to as the Semantic Web. Even though the broad success of the Semantic Web will rely on the broad adoption of ontologies about everything \u201cout there\u201d, task computing has more modest requirements because it is not intended to be a fully automated system.","In addition, task computing is a way to address the complexity (from the user's point of view) of the new pervasive (or ubiquitous) computing environment which is populated by a plethora of devices that make available their functionality as services.","Even though Internet connectivity of a user's client device would exploit task computing to its fullest, full-time Internet connectivity is not a requirement for task computing. Limited connectivity leads to the limited availability of ontologies to the system and the limited capabilities of the system consequently. But even if ontologies are unavailable, the system still provides some functionality; often-used ontologies can be cached or stored in the user's device and used by the TCC whenever network connectivity is unavailable.","A large class of uses of task computing will be in pervasive environments, so network connectivity by wireless means will be highly beneficial (Wireless LAN ad-hoc mode, Wireless LAN infrastructure mode, Bluetooth (PAN), IR, etc.)","We next provide some examples of task computing in use. We assume that the user is using a computing device that runs a Task Computing Client such as TCC I, or is using a web browser that can interact with a Task Computing Client such as TCC II. We will describe examples of Task Computing in use in different contexts and spaces.","Home Environment","Many home appliances offer functionality that can be described with relatively clear and simple semantics because of the well-defined domain and limited scope of such functionalities. As a result, the home environment is a good application area for task computing. As home appliances are getting smaller, more connected, and more pervasive (in another word, \u201cmore invisible\u201d) and the number of those appliances is growing, it becomes very important for the user in home environment to find (or discover) the devices (or the services those devices provide), present them in easily understandable ways to the user, and let the user control the devices (or execute the services) with less effort; these are the goals of task computing.",{"@attributes":{"id":"p-0843","num":"0842"},"figref":"FIG. 70","b":["7000","7002","7004","7006","7008","7010","7012","7014"]},"Outside the firewall , there exist pervasive services  and dynamic service portal , which provide additional services that can be combined with the eHome services for Task Computing purposes.","Home users can use this Task Computing environment, to perform a variety of tasks. They may use Directory Publisher to publish video, audio, and image directories on their PC upstairs and play them in traditional devices, such as TV and stereo. At home, they may remotely control the devices using their PDA or Mobile Phone. If they are not at home, they may still do it through the SSL reverse proxy in order to remotely control their devices using their PDA or mobile phone. They may store the home surveillance video as a video file in their PC and review it later, while at home or away. They may store appointments or contacts to the dynamic service portal and use them later from anywhere. They may share pictures with their friends by using any of the previously discussed Task Computing publishing mechanisms. These are only a few examples of the things that home users can. It is important to note that none of these tasks has been programmed in the environment. Once the functionality has become available as services, it is the Task Computing environment that enables all of these tasks. From a user's perspective, all of these tasks are available through the user interface of the Task Computing Client that the user uses, be it on a desktop, laptop, PDA or mobile, whether located at home or being away from home.","Office Environment","The office environment is another interesting application for Task Computing. Imagine a visitor (or an employee) in an office setting. We assume that the visitor carries some computing device (or a variety of them for that matter), such as a laptop or a PDA. As the visitor moves about the office space, her task computing environment will present her a list of things she could do depending on her context and the real-time availability of other devices and services.","The office environment itself might be \u201cequipped\u201d with a variety of services, many of them originating in devices in the office.",{"@attributes":{"id":"p-0849","num":"0848"},"figref":"FIG. 71","b":["7100","7102"]},"Referring again to , the conference room  interconnects through a network , map view and router , view on a kiosk service , dialer , directory publisher service , digital photo frame , audio player service , view on projector service , local services , image service control , video player service , pervasive print service , and other pervasive services . Local services  also interface to remote services .","From the user's point of view, it is important to note that the user does not know in advance of the availability of all those services, nor does she know about how to access them and use them. The user's task computing environment is responsible for automatically identifying these services, understanding the functions that they provide, and is solely responsible for accessing them and using them. The user is responsible for defining her task given the available resources. To the user, resources are related to actions that she can perform in a particular environment. Examples of such (atomic) actions (implemented as services) in an office setting could include:","Use a viewing service","On a public display","On a projector","See scheduled meeting for a room","Add a meeting to a room's schedule","Leave a note for future visitors to a particular room","Add contact info of other employees or visitors to a PIM application on user's device","See listing of hotels close to current location","See listing of restaurants close to current location","View a chosen location on a map","View a listing of local airports","Select a file or URL from user's device in order to perform some action on it","View a route between any two locations","Although some of these actions (functionalities or services) might be interesting in their own right, the true value of task computing is that a user can combine the inputs and outputs of these services in order to define and execute more complex actions (tasks). The task computing environment running on the user's device is responsible for presenting to the user the possible ways that the available actions (services) can be combined (consider a \u201cbuilding blocks\u201d metaphor) and carries out the execution of the composite task, once the user is ready to do so. Examples of such composite actions (tasks) include:","View on a public display the location on the map of a particular restaurant, or the route from the current location to that restaurant or to an airport","Select a URL or a file from the user's local device to be displayed on a publicly-accessible display or a projector (for example to use a projector to make a presentation, without having to connect cables or wires to that projector)","Insert the contact info of fellow participants in a meeting into the user's PIM running on her PDA, in a manner similar to exchanging business cards.","Leave the schedule for the next meeting in the room.","It is important to note that none of these more complex tasks has been designed into the system. The user is responsible for \u201ccreating\u201d these complex tasks using a user interface on her own device, while interacting with the task computing environment running on her device. That environment is responsible for the execution of the user-defined tasks. The providers (or programmers) of the available services in this pervasive environment, did not have in mind a particular usage of the services they made available. In real-time (execution time) depending on the user's wishes and context, these services are used as building blocks to carry out more complex tasks, without the user ever having to directly interact with these services.","Public Facilities (Airports, Train Stations, etc.)","In another example of task computing in pervasive environments we discuss the task computing experience of a traveler that wanders around an airport with her PDA or mobile phone. As shown in , some \u201cPervasive services\u201d are setup within the airport, and the services are connected to the \u201cNetwork\u201d. Let us assume that the following services are available in this space.","Use a viewing service on a public display","See listings of events that take place in the airport or in the surrounding area","See listings of facilities (restrooms, restaurants, coffee shops, smoking areas) in the airport","Purchase a newspaper or a magazine","Post a classified add","Select a file or URL from user's device in order to perform some action on it","View a chosen location on a map","View a route between an two locations","View flight information (departures, arrivals, gates)","Information on ground transportation","As shown in , pervasive services  interfaced with a network , which also interfaces with a PDA  (or mobile phone).","Once the user connects to the network, either over a web connection or using a local network connection such as Bluetooth or WLN, she may perform any of the following tasks:","View on a public display (selected by the traveler or by her task computing system based on her location) directions to the traveler's connecting gate (using the traveler's flight information from the Personal Information Management application, or PIM, such as MICROSOFT OUTLOOK, on her PDA),","Similarly, view directions to the closest smoking area, or a restroom, or a coffee shop, or a restaurant,","View on a public display directions from the airport to the location of an event taking place in the vicinity to the airport and add an appropriate entry to the traveler's PIM application on her PDA.",{"@attributes":{"id":"p-0888","num":"0887"},"figref":["FIG. 72","FIG. 72"],"b":["7200","7208"]},"It should be noted again that none of these complex tasks have been pre-compiled, but they are constructed by the user in real-time (using the available resources) with the available service in the environment as well as services dynamically created by the user and executed by the task computing environment of the user.","Retail Areas (Coffee Shops, Malls, etc.)",{"@attributes":{"id":"p-0891","num":"0890"},"figref":["FIG. 73","FIG. 73"],"b":["7308","7108","7304","7306"]},"In a similar manner to airports, task computing can help end users accomplish complex tasks in pervasive computing environments such as coffee shops, malls, etc., using the same concepts described in the previous example. For instance, the same settings can also be applied in a coffee shop (). The providers of the individual, constituent services, still only provide their services to be used as building blocks for the users to construct and execute complex tasks.","A customer carrying a PDA (or Mobile Phone) enters a coffee shop. Some of the services offered in the coffee shop could include:","Use a viewing service on a display mounted on a sit-down table, or on a public plasma display,","See listings of events that take place in that particular coffee shop or in the surrounding area,","Leave a private note for friends that might visit the store,","View the menu,","Purchase a newspaper or a magazine,","Post a classified add,","Select a file or URL from user's device in order to perform some action on it,","View a chosen location on a map,","View a route between any two locations.","Using her task computing environment running on her PDA the customer might try any of the following:","Browse the menu and place an order, which is delivered at the table she sits down (as the TCE determines her location),","order a carry-out order, make the payment and be notified when the order is ready for picks up,","browse available offerings and select an electronic paper to buy which will then be displayed on a table-mounted LCD wherever the user eventually sits down,","discover an announcement for some event, and upon deciding to attend the event, have the event checked against her schedule along with directions, and finally add the event to her schedule and sends a note to a friend to join her,","leave a note for a friend that might visit the coffee shop after she has left, e.g., \u201cI will be at \u201cUnited Artists\u201d movie theater to watch \u201cMinority Report\u201d; please join me if you like\u201d. She might include directions to the movie theater and the schedule for the movie \u201cMinority Report\u201d,","might share photos (stored on customer's PDA) with friends, while viewing them on a table-mounted display,","leave photos at the coffee shop for other friends who plan to come in the shop later. In the last example, the user creates a new service providing the photo files on his or her PDA, which in turn his or her friends will execute to copy them into their PDA's.","In order to achieve some of these tasks, the consumer might have to access services offered in the broader Internet but still accessible from the location of the coffee shop. As before, the user is using the available services as building blocks for complex tasks in a way that has not been a priori designed into the system.","Desktop\/Laptop Environment","Pervasive computing environments is not the only application area for task computing. Task computing also transforms the way users eventually carry out complex tasks in today's personal computing environments as is the case when a user uses her laptop or desktop.","Let us consider the following scenario. A user while browsing the Internet comes across an interesting event, say a talk that she might be interested in attending. Following this discovery the user might manually go through the following operations:","Type the name of the location (in this case a hotel) at a search engine in order to find where exactly this event will take place. One example of a search engine is GOOGLE\u2122.","Upon browsing the returned results the user will come across a webpage with further information about this hotel and upon visiting the hotel's webpage she will probably find the exact street address of the hotel.","Armed with the address she might type the address in the search window of an Internet mapping service in order to see the location on the map.","If the user decides that the location is convenient for attending, she might check for conflicts with the schedule in her PIM application on her desktop and upon deciding to attend this event she might go back to the mapping service, type the address of her home or work and get detailed directions to the event's location.","Following that step she will probably add the event in her PIM application, typing again the event information and perhaps attaching the URL with the driving directions and\/or the talk announcement.","Finally she might wish to bring this event to the attention of a colleague who might be also interested in attending this event and send an e-mail to him, attaching again the event description and directions or map to that event.","Even for a proficient user, who knows how to perform this series of steps, performing the above task requires a considerable amount of time (perhaps 15-20 minutes), spent on invoking applications on her machine and transferring information from one application to the other. In addition, the next time that the user comes across an event of interest she will have to go through the same (or similar) steps and spend an equally unnecessary length of time executing the complex task. Finally, this manual process is error-prone, which by itself can cause additional time delays and user frustration.","Let us consider how the user experience might differ using task computing (see also ). The user's task computing client (TCC) is passively operating while the user goes about her daily tasks.","The user comes across the web page of an interesting talk.","When the user comes across a webpage of an event, the TCC identifies the nature (meaning or semantics) of the information on the page, i.e., that this is an event of a particular type, identifying the author, location, time, etc., of the event, and presents the user with possible and feasible actions that the TCC can execute on the user's behalf , as shown in .",{"@attributes":{"id":"p-0925","num":"0924"},"figref":"FIG. 75"},"The user might select the action of finding the address of this location that will prompt the TCC to search the internet for a webpage that contains the address of this location (hotel name).","The TCC then updates the list of actions available to the user given the new information and the revised list of actions given the new information obtained , as shown in .",{"@attributes":{"id":"p-0928","num":"0927"},"figref":"FIG. 75"},"The user then selects the action of seeing directions to this location from her home; the TCC actually displays a list of relevant locations, for the user to choose from, such as home address, work address, or current location of the user if available","If the user decides that the location is convenient, the user might select at this point to add the event to her PIM (if no conflicts with other scheduled activities exist) at the revised screen displayed by the TCC. In addition, she might choose to include the action of sending an e-mail to a colleague (again selected from a list presented by the user) and attach all relevant information to that e-mail , as shown in .",{"@attributes":{"id":"p-0931","num":"0930"},"figref":"FIG. 76"},"During any part of this process the user might choose to save the sequence of steps and actions as a task for future use, so that next time that the user finds herself in the same or a similar context, the combined task (sequence of actions) can become an available action at the listing of possible and feasible actions presented by the TCC.","The TCC is still responsible for executing each of this actions and presenting to the user the updated view of possible and feasible actions at any point of the user-guided workflow. The resulting process is much faster than the manually executed workflow thanks to the ability of the TCC to \u201cunderstand\u201d the information of web pages and the meaning of the possible actions and their input and output.","Note that in this case the environment is automatically and dynamically changed by user's actions. (New semantic objects become available because of the user navigating Web.) Those environment changes have triggered the sequence described above.","Virtual Community","Using Task Computing, individuals can form virtual communities whose members of can share services related to the community and personally-owned services, such as services associated with devices owned and or operated by each individual between them and each member can compose those services for themselves or for the community with any other generally available services.","A \u201cCommunity Service Discovery\u201d directory is prepared (either by a member of the community or by an entity that provides or supports the virtual community function) for the community and its members are provided interfaces for registering or unregistering the services related to the community and personally-owned services or for discovering community services. The previously discussed publishing and management Task Computing Environment mechanisms (SDSCMs) can be used for sharing services within the community. Especially a white hole can be used as a graphical user interface to register services such as instance providing services for the community.","The user can compose and execute any composition involving the community services and other services available to each individual user","Enterprise Application Integration (EAI)","Even though it may take a while, we believe task computing will gradually find its way into Enterprise Application Integration (EAI) application area. One of the potential applications of task computing to EAI is support for the developers of EAI applications through its interactivity and its use of service semantics. The developers will have shorter time for development and maintenance of EAI applications for task computing supports less error-prone processes of service integration and efficient trial-error process.","Dynamic Service Portal","A \u201cDynamic Service Portal\u201d is basically a Semantic Web Services hosting. This can be a for-fee service, provided for free as an additional value to other businesses, or an in-house service for some organization, etc.","The provider of a Dynamic Service Portal prepares a set of Web Services (can be provided by a third-party, not necessarily by themselves) accessible from some areas of the network on some occasions with some access controls if necessary. Of course, the more areas and occasions the user can access those services, the more useful the services would be to the users.","For example, a personal version of Dynamic Service Portal can be a semantic web service version of \u201cMY YAHOO!\u201d providing the functionalities of such a portal site, exposed as semantic Web Services. In such an example, the services provided by the Dynamic Service Portal can include:\n\n","Multimedia remote folder services can be combined with online purchase of digital contents. For example, when the user purchases a piece of music, the music file appears in the remote folder for music files.","The provider of the Dynamic Service Portal lets its users have semantic service descriptions (SDSs) of those Web Services. The provider can send those SDSs attached to emails to the users or notify the users of the URLs to those SDSs by emails or through Web pages.","The user can use those Web Services in Task Computing Environment (TCE) by making those SDSs available locally or pervasively through SDSCMs such as the White Hole. When the user makes an SDS available locally, the corresponding service becomes available only for the user. When the user makes an SDS available pervasively, the corresponding service becomes available not only for the user, but also for others in the same environment as the user. In one of the embodiments of TCE, the user can drag & drop the SDS file itself or the URL to the SDS file into the White Hole to make it available locally or pervasively. Using PIPE, the user can change the availability of the service to local or pervasive or can hold the SDS temporarily.","When the user makes the SDS for a certain Web Service from the Dynamic Service Portal available for herself, the user can use the Web Service within TCE. That means the user can use the Web Service combined with local, pervasive, or other remote services. This is an advantage of this Dynamic Service Portal over portal sites such as \u201cMY YAHOO!\u201d The interoperation of the services for one portal site can go as far as within the portal site. Even though some portal site provides synchronization software for the data at the portal site and the data in the applications on the user's computing devices, the software is proprietary and the interoperation ends there. If you go beyond that, you have to do cut and paste between Web pages and applications. Semantic Web Services from a Dynamic Service Portal can be made in TCE to interoperate with the services not only within the portal site, but also with services local on the computing devices, devices in the pervasive environment, and remote services (some may be from other dynamic service portals). This increases the utility of such services tremendously and enhances the user's capability as to what the user can do easily.","The user can use any device compatible with Task Computing anywhere to access those services. The user can also use any device with Web browsers to access those services through TCC II.","The user can use those services anywhere (home, at office, on the move, etc.), combined with local\/pervasive\/(other) remote services","A corporate or in-house Dynamic Service Portal can be thought as a new way of ASP (Application Service Provider). In addition to the services mentioned above for the personal version, it can provide corporate, group, employee Web services.","The system also includes permanent or removable storage, such as magnetic and optical discs, RAM, ROM, etc. on which the process and data structures of the present invention can be stored and distributed. The processes can also be distributed via, for example, downloading over a network such as the Internet.","The many features and advantages of the invention are apparent from the detailed specification and, thus, it is intended by the appended claims to cover all such features and advantages of the invention that fall within the true spirit and scope of the invention. Further, since numerous modifications and changes will readily occur to those skilled in the art, it is not desired to limit the invention to the exact construction and operation illustrated and described, and accordingly all suitable modifications and equivalents may be resorted to, falling within the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 50"},{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 51"},{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0123","num":"0122"},"figref":"FIG. 53"},{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 55"},{"@attributes":{"id":"p-0126","num":"0125"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 57"},{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 58"},{"@attributes":{"id":"p-0129","num":"0128"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 61"},{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 62"},{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 63"},{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIG. 64"},{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 65"},{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 66"},{"@attributes":{"id":"p-0137","num":"0136"},"figref":"FIG. 67"},{"@attributes":{"id":"p-0138","num":"0137"},"figref":"FIG. 68"},{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 69"},{"@attributes":{"id":"p-0140","num":"0139"},"figref":"FIG. 70"},{"@attributes":{"id":"p-0141","num":"0140"},"figref":"FIG. 71"},{"@attributes":{"id":"p-0142","num":"0141"},"figref":"FIG. 72"},{"@attributes":{"id":"p-0143","num":"0142"},"figref":"FIG. 73"},{"@attributes":{"id":"p-0144","num":"0143"},"figref":"FIG. 74"},{"@attributes":{"id":"p-0145","num":"0144"},"figref":"FIG. 75"},{"@attributes":{"id":"p-0146","num":"0145"},"figref":"FIG. 76"}]},"DETDESC":[{},{}]}
