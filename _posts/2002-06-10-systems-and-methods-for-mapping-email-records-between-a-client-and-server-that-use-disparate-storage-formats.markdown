---
title: Systems and methods for mapping e-mail records between a client and server that use disparate storage formats
abstract: An e-mail application program operating on a client stores e-mail records in a hierarchical database. The client is linked to a server that stores e-mail records in a flat database. The e-mail records stored in the hierarchical database are mapped to the e-mail records stored in the flat database and vice versa. The mapped e-mail records are then stored in a mapping table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07428544&OS=07428544&RS=07428544
owner: Microsoft Corporation
number: 07428544
owner_city: Redmond
owner_country: US
publication_date: 20020610
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY ","DETAILED DESCRIPTION","CONCLUSION"],"p":["This invention relates to application software pertaining to electronic mail (e-mail), and more specifically, to mapping e-mail records between a client and server that use disparate storage formats.","MICROSOFT\u00ae OUTLOOK\u00ae message software is an e-mail application program designed to function interchangeably with a MICROSOFT\u00ae EXCHANGE SERVER. Both store data in the same format. They both use a hierarchical style e-mail database. Folders and subfolders are created to hold e-mail messages, contact properties of different individuals and entities, calendar appointments, tasks and other related items that are stored as individual \u201crecords.\u201d","There is a dilemma, however, when a client and server use a disparate storage format for maintaining data. Suppose, for instance, messaging software using a hierarchical style e-mail database sold under the name MICROSOFT\u00ae OUTLOOK\u00ae operating on a client device connects to an e-mail database maintained on a server that stores messaging information in a flat database sold under the name DOMINO\/LOTUS NOTES SERVER by IBM\u00ae. DOMINO\/LOTUS NOTES SERVER stores messaging information in a flat database where each property associated with an address is stored as a record in a single folder. On the other hand, as mentioned above, messaging software sold under the name OUTLOOK\u00ae maintains address properties in a hierarchical fashion with folders and subfolders. Each record is stored in the folder to which its relates, and there is no concept of using references. Accordingly, records received from a server that stores messaging information in a flat database cannot be readily stored in a client database compatible with hierarchical style e-mail software, because the records are not in a format in which the client can store, and at a later time, read back and understand","Thus, there is a lack of flexibility associated with open deployment of clients and servers running e-mail application software, where the client and server use disparate storage formats to store data associated with the e-mail application software.","Mapping e-mail records between a client and server that use disparate storage formats is described. In one implementation, and e-mail application program operating on a client stores e-mail records in a hierarchical database. The client is linked to a server that stores e-mail records in a flat database. The e-mail records stored in the hierarchical database are mapped to the e-mail records stored in the flat database and vice versa. The mapped e-mail records are then stored in a mapping table.","The following discussion is directed to systems and methods for connecting a client to a server, when the client and server employ a different storage format for storing information associated with an e-mail application program. The subject matter is described with specificity to meet statutory requirements. However, the description itself is not intended to limit the scope of this patent. Rather, the inventors have contemplated that the claimed subject matter might also be embodied in other ways, to include different elements or combinations of elements similar to the ones described in this document, in conjunction with other present or future technologies.","Example System Architecture",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 1","FIG. 13"],"b":["100","100","100","102","1302"]},"Contained within the client  is an e-mail application program  that interacts with both client side and server side components. In one exemplary implementation, the e-mail application program  is represented by the messaging software sold under the name MICROSOFT\u00ae OUTLOOK\u00ae, which is a workgroup personal information management program produced by Microsoft Corporation of Redmond, Wash., USA. Briefly described, the program allows users to manage their own calendar, messages, tasks, notes and contacts and to share this information with others. Like many personal information managers, this program  is divided into several modules, including a calendar manager, a task list manager, an address book manager, a message manager (e-mail) and a notes manager. Of particular interest to this description is the connector module  to be described in more detail.","The server side includes a server  as well as a server database . The server  represents a class of servers capable of servicing clients. In one exemplary implementation, the server  is represented by the server system sold as IBM\u00ae LOTUS NOTES\/DOMINO SERVER system, which is a server system produced by International Business Machines Corporation of Armonk, N.Y., USA. Although the exemplary implementations will generally be described in the context of these client and server side representations (messaging software sold under the name OUTLOOK\u00ae and messaging software sold under the name DOMINO), it is possible that other client side and server side platforms could be used in accordance with the principles and illustrations described herein.","In the exemplary implementations, the client  and server , store and manipulate data associated with the e-mail application program  in different formats. For instance, message software sold under the name MICROSOFT\u00ae OUTLOOK\u00ae is designed to operate seamlessly with servers sold under the name MICROSOFT'S\u00ae EXCHANGE\u00ae, which interprets and stores e-mail data in the same format whether on the client side or server side.","To ensure that there is interoperability between messaging software sold under the name MICROSOFT\u00ae OUTLOOK\u00ae on client  and server sold under the name LOTUS NOTES on the IBM\u00ae DOMINO SERVER , a connector module  is used to integrate messaging interoperability and connectivity between them. Module  includes Messaging Application Programming Interface (MAPI) modules that enable messages and data to be sent from the client  to server , and vice versa.","A transport provider module  is responsible for sending messages to and receiving messages from connector module . The transport provider  performs several functions related to messaging distribution. These include, for instance, informing the e-mail application program  when a new message has been received from server , and invoking message preprocessing and post-processing. The transport provider  also handles message transmission and reception between the client  and server .","The address book provider module  is used to manage address contact information from an address book stored in both the client and server databases  and , respectively. In other words, address book provider  handles access to directory and contact information, the contents of which, can either be obtained from the client database  when not in session with the server , or from server database  when client  is in session with server , vis-\u00e0-vis server database .","The store provider module  handles the storage and retrieval of messages and other information for application program  as well as application modules such as address book module . Information stored by e-mail application program  is stored and organized using a hierarchical system, which is implemented in multiple levels, with containers called folders holding messages of different types. There is no limit to the number of levels provided by store provider .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["106","202","204","114","202","204","118","202","204","118","118","202","204","206","118","202","204"]},"In the MAPI store, messages (objects) are composed of properties. In most cases, fields, (such as \u201cTo,\u201d \u201cFrom,\u201d \u201cSubject\u201d) map directly to a MAPI property . Additionally, folders , subfolders  and messages  have certain properties  describing them, for example, PR_ENTRYD contains a unique identifier to a message  or folder . PR_DISPLAY_NAME property stores the name of the folder and messages. The database  permits interfaces, IMPAIFolder and IMessage interfaces, to store and retrieve data from the database .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["118","302","304","302","304"]},"Shown on the right hand side of , is an exemplary portion of server database , which includes an All Documents folder . Contained within All Documents folder  are Records A, B, C, D, E and F. The All Documents folder  contains all the records associated with e-mail application program  stored in server database , without regard to which folder the record is actually viewable by a user. Also contained in server database is an inbox folder  and an outbox folder . Each of these folders, inbox  and outbox , contain references (are non-data-structure elements) that point to a specific record in which they reference. For instance, when a user opts to view the inbox , the references contained therein link the actual records the All Documents folder  so they are in a viewable format in the inbox. For example, Reference Record A references Record A, Reference Record B references Record B and so forth. A single record in the All Documents folder  can be referenced by a plurality of references.","So the server database  contains only one record, which may be referenced by a plurality of references, whereas the client database  contains many unique records which are actually stored as records in each respective folder in which the record is intended to be viewed. As shall be explained in more detail, the reference handler module  uses a mapping table  to store records received from the server  and synchronize the different storage formats used by the client  and server .","A replication thread module  also uses the mapping table  to replicate the databases  and . The replication thread module  is a bidirectional module that ensures that changes to records performed on the client  or received from the server  are replicated. The process of handling multiple references and replication of the server database in a format compatible for the e-mail application program  shall now be described in more detail.","Handling Multiple References on the Client","As described above, database  is created to replicate the mail database in server database . The storage and the type of folders used to store the information in these two databases differ, as described below. In database , a reference mechanism is used to show which folder the records in a particular folder ( and\/or ) each record belongs. Accordingly, whenever a record needs to associate with a particular folder, a reference of that record is added to the folder  and\/or ). It is possible that the same record can be referenced by different folders but the server database  typically contains only one record in the All Documents folder .","In the client database , there is no concept of references. As shall be explained, instead the reference handler module  creates a new record for each reference in the server database . Even if multiple references point to the same record, the reference handler module creates a unique record which is stored in the same folder as the reference indicates. So, although there may be multiple records in the database  that are essentially the same content wise, they are actually unique records. In this way, the connector  allows the client database  to behave the same way the server database  behaves when there are references, without actually using the referencing techniques. The mapping table  is used to map records stored in the client database  back to the records stored in the server database .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4","b":["110","118","400","102"]},"At a block , client  receives a record. The record can be a mail item or some other e-mail item such as a folder. Next, the client  through the connector module  ascertains the server identification key associated with the record.  shows an example record  maintained by server  that has an associated server identification key . The server identification key  uniquely identifies the record  from all other records in the All Documents folder . The server identification key is referred to as a \u201cDOMINO Primary Key\u201d (DPK) in the DOMINO SERVER, so in the example shown in , the server identification key for record  is \u201cDPK.\u201d","Record  may also be referenced by one or more folders (such as by folders  and ). That is, record  can be viewed by a user in one or more folders (e.g., , ). Each folder contains the list of DPKs that are referenced in them. Accordingly, each reference, for record  is ascertained.","At a block , for each of the references ascertained for record , the reference handler module , creates new client records identical to the received record . In this instance, \u201cidentical\u201d means that majority of the records are primarily the same, but the new client records can include additional information associated with the client , for maintaining and storing the new client records. For example,  shows two new client records  and  created for each reference associated with a received record from server . For discussion purposes, suppose the new client records  and  are identical to record . It should be noted that once the new client records are created they can be stored in the folders indicated by the reference(s) associated with the received record  from server .","Referring to , at a block , for each new client record created  and  a client identification key  and  is assigned to the new client records  and , respectively. The client identification key uniquely identifies the new client records  and . The client identification key on the client side is referred to as the \u201cOUTLOOK Primary Key\u201d (OPK).","At a block , the client records are synchronized the record received from the server by mapping the client identification keys  and  (OPK and OPK) back to the server identification key DPK   for record .","At a block , this is accomplished by storing the mapping relationship in a mapping table .  shows the example contents of a mapping table . The mapping table  includes the client identification keys OPK and OPK on the left hand column (also referred to as a field)  with rows corresponding to the identical server identification key DPK  in the right hand column (also referred to as a field) . There are no limitations to the number of additional fields that can be included in the mapping table .","At a block , in the event that a user action creates a change to any of the new client records  to  and\/or the received record , than all related records need to be updated to ensure that they are synchronized. The contents of the mapping table  are queried to ascertain all records affected by the change. A \u201cchange\u201d can include a deletion of a record, a modification to a record, an addition to a record, or a move of operation where a record is moved from a source folder to destination folder. Once the all the records are identified that correspond to the same server identification key, the records as well as the contents of the mapping table are updated to ensure that the records and identification keys are synchronized (re-synchronized) on both the client and server sides, to reflect the changes by the user.","Constructing the Mapping Table",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 8","b":["800","122","800","102"]},"At a block , client  initiates creating a mapping table . For example, the process of creating the mapping table  can be initiated at various times, but must begin the first time the e-mail application program  is launched in connection with server .","At a block , the replication thread  checks whether the data stream flowing from the server  to the client  is dirty. The data stream is dirty when client has worked offline and the data stored in client database  is not update with e-mail data stored in server database .","Assuming the state of stream is not dirty, then at blocks  and , the table  can be constructed by reading the stream property. The stream property is stored in database  when a user exists the e-mail application program . The stream property could also be stored at other times. When the user restarts e-mail application program , the stream property is read to build the table. At a block , for each record, a row is inserted in the mapping table . At a block , the next record is read and stored in the mapping table . This process continues until there not more records in the stream as indicated at a block .","If the data stream is dirty at block , then process  proceeds down the right hand side starting with a block . The data stream is checked each time a user launches the e-mail application program . At block , the connector ascertains whether there any more records in the client database . If not then the mapping table is ready for use as indicated in block .","On the other hand, if there are more records, than at a block  the record is read from the client database .","Next, at block  it is determined whether there are OPK and DPK present in the record. The presences of OPK\/DPK are checked, because only if both are present can we construct a mapping between them. Otherwise, the changes from one database to the other cannot be replicated. If OPK\/DPK are not present then at block , process  advances to the next record.","If the OPK and DPK are present, then at a block  these keys are inserted in a row of the mapping table  and the process  continues until the mapping table  is ready for use as indicated in block .","Handling Multiple References When Updates are made to Records",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 9","b":["900","106","900","102"]},"At a block , user performs an operation using the e-mail application program , such as modifying an item, moving an item from one folder to another, deleting an item, adding an item and other related operations. The \u201citem\u201d may be any e-mail related folder, message, contact, or other item pertaining to messaging software.","At a block , MAPI interface functions are called to perform a user requested action. The action can include a move operation (see block ) a delete operation (see block ) and\/or an addition\/modification operation (see block ). Connector  is a MAPI service provider. Connector  uses the MAPI function, Create\/Table to build a table data object (ITableData object). Connector  uses the ITableData functions to access mapping table . Usage of the ITableData object in the mapping table makes it easily scalable and highly reliable. The most frequent operation in the mapping table (as shall as described) is the Query operation (read operation). In the query operation a new view from the table  is obtained. Connector  performs the query operations using the interface functions of IMAPITable which enhances out performance. There is no limitation to the number of fields in the mapping table.","The movable operation shall be described first. Block  is initiated after a user moves a record (moves an item that is stored as record), from a source folder to a destination folder. Accordingly, e-mail application program  calls the store provider  obtain the record from the source folder and ascertain the OPK from the record.","At a block , store provider  uses the OPK to query mapping table  to obtain a corresponding DPK for the record. A determination is made whether the DPK is present, in the record. Assuming a DPK present then at a block , mapping table  is again queried using the DPK to obtain all related records in the client database .","At a block , assuming there are related records, a determination is made whether the related record is already present in the destination folder. If according to the \u201cyes\u201d branch of block  the related record is in the destination folder, then according to a block  all that is needed to do is to delete the record from the source folder. On the other hand, if any related records are not present in the destination folder, then at a block  a new record needs to be created and stored in the destination folder. Then at a block , the original record is deleted from the source folder.","The delete operation shall now be described. Block  is initiated after a user deletes a record from a folder. The e-mail application program  calls the store provider  to obtain the record from a folder and ascertain the OPK. Once the OPK is ascertained for the record, then at a block  a determination is made whether the corresponding DPK is present from the mapping table . If there is no DPK present, then the record can be immediately deleted from the client database  as indicated in a block .","If there is a DPK present for the record, then at a block  the mapping table is queried to ascertain whether there are any other related records in the database .","At a block , if no related records exist that correspond to the DPK, then according to block  the record is deleted from the client database . If at block  there are related records present, then at a block  all related records are deleted and the record is deleted in the client database . Then, at block , the record can be deleted from the client base . The addition\/modification operation shall now be described. Block  is initiated after a user modifies a record in a folder. The e-mail application program  calls the store provider  to obtain the record from a folder and ascertain the OPK. Once the OPK is ascertained for the record, then at a block  a determination is made whether the corresponding DPK is present from the mapping table . If there is no DPK present, then according to a block  the record can be saved in the client database .","If a DPK is present, then at a block , the mapping table is queried to obtain any related messages using the DPK to search the table . If, at block , there are no related records in the client database , then the modified or added record can be saved in the database , as indicated by block .","If at block , there are related records, then according to block , all related records are updated and the updated record is saved in the client database .","Using the Mapping Table When Replicating Changes from Client to Server","The use of the mapping table is minimal when making replicating changes from the client to the server, because a maser copy of data is always updated on the server. The mapping table  is used to obtain the DPK from OPK. If the DPK is not able to be ascertained from the mapping table, then it is considered a new item created in the client database . In this case, a new item (i.e., a record) is created in the server database .","Using the Mapping Table when Replicating changes from Server to Client","When connector  requests changes from the server database , it provides a list of DPKs and the type of action performed on each record. The action can be either addition\/modification or deletion as mentioned above.","For addition\/modification, the connector  only obtains the DPK of a record form its parent folder. Connector  queries the mapping table  to check for a row corresponding to the DPK of the record. The parent record's folder DPK obtained from the mapping table should be the same as the DPK received from the server . If the row is not present then there is an addition of the reference to a folder. In that case, connector  creates a new message in the client database  and inserts a row in the mapping table  for this new record. If a row is present in the mapping table , then it is a modification operation, and connector  opens each record in the client database and updates all the related records.","Deletion can be permanent deletion or deletion of a reference to a folder. In case of permanent deletion, connector  obtains the list of OPKs from the mapping table  and deletes all the related records in the client database . In case of deletion of a reference along with the DPK of the record, connector  obtains the DPK of the parent folder (PrDPK). Then connector  queries the mapping table  for the DPK and also checks whether its parent DPK equals PrDPK. If the parent DPK equals the PrDPK, then the connector deletes the record only in this folder and removes the entry in the mapping table  for this record.","Role of Mapping Table in Replication","For each folder (inbox, outbox, etc.) there is a record in the mapping table. The presence of a record for a folder in the mapping table helps connectors  decide whether there is a need to synchronize a particular folder corresponding to a folder in the server . By deleting the record for that folder in the mapping table, connector  prevents replication for that particular folder and its contents. For example, suppose that client  does not support synchronization of a \u201cJournal folder\u201d and its contents maintained by the server . Then, by deleting the folder's record from the mapping table, connector  is able stop synchronization associated with the Journal folder.","In connector , there are also scenarios where it there is a need to delete a record in the database , but there no corresponding to record in the server database . For example, on the client side, when receiving a meeting invitation there is a record in an inbox folder and also a record in the Calendar folder. But on the server side there is only one record corresponding to both items. To support this situation, connector  maintains two records in the mapping table  for the same DPK. If the user deletes the record in the Inbox, then connector  only deletes the entry in the mapping table  corresponding to the record in the Inbox.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 10","b":["122","1002","702","704","1002","1002","118"]},"When connector  queries mapping table  to obtain the mapping between OPK and DPK folders, there is no need to query the entire table . Instead, connector  can obtain a view of the table , and then restrict the view to have only folder entries and then query the view. Accordingly, field  helps to optimize the query operations.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 11","b":["118","110","122","1100","102"]},"Operating e-mail application program  on client  requires e-mail records (including folders and messages) to be stored in a hierarchical database. However, server  uses a database that stores records in a flat database as described above. It is necessary to map the e-mail records from both databases and store the mapping in the mapping table . This process permits there to be replication of actions that occur to records on the client  or server.","Accordingly, at a block  DPKs from records stored on server database  are ascertained. This can be accomplished as described above through the construction of mapping table  (see e.g., ). At a block  client records are created that correspond to the server records. At a block , OPKs associated with the created client records are obtained. The DPKs and OPKs are stored in the mapping table . At a block  the OPKs and DPKs are used to located records in the mapping table so that when changes are made to client records or the server records, the changes can be replicated on either the client side or server side. Thus, process  ensures that records on the client are synchronized with records on the server side and vice versa.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 12","b":["1200","118","110","102"]},"At a block , replication thread module  monitors whether changes are made to records stored in client database . If no changes were made, then according to a block  connector  waits for more time to pass and repeats block .","If there are changes made to a record stored in client database , then according to a block  the OPK and action performed on the record is obtained.","At a block , connector  checks whether the action was an addition or a modification. If not addition\/modification were made, then at a block , the mapping table  is queried to ascertain whether there is a corresponding DPK (by deduction the action was a deletion). If there isn't a DPK then the deletion isn't supported by either e-mail application program  or server  and the change is not replicated on the server . On the hand, according to the Yes branch of block , if there is a DPK in the mapping table , then at a block  a determination is made whether the there is a parent DPK present in the mapping table . If there is not a parent DPK, then the server is not notified of the deletion change. On the other hand, at block  if there is a parent DPK present, then according to a block  the change is sent to server database .","Returning to block , if there was no addition\/modification made, then at a block , a determination is made if there is a parent DPK present. If no parent DPK is present, then the change is not sent to the server . If at block , there is a parent DPK parent, then at a block  a determination is made whether there is an entry in the mapping table to a parent DPK. If there is such an entry, then at a block  the change is sent to the server database .","On the hand, if there is no DPK entry present then at a block  a new record is created in the server database corresponding to the change. At a block , the DPK of the newly created record is obtained from the server  and inserted in the mapping table  as an entry corresponding to a record (folder or message).","Exemplary Computing System and Environment",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 13","b":["1300","100","1300","1300","1300"]},"The computer and network architectures can be implemented with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, thin clients, thick clients, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, gaming consoles, distributed computing environments that include any of the above systems or devices, and the like.","Connector module  may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types.","The computing environment  includes a general-purpose computing system in the form of a computer  (e.g. client ). The components of computer  an include, by are not limited to, one or more processors or processing units , a system memory , and a system bus  that couples various system components including the processor  to the system memory .","The system bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures can include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, and a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus.","Computer system  typically includes a variety of computer readable media. Such media can be any available media that is accessible by computer  and includes both volatile and non-volatile media, removable and non-removable media. The system memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently operated on by the processing unit .","Computer  can also include other removable\/non-removable, volatile\/non-volatile computer storage media. By way of example,  illustrates a hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media (not shown), a magnetic disk drive  for reading from and writing to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  for reading from and\/or writing to a removable, non-volatile optical disk  such as a CD-ROM, DVD-ROM, or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are each connected to the system bus  by one or more data media interfaces . Alternatively, the hard disk drive , magnetic disk drive , and optical disk drive  can be connected to the system bus  by a SCSI interface (not shown).","The disk drives and their associated computer-readable media provide non-voltage storage of computer readable instructions, data structures, program modules, and other data for computer . Although the example illustrates a hard disk , a removable magnetic disk , and a removable optical disk , it is to be appreciated that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes or other magnetic storage devices, flash memory cards, CD-ROM, digital versatile disks (DVD) or other optical storage, random access memories (RAM), read only memories (ROM), electrically erasable programmable read-only memory (EEPROM), and the like, can also be utilized to implement the exemplary computing system and environment.","Any number of program modules can be stored on the hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of example, an operating system , one or more application programs , other program modules , and program data . Each of such operating system , one or more application programs , other program modules , and program data  (or some combination thereof) may include an embodiment of connector module  in conjunction with e-mail application program .","Computer system  can include a variety of computer readable media identified as communications media. Communication media typically embodies computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.","A user can enter commands and information into computer system  via input devices such as a keyboard  and a pointing device  (e.g., a \u201cmouse\u201d). Other inputs devices  (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to the processing unit  via input\/output interfaces  that are coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device can also be connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , other output peripheral devices can include components such as speakers (not shown) and a printer  which can be connected to computer  via the input\/output interfaces .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . By way of example, the remote computing device  can be a personal computer, portable computer, a server, a router, a network computer, a peer device or other common network node, and the like. The remote computing device  is illustrated as a portable computer that can include many or all of the elements and features described herein relative to computer system .","Logical connections between computer  and the remote computer  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. When implemented in a LAN networking environment, the computer  is connected to a local network  via a network interface or adapter . When implemented in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the wide network . The modem , which can be internal or external to computer , can be connected to the system bus  via the input\/output interfaces  or other appropriate mechanisms. It is to be appreciated that the illustrated network connections are exemplary and that other means of establishing communication link(s) between the computers  and  can be employed.","In a networked environment, such as that illustrated with computing environment , program modules depicted relative to the computer , or portions thereof, may be stored in a remote memory storage device. By way of example, remote application programs  reside on a memory device of remote computer . For purposes of illustration, application programs and other executable program components, such as the opening system, are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computer system , and are executed by the data processor(s) of the computer.","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The detailed description is described with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
