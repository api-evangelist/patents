---
title: Methods and systems for coupling client-side and server-side persistence frameworks
abstract: A client application can be configured to use a client-side persistence framework to maintain a local database for use in storing data even when a data provider is not available. In accordance with the present subject matter, the client application can be configured to obtain and rely on server-side persistence metadata rather than requiring the persistence metadata to be specifically included in the code for the client-side application. In some instances, this can simplify the development process and/or allow for more robust client-side applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08655910&OS=08655910&RS=08655910
owner: Adobe Systems Incorporated
number: 08655910
owner_city: San Jose
owner_country: US
publication_date: 20091028
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The disclosure below generally relates to software development, particularly to client-server architectures.","Network-based applications can utilize a local client application that interfaces with one or more remote data providers to obtain data of interest. As an example, a remote data provider may comprise an application server, such as Adobe(R) ColdFusion(R), available from Adobe Systems Incorporated of San Jose Calif. The data provider can utilize application logic that defines how the data provider responds to queries. For example, for a ColdFusion(R) server, a CFML code file can define logic for accessing data from a database or other resource and packaging the data into logical units, such as software objects, that can be used to return data to the client application.","A persistence framework can comprise software components that bridge the gap between the representation of the data as logical units as handled by the data provider (e.g., as software objects in memory) and representation of the underlying data in a database. For example, the persistence framework can rely on persistence metadata to construct database queries (e.g., SQL queries) and to associate data returned in response to queries with respective parameters of the logical units (e.g., object parameters). The persistence framework may represent components or processes included in the application server or may represent a separate component invoked by the application server.","A client application can be configured to use a client-side persistence framework to maintain a local database for use in storing data even when a data provider is not available. In accordance with the present subject matter, the client application can be configured to obtain and rely on server-side persistence metadata rather than requiring the persistence metadata to be specifically included in the code for the client-side application. In some instances, this can simplify the development process and\/or allow for more robust client-side applications.","Embodiments include a method comprising requesting, by a client application executed using a processor, object data from a remote data provider, receiving object data from the remote data provider, and maintaining the object data in memory accessible by the processor. For example, maintaining the object data may comprise storing an object in volatile memory, such as working memory in RAM and\/or cache memory accessible by the processor. The remote data provider may be an application server reachable by a network connection or another application separate from the requesting application and configured to respond to requests.","The method includes receiving persistence metadata associated with the object from the data source and storing the object data in a local database by using the persistence metadata to determine how the object data is to be mapped into one or more database structures. The persistence metadata may be associated with the object in any suitable manner. For example, the object may be an instance of a class, and the persistence metadata can be specified with regard to the class. In some embodiments, the persistence metadata identifies at least a plurality of parameters of the class. Each object can correspond to a row in a database table associated with the class, with parameter values for the object included in corresponding columns of the table.","In some embodiments, the method includes determining a version of persistence metadata (if any) available prior to providing the request to the data provider. Version data can be provided to the data provider and, in response, the data provider may provide an updated version of the persistence metadata. This can be used at the client to update the local database, such as by adding additional columns to a database table, establishing a new database, and\/or otherwise adjusting database structure.","Embodiments also include systems and computer-readable media implementing one or more aspects of the present subject matter. These illustrative embodiments are mentioned not to limit or define the limits of the present subject matter, but to provide examples to aid understanding thereof. Illustrative embodiments are discussed in the Detailed Description, and further description is provided there. Advantages offered by various embodiments may be further understood by examining this specification and\/or by practicing one or more embodiments of the claimed subject matter.","Reference will now be made in detail to various and alternative exemplary embodiments and to the accompanying drawings. Each example is provided by way of explanation, and not as a limitation. It will be apparent to those skilled in the art that modifications and variations can be made. For instance, features illustrated or described as part of one embodiment may be used on another embodiment to yield a still further embodiment. Thus, it is intended that this disclosure includes modifications and variations as come within the scope of the appended claims and their equivalents.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of the claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure the claimed subject matter.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","102","122"]},"Server computing platform  includes a processor  with access via bus  to a tangible computer-readable medium  which can comprise RAM, ROM, cache, or Flash memory or any other suitable storage medium. Additional components can include input-output (I\/O) handling components (e.g., keyboard, mouse, touchscreen) connected via I\/O interface . A data store  is included to represent one or more databases or other sets of records accessible by computing platform . For instance, data store  may represent an SQL database stored using one or more hard drives included in computing platform  and\/or accessible via network  or another connection. In this example, server computing platform  does not include a display or other input components, but such components may be included and\/or server computing platform  may be controlled via remote login. Server computing platform  may additionally include networking components (e.g., Ethernet card, wireless components) to access network .","Memory  embodies various program components, in this example, an application server , application code , a persistence framework , and a metadata relay module . Additional components such as an operating system, other application code files for use by application server , and the like may also be included in memory .","Application server  can comprise one or more program components that configure server computing platform to provide functionality, such as exposing an application programming interface (API) to clients for accessing business logic provided by server platform  as configured by one or more program components.","For example, application server  may comprise an engine used to generate dynamic content for web pages and\/or web applications based on application code . Examples of application servers include, but are not limited to, Adobe(R) ColdFusion(R) and Microsoft ASP.net, available from Microsoft Corporation of Redmond Wash. Further examples include Java frameworks and PHP.","In this example, application server  is configured to access program logic specified in application code . However, embodiments include application servers  coded to directly provide business logic without the use of separate application code .","Application server  delivers data to and\/or receives data from one or more client applications . In doing so, the application server will configure platform  to store data representing an object or other logical unit in memory . For instance, application code  may define one or more object classes to be populated with data from data store  and\/or operated on by other application logic defined in code . As an example, an application code file  may comprise a CFML file specifying a class that is used to instantiate one or more objects at runtime, with the object(s) populated by accessing one or more rows of data from a table in data store  and then returned to a requesting client application.","A developer writing or updating a server-side component may wish to utilize the persistence framework  in order to avoid the need to include program logic for interfacing directly with data store . For instance, if data store  comprises an SQL database, in the absence of the persistence framework, the developer would need to include code for providing SQL statements, receiving an array of data returned from the data store, and storing the data in the array as one or more software objects for use by application server . Similarly, the code would need to include suitable statements and commands to convert software objects into data for inclusion in datastore . Additionally, code for setting up and maintaining database tables, table relationships, and the like would be included.","Persistence framework  represents one or more applications, processes, or components that are used to bridge the gap between data as stored in data store  and data as handled by application server . Examples of persistence frameworks include, but are not limited to, the Hibernate object\/relation persistence and query service available online.","Persistence framework  can rely on persistence metadata that defines relationships between software objects or other units as handled by application server  and data as stored using data store . Persistence metadata can comprise, for example, data mapping object parameters to database columns, data identifying a relationship between the object and another object, data identifying join columns for the database, a loading parameter for use in loading data from the database, or a cascading option. The persistence metadata may be entered by a developer when writing code. For instance, if application code  comprises a CFML file for use with the ColdFusion(R) server environment, then persistence metadata may be included alongside class definitions and can be recognized by application server  based on syntax and\/or tags in the code.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["122","102","121","122","124","126","128","130","132","122","134","136","138"]},"Memory  embodies various program components, including a client application . In this example, client application  utilizes a runtime environment  to provide desired client-side functionality based on accessing one or more remote data providers including (but not limited to) application server . Generally, a runtime environment  may be used to allow use of a client application  across multiple types of computing platforms, with each platform having a corresponding version of the runtime environment that is adapted to the particular operating system and\/or hardware of the computing platform. An example of a suitable runtime environments include, but are not limited to, the AIR(R) environment available from Adobe Systems Incorporated. The present subject matter can be used with stand-alone applications, i.e., applications that can be executed independently of a runtime environment.","Application  can comprise suitable program components to provide a user interface, receive input, and otherwise interact with a user (and\/or other devices at client platform ) to determine data to be obtained from and provided to one or more remote data providers. For instance, application  may comprise an application that displays employee records and allows for editing of those records, with the records obtained from datastore  by making requests from client application  to application server .","A developer may wish for client application  to be used even when access to network  and\/or server computing platform  is not available or desired. In this example, a client-side persistence framework  is included in or utilized by application \/runtime environment  in order to facilitate offline functionality by storing local versions of data accessed from remote data providers and generated using client application .","For example, one or more software objects or other logical units may be returned by application server  in response to a query from client application . These objects can be stored in nonvolatile memory , such as RAM comprising working memory for application . Additionally, persistence framework  can be used to define and maintain one or more database tables in data store . For example, runtime environment  may include database software, such as SQL lite, which can be invoked by suitable commands from persistence framework  to locally store and retrieve data representing the object(s) returned by server  using the database.","As was noted above, a persistence framework utilizes persistence metadata in order to determine how to store data as handled by an application (e.g., as software objects) in a database (e.g., as entries in one or more database tables). Additionally, the persistence metadata may define what data is stored, relationships between software objects, how data is to be loaded, one or more mappings between fields and columns in the database table based on cascading options that define relationships between objects, and other suitable information.","In order to use persistence framework  at client , persistence framework  will require persistence metadata indicating how client-side data representing objects or other logical units are to be stored in client-side data store . A developer can include such information when coding client application , but this process may be tedious.","Embodiments configured in accordance with the present subject matter can at least partially reduce this burden by including components that relay persistence metadata already provided for server-side code for use by client-side components. In the example of , metadata access module  obtains the persistence metadata from metadata relay module  at server computing platform .","Metadata access module  represents one or more client-side applications, processes, or components that coordinate with server-side components to retrieve persistence metadata from a remote data provider. Access module  may be a separate component or may be included in client application , persistence framework , or runtime environment .","Turning to server , metadata relay module  can comprise one or more applications, processes, or components that configure server  to provide persistence metadata to clients. Metadata relay module  may be included in application server , persistence framework , or may comprise a separate component.","In some embodiments, metadata relay module  may identify persistence metadata in application code  based on syntax and\/or context of statements in the code. For example, if application code  comprises CFML code for use by ColdFusion(R), the persistence metadata can be recognized based on tags included in the code file and tied to ColdFusion(R) components. As another example, the persistence metadata can be obtained based on querying the application server or persistence framework  for a copy of the persistence metadata used to load\/store a particular instance of an object or other logical unit.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["200","202","204"]},"Program components  and  represent objects that have been instantiated during operation of the application. Program components  may include calls to data providers that return data stored in working memory as object instances  and  to be operated upon by other program components (e.g., methods of program component ). For example, methods included in program component  may provide for display of a datagrid or other interface element to display data represented by program components  and  and additional interface elements (e.g., fields, buttons) to control updates to the data.","Program components  and  have been provided by the persistence framework in this example. For example, code for the application may include a statement indicating that use of the client-side persistence framework is desired. When the application is compiled (or initialized in a runtime environment), components  and  can be included in the running application. For instance, component  represents SQL methods that can be used to take data represented in object instances  and  and store the data in a local SQL database. As another example, the SQL methods may be used to populate object instances  and  when a connection to the data provider is not available.","In accordance with the present subject matter, program component  comprises one or more metadata handlers. For example, the metadata handlers can comprise code that recognizes persistence metadata corresponding to object instances  and  returned from the data provider when a connection is available and makes the persistence metadata available to the SQL methods for use in loading\/storing data in the client-side database. The metadata handlers may also be used to maintain data indicating a version of persistence metadata and coordinate with the remote data provider to obtain the most-recent version of persistence metadata. In some embodiments, the metadata handlers explicitly request the persistence metadata by setting up an appropriate connection to the server and requesting the metadata; however, a data provider may automatically provide persistence metadata when object data is returned in response to requests by other components (e.g., data providers in program component ).",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2","b":["214","216"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["300","302"]},"Block  represents receiving requested data and persistence metadata from the server. The persistence metadata may be received alongside data returned in response to the data request. For example, the application server may return one or more objects, such as XML objects containing the requested data and then an XML object containing persistence metadata for the object(s). The received object data can be stored in working memory for the application as one or more software objects or other logical units to be operated on by the client application.","Block  represents persisting the received data in a local database using a persistence framework and persistence metadata. For example, the persistence framework may include methods and functions that access the locally-stored software objects and provide SQL or other database commands to store object parameter values in database columns corresponding to the parameters.","As an example, an \u201cemployee\u201d object may include parameters such as name, ID, and address. The persistence metadata may identify that the name, ID, and address each constitute a separate column in the database, with the ID used as the key. This information can be used to set up one or more database tables (if not set up previously) in the local data store and then to store the employee object therein. Depending on the particular configuration of the client application and the data returned by the server, an object may correspond to one or more database records. For example, an \u201cemployee\u201d object may include data regarding a single \u201cemployee\u201d record, while an \u201cemployees\u201d object may correspond to a plurality of records.","The relationship between the objects may be specified in the persistence metadata and can be used to configure database tables and relationships accordingly. For instance, a table may be used to maintain a record for each of a plurality of \u201cemployees\u201d object, each object in the first table cross-referenced to a corresponding table representing a plurality of \u201cemployee\u201d objects. As another example, a many-to-one relationship may be defined between an employee record type and a department table\u2014that is, each department may be associated with may employee records but each employee record is associated with one department. \u201cManyToOne\u201d persistence metadata can define a relationship type, while JoinColumn metadata will indicate what column in the employee table holds the reference to the primary key value of the corresponding department for each employee record.","Block  represents sending one or more data updates to the server if a connection is available. For example, while the network connection is online, data may be persisted locally and any changes can be immediately uploaded to the server. Block  represents using the local database if a connection is not available. For example, if the client application cannot reach the server (e.g., due to lack of connectivity), then employee records may be updated\/added, with the changes\/additions stored in the local database. The method flows back to block  in which the server is updated once connectivity is available again.","The client and server application can be configured to resolve differences in data as is known in the art. For example, routines can be included to alert a user of the client application when a client-side change to a record conflicts with a change to the record in the server-side version and\/or to select which side to overwrite.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4","b":["400","400","402"]},"Block  represents using the server-side persistence framework to fetch the requested data from the datastore. For example, if a ColdFusion(R) application server is configured to provide functionality by a CFML file, the file may define an \u201cEmployee\u201d class as a ColdFusion(R) Component (CFC) as noted in the left side of the table below. The corresponding persistence metadata as noted in the right side of the table below:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Class Definition Alone","Class Definition with Persistence Metadata"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["<cfcomponent\u201d>","<cfcomponent persistent= \u201ctrue\u201d table = \u201cEMPLOYEE\u201d>"]},{"entry":["<cfproperty name= \u201cEmpID\u201d\/>","<cfproperty name =\u201cEmpID\u201d column=\u201dEMP_ID\u201d fieldtype="]},{"entry":["<cdproperty name= \u201cEmpName\u201d\/>","\u201cID\u201d \/>"]},{"entry":["<cfproperty name= \u201cAddress\u201d\/>","<cfproperty name = \u201cEmpName\u201d column= \u201cEMP_NAME\u201d\/>"]},{"entry":["<\/cfcomponent>","<cfproperty name = \u201cAddress\u201d column= \u201cADDRESS\u201d>"]},{"entry":[{},"<\/cfcomponent>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In this example, the persistence metadata specifies that the \u201cEmployee\u201d component is to be stored in a database table named EMPLOYEE. The \u201cEmpID\u201d property is to be stored in a column named EMP_ID that is also the key for the database table (indicated by \u201cfieldtype=ID\u201d). The table also includes columns EMP_NAME and ADDRESS corresponding to the parameters \u201cEmpName\u201d and \u201cAddress,\u201d respectively. This metadata can be recognized by the persistence framework by use of the \u201cpersistent=true\u201d tag in the class definition and \u201ctable\u201d and \u201ccolumn\u201d parameters.","When an \u201cEmployee\u201d object (or objects) are requested, the persistence metadata can be used to obtain corresponding data specified in terms of the \u201cEmployee\u201d component through use of database queries. For example, a request may specify that data is desired for \u201cEmpName=Smith\u201d. The persistence framework can use the request data and persistence metadata to query the EMPLOYEE table for \u201cEMP_NAME=\u2018Smith\u2019\u201d. Other components of the application server can store the data in memory and package it into an appropriate object (e.g., an XML object) to be sent to the client.","Block  represents providing the requested data and\/or the persistence metadata to the client. For instance, the XML object containing query results can be sent in response to the request noted above. The persistence metadata can be identified based on context in the application code and sent as a separate XML package or other object.","In some embodiments, the server supports version control and block  can comprise determining if an updated version of the persistence metadata is needed before sending the metadata. For example, the server may maintain a copy of the persistence metadata for a code file and detect changes in the persistence metadata; each time a change is detected, the server can increment a version number. If the server determines that the client-side version is different from the server-side version (or no client-side version exists, e.g., the client identifies \u201cversion 0\u201d), then the current persistence metadata can be sent. As another example, a client may track persistence metadata version information by number, date\/time of receipt, or another identifier that can be provided to the server and used by the server to determine if data has been changed since the persistence metadata was provided to the client and to send the latest data if changes have been made. As another example, the client may send client-side persistence metadata for comparison to current persistence metadata by the server.","Block  represents using the persistence framework to update the datastore as needed. For example, a client request may specify changes\/additions to stored data. Continuing with the \u201cEmployee\u201d example above, after editing is complete, the client may return an object to the server, the object including new or changed Employee records. The persistence framework can be used as is known in the art to convert the object as stored in memory into suitable database records. For example, the \u201cEmpName,\u201d \u201cEmpID,\u201d and \u201cAddress\u201d parameter values can be extracted and stored in respective columns of the EMPLOYEE table.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","b":["500","502"]},"Block  represents determining version information for locally-available persistence metadata pertaining to the desired object data. This may comprise determining if any persistence metadata at all is available locally and, if so, a version number, date\/time, or other indicator that can be submitted in a request to the server. As an example, the persistence framework may be configured to maintain version tracking information alongside data correlating persistence metadata to particular classes or other logical units.","Block  represents sending persistence metadata version information from the client to a server. In this example, a version number is sent along with the request for the object data. However, other embodiments may send the persistence metadata request separately from a data request and\/or may send data other than a version number. For example, a date at which the locally-available persistence metadata was obtained may be sent or the locally-available persistence metadata itself may be sent for comparison by the server. If no persistence metadata is locally available, then a suitable indicator can be sent to the server (e.g., version=0, version=NULL, etc.).","Block  represents receiving record data and current persistence metadata at the client. For example, the persistence metadata may arrive as an XML file or other package recognized by the client-side metadata handling components. The persistence metadata can then be stored along with data cross-referencing the persistence metadata to the class or other logical unit to which it pertains. If received alongside record data, the record data can be stored in memory as one or more software objects or other components for use by the client application and the client-side persistence framework.","Additional embodiments can apply the client-side runtime behaviors noted above to an integrated development environment (IDE) or other coding application used to develop a client application. For example, an IDE such as Adobe(R) Flash(R) Builder(TM) may include a code editing interface and one or more wizards used to define data providers. As an example, a wizard may present a workflow using one or more dialog boxes for allowing a user to specify a data provider and generate code that, when compiled, results in a client application that calls the data provider, receives data (e.g., an XML object), and then associates the received object with one or more client-side objects or other logical units.","The IDE can be configured to determine if the data provider uses a server-side persistence framework and, if so, query, the data provider for persistence metadata. The persistence metadata can then be displayed to the developer and\/or inserted into the code at appropriate locations to work with other elements of the application under development so that, when compiled\/interpreted, the application invokes a client-side persistence framework and uses the persistence metadata.","General Considerations","Some portions of the detailed description were presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is here and generally is considered to be a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities.","Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels.","Unless specifically stated otherwise, as apparent from the foregoing discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a computing platform, such as one or more computers and\/or a similar electronic computing device or devices, that manipulate or transform data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing platform.","The various systems discussed herein are not limited to any particular hardware architecture or configuration. A computing device can include any suitable arrangement of components that provide a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor-based computer systems accessing stored software, that programs or configures the computing system from a general-purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming, scripting, or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.","Embodiments of the methods disclosed herein may be performed in the operation of such computing devices. The order of the blocks presented in the examples above can be varied\u2014for example, blocks can be re-ordered, combined, and\/or broken into sub-blocks. Certain blocks or processes can be performed in parallel.","As noted above, a computing device may access one or more computer-readable media that tangibly embody computer-readable instructions which, when executed by at least one computer, cause the at least one computer to implement one or more embodiments of the present subject matter. When software is utilized, the software may comprise one or more components, processes, and\/or applications. Additionally or alternatively to software, the computing device(s) may comprise circuitry that renders the device(s) operative to implement one or more of the methods of the present subject matter.","Examples of computing devices include, but are not limited to, servers, personal computers, personal digital assistants (PDAs), cellular telephones, televisions, television set-top boxes, portable music players, and consumer electronic devices such as cameras, camcorders, and mobile devices. Computing devices may be integrated into other devices, e.g. \u201csmart\u201d appliances, automobiles, kiosks, and the like.","The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, processes discussed herein may be implemented using a single computing device or multiple computing devices working in combination. Databases and applications may be implemented on a single system or distributed across multiple systems. Distributed components may operate sequentially or in parallel.","When data is obtained or accessed as between a first and second computer system or components thereof, the actual data may travel between the systems directly or indirectly. For example, if a first computer accesses data from a second computer, the access may involve one or more intermediary computers, proxies, and the like. The actual data may move between the first and second computers, or the first computer may provide a pointer or metafile that the second computer uses to access the actual data from a computer other than the first computer, for instance. Data may be \u201cpulled\u201d via a request, or \u201cpushed\u201d without a request in various embodiments.","The technology referenced herein also makes reference to communicating data between components or systems. It should be appreciated that such communications may occur over any suitable number or type of networks or links, including, but not limited to, a dial-in network, a local area network (LAN), wide area network (WAN), public switched telephone network (PSTN), the Internet, an intranet or any combination of hard-wired and\/or wireless communication links.","Any suitable tangible computer-readable medium or media may be used to implement or practice the presently-disclosed subject matter, including, but not limited to, diskettes, drives, magnetic-based storage media, optical storage media, including disks (including CD-ROMS, DVD-ROMS, and variants thereof), flash, RAM, ROM, and other memory devices.","The use of \u201cadapted to\u201d or \u201cconfigured to\u201d herein is meant as open and inclusive language that does not foreclose devices adapted to or configured to perform additional tasks or steps. Additionally, the use of \u201cbased on\u201d is meant to be open and inclusive, in that a process, step, calculation, or other action \u201cbased on\u201d one or more recited conditions or values may, in practice, be based on additional conditions or values beyond those recited. Headings, lists, and numbering included herein are for ease of explanation only and are not meant to be limiting.","While the present subject matter has been described in detail with respect to specific embodiments thereof, it will be appreciated that those skilled in the art, upon attaining an understanding of the foregoing may readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, it should be understood that the present disclosure has been presented for purposes of example rather than limitation, and does not preclude inclusion of such modifications, variations and\/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A full and enabling disclosure is set forth more particularly in the remainder of the specification. The specification makes reference to the following appended figures.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
