---
title: Partitioning resources of a processor
abstract: Embodiments describe herein provide an apparatus, a computer readable medium and a method for simultaneously processing tasks within an APD. The method includes processing a first task within an APD. The method also includes reducing utilization of the APD by the first task to facilitate simultaneous processing of the second task, such that the utilization remains below a threshold.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08933942&OS=08933942&RS=08933942
owner: Advanced Micro Devices, Inc.
number: 08933942
owner_city: Sunnyvale
owner_country: US
publication_date: 20111208
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF EMBODIMENTS","DETAILED DESCRIPTION OF THE EMBODIMENTS"],"p":["1. Field of the Invention","The present invention is generally directed to computing systems. More particularly, the present invention is directed to improving utilization of resources within a processor or computing system.","2. Background Art","The desire to use a graphics processing unit (GPU) for general computation has become much more pronounced recently due to the GPU's exemplary performance per unit power and\/or cost. The computational capabilities for GPUs, generally, have grown at a rate exceeding that of the corresponding central processing unit (CPU) platforms. This growth, coupled with the explosion of the mobile computing market (e.g., notebooks, mobile smart phones, tablets, etc.) and its necessary supporting server\/enterprise systems, has been used to provide a specified quality of desired user experience. Consequently, the combined use of CPUs and GP Us for executing workloads with data parallel content is becoming a volume technology.","However, GPUs have traditionally operated in a constrained programming environment, available primarily for the acceleration of graphics. These constraints arose from the fact that GPUs did not have as rich a programming ecosystem as CPUs. Their use, therefore, has been mostly limited to two dimensional (2D) and three dimensional (3D) graphics and a few leading edge multimedia applications, which are already accustomed to dealing with graphics and video application programming interfaces (APIs),","With the advent of multi-vendor supported OpenCL\u00ae and DirectCompute\u00ae, standard APIs and supporting tools, the limitations of the GPUs in traditional applications has been extended beyond traditional graphics. Although OpenCL and DirectCompute are a promising start, there are many hurdles remaining to creating an environment and ecosystem that allows the combination of a CPU and a GPU to be used as fluidly as the CPU for most programming tasks.","Existing computing systems often include multiple processing devices. For example, some computing systems include both a CPU and a GPU on separate chips (e.g., the CPU might be located on a motherboard and the GPU might be located on a graphics card) or in a single chip package. Both of these arrangements, however, still include significant challenges associated with (i) separate memory systems, (ii) efficient scheduling, (iii) providing quality of service (QoS) guarantees between processes, (iv) programming model, and (v) compiling to multiple target instruction set architectures (ISAs)\u2014all while minimizing power consumption.","For example, the discrete chip arrangement forces system and software architects to utilize chip to chip interfaces for each processor to access memory. While these external interfaces (e.g., chip to chip) negatively affect memory latency and power consumption for cooperating heterogeneous processors, the separate memory systems (i.e., separate address spaces) and driver managed shared memory create overhead that becomes unacceptable for fine grain offload.","Attributes of both the discrete and single chip arrangements can also limit the types of workloads that will result in efficient execution on the GPU.","One example includes the limitations of single task launch systems. In this example, physics or artificial intelligence workloads with insufficient data parallel operations between serial reduction steps may not be able to overcome the communications overhead associated with execution on the GPU. This limitation can exist because the CPU can quickly require the results of the data parallel operations performed by the GPU. However, the high overhead of compute offload to the GPU (e.g., dispatching work to the GPU, the latency incurred in reporting results, and the possibility of having to wait for previously-issued work) often results in unacceptable performance. Unless offload overheads can be reduced, or multiple offloads can be concurrently scheduled, loss of the opportunity to accelerate fine grain data parallel workloads will occur.","in another example of single task launch system limitations, consider a workload that requires heavy register resources and also has a long executing kernel. Here, the large register usage creates sparse occupancy of the GPU compute units and, therefore, limits the latency hiding attributes the GPU normally offers. In current systems, workloads that require heavy register resources are typically larger than the average workload. These larger workloads can prevent the cooperative mixing of a different kernel with small resource requirements. In yet one other example, a low latency kernel can also fail to fully occupy the GPU's computing resources. In this scenario, some workgroups finish before all the workgroup slots can be occupied, leaving the GPU only partially utilized. Unless at least these limitations of single task launch systems can be overcome, the GPU will suffer from the inability to hide the latency of such bulky workloads.","What is needed, therefore, are techniques to overcome the limitations of single task launch systems, thereby improving utilization of the GPU's processing resource. Embodiments of the present invention, in certain circumstances, provide scheduling techniques to efficiently and simultaneously launch two or more tasks within an accelerated processing device. The ability to simultaneously launch two or more tasks enables full utilization of the GPU's resources.","Although GPUs, accelerated processing units (APUs), and general purpose use of the graphics processing unit (GPGPU) are commonly used terms in this field, the expression \u201caccelerated processing device (APD)\u201d is considered to be a broader expression. For example, APD refers to any cooperating collection of hardware and\/or software that performs those functions and computations associated with accelerating graphics processing tasks, data parallel tasks, or nested data parallel tasks in an accelerated manner compared to conventional CPUs, conventional GPUs, software and\/or combinations thereof.","One embodiment of the present invention provides a method including processing a first task within a processor such as an APD. The method also includes reducing utilization of the processor (such as an APD) by the first task to facilitate simultaneous processing of the second task, such that the utilization remains below a threshold.","Additional features and advantages of the invention, as well as the structure and operation of various embodiments of the invention, are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","In the detailed description that follows, references to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to affect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","The term \u201cembodiments of the invention\u201d does not require that all embodiments of the invention include the discussed feature, advantage or mode of operation. Alternate embodiments may be devised without departing from the scope of the invention, and well-known elements of the invention may not be described in detail or may be omitted so as not to obscure the relevant details of the invention. In addition, the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. For example, as used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises,\u201d \u201ccomprising,\u201d \u201cincludes\u201d and\/or \u201cincluding,\u201d when used herein, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1A","b":["100","102","104","102","100","102","104","104","102","102","104"]},"In one example, system  also includes a memory , an operating system , and a communication infrastructure . The operating system  and the communication infrastructure  are discussed in greater detail below.","The system  also includes a kernel mode driver (KMD) , a software scheduler (SWS) , and a memory management unit , such as input\/output memory management unit (IOMMU). Components of system  can be implemented as hardware, firmware, software, or any combination thereof. A person of ordinary skill in the art will appreciate that system  may include one or more software, hardware, and firmware components in addition to, or different from, that shown in the embodiment shown in .","In one example, a driver, such as KMD , typically communicates with a device through a computer bus or communications subsystem to which the hardware connects. When a calling program invokes a routine in the driver, the driver issues commands to the device. Once the device sends data back to the driver, the driver may invoke routines in the original calling program. In one example, drivers are hardware-dependent and operating-system-specific. They usually provide the interrupt handling required for any necessary asynchronous time-dependent hardware interface.","Device drivers, particularly on modern Microsoft Windows\u00ae platforms, can run in kernel-mode (Ring ) or in user-mode (Ring ). The primary benefit of running a driver in user mode is improved stability, since a poorly written user mode device driver cannot crash the system by overwriting kernel memory. On the other hand, user\/kernel-mode transitions usually impose a considerable performance overhead, thereby prohibiting user mode-drivers for low latency and high throughput requirements. Kernel space can be accessed by user module only through the use of system calls. End user programs like the UNIX shell or other GUI based applications are part of the user space. These applications interact with hardware through kernel supported functions.","CPU  can include (not shown) one or more of a control processor, field programmable gate array (FPGA), application specific integrated circuit (ASIC), or digital signal processor (DSP). CPU , for example, executes the control logic, including the operating system , KMD , SWS , and applications , that control the operation of computing system . In this illustrative embodiment, CPU , according to one embodiment, initiates and controls the execution of applications  by, for example, distributing the processing associated with that application across the CPU  and other processing resources, such as the APD .","APD , among other things, executes commands and programs for selected functions, such as graphics operations and other operations that may be, for example, particularly suited for parallel processing. In general, APD  can be frequently used for executing graphics pipeline operations, such as pixel operations, geometric computations, and rendering an image to a display. In various embodiments of the present invention, APD  can also execute compute processing operations (e.g., those operations unrelated to graphics such as, for example, video operations, physics simulations, computational fluid dynamics, etc.), based on commands or instructions received from CPU .","For example, commands can be considered as special instructions that are not typically defined in the instruction set architecture (ISA). A command may be executed by a special processor such a dispatch processor, command processor, or network controller. On the other hand, instructions can be considered, for example, a single operation of a processor within a computer architecture. In one example, when using two sets of ISAs, some instructions are used to execute x86 programs and some instructions are used to execute kernels on an APD compute unit.","In an illustrative embodiment, CPU  transmits selected commands to APD . These selected commands can include graphics commands and other commands amenable to parallel execution. These selected commands, that can also include compute processing commands, can be executed substantially independently from CPU .","APD  can include its own compute units (not shown), such as, but not limited to, one or more SIMD processing cores. As referred to herein, a SIMD is a pipeline, or programming model, where a kernel is executed concurrently on multiple processing elements each with its own data and a shared program counter. All processing elements execute an identical set of instructions. The use of predication enables work-items to participate or not for each issued command.","In one example, each APD  compute unit can include one or more scalar and\/or vector floating-point units and\/or arithmetic and logic units (ALUs). The APD compute unit can also include special purpose processing units (not shown), such as inverse-square root units and sine\/cosine units. In one example, the APD compute units are referred to herein collectively as shader core .","Having one or more SIMDs, in general, makes APD  ideally suited for execution of data-parallel tasks such as those that are common in graphics processing.","Some graphics pipeline operations, such as pixel processing, and other parallel computation operations, can require that the same command stream or compute kernel be performed on streams or collections of input data elements. Respective instantiations of the same compute kernel can be executed concurrently on multiple compute units in shader core  in order to process such data elements in parallel. As referred to herein, for example, a compute kernel is a function containing instructions declared in a program and executed on an APD compute unit. This function is also referred to as a kernel, a shader, a shader program, or a program.","In one illustrative embodiment, each compute unit (e.g., SIMD processing core) can execute a respective instantiation of a particular work-item to process incoming data.","In one example, a work-item is one of a collection of parallel executions of a kernel invoked on a device by a command. A work-item is executed by one or more processing elements as part of a work-group executing on a compute unit.","A work-item is distinguished from other executions within the collection by its global ID and local ID. In one example, a subset of work-items in a workgroup that execute simultaneously together on a SIMD can be referred to as a wavefront . The width of a wavefront is a characteristic of the hardware of the compute unit (e.g., SIMD processing core). As referred to herein, a workgroup is a collection of related work-items that execute on a single compute unit. The work-items in the group execute the same kernel and share local memory and work-group barriers.","In the exemplary embodiment, all wavefronts from a workgroup are processed on the same SIMD processing core. Instructions across a wavefront are issued one at a time, and when all work-items follow the same control flow, each work-item executes the same program. Wavefronts can also be referred to as warps, vectors, or threads.","An execution mask and work-item predication are used to enable divergent control flow within a wavefront, where each individual work-item can actually take a unique code path through the kernel. Partially populated wavefronts can be processed when a full set of work-items is not available at wavefront start time. For example, shader core  can simultaneously execute a predetermined number of wavefronts , each wavefront  comprising a multiple work-items.","Within the system , APD  includes its own memory, such as graphics memory  (although memory  is not limited to graphics only use). Graphics memory  provides a local memory for use during computations in APD . Individual compute units (not shown) within shader core  can have their own local data store (not shown). In one embodiment, APD  includes access to local graphics memory , as well as access to the memory . In another embodiment, APD  can include access to dynamic random access memory (DRAM) or other such memories (not shown) attached directly to the APD  and separately from memory .","In the example shown, APD  also includes one or \u201cn\u201d number of command processors (CPs) . CP  controls the processing within APD . CP  also retrieves commands to be executed from command buffers  in memory  and coordinates the execution of those commands on APD .","In one example, CPU  inputs commands based on applications  into appropriate command buffers . As referred to herein, an application is the combination of the program parts that will execute on the compute units within the CPU and APD.","A plurality of command buffers  can be maintained with each process scheduled for execution on the APD .","CP  can be implemented in hardware, firmware, or software, or a combination thereof. In one embodiment, CP  is implemented as a reduced instruction set computer (RISC) engine with microcode for implementing logic including scheduling logic.","APD  also includes one or \u201cn\u201d number of dispatch controllers (DCs) . In the present application, the term dispatch refers to a command executed by a dispatch controller that uses the context state to initiate the start of the execution of a kernel for a set of work groups on a set of compute units. DC  includes logic to initiate workgroups in the shader core . In some embodiments, DC  can be implemented as part of CP .","DC  includes logic to initiate wavefronts of work-items in the shader core . In some embodiments, DC  can be implemented as part of CP .","System  also includes a hardware scheduler (HWS)  for selecting a process from a run list  for execution on APD . HWS  can select processes from run list  using round robin methodology, priority level, or based on other scheduling policies. The priority level, for example, can be dynamically determined. HWS  can also include functionality to manage the run list , for example, by adding new processes and by deleting existing processes from run-list . The run list management logic of HWS  is sometimes referred to as a run list controller (RLC).","In various embodiments of the present invention, when HWS  initiates the execution of a process from run list , CP  begins retrieving and executing commands from the corresponding command buffer . In some instances, CP  can generate one or more commands to be executed within APD , which correspond with commands received from CPU . In one embodiment, CP , together with other components, implements a prioritizing and scheduling of commands on APD  in a manner that improves or maximizes the utilization of the resources of APD  resources and\/or system .","APD  can have access to, or may include, an interrupt generator . Interrupt generator  can be configured by APD  to interrupt the operating system  when interrupt events, such as page faults, are encountered by APD . For example, APD  can rely on interrupt generation logic within IOMMU  to create the page fault interrupts noted above.","APD  can also include preemption and context switch logic  for preempting a process currently running within shader core . Context switch logic , for example, includes functionality to stop the process and save its current state (e.g., shader core  state, and CP  state).","As referred to herein, the term state can include an initial state, an intermediate state, and\/or a final state. An initial state is a starting point for a machine to process an input data set according to a programming order to create an output set of data. There is an intermediate state, for example, that needs to be stored at several points to enable the processing to make forward progress. This intermediate state is sometimes stored to allow a continuation of execution at a later time when interrupted by some other process. There is also final state that can be recorded as part of the output data set.","Preemption and context switch logic  can also include logic to context switch another process into the APD . The functionality to context switch another process into running on the APD  may include instantiating the process, for example, through the CP  and DC  to run on APD , restoring any previously saved state for that process, and starting its execution.","Memory  can include non-persistent memory such as DRAM (not shown). Memory  can store, e.g., processing logic instructions, constant values, and variable values during execution of portions of applications or other processing logic. For example, in one embodiment, parts of control logic to perform one or more operations on CPU  can reside within memory  during execution of the respective portions of the operation by CPU .","During execution, respective applications, operating system functions, processing logic commands, and system software can reside in memory . Control logic commands fundamental to operating system  will generally reside in memory  during execution. Other software commands, including, for example, kernel mode driver  and software scheduler  can also reside in memory  during execution of system .","In this example, memory  includes command buffers  that are used by CPU  to send commands to APD . Memory  also contains process lists and process information (e.g., active list  and process control blocks ). These lists, as well as the information, are used by scheduling software executing on CPU  to communicate scheduling information to APD  and\/or related scheduling hardware. Access to memory  can be managed by a memory controller , which is coupled to memory . For example, requests from CPU , or from other devices, for reading from or for writing to memory  are managed by the memory controller .","Referring back to other aspects of system , IOMMU  is a multi-context memory management unit.","As used herein, context can be considered the environment within which the kernels execute and the domain in which synchronization and memory management is defined. The context includes a set of devices, the memory accessible to those devices, the corresponding memory properties and one or more command-queues used to schedule execution of a kernel(s) or operations on memory objects.","Referring back to the example shown in , IOMMU  includes logic to perform virtual to physical address translation for memory page access for devices including APD . IOMMU  may also include logic to generate interrupts, for example, when a page access by a device such as APD  results in a page fault. IOMMU  may also include, or have access to, a translation lookaside buffer (TLB) . TLB , as an example, can be implemented in a content addressable memory (CAM) to accelerate translation of logical (i.e., virtual) memory addresses to physical memory addresses for requests made by APD  for data in memory .","In the example shown, communication infrastructure  interconnects the components of system  as needed. Communication infrastructure  can include (not shown) one or more of a peripheral component interconnect (PCI) bus, extended PCI (PCI-E) bus, advanced microcontroller bus architecture (AMBA) bus, advanced graphics port (AGP), or other such communication infrastructure. Communications infrastructure  can also include an Ethernet, or similar network, or any suitable physical communications infrastructure that satisfies an application's data transfer rate requirements. Communication infrastructure  includes the functionality to interconnect components including components of computing system .","In this example, operating system  includes functionality to manage the hardware components of system  and to provide common services. In various embodiments, operating system  can execute on CPU  and provide common services. These common services can include, for example, scheduling applications for execution within CPU , fault management, interrupt service, as well as processing the input and output of other applications.","In some embodiments, based on interrupts generated by an interrupt controller, such as interrupt controller , operating system  invokes an appropriate interrupt handling routine. For example, upon detecting a page fault interrupt, operating system  may invoke an interrupt handler to initiate loading of the relevant page into memory  and to update corresponding page tables.","Operating system  may also include functionality to protect system  by ensuring that access to hardware components is mediated through operating system managed kernel functionality. In effect, operating system  ensures that applications, such as applications , run on CPU  in user space. Operating system  also ensures that applications  invoke kernel functionality provided by the operating system to access hardware and\/or input\/output functionality.","By way of example, applications  include various programs or commands to perform user computations that are also executed on CPU . CPU  can seamlessly send selected commands for processing on the APD .","In one example, KMD  implements an application program interface (API) through which CPU , or applications executing on CPU  or other logic, can invoke APD  functionality. For example, KMD  can enqueue commands from CPU  to command buffers  from which APD  will subsequently retrieve the commands. Additionally, KMD  can, together with SWS , perform scheduling of processes to be executed on APD . SWS , for example, can include logic to maintain a prioritized list of processes to be executed on the APD.","In other embodiments of the present invention, applications executing on CPU  can entirely bypass KMD  when enqueuing commands.","In some embodiments, SWS  maintains an active list  in memory  of processes to be executed on APD . SWS  also selects a subset of the processes in active list  to be managed by HWS  in the hardware. In an illustrative embodiment, this two level run list of processes increases the flexibility of managing processes and enables the hardware to rapidly respond to changes in the processing environment. In another embodiment, information relevant for running each process on APD  is communicated from CPU  to APD  through process control blocks (PCB) .","Processing logic for applications, operating system, and system software can include commands specified in a programming language such as C and\/or in a hardware description language such as Verilog, RTL, or netlists, to enable ultimately configuring a manufacturing process through the generation of maskworks\/photomasks to generate a hardware device embodying aspects of the invention described herein.","A person of skill in the art will understand, upon reading this description, that computing system  can include more or fewer components than shown in . For example, computing system  can include one or more input interfaces, non-volatile storage, one or more output interfaces, network interfaces, and one or more displays or display interfaces.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 1B","FIG. 1A","FIG. 1B","FIG. 1A","FIG. 1B"],"b":["104","124","124","124","124","124","125","0","124","162","1","2","124","124","160","166","128"],"i":["a","b","c","a","b ","c"]},"In , graphics pipeline  can include a set of blocks, referred to herein as ordered pipeline . As an example, ordered pipeline  includes a vertex group translator (VGT) , a primitive assembler (PA) , a scan converter (SC) , and a shader-export, render-back unit (SX\/RB) . Each block within ordered pipeline  may represent a different stage of graphics processing within graphics pipeline . Ordered pipeline  can be a fixed function hardware pipeline. Other implementations can be used that would also be within the spirit and scope of the present invention.","Although only a small amount of data may be provided as an input to graphics pipeline , this data will be amplified by the time it is provided as an output from graphics pipeline . Graphics pipeline  also includes DC  for counting through ranges within work-item groups received from CP pipeline ","Compute pipeline  includes shader DCs  and . Each of the DCs  and  is configured to count through compute ranges within work groups received from CP pipelines and ","The DCs , , and , illustrated in , receive the input work groups, break the work groups down into wavefronts, and then forward the wavefronts to shader core .","Since graphics pipeline  is generally a fixed function pipeline, it is difficult to save and restore its state, and as a result, the graphics pipeline  is difficult to context switch. Therefore, in most cases context switching, as discussed herein, does not pertain to context switching among graphics processes.","After the processing of work within graphics pipeline  has been completed, the completed work is processed through a render back unit , which does depth and color calculations, and then writes its final results to memory .","Shader core  can be shared by graphics pipeline  and compute pipeline . Shader core  can be a general processor configured to run wavefronts. In one example, all work within compute pipeline  is processed within shader core . Shader core  runs programmable software code and includes various forms of data, such as state data.","A disruption in the QoS occurs when all work-items are unable to access APD resources. Embodiments of the present invention facilitate efficiently and simultaneously launching two or more tasks to resources within APD , enabling all work-items to access various APD resources. In one embodiment, an APD input scheme enables all work-items to have access to the APD's resources in parallel by managing the APD's workload. When the APD's workload approaches maximum levels, (e.g., during attainment of maximum I\/O rates), this APD input scheme assists in that otherwise unused processing resources can be simultaneously utilized in many scenarios. A serial input stream, for example, can be abstracted to appear as parallel simultaneous inputs to the APD.","By way of example, each of the CPs  can have one or more tasks to submit as inputs to other resources within APD , where each task can represent multiple wavefronts. After a first task is submitted as an input, this task may be allowed to ramp up, over a period of time, to utilize all the APD resources necessary for completion of the task. By itself, this first task may or may not reach a maximum APD utilization threshold. However, as other tasks are enqueued and are waiting to be processed within the APD , allocation of the APD resources can be managed to ensure that all of the tasks can simultaneously use the APD , each achieving a percentage of the APD's maximum utilization. This simultaneous use of the APD  by multiple tasks, and their combined utilization percentages, ensures that a predetermined maximum APD utilization threshold is achieved.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 2","FIGS. 1A and 113","FIG. 2"],"b":["200","200","100","200","104","200"]},"In operation , a first task, including one or more wavefronts, is processed within an APD, such as APD . Processing of the first task can be responsive to its transmission by a CP, such as CP . After transmission, this first task is received as a first input to the APD.","In one exemplary embodiment, CP  forwards the first task to DC , which dispatches the plurality of wavefronts of the first task to shader core . By way of example, shader core  can include one or more SIMDs.","In the virtual environment noted above, the first task begins utilizing APD resources as it is received as the first APD input. APD resource utilization can be measured as a function of the number of SIMDs in use by the wavefronts being executed. Utilization can also be measured in view of a preset (and, in some embodiments configurable) threshold based upon dynamically measured factors or a combination of natural factors, thresholds, or other suitable means.","In one example, the first task could be the only task utilizing APD , and would therefore be allowed maximum utilization of all of the APD's processing resources. Depending upon the amount of work (e.g., the number of wavefronts) associated with the task, API) utilization by the first task can increase over time to achieve 100% of the APD's maximum utilization.","A determination of whether APD  achieves maximum utilization can be measured by comparison to a predetermined threshold. This threshold can be 100% or it could be some other percentage. On the other hand, the amount of work associated with the task might be insufficient to achieve 100% utilization of APD  due to the limited amount of processing required, the type of processing required or other factors.","In operation , utilization of the first task is reduced to facilitate simultaneous processing of a second task such that utilization of the APD is below a threshold. For example, a second task is transmitted by CP  to APD . The second task is received by APD  before processing of the first task concludes. By way of example, the second task can appear (e.g., virtually) as a second input to APD , received in parallel with the first input (i.e., the first task). That is, receipt and processing of the first and second tasks by APD  can convey the appearance that APD  has two or more physical input ports.","In operation , the utilization of APD  by the first task is monitored and compared a predetermined threshold. By way of example, communication between APD  and CP  can provide a mechanism for monitoring the utilization threshold. If the APD's utilization is below the threshold (e.g., below 100%), processing of the first and second tasks can occur simultaneously.","For example, processing of the first task might consume only 40% of APD's processing resources. In this example, the remaining 60% of the APD's processing resources will be available for completion of the second task. If processing of the second task consumes only an additional 50% of the APD's remaining processing resources, then the combined APD utilization (e.g., 90%) by the first and second tasks results in 10% of the APD's processing resources remaining unutilized. This remaining 10% can be made available to one or more additional tasks for processing in parallel with the first and second tasks.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 3","b":["300","300","104","104"]},"As noted above in the discussion of , if the APD's utilization is at or above the threshold, utilization of the APD by the first task will be reduced. In one embodiment of the present invention, the utilization of APD  by the first task can naturally decrease over time as wavefronts of the first task complete processing. In another embodiment, the utilization of APD  is reduced by careful and specific management of APD 's processing resources.","By way of example, if the first task is the only task being processed within APD , and if this task is intense enough, over a period of time the first task will ramp-up to 100% utilization of the APD's resources. If the second task is scheduled to be processed within APD  while the first task is being processed, the CP  will query APD  resources to determine how much of the APD is being utilized by the first task. Since the first task's utilization of APD  is at 100%, the first task will be forced to decrease its utilization to accommodate the second task.","If, for example, the second task is allotted an APD utilization of 30%, the utilization of APD  by the first task will begin decreasing to 70% to accommodate the second task.","Utilization of APD  can be reduced, via communication between CP  and DC , by dispatching wavefronts from the first task to shader core . These dispatched wavefronts can be temporarily stored in memory, or they can be permanently removed from APD . A shader pipeline input, for example, can be used to maintain a record of which wavefronts were temporarily dispatched (i.e., context switched).","As wavefronts from the second task are enqueued for processing within APD , wavefronts from the first task will continue to be dispatched until the first task ramps-down to a predetermined level (e.g., 70%). As APD utilization by the first task continues to decrease to the predetermined level of 70%, APD utilization by the second task will simultaneously increase to 30%, as noted above. In this manner, by halting the processing of portions (e.g., wavefronts) of selected tasks, utilization of APD  can be decreased to accommodate the simultaneous processing of other tasks. This process is described in greater detail in relation to .","In , for example, graph  includes an illustration of a plurality of tasks starting at different times. A first task  (identified in  as \u201cTASK ()\u201d), including a plurality of wavefronts, is received by APD . If additional tasks are not scheduled on APD , utilization by the first task  of APD  gradually increases over time to achieve 100% total utilization.","The first task  begins at a scheduled time quanta t utilizing near 0% of the computing capacity of APD . As time continues, shader core  receives the plurality of wavefronts of the first task  that are dispatched by DC . The wavefronts of the first task are dispatched to APD  until a threshold (e.g., 100%) for utilization is achieved. For example, in , the first task  achieves the maximum threshold of 100% APD utilization at a time t.","A second task  (also identified in  as \u201cTASK ()\u201d) is received within APD  before the processing of the first task  concludes. The second task  also includes a plurality of CPU wavefronts and is allotted 50% utilization of APD . When the second task  is received by APD , CP  queries APD resources to determine the current utilization of APD  by the first task. Since the first task is at 100% utilization, the first task is forced to decrease APD utilization to 50% to accommodate the second task .","In the illustrative embodiment of , the first task  will be forced to decrease APD  utilization by ceasing the processing of portions of the first task . This decrease will begin, for example, when CP  communicates to DC  to cease the dispatch of additional wavefronts from the first task  until APD  utilization for the second task increases to 50%\u2014its allotted utilization level.","In another example, CP  communicates to DC  to remove a plurality of wavefronts of the first task  to memory  by performing a temporary context switch. Every wavefront of the first task that is temporarily context switched to the memory  (i.e., pulled out of the shader core ) increases the available capacity of APD .","As illustrated in , the utilization of APD  is 100% when utilization of the first task is combined with utilization of the second task during a particular time quanta. For example, delta-T  shows the first task  at substantially 75% and the second task  at substantially 25%. Thus, the combined utilization of APD  by the first task and the second task is 100%.","In , in one example, a third task  (also identified in  as \u201cTASK ()\u201d) is received by APD  before the processing of the first task  and second task  concludes. For example, if the first task  and the second task  are continuing to utilize APD , they will begin decreasing utilization when the third task  is received. This decrease occurs to accommodate the utilization allotted to the third task .","More specifically, when the third task is received by APD , CP  will communicate to DC  to pull wavefronts of the first task  and the second task  from shader core . Conversely, wavefronts from the third task  will be simultaneously added until the third task's allotted APD utilization is achieved. When. APD utilizations of the first task , the second task , and the third task  are combined during any particular instance of a time quanta, the overall utilization of the APD  will be at 100%. For example, delta-T  illustrates the first task at substantially 33% utilization, the second task at substantially 33% utilization, and the third task at substantially 33%. The combined utilization of APD  of the first task , the second task , and the third task  is 100%.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 4","FIG. 1A and 1B"],"b":["400","400","401","403"]},"In , a first task launches the four wavefronts. If no other tasks are scheduled on APD , the first task increases utilization of APD , over a period of time, to achieve a maximum threshold, for example, 100% utilization. For example, graph  shows a first wavefront() , a second wavefront() , a third wavefront() , and a fourth wavefront() . The four wavefronts are launched at times t, t, t, and t, respectively. These four wavefronts combine to utilize 100% of the processing resources of APD .","A second task, having a plurality of wavefronts (, , , and ), is received as a second input to APD , before completion of the first task. The second task will be allotted a utilization threshold for APD  (e.g., 50%). To accommodate wavefronts from the second task, the two wavefronts of the first task are temporarily context switched to free up APD  processing capacity. For example, a first wavefront(\u2032)  of the second task is launched at time t and a second wavefront(\u2032)  of the second task is launched at time t.","When wavefront(\u2032)  is launched at t, a remaining portion of wavefront()  is removed from APD  (e.g., temporarily context switched) and is stored in a memory. Similarly, when wavefront(\u2032)  is launched at t, a remaining portion of wavefront() is also temporarily context switched and stored in the memory. The removal of the remaining portions and from being processed within APD  reduces the utilization of APD  to facilitate processing of the wavefronts  and .","When the first wavefront()  completes processing at t, the remaining portion of wavefront()  is re-launched to resume processing. When the wavefront(\u2032)  concludes processing, a third wavefront(\u2032)  of the second task is launched at time t.","When the second wavefront()  of the first task completes processing at time t, the remaining portion of the fourth wavefront()  is re-launched to resume processing. At a time t, a fourth wavefront(\u2032)  of the second task is launched.","In the manner illustrated in , multiple tasks can be combined to utilize 100% of the APD's resources as they are processed within APD  in parallel.","Although  have been described primarily within the context of one DC  and one CP , embodiments of the present invention can be practiced using various combinations of two or more CPs and DCs, as illustrated in . In one embodiment, for example, simultaneous launch from a single APD queue can be accommodated. Another embodiment can include one or more CPs, one or more DCs, and one or more queues. Another exemplary embodiment can include multiple queues, one or more CPs, and one DC. Any of these configurations can work cooperatively with the KMD  and the HWS  to create various APD input schemes for simultaneous scheduling of multiple tasks. These additional configurations are within the spirit and scope of the present invention.","The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.","The present invention has been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.","The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can, by applying knowledge within the skill of the art, readily modify and\/or adapt for various applications such specific embodiments, without undue experimentation, without departing from the general concept of the present invention. Therefore, such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments, based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation, such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.","The breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the pertinent art to make and use the invention. Various embodiments of the present invention are described below with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1B","FIG. 1A"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
