---
title: Annotation based development platform for stateful web services
abstract: An annotation based development platform for stateful web services is described. In one embodiment, the developer expresses logic offered by the web service using a standard programming language augmented with declarative annotations specifying preferences for exposing that logic as a stateful web service. At compile time, an enhanced compiler analyzes the annotated source file and automatically generates the mechanisms required to expose its functionality as a stateful web service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437710&OS=07437710&RS=07437710
owner: BEA Systems, Inc.
number: 07437710
owner_city: San Jose
owner_country: US
publication_date: 20020222
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Overview","Web Service Design","Meta-Data Annotations","Declaring Asynchronous Responses","Wire Protocols","External Services","Stateful External Services","Asynchronous External Services","Conversational Message Headers","Compiling Annotated Source Code","Illustrative Web Service Definition","Illustrative Runtime Operation","Example Host Computer System","CONCLUSION AND EPILOGUE"],"p":["This patent application claims priority to Provisional Patent Application No. 60\/302,981 filed on Jul. 2, 2001, which is hereby fully incorporated by reference.","1. Field of the Invention","The present invention generally relates to the field of Web services. More specifically, the present invention relates to integrated development and deployment of stateful Web services.","2. Background Information","There is a rapidly expanding industry emerging around web services, a term loosely defined as the ability to share software as a service using network protocols. Industry leaders are busy developing an infrastructure to enable web services, including mechanisms for finding web services, understanding what they offer and interacting with them via extensible Markup Language (XML) messages. This web services infrastructure aims to enable a new breed of distributed software application composed of software and information services shared across the Internet.","As the web service infrastructure evolves, it is becoming increasingly complicated, requiring more time, skill, knowledge and ultimately money to create web services. Consequently, the generation and deployment of web services is increasingly tedious and unnecessarily complicated for the average developer. Currently, in addition to developing the software logic offered via the web service, developers are also required to address a number of tedious and complex issues involving web service generation and deployment.","For example, in order to generate and deploy the most basic of web services, developers are currently required to implement one or more mechanisms for: Sending and receiving data via internet protocols; parsing and generating message bodies and headers packaged using protocols such as the Simple Object Access Protocol (SOAP); controlling access to services in a secure way; mapping data between XML messages and internal data structures within the web service logic; transacting operations so they are reliable and predictable; decoupling temporal dependencies so distributed applications can proceed reliably when external services are down or unavailable; decoupling implementation dependencies so distributed applications can proceed predictably when external services change their underlying implementations; developing service descriptions e.g. using the Web Services Description Language (WSDL) and using external web services described by e.g. WSDL; developing proxy objects that make it easy for client software written in a variety of languages to interact with the service and for the service to interact with other external services; and so forth.","Thus, it can be readily seen that in addition to developing the web service logic, current day developers are also required to spend time and effort on implementation and deployment aspects unrelated to the web service logic. This is particularly true for non-trivial web services, which manage many simultaneous stateful and asynchronous conversations in a secure, reliable, scalable and rapidly evolvable way. Such stateful and asynchronous web services further require mechanisms for tracking and correlating the requests associated with each stateful conversation (identified as a series of related service requests), for managing the data associated with many simultaneous, long running conversations, and for coordinating asynchronous conversations that do not return immediate results, just to name a few.","In the following description, various aspects of the present invention will be described. However, it will be apparent to those skilled in the art that the present invention may be practiced with only some or all aspects of the present invention. For purposes of explanation, specific numbers, materials and configurations are set forth in order to provide a thorough understanding of the present invention. However, it will also be apparent to one skilled in the art that the present invention may be practiced without the specific details. In other instances, well-known features are omitted or simplified in order not to obscure the present invention.","Parts of the description will be presented in terms of operations performed by a processor based device, using terms such as receiving, analyzing, determining, generating, and the like, consistent with the manner commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. As well understood by those skilled in the art, the quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, and otherwise manipulated through mechanical and electrical components of the processor based device; and the term processor include microprocessors, micro-controllers, digital signal processors, and the like, that are standalone, adjunct or embedded.","Various operations will be described as multiple discrete steps in turn, in a manner that is most helpful in understanding the present invention, however, the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular, these operations need not be performed in the order of presentation. Further, the description repeatedly uses the phrase \u201cin one embodiment\u201d, which ordinarily does not refer to the same embodiment, although it may.","The present invention provides a flexible and extensible platform that simplifies the task of developing stateful and asynchronous web services by allowing web service developers to focus on developing the logic of the web service rather than implementation and deployment particulars. In one embodiment of the present invention, the developer expresses the logic offered by the web service using a standard programming language augmented with declarative annotations specifying preferences for exposing that logic as a web service. At compile time, an enhanced compiler analyzes the annotated source file and automatically generates the mechanisms required to expose its functionality as a web service. Because the annotations are declarative, they may be easily visualized, created and modified using a graphical user interface, further simplifying the developer's task. Thus, the present invention decreases the time, knowledge, skill and ultimately cost required to develop stateful and asynchronous web services.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 1","FIG. 1"],"b":["102","110","115","120","112","125","100","100"]},"Web server  represents one or more computing devices equipped with enhanced web services  of the present invention to provide conversational and asynchronous web services to remote clients, such as user client  as well as enterprise servers  and , which are communicatively coupled to networking fabric . Enhanced web services  includes annotated source code , enhanced compiler , and various deployed service components . As will be discussed in further detail below, when annotated source code  is compiled by enhanced compiler , the compiler generates one or more object files, software components and deployment descriptors to facilitate the automated deployment of web service components . In the illustrated embodiment, developer client  represents a computing device equipped with integrated development environment (IDE)  to facilitate graphical interface-based design and development of enhanced web services  by a developer. In place of, or in addition to being communicatively coupled to web server  through networking fabric , developer client  can be coupled directly (e.g. via a local area network) to web server  as shown. Furthermore, rather than being installed on an external client device such as developer client , IDE  may instead be collocated with enhanced web services  on web server  without departing from the spirit and scope of the invention.","Enterprise servers  and  represent publicly accessible servers belonging to one or more organizations that have published web service components  and  with associated web service description files  and , respectively. In the illustrated embodiment, web service description files  and  represent XML-based web service description language (WSDL) files that advertise the capabilities of web service components  and  to devices coupled to networking fabric  including user client  and web server .","User client  represents a general-purpose computer system such as, but not limited to a desktop computer, laptop computer, palmtop computer, network appliance, a personal digital assistant (PDA), and so forth, equipped with web browser . In the illustrated embodiment, user client  accesses (e.g. via networking fabric ) web page(s)  hosted by eCommerce server . Web pages  may include content , such as merchandise descriptions, reviews and pricing information, as well as one or more web functions . When executed, web functions  may send requests to web server  causing one or more service components  to be executed, which in turn may send one or more requests to enterprise servers  and  causing one or more remote components  and\/or  to further be executed.","For example, assume web page(s)  displays merchandise that is offered for sale by a given online merchant via eCommerce web server . Web function(s)  may request various functions of a shopping cart service provided by web server  including an \u201cadd an item to cart\u201d function, a \u201cremove an item from cart\u201d function, and a \u201ccheckout\u201d function. By selecting a button graphically displayed on web page(s)  for example, a user may cause one or more requests for shopping cart functions to be generated. This in turn may cause one or more of service components  to be remotely executed on web server  via e.g. the well-known Simple Object Access Protocol (SOAP). In the illustrated example, the initiation of a checkout function by user client  may cause web server  to communicate with enterprise servers  and\/or  to obtain one or more credit authorizations for use by the online merchant in completing the user's purchase transaction. In one embodiment, web server  communicates with enterprise server  and\/or  based upon their public interfaces advertised by WSDL files  and\/or . Once enterprise servers  and\/or  provide web server  with the solicited credit information, server components  can perform a variety of actions depending upon the particular web logic deployed.","In the above example, enhanced web services  processed a single shopping cart transaction pertaining to a single user client. More often, however, web services are required to process numerous simultaneous transactions while maintaining state associated with each transaction. In the shopping cart web service for example, each user client will use a separate shopping basket, each containing a separate list of items. Each user client will request a new shopping cart, add items to the shopping cart, remove items from the shopping cart, and finally check out or cancel the operation. Thus, the web service needs to keep track of all the shopping lists and ensure that each incoming client request (e.g. new, add, remove & check-out) is applied to the correct list. Furthermore, each credit authorization request needs to be correlated with the correct user so as to avoid mistaken authorizations. Therefore, it should be apparent that as the number of users and associated transactions increase, the need to efficiently manage conversations (i.e. correlate multiple requests and responses) and the associated state becomes increasingly important. Accordingly, the present invention automatically generates code to manage state associated with multiple, simultaneous conversations. Similarly, because external web services (i.e. such as those offered by enterprise servers  and ) are not always designed to respond to the initiating web service immediately, the present invention further provides the automatic generation of code for managing one or more asynchronous transactions where for example, responses may be temporally separated from the initiating request and arrive on a separate connection.","In one embodiment, enhanced compiler  compiles programming language source code that has been augmented with declarative annotations specifying preferences for exposing programming logic as a web service. At compile time, enhanced compiler  analyzes the annotated source file and automatically generates the mechanisms necessary to expose its functionality as a stateful and\/or asynchronous web service based at least in part upon the annotations.","At run time, enhanced web services  of the present invention receives messages from remote clients requesting that one or more web service methods be invoked. Enhanced web services  parses each message to identify the method being called and dispatches the request to one or more of service components  depending upon whether the requested method comprises a stateless or stateful request for example.","In one embodiment of the present invention, IDE  facilitates graphical interface-based web service design and development. Using IDE  for example, a developer is able to graphically associate remote clients, external services, web methods, and so forth, with the web service logic being designed. Additionally, using IDE  a developer is able to identify which methods (if any) should be buffered, which methods should be asynchronous, which methods should be stateful, and which methods are to cause a non-isomorphic mapping between incoming message elements and native language objects for example. Furthermore, once a method has been added to the web service (e.g. via graphical manipulation by the developer), IDE  provides the developer with the ability to further define and\/or modify the method by specifying one or more parameters and\/or attributes. For example, if a developer drags a method indicator to graphically connect the current web service to the client, a dialog may be displayed to enable the developer to declare a method name, member variable names, variable types, expected return types and so forth. Similarly, if a developer graphically associates an external service with the web service under development, the developer may be provided the opportunity to import a description file for the web service, such as WSDL file  or .","In one embodiment of the invention, IDE  automatically annotates the web service source code with declarative meta-data based upon graphical and\/or textual input provided by the developer through one or more interfaces of IDE . In one embodiment, enhanced compiler  utilizes the meta-data annotations during compilation of the source code to facilitate generation of stateful and asynchronous web services. For example, if a developer graphically identifies a method as being buffered (e.g. by dragging an icon representing a buffer onto or near the associated graphical representation of a method), IDE  annotates the associated method within the source code with meta-data to indicate to enhanced compiler  that the method is to be buffered. During compilation, enhanced compiler  recognizes the method as being buffered based at least in part upon the meta-data annotations, builds one or more class files (and potentially additional support files) and deploys them to server  to buffer incoming requests for that method accordingly.","In one embodiment of the invention, a developer using IDE  is able to toggle between various screen views including a graphical design view, and a source view. In accordance with one embodiment of the invention, using the source view a developer can manually enter meta-data annotations directly within the source code to identify those portions of the source code that are to be exposed as web services.","As the developer interacts with IDE  to specify a web service, IDE  contemporaneously creates directories on web server , into which various files, including the web service source code file and imported web service description files, are stored. In one embodiment, IDE  attaches a \u201c*.jws\u201d extension to the web service source code filename, which is then stored in a publicly accessible project directory on web server . In one embodiment, web server  is configured to redirect client requests for this file to a servlet for processing instead of returning the contents of the file to the client. IDE  may communicate with web server  to create such files and directories via networking fabric  using one or more network protocols such as the file transfer protocol (FTP).","As was previously mentioned, in one embodiment of the invention source code files are augmented by adding (whether automatically by IDE  or manually by the developer) meta-data annotations to the source code files to describe which portions of the source files are to be exposed as web services and to control implementation details, such as wire protocol preferences. In one embodiment, meta-data annotations are placed within a comment field immediately preceding the statement or declaration the annotation will operate on. In one embodiment of the invention, meta-data annotations include one or more symbols and\/or keywords defined by an extended syntax known to the compiler. In the illustrated embodiment, a keyword preceded by a \u2018@\u2019 symbol indicates to enhanced compiler , which is equipped to recognize such a symbol\/keyword combination or derivation thereof based upon the extended syntax, that the associated source code is to be exposed as part of the web service.","In one embodiment of the invention, compiler  has been enhanced to recognize numerous such meta-data annotations. In one embodiment, enhanced compiler  recognizes meta-data annotations that indicate whether an associated method is stateful, and if so, whether the method applies to the start of a conversation (i.e. a \u201cstart\u201d method) between a specific client and web server , a continuation of a conversation (i.e. a \u201ccontinue\u201d method), or the completion of a conversation (i.e. a \u201cfinish\u201d method). In one embodiment, stateful annotations cause enhanced compiler  to generate one or more persistent components to maintain conversational state relating to the associated method. In one embodiment, enhanced compiler  automatically generates one or more Enterprise JavaBeans\u2122 (such as an entity bean) as well as associated deployment descriptors to store and manage such conversational state. In one embodiment, each time a start method is invoked at run-time, a new instance of a conversation is created, and a unique identifier is associated with that conversational instance by a persistent component to facilitate management of multiple simultaneous conversations. In one embodiment, a client requesting a conversational start method generates a unique identifier that is used for each subsequent transaction between that client and the web service until a finish method is called. In one embodiment, the identifier is passed between the client and web service by way of a SOAP based message header.","In addition to conversational annotations, in one embodiment enhanced compiler  also recognizes meta-data annotations indicating whether an associated method should be buffered to reliably handle a large number of simultaneous requests at peak usage times. In one embodiment, compilation of source code containing buffered annotations causes enhanced compiler  to instantiate one or more queues to temporarily store one or more associated requests such that they may be processed in order of arrival when server  has resources free to process them. In one embodiment, enhanced compiler  utilizes one or more Enterprise JavaBeans\u2122 (such as a message driven bean) to dispatch queued requests.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIG. 2"],"b":["206","210","201","205","206","209","201","204","210","209","204","106","106"]},"Although in the illustrated embodiment, each conversational annotation is preceded by an @OPERATION annotation, other embodiments may not require such a construct. For example, the @OPERATION annotation may be inferred from the @CONVERSATION annotation or other characteristics of the source code (e.g., modifiers such as public, private and static). Moreover, the various meta-data annotations described herein represent a subset of meta-data annotations that enhanced compiler  is equipped to recognize. Accordingly, the present invention should not be read as being limited to only those meta-data annotations described. Furthermore, it should be noted that any convenient meta-data annotation syntax could be utilized so long as the compiler is equipped to recognize such an extended syntax. In addition, it should be noted that the meta-data need not be communicated to the compiler using source file annotations, but could instead be communicated using e.g. a separate file. For example, the enhanced compiler could be programmed to read meta-data from a specially formatted XML file with the same name as the source file, but with a different file extension without departing from the spirit of the invention.","It is not always desirable or possible for web services to return a response to a particular request immediately. Some web services, called asynchronous web services, are designed to return one or more responses temporally separate from the associated original requests.","In one embodiment of the invention, developers may declare asynchronous responses to clients inside an inner interface called Callback. For example,",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public static interface Callback {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* @Operation"]},{"entry":[{},"\u2009* @Conversation Finish *\/"]},{"entry":[{},"void returnResult(String s);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["Callback client;\n\nWhen enhanced compiler  encounters the Callback interface and associated member variable declaration, it automatically generates code to create a client proxy object that implements the declared Callback interface for returning asynchronous responses and assigns it to the declared member variable. For example, the web service developer could generate the asynchronous response declared above using the following line of code:\n","client.returnResult(\u201cIt worked!\u201d);"]}}}},"The client proxy object, including the callback address and a conversation identifier, is stored as part of the conversational state of each web service instance to associate each callback with the appropriate client instance.","The annotated source code can further define bindings that specify how the client interface is bound to physical wire formats and protocols. In one embodiment, each service interface can have multiple service bindings for different protocols. In one embodiment, supported service bindings include (but are not limited to) SOAP over HTTP, SOAP over SMTP, generic HTTP Post of XML, transport of XML over other protocols such as FTP and mail, transport of XML over Java Messaging Service (JMS) or Microsoft Message Queuing Services (MSMQ), connection to proprietary protocols and so forth. In one embodiment, information about service interfaces and protocol bindings can be exported via WSDL files.","In one embodiment, the method invoked by web server  can be inferred from the data sent over the wire protocol and other meta-data as is illustrated by . For example, in , the signature of the \u2018greeting\u2019 method has two parameters, labeled firstname and lastname. Incoming SOAP messages containing an appropriately qualified <greeting> element in the message body and having child elements <firstname> and <lastname> as shown in  should cause this method to be invoked at run time. Enhanced Web Services  will parse the request illustrated in , find the destination object based on the URL\/app\/mypackage\/CreditReport.jws, create String objects based on the <firstname> and <lastname> elements, and pass them as parameters to the \u201cgreeting\u201d method based on the <greeting> element. Similarly, Enhanced Web Services  will use the return value of the greeting method to generate an HTTP SOAP response such as that illustrated by .","As was previously mentioned, in one embodiment, the annotated meta-data of the present invention facilitates access to external services (such as service components  and ) by enhanced web services . In one embodiment, enhanced compiler  detects one or more annotated member variable declarations representing external services, finds the associated service definition files, automatically generates and assigns proxy objects designed for interacting with the external services, and automatically generates and associates code to handle asynchronous responses from those services. In one embodiment, enhanced compiler  scans a provided classpath for one or more service definition files (e.g., WSDL files) matching the classnames of the annotated member variables and automatically generates proxy objects based on the service description. This enables the web service developer to interact with the external web service as if it was a local Java object. For example, the declaration\n\n","The service description file associated with an external service may indicate it has stateful conversation methods. In this case, each proxy object generated for interacting with those services will include code to generate and store a unique identifier for the associated conversational instance of the external service. The proxy object will use this unique identifer when generating the conversational message headers stipulated by the external service (see \u201cConversational Message Headers\u201d below).","Each proxy object, including a unique identifier if present, is stored as part of the state of the service in development. This effectively associates each instance of the service in development with the appropriate instances of external services.","External services do not always return a response immediately. Accordingly, enhanced compiler  automatically generates software for receiving asynchronous responses, associating the responses with the appropriate conversational state, and processing the responses with user defined code.","In accordance with the teachings of the present invention, an asynchronous web service declares its asynchronous responses as \u201cout methods\u201d in it's associated service description (e.g., WSDL) file. Out methods can be viewed as remote callbacks, i.e., remote functions the asynchronous web service invokes to return the result associated with an earlier request back to the caller. Software generated by the enhanced compiler of the present invention will pass these asynchronous responses to specially named member functions as may be defined by the developer. In one embodiment, these member function names are formed by appending the name of the asynchronous out method to the name of its local proxy object. For example, to handle a creditCheckResponse() out method of the Bank service defined above, the developer would generate a function of the following form:\n\n","In one embodiment, the conversational aspect of the present invention is facilitated through the use of message headers that help maintain conversational state throughout the lifetime of the conversation. In one embodiment of the invention, one or more of a conversation ID header, a default callback location header, and an echoed conversation ID are utilized to maintain conversational state. For example,  illustrates a conversation ID header and a callback location header within a SOAP message from the client to the server. The echoed conversation ID is utilized in responses from the server to the client.","In one embodiment, the conversation ID represents a unique string that is generated by the originator of the first message of the conversation. The conversation ID may include any structure so long as it is globally unique. In one embodiment, the client generates a globally unique identifier (GUID), which is then encapsulated in a SOAP header, however, Uniform Resource Locators (URLs), timestamps, and other unique objects can be used to generate a unique identifier in lieu of the GUID. In one embodiment, the client embeds its own instance identifier as part of the conversation ID so asynchronous callbacks from the server that include the conversation ID can be used to route the callback to the appropriate client instance. In addition, if the first message of the conversation returns a synchronous response, the server can generate the GUID and return it to the client as part of the response. When \u201ccontinue\u201d or \u201cfinish\u201d methods are sent as part of a conversation (either from the client to the server or from the server to the client), the same conversation ID that was established in the start message is echoed verbatim. In one embodiment, the callback location represents an arbitrary URL indicating where the client involved in the conversation is listening for callbacks from the web service. In one embodiment, the callback location header can appear in association with any start, continue or finish method.",{"@attributes":{"id":"p-0055","num":"0060"},"figref":"FIG. 5","b":["104","502","506","509","502","502"]},"Once compiler  receives annotated source code files , parser  reads and parses programming statements contained within the source code. In one embodiment, compiler  is enhanced to recognize annotations based on an extended syntax for specifying functionality of the source file to be deployed as a web service. Accordingly, as parser  parses the annotated source code, it identifies the presence and composition of embedded annotations based on this extended syntax. In one embodiment of the present invention, compiler  infers by way of the source code annotations the interface of the web service that is to be exposed to remote clients, the interface of services that will be called by the runtime to be created by compiler , as well as internal storage requirements and persistence behavior of the web service.","During the parsing of annotated source code , parser  identifies the object types used in the code and attempts to locate definitions corresponding to each type. For example, if a variable \u201cb\u201d of type \u201cBank\u201d is declared, parser  determines whether an object or library file defining the \u201cBank\u201d type already exists within a given set of directories (e.g., as created by IDE  on web server ). If an object or library file does not exist, parser  determines whether a source file exists that could be run through compiler  to generate an object file. Similarly, if neither an object file, library file, nor a source file exists, parser  determines whether a web service description (e.g., WSDL) file exists that could be used by compiler  to generate an object file implementing a proxy object for interacting with the associated web service. In accordance with one embodiment of the invention, if an object file is determined not to exist, parser  walks through an ordered list of file types so as to identify a file that could be used in generating the requisite object file.","In one embodiment, compiler  generates one or more object files defining publicly accessible service components  that may be executed by one or more remote clients. In addition, compiler  generates meta-data  based on annotated source code  and associates it with object codes  and service components . In one embodiment, meta-data  includes descriptions of the annotations, methods, member variables, external services and callback interfaces associated with the service. Once compiler  has compiled annotated source code  into executable code, the code is then provided to an execution engine (not shown) that controls the execution of the code (by e.g. a processor), and performs conventional execution runtime services, such as memory allocation request and release, error\/exception handling, and so forth. For the illustrated embodiment, compiler  includes an application programming interface (API) (not shown), through which programming statements contained within annotated source code  may be programmatically submitted for compilation by a variety of application-specific processes. For example, in accordance with one embodiment of the present invention, web server  makes calls to enhanced web services  upon receiving SOAP encapsulated XML method invocations via networking fabric .",{"@attributes":{"id":"p-0059","num":"0064"},"figref":"FIG. 6","b":["506","506","502","601","505","506","602","604","506","608","609","610","611","506","612","506","614","616","506","506"]},"Compilation of the annotated source code by enhanced compiler  causes one or more object files, software components, and deployment descriptors to be generated so as to facilitate the automated deployment of the web services.  illustrates a conceptual web service definition resulting from the compilation of one or more annotated source code files in accordance with one embodiment of the invention.","The web service definition of  includes a servlet container and an Enterprise JavaBean (EJB) container. The servlet and EJB containers are communicatively coupled together for the dispatch of web service requests. In the illustrated embodiment, the servlet container listens for requests received on a designated communication port, and uses deployment descriptors (DESC) to identify which servlet should respond to the request. In one embodiment, all requests for files with a \u201c.jws\u201d extension are routed to the listener servlet. In one embodiment, the listener servlet uses the URL of the request to determine which web service should receive the request and identify the location of associated meta-data (META)  (e.g., stored in the class file) previously generated by enhanced compiler .","In one embodiment of the invention, when the enhanced compiler compiles the annotated source code files, it builds and deploys one or more EJBs depending upon the constitution of the code. At a minimum, the enhanced compiler builds and deploys at least one dispatch component () to service messages forwarded from the servlet container. If the enhanced compiler identifies that the web service has at least one buffered method, the enhanced compiler generates a queue structure () in addition to deploying a message driven bean to service the queue. Similarly, if the particular web service contains stateless methods the enhanced compiler deploys a stateless session bean to handle requests for those methods. In addition, if the web service contains stateful methods, the enhanced compiler will deploy an entity bean to manage conversational state associated with each service instance. Dispatch components  and  use meta-data (META)  generated by enhanced compiler  to determine whether the requested method is stateful or stateless and deploy it to a stateful or stateless component as appropriate. If the requested method is stateful, dispatch components  and  further use meta-data (META)  to determine whether the method is a start method, continue method or finish method, and creates a new stateful instance or looks up a previously created instance as appropriate (see discussion of  below).",{"@attributes":{"id":"p-0063","num":"0068"},"figref":["FIG. 8","FIG. 7"],"b":["104","100","112","802","803","804","510","506","806","702","706","510","808"]},{"@attributes":{"id":"p-0064","num":"0069"},"figref":["FIG. 9","FIG. 7"],"b":["901","902","702","904","902","706","704","903","906","908","910"]},"The dispatcher then continues to determine whether the message represents a start method () a continue method () or a finish method (). If the method represents a start method (), a new instance of an entity bean containing the web service logic and conversational state is generated (), and then associated with the identifier (). The dispatcher uses the associated meta-data to determine if annotated source code  defined a Callback interface and declared a variable of type Callback. If so, a client proxy object for interacting asynchronously with the client is created based on the Callback interface and is assigned to the declared variable. Further, the dispatcher determines whether annotated source code  declared one or more variables for interacting with external services. If so, the dispatcher creates proxy objects for interacting with these remote services based on the interfaces defined by the associated service definition (e.g., WSDL) files, and assigns them to the declared variables. Further, the dispatcher configures the web service to accept all asynchronous callbacks declared in each of the associated service definition (e.g., WSDL) files and route the callbacks to web service methods named by appending the declared variable name to the callback method name (e.g., mybank_creditCheckResponse(String result)). The dispatcher stores all proxy objects (whether created for interacting with the client or other external services) as part of the conversation state of the entity bean. The message is then routed to the new entity bean instance for further processing by the web logic.","If the method represents a continue method () or finish method (), the bean instance associated with that identifier is found (, ), and the message is routed to that bean for further processing by the web logic (,). With the finish method however, the bean instance is destroyed once the processing has completed ().","In one embodiment of the invention, once the message has been routed to a bean (whether stateful or stateless), a SOAP handler removes the encapsulated XML message from the SOAP body, determines which method of the web service logic to invoke based on the root element of the XML message, maps XML child elements onto newly created programming language objects to be used as arguments to the method, and invokes the web service method passing the newly created objects as parameters. If the invoked web service method returns a value synchronously, the bean will map the value onto a corresponding XML element, package it in a message and return it to the client using the same protocol details used in the request (e.g., SOAP over HTTP).","Once invoked, any web service method can use the proxy objects created for generating calls to the client or external services. The proxy objects will map objects passed as parameters into corresponding XML elements and use them and the remote method name to generate and send a message to the remote service or client. In the case of external services, the message is generated and sent using the protocol specifics (e.g., SOAP over HTTP) specified by the associated service description file. In the case of the client, the message is generated and sent using the protocol specifics used by the client in the initial start method. In one embodiment, synchronous responses from the client or remote services are parsed to extract the result and map it onto a representative object, which is returned to the web service code as the return value of the proxy object method invocation.","Asynchronous responses and requests from external services are dispatched to the appropriate entity bean by the listener servlet and dispatch beans just like requests sent by the client. These responses are routed to the appropriate method of the web service logic identified by a special naming convention. Specifically, they are routed to methods named by appending the name of the external service out method to the declared service proxy variable name (e.g., mybank_creditCheckResponse(String result)).",{"@attributes":{"id":"p-0070","num":"0075"},"figref":"FIG. 10","b":["1000","1002","1004","1000","1006","1008","1010","1012","1004","1006","1006","1010","1002","1012"]},"Thus, it can be seen from the above description, an annotation based development platform for stateful Web services has been described. While the present invention has been described referencing the illustrated and above enumerated embodiments, the present invention is not limited to these described embodiments. Numerous modification and alterations may be made, consistent with the scope of the present invention as set forth in the claims to follow. Thus, the above-described embodiments are merely illustrative, and riot restrictive on the present invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The present invention will be described by way of exemplary embodiments, but not limitations, illustrated in the accompanying drawings in which like references denote similar elements, and in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3A-C"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 9","FIG. 7"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
