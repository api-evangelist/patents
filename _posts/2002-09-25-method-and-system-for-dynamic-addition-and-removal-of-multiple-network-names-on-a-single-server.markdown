---
title: Method and system for dynamic addition and removal of multiple network names on a single server
abstract: A method and apparatus for configuring a server in a distributed data processing system is provided. The server receives a request for a function that specifies a first server name and a second server name. The server responds to requests directed to a set of server names that includes the first server name. The function executes on the server specified by the first server name, wherein the function dynamically modifies a membership of the second server name in the set of server names. The server names for the server are added or removed dynamically without halting or restarting the server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07085826&OS=07085826&RS=07085826
owner: International Business Machines Corporation
number: 07085826
owner_city: Armonk
owner_country: US
publication_date: 20020925
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a divisional of application Ser. No. 09\/282,614, filed Mar. 31, 1999, now U.S. Pat. No. 6,745,241.","The present application is related to application Ser. No. 09\/282,677, now U.S. Pat. No. 6,442,685 filed Mar. 31, 1999, titled \u201cMethod and System for Multiple Network Names of a Single Server,\u201d hereby incorporated by reference, and application Ser. No. 09\/292,190, now U.S. Pat. No. 6,368,330, filed Mar. 31, 1999, titled \u201cMethod and System for Enabling a Network Function in the Context of One or All Server Names in a Multiple Server Name Environment,\u201d hereby incorporated by reference.","1. Technical Field","The present invention relates generally to an improved data processing system and, in particular, to a method and system for using server names in a distributed data processing environment.","2. Description of Related Art","As electronic commerce becomes more prevalent, business relationships between vendors and between a vendor and its customers becomes more valuable. Businesses are more willing to protect those relationships by spending more money on information technology that protects the integrity of their electronic commerce connections. In so doing, businesses protect not only their data and cash flow but also intangibles such as reputations and goodwill. In addition, the complexity of information technology, the pressure of global competition, and the demands of universal access and round-the-clock availability of electronic systems greatly increases the need to minimize disruptions in electronic commerce operations.","A corporation's information technology infrastructure may fail at various pressure points, such as telecommunication links, software application errors, and computer hardware failures. The complexity of distributed data processing systems places greater reliability demands on all of these factors. One method of increasing the reliability of a system is building redundancy into a system.","When a server fails in a network that contains more than one server, another server can assume the responsibilities of the failed server. In order for a recovery server to assume the role of a failed server, the recovery server needs to be able to respond to requests to the failed server on the network.","Typically, a cluster of servers are configured to respond to a shared cluster name, and each of the servers in the cluster assumes a portion of the duties related to the total demand placed on the cluster by clients. If a server fails, the set of servers in the cluster was already configured to share the processing duties among the other servers in the set, and the failure of a single server merely places a slightly larger processing load on the remaining servers in the cluster.","However, configuring a cluster for fail-over can be rather cumbersome. In one method, in order to set up a cluster of servers that can fail over to each other, all of the existing server names must be assembled and placed into a fail-over group of names. The individual servers are then given other new names.","In addition to fail-over, there are other scenarios for networked servers in which a server is either brought on-line or taken off-line in an effort to improve the reliability of the system. The addition of new hardware, the maintenance of previously installed hardware, and the migration of servers are merely a few examples.","Usually a server is brought off-line to be reconfigured during these various scenarios. Clients that rely on a server taken off-line are inconvenienced while the server is off-line, which creates indirect costs associated with the problem originally being resolved during the reconfiguration.","It would be advantageous to have a method and apparatus for configuring servers so that a server may easily assume the responsibilities of another server in a fail-over situation. It would be particularly advantageous if the same method and apparatus may be used to facilitate the migration and maintenance of servers in such a way that the clients on a network experience a minimum of inconvenience during a reconfiguration of a server.","The present invention provides a method and apparatus for configuring a server in a distributed data processing system. The server receives a request for a function that specifies a first server name and a second server name. The server responds to requests directed to a set of server names that includes the first server name. The function executes on the server specified by the first server name, wherein the function dynamically modifies a membership of the second server name in the set of server names. The server names for the server are added or removed dynamically without halting or restarting the server.","With reference now to the figures,  depicts a pictorial representation of a distributed data processing system in which the present invention may be implemented. Distributed data processing system  is a network of computers in which the present invention may be implemented. Distributed data processing system  contains a network , which is the medium used to provide communications links between various devices and computers connected together within distributed data processing system . Network  may include permanent connections, such as wire or fiber optic cables, or temporary connections made through telephone connections.","In the depicted example, a server  is connected to network  along with storage unit . In addition, clients , , and  also are connected to a network . These clients , , and  may be, for example, personal computers or network computers. For purposes of this application, a network computer is any computer, coupled to a network, which receives a program or other application from another computer coupled to the network. In the depicted example, server  provides data, such as boot files, operating system images, and applications to clients \u2013. Clients , , and  are clients to server . Distributed data processing system  may include additional servers, clients, and other devices not shown. In the depicted example, distributed data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the TCP\/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages. Of course, distributed data processing system  also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example, and not as an architectural limitation for the present invention.","Referring to , a block diagram depicts a data processing system, which may be implemented as a server, such as server  in , in accordance with a preferred embodiment of the present invention. Data processing system  may be a symmetric multiprocessor (SMP) system including a plurality of processors  and  connected to system bus . Alternatively, a single processor system may be employed. Also connected to system bus  is memory controller\/cache , which provides an interface to local memory . I\/O bus bridge  is connected to system bus  and provides an interface to I\/O bus . Memory controller\/cache  and I\/O bus bridge  may be integrated as depicted.","Peripheral component interconnect (PCI) bus bridge  connected to I\/O bus  provides an interface to PCI local bus . A number of modems may be connected to PCI bus . Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to network computers \u2013 in  may be provided through modem  and network adapter  connected to PCI local bus  through add-in boards.","Additional PCI bus bridges  and  provide interfaces for additional PCI buses  and , from which additional modems or network adapters may be supported. A memory-mapped graphics adapter  and hard disk  may also be connected to I\/O bus  as depicted, either directly or indirectly.","Those of ordinary skill in the art will appreciate that the hardware depicted in  may vary. For example, other peripheral devices, such as optical disk drives and the like, also may be used in addition or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.","The data processing system depicted in  may be, for example, an IBM RISC\/System 6000 system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system.","With reference now to , a block diagram illustrates a data processing system in which the present invention may be implemented. Data processing system  is an example of a client computer. Data processing system  employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Micro Channel and ISA may be used. Processor  and main memory  are connected to PCI local bus  through PCI bridge . PCI bridge  also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus  may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter , SCSI host bus adapter , and expansion bus interface  are connected to PCI local bus  by direct component connection. In contrast, audio adapter , graphics adapter , and audio\/video adapter  are connected to PCI local bus  by add-in boards inserted into expansion slots. Expansion bus interface  provides a connection for a keyboard and mouse adapter , modem , and additional memory . SCSI host bus adapter  provides a connection for hard disk drive , tape drive , and CD-ROM drive . Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.","An operating system runs on processor  and is used to coordinate and provide control of various components within data processing system  in . The operating system may be a commercially available operating system such as OS\/2, which is available from International Business Machines Corporation. \u201cOS\/2\u201d is a trademark of International Business Machines Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . \u201cJava\u201d is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive , and may be loaded into main memory  for execution by processor .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the present invention may be applied to a multiprocessor data processing system.","For example, data processing system , if optionally configured as a network computer, may not include SCSI host bus adapter , hard disk drive , tape drive , and CD-ROM , as noted by dotted line  in  denoting optional inclusion. In that case, the computer, to be properly called a client computer, must include some type of network communication interface, such as LAN adapter , modem , or the like. As another example, data processing system  may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system  comprises some type of network communication interface. As a further example, data processing system  may be a Personal Digital Assistant (PDA) device which is configured with ROM and\/or flash ROM in order to provide non-volatile memory for storing operating system files and\/or user-generated data.","The depicted example in  and above-described examples are not meant to imply architectural limitations.","With reference now to , a block diagram depicts a simplified network architecture that shows software components that may communicate with each other across the depicted network. LAN\/WAN  connects host computer  named \u201cHost A\u201d and host computer  named \u201cHost B\u201d. Router , also connected to the network, routes data packets across the LAN between the depicted computers and other networks that may be connected to the LAN that are not shown in . Host computer  may be similar to server  in , and host computer  may be similar to clients \u2013 in .","Three separate communication layers are shown in : application layer , session layer , and network layer . The software components within these layers may use a variety of protocols to communicate with each other. Network layer  contains IP  on host computer , IP  on router , and IP  on host computer . These components provide low-level network communication using IP or Internet Protocol. Alternatively, other network protocols may be used on LAN\/WAN  without affecting the execution of the higher-level layers of software.","Session layer  contains network services administration module (NSAM)  on host computer , NSAM  optionally implementable on router , and NSAM  on host computer . The NSAM provides standard network communication services to applications, utilities, and drivers on various computer systems. NSAMs \u2013 may be similar to each other.","Application layer  contains server  and client  on host computers  and , respectively. Each of these applications provides some type of end-user processing or other high-level computer services. Within the example of , server  and client  are shown as applications residing on different host computers. Each host computer may support multiple clients and servers, and server  and client  could reside on the same host computer. However, server  may be providing some type of data in return to requests from client , and in this type of computing environment, host computer  may be generally termed a \u201cserver\u201d and host computer  may be generally termed a \u201cclient.\u201d","NSAMs \u2013 provide a generic depiction of software components within session layer . The NSAM may be provided by a variety of standard network applications, such as NetBIOS and TCP. Other protocols may be layered on top of these, such as various types of RPCs (Remote Procedure Call).","NetBIOS (Network Basic Input\/Output System) is an operating system interface that allows applications on different computers to communicate within a local area network. NetBIOS may also be viewed as a session layer communications service used by client and server applications in a distributed data processing system. NetBIOS was created by IBM for its early PC networks and has become a de facto industry standard. NetBIOS may generate Ethernet, Token Ring, and FDDI as well as other MAC (media access control) level protocols. NetBIOS has been implemented for many operating systems including Microsoft Windows NT, IBM OS\/2, DOS, etc. NetBIOS does not, in itself, support a routing mechanism, and applications communicating on a WAN must use another \u201ctransport mechanism\u201d, such as TCP, rather than, or in addition, to NetBIOS.","NetBIOS provides application programming interfaces (APIs) that free an application or driver from containing code that understands the details of the network, including error recovery in session mode. A NetBIOS request is provided in the form of a Network Control Block (NCB) which, among other things, specifies a message location and the name of a destination. NetBIOS provides the session and transport services described in the Open Systems Interconnection (OSI) model. However, it does not provide a standard frame or data format for transmission. The standard frame format is provided in the NetBIOS Extended User Interface (NetBEUI).","NetBIOS provides two communication modes: session or datagram. Session mode lets two computers establish a connection for a \u201cconversation\u201d, allows larger messages to be handled, and provides error detection and recovery. Datagram mode is \u201cconnectionless\u201d, i.e. each message is sent independently. In datagram mode, messages must be smaller, and the application is responsible for error detection and recovery. Datagram mode also supports the broadcast of a message to every computer on the LAN.","NetBIOS provides applications with a programming interface for sharing services and information across a variety of lowered-layer network protocols including IP, IPX, and NetBEUI. There are three categories of NetBIOS services: the name service, the session service, and the datagram service. The NetBIOS name service allows an application to verify that its own NetBIOS name is unique. The application issues an \u201cadd name\u201d query to NetBIOS. NetBIOS broadcasts the \u201cadd name\u201d query containing the name. NetBIOS applications that receive the query return an \u201cadd name\u201d response or a \u201cname-in-conflict\u201d response. If no response to the query is received (typically after six broadcasts staggered in time), the name is considered to be unique. The NetBIOS name service also allows an application to delete a NetBIOS name that the application no longer requires, and it allows an application to use a server's NetBIOS name to determine the server's network address. The application issues a \u201cname query\u201d request to NetBIOS containing the target server's NetBIOS name, for which NetBIOS broadcasts the \u201cname query\u201d request. The server that recognizes the name returns a \u201cname query\u201d response containing its network address.","The NetBIOS session service allows an application to conduct a reliable, sequenced exchange of messages with another application. The messages can be up to 131,071 bytes long. The NetBIOS datagram service allows an application to exchange datagrams with a specific application or to broadcast datagrams to a group and receive datagrams from the group. Datagrams allow applications to communicate without establishing a session. When a NetBIOS application wants to send information that does not require acknowledgement from the destination application, the application can transmit a NetBIOS datagram.","TCP is another network protocol that provides reliable sequenced data transfer between local or remote hosts. TCP communicates program to program, not machine to machine. It works by opening up a stream or virtual circuit between the two ports, which begins by alerting the receiver to expect information and ends by an explicit termination signal. It guarantees that data reaches its destination and re-transmits any data that did not get through.","TCP is responsible for taking the desired information and breaking it into manageable chunks. TCP creates segments or user datagrams by taking the information from the application layer and adding a header to it. Each piece is numbered so a receipt can be verified and so the data can be put back into the proper order. If some pieces are missing, it asks the sender to send them again. Once it has all the information in the proper order, it passes the data to whatever application program is using its services. Since every segment received is answered with an acknowledge, TCP is a reliable stream delivery service-either the information is \u201cguaranteed\u201d to arrive, or an error will be returned.","With reference now to , a block diagram depicts software components within a server that provide for multiple network names on the server. Application , application , and application  execute on host computer  to provide a variety of data processing services. One of these applications may include third party software that enhances a user's ability to configure server  for a variety of enterprise applications, such as migration of servers or fail-over recovery. Application data files  may contain data storage for applications \u2013. Operating system data files  for host computer  may keep various types of information necessary to the proper functioning of the computer. One of the data files within operating system data files  may be server configuration file  that contains configuration parameters  and . In this example, server  is shown configured with a single server name. Alternatively, the configuration parameters may be stored in an initialization file, such as a .INI file.","Server  may have a variety of modules within it. These modules may be logical groupings of data structures and functions or APIs for performing various duties. Logical separation and inclusion of software within a computer in this manner is well known in the art. Server initialization module  initializes or configures server  by reading various files, such as server configuration file . User administration module  contains data structures  and APIs \u2013 for providing maintenance of user information and accounts on server . Various input and output devices that are not shown in  may provide user interaction capabilities for server  and applications \u2013.","Share administration module  has data structures  and APIs \u2013 that provide registration and use of various shares within the network environment. Session administration module  has data structures  and APIs \u2013 that provide registration and use of sessions within the network environment.","Network services administration module (NSAM)  has data structures  and APIs \u2013 that provide access to an operating system interface for network services. NSAM  is similar to the NSAMs shown in . While share administration module  and session administration module  rely heavily on the use of NSAM  for linking server  with another computer on the LAN, they are not primarily concerned with network communication.","Data structures  contain server name table  that contains a set of server names, such as primary server name  and secondary server names \u2013. The set of server names in server name table  may comprise a primary server name and a large, variable number of secondary server names. Only one primary name may be registered per server, but multiple secondary names may be registered per server.","With reference now to , a flowchart shows a method in which a single computer may be configured with multiple network names. At some point in time, a server will begin an initialization or configuration process (step ) during which the server will open and read parameters from a server configuration file (step ). These parameters may include a variety of data items necessary for the proper configuration of the server.","The server reads a next configuration parameter from the configuration file (step ) and determines whether the configuration parameter specifies a primary server name (step ). If so, the primary server name is registered with the Network Services Administration Module (NSAM) (step ). The process then continues through a loop in which it is determined whether more configuration parameters are contained within the configuration file (step ). If so, then the process loops back to step  to obtain the next configuration parameter.","If the configuration parameter was not a primary server name, a determination is made whether the configuration parameter specifies a secondary server name or names (step ). If so, the secondary server name or names are registered by the NSAM (step ) and the process continues to step . If the configuration parameter does not specify a secondary server name, then the configuration parameter does not specify a server name, and the configuration parameter is processed in some other manner appropriate for the type of configuration parameter (step ). Various types of configuration parameters may be stored in the server configuration file that are server-specific. For example, a server that processes business inventory may store information concerning the locations of inventory databases within the server configuration file. The server may read pathname parameters for these databases from the server configuration file and store the pathnames in the appropriate data structures.","The process then continues, at step , to check whether other configuration parameters within the configuration file still need to be processed. If not, the server completes the initialization process (step ). The configuration file should include at least one server name.","Referring back to , an example of a single server name for a computer is shown within configuration file  and server name table . During the initialization process described in , server initialization module  would read server configuration file  and process configuration parameters within the file. Configuration file  shows configuration parameter  named \u201csrvname\u201d with a value equal to \u201calpha\u201d. Configuration file  also contains configuration parameter  named \u201cothsrvnames\u201d with a value set to the null string. When server initialization module  reads these parameters, it will register the server names found in server configuration file  with NSAM  which then stores the server names within server name table . As is shown in , the primary server name stored in configuration file  is the same as the primary server name  within server name table . In this case, server initialization module  has read the server name \u201calpha\u201d and registered the server name with NSAM . The server name may be registered through the calling of the appropriate API within NSAM , such as one of the APIs \u2013 that provides for registration of a primary server name.","With reference now to , a block diagram depicts a single server configured with multiple network names.  is similar to  and similar reference numerals within each figure label similar components. However, the server configuration file now contains a parameter  for other server names with a value equal to the string \u201ctheta&omega\u201d. The server name table also contains newly added secondary server names in which SecondaryServerNameA  has a value equal to \u201ctheta\u201d and SecondaryServerNameB  has a value equal to \u201comega\u201d. In this case, the server initialization module has configured the server by reading multiple network names from the server configuration file and registering the multiple names with the NSAM by calling one of the APIs \u2013 that provides for registration of a server name.","With reference now to , a flowchart depicts a process of using multiple network names on a single server to provide data processing services to a client. The process begins when the host computer executes various applications including a server application (step ). The NSAM on the host computer monitors the network traffic in the background (step ) until it must determine whether a message\/datagram is addressed to a registered primary or secondary server name on the host computer (step ). If so, the NSAM retrieves the message\/datagram containing an API call (step ) and invokes the requested API that has been directed to the registered server name (step ). The host computer executes the API within the appropriate server name context (step ). The API function generates data\/status for a client (step ) and returns a message\/datagram that includes the proper indication of the server name context in which the API call was executed (step ). The NSAM sends the message\/datagram to the client (step ), and the client receives the message\/datagram without being aware of the physical host computer that executed the API call (step ). The process then continues with the NSAM continuing to monitor the network traffic (step ). If the previous message or datagram was not addressed to a registered primary or secondary server name on the host computer, then the NSAM does not process the message\/datagram (step ). The NSAM then determines whether it should continue to monitor the network traffic (step ). If so, then the process loops back to step . Otherwise, the process terminates.","With reference now to , a simplified network diagram provides an example of using multiple network names for a single server. LAN  connects clients  and  with servers  and . Servers  and  access shared disk . Server  has network name \u201cCustomers\u201d, and server  has network name \u201cInventory\u201d. The servers may be monitored by a special application on either server that provides fail-over monitoring capabilities. If so, server  and server  may be configured to provide active\/active redundancy, also known as bi-directional fail-over. In this configuration, mission-critical applications may run on two fully functioning servers that can each stand in for the other when either server fails.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 9B","b":["905","900"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 9C","b":["905","900","904","900"]},"Server  may be reconfigured in a variety of manners. In a manual reconfiguration process, a system administrator may have been manually monitoring the performance of the servers and noticed the shutdown of server  or was alerted in some manner of the shutdown of server . The system administrator may use a command line interface or graphical user interface in order to input commands to server  that will disconnect it from the local area network and begin a reconfiguration process. The system administrator may input the commands and receive display information from input and output devices connected to server  that are not shown in .","In order for server  to assume the responsibilities of server , server  must be given the network name of server  so that it may respond to processing requests, e.g., from clients  and  across local area network , that previously would have been processed by server . The system administrator may add the previous network name of server , i.e. \u201cInventory\u201d, to the configuration file of server . Server  previously had a sole server name, i.e. a primary server name of \u201cCustomers,\u201d and the system administrator places a secondary server name of \u201cInventory\u201d in the configuration file of server . The new server name may be added to the configuration file either by simple text editing of the configuration file or through some system utility provided for this purpose.","At some point, server  is restarted or halted\/stopped and restarted. The server initialization module on server  will read the primary and secondary server names from the configuration file and register these network names in the server name table of the network services administration module of server . At that point, server  is ready to recognize server requests, e.g., requests from clients on the local area network, for both server \u201cCustomers\u201d and server \u201cInventory\u201d.","Instead of a manual process for reconfiguring server , some type of system program or third party software may monitor the fail-over condition of servers  and  specifically for the failure of one of the servers so that the other server may be automatically reconfigured. In this case, the failure of server  is automatically detected, and the fail-over software automatically begins the reconfiguration process for server . In the example of , the \u201cInventory\u201d server fails and the \u201cCustomers\u201d server is automatically disconnected from local area network . The fail-over software may also bring down other applications as necessary that may have been executing on server  when the determination was made to reconfigure it. The fail-over software must enable server  to recognize the server name of failed server . The fail-over software may insert the \u201cInventory\u201d server name of failed server  as a secondary server name in the configuration file of server  and then bring reconfigured server  back on-line.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 9D","FIG. 9D"],"b":["904","904","905","904","904","904","904","900","904","901","902"]},"Server  has access to the information previously stored by server  on shared disk . Alternatively, server  has access to a copy or replica of the information previously stored by server . Coherency and synchronization techniques for replicating files and disks are well-known in the art. When a client sends a request to the server named \u201cInventory\u201d, the appropriate application on server  may access inventory-related information on shared disk  and respond appropriately to the requesting client. Server  may also continue its responsibilities responding to requests for server name \u201cCustomers\u201d. Depending on the amount of time spent reconfiguring server , a user on either client  or client  may experience only minor interruptions in responses received from servers on local area network  that respond to their requests.","With reference now to , simplified network diagrams depict a migration scenario in which a server that is initially configured to respond to multiple server names is reconfigured so that multiple servers may respond to those server names.  shows local area network  connecting client , client , and server . Server  has a primary server name of \u201cAccounts\u201d and a secondary server name of \u201cPersonnel\u201d. Server  responds to requests from clients  and  using these multiple server names. Clients  and  are not aware that the server named \u201cAccounts\u201d and the server named \u201cPersonnel\u201d are actually a single physical host computer shown supporting server .",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 10B","b":["1004","1004","1000","1003","1000"]},"Server  may be reconfigured in either a manual or an automatic process. If a manual process is being used to reconfigure server , a system administrator may remove the secondary server name \u201cPersonnel\u201d from the configuration file of server  and then restart server  or restart its network services administration module in order to reestablish a communication link between server  and local area network . If an automatic process is used to reconfigure server , a system utility or some type of server-migration software application may be used to automatically take server  off-line, change its reconfiguration file to remove a secondary server name, and then reestablish communications between server  and local area network .",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 10C","b":["1003","1000","1004","1000","1003","1004","1003","1004","1001","1002","1001","1002"]},"This type of migration scenario may be required when the processing load on server  becomes too great through the addition of demanding clients to the local area network. By splitting the servers across multiple host computers, a system administrator may provide better response times to customers or employees using enterprise applications across the local area network. The disruption caused by the temporary disconnect of server  from the local area network may be rather minor depending on the amount of time used to reconfigure server . The amount of downtime or inconvenience noticed by users of clients  and  may be minimized through the use of automatic reconfiguration software that facilitates the migration of servers from one computer or another using the mechanism of multiple network names for a single server described above.","With reference now to , a block diagram depicts the system components for a host computer whose capabilities have been extended to include the dynamic addition and removal of multiple network names on a single server.  is similar to , and similar numerals in each figure represent similar system components within the server. However, new network APIs \u2013 have been added to NSAM  that already contained APIs \u2013. NetServerNameAdd , NetServerNameDel , and NetServerNameEnum  provide operating system capabilities for adding, removing, and enumerating dynamic, multiple server names so that applications may call these APIs to perform server name context functions in server  \u201con the fly\u201d. In other words, the system capabilities are extended by incorporating APIs that dynamically modify the membership of a set of server names for the server. Alternatively, the services performed within the APIs may also be performed by procedures, functions, methods, objects, and subroutines within the system.","The NetServerNameAdd(server,name) API will instruct a server named in the \u201cserver\u201d parameter to begin responding to requests for the specified server name in the \u201cname\u201d parameter. The NetServerNameDel(server,name) API will instruct the server named in the \u201cserver\u201d parameter to stop responding to requests for the specified server name in the \u201cname\u201d parameter, i.e. \u201cdelete\u201d the server name. The NetServerNameEnum(server) API will return a list of network names to which the server named \u201cserver\u201d is responding, i.e. \u201cenumerate\u201d the server names.","With reference now to , a flowchart depicts the manner in which APIs may be used for dynamic addition and removal of multiple network names on a single server. The process begins when a host computer is configured to include APIs for adding, deleting, and enumerating multiple server names on a physical host computer (step ). For example, these APIs may include NetServerNameAdd, NetServerNameDel, and NetServerNameEnum as described with respect to . Other APIs may be provided that use a different syntax or provide some other equivalent manner of dynamically modifying the set of multiple network names for a single server.","These APIs may be logically grouped and referred to as MultipleServerName APIs. MultipleServerName APIs are invokable locally or remotely according to the target server specified as a server name parameter in a particular invocation of a MultipleServerName API (step ). In other words, an application on the host computer may call one of the MultipleServerNames APIs with a server name parameter that will direct the execution of the APIs to either execute locally on the same host computer or direct the APIs to execute on a remote computer that is identifiable by the target server name.","The specification of the location for the execution for an API may be performed in a variety of ways. For example, the LAN Server network application programming interface allows for most all of its network API calls to specify a pointer to a server name as the first field in the API parameters. If the pointer to the server name is NULL or a null string, then the API executes at the local machine; otherwise, the server name pointer points to a string containing the name of the machine at which the API call should execute. In this manner, the server name allows for a type of remote procedure calling (RPC) convention. Various RPC protocols could be used providing a server allows for various underlying RPC mechanisms to be used.","A determination is made as to whether the host computer has received an invocation of a MultipleServerName API (step ). If so, a further determination is made as to whether the target server name specified as a parameter in the API call matches a registered server name on the host computer (step ). If so, then the MultipleServerName API executes locally on the host computer to update or get registered server name information on the host computer (step ). If there is no match between the target server name specified as the parameter in the MultipleServerName API and a registered server name on the host computer, the NSAM then sends the MultipleServerName API onto the network to direct the API call to a remote server (step ). After the host computer processes the local invocation of the MultipleServerName API, the process continues with a determination as to whether the host computer should continue processing or is being shut down (step ). If the host computer is to continue processing, the method loops back to step .","If the host computer has not received a local invocation of a MultipleServerName API, the NSAM continues to monitor the network traffic and attempts to determine whether a message\/datagram directed to a server name on the host computer includes a MultipleServerName API for a registered server name on the host computer (step ). If so, then the MultipleServerName API is invoked on the host computer, which updates or gets registered server name information on the host computer (step ). If not, the process continues to step  to continue the loop for general monitoring of events.","The utility of having a set of MultipleServerName APIs for dynamically adding and removing multiple network names for a single server may be shown with reference again to . In , using the previous method, server  was reconfigured in a manual or an automatic process in which an additional network name was added to server . In , using the previous method, server  was reconfigured to remove a secondary server name that was then added to a new server . In each of these cases, a server name was added or removed through the use of a configuration file that required a restart of the server containing the configuration file. Configuration parameters within the configuration file included the primary and secondary server names that were read by a server initialization module that registered the server names with the network services administration module. The use of the configuration file for storing primary and secondary server names is a rather \u201cstatic\u201d mechanism for changing the network names to which the host computer will respond.","The MultipleServerName APIs shown in , and further described in the method depicted in the flowchart of , allow dynamic addition and removal of server names without the cumbersome process of editing or changing a configuration file. The use of a configuration file requires the disconnect and subsequent reconnect of a server from the local area network and the temporary disruption of services to the client on the local area network.","With reference now to , a simplified network diagram depicts a method of providing bi-directional fail-over capability using the dynamic addition and removal of multiple network names for a single server according to the present invention.  are similar to  except that the server names in  may be reconfigured dynamically rather than statically as shown in .","In , LAN  connects clients  and  with servers  and . Servers  and  access shared disk . Server  has network name \u201cCustomers\u201d, and server  has network name \u201cInventory\u201d. The servers may be monitored by a special application on either server that provides fail-over monitoring capabilities. If so, server  and server  may be configured to provide active\/active redundancy, also known as bi-directional fail-over. In this configuration, mission-critical applications may run on two fully functioning servers that can each stand in for the other when either server fails.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 13B","b":["1305","1300"]},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 13C","b":["1305","1300","1304","1300"]},"Server  may be reconfigured in a variety of manners. In a manual reconfiguration process, a system administrator may have been manually monitoring the performance of the servers and noticed the shutdown of server  or was alerted in some manner of the shutdown of server . The system administrator may use a command line interface or graphical user interface in order to input commands to server  that begin a reconfiguration process. The system administrator may input the commands and receive display information from input and output devices connected to server  that are not shown.","In order for server  to assume the responsibilities of server , server  must be given the network name of server  so that it may respond to processing requests, e.g., from clients  and  across local area network , that previously would have been processed by server . Either by commands from the system administrator or through some type of fail-over software, an API discussed in  may be called in order to dynamically add an additional network name for the server. At that point, server  is ready to recognize server requests, e.g., requests from clients on the local area network, for both server \u201cCustomers\u201d and server \u201cInventory\u201d.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 13D","b":["1304","1304","1305"]},"With reference now to , a simplified network diagram depicts an environment in which a migration scenario may be implemented using the method for dynamic addition and removal of multiple network names on a single server according to the present invention.  are similar to  except that the server names in  may be reconfigured dynamically rather than statically as shown in .",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 14A","b":["1400","1401","1402","1403","1403","1403","1401","1402","1401","1402","1403"]},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 14B","b":["1404","1404","1400"]},"In order for server  to assume some of the responsibilities of server , server  must relinquish its server name \u201cPersonnel\u201d. In order to dynamically change the set of server names on server , an API discussed in  may be called in order to dynamically remove a network name for the server.","Server  may be reconfigured in either a manual or an automatic process. If a manual process is being used to reconfigure server , a system administrator may use a command line interface or graphical user interface in order to input commands to server  that begin a reconfiguration process. The system administrator may use input and output devices connected to server  that are not shown. If an automatic process is used to reconfigure server , a system utility or some type of server-migration software application may be used to remove a secondary server name. In either case, an API would be called in response to the manually entered commands or the automated process. The API dynamically removes the server name \u201cPersonnel\u201d from server  without halting or restarting server  or its host computer.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 14C","b":["1403","1404","1400","1403","1404","1403","1404","1401","1402","1403","1403","1400","1401","1402"]},"The advantage of using mutiple network names on a single server are readily apparent in light of the detailed description of the invention above. Throughout any reconfiguration scenario for a server, the client-side perspective remains constant. The clients on the network may continue to send requests to a server using the same server name without reconfiguring the clients.","Using multiple server names for a single server is useful in a variety of scenarios encountered by network administrators. Maintenance of the computer system may be scheduled on a regular basis while minimizing the disruption in the availability of a server. When old hardware is replaced by new hardware, a server may be migrated to an existing hardware platform while the new hardware is brought on-line and then migrated to the new hardware platform. During consolidation of multiple servers from multiple host computers to a single, larger host computer with more processing power, servers may be migrated to the new platform one at a time by adding the server names to the larger platform.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media such a floppy disc, a hard disk drive, a RAM, and CD-ROMs and transmission-type media such as digital and analog communications links.","The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 9A\u20139D"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 10A\u201310C"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 13A\u201313D"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 14A\u201314C"}]},"DETDESC":[{},{}]}
