---
title: Partitioning and categorizing data in a split-plane architecture for fast recovery from data plane failures and fast restarts
abstract: Routes between data planes are partitioned according to the source and destination data planes. Partitions are distributed according to the source data plane associated with the partition. Each data plane is configured to clear and resynchronize its own routes when a data plane fails. Also, the restarted data plane is configured to restore routes by retrieving partitions that have the restarted data plane as the source data plane.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07415627&OS=07415627&RS=07415627
owner: Network Equipment Technologies, Inc.
number: 07415627
owner_city: Fremont
owner_country: US
publication_date: 20030919
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present application is a non-provisional of and claims priority from U.S. Provisional Application No. 60\/455,623, entitled \u201cPARTITIONING AND CATEGORIZING DATA IN A SPLIT-PLANE ARCHITECTURE FOR FAST RECOVERY FROM DATA PLANE FAILURES AND FAST RESTARTS\u201d, filed Mar. 17, 2003, the entire contents of which are herein incorporated by reference for all purposes.","The present invention generally relates to data processing in telecommunications systems and more specifically to separating route tables between data planes in a data structure and distributing different parts of the data structure to different data planes.","A split-plane architecture includes a control plane and one or more data planes. The data planes include virtual or physical circuits that route data for various applications, such as asynchronous transfer mode (ATM) circuits, Internet protocol (IP) route and bridging tables, and point-to-point protocol (PPP) sessions.","Each data plane includes a number of ports. A port on one data plane may exchange data with another port on the same data plane or a port on a different data plane. The control plane maintains a route table that includes the routes from a source data plane to a destination data plane. The routes are used by the data planes to determine where to send data. For example, a source data plane sends data received at a port to another port on the same data plane or a different data plane according to a route in the route table.","When a data plane crashes, data cannot be routed to the failed data plane or else a system failure may occur. Thus, the control plane should clear any routes that route data to the failed data plane in the route table. This may be referred to as \u201cclearing the data plane\u201d. When the failed data plane becomes operational again, the control plane should restore the routes from the working data planes (those that did not fail) to the restarted data plane in the route table. Also, the routes from the restarted data plane to the working data planes should be restored. This is referred to as \u201cdata plane resynchronization\u201d. All of the above changes should also be communicated to the data planes.","Accordingly, when one of the data planes crashes, the control plane updates the routes for the other data planes so data is not transferred to the failed data plane. If the routes are not updated, errors may occur when data is transferred to a failed data plane. Also, when the failure condition is restarted, the control plane should update the routes for the restarted data plane so the restarted data plane can transfer data to the other data planes. Further, when the failure condition is restarted, the control plane restores the routes for the other data planes so that the other data planes transfer data to the restarted data plane. The control plane communicates all the above changes to the data planes.","Having the control plane as the central manager of the route table causes many problems when data planes fail. The route table typically includes a high number of routes. Thus, a lot of messaging between the control plane and other data planes is required in order to clear and resynchronize the data planes. For example, a split-plane architecture may include 16,000 point-to-point sessions distributed across all the data planes. The control plane becomes a bottleneck of the system because a large number of messages are required to clear or resynchronize the data planes. For example, applications running on the control plane may be blocked due to the resynchronization activity performed by the control plane whenever a data plane crashes and whenever a crashed data plane is restarted. The problem increases in complexity with respect to the number of data planes in the system. The more the number of data planes, the more resynchronization the control plane has to do. This in turn means that as the number of data planes increases, the processing the control plane needs to perform to resynchronize the data planes increases. Also, the number of messages the control plane needs to send increases as the number of data planes increases.","Embodiments of the present invention relate to handling failures in a data plane. The routes between data planes are partitioned according to the source and destination data plane. Partitions are distributed according to the source data plane associated with the partition Each data plane is configured to clear and resynchronize its own routes when a data plane fails without the involvement of the control plane. Also, the restarted data plane is configured to restore routes by retrieving partitions that have the restarted data plane as the source data plane.","A further understanding of the major advantages of the invention herein may be realized by reference to the remaining portions of the specification and the attached drawings.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["2","2","4","6","8","10"]},"User devices  are computing devices associated with users that communicate data. Examples include personal computers (PCs), customer premise equipment (CPE), user terminals and modems, workstations, personal digital assistants (PDAs), cellular phones, personal PCs, switches, servers and the like. The data are transmitted to access equipment systems  through communication lines.","Access equipment systems  aggregate and multiplex the data received from user devices . Examples of access equipment systems  include digital subscriber line access multiplexer (DSLAM), multiplexers, etc. Data received at access equipment systems  are then sent to routers . Data from a single access equipment system  are typically sent in a specific data format and a specific data rate. For example, the data formats include SONET\/SDH (OC3, OC12, OC48, etc.), DS3\/E3, Ethernet, Gigabit Ethernet, etc. Data in these formats are also transferred at various data rates, where a fixed data rate is associated with a format. Also, the type of physical connection may limit the data rate in which data is transferred. For example, ATM circuits may transfer data at one rate and Ethernet networks may transfer data at another rate.","Router  receives the data from access equipment systems . Router  processes the data in data packets and may send the data packets to one or more other routers . Although data packets are referred to, it will be recognized that data may be transferred by other means, such as analog data through a public switched telephone network (PSTN). Data packets are then sent to either another access equipment system  and\/or to another user device  through network . Network  may be any network, such as the Internet, a wireless network, a wireline network, etc.","Embodiments of the present invention may be included in routers  of . For example, a data processor  that includes a control plane and one or more data planes may be used to route data. Data is received at router , processed by data processor , and transferred to a destination. In one embodiment, data packets are routed among data planes in order to transfer data to the destination.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["12","12","202","1","2","3","4","202","12","202","1","2","3","4"]},"In one embodiment, the split plane architecture refers to one in which all control functions are performed in one subsystem and data-processing functions are performed in another subsystem. For example, a control plane for router  includes a processor that runs the route protocols and user interfaces. It also maintains the overall system configuration data. The results of such control functions are placed in a set of data forwarding rules. The data plane uses these forwarding rules to process the incoming data packets. One advantage of the split plane architecture is in addressing differing scalability requirements of the control and data planes. The control plane should be scalable with the increasing number of elements in the entire network. The data planes should be scalable with increasing number of elements in the network as well as the bandwidth of the links connecting the elements.","Control plane  may be any computing device or data plane configured to communicate with data planes , , , and . Control plane  determines routes for data planes , , , and  and organizes the routes according to a source data plane and a destination data plane. For example, a route may specify that data plane  should route data to data plane . More specifically, the routes may specify that data should be routed from a port in data plane  to a port in data plane .","Data planes , , , and  may be any data processors. For example, the data planes include virtual and physical circuits to route data and also include quality of service information for various applications such as ATM circuits, IP route and bridging tables, and PPP sessions. Each data plane includes a number of ports. A port on one data plane may exchange data with another data plane port through a switch fabric.","Data planes , , , and  may fail at some point in time. When a data plane fails, control plane  detects the failure. Also, when a data plane fails, such as data plane , the working data planes, such as data planes , , and , should clear any routes associated with data plane . This may be referred to as clearing the data plane. When data plane  has its failure restarted, it should restore the routes associated with the data planes , , and . Also, data planes , , and  should restore the routes to data plane . This may be referred to as \u201cdata plane resynchronization\u201d.","Conventionally, control plane  coordinated the clearing and resynchronization of routes when a data plane failed. In contrast, according to one embodiment of the present invention, the clearing and resynchronization is handled in a distributed manner by both control plane  and data planes , , , and . In order to allow both control plane  and data planes , , , and  to respond to failures, a partitioned data structure, such as a data table, is created. The data structure includes partitions or sections that include routes. Each section includes routes for a specific source data plane and a specific destination data plane. Routes between the same two data planes may include different routes between specific ports in each data plane.","Control plane  generates and maintains the partitioned data structure and distributes applicable sections of the data structure to various data planes. Each data plane may then handle failures by clearing the sections of the data structure associated with the failed data plane. Also, when a failed data plane is restarted, sections of the data structure that have the restarted data plane as the source data plane may be retrieved by the restarted data plane.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":["300","1","2","3","4","1","2","3","4","300","300","1","1","1","1","1","2","1","2","300","300","300"]},"Data structure  is partitioned into N rows and N columns, where N is the number of data planes in the system. Each data plane has N instances in the data structure. An instance is referred to as (I, J) where I denotes the source data plane and J denotes a destination data plane in a route. For example, data plane  has four instances of data denoted by (, ), (, ), (, ), and (, ). Data plane  also has four instances of data denoted by (, ), (, ), (, ), and (, ). Data planes  and  also have four instances, each in a similar structure. Each instance includes routes for the two data planes associated with the instance. For example, the instance (, ) includes routes from data plane  to data plane , the instance (,) includes routes from data plane  to data plane , etc.","Each of the instances in structure  are distributed to the source data plane associated with it. Thus, control plane  may distribute the sections (, ), (, ), (, ), and (, ) to data plane , the sections (, ), (, ), (, ), and (, ) to data plane , and so on for data planes  and . Thus, referring to structure , a row of routes is distributed to each data plane in one embodiment.","Structure  may be stored in persistent storage. For example, persistent storage may be available in locations specific to specific data planes, in a location common to all data planes, and in a location common to all data planes and control plane . In one embodiment, for each data plane, the associated routes for the source data plane should be available in persistent storage for that data plane. Also, in one embodiment, all sections of structure  are available to control plane .","In one embodiment, each data instance in data structure  may be persistent across restarts of control plane  and\/or any data plane. Also, data may be persistent across restarts of data planes but not across a restart of a control plane. This data may not be deleted when a data plane restarts but if the control plane restarts, the control plane may delete all the data. Further, data may not persist across restarts of data planes and restarts of control planes. In this case, the data may be cleared when a data plane and\/or control plane restarts. The determination on whether data is persistent may depend on the session and protocol associated with data being transferred.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["400","202","1","2","3","4","202","300","402","402","300","300","402","300","404"]},"Distributor  is configured to store data structure  in a database . In one embodiment, database  may be persistent storage that persists after restarts of control plane  and\/or any data planes. Although database  is depicted outside of control plane , it will be understood that it may be part of control plane . Data structure  may also be stored in control plane  in addition to database .","Distributor  determines where to send different sections of data structure . Distributor  sends the routes associated with a source data plane to each individual source data plane. For example, distributor  may send instances of row  to data plane , instances of row  to data plane , and so on. Because the routes have been separated by source and destination data planes, different sections may be sent to each data plane.","Each data plane is configured to store the sections of data structure . As shown, data plane  includes a database  that includes the data instances (, ), (, ), (, ), and (, ); data plane  includes a database  that includes the data instances (, ), (, ), (, ), and (, ). Data plane  and data plane  also include a database  and a database , respectively, that include the respective data planes' data instances.","The process that occurs when a failure is detected will now be described. Control plane  includes a detector  that is configured to detect failures in data planes -. Detector  may monitor the data planes or, when a data plane has failed, a signal may be sent to detector . When detector  determines that a data plane has failed, other data planes should be notified of the failure. In the example shown, data plane  has failed and detector  has detected the failure.","Notifier  is configured to notify data planes that a failure has occurred. If data plane  has failed, then each data plane , , and  should not send data to that data plane. Thus, the routes should be cleared so that data is not transferred to the failed data plane. As shown, notifier  notifies data planes , , and .","Once receiving a notification that the data plane has failed, a controller in each data plane determines routes to clear in each database. For example, controller  may clear the routes found in the data instance (, ), data plane  may clear the routes for data instance (, ), and data plane  may clear the routes for data instance (, ). Thus, all the routes to the failed data plane have been cleared.","When clearing the routes is referred to, it will be understood that the instance may be deleted from the databases so data may not be transferred for the routes, each controller for the data planes may just not send data for the routes to the failed data plane without deleting the routes, the route may be set to inactive so that the data is not transferred to the failed data plane, or any other method can be used where data is not transferred to a failed data plane. If routes are not persistent across restarts, then routes are deleted. If routes are persistent across restarts, then routes are not deleted but data packets for the routes may not be transferred until a failed data plane is restarted.","Accordingly, the routes were cleared in a distributed manner because each individual data plane is configured to clear their own routes to the failed data plane. In the example, data planes , , and  cleared their routes to data plane  themselves. The distributed nature of sending different instances of data structure  to the data planes allowed each data plane to clear its routes to the failed data plane. Also, the partitioning of routes allows a data plane to clear entire sections of routes to failed data planes without parsing other routes to other data planes as might be the case if all routes were including in one table in a mixed fashion. Thus, control plane  was removed from the process of clearing routes and only had to detect the failure and notify the working data planes. Also, each data plane only cleared its own routes to the failed data plane.","The process that occurs when a failed data plane is restarted will now be described.  illustrates an embodiment of a data flow for system  when a failure has been resolved. Detector  detects that the failure of data plane  has been restarted. Data plane  may have been restarted or fixed and is now running and ready to transfer data. However, because data plane  had failed, all routes that were contained in database  have been lost; routes should then be restored for data plane . In order to restore the routes, data plane  may access data structure  and retrieve the routes that have it as the source data plane. In this case, any communication with control plane  is not necessary. In another embodiment, distributor  retrieves the appropriate instances for data plane  from data structure  and sends them to data plane  in response to a request for the instances. For example, the data instances (, ), (, ), (, ), and (, ) are sent to data plane  and stored in database . With the data instances, data plane  can send data according to the routes to the other data planes.","In addition to restoring the routes for data plane , the routes for the other data planes , , and  that have not failed should be restored. When notifier  sends notifications to data planes , , and  that data plane  is running again, each data plane controller restores the applicable routes to data plane . For example, controller  restores routes for the data instance (, ), controller  restores routes for the data instance (, ), and controller  restores routes for the data instance (, ).","In restoring the routes, each controller , , and  may be configured to use previously inactive routes in each database , , and  to continue sending data to the previously failed data plane. Also, for each data plane, a controller may contact database  and\/or control plane  and download the appropriate instances to the failed data plane, a controller may set a data instance that had been inactive to active, or any other process to restore the routes may be used. In one embodiment, the routes may be restored without the involvement of control plane  (other than the notification). Because data structure  has been partitioned, each data plane can specify instances of structure . For example, the file (, ) can be downloaded by data plane . This can be done without parsing routes for other data planes. Also, messaging is minimized because data plane  can request an instance and then download the instance. When the routes are restored, each data plane , , and  has been resynchronized with the previously failed data plane.","Accordingly, each individual data plane has restored the routes to the previously failed data plane and also is configured to perform the restoring without direction from control plane . Also, the failed database restores its routes to the other data planes. The routes may be restored using data instances associated with each data plane. Thus, a data plane can restore a section of routes to the failed data plane by restoring the instance associated with the failed data plane, for example, the instance (X, ). This process is done without any processing from control plane , which just detects that the failure has been restarted and notifies each of the working data planes. Thus, the processing for synchronizing the data planes is controlled mainly by each working data plane and the process or resynchronization is distributed among the data planes and control processor .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 6","b":["700","702","202","1","2","3","4"]},"In step , control plane  notifies the working data planes of the failure. After receiving the notifications, in step , the working data planes clear data sections that include the routes associated with the failed data plane. Thus, the working data planes may not route data to the failed data plane. In clearing the routes, the data planes may remove any data sections that include the failed data plane as the destination data plane from their route table. Accordingly, because all routes to certain data planes have been included in separate data sections, each working data plane may delete the data section associated with the failed data plane.","In step , the control plane determines if the failure has been restarted. If the failure has not been restarted, the method reiterates to step , where control plane  continues to determine if the failure has been restarted.","If the failure has been restarted, in step , data sections that may include routes to the now running data plane are restored. In one embodiment, data sections from database  are downloaded by each working data plane. For example, each working data plane may access database  and retrieve a data section that is associated with the now running data plane. For example, all routes associated with the now running data plane may have been separated according to each source data plane. Accordingly, each working data plane may download a data section associated with itself and the now running data plane.","In step , data sections including routes to all working data planes are restored for the now running data plane. In one embodiment, the now running data plane accesses database  and downloads data sections that include it as a source data plane.","Accordingly, embodiments of the present invention store routes in separate data structures according to the source data plane and the destination data plane. Thus, routes are grouped separately for each source and destination data plane. The separate data groupings are then distributed to the source data plane associated with the data grouping. Thus, each data plane may have data sections that include the routes that are needed to route data to other data planes.","When failures occur in a data plane, each of the working data planes clear a data section associated with the failed data plane from their route table. The advantage of this is that the control plane is not the central processor for clearing the data planes. Rather, each data plane is responsible for clearing its own routes. Thus, bottlenecks associated with messaging from the control plane are removed. Also, by organizing and grouping the routes together in separate data sections, each working data plane may clear the routes by clearing a data section rather than clearing individual routes from a large route table that includes all routes to all data planes in an unorganized manner.","When the failed data plane has its failure restarted, the working data planes can then restore the routes associated with the now running data plane. In these cases, the working data planes may download from persistent storage a data section that is associated with the now running data plane. The advantage of this is that each data plane can download a data section associated with the now running data plane and the control plane does not have to message each route to each working data plane in order to restore the routes. Accordingly, restoring the routes is accomplished in a distributed manner and can be restored by downloading a section of a data structure.","Also, the now running data plane should restore its routes to all other data planes. In one example, the now running data plane accesses persistent storage and downloads all data sections that have the now running data plane as the source data plane. Thus, the now running data plane has restored its routes without having the control plane as the central processor. Consequently, clearing the routes and restoring the routes have been accomplished in a distributive manner. Also, by grouping routes in data sections, clearing and restoring the routes are accomplished efficiently and can be downloaded all at once.","While the present invention has been described using a particular combination of hardware and software implemented in the form of control logic, it should be recognized that other combinations of hardware and software are also within the scope of the present invention. The present invention may be implemented only in hardware, or only in software, or using combinations thereof.","The above description is illustrative but not restrictive. Many variations of the invention will become apparent to those skilled in the art upon review of the disclosure. The scope of the invention should, therefore, be determined not with reference to the above description, but instead should be determined with reference to the pending claims along with their full scope or equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4","b":["1","2","3","4"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
