---
title: Three-dimensional model to facilitate user comprehension and management of information
abstract: A computer system and method of presenting information from a body of knowledge to a user utilize a three-dimensional model to facilitate user comprehension and management of both the specific information in the body of knowledge, as well as the contextual relationship of the information within the body of knowledge as a whole. An abstraction stack is utilized to concurrently display information elements associated with different levels of abstraction for a body of knowledge, with the information elements visually linked with one another in a three dimensional workspace to represent the hierarchical arrangement of the information elements within the scope of the overall body of knowledge. In addition, a computer system and method of authoring a body of knowledge permit a user to input information with the contextual relationship of the information within the overall body of knowledge established in an intuitive and efficient manner. An authoring tool facilitates the creation of a body of knowledge by an author by organizing information into one or more information elements associated with various levels of abstraction. Users are concurrently presented with a plurality of user input elements configured to receive input from a user, with each user input element associated with a particular level of abstraction. Once information is received into a particular user input element, an information element is stored in a computer system and associated with the level of abstraction for the user input element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06874123&OS=06874123&RS=06874123
owner: International Business Machines Corporation
number: 06874123
owner_city: Armonk
owner_country: US
publication_date: 19980209
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Hardware Environment","Software Environment","Information Abstraction","Abstraction Stack Organization","Abstraction Stack Operation","Multi-Level Authoring of Body of Knowledge"],"p":["This application is related to the following co-pending applications which were filed on even date herewith by George Francis DeStefano: U.S. Ser. No. 09\/020,534 entitled \u201cCOMPUTER SYSTEM, METHOD AND USER INTERFACE COMPONENTS FOR ABSTRACTING AND ACCESSING A BODY OF KNOWLEDGE\u201d (RO997-004); U.S. Ser. No. 09\/020,680 entitled \u201cCOMPUTER SYSTEM AND METHOD FOR CONTROLLING THE SAME UTILIZING A USER INTERFACE CONTROL INTEGRATED WITH MULTIPLE SETS OF INSTRUCTIONAL MATERIAL THEREFOR\u201d (RO997-090); and U.S. Ser. No. 09\/020,679 entitled \u201cCOMPUTER SYSTEM AND METHOD FOR ABSTRACTING AND ACCESSING A CHRONOLOGICALLY-ARRANGED COLLECTION OF INFORMATION\u201d (RO997-092). This application is also related to the following co-pending applications which were filed on Dec. 15, 1997 by George Francis DeStefano: U.S. Ser. No. 08\/990,370 entitled \u201cCOMPUTER SYSTEM AND METHOD OF MANIPULATING A WINDOW ON A COMPUTER DISPLAY THROUGH COLLISION WITH A POINTER\u201d (RO997-005); U.S. Ser. No. 08\/990,304 entitled \u201cCOMPUTER SYSTEM AND METHOD OF MANIPULATING MULTIPLE GRAPHICAL USER INTERFACE COMPONENTS ON A COMPUTER DISPLAY WITH A PROXIMITY POINTER\u201d (RO997-041), now issued as U.S. Pat. No. 6,075,531). Each of these applications is hereby incorporated by reference herein.","The invention is generally related to computer systems and graphical user interface environments therefor. More particularly, the invention is related to display and user access to information in a computer system or the like.","The human communication process has evolved over thousands of years to principally include both spoken and written communication. In addition, over time much of the combined knowledge base of the world has been recorded in written form (e.g., in books), so that others are able to more conveniently access and use such information.","With the advent of computer technology, more and more information is stored in an electronic form and accessed via a computer, rather than via the written page. Nonetheless, throughout the evolution of human communication, information has always be regarded as being essentially one-dimensional\u2014that is, a series of ideas strung together in a sequence of words or pages. Book pages and computer displays are each two-dimensional in nature, and may even provide two dimensional representations of three-dimensional objects. However, the basic structure of a collection of information presented in either case is still for the most part one-dimensional insofar as a person processes the information in a generally linear fashion.","A one-dimensional representation of information may be adequate for some when the amount of information is not that great. However, a person may have difficulty fully comprehending a collection of information about a particular topic when the information is located in several sources and\/or when the information is associated with several levels of abstraction.","A level of abstraction typically relates to a particular manner of looking at a given collection of information, also referred to as a body of knowledge. Among other criteria, different levels of abstraction may relate to different comprehension levels, e.g., a basic or summary level vs. an advanced level. Taking a subject such as snakes as an example, a discussion at an elementary school level might focus on how snakes lack legs or what snakes eat. At the level of a Ph.D. herpetologist, however, a discussion might instead focus on the evolutionary development of snakes or the biological mechanisms by which snakes sense prey.","A person may desire to access a collection of information in any number of circumstances, such as when exploring new disciplines or new approaches to familiar territory, or when returning to areas infrequently visited. When doing so, however, a person may be required to manage and understand a number of levels of abstraction at the same time. In the case of attempting to solve a particular problem, for example, a person may be required to manage and understand numerous levels of abstraction, e.g., broad and fundamental concepts, key terms and definitions, the details of the specific problem, the details of the solution to the specific problem, etc. However, both books and computers typically force a person to access the information from one source, and\/or from one level of abstraction, at a time. The person is therefore required to plod through information in a linear fashion without the ability to visualize the relationship of the information in the broader scope of the body of knowledge.","Furthermore, in the instances where a person is able to access information from more than one source or level of abstraction, the information is often provided in disjointed views, offering no opportunity for a person to visualize the interaction of information from different levels and\/or sources. When accessing books, a person may review different books related to a given topic, or may review different sections or chapters within the same book. Even though a person can open two books at the same time, the person still is required to shift his or her focus back and forth between the books, and between different pages in those books. As a result, the person is required to consciously recognize and maintain any associations in the information.","Moreover, while accessing information about a particular body of knowledge can be difficult and confusing for readers, oftentimes authors have just as much difficulty in deciding how to present information from a body of knowledge to potential readers. This is because a reader may be from any number of potential audiences. An audience in some instances may be made up of one or more individuals with a common level of understanding or experience, or it may be made up of differing individuals with differing views and abilities. Authors therefore often focus on a single audience, which has the undesirable effect of making the presentation less useful for other audiences. For example, a book may be too difficult for beginners to understand and too basic to even be useful to an expert. As a result, separate books at differing levels may eventually be authored for a given body of knowledge. Of course, this only makes it more difficult for a reader to access and comprehend the specific body of knowledge.","Many of the same difficulties associated with accessing and authoring information in book form are also associated with information in electronic form. Many computer systems, for example, use graphical user interfaces (GUIs) through which users are able to interact with the computer systems through intuitive operations such as \u201cpointing and clicking\u201d on graphical display elements. Information is often presented to a user in a GUI environment using a graphical user interface component known as a window. Each computer software application executing in a GUI environment is typically allocated one or more windows to present information to and\/or receive input from a user. Moreover, a number of computer systems provide the ability to multitask\u2014that is, to execute more than one computer software application at the same time\u2014such that windows from multiple applications may be displayed on a computer display simultaneously.","While information from more than one source or level of abstraction for a body of knowledge may be displayed simultaneously in different windows on a computer system, the relationship between the information displayed in the different windows, as well as the relationship of the information within the broader scope of the body of knowledge, is often not readily discernable by a user. As a result, it can become difficult for a user to manage the information in a coherent manner. Switching between different formats and views can become disorienting and distracting, often significantly impeding the learning process.","In one specific technology area, online computer help systems, users may be presented with information about computer topics, e.g., relating to particular computer software applications. The presentation of these computer topics in many such systems often includes the presentation of multiple levels of abstraction of the computer topics. For example, a help system may display a help map or table of contents in one window at the same time that one or more help topics are displayed in other windows. However, the actual hierarchical relationship of any of these windows is typically not presented to the user, and consequently, a user may nonetheless become disoriented when switching back and forth between a map or table of contents, and one or more help topics. Particularly when more than one help topic is being displayed at a time, and when associated examples and\/or tutorials are also presented, it can become difficult for a user to absorb and comprehend all of the various aspects of a particular computer topic.","Therefore, a significant need exists for an improved manner of representing a body of knowledge in a computer system to facilitate understanding of the body of knowledge by users. Specifically, a need exists for a manner of representing both information from a body of knowledge, as well as the contextual relationship of the information within the broader scope of the body of knowledge.","The invention addresses these and other problems associated with the prior art in providing in one aspect a computer system and method in which the presentation of information from a body of knowledge (BOK) to a user is three-dimensional in nature to facilitate user comprehension and management of both the specific information in the body of knowledge, as well as the contextual relationship of the information within the body of knowledge as a whole. Communication of information is therefore shifted from an essentially one-dimensional model to a three-dimensional model that is inherently more intuitive and efficient. As a result, the ability of a user to access, manage and comprehend a body of knowledge, or a specific problem related to that body of knowledge, is significantly enhanced.","Various embodiments of the invention utilize an abstraction stack that concurrently displays information elements associated with different levels of abstraction for a body of knowledge. Moreover, the abstraction stack visually links the information elements with one another in a three dimensional workspace to represent the hierarchical arrangement of the information elements within the scope of the overall body of knowledge. As a result, a user is more easily able to switch his or her focus between the various information elements without losing the context of particular information relative to other information in the body of knowledge.","Consistent with the invention, an abstraction stack may be displayed on a three-dimensional computer display, or more typically, an abstraction stack may be displayed in a three-dimensional representation on a two-dimensional computer display. Moreover, a number of methods of visually linking information elements from different levels of abstraction may be utilized. Among others, the information elements may be displayed at different points along an abstraction axis consistent with the relative levels of abstraction thereof. In addition, one or more connector display elements extending between the visual representations of different information elements may be used to visually link the information elements.","Consistent with another aspect of the invention, information may be displayed on a computer display concurrently in first and second windows. A hierarchical relationship between the windows may then be represented by orienting the first and second windows generally along an axis within a three dimensional workspace.","In addition to facilitating the access, comprehension, and management of a body of knowledge by a user, the invention further provides in another aspect a computer system and method of authoring a body of knowledge, where a user is permitted to input information with the contextual relationship of the information within the overall body of knowledge established in an intuitive and efficient manner. Specifically, various embodiments of the invention may utilize an authoring tool that facilitates the creation of a body of knowledge by an author by organizing information into one or more information elements associated with various levels of abstraction. Users may be concurrently presented with a plurality of user input elements configured to receive input from a user, with each user input element associated with a particular level of abstraction. Once information is received into a particular user input element, an information element is stored in a computer system and associated with the level of abstraction for the user input element. Therefore, as with accessing information, the creation of information may also be shifted from an essentially one-dimensional model to an inherently more intuitive and efficient three-dimensional model.","These and other advantages and features, which characterize the invention, are set forth in the claims annexed hereto and forming a further part hereof. However, for a better understanding of the invention, and of the advantages and objectives attained through its use, reference should be made to the Drawing, and to the accompanying descriptive matter, in which there is described exemplary embodiments of the invention.","The embodiments of the invention described hereinafter utilize an abstraction stack to represent information from a body of knowledge (BOK) stratified into a plurality of levels of abstraction. The abstraction stack concurrently displays multiple information elements associated with different levels of abstraction on a computer display, and visually links the information elements on the computer display in a three dimensional workspace to represent a hierarchical arrangement of the levels of abstraction.","A body of knowledge typically represents a collection of information related to a particular subject of interest. Practically any subject may be represented as a body of knowledge, including various educational topics, literary topics, reference topics, and computer topics, among others. A level of abstraction typically represents a particular manner of looking at a given body of knowledge, typically segregating information into different classifications or groupings that can be selectively filtered out to provide different presentations of information in the body of knowledge.","Information from a particular level of abstraction is typically presented in the form of an information element, which generally represents any segment of data that conveys information. While much of the focus herein will focus on alphanumeric or textual data, it should be appreciated that other types of data may be stored in an information element, including graphical data, audio data, video data, and executable data, among others. Moreover, an information element may include a link to other points in the same or a different body of knowledge, whereby a user may navigate within one or more bodies of knowledge by selecting information elements.","Prior to describing preferred embodiments of the invention, a brief discussion of exemplary hardware and software environments will be presented.","Turning to the Drawing, wherein like numbers denote like parts throughout the several views, a computer system  consistent with the invention is illustrated in FIG. . Computer system  is illustrated as a networked computer system including one or more client computer systems ,  and  (e.g., desktop or personal computers, workstations, etc.) coupled to server system  through a network . Network  may represent practically any type of networked interconnection, including but not limited to local-area, wide-area, wireless, and public networks (e.g., the Internet). Moreover, any number of computers and other devices may be networked through network , e.g., multiple servers. Furthermore, it should be appreciated that the principles of the invention may be utilized as well by stand-alone computers and associated devices consistent with the invention.","Computer system , which may be similar to computer systems , , may include a processor such as a microprocessor ; a number of peripheral components such as a computer display ; storage devices  such as hard, floppy, and\/or CD-ROM disk drives; a printer ; and various input devices (e.g., a mouse  and keyboard ), among others. Computer system  operates under the control of an operating system, and executes various computer software applications, programs, objects, modules, etc. Moreover, various applications, programs, objects, modules, etc. may also execute on one or more processors in server  or other computer systems , , e.g., in a distributed computing environment.","Computer display  may include any known manner of visually presenting information to a user. For example, computer display  may be a video monitor, e.g., a cathode-ray tube (CRT), a liquid crystal display (LCD), or a projection display, among others. In addition, other types of computer displays, including two dimensional displays that simulate three dimensions (e.g., virtual reality headsets), as well as three dimensional displays such as holographic tanks and the like, may also be used.","User input may also be received from other known user input devices. For example, control of a pointer on a display may be handled by a trackball, a joystick, a light pen, a touch sensitive pad or display, a digitizing tablet, and a keyboard, among others. In addition, many of such devices include one or more user controls such as buttons, thumb wheels, sliders and the like. Moreover, voice and\/or image recognition may be used to permit a user to provide voice commands and\/or gestures to provide user input to a computer system. Other user interface devices may also be used in the alternative.","In general, the routines executed to implement the illustrated embodiments of the invention, whether implemented as part of an operating system or a specific application, program, object, module or sequence of instructions will be referred to herein as \u201ccomputer programs\u201d. The computer programs typically comprise instructions which, when read and executed by one or more processors in the devices or systems in networked computer system , cause those devices or systems to perform the steps necessary to execute steps or elements embodying the various aspects of the invention. Moreover, while the invention has and hereinafter will be described in the context of fully functioning computer systems, those skilled in the art will appreciate that the various embodiments of the invention are capable of being distributed as a program product in a variety of forms, and that the invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of signal bearing media include but are not limited to recordable type media such as volatile and non-volatile memory devices, floppy disks, hard disk drives, CD-ROM's, DVD's, and transmission type media such as digital and analog communications links.","Those skilled in the art will recognize that the exemplary environment illustrated in  is not intended to limit the present invention. Indeed, those skilled in the art will recognize that other alternative hardware environments may be used without departing from the scope of the present invention.",{"@attributes":{"id":"P-00072","num":"00072"},"figref":"FIG. 2","b":["20","21","30","21","26","27","20","10","18","23","21","22","20","21","18","22","23","26","27","28"]},"A number of system computer programs are stored in memory , including hardware interface program code , device and graphics drivers , operating system kernel , and various application programming interfaces (APIs) , e.g., Window APIs, Graphic APIs, Tasking APIs and Input\/Output APIs, among others. It should be appreciated that the configuration and operation of each of these system programs typically depends upon the particular computer hardware used, and is in general well understood in the art. For example, any of a number of operating systems may be used, e.g., OS\/400 for the AS\/400 midrange computer, Windows  or Windows NT for a PC system, MacOS for the Macintosh computer, or any of the number of variations of UNIX, among others.","Among the various functions of operating system  is that of event management, e.g., as handled by an event manager . Event manager  generally  provides in a dedicated execution thread an event-driven graphical user interface (GUI) environment for handling the display of information to, and the receipt of input from, a user.","Any number of computer software applications may execute on computer system  by utilizing the system program code provided therein. Moreover, memory  may also store data utilized by various applications or system program code. For example,  illustrates a body of knowledge , an abstraction stack , and an authoring tool , each of which are discussed in greater detail below.","It should be appreciated that the system program code represented at -, body of knowledge , abstraction stack  and authoring tool  may be stored on network  or mass storage  prior to start-up. In addition, each may have various components that are resident at different times in any of memory , mass storage , network , or within registers and\/or caches in processor  (e.g., during execution thereof).","It should also be appreciated that other software environments may be utilized in the alternative.","Information to be accessed by an abstraction stack typically must first be abstracted into the form of a body of knowledge. As discussed above, a body of knowledge typically represents a collection of information related to a particular subject of interest. Generally, a body of knowledge may be represented and maintained in a number of manners, including in a database, or in one or more documents, or files, within which the information is stored.","For example,  illustrates one manner of maintaining a body of knowledge  that utilizes an ordered list of information elements . As mentioned above, an information element typically represents a segment of data that conveys information related to one or more levels of abstraction in a body of knowledge. Each information element includes a level identifier , a concept element identifier  and information .","Level identifier  generally represents an author's designation of which if any levels of abstraction are related to the information in the information element, and thus, whether the information element is suitable for presentation in conjunction with the presentation of a particular level of abstraction. The level identifier can have a number of possible values, including a null value, a single level value, a list of level values, a range of level values, a list of ranges of level values, an upper level boundary, a lower level boundary, or any combination thereof. As discussed below with reference to the authoring process described in conjunction with , a level identifier may include a level parameter, having one or more numerical or other sortable values representing a hierarchical relationship for the level, as well as a characterization or description that provides a more contextual and understandable identification of the level. Thus, while not being so limited, the level identifiers of abstraction stack  hereinafter will be described in terms of a characterization or description for ease of understanding.","A level of abstraction typically represents a particular manner of looking at a given body of knowledge. An abstraction stack may often be considered as addressing audiences with multiple levels of ability and interest. The audiences in some instances are made up of separate individuals. In other instances, a single individual's ability and interest can vary over time so that a single individual represents multiple audiences. As a result, the manner in which levels of abstraction are established for a body of knowledge can determine how different presentations can be tailored to specific audiences.","Consequently, the levels of abstraction assigned to a given body of knowledge may be based on numerous criteria. For example, levels of abstraction may be defined for different levels of comprehension (e.g., elementary, high school, undergraduate, Ph.D., novice, expert, etc.) Levels of abstraction may also be defined for different levels of detail (e.g., summary, overview, detailed, etc.) Levels of abstraction may also be defined for different communication tools or techniques for explaining a given topic (e.g., definitions, summaries, overviews, frequently asked questions (FAQ's), glossary terms, related topics, detailed explanations, formulas, illustrations, examples, tutorials, etc.) Levels of abstraction may also be broken up based upon different sections, or components, of a document (e.g., executive overview, preface, introduction, table of contents, headings, main body, footnote, summary, appendix, index, glossary, etc.) Levels of abstraction may also be distinguished based upon the type of data (e.g., text data, image data, audio data, video data, executable data, etc.) Levels of abstraction may also look at a body of knowledge from different perspectives, e.g., \u201cwhat\u201d, \u201cwhy\u201d, \u201chow\u201d, \u201cwhen\u201d, etc. For computer program code, different software components and\/or layers may be defined, e.g., source code, object code, library, interface, framework, object or class definition, comment, etc. Other levels of abstraction may be defined to distinguish a work from comments thereon (such as analysis and critiques thereof), e.g., for literary interpretation of an author's collective works. Other manners of distinguishing levels of abstraction may also be used in the alternative.","Concept identifier  generally represents an author's identification of an information element in terms of one or more named concepts. The concept identifier may be used to associate the presentation of a concept at one level of abstraction with those of other levels, as information elements related to the same concept but from different levels will have the same concept identifier. The concept identifier can have any suitable value, e.g., a combination of alphanumeric characters, that provides a unique identification for a particular named concept. In addition, the concept identifier can be null to indicate a lack of association with a particular named concept.","Information  generally represents the actual data in the information element that is relevant to the body of knowledge. The information may be as small as a bit (e.g., a flag), or may include an unlimited amount and variety of data, including text data, image data, multimedia data such as audio and\/or video data, executable data from an executable process, etc. Information  may also include other information elements, whereby nested information elements are supported.","Body of knowledge  may be created and\/or maintained in a number of manners For example, a body of knowledge may be stored in one or more tag-delimited text documents, e.g., using a modified Hypertext Markup Language (HTML) format.","As an example, one suitable format of a body of knowledge document that will be used hereinafter to describe the various features of the invention is illustrated below in Table I:",{"@attributes":{"id":"P-d0e4182","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Body of Knowledge Document"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u20021","<html>"]},{"entry":["\u20022","<head>"]},{"entry":["\u20023","<title>Static Electricity<\/title>"]},{"entry":["\u20024","<\/head>"]},{"entry":["\u20025","<body>"]},{"entry":["\u20026","<hl>Static Electricity Puts the Spark in Sparking<\/hl>"]},{"entry":["\u20027","<p>Static electricity is a natural phenomenon familiar to many"]},{"entry":[{},"Minnesotans. We notice it during our cold dry winters when the"]},{"entry":[{},"sudden snap of an electrostatic discharge nips our noses as we kiss"]},{"entry":[{},"our spouses."]},{"entry":["\u20028","<infoel lvl=1>The discharge occurs just before our noses touch, when"]},{"entry":[{},"the distance between them is so small that the electricity leaps"]},{"entry":[{},"through the cold air like lightning to settle the difference in our"]},{"entry":[{},"noses' electrostatic potential. <\/infoel><\/p>"]},{"entry":["\u20029","<p><infoel lvl=2 cid=coul>The force of the spark is determined by"]},{"entry":[{},"<B>Coulomb's law<\/B>which relates the charges on the noses"]},{"entry":[{},"and the distance between them to yield coulombs. <\/infoel>"]},{"entry":["10","<infoel lvl=3 cid=coul>Our understanding of<B>Coulomb's"]},{"entry":[{},"law<\/B>lets us quantify the electromagnetic force between two"]},{"entry":[{},"charges. The force is calculated as:"]},{"entry":["11","<pre>"]},{"entry":["12","F=kqu\/rr"]},{"entry":["13","<\/pre>"]},{"entry":["14","where F is coulombs, k is the proportionality constant, q and u"]},{"entry":[{},"are the charges and r is the distance between the charges."]},{"entry":[{},"<\/infoel><\/p>"]},{"entry":["15","<p><infoel lvl=2 cid=ohm>The air's resistance to the spark is"]},{"entry":[{},"determined by <B>Ohm's law<\/B>, which relates the length and"]},{"entry":[{},"thickness of the path it takes through the air to the air's"]},{"entry":[{},"suitability as an insulator to yield ohms <\/infoel>"]},{"entry":["16","<infoel lvl=3 cid=ohm><B>Ohm's law<\/B>gives us the resistance"]},{"entry":[{},"of a conductor between two charges. The resistance is calculated as:"]},{"entry":["17","<pre>"]},{"entry":["18","R=lp\/A"]},{"entry":["19","<\/pre>"]},{"entry":["20","where R is ohms, l is length, p is resistivity and A is the"]},{"entry":[{},"cross-sectional area of the conductor. <\/infoel><\/p>"]},{"entry":["21","<p><infoel lvl=2 cid=rstv>The spark's path tends to be short and"]},{"entry":[{},"thick or long and thin. Warm moist air is a better insulator, i.e., has"]},{"entry":[{},"higher resistivity, than cold dry air.<\/infoel>"]},{"entry":["22","<infoel lvl=3 cid=rstv>The cross-sectional area of the column of air"]},{"entry":[{},"between the noses varies inversely with the distance between the"]},{"entry":[{},"noses. The resistivity of the air itself varies with the temperature"]},{"entry":[{},"and relative humidity. The resistivity of air at different temperature"]},{"entry":[{},"and humidity combinations is shown in the following table. <\/p>"]},{"entry":["23","<table>"]},{"entry":["24","[EMBEDDED TABLE]"]},{"entry":["25","<\/table><\/infoel>"]},{"entry":["26","<p>Move the Minnesotans together and apart to see"]},{"entry":[{},"the sparks fly when they kiss, <\/p>"]},{"entry":["27","<script language=\u201cJavaScript\u201d>"]},{"entry":["28","[EMBEDDED SCRIPT #1]"]},{"entry":["29","<\/script>"]},{"entry":["30","<infoel lvl=3><p>Vary the temperature and relative humidity of"]},{"entry":[{},"the Minnesotan's environment to see how this affects the resistivity"]},{"entry":[{},"of the air between them and the distance at which the coulombs"]},{"entry":[{},"overcome the ohms. <\/p>"]},{"entry":["31","<script language=\u201cJavaScript\u201d>"]},{"entry":["32","[EMBEDDED SCRIPT #2]"]},{"entry":["33","<\/script><\/infoel>"]},{"entry":["34","<\/body>"]},{"entry":["35","<\/html>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The example document utilizes standard HTML-format tags to format the information in the document. Furthermore, an additional tag \u201c<infoel>\u201d is utilized to delimit the information in the document into a plurality of information elements. The tag includes a \u201clvl\u201d field that functions as the level identifier, and a \u201ccid\u201d field that functions as the concept identifier. The text data between the \u201c<infoel>\u201d and \u201c<\/infoel>\u201d tags functions as the information for an information element.","It should also be noted from the above example document that a portion of the information in a document may not be delimited by \u201c<infoel>\u201d tags. In such instances, it is often desirable to format such information into default information elements having null value level and concept identifiers, so that all information in the document is associated with an information element.","It should further be appreciated that, for performance concerns, it may be desirable to load the information stored in a text body of knowledge document into a specific data structure for access to and manipulation of the information by an abstraction stack. As such, it may be desirable to pass the document through a parser to generate a suitable data structure. The use and configuration of parsers (e.g., HTML parsers) is well known in the art, and thus, it would be well within the capabilities of one of ordinary skill in the art to parse a text body of knowledge document into an alternate data structure. Moreover, as will be discussed in greater detail below, new or existing information may be entered directly into a body of knowledge in the format described herein during creation of the body of knowledge.","A body of knowledge may be represented in any number of alternate manners. For example, more than one file or document may be used to represent a body of knowledge. Similar to HTML documents, a body of knowledge document may also cross-reference other documents such that one document serves as a container for the information in another document. A body of knowledge may also be stored in a database, with each information element allocated a record therein. Other variations will be apparent to one of ordinary skill in the art.","As discussed above, a body of knowledge may represent a collection of information related to innumerable types of subjects, including various educational topics, literary topics, technical topics, reference topics, and computer topics, among others. For example, several specific examples of suitable applications are disclosed in greater detail in the aforementioned incorporated applications entitled \u201cCOMPUTER SYSTEM AND METHOD FOR CONTROLLING THE SAME UTILIZING A USER INTERFACE CONTROL INTEGRATED WITH MULTIPLE SETS OF INSTRUCTIONAL MATERIAL THEREFOR\u201d and \u201cCOMPUTER SYSTEM AND METHOD FOR ABSTRACTING AND ACCESSING A CHRONOLOGICALLY-ARRANGED COLLECTION OF INFORMATION\u201d.","Various additional classes of suitable applications of the invention include instructional, technical, reference, educational and literary applications where it is desirable to organize information with a hierarchical and easily accessed manner of presentation, e.g., novels, screen plays, literary interpretations, procedural manuals, operator manuals, cookbooks, encyclopedias, dictionaries, textbooks, system interfaces, and application interfaces, among others. Another class of suitable applications of the invention is that of computer software applications in which information can be stratified into different strata or levels of abstraction, e.g., help systems, project managers, personal information managers and organizers, database tools, mail\/news readers, groupware, taxonomy viewers\/editors, web document builders, web site builders, organization charting applications, outliners, and word processing and authoring systems (e.g., for software, legal topics, legal opinions, disclosures, etc.), among others. For example, in a mail\/news reader application, one level of abstraction may be a list of news groups or mail folders, with another level of abstraction set to lists of messages in specific news groups or folders, and with a third level of abstraction set to the text of specific messages in the lists of messages.","Another class of suitable applications is based upon presenting different points of view for a body of knowledge. For example, a legal trial preparation tool may utilize abstraction levels defined to provide different witness, victim and\/or perpetrator accounts of a event or crime. As another example, a unique style of fictional work may be authored and presented to a reader such that a story or certain events could be presented concurrently to a reader through the eyes of different characters in the story.","Other applications not specifically mentioned herein will be apparent to one of ordinary skill in the art.","As discussed above, an abstraction stack is utilized to access and\/or manipulate the information stored in a body of knowledge, e.g., body of knowledge . One suitable implementation of an abstraction stack is illustrated at  in FIG. . The abstraction stack includes two primary components, a depth manager  and a flow manager . Depth manager  generally maintains the data structure of the abstraction stack and handles rendering of the abstraction stack on a computer display. Flow manager , on the other hand, generally handles the user interaction with the data structure to modify the manner in which the data structure is displayed by the depth manager.","An abstraction stack generally provides a visual manner of organizing multiple levels of abstraction. Each level of abstraction in a body of knowledge is typically represented in an abstraction stack by a focal plane organized along a common depth vector, or abstraction axis, extending generally perpendicular thereto. The focal planes are organized along the depth vector based upon the manner of categorizing the levels of abstraction. For example, if levels of abstraction relate to different levels of detail, the focal planes may be organized sequentially based upon the relative levels of detail for their associated levels of abstraction.","An abstraction stack functions to display information from one or more focal planes in such a manner that the different focal planes are organized in a three-dimensional workspace such that the relative arrangement of the focal planes is readily apparent therefrom. Focal planes are generally handled as two-dimensional virtual constructs, with the depth vector upon which focal planes are organized representing the third dimension of the stack. As a result, display of an abstraction stack on a two-dimensional display such as a video monitor often requires three-dimensional modeling techniques to be utilized to provide a three-dimensional rendering of an abstraction stack.","Depth manager  generally handles the data structure of the abstraction stack as well as rendering of the abstraction stack on a computer display. The data structure of the abstraction stack includes a plurality of objects representing different abstraction stack components. As shown in , a depth vector  is provided for the data structure to organize each focal plane, or level of abstraction, for a body of knowledge. Depth vector  is principally an organizational construct, and may or may not be displayed on a computer display. Focal planes are organized at predetermined positions along the depth vector, e.g., evenly spaced along the length thereof.","Another type of object forming the data structure of the abstraction stack is a lens , which typically serves as a point of attachment and focus point along the abstraction stack for stack manipulation and content. The lens object  includes a number of subclassed lens types. A suspended lens, for example, is used to display the information from one or more levels of abstraction. In addition, a suspended lens is typically represented in much the same manner as a GUI window, with controls such as resizing handles, minimizing handles, scroll bars, etc. used to modify the appearance and content displayed in the lens. As discussed below, various filtering and linking techniques may be utilized on a suspended lens to modify the information displayed therein. Moreover, suspended lenses may be further subclassed into primary and secondary lenses, as well as supplementary lenses, all of which are discussed in greater detail below.","An additional subclass of the lens object is a minor lens, which generally provides a minimized representation of a suspended lens. Typically, a minor lens is arbitrarily small so that its minimized representation is apparent to a user. Another subclass of lens is a prime lens (discussed below), which is essentially a maximized view of a suspended lens. A collapsed abstraction stack is typically displayed concurrently with a prime lens to maintain a visual relationship of the prime lens within the abstraction stack as a whole.","Another abstraction stack object data structure is a compass handle , which is typically located at an end of a depth vector of an abstraction stack. A compass handle typically functions as an endpoint of the abstraction stack, and may function as a focal point for manipulation of and access to a minimized or maximized abstraction stack (discussed below). In addition, a compass handle may be used as a point of attachment to other related abstraction stacks for a particular body of knowledge.","Another object in the abstraction stack data structure is a binder band , which provides one manner of visually representing the hierarchical arrangement of levels of abstraction via visually connecting other objects displayed along a depth vector of an abstraction stack. One subclass of a binder band is a shaft band, which generally links together objects associated with different levels of abstraction in a body of knowledge. Another subclass of a binder band is a strata band, which generally links together objects associated with the same level of abstraction in a body of knowledge. A binder band is typically represented by one or more connecting elements that extend between two other displayed objects. For example, in one embodiment, a binder band may be represented by four lines extending between corresponding corners of two objects. Other numbers of lines, as well as other forms of connecting elements, may be used to represent a binder band in the alternative.","One additional abstraction stack object is an intersection point , which principally functions to identify a single focal plane along the length of a depth vector when no lens is displayed at that location along the depth vector. The intersection point typically may be manipulated by a user to create a lens associated with the focal plane for the intersection point.","As discussed above, flow manager  generally handles the user interface with the abstraction stack data structure to modify how the abstraction stack is displayed by the depth manager, including handling information flow to the various lenses displayed for the abstraction stack. Flow manager  is coupled to depth manager  through a number of client\/server pairs shown at . The client\/server pairs  couple together lenses with filters and generally function to control the flow of information from the body of knowledge into a lens.","Flow manager  includes a number of objects that are utilized to handle user interaction with the abstraction stack. For example, flow manager  utilizes one or more filter objects  to define the manner in which information is displayed in suspended lenses. Each filter object  defines a predetermined filtering criteria used by a lens. A user is permitted to access and manipulate the filtering criteria to modify the manner in which information is displayed by the abstraction stack.","A list of available named concepts  is also maintained by flow manager  to determine when to visually link together information that is related to a particular concept when information from different levels of abstraction is concurrently displayed. As will be discussed in greater detail below, the named concept information is utilized by the flow manager, for example, when the user interface is in a link pointer mode. In addition, some filter implementations may also rely on the named concept information when filtering information from one or more suspended lenses.","User interaction with the abstraction stack is principally handled by a pointer (not shown in ) that is manipulated by one or more user interface devices such as a mouse, a trackball, a keyboard, a touch pad, etc. A pointer may be placed into one of several modes, and may also be used in such operations as switching focus between lenses, highlighting information for cut and paste operations, etc. Other uses of the pointer include various conventional pointer-based actions, such as resizing, moving, closing and similar window operations, selection of menu entries, and selection of buttons, among others.","While the above-described organization of the abstraction stack is object oriented, it should be appreciated that other programming methodologies, e.g., procedural, may be used in the alternative. It should also be appreciated that the various functions described herein for the abstraction stack and its components may be allocated to different software routines and\/or structures consistent with the invention.","The operation and usage of an abstraction stack consistent with the invention is now described. As discussed above, an event-driven system may be utilized herein to handle user interaction with an abstraction stack. As such, a main routine for event manager  of operating system  () is illustrated at  in FIG. . It should be appreciated that non-event-driven implementations may be utilized in the alternative.","Routine  may be considered to operate in an endless loop\u2014typically as a dedicated process running in the background of operating system . As is well-known in the art, routine  waits for events at block  and passes such events to appropriate handling routines. Several such events consistent with the invention are detected at blocks -. Also shown in  is a block  that handles the multitude of other types of events generated in the computer system, but which are not relevant to an understanding of the invention.","Stack Initialization","As shown in , an initialize stack event is detected in block  and handled by an initialize stack routine  executed by depth manager , which is shown in greater detail in FIG. . Routine  begins at block  by retrieving a body of knowledge document and parsing the document into the data structure illustrated generally in FIG. . As discussed above, parsing of a text document into a more efficient data structure is well known in the art. Upon completion of the parsing operation, a body of knowledge data structure including eleven information elements is created, with each element including the data set forth in Table II below (with any embedded formatting information not shown in the table):",{"@attributes":{"id":"P-d0e5407","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE II"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Body of Knowledge Data Structure"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Info.","Level","Concept",{}]},{"entry":["Element","ID","ID","Information"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["A","null","null","\u201cStatic Electricity Puts the Spark in Sparking\u201d"]},{"entry":["B","null","null","\u201cStatic electricity is a natural . . . as we"]},{"entry":[{},{},{},"kiss our spouses.\u201d"]},{"entry":["C","1","null","\u201cThe discharge occurs . . . noses'"]},{"entry":[{},{},{},"electrostatic potential.\u201d"]},{"entry":["D","2","coul","\u201cThe force of the spark . . . them"]},{"entry":[{},{},{},"to yield coulombs.\u201d"]},{"entry":["E","3","coul","\u201cOur understanding . . .distance"]},{"entry":[{},{},{},"between the charges.\u201d"]},{"entry":["F","2","ohm","\u201cThe air's resistance . . . as an"]},{"entry":[{},{},{},"insulator to yield ohms.\u201d"]},{"entry":["G","3","ohm","\u201cOhm's law gives . . . area of the conductor.\u201d"]},{"entry":["H","2","rstv","\u201cThe spark's path tends . . . resistivity, than"]},{"entry":[{},{},{},"cold dry air.\u201d"]},{"entry":["I","3","rstv","\u201cThe cross-sectional . . . [EMBEDDED"]},{"entry":[{},{},{},"TABLE]\u201d"]},{"entry":["J","null","null","\u201cMove the Minnesotans . . . [EMBEDDED"]},{"entry":[{},{},{},"SCRIPT #1]\u201d"]},{"entry":["K","3","null","\u201cVary the temperature . . . [EMBEDDED"]},{"entry":[{},{},{},"SCRIPT #2]\u201d"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Next in block , a depth vector object is created, or instanced, to generate a depth range along which objects to be displayed are located along an abstraction axis. A depth vector object may include, for example, a linked list of objects defined along the depth vector. Alternate data structures may be used in the alternative.","A pair of compass handle objects are next created and linked to each end of the depth vector in block , e.g., by setting depth values therefor to the minimum and maximum depth values for the depth vector. Next, the body of knowledge data structure is scanned in block  to determine what levels of abstraction are defined therefor. From this information an intersection point object is created for each level of abstraction and linked to the depth vector. Typically the intersection points are evenly spaced along the depth vector. Consequently, for the body of knowledge of Table II, three levels of abstraction would be found, and three intersection points would be linked to the depth vector at even spacing thereon, thereby partitioning the depth vector into four equal-length segments. This may be performed, for example, by setting depth values for the intersection points to 25%, 50% and 75% of the length of the depth vector.","Next, in block , shaft band objects are created extending between each of the compass handles and intersection points. Each shaft band object may include, for example, pairs of end points for four line segments to extend between corners of adjacent display elements. Next, in block , a render stack event is generated for the depth manager to initiate rendering of the abstraction stack on the computer display. Routine  is then complete.","Returning to , a render stack event is detected in block  and handled by a render stack routine . Routine  as discussed hereinafter renders an abstraction stack as a three-dimensional representation on a two-dimensional computer display such as a video monitor, or on a simulated three-dimensional display such as a virtual reality headset. Routine  utilizes a viewpoint parameter, which is a location in a three-dimensional space from which to view the abstraction stack (typically relative to the orientation of the depth vector). For example, one suitable viewpoint may render the depth vector as extending from a starting position in the lower left of the display to an ending position in the upper right of the display, among others.","It should be appreciated that the viewpoint may be fixed, or may be customizable by a user, e.g., through an options or preferences selection. In addition, a viewpoint may be dynamically varied by a user, similar to the manner in which a user is able to \u201cwalk\u201d around a virtual world in Virtual Reality Modeling Language (VRML) browsers. It should also be appreciated that routine  may instead render an abstraction stack in a three dimensional display such as a holographic tank or the like in the alternative.","Routine  may also utilize a zoom factor that determines the scale used to render the abstraction stack. The zoom factor may be fixed, or may be customizable by a user. The zoom factor may also be dynamically variable so that a user can zoom in and out on-the-fly. In addition, the zoom factor may be calculated after objects are placed in the abstraction stack so that a maximized view of the entire stack is rendered in the computer display.","As illustrated in greater detail in , routine  begins in block  by calculating the viewpoint and\/or zoom factor for the depth vector, e.g., by retrieving currently-stored parameters therefor. Next, in block , a loop is initiated to process each object in the abstraction stack (e.g., lenses, intersection points, etc.), with the exception of the binder bands. While additional objects remain to be rendered, block  is executed to render the next object along the depth vector at its proper orientation thereon, using conventional three-dimensional modeling techniques well known in the art. Moreover, for lenses and the like which display information from the body of knowledge, the appropriate information is rendered in a manner suitable for the particular format of the information elements in the body of knowledge. For example, for a body of knowledge that is in an HTML format, rendering the displayed contents of a lens may require HTML parsing and rendering operations similar to those performed by conventional HTML-compatible browser applications.","Next, block  determines whether any additional objects exist at the same depth. For each such object, block  renders these additional objects at appropriate orientations offset from the depth vector but at the same relative depth thereon. Typically such objects are supplementary lenses (as discussed in greater detail below).","Once each object has been rendered, block  is executed to render the binder bands between each displayed object, typically by rendering four line segments extending between the four corners of each adjacent pair of objects. For adjacent objects along the depth vector, the binder bands are referred to as shaft bands, and for adjacent objects that are oriented at the same depth on the depth vector, the binder bands are referred to as strata bands. The display is next refreshed in block  such that the rendered abstraction stack is displayed on the computer display. Routine  is then complete.","As an example of the operation of routines  and ,  illustrates a three-dimensional rendering of an initialized abstraction stack  on computer display . First, a pair of compass handles ,  are created at opposite ends of a depth vector . Also, using the aforementioned example BOK document, three levels of abstraction are provided, and thus, three intersection points , , and are evenly disposed along the length of depth vector . Binder bands are then rendered to connect each object , , , , and . For example, a binder band , including line segments , , and , is illustrated connecting compass handle  to intersection point ","Lens Creation","Lenses are much like windows in common GUI environments, insofar as they provide a window into a portion of the information in a body of knowledge. Lenses differ from windows, however, in that multiple lenses may be related to one another through predetermined relationships.","For example, lenses may be related through a coordinated scrolling relationship, whereby multiple lenses may be coordinated to display different views of essentially the same concepts in a body of knowledge, with coordinated scrolling provided to ensure that the lenses track one another as lenses are scrolled to display other concepts in a body of knowledge. To this extent, lenses in an abstraction stack are typically grouped into one or more lens sets. Each lens set typically has associated therewith a current location or position in the body of knowledge that is consistent across each lens in the lens set. Each lens, however, may also have start and end boundaries, referred to herein as shallow and deep bounds, that define at the extent of a \u201cwindow\u201d or segment of information from the body of knowledge that is displayed in a particular lens. By maintaining the current position for the lens set between the shallow and deep bounds of each lens in the lens set, the lenses are permitted to track one another during scrolling operations.","Lenses in a coordinated scrolling lens set are typically, but not necessarily, disposed along the depth vector and connected by shaft bands. Lenses that are disposed along a depth vector may be considered as depth vector lenses, and are typically either primary or secondary lenses. Primary and secondary lenses are associated in a common lens set, with the only difference therebetween being that a primary lens is the focus of a user's interaction with the abstraction stack in navigation of the body of knowledge, while a secondary lens is typically modified automatically in response to user operations on the primary lens. A secondary lens typically displays the same concepts as a primary lens, albeit with an independent filter configuration that provides an alternate view of essentially the same information in the body of knowledge. In addition, a secondary lens may be activated to become the primary lens, whereby the prior primary lens then becomes a secondary lens.","Lenses may also be related through an inherited filter relationship, whereby one lens, designated a supplementary lens, inherits the filter characteristics of another lens, designated a supplemented lens. A supplementary lens provides a view of information at an alternate point within the body of knowledge to that of the lens supplemented thereby. Navigation with a supplementary lens is independent of its supplemented lens, although the filter configuration is typically identical to that of its supplemented lens.","Supplementary lenses are typically disposed at the same depth along the depth vector as their associated supplemented lens, but spaced apart from the supplemented lens within the same plane. Supplementary lenses may also be members of a lens set of other supplementary lenses such that a coordinated scrolling relationship is provided therebetween.","Therefore, it may be seen that any given lens may be distinguished as being a primary or secondary lens, depending upon whether the lens is the focus of user input, as well as being a supplemented (depth vector) lens or being a supplementary (offset from depth vector) lens.","Each lens also has associated therewith a filter that defines how the lens displays information from the body of knowledge. Specifically, a filter for a lens typically defines whether a lens passes or blocks information elements from each level of abstraction. In addition, for each level of abstraction passed by the filter, the filter defines how the information elements therefrom are transformed, if at all, when displayed in the lens.","The types of filters that may be useful in an abstraction stack typically varies depending upon the manner in which a body of knowledge is stratified into levels of abstraction, which may be referred to as an abstraction scheme. A body of knowledge may be represented by one abstraction scheme or by multiple abstraction schemes, with one or more of such schemes specifically defined by an author or developer, and\/or with one or more of such schemes inherently defined, e.g., based upon standard document components or data types.","For example, for abstraction levels defined in terms of levels of comprehension, filters may be established to provide beginner, intermediate and expert-level presentations of the body of knowledge, among others. For abstraction levels defined in terms of levels of detail, filters may be established to provide an overview, outline, or detailed explanation of a body of knowledge, among others. For abstraction levels defined in terms of levels of data types, filters may be established to provide separate views of text, illustrations, video clips, etc. in the body of knowledge. For abstraction levels defined in terms of document components, filters may be established to present the body of knowledge as a table of contents, a body, a glossary, an index, etc. For abstraction levels defined in terms of communications techniques, filters may be established to present a body of knowledge as a list of examples, answers to questions, tutorials, etc. For abstraction levels defined in terms of computer software components and\/or layers, filters may be established to provide views of a computer program such as for source code, object code, comments, source code with comments, API's, class definitions, etc. Also, for abstraction levels that distinguish between a body of work and comments, critiques, and analysis thereof, different filters may be defined to present views of the work, the comments, the comments integrated into specific sections of the work, etc. Abstraction levels may also be stratified based upon point of view, immediacy and\/or personal relevance. Other filter configurations suitable for presenting different views of different bodies of knowledge should be apparent to one of ordinary skill in the art.","Returning to , another event handled by the event manager is that of a request to create a new lens on the abstraction stack, which is detected at block  and handled by a create lens routine . The event may be initiated in response to a number of user input actions, including via a pull-down or pop-up menu, a toolbar button, a keystroke combination, or selection of a user interface control in the abstraction stack. For example, for a depth vector lens, a lens may be created in response to user selection of one or more intersection points in the stack (whether contiguous or non-contiguous), with the selected intersection point or points defining which levels of abstraction will be initially displayed in the lens. For a supplementary lens, a lens may be created in response to user selection of a lens to be supplemented (e.g., through double-clicking on the title bar).","Routine  is illustrated in greater detail in , and begins by calling a get filter configuration routine  to determine the initial filter configuration for the lens. Once the filter configuration is obtained, block  is executed to determine whether the lens is a depth vector lens. If so, control is passed to block  to calculate a depth value, i.e., the relative position of the lens along the depth vector, for the lens relative to the intersection points and other depth vector lenses. If only one level of abstraction is displayed in the lens, the depth is typically at the intersection point for the focal plane for that layer of abstraction. If multiple levels of abstraction are displayed in the lens, the depth may be determined, for example, based upon the greatest number of included contiguous intersection points in the filter configuration, e.g., at the midpoint of the contiguous intersection points. If there is no greatest number, the placement of the lens may coincide with the position of the intersection point with the fewest non-selected intersection points between it and the nearest compass handle. Also, if there is no such intersection point, the lens may be placed arbitrarily and unpredictably on one side of the midpoint of the abstraction stack. Other manners of placing a lens along the depth vector will be apparent to one of ordinary skill in the art.","Next, block  deletes the shaft band (or other) object at the current depth of the lens, and then, block  inserts a new lens at the calculated depth. The new lens may be inserted, for example, into a linked list representing the abstraction stack, in a manner known in the art.","Next, block  inserts new shaft bands between the new lens and the adjacent objects along the depth vector (e.g., by inserting such objects into an abstraction stack linked list. It should be appreciated that the functions of blocks - may be performed, for example, in an object oriented system as part of a constructor routine for a lens object that is supplied with the depth value for the lens as calculated above.","Next, block  is executed to determine if any other lens in the current lens set is open (if multiple lens sets are permitted) in the abstraction stack. If so, block  is executed to add the new lens to the lens set. If not, block  is executed to create a new lens set with the new lens as its sole member.","Both blocks  and  then pass control to block  to issue an open lens event to the new lens in block  to open the lens to a non-minimized state in the abstraction stack. Routine  is then complete. In the alternative, creation and opening of a lens may be considered two independent actions requiring specific input from a user, whereby an open lens event would be initiated in response to specific user input. A lens may also be initially displayed as a minor (minimized) lens if desired.","Returning to block , if the new lens is not a depth vector lens, but is instead a supplementary lens, control is passed to block  to set the depth value for the new lens to that of the lens that will be supplemented by the new lens. Next, block  calculates the displacement of the new lens from the depth vector in the plane of the supplemented lens. The displacement may have a distance value, as well as a directional value, to orient the supplementary lens relative to the supplemented lens. To this extent, a supplementary lens may be distinguishable from a depth vector lens by analyzing the displacement value for a lens, whereby a depth vector lens could be defined as a lens having a null displacement from the depth vector.","The displacement for a supplementary lens may be calculated, for example, as a function of one plus the number of intermediate supplementary lenses between the new lens and the supplemented lens, multiplied by a predetermined displacement increment. In this configuration, supplemented lenses would be located along an orthogonal axis to the depth vector. In the alternative, supplementary lenses may be located along different directions relative to the supplemented lens. Moreover, placement of a lens may be dependent upon the available space on the computer display. Furthermore, no placement information may be stored with a supplementary lens, with the placement thereof determined dynamically during rendering of the abstraction stack. Other manners of locating a supplementary lens relative to a supplemented lens will be apparent to one of ordinary skill in the art.","Once the location of the new lens is determined, block  is executed to insert the lens at the inherited depth, and block  is executed to insert strata bands between the new lens and either the supplemented lens (if there are no other supplementary lenses) or the nearest intermediate supplementary lens (if such a lens exists). Blocks  and  may be implemented, for example, using a secondary linked list extending from the supplemented depth vector lens, or in other manners as would be well understood in the art. Next, control is passed to block  to issue an open lens event to the new lens, and routine  is then terminated.",{"@attributes":{"id":"P-00142","num":"00142"},"figref":"FIG. 10","b":"280"},"Routine  begins in block  by determining whether the lens is to be a depth vector lens. If so, control is passed to block  to initialize the filter configuration for the new lens to a default configuration. Typically, this is performed in response to the intersection points that are identified in the create lens event. For example, as discussed above, a depth vector lens may be created by selecting one or more intersection points. In these circumstances, a default filter configuration will be set to pass the levels of abstraction represented by the identified intersection points, with all other levels of abstraction blocked by the filter. Moreover, the passed levels will typically be set for normal display, with no specific focus effects applied thereto.","It should be appreciated that for other lens creation actions, different default filter configurations may be used. For example, it may be possible for a user to create a lens that is selected from a list of predefined specialty lenses that is made initially available to a user by the application creator or the body of knowledge author, or by the user in an earlier session with the body of knowledge. In this circumstance, the default filter configuration is based upon the parameters set for the predefined lens.","Once the default filter configuration is set, control is then passed to block  to determine whether the filter configuration dialog box is enabled. Typically, the dialog box will be enabled. However, it may be desirable to lock out the dialog box, e.g., if a user is permitted to use only predefined lenses when viewing the abstraction stack, if a user has not been granted authority to perform this operation, or the user has previously saved a set of configurations for this body of knowledge. If the dialog box is disabled, routine  terminates, returning the default filter configuration as the filter configuration for the new lens.","If the dialog box is enabled, however, block  is executed to initialize the dialog box, and block  is executed to secure user confirmation or modification of the default filter configuration. It should be appreciated that blocks  and  may be performed, for example, by initializing a dialog box object that receives user input and returns to routine  at block  upon user selection of an appropriate button in the dialog box. In any event, upon return to block , routine  terminates with optionally modified filter configuration used as the filter configuration for the new lens.","One suitable dialog box  for configuration of a lens filter is illustrated, for example, in FIG. . Dialog box  includes two primary control groups  and . Control group  includes a user interface control  such as a drop-down menu for selecting among the available levels of abstraction. Upon selection of any level of abstraction with control , the current pass\/block status for that level is reflected in a user interface control  such as a group of pass and block radio buttons. A user is permitted to modify the pass\/block status for the currently selected level by selecting the appropriate radio button, which has the effect of de-selecting the other button.","Control group  sets the focus effect for the currently selected level of abstraction using a user interface control  such as a set of radio buttons. Since a focus effect is not used for a blocked level of abstraction, it may be desirable to disable (gray out) the controls in control group  whenever the current level of abstraction is set to be blocked.","User interface control  includes grouped radio buttons reflecting normal, highlight, and obscure focus effects for a level of abstraction. In addition, edit buttons  are provided to enable a user to modify the settings for one or more of the focus effect selections. The edit buttons typically open separate dialog boxes that permit the display characteristics for each setting to be customized by a user. The edit buttons may set the display characteristics for all lenses in the abstraction stack, or may set individual display characteristics for the filter's associated lens. Moreover, in the latter case, the user may still be able to set default display characteristics for each setting through additional user input.","A normal setting indicates that information from the level is to be displayed without a special effect. Typically, information displayed in the normal setting has a default font (for text) without any specially-set attributes or a normal representation (for images and other multimedia information). However, it may be possible for a user to set specific display characteristics, e.g., if the user wishes for all text to be displayed in boldface or italics.","A highlight setting indicates that information from the level is to be highlighted in some manner to distinguish the information from that of other levels. Highlighting may be implemented via a special text attribute such as boldface or underlining, or via an increased text size. Also, highlighting may be implemented using a reversed representation (i.e., with the text and background colors switched). For multimedia information such as images, highlighting may be implemented, for example, by highlighting a border thereof, or reversing colors.","An obscure setting indicates that the relative position and size of the information from the level is to be reflected in the lens, but that the actual content of the information is to be de-emphasized or even hidden from the user. The primary purpose for the obscured effect is to represent that the information exists at the predetermined location in the body of knowledge, but that the content of the information is not relevant for the particular filter configuration. For example, an obscure focus effect may be implemented using a pseudo-font, whereby text information is displayed with each character or each word represented by a box or line, or by a single character or icon. Also, the obscure effect may be implement graying out any text and\/or multimedia information in a manner well known in the art. Whitespace, whether or not accompanied by a displayed boundary, may also be used. Other manners representing information while obscuring the actual content thereof will be apparent to one of skill in the art.","Another control provided on dialog box  is a filter styles button , which typically opens another dialog box that permits a user to select between a number of predefined filter configurations as discussed above. In this dialog box, a user may also be able to add, delete and\/or modify specific styles using an additional dialog box similar to dialog box .","For example, an embedded-interleaved filter may be provided that provides a familiar and comfortable introduction to new information by interleaving elements that address key concepts with embedded and linked graphic and animated examples and illustrations of the concepts, working methods that employ the concepts, and links to related and tangential abstraction stacks. A hotpoint-background filter may be provided to show the relative location and relationship of specific elements to other information in the body of knowledge by highlighting the specific elements and\/or obscuring the other information in the body of knowledge.","In addition, a knowledge level filter may be provided that specifically admits information intended for an audience with a capacity to appreciate a specific level of abstraction, e.g., beginner, elementary, general knowledge and expert filters. An overview filter may be provided that only admits information from \u201chigher\u201d levels of abstraction. A working filter may be provided that admits methods or procedures from a body of knowledge, and an example filter may be provided that only admits examples. In addition, if levels of abstraction are defined for specific types of information elements such as headings, glossary terms, index terms, footnotes, body text, etc., different filters such as table of contents filters, heading filters, body filters, footnote filters, glossary filters, index filters, etc. may be developed.","It should further be appreciated that a predefined filter configuration may be developed to highlight or obscure specific information. For example, filters may be defined to highlight index or glossary terms, footnotes, headings, etc. Other filter configurations described herein or otherwise will be apparent to one of skill in the art.","Dialog box  also includes return buttons  and  that a user activates to terminate the dialog box and return control to routine . Button  is an \u201cOK\u201d button that a user selects when the user is satisfied with the current filter configuration. Button  is a \u201ccancel\u201d button that a user selects when the user wishes to discard any changes and return to the previous filter configuration.","It should be appreciated that a wide variety of other user interface mechanisms and organizations may be used to configure a filter consistent with the invention, and that the organization of dialog box  is but one of many ways to permit user modification of filter settings. For example, for implementations that utilize multiple abstraction schemes, multiple control groups  and  may be provided to display each abstraction scheme, or a separate control group may be used to selectively display control groups  and  with the information for a particular abstraction scheme.","Furthermore, a separate dialog box may be opened prior to opening dialog box  to permit user selection of an abstraction scheme. The use of multiple abstraction schemes may be desirable in some applications and thus may be created by an author of a particular body of knowledge. In the alternative, for some bodies of knowledge, inherent abstraction schemes, e.g., via document components or data types, may be used and selected in any of the manners discussed herein.","It should also be appreciated that dialog box  may also be opened and utilized by a user after creation of a lens, typically should the user desire to modify the settings for a lens at a later point in time. Modification of a filter configuration may be initiated in any number of manners, e.g., via a button or menu associated with a particular lens, or in other manners known in the art.","An open lens routine  that handles an open lens event for a lens is illustrated in FIG. . An open lens is generally any lens that is not minimized (such as a minor lens), and which displays a portion of the body of knowledge. As will become more apparent below, each lens is defined to include shallow and deep bounds, representing the boundaries of the lens in terms of start and end locations in the body of knowledge. Each lens includes a plurality of lines of information, with each line having associated therewith a body of knowledge count representative of the size of the portion of the body of knowledge represented in that line. Since portions of the body of knowledge may be filtered out via the filter for each lens, it should be appreciated that each line displayed in a lens may represent a different quantity of information in the body of knowledge. Accordingly, it is desirable to maintain the shallow and deep bounds in terms of locations within the body of knowledge, and thus, independent of the particular information displayed in a lens.","It should also be appreciated that the implementation discussed herein is limited principally to use with a body of knowledge formed of textual information, with only a limited concern for formatting and layout details, to facilitate a better understanding of the basic concepts of the invention. As such, lines of information within a lens typically include one or more words of text from a body of knowledge, with each body of knowledge segment carrying textual data as well as a count of the portion of the body of knowledge represented by the textual data in the segment along with any information elements that are blocked by a lens filter during assembly of the segment. However, other embodiments consistent with the invention may be designed to handle other types of information such as graphics and other multimedia data and executable data, typically by incorporating various web browser and what-you-see-is-what-you-get (WYSIWYG) editing layout and information presentation concepts to handle the discipline-specific details for formatted text, text frames, graphics frames, page layout, graphics images, video, animation and audio clips, user interface controls, etc. For example, the aforementioned incorporated application entitled \u201cCOMPUTER SYSTEM AND METHOD FOR CONTROLLING THE SAME UTILIZING A USER INTERFACE CONTROL INTEGRATED WITH MULTIPLE SETS OF INSTRUCTIONAL MATERIAL THEREFOR\u201d discloses one suitable implementation for handling multiple information types. Thus, it should be appreciated that the invention should not be limited to the text-based implementation disclosed herein.","Routine  begins in block  by calculating the number of lines for the lens based upon its current dimensions. The dimensions that may affect the number of lines displayed include the height and width of a lens, as well as an optional zoom factor for the lens that determines the size of the information that will be displayed therein. In addition, the number of lines for the lens may be dependent upon the font size for textual information displayed in any given focus effect (e.g., normal, highlighted, or obscured). Calculation of the number of lines to display in a window, however, is a routine operation that is well known in the art.","Next, block  is executed to determine whether the lens is a depth vector lens. If it is, block  is executed to determine whether any lens in the current lens set is already open. If so, block  is executed to set the deep bound for the lens to initially be equal to the shallow bound for the primary lens in the current lens set. If not, block  is executed to set the deep bound for the lens to initially be equal to the top of the body of knowledge. Returning to block , if the lens is a supplementary lens, block  is executed to set the deep bound for the lens to initially be equal to the shallow bound of the supplemented lens therefor.","After execution of any of blocks ,  or , a fill lens routine  is called to fill the lens with information, and a render stack event is issued in block  to execute render stack routine  of FIG. . Routine  is then complete.","Fill lens routine , which is illustrated in greater detail in , generally operates to push lines of information from the body of knowledge sequentially into the bottom of the lens until the lens is full of information. Routine  receives a deep bound that initially points to the start location for the lens in the body of knowledge. The initial value stored in the shallow bound is not important, as routine  updates this value prior to termination. As will become apparent below, the deep bound is automatically updated as information is pushed into the bottom of the lens such that, upon completion of routine , the deep bound points to the end location for the lens in the body of knowledge.","Routine  begins in block  by initializing the body of knowledge count for each line in the lens to zero. Next, a scroll down routine  is called to push a line of information into the bottom of the lens, while calculating a body of knowledge count for the line and updating the deep bound accordingly. Next, block  determines whether the body of knowledge count for the top line of the lens is no longer zero, indicating that the lens is full of information. If not, routine  is again called until the lens is full. Once the lens is full, block  is executed to update the shallow bound for the lens to be equal to the deep bound of the lens less the sum of the body of knowledge counts for all lines in the lens. Routine  is then complete. It should be appreciated that, in the alternative, the fill lens routine may use a scroll up operation to sequentially push information into the top of the lens.",{"@attributes":{"id":"P-00168","num":"00168"},"figref":"FIG. 14","b":["220","220","222","223","230","230","224","230","226","223"]},"The retrieval of segments from the body of knowledge occurs until such time as the end of the body of knowledge is encountered (as represented by block ) or until such time as a full line of information has been appended to the new line buffer (as represented by block ). In either case, control is passed to block  to increment the shallow bound for the lens by the body of knowledge count of the current top line displayed in the lens, in effect removing the existing top line from the lens.","After the shallow bound of the lens has been incremented, control passes to block  to push the new line into the bottom of the lens, an operation that is generally well understood in the art. Accordingly, on the next refresh operation on the lens, the new line retrieved from the body of knowledge will be displayed at the bottom of the lens, with the previous top line of the lens discarded by virtue of the increment of the shallow bound of the lens. Routine  is then complete.","Retrieve next segment routine  is illustrated in greater detail in FIG. . Routine  begins in block  by determining whether the deep bound of the lens is located at the bottom or end of the body of knowledge. If so, an end of body of knowledge indicator is returned in block  and routine  is complete. If, however, the deep bound of the lens is not at the end of the body of knowledge, control passes to block  to receive a next (succeeding) segment in the body of knowledge. The next segment is of a fixed, predetermined quantity of information in the body of knowledge, and is at this point unfiltered by the lens. The size of the segment may be as little as a single bit, or more typically, may be one or more bytes of information. In addition, segments may represent full information elements in certain embodiments, since it is assumed that all the information in an information element is associated with the same level of abstraction and named concept, and thus will be treated similarly by the lens filter. In this latter instance, however, a buffer may be needed to partition information elements into segments having at most one line of information.","After the segment is retrieved, control passes to blocks  and  to respectively increment the deep bound for the lens by the segment size, and to increment the body of knowledge count for the new line by the segment size. Next, block  determines whether the segment is filtered by the filter associated with the lens. If it is, it is not desirable to display this segment in the lens, and accordingly, control is passed to block  to retrieve another segment from the body of knowledge if possible. Accordingly, it will be appreciated that the loop initiated by blocks - scans down through the body of knowledge until a non-filtered segment is retrieved. However, during this scan, the body of knowledge count for the new line, and the location of the deep bound in the body of knowledge, is maintained so that the filtered information, while not displayed, is nonetheless accounted for in the body of knowledge.","Once an unfiltered segment is retrieved, block  passes control to block , which determines whether it is necessary to apply a special (focus) effect to the segment based upon the current filter configuration associated with the lens. If so, control is diverted to block  to apply the effect to the segment. As discussed above, for example, different effects may be applied to information associated with the various levels in a lens so that different levels of abstraction may be distinguished in the lens.","Irrespective of whether a special effect is applied to the segment, control then passes to block  to determine whether a link pointer highlight should be applied to the segment, and if so, diverts control to block  to apply the highlight to the segment. As will be discussed in greater detail below, a link pointer highlight is typically applied to a segment if the segment is (1) unfiltered and (2) associated with a named concept that is associated with the information element at which the pointer is currently pointing. Next, irrespective of whether a highlight is applied to the segment, the segment is returned in block , and routine  is terminated.","As an example of the creation and opening of a lens,  illustrates the addition of an open lens  to abstraction stack  upon completion of create lens routine  and open lens routine . Lens  as shown has been created by selecting all of intersection points -such that levels - of the body of knowledge are passed by the lens filter. The lens is initially placed at the focal plane represented by intersection point (which has been deleted in FIG. ). Moreover, the orientation of shaft bands  has been adjusted to extend to the corners of lens , with lens  centered on depth vector . Furthermore, as this is the first open lens, the lens becomes the sole member of the lens set, and thus also becomes a primary lens that receives user input.","A number of alternatives and additions exist. For example, all intersection points may be displayed regardless of whether any associated lenses have been created, and thus, intersection point could be displayed in FIG. . In addition, some alphanumeric or iconic identifier may be used on each lens to represent the included levels therefor. (e.g., for lens  illustrating three icons in the title bar thereof representing the three levels of abstraction passed thereby).",{"@attributes":{"id":"P-00177","num":"00177"},"figref":"FIG. 17","b":["422","420","422","414","414","1","2","3","414","17","405","422","420"],"i":["a ","b ","b "]},{"@attributes":{"id":"P-00178","num":"00178"},"figref":["FIG. 18","FIG. 18"],"b":["424","422","424","422","422","426","422","424","424","422","424"]},"Coordinated Scrolling","One important aspect of the user interface utilized with abstraction stack  is that of coordinating the display of information in multiple lenses of a lens set. As discussed above, a primary lens in a lens set is that which is configured to receive user input, similar to the active window in a GUI environment. Any scroll operation performed on the primary lens which modifies the information from the body of knowledge that is displayed in the lens typically must induce a similar scrolling operation in each secondary lens in a lens set such that the display of the information from the body of knowledge is coordinated across the various lenses.","Returning to , one additional event that may be handled by the event manager is that of handling a scroll event. Such an event, which is detected in block  and handled by handle scroll routine , may be initiated in any number of manners known in the art. For example, the primary lens may include conventional scroll bar objects that permit unit and\/or block increment and decrement operations. Moreover, scroll events may be generated by keyboard input, or through specific menu or tool bar button operations, such as a request to go to a particular location in a document. In addition, if search functions are provided for a primary lens, scroll-like events may be generated that request that a particular location in a body of knowledge be displayed in the lens set.","Handle scroll routine  is illustrated in greater detail in FIG. . Generally, routine  begins in block  by calculating a target in the body of knowledge for the lens set based upon the magnitude and direction supplied in a scroll event. As discussed above, each lens set has associated therewith a current location in the body of knowledge. Based upon the magnitude and direction of the scroll event, a new target location in the body of knowledge may be calculated. For example, it will be known the scroll increment for the primary lens, as well as the current value of the primary lens' shallow and deep bounds. Based upon the information in the scroll event, therefore, a new location in the body of knowledge may be calculated. Depending upon whether the scroll event is for a unit or block increment, or whether the scroll event is a request to go to a particular location in the body of knowledge, the target location in the body of knowledge may be calculated in a routine manner.","For example, the target location may be set by performing a pre-scroll on a temporary (non-displayed) copy of the primary lens, then setting the target to point to the last new segment appended or prepended to the last line built in the pre-scroll. Knowing how many lines should be pushed into the lens, as well as line height, font size, etc., and then finding out how much of the filtered body of knowledge would be used to fill the lens enables determination of the target location.","Once the target location in the body of knowledge has been calculated, control passes to block  to update the contents of each lens in the lens set to display the target location in the body of knowledge. Typically, this operation is performed by passing an update contents event to each open lens in a lens set such that each lens may handle the update event accordingly. In this event, the new target location in the body of knowledge is supplied to each lens. Then, after the event has been initiated for each lens, routine  is complete.","Each lens receives an update contents event and handles such event accordingly using an update contents routine  illustrated in FIG. . Routine  begins in block  by determining whether the target location in the body of knowledge (supplied in the event) is between the shallow and deep bounds for the lens. If so, no scroll of the lens is required, and routine  terminates. If, however, the target is not between the shallow and deep bounds for the lens, control passes to block  to determine whether the target location is beyond the deep bound of the lens.","If so, block  calls scroll down routine  of  to scroll down a predetermined increment, here a line, into the body of knowledge (which also has the effect of moving the deep bound down through the body of knowledge). As discussed above, routine  generally operates by retrieving a new line of information from the body of knowledge adjacent the deep bound of a lens and pushes the new line of information into the bottom of the lens. Concurrently with retrieving a new line of information, the shallow and deep bounds of the lens are adjusted and a body of knowledge count is calculated for the new line.","Returning to , after a new line has been pushed into the lens, block  is executed to determine whether the target is still beyond the deep bound for the lens. If so, routine  is again called to scroll further down in the body of knowledge. Routine  is therefore called until such time as the target location in the body of knowledge is no longer beyond the deep bound for the lens. After the target is no longer beyond the deep bound for the lens, routine  terminates.","Returning to block , if the target is not beyond the deep bound, it is assumed that the target is above the shallow bound for the lens. Accordingly, the lens must be scrolled up in the body of knowledge to locate the target, so a scroll up routine  is called to scroll a predetermined amount, here a line, up into the body of knowledge (which also has the effect of moving the shallow bound up through the body of knowledge). Next, block  is executed to determine whether the target is still above the shallow bound of the lens. If so, block  loops back to again call routine  until such time as the target is no longer above the shallow bound for the lens. Once this latter condition occurs, routine  is complete.",{"@attributes":{"id":"P-00189","num":"00189"},"figref":"FIG. 21","b":["250","250","220","14","250","252","253","260","256","253","254","260","258","259","250"]},"Retrieve previous segment routine , which is illustrated in greater detail in , operates in much the same manner as retrieve next segment routine  of FIG. . Routine  initiates a loop in block  that retrieves preceding segments of the body of knowledge until such time as an unfiltered segment is returned, or until the top of the body of knowledge is encountered. If the top of the body of knowledge is encountered (i.e., if the shallow bound points to the top of the body of knowledge), block  returns an indicator to that effect and terminates the routine in block . If, however, the top of the body of knowledge is not encountered, block  is executed to retrieve the previous segment in the body of knowledge. Then, blocks  and  are executed to decrement the shallow bound for the lens by the predetermined segment size, and to increment the new line body of knowledge count by the segment size. Block  then determines whether the retrieved segment is filtered, and if so, passes control to block  to receive an additional segment. If, however, the segment is not filtered, control passes to block  to determine whether a special effect must be applied to the segment, and if so, diverts control to block . Irrespective of whether a special effect is applied to the segment, control is next passed to block  to determine whether a link pointer highlight should be applied to the segment (discussed below), and if so, diverts control to block . Irrespective of whether a highlight is applied to the segment, control is then passed to block  to return the segment and terminate the routine.",{"@attributes":{"id":"P-00191","num":"00191"},"figref":["FIGS. 23 and 24","FIG. 23","FIG. 23"],"b":["420","1","3","422","3","420","422"]},"As shown in , as a user scrolls down through the content of information element E in primary lens , secondary lens  is unchanged, displaying the same information as previously displayed in FIG. . However, when a user has scrolled down in the primary lens to the first line of information element F (which is a level  information element), secondary lens  is also scrolled down a line to maintain the coordination between lenses  and . Any continued scrolling down through information element F would result in scroll operations on both lenses  and  until the first line of information element G is located, whereby this information element would also be filtered from secondary lens .",{"@attributes":{"id":"P-00193","num":"00193"},"figref":["FIG. 25","FIG. 24"],"b":["422","422","1"]},"Link Pointer","Another important aspect of the user interface utilized with abstraction stack  is that of linking together information elements relating to named concepts. This is typically performed through the use of a link pointer, which typically is implemented using a specific link pointer mode for the pointer that is controlled via the mouse or other user interface device. Essentially, movement of a link pointer over an information element directed to a specific named concept results in the highlighting of other displayed information elements matching the named concept. Typically, but not necessarily, link pointer operation is limited to moving a pointer over an information element in the primary lens of a lens set.","For example, in one preferred implementation, cross-over events are generated in response to a user moving a pointer over a particular information element in the primary lens. The cross-over events are handled by the depth manager and placed into a queue under predetermined circumstances. An event manager in the queue issues highlight events to each lens in a lens set that is capable of displaying information elements associated with the named concept to highlight those information elements. In response, each lens processes the highlight event to update its display accordingly.","For example, a handle cross-over routine  that handles a cross-over event is illustrated in greater detail in FIG. . Routine  begins in block  by determining whether the cross-over event is an entry event (where the pointer has moved from a position outside of an information element to a position over the information element) or an exit event (where the pointer has moved off of an information element). If the event is an entry event, control passes to block  to determine whether a cross-over entry event is currently being processed. If it is, routine  terminates. If, however, no event is being processed, control passes to block  to determine whether a single entry cross-over queue is full\u2014that is, whether a pending event is stored in the queue. If so, routine  terminates. If not, the event is added to the cross-over queue in block  prior to terminating routine .","Returning to block , if the event is an exit event, block  is executed to determine whether an exit event is currently being processed. If so, routine  terminates, and if not, control is passed to block  to add the event to the queue if the queue is empty.","The placement of an event on the cross-over queue generates an event entry event that is handled by a handle event entry routine  illustrated in FIG. . Routine  begins in block  by removing the event entry from the queue. Next, block  determines whether the event is a cross-over entry event. If so, block  is executed to set an Entry In Progress flag, indicating that an entry event is currently being processed. It is generally this flag that is tested in block  of FIG. .","Next, block  is executed to create a list of secondary lenses having at least one unfiltered information element associated with the named concept specified in the event (the named concept of the crossed-over information element in the primary lens). Next, block  generates a target offset in the body of knowledge to the named concept in the primary lens. Next, link pointer highlighting of the named concept is enabled in block , e.g., by setting a flag associated with the named concept. Next, block  is executed to send a highlight event to the primary lens and the list of secondary lenses such that each lens updates its display to highlight the information element therein corresponding to the named concept. Next, block  clears the Entry In Progress and Exit In Progress flags, and routine  terminates.","Returning to block , if the entry in the queue is for an exit event, control passes to block  to set an Exit In Progress flag, indicating that an exit event is currently being processed. Block  is then executed to disable all link pointer highlighting, e.g., by clearing all flags associated with named concepts. Next, control is passed to block  to issue the highlight events in the manner described above, prior to clearing the In Progress flags in block  and terminating the routine.","A highlight event handling routine  is illustrated in greater detail in FIG. . Routine  begins in block  by determining whether the target location in the body of knowledge that is specified in the event is between the shallow and deep bounds for the lens. If so, no scrolling of the lens is required, so the deep bound for the lens is set to the value of the shallow bound in block , and fill lens routine  is called to refresh the contents of the lens, after which routine  is complete. By setting the deep bound to the shallow bound, the deep and shallow bounds for the lens will be the same after the highlight event as they were before the event was processed. However, after the fill routine, the highlight status of the named concept will either be set or cleared based upon the flag set therefor in routine  discussed above with reference to  (see, e.g., blocks - of routine  in , and blocks - of routine  in FIG. ).","Returning to block , if the target is not between the shallow and deep bounds for the lens, update contents routine  of  is called to scroll the lens as necessary to display the target location in the body of knowledge. Concurrent with this scrolling, the contents of the lens are refreshed to reflect the highlighted status thereof, as discussed above. Routine  is then complete. It should be appreciated that, in the alternative, no coordinated scrolling may be performed in response to a cross-over event, and thus, it may not be necessary to separately call the update contents routine to update a lens to display information elements related to the named concept but not currently displayed in the lens.","A named concept may be associated with only one information element, so that only one element is highlighted in any given lens. In the alternative, multiple information elements may be associated with a named concept, so that multiple information elements may be highlighted at any given time in a lens. In this latter instance, it should be appreciated that the determination of a target location places the target location specifically on the information element that initiated the event.",{"@attributes":{"id":"P-00205","num":"00205"},"figref":"FIG. 29","b":["420","422","23","430","420","422","420","420","422","23"]},"Additional Controls and Manipulation Operations","Additional user interface controls and operations may be implemented in an abstraction stack consistent with the invention. A number of these controls and operations are discussed below with reference to . The implementation of these controls and features in a graphical user interface environment would be similar in many respects to conventional GUI controls and input sequences. As a result, the implementation of these controls and features would be well within the skill of the ordinary artisan, and thus, no further detail regarding the same is necessary for a full understanding of the invention.","It is contemplated that a lens may include any number of conventional GUI controls. For example, a lens may include various conventional GUI window controls such as a close button, a minimize button, a maximize button, a title bar, resizing handles, scroll bars, drop-down menus, toolbar buttons, etc.",{"@attributes":{"id":"P-00209","num":"00209"},"figref":"FIG. 30","b":["422","435"]},"A lens may be minimized into a minor lens through any number of user interface input, e.g., through clicking a minimize or close button on the lens. Selecting a minor lens (e.g., through single or double-clicking on the minor lens) typically results in opening the lens to a primary or secondary lens representation. Selecting a minor lens may also cause other primary and\/or secondary lenses in a lens set to close.","Minor lenses may be used, for example, by an author of a body of knowledge to set up a number of predefined lenses and filter configurations that the author believes would be useful to a user of the abstraction stack. As a result, a user would be able to open the predefined lenses as desired to view different representations of the body of knowledge without specifically determining how to set up such representations.","A user may also be permitted to select a binder band (e.g., through single or double-clicking on the binder band) to open any adjacent minor lenses thereto, as well as optionally close any other lenses in the lens set. If one minor lens is opened, that lens would then become the primary lens. If more than one minor lens is opened, the lens closest to the former primary lens would then become the primary lens. In addition, if no minor lenses are adjacent a selected binder band, adjacent intersection points may be selected, and if no intersection points are adjacent a selected binder band, a help topic may be opened to instruct the user on the proper use of binder bands. In fact, a separate abstraction stack directed to how one uses and navigates in an abstraction stack may be opened, with the information relating to binder bands opened and highlighted.","Lenses may also be maximized (e.g., through selection of a maximize button thereon or double-clicking on the title bar thereof), resulting in the display being switched to a prime lens view such as is illustrated in FIG. . In a prime lens view, the contextual relationship of the information displayed in a particular lens is temporarily hidden from the user by displaying the lens in a maximized (prime lens) representation with the remainder of the abstraction stack collapsed into a collapsed representation. For example,  illustrates a prime lens  representing a maximized representation of lens , with abstraction stack  collapsed into a collapsed representation .","A collapsed stack representation typically includes an arbitrarily small representation that illustrates a representation of each focal plane along a depth vector, as well as the compass handles at each end of the depth vector and any other compass handles linked to the stack. Any created lenses, with the exception of the prime lens when in the prime lens view, are represented by arbitrarily small minor lenses. In the prime lens view, the prime lens is displayed at approximately the same relative location on the depth vector as its associated lens in the normal view. Typically, user interaction with a collapsed abstraction stack is limited to manipulation using a compass handle, e.g., through selection and\/or drag operations. In the alternative, the entire collapsed representation may be operated upon as a single object, or the individual components thereof may be individually manipulated.","An abstraction stack application may utilize more than one depth vector, whereby in effect multiple abstraction stacks may be displayed and accessed concurrently in the same display. Multiple abstraction stacks may also be joined to one another through a separate abstraction stack that serves as a mechanism for navigating between abstraction stacks.","The multiple abstraction stacks may be directed to separate bodies of knowledge. For example, as discussed above, a help system for an abstraction stack viewer or browser application such as described herein may be implemented itself as an abstraction stack, with the body of knowledge represented thereby related to the use and navigation through an abstraction stack.","Multiple abstraction stacks may also be directed to the same body of knowledge, but provide separate manners of viewing the information contained therein. For example, different abstraction schemes may stratify a body of knowledge into different classes of abstraction levels, e.g., with one abstraction scheme stratifying a body of knowledge into levels of abstraction based upon levels of comprehension (e.g., beginner, expert, etc.), with another abstraction scheme stratifying the body of knowledge into levels of abstraction based upon document components (e.g., body text, footnotes, headings, index terms, glossary terms, examples, figures, audio clips, video clips, etc.). Multiple abstraction level classifications may be implemented, for example, by permitting multiple level identification fields for each information element in a body of knowledge (e.g., by using separate \u201cIvla\u201d and \u201cIvlb\u201d fields in the \u201c<infoel>\u201d tag, whereby one abstraction stack would only read the \u201cIvla\u201d field and the other would only read the \u201cIvlb\u201d field).","The different schemes may have separate stacks, or a single filter may be configured to reflect aspects of multiple schemes. Additional tags may also be used to indicate how multiple abstraction stacks are to be linked to one another, e.g., using a tag that links together levels from different classes of abstraction levels. In the alternative, an arbitrary coupling between abstraction stacks may be provided simply to reflect that the abstraction stacks are related in some specified manner.","User interface controls may be used to represent and link together multiple abstraction stacks to be viewed on the same computer display. For example,  illustrates the use of additional compass handles, e.g., compass handles  and , that can extend from a particular focal plane along the depth vector to link together abstraction stack  with additional abstraction stacks. Strata bands, e.g., bands  and , may be used to couple the compass handles to the abstraction stack , although unlinked abstraction stacks may simply be represented by a single compass handle unconnected to any other object.","A compass handle utilized in this manner may be used to represent a fully minimized abstraction stack. As a result, selection of such a compass handle (e.g., through single or double-clicking) may expand the minimized stack into a collapsed stack representation (similar to representation  illustrated in FIG. ).","Typically, abstraction stacks linked to one another are oriented with parallel depth vectors. If multiple abstraction stacks are displayed but are not linked together, it is still desirable if possible to orient all stacks in parallel orientations. Thus, if a minimized abstraction stack is expanded into a collapsed representation, the depth vector thereof may be oriented according to a mode or mean average of the orientations of the currently-open stacks.","Selection of a compass handle on a collapsed abstraction stack representation typically results in expansion of the abstraction stack to an expanded representation such as representation  illustrated in FIG. . Expansion of a stack may also result in the opening of default lenses. As an example, it may be desirable to open the two depth vector lenses closest to a selected compass handle and make the lens closest to the compass handle the primary lens. If no lenses were created for the abstraction stack, two lenses with default filter configurations may be created and opened (e.g., lenses that respectively pass the abstraction levels represented by the closest and next-to-closest intersection points).","Selection of a compass handle (e.g., through single or double-clicking thereon) on an expanded abstraction stack may be used to minimize the entire abstraction stack into the compass handle. In the alternative, selection of a compass handle in a similar or different manner may collapse the abstraction stack into a collapsed representation.","It is also contemplated that a compass handle may be manipulated through various drag operations (e.g., by orienting the pointer over the handle, depressing a button and moving the pointer with the button depressed).","For example, for an expanded stack, dragging a compass handle in one mode (e.g., with no control keys depressed) may move the entire abstraction stack around the display without modifying the orientation or size thereof. Dragging a compass handle in another mode (e.g., with one control key or combination depressed) may enable that compass handle to be moved with the other compass handle anchored such that the orientation and length of the depth vector may be modified. Dragging a compass handle in yet another mode (e.g., with another control key or combination depressed) may enable that compass handle to be moved only along the depth vector to in effect resize the abstraction stack without modifying the orientation thereof. Yet another mode may enable the depth vector to pivot about the other compass handle to permit reorientation without modifying the size. Dragging a compass handle on a collapsed or minimized stack may simply move the entire collapsed or minimized stack around in the display. Alternatively, similar effects may be used to alter the viewpoint for the abstraction stack similar to the field of view concept in VRML.","When in a prime lens view, dragging a compass handle may move a collapsed abstraction stack around relative to the prime lens. Moreover, if the stack is drug off of the prime lens, the display may return to normal view with the stack expanded and the formerly-prime lens set as the primary lens, with an additional lens either at a higher or lower level of abstraction opened as a secondary lens.","Individual lenses in an expanded abstraction stack may also be manipulated by a user as desired. For example, lenses may be selected to control which lens is designated the primary lens for receiving user input. In addition, movement and\/or resizing of lenses may be performed. Movement or resizing of a lens in a lens set typically modifies only that lens, although group movement and resizing operations may also be supported for a lens set. However, even when a lens is resized or moved, the location of the lens along the depth vector relative to other lenses is preferably maintained so that the contextual relationship therebetween is also maintained. The position along the depth vector for a lens may be varied, but preferably not in such a manner that a lens is permitted to switch relative positions with another lens on the stack.","Movement or resizing of a lens may be performed in a number of manners consistent with the invention. For example, similar to conventional GUI windows, a lens may be moved by dragging its title bar or by using arrow keys when in a predetermined mode. Resizing of a lens typically may be performed using conventional resizing handles (e.g., by dragging the boundaries of the lens).","Typically, movement of a lens is restricted to movement within the plane of the lens\u2014that is, a plane that is orthogonal to and disposed at a fixed depth along the abstraction axis. A separate movement operation to modify the depth of a lens may also be provided consistent with the invention, preferably with any such movement bounded by the depth of adjacent objects along the depth vector. In some applications, fully three-dimensional movement, again preferably bounded by adjacent objects, may also be permitted consistent with the invention. An attempt to move beyond the depth of an adjacent object may not be permitted, or in some applications, may result in movement of the adjacent object along the depth vector as well, so long as the relative depth between the objects is maintained. In addition, in some applications it may be permissible to modify the relative depths of lenses along the depth vector, particularly if the filter configurations therefor have been modified since initial placement of the lenses.","Various alternate movement mechanisms may also be used in addition to and\/or in lieu of conventional mechanisms. One suitable manner of moving or resizing a lens is through collision of pointer with a boundary of the lens when the pointer is in a collision resizing or movement manipulation mode. With this feature, which is the subject of the aforementioned incorporated application entitled \u201cCOMPUTER SYSTEM AND METHOD OF MANIPULATING A WINDOW ON A COMPUTER DISPLAY THROUGH COLLISION WITH A POINTER\u201d, movement of a pointer along a first vector moves a boundary segment of a lens along a second vector if it is determined that the first vector intersects that boundary segment. In a movement mode, the boundary segment is moved in conjunction with all other boundary segments to effectively move the lens. In a resizing mode, other boundary segments remain fixed to effectively resize the lens. The pointer may be defined to have a single position from which the first vector extends, or in the alternative, a proximity range may be defined around the pointer, with a boundary thereof used to test for collisions with a boundary segment of a lens.","This type of pointer manipulation, which is also referred to as a \u201cbumper-jumper\u201d operation, typically results in the appearance of a pointer \u201cbumping\u201d or \u201cpushing\u201d a lens as the pointer collides with the lens. The mode can be selectively enabled or disabled, including a temporary enabling or disabling operation (e.g., by holding down a control key during pointer movement) that permits a user to quickly and selectively \u201cbump\u201d or \u201cjump\u201d over any given boundary as desired. In addition, collision may be selectively detected only when contacting a boundary segment from outside a lens, and\/or only when contacting a boundary segment while within the boundary of a lens.","As an example,  illustrates a movement operation performed on abstraction stack  when in a collision manipulation mode. A pair of lenses ,  are illustrated as partially overlapping so that a portion of lens  is hidden behind lens . If a user wished to view the hidden information in lens , one manner of doing so is to collide or bump pointer  against the boundary of lens  while in a collision movement manipulation mode. As shown in , if pointer  is moved along a vector  to the position shown at \u2032, lens  is bumped to the position shown at \u2032, thereby enabling a user to view the hidden information.","In addition, as can be seen from , in order to permit lenses to be moved in the three dimensional space within the plane that is perpendicular to the depth vector, it may be desirable to partition the depth vector into segments extending between the centers of each object disposed thereon, and joined together at a plurality of points (e.g., points  and  on depth vector ). Thus, a depth vector need not be purely linear, but may include a plurality of segments that together extend in a predominant direction. As such, each depth vector lens along the depth vector may still be considered to be centered on the depth vector, with the depth vector being modified as necessary to permit translational movement of lenses disposed thereon. In the alternative, lenses and other objects may have stored therewith specific offsets or separation vectors defining the separation of the objects from the depth vector along the planes thereof to permit rendering each lens in an appropriate position along the abstraction stack. Moreover, as discussed above, it is not necessary for the depth vector to even be displayed.","Another suitable manner of moving or resizing a lens that may be used in lieu of or in conjunction with collision manipulation is that of proximity manipulation, such as is described in detail in the aforementioned incorporated application entitled \u201cCOMPUTER SYSTEM AND METHOD OF MANIPULATING MULTIPLE GRAPHICAL USER INTERFACE COMPONENTS ON A COMPUTER DISPLAY WITH A PROXIMITY POINTER\u201d. When in a proximity manipulation mode, lenses within a predetermined proximity range disposed around a proximity pointer may be resized or moved as a group in response to user manipulation of the pointer, thereby permitting faster manipulation of multiple objects at once. The proximity range may be limited to a plane perpendicular to the depth vector, or may in the alternative include a depth factor related to a relative distance along the depth vector.","As an example,  illustrates a movement operation performed on abstraction stack  when in a proximity pointer mode. Three lenses , , and  are illustrated as partially overlapping one another so that portions of both lenses  and  are hidden from a user. If a user wishes to view the hidden information in lens , for example, one manner of doing so is to place pointer  in a proximity mode and orienting the pointer such that at least a portion of each window  and  is disposed within a proximity range  defined around the pointer. As shown in , if pointer  is moved along a vector  to the position shown at \u2032, lenses  and  are moved as a group into the positions shown at \u2032 and \u2032, respectively, thereby enabling a user to view the hidden information in lens .","It should be appreciated that other variations disclosed in these aforementioned applications may also be implemented consistent with the invention. In addition, other manners of manipulating the lenses will be apparent to one of ordinary skill in the art. For example, given that a body of knowledge may be represented in a tag-delimited format such as HTML, it should also be appreciated that hypertext links and the like may be embedded in the body of knowledge such that a user can navigate to predetermined locations in the same or different lenses specified in the embedded links simply by selecting those links. Links may also be associated with particular locations in the body of knowledge, so that each lens in a lens set is scrolled in a coordinated fashion to display its particular representation of that location in the body of knowledge. Links may also be utilized to create or open specific lenses if such lenses do not currently exist in the abstraction stack. Other user-coordinated operations may also be performed on the abstraction stack consistent with the invention.","It should further be appreciated that a number of user interface controls, objects, mechanisms, and techniques described herein may also have applicability either alone or in combination in other computer software user interfaces independent of an abstraction stack. For example, objects and techniques such as filtering, binder bands, proximity pointers, bumper-jumper pointers, link pointers, etc. may have other uses such as in the basic interface for an operating system, or in the user interface for practically any type of computer software application.","In addition to providing a unique and useful manner of viewing information from a body of knowledge, embodiments of the invention may also provide a unique manner of authoring a body of knowledge using a body of knowledge authoring process consistent with the invention. This process relies in part on a unique authoring tool that operates in much the same manner as an abstraction stack, but with the additional ability to create and modify the information in a body of knowledge through a similar type of multi-level interface.","One suitable authoring process consistent with the invention is illustrated by abstraction stack authoring process  in FIG. . Generally, this authoring process occupies three main conceptual operations. Initially, the particular audiences that will be addressed by a body of knowledge are determined (block ). Next, the infrastructure of a suitable abstraction stack, having levels of abstraction defined to enable presentation of the body of knowledge in different formats suitable for the different audiences, is built (block ). Then, the material from the body of knowledge is authored by selectively inputting information into the infrastructure defined by the abstraction stack (block ).","As to block , determination of the audiences to address determines how a body of knowledge will ultimately be presented to readers. As discussed above, an abstraction stack may be considered as addressing audiences with multiple levels of ability and interest. The audiences in some instances are made up of separate individuals. In other instances, a single individual's ability and interest can vary over time so that a single individual represents multiple audiences. Therefore, an author wishing to create a body of knowledge first decides which audiences to address so that a suitable stack can be built. Within the context of that stack the author can then author material appropriate for the selected audiences.","As to blocks  and , an author typically utilizes an authoring tool (e.g., as identified by block  in ) to create the infrastructure of an abstraction stack and receive information into that infrastructure. Authoring tool  operates in much the same manner as abstraction stack application , and may utilize nearly all of the same user interface components and processes described above, albeit with several additional features and modifications such as the ability to add, delete and\/or modify the information displayed in an abstraction stack lens. Generally, it should be appreciated that while abstraction stack application  is a browser- or viewer-type application, and authoring tool  is an editor- or authoring-type application, both types of applications may utilize many of the same underlying features, structures, routines and processes (e.g., many of the operations provided in depth manager  and flow manager ). As it is typically necessary for a user to be able to view and navigate through an abstraction stack during authoring of a body of knowledge using authoring tool , many if not all of the features described above for abstraction stack application  may be useful in authoring tool . Therefore, the reader is directed to the discussion of abstraction stack application  for an understanding of the basic operation of authoring tool .","To create a new stack with authoring tool , a routine similar to initialize stack routine  of  may be executed, e.g., in response to a \u201cnew stack\u201d request through a menu or toolbar button selection, or in other manners known in the art. When a new stack is created, the authoring tool's depth manager initializes a stack with a null body of knowledge that initially has no designated abstraction levels. Accordingly, for authoring tool , it may be desirable to replace block  of routine  to skip retrieval of an existing body of knowledge and instead initialize an empty data structure. In addition, it may be desirable to modify block  to first test for the presence of any abstraction levels so that no intersection points are created if no abstraction levels exist. In the alternative, it may be desirable for block  to open a dialog box that asks the author for the abstraction levels to be addressed in the body of knowledge, and then create intersection points for the abstraction levels created by the author.","Creation of a new stack may include retrieval of existing information and\/or retrieval of existing levels of abstraction. For example, it may be desirable to retrieve existing information prior to creation of any levels of abstraction, whereby all of the information would essentially be unassociated. In that instance, block  of routine  could be modified to retrieve a document or file of existing information and parse the information into information elements that lack any association with a particular level of abstraction (i.e., having null level identifiers). Then, upon creation of the stack, a default editing lens could be opened with a null level identifier so that the lens displays all of the as yet unassociated information in the body of knowledge.","As another example, it may be desirable to retrieve existing levels of abstraction, with or without also retrieving existing information. This would in effect provide a template function, particularly when it is known that particular abstraction levels are best suited for a particular type of body of knowledge. As such, block  of routine may be modified to retrieve the levels of abstraction from a template or other source.","Moreover, similar to other types of editors, it may be desirable to load an existing body of knowledge into the authoring tool for modification and\/or input of new information into the body of knowledge.","Assuming the a new abstraction stack is created without retrieving any existing information or abstraction levels, the abstraction stack would be represented in the manner shown by abstraction stack  of FIG. . Abstraction stack  typically looks similar to abstraction stack  of , except that it has no intersection points. Instead, only a pair of compass handles  and  are joined by binder bands  (including individual bands ).","Once an empty abstraction stack has been created, an author is then permitted to create abstraction levels in a number of manners consistent with the invention. For example, as discussed above, a single editing lens may optionally be opened and initially associated with a null abstraction level during creation of the abstraction stack. Then, through an interface provided in the lens, the abstraction levels may be created. Alternatively, a dialog box may be opened in response to user input (e.g., through a menu for the overall authoring tool) to permit editing of abstraction levels.","In addition, an author may be permitted to open a new editing lens (or user input element), e.g., through clicking on a binder band while in an insert mode to indicate placement of an intersection point. The authoring tool may then respond to the click by opening a lens initialized for input of information at a null abstraction level appropriate for all readers. For example,  illustrates the creation of an empty lens  at a midpoint between compass lenses  and . The relative depth of lens  may be defined at a default depth (e.g., the midpoint), or at the relative location specified by the pointer during the click operation.",{"@attributes":{"id":"P-00249","num":"00249"},"figref":"FIG. 39","b":["620","620","50","630","640","642","50","620","645","646","648","645","620","625","645"]},"Menu bar  includes conventional menu operations, e.g., for file operations, document authoring operations and help operations (e.g., as found in many conventional word processors and editors). Menu bar , however, also includes \u201clevels\u201d and \u201cconcepts\u201d menus that define how information input into the lens is stored in the body of knowledge. The drop-down for the \u201clevels\u201d menu is illustrated at , including a \u201cset lens levels\u201d selection , an \u201cedit levels\u201d selection , \u201ca \u201cselect current level\u201d selection  and a list of defined levels  that can be selected via the drop-down menu to modify the current level for the lens.","Selection  typically opens a dialog box that permits lens  to be associated with one or more abstraction levels. Any number of known manners of selecting multiple items from a list of potential items may be used to select levels consistent with the invention. For example, a conventional list box or group of check boxes may be used consistent with the invention. In addition, modification of the list of abstraction levels associated with lens  via selection  typically modifies the list displayed at .","In this exemplary implementation, an abstraction level includes a level parameter that may be set to null or to one or more real numbers within a predetermined range (e.g., \u221210.00 . . . 10.00). Note that zero, which is less than one and greater than minus one, is not the same as null, which cannot be compared to any number. Through the use of the level parameter, the hierarchical relationship of the various levels defined in a body of knowledge may be established. To this extent, alternate systems of establishing a hierarchical relationship, e.g., through a sorted list, alphanumeric information, keys, integers, etc., may be used to delimit and distinguish levels of abstraction consistent with the invention.","Each abstraction level may also include a characterization or description, which is principally a convenience for the author and reader. For example, the author of a body of knowledge on professional basketball might characterize level\u2014 as \u201cfor general interest readers,\u201d level  as \u201cfor people with an interest in organized sports,\u201d level  as \u201cfor fans of professional basketball,\u201d and level  as \u201cfor people in the business of professional basketball.\u201d As another example, for the body of knowledge of Table I, level  may be defined as a \u201cgeneral interest\u2014basic\u201d level, with level  defined as a \u201cgeneral interest\u2014advanced\u201d level and level  defined as a \u201cscientist\u201d level. As noted above in conjunction with the description of configure filter dialog box  of , the characterization or description of an abstraction level may be used as a level identifier that can be selected by a user when configuring a filter.","Selection  opens a dialog box that enables author creation and modification of abstraction levels for the body of knowledge. Typically, capabilities for adding, editing and deleting abstraction levels is provided. Editing operations may include, for example, changing the level parameter and\/or characterization or description associated therewith.","Selection  typically opens a dialog box that enables an author to select a current level for which to enter information into the body of knowledge. A similar operation may also be performed more quickly through an optional list . In either manner, selection of a new current level controls how information elements are associated with particular levels of abstraction. For example, if no information has been selected when a new level is selected, new information elements created in the lens may be assigned to the newly selected level. If existing information is selected, that information may be assigned to the selected level. Other user interface mechanisms to associate information with a level may also be used in the alternative. Moreover, it should be appreciated that lenses may be limited to receive input from one level of abstraction only, whereby selection  and list  could be omitted.","Each editing lens also includes a filter configuration similar to a lens in abstraction stack . In the preferred implementation, the editing lens' filter configuration always passes information for the level or levels associated with the lens. At the author's discretion, it may also pass information at other levels, and may apply focus effects to any levels as desired. A dialog box similar to dialog box  of  may be used to set the filter configuration for an editing lens. Typically, a new lens is defined with a filter configuration that passes (without a focus effect) only the levels associated with the lens.","Typically, but not necessarily, whenever a first new lens is opened in the abstraction stack, an author will first create one or more abstraction levels for the body of knowledge, e.g., using the dialog box accessed via selection . In the alternative, an abstraction level could be created by clicking on a binder band when in a predetermined mode. In response to such user selection, a level may be created having a level parameter set to the relative position of the pointer along the depth vector, or set to the midpoint between the opposing adjacent objects (intersection points, lenses, and\/or compass lenses) existing along the depth vector relative to the position of the click. Moreover, it may be desirable to open a dialog box that enables a user to edit the level, e.g., to input a characterization or description thereof.","In conjunction with creating any abstraction levels, authoring tool  also preferably creates intersection points corresponding to the new abstraction levels, and refreshes the abstraction stack to display those intersection points. Intersection points may be evenly dispersed along the depth of the depth vector, or in the alternative, may be located depending upon the relative location of the level parameter therefor within the acceptable range of levels defined for the body of knowledge. Intersection points relating to a null abstraction level may be located at a midpoint or any other arbitrary location along the depth vector, or may be omitted. In the preferred implementation the intersection point for the null abstraction level has a unique graphical representation distinguishing the intersection point from those of other abstraction levels.","Once at least a portion of the abstraction levels for a body of knowledge have been defined, it is often preferable to open multiple lenses associated with different levels of abstraction so that a body of knowledge may be generated while viewing the overall hierarchical relationship of information elements within the body of knowledge. Creation of additional lenses may be performed, for example, as shown in  by clicking on binder bands in a predetermined mode (e.g., by orienting pointer  on a binder band  and depressing the mouse button). , for example, illustrates two additional editing lenses  and  that were created via selection of the binder bands on each side of lens editing .","Typically, the levels associated with adjoining intersection points if any in an abstraction stack will affect initialization of a new editing lens. When there is only one adjoining intersection point, for example, the initial level for the new lens is set as follows: if the adjoining intersection point's level is null, the new lens level is also initially null. If the adjoining intersection point's level is non-null, the new lens level is initially set mid-way between the non-null level and the level range bound associated with the compass handle at the end of a directed line segment extending from the non-null intersection point through the click-point. When there are two adjoining intersection points, the level for the new lens is determined as follows: If both levels are non-null, the new lens' level is set mid-way between the adjoining levels. If no mid-point is available, the author is asked to choose between the adjoining levels. If one adjoining intersection point has a non-null level and the other has a null level, the null level is ignored and the initial level for the new lens is set as though there were only one adjoining intersection point.","Once a lens has been opened and optionally configured as outlined above, the author can then either begin entering information into the lens or close the lens. When the lens closes, it is represented on the stack as an insertion point as shown in FIG. .","Once the abstraction levels are defined and intersection points established, an author may open one or more lenses and begin to input information. Information input through a lens is associated with the lens' current abstraction level (if multiple levels are assigned to a lens) or with the lenses sole abstraction level (if one level is assigned to a lens). The information input into a particular lens is designated as appropriate for the audience for the abstraction level. Moreover, it may be possible to associate an information element with one or more named concepts, as discussed below.","Information may be added to a body of knowledge using an add information element routine  as illustrated in FIG. . Routine  may be called in response to a number of user interactions. For example, a new information element may be specifically opened by a user. In the alternative, new information elements may be added automatically in response to particular activities.","As another example, information elements could be partitioned via hard returns, whereby routine  could be initiated each instance of an enter key depression by a user when in an editing mode. In addition, attempts to insert or paste information into a body of knowledge may call routine  to build an information element for the information to be inserted or pasted. Other manners will be apparent to one of ordinary skill in the art.","It is assumed that routine  is executed by an editing lens that has received new information for which it is desired to input into the body of knowledge. Routine  begins in block  by inserting a new information element in the body of knowledge data structure, in the general manner outlined above.","Next, the level identifier is set to the current level established for the lens\u2014either a single level or one of a plurality or range of levels in the set of levels established for the lens\u2014in block . Selection of one of a plurality of levels may be performed, for example, via menu selection  or list . In the alternative, specific control key combinations may be used to switch the current level, or even specific formatting can be used during entry of information to designate that information for a particular level (e.g., underlined for one level and bolded for another level, etc.).","Cutting, copying and pasting operations are preferably supported by authoring tool . Cutting and copying, however, perform different underlying operations on a body of knowledge. In particular, a cutting operation on a lens typically removes the information from an information element, and may even remove the underlying information element from the body of knowledge data structure. In either instance, any level designations for the cut information are discarded. However, a copying operation typically copies the information from an information element but does not affect the information element itself, such that the level designations for the underlying information element or elements are unchanged.","A primary paste operation typically creates a new information element in the target editing lens, pasting clipboard information into the new information element and designating the information as appropriate for the editing lens' current abstraction level. Thus, there typically is no need for block  of routine  to separately handle the designation of levels for paste operations. In addition, it may be desirable to include a secondary paste operation that enables new information to be pasted into an existing information element, whereby only a modification to the existing information element would be needed, and routine  would not be required.","The authoring tool may also automatically associate concept identifiers with information elements when they are copied between lenses. Conventional versioning algorithms can be used to minimize the storage required for maintaining multiple abstractions of a named concept.","As an alternative to copying and pasting, the author can select information and designate it as a named concept. Selection is accomplished in any number of manners, e.g., using a keystroke combination, specific formatting or a menu selection (such as through the \u201cconcepts\u201d menu on menu bar ) to designate a current named concept. Information input in other lenses while the named concept remains current may be associated with the same concept identifier. The information may also be selection-highlighted in the selection lens as long as the named concept remains current. Information input in the other lenses may be link-pointer highlighted as it is input. It remains link-pointer highlighted as long as the named concept remains current. The named concept may also remain current until the author deselects the information in a conventional manner.","Returning to , block  next determines whether any information was passed from another editing lens for pasting into the new information element. If so, block  is called to store the information to be pasted in the new information element. Next, block  determines whether that information is associated with a particular concept\u2014namely whether the information to be pasted came from an information element associated with a named concept. If so, the concept identifier is set to that of the information to be pasted in block , and routine  is complete. If not, control is passed to block  to determine whether the information to paste forms only a portion of an information element in the lens from which the information was cut or copied. If so, a new information element is embedded into the information element from which the information was retrieved, in block . Then, block  sets the concept identifier for the new information element in the current lens as well as that of the information element cut or copied from is set to a new concept in block  and the routine terminates. Returning to block , if the information to paste forms all of an information element in the other lens, control is passed directly to block .","The new named concept may be set to a default or generated value, or may be set to null. Moreover, in some applications a dialog box may be opened prompting the user to input a new named concept or select from a list of available named concepts. It should be appreciated, however, that no user selection of a named concept may be required as a user may not need to know the actual names, descriptions or identifiers of concepts so long as appropriate information is linked as described herein.","Returning to block , if the information (if any) to insert is not from another lens, control passes to block  to determine whether a specific named concept is set for the current editing lens. If so, block  sets the concept identifier to that of the lens, and if not, block  sets the concept identifier to null. Regardless, however, control passes from blocks  and  to associate the information to be pasted with the current lens. As such, subsequent paste attempts with the same information will be handled as begin associated with another lens through the sequence of instructions outlined at block . Next, routine  is then complete, with the level and concept identifiers set to the extent possible based upon all known information in the system. A concept may be set for a lens in any number of user actions known in the art, e.g., through a list or menu selection (such as through the \u201cconcepts\u201d menu on menu bar ), through pointer selection of information, or in any manner described above with regard to maintaining levels and level identifiers for a body of knowledge.","It should also be appreciated that, concurrently with receiving input into an editing lens, authoring tool  preferably automatically updates the contents of other open lenses based upon the filter configurations therefor. This may be performed, for example, by issuing update events to each open editing lens after creation or modification of an information element to in effect execute either of the fill lens or update contents routines for each open editing lens, in the general manner described above.","Consequently, when using the above-identified authoring tool, a user is able to relatively easily construct a body of knowledge data structure via the concurrent input of information to more than one editing lens. Moreover, by using suitable filter criteria, the contextual relationship of new and existing information can be visualized both during and after creating of a body of knowledge\u2014even if an author is not permitted to edit information displayed from the body of knowledge as a non-editable element respective to a given editing lens. For example, a lens may display information elements from first and second levels (whether in separate or similar formatting), but only allow editing to be performed for information elements associated with the first level. Nonetheless, authoring is facilitated because the contextual relationship of information from the different levels is concurrently presented.","It should also be appreciated that various conventional editing functions may be utilized to create a custom body of knowledge consistent with the invention, e.g., to delete or modify information elements, to format information within the elements, to insert objects (e.g., multimedia or executable objects), files or documents, etc. Moreover, while the above-described authoring tool builds a body of knowledge directly into a data structure such as is illustrated in , it should be appreciated that an authoring tool may build and manipulate a tag-delimited text file and\/or perform conversion between either of the formats, consistent with the invention.","Various additional modifications may be made to the embodiments described herein without departing from the spirit and scope of the invention. Therefore, the invention lies solely in the claims hereinafter appended."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING","p":[{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 2","b":"1"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 3","b":"2"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 4","b":"2"},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 5","b":"2"},{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 6","b":"5"},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 7","b":"6"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 8","b":"5"},{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 9","b":"5"},{"@attributes":{"id":"P-00030","num":"00030"},"figref":"FIG. 10","b":"9"},{"@attributes":{"id":"P-00031","num":"00031"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"P-00032","num":"00032"},"figref":"FIG. 12","b":"9"},{"@attributes":{"id":"P-00033","num":"00033"},"figref":"FIG. 13","b":"4"},{"@attributes":{"id":"P-00034","num":"00034"},"figref":"FIG. 14","b":"13"},{"@attributes":{"id":"P-00035","num":"00035"},"figref":"FIG. 15","b":"14"},{"@attributes":{"id":"P-00036","num":"00036"},"figref":["FIG. 16","FIG. 8"]},{"@attributes":{"id":"P-00037","num":"00037"},"figref":["FIG. 17","FIG. 16"]},{"@attributes":{"id":"P-00038","num":"00038"},"figref":["FIG. 18","FIG. 17"]},{"@attributes":{"id":"P-00039","num":"00039"},"figref":"FIG. 19","b":"5"},{"@attributes":{"id":"P-00040","num":"00040"},"figref":"FIG. 20","b":"4"},{"@attributes":{"id":"P-00041","num":"00041"},"figref":"FIG. 21","b":"20"},{"@attributes":{"id":"P-00042","num":"00042"},"figref":"FIG. 22","b":"21"},{"@attributes":{"id":"P-00043","num":"00043"},"figref":"FIG. 23"},{"@attributes":{"id":"P-00044","num":"00044"},"figref":["FIG. 24","FIG. 23"]},{"@attributes":{"id":"P-00045","num":"00045"},"figref":["FIG. 25","FIG. 23"]},{"@attributes":{"id":"P-00046","num":"00046"},"figref":"FIG. 26","b":"5"},{"@attributes":{"id":"P-00047","num":"00047"},"figref":"FIG. 27"},{"@attributes":{"id":"P-00048","num":"00048"},"figref":"FIG. 28","b":"4"},{"@attributes":{"id":"P-00049","num":"00049"},"figref":["FIG. 29","FIG. 23"]},{"@attributes":{"id":"P-00050","num":"00050"},"figref":["FIG. 30","FIG. 17"]},{"@attributes":{"id":"P-00051","num":"00051"},"figref":["FIG. 31","FIG. 30"]},{"@attributes":{"id":"P-00052","num":"00052"},"figref":["FIG. 32","FIG. 17"]},{"@attributes":{"id":"P-00053","num":"00053"},"figref":["FIG. 33","FIG. 32"]},{"@attributes":{"id":"P-00054","num":"00054"},"figref":["FIG. 34","FIG. 17"]},{"@attributes":{"id":"P-00055","num":"00055"},"figref":["FIG. 35","FIG. 34"]},{"@attributes":{"id":"P-00056","num":"00056"},"figref":"FIG. 36"},{"@attributes":{"id":"P-00057","num":"00057"},"figref":"FIG. 37"},{"@attributes":{"id":"P-00058","num":"00058"},"figref":["FIG. 38","FIG. 37"]},{"@attributes":{"id":"P-00059","num":"00059"},"figref":"FIG. 39","b":"38"},{"@attributes":{"id":"P-00060","num":"00060"},"figref":["FIG. 40","FIG. 38"]},{"@attributes":{"id":"P-00061","num":"00061"},"figref":"FIG. 41"}]},"DETDESC":[{},{}]}
