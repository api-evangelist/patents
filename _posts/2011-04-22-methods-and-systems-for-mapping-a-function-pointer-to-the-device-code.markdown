---
title: Methods and systems for mapping a function pointer to the device code
abstract: Methods for mapping a function pointer to the device code are presented. In one embodiment, a method includes identifying a function which is executable by processing devices. The method includes generating codes including a first code corresponds to a first processing device and a second code corresponds to a second processing device. The second processing device is architecturally different from the first processing device. The method further includes storing the second code in a byte string such that the second code is retrievable if the function will be executed by the second processing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949777&OS=08949777&RS=08949777
owner: Intel Corporation
number: 08949777
owner_city: Santa Clara
owner_country: US
publication_date: 20110422
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Embodiments of the invention relate to the field of code compilation, in particular, to compiling for execution on heterogeneous devices.","Modern computer systems can have a wide range and a variety of configurations. One important component of a computer system is the processor, also referred to as the central processing unit (CPU). The processor executes instructions from a software program, a process referred to as \u201crunning\u201d the program. Although typically all processors perform this basic task, a wide variety of different processing devices (e.g., graphics processors) are available from a number of different manufacturers. These different processing devices, especially those from different manufacturers, have different internal designs, also referred to as the processor \u201carchitecture\u201d, and thus operate in different ways. Although the results from running a program on two different processing devices should be the same, the way in which the processing devices obtain the result, as well as its speed, typically differ.","The development of applications to be executed on heterogeneous processing devices remains a challenging task. Compilers may present a programming model with an executable format (e.g., fat binary) which however requires specific changes to the linker\/loader to generate the code.","Methods for mapping a function pointer to the device code are presented. In one embodiment, a method includes identifying an annotated function which is executable by processing devices. The method includes generating codes including a first code corresponds to a first processing device and a second code corresponds to a second processing device. The second processing device is architecturally different from the first processing device. The method further includes storing the second code in a byte string such that the second code is retrievable if the annotated function will be executed by the second processing device.","In the following description, numerous details are set forth to provide a more thorough explanation of embodiments of the present invention. It will be apparent, however, to one skilled in the art, that embodiments of the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring embodiments of the present invention.","Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of present invention also relate to apparatuses for performing the operations herein. Some apparatuses may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, DVD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, NVRAMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium includes read only memory (\u201cROM\u201d); random access memory (\u201cRAM\u201d); magnetic disk storage media; optical storage media; flash memory devices; etc.","The method and apparatus described herein are for mapping a function pointer to a device code. The method and apparatus are primarily discussed in reference to multi-core processor computer systems. However, the method and apparatus for mapping function pointers are not so limited, as they may be implemented on or in association with any integrated circuit device or system, such as cell phones, personal digital assistants, embedded controllers, mobile platforms, desktop platforms, and server platforms, as well as in conjunction with other resources, such as hardware\/software threads.","Overview","Methods for mapping a function pointer to the device code are presented. In one embodiment, a method includes identifying an annotated function which is executable by processing devices. The method includes generating codes including a first code corresponds to a first processing device and a second code corresponds to a second processing device. The second processing device is architecturally different from the first processing device. The method further includes storing the second code in a byte string such that the second code is retrievable if the annotated function will be executed by the second processing device.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 1"],"b":["102","106","107","108","104","110","112","114"]},"In one embodiment, processing device  is integrated with CPU  in a chip. In other embodiments, processing device  and CPU  are discrete devices. In one embodiment, processing device  is also a processing device operable to support some processing workload from CPU . In one embodiment, processing device  includes processing devices (e.g., a processor, a graphics processor, digital signal processing units, and a microcontroller).","In one embodiment, processing device  is an optional device. CPU  compiles a program to be executed by another computer system having two or more heterogeneous processing devices. In one embodiment, processing device  is architecturally different from CPU . Hence, the code for execution on processing device  is different from the code for execution on CPU .","In one embodiment, computer system  is used by a programmer or software developer to create source code . In one embodiments, source code  comprises program statements in a high level computer language, including object oriented and other languages, e.g., FORTRAN, Java, C++, etc. Computer system  includes one or more processors  and memory  in which programs are loaded and executed by CPU . Memory  includes compiler  to translate source code  into executable object code . Compiler  includes code optimizer  executed by CPU .","In one embodiment, compiler  performs code generation for functions annotated for execution on multiple target devices. Compiler  enables mapping a CPU-side function pointer to the code generated for another processing device other than the CPU (e.g., processing device ). A CPU-side function pointer is a function pointer used in the regular code when execution is only based on CPU . In one embodiment, the mapping of the function pointer enables programming models that provide an application programming interface (API) to take a CPU-side function pointer and execute the function on another non-CPU device.","In one embodiment, compiler  detects\/identifies a function which is annotated for possible execution on one or more processing devices (e.g., a GPU). For example, an annotated function is therefore executable on CPU  or one or more processing devices depending on the scheduling and load balancing factors.","In one embodiment, the code generated for the CPU execution is referred to herein as a CPU binary, a CPU executable, or a CPU code. In one embodiment, the code generated for other processing devices is referred to herein as a device binary or a device code. For example, the code generated for a GPU is referred to herein as a GPU binary or a GPU code.","In one embodiment, for each annotated function, compiler  generates a device code and stores the device code as a byte string in an array. Compiler  adds the array during compilation. The array is not visible to users. In one embodiment, the array is defined as follows: \u201cstatic char deviceCode <module_suffix>\u201d, where module_suffix is a module (compilation unit) specific suffix generated by compiler .","In one embodiment, codes for all annotated functions of a module are stored in an array. The codes are delimited by a special byte sequence. Compiler  generates the code (CPU binary) for CPU execution as usual. In addition to that, for each annotated function, compiler  generates a prologue (also referred herein as a prolog). For example, for an annotated function \u201cfoo\u201d, the generated code is shown in Table 1 below.",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Code Example"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"foo_$GENx: mov [Reserved-Location], <pointer to the device"]},{"entry":[{},"code array>"]},{"entry":[{},"foo: ....."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In one embodiment, the label foo (i.e., foo  in ) indicates the beginning of a regular CPU code generated for the function \u201cfoo\u201d. The foo_$GENX (see  in ) indicates that the prologue generated for the function \u201cfoo\u201d because the function has been annotated for execution on heterogeneous processing devices.","In one embodiment, for example, the first part of the prologue is a \u201cmove\u201d instruction (see  in ). The second operand is a pointer (see  in ) to the beginning of the device code (e.g., GPU code) for the function \u201cfoo\u201d in the device code array.","In one embodiment, the first operand of the prologue (see  in ), which is also referred to as \u201cthe destination\u201d, is a reserved memory location. For example, during runtime, CPU  receives a function pointer to be passed for execution on other devices, CPU  decrements the function pointer by an offset. In one embodiment, the offset is equal to the length of the prologue.","In one embodiment, CPU  detects\/checks for the unique code pattern in the prologue. As the reserved location is not accessible by users (not visible to users), the \u201cmove instruction\u201d in the prologue is unique. For example, if CPU  finds this unique code pattern during runtime, CPU  extracts the second operand and uses the second operand as a pointer to retrieve the device code of the function from the device code array.","In one embodiment, after retrieving the device code for a function, the device code is sent to a device driver for execution on processing device  (e.g., a GPU).","In one embodiment, compiler  is used in conjunction with a C-based heterogeneous CPU-GPU programming extension to an asynchronous user-level task-scheduling library (e.g., Intel Thread Building Blocks (TBB)). In another embodiment, compiler  is used in conjunction with OpenMP extensions or other parallel programming models for offloading the computation to another processing device.","In one embodiment, for example, the heterogeneous programming model provides a function: \u201coffload(func, env, num_iterations)\u201d which enables the function (\u201cfunc\u201d) to execute on a processing device (e.g., GPU) but does not guarantee that the function will be executed on the processing device. During runtime, a computing system dynamically decides whether to execute the function on the processing device or CPU . In one embodiment, for example, a computing system determines whether to execute on a GPU based on the GPU's load, whether the function is suitable to be executed on the GPU, or both.","In one embodiment, compiler  generates codes which support the mapping of a function pointer to the corresponding device code efficiently. In one embodiment, a generated device code is stored in the regular data section. A device driver is able to parse and to execute the generated device code. No change is required to the linker\/loader to enable the execution on non-CPU processing devices.","The method and apparatus above is primarily discussed in reference to a GPU. However, the methods and apparatus are not so limited, as they may be implemented on or in association with any processing devices including a graphics processor, digital signal processing units, a microcontroller, or any combinations thereof.","In one embodiment, computer system  comprises a computer workstation, laptop, desktop, server, mainframe or any other computing device suitable for developing code . In one embodiment, CPU  comprises one or more central processing units. Memory  comprises one or more memory devices into which programs are loaded.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2A","FIG. 1","FIG. 4"],"b":"110"},"Referring to , in one embodiment, processing logic begins by identifying an annotated function (process block ). The annotated function may be executed on a CPU or another non-CPU device (e.g., GPU). In one embodiment, processing logic identifies an annotated function which is executable by two or more processing devices. The annotated function is executable by heterogeneous devices without modifications to a linker and a loader. Processing logic generates a prologue which is used to map a function pointer to the device code during runtime.","In one embodiment, processing logic generates two or more codes for different processing devices (process block ). Processing logic generates a plurality of codes including a CPU code and a non-CPU device code. The device code is used for execution on another processing device architecturally different from the CPU.","In one embodiment, processing logic generates a prologue which includes a first operand which is a unique pattern to indicate the presence of the second operand in the prologue. In one embodiment, the second operand is a pointer to a byte string which is stored in a device code array. The byte string will be retrieved during runtime and sent to the processing device for execution on the processing device. In one embodiment, the device code is generated without a user intervention.","In one embodiment, processing logic stores the device code in a byte string as described above (process block ). For example, the byte string is stored in an array which includes other byte strings delimited by a unique byte sequence.","In one embodiment, a number of device codes are generated during compile time. The annotated function is not associated to a specific target device during the compile time. The processing device for the execution of the annotated function is determined during runtime.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 2B","FIG. 1","FIG. 4"]},"Referring to , in one embodiment, processing logic begins by receiving a function pointer associated with a function executable on two or more heterogeneous processing devices.","In one embodiment, processing logic decrements a function pointer value by an offset. For example, the offset is equal to the length of the prologue. Processing logic retrieves a prologue of the function based on the decremented function pointer value (process block ).","In one embodiment, processing logic detects a unique code patent (process block ). Processing logic reads the prologue and identifies the unique code pattern in the prologue. Processing logic retrieves the device code from an array based on the second operand of the prologue. The second operand of the prologue is a pointer to the device code stored in an array.","In one embodiment, processing logic retrieves a device code for the processing device based on a pointer in the prologue (process block ). Processing logic sends the device code to the corresponding processing device driver. The function is therefore executed on the processing device by using the device code.","Embodiments of the invention may be implemented in a variety of electronic devices and logic circuits. Furthermore, devices or circuits that include embodiments of the invention may be included within a variety of computer systems. Embodiments of the invention may also be included in other computer system topologies and architectures.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 3","b":["705","706","710","715","706","710","710"]},"Processor  may have any number of processing cores. Other embodiments of the invention, however, may be implemented within other devices within the system or distributed throughout the system in hardware, software, or some combination thereof.","In one embodiment, graphics controller  is integrated with processor  in a chip. In other embodiment, graphics controller  and processor  are discrete devices. In one embodiment, graphic controller  is also a processing device operable to support some processing workload from processor . In one embodiment, graphics controller  includes a processing device (e.g., a processor, a graphics processor, digital signal processing units, and a microcontroller).","Main memory  may be implemented in various memory sources, such as dynamic random-access memory (DRAM), hard disk drive (HDD) , solid state disk  based on NVRAM technology, or a memory source located remotely from the computer system via network interface  or via wireless interface  containing various storage devices and technologies. The cache memory may be located either within the processor or in close proximity to the processor, such as on the processor's local bus . Furthermore, the cache memory may contain relatively fast memory cells, such as a six-transistor (6T) cell, or other memory cell of approximately equal or faster access speed.","Other embodiments of the invention, however, may exist in other circuits, logic units, or devices within the system of . Furthermore, other embodiments of the invention may be distributed throughout several circuits, logic units, or devices illustrated in .","Similarly, at least one embodiment may be implemented within a point-to-point computer system. , for example, illustrates a computer system that is arranged in a point-to-point (PtP) configuration. In particular,  shows a system where processors, memory, and input\/output devices are interconnected by a number of point-to-point interfaces.","The system of  may also include several processors, of which only two, processors ,  are shown for clarity. Processors ,  may each include a local memory controller hub (MCH) ,  to connect with memory , . Processors ,  may exchange data via a point-to-point (PtP) interface  using PtP interface circuits , . Processors ,  may each exchange data with a chipset  via individual PtP interfaces ,  using point to point interface circuits , , , . Chipset  may also exchange data with a high-performance graphics circuit  via a high-performance graphics interface . Embodiments of the invention may be coupled to computer bus ( or ), or within chipset , or within data storage , or within memory  of .","Other embodiments of the invention, however, may exist in other circuits, logic units, or devices within the system of . Furthermore, other embodiments of the invention may be distributed throughout several circuits, logic units, or devices illustrated in .","The invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. For example, it should be appreciated that the present invention is applicable for use with all types of semiconductor integrated circuit (\u201cIC\u201d) chips. Examples of these IC chips include but are not limited to processors, controllers, chipset components, programmable logic arrays (PLA), memory chips, network chips, or the like. Moreover, it should be appreciated that exemplary sizes\/models\/values\/ranges may have been given, although embodiments of the present invention are not limited to the same. As manufacturing techniques (e.g., photolithography) mature over time, it is expected that devices of smaller size could be manufactured.","Whereas many alterations and modifications of the embodiment of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description, it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore, references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as essential to the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention, which, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
