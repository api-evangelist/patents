---
title: Software updating system and method
abstract: In one embodiment, software updates are applied to one or more client computers. The one or more client computers are assigned a level of service governing aspects of the application of the updates. The scheduling of the application of the software updates is done according to the level of service. The application of the software update is then performed according to the schedule.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07584467&OS=07584467&RS=07584467
owner: Microsoft Corporation
number: 07584467
owner_city: Redmond
owner_country: US
publication_date: 20030915
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/455,197, filed Mar. 17, 2003, entitled \u201cSoftware Updating System and Method\u201d, which is hereby incorporated by reference. This application also claims the benefit of U.S. application Ser. No. 10\/385,391, filed Mar. 10, 2003 and still pending, entitled \u201cSoftware Updating System and Method\u201d, which is hereby incorporated by reference.","The disclosure relates to installation of software updates.","A very large number of software applications, programs and files used by computers need periodic updates, which are frequently referred to a \u201cpatches\u201d. Many updates are of vital importance, such as those having to do with security or application functionality.","Installing and maintaining software within an enterprise network environment is a major cost to corporations and organizations. This is particularly the case where large numbers of networked computers are involved, each computer having a large number of programs and each program having a large number of possible revision levels. As the number of computers within a network increases, and the number of files, programs and associated versions of the files and programs on each computer also increases, it becomes progressively harder to maintain each computer in a condition that maximizes security and functionality.","Additionally, workstation down time is increasingly an issue, due in part to the time required to reboot computers after application of an update. The known process by which client computers are updated has created time consuming cycles during which updates are applied and the computer is rebooted. Accordingly, productive time is lost.","Moreover, the IT technician is not provided with any metrics describing important data related to the time that updates become available, the time such updates become approved, and the time taken to fix such hazards by installing an update. Consequently, the progress toward the goal of timely application of all updates is not well understood or aggressively pursued at present.","In one embodiment, software updates are applied to one or more client computers. The one or more client computers are assigned a level of service governing aspects of the application of the updates. The scheduling of the application of the software updates is done according to the level of service. The application of the software update is then performed according to the schedule.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","102","104","106","102","108","110","112"]},"A catalog synchronization module  allows the server  to obtain an update catalog  from an update authority . The update catalog  may be configured as an XML document, and includes information about the availability of software updates (\u201cpatches\u201d) and the version of the software to which they should be applied. Additionally, the update catalog  may include complex rules, typically in the form of Boolean logic, which prescribes the conditions under which individual software updates should be installed. In an over-simplified example, the rules may indicate that an update should be installed if the target application is greater than revision , but only if revision  of another program is present. The update authority  may be a trusted software source, such as Microsoft Corporation, wherein the trusted software source maintains information concerning software updates.","Therefore, the catalog synchronization module  is configured to communicate with the update authority , to maintain the resident copy of the update catalog  in current form. Additionally, the catalog synchronization module  is configured to check for a code (an \u201cauthenticode\u201d) to determine if the update catalog  is authentic, or has been corrupted, tampered with or otherwise rendered useless or harmful.","An exemplary software update approval tool  may be configured as a wizard to guide a user (such as an IT (information technology) technician) on the server  through the deployment of software updates on one or more client computers . In particular, the software update approval tool  is configured to allow the user to approve or reject application of software updates for installation on one or more client computers , wherein the updates were recommended by audit data  received from the client . Information disclosing the file configuration on the client\u2014including file versions present and the present update level\u2014is obtained from audit data  which was transferred from the client to the server via SMS, as will be seen in greater detail below.","In one embodiment of the software update approval tool , the approval process may involve presenting the user with a user interface , such as that seen in . By viewing the user interface, the IT technician may understand in detail the vulnerabilities facing each client computer  on an enterprise network. In an optional configuration, a vulnerability matrix  showing the update status for a client computer  is present. The matrix  may be configured by arraying representations A-N of the files present on the particular client on one axis, and representations A-M of the updates (patches) associated with the files  on another axis. The matrix  includes representations  indicating that a given update was applied to a given file; representations  indicating that the update was not applied to the file; and representations  indicating that the update is not applicable to the file. By viewing the vulnerability matrix , the user may appreciate the vulnerabilities associated with a file present on the client computer , as well as whether the vulnerabilities have been eliminated or mitigated by application of the update(s) associated with the file.","Returning to , the software update approval tool  allows the IT technician on the server  to approve updates for application to the client . The software update approval tool  is configured to, upon approval of an update, locate and obtain a copy of required updates . Accordingly, such approved updates  may be obtained by the approval tool  from a download center . Information on the location of the download center, such as a URL (uniform resource locator) may be obtained from the update catalog . Updates obtained for a client may then be replicated to the client using SMS  or other software distribution technology.","An exemplary client  is configured with an operating system  and XML parser . SMS client software  or similar asset inventory and software distribution software and WMI  (Windows\u00ae management instrumentation) software  or similar are also installed.","A copy of the update catalog , received from the server  via SMS, provides information regarding the relationship between files potentially present on the client and updates which may need to be installed on those files. A scan tool  is configured to call a scan engine . Where the scan engine  is a program, the scan tool  invokes the program. Where the scan engine has been advantageously configured as an API (application programming interface) the scan tool  calls the API.","The scan engine  is configured to read the update catalog , which is typically in the form of an XML document, using the XML parser . The scan engine  is then configured to query the operating system , to determine the exact revision level of programs and\/or files present on the client . The scan engine  may base each query in part on the outcome of previous queries and on the rules\u2014typically expressed as Boolean equations\u2014within the update catalog . Accordingly, the scan engine  is configured to determine the file type and revision level of all relevant files on the client , and additionally to determine the updates that are applicable to the files found. When completed, this information becomes audit data .","The scan tool  is configured to save the audit data  into a queryable interface with the server . WMI  is such an interface, and a preferred scan tool  is configured to save the audit data  into WMI  and to provide an indication to the SMS client  that will cause the audit data  to be replicated to the server , where it may be aggregated with the audit data of other clients at .","A scan tool helper  may be configured separately or as part of the scan tool . The scan helper  manages the process of merging the results of the audit data  with service level data. Such service level data may be reflected in modifications to the Win32_PatchState schema or similar data structure. In an exemplary environment, modification to the Win32_PatchState schema may include the addition of fields including: string AuthorizedName (name of the update), datetime TimeDetected; datetime TimeApplied, and datetime TimeAuthorized. Field TimeDetected records the time at which an available update is discovered, thereby implying a time at which a potential security breach is detected. Field TimeAuthorized records the time at which the server  (i.e. the IT department administration) authorized the application of the update. Accordingly, the time required by the IT department to act can be derived by comparing the TimeDetected from the TimeAuthorized. Field TimeApplied records the time at which the update was applied, and is an overall measure of the responsiveness of the IT department, and is also a measure of the IT department's responsiveness in installing the update after authorizing the update. Using these modifications to the Win32_PatchState schema, the scan tool helper  is able to generate the above service level data associated with TimeDetected, TimeAuthorized and TimeApplied.","A software update installation agent  is configured to install the approved update(s)  sent by the server  via SMS or similar distribution application. In a preferred embodiment, the software update installation agent  is configured to call the scan engine . The scan engine  is configured to again evaluate the files on the client  with respect to the update catalog , which contains information on updates available, files needing updates, and rules for determining the which updates apply to which files. The output of this second scan\u2014current audit data\u2014of the client's files is put into the scan tool cache . The software update installation agent  is configured to use the scan tool cache  to prevent the installation of updates that are no longer warranted. The installation of updates may become unwarranted, such as in the circumstance where changes in the client computer's file system have occurred more recently then the transmission of the audit data  to the server . Examples of such a change include installing an updated version of a program, thereby replacing the earlier version which needed an update.","A preferred software installation agent  is configured to review the exit codes generated by the installation of the updates . A success code table  is configured to map a wide variety of initial exit codes into an output exit code that more correctly reflects the underlying meaning of the initial exit code. While zero is traditionally used to indicate a successful update install, and other numbers enumerate different potential errors, this is nomenclature is not always accurate. In some cases, non-zero exit codes indicate a satisfactory update installation due to situations unforeseen by the author of the update or the update installation technology. Such situations include factors related to the software configuration on a particular client. Accordingly, the success code table  is configured to map the exit codes generated by the installation of updates into exit codes which more accurately reflect the situation which caused generation of the exit code and provide consistency in success code or exit code meaning.","In particular, differences between exit codes that were generated by different install engine technology may exist. For example, Windows\u00ae Installer, Update.EXE and I-Express may not be in complete agreement on the precise meaning of a given exit code. Accordingly, the success code table  may be configured to map success codes in any desired manner, such as to map numerically different codes having the same meaning into a consistent numeral, thereby resulting in consistent success code interpretation. Subsequent to exit code consideration, those items resulting in immediate availability will be re-scanned to confirm their availability. Items which result in a computer reboot shall have their availability confirmed by re-scanning immediately following the reboot.","In some cases, identification of an update's association with a particular install engine technology provides sufficient information to map the success codes associated with the update. In other circumstances, the success code table  must be edited by an IT professional to reflect a special case associated with an particular update. Accordingly, the success code table  is editable, configurable and extensible, and can be modified to allow mapping of the success codes generated by any update's installation process into a consistent meaning.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":["300","100","302","116","102","114","116","114","116","114","116","104","136"]},"At block , audit data  is generated on the client  based on queries made to the operating system  and based on information from the update catalog . The audit data  may be generated under the direction of a scan tool  by operation of a scan engine . The audit data  can include an inventory of files within the client computer's file system which need updates and an indication of the applicable update for each file.","At block , the audit data  may be aggregated with the audit data of other clients on the server  in an audit data library . The audit data is analyzed, such as by a software update approval tool , to determine if each update should be installed. The approved updates are then sent to the appropriate client by SMS or other means.","At block , the approved updates  are installed on the client . The installation process may be performed by a software update installation agent  or similar procedure. The scan tool cache  is consulted to prevent the installation of updates for which there is no longer a need. Changes in the need for an update could be related to the recent installation of a newer version of a program, for example. The client may be rebooted after installation of one or more updates. The decision to reboot may be governed by dynamic restart detection, as seen in greater detail in . Success codes resulting from the update installation may be mapped according to the success code table , as seen in greater detail in . Success code information is utilized in the creation of service level data, which can be used, for example, to provide feedback to a corporate IT department. Such service level data can include time measurements between availability of an update and authorization of the update by the IT department and between availability and installation of the update.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 3"],"b":["400","114","302"]},"At block , the server  periodically downloads an update catalog  from an update authority. The download may be managed by the catalog synchronization module  or similar structure, thereby maintaining the copy of the update catalog  in a current condition. The update catalog  is typically in the form of an XML document, and contains information about available updates, the files and file versions to which the updates apply, and rule governing such application. Due to the complexity of the rules, they may be expressed in the form of Boolean equations.","At block , in a typical download of the update catalog , the catalog synchronization module  checks available codes associated with the update catalog  as a conformation of the catalog's authenticity.","At block , the update catalog  is stored as an SMS package. SMS is told that the package includes changes, i.e. that the package is new. Accordingly, SMS replicates the update catalog  to all clients .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 5","FIG. 3"],"b":["500","138","104","304"]},"At block , the scan tool  calls the scan engine . In an exemplary configuration, the scan engine  is a program that must be called. However, the scan engine  may advantageously be configured as an API, thereby simplifying the operation of the scan tool .","At block , the scan engine  uses the update catalog , typically in XML form, to perform the audit of the software on the client . This audit, described more fully with reference to , results in the production of audit data .","At block , the scan tool  saves the audit results  received from the scan engine  into a queryable interface with the server . In a typical application, the queryable interface with the server is WMI  (Windows\u00ae management instrumentation). Accordingly, the scan tool  populates the audit results into a WMI repository  on the client . The audit results  are then uploaded by SMS to the server , typically for storage in a library  with the audit results of other clients.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 6","FIG. 5"],"b":["600","140","104","504"]},"At block , the scan engine  reads the update document , which typically contains an XML document describing files, updates and associated rules of application.","At block , the scan engine  queries the operating system  of the client  to determine the existence of files to which reference was made in the update document . At block , the rules contained within the update document are then applied, thereby determining the files to which an update applies and the identity of that update.","At block , the scan engine  assembles the identities of the files needing an update and the associated updates, and returns this information to the scan tool  as the audit data.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 7","FIG. 3"],"b":["700","120","102","306","700"]},"At block , a user interface is opened, thereby allowing an IT technician using the server  to view audit results for one or more client systems. At block , optionally, a vulnerability matrix  is generated and displayed. The vulnerability matrix  shows client file inventory, recommended updates and indicates if the update has been applied. At block , the user interface allows the IT technician to indicate the approved updates (patches). The approval process could be presented to the user in the form of a wizard, or other applicable format. The approval could be based in part on the vulnerability matrix  the technician viewed. At block , in some applications, the user interface is restricted to allow selection of updates only from an approved group of updates having passed testing on a test collection of computers. If application of the update to the test collection of computers was successful, then the updates are included among those from which the IT professional may select for installation on a given system. In some applications, the IT professional may be challenged by the user interface to state the name of a test collection of systems upon which the update was installed in the testing process, or other details which confirm that testing was performed.","At block , the approved updates  are obtained, perhaps from an update download center . At block , suppression of reboot may be indicated for some updates. At block , dynamic rebooting may be indicated for other updates.  discusses rebooting in greater detail. At block , the updates are then transferred to the appropriate client  via SMS or other file transfer utility.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 8","FIG. 3"],"b":["800","146","104","308","800","102","104"]},"At block , a user interface may be opened on the client  to announce to the user the opportunity to have updates installed at this time. At block , where a user interface has opened, a countdown timer causes appropriate default actions to be taken upon expiration of a timed period if no one is present at the client computer. The default action may be set by the corporate IT department, and may include \u201cinstall\u201d and \u201cpostpone\u201d. Where the default is \u201cinstall,\u201d the installation of the updates proceeds after the timed period has expired. Where the default action is \u201cpostpone,\u201d the installation is delayed. At block , where a grace period has ended and the enforcement period has started, the \u201cpostpone\u201d option is eliminated, and may appear to be a \u201cgrayed\u201d option on the user interface. In this circumstance, the remaining default, \u201cinstall,\u201d is invoked, and the installation of the updates proceeds. The identifying name of the corporate IT department is affixed to this user interface to ensure the employee is aware of whom the computer's maintenance has been entrusted.","At block , the appropriate scan tool ,  is executed to refresh the scan tool cache . By refreshing the scan tool cache , it can be determined if the status of files on the client  has changed, thereby changing the need for one or more updates to be installed. The audit results of the scan tool cache  may be deposited into a queryable interface, such as WMI.","At block , the WMI class is queried, and the results (i.e. the updates and their associated target files) are intersected with the list of approved updates received from the server. Accordingly, where WMI indicates that there is no longer a need to install a given update, or where the server did not forward an update (perhaps due to approval rejection by the IT technician) one or more updates will not be installed.","At block , each update to be installed is checked to determine if an enforcement period has been reached. In some cases, the IT department operating the server  will provide a grace period, followed by an enforcement period. During the grace period, the update can be rejected by the client. During the enforcement period, the update cannot be rejected by the client.","At block , for each approved update that is enforced and still applicable (in view of the scan cache), the update is installed using the meta-data included in the XML file (the update document ).","At block , following install, a status message is issued for each update, and a summary message reflecting the overall status of the evaluation\/installation cycle is issued. In one embodiment, the status message will observe a SuccessCodes mapping table feature, wherein mapping of non-zero exit codes into success states is allowed. Success code mapping is discussed in greater detail in the discussion of . At block , the success codes may be included in service level data, which may be transmitted to the software update approval tool  or other location on the server .","At block , the WMI class is updated to reflect newly installed updates, and the SMS inventory process is conditionally started. Additionally, service level data may be transmitted to the software update approval tool  or other location. For example, service level data may include information indicating the length of a time period between update availability and update installation.","At block , determination is made if a system restart is needed, and a check is made to ensure that the system is permitted to be restarted. Additional detail associated with system restarting is seen in the discussion of .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 9","b":"900"},"At block , the IT department associates a grace period with an update, after which an enforcement period is scheduled. At block , the update installation process is started for an approved update having assigned grace and enforcement periods. At block , a computer for which an update is scheduled is found on a network\u2014or returned to a network, such as in the case of a laptop computer)\u2014thereby triggering the start of the grace period. At block , the user may elect to invoke the grace period to delay installation of the update. This action allows the user to continue working. At block , optionally, the user may permit installation of one or more updates, which may be followed by a reboot. At block , where the grace period ends prior to permitting the installation of one or more updates, the enforcement period begins. The enforcement period forces the user to accept the installation of the update. At block , the update(s) is\/are installed, possibly followed by a reboot.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 10","b":["1000","1002","146","1004","1006","1008","1010"]},"At block , where suppression of the reboot was indicated, the reboot is delayed until an appropriate time. Where suppression is indicated, if is frequently advisable to time the application of the updates a short time before a scheduled reboot. This is particularly true where the install is being performed on a server, which may have a rigorous schedule governing system rebooting which is intended to maximize uptime.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 11","b":["1100","148"]},"At block , following installation of an update, a success code table is consulted, and the success code resulting from the update installation is checked.","At block , where the update installation was part of a testing procedure, the IT technician may edit the success code table . At block , the success code table  may be organized by groups, where the updates in each group have success codes with similar meaning. For example, each groups of updates may be configured for installation by similar update installation engine technology. At block , the IT technician may further edit the success code table to accommodate the installation of updates resulting in codes which are exceptions to general rules.","At block , where the installation of the update was not associated with a testing procedure, location of the success code resulting from the installation within the success code table  allows mapping of the success code. Accordingly, the result of the mapping provides information that is consistent with expectations.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 12","b":["1200","1200","138","146","150"]},"At block , a notification icon is presented to the user at all times for the purpose of allowing the user to gain information about, and control over, the timing and nature of updates to be performed to the user's computer. The icon can be configured to appear similar to a speaker icon, typically found in the lower right of current Windows\u00ae operating systems. At block , in an exemplary user interface, right clicking the icon provides the user with an interface  providing a choice of \u201cDisplay Reminder\u201d and \u201cInstall Software Updates\u201d as seen in . At block , selection of the \u201cDisplay Reminders\u201d button seen in  may result in the exemplary \u201cReminder\u201d interface  seen in . The interface  of  provides the user with the information that a grace period will expire in the future, and be followed by an enforcement period. By scheduling the updates for a convenient time within the grace period, the user is able to prevent an inconvenient update at the onset of the enforcement period. The user may therefore perform the update immediately (by selecting the first button) or schedule the update to be performed at a time of the user's choice (within the grace period) by pressing the second button. Additional information that will indicate, for example, when the update will be performed as a result of the end of the grace period and the beginning of the enforcement period, may be obtained by pressing the third button labeled \u201cMore Detail\u201d. Pressing the cancel button allows the user to return to work without resolving or changing the update installation time.","At block , where the user selected the \u201cInstall Software Updates\u201d button of  or the \u201cSchedule Update\u201d button of , a user interface  is displayed, which allows the user to schedule the installation of the updates. In the exemplary interface , the user may click a check box  to indicate agreement with the time selected via a pull-down menu  to begin running the updates. Similarly, a check box  may be used to indicate agreement with the time selected via the pull-down menu  to perform a reboot. Alternatively, the pull-down menu  may be used to indicate that the reboot should be performed immediately after update application.","At block , a reminder interface, such as that seen in , may be displayed to the user at reboot or log-in, and periodically during the user's operation of the computer, to inform the user that required updates are pending and that the user may elect to schedule the updates at a convenient time.","At block , the updates and reboot is performed at according to the user's elected schedule, or automatically, at the end of the grace period. At block , in some instances, a reboot may not be performed. This may result because a document file (e.g. a word processing file) has been left open and unsaved. Alternatively, a reboot may not be performed where the user elected to postpone the reboot in response to an opportunity presented by a user interface. Where no reboot was performed, a repetitive user interface may be used to annoy the user until a reboot is performed. For example,  shows an exemplary annoyance mode interface  which may be configured to repeatedly pop up at intervals to request that the user reboot. Accordingly, at block  the user performs the reboot, thereby bringing the updates into service and ending the annoyance mode.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 17","b":["1700","1700"]},"At block , each server within a group of servers to be updated is associated into a subgroup. The subgroups are sized and configured to include servers in a manner which allows the simultaneous updating of servers in each subgroup without disrupting the work flow of the entire group. The time (e.g. 2 am of the first Sunday of each month) when each subgroup may receive updates is assigned.","At block , an anticipated elapsed time required for application of each update to be performed is calculated or measured. Where possible, the anticipated time may be adjusted according to expectations for each server, e.g. longer failsafe timeout period for slower servers. Using the anticipated time for application of each update, failsafe timeout periods are set for each update. For example, where an update is measured to take 5 minutes to install on a test machine, the failsafe timeout period may be set for 10 minutes. Accordingly, where the installation of that update reaches or exceeds 10 minutes, it will be assumed that the installation has failed, and the installation will be terminated with the appropriate success code. As a result, excessive time is not spent on the installation of any update.","At block , the specific time period (i.e. the \u201cchange window\u201d) during which each subgroup of servers may be taken down for update installation in a given time period may be determined. In an exemplary application, each subgroup may be allocated a specific one-hour time slot of down time each month during which updates may be performed.","At block , during the change window, i.e. the exact period of time having a specific starting and finishing time scheduled for updates, as many updates as possible are applied to the systems within the subgroup. During application of each update, the failsafe time is monitored, and where the failsafe time is exceeded, installation of the update is suspended and an appropriate success code is returned.","At block , when time remaining within the change window is less than the time required for application of any remaining update and for rebooting, the installation of updates is suspended. The time required for application of each update may be based on the failsafe time. Accordingly, the system will be returned to service without exceeding the parameters of the change window.","At block , any updates which failed to install during the change window (because, for example, the change window did not provide enough time to perform their install) are identified for potential installation in the next change window.","At block , the server is rebooted and brought back on line.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 18","b":"1800"},"At block , a large number of updates are grouped into a single package. The package may be configured as an SMS package, and the aggregated updates may be considered to be a unit of content.","At block , the package is configured with content obtained from a minimal number of trusted update authorities. In a preferred example, the content is received from a single update authority. By minimizing the number of content providers, the cost of authenticating each provider and each update provided is minimized.","At block , the package is configured to support differential enforcement as applied to different client computers. In one example, an XML document which is included with the updates within the package may provide different rules of enforcement for different client computers. The XML document may recite rules using Boolean operators or other means which result in application of the correct update(s) to each client. Accordingly, clients requiring updates within 24 hours may be treated differently than clients requiring updates within 30 days.","At block , in one example, the package is configured for SMS consumption. Accordingly, at block , SMS distributes the package to a plurality of clients, where the clients are associated with multiple service levels. For example, a more exacting service level may require a greater number of updates which are applied more rapidly after detection; a lower service level may require fewer updates and may provide additional time before they must be applied.","At block , the updates within the package are applied to different client computers in a different manner, according to their service level, the time and duration of their change window, and other factors.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 19","b":"1900"},"At block , a partition is formed in a package, wherein the package typically contains a large number of updates. At block , an exemplary partition separates trusted updates from un-trusted updates. An update may be un-trusted, for example, due to lack of testing. Referring briefly to , the update package  may include trusted updates - and un-trusted updates - separated by a partition . At block , an exemplary partition is expressed using an XML file. The XML file is configured to inform different clients of the updates suitable for their consumption. In particular, the XML file may direct test systems to try un-trusted updates, and may direct production systems to avoid un-trusted updates.","At block , an initial level of trust attributed to each update within the package is based on the performance of that update within a test environment. Following success of an un-trusted update in an appropriate number of systems over an appropriate period of time, the un-trusted update becomes a trusted update. At block , un-trusted updates are merged with trusted updates after approval within the test environment. The merging of an un-trusted update with the trusted updates may be accomplished by editing the XML file which partitions the package.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 21","b":"2100"},"At block , a file, such as a XML file, is opened to record information including updates approved for a reference computer. A reference computer is a computer having a disk with an image that is considered to be a standard within an organization, i.e. the disk contains a standard software configuration utilized by a corporation or other entity. The use of a reference computer simplifies management of systems within an organization by reducing the number of approved configurations allowed. For example, in the event of a problem, the disk may be reformatted with the standard image and the system restarted. At block , in a template mode, a template-making module scans a reference system and generates an authorization list. The authorization list includes all of the updates applied to the standard image on the reference system. At block , the authorization list is incorporated into the template, which is written to the XML file. At block , the template can be consumed and deployed as a mirror of the desired state. At block , the deployed template is used to reduce the time elapsed from update detection to update deployment. Since the template identifies a subset of the updates needed from a large file such as update package  in , the template can reduce the complexity of determining which updates are needed. Accordingly, at block , a client computer is updated according to the template. In the updating process, updates (i.e. \u201cpatches\u201d) are selected in a more efficient manner by referring to the template, which results in client updating in a manner which is consistent with the organization's reference computer.","Although the disclosure has been described in language specific to structural features and\/or methodological steps, it is to be understood that the appended claims are not limited to the specific features or steps described. Rather, the specific features and steps are exemplary forms of implementing this disclosure. For example, actions described in blocks of the flow diagrams may be performed in parallel with actions described in other blocks, the actions may occur in an alternate order, or may be distributed in a manner which associates actions with more than one other block. Moreover, the elements of the methods disclosed may be performed by any desired means, such as by the execution of processor-readable instructions defined on a processor-readable media, such as a disk, a ROM or other memory device, or by operation of an ASIC (application specific integrated circuit) or other hardware device."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following detailed description refers to the accompanying figures. In the figures, the left-most digits(s) of a reference number identifies the figure (Fig.) in which the reference number first appears. Moreover, the same reference numbers are used throughout the drawings to reference like features and components.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIGS. 13 through 16","FIG. 12"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 21"}]},"DETDESC":[{},{}]}
