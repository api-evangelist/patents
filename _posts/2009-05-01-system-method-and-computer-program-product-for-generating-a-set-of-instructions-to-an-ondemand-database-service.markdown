---
title: System, method and computer program product for generating a set of instructions to an on-demand database service
abstract: In accordance with embodiments, there are provided mechanisms and methods for generating a set of instructions to an on-demand database service. These mechanisms and methods for generating a set of instructions to an on-demand database service can enable embodiments to generate instructions capable of operating on objects, without having any knowledge of the objects on which the instructions are going to operate, until runtime. The ability of embodiments to provide this instruction generation may allow generic instructions to be generated, independent of the objects on which they will operate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08244658&OS=08244658&RS=08244658
owner: salesforce.com, inc.
number: 08244658
owner_city: San Francisco
owner_country: US
publication_date: 20090501
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION","General Overview"],"p":["This application claims priority to U.S. Provisional Patent Application No. 61\/049,693 entitled \u201cMethod And System For Runtime Variable Shape Discovery In A Strongly Typed Computing Language For On-Demand Services,\u201d by Craig Weissman et al., filed Mar. 1, 2008, the entire contents of which are incorporated herein by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The current invention relates generally to database systems, and more particularly to generating instructions for such database systems.","The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly, a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches, which in and of themselves may also be inventions.","In conventional database systems, users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user's own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request.","There is often a desire to allow users of such database systems the flexibility of developing scripts to run in the context of the database system. To date, however, the users must have detailed knowledge of the scripting language and of the objects on which the scripts are to operate.","In accordance with embodiments, there are provided mechanisms and methods for generating a set of instructions to an on-demand database service. These mechanisms and methods for generating a set of instructions to an on-demand database service can enable embodiments to generate instructions capable of operating on objects, without having any knowledge of the objects on which the instructions are going to operate, until runtime. The ability of embodiments to provide this instruction generation may allow generic instructions to be generated, independent of the objects on which they will operate.","In an embodiment and by way of example, a method is provided for generating a set of instructions to an on-demand database service. In use, at least one programming language instruction associated with at least one custom object is received at a platform supporting applications built by third parties. Additionally, a shape is determined for the at least one custom object based upon a runtime instance of the at least one custom object. Furthermore, a set of instructions to an on-demand database service is generated, based on the at least one programming language instruction, the set of instructions configured to operate upon the runtime instance of the at least one custom object based upon the shape.","While the present invention is described with reference to an embodiment in which techniques for generating a set of instructions to an on-demand database service are implemented in an application server providing a front end for a multi-tenant database on-demand service, the present invention is not limited to multi-tenant databases or deployment on application servers. Embodiments may be practiced using other database architectures, i.e., ORACLE\u00ae, DB2\u00ae and the like without departing from the scope of the embodiments claimed.","Any of the above embodiments may be used alone or together with one another in any combination. Inventions encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments of the invention may have been motivated by various deficiencies with the prior art, which may be discussed or alluded to in one or more places in the specification, the embodiments of the invention do not necessarily address any of these deficiencies. In other words, different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification, and some embodiments may not address any of these deficiencies.","Systems and methods are provided for generating a set of instructions to an on-demand database service.","Currently, users must have detailed knowledge of a scripting language and of the objects on which the scripts are to operate in order to develop scripts capable of running in the context of an on-demand database system.","Thus, mechanisms and methods are provided herein for generating a set of instructions to an on-demand database service. These mechanisms and methods for generating a set of instructions to an on-demand database service can enable embodiments to generate instructions capable of operating on objects, without having any knowledge of the objects on which the instructions are going to operate, until runtime. The ability of embodiments to provide this instruction generation may allow generic instructions to be generated, independent of the objects on which they will operate.","Next, mechanisms and methods for generating a set of instructions to an on-demand database service will be described with reference to exemplary embodiments.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","102"]},"In the context of the present description, a programming language instruction refers to any instruction or command written in a programming language. Furthermore, a custom object refers to any object capable of being customized. In various embodiments, the custom object may include a table, a portion of a table, a plurality of tables, and\/or various other objects.","Still yet, the platform supporting applications built by third parties may include any platform. For example, in various embodiments, the platform may include a platform associated with an on-demand database service, a customer server, an organization server, a user system, and\/or any other platform capable of supporting applications built by third parties. In this case, the third party may include any user and\/or organization capable of building applications. In one embodiment, the third party may include one or more users of an on-demand database service.","An on-demand database service may include any service that relies on a database system that is accessible over a network. In one embodiment, the on-demand database service may include a multi-tenant on-demand database service. In the present description, such multi-tenant on-demand database service may include any service that relies on a database system that is accessible over a network, in which various elements of hardware and software of the database system may be shared by one or more customers. For instance, a given application server may simultaneously process requests for a great number of customers, and a given database table may store rows for a potentially much greater number of customers.","Once the programming language instruction is received, a shape for the at least one custom object is determined based upon a runtime instance of the at least one custom object. See operation . In one embodiment, the shape may be indicated by a number of columns and\/or rows associated with the custom object.","Furthermore, a set of instructions to an on-demand database service is generated based on the at least one programming language instruction. See operation . In this case, the set of instructions is configured to operate upon the runtime instance of the at least one custom object based upon the shape.","In addition to generating the instructions, in one embodiment, the set of instructions may be applied to the on-demand database service. In this case, applying the set of instructions to the on-demand database service may affect a result in accordance with the programming language instruction.","Additionally, in one embodiment, a user of the on-demand database service may be presented with a list of entity types. As an option, the list may further include a plurality of fields. From this list, a selection of one or more of the plurality of fields or the entity types may be received.","In this case, the set of instructions may be generated based on the selection. The instructions may include any instruction. For example, in one embodiment, the instructions may include a query (e.g. a search query, etc.). In either case, the set of instructions may be executed. As an option, results of the execution of the set of instructions may be displayed.","It should be noted that, in various embodiments, the shape of the custom object may be determined using different techniques. For example, in one embodiment, the shape may be determined utilizing one or more tokens. In the context of the present description, a token refers to any item (e.g. code, an identifier, etc.) capable of including information associated with a custom object. As an option, the token may include metadata (e.g. metadata associated with the custom object, etc.).","In one embodiment, the custom objects may be capable of accessing the tokens. In various embodiments, the tokens may represent at least one entity type and\/or at least one field. Furthermore, the tokens may be capable of being serialized.","Additionally, in one embodiment, the tokens may be utilized to separate a discovery phase from an information acquisition phase, the discovery phase and the acquisition phase being associated with the generating. For example, tokens may be utilized as opposed to describe objects to assists in multi-tenant efficiency by separating the discovery phase from a more expensive task of getting detailed describe information. In this case, the discovery phase may include discovering what objects and fields exist.","Still yet, as an option, data manipulation language (DML) updates associated with the on-demand database service may be based on the tokens. For example, DML updates may be based on the tokens such that an entire model is validated, more than typical dynamic SQL DML, which is usually string-based and therefore may be subject to runtime errors when SQL statements are concatenated incorrectly. This may result in a system being less susceptible to errors.","In another embodiment, the shape for the at least one custom object may be determined utilizing one or more describe structures. In this case, the describe structures may include getters (e.g. get functions, etc.) to extract describe information associated with the custom object. Other techniques may be employed in embodiments to determine shape. For example, computations may be performed on a stored known size and quantity of elements comprising a custom object to arrive at its shape. Still yet, shape could be determined in some embodiments based on memory allocated to various components of the custom object at run time. Other techniques may be envisioned by those skilled in the art to enable still further embodiments to determine shape of the custom objects given implementation specifics addressed.","It should be noted that, as an option, the receiving, determining, and generating may be performed for a plurality of organizations simultaneously. For example, in one embodiment, application servers associated with the on-demand database service may discover and operate efficiently on thousands of organizations at the same time (e.g. via Apex, etc.). Of course, in various other embodiments, the application servers operate on any number of organizations simultaneously or independently.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","200"]},"As shown, a user is presented with a list of entity types and fields. See operation . In one embodiment, the user may be presented with the list of entity types and fields on a user interface. As an option, the user may have access to the list of entity types and fields through an application programming interface.","It is then determined whether a user selection is received. See operation . If a user selection is received, a generic routine is generated based on the user selection. See operation .","The generic routine may then be executed. See operation . As part of the execution, the generic routine may operate on and\/or modify tables and\/or fields. See operation . The results of the operation may then optionally be displayed. See operation .","Using this technique, script-level access to information about schema may be allowed for a current organization associated with the on-demand database service, and a current user of the on-demand database service.","Separately by providing iteration access to a list of entity types (e.g. SObject types, etc.) and their fields, construction of dynamic statements (e.g. SOQL statements, DML statements, etc.) as strings may be allowed. In one embodiment, these dynamic statements (i.e. instructions) may be executed as dynamic queries, as well as dynamic entity (e.g. SObject, etc.) construction for DML.","In one embodiment, dynamic SQL may be utilized to construct the dynamic statements because it allows for generic routines to be written, where the routines do not know the objects (e.g. the tables or fields, etc.) on which they are going to operate until runtime.","For example, to write a general query output tool, a user may be presented with a list of entity types and fields (e.g. available from one or more describe objects, etc.). Once the user has chosen a query, that dynamic query may be executed and the results of the execution may be dynamically retrieved and displayed.","A lower-level exemplary use case may be a general utility that clones an object and all of its child rows. This utility may first need to interrogate the describe objects to find those that have a master\/detail foreign key that point at an account. Dynamic queries may then be executed to get the data and dynamic DML may be utilized to write the cloned data.","Another exemplary use case may be the construction of SELECT queries. For example, for applications that require querying on an unknown list of fields (e.g. at design time, etc.), it may be possible to construct a dynamic SELECT statement using the list of fields for that entity type.","In one embodiment, all organizations associated with the on-demand database service may be able to use describe objects in Apex. In one embodiment, this information may be read only and may not cause any harm.","It should be noted that, in one embodiment, global describe and entity field maps may allow code to discover all of the schema in an entire system. Since Apex may run in system mode, and since the global describe and entity field maps described below may allow the code to discover all of the schema in the entire system, slow execution of this functionality may be allowed.","In one embodiment, normal code may only have access to entity types and fields that a current user is able to access. In general, this is more restrictive than normal Apex code which can be written against any schema element that the code author is able to access. Thus, testing applications that use a describe function may take advantage of a \u201crun test as user\u201d feature that may be implemented in one embodiment.","As an option, an application written internally to the on-demand database service may allow describe access to all schema. Furthermore, certain code may be utilized to determine whether a current user a capable of viewing an entity type and field. In one embodiment, a permission may be implemented that certifies a partner application may view more of the schema with their applications. As an option, dynamic Apex may be protected by a permission.","It should be noted that the schema may include entity types (e.g. SObject types, etc.) and fields. In one embodiment, each entity type and field may have at least two types of Apex data structures for manipulating them, opaque tokens and describe structures.","For example, in one embodiment, Apex structures may be utilized that mirror API describe objects. These may have the same names (e.g. Schema.DescribeSObjectResult, Schema.Field, etc.) as in web service destination language (WSDL). Furthermore, these structures may have many getters for all of the describe information (e.g. getLabel( ), etc.). It should be noted that property-like access to the getters may also be allowed, without using a method invocation syntax.","As an option, certain pieces of information may be presented in a more usable format than the API. For example, in the API, relationships among describe objects may be represented as strings, rather than other structures.","As noted above, in another embodiment, opaque tokens may be utilized to manipulate entity types and fields. In this case, the opaque tokens may represent each entity type and field. Furthermore, the opaque tokens may be able to be serialized [e.g. for a model view controller (MVC), etc.] and may be used to describe specific entity types and fields. For example, the tokens may indicate or query whether an item is a specific row and of a specific type (e.g. SObject row of type \u201cAccount,\u201d etc.).","In one embodiment, an Apex syntax may be utilized to represent opaque tokens and describe structures. In terms of Apex syntax, two different mechanisms may be utilized to handle these two different types of objects. In one embodiment, an Apex syntax may be provided for describe access that closely matches a syntax used in formula fields. Table 1 shows an example of various formula fields, in accordance with one embodiment.",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"$ObjectType.Account \u2190 A describe structure"},{"entry":"$ObjectType.Account.label \u2190 getLabel( ) for that structure"},{"entry":"$ObjectType.Account.fields.Name \u2190 access to a specific field describe"},{"entry":"$ObjectType.Account.fields.Name.label \u2190 getLabel( ) for that"},{"entry":"field structure"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Thus, in Apex, a class Schema.SObjectType may be introduced that has static elements for each SObject type of type DescribeSObjectResult such that Schema.DescribeSObjectResult d=Schema.SobjectType.Account. When representing a structure of a \u201cfields\u201d structure in Apex syntax, the fields structure may be intended to be accessed immediately with either a field member variable or a getMap( ) function, as shown in Table 2.",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Schema.Field f = Schema.SobjectType.Account.fields.Name;"]},{"entry":[{},"Map<String, Schema.SObjectField> m ="]},{"entry":[{},"Schema.SobjectType.Account.fields.getMap( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As an option, the first expression shown in Table 2 may implement parsing to validate that the final token is valid for the entity type at compile time. In this case, the name of the entity object type (e.g. \u201cAccount\u201d in this example, etc.) may be found by searching backwards in the parser expression. It may then be validated that the field name is legitimate.","The second expression may yield a map that can be used to access a field by name. It should be noted that, in one embodiment, the value type of this map may not be the field describe structure type. For example, these may be expensive to create and it may be desirable not to create them all at once. Instead, as an option, field tokens, which are light-weight, may be utilized in the map.","In one embodiment, \u201cSobjectField\u201d and \u201cSobjectType\u201d may represent opaque identifier types that can be compared with a \u201c==\u201d operator to determine whether a field or entity type is actually a specific schema element. For example, Table 3 shows an implementation of this, in accordance with one embodiment.",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Sobject s = new Account( );"]},{"entry":[{},"System.assert(s.getSobjectType( ) == Account.sobjectType);"]},{"entry":[{},"DescribeSobjectResult r= Account.sobjectType.getDescribe( );"]},{"entry":[{},"Field f = Schema.SobjectType.Account.fields.name;"]},{"entry":[{},"System.assert(f.getSobjectField( ) == Account.name);"]},{"entry":[{},"f = f.getSobjectField( ).getDescribe( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In various embodiments, a user may choose between utilizing the tokens and\/or describe objects and may optionally switch between the use of each. It should be noted that, one reason for implementing these convenience mechanisms for accessing entity object tokens and entity field tokens is that the alternatives may be very long.","For example, Table 4 shows one option for accessing entity object and entity field tokens, in accordance with one embodiment.",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Schema.SObjectType t ="]},{"entry":[{},"Schema.SobjectType.Account.getSObjectType( );"]},{"entry":[{},"Schema.SObjectField f ="]},{"entry":[{},"Schema.SobjectType.Account.fields.Name.getSObjectField( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Table 5 shows one option for accessing entity object and entity field tokens utilizing a convenience mechanism, in accordance with one embodiment.",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Schema.SobjectType t = Account.sobjectType;"]},{"entry":[{},"Schema.SobjectField = Account.Name;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Thus, at least two describe types and two token types may be utilized for entity types and fields (e.g. SObject types and fields, etc.). Furthermore, one syntax may be used to optionally access describe functionality easily (e.g. Apex syntax matches formula syntax, etc.), in addition to a convenience syntax for the tokens. Still yet, a user may switch back and forth between the use of tokes and describe structures.","It should be noted that, as an option, property access may be provided for all WSDL techniques. In this case, the getter and setter techniques may be accessed as if they were member variable read and write. Thus, if a WSDL object \u201co\u201d has an associated script getXXX( ) and setXXX( ), then \u201co.xxxx\u201d may be read and written in Apex.","In one embodiment, entity types (e.g. Account and MyCustomObject_c, etc.) may function as static classes with special static methods and member variables for accessing tokens. This may provide a level of type safety in the use of this token syntax since the script writer may explicitly reference the object type name and field names at compile time. Additionally, these references may be recorded in the metadata for the code unit as are other schema references.","In order to identify a specific entity type (i.e. in order to ask the question \u201cis this generic SObject actually an Account?\u201d), the opaque tokens may be utilized. For example, \u201cSchema.SObjectType\u201d may be the data type of the entity type token and \u201cSchema.SobjectField\u201d may be the data type of the field token.","In one embodiment, each entity type (e.g. SObject type, etc.) may have a static member called \u201csobjectType\u201d that represents this atomic token. Thus, \u201cAccount.sobjectType\u201d and \u201cMyCustomObject_c\u201d sobjectType may be the unique tokens that identify those entity types. Furthermore, these unique tokens may be utilized to determine whether an SObject or list of SObjects is of a particular SObject type. In various embodiments, this may be implemented using the techniques shown in Table 6, using a getSObjectType( ) function, in accordance with one embodiment.",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SObject s = Database.query(\u2018select id from account\u2019);"]},{"entry":[{},"System.assertEquals(s.getSObjectType( ), Account.sobjectType);"]},{"entry":[{},"List<Sobject> l = new Account[ ];"]},{"entry":[{},"System.assertEquals(l.getSObjectType( ), Account.sobjectType);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Furthermore, a formula syntax may yield the describe structure for an SObject type Schema.DescribeSobjectResult d=Schema.SobjectType.Account. It should be noted that, for convenience and for consistency with SObjectField, an SObjectType object may have a getDescribe( ) function to return the describe information. This may be particularly useful when using global describe to iterate all entity type (e.g. SObjectType, etc.) tokens.","Table 7 shows optional properties for Schema.DescribeSobjectResult, based on a WSDL object, in accordance with one embodiment.",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Name"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Accessible"]},{"entry":[{},"Activateable"]},{"entry":[{},"Activateable"]},{"entry":[{},"childRelationships"]},{"entry":[{},"Createable"]},{"entry":[{},"Custom"]},{"entry":[{},"Deletable"]},{"entry":[{},"Fields"]},{"entry":[{},"keyPrefix"]},{"entry":[{},"LocalName"]},{"entry":[{},"Label"]},{"entry":[{},"labelPlural"]},{"entry":[{},"Layoutable"]},{"entry":[{},"Listviewable"]},{"entry":[{},"lookupLayoutable"]},{"entry":[{},"Mergeable"]},{"entry":[{},"name"]},{"entry":[{},"queryable"]},{"entry":[{},"recordTypeInfos"]},{"entry":[{},"replicateable"]},{"entry":[{},"retrieveable"]},{"entry":[{},"searchLayoutable"]},{"entry":[{},"searchable"]},{"entry":[{},"triggerable"]},{"entry":[{},"undeletable"]},{"entry":[{},"updateable"]},{"entry":[{},"url*"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Table 8 shows optional properties for Schema.ChildRelationship, in accordance with one embodiment.",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Name"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"childSObject"]},{"entry":[{},"cascadeDelete"]},{"entry":[{},"relationshipName"]},{"entry":[{},"Field"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"For the accessors that describe what the current user may perform (e.g. \u201ccreatable,\u201d etc.), the value may depend on what the user may normally perform outside of a system. As an option, each field of an SObject type may be available as a member variable of type Schema.SObjectField (i.e. an atomic field token type) Schema.SObjectField=Account.AccountNumber.","To retrieve the describe information for a field, the getDescribe( ) function may be called on the SObjectField token using Schema.Field f=Account.accountNumber.getDescribe( ), or the formula syntax described above may be utilized.","Table 9 shows optional properties for Schema.Field, based on WSDL properties, in accordance with one embodiment.",{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Name"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Accessible"]},{"entry":[{},"autoNumber"]},{"entry":[{},"byteLength"]},{"entry":[{},"calculated"]},{"entry":[{},"calculatedFormula"]},{"entry":[{},"caseSensitive"]},{"entry":[{},"controller"]},{"entry":[{},"createable"]},{"entry":[{},"custom"]},{"entry":[{},"defaultValue"]},{"entry":[{},"defaultValueFormula"]},{"entry":[{},"defaultedOnCreate"]},{"entry":[{},"dependentPicklist"]},{"entry":[{},"digits"]},{"entry":[{},"externalId"]},{"entry":[{},"filterable"]},{"entry":[{},"htmlFormatted"]},{"entry":[{},"idLookup"]},{"entry":[{},"label"]},{"entry":[{},"length"]},{"entry":[{},"localName"]},{"entry":[{},"name"]},{"entry":[{},"nameField"]},{"entry":[{},"namePointing"]},{"entry":[{},"nillable"]},{"entry":[{},"picklistValues"]},{"entry":[{},"precision"]},{"entry":[{},"referenceTo"]},{"entry":[{},"relationshipName"]},{"entry":[{},"restrictedPicklist"]},{"entry":[{},"Scale"]},{"entry":[{},"soapType"]},{"entry":[{},"sortable"]},{"entry":[{},"type"]},{"entry":[{},"unique"]},{"entry":[{},"updateable"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Again, the accessors such as \u201ccreatable\u201d may return what a current user may perform, when not in system mode. For example, to retrieve the label for a field, a user may set String 1=Account.accountNumber.getDescribe( ).getLabel( ).","In one embodiment, internal to the on-demand database service, the fetching of picklist values may be done lazily by an Apex code engine, because the database associated with the on-demand database service may need to be accessed to retrieve this information. Furthermore, the information may not necessarily be cached in an application server associated with the on-demand database service. For this reason, interrogating many picklist fields may be expensive. Other lazily populated Apex data structures may include record type information and child relationships, although this information may still be available from cache.","In one embodiment, a governor limit related to picklists may be implemented. As an option, the governor limit may implemented in the context of describes in general. In another embodiment, a maximum number of fields that can be interrogated may be utilized (e.g. 10, 20, 30, etc.). Furthermore, in one embodiment, a bulk picklist \u201cpre-fetch\u201d call may be added to Apex for an entire entity. In this case, all of the fields in that entity may count as one call for this governor limit.","As an option, each entity type may allow accessing all of its fields by name via the getMap( ) function of the fields structure which represents a map from string to SObjectField. For example, Schema.SObjectField f=Account.fields.getMap( ).get(\u2018accountNumber\u2019). It should be noted that, in one embodiment, this map may use case insensitive string comparison so that the field name does not have to be in exactly the right case format. Furthermore, this may be available later to other maps such that script writers may have case insensitive maps.","As an option, the map may be used to iterate all fields for an entity type. In this way, a user may construct a SELECT query. In some cases, namespaces may not be straight forward to implement. For example, it may be desirable to have code in one namespace to be able to lookup fields and entity types in the same implicit manner as hard-coded references (e.g. without a prefix, etc.). Therefore, as an option, the map may be dynamic.","Depending on the namespace of the enclosing block, the keys in the map may be the short-hand form of the field names. Thus, if code is in namespace N1, and a field is also in N1, then the key in this map will be simple, MyField_c. However, for a field in N2 the key will be N2_MyField_c. In this case, standard fields may not have a prefix. In one embodiment, another map may be added that is based on a fully qualified name for all fields.","As mentioned above, in order to determine a type of an entity (e.g. an SObject, etc.) and collections of entities (e.g. collections of SObjects, etc.) at runtime, a getSObjectType( ) function may be provided for various types such as SObject, List<SObject>, and Map<anyKeyType, SObject>.","In one embodiment, a global describe may be utilized to access all entity types. In this case, the function Map<String, Schema.SObjectType> Schema.getGlobalDescribe( ) may return a map from SObject type name to SObjectType. In this case, tokens may be put into the map because these may be light-weight (e.g. for efficiency, etc.) as compared with the describe objects. As an option, this map may be case insensitive in the same way as the getMap( ) function.","In furtherance of obtaining structured metadata, the getDmlFields( ) function may return an array of System.SObjectField instead of an array of Strings. In this case, a new function getDmlFieldNames( ) may then be constructed to behave like the old function. In one embodiment, for backwards compatibility, getDmlFields( ) may behave as originally released where a list of strings is returned.","In some cases, script authors may wish to determine whether the current organization or user has specific permissions\/features turned on, at runtime. These features may be in the form of permissions, or preferences, etc. Thus, as an option, at least some of this information may be made publicly available by annotating udd bits with an \u201cisApexExposed\u201d setting.","Additionally, in one embodiment, campaigns permission may be available. In another embodiment, these may all turn into \u201cUserInfo\u201d static techniques. For example, a user may set Boolean b=UserInfo.orgIIasPermissionCampaigns( ). As an option, the campaign permission may be hidden. Furthermore, in various embodiments, other organization permissions, preferences, and user permissions may be exposed.","The ability to execute SOQL dynamically as a string at runtime may allow much more flexible applications. Furthermore, the ability to interrogate metadata with the describe objects and then use this information in constructing a SOQL string allows for very powerful functionality.","In one embodiment, the main dynamic SOQL function may be List<SObject> Database.query(<String>). This may return a List<SObject> expression at compile time. This function invocation may be used wherever an inline static query is used (e.g. [select id from account], etc.) in regular assignment statements as well as for loop idiom. The latter looping idiom may cursor through the results in the same way as static queries do today.","As a convenience, the loop variable in a select loop may be a concrete entity type. At runtime, it may be validated that the type of the query matches the declared type of the variable. This may prevent the need to cast constantly from generic SObject to a concrete SObject type.","This same conversion may be implemented for assignment and function arguments. That is, normal assignment to a concrete entity type, or function argument matching, may also allow the use of single entity or a list of entities without casting. This may be implemented as parser logic similar to the way automatic casting of query results may be allowed to a single concrete SObject value. As an option, a runtime error may result if the query does not return the correct type, in addition to checking for a row count of one, for single row conversion.","As another option, the function \u201cInteger Database.countQuery(<String>)\u201d may be used with a dynamic SOQL query that uses the count( ) syntax. Table 10 shows an example implementation of a dynamic SOQL query, in accordance with one embodiment.",{"@attributes":{"id":"p-0097","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 10"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Account a = Database.query(\u2018select name from Account limit 1\u2019);"]},{"entry":[{},"Contact[ ] c = Database.query(\u2018select lastName from contact\u2019);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In some cases, dynamic SOQL may not allow the user of certain features available from concrete inline queries such as count( ), FOR UPDATE, and binding, etc. In another embodiment, dynamic SOQL may allow certain features, such as count( ) queries, and other features.","In addition to being able to perform a query dynamically, it may be desirable to allow users to dynamically modify data. In this case, the generic entity type may be utilized. In one embodiment, the type of an entity or the type of a list or map of entities may be introspected using the getSobjectType( ) function described above, which may return the same SobjectType token as a static class token. Table 11 shows an example this, in accordance with one embodiment.",{"@attributes":{"id":"p-0100","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 11"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SObject s = Database.query(\u2018select name from account limit 1\u2019);"]},{"entry":[{},"System.assertEquals(Account.class, s.getSObjectType( ));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"It should be noted that equals( ) for SobjectType and SObjectField may work when the two sides represent the same SObject type or field. This may allow strongly typed referencing of schema names.","Incidentally, if a describe object is received for the same SObject type or field, the same object may be handed out for a single request. Thus, equals( ) works on DescribeSObjectResult and Field. The same getSobjectType( ) above may work for a list or map of SObjects. Table 12 shows an example of this implementation, in accordance with one embodiment.",{"@attributes":{"id":"p-0103","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 12"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Account[ ] aa = new Account[0];"]},{"entry":[{},"Schema.SobjectType t = aa.getSobjectType( );"]},{"entry":[{},"Map<String, Account> m = new Map<String, Account>( );"]},{"entry":[{},"t = m.getSobjectType( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Conversely, it may be desirable to be able to initialize a new entity of a given type. This technique may act as a factory for a generic type of entity (e.g. SObject, etc.). In one embodiment, implementing a newSObject( ) technique on SObjectType may serve this purpose as in \u201cAccount a=(Account)Account.class.newSObject( ).\u201d","In addition, partner-API-like functionality may be implemented for setting and getting values by a string name or token (e.g. an SObjectField token, etc.). As an option, these functions may be hidden behind a dynamic Apex organization permission. In one embodiment, there may be four get and four put functions for an entity (e.g. SObject, etc.) instance. Table 13, shows four get and four put functions, in accordance with one embodiment.",{"@attributes":{"id":"p-0106","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 13"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object get(String)"]},{"entry":[{},"Object get(Schema.FieldType)"]},{"entry":[{},"SObject getSObject(String)"]},{"entry":[{},"SObject getSobject(Schema.FieldType)"]},{"entry":[{},"Object put(String, Object)"]},{"entry":[{},"Object (Schema.FieldType, Object)"]},{"entry":[{},"SObject putSObject(String, SObject)"]},{"entry":[{},"SObject putSObject(Schema.FieldType SObject)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"For each of these functions, either the name of a field or its token (e.g. an SObjectField token, etc.) may be accepted. It should be noted that for foreign keys, a scalar ID value may be read or written using get( ) or put( ). In order to read or write the foreign key object, however, the getSObject and putSObject functions may be utilized.","It should be noted that, that the field token generated for foreign keys may be either a standard field name ending with an ID (e.g. Contact.AccountId, etc.), or the \u201c_c\u201d form of a custom foreign key. As an option, this token may be used for the putSObject function. As another option, relationship name tokens, such as \u201c_r\u201d tokens, may be generated. In this case, the getSObject( ) function may be renamed to get( ) because the argument type would be a new type of relationship token. Table 14 shows an example implementation of this, in accordance with one embodiment.",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 14"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SObject s = [select accountNumber from account limit 1];"]},{"entry":[{},"Object o = s.get(\u2018AccountNumber\u2019);"]},{"entry":[{},"s.put(\u2018AccountNumber\u2019, \u2018abc\u2019);"]},{"entry":[{},"User u = (User)s.getSobject(Account.OwnerId);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"It should be noted that the introduction of the new \u201cObject\u201d scalar type above may serve as a base type for all data scalar types (e.g. String, Integer, Date, etc.). As an option, \u201cObject\u201d may support casting and instance of with these scalar types. Thus, given an \u201cObject\u201d expression, it may be determined whether the expression contains a String, ID, or Datetime, etc.","It should be noted that, in general, Apex calls for explicit conversion of data types. For instance, strings and numbers may not be implicitly converted. One of the conversion system functions should be called. These may cause runtime exceptions if the value is not convertible, such as when a string is not a valid number.","In addition to the descriptions above, in other embodiments, various other functionality may be implemented. For example, in one embodiment, numbers may form a hierarchy of types. For example, the hierarchy may be integer, long, double, and decimal.","Furthermore, in one embodiment, values of lower types may always be assigned to higher types without conversion. In this case, an Integer may be assigned to a Long, or passed as a Long value. However, once passed, the value may be converted to the higher type.","Still yet, as mentioned above, instance of may work with scalar types. Table 15 shows an implementation of this, in accordance with one embodiment.",{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 15"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Integer i = 1;"]},{"entry":[{},"\/\/ Converts the value to Long - no longer an Integer"]},{"entry":[{},"Long lg = i;"]},{"entry":[{},"System.assert(!(lg instanceof Integer));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 3","b":["310","310","310","312","314","316","317","318","320","322","324","326","328","310"]},"Environment  is an environment in which an on-demand database service exists. User system  may be any machine or system that is used by a user to access a database user system. For example, any of user systems  can be a handheld computing device, a mobile phone, a laptop computer, a work station, and\/or a network of computing devices. As illustrated in  (and in more detail in ) user systems  might interact via a network with an on-demand database service, which is system .","An on-demand database service, such as system , is a database system that is made available to outside users that do not need to necessarily be concerned with building and\/or maintaining the database system, but instead may be available for their use when the users need the database system (e.g., on the demand of the users). Some on-demand database services may store information from one or more tenants stored into tables of a common database image to form a multi-tenant database system (MTS). Accordingly, \u201con-demand database service \u201d and \u201csystem \u201d will be used interchangeably herein. A database image may include one or more database objects. A relational database management system (RDMS) or the equivalent may execute storage and retrieval of information against the database object(s). Application platform  may be a framework that allows the applications of system  to run, such as the hardware and\/or software, e.g., the operating system. In an embodiment, on-demand database service  may include an application platform  that enables creation, managing and executing one or more applications developed by the provider of the on-demand database service, users accessing the on-demand database service via user systems , or third party application developers accessing the on-demand database service via user systems .","The users of user systems  may differ in their respective capacities, and the capacity of a particular user system  might be entirely determined by permissions (permission levels) for the current user. For example, where a salesperson is using a particular user system  to interact with system , that user system has the capacities allotted to that salesperson. However, while an administrator is using that user system to interact with system , that user system has the capacities allotted to that administrator. In systems with a hierarchical role model, users at one permission level may have access to applications, data, and database information accessible by a lower permission level user, but may not have access to certain applications, database information, and data accessible by a user at a higher permission level. Thus, different users will have different capabilities with regard to accessing and modifying application and database information, depending on a user's security or permission level.","Network  is any network or combination of networks of devices that communicate with one another. For example, network  can be any one or any combination of a LAN (local area network), WAN (wide area network), telephone network, wireless network, point-to-point network, star network, token ring network, hub network, or other appropriate configuration. As the most common type of computer network in current use is a TCP\/IP (Transfer Control Protocol and Internet Protocol) network, such as the global internetwork of networks often referred to as the \u201cInternet\u201d with a capital \u201cI,\u201d that network will be used in many of the examples herein. However, it should be understood that the networks that the present invention might use are not so limited, although TCP\/IP is a frequently implemented protocol.","User systems  might communicate with system  using TCP\/IP and, at a higher network level, use other common Internet protocols to communicate, such as HTTP, FTP, AFS, WAP, etc. In an example where HTTP is used, user system  might include an HTTP client commonly referred to as a \u201cbrowser\u201d for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system  and network , but other techniques might be used as well or instead. In some implementations, the interface between system  and network  includes load sharing functionality, such as round-robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server, each of the plurality of servers has access to the MTS' data; however, other alternative configurations may be used instead.","In one embodiment, system , shown in , implements a web-based customer relationship management (CRM) system. For example, in one embodiment, system  includes application servers configured to implement and execute CRM software applications as well as provide related data, code, forms, webpages and other information to and from user systems  and to store to, and retrieve from, a database system related data, objects, and Webpage content. With a multi-tenant system, data for multiple tenants may be stored in the same physical database object, however, tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant's data, unless such data is expressly shared. In certain embodiments, system  implements applications other than, or in addition to, a CRM application. For example, system  may provide tenant access to multiple hosted (standard and custom) applications, including a CRM application. User (or third party developer) applications, which may or may not include CRM, may be supported by the application platform , which manages creation, storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .","One arrangement for elements of system  is shown in , including a network interface , application platform , tenant data storage  for tenant data , system data storage  for system data accessible to system  and possibly multiple tenants, program code  for implementing various functions of system , and a process space  for executing MTS system processes and tenant-specific processes, such as running applications as part of an application hosting service. Additional processes that may execute on system  include database indexing processes.","Several elements in the system shown in  include conventional, well-known elements that are explained only briefly here. For example, each user system  could include a desktop personal computer, workstation, laptop, PDA, cell phone, or any wireless access protocol (WAP) enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system  typically runs an HTTP client, e.g., a browsing program, such as Microsoft's Internet Explorer browser, Netscape's Navigator browser, Opera's browser, or a WAP-enabled browser in the case of a cell phone, PDA or other wireless device, or the like, allowing a user (e.g. subscriber of the multi-tenant database system) of user system  to access, process and view information, pages and applications available to it from system  over network . Each user system  also typically includes one or more user interface devices, such as a keyboard, a mouse, trackball, touch pad, touch screen, pen or the like, for interacting with a graphical user interface (GUI) provided by the browser on a display (e.g. a monitor screen, LCD display, etc.) in conjunction with pages, forms, applications and other information provided by system  or other systems or servers. For example, the user interface device can be used to access data and applications hosted by system , and to perform searches on stored data, and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above, embodiments are suitable for use with the Internet, which refers to a specific global internetwork of networks. However, it should be understood that other networks can be used instead of the Internet, such as an intranet, an extranet, a virtual private network (VPN), a non-TCP\/IP based network, any LAN or WAN or the like.","According to one embodiment, each user system  and all of its components are operator configurable using applications, such as a browser, including computer code run using a central processing unit such as an Intel Pentium\u00ae processor or the like. Similarly, system  (and additional instances of an MTS, where more than one is present) and all of their components might be operator configurable using application(s) including computer code to run using a central processing unit such as processor system  of , which may include an Intel Pentium\u00ae processor or the like, and\/or multiple processor units. A computer program product embodiment includes a machine-readable storage medium (media) having instructions stored thereon\/iii which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system  to intercommunicate and to process webpages, applications and other data and media content as described herein are preferably downloaded and stored on a hard disk, but the entire program code, or portions thereof, may also be stored in any other volatile or non-volatile memory medium or device as is well known, such as a ROM or RAM, or provided on any media capable of storing program code, such as any type of rotating media including floppy disks, optical discs, digital versatile disk (DVD), compact disk (CD), microdrive, and magneto-optical disks, and magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data. Additionally, the entire program code, or portions thereof, may be transmitted and downloaded from a software source over a transmission medium, e.g., over the Internet, or from another server, as is well known, or transmitted over any other conventional network connection as is well known (e.g. extranet, VPN, LAN, etc.) using any communication medium and protocols (e.g. TCP\/IP, HTTP, HTTPS, Ethernet, etc.) as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and\/or server or server system such as, for example, C, C++, HTML, any other markup language, Java\u2122, JavaScript, ActiveX, any other scripting language, such as VBScript, and many other programming languages as are well known may be used. (Java\u2122 is a trademark of Sun Microsystems, Inc.).","According to one embodiment, each system  is configured to provide webpages, forms, applications, data and media content to user (client) systems  to support the access by user systems  as tenants of system . As such, system  provides security mechanisms to keep each tenant's data separate unless the data is shared. If more than one MTS is used, they may be located in close proximity to one another (e.g. in a server farm located in a single building or campus), or they may be distributed at locations remote from one another (e.g. one or more servers located in city A and one or more servers located in city B). As used herein, each MTS could include one or more logically and\/or physically connected servers distributed locally or across one or more geographic locations. Additionally, the term \u201cserver\u201d is meant to include a computer system, including processing hardware and process space(s), and an associated storage system and database application (e.g. OODBMS or RDBMS) as is well known in the art. It should also be understood that \u201cserver system\u201d and \u201cserver\u201d are often used interchangeably herein. Similarly, the database object described herein can be implemented as single databases, a distributed database, a collection of distributed databases, a database with redundant online or offline backups or other redundancies, etc., and might include a distributed database or storage network and associated processing intelligence.",{"@attributes":{"id":"p-0127","num":"0126"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 4"],"b":["310","316","312","312","312","312","312","314","316","316","322","323","324","325","430","432","434","436","438","400","400","402","404","410","412","414","416","310"],"sub":["1","N"]},"User system , network , system , tenant data storage , and system data storage  were discussed above in . Regarding user system , processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices, short term, and\/or long term memory. Input system C may be any combination of input devices, such as one or more keyboards, mice, trackballs, scanners, cameras, and\/or interfaces to networks. Output system D may be any combination of output devices, such as one or more monitors, printers, and\/or interfaces to networks. As shown by , system  may include a network interface  (of ) implemented as a set of HTTP application servers , an application platform , tenant data storage , and system data storage . Also shown is system process space , including individual tenant process spaces  and a tenant management process space . Each application server  may be configured to tenant data storage  and the tenant data  therein, and system data storage  and the system data  therein to serve requests of user systems . The tenant data  might be divided into individual tenant storage areas , which can be either a physical arrangement and\/or a logical arrangement of data. Within each tenant storage area , user storage  and application metadata  might be similarly allocated for each user. For example, a copy of a user's most recently used (MRU) items might be stored to user storage . Similarly, a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI  provides a user interface and an API  provides an application programmer interface to system  resident processes to users and\/or developers at user systems . The tenant data and the system data may be stored in various databases, such as one or more Oracle\u2122 databases.","Application platform  includes an application setup mechanism  that supports application developers' creation and management of applications, which may be saved as metadata into tenant data storage  by save routines  for execution by subscribers as one or more tenant process spaces  managed by tenant management process  for example. Invocations to such applications may be coded using PL\/SOQL  that provides a programming language style interface extension to API . A detailed description of some PL\/SOQL language embodiments is discussed in commonly owned U.S. Provisional Patent Application 60\/828,192 entitled, \u201cPROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS,\u201d by Craig Weissman, filed Oct. 4, 2006, which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes, which manage retrieving application metadata  for the subscriber making the invocation and executing the metadata as an application in a virtual machine.","Each application server  may be communicably coupled to database systems, e.g., having access to system data  and tenant data , via a different network connection. For example, one application server might be coupled via the network  (e.g., the Internet), another application server might be coupled via a direct network link, and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol (TCP\/IP) are typical protocols for communicating between application servers  and the database system. However, it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.","In certain embodiments, each application server  is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason, there is preferably no server affinity for a user and\/or organization to a specific application server . In one embodiment, therefore, an interface system implementing a load balancing function (e.g., an F5 Big-IP load balancer) is communicably coupled between the application servers  and the user systems  to distribute requests to the application servers . In one embodiment, the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms, such as round robin and observed response time, also can be used. For example, in certain embodiments, three consecutive requests from the same user could hit three different application servers , and three requests from different users could hit the same application server . In this manner, system  is multi-tenant, wherein system  handles storage of, and access to, different objects, data and applications across disparate users and organizations.","As an example of storage, one tenant might be a company that employs a sales force where each salesperson uses system  to manage their sales process. Thus, a user might maintain contact data, leads data, customer follow-up data, performance data, goals and progress data, etc., all applicable to that user's personal sales process (e.g., in tenant data storage ). In an example of a MTS arrangement, since all of the data and the applications to access, view, modify, report, transmit, calculate, etc., can be maintained and accessed by a user system having nothing more than network access, the user can manage his or her sales efforts and cycles from any of many different user systems. For example, if a salesperson is visiting a customer and the customer has Internet access in their lobby, the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.","While each user's data might be separate from other users' data regardless of the employers of each user, some data might be organization-wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus, there might be some data structures managed by system  that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors, the MTS should have security protocols that keep data, applications, and application use separate. Also, because many tenants may opt for access to an MTS rather than maintain their own system, redundancy, up-time, and backup are additional functions that may be implemented in the MTS. In addition to user-specific data and tenant-specific data, system  might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports, news, postings, and the like that are sharable among tenants.","In certain embodiments, user systems  (which may be client systems) communicate with application servers  to request and update system-level and tenant-level data from system  that may require sending one or more queries to tenant data storage  and\/or system data storage . System  (e.g., an application server  in system ) automatically generates one or more SQL statements (e.g., one or more SQL queries) that are designed to access the desired information. System data storage  may generate query plans to access the requested data from the database.","Each database can generally be viewed as a collection of objects, such as a set of logical tables, containing data fitted into predefined categories. A \u201ctable\u201d is one representation of a data object, and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that \u201ctable\u201d and \u201cobject\u201d may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example, a CRM database may include a table that describes a customer with fields for basic contact information such as name, address, phone number, fax number, etc. Another table might describe a purchase order, including fields for information such as customer, product, sale price, date, etc. In some multi-tenant database systems, standard entity tables might be provided for use by all tenants. For CRM database applications, such standard entities might include tables for Account, Contact, Lead, and Opportunity data, each containing pre-defined fields. It should be understood that the word \u201centity\u201d may also be used interchangeably herein with \u201cobject\u201d and \u201ctable\u201d.","In some multi-tenant database systems, tenants may be allowed to create and store custom objects, or they may be allowed to customize standard entities or objects, for example by creating custom fields for standard objects, including custom index fields. U.S. patent application Ser. No. 10\/817,161, filed Apr. 2, 2004, entitled \u201cCUSTOM ENTITIES AND FIELDS IN A MULTI-TENANT DATABASE SYSTEM,\u201d which is hereby incorporated herein by reference, teaches systems and methods for creating custom objects as well as customizing standard objects in a multi-tenant database system. In certain embodiments, for example, all custom entity data rows are stored in a single multi-tenant physical table, which may contain multiple logical tables per organization. It is transparent to customers that their multiple \u201ctables\u201d are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.","It should be noted that any of the different embodiments described herein may or may not be equipped with any one or more of the features set forth in one or more of the following published applications: US2003\/0233404, titled \u201cOFFLINE SIMULATION OF ONLINE SESSION BETWEEN CLIENT AND SERVER,\u201d filed Nov. 4, 2002; US2004\/0210909, titled \u201cJAVA OBJECT CACHE SERVER FOR DATABASES,\u201d filed Apr. 17, 2003, now issued U.S. Pat. No. 7,209,929; US2005\/0065925, titled \u201cQUERY OPTIMIZATION IN A MULTI-TENANT DATABASE SYSTEM,\u201d filed Sep. 23, 2003; US2005\/0223022, titled \u201cCUSTOM ENTITIES AND FIELDS IN A MULTI-TENANT DATABASE SYSTEM,\u201d filed Apr. 2, 2004; US2005\/0283478, titled \u201cSOAP-BASED WED SERVICES IN A MULTI-TENANT DATABASE SYSTEM,\u201d filed Jun. 16, 2004; and\/or US2006\/0206834, titled \u201cSYSTEMS AND METHODS FOR IMPLEMENTING MULTI-APPLICATION TABS AND TAB SETS,\u201d filed Mar. 8, 2005; which are each incorporated herein by reference in their entirety for all purposes.","While the invention has been described by way of example and in terms of the specific embodiments, it is to be understood that the invention is not limited to the disclosed embodiments. To the contrary, it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore, the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 3"]}]},"DETDESC":[{},{}]}
