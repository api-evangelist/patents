---
title: System for configuration programming
abstract: In a development platform, a classifier for a given application defines a data model of an application model as a pattern (an object model) from a finite number of patterns (object models) that represent the possible permutations of data models. In addition, the development platform has a finite number of service objects that perform various functions/services on the object model from which the application model adopts one or more service objects. The object models and the service objects are generic to the development platform and usually a set of finite number of object models and a set of finite number of service objects can interface the application model with the various third party resources and tools.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06925632&OS=06925632&RS=06925632
owner: 
number: 06925632
owner_city: 
owner_country: 
publication_date: 20011102
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority to U.S. Provisional Application Ser. No. 60\/274,333 filed Mar. 8, 2001.","1. Field of the Invention","The invention relates to application software and systems for creating software applications. More particularly, it relates to a data model oriented system, which allows rapid creation of software applications based upon modules for handling a finite set of data patterns.","2. Discussion of the Related Art","Generally, systems for creating software applications require extensive time from highly experienced programmers. Each part or feature of a software application has to be designed, coded, compiled, and debugged. Then, the parts have to be tested to ensure that they operate together. Since most applications included may different parts, the procedure is very complex. Many applications also need to operate with existing third party resources and tools. In creating a software application, interfaces must be created for each third party resource or tool. Furthermore, a software application is dependent upon a specific platform or operating environment. In order to transfer the application to another platform requires complete reprogramming.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1","b":["130","130"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1","b":["100","110","120","110","130","130","120","120","110","110","120"]},"A programmer usually needs to understand the operating and programming environment of the resources and tools to interface with them. This typically requires a highly specialized and skilled programmer(s) to perform the various tasks of programming. Highly skilled programmers are difficult to train and retain. In addition, the various but disparate programs need to operate homogeneously for the application model to operate smoothly with the various resources and tools. However, such integration is difficult to achieve and exemplifies the development complexity of interfacing one or more application models to the various resources and tools.","Therefore, a need exists for a data independent, application programming system which does not require reprogramming based upon data changes. A need exists for a system which simplifies the programming process to allow reuse of previously created code. A need further exists for a system which is platform independent. A need exists for a system which allows common interfaces with third party resources.","The deficiencies of the prior art are substantially overcome by the present invention which provides a data model based system for programming. The system of the present invention is based upon a fixed set of data patterns or objects: primitive, class and object array. The data patterns can also be recursively defined. A set of service modules is created for performing various functions with respect to different data patterns. The service modules are organized to provide program flow from one module to another. In order to create an application within the system of the present invention, a data model is created which represents all of the data of the application as corresponding data patterns. The service modules are then selected and organized to provide desired functionality in conjunction with the data model. In this manner, applications can be created quickly from preexisting modules.","Furthermore, in the system of the present invention, the modules provide the interaction between data and resources. In this manner, the application is resource independent. A change in a resource, such as a hardware platform, merely requires selection of an appropriate module for interfacing with that resource. The system of the present invention further uses a hierarchical approach for organizing modules to allow enhanced use for rapid software creation. Thus, many functions can be performed without limitations from the specific resources of the system.","The present invention is a data-oriented system for rapid creation of application programs. The system is based upon the principle that all data can be modeled by a finite set of data patterns. Stored service object modules provide desired functionality based upon the known data patterns. The service objects maintain the interfaces to desired resources and provide a unified interface. In order to create an application in accordance with the present invention, the creator only needs to create a data model of the application data based upon the finite set of data patterns, select appropriate service object modules for providing desired functionality, and determine the flow or order of operation of the service objects. If specific functionality is required beyond that provided by exiting service object, new service objects can be created. The new service objects become part of the system and can be utilized for future programming.","In general, the components that comprise an application program according to the present invention are:\n\n","The data model describes data structures representing the application data based upon basic data patterns. The service objects, which are software components, provide the functional or business processes of the application. These software components are linked into a flow to invoke services and\/or to operate on the data and interface with resources. The manner in which the software components are linked is the flow logic of the application model. Results of the functional or business processes performed on the data model can be presented in a form compatible to a physical device (such as a computer monitor or a printer) or in a form compatible to an application software in memory. The components and operation of an application program according to the present invention can be better understood in relation to the process for creating the application program.","In a development platform of the present invention, a classifier defines a data model as a specific set of object models corresponding to application data based upon a finite number of basic data patterns. The object models define all application data within the limitations of the basic data patterns. Furthermore, the object models can be defined recursively to create complex data structures using the basic data patterns. In addition, the development platform has a set of selectable service objects that perform various functions\/services on object models. At run time, the service objects recognize the basic data patterns within an object model and selectively operate in accordance with the defined the basic data patterns. Since the operation of the service objects is independent of the application data, changes in application data does not require changes to the service objects. The service objects usually represent functions\/services that provide for the interfacing with the various third party resources and tools. The bridge between the development platform and the Application Programming Interfaces (APIs) of the third party resources and tools can be performed by storing and implementing service objects that are compatible with the third party APIs and are also compatible with the defined object model of the data model.",{"@attributes":{"id":"p-0023","num":"0025"},"figref":["FIG. 2","FIG. 2"],"b":["200","200","200","210","220","200","200"]},"The object development module  translates the data of an application model  in a manner that is generic to the development platform . In particular, the data model of the application model is defined as a set of object models based upon basic data patterns. The classification method will be described with reference to FIG. . This allows various functions of the object API module  to be applied to the object models based on the basic patterns.","With reference to  in conjunction with , the object development module  creates a data dictionary  which defines the object models.  illustrates a process for creation of the data dictionary . The process includes a classifier , a data dictionary database  and a data dictionary manager . The data dictionary  is developed to represent the data for specified application data. Turning to the classifier , generally a data model  can be defined from a potentially infinite number of possible data formats. However, in accordance with the invention, these possible data formats can be classified as object models . The object models are based upon a finite number of basic data patterns recognized in the development platform . The classifier  performs this task by classifying a data model  into a set of object models  having the following basic data patterns:","primitive;","class; and","object array.","A primitive represents a basic element. It can be data such as Boolean, Short, Integer, Long, Float, Double, Date, Time, Date & Time, Currency, Business Calendar, Alphanumeric Characters, Big Integer and so forth. A class represents structured data. It is composed of multiple attributes, each of which is also one of the basic data patterns. An object array is an array with a set of objects, all having the same basic data pattern, as its child elements. It should be noted that a characteristic of the class and object array types is their recursive nature. An attribute of a class or element of an object array can be another class or object array. This recursiveness of certain object types provide for creation of a complex data model from a finite set of basic data patterns.","Using the classification method described above, a finite number of possible data patterns used to define a data model  that can have a potentially infinite number of possible variations. Thus, only a finite number of data patterns in the object models  need to be interpreted. The classifier  can operate in various ways. It can be a program which receives information regarding the data model  corresponding to the application model  and automatically map the data model  to an appropriate set of object models . Alternatively, a programmer could simply use a text editor program to enter information defining the object models  in a format recognized by the system. Preferably, the development platform  includes an interactive program to aid a user in creating appropriate object models  for a data model .","Once properly classified, the object models  are stored in the data dictionary database . Again, the data dictionary database may take many forms. An example of the data dictionary database  with definitions for different object models  is provided in the appendix hereto. The object models  in the data dictionary database  must be uniquely identified so that they can be properly accessed. The unique identification can be done with a unique name or a unique identification number (ID) in the data dictionary database .","With the object models  stored in the data dictionary database , the object API module  can now be utilized to select and organize the various functions to be performed on the data of the object models .",{"@attributes":{"id":"p-0033","num":"0035"},"figref":"FIG. 4","b":["220","410","410","330","220","410","410","420","420","330","420","420","410","410","420","420","330"],"sub":["1","N ","1","N ","1","M ","1","M ","1","N ","1","M "]},"One feature of the service object -is that it performs a function\/service on one or more object models  based on the pattern information of the object models  from the data dictionary database . During operation, prior to the performance of a service object, the object API module  calls the data dictionary manager , which manages all the object models  that are stored in the data dictionary database . The object API module  accesses the object models  in the data dictionary database  which are relevant to the operation of the service object to determine the data patterns of those object model . Once the determination is made, the object API module  passes the data patterns to the pertinent service object that is to perform the functional\/service process. Because there are only a finite number of data patterns with which an object model  can be represented, a service object -having a finite set of functions\/services can be designed to address each possible data pattern of the object models . Therefore, once the data pattern of an object model  has been identified, a dispatching takes place within the service object -to perform an appropriate function\/service process for the data pattern of a particular object model . Since object models  can be defined recursively, the appropriate function\/service process could also be recursive.","It should be noted that because the object model  is processed based on the identified pattern, a change in the object model  will be recognized by the object API module  at runtime when it interrogates the data dictionary database  via the data dictionary manager  and this information is passed to the service object -prior to the service object's -performance. The service object -being informed of the changed pattern processes the object model  in accordance with the changed pattern. This feature is advantageous in that it allows the data model  (and thus, the separate object models ) to be dynamically altered, which will be detected and the object models  are processed accordingly. Specifically, the service object -performing processes on an object model  will recognize the current data patterns and dynamically alter its process to adapt to the modified object model . The features described above allows for the runtime reconfiguration of the data model  of the application model , which is advantageous over a previously known method that requires the program codes to be reprogrammed, linked, compiled and debugged whenever the data model  is modified.","Another aspect of the invention is the event driven approach between the application model  and the service objects -, or program flow. Specifically, the data model  (in object model  form) and associated service objects -are configured based on flow to link services, where various utility functions (business functions) that are performed on the object model  are event driven by data change and\/or event and not code driven as in previously known programming approaches. According to one aspect of the invention, the object models  and service objects -are linked such that one or more data changes in an object model  causes specified service objects -to be notified of the data changes. With reference to , the object model  may include a data change registry  that provides for any service object (such as service object A) to register for notification on various data changes. When a data change occurs at the object model , the registered service object (service object A) is notified and the service object determines if the data change is a change that requires processing. If the service object so determines then the service object performs a process based on the data change. According to the aspect of the invention, the object model notifies the relevant service objects of the data change but does not actively cause the service objects to perform a process due to the data change. Instead, the service object makes that determination upon receiving notification. Additionally, a process performed by the service object may also cause a data change that affects other service objects (such as service object B). In this instance, the service object may be configured to trigger a notification to other service objects upon execution or completion.","Continuing with , a flow process of an event driven approach is illustrated in accordance with the invention. At stage , a data change has occurred in the object model . The object model  accesses the data change registry  to determine which service objects should be notified of the data change (the service objects have previously registered for notification of the various data changes). Once the determination is made, the object model  notifies the pertinent service objects of the data change. At stage , service object A receives notification that a data change has occurred. The service object A determines whether the data change requires performance of a process and if so, service object A performs the process. At stage , the service object A outputs the result of the process which may have caused further data change in the object model and may affect other service objects. In one embodiment, the object model A reviews its data change registry to determine if the data change requires notification to other service objects. In this instance, the service object A determines that service object B requires notification and notifies service object B of the data change. At stage , the service object B receives a notification from service object A and determines whether the data change is of the type that requires processing. If so, the function B block performs the required process and outputs the result of the process. This flow process may be repeated for other service objects until the flow process triggered by the data change has been satisfied.","Turning back to , the object API Module  interface bridges with the specific APIs of the resources and tools of the third party. In accordance with one embodiment, the classification method (e.g., primitive, class, object array) that sets the finite set of object models of data models is iterated against the third party APIs to determine which object models are recognized by the third party APIs. For instance, the classification method is iterated against a transport tool JMS, wherein a list of object models that are recognized by the JMS is compiled and device drivers based on the object models are built and stored within the object API module. Thus, when an object model of a data model is to be interfaced with JMS, the object API module determines which device driver can be used to allow the object model to be interfaced. Alternatively, the object models that allow for the interface with JMS, for example, may be stored in the object API module and when an object model of a data model is to be interfaced with JMS, the classifier begins an iteration process on the object model that transforms the object model pattern into one recognized by the JMS. The transformed model is then interfaced with JMS.","According to one aspect of the invention, for each service object, a fixed pattern of input and output parameters can be defined so that all the service objects have uniform APIs, thereby significantly simplifying the programming logic.","According to various aspects of the invention, a programming tool may take a data model of the application model and perform an iterative process using classification of primitive, class and object array to define a pattern that describes the data model, which is stored in the data dictionary as an object model. A complete change in the data model may require the re-use of the programming tool to define an object model; however certain alterations and modifications may be performed by a data dictionary Editor that implements the changes during the runtime. Because there are finite services available in the object API module, the service objects may be displayed in templates of a GUI that are dragged and dropped into programs during creation of the application module. In one embodiment, the language that is used to construct an application model may be Extensible Markup Language (XML) but other languages may be used to construct the application model.","The present invention is not limited to a development platform which operates as described above. Rather, any development process can be used within the meaning of the present invention which creates a set of object models for representing data and a set of service objects for performing functions with respect to the object models.","Embodiments of the invention provides various benefits such as reduced programming time, reduced programming code size and programming may be performed by less specialized programmers. Having thus far described at least one illustrative embodiment of the invention, various alterations, modifications and improvements will readily occur to those skilled in the art. Such alterations, modifications and improvements are intended to be within the scope and spirit of the invention. Accordingly, the foregoing description is by way of example only and is not intended as limiting. Accordingly, the invention is defined by the following claims and equivalents thereof."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For better understanding of the invention, reference is made to the drawings which are incorporated herein by reference and in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
