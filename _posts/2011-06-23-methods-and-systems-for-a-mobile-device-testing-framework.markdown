---
title: Methods and systems for a mobile device testing framework
abstract: A mobile device test framework is used in combination with client controllers and device controllers so that a single mobile device API test can be used with mobile devices having different operating system platforms. The client controllers can provide information specific to the client and the device controllers can provide information needed to apply the test to each of the mobile device platforms. The test framework can navigate through the controls of the mobile device GUIs and input information. The test framework can then check that the text and images displayed by the mobile devices match the expected information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08620305&OS=08620305&RS=08620305
owner: salesforce.com, inc.
number: 08620305
owner_city: San Francisco
owner_country: US
publication_date: 20110623
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application No. 61\/357,964 entitled, METHODS AND SYSTEMS FOR IMPLEMENTING A MOBILE TESTING FRAMEWORK, by Singh, et al., filed Jun. 23, 2010.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","One or more implementations relate generally to methods and system for a mobile device test framework that is compatible with various mobile devices having different operating systems.","In conventional mobile device test framework software such as software as a service (SaaS), different test framework software must be developed for different mobile devices that use the software. For example, the Apple iPhone use an operating system written in objective C programming language, the Research In Motion, Blackberry and Google Android devices uses an operating system written in Java and MicroSoft windows devices uses an operating system written in C++. An approach to dealing with the different mobile device operating system languages has been to develop different frameworks for each different mobile device operating system language and test each framework individually to determine if the test framework is correct.","Unfortunately, conventional mobile device test frameworks are inefficient because a test framework must be developed and individually tested for each mobile platform. Further, when one mobile test framework is modified, this change must be applied to all other mobile test frameworks.","Accordingly, it is desirable to provide a single mobile device test framework that can be used with mobile devices having different operating systems to improve performance and efficiency of the testing of the mobile device test framework.","In accordance with embodiments, there are provided mechanisms and methods for a single mobile test framework in an online demand service environment that can be used to test application software on multiple mobile device platforms and test environments. These mechanisms and methods can enable embodiments to provide more efficient and flexible testing of application software on mobile devices because only a single test framework may be needed to test multiple mobile device platforms. The single testing framework can be used to test the GUI software on various different mobile devices having multiple operating systems. A benefit of the single test framework is that only one test framework software code needs to be written for all platforms which significantly reduces the amount of time and computer program code needed to develop the SaaS product.","In an embodiment and by way of example, methods and systems for a mobile test framework is written in a single programming language and tested on many different mobile device platforms, such as: iOS, Android, Blackberry, etc. The general methodology employed in the testing framework is to abstract out the mobile device environment to allow individual test execution across multiple mobile devices and run environments. Each mobile device platform includes specific characteristics including: device options, device types and run environments. Each of these characteristics can be processed as parameters by the system during testing to allow the same test to be switched between the different platforms and operating environments. For example, the testing framework can be written in JAVA","While one or more implementations and techniques are described with reference to an embodiment of the mobile test framework in an online demand service environment is implemented in a system having an application server providing a front end for an on-demand database service capable of supporting multiple tenants, the one or more implementations and techniques are not limited to multi-tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures, i.e., ORACLE\u00ae, DB2\u00ae by IBM and the like without departing from the scope of the embodiments claimed.","Any of the above embodiments may be used alone or together with one another in any combination. The one or more implementations encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art, which may be discussed or alluded to in one or more places in the specification, the embodiments do not necessarily address any of these deficiencies. In other words, different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification, and some embodiments may not address any of these deficiencies.","Systems and methods are provided for a mobile device testing framework in an online demand service environment.","As used herein, the term multi-tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example, a given application server may simultaneously process requests for a great number of customers, and a given database table may store rows for a potentially much greater number of customers. As used herein, the term query plan refers to a set of steps used to access information in a database system.","Next, mechanisms and methods for providing mobile device testing framework in an online demand service environment will be described with reference to example embodiments.","The following detailed description will first describe setting up data for the application in accordance with aspects and embodiments.","The SaaS Mobile Test Framework provides end-to-end automated testing of critical mobile application functionality. Test Framework can perform various functions such as creating a new record on an actual device, propagating that new record over the carrier network to Universal Data Access Server (UDAS), verifying the new record creation in the SaaS database using the SaaS Application Programming Interface (API) and other functions.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["105","103","101","105","103","107","103","115","103","107","103","101"]},"In an embodiment, the SaaS API software  can be tested on the mobile device  using a mobile test framework  and a mobile test API  connected between the SaaS API  and the SaaS website . The mobile test framework  store test, client, mobile device and other information on a test framework database . The mobile test framework  and a mobile test API  can monitor and test the operation of the SaaS API  and the software on the SaaS website . The test framework  and mobile test API  can be universal in its ability to operate with various different mobile device operating systems. Thus, the illustrated configuration can be used for any type of SaaS software and various types of mobile device operating systems including: iPhone, Blackberry, Android and Windows operating systems. The mobile device test framework is more efficient because a single mobile test API is compatible with any mobile device operating system and any mobile device.","With reference to , a representation of an embodiment of the mobile test system is illustrated. The mobile test framework  can include several components including: a presentation component , an execution component , a test component  and a framework component . These components in the mobile test framework  can work together to perform testing of applications running on various mobile devices , ,  each operating on different operating system platforms. In this illustrated configuration, the mobile test framework  is coupled to a first client mobile test API . The first client mobile test API  can include a first client controller  and multiple device controllers , ,  that are connected to the corresponding mobile devices , , . Thus, a single test framework  can be written in a single programming language and used in combination with the first client mobile test API  to test mobile devices , ,  in a first environment . Because the device controllers , ,  perform the protocol processing for the mobile devices , , , the test case author may only need to describe these mobile device actions or operations in the most high-level terms that are not device specific. Thus, these high level terms may be applicable to all device platforms that are supported by the SaaS provider.","In this embodiment, tests from the mobile test framework  are transmitted through the first client controller  and the first device controller  to the first device  having a first operating system. The first client controller  can apply platform independent information about the first client and the first device controller  can apply information about the first device platform so the test can be applied to the first mobile device . The same test can be applied through the mobile test framework  to the first client controller  to a second device controller  that can apply information about the second device platform so the same test can be applied to the second mobile device . The test can also be applied through the mobile test framework  to the first client controller  to a third device controller  that can apply information about the third device platform so the same test can be applied to the third mobile device . Thus, rather than requiring a different test frameworks for each mobile device platform, a single mobile device test framework  can be used with multiple device controllers , ,  to test all of the mobile platforms used by the client. Although three device controllers , ,  and three mobile devices , ,  are illustrated, in other embodiments, any number of device controllers and mobile devices can be used with the illustrated test system.","The test frame system has been described with reference to a single client controller. However, in other embodiments, the system can also be used to test mobile devices operating on multiple client controllers. With reference to , another representation of an embodiment of the mobile test system having a single mobile device test framework  used with multiple clients is illustrated. In this embodiment, the mobile test framework  is used with multiple client controllers , ,  and can represent an expanded version of the system illustrated in . Each of the client controllers , ,  can provide information about the client. Thus, the first client controller  can provide information about the first client, the second client controller  can provide information about the second client and the third client controller  can provide information about the third client. The client controllers , ,  can communicate with the corresponding mobile device controllers , , . Each set of mobile device controllers , ,  can include multiple mobile device interfaces which can communication with the different mobile device platforms , ,  in the corresponding test environments , , . The mobile device controllers , ,  can be the same or different depending upon the types of mobile device platforms that are supported by the clients. Similarly, the test environments , ,  can be determined by the clients. Although three client controllers , ,  are illustrated, in other embodiments, any number of client controllers can be used with the single test framework .","In an embodiment, there can be one or more client controller classes for each client. There can be more client controllers if there are more than one set of client applications. Each client controller for a single client can each utilize a set of different device controllers.","With reference to , a flowchart illustrating the basic test procedures is shown. A single universal mobile device test  is designed to test the application program for mobile devices having different platforms. The test control is transmitted to a client controller and a device controller that apply the client and mobile device platform information to the test control . Thus, each test case may not be tied directly to a particular mobile device platform and tests such as \u201ccreate a new account record\u201d should use the same logic regardless of the mobile device platform. However, the test cases may require that certain features (e.g. Tabs) are supported, and certain mobile device platforms may not support these features. Therefore, in an embodiment, the test case may be able to query the test framework to verify that the device controller supports a particular feature, and all applicable tests can be run against all device controllers that support the feature. The device controllers can extend the Client Controller API and therefore implements these functions. For example, iPhone, BlackBerry and Windows Mobile can extend the Device Controller and implement platform specific commands.","The test control can be a navigation operation that is transmitted to the mobile device . The test may also apply data inputs and device control actions to the mobile device . This first portion of the testing can be referred to as the mobile device \u201cnavigation\u201d . For example, the navigation may include high-level instructions such as \u201cedit current record\u201d which requires multiple steps to find the proper navigation elements. Once the navigation elements are found, the test may have the mobile device click on the elements. In an embodiment, data can be input to the mobile devices through a \u201csend keys\u201d method which can allow individual keystrokes to be sent to the device. This method can also be used on mobile devices having touch screen inputs such as the iPhone.","In response to the test control, test inputs and device control actions, the mobile device will display information which can be captured by the test framework . The display information may include both text and\/or images. There can be multiple ways to capture the display information from the mobile device. For example, the image can be obtained directly from the mobile device and the text can be obtained using OCR technology from the text portion of the image. In some tests, the system may only test the displayed information of interest or importance. Thus, the test system can capture some data or all data from the mobile device display and compare the mobile device display information to a desired view .","In an embodiment, the test may include triggers that may fire when the mobile device being tested displays either text and\/or images that are expected by the test. If the display information does not match the expected information, the system can record the error . If the display information does match the expected information, the system may record this correct display as well. The system may also check that the displayed content was propagated to and from the test database . If the display content was not propagated to or from the test database, the system can record the error  and may also record the proper operation of the mobile device if the content was propagated to or from the test database. The display capturing and data confirmation processes can be referred to as \u201cverification\u201d .","After the verification, the system may apply the client and mobile device information  to data being transmitted back to the test framework  and the next step of the mobile device test can be performed. The API testing may continue if the navigation errors are correctable or not correctable. Alternatively, the testing may be terminated as a result of a navigation error. Once the mobile device test is complete, the mobile device test framework can produce a report that includes the recorded errors in the mobile device navigation and display.","With reference to , an example of a possible mobile device display  is illustrated. The mobile device display  can be a collection of information areas and can have various controls including buttons, sliders and other data input fields that create a graphical user interface (GUI). In this example, a mobile device display  can include a donut chart , a funnel chart  and a table . It can be extremely important for the mobile device API to provide accurate information to the user. However, not all display information is critical. In this example, the donut chart , the funnel chart  and the table  may be the portions of the mobile device display that are the most important for test accuracy. Thus, the mobile device test framework may verify that the donut chart , the funnel chart  and the table  match the expected values and that the display content was propagated to or from the test database as described.","With reference to , additional details of the test system components will be described. The test framework  can include a presentation tool  that can include software tools for continuous integration which continuously processes applying software quality control. The presentation tool  can be used for scheduling and executing the mobile device API tests. The presentation tool  can also be used for reporting the test results and metrics. In an embodiment, the presentation tool  can be implemented through a continuous integration tool such as Hudson or Jenkins which are both written in Java. In other embodiments, the presentation tool  can be written in another programming language.","The execution tool  can be a software tool for building, deploying and testing scripts and parameters. In an embodiment, the execution tool  can be Apache Ant which is a software tool automated software building processes or a similar tool. The test tool  can include a unit testing framework through which individual units of source code can be tested. In an embodiment, the test tool  can be JUnit which is written in Java or a similar unit testing framework written in another programming language.","The test framework  is the actual test program that is written for an API for the mobile devices. In an embodiment, different test frameworks  are written for different APIs. However, because the test framework  is compatible with various different mobile device platforms, different test frameworks  do not have to be written for each different mobile device platform. In an embodiment, the test framework  can be written in Java so that it is compatible with the presentation tool , the execution tool  and the test tool . However, in other embodiments, the test framework  can be written in any other programming language that it is compatible with the presentation tool , the execution tool  and the test tool .","The client controllers , ,  are also platform independent tools that can be written in Java or other programming language that it is compatible the test framework . The client controllers , ,  store various types of information about the clients. The client information may be gathered through a mobile device  operated by the client. The client information can be gathered at various times while the client interacts with the mobile test framework through the mobile devices . For example, data can be collected during an activation process. A client can be activated before any testing of the application software can be performed and during the activation process, the client can input information about the state of the first client. Device specific information can be stored and retrieved from the Device class. Examples of the device specific information can include: Device Id, Make, Model, Phone Number, Screen Height\/Width, connect data cable, reset battery, capture screen, Get all visible text in region, get visible text with background color, wait for text to appear, get image position, get last find coordinates, start\/stop video capture, etc.","Based upon the client information, the first client controller  can provides a high-level interface control commands including:\n\n","Each client controller , ,  can be coupled to multiple device controllers , ,  which can each support a different mobile device platform. The client controllers , ,  can be used as interfaces between different types of mobile devices , ,  and the mobile test framework . The mobile device test framework  can provide test cases that are transmitted to the first client controller  and the device controllers , ,  to the mobile devices , , . The device controllers , ,  can provide test navigation methods for the different platforms of each of the mobile devices , ,  and verification of the test results. As discussed above with reference to , the navigation can be performed by navigating the mobile devices , ,  through different screens. Then the verification can be performed by capturing the screen contents of the mobile devices and comparing the captured screen contents to expected screen contents. If the captured screen contents match the expected screen contents, the mobile devices , ,  have passed this portion of the test. Conversely, if the captured screen contents do not match the expected screen contents, the mobile devices , ,  have not passed this portion of the test.","The device controllers , ,  can provide high level navigation commands to the mobile devices , ,  for testing purposes. These navigation commands can include:\n\n","The device controllers , ,  can also provide interface commands to assist with the verification of the test results of the mobile devices , , . These interface commands can include:\n\n","The testing performed by the test framework  can include any combination of navigation commands to the mobile application and verification that the mobile device is displaying the expected data.","For example, a navigation test case from the test framework  may first instruct the mobile device to navigate to a \u201cSearch Tab\u201d in the mobile application and then navigate to the \u201cAccounts Item.\u201d This set of test commands can be transmitted from the test framework  to the first client controller  to the device controllers , , . The device controllers , ,  can covert the test commands to the corresponding protocols and transmit the test commands to the corresponding mobile devices , , .","The Device Controllers , ,  are device platform specific because each operating system can use different navigation protocols. For example, the navigation commands for the Blackberry, Windows Mobile, iPhone and other mobile devices are all different. In order to perform the same navigation on multiple operating system platforms, the Device Controllers , ,  can be decoupled from their implementation. Thus, the Device Controller implementations can be: Blackberry Controller, Windows Mobile Controller, and iPhone Controller. Each device platform can have a specific device controller. Thus, the device controllers , ,  may each transmit different commands the mobile devices , ,  in order to enter a predetermined search text and click the \u201cSearch\u201d buttons on the mobile devices , ,  or any other control commands.","In an embodiment, the device controllers , ,  include a remote mobile application testing API. With the remote mobile application testing API, the inputs to the mobile devices , ,  can be entered by using specific input commands such as \u201csend keys.\u201d In response to the input commands, the mobile devices , ,  can perform the commanded task. In an embodiment, the device controllers , ,  can include mobile test automation such as, DeviceAnywhere, Selenium, Frank or other suitable software testing systems. For example, the device class can encapsulate the DeviceAnywhere Device API which is utilized by the device controller implementations.","For example, the mobile devices , ,  may have been commanded to perform a search and the displayed search results can be captured by the device controllers , ,  and compared to the expected display. If the captured screen content matches the expected screen content, the mobile devices , ,  have passed this portion of the test and additional navigation and verification testing can be performed. If the captured screen content does not match the expected screen content, the mobile devices , ,  have not passed the test.","The verification process compares the captured screen display with a predetermined expect view which can include some or all of the display characteristics. This verification process may look for specific text, images or other displayed information. Once this data is captured, it is compared to the expected data that should be displayed if the system is operating properly. For example, the test verification can check one or more specific values displayed on the captured screen and\/or the appearances of some or all of the captured screen content.","In addition, the test framework may also be able to verify data changes that are propagated to and from the SaaS central database correctly. The verification of data changes can be implemented by detecting whether the expected data appears in the test framework database. The test framework may simulate a change that is made by the client and apply this client change to the testing of the API on the mobile devices , , . Data changes can be verified at the server by issuing an API request to the core server. For example, to create a new account on the device and synch the device, the system can verify that the new record was actually transmitted successfully. Alternatively, an account can be created on the server, the client can be refreshed and the system can verify that the new account shows up.","A test can be used to test a mobile device such as an Apple iPhone. The test parameters can set to define the execution as being performed by sanity suite, the test device as an iPhone and define the interface as mock. The test program can include the steps of launching the API test, inputting a user name and password and verifying the input information.",{"@attributes":{"id":"p-0052","num":"0082"},"figref":"FIG. 6","b":["610","610","612","614","616","617","18","620","622","624","626","628","610"]},"Environment  is an environment in which an on-demand database service exists. User system  may be any machine or system that is used by a user to access a database user system. For example, any of user systems  can be a handheld computing device, a mobile phone, a laptop computer, a work station, and\/or a network of computing devices. As illustrated in  (and in more detail in ) user systems  might interact via a network  with an on-demand database service, which is system .","An on-demand database service, such as system , is a database system that is made available to outside users that do not need to necessarily be concerned with building and\/or maintaining the database system, but instead may be available for their use when the users need the database system (e.g., on the demand of the users). Some on-demand database services may store information from one or more tenants stored into tables of a common database image to form a multi-tenant database system (MTS). Accordingly, \u201con-demand database service \u201d and \u201csystem \u201d will be used interchangeably herein. A database image may include one or more database objects. A relational database management system (RDMS) or the equivalent may execute storage and retrieval of information against the database object(s). Application platform  may be a framework that allows the applications of system  to run, such as the hardware and\/or software, e.g., the operating system. In an embodiment, on-demand database service  may include an application platform  that enables creation, managing and executing one or more applications developed by the provider of the on-demand database service, users accessing the on-demand database service via user systems , or third party application developers accessing the on-demand database service via user systems .","The users of user systems  may differ in their respective capacities, and the capacity of a particular user system  might be entirely determined by permissions (permission levels) for the current user. For example, where a salesperson is using a particular user system  to interact with system , that user system has the capacities allotted to that salesperson. However, while an administrator is using that user system to interact with system , that user system has the capacities allotted to that administrator. In systems with a hierarchical role model, users at one permission level may have access to applications, data, and database information accessible by a lower permission level user, but may not have access to certain applications, database information, and data accessible by a user at a higher permission level. Thus, different users will have different capabilities with regard to accessing and modifying application and database information, depending on a user's security or permission level.","Network  is any network or combination of networks of devices that communicate with one another. For example, network  can be any one or any combination of a LAN (local area network), WAN (wide area network), telephone network, wireless network, point-to-point network, star network, token ring network, hub network, or other appropriate configuration. As the most common type of computer network in current use is a TCP\/IP (Transfer Control Protocol and Internet Protocol) network, such as the global internetwork of networks often referred to as the \u201cInternet\u201d with a capital \u201cI,\u201d that network will be used in many of the examples herein. However, it should be understood that the networks that the one or more implementations might use are not so limited, although TCP\/IP is a frequently implemented protocol.","User systems  might communicate with system  using TCP\/IP and, at a higher network level, use other common Internet protocols to communicate, such as HTTP, FTP, AFS, WAP, etc. In an example where HTTP is used, user system  might include an HTTP client commonly referred to as a \u201cbrowser\u201d for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system  and network , but other techniques might be used as well or instead. In some implementations, the interface between system  and network  includes load sharing functionality, such as round-robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server, each of the plurality of servers has access to the MTS' data; however, other alternative configurations may be used instead.","In one embodiment, system , shown in , implements a web-based customer relationship management (CRM) system. For example, in one embodiment, system  includes application servers configured to implement and execute CRM software applications as well as provide related data, code, forms, web pages and other information to and from user systems  and to store to, and retrieve from, a database system related data, objects, and Webpage content. With a multi-tenant system, data for multiple tenants may be stored in the same physical database object, however, tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant's data, unless such data is expressly shared. In certain embodiments, system  implements applications other than, or in addition to, a CRM application. For example, system  may provide tenant access to multiple hosted (standard and custom) applications, including a CRM application. User (or third party developer) applications, which may or may not include CRM, may be supported by the application platform , which manages creation, storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .","One arrangement for elements of system  is shown in , including a network interface , application platform , tenant data storage  for tenant data , system data storage  for system data  accessible to system  and possibly multiple tenants, program code  for implementing various functions of system , and a process space  for executing MTS system processes and tenant-specific processes, such as running applications as part of an application hosting service. Additional processes that may execute on system  include database indexing processes.","Several elements in the system shown in  include conventional, well-known elements that are explained only briefly here. For example, each user system  could include a desktop personal computer, workstation, laptop, PDA, cell phone, or any wireless access protocol (WAP) enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system  typically runs an HTTP client, e.g., a browsing program, such as Microsoft's Internet Explorer browser, Netscape's Navigator browser, Opera's browser, or a WAP-enabled browser in the case of a cell phone, PDA or other wireless device, or the like, allowing a user (e.g., subscriber of the multi-tenant database system) of user system  to access, process and view information, pages and applications available to it from system  over network . Each user system  also typically includes one or more user interface devices, such as a keyboard, a mouse, trackball, touch pad, touch screen, pen or the like, for interacting with a graphical user interface (GUI) provided by the browser on a display (e.g., a monitor screen, LCD display, etc.) in conjunction with pages, forms, applications and other information provided by system  or other systems or servers. For example, the user interface device can be used to access data and applications hosted by system , and to perform searches on stored data, and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above, embodiments are suitable for use with the Internet, which refers to a specific global internetwork of networks. However, it should be understood that other networks can be used instead of the Internet, such as an intranet, an extranet, a virtual private network (VPN), a non-TCP\/IP based network, any LAN or WAN or the like.","According to one embodiment, each user system  and all of its components are operator configurable using applications, such as a browser, including computer code run using a central processing unit such as an Intel Pentium\u00ae processor or the like. Similarly, system  (and additional instances of an MTS, where more than one is present) and all of their components might be operator configurable using application(s) including computer code to run using a central processing unit such as processor system , which may include an Intel Pentium\u00ae processor or the like, and\/or multiple processor units. A computer program product embodiment includes a machine-readable storage medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system  to intercommunicate and to process webpages, applications and other data and media content as described herein are preferably downloaded and stored on a hard disk, but the entire program code, or portions thereof, may also be stored in any other volatile or non-volatile memory medium or device as is well known, such as a ROM or RAM, or provided on any media capable of storing program code, such as any type of rotating media including floppy disks, optical discs, digital versatile disk (DVD), compact disk (CD), microdrive, and magneto-optical disks, and magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data. Additionally, the entire program code, or portions thereof, may be transmitted and downloaded from a software source over a transmission medium, e.g., over the Internet, or from another server, as is well known, or transmitted over any other conventional network connection as is well known (e.g., extranet, VPN, LAN, etc.) using any communication medium and protocols (e.g., TCP\/IP, HTTP, HTTPS, Ethernet, etc.) as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and\/or server or server system such as, for example, C, C++, HTML, any other markup language, Java\u2122, JavaScript, ActiveX, any other scripting language, such as VBScript, and many other programming languages as are well known may be used. (Java\u2122 is a trademark of Sun Microsystems, Inc.).","According to one embodiment, each system  is configured to provide webpages, forms, applications, data and media content to user (client) systems  to support the access by user systems  as tenants of system . As such, system  provides security mechanisms to keep each tenant's data separate unless the data is shared. If more than one MTS is used, they may be located in close proximity to one another (e.g., in a server farm located in a single building or campus), or they may be distributed at locations remote from one another (e.g., one or more servers located in city A and one or more servers located in city B). As used herein, each MTS could include one or more logically and\/or physically connected servers distributed locally or across one or more geographic locations. Additionally, the term \u201cserver\u201d is meant to include a computer system, including processing hardware and process space(s), and an associated storage system and database application (e.g., OODBMS or RDBMS) as is well known in the art. It should also be understood that \u201cserver system\u201d and \u201cserver\u201d are often used interchangeably herein. Similarly, the database object described herein can be implemented as single databases, a distributed database, a collection of distributed databases, a database with redundant online or offline backups or other redundancies, etc., and might include a distributed database or storage network and associated processing intelligence.",{"@attributes":{"id":"p-0063","num":"0093"},"figref":["FIG. 7","FIG. 7","FIG. 7","FIG. 7","FIG. 7"],"b":["610","616","612","612","612","612","612","614","616","616","622","623","624","625","730","732","734","736","738","1000","1000","702","704","710","712","714","716","610"],"sub":["1","N"]},"User system , network , system , tenant data storage , and system data storage  were discussed above in . Regarding user system , processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices, short term, and\/or long term memory. Input system C may be any combination of input devices, such as one or more keyboards, mice, trackballs, scanners, cameras, and\/or interfaces to networks. Output system D may be any combination of output devices, such as one or more monitors, printers, and\/or interfaces to networks. As shown by , system  may include a network interface  (of ) implemented as a set of HTTP application servers , an application platform , tenant data storage , and system data storage . Also shown is system process space , including individual tenant process spaces  and a tenant management process space . Each application server  may be configured to tenant data storage  and the tenant data  therein, and system data storage  and the system data  therein to serve requests of user systems . The tenant data  might be divided into individual tenant storage areas , which can be either a physical arrangement and\/or a logical arrangement of data. Within each tenant storage area , user storage  and application metadata  might be similarly allocated for each user. For example, a copy of a user's most recently used (MRU) items might be stored to user storage . Similarly, a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI  provides a user interface and an API  provides an application programmer interface to system  resident processes to users and\/or developers at user systems . The tenant data and the system data may be stored in various databases, such as one or more Oracle\u2122 databases.","Application platform  includes an application setup mechanism  that supports application developers' creation and management of applications, which may be saved as metadata into tenant data storage  by save routines  for execution by subscribers as one or more tenant process spaces  managed by tenant management process  for example. Invocations to such applications may be coded using PL\/SOQL  that provides a programming language style interface extension to API . A detailed description of some PL\/SOQL language embodiments is discussed in commonly owned co-pending U.S. Provisional Patent Application 60\/828,192 entitled, PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS, by Craig Weissman, filed Oct. 4, 2006, which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes, which manages retrieving application metadata  for the subscriber making the invocation and executing the metadata as an application in a virtual machine.","Each application server  may be communicably coupled to database systems, e.g., having access to system data  and tenant data , via a different network connection. For example, one application server  might be coupled via the network  (e.g., the Internet), another application server might be coupled via a direct network link, and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol (TCP\/IP) are typical protocols for communicating between application servers  and the database system. However, it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.","In certain embodiments, each application server  is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason, there is preferably no server affinity for a user and\/or organization to a specific application server . In one embodiment, therefore, an interface system implementing a load balancing function (e.g., an F5 Big-IP load balancer) is communicably coupled between the application servers  and the user systems  to distribute requests to the application servers . In one embodiment, the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms, such as round robin and observed response time, also can be used. For example, in certain embodiments, three consecutive requests from the same user could hit three different application servers , and three requests from different users could hit the same application server . In this manner, system  is multi-tenant, wherein system  handles storage of, and access to, different objects, data and applications across disparate users and organizations.","As an example of storage, one tenant might be a company that employs a sales force where each salesperson uses system  to manage their sales process. Thus, a user might maintain contact data, leads data, customer follow-up data, performance data, goals and progress data, etc., all applicable to that user's personal sales process (e.g., in tenant data storage ). In an example of a MTS arrangement, since all of the data and the applications to access, view, modify, report, transmit, calculate, etc., can be maintained and accessed by a user system having nothing more than network access, the user can manage his or her sales efforts and cycles from any of many different user systems. For example, if a salesperson is visiting a customer and the customer has Internet access in their lobby, the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.","While each user's data might be separate from other users' data regardless of the employers of each user, some data might be organization-wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus, there might be some data structures managed by system  that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors, the MTS should have security protocols that keep data, applications, and application use separate. Also, because many tenants may opt for access to an MTS rather than maintain their own system, redundancy, up-time, and backup are additional functions that may be implemented in the MTS. In addition to user-specific data and tenant specific data, system  might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports, news, postings, and the like that are sharable among tenants.","In certain embodiments, user systems  (which may be client systems) communicate with application servers  to request and update system-level and tenant-level data from system  that may require sending one or more queries to tenant data storage  and\/or system data storage . System  (e.g., an application server  in system ) automatically generates one or more SQL statements (e.g., one or more SQL queries) that are designed to access the desired information. System data storage  may generate query plans to access the requested data from the database.","Each database can generally be viewed as a collection of objects, such as a set of logical tables, containing data fitted into predefined categories. A \u201ctable\u201d is one representation of a data object, and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that \u201ctable\u201d and \u201cobject\u201d may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example, a CRM database may include a table that describes a customer with fields for basic contact information such as name, address, phone number, fax number, etc. Another table might describe a purchase order, including fields for information such as customer, product, sale price, date, etc. In some multi-tenant database systems, standard entity tables might be provided for use by all tenants. For CRM database applications, such standard entities might include tables for Account, Contact, Lead, and Opportunity data, each containing pre-defined fields. It should be understood that the word \u201centity\u201d may also be used interchangeably herein with \u201cobject\u201d and \u201ctable\u201d.","In some multi-tenant database systems, tenants may be allowed to create and store custom objects, or they may be allowed to customize standard entities or objects, for example by creating custom fields for standard objects, including custom index fields. U.S. patent application Ser. No. 10\/817,161, filed Apr. 2, 2004, entitled \u201cCustom Entities and Fields in a Multi-Tenant Database System\u201d, and which is hereby incorporated herein by reference, teaches systems and methods for creating custom objects as well as customizing standard objects in a multi-tenant database system. In certain embodiments, for example, all custom entity data rows are stored in a single multi-tenant physical table, which may contain multiple logical tables per organization. It is transparent to customers that their multiple \u201ctables\u201d are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.","While one or more implementations have been described by way of example and in terms of the specific embodiments, it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary, it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore, the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the following drawings like reference numbers are used to refer to like elements. Although the following figures depict various examples, the one or more implementations are not limited to the examples depicted in the figures.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 2 and 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 7","FIG. 7"]}]},"DETDESC":[{},{}]}
