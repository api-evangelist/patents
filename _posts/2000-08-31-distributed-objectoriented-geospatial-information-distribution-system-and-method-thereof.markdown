---
title: Distributed object-oriented geospatial information distribution system and method thereof
abstract: A distributed object-oriented geospatial database system and method thereof over the Internet using Web-based technology to perform data-driven queries, such as retrieving, viewing and updating, geospatial data of the object oriented geospatial database, such as vector, raster, hypertext and multimedia data, including data types or formats of ESRI shape files, GSF, oceanographic ASCII text data by NAVOCEANO and geospatial data with temporal information and supporting 3D display of the geospatial data. The object-oriented geospatial database system is implemented in a heterogeneous object-oriented development and integration environment through the Common Object Request Broker Architecture (CORBA).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06985929&OS=06985929&RS=06985929
owner: The United States of America as represented by the Secretary of the Navy
number: 06985929
owner_city: Washington
owner_country: US
publication_date: 20000831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present application is related to the commonly assigned pending U.S. patent application Ser. No. 09\/448,765 filed on Nov. 24, 1999 entitled \u201cMethod and Apparatus for Building and Maintaining an Object-Oriented Geospatial Database\u201d, which is incorporated by reference herein. This application claims priority from a provisional application, Ser. No. 60\/227,847 filed on Aug. 25, 2000, entitled \u201cA DISTRIBUTED OBJECT-ORIENTED GEOSPATIAL INFORMATION DISTRIBUTION SYSTEM AND METHOD THEREOF\u201d, Navy Case No. 80, 172.","1. Field of the Invention","The present invention relates to distributing information of an object-oriented database using object-oriented technology. More particularly, the present invention relates to distributing and maintaining information of an object-oriented database of geospatial data. Further, the present invention relates to distributing and maintaining information of an object-oriented database of geospatial data of multiple data types, such as Vector Product Format (VPF), Raster Product Format (RPF), Text Product Standard (TPS), Environmental Systems Research Institute, Inc. (ESRI) shape files, Generic Sensor Format (GSF), oceanographic ASCII text data provided by the Naval Oceanographic Office (NAVOCEANO) and geospatial data with temporal information.","2. Description of the Related Art","The object-oriented geospatial database (i.e., database including data having spatial information) described in the pending commonly assigned application referenced herein implements object-oriented geographic data models of vector mapping data, such as VPF. Geographic data modeling using object-oriented technology is in contrast to conventional geographic or geospatial databases, which are implemented as \u201crelational\u201d data models or structures. For example, as discussed in the pending commonly assigned application, in a complex relational database model of vector mapping data, such as VPF provided by the National Imagery and Mapping Agency (NIMA), the database model is represented as \u201cdatabases\u201d, each \u201cdatabase\u201d containing one or more \u201clibraries\u201d with associated \u201ccoverages or themes\u201d, and \u201cfeatures\u201d associates with each \u201ccoverage or theme\u201d. In particular, the \u201crelational\u201d data model paradigm typically requires that the \u201ccoverage\u201d, \u201cfeatures\u201d, and topological data reside in many tables that must be queried upon every request for information from the database. Because of the number of tables involved, maintaining referential integrity of the VPF database upon an update is difficult. This difficulty arises because the VPF relies on data residing within multiple specialized tables on multiple levels of the VPF relational database. Further, since viewing, query and manipulation of each geospatial data of a different format typically requires corresponding software, integration of the geospatial-data of different formats becomes difficult at best.","Further, as described in the pending commonly assigned application, in contrast to relational database structures storing geospatial data, an object-oriented data structure storing geospatial data, topological and other spatial relationships reside in linked objects, and updates to the data can be handled more simply and directly. The object-oriented paradigm properties of identity, encapsulation, inheritance, and polymorphism, overcome the problems associated with existing mechanisms for querying, updating, and translating geospatial data, such as VPF data, by providing a geospatial information distribution system that permits easy and complete updating of VPF data, more complex queries of VPF data, and direct exporting of VPF data from the object-oriented database structure into a relational database structure. In particular, the object-oriented paradigm accommodates data-driven (i.e., data structure of data does not have to be known prior to query for information) queries, constrained query, and nested or complex queries. Further, the object-oriented paradigm also permits easy use of data of differing formats and structures within an integrated geospatial information system. In particular, existing data in VPF, RPF, and TPS files are incorporated onto a single, object-oriented platform for access.","A characteristic of a traditional geographical information system (GIS) based upon the \u201crelational\u201d database structure, is that a user's interaction with data via a user interface is at visual level. For example, the interaction between a user and a map display is only at visual level when zooming. In particular, queries in such traditional GIS are considered \u201cpre-formatted\u201d requests. This characteristic frustrates easy distribution and access to continuously updated complex data having spatial information and temporal information.","Further, generally, users have to utilize many software applications on their local computer to access and display mapping data of multiple data types. Typically, data distribution in such systems is in the form of CD-ROM or other media, and would often take days to be distributed to user. For example, data associated with an area of interest (AOI) would be located in several different places (i.e., there is not a single source that users could access to obtain all mapping data available for the AOI). Although, efforts have been made to provide retrieval and viewing of mapping data over the World Wide Web (WWW) these applications are limited in the data types that they can display, and in the availability of data associated with the display. In particular, regarding accessing geospatial databases, traditional systems that use removable storage media replace the existing database on the removable storage media with updated database and distribute the updated database to users. Further, a separate software application or commercial off the shelf software package, such as a GIS software package (e.g., ArcView by Environmental Systems Research Institute, Inc., Redlands, Calif.) customized for or compatible with the database is executed on the user's or local computer (i.e., client computer) to access the database. Such traditional systems may also be implemented over the Internet or the WWW. Similar to the counterpart non-Internet implementations, the database is stored as a library on a server computer connected to the Internet and the library is distributed (i.e., downloaded by the user or local computer using, for example, File Transfer Protocol) to the user's or local computer for access using the separate GIS software package executing on the local computer. Therefore, these traditional systems involve two steps of loading or downloading data or database to the local computer from the remote computer or removable storage media (e.g., CD-ROM) and then loading a separate software application in the local computer to access the data.","The use of geographic data is becoming pervasive across many disciplines. At the same time, end users are becoming increasingly dependent upon the web as a source of readily available, easily accessible information. Accordingly, in view of these two factors there is a need for development of systems capable of immediate and efficient distribution and access to complex data having spatial and temporal information (i.e., geospatial data).","An object of the invention is to provide a distributed object-oriented geospatial database system and method thereof over a client\/server network.","Another object of the invention is to provide a distributed object-oriented geospatial database system and method thereof over the Internet using web-based technology to perform data-driven queries, such as retrieving, viewing and updating, geospatial data of the object-oriented geospatial database, such as vector, raster, hypertext and multimedia data, as well as remote updating of vector data.","Another object of the invention is to provide a distributed object-oriented geospatial database system and method thereof over a client\/server network supporting multiple data types or formats of ESRI shape file, GSF, oceanographic ASCII text data by NAVOCEANO and geospatial data with temporal information.","Another object of the invention is to provide a distributed object-oriented geospatial database system and method thereof over a client\/server network supporting 3D display of geospatial data.","Yet another object of the invention is to provide a distributed objected-oriented geospatial database system in a heterogeneous object-oriented development and integration environment using the Common Object Request Broker Architecture (CORBA).","The above objects are attained in a networked computer system environment by designing object models for the geospatial data, creating an object-oriented database of the geospatial data using the object models, storing the object-oriented database on a storage unit connected to the network, specifying an area of interest from a map image or visual image, representing active data objects and displayed on a computer on the network, querying from the computer over the network data objects in the database associated with the area of interest, receiving in the computer over the network data objects in the database associated with the area of interest, and displaying the data objects. In particular, querying involves in response to performing a single action, querying from the computer over the network data objects in the database associated with the area of interest.","Further, in a networked computer system environment building and maintaining an object-oriented spatial database from at least two or more data formats by instantiating objects of the object-oriented database, using at least two of the Vector Product Format (VPF), Raster Product Format (RPF), Text Product Standard (TPS), Environmental Systems Research Institute (ESRI) shape, Generic Sensor Format (GSF), Naval Oceanographic Office text (NAVOCEANO), and temporal information databases; initializing spatial and non-spatial feature data of the object-oriented database; and spatially indexing data among objects from the at least two VPF, RPF, TPS, ESRI, GSF, NAVOCEANO and temporal information databases into the single, object-oriented spatial database.","Further, computer programs according to the present invention and stored on a computer-readable media to access in real-time geospatial data over a network, comprise an object-oriented database server code section to store data having spatial and temporal information, a client code section, and an interface code section in communication with the server code section and the client code section over the network to transmit and receive messages querying the data. In particular, programming language of the client code section differs from programming language of the server code section, providing a heterogeneous object-oriented geospatial database system in a networked computer system. Further, the data includes at least two or more data formats of Vector Product Format (VPF), Raster Product Format (RPF), Text Product Standard (TPS), Environmental Systems Research Institute shape format (ESRI), Generic Sensor Format (GSF), and Naval Oceanographic Office text format (NAVOCEANO).","These and other objects and advantages of the invention will become apparent and more readily appreciated from the following description of the preferred embodiments, taken in conjunction with the accompanying drawings.","Reference will now be made in detail to the preferred embodiments of the present invention, examples of which are illustrated in the accompanying drawings, wherein like reference numerals refer to like elements throughout. The embodiments are described below to explain the present invention by referring to the figures.","The database system according to the present invention, uses Internet enabled technology, such as Web browser technology, and object-oriented technology to provide real-time or interactive remote access to geospatial data over a network (i.e., one step). In particular, the user in one step can, for example, view the data objects stored in a remote location (i.e., computer server), without downloading from a remote computer to the local computer the entire database (or an entire segment of the database) on the local computer and executing a separate software in the local computer to view the database. Further, in contrast to traditional GIS software, which actually stores data on the local computer (e.g., the computer's hard drive), the present invention uses a Web-based applet executing on the local client computer but still resident on the remote server computer. When the browser software is closed, there is no software resident on the local computer's hard drive (i.e., no data had to be downloaded to the local computer's hard drive).","Therefore, the present invention improves the object-oriented geospatial database disclosed in the pending commonly assigned application from the memory resident, stand-alone system and method to a file based distributed object-oriented geospatial database system and method thereof over a client\/server network environment and in particular over the Internet using web-based capabilities to view geospatial data, such as vector, raster, hypertext and multimedia data, as well as remote updating of vector data. In particular, the object-oriented geospatial database of the present invention, which is also referred to as the geospatial information database (GIDB) or the geospatial information distribution system (GIDS), is an object oriented digital mapping database system implemented over a computer network system that provides rapid access to multiple mapping data types (i.e., geospatial data) over the computer network system, such as Internet, WWW or Intranet. Mapping data in the present invention is accessed from the GIDS based on user AOI. In particular, in contrast to typical systems (e.g., GIS) providing access to mapping data, in the object-oriented geospatial database (i.e., GIDS) of the present invention, any AOI request activates a portion of the database associated with the AOI (i.e, data-driven queries) such than an object or many objects can be accessed in near-real-time or real-time (as the case may be). The GIDS uses a conventional object-oriented database management system (OODBMS), a conventional interface technology, such as Common Object Request Broker Architecture (CORBA) technology, and a conventional object oriented programming language, such as the Java programming language, to provide rapid access to geospatial data over the network. The GIDS incorporates multiple data types to meet the mapping requirements and needs of users or a device or computer system requesting mapping information from the GIDS. Further, the distributed object-oriented geospatial database system according to the present invention supports additional geospatial data formats of ESRI shape files, GSF, oceanographic ASCII text data provided by the NAVOCEANO, and geospatial data with temporal information. Yet further, the distributed object-oriented geospatial database system according to the present invention supports three-dimensional (3D) display of the geospatial data.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 1","FIG. 1"],"b":["40","1","42","1","44","46","1","46","40","1","42","1","44","46","40","1","42","1","44"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 2","b":["50","50","44"]},"An introduction is provided to software system components of the object-oriented geospatial database. The object-oriented geospatial database system of the invention, which is also referred to as the geospatial information database (GIDB) or the geospatial information distribution system (GIDS), has a client and server function architecture. GIDS is an object oriented digital mapping database that provides access to mapping data over computer network systems, such as Internet, World Wide Web (WWW) or Intranet. As shown in , the GIDS is composed of an object-oriented database server component or module , interface component  and client component or module  communicating with the server component via or through the interface component . The database server may be implemented using a conventional object server. In a preferred embodiment, the database server is implemented using GemStone\/S application server for Smalltalk (GemStone) by GemStone Systems, Inc., Beaverton, Oreg., which is a commercial-off-the-shelf object-oriented database management system (OODBMS) (i.e., object server) that stores, manipulates, and processes objects referenced by client modules, such as client module . In particular, GemStone is based on Smalltalk, providing a Smalltalk server development environment. Further, client module  may be a Smalltalk client or a Web-based client applet, such as Java client, which will be described in more detail below. The OODBMS allows expansion of the GIDS to support world-wide database access driven by area of interest (AOI) queries. Therefore, an AOI may be requested, for example, by a user, and the OODBMS allows a portion of the database associated with the AOI to become active such that an object or many objects can be accessed in near-real-time or real-time (as the case may be). The data is permanently stored as objects in the OODBMS for future access. AOI queries will be described in more detail below. The database server includes two functional modules, one to store geospatial data, including any non-spatial data, and another module to manipulate or process the geospatial data. Based on the request from the client , the GemStone server searches and retrieves only those objects that meet the requested criteria. Data search for retrieval is performed mostly on the server for any client, such as client , because GemStone is an intelligent object server, storing, maintaining and referencing objects by name. Therefore, an object can be searched and retrieved by specifying the object name. When displaying a digitized map or image of a region, typical GIS relational database servers fetch at a page level associated with the digitized map or image of the geographic region. However, sometimes the exact content of the page may not be explicitly known by the GIS relational database servers. In contrast, in an object-based server system, such as GemStone server , contents of a page can be stored and retrieved at an individual object level. A processing to determine what is on the page can take place by the server rather than by the client.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 3","b":["52","52","56"],"i":["a","a "]},"The VPF data has a hierarchical structure. The \u201cdatabase\u201d is used to group a set of data that is used for a specific purpose, e.g., Digital Nautical Chart (DNC) for navigation. The Database class contains a collection of \u201clibraries\u201d. A \u201clibrary\u201d is used to group those \u201cfeatures\u201d that are collected at a certain scale over a certain region. There may be some overlap or complete containment of one \u201clibrary\u201d into another. However, each \u201clibrary\u201d is unique based on the region and scale. Each \u201clibrary\u201d subsequently contains a collection of \u201ccoverages\u201d, where each \u201ccoverage\u201d contains those \u201cfeatures\u201d that are related by a common theme, e.g., transportation or cultural. A \u201cdatabase\u201d, \u201clibrary\u201d and \u201ccoverage (i.e., theme)\u201d triad, represented as VPFDatabase, VPFLibrary, and VPFCoverage classes uniquely identifies the \u201cfeature\u201d. The \u201cfeature\u201d is defined at the \u201ccoverage\u201d level. Due to tabular storage constraints, VPF data structure groups data yet at another layer, \u201ctile\u201d. Each \u201ctile\u201d consists of some geographic extent in a minute by minute or a degree by degree manner. In particular,  shows an example of a VMAAWE \u201cdatabase\u201d having a collection of \u201clibraries\u201d such as Presidio, Oak Knoll, etc. A Monterey \u201clibrary\u201d consists of \u201ccoverages\u201d or \u201cthemes\u201d such as population, transportation, etc.","The server uses the \u201ccoverage\u201d as the minimal grouping level for \u201cfeatures\u201d or \u201cobjects\u201d. Every instance of the VPFCoverage has an instance of a dictionary collection called covQuad (not shown in ). A covQuad maintains all instances of a VPFSpatialDataManager for the \u201ccoverage\u201d. The VPFSpatialDataManager class represents a spatial indexing scheme for organizing or relating information or spatial data of differing data formats together. The GIDS uses a quadtree spatial indexing scheme to provide a hierarchical clustering of data based on the geographic area. The quadtree recursively divides an area into quadrants, each of which is called a quadcell. In the GIDS, the class named VPFSpatialDataManager is created to represent a quadtree-indexing scheme. All spatial \u201cobjects\u201d or \u201cfeatures\u201d are stored and indexed in the quadtree. An insertion of an \u201cobject\u201d into the quadtree is based on a bounding box of the \u201cobject\u201d. A quadcell that will minimally contain the bounding box of the \u201cobject\u201d will be selected to store the object.","The VPF data has three types of \u201cfeatures\u201d, including point, line and area (polygon). For efficient and faster access and retrieval, each \u201cfeature\u201d type has a unique instance of a quadtree, i.e., there are three instances of VPFSpatialDataManager class. Therefore, a covQuad will have three instances of VPFSpatialDataManager keyed by the feature type.","Any data access and retrieval (i.e., query) from the server begins by specifying the \u201cdatabase\u201d, \u201clibrary\u201d and \u201ccoverage\u201d, typically through a terminal (e.g., browser client computer or graphical user interface ) and electing a query transaction. A \u201cfeature\u201d retrieval (which will be described in more detail below) may specify a part of an area or an Area of Interest (AOI) by specifying a geographic extent or the entire area of the \u201cdatabase\u201d and \u201clibrary\u201d. This request is sent to the appropriate instance of VPFSpatialDataManager for actual \u201cfeature\u201d retrieval. Therefore, the object-oriented database server accommodates data-driven simple queries, constrained queries, and nested or complex queries of geospatial data, including non-spatial data, by the client .","Next, referencing , the interface to database server in master server computer  will be described. A conventional interface system (i.e., client) may be used to query, retrieve and update objects in database server . In one embodiment, a Smalltalk interface system (i.e., Smalltalk client) is used, such as GemBuilder for Smalltalk , which is a commercial-off-the-shelf product. In particular, GemBuilder for Smalltalk  is an interface between client  (i.e., Smalltalk AOI client) and GemStone database server (i.e., Smalltalk server). In a preferred embodiment, which will be described below, an interface system observing CORBA specification or architecture is used. GemBuilder for Smalltalk also maintains its own object names. To establish a connection between Smalltalk AOI client  and GemStone , a naming convention of each object must be resolved via a naming interface. In other words, client  and server must have an agreement on how to reference an object by name. GemBuilder for Smalltalk  provides those classes (i.e., naming interface) that institute a convention for referencing same objects between Smalltalk AOI client  and GemStone . For this reason, GemBuilder for Smalltalk  requires some knowledge of the database design and implementation and the level of required detail is client dependent. In particular, Smalltalk AOI client  connects to object server through GemBuilder for Smalltalk . The client  mainly populates, maintains, updates and exports data. The client  is tightly-coupled to object server's data design, i.e., class definition, class states and behaviors. A similar, if not the same, class definition is used between object server and Smalltalk AOI client  so that client  closely replicates object server's data design. Due to the data encapsulation property, a reference to an object implies a reference to a self contained object. For those objects that are maintained and managed by object server , a self-contained object can consist of a large web of references to other objects, e.g., pointers. Since an object referenced by Smalltalk AOI client  is self-contained, client  requests object server to mainly search and return objects. In most cases, client  then process the data on the client side. Therefore, client  expects from the object server those parts that are needed to solve and derive the solution. Thus, Smalltalk AOI clients  can be considered as \u201cfat clients,\u201d because the implementation details are replicated on the clients, adding storage requirement. They are expected to process the information retrieved from the object server ","Referencing , software system to interface with the database server in master server computer  over a network will be described. An interface system observing CORBA specification or architecture to interface with a Smalltalk object-oriented database server provides a heterogeneous development and integration environment. As shown in , a preferred embodiment of the GIDS includes an object-oriented database server component or module , interface components , and client component or module (i.e., Web-based client applet)  or Web-based applet (display and update)  in browser client computer  and local client server computer  (respectively). The database server is in communication with Web-based client applet  or Web-based applet (display and update)  in browser client computer  and local client server computer  (respectively) over the network  via or through interface components and . In the preferred embodiment, the interface systems and observe a conventional CORBA specification or architecture. An interface system observing CORBA specification or architecture to interface with a Smalltalk object-oriented database server provides a heterogeneous development and integration environment.  is illustrating software system to interface with the database server in master server computer  in a network environment which uses conventional firewall  to achieve information security protecting database server . As shown in , yet another preferred embodiment of the GIDS includes database server , interface component  and Web-based client applet  or Web-based applet (display and update)  in browser client computer  and local client server computer  (respectively). The database server is in communication with Web-based client applet  or Web-based applet (display and update)  in browser client computer  and local client server computer  (respectively) over the network  and through firewall  via interface component . Web-based applet (display and update)  is in communication with database server . Software system in local client server computer (i.e., local update client server or GIDS client\/server)  will be described in more detail below as part of description of the distributed architecture of the geospatial database system according to the present invention.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIGS. 5A","FIGS. 4A and 4B","FIGS. 5A and 5B","FIGS. 6A and 6B","FIGS. 5A and 5B","FIG. 4A","FIG. 4A","FIG. 5A"],"b":["5","6","6","60","70","60","52","62","62","64","52","60","60","60","60","62","60","52","52","62","46","52","62","86","62"],"i":["a ","a","a","b ","b ","a ","a","a ","a "]},"With reference to , in the database system according to the present invention when firewall  is used, VisiBroker ORB executes in server computer . In , ORBs and (i.e., interface system) are associated with interface system  in . A Web-based server applet, such as Java server applet , interfaces Web-based client applet  with VisiBroker ORB via network  using a conventional network protocol, such as HyperText Transfer Protocol (HTTP). When firewall  is used, data is HTTP-wrapped to get it through the firewall, then unwrapped by the server applet  and sent via standard CORBA IIOP to the ODBMS.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 5A","b":["40","62","80","82","62","64","82","62"]},"With reference to , GemORB establishes a connection to the object server through CORBA compliant communication. GemORB provides those classes that represent and implement CORBA. Unlike GemBuilder for Smalltalk , a connection via GemORB by client (i.e., GemORB client)  does not require an in-depth knowledge of the system design and implementation of object server . An Interface Definition Language (IDL) file defines a correct mapping of objects between the client and the server (i.e., Java client applet  and object server ). An IDL file also defines operations or methods that are available for client  to invoke on the server . Since GemORB is based on CORBA, all the benefits of interoperability among programming languages and platforms apply. In ORB based client and server architecture, in contrast to GemBuilder for Smalltalk , GemORB client  does not reflect server's design. The GemORB client  interfacing with object server using VisiBroker ORB and GemORB minimizes information maintenance and storage by relying on the object server to be a centralized data storage as well as a centralized processing center. The GemORB client  requests information from object server expecting the object server to search and completely process information. The GemORB client  will receive fully processed information that can be readily used without further processing. GemORB clients  expect an answer to a question, while Smalltalk AOI clients  expect from the object server those parts that are needed to solve and derive the solution. Thus, in contrast to Smalltalk AOI client , GemORB client  is considered a \u201cthin client\u201d because the implementation of objects are not represented in client  (i.e., there are not much processing involved on the client side).","Next the preferred embodiment of Web-based client applet implemented using Java (i.e. Java client applet Web mapping toolkit)  executing in client computer  will be described. The objective of Java client applet  is to have an Internet Java-based mapping client, which provides display and query capabilities from a set of geographic objects (i.e., geospatial data), such as raster images and vector \u201cfeatures\u201d. These geographic objects would be retrieved from GemStone OODBMS , which acts or functions as a server, and displayed by the Java client applet . In particular, client applet  uses conventional core Java classes to draw the \u201cfeatures\u201d and images on the display screen of the computer. In particular, all drawings occur within a Java Panel or a Java Frame created within the applet. A Graphics context is created and then the \u201cfeature\u201d is drawn within the Graphics context. If the \u201cfeature\u201d is a point, then gc.fillOval function is used to draw a small circle representing the point \u201cfeature\u201d. If the \u201cfeature\u201d is a line, such as a road, the vg.drawline function is used. If the \u201cfeature\u201d is an area, such as a building, a Polygon is defined with coordinates of the building and then the gc.fillPolygon function is used.","As discussed above, communication between the Java client applet  and GemStone server is accomplished using VisiBroker ORB and GemORB CORBA compliant ORBs.  show application level protocol  to transmit data-driven query and response messages between Web-based client applet  and object server . The application level protocol  is a higher level protocol in relation to IIOP  in protocol hierarchy between Web-based client applet  and object server ","Next, application protocol  will be described in more detail. The retrieval of \u201cfeatures\u201d from the server database is based on the AOI concept.  show display screen of the Java client applet  displaying a world map from which a user can select a location graphically through the use of a rectangle (bounding box). The user also has the option of entering the coordinates for the AOI manually, or selecting a predetermined region as shown in . From the user input, a bounding box of the AOI is transmitted from client applet  via CORBA to Smalltalk server . The server responds with a set of \u201cdatabase\u201d and \u201clibrary\u201d names for which data is available in the selected region. As discussed above, National Imagery and Mapping Agency (NIMA) provides VPF data in \u201cdatabases\u201d, and each \u201cdatabase\u201d contains one or more \u201clibraries\u201d. As shown in , the user then selects a \u201cdatabase\u201d, \u201clibrary\u201d and \u201ctheme\u201d (shown as \u201ccoverage\u201d in ). Once a \u201cdatabase\u201d is selected, all \u201clibraries\u201d for the selected \u201cdatabase\u201d are provided or displayed. Once a \u201clibrary\u201d is selected, all \u201cthemes\u201d for the selected \u201clibrary\u201d are provided or displayed as well as a list of all of the \u201cfeatures\u201d for all of the \u201cthemes\u201d is provided or displayed (as shown in \u201cAll features from all coverages\u201d box in ). Once a particular \u201ctheme\u201d is selected, set of \u201cfeatures\u201d associated with the selected \u201ctheme\u201d, resulting (as shown in \u201cFeatures From Selected Coverage box\u201d in ) in a list of \u201cfeature\u201d classes associated with the selected \u201ctheme\u201d, is returned from the server through another CORBA request. Finally as shown in , the user may select the desired \u201cfeature\u201d classes of the selected AOI and submit a request for them to be displayed by clicking on the Display Selected Feature(s) button. The \u201cfeature\u201d request results in another CORBA communication from applet  to server , and server returns to applet  a set of all of the requested \u201cfeature\u201d classes, which are located in the given AOI. In particular, after clicking on Display Selected Features in , a map (e.g., raster image) appears showing the selected \u201cfeatures\u201d.  shows a display screen for displaying the returned or available \u201cfeatures\u201d for the selected AOI with reference to a map image. In particular,  show a display of the returned \u201cfeatures\u201d with reference to an available raster image associated with the AOI. The \u201cfeatures\u201d that are returned are complex objects with both geometric (coordinate) and attribute information. The applet  can then display, select, and query on the returned \u201cfeatures\u201d as shown in .","In particular, in , ,  and , each menu selection, for example, by highlighting a menu item (e.g., \u201cdatabase\u201d UVMMOUT in ) using a pointing device or keyboard connected to computer , causes a query request according to application protocol  for available or active geospatial data (i.e., data-driven query over a network) from Web-based client applet  in computer  to server , for example, in computer . In particular, each visual screen is a representation of active data. Further, with data-driven queries, there is no need to know the data-structure to query for information, since any information associated with an AOI is provided upon query. Therefore, the application protocol  establishes data zoom means for querying, selecting and displaying available geospatial data objects associated with a geographic area of interest from a geospatial object-oriented database over a network. An advantage of having Web-based client access to an object-oriented mapping database is to give end users the ability to interactively access and use geospatial data quickly (i.e., in near real-time or real-time as the case may be) and efficiently. As discussed above, users of geospatial data typically must have separate software installed into their computer system to view the geospatial data also resident on their own computer systems, and must obtain the data on CD-ROM or other storage media. The Web-based client applet  allows any user with a computer or device with Web browser technology, such as Netscape 4.5, to access the GIDS over the Internet and display map data available in the user's area of interest. In addition to display of map objects, the functionality of the Web-based client applet  includes zoom capabilities (i.e., data level zoom) as simple queries, individual \u201cfeature\u201d selection, \u201cattribute\u201d queries, geometrical queries, and updates of \u201cattribute\u201d values.","As shown in , after the selected \u201cfeatures\u201d in the user's AOI have been returned to Web-based client applet  from server and displayed by Web-based client applet , the user can perform other functions on the selected \u201cfeatures\u201d and to query additional information and details associated with the selected \u201cfeatures\u201d (e.g., \u201cattributes\u201d of the \u201cfeature\u201d). For example, an individual \u201cfeature\u201d may be selected (i.e., queried) by performing a single action of clicking on the \u201cfeature\u201d on the map pane, resulting in sending a query or request to server and receiving a response from server of active data objects, such as the multimedia information of that \u201cfeature\u201d and \u201cattributes\u201d of that \u201cfeature\u201d, which includes information, such as name, scale, and other details (i.e., a simple query). The Web-based client applet  then displays multimedia information of that \u201cfeature\u201d and \u201cattributes\u201d of that \u201cfeature\u201d. In  the \u201cfeatures\u201d are represented on the map by square symbols, although other representations, such as graphical icons or NIMA's symbols may also be used. Further, with reference to , the user can change the colors of the \u201cfeatures\u201d to distinguish between the \u201cfeature\u201d classes retrieved and other available \u201cfeature\u201d classes. A color key may be shown providing the color, \u201cfeature\u201d class, and number of those \u201cfeatures\u201d in the user's selected AOI. The user also may have the ability to change the color of the background. Zoom capabilities are provided, allowing the user to zoom in, zoom out, or zoom to a user-specified area in the AOI. As discussed above, in contrast to traditional GIS systems, the zoom function is at the data level rather than at the visual level. Each individual map screen display in the database system of the present invention is a representation of active or available data.","With reference to , a query may also be performed by clicking on the Query button. This query lists all of the \u201cfeatures\u201d in the map pane and gives the user access to \u201cattribute\u201d information of each \u201cfeature\u201d. More advanced queries may also be performed. The advanced query allows users to display new \u201cfeature\u201d classes in the AOI. The user may also perform \u201cattribute-level\u201d queries. For example, the user can request for all of the four-lane roads to be highlighted, or for all buildings that function as government buildings to be highlighted. Users can also perform geometrical queries, such as \u201cfind all buildings that are greater than 50 feet from the road,\u201d or \u201cfind all homes that are within 20 meters of the Embassy.\u201d","Next the query functions of the present invention will be described in more detail. In particular, the query functions include five types of query. A simple query, displays a list of \u201cfeatures\u201d on the map. Clicking on one the \u201cfeatures\u201d in the list provides or retrieves from server information on selected \u201cfeature\u201d and will highlight the feature red on the map.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 11","FIG. 10","FIG. 11"]},"With reference to , temporal queries may be performed. In particular, another data type included in the object-oriented geospatial database of the present invention is time-varying information associated with data. Therefore, GIDS includes data that has both spatial and temporal aspects or information. For example, temporal information collected by environmental sensors (i.e., a \u201cfeature\u201d or spatial data information) in the AOI allows the user to query weather conditions in the AOI by inputting the time range and the requirements for the environmental sensors. This would be a temporal-to-spatial type query. The user is then presented with a list of times that meet those requirements and from which the user can choose to view pictures and charts of the results. A query may also be made from spatial-to-temporal for spatial data (i.e., an environmental sensor or \u201cfeature\u201d on the map) that has temporal information.","With reference to , \u201cattribute\u201d query allows the user to view individual types of \u201cfeatures\u201d and their properties. For example, by clicking on \u201cRoads\u201d under the Feature Class pull-down menu and \u201cMedian Category\u201d under the Attributes pull-down menu in . Such query would color-code the roads on the map as to whether they have medians.","With reference to , \u201cdistance\u201d query displays a graphical user interface window with a map (which is a data object queried and displayed by Web-based client applet ). The user may click anywhere on this map and then somewhere else to find the distance between the two points (i.e., distances between anywhere the user clicks on the screen). Above the second point is the distance of that leg. If the user clicks somewhere else, the distance between the new point and the point before it is shown above. The total distance of the \u201cjourney\u201d (as shown in ) is shown to the right of the map. A \u201cjourney\u201d is the distance between the first point in the first line segment to the second point in the last line segment. Similar to geometrical queries discussed above, distances between points selected on the display screen of the computer displaying the AOI data object (i.e., the map) may be calculated using conventional formulas or routines, for example, by converting latitude-longitude coordinates to screen coordinates and vice versa. For example, within Web-based client applet , a GreatCircleDistance class calculates the distance between 2 points called GeoPoints (a latitude and a longitude). The GeoPoints are created in the applet by using the range of the AOI and the mouse click location.  shows a JAVA code section of the applet that calculates the distance between two points selected on the display screen of the computer on which Web-based applet  is executing (e.g., computer ). With reference to , \u201cdistance\u201d in the code section is the great circle distance between 2 points clicked on the screen, with gpPoint1 being the first point and gpPoint2 being the second point of a line segment formed between two points clicked.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 15","FIG. 10","FIG. 10","FIG. 16","FIG. 17"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 18A","FIG. 10","FIG. 18B"],"b":"46"},"Update of \u201cattributes\u201d of a \u201cfeature\u201d is also possible with the Web-based client applet . The Add Features function, which may also be implemented as an Update Feature function, initiated by clicking on the Add Feature button in  allows the user to choose what \u201cfeatures\u201d to add or what \u201cfeatures\u201d to Update (as the case may be) in the map after the map has been displayed showing the \u201cfeatures\u201d selected by the user (i.e., after clicking on Display Selected Features in  as discussed above). For example, a newly paved road could have its \u201cattribute\u201d for surface type updated from \u201cgravel\u201d to \u201cconcrete.\u201d In a preferred embodiment, this function of the applet would be password protected so that only users with authorization can change data in the database.","With reference to , the user may also perform Internet queries based on the selected AOI. A user can perform an Internet query by selecting the Internet Query button, and then selecting \u201cWeather\u201d, \u201cNews\u201d, \u201cYellow Pages\u201d, or \u201cOther Maps\u201d. For example, if the user decides to find out the weather for the current AOI, upon receiving a request from the Web-based client applet , the server will locate the nearest city to the user's AOI and will open a web page (using conventional web browsing functions) with that city's local weather forecast.","Next with reference to , a function of displaying in 3-D \u201cfeatures\u201d in the selected AOI and represented in the raster image of  will be described. The user may obtain a Virtual Reality Modeling Language (VRML) generated 3-D model of the \u201cfeatures\u201d in the current AOI. One embodiment of the of the present invention uses the open standard of VRML 2.0 format for 3-D modeling of land and underwater terrain, natural \u201cfeatures\u201d, and man-made \u201cfeatures\u201d. A conventional VRML viewer (3D rendering software) executed as a browser plug-in on the computer executing a Web browser (e.g., computer ) is used to display VRML outputs generated in server . Other programing languages may be used to render 3D images, such as Java 3D Application Programming Interface (API). 3-D models are generated using gridded, Triangulated Irregular Network (TIN), and vector data.","In particular, VRML is a widely used open standard for describing and displaying 3D scenes or worlds over the Internet. The VRML format is a plain text file format that can be edited with a text editor. However, editing complex scenes containing many polygons would be extremely tedious without software designed for VRML. All of the point \u201cfeatures\u201d, such as street signs, coniferous trees, park benches, may be created with conventional or commercial-off-the-shelf VRML software tools or downloaded from VRML repositories on the Internet. In contrast, in the present invention the area and line \u201cfeatures\u201d are created at run-time by interpreting the objects in server ",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 19","b":["62","62","100","102","62","52","62","104","106","104","100"],"i":"a"},"Next the 3D modeling will be described in more detail. The 3D object \u201cfeature\u201d classes were created in a hierarchy similar to the VPF layout. VPF has 4 basic \u201cfeature\u201d categories: point, line, area, and text. Once the 2D \u201cfeatures\u201d are converted to 3D \u201cfeature\u201d objects, they know their state and behavior. For example, once a 2D VPF building \u201cfeature\u201d is converted to a 3D VRML Building object \u201cfeature\u201d, then the Web-based client applet  can send the VRML Building object a message to output itself in VRML format. The VRML Building object inherits methods (behavior) and instance variables (state information) from its superclasses VRML Area Feature (area features) and VRML Object (base objects), as shown in .","Each 3D \u201cfeature\u201d contains a reference to the objectified 2D \u201cfeature\u201d, VRML coordinates, and derived attributes. The reference to the objectified 2D feature, persisted in the OODBMS, allows for fast and easy retrieval with all the original \u201cattributes\u201d and location information. The VRML coordinates are calculated from the original latitude and longitude information stored with the \u201cfeature\u201d. The derived \u201cattributes\u201d are calculated using the original \u201cattributes\u201d and specific knowledge of their meanings. For example in , information for rendering the building roofs is derived from the Structure Shape of Roof (SSR) \u201cattribute\u201d. Translating 2D VPF \u201cfeatures\u201d to 3D VRML \u201cfeatures\u201d requires some prior knowledge of the source data. For example, the source VPF data, as stored in object server , was designed to be viewed on a 2D map. Further, the VPF \u201cfeature\u201d types and \u201cattributes\u201d are not always consistent across source databases.  shows some of the mappings of VPF to VRML \u201cfeatures\u201d. The mappings are stored in a dictionary class and can be easily updated. Adding a bridge line to the 3D scene would require adding a key #bridgel and value #VRMLTransLine to the dictionary. Of course, the VPF \u201cfeature\u201d type #bridgel would have to exist in the 2D source database. Therefore, certain code changes to the VRMLTransLine class specific to bridge line \u201cfeatures\u201d may also be needed.","The coordinate information stored in the 2D objects is in latitude\/longitude decimal degrees. These coordinates must be converted to the VRML coordinate system. The VRML origin is located at the north-west corner of the AOI at elevation of zero. VRML uses a Cartesian, right-handed, three-dimensional coordinate system. The standard convention is to use meters as the unit of measure with the VRML coordinate system. Transforming a location of the \u201cfeature\u201d to the 3D world is done in several steps given that the AOI has been selected and the origin is located in the north-west corner of the AOI.\n\n","The above operations are associated with 102 through 106 in .","Many of the point \u201cfeatures\u201d are constructed with the VRMLIndexFaceSet node. \u201cFeatures\u201d such as fire hydrants and trees require many faces to provide a realistic looking object. When a VRML scene contains many complex features, rendering speed can drop to levels that cause the viewing to be jerky and disorienting to the user. Rendering speeds of 10 frames per second or less are generally considered to be too slow. The VRML player (i.e., software module that generates 3D image according to ) must render all objects within the field of view even though they may be far away. The level-of-detail (LOD) node is one way of optimizing the scene. The LOD node contains center, level, and range fields. The center field defaults to 0.0 0.0 0.0. The level field specifies a list of shape nodes for multiple definitions of the object. The range field specifies a list of viewer-to-shape distances to tell the browser when to change from one LOD to another. The ranges are listed in increasing values where the first distance indicates the highest LOD, first node in the level field list. For example, the LOD node in  describes 3 levels of detail for the fire hydrant point \u201cfeature\u201d. The first level \u201cFireHydrant1.wrl\u201d contains a complex IndexFaceSet node version that will be displayed when the viewer is within 100 meters. The second level \u201cFireHydrant2.wrl\u201d contains a simple Cylinder node version that will be displayed in the 100\u2013200 meter range. (). The third level is an empty Group node that displays no representation beyond 200 meters. Using LOD nodes provides a way to provide both high realism and performance.","Some of the most difficult problems in generating realistic VRML scenes come from a lack of complete shape information. VPF building area \u201cfeatures\u201d, for example, may not include enough information to accurately recreate the buildings as they actually appear. For example, building \u201cattributes\u201d from the VPF data set include height, foot print polygon, function category, roof type, and a few others. Further, building roofs have one \u201cattribute\u201d (i.e., SSR). As discussed above, SSR has values of flat or pitched. Therefore, 2D data may not be good choice for 3D rendering but desirable to use because of ample available data. Although, flat roofs may be easily rendered in 3D, pitched roofs pose more complex problems because the buildings may be curved or have a complex shape. A solution in the present invention for constructing building and pitched roofs on a non-rectangular building is to use an Extrusion node. The Extrusion node has a scale field that defines a list of scale-factor pairs for each point along the spine. The scale values from 1.0 to 0.0 decrease the objects scale with 1.0 leaving the object unchanged. Scale values greater than one increase the size of the object. The roof Extrusion was scaled from 1.0 to 0.0 giving the roof a gradual slant up to the apex ().","Rendering line \u201cfeatures\u201d such as roads and rivers also presents some problems. Many of the road \u201cfeatures\u201d are sometimes finely segmented into separate \u201cfeatures\u201d in VPF, which causes problems when converting and rendering in 3D. In particular, conventional 3D rendering software may have difficulty when drawing Extrusions, as used for line \u201cfeatures\u201d, that have single segment spines that are extruded along the ground. The road Extrusions may not lie flat in such cases. One solution in the present invention is to combine single segment road \u201cfeatures\u201d with adjacent road \u201cfeatures\u201d that share a node. After selectively processing and combining the line \u201cfeatures\u201d, the roads render flat on the ground. Further, road edges from segment to segment along the spine were smooth out.","Next, with reference to , B, A, B and  through , software system in local client server computer  will be described. In particular, software system of local client server computer  has the dual function of server and client, according to operations performed or requested, thereby causing computer  to act as a client server in relation to master server computer  or as a local server in relation to Browser client computers .","For information distribution from a GIDS server, such as master server  or local client server , to a GIDS client, such as Browser client , both the server database application and the client database application as shown in , B and  may be identical. Further, Web-based applet  in local client server computer  acting as local server or local client server, and Web-based applet  in Browser client  may be identical. A peer-to-peer system configuration for CORBA has been implemented. A well-defined set of methods in an IDL file is used between systems to query and retrieve objects. Any system can become a server and client based on the needs.","A role of server and client is based on the role a GIDS system assumes. A GIDS system can be a server to a suite of clients for a certain type of data set. However, the same GIDB system can be a client server in relation to some other server for another data set. This capability demonstrates a \u201csmart client pull\u201d information flow, which is described below.","1. A server computer  is up and running continuously. Client computers  are on-line as needed.","2. Both database server and client server maintain a log. The database server maintains an update server history log . The client server maintains a client history log . These are represented in .","3. A client initiates an update check. When a user logs onto the Gemstone server (via Browser client ), a request is sent to the server via ORB-to-ORB communication (i.e., interface system , or  in case firewall  exists) to check for any update. A check, on whether client server needs an update, from server's client history log  is based on a time stamp and the state of the \u201cfeature\u201d in terms of its location and \u201cattributes\u201d.","This \u201csmart client pull\u201d allows a background processing to automatically update the changes from the selected server. Therefore, an interactive processing from the user is not required to initiate the update. It is also possible to have no user interaction for the actual update process; the system could be set up to automatically update the changes based on well-defined criteria.","The GIDS server records all updates in server history log . The server history log  is maintained as a class variable to VPFDatabase and can be viewed by inspecting \u201cVPFDatabase historyLog\u201d. The format of server history log  is shown in . When a \u201cfeature\u201d is updated, an instance of a CORBA VectorFeature as defined in the IDL file is created and added to the appropriate feature collection in server history log . The \u201ccoverage\u201d date\/time stamp in server history log  is changed to reflect the date\/time that this \u201cfeature\u201d was updated. Thus, the \u201ccoverage\u201d date\/time stamp reflects the date\/time of the most recent update that has occurred within the \u201ccoverage\u201d.","When a client server, such as client server , receives updates from another server, such as server , all updates are recorded in client history log  as described above regarding server history log . In so doing, this client can then be a server to another client. Therefore, in addition to recording the updates in server history log , a client server also keeps a record of the updates in a client history log . The client history log  is maintained as a class variable to VPFDatabase and can be viewed by inspecting \u2018VPFDatabase clientHistoryLog\u2019. The format of the client history log  is shown in . The client history log  records the date\/time of the latest update for each \u201ccoverage\u201d from another server. It is used to determine whether any updates have occurred since the last time the client server was updated by another server.","With reference to , the application level protocol  implementing database update over the network will be described. When client server in client server  logs on, the system automatically sends a CORBA request to server for a list of available updates. During the login, the server invokes the server-side method getUpdateLogFromServer. This server-side method checks the server server history log  for updates. A list of strings comprised of \u201cdatabase\u201d, \u201clibrary\u201d, and \u201ccoverage\u201d names with time stamps, such as \u2018db1-lib1-cov1-01\/27\/99 13:37:37\u2019, is returned to server . The server code then compares time stamps from the returned list of available updates with time stamps from the client history log  to determine if the updates are needed on server . If server does need to be updated, a window appears (as the case may be) allowing the user to select which updates to perform, as shown in .","The user may choose to update all, some, or none of the \u201ccoverages\u201d. The items selected for update are then added to client history log . As an item is being added to client history log , log  is checked to determine if the \u201ccoverage\u201d has been updated previously. If so, the time stamp for that \u201ccoverage\u201d is updated, and the server time stamp is replaced with the previous update time stamp. If not, the server time stamp is replaced with the word \u201cnone\u201d. The time stamp replacement is used to prevent the server from sending back \u201cfeatures\u201d that have already been updated. After the client history log  is changed, the server-side method getFeaturesToUpdate: updateSelections is invoked (i.e., a CORBA request is sent to server ).","For each item in the updateSelections list, the server finds the collection of updated \u201cfeatures\u201d for the selected \u201ccoverage\u201d. If the item in the updateSelections list has \u201cnone\u201d in place of its time stamp, then all of the \u201cfeatures\u201d for this \u201ccoverage\u201d are placed in the set of \u201cfeatures\u201d to be updated. Otherwise, the time stamp from the updateSelections list \u201ccoverage\u201d is compared to the time stamp of each \u201cfeature\u201d in server . If the \u201cfeature\u201d in the server was updated at a later date and time than the \u201ccoverage\u201d from server , then the \u201cfeature\u201d is added to the set of \u201cfeatures\u201d to be updated. This set of \u201cfeatures\u201d to be updated is then returned to the server ","When server in client server computer  receives the set of \u201cfeatures\u201d to be updated, each \u201cfeature\u201d in the set is updated. If the changeType is ADD, then a new \u201cfeature\u201d is created based on the parameters of the VectorFeature. Otherwise, the local client server feature which matches the VectorFeature to be changed, deleted, or moved must be found in server . The local client server \u201cfeature\u201d is found by using the VectorFeature featname and identifier (id). The oldAttributes and oldCoords are then compared with the local client server feature to verify that the VectorFeature and the local client feature are indeed the same.","There may be two potential sources for conflict in the search for a match. First, a server may have locally updated the \u201cfeature\u201d. Since all GIDS systems have a capability to update \u201cfeature\u201d data, a local update could have potentially taken place. A local update has precedence over the network update. Secondly, a \u201cfeature\u201d can be uniquely identified by its \u201cdatabase\u201d, \u201clibrary\u201d, \u201ccoverage\u201d, \u201cfeature\u201d class, and id. NIMA distributes its data with an additional identifier, an edition number. The latest edition will be a superset of all changes from the previous editions. The changes from one edition to another may coincide with the changes in client history log . However, the changes that take place by NIMA and the changes via GIDS may be an independent effort. Because the edition numbers might not be maintained by GIDS (assumed to have the latest released edition), there may be a mismatch in the edition of the server and client server . Therefore, using the VectorFeature featname and identifier (id) may not uniquely identify a feature. If the VectorFeature cannot be verified as a match to a local client feature, then the update for the VectorFeature will not occur.","When the \u201cfeature\u201d has been validated, the local client server \u201cfeature\u201d is then changed, deleted, or moved based on the parameters of the VectorFeature. As discussed above, client history log  will be modified to reflect these updates from server ","The object-oriented geospatial database system (i.e., GIDS) of the present invention allows users interested in a wide variety of mapping data to access and benefit from the GIDS over the Internet from any platform using a Web-enabled web browser. This allows the functionality of more powerful server machines to be exhibited on less capable client machines. This also gives users faster access to mapping data. The migration to a Web-based mapping client is advantageous by allowing clients with modest computing resources user-friendly access to state-of-the-art mapping data and software. Given an AOI, the GIDS provides multiple mapping data types for that region to the user for visualization (2D or 3D) and analysis. Further, with data-driven query capabilities over the network, data dissemination will be near-real-time or real-time (as the case may be) over the network. In summary, the GIDS fulfills a much needed requirement to provide mapping data of multiple types in an AOI to user in near-real-time or real-time (as the case may be) over a network, such as WWW.","Current alternative geospatial data systems obtain discrete data via CD-ROM or other media to then load the data into various software packages to individually generate 3D views, perform GIS queries, and perform other functionalities. There is no unified approach available.","The many features and advantages of the present invention are apparent from the detailed specification and thus, it is intended by the appended claims to cover all such features and advantages of the system which fall within the true spirit and scope of the invention. Further, numerous modifications and changes will readily occur to those skilled in the art from the disclosure of this invention. It is not desired to limit the invention to the exact construction and operation illustrated and described; accordingly, suitable modification and equivalents may be resorted to, as falling within the scope and spirit of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 4A","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 4B","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIGS. 5A and 5B","FIG. 4A"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIGS. 6A and 6B","FIG. 4B"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 9","FIG. 7"],"b":"8"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 14A"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 18A"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 18B"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 23","FIG. 24"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 26","FIG. 1"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 27","FIG. 1"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 28","FIG. 1"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 29","FIG. 1"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 30","FIG. 1"]}]},"DETDESC":[{},{}]}
