---
title: Performing taint analysis for javascript software using a control flow graph
abstract: This disclosure generally relates to analyzing and validating computer software written in an object-oriented scripting language such as Javascript. The analyzing and validating method comprises marking an object in source code of a software program written in an object-oriented scripting language such as JavaScript; identifying one or more locations paired with the object in the source code of the software program; constructing a control flow graph (CFG) for the software program; and determining whether there is any path in the CFG that leads from a first node corresponding to the marked object to a second node corresponding to any identified location paired with the object. In an embodiment, the object is marked in source code using a keyword.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08793665&OS=08793665&RS=08793665
owner: Fujitsu Limited
number: 08793665
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20110826
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["This disclosure generally relates to analyzing and validating computer software written in JAVASCRIPT.","JAVASCRIPT is a prototype-based, object-oriented scripting language that is dynamic, weakly typed, and has first-class functions. It is an implementation of the ECMAScript language standard and is primarily used as a client-side scripting language. For web-based applications, JAVASCRIPT language is often used to provide enhanced user interfaces and dynamic websites, enabling programmatic access to computational objects within a host environment. It is an interpretive language. Instead of compiling the source code of a software program written in JAVASCRIPT language into machine code for execution, the software program is indirectly executed (i.e., interpreted) by a JAVASCRIPT language interpreter program. That is, the JAVASCRIPT language interpreter interprets the JAVASCRIPT language source code of the software program. Almost all web browsers currently support the capability of interpreting source code written in JAVASCRIPT language.","The JAVASCRIPT language has some noticeable features. For example, JAVASCRIPT language supports structured programming syntax, such as \u201cif\u201d statements, \u201cwhile\u201d loops, \u201cswitch\u201d statements, and function-level scoping. JAVASCRIPT language version 1.7 also supports block-level scoping with the \u201clet\u201d keyword. It makes a distinction between expressions and statements. With JAVASCRIPT language, types are associated with values, not with variables (i.e., dynamic typing). For example, a variable can be bound to a number at first and later rebound to a string. JAVASCRIPT language is almost entirely object-based. Object properties and their values can be added, changed, or deleted at run-time. Functions are first-class and are objects themselves.","JAVASCRIPT is a client-side scripting language often used in web-based applications. Particular embodiments analyze and validate software source code written in JAVASCRIPT language using control flow graphs. In particular embodiments, a control flow graph is constructed for a software program written in JAVASCRIPT language. Note that a program may include one or more modules (e.g., objects, classes, functions, etc.). Various types of analysis and validation (e.g., bug detection, symbolic execution, taint analysis, or sensitive-value tracking) are then performed for the software program using the control flow graph.","JAVASCRIPT language has certain features that are unlike other programming languages, such as C or Java. The language's semantic and syntax definition may result in various implicit behaviors at run-time that are not explicit and clear in the source code written in JAVASCRIPT language. For example, JAVASCRIPT language does not enforce variable types, so that a variable declared one type can be assigned a value of another type. A function may redefine itself dynamically each time it is invoked (e.g., called), so that the same function may behave differently or provide different results at different times. Consequently, code written in JAVASCRIPT language may become very complex at run-time, and it may be very difficult to detect bugs and vulnerabilities (e.g., security vulnerabilities) in the code.","To further illustrate, consider the following sample code written in JAVASCRIPT language.",{"@attributes":{"id":"p-0017","num":"0016"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SAMPLE CODE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u20021","function lookup(obj, name) {"]},{"entry":[{},"\u20022","\u2003\u2003if (name === \u201cbadfield\u201d){"]},{"entry":[{},"\u20023","\u2003\u2003\u2003\u2003return \u201cnot allowed!\u201d;"]},{"entry":[{},"\u20024","\u2003\u2003}"]},{"entry":[{},"\u20025","\u2003\u2003else {"]},{"entry":[{},"\u20026","\u2003\u2003\u2003\u2003return obj[name];"]},{"entry":[{},"\u20027","\u2003\u2003}"]},{"entry":[{},"\u20028","}"]},{"entry":[{},"\u20029","var sneaky_obj = new Object( );"]},{"entry":[{},"10","sneaky_obj[\u201ctoString\u201d] = function( ) {return \u201cbadfield\u201d;}"]},{"entry":[{},"11","var x = lookup(o, sneaky_obj);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The following sample code illustrates a different implementation of the \u201clookup\u201d function so that the sanity check for \u201cbadfield\u201d as an input value for \u201cname\u201d cannot be similarly circumvented.",{"@attributes":{"id":"p-0019","num":"0018"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SAMPLE CODE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u20021","function lookup(obj, name) {"]},{"entry":[{},"\u20022","\u2003\u2003if (typeof name !== \u201cstring\u201d || name === \u201cbadfield\u201d) {"]},{"entry":[{},"\u20023","\u2003\u2003\u2003\u2003return \u201cnot allowed!\u201d;"]},{"entry":[{},"\u20024","\u2003\u2003}"]},{"entry":[{},"\u20025","\u2003\u2003else {"]},{"entry":[{},"\u20026","\u2003\u2003\u2003\u2003return obj[name];"]},{"entry":[{},"\u20027","\u2003\u2003}"]},{"entry":[{},"\u20028","}"]},{"entry":[{},"\u20029","var sneaky_obj = new Object( );"]},{"entry":[{},"10","sneaky_obj[\u201ctoString\u201d] = function( ) {return \u201cbadfield\u201d;}"]},{"entry":[{},"11","var x = lookup(o, sneaky_obj);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The above example illustrates how the implicit behaviors found at run-time for JAVASCRIPT language code as a result of the language's semantic and syntax features may cause errors and vulnerabilities in the code. Particular embodiments may analyze and validate software written in JAVASCRIPT language using control flow graphs in order to catch at least some of such errors and vulnerabilities in the source code.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100"]},"Given a software program written in JAVASCRIPT language, particular embodiments may construct a control flow graph for the software program by analyzing its source code. In computer science, a control flow graph (CFG), also referred to as a flow analysis graph, is a representation, using graph notation, of all paths that may be traversed through a software program during its execution. Each node in a CFG represents a basic block (e.g., a straight-line piece of code without any jumps or jump targets, with jump targets starting a block and jumps ending a block). Each directed edge in the CFG represents a jump in the control flow. In most representations, there are two specially designated blocks: the \u201cENTRY\u201d block, through which control enters into the flow graph, and the \u201cEXIT\u201d block, through which all control flow leaves. Control flow analysis is a static code analysis technique for determining the control flow of a software program.","CFGs are essential to many code analysis tools. For example, reachability is a useful graph property. If a block or sub-graph is not connected from the sub-graph containing the \u201cENTRY\u201d block, that block or sub-graph is unreachable during any execution, and so corresponding to unreachable code. If the \u201cEXIT\u201d block is unreachable from the \u201cENTRY\u201d block, it indicates an infinite loop in the code.  illustrates a portion of an example control flow graph . There are a few nodes and edges in  for illustration purposes only, and the \u201cENTRY\u201d and \u201cEXIT\u201d blocks are not shown in . In practice, a CFG may be very complicated, containing many nodes interconnected via many directed edges.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIG. 1"],"b":["301","120"]},"Particular embodiments may desugar the parsed source code of the software program to construct a \u03bb(lambda-JS) model for the software program, as illustrated in STEP . In particular embodiments, this step may be performed by a \u03bbdesugaring component  illustrated in , which takes the parsed source code of a software program as input and produces a \u03bbmodel of the software program as output. \u03bbis a set of JAVASCRIPT language semantics, together with tools, tests, and mechanized semantics implemented as computer software, developed by researchers at Brown University. The core language embodies the essential features of JAVASCRIPT language. Source code written in JAVASCRIPT language can be desugared into \u03bb. Desugaring handles notorious JAVASCRIPT language features such as \u201cthis\u201d and \u201cwith\u201d so that \u03bbitself remains relatively simple. Both \u03bband desugaring can be mechanized.","When a software program written in JAVASCRIPT language is desugared into an equivalent program implemented using \u03bbsemantics to create a \u03bbmodel, the \u03bbprogram behaves exactly the same as the original JAVASCRIPT language program. There is no new behavior added to or existing behavior deleted from the \u03bbprogram. At the same time, all the implicit behaviors in the JAVASCRIPT language program become explicit in the \u03bbprogram, which makes the amount of code of the \u03bbprogram usually more than the amount of code of the JAVASCRIPT language program. On the other hand, since there is no implicit behavior in a \u03bbprogram, the interpreter for \u03bbprograms is simpler than the interpreter for JAVASCRIPT language programs.","The following illustrates the \u201clookup\u201d function from SAMPLE CODE 2 after being converted into \u03bbsemantics.",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009(update-field (deref $global)"]},{"entry":[{},"\u2003\u201clookup\u201d"]},{"entry":[{},"\u2003(alloc (object (\u201c$code\u201d (lambda (this arguments)"]},{"entry":[{},"\u2003(let ((obj (get-field (deref (deref arguments)) \u201c0\u201d)))"]},{"entry":[{},"\u2003(let ((field (get-field (deref (deref arguments)) \u201c1\u201d)))"]},{"entry":[{},"\u2003\u2003(let ( )"]},{"entry":[{},"\u2003\u2003(label $return"]},{"entry":[{},"\u2003\u2003(begin"]},{"entry":[{},"\u2003\u2003\u2003(let (($1Or (if (prim \u201c===\u201d (prim \u201ctypeof\u201d field)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cstring\u201d) #f #t)))"]},{"entry":[{},"\u2003\u2003\u2003(if (prim \u201cprim->bool\u201d $lOr) $lOr"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003(prim \u201c===\u201d field \u201cbadfield\u201d)))"]},{"entry":[{},"\u2003\u2003\u2003\u2003(break $return \u201cnot allowed!\u201d)"]},{"entry":[{},"\u2003\u2003\u2003\u2003(break $return (get-field (deref (let (($0 obj))"]},{"entry":[{},"\u2003\u2003\u2003(if (prim \u201c===\u201d (prim \u201ctypeof\u201d $0) \u201cundefined\u201d)"]},{"entry":[{},"\u2003\u2003\u2003\u2003(throw (app $makeException \u201cTypeError\u201d)"]},{"entry":[{},"...)))"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"sub":["JS ","JS "]},"Particular embodiments may convert the \u03bbmodel of the software program to a continuation-passing style (CPS) model, as illustrated in STEP . In particular embodiments, this step may be performed by a CPS component  illustrated in , which takes a \u03bbmodel of a software program as input and produces a CPS model of the software program as output.","In functional programming, CPS is a style of programming in which control is passed explicitly in the form of a continuation, which is an abstract representation of the control state of a software program. For example, instead of returning values as in the more common direct style, a function written in continuation-passing style takes an explicit \u201ccontinuation\u201d argument (i.e., a function that is meant to receive the result of the computation performed within the original function). Similarly, when a subroutine is invoked within a CPS function, the calling function is required to supply a procedure to be invoked with the subroutine's \u201creturn\u201d value. Expressing code in this form makes a number of things explicit, which are implicit in direct style. These may include: procedure returns, which become apparent as calls to a continuation; intermediate values, which are all given names; orders of argument evaluation, which are made explicit; and tail calls, which are calling a procedure with the same continuation that has been passed to the caller, unmodified.","In particular embodiments, there are only three types of operations found in CPS models: \u201clet\u201d, \u201cif\u201d, and \u201capp\u201d. All other types of operations (e.g., \u201cwhile\u201d, \u201cbreak\u201d, etc.) in the \u03bbmodel are removed. The \u201clet\u201d operation is a straight assignment (e.g., \u201clet y=x\u201d assigns the value of \u201cx\u201d to \u201cy\u201d). The \u201cif\u201d operation causes a branching in an execution path based on some branching condition or conditions. The \u201capp\u201d operation applies a function call (e.g., \u201capp lookup\u201d invokes the \u201clookup\u201d function).","Particular embodiments may optimize the CPS model of the software program, as illustrated in STEP , so that the CFG eventually constructed for the software program has less number of nodes. For example, an uninterrupted sequence of \u201clet\u201d operations may be merged so that they are represented by a single node in the CFG constructed during the subsequent step (e.g., a sequence of \u201clet\u201d operations, \u201clet b=a; let d=c; let f=e\u201d can be merged into one node in the CFG).","Particular embodiments may analyze the execution paths in the CPS model of the software program and construct a CFG for the software program, as illustrated in STEP . In particular embodiments, this step may be performed by a CFG component  illustrated in , which takes a CPS model of a software program as input and produces a CFG of the software program as output. An example CFG  is illustrated in . Each path through CFG  (e.g., formed by nodes and directed edges) corresponds to an execution path of the software program represented by CFG . The nodes correspond to the operations (e.g., \u201clet\u201d, \u201cif\u201d, \u201capp\u201d, \u201clambda\u201d) found in the software program. In particular embodiments, the CPS model of the software program may be analyzed to determine all the execution paths and the operations along these paths for the software program, and the CFG may be constructed accordingly to represent these paths and operations.","Since a CFG contains all the execution paths and the operations along these paths of a software program, the CFG may be used to analyze the software program, such as catching errors in the source code, tracking variables, or performing taint analysis or symbolic execution.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 4","FIG. 1"],"b":"160"},"Suppose that a CFG has been constructed for a software program written in JAVASCRIPT language (e.g., using the method illustrated in ). Optionally, in particular embodiments, this CFG may be represented using a suitable data structure and stored in a computer-readable medium. Particular embodiments may access the CFG of the software program, as illustrated in STEP . Typically, there are design specification or requirements for the software program, which may indicate the proper behavior or the correct input or output of the software program. Such specification or requirements may be used during the flow analysis of the software program to help determine whether a specific behavior or response of the software program is correct. Particular embodiments may access the design specification or requirements of the software program, as illustrated in STEP . In particular embodiments, if the flow analysis is performed automatically, then the specification may be expressed as a set of formal requirements that the software program must satisfy. Each formal requirement may be represented in a predefined syntax.","Particular embodiments may perform flow analysis on the software program using the CFG of the software program and optionally, in reference to the specification of the software program, to catch problems (e.g., bugs), if any, in the source code of the software program, as illustrated in STEP . There may be various types of code problems that may be captured by analyzing the CFG. For example, if an execution path in the CFG produces a prohibited output or result, this indicates that there are errors (i.e., bugs) in the source code that cause the prohibited output to be produced. If there is a portion of the CFG that is unreachable, this indicates that the code corresponding to that portion of the CFG can never be executed. A portion of the CFG may throw an exception, may be unreliable, or may provide unintended or abnormal behavior or result. Particular embodiments may analyze the CFG to determine if there is any portion of the CFG (e.g., a node, a sub-graph, or an execution path) that violates a formal requirement of the software program. If so, it is an indication that there are problems or errors in the source code of the software program. If no, it is an indication that the software program is valid (e.g., behaving as it is designed to or no error in its source code).","To further explain the flow analysis for a software program, consider the two versions of the example \u201clookup\u201d function above.  illustrates a portion of a CFG  corresponding to the first version of the \u201clookup\u201d function illustrated in SAMPLE CODE 1; and  illustrates a portion of a CFG  corresponding to the second version of the \u201clookup\u201d function illustrated in SAMPLE CODE 2. The specification of the \u201clookup\u201d function indicates that the function should not return any valid object if the name of the object, as indicated by the \u201cname\u201d variable, is \u201cbadfield\u201d. Thus, if there is any execution path in either CFG that results in a valid object to be returned by the \u201clookup\u201d function when the name of the object is \u201cbadfield\u201d, then there are errors in the corresponding version of the source code of the \u201clookup\u201d function.","Comparing CFGs  and , there is an extra node  in CFG  that is not found in CFG . Node  is where a valid object can be returned by the \u201clookup\u201d function when the name of the object is \u201cbadfield\u201d, and thus the section of the function's code corresponding to node  has a bug. Recall that for the version of the \u201clookup\u201d function illustrated in SAMPLE CODE 1, the sanity check against \u201cbadfield\u201d at line 2 can be circumvented because JAVASCRIPT language does not enforce variable types. This bug in the version of the source code illustrated in SAMPLE CODE 1 can be captured as a result of examining the extra node  in CFG , which corresponds to the version of the source code illustrated in SAMPLE CODE 1. For the version of the \u201clookup\u201d function illustrated in SAMPLE CODE 2, the sanity check against \u201cbadfield\u201d at line 2 cannot be circumvented because in this case, both the type and the value of the \u201cname\u201d variable are validated. Consequently, there is no execution path in CFG , which corresponds to the version of the source code illustrated in SAMPLE CODE 2, where a valid object can be returned by the lookup\u201d function when the name of the object is \u201cbadfield\u201d. By analyzing CFG  corresponding to the first version of the \u201clookup\u201d function, the error in this version of the source code may be located.","In particular embodiments, specific objects (e.g., variables) in the source code of a software program may be tracked using a CFG of the software program to determine where in the code the objects are accessed.  illustrates an example method for tracking variables of a software program written in JAVASCRIPT language. Particular embodiments may annotate the source code of the program to indicate which variables in the program should be tracked, as illustrated in STEP . In particular embodiments, this step may be performed by an annotation component  illustrated in , which takes the JAVASCRIPT language source code of a software program as input and produces the annotated source code of the software program as output. Note that any number of variables in a software program may be tracked. In particular embodiments, each variable in the source code to be tracked may be marked with \u201c_mark_\u201d, and each location in the source code where the marked variable is examined is identified with \u201c_examine_\u201d. Note that a variable may be examined at one or more locations in the code.","In particular embodiments, \u201c_mark_\u201d and \u201c_examine_\u201d are predefined objects (e.g., functions) that flag the variable and cause the variable to be examined at specific locations in the code. This allows any heap location to be marked in the source code, and then the CFG may be used to determine what statements or parts of the code access this marked variable or value.","To further illustrate, consider the following sample code written in JAVASCRIPT language.",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SAMPLE CODE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u20021","var params = { };"]},{"entry":[{},"\u20022","function init( ) {"]},{"entry":[{},"\u20023","\u2003\u2003var s = document.location.href;"]},{"entry":[{},"\u20024","\u2003\u2003temp_params = {s.substring(...)};"]},{"entry":[{},"\u20025","\u2003\u2003params = temp_params;"]},{"entry":[{},"\u20026","}"]},{"entry":[{},"\u20027","function getString(key) {"]},{"entry":[{},"\u20028","\u2003\u2003return params[key];"]},{"entry":[{},"\u20029","}"]},{"entry":[{},"10","function gadget( ) {"]},{"entry":[{},"11","\u2003\u2003document.write(\u201c...\u201d + getString(\u201cmyname\u201d) + \u201c...\u201d);"]},{"entry":[{},"12","}"]},{"entry":[{},"13","init( );"]},{"entry":[{},"14","gadget( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SAMPLE CODE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u20021","_mark_(document.location.href, \u201cDANGEROUS\u201d);"]},{"entry":[{},"\u20022","document.write = function(str) {"]},{"entry":[{},"\u20023","\u2003\u2003_examine_(\u201cChecking document.write argument\u201d, str);"]},{"entry":[{},"\u20024","}"]},{"entry":[{},"\u20025","var params = { };"]},{"entry":[{},"\u20026","function init( ) {"]},{"entry":[{},"\u20027","\u2003\u2003var s = document.location.href;"]},{"entry":[{},"\u20028","\u2003\u2003temp_params = {s.substring(...)};"]},{"entry":[{},"\u20029","\u2003\u2003params = temp_params;"]},{"entry":[{},"10","}"]},{"entry":[{},"11","function getString(key) {"]},{"entry":[{},"12","\u2003\u2003return params[key];"]},{"entry":[{},"13","}"]},{"entry":[{},"14","function gadget( ) {"]},{"entry":[{},"15","\u2003\u2003document.write(\u201c...\u201d + getString(\u201cmyname\u201d) + \u201c...\u201d);"]},{"entry":[{},"16","}"]},{"entry":[{},"17","init( );"]},{"entry":[{},"18","gadget( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Particular embodiments may construct a CFG for the software program based on the annotated source code, as illustrated in STEP  (e.g., using the method illustrated in ). The added annotation code (e.g., \u201c_mark_\u201d and \u201c_examine_\u201d) does not change the control flow of the software program, but may cause several extra nodes, corresponding to the added code, to be included in the CFG. For example, \u201c_examine_\u201d may correspond to an \u201capp\u201d operation.","Particular embodiments may track each marked variable using the CFG to determine where and how the variable is accessed when the code is executed, as illustrated in STEP . In particular embodiments, this step may be performed by flow analysis component  illustrated in , which takes the CFG of a software program as input and reports the results of the analysis as output.","In particular embodiments, each marked variable in the source code corresponds to a specific node in the CFG. To track a variable, each path leading from the corresponding node may be followed to determine to which subsequent node in the CFG the path may lead. For example, consider SAMPLE CODE 4 where \u201cdocument.location.href\u201d has been marked for tracking. There is a node, referred to as node 1, in the CFG of SAMPLE CODE 4 corresponding to \u201cdocument.location.href\u201d.","First, the \u201cinit\u201d function is invoked at line 17. Within \u201cinit\u201d, \u201cdocument.location.href\u201d is assigned to variable \u201cs\u201d at line 7; the equivalent contents of \u201cdocument.location.href\u201d in the variable \u201cs\u201d are modified by \u201cs.substring\u201d and the result assigned to variable \u201ctemp_params\u201d at line 8; and \u201ctemp_params\u201d is assigned to variable \u201cparams\u201d at line 9. Thus, in the CFG, there is an execution path leading from node 1 to the node corresponding to the code at line 7, and then to the node corresponding to the code at line 8, and then to the node corresponding to the code at line 9.","Second, the \u201cgadget\u201d function is invoked at line 18. Within \u201cgadget\u201d, \u201cdocument.write\u201d invokes \u201cgetString\u201d at line 15, which in turn accesses \u201cparams\u201d. Since \u201cparams\u201d depends on \u201cdocument.location.href\u201d, \u201cdocument.write\u201d also depends on \u201cdocument.location.href\u201d. In the CFG, there is an execution path leading from node 1 eventually to the node corresponding to the code at line 15.","By tracing the execution paths (i.e., flows) in a CFG leading from the node corresponding to a marked variable, particular embodiments may determine where and how (e.g., used, modified, etc.) in the source code the variable is accessed when the software is executed, which may not be readily obvious by merely examining the source code itself. In the above example, if looking at the source code for the \u201cgadget\u201d function, it only shows that \u201cgetString\u201d is invoked. And looking at the source code for the \u201cgetString\u201d function, only \u201cparams\u201d is accessed and there is no indication that \u201cdocument.location.href\u201d is accessed. However, because in the CFG there is a path leading from the node corresponding to \u201cdocument.location.href\u201d to the node corresponding to the code at line 15, this indicates that \u201cdocument.location.href\u201d is accessed by the code at line 15.","Particular embodiments may report the execution paths that lead from or contain the node corresponding to a marked variable (e.g., as stack traces). For example, with \u201c_examine_\u201d, at each identified location, the stack trace may be printed out. The following illustrate an example stack trace corresponding to a path containing the node corresponding to a marked variable. The stack trace shows corresponding lines in the source code as well.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The mark DANGEROUS was found, on the value {(Any"]},{"entry":[{},"String)@{DANGEROUS}, (Any String)@{ }, }"]},{"entry":[{},"[anonymous_paste.js: line 1, col 1]"]},{"entry":[{},"_mark_(document.location.href, \u201cDANGEROUS\u201d);"]},{"entry":[{},"[anonymous_paste.js: line 11, col 15]"]},{"entry":[{},"gadgets.util=(function( ){"]},{"entry":[{},"[anonymous_paste.js: line 140, col 16] var"]},{"entry":[{},"_IG_Prefs=(function( ){"]},{"entry":[{},"[anonymous_paste.js: line 173, col 1] load(new"]},{"entry":[{},"_IG_Prefs(_MODULE_));"]},{"entry":[{},"[anonymous_paste.js: line 143, col 2] if(!A){"]},{"entry":[{},"[anonymous_paste.js: line 122, col 5] if(!I){"]},{"entry":[{},"[anonymous_paste.js: line 123, col 2] C( );"]},{"entry":[{},"[anonymous_paste.js: line 35, col 6] if(E!==null&&typeof"]},{"entry":[{},"Q===\u201cundefined\u201d){"]},{"entry":[{},"[anonymous_paste.js: line 40, col 12] var"]},{"entry":[{},"J=G(Q||document.location.href);"]},{"entry":[{},"[anonymous_paste.js: line 17, col 2] if(J===\u22121){"]},{"entry":[{},"[anonymous_paste.js: line 44, col 3] if(N===\u22121) {"]},{"entry":[{},"[anonymous_paste.js: line 44, col 3] if(N===\u22121) {"]},{"entry":[{},"[anonymous_paste.js: line 50, col 8] M[I]=O(P)"]},{"entry":[{},"[anonymous_paste.js: line 52, col 6] if(typeof"]},{"entry":[{},"Q===\u201cundefined\u201d){"]},{"entry":[{},"[anonymous_paste.js: line 90, col 2]"]},{"entry":[{},"if(L.hasOwnProperty(K)){"]},{"entry":[{},"[anonymous_paste.js: line 91, col 6]"]},{"entry":[{},"if(K.indexOf(\u201cup_\u201d)===0&&K.length>3){"]},{"entry":[{},"[anonymous_paste.js: line 92, col 18]"]},{"entry":[{},"J[K.substr(3)]=String(L[K]);"]},{"entry":[{},"[anonymous_paste.js: line 90, col 2]"]},{"entry":[{},"if(L.hasOwnProperty(K)){"]},{"entry":[{},"[anonymous_paste.js: line 91, col 6]"]},{"entry":[{},"if(K.indexOf(\u201cup_\u201d)===0&&K.length>3){"]},{"entry":[{},"[anonymous_paste.js: line 95, col 3] if(K===\u201ccountry\u201d){"]},{"entry":[{},"[anonymous_paste.js: line 90, col 2]"]},{"entry":[{},"if(L.hasOwnProperty(K))"]},{"entry":[{},"[anonymous_paste.js: line 91, col 6]"]},{"entry":[{},"if(K.indexOf(\u201cup_\u201d)===0&&K.length>3){"]},{"entry":[{},"[anonymous_paste.js: line 92, col 18]"]},{"entry":[{},"J[K.substr(3)]=String(L[K]);"]},{"entry":[{},"[anonymous_paste.js: line 90, col 2]"]},{"entry":[{},"if(L.hasOwnProperty(K)){"]},{"entry":[{},"[anonymous_paste.js: line 91, col 6]"]},{"entry":[{},"if(K.indexOf(\u201cup_\u201d)===0&&K.length>3){"]},{"entry":[{},"[anonymous_paste.js: line 95, col 3] if(K===\u201ccountry\u201d){"]},{"entry":[{},"[anonymous_paste.js: line 99, col 7] if(K===\u201clang\u201d){"]},{"entry":[{},"[anonymous_paste.js: line 90, col 2]"]},{"entry":[{},"if(L.hasOwnProperty(K)){"]},{"entry":[{},"[anonymous_paste.js: line 91, col 6]"]},{"entry":[{},"if(K.indexOf(\u201cup_\u201d)===0&&K.length>3){"]},{"entry":[{},"[anonymous_paste.js: line 95, col 3] if(K===\u201ccountry\u201d){"]},{"entry":[{},"[anonymous_paste.js: line 99, col 7] if(K===\u201clang\u201d){"]},{"entry":[{},"[anonymous_paste.js: line 103, col 4] if(K===\u201cmid\u201d){"]},{"entry":[{},"[anonymous_paste.js: line 124, col 2] G( );"]},{"entry":[{},"[anonymous_paste.js: line 134, col 5] if(K===\u201c.lang\u201d) {"]},{"entry":[{},"[anonymous_paste.js: line 137, col 12] return F(J[K]);"]},{"entry":[{},"[anonymous_paste.js: line 5, col 5] _examine_(\u201cArgument"]},{"entry":[{},"to document.write: \u201d, str);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In particular embodiments, tracking variables throughout a software program may help perform taint analysis. Sometimes, there may be bad (e.g., unsecure or untrustworthy) variables accessed by a software program. For example, these bad variables may be user input variables that may have questionable values. It may not be advisable to have good (e.g., sensitive) code accessing these bad variables. Conversely, sometimes, there may be good (e.g., sensitive) variables, such as global objects (e.g., documents) involved in the software program, and it may not be advisable to have bad (e.g., unsecure or untrustworthy) code accessing these good variables. For example, the bad code may be third-party, and thus untrustworthy, functions. Note that what is considered good or bad may be determined by software designers or developers (e.g., based on the specification or requirements of the software). An object may be considered bad in one instance but neutral or good in another instance.","As an example, a web page may contain various contents, including the page's primary contents and advertisements. The advertisements may be managed by a function supplied by an advertiser (e.g., a third party), while the primary contents may be managed by functions implementing the web site to which the web page belongs. It may not be advisable to allow the function supplied by the third-party advertiser to access or modify the primary contents in the page. In this case, taint analysis may be used to ensure that the function supplied by the third-party advertiser does not access the primary contents in the page.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 8","FIG. 1"],"b":["801","110"]},"In particular embodiments, each object in the source code may be marked with \u201c_mark_\u201d, and each location may be identified with \u201c_examine_\u201d. This causes the marked object to be examined at the specified location. In particular embodiments, good objects may be marked to be examined at bad locations. Conversely, bad objects may be marked to be examined at good locations. Again, what is considered good or bad may depend on the specification of the software.","Particular embodiments may construct a CFG for the software program based on the annotated source code, as illustrated in STEP  (e.g., using the method illustrated in ). In the CFG, each marked object or identified location corresponds to a specific node.","Particular embodiments may track each marked object using the CFG to determine whether there is a path leading from the node corresponding to the marked object to the node corresponding to the identified location, as illustrated in STEP . In particular embodiments, this step may be performed by flow analysis component  illustrated in , which takes the CFG of a software program as input and reports the results of the analysis as output. More specifically, in particular embodiments, each good object is paired with one or more bad locations when annotating the source code (e.g., using \u201c_mark_\u201d and \u201c_examine_\u201d). Conversely, each bad object is paired with one or more good locations when annotating the source code. When examining the CFG, for each good object, particular embodiments may determine whether there is any path leading from the node corresponding to the good object to the node corresponding to any paired bad location in the CFG. Similarly, for each bad object, particular embodiments may determine whether there is any path leading from the node corresponding to the bad object to the node corresponding to any paired good location in the CFG. If so, particular embodiments may alert the software developers because a bad location is accessing a good object or a good location is accessing a bad object. The software developers may then use the information to modify the source code if necessary.","In particular embodiments, symbolic execution may be performed on a software program written in JAVASCRIPT language using the CFG of the software program. Symbolic execution is a non-explicit state model-checking technique that treats input to a software program as symbol variables. It creates complex equations by executing all finite paths in the software program with symbolic variables and then solves the complex equations with a solver, typically known as a decision procedure, to obtain error scenarios, if any. In contrast to explicit state model checking, symbolic execution is able to work out all possible input values and all possible use cases of all possible input values in the software program under analysis. Symbolic execution can be used to automatically generate test inputs with high structural coverage for the program under analysis.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 9","FIG. 1","FIG. 3"],"b":["170","901","903","905"]},"For a software program, the multiple possible execution paths result from various types of conditional statements in the source code, such as, for example and without limitation, \u201cif-else\u201d, \u201cfor\u201d, \u201cwhile\u201d, or \u201ccase\u201d. Considering the following sample code segment that includes an \u201cif-else\u201d statement.",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SAMPLE CODE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","if (x > 0)"]},{"entry":[{},"2","\u2003\u2003y = x + 10;"]},{"entry":[{},"3","else"]},{"entry":[{},"4","\u2003\u2003y = x \u2212 5;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"As another example, considering the following sample code segment that includes a \u201cwhile\u201d loop.",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SAMPLE CODE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","i = 10;"]},{"entry":[{},"2","t = 0;"]},{"entry":[{},"3","while (i > 0) {"]},{"entry":[{},"4","\u2003\u2003t = t + i;"]},{"entry":[{},"5","\u2003\u2003i\u2212\u2212;"]},{"entry":[{},"6","}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Given a specific path, there may be one or more variables accessed along the path, and there may be one or more constraints that, if satisfied, cause the control flow of the program to proceed along this path. Some of the variables accessed along the path may be a part of the constraints associated with the path. For example, in SAMPLE CODE 5, the value of the \u201cx\u201d variable determines along which path to proceed, and thus, \u201cx\u201d is involved in the constraints associated with the paths. On the other hand, the \u201cy\u201d variable is not a part of the branching condition and its value does not determine along which path to proceed, and thus, \u201cy\u201d is not involved in the constraints associated with the paths even though \u201cy\u201d is accessed along each path.","In particular embodiments, given a specific path in the CFG, symbolically executing the software program along this path results in a mathematical expression that represents the constraints associated with the path. If these constraints are satisfied, then the control flow of the program proceeds along this path. The mathematical expression may be solved using, for example, a Satisfiability Modulo Theory (SMT) solver. If there is any solution to the mathematical expression (i.e., the mathematical expression is solvable), then the path is feasible (i.e., it is possible to find a set of input values that cause this path to be executed). On the other hand, if the mathematical expression is unsolvable (i.e., there is no solution that can possibly satisfy the mathematical expression), then the path is unfeasible (i.e., there is no possible set of input values that can cause this path to be executed).","If the path is identified as unfeasible, then particular embodiments may report the path to software developers so that the path may be removed from the source code or modified so that it becomes feasible. If the path is identified as feasible, then particular embodiments may generate one or more sets of test cases (e.g., test input values) using the solutions to the mathematical expression. Various sets of test cases obtained in connection with various paths may be applied to the software program to validate the program.","For example, sometimes, a program may throw an Exception under certain conditions (e.g., an invalid mathematical operation such as dividing a number by 0, or accessing an illegal memory location). The Exception corresponds to a node in the CFG. Paths leading to this node corresponding to the Exception may be identified in the CFG. The software program may be symbolically executed along such a path so that a mathematical expression representing the constrains that, if satisfied, cause the control flow of the program to proceed along this path, which eventually results in the Exception to be thrown, may be obtained. The mathematical expression may be solved to generate test cases that cause the program to thrown the Exception.","As another example, taint analysis may be performed on a software program to prevent a bad location in the source code (e.g., a unreliable or untrustworthy function) from accessing a good object (e.g., a sensitive variable). There may be a path leading from a first node corresponding to a good variable to a second node corresponding to a bad function. The software program may be symbolically executed along such a path to obtain a mathematical expression representing the constrains associated with the path. The mathematical expression may be solved to determine whether the path is feasible, based on whether there is any solution to the mathematical expression. If the path is feasible, then the solutions may be used to modify the constraints so that the good variable is not accessed by the bad function.","Conversely, a good location in the source code (e.g., a sensitive function) should not access a bad object (e.g., a unreliable or untrustworthy variable). Again, there may be a path leading from a first node corresponding to the bad variable to a second node corresponding to the good function. The software program may be symbolically executed along such a path to obtain a mathematical expression representing the constrains associated with the path. The mathematical expression may be solved to determine whether the path is feasible, based on whether there is any solution to the mathematical expression. If the path is feasible, then the solutions may be used to modify the constraints so that the bad variable is not accessed by the good function. Alternatively, the solutions may be used to modify the bad variable so that whatever features or characteristics that make the variable bad (e.g., unreliable or untrustworthy) are removed. The variable may then be accessed by the good function, as it is no longer considered bad.","Particular embodiments may be implemented on one or more computer systems. For example, the methods described above may be implemented as computer software.  illustrates an example computer system . In particular embodiments, one or more computer systems  perform one or more steps of one or more methods described or illustrated herein. In particular embodiments, one or more computer systems  provide functionality described or illustrated herein. In particular embodiments, software running on one or more computer systems  performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .","This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system  taking any suitable physical form. As example and not by way of limitation, computer system  may be an embedded computer system, a system-on-chip (SOC), a single-board computer system (SBC) (such as, for example, a computer-on-program (COM) or system-on-program (SOM)), a desktop computer system, a laptop or notebook computer system, an interactive kiosk, a mainframe, a mesh of computer systems, a mobile telephone, a personal digital assistant (PDA), a server, or a combination of two or more of these. Where appropriate, computer system  may include one or more computer systems ; be unitary or distributed; span multiple locations; span multiple machines; or reside in a cloud, which may include one or more cloud components in one or more networks. Where appropriate, one or more computer systems  may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation, one or more computer systems  may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems  may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein, where appropriate.","In particular embodiments, computer system  includes a processor , memory , storage , an input\/output (I\/O) interface , a communication interface , and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement, this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.","In particular embodiments, processor  includes hardware for executing instructions, such as those making up a computer program. As an example and not by way of limitation, to execute instructions, processor  may retrieve (or fetch) the instructions from an internal register, an internal cache, memory , or storage ; decode and execute them; and then write one or more results to an internal register, an internal cache, memory , or storage . In particular embodiments, processor  may include one or more internal caches for data, instructions, or addresses. This disclosure contemplates processor  including any suitable number of any suitable internal caches, where appropriate. As an example and not by way of limitation, processor  may include one or more instruction caches, one or more data caches, and one or more translation lookaside buffers (TLBs). Instructions in the instruction caches may be copies of instructions in memory  or storage , and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory  or storage  for instructions executing at processor  to operate on; the results of previous instructions executed at processor  for access by subsequent instructions executing at processor  or for writing to memory  or storage ; or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual-address translation for processor . In particular embodiments, processor  may include one or more internal registers for data, instructions, or addresses. This disclosure contemplates processor  including any suitable number of any suitable internal registers, where appropriate. Where appropriate, processor  may include one or more arithmetic logic units (ALUs); be a multi-core processor; or include one or more processors . Although this disclosure describes and illustrates a particular processor, this disclosure contemplates any suitable processor.","In particular embodiments, memory  includes main memory for storing instructions for processor  to execute or data for processor  to operate on. As an example and not by way of limitation, computer system  may load instructions from storage  or another source (such as, for example, another computer system ) to memory . Processor  may then load the instructions from memory  to an internal register or internal cache. To execute the instructions, processor  may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions, processor  may write one or more results (which may be intermediate or final results) to the internal register or internal cache. Processor  may then write one or more of those results to memory . In particular embodiments, processor  executes only instructions in one or more internal registers or internal caches or in memory  (as opposed to storage  or elsewhere) and operates only on data in one or more internal registers or internal caches or in memory  (as opposed to storage  or elsewhere). One or more memory buses (which may each include an address bus and a data bus) may couple processor  to memory . Bus  may include one or more memory buses, as described below. In particular embodiments, one or more memory management units (MMUs) reside between processor  and memory  and facilitate accesses to memory  requested by processor . In particular embodiments, memory  includes random access memory (RAM). This RAM may be volatile memory, where appropriate. Where appropriate, this RAM may be dynamic RAM (DRAM) or static RAM (SRAM). Moreover, where appropriate, this RAM may be single-ported or multi-ported RAM. This disclosure contemplates any suitable RAM. Memory  may include one or more memories , where appropriate. Although this disclosure describes and illustrates particular memory, this disclosure contemplates any suitable memory.","In particular embodiments, storage  includes mass storage for data or instructions. As an example and not by way of limitation, storage  may include an HDD, a floppy disk drive, flash memory, an optical disc, a magneto-optical disc, magnetic tape, or a Universal Serial Bus (USB) drive or a combination of two or more of these. Storage  may include removable or non-removable (or fixed) media, where appropriate. Storage  may be internal or external to computer system , where appropriate. In particular embodiments, storage  is non-volatile, solid-state memory. In particular embodiments, storage  includes read-only memory (ROM). Where appropriate, this ROM may be mask-programmed ROM, programmable ROM (PROM), erasable PROM (EPROM), electrically erasable PROM (EEPROM), electrically alterable ROM (EAROM), or flash memory or a combination of two or more of these. This disclosure contemplates mass storage  taking any suitable physical form. Storage  may include one or more storage control units facilitating communication between processor  and storage , where appropriate. Where appropriate, storage  may include one or more storages . Although this disclosure describes and illustrates particular storage, this disclosure contemplates any suitable storage.","In particular embodiments, I\/O interface  includes hardware, software, or both providing one or more interfaces for communication between computer system  and one or more I\/O devices. Computer system  may include one or more of these I\/O devices, where appropriate. One or more of these I\/O devices may enable communication between a person and computer system . As an example and not by way of limitation, an I\/O device may include a keyboard, keypad, microphone, monitor, mouse, printer, scanner, speaker, still camera, stylus, tablet, touch screen, trackball, video camera, another suitable I\/O device or a combination of two or more of these. An I\/O device may include one or more sensors. This disclosure contemplates any suitable I\/O devices and any suitable I\/O interfaces  for them. Where appropriate, I\/O interface  may include one or more device or software drivers enabling processor  to drive one or more of these I\/O devices. I\/O interface  may include one or more I\/O interfaces , where appropriate. Although this disclosure describes and illustrates a particular I\/O interface, this disclosure contemplates any suitable I\/O interface.","In particular embodiments, communication interface  includes hardware, software, or both providing one or more interfaces for communication (such as, for example, packet-based communication) between computer system  and one or more other computer systems  or one or more networks. As an example and not by way of limitation, communication interface  may include a network interface controller (NIC) or network adapter for communicating with an Ethernet or other wire-based network or a wireless NIC (WNIC) or wireless adapter for communicating with a wireless network, such as a WI-FI network. This disclosure contemplates any suitable network and any suitable communication interface  for it. As an example and not by way of limitation, computer system  may communicate with an ad hoc network, a personal area network (PAN), a local area network (LAN), a wide area network (WAN), a metropolitan area network (MAN), or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example, computer system  may communicate with a wireless PAN (WPAN) (such as, for example, a BLUETOOTH WPAN), a WI-FI network, a WI-MAX network, a cellular telephone network (such as, for example, a Global System for Mobile Communications (GSM) network), or other suitable wireless network or a combination of two or more of these. Computer system  may include any suitable communication interface  for any of these networks, where appropriate. Communication interface  may include one or more communication interfaces , where appropriate. Although this disclosure describes and illustrates a particular communication interface, this disclosure contemplates any suitable communication interface.","In particular embodiments, bus  includes hardware, software, or both coupling components of computer system  to each other. As an example and not by way of limitation, bus  may include an Accelerated Graphics Port (AGP) or other graphics bus, an Enhanced Industry Standard Architecture (EISA) bus, a front-side bus (FSB), a HYPERTRANSPORT (HT) interconnect, an Industry Standard Architecture (ISA) bus, an INFINIBAND interconnect, a low-pin-count (LPC) bus, a memory bus, a Micro Channel Architecture (MCA) bus, a Peripheral Component Interconnect (PCI) bus, a PCI-Express (PCI-X) bus, a serial advanced technology attachment (SATA) bus, a Video Electronics Standards Association local (VLB) bus, or another suitable bus or a combination of two or more of these. Bus  may include one or more buses , where appropriate. Although this disclosure describes and illustrates a particular bus, this disclosure contemplates any suitable bus or interconnect.","Herein, reference to a computer-readable storage medium encompasses one or more non-transitory, tangible computer-readable storage media possessing structure. As an example and not by way of limitation, a computer-readable storage medium may include a semiconductor-based or other integrated circuit (IC) (such, as for example, a field-programmable gate array (FPGA) or an application-specific IC (ASIC)), a hard disk, an HDD, a hybrid hard drive (HHD), an optical disc, an optical disc drive (ODD), a magneto-optical disc, a magneto-optical drive, a floppy disk, a floppy disk drive (FDD), magnetic tape, a holographic storage medium, a solid-state drive (SSD), a RAM-drive, a SECURE DIGITAL card, a SECURE DIGITAL drive, or another suitable computer-readable storage medium or a combination of two or more of these, where appropriate. Herein, reference to a computer-readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. \u00a7101. Herein, reference to a computer-readable storage medium excludes transitory forms of signal transmission (such as a propagating electrical or electromagnetic signal per se) to the extent that they are not eligible for patent protection under 35 U.S.C. \u00a7101. A computer-readable non-transitory storage medium may be volatile, non-volatile, or a combination of volatile and non-volatile, where appropriate.","This disclosure contemplates one or more computer-readable storage media implementing any suitable storage. In particular embodiments, a computer-readable storage medium implements one or more portions of processor  (such as, for example, one or more internal registers or caches), one or more portions of memory , one or more portions of storage , or a combination of these, where appropriate. In particular embodiments, a computer-readable storage medium implements RAM or ROM. In particular embodiments, a computer-readable storage medium implements volatile or persistent memory. In particular embodiments, one or more computer-readable storage media embody software. Herein, reference to software may encompass one or more applications, bytecode, one or more computer programs, one or more executables, one or more instructions, logic, machine code, one or more scripts, or source code, and vice versa, where appropriate. In particular embodiments, software includes one or more application programming interfaces (APIs). This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments, software is expressed as source code or object code. In particular embodiments, software is expressed in a higher-level programming language, such as, for example, C, Perl, or a suitable extension thereof. In particular embodiments, software is expressed in a lower-level programming language, such as assembly language (or machine code). In particular embodiments, software is expressed in JAVA, C, or C++. In particular embodiments, software is expressed in Hyper Text Markup Language (HTML), Extensible Markup Language (XML), or other suitable markup language.","Herein, \u201cor\u201d is inclusive and not exclusive, unless expressly indicated otherwise or indicated otherwise by context. Therefore, herein, \u201cA or B\u201d means \u201cA, B, or both,\u201d unless expressly indicated otherwise or indicated otherwise by context. Moreover, \u201cand\u201d is both joint and several, unless expressly indicated otherwise or indicated otherwise by context. Therefore, herein, \u201cA and B\u201d means \u201cA and B, jointly or severally,\u201d unless expressly indicated otherwise or indicated otherwise by context.","This disclosure encompasses all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly, where appropriate, the appended claims encompass all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Moreover, reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to, arranged to, capable of, configured to, enabled to, operable to, or operative to perform a particular function encompasses that apparatus, system, component, whether or not it or that particular function is activated, turned on, or unlocked, as long as that apparatus, system, or component is so adapted, arranged, capable, configured, enabled, operable, or operative."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIGS. 5-6"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
