---
title: Provisioning and/or synchronizing using common metadata
abstract: Techniques are described herein that are capable of provisioning and/or synchronizing a data store using common metadata. For instance, a common instance of metadata may be used in lieu of multiple instances of the metadata that correspond to respective items in the data store for indicating a time at which the data store was provisioned. Each time a change occurs with respect to an item in a data table of the data store after provisioning of the data store, a record may be added or updated in a corresponding tracking table. When a request is made for changes that have occurred with respect to the items in a data table, the common instance of the metadata may be used to generate a record in the corresponding tracking table for each item in the data table that did not change since the data store was provisioned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09031909&OS=09031909&RS=09031909
owner: Microsoft Technology Licensing, LLC
number: 09031909
owner_city: Redmond
owner_country: US
publication_date: 20111129
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. Example Embodiments","III. Conclusion"],"p":["Nodes in a networked system often include data stores. Data from a source node may be copied to a target node using a process referred to as synchronization. Data stores in the source node (i.e., source data stores) typically are provisioned before those data stores are synchronized with data stores in the target node (i.e., target data stores). Provisioning is a process in which information (e.g., metadata) regarding a data store is gathered, so that the information may be used during synchronization of the data store.","A variety of techniques have been proposed for provisioning and synchronizing data stores. However, each such technique has its limitations. In one example, state based techniques have been developed that provide a fixed state for each item in a source data store. Accordingly, such techniques typically maintain a one-to-one mapping between items in the source data store and instances of metadata that correspond to those respective items, at least until an item is deleted from the source data store. For instance, if item(s) are deleted from the source data store, the corresponding instances of metadata remain in the database. Thus, it is possible for a number of instances of the metadata to exceed a number of the items in the source data store. Metadata that corresponds to items that have been deleted from a source data store are referred to as \u201ctombstones\u201d. Although state based techniques may support deletion of tombstones, such techniques often utilize a relatively great amount of data storage space, which increases as data is added to the source data store. Moreover, some functionalities such as \u201cfast-init\u201d employ metadata \u201cfixup\u201d for items in a source data store that are synchronized with a target data store. Metadata fixup is a process in which instances of metadata that correspond to respective items in a source data store are serially updated during provisioning of the source data store. Metadata fixup may consume a substantial amount of time and\/or processing resources.","In another example, event based techniques have been developed that track events that occur with respect to the networked system to determine which items in a source data store are changed as a result of the events. For instance, a file based event technique may track calls to a CreateFile application programming interface (API). Each event leads to creation of metadata that tracks changes that occur with respect to the networked system. In a subsequent synchronization operation, a data structure (e.g., a queue) is examined for metadata created due to such events, and the data corresponding to the metadata is synchronized. In event based techniques, the amount of metadata is proportional to the number of events that occur with respect to the networked system. However in a net-changes synchronization scenario, in which the items in a source data store may be sent once, additional processing may be performed to optimize and compress events that correspond to the same set of data.","Various approaches are described herein for, among other things, provisioning and\/or synchronizing a data store using common metadata. The common metadata (referred to herein as a common instance of metadata) may be used in lieu of multiple instances of the metadata that correspond to respective items in the data store for indicating a time at which the data store was provisioned. For instance, during provisioning of the data store, a tracking table may be generated for each data table in the data store. Each tracking table may be used during a synchronization of the data store to indicate changes that have occurred with respect to items in the corresponding data table since the data store was provisioned. Accordingly, each tracking table may be generated to include no records (e.g., instances of metadata) upon completion of the provisioning of the data store. Rather, each time a change occurs with respect to an item in a data table of the data store after the provisioning of the data store, a record may be added or updated in the corresponding tracking table. When a request is made for changes that have occurred with respect to the items in a data table, the common instance of the metadata may be used to generate a record in the corresponding tracking table for each item in the data table that did not change since the data store was provisioned.","A method is described in which a first data store in a first node is provisioned for synchronization with a second data store in a second node for a time period that is independent of a size of the first data store. The first data store includes a data table having items. The provisioning includes determining a time at which the first data store is provisioned and generating a common instance of metadata that is common to the items to indicate the time at which the first data store is provisioned.","A system is described that includes provisioning logic. The provisioning logic is configured to provision a first data store in a first node for synchronization with a second data store in a second node for a time period that is independent of a size of the first data store. The first data store includes a data table having items. The provisioning logic includes time logic and metadata logic. The time logic is configured to determine a time at which the first data store is provisioned. The metadata logic is configured to generate a common instance of metadata that is common to the items to indicate the time at which the first data store is provisioned.","A computer program product is described that includes a computer-readable medium having computer program logic recorded thereon for enabling a processor-based system to synchronize a first data store in a first node with a second data store in a second node. The computer program product includes a program logic module for enabling the processor-based system to provision the first data store for synchronization with the second data store for a time period that is independent of a size of the first data store. The first data store includes a data table having items. The program logic module includes time logic and metadata logic. The time logic is for enabling the processor-based system to determine a time at which the first data store is provisioned. The metadata logic is for enabling the processor-based system to generate a common instance of metadata that is common to the items to indicate the time at which the first data store is provisioned.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Moreover, it is noted that the invention is not limited to the specific embodiments described in the Detailed Description and\/or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the disclosed technologies will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However, the scope of the present invention is not limited to these embodiments, but is instead defined by the appended claims. Thus, embodiments beyond those shown in the accompanying drawings, such as modified versions of the illustrated embodiments, may nevertheless be encompassed by the present invention.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d or the like, indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Furthermore, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the relevant art(s) to implement such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Example embodiments described herein are capable of provisioning and\/or synchronizing a data store using common metadata. The common metadata (referred to herein as a common instance of metadata) may be used in lieu of multiple instances of the metadata that correspond to respective items in the data store for indicating a time at which the data store was provisioned. For instance, during provisioning of the data store, a tracking table may be generated for each data table in the data store. Each tracking table may be used during a synchronization of the data store to indicate changes that have occurred with respect to items in the corresponding data table since the data store was provisioned. Accordingly, each tracking table may be generated to include no records (e.g., instances of metadata) upon completion of the provisioning of the data store. Rather, each time a change occurs with respect to an item in a data table of the data store after the provisioning of the data store, a record may be added or updated in the corresponding tracking table. When a request is made for changes that have occurred with respect to the items in a data table, the common instance of the metadata may be used to generate a record in the corresponding tracking table for each item in the data table that did not change since the data store was provisioned.","Example techniques described herein have a variety of benefits as compared to conventional techniques for provisioning and\/or synchronizing a data store. For instance, the example techniques may be capable of generating a tracking table during provisioning of a data store to include no records. The example techniques may be capable of creating versions of records in the tracking table dynamically during synchronization of the data store based on a common (e.g., single and\/or non-item specific) instance of metadata that is generated during the provisioning of the data store, even if the items in the data store that correspond to those records are not modified after provisioning. The example techniques may be capable of generating the common instance of metadata to indicate a time at which the data store is provisioned. Accordingly, items in the data store that are not changed after the provisioning may be associated with the time at which the data store is provisioned, while items in the data store that are changed after the provisioning may be associated with respective times at which the respective items are changed.","The example techniques may consume less time and\/or fewer resources than the conventional techniques during provisioning and\/or synchronization of a data store. For instance, the example techniques need not generate a record in a tracking table for each item in a data table during provisioning of a data store that includes the data table. Accordingly, the time used to generate a common instance of metadata and an empty tracking record during provisioning of a data store may be substantially less than the amount of time traditionally used to generate a record in a tracking table for each item that is included in the data store. Moreover, the amount of data storage space used to store a common instance of metadata and an empty tracking record upon completion of the provisioning of a data store may be substantially less than the amount of data storage space that is traditionally used to store a tracking table that includes a record for each item that is included in the data store.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","100","102","102","104","106","108","102","102","106","108","104","104"]},"Nodes A-N are processing systems that are capable of communicating with common metadata-based synchronizer . An example of a processing system is a system that includes at least one processor that is capable of manipulating data in accordance with a set of instructions. For instance, a processing system may be a computer (e.g., a desktop computer, a laptop computer, a tablet computer, etc.), a personal digital assistant, a cellular telephone, etc. Accordingly, each of the nodes A-N may be a database server (e.g., an Oracle server, a structured query language (SQL) server, etc.), a file server, or other suitable type of processing system. Although nodes A-N are described herein as being processing systems, it will be recognized that any one or more of nodes A-N may be implemented as a virtual machine.","Nodes A-N are configured to provide synchronization requests (e.g., hypertext transfer protocol (HTTP) requests, tabular data stream (TDS) requests, etc.) toward common metadata-based synchronizer  through network  via respective connections A-N. Each such request indicates that a data store in a source node that provides the request is to be synchronized with a data store in a target node that is identified in the request. First node A is shown in  to provide synchronization request  (a.k.a. synch request ) toward common metadata-based synchronizer  via connection A for illustrative purposes. For instance, the synch request  may indicate that first data store A is to be synchronized with second data store B in second node B. In some embodiments, a user initiates a synchronization request using a client (e.g., a Web browser, Web crawler, non-Web-enabled client, etc.) deployed on a node  that is owned by or otherwise accessible to the user for the purpose of accessing common metadata-based synchronizer  via network .","Nodes A-N include respective processors A-N and respective data stores A-N. Each of the data stores A-N includes (e.g., stores) zero or more data tables. Data stores A-N are shown in  to include respective data tables A-N for illustrative purposes and are not intended to be limiting. Data tables A-N include respective items A-N. Examples of an item include but are not limited to a row of a database, a column of a database, a file, a data object, etc. Processors A-N are configured to perform operations in accordance with synchronization instructions, such as synch instructions , which are received from common metadata-based synchronizer . Processors A-N may receive such instructions (or respective subsets thereof) via respective connections A-N. For example, processors A-N may manipulate subsets of the respective items A-N based on such synchronization instructions. In accordance with this example, if the synch request  indicates that first data store A is to be synchronized with second data store B, second processor(s) A in second node B may change one or more of the second item(s) B in response to the synch instructions . Example ways in which an item may be changed in a data table include but are not limited to adding the item to the data table, deleting the item from the data table, or changing a characteristic (e.g., at least a portion of the content) of the item.","Common metadata-based synchronizer  is a processing system that is configured to provision and synchronize data stores A-N in response to synchronization requests from respective nodes A-N. Common metadata-based synchronizer  receives such requests via connection . Upon receiving a synchronization request, common metadata-based synchronizer  analyzes the request to determine a source node that provides the request and to determine which of the nodes A-N is identified by the request to be a target node. Common metadata-based synchronizer  may determine other information based on the request, such as which data store(s) in the source node are identified to be source data store(s), which data store(s) in the target node are identified to be target data store(s), etc. During provisioning of each source data store, common metadata-based synchronizer  generates a tracking table and a common instance of metadata to be associated with that source data store. Each tracking table may include no records upon completion of provisioning the corresponding source data store.","Common metadata-based synchronizer  synchronizes each source data store with a corresponding target data store in response to provisioning that source data store. For each identified change that occurs with respect to an item in a data table in a source data store since the source data store was provisioned, common metadata-based synchronizer  adds or updates a record in a tracking table that corresponds to the data table. If no other change has occurred with respect to that item since provisioning of the source data store, common metadata-based synchronizer  adds a record to the tracking table to indicate the identified change. If another change has occurred with respect to the item since provisioning of the source data store, common metadata-based synchronizer  updates an existing record in the tracking table to indicate the identified change.","Common metadata-based synchronizer  is configured to provide synchronization instructions, such as synch instructions , through network  via connection  to facilitate synchronization of the source data store(s) with the target data store(s). For example, if synch request  indicates that first data store A is to be synchronized with second data store B, common metadata-based synchronizer  may provide synch instructions  toward second node B via connection  to cause second processor(s) B to change one or more of the second item(s) B to be the same as one or more of the respective first item(s) A.","Store  includes (e.g., stores) each common instance of metadata that is generated by common metadata-based synchronizer . Store  receives each common instance of metadata through network  via connection . Store  provides each common instance of metadata to common metadata-based synchronizer  through network  via connection  in response to a retrieval request that is received from common metadata-based synchronizer . For instance, common metadata-based synchronizer  may provide a retrieval request to retrieve a common metadata instance  from store  during synchronization of a data store that is associated with the common metadata instance  in order to generate record(s) in a tracking table that correspond to respective item(s) in the data store that have not changed since provisioning of the data store. Some example techniques for provisioning and\/or synchronizing a data store using common metadata are discussed in further detail below with reference to .","Common metadata-based synchronizer  may be implemented in various ways to provision and\/or synchronize data store(s), including being implemented in hardware, software, firmware, or any combination thereof. For example, common metadata-based synchronizer  may be implemented as computer program code configured to be executed in one or more processors. In another example, common metadata-based synchronizer  may be implemented as hardware logic\/electrical circuitry. In an embodiment, common metadata-based synchronizer  may be implemented in a system-on-chip (SoC). Each SoC may include an integrated circuit chip that includes one or more of a processor (e.g., a microcontroller, microprocessor, digital signal processor (DSP), etc.), memory, one or more communication interfaces, and\/or further circuits and\/or embedded firmware to perform its functions.","Each of data stores A-N and store  may be any suitable type of store. One type of store is a database. For instance, any one or more of data stores A-N and\/or store  may be a relational database, an entity-relationship database, an object database, an object relational database, an extensible markup language (XML) database, etc. Store  is shown in  to be external to nodes A-N and common metadata-based synchronizer  for illustrative purses and is not intended to be limiting. It will be recognized that store  or a portion thereof may be included in any one or more of nodes A-N and\/or common metadata-based synchronizer . For instance, store  or a portion thereof may be distributed across two or more of nodes A-N.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIGS. 2-6","FIG. 1","FIG. 7","FIG. 7"],"b":["200","300","400","500","600","200","300","400","500","600","106","100","200","300","400","500","600","700","106","700","702","704","702","706","708","710","704","712","714","716","718","720","722","200","300","400","500","600"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 2","FIG. 3"],"b":["200","200","202","202","702","724","300"]},"At step , the first data store is synchronized with the second data store. In an example implementation, synchronization logic  synchronizes the first data store with the second data store. Some example techniques for synchronizing the first data store with the second data store are described below with reference to flowcharts , , and  of respective , , and .","In some example embodiments, one or more steps  and\/or  of flowchart  may not be performed. Moreover, steps in addition to or in lieu of steps  and\/or  may be performed.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIG. 3"],"b":["300","300","302","302","706","706","726"]},"At step , a common instance of metadata that is common to the items in the data table is generated to indicate the time at which the first data store is provisioned. In an example, the common instance of the metadata may identify the first node. In another example, the common instance of the metadata may have a size that is independent of the size of the first data store. For instance, the size of the common instance of the metadata may be predetermined and\/or fixed. In an example implementation, metadata logic  generates common metadata instance , which is common to the items in the data table. In accordance with this implementation, metadata logic  provides the common metadata instance  to synchronization logic  for use during a synchronization of the first data store that occurs in response to provisioning of the first data store. Metadata logic  may store the common metadata instance  externally to the first data store, though the scope of the example embodiments is not limited in this respect. For instance, metadata logic  may store the common metadata instance  in store  of .","At step , a tracking table is generated to indicate changes that occur with respect to the items in the data table since the first data store is provisioned. For example, the tracking table may be generated to include no records upon completion of the provisioning of the first data store. In accordance with this example, generation of records in the tracking table may be delayed until synchronization of the first data store is initiated. In an example implementation, tracking logic  generates an empty tracking table . The empty tracking table  does not include records corresponding to the items in the data table. In accordance with this implementation, tracking logic  provides the empty tracking table  to synchronization logic  for use during the synchronization of the first data store that occurs in response to the provisioning of the first data store.","In an example embodiment, the common instance of the metadata is generated at step  in lieu of generating multiple item-specific instances of the metadata that correspond to the respective items to indicate the time at which the first data store is provisioned. For example, the common instance of the metadata may be generated non-iteratively in lieu of generating the multiple item-specific instances of the metadata iteratively (e.g., successively and\/or consecutively). In another example, the common instance of the metadata may be generated in lieu of generating multiple records in the tracking table that indicate the time at which the first data store is provisioned. In accordance with this example, the multiple records include the respective item-specific instances of the metadata.","In some example embodiments, one or more steps , , and\/or  of flowchart  may not be performed. Moreover, steps in addition to or in lieu of steps , , and\/or  may be performed.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIG. 4"],"b":["400","400","402","402","712","734","730","734","712","734","732","732","734","732"]},"At step , a record of a second type is generated in the tracking table for each item in the data table that is not modified since the first data store is provisioned, based on the common instance of the metadata. For example, the record(s) of the second type may be generated on the fly based on the common instance of the metadata. In another example, the record(s) of the second type may be generated at runtime. The record(s) of the second type indicate the time at which the first data store is provisioned. In an example implementation, second record logic  generates second type record(s)  for inclusion in the empty tracking table  based on common metadata instance . Each of the second type record(s)  corresponds to a respective item in the data table that is not modified since the first data store is provisioned.","At step , a copy of the tracking table is provided to the second data store. In an example implementation, provision logic  includes the first type record(s)  and the second type record(s)  in the empty tracking table  to provide an updated tracking table . In accordance with this implementation, provision logic  provides a copy of the updated tracking table  to the second data store.","At step , each record of the second type is not persisted in the tracking table. For instance, inclusion of each record of the second type in the tracking table may be discontinued. In an example implementation, provision logic  does not persist the second type record(s)  in the updated tracking table . For instance, provision logic  may remove the second type record(s)  from the updated tracking table  in response to providing the copy of the updated tracking table  to the second data store.","In some example embodiments, one or more steps , , , and\/or  of flowchart  may not be performed. Moreover, steps in addition to or in lieu of steps , , , and\/or  may be performed. For instance, in an example embodiment, flowchart  of  includes one or more of the steps shown in flowchart  of . As shown in , the method of flowchart  begins at step . In step , knowledge information is generated that indicates which records of the first type in the tracking table and which records of the second type in the tracking table are provided to each of a plurality of nodes with which the first node is coupled via a network. In an example implementation, knowledge logic  generates knowledge information  to indicate which of the first type record(s)  and which of the second type record(s)  are provided to each of the plurality of nodes with which the first node is coupled via the network. For example, provision logic  may generate (e.g., automatically generate) a provision notifier each time a first type record or a second type record is provided to a node in the plurality of nodes. Each provision notifier may indicate the respective first or second type record and the node in the plurality of nodes to which the first or second type record is provided. Such provision notifier(s) are referred to cumulatively as provision notifier(s)  in . In accordance with this example, knowledge logic  may analyze the provision notifier(s)  to determine which of the first type record(s)  and which of the second type record(s)  are provided to each of the plurality of nodes.","At step , a determination is made that each record of the first type in the tracking table has been provided to each of the plurality of nodes. In an example implementation, determination logic  determines that each of the first type record(s)  has been provided to each of the plurality of nodes. For instance, determination logic  may cross-reference the knowledge information  with the first type record(s)  to make the determination. Determination logic  may provide a provision indicator  to indicate that each of the first type record(s)  has been provided to each of the plurality of nodes.","At step , each record of the first type is deleted from the tracking table. In an example implementation, deletion logic  deletes each of the first type record(s)  from the tracking table. For instance, deletion logic  may delete each of the first type record(s)  from the updated tracking table  in response to receipt of the provision indicator .","It will be recognized that record(s) of the first type (or a subset thereof) may be deleted based on one or more factors in addition to or in lieu of a determination that each record of the first type (or the subset thereof) has been provided to each of the plurality of nodes. For instance, a subset of the record(s) of the first type may be deleted from the tracking table based on a most recent modification of each record in the subset occurring at least a specified period of time (e.g., 2 weeks, 1 month, 60 days, etc.) prior to a time at which deletion of the subset of the record(s) of the first type is to occur.","In an example embodiment, record(s) of the first type in the tracking table that correspond to respective item(s) that have been deleted from the first data store are deleted from the tracking table based on passage of a specified period of time (e.g., 12 hours, 1 day, 10 days, 20 days, 1 week, etc.) from a reference time. For instance, the reference time may be a time at which an item was most recently deleted from the first data store. In accordance with this embodiment, record(s) of the first type in the tracking table that do not correspond to respective item(s) that have been deleted from the first data store are not deleted from the tracking table based on passage of the specified period of time from the reference time.","In some example embodiments, one or more steps , , and\/or  of flowchart  may not be performed. Moreover, steps in addition to or in lieu of steps , , and\/or  may be performed.","In another example embodiment, flowchart  of  includes one or more of the steps shown in flowchart  of . As shown in , the method of flowchart  begins at step . In step , knowledge information is generated that indicates which records of the first type in the tracking table are provided to each of a plurality of nodes with which the first node is coupled via a network. The plurality of nodes includes the second node. In an example implementation, knowledge logic  generates knowledge information  to indicate which of the first type record(s)  are provided to each of the plurality of nodes with which the first node is coupled via the network.","At step , a determination is made which records of the first type in the tracking table have been provided to the second node based on the knowledge information. In an example implementation, determination logic  determines which of the first type record(s)  have been provided to the second node based on the knowledge information . In accordance with this implementation, determination logic  provides a subset indicator  to indicate which of the first type record(s)  have been provided to the second node.","At step , a first subset of the records of the first type is provided to the second node based on each record in the first subset not having been provided to the second node. In an example implementation, provision logic  provides a first subset of the first type record(s)  to the second node based on each record in the first subset not having been provided to the second node. For instance, provision logic  may provide the first subset of the first type record(s)  to the second node in response to receipt of subset indicator .","At step , a second subset of the records of the first type is not provided to the second node based on each record in the second subset having been provided to the second node. In an example implementation, provision logic  does not provide a second subset of the first type record(s)  to the second node based on each record in the second subset having been provided to the second node. For instance, provision logic  may not provide the second subset of the first type record(s)  to the second node in response to receipt of subset indicator . In an example, provision logic  may provide updated tracking table  to include the first subset of the first type record(s)  and to not include the second subset of the first type record(s) . In accordance with this example, provision logic  may provide the updated tracking table  to the second node.","In some example embodiments, one or more steps , , , and\/or  of flowchart  may not be performed. Moreover, steps in addition to or in lieu of steps , , , and\/or  may be performed.","It will be recognized that common metadata-based synchronizer  may not include one or more of provisioning logic , synchronization logic , time logic , metadata logic , tracking logic , first record logic , second record logic , provision logic , knowledge logic , determination logic , and\/or deletion logic . Furthermore, common metadata-based synchronizer  may include modules in addition to or in lieu of provisioning logic , synchronization logic , time logic , metadata logic , tracking logic , first record logic , second record logic , provision logic , knowledge logic , determination logic , and\/or deletion logic .","Common metadata-based synchronizer , provisioning logic , synchronization logic , time logic , metadata logic , tracking logic , first record logic , second record logic , provision logic , knowledge logic , determination logic , deletion logic , and flowcharts , , , , and  may be implemented in hardware, software, firmware, or any combination thereof.","For example, common metadata-based synchronizer , provisioning logic , synchronization logic , time logic , metadata logic , tracking logic , first record logic , second record logic , provision logic , knowledge logic , determination logic , deletion logic , flowchart , flowchart , flowchart , flowchart , and\/or flowchart  may be implemented as computer program code configured to be executed in one or more processors.","In another example, common metadata-based synchronizer , provisioning logic , synchronization logic , time logic , metadata logic , tracking logic , first record logic , second record logic , provision logic , knowledge logic , determination logic , deletion logic , flowchart , flowchart , flowchart , flowchart , and\/or flowchart  may be implemented as hardware logic\/electrical circuitry. For instance, in an embodiment, one or more of common metadata-based synchronizer , provisioning logic , synchronization logic , time logic , metadata logic , tracking logic , first record logic , second record logic , provision logic , knowledge logic , determination logic , deletion logic , flowchart , flowchart , flowchart , flowchart , and\/or flowchart  may be implemented in a system-on-chip (SoC). The SoC may include an integrated circuit chip that includes one or more of a processor (e.g., a microcontroller, microprocessor, digital signal processor (DSP), etc.), memory, one or more communication interfaces, and\/or further circuits and\/or embedded firmware to perform its functions.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 8","FIG. 1","FIG. 7"],"b":["800","102","102","106","800","800","800","800","800"]},"As shown in , computer  includes a processing unit , a system memory , and a bus  that couples various system components including system memory  to processing unit . Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS) is stored in ROM .","Computer  also has one or more of the following drives: a hard disk drive  for reading from and writing to a hard disk, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM, DVD ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable storage media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer. Although a hard disk, a removable magnetic disk and a removable optical disk are described, other types of computer-readable storage media can be used to store data, such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","A number of program modules may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. These programs include an operating system , one or more application programs , other program modules , and program data . Application programs  or program modules  may include, for example, computer program logic for implementing common metadata-based synchronizer , provisioning logic , synchronization logic , time logic , metadata logic , tracking logic , first record logic , second record logic , provision logic , knowledge logic , determination logic , deletion logic , flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), and\/or flowchart  (including any step of flowchart ), as described herein.","A user may enter commands and information into the computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to bus , but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB).","A display device  (e.g., a monitor) is also connected to bus  via an interface, such as a video adapter . In addition to display device , computer  may include other peripheral output devices (not shown) such as speakers and printers.","Computer  is connected to a network  (e.g., the Internet) through a network interface or adapter , a modem , or other means for establishing communications over the network. Modem , which may be internal or external, is connected to bus  via serial port interface .","As used herein, the terms \u201ccomputer program medium\u201d and \u201ccomputer-readable medium\u201d are used to generally refer to media such as the hard disk associated with hard disk drive , removable magnetic disk , removable optical disk , as well as other media such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like. Such computer-readable storage media are distinguished from and non-overlapping with communication media. Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wireless media such as acoustic, RF, infrared and other wireless media. Example embodiments are also directed to such communication media.","As noted above, computer programs and modules (including application programs  and other program modules ) may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. Such computer programs may also be received via network interface  or serial port interface . Such computer programs, when executed or loaded by an application, enable computer  to implement features of embodiments discussed herein. Accordingly, such computer programs represent controllers of the computer .","Example embodiments are also directed to computer program products comprising software (e.g., computer-readable instructions) stored on any computer useable medium. Such software, when executed in one or more data processing devices, causes a data processing device(s) to operate as described herein. Embodiments may employ any computer-useable or computer-readable medium, known now or in the future. Examples of computer-readable mediums include, but are not limited to storage devices such as RAM, hard drives, floppy disks, CD ROMs, DVD ROMs, zip disks, tapes, magnetic storage devices, optical storage devices, MEMS-based storage devices, nanotechnology-based storage devices, and the like.","While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be apparent to persons skilled in the relevant art(s) that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus, the breadth and scope of the present invention should not be limited by any of the above-described example embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form part of the specification, illustrate embodiments of the present invention and, together with the description, further serve to explain the principles involved and to enable a person skilled in the relevant art(s) to make and use the disclosed technologies.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
