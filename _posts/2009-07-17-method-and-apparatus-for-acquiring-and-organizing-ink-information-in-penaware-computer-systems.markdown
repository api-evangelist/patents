---
title: Method and apparatus for acquiring and organizing ink information in pen-aware computer systems
abstract: An ink manager running at a computer system receives ink information entered at a pen-based input/display device and accumulates the ink information into ink strokes. The ink manager communicates with a handwriting recognition engine and includes an ink phrase termination engine that is configured to detect the occurrence of one or more ink phrase termination events by examining the ink information. Upon the occurrence of an ink phrase termination event, the ink manager notifies the handwriting recognition engine and organizes the preceding ink strokes into an ink phrase data structure. The ink manager may also pass the ink phrase to an application executing on the computer system that is associated with the ink information, and it, in response, may return a reference pointer and a recognition context to the ink manager. The reference pointer and recognition context are then appended to the ink phrase data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07894641&OS=07894641&RS=07894641
owner: Apple Inc.
number: 07894641
owner_city: Cupertino
owner_country: US
publication_date: 20090717
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"],"p":["The present invention relates generally to the field of computers, and more specifically, to an ink manager for acquiring and organizing pen-based ink information for use by pen-aware and other applications.","Computers, such as personal computers, often include one or more input devices, such as a keyboard and a mouse, that allow a user to control the computer. More sophisticated input devices include voice-recognition input systems and \u201cpen\u201d or stylus based input systems. With pen-based input systems, the user relies on his or her own handwriting or drawing to control or operate the computer. These input systems typically include a hardware device called a \u201ctablet\u201d that is connected to the serial port of the computer. The tablet may include an integrated display screen so that the tablet can serve as both an input and an output device. When operating as an input device, the tablet senses the position of the tip of the pen as it moves across the tablet surface and provides this information to the computer's central processing unit. To provide the user with visual feedback as the pen moves, the computer typically displays \u201cink\u201d (i.e., a path of pixels tracing the pen's movement) simulating the ink dropped by a real pen. If the tablet has an integrated display screen, this electronic ink is typically drawn directly beneath the tip of the moving pen. For an opaque, input-only tablet, the ink is typically drawn on a normal computer screen to which the tablet has been \u201cmapped\u201d. Whether integrated with the tablet or not, the screen typically displays standard computer-generated information, such as text, images, icons and so forth.","In addition to the tablet, pen-based computers also have a software pen driver that interfaces with the tablet and periodically samples the position of the pen, e.g., 100 times a second. The pen driver passes this ink data to an ink manager that organizes it and coordinates the recognition process. Specifically, the ink manager organizes the ink data into ink strokes, which are defined as the ink data collected until the pen is lifted from the tablet. The ink manager passes the ink strokes to a recognizer that employs various tools, such as neural networks, vocabularies, grammars, etc., to translate the ink strokes into alpha-numeric characters, symbols or shapes. The recognizer may generate several hypotheses of what the ink strokes might be, and each hypothesis may have a corresponding probability. The hypotheses are then provided to an application program which may treat the recognized ink data as an input event.","With Pen Services for Windows 95\u00ae from Microsoft Corporation, ink strokes are organized into pen input sessions. See Programmer's Guide to Pen Services for Microsoft Windows 95 (1995 Microsoft Press). A pen input session begins as soon as the user touches the pen to the tablet and ends when the user taps the pen outside of the writing area (e.g., tapping an OK button) or a brief period of inactivity elapses. A new session begins when the user resumes writing. All of the ink strokes corresponding to a given pen input session are accumulated into a single pen data object. An application program associated with the pen input session can basically choose one of two modes of operation. First, the application can choose only to receive the recognition results, thereby allowing the system to process and organize the ink data based on its default settings and to interface with a default recognizer. Alternatively, the application program can request the \u201craw\u201d ink data and process it in any number of ways. For example, it can buffer the data to delay recognition or it can throw the data away. This ink data is provided to the application on a stroke-by-stroke basis. If the application wishes to have the data recognized, it passes the raw ink data to the recognizer itself. Any special recognition requirements, such as field-specific recognition contexts (e.g., name, address, social security, or other types of input fields), and any unique affiliations between ink input sessions and specific input fields must also be determined on a stroke-by-stroke basis, typically based upon the first stroke that is received.","This collection and organization of ink data into pen input sessions on such a stroke-by-stroke basis has several disadvantages. As noted, to associate ink data with a particular data entry field, the system generally relies solely upon the location of the first ink stroke entered by the user. If a pen input area is declared and subsequent strokes extend outside of that area, the system will not associate those strokes with the data entry field, even though the user may have intended these subsequent ink strokes to be a part of that data entry field. Further, if that first stroke is only slightly misplaced (e.g., if the cross-bar of a capital \u201cT\u201d is drawn first and written too high), the entire subsequent session may be affiliated with the wrong input field. Associating ink with the wrong input field may result in the recognition results flowing to the wrong place, and, if a special recognition context is used for each input field (e.g., name vs. address vs. social security fields, etc.), the wrong context may be applied during recognition.","Even systems that attempt to improve this situation by using each stroke to determine the input field anew, such as the Apple Newton from Apple Computer Inc. of Cupertino, Calif., can suffer from failure modes that make the situation difficult both for end users and for application developers. For example, a word that accidentally spans two input fields even a tiny amount (due, for instance, to a stray ascender, descender, crossbar, or dot) may be broken up into multiple sessions, causing misrecognition and invalid data entries that must be manually corrected.","Accordingly, a need exists for improving the way in which ink data is organized so as to facilitate the recognition process and also to improve the association of ink data to particular data entry fields.","The present invention, in large part, relates to the observation that client applications and handwriting recognition software in pen-based computer systems can make far more accurate ink-related decisions based on entire ink phrases, rather than individual ink strokes. Accordingly, the invention is directed to an ink manager that is designed to organize ink strokes into ink phrases and to provide these ink phrases to client applications. In the illustrative embodiment, the ink manager interfaces between a pen-based input device, one or more applications (pen-aware or not) and one or more handwriting recognition engines executing on the computer system. The ink manager acquires ink information, such as ink strokes, entered at the pen-based input device, and organizes that information into ink phrases. The ink manager includes an ink phrase termination engine (which may be partially executed in a pen driver component) that is configured to apply one or more ink phrase termination tests to the ink information. If the termination engine detects the occurrence of an ink phrase termination event, the ink manager performs the following steps in order: 1) finishes organizing the strokes into an ink phrase data structure, 2) optionally notifies the current client application program of the termination event by providing it with the ink phrase, thereby allowing the application to determine a suitable affiliation between the ink phrase and a specific input field, specify a reference context (e.g., a pointer) and request a particular recognition context, if desired, 3) notifies the appropriate handwriting recognition engine, so as to allow it to complete its work and provide the recognition results corresponding to the current ink phrase, and 4) sends the now labeled (i.e., recognized) ink phrase to the application, together with any reference context previously identified by the application (in step 2). To the extent the application returns a reference context and\/or a recognition context, they may be appended to the ink phrase data structure.","Significantly, by passing the as yet un-recognized ink phrase to the application immediately upon phrase termination (step 2 above), the ink manager allows the application to make specific input field and context determinations on a more suitable unit of data than previous systems\u2014a phrase, rather than a stroke. Consequently, the system can associate the user's ink data with the input fields intended by the user more consistently, even if one or more ink strokes (including the first ink stroke) is wholly or partially outside of the input field. The system can also recognize the ink data more accurately due to the use of the most appropriate recognition context, again as determined by the application based on the ink phrase.","In the preferred embodiment, the ink phrase termination engine applies three ink phrase termination tests to the ink information generated at the pen-based device, and also allows the recognition engine to impose its own phrase termination test. First, the ink phrase termination engine initiates a time-out mechanism upon receiving each ink sample. If the time-out expires before the next ink sample is received, an ink phrase termination event occurs. The value of this time-out is preferably adjustable by the end user. Second, the ink phrase termination engine monitors proximity information acquired by the pen-based input device, and issues an ink phrase termination event when the pen is lifted out-of-proximity from the surface of the input device. That is, the input device includes sensors that detect whether the pen, even though not yet in contact with the surface of the device, is nonetheless near the surface or not (i.e., in or out-of-proximity). Optionally, the application associated with the current pen session may supply the coordinates of a pen input area to the ink manager and request the ink phrase termination engine to issue an ink phrase termination event whenever the ink samples move outside of this area. Finally, ink phrase termination events can be triggered by the handwriting recognition engine. In particular, the recognition engine preferably applies a word segmentation model to the ink information it is receiving on-the-fly. If the engine determines that a new ink sample represents the start of a new word (e.g., the new ink sample is on a new line or is spaced a significant distance horizontally from the prior ink sample), then the recognition engine may issue an ink phrase termination event.","While the ink manager may allow alternative methods of data handling, including stroke-based and even point-based ink accumulation by the client application as well as input-area-based phrase termination, the organization of ink information into ink phrases frees pen-aware applications from the low-level ink collection and handling process, improves the correlation of ink information to specific areas on the pen-based input device, and improves the recognition process.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","102","104","106","107","108","102","100","110","102","112","114","116","100","118","110","102","100","118","120","100"],"i":["a","d "]},"A suitable computer system  for use with the present invention includes the line of personal computers sold by Apple Computer, Inc. of Cupertino, Calif. Nonetheless, the present invention may also be practiced in the context of other types of computers, including the personal computers sold by International Business Machines Corp. of Armonk, N.Y. and Compaq Computer Corp. of Houston, Tex. All of these computers have resident thereon, and are controlled and coordinated by, operating system software, such as the Apple Mac OS operating system and the Microsoft Windows 95 or 98 operating systems. Other suitable computer systems  for use with this invention include hand-held Personal Digital Assistants (PDAs), such as the PalmPilot from 3Com Corporation of Santa Clara, Calif. and WinCE compatible devices.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 1"],"b":["118","118","118","102","110","202","118","202","202","120","100","202","118","120","120","202","203","100","102","110","202","102"]},"To facilitate the user's interaction with the tablet , computer system  () may be arranged or otherwise configured to produce certain images on the screen . For example, a series of horizontal lines -etc. may be displayed on screen  to help the user align handwritten text. An array of input buttons -may also be displayed. By tapping the buttons -with the pen , the user may cause various commands to be carried out by the computer system . Up and down scroll buttons and , which can be similarly activated by the pen , may also be provided. As described in more detail below, an application program running on the computer system  may generate one or more data entry fields or boxes, such as fields -, on screen . These fields or boxes -may be labeled by the output or display component , whether integrated with tablet  or as a separate screen, in order to request particular handwritten information from the user, such as city, state, telephone number, etc.","A suitable tablet  for use with the present invention includes the Wacom graphics tablets from Wacom Technology Company of Vancouver, Wash.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIG. 1"],"b":["100","302","302","304","302","302","100","304","306","306","308","100","304","310","312","310","308","314","316","308","318","310","320","322"],"i":["a ","b","a ","b ","a ","b"]},"Installed onto the computer system  may be one or more handwriting recognition engines, such as engine , engine , etc., and designated generally as , which may be operably selected by the handwriting recognition manager . The input tablet  is typically coupled to the ink manager  by one or more drivers. Specifically, the ink manager  may receive ink information from a pen driver  to which it is coupled, and the pen driver , in turn, may be coupled to a tablet-specific driver . Either the pen driver  or the tablet-specific driver  interfaces directly with the tablet . In the preferred embodiment, the ink phrase termination engine  includes a timer  and is additionally coupled to the pen driver  for evaluating ink information received thereby as described below.","In addition, the ink manager  is in communicating relationship directly or indirectly with an ink memory area  which may represent a portion of RAM  () allocated to the ink manager . Within the ink memory area , the ink manager  may establish and manipulate one or more ink phrase data structures . It should be understood that the ink phrase termination engine  may be distributed between the ink manager  and the pen driver . It should also be understood that the pen driver  may even be considered a part of the ink manager .","The ink manager , termination engine  and pen driver  may comprise one or more software programs, such as software modules or libraries, pertaining to the methods described herein, that are resident on a computer readable media, such as mass memory  () or RAM , and executable by one or more processing elements, such as CPU . Other computer readable media, such as floppy disks and CD-ROMs, may also be used to store the program instructions for execution. The ink manager , termination engine  and pen driver  may also be implemented in hardware through a plurality of registers and combinational logic configured to produce sequential logic circuits and cooperating state machines. Those skilled in the art will recognize that various combinations of hardware and software components may also be employed.","The event manager , which may also constitute a set of software modules or libraries within the operating system , informs application programs , of hardware and software events by sending or returning event messages or records via API layer . For example, applications , may periodically issue a WaitNextEvent( ) function or system call to the event manager  to check to see if an event has occurred. In response, the event manager  returns the events, if any, that are pending for the requesting application. Each application program and preferably includes an event handler for coordinating the request and receipt of events from the event manager . The ink manager  is preferably in communicating relationship with the event manager  so that hardware and software occurrences for which the ink manager  is responsible (e.g., ink events) may be passed to the event manager  for forwarding to the appropriate application or process.","The handwriting recognition manager  provides an interface or layer between the one or more handwriting recognition engines  and their clients (e.g., the ink manager  or the application programs , themselves). In particular, the handwriting recognition manager  makes the existence of the various handwriting recognition engines  known to the system  and establishes a unique identifier for both the recognizers  and their clients so as to associate ink information and the corresponding results with the appropriate recognizers and clients. Each recognition engine , moreover, in addition to implementing its own recognition process, may utilize its own particular internal ink stroke data structures, its own methods for accumulating ink strokes and its own recognition results data structures.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIGS. 4A-B","FIG. 1","FIG. 3"],"b":["402","100","304","302","310","404","310","308","302","310","302","310","308","310","302","302","324","1","118"],"i":["a","a ","a ","a ","a "]},"The ink manager  and\/or pen driver  look for ink data as entered by the user as indicated by decision block . Until such ink data is detected, decision block  loops back on itself as shown by No arrow . When the user inks, i.e., when the user places the pen  in contact with the tablet  and moves the pen  across its surface, ink information, such as ink data points, are generated by the tablet  and received and processed by the tablet-specific driver  and the pen driver . This ink information is assumed to be targeted at the foreground application process. The top most open application or process, which is typically the application that is currently being operated by the user, is called the foreground process, while the other open applications and processes are referred to as background processes. To retrieve this ink information, the pen driver  may periodically poll the tablet-specific driver  or the tablet  (typically via a device manager system service). Alternatively, the pen driver  may be called by the tablet-specific driver  (or a system device manager) whenever new ink information is available. For example, the tablet-specific driver  may communicate with the tablet via the Apple Desktop Bus (ADB) and then may store ink information in a DV data structure and communicate with the pen driver  via that data structure. Both the DV data structure and the ADB are defined and implemented by Apple Computer Inc. and are well-known to those skilled in the art to which the present invention pertains.","The pen driver  preferably collects and organizes this ink information (e.g., individual ink data points or pen locations) into corresponding ink strokes as indicated at block . More specifically, the pen driver  begins storing the ink data points in a first buffer . When the ink information from the tablet-specific driver  indicates that the pen  () has been lifted from the screen , the pen driver  stops storing the ink data points in the first buffer and initiates a second buffer for subsequent ink data points (i.e., when the pen  is again placed in contact with and moved across the screen ) and so on. Accordingly, each buffer  initialized by the pen driver  contains those ink data points corresponding to one ink stroke. To avoid generating new ink strokes when the pen  \u201cskips\u201d across the screen , as opposed to being lifted in order to begin a new stroke, the pen driver  may impose a short time out-of-contact with screen  requirement before concluding that the subsequent ink data points represent a new stroke.","The ink manager  may periodically poll the pen driver  to retrieve the ink strokes that have been gathered. Or, preferably, the pen driver  will notify the ink manager , as part of an event-driven model, when it has a new ink stroke. The ink manager  stores the retrieved ink strokes within an ink phrase data structure  as indicated at block .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5","b":["332","332","502","504","504","332","506","310","326","332","508","510","512"]},"In addition to storing each ink stroke in the respective ink phrase data structure , the ink manager  also passes each ink stroke to the handwriting recognition manager  as indicated at block  (). The handwriting recognition manager  in cooperation with the designated (or default) handwriting recognition engine , performs certain pre-recognition processing of the ink strokes, but does not yet perform recognition. For example, the handwriting recognition manager  and the designated engine  may compute running averages of stroke and gap sizes and run a primitive word segmentation model.","In addition, the ink phrase termination engine  of the ink manager  in conjunction with the pen driver  examines the new ink information retrieved from the tablet  and tablet specific driver  to determine or detect whether an ink phrase termination event has occurred as indicated by decision block . In the preferred embodiment, the ink phrase termination engine  applies three criteria or tests to the ink information in order to detect whether a phrase has terminated. First, the ink phrase termination engine  applies a \u201ctime-out\u201d to the ink information. In particular, upon receipt of each ink data point at the pen driver , the ink phrase termination engine  commences\/resets its timer , and if the timer  expires before the receipt of the next ink data point, the ink phrase termination engine  identifies an ink phrase termination event. The value of the time-out, which is on the order of a fraction of a second, is preferably user settable within a predefined range. More specifically, a user may display the configuration parameters for the ink manager  and, using a conventional slider, adjust the time-out. Alternatively, the time-out may be designated by the application by a special ink manager API system call. Upon detecting such an ink phrase termination event, the pen driver  saves the event as a special buffer type and sends it to the ink manager . It should be understood that the termination engine  may be embodied largely within the pen driver .","The ink phrase termination engine  also applies an \u201cout-of-proximity\u201d test to the ink information gathered in pen driver . Specifically, tablet  and its associated tablet-specific driver  are preferably configured and arranged to determine not only when the pen  is in contact with the screen , but also when the pen is in-proximity to the screen . That is, tablet  senses when the pen  is near (e.g., \u00bd to \u00be of inch above), but not yet in contact with the screen . This proximity information, including the x-y coordinates of the pen, are provided by the tablet  (and its associated tablet-specific driver , if in use) to the pen driver . If the pen  is lifted beyond the sensing capabilities of the tablet  (i.e., the pen  is moved out-of-proximity), the ink phrase termination engine  detects such an occurrence and the pen driver  again saves the event as a special buffer type and sends it to the ink manager . That is, the pen driver  notices that it has stopped receiving ink data and\/or in-proximity information from tablet  or tablet driver .","The ink phrase termination engine  may also apply an \u201cout-of-area\u201d test to the ink information, based on the bounding coordinates of one or more data entry fields or screen areas defined by the foreground application More specifically, the application may define data entry fields -and supply the coordinates of these fields -to the ink manager . The ink phrase termination engine  compares the position information of the ink data points with the bounding coordinates provided by the application . If it determines that the ink information being acquired by the pen driver , which initially fell within one of these data entry fields, e.g., box (), has now moved outside of that field, it may have the pen driver  notify the ink manager .","In addition to the three ink phrase termination event tests that are applied by termination engine , the handwriting recognition manager  in cooperation with the handwriting recognition engine  applies a \u201crecognition hard-break\u201d test to the ink strokes being received from the ink manager . In particular, as part of its preprocessing of ink strokes received from the ink manager , the handwriting recognition manager  and designated engine  apply a primitive word segmentation model, such as a geometric probability model based on stroke- and word-gaps. If the word segmentation model concludes that a new ink stroke constitutes a new word, then the handwriting recognition manager  preferably notifies the ink manager , which treats the notification as an ink phrase termination event. For example, a new ink stroke that is located on a new line, e.g., line , relative to the line on which the last ink stroke was located, e.g., line , preferably causes the word segmentation model to issue an end of phrase event notification to the ink manager . An ink stroke whose x coordinate is substantially different from the x coordinate of the last ink stroke (e.g., the two ink strokes are multiple inches apart) would similarly cause the handwriting recognition manager to notify the ink manager . That is, the word segmentation model preferably applies some pre-defined, in-plane (i.e., within the plane of the screen ) spatial constraints to the ink strokes. Those skilled in the art will understand that the word segmentation model may apply other constraints to detect the start of a new word.","All of the foregoing ink phrase termination tests are preferably applied substantially simultaneously to the ink information being received at the pen driver  and the ink manager , and an ink phrase is terminated upon the occurrence of any such event. That is, the pen driver  and\/or ink manager  are continuously looking for the occurrence of any these ink phrase termination events. If none of the foregoing ink phrase termination events occurs, then the ink manager  returns to block  as indicated by NO arrow  from decision block , and continues to store the ink strokes from the pen driver  in the respective ink phrase data structure  and pass them to the handwriting recognition manager .","If the ink manager  obtains notification of an ink phrase termination event (either by the termination engine  via the pen driver  or the handwriting recognition manager ), then it preferably responds as follows. First, it notifies the foreground application of the occurrence of the ink phrase termination event as indicated by block  (). For example, using the universal procedure pointer specified by the application , the ink manager  may call the procedure in application through an end-of-phrase callback with the so far un-labeled (i.e., un-recognized) ink phrase as an argument. The application preferably responds to this callback in certain specified ways.","Upon receiving the ink phrase via the end-of-phrase callback, the application may provide the ink manager  with an application-generated reference context (REF CON) for the ink phrase. The REF CON may simply be a tag generated by the application for internally identifying or providing other information regarding the ink phrase. More typically, the REF CON may be a pointer to a data structure containing a variety of information of use to the application . The REF CON is appended to the respective ink phrase data structure , e.g., by inserting it at field  (), as indicated at block . It should be understood that the ink manager  may associate the REF CON with the corresponding ink strokes passed to the application without appending the REF CON to the ink phrase data structure . For example, the ink manager  may store the REF CON in some other data structure or memory which is accessible by it.","The application may also identify a handwriting context to be used during recognition of the ink phrase. For example, suppose application examines the ink phrase received from the ink manager  and, based on the location information of the respective strokes on the screen , determines that the strokes are generally located within data entry field . Suppose also that data entry field corresponds to \u201ccity\u201d, then the application may direct the ink manager  to utilize a city vocabulary when performing recognition on this ink phrase. The recognition context may be loaded within field  () of the ink phrase data structure. Alternatively, the application may conclude that the ink strokes correspond to a screen location for receiving mathematical equations or musical compositions, and provide a corresponding recognition context. The application may also confirm (or, by doing nothing, decline) certain context-dependent gestures.","Next, the application declares to the ink manager  whether it wishes to \u201cconsume\u201d the ink phrase as indicated at decision block . If so, the ink manager  causes the corresponding recognizer to discard the respective ink information as indicated at block  and then discards its own respective ink phrase data structure  as indicated at block . If the application is not going to consume the ink phrase, then the ink manager  notifies the handwriting recognition manager  of the phrase termination event and instructs it to recognize the phrase as indicated at block . Since the handwriting recognition manager  received the ink strokes as they were retrieved by the ink manager  from the pen driver , the ink manager need not re-send the ink strokes to the handwriting recognition manager . Instead, the ink manager  simply tells the handwriting recognition manager  to recognize the ink strokes preceding the ink phrase termination event (which corresponds to the ink strokes in data field  () of the data structure ). The handwriting recognition manager  may contact the handwriting context manager  to identify an appropriate context, if any, for use in the recognition process.","Since the ink strokes being processed correspond to an ink phrase as defined by the respective ink phrase termination event, the strokes may correspond to multiple words. The invoked recognition engine  may thus generate several hypotheses each having different word breaks within the respective ink phrase. For example, the same ink, with an ambiguous initial letter and certain ambiguous character spacing could be recognized as either \u201cboat ramp\u201d or \u201cto a tramp\u201d. It should be understood that the recognition results may instead consist of geometric shapes, alpha-numeric characters, musical notes, mathematical equations, or any other symbols known to the selected recognition engine.","Upon completing the recognition process, the handwriting recognition manager  sends the results to the ink manager . Specifically, the handwriting recognition manager  provides the ink manager  with the identifier (ID) of the invoked recognizer  (e.g., engine ), and for each hypothesis, the manager  also supplies the recognition results, word counts for each phrasing hypothesis, alternate word lists for each word in each phrasing hypothesis, and possibly a description of the strokes used for each word. The ink manager  preferably appends the recognition results to the respective ink phrase data structure  as indicated at block . In particular, the ink manager  loads the recognition results into field  (). The ink manager  also forwards the recognition results and the previously generated REF CON, if any, to the application as indicated at block . If a REF CON was originally provided by the application , upon its return to the application in block , the application may use that REF CON for any number of purposes, e.g., as a pointer to a data block that identifies the specific input field in which the ink was entered.","Those skilled in the art will understand that the application may take any number of steps in response to receiving the recognition results. For example, the application may display the recognition results to the user for confirmation or selection of the correct results if multiple hypotheses were returned by the recognition engine . The application may also treat the recognition results as input and process those results in a conventional manner. In an appropriate system software environment, such as the Mac OS, the labeled ink phrase can be posted as an event to an application , even if application is not \u201cink aware\u201d (has not called InkInit( ), and has no knowledge of the ink manager , pen driver , etc.). In this \u201ccompatibility\u201d case, system default event handlers previously installed by and part of the ink manager  convert the recognized ink phrases into conventional non-ink events, such as keyDown events simulating the key presses on a conventional keyboard.","Once the active ink phrase has either been discarded or recognized and posted to the application , the ink manager  and the pen driver  resume waiting for pen input from the user, as indicated by arrow  () that branches back to block  (). If ink activity resumes (i.e., additional ink information is received at the pen driver ), the pen driver  again begins accumulating data points into ink strokes (following the YES arrow out of block ), then sends ink strokes on to the ink manager , which begins accumulating them into a new ink phrase (block ), and the entire cycle begins again.","Those skilled in the art will understand that ink manager  and pen driver  may perform one or more \u201cclean-up\u201d functions (e.g., releasing memory, discarding data structures, and so on) if the user is inactive for some designated period of time. The ink manager  may also provide an InkDisposePhrase( ) system call to the application program for use in de-allocating memory resources utilized during the pen activity.","The foregoing description has been directed to specific embodiments of this invention. It will be apparent, however, that other variations and modifications may be made to the described embodiments, with the attainment of some or all of their advantages. For example, it should be understood that the application program may request receipt of raw ink information from the ink manager. Here, the ink manager  or the pen driver  directly provides the application program with the ink data points received at the pen driver . Therefore, it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention description below refers to the accompanying drawings, of which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 4A-B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
