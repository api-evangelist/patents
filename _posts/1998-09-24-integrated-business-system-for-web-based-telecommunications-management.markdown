---
title: Integrated business system for web based telecommunications management
abstract: The specification discloses a method of doing business over the public Internet, particularly, a method which enables access to legacy management tools used by a telecommunications enterprise in the management of the enterprise business to the enterprise customer, to enable the customer to more effectively manage the business conducted by the customer through the enterprise, this access being provided over the public Internet. This method of doing business is accomplished with one or more secure web servers which manage one or more secure client sessions over the Internet, each web server supporting secure communications with the client workstation; a web page backplane application capable of launching one or more management tool applications used by the enterprise. Each of the management tool applications provide a customer interface integrated within said web page which enables interactive Web/Internet based communications with the web servers; each web server, supports communication of messages entered via the integrated customer interface to one or more remote enterprise management tool application servers which interact with the enterprise management tool applications to provide associated management capabilities to the customer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09197599&OS=09197599&RS=09197599
owner: VERIZON PATENT AND LICENSING INC.
number: 09197599
owner_city: Basking Ridge
owner_country: US
publication_date: 19980924
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This patent application claims the benefit of U.S. Provisional Patent Application Ser. No. 60\/060,655 filed Sep. 26, 1997.","The present invention relates generally to method of doing business over the public Internet, and, particularly, to providing enterprise management tools to customers of a telecommunications service provider over the Internet.","The public Internet was created as ARPANET, an initiative of the Defense Advanced Research Projects Agency (DARPA) to connect computers for the exchange of data, and to enable command and control functions to be exchanged in case of a nuclear war. In the 1970s, it was split into military and civilian networks, with the civilian network managed by the National Science Foundation (NSF). In the early 1980s, the Secretary of Defense mandated the TCP\/IP network protocol, and the NSF gradually turned control of what was now referred to as the public Internet to universities, independent agencies and commercial service providers. During this time, the Internet was used primarily for scientific and academic purposes. With the adoption of HTML and the development of graphical browsers, the public Internet began to shift from a technical character set form of communication, to a delivery medium for all types of content over the World Wide Web (Web) and commercial enterprises entered this segment of the Internet to do business over the rapidly developing Web environment. Initial methods of doing business were focused on using the Web as an alternate to existing direct mail, magazine or television methods of doing business, in which goods were advertised and sold, or content was delivered via the Web in a manner similar to existing methods of doing business.","During this same period of time, the telecommunications industry began to provide a greater percentage of the Internet capacity, both in terms of high speed lines between web sites, and between the individual consumers and small business who connect to the Web through a local telephone Central Office (CO) and an Internet service provider.","Simultaneously, the telecommunications industry recognized that its larger customer were interested in managing portions of their own business provided by the telecommunications enterprise, and began to make some of their management tools available to their customers. In these conventional customer enabled management systems, a connection was made with a large legacy system via a dial-up connection from a customer owned personal computer or work station. This connection frequently, although not always, emulated a terminal addressable by the legacy system. The dial-up access required custom software on the customer workstation to provide dial-up services, communication services, emulation and\/or translation services and generally some resident custom form of the legacy application to interface with the mid range or main frame computer running the legacy system.","There were several problems associated with this approach:","First, the aforementioned software is very hardware specific, and customers generally have a wide range of workstation vendors, which required an extensive inventory of software for distribution, and generally, intensive customer hand holding through initial setup and installation before reliable and secure sessions were possible. If the customer hardware platform changed through an upgrade, most of these issues needed renegotiation.","Secondly, dial-up, modem, and communications software interact with each other in many ways which are not always predictable to a custom application, which required extensive trouble shooting and problem solving capacity for an enterprise wishing to make the legacy system available to the customer, particularly where various telephone exchanges, dialing standards or signal standards were involved.","Third, when an enterprise wished to make more than one system available to the customer, the custom application for one legacy system was not able to connect to a different legacy system, and the customer had to logoff and logon to switch from one to the other. The delivery technology used by the two legacy systems was frequently different, which required different interface standards.","Finally, the security and entitlement features of the various legacy systems were frequently quite different, and varied from system to system and platform to platform.","In the context of telecommunications services and products offered by large telecommunications network service providers for their customers, the assignee of the present invention, MCI, has deployed an MCI ServiceView (\u201cMSV\u201d) platform comprising a number of independent legacy systems enabling dial-up connectivity for those customers desiring to obtain the following network management service and reporting data pertaining to their telecommunications networks: priced call detail data and reporting; toll-free network manager \u201c800NM\u201d call routing data; outbound network management data; trouble ticket information; fault manager alarms. Limited interactive toll free network control is additionally supported whereby customers may change the configuration of their toll-free networks and \u201cvirtual\u201d networks, i.e., Vnet networks. In addition to the MSV platform, the present assignee has implemented a variety of stand alone applications including: a Traffic View system enabling customers to perform real-time network traffic monitoring of their toll-free networks, and obtain near-real time call detail data and reports, and, a \u201cHyperscope\u201d reporting system for providing reports on the performance of customers' Broadband (data) networks.","More particularly, MCI's ServiceView platform (\u201cMSV\u201d) provides for the generation of Toll-free Network Management data, priced call detail (\u201cPerspective\u201d) data for usage analysis and trending, each of which requires a different reporting mechanism due to the nature of the data being presented. Such reporting systems typically do not provide any report customization or presentation options for the customer, and any reporting customization is provided by an application specific program running on the client workstation. Furthermore, such systems do not readily provide for the scheduling of periodic or ad hoc \u201cone-shot\u201d reports.","AT&T provides a \u201cCustomer Direct\u201d offering, a first part of which is known as the Network Administration System (NAS), and is developing a second part, known as Service Request System (SRS). The NAS program uses a personal computer, a Windows based GUI and analog dial-up access at 9.6 Kbps to AT&T's legacy network switch control systems. When completed, the SRS offering will use the same type of dial-up platform and enable an AT&T customer to order services and features from their desk-top personal computer.","Sprint provides several legacy systems via the Insite service offerings, including Insite PC, Insite ACT and is in the process of developing the Sprint Insite Executive network management program, all making use of a customers personal computer and a dial-up connection. Sprint also announced on Sep. 17, 1996, the Sprint InTouch(SM) product which would enable a customer to open, view, note or close trouble tickets.","These prior art systems, with the excepting of InTouch(SM) all suffer from the aforementioned problems with dial-up telephone connections and legacy applications. Thus, what is needed is a comprehensive system that provides customers with simplified access to a telecommunications provider's products and services that they have subscribed.","The assignee of the present invention has realized that the popularity of the public Internet provides a measure of platform independence for the customer, as the customer can run their own Internet web-browser and utilize their own platform connection to the Internet to enable service. This resolves many of the platform hardware and connectivity issues in the customers favor, and lets the customer choose their own platform and operating system. Web-based programs can minimize the need for training and support since they utilize existing client software which the user has already installed and already knows how to use, i.e., the browser. Further, if the customer later changes that platform, then, as soon as the new platform is Internet enabled, service is restored to the customer. The connectivity and communications software burden is thus resolved in favor of standard and readily available hardware and the browser and dialup software used by the public Internet connection.","An Internet delivered paradigm obviates many of the installation and configuration problems involved with initial setup and configuration of a customer workstation, since the custom application required to interface with the legacy system can be delivered via the public Internet and run within a standard web-browser, reducing application compatibility issues to browser compatibility issues.","The assignee of the present invention has also realized that the use of off-the-shelf web browsers by the customer significantly simplifies the enterprise burden by limiting the client development side to screen layouts and data presentation tools that use a common interface enabled by the web browser. Software development and support resources are thus available for the delivery of the enterprise legacy services and are not consumed by a need for customer support at the work station level.","The assignee of the present invention has also realized that providing its management tools to its customers will develop customer loyalty, and more fully integrate the services provided by the telecommunications enterprise with the infrastructure of the customers organization. It is therefore highly desirable to provide these management tools over the public Internet. The public Internet provides access connectivity world wide via the TCP\/IP protocol, without need to navigate various disparate security protocols, telephone exchanges, dialing standards or signal standards, thereby providing a measure of platform independence for the customer.","Furthermore, an Intranet\/Internet\/Web-based reporting system provides a common GUI for the customer enabling both report requesting, customizing, scheduling and viewing of various types of data from different back-end telecommunications service and applications at a single point of customer contact.","It is therefore desired to enable convenient customer access to an enterprise's management tools to facilitate the integration of the customer with the enterprise. This may be done by enabling access to the enterprise's telecommunications network management services over the public Internet. The assignee of the present invention currently provides a number of independent legacy or host systems to provide customers with the following pertaining to their telecommunications networks: Priced Reporting (formerly Perspective), for priced call data and reporting, and TrafficView for unpriced call detail data and reporting; Toll-Free Network Management (TFNM) (previously 800 Network Manager), Call Manager, and Outbound Network Manager for command and control of network switching; BroadbandView, Broadband SNMP (previously HyperScope) and Event Monitor (previously Fault Manager) for network performance and alarm data; Service Inquiry (previously Direct Dispatch) for trouble ticket management; Real-Time Monitor for near real time call detail data; ClientView for invoice data. Limited interactive toll free network control is additionally supported whereby customers may change the configuration of their toll-free networks and \u201cvirtual\u201d networks, i.e., Vnet networks.","The present invention is directed to a Web-based system for doing business that utilizes an integrated customer interface system for telecommunications network management. The customer interface system is provided with a graphical user interface for enabling a user to interact with one or more telecommunications services provided by remote servers located in a telecommunications service provider's Intranet, and utilizes a Web paradigm to allow an easy and convenient single point of access to all of the telecommunications services provided by the enterprise to the customer. While the present invention is useful for a wide range of commercial activity, ranging from a few thousand calls or transactions a month to over a million per month, it is particularly desirable for activity ranging from 20,000 to 200,000 transactions or calls per month.","In the preferred embodiment, the telecommunications products and services delivered to a client workstation having the integrated customer interface include: 1) report requestor, report viewer, and report management applications enabling a customer to request, specify, customize and schedule delivery of reports pertaining to customer's real time \u201cunpriced\u201d call detail data and priced call detail data; 2) centralized inbox system for providing on-line reporting, presentation, and notifications to a client workstation from one or more Intranet application services over an Internet\/Intranet network; 3) a real-time monitoring system enabling a customer to monitor call detail statistics and call detail data pertaining to their special service network usage, e.g., 800\/8xx toll-free networks; 4) a toll-free network management system enabling customers to define their own 800\/8xx toll free number routing plans via the Web\/Internet, enabling customers to change and modify their existing 800\/8xx toll free number routing plans, and, temporarily change the percent allocation of traffic for a particular 800\/8xx toll free number based on certain criteria; 5) an outbound network management system enabling customers to manage and track features and services associated with their virtual networks (\u201cVnet\u201d) including management of calling party number orders, dialing plan orders, calling card number management, and ID code sets orders; 6) an event monitor system for providing customers with various reports and real-time alarm information relating to their switched-circuit (data and voice) networks in real time or near-real time, including: provision of physical and logical views of customers' Broadband data networks, physical and logical view of Broadband network alarms, and physical and logical performance information relating to the circuits which comprise a customer's Broadband data network, e.g., frame-relay, thus, allowing customers to make informed network management decisions in controlling their business telecommunications networks; 7) a trouble ticket tool enabling a customer to open and monitor trouble tickets relating to network events on an enterprise network; 8) a Web-based invoice reporting system allowing the customers access to their billing and invoice reports associated with network services provided to a customer; 9) a web-based call manager service enabling call center customers to control delivery of toll free calls from the telecommunications enterprise network to call centers, including call centers having multiple automatic call distributors (ACD's); 10) an Internet \u201conline\u201d order entry and administration service to enable customers to manage their telecommunications accounts; and, 11) a system for handling security and authentication requests from both client and server side of the applications implementing the suite of telecom products and services, and 12) an on-line E-Billing electronic commerce tool that will allow selected networkMCI Interact customers to receive, analyze, and pay their invoice(s) over the public Internet. On-Line E-Billing provides a variety of Internet-based billing features that includes electronic invoice presentment, invoice analysis and electronic bill payment, all from a single point of customer authentication.","Integrated within the customer interface system is an application backplane unit for controlling and managing the overall user interface system to a number of Web enabled application services. By invoking the backplane unit a user may receive a number of disparate services available from the remote servers.","Each remote telecommunications service provided includes its own user interface unit, referred to as a client application, independently implemented of one another and the backplane. Although the client applications are independently developed as separate modules, the interface of the present invention integrates the client applications into one unified system, allowing users to access the individual client applications via the backplane unit. Thus, the present invention provides interoperability between each of the client applications and the backplane, as well as among each of the client applications.","Accordingly, the present invention provides an integrated customer interface and web-based delivery system for delivering to customers a number of telecom products and services available from remote servers, wherein separate client applications may communicate with one another and with the backplane unit.","Thus, in accordance with the principles of the invention, there is provided an integrated system for conducting business over the Internet by providing one or more enterprise management tools to the enterprise customers, said management tools accessible from a client workstation employing a client browser associated with a customer and capable of receiving web pages from the enterprise which enable access to the enterprise management tools. This method of doing business is accomplished with one or more secure web servers which manage one or more secure client sessions over the Internet, each web server supporting secure communications with the client workstation; a web page backplane application capable of launching one or more management tool applications used by the enterprise. Each of the management tool applications provide a customer interface integrated within said web page which enables interactive Web\/Internet based communications with the web servers; each web server supports communication of messages entered via the integrated customer interface to one or more remote enterprise management tool application servers which interact with the enterprise management tool applications to provide associated management capabilities to the customer.","The messages include:","i) requests for information pertaining to a customer's telecommunications business with the enterprise; or,","ii) command and control directives for modifying a customer's telecommunications network assets;","wherein the remote telecommunications management tool application server processes said requests or directives and provides responses to said one or more web servers for secure downloading to the customer workstation for display via said integrated interface.","Advantageously, this method of doing business obviates many of the installation and configuration problems involved with initial setup and configuration of a dial-up customer workstation, since the custom application required to interface with the legacy system can be delivered via the public Internet and run within a standard web-browser, reducing application compatibility issues to browser compatibility issues.","It is another object of the present invention to enable access to legacy management tools used by enterprise management in the conduct of the enterprise business to the enterprise customer, to enable the customer to more effectively manage the business conducted by the customer through the enterprise, this access being provided over the public Internet.","It is another object of the present invention to provide a single point of access for the customer to open a plurality of disparate enterprise management tools, and to allow the customer to thereafter modify their own authorization and entitlements to these management tools, and be automatically billed for the changes they have requested.","It is another object of the present invention to provide an integrated E-Billing system for doing business in which customers may view unpriced and priced telecommunication call data, to view electronically generated invoices for the telecommunication service provided, and to pay for these services with an E-Billing electronic fund transfer.","It is an object of the present invention to use the Internet to deliver additional value for networkMCI One customers and to leverage the web technology of the present invention by giving customers the option of receiving, analyzing, and paying their networkMCI One invoice over the public Internet. The present invention provides an \u201cintelligent, navigable invoice\u201d where customers and users can drill down from summary level information to specific site and service level detail.","It is an object of this invention to provide enterprise-wide customer operations via the Internet and create a cost-effective, 24 hour a day, 7 day a week virtual communications center for the enterprise customers, thereby providing a competitive advantages for business users of the invention. Using the present invention, customers can easily and conveniently manage enterprise-wide and individual telecom services\u2014anywhere, anytime and online. Whether the customer has dedicated lines or dial access lines, command and control of critical telecom functions is only a mouse-click away. This provides a substantial cost and time savings to the customer of the enterprise.","It is an object of this invention to provide a suite of Web-based communications management tools that enable customers to monitor, analyze and redirect voice, data and Internet resources. The invention provides new command and control tools for enterprise-wide and personal communications include: traffic monitoring and reporting and service configuration, electronic billing and reporting, universal messaging, order entry and provisioning, product and service training, and customer care.","It is another object of the present invention to define a new business model by utilizing the Internet as a medium for operating and managing mission-critical communications operations, by creating a more convenient way for customers to order, provision, monitor, report, purchase and pay for their services.","It is another object of the present invention to streamline the enterprise front- and back-office processes to more effectively serve customers of the enterprise. Because customers have the option to self-serve their business functions online, the enterprise sales resources are able to play a more consultative role and respond to communications conditions that require more complex management.","The present invention integrates the tools and resources from the enterprise's core long distance, local, data, Internet, call center and global businesses. This approach leverages the enterprise's Internet expertise, harnesses the power of the enterprise intelligent network, and utilizes the enterprise's unique integration capabilities\u2014at the network, billing, product and service levels\u2014for the benefit of its customers as well as the enterprise.","The components of the present invention include: Traffic Monitoring and Reporting\u2014as part of networkMCI Interact, customers can monitor and route long distance, local, data and Internet traffic, including service configuration and setting event alarms; universal Messaging-integrated messaging; allows users to maintain personal profiles under the networkMCI Contact service; Order Entry and Provisioning\u2014wherein customers can order new products online and provision services online; Customer Care\u2014online support for MCI product and services, utilizing networkMCI Click'nConnect, Web Callback, E-mail support and Service Inquiry, Click'nConnect being a service that allows Web-users to make a PC-to-phone connection over the Internet; E-Billing and Reporting, which allows customers to receive electronic invoices and reports, to remit payment electronically; and to provide custom views and analysis of billing records; networkMCI BroadbandView, a Web-based traffic and reporting tool for data customers will be integrated under the Interact traffic monitoring and reporting portfolio; and networkMCI Contact, a service that allows end-users to manage their paging, E-mail, voice mail and fax as part of the personal profiles management component of the present invention.","By utilizing the present invention, customers are able to react to emergency situations quickly. For example, a telecom director\u2014responsible for managing enterprise-wide communications for a packaged goods company\u2014receives an \u2018alarm\u2019 on his pager at 11 o'clock at night. A snowstorm in the Northeast has paralyzed the city where the company operates a 24 hour a day\u00d77 days a week call center. The telecom director powers up his laptop computer from home, logs on to the MCI Web site, enters his authentication passcode for security, and with several clicks of a mouse, reroutes traffic to the company's call center in Phoenix. For the next 36 hours, he is able to monitor the call routing situation via the Web site in real-time, and when the snow clears, he routes the traffic back to the Northeast center.","In a second example, a communications manager working for a U.S.-based software company, is responsible for the telecom needs of 50 offices worldwide. The manager is responsible for sorting and tracking expenses for all 50 locations and for all the company's services. The paper invoices can sometimes exceed hundreds of pages. With electronic billing\u2014the manager will no longer have to wait to receive a paper invoice in the mail. Instead, real-time e-bills will be available on a secure Web site, with the ability to manipulate and view the data in many different formats\u2014by service, by location, etc. After review, the manager is able to remit invoices electronically.","It is another object of the present invention to use Java technology to optimize computing resources and network bandwidth and deliver information to the user desktop quickly and efficiently. An enterprise customers is able to access the same up-to-date information from a dial-up connection at his or her home that would be available via a dedicated LAN\/WAN environment at their office, independent of their operating systems. Intelligent authentication provides security as well as custom information that is delivered to a customer's personalized Webtop\u2014eliminating the need for customers to cut through clutter to find the information needed.","The present invention is a Web-based, telecommunications network application delivery system for delivering an integrated suite of customer network management tools to customers of telecommunications service providers using a Web browser paradigm. The integrated suite of customer network management tools described herein and provided by the assignee of the present invention, is collectively referred to as the networkMCI Interact system (\u201cnMCI Interact\u201d). Such an integrated suite of Web-based interactive applications provides all of the tools necessary to enable customers to manage their telecommunication assets, quickly and securely, from anywhere in the world.","The nMCI Interact system architecture is basically organized as a set of common components comprising the following:","1) a software architecture detailing the client and server based aspect of nMCI Interact;","2) a network architecture defining the physical network needed to satisfy the security and data volume requirements of the networkMCI System;","3) a data architecture detailing the back-end or data sources for the networkMCI reporting system; and","4) an infrastructure covering security, order entry, fulfillment, billing, self-monitoring, metrics and support. Each of these common component areas will be discussed in further detail herein.  is a diagrammatic illustration of the software architecture in which the present invention functions. A first tier of software services are resident on a customer work station  and provides customer access to the enterprise system, having one or more downloadable application objects  directed to front end business logic and application services, a backplane service layer  for managing sessions, one or more presentation services objects for the presentation of telecom network management options and customer requested telecommunications network management data in a browser recognizable format, and a customer supplied browser for presentation of customer options and data to the customer and for internet communications over the public Internet.","A second or middle tier  is provided, having secure web servers and back end services to provide applications that establish user sessions, govern user authentication and their entitlements, and communicate with adaptor programs to simplify the interchange of data across the network.","A back end or third tier  having applications directed to legacy back end services includes database storage and retrieval systems and one or more database servers for accessing system resources from one or more legacy systems.","Generally, the customer or client tier or workstation  is client software capable of providing a platform-independent, browser-based, consistent user interface implementing objects programmed to provide a reusable and common GUI abstraction and problem-domain abstractions. More specifically, the client-tier software is created and distributed as a set of Java classes including the applet classes to provide an industrial strength, object-oriented environment over the Internet. Application-specific classes are designed to support the functionality and server interfaces for each application with the functionality delivered through the system being of two-types: 1) cross-product, for example, inbox and reporting functions, and 2) product specific, for example, Service Inquiry, Toll Free Network Management (\u201cTFNM\u201d) or Call Manager (\u201cCM\u201d) functions. The system is capable of delivering to customers the functionality appropriate to their product mix.",{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 2","b":["20","17","24","30","40"]},"The customer workstation  is browser enabled and includes client applications responsible for presentation and front-end services. Its functions include providing a user interface to various MCI services and supporting communications with MCI's Intranet web server cluster  As illustrated in , and more specifically described in the commonly owned U.S. Pat. No. 6,115,040 entitled GRAPHICAL USER INTERFACE FOP WEB ENABLED APPLICATIONS, the contents and disclosure of which are incorporated by reference as if fully set forth herein, the client tier software is responsible for presentation services to the customer and generally includes a web browser  and additional object-oriented programs residing in the client workstation platform  The client software is generally organized into a component architecture with each component generally comprising a specific application, providing an area of functionality The applications generally are integrated using a \u201cbackplane\u201d services layer  which provides a set of services to the application objects which provide the front end business logic and manages their launch.","As will be described, each of the nMCI Internet suite of network management applications implements a set of common objects (CO) that minimizes the replication of code, and provides a framework in which a family of internet applications may be managed and created including: communications, I\/O services to local resources, user authentication, internationalization, common look and feel, application management, and a model view controller (MVC) framework The primary common object services for each of the suite of applications include: graphical user interface (GUI); application launch; window navigation among applications; inter-application communications; printing; user identity, session management, authentication, and entitlements; data import and export; logging and statistics; error handling; version management; and messaging services The use of a set of common objects for implementing the various functions provided by the integrated interface system of the present invention, and particularly the use of browser based objects to launch applications and pass data therebetween is more fully described in the above referenced, commonly owned U.S. Pat. No. 6,115,040 GRAPHICAL USER INTERFACE FOR WEB ENABLED APPLICATIONS, and Appendix A, attached to that application, provides descriptions for the common objects which includes various classes and interfaces with their properties and methods.","As shown in , the aforesaid objects communicate data by establishing a secure TCP messaging session with one of the DMZ networkMCI Interact Web servers  via an Internet secure communications path  established, preferably, with a secure sockets SSL version of HTTPS. The DMZ networkMCI Interact Web servers  function to decrypt the client message, preferably via the SSL implementation, and unwrap the session key and verify the users session. After establishing that the request has come from a valid user and mapping the request to its associated session, the DMZ Web servers  will re-encrypt the request using symmetric encryption and forward it over a second secure socket connection  to the dispatch server  inside the enterprise Intranet.","As will be hereinafter described in greater detail, a networkMCI Interact session is designated by a logon, successful authentication, followed by use of server resources, and logoff. However, the world-wide web communications protocol uses HTTP, a stateless protocol, each HTTP request and reply is a separate TCP\/IP connection, completely independent of all previous or future connections between the same server and client. The present invention is implemented with a secure version of HTTP such as S-HTTP or HTTPS, and preferably utilizes the SSL implementation of HTTPS. The preferred embodiment uses SSL which provides a cipher spec message which provides server authentication during a session. The preferred embodiment further associates a given HTTPS request with a logical session which is initiated and tracked by a \u201ccookie jar server\u201d  to generate a \u201ccookie\u201d which is a unique server-generated key that is sent to the client along with each reply to a HTTPS request. The client holds the cookie and returns it to the server as part of each subsequent HTTPS request. As desired, either the Web servers , the cookie jar server  or the Dispatch Server , may maintain the \u201ccookie jar\u201d to map these keys to the associated session. A separate cookie jar server , as illustrated in  has been found desirable to minimize the load on the dispatch server . A new cookie will be generated when the response to the HTTPS request is sent to the client. This form of session management also functions as an authentication of each HTTPS request, adding an additional level of security to the overall process.","As illustrated in , after one of the DMZ Web servers  decrypts and verifies the user session, it forwards the message through a firewall over a TCP\/IP connection  to the dispatch server  on a new TCP socket while the original socket  from the browser is blocking, waiting for a response. The dispatch server  will unwrap an outer protocol layer of the message from the DMZ services cluster , and will reencrypt the message with symmetric encryption and forward the message to an appropriate application proxy via a third TCP\/IP socket . While waiting for the proxy response all three of the sockets , ,  will be blocking on a receive. Specifically, once the message is decrypted, the wrappers are examined to reveal the user and the target middle-tier (Intranet application) service for the request. A first-level validation is performed, making sure that the user is entitled to communicate with the desired service. The user's entitlements in this regard are fetched by the dispatch server  from StarOE server  at logon time and cached.","If the requestor is authorized to communicate with the target service, the message is forwarded to the desired service's proxy. Each application proxy is an application specific daemon which resides on a specific Intranet server, show in  as a suite of mid-range servers . Each Intranet application server of suite  is generally responsible for providing a specific back-end service requested by the client, and, is additionally capable of requesting services from other Intranet application servers by communicating to the specific proxy associated with that other application server.","Thus, an application server not only can offer its browser a client to server interface through the proxy, but also may offer all its services from its proxy to other application servers. In effect, the application servers requesting service are acting as clients to the application servers providing the service. Such mechanism increases the security of the overall system as well as reducing the number of interfaces.","The network architecture of  may also include a variety of application specific proxies having associated Intranet application servers including: a StarOE proxy for the StarOE application server  for handling authentication order entry\/billing; an Inbox proxy for the Inbox application server , which functions as a container for completed reports, call detail data and marketing news messages, a Report Manager Proxy capable of communicating with a system-specific Report Manager server  for generating, managing and scheduling the transmission of customized reports including, for example: call usage analysis information provided from the StarODS server ; network traffic analysis\/monitor information provided from the Traffic view server ; virtual data network alarms and performance reports provided by Broadband server ; trouble tickets for switching, transmission and traffic faults provided by Service Inquiry server ; and toll free routing information provided by Toll Free Network Manager server .","As partially shown in , it is understood that each Intranet server of suite  communicates with one or several consolidated network databases which include each customer's network management information and data. In the present invention the Services Inquiry server  includes communication with MCI's Customer Service Management legacy platform (). Such network management and customer network data is additionally accessible by authorized MCI management personnel. As shown in , other legacy platforms (), () and () may also communicate individually with the Intranet servers for servicing specific transactions initiated at the client browser. The illustrated legacy platforms ()-() are illustrative only and it is understood other legacy platforms may be integrated into the network architecture illustrated in  through an intermediate midrange server .","Each of the individual proxies may be maintained on the dispatch server , the related application server, or a separate proxy server situated between the dispatch server  and the midrange server , also referred to an Intranet application server . The relevant proxy waits for requests from an application client running on the customer's workstation  and then services the request, either by handling them internally or forwarding them to its associated Intranet application server . The proxies additionally receive appropriate responses back from an Intranet application server . Any data returned from the Intranet application server  is translated back to client format, and returned over the internet to the client workstation  via the Dispatch Server  and at one of the web servers in the DMZ Services cluster  and a secure sockets connection. When the resultant response header and trailing application specific data are sent back to the client browser from the proxy, the messages will cascade all the way back to the browser  in real time, limited only by the transmission latency speed of the network.","The networkMCI Interact middle tier software includes a communications component offering three (3) types of data transport mechanisms: 1) Synchronous which is used for situations in which data will be returned by the application server  quickly; 2) Asynchronous which is used for situations in which there may be a long delay in application server  response; and 3) Bulk transfer which is used for large data transfers.","The DMZ Web servers  are found in a special secure network area set aside from the Intranet to prevent potentially hostile customer access. All DMZ equipment is physically isolated and firewalled as illustrated at (), () from the company Intranet. Similarly, the DMZ equipment is firewalled and obscured from hostile attacks from the public Internet, except for limited web browser access to the web servers which are located in the DMZ. The customer's web browser connects to a web server in the DMZ which in turn connects to the Dispatcher server  which acts as a proxy to extract select information from the midrange servers . A user may not directly connect to any enterprise server in the enterprise intranet, thus ensuring internal company system security and integrity.","The DMZ also isolates the company Intranet from the public Internet because the web servers  located in the DMZ never store or compute actual customer sensitive data. The web servers only put the data into a form suitable for display by the customer's web browser. Since the DMZ web servers  do not store customer data, there is a much smaller chance of any customer information being jeopardized in case of a security breach.","Client Browser Application","As mentioned, one component of the nMCI Interact system is the client-tier software component which provides the integrated and unified interface to each of the telecommunications network management services available to a user. As shown in , the system of the present invention implements an \u201capplication backplane\u201d , a single object which keeps track of all the client applications, and which has capabilities to start, stop, and provide references to any one of the client applications. The application backplane  is typically implemented as a Java applet and is launched when a Web page is retrieved via URL pointing to the enterprise's Web site. The client applications typically comprise of graphical user interface programs which enable a user to interact with one or more Web enabled remote services.","The backplane  and the client applications use a browser  such as the Microsoft Explorer versions 4.0.1 or higher for an access and distribution mechanism. Although the backplane is initiated with a browser , the client applications are generally isolated from the browser in that they typically present their user interfaces in a separate frame, rather than sitting inside a Web page.","The backplane architecture is implemented with several primary classes. These classes include COBackPlane, COApp, COAppImpl, COParm. and COAppFrame classes. COBackPlane  is an application backplane which launches the applications , , typically implemented as COApp. COBackPlane  is generally implemented as a Java applet and is launched by the Web browser . This backplane applet is responsible for launching and closing the COApps.","When the backplane is implemented as an applet, it overrides standard Applet methods init( ), start( ), stop( ) and run( ). In the init( ) method, the backplane applet obtains a COUser user context object. The COUser object holds information such as user profile, applications and their entitlements. The user's configuration and application entitlements provided in the COUser context are used to construct the application toolbar and Inbox applications. When an application toolbar icon is clicked, a particular COApp is launched by launchApp( ) method. The launched application then may use the backplane for inter-application communications, including retrieving Inbox data.","The COBackPlane  includes methods for providing a reference to a particular COApp, for interoperation. For example, the COBackPlane class provides a getApp( ) method which returns references to application objects by name. Once retrieved in this manner, the application object's public interface may be used directly.","COApp is the base interface for the applications. The applications, e.g., Service Inquiry or Call Manager , generally have their startup code and inter-application interface in a class which implements COApp. Generally, two classes are available for the applications, COAppImpl or COApplet. Alternatively, they may provide their own implementation of the interface. In the preferred embodiment, applications typically extend COAppImpl.","COAppImpl is an \u201capplet-like\u201d class, but it does not derive from java.applet.Applet nor from java.awt.Panel. By not deriving from Applet, the applications may be launched at any time without browser having to be pointed to specific page, and frees the applications from running within the browser frame. Classes derived from COAppImpl are created, launched, stopped, and destroyed by the COBackPlane . This provides a tight and controlled integration by the system of the present invention.","The COApplet class, on the other hand, extends the Applet class and is intended to be launched by the browser from an HTML <Applet> tag. Extension from Applet is provided for applications needing more isolation from the present integrated system, or requiring a separate browser-based display space. The COApplet class implements most of the COApp interface by forwarding it to a contained COAppImpl object.","COAppFrame , is a desktop window created and used by a COApp to contain its user interface. The COAppFrame , is a separate window from the Web browser . Generally, the COAppFrame , has a menu, toolbar, and status bar. The COAppFrame's attachToViewArea( ) method may be used to paste a COView object , , into a COAppFrame , . The COView class is an extension of java.awt.Panel. It provides a general purpose display space and container for an application's visual representation. Application classes typically extend the COView class to implement their presentation logic. COApp may use none, one, or many COAppFrames , ","COParm is a generic data class used to pass parameters between applications. COApp interface provides a public method for passing COParm message objects, for example, public void processMessage (COParm message), which may be used to pass messages between applications. The COParm class contains a set of name-value pairs which are used to present information or requests.","Logon","As illustrated in , a logon process for the nMCI Interact's integrated customer interface of the present invention starts with the browser launch as indicated at step , and the entry of the enterprise URL, such as HTTPS:\/\/www.enterprise.com, as indicated at step . Following a successful connection, an SSL handshake protocol may be initiated at this point as indicated at step . As will be explained in greater detail herein, when a SSL client and server first start communicating, they agree on a protocol version, select cryptographic algorithms, authenticate the server (or optionally authenticate each other) and use public-key encryption techniques to generate shared secrets.","After successful SSL handshake at step , an HTML file invoking and an associated logon applet is downloaded with software tools and common objects in steps , , to present a web page including name and password entry fields for user to enter. The user is then prompted to enter name and password on the Web page. If the nMCI Interact system determines that the software files including classes for initiating a session, have been already downloaded, for example, from a previous session, the steps , ,  are skipped.","The logon applet checks for the name\/password entry and instantiates a session object in step , communicating the name\/password pair. The session object sends a message containing the name\/password to a remote server for user validation in step . When the user is properly authenticated by the server in step , another Web page having backplane object is downloaded in steps , , . This page is referred to as a home page. At the same time, all the application software objects are downloaded in step . If the system of the present invention determines that the backplane and application files have been already downloaded, the steps , ,  are not performed. The backplane object is then instantiated in step .","As will be explained, the backplane communicates with a remote order entry server component (\u201cStarOE\u201d) server  () to retrieve the user's entitlements in step . The entitlements represent specific services the user has subscribed and has privilege to access. It also describes what entitlements the user may have within any single service. For example, from the COUser context, the backplane can obtain the list of applications that the user is entitled to access. In addition, each COApp holds set of entitlements within that application in COAppEntitlements object.","Using the information from the COUser context, the backplane knows which COApps to provide, e.g., which buttons to install in its toolbar. The backplane stores the user specific entitlements in memory for other processes to access. After determining the entitlements, the backplane initiates a new thread and starts an application toolbar in step . The application toolbar includes the remote services to which the user has subscribed and may select to run. From the application toolbar, a user is able to select a service to run. Upon user selection, the selection is communicated from the application toolbar to the backplane in steps , , which then launches the graphical user interface program associated with the selected service. The application toolbar remains on the user display, even after a particular service has been initiated. This is useful when a user desires to start up another remote service directly from having run a previous service because the user then need not retrieve the home page again.","If it is determined that the user entered password is not valid in step  or step , an attempted logon count is incremented in step . If the user's attempted logon count is greater than a predefined allowed number of tries as indicated in step , a message is conveyed to the user in step  and the user must restart the browser. If the user's attempted logon count is not greater than the predefined allowed number of tries, a \u201cfailed login\u201d message is conveyed to the user in step , and the user is prompted to reenter name\/password in step . If it is determined that the user password has expired, the user is prompted to change the password in step . For example, the user may be required to change the password every 30 days for security reasons. Whenever the user changes the password, the new password is transmitted in real time to a server responsible for updating and keeping the password entry for the user. The user than enters the new password in step  and continues with the processing described above in step .","An illustrative example of the nMCI Interact logon Web page may be found in commonly owned U.S. Pat. No. 6,115,401 which typically includes a name field and a password field for the user to enter. After the user is properly authenticated via the logon page, the nMCI Interact home page is retrieved.",{"@attributes":{"id":"p-0164","num":"0163"},"figref":"FIGS. 5(","i":["a","b","a","a"],"b":["5","12","79","95","85","87","89","91","83","81","71","95","79","96"]},"Backplane Logic",{"@attributes":{"id":"p-0165","num":"0164"},"figref":"FIG. 6","b":["110","12","12","116"]},"If the desired application is derived from java.applet.Applet, a new browser window is created, and directed to the HTML page from which the applet is to be loaded. This will cause the browser to load the applet, and call its init ( ) and start ( ) method. In its init ( ) method, the applet obtains a reference to the backplane by calling the static method of the CoBackPlane class getBackPlane( ). Also in its init ( ) method, the applet notifies the backplane that it has been launched by calling the backplane's registerApp( ) method. Alternatively, if the desired application is an application requiring a direct URL launch from the home page, for example RTM as shown at step , the desired application is invoked by retrieving a Web page having the application's URL as shown at step .","Each application gets a session identifier in step  upon its startup. Should the applications desire to perform some further authentication, they are free to retrieve the COUser object, and perform whatever special authentication they need, without troubling the user to re-enter his\/her username and password. During the processing of functions specific to each application, the applications are able to communicate with one another as well as with the backplane by getting a reference to the applications or the backplane and invoking the public interfaces or methods with the reference.","After a user is finished with interacting with COApp, the user requests the selected COApp to exit via a menu selection, clicking on a close box button on a window frame, or a keyboard command, for example. The COApp then requests exit from the COBackPlane. If the selected application is derived from COAppImpl, the COBackPlane creates a COAppStopThread to manage the exit of the COApp. As with startup, each COApp is stopped in its own thread. COAppStopThread calls COApp's stop( ) method. Typically a COApp would not override this method. It is called for consistency with the applet interface of the COApp class. An applet's stop( ) method is called by the Web browser when the Web browser leaves the page from which the applet was loaded, in order to allow the applet to, for instance, stop an animation. For consistency with this model, COApps may use this method to stop long-running threads. COAppStartThread calls COApp's destroy( ) method. Here the COApp typically performs resource cleanup routines, including stopping any threads, and calling the dispose( ) method for any COAppFrame objects.","If the selected application is derived from java.applet.Applet, the Web browser window containing the page from which the applet was launched is closed. This will cause the applet's stop( ) method to be called by Web browser. In its stop( ) method, the applet notifies the backplane that it has been stopped by calling the backplane's deregisterApp( ) method.","Then a user typically requests logoff via menu, close box, etc. When such a request is received the backplane sends Logoff transaction to the Web Server. The backplane closes toolbar and directs the Web browser to logon URL. Then the backplane exits.","As further shown in , the homepage provides links to other Web pages. For example, if help hypertext is selected in step  from the application toolbar, a help URL is launched in a new browser window in step . Similarly, if customer support hypertext is selected in step , a customer support URL is launched in a new browser window in step . If a user selects a marketing promotion hypertext in step , URL for new product information will be launched in a new browser window in step . If a product overview hypertext is selected in step , a URL pertaining to the product's features will be launched in a new browser window in step . If a user selects home in step , the home page will be redisplayed in step .","User","The present invention also includes a user unit for representing a user of a current session. The user unit is generally implemented as a COUser class extending java.lang.Object. The COUser class object holds information including a user profile, applications and their entitlements. In order to minimize network traffic, the amount of data carried by the COUser is minimal initially, and get populated as requests are processed. The requests are generally processed by retrieving information from the Order Entry service. The profile information is then stored and populated in the COUser object should such information be requested again.","A COUser object is created when the user logs in, and holds the username and password of the user as an object in the COClientSession object. The session object is contained within the backplane, which manages the session throughout its lifetime. The code below illustrates how this occurs:","\/\/ Within the backplane","COClientSession session=new","COClientSession( );","try {\n\n","\/\/ Should the User object be required COUser user=session.getUser( );","The logon method of the COClientSession object communicates with the StarOE (Order Entry) server (), a back-end authentication mechanism, for authenticating the user.","The COUser that may be obtained from the COClientSession immediately after the login process is very sparse. It includes a limited set of information such as username, a list of applications that user is entitled to, for example. The details of each entitlement information are retrieved at the time of actual processing with those information.","StarOE","As briefly mentioned, the StarOE server  of the networkMCI Interact system () is used to order, fulfill, and bill for, as well as administer, the suite of network applications, providing a horizontal service for use by all applications. The applications communicate to StarOE for all authentication, entitlement and system administration as well as order entry services. StarOE centrally processes these service requests for the individual applications by providing all order entry and security information for the \u201cnetworkMCI Interact\u201d suite of applications.","The security information which the StarOE maintains and provides describes identification, authentication and access control used in the suite of applications. All access to the \u201cnetworkMCI Interact\u201d is controlled by userids and passwords, as explained herein. In addition, individual users are specifically granted access to only the necessary system objects, i.e., file, programs, menus, reports, etc. Access to these individual objects are based upon the customer privilege models, i.e., entitlements, stored in a StarOE database. Thus, all information regarding customers and their access levels for each product in the suite of network applications to which the customers have subscribed are stored in a customer security profile database local to the StarOE. Accordingly, StarOE provides the ability to prevent unauthorized, non-customer access to \u201cnetworkMCI Interact\u201d data and applications; the ability to allow customers to access multiple enterprises with one userid; the ability to restrict authorized users to specific Intranet applications and databases based on applications ordered by the customer; and the ability for users to restrict view and\/or update capabilities within an application or data set, i.e., customers may provide or restrict views of their \u201centerprise\u201d data to subgroups within their organization.","By utilizing the system of the present invention, customers no longer have to place manual calls to order entry hubs when requesting order transactions. For example, users may be added to the system without an enterprise's support team intervention. In sum, customers may manage their communications services in a secure environment and also, for example, monitor their network traffic via the Internet, as well as have a capability to add products and services to their account, in an automated fashion and all in one session without having to enter and exit the individual application services separately, and without having to contact a customer support representative.",{"@attributes":{"id":"p-0183","num":"0183"},"figref":"FIG. 7","b":["39","154","39","30","39","39"]},"The StarOE Client Application","The StarOE client application  is one of the client browser applications running in the Web browser , and provides a Web-based GUI interface implemented accordingly and conforming to the networkMCI Interact GUI interface standard for the integrated suite of customer network management and report applications, as described herein. As described, the StarOE client application  is launched at the client initiation by the backplane object and generally includes Java applications and applets for providing a common Web-based GUI for interacting with customers at the front-end side.","When a customer launches the StarOE application from the home page, the main window as illustrated in , is presented. From this main-window , a customer may select to order and fulfill application, services, request user id's, and create user security profiles for the \u201cnetworkMCI Interact\u201d suite of applications. The main window  includes a menu bar  with options to perform various StarOE tasks. The main window also includes a toolbar , common to all networkMCI Interact applications. The toolbar  has buttons that also perform the various StarOE functions. Typically, the user list is presented, i.e., displayed as a tree , within the main window .","The menu options  include: file menu options which includes a select enterprise option for allowing administrators to open a user list for a different enterprise, or add a new enterprise to their enterprise list, print option, and exit option which shuts down the StarOE application; edit menu option which includes add new application, modify, and delete options; options menu which enables a global security setup for the toll free manager application; view menu which includes options to refresh the screen by retrieving the latest user list for the opened enterprise from the StarOE server and displaying the list on the screen, to expand all nodes in the user list, and to collapse all nodes in the user list; and help menu option which launches the help engine with StarOE help text. The toolbar  also includes the options for a select enterprise, refresh, expand all, collapse all, print and help options.","A typical process flow logic for StarOE client application starts with the home page launching the StarOE client and passing a reference to a common user information object. This object includes the user id, and the default enterprise for that user. The main window  having the menu options  and the toolbar  is then presented. The StarOE client application then sends a transaction message \u201cget StarOE security\u201d including the user id, enterprise id, and the StarOE application code in the message. The StarOE server  returns racf id, an access level representing whether the user is an external admin, a member of an account team, an internal admin, or a customer support admin, for example. If the user that launches the StarOE application is an external admin, the user list is displayed immediately since external administrators may view only one enterprise. For external administrators, an enterprise name is retrieved from the StarOE server  by sending and receiving a \u201cget user enterprise list\u201d transaction request and response.","If the user is not an external administrator, then a dialog is presented for the user to select which enterprise to view. When user selects an enterprise to view, a \u201cget user list\u201d transaction message having enterprise id is sent to the StarOE server  to retrieve a list of user ids, a list of applications for each user, an access type for each application, and reporting types for StarWRS (e.g., Toll Free, Vnet, Vision, CVNS). The client application also sends a \u201cget application list\u201d transaction message to retrieve from the StarOE server  a list of application codes, description, and an application array position. The user list is then displayed within the main window as shown at .","Every user list has a New User node as the first node under an enterprise . This node may be selected to order a new user. An existing user node may be selected to edit and add new applications for that user. When an existing user node is selected, the edit\/add new application options on the menu  is enabled and disabled according to what applications the user already has. An existing user application node may be selected to edit\/modify\/delete options within the application.","With regard to user selection of the select enterprise menu option or toolbar button in , the browser displays the web page having a dialog box as shown in commonly owned U.S. Pat. No. 6,587,836 entitled AUTHENTICATION AND ENTITLEMENTS FOR USERS OF WEB BASED DATA MANAGEMENT PROGRAMS, the contents and disclosure of which are incorporated by reference as if fully set forth herein, which enables an administrator to work with a different enterprise, as well as add an enterprise to their enterprise list and additionally includes the ability to set up new users or modify various options available to existing users.","During the StarOE add or modify procedure described above, security information regarding customer entitlements for application services may also be initialized as described in commonly owned U.S. Pat. No. 6,587,836. For example, a screen may be presented for setting up Toll Free Network Manager (\u201cTFNM\u201d) security information and is displayed when TFNM is ordered or modified. Preferably, a user's TFNM security profile includes at least one corp id, with each corp id having an associated racf id. Preferably, a setup security object handles the process of setting up security for each application. A constructor for this object initializes the user Id and a modify flag as passed in from the StarOE client application . The object retrieves the toll free hierarchy from the StarOE server  using the \u201cget hierarchy\u201d message. The client application  sends the enterprise Id, and toll-free flag in the request, and the StarOE server  returns the list of toll-free carp ids for the enterprise. If the modify flag is set, a \u201cget security\u201d message is sent to the server  to retrieve the user's TFNM security profile. As a displayed tree structure is loaded with each toll free carp id, racf id is entered by a user. When the submit button is pressed, the setup security object calls its send security method which causes the formatting and sending of \u201csetTFNM security\u201d message to the StarOE server . When the StarOE server  receives the message, it sets the security accordingly for the TFNM application.","The StarOE administration component is also utilized to order, for example, to add or modify, various reporting options used during web based report generation by the nMCI Interact StarWRS system as will be described.  is a sample StarOE screen  for adding and modifying reporting options which are used by the StarWRS. The StarOE displays the toll free hierarchy for security setup when toll free reporting is ordered or modified. The hierarchy includes a list of corp ids for a given enterprise, with each corp id  having a list of toll free numbers  under it. The list may be displayed in a tree format. The reporting options at the toll free number level include unpriced reports (UR), unpriced call detail (UCD), and real time monitor reports.","Typically, a user's toll free reporting security profile includes at least one toll free number with at least one reporting option associated. The client application  generally invokes an object to handle the reporting option changes and passes in the user id and a modify flag. This object then retrieves the toll free hierarchy from the StarOE server  using the \u201cget hierarchy\u201d message. The client application  sends the enterprise id, and toll free flag in the request, whereby, the server  returns the list of toll free corp ids for the enterprise. If a modify flag is set, a \u201cget toll-free security\u201d message is sent to the server to retrieve the user's toll free security profile.","As each corp id is expanded, a \u201cget toll-free numbers\u201d message is sent to the server  asking for all the numbers for the corp id selected. As each toll free number is added, a search in the user's profile for that number is conducted. If the number is found, the report options are added next to number text as shown at . Furthermore, if the number has been deactivated, a text \u201c<inactive>\u201d, for example, is added to the display as shown at . The inactive numbers are not modifiable. When the unpriced reports or unpriced call detail check boxes  are changed, the text next to the toll free numbers selected reflects the state of the check box. The check boxes depict report options to which a user has access for toll free numbers. When more than one toll free number is selected, the check boxes are marked unchecked. When a submit button is pressed, the object calls its send security class method which causes the formatting and sending of a \u201cset user toll-free security\u201d message to the StarOE server .","It should be understood that besides performing various order entry and administrative functions for the TFNM application, other application services, including reporting for VNET, Vision, Broadband, Call Manager, and invoice reporting may be ordered and the security information pertaining to each application may be modified in a similar manner.","StarOE client application  particularly provides screen displays by invoking associated class objects launched by the backplane unit as described above. The StarOE client application  employs a Java application program and is implemented by extending the COApp class, one of common objects provided and utilized in the present invention. Because the client program  is not implemented as an applet, and also because the client program  employs the container Frame for customer display windowing purposes, the client program  runs, to a degree, independent of the browser within which the backplane is deployed.","Referring back to , the StarOE client application interacts with the StarOE server in providing various order entry functions for all applications as described above and, as described herein with reference to the back-end functionality of the nMCI Interact system. Communications between the StarOE client  and the server  typically use TCP\/IP, running a UNIX process listening in on a known TCP port.","In the preferred embodiment, as shown in , the StarOE server  provides a number of processes for performing a number of specific functions. For example, a fulfillment process monitors new customers being added to the system and notifies a fulfillment house  accordingly (). The fulfillment house then may send appropriate subscription packages according to the information received from the fulfillment process to the new customer. Another process, a reconciliation process, may handle synchronization of data with a mainframe system database and also with databases associated with the individual fulfilling systems. Yet another process, a billing process, may handle directing billing information to different billing streams  ().","The StarOE server  further maintains a database  for storing all the \u201cnetworkMCI Interact\u201d users and their security information such as passwords and application entitlements and hierarchies describing the user's access privileges to specific application services\/sub-services which may be requested by other application servers and clients in the network. Generally, the hierarchies are customer-defined during the order entry process, and describe the subdivision of calls into nodes arranged in a n-way tree. The \u201cnetworkMCI Interact\u201d back-end servers apply the hierarchy definitions to their data at report time when generating reports, typically as queries on a node-by-node basis to the result data set which was extracted using any other criteria supplied. The trees of the hierarchies have essentially arbitrary complexity, i.e., the number of nodes is unlimited. Each node is assigned calls according to a template of conditions. Conditions may be defined as a combination of one or more ANIs, corp IDs, ID codes, Card numbers, account codes, location\/node ids, etc. These filters can be applied at any node in the tree. The hierarchies may be applied as both selection criteria (e.g., \u201creport on all calls at these nodes or their descendants\u201d, in combination with other criteria) and roll-up targets (e.g., group the results in this report at this level in the tree). These entitlement and hierarchies may be modified via the StarOE client application  executed at the customer workstation .","Referring to , a process running in a StarOE client application process  sends transaction request messages via the nMCI Interact infrastructure, comprising, e.g., the web server cluster  and a dispatcher server  (), to the OE server . The StarOE server  responds to requests by searching the security profile for the information requested, formulating appropriate transaction response messages and transmitting them back to the requesting process. As an example, other during the login procedure, the client login process formulates a transaction message including a user name\/password and a validation request for a given customer. The StarOE server  looks for the matching name\/password pair in the security profile for the customer, and if the name\/password pair is found, the server  formulates a valid user message response for the login process running in the client platform, including in the message the enterprise id, time zone, user id and password information and transmits the response via TCP\/IP back to the login process. When the StarOE server  detects that the password has expired, the server  notifies the customer, via the client application  to change the password. The changed password is sent to the StarOE server  formatted in a message interface, \u201cchange password request,\u201d for example. The server  upon receiving the message updates the password for the given user in its user profile stored in StarOE database , and responds with appropriate return codes to the StarOE client . The login process, upon receiving the response may then continue with its normal course of processing.","Another example of a service provided by the StarOE is retrieving an application entitlement list for a given customer. As described briefly above, an entitlement describes a privilege or authorization that a customer has. It describes what applications a customer may access and also describes what the customer can do within that application. In addition, it describes what back-end services that application and customer combination may access. For example, a customer may be entitled to use or access many applications and for each application, the customer can have a different set of entitlements. Thus, entitlements may come in two different sets: a first set specifying what the customer may do within the application, e.g., allow the customer to have update access to a particular view and only read-only access in a different view; and, a second set specifying what back-end services this particular application and customer may access.","As described previously, all the information relating to entitlements for a given customer is stored in customer profile database  located with the StarOE server. When the backplane requests via TCP\/IP the entitlement transaction, for example, in a \u201cget application list\u201d request message, the security module retrieves and transmits back via TCP\/IP to the backplane the list of authorized applications accessible by a given customer in a transaction response. The backplane uses the list to determine which buttons on the \u201cnetworkMCI Interact\u201d home page should be activated, thus controlling access to products. Similarly, individual back-end application servers  may make a request for entitlements within that application for a given customer. For example, the reporting component of the \u201cnetworkMCI Interact\u201d system, herein referred to as \u201cStarWRS\u201d web-based reporting system which provides a customer with their network priced and un-priced call detail data, generates a request for hierarchy data for Vnet, VISION, CVNS and Toll-free customers whenever reports need be generated. In response, the StarOE retrieves the corresponding hierarchy data and transmits them in real time to the StarWRS system as will be described.","In providing the authentication, entitlement, and hierarchy information, including those described above, the StarOE server database  stores user profiles locally. Additional data needed are typically accessed from the enterprise host systems . The StarOE server  may be implemented as a concurrent server allowing simultaneous multiple client connections. The server  listens on a known port, and when a client connects, the server  forks a new process to handle the client connection. The server  may also implement a thread to handle each client connection.","As further described in the herein incorporated U.S. Pat. No. 6,587,836. the StarOE server  is preferably implemented utilizing object oriented programming (OOP). As an example, when a \u201cget hierarchy list\u201d message is initiated at the client application to invoke retrieval of a toll free corp Id list from the server , a \u201cHierarchy\u201d class may be instantiated which includes a Get( ) method to determine which Hierarchy product is to be retrieved (eg, Toll free, Vnet\/CVNS, or Vision) and to return the appropriate information. Another object may be invoked to format the data into a response message and return the message back to the client. As another example, when a \u201cget application list\u201d request message is initiated at the client application, an \u201cApplication\u201d class may be instantiated which encapsulates the interface into a database table (not shown) having applications information. Particularly, the Get( ) method in this class accesses the Applications table in the database and return the list of application codes and their descriptions. The details of the message format, including request and response messages, are described in commonly owned U.S. Pat. No. 6,587,836.",{"@attributes":{"id":"p-0205","num":"0205"},"figref":["FIG. 8","FIG. 4"],"b":["39","282","284"],"i":["a","d "]},"In addition, as mentioned, when a customer first logs on, the customer is presented with a dialog box prompting for user ID and password. When the customer clicks a submit button, for example, the backplane (or platform) verifies the customer is valid by inquiring with the StarOE system as shown in . The return response is either \u201cinvalid user\/password\u201d or \u201cvalid user\u201d. When the customer has been authenticated, the customer is then presented with a list of authorized applications. This list determines which buttons, for example, representing each application are active, thus controlling customer access to products and services.","In addition, also shown in , the customer may be issued a temporary password with the customer's fulfillment package, which enables a user to log into the system the first time.","Information may also be entered and requested by a number of sites other than a user platform. For example, order entry \u201cOE\u201d Hubs  may enter information directly into the StarOE database  to register new customers to the integrated suite of network applications. They may also access the data in StarOE directly to modify customer information, and to add or remove subscribed services.","Other inputs to the StarOE server may include entitlement data from a legacy order entry system referred to as Network Capabilities System (\u201cNetCap\u201d)  and from a circuit order management system (\u201cCOMS\u201d) . For example, the NetCap mainframe  may send the appropriate hierarchy of toll-free numbers for a specific customer in response to registry message registering the new customer to the mainframe . The hierarchy of toll-free numbers describes the new customer's entitlements to the TFNM services. This hierarchy may be used by other services in the integrated suite of network applications, for example, the StarWRS reporting application.","Additional authentication and entitlement data may be transmitted from a corporate order entry system (\u201cCORE\u201d)  which generates two sets of hierarchy files on a daily basis. One set comprises deltas only, the other comprises a full hierarchy. Notification is made to the StarOE when these are available. As described in co-pending U.S. Pat. No. 6,587,836, StarOE performs a reconciliation process to update the hierarchy files.",{"@attributes":{"id":"p-0211","num":"0211"},"figref":"FIG. 9","b":["39","1100","400","24","400","500"]},"StarWRS","As mentioned herein, and in greater detail in commonly owned, co-pending U.S. Pat. No. 6,631,402 entitled INTEGRATED PROXY INTERFACE FOR WEB BASED REPORT REQUESTOR TOOL SET, the contents and disclosure of which is incorporated by reference as if fully set forth herein, the data architecture component of the networkMCI Interact system focuses on the presentation of real time (Un-priced) call detail data and reports, such as presently provided by MCI's TrafficView (\u201cTVS\u201d). Server, and priced call detail data and reports, such as presently provided by MCI's operational data store \u201cStarODS\u201d Server.","Referred to as \u201cStarWRS\u201d, the WWW\/Internet Reporting System , as shown in , provides a client, middle-tier service and application proxy components enabling customers to request, specify, customize, schedule and receive their data and account information in the form of reports that are generated by the various back-end application servers. As will now be described in detail, the StarWRS reporting system  comprises the following components and messaging interfaces:","1) those components associated with the Client GUI application front end including a report requestor client application , a report viewer client application  and, an Inbox client application  which implement the logical processes associated with a \u201cJava Client\u201d, i.e., employs Java applets launched from the backplane () that enable the display and creation of reports and graphs based on the fields of the displayed reports, and, allows selection of different reporting criteria and options for a given report; and,","2) those middle-tier server components enabling the above-mentioned reporting functionality including: a Report Manager server , a Report scheduler server , and an Inbox Server . Supporting the StarWRS reporting functionality as will be described are the StarOE client and corresponding StarOE server  applications.","The Report Manager (*RM*) server  is an application responsible for the synchronization of report inventory with the back-end \u201cFulfilling\u201d StarODS server  and Traffic View server ; retrieval of entitlements, i.e., a user's security profiles, and report pick list information, i.e., data for user report customization options, from the StarOE server ; the transmission o report responses or messages to the Dispatcher server ; the maintenance of the reporting databases; and, the management of metadata used for displaying reports. In the preferred embodiment, the RN server  employs a Unix daemon that passively listens for connect requests from the GUI client applications and other back-end servers and deploys the TCP\/IP protocol to receive and route requests and their responses. Particularly, Unix stream sockets using the TCP\/IP protocol suite are deployed to listen for client connections on a well-known port number on the designated host machine. Client application processes, e.g., report requestor , desiring to submit report requests connect to RN  via the dispatcher  by providing the port number and host name associated with RN  in a request message. Request messages received by the RN server are translated into a \u201cmetadata\u201d format and validated by a parser object built into a report manager proxy  that services requests that arrive from the GUI front-end. If the errors are found in the metadata input, the RN  will return an error message to the requesting client. If the metadata passes the validation tests, the request type will be determined and data will be retrieved by the fulfilling server in accordance with the meta data request after which a standard response is sent back to the requesting client. As shown in , interface sockets  are shown connecting the Dispatcher server  and the RN server  and, other socket connections ,  are shown interfacing with respective back end servers  and . In one embodiment, as described in commonly owned, co-pending U.S. patent application Ser. No. 09\/159,404 entitled INTEGRATED PROXY INTERFACE FOR WEB BASED DATA MANAGEMENT REPORTS, the contents and disclosure of which is incorporated by reference as if fully set forth herein, a back-end midrange application known as the TrafficView System receives the metadata requests to provide unpriced traffic call detail and reporting data through messaging interface  to the Report Manager. Additionally, as described in commonly owned, co-pending U.S. Pat. No. 6,377,993 entitled INTEGRATED PROXY INTERFACE FOR WEB BASED DATA MANAGEMENT REPORTS, the contents and disclosure of which is incorporated by reference as if fully set forth herein, a back-end midrange application known as the StarODS server receives report requests for priced call detail data through a Talarian smart socket messaging interface  to the Report Manager. Additionally, as shown in , the priced and unpriced data is FTP'd directly to the Inbox Server and a notification message is sent to the report manager server  from the Traffic View server . Although not shown in , it should be understood that the RM  server can manage reporting data for customer presentation from other back-end and legacy servers including, e.g., Event Monitor and Service Inquiry servers, etc., in order to present to a customer these types of network management and reporting data.","The report manager server additionally utilizes a database , such as provided by Informix, to provide accounting of metadata and user report inventory. Preferably, an SQL interface is utilized to access stored procedures used in processing requests and tracking customer reports. A variety of C++ tools and other tools such as Rogue Wave's tools.h++ are additionally implemented to perform metadata message parsing validation and translation functions.","The Report Manager server  additionally includes the scheduling information, however, a report scheduler server component passes the report request to the back-end fulfilling servers ,  at the scheduled times.","As shown in , the Report Scheduler (\u201cRS\u201d) server component  interfaces directly with the Report Manager server  to coordinate report request scheduling and processing. It should be understood that the respective report management and scheduling functions could be performed in a single server. Particularly, the RS  is a Unix program deploying Unix stream sockets using the TCP\/IP protocol suite to send requests to the back-end fulfilling servers such as the StarODS server , TVS server , at pre-specified times, and receives their responses. As shown in , RS interface socket connections ,  are shown interfacing with respective back end servers  and . In the case of priced billing data from StarODS , report requests are published by the RS server  to a pre-defined subject on the Talarian Server. When handling other incoming messages published by back end servers using Talarian SmartSockets 4.0, another daemon process is necessary that uses Talarian C++ objects to connect their message queue and extract all messages for a given subject for storage in a database table contained in database . Each message includes the track number of the report that was requested from the fulfilling server.","From the report requestor interface, the user may specify the type of reporting, including an indication of the scheduling for the report, e.g., hourly, daily, weekly or monthly. For priced data the user has the option of daily, weekly, or monthly. For real-time, or unpriced data, the user has the option of hourly, daily, weekly or monthly. The report scheduler interface additionally enables a user to specify a pager or E-mail account so that an e-mail or pager message may be sent to indicate when a requested report is in the Inbox server .","The Inbox Server component  serves as the repository where completed report data and event notification data are stored, maintained, and eventually deleted and is the source of data that is downloaded to the client user via the dispatcher () over a secure socket connection . It is also a Unix program that is designed to handle and process user requests submitted in metadata format using an Informix database. Once report results are received from the StarODS  and TVS  and any other back-end or fulfilling servers (not shown), the Report Manager server  communicates the corresponding report metadata to the Inbox server  over socket connection  as shown in . The metadata will be stored in the Inbox server database  along with the report results. Thus, if the metadata is required to be changed, it will not interfere with the information needed to display the reports contained in the Inbox. Additionally, as shown in , the Inbox server interfaces with the report scheduler to coordinate execution and presentation of reports.","As described above, the StarOE server  and database  is the repository of user pick lists and user reporting entitlements. Particularly, it is shown interfacing with the Inbox server  and report scheduler servers . The Report Manager server does include information in the report metadata that will tell the Report Requestor client application it needs to get information (e.g., Pick Lists) from the StarOE server .","With regard to the front-end client GUI components, the above-mentioned Inbox client application  functions as an interface between the client software and the Inbox server  for presenting to the customer the various type of reports and messages received at the Inbox including all completed reports, call detail, and news. Preferably, the messages for the user in the inbox are sorted by type (report, call detail) and then by report type, report name, date, and time.","Particularly, the Inbox client application uses the services of the backplane () to launch other applications as needed to process report messages. The inbox will also use the services of the data export objects to provide a save\/load feature for inbox messages, and, is used to provide a user-interface for software upgrade\/download control. Inbox messages are generated by the versioning services of the backplane; actual downloads will be accomplished by a request through the inbox.","In the preferred embodiment, the inbox client is able to receive information on multiple threads to allow a high priority message to get through even if a large download is in progress. Typically, the browser is configured to allow more than one network connection simultaneously, i.e., the polling thread on the client uses a separate connection to check for new messages, and starts a new thread on a new connection when a new message is detected. In this way, multiple messages may be downloaded simultaneously.","The Report Requestor application  is a client application enabling user interaction for managing reports and particularly includes processes supporting: the creation, deletion, and editing of the user's reports; the retrieval and display of reports based on selected criteria; the display of selected option data; and the determination of entitlements which is the logical process defining what functionality a user can perform within the StarWRS application. In the preferred embodiment, a Report request may be executed immediately, periodically, or as \u201cone-shots\u201d to be performed at a later time. As described herein, the report scheduler service maintains a list of requested reports for a given user, and forwards actual report requests to the appropriate middle-tier servers at the appropriate time. Additional functionality is provided to enable customers to manage their inventory, e.g., reschedule, change, or cancel (delete) report requests.","The Report Viewer application  is a GUI Applet enabling a user to analyze and display the data and reports supplied from the fulfilling servers such as ODS , Traffic View (TVS) , and other systems such as Broadband and toll free network manager. Particularly, all reporting is provided through the Report Viewer client application  which supports text displays, a spreadsheet, a variety of graphic and chart types, or both spreadsheet\/graph simultaneously, and, is launched from the inbox client  when a report is selected. The Report Manager  includes and provides access to the metadata which is used to tell the Report Requestor what a standard report should look like and the \u201cpick-list\u201d options the user has in order for them to customize the standard report. It is used to tell the Report Viewer client how to display the report, what calculations or translations need to be performed at the time of display, and what further customization options the user has while viewing the report. It additionally includes a common report view by executing a GUI applet that is used for the display and graphing of report data and particularly, is provided with spreadsheet management functionality that defines what operations can be performed on the spreadsheet including the moving of columns, column suppression, column and row single and multiple selection, import and export of spreadsheet data, printing of spreadsheet, etc. It is also provided with report data management functionality by defining what operations can be performed on the data displayed in a spreadsheet including such dynamic operations as sorting of report data, sub-totaling of report data, etc. Furthermore, the report viewer  is provided with functionality enabling the interpretation of Meta Data; and, functionality enabling communication with the Backplane (). The report viewer application  will also be able to accept messages telling it to display an image or text that may be passed by one of the applications in lieu of report data (e.g., Invoice, Broadband report, etc.)","By associating each set of report data which is downloaded via the Inbox server  with a \u201cmetadata\u201d report description object, reports can be presented without report-specific presentation code. At one level, these metadata descriptions function like the catalog in a relational database, describing each row of a result set returned from the middle tier as an ordered collection of columns. Each column has a data type, a name, and a desired display format, etc. Column descriptive information will be stored in an object, and the entire result set will be described by a list of these objects, one for each column, to allow for a standard viewer to present the result set, with labeled columns. Nesting these descriptions within one another allows for breaks and subtotaling at an arbitrary number of levels.","The same metadata descriptions may be used to provide common data export and report printing services. When extended to describe aggregation levels of data within reporting dimensions, it can even be used for generic rollup\/drilldown spreadsheets with \u201cjust-in-time\u201d data access.","The metadata data type may include geographic or telecommunications-specific information, e.g., states or NPAs. The report viewer may detect these data types and provide a geographic view as one of the graph\/chart types.","An overview of the report request\/scheduling process  implemented by StarWRS Report Manager and Report Requestor tools will now be described.","After preliminary logon, authentication and verification of StarWRS web based reporting entitlements, as described above with respect to , the user may select the Report Requestor from the home page screen display () of ), which initiates display of a StarWRS report requestor web page.",{"@attributes":{"id":"p-0233","num":"0233"},"figref":"FIG. 12(","i":"a","b":["1550","1551","1553","1554","1555","1558","1559","1560","1563"]},"Referring to the flow chart of ) depicting the StarWRS reporting options, user selection of the report product, report category, report type, and report direction, is indicated at step . Additionally, at step , the user may select the report format associated with a reporting category. For example, in the screen display of ), associated with the analyze traffic report category, the report format options indicated in selection field  include the following: area code summary, country code summary, state summary, frequent numbers, payphone report and review calls options. For the financial report category, report formats include: longest calls, most expensive calls, payphone report, and area code summary; for marketing report category, report formats include: country code summary, state summary, frequent numbers, frequent area code summary, frequent state, and frequent cities. For the telecommunications report category, report formats include: call duration summary; for the call center report category, report formats include: most active toll free numbers, state summary, and country code summary. For the monitor usage report category, report formats include: longest calls, most expensive calls, most active calling card and most active toll free numbers. For the check calling frequencies report category, report formats include: frequent numbers, frequent area code, frequent state and frequent cities. It should be understood that enablement of any of these reporting options is based according to predefined user entitlements. That is, as described above, a \u201cGet User Security\u201d message with a reporting application set, and a \u201cGet User Report Security\u201d message are sent to the StarOE server  via the Dispatcher server  to retrieve that user's detailed security profile (entitlements) for a user that has the reporting application option. These entitlements include a list of all the report products, i.e., Vnet, Vision, Toll free, report types (priced or unpriced) and the report categories that are available for that user.","In accordance with the user report selections, if a report had already been created and maintained in the report manager database, it will be displayed in the report inventory field  of ). Referring back to ), at step , a determination is made as to whether an existing report from inventory is selected. If an existing report is not selected then the user is prompted to generate a new report according to customization options that the user is entitled for the selected report product, category, type, etc., as indicated at step . If an existing report is selected at step  based on the report product, category, type, etc., then the user is prompted at step  to select from among the following options: a report edit option, as shown at step ; a report delete option, in which case the selected report will be deleted at steps  and ; and, a report copy option, in which case an existing report will be copied, e.g., for subsequent editing, as shown at steps  and .","Whether creating a new report or editing an existing report, the user is enabled to select customization options as indicated at step , ). ) illustrates the dialog screen  presented to the user showing all the report customization categories for building a new report and editing an existing report. From this screen and related report building dialog boxes, all of the initial values for retrieving the MetaData, customization options and GUI builder options from the report manager server  necessary to build (edit) a report are provided in accordance with the user's entitlements. Thus, in view of the exemplar web page shown in ), a user may provide the following customization and report builder options as indicated in the field ; general customization options, by selecting field ; layout customization options, by selecting field ; access customization options, by selecting field ; hierarchy customization options, by selecting field ; geographic customization options, by selecting field ; and, notification customization options, by selecting field . For the following description regarding ) it is assumed that the area code summary format had been selected, however, it should be understood that the same principles apply to any selected format.","With regard to the \u201cgeneral\u201d customization options, the user is enabled to specify or change the report title, by selecting field , report description, by selecting field , and the report schedule, by selecting field . For the example selection of report title customization shown in ), the right hand field  will present the user with a field  for entering the title of the report. If an existing inventory report had been selected, then the field  will be display the existing title. Generally, for each of the customization screens displayed for existing reports, Report Manager will autopopulate the right hand field  with the existing report values.","When selecting the report schedule , the user is presented with a screen , as shown in ). The entry options for selection in the right hand field  includes: selection of time zone, by menu choice ; selection of the report schedule radio buttons  to specify the report as recurring, daily, weekly, monthly, or hourly entry field the nature of screen; a time range for the report as specified by entry fields ; and, a date range for the report as specified by entry fields . The user may also specify the report as a \u201cone-shot\u201d by selecting radio button .","Referring back to exemplar screen shown in ), with regard to the layout customization options, the user is enabled to specify or change the number of report rows, by selecting field , and specify or change the report columns, by selecting field . For example, selection of report columns customization will present the user with a columns customization screen such as example screen display  presented as shown in ). In ), the right hand field  indicates a column tab , and a sorts tab, . The column tab enables the user to specify add or remove columns, with the selection of individual columns names provided in field . An example description of the column headers for an example selection of columns is shown in field .","Referring back to ), selection of report sorts customization tab  will present the user with a sorts customization screen such as example screen display  presented as shown in ). The sorts tab enables the user to specify columns to be sorted in an available sorts selection field , whether totals are to be made, whether the column data to be provided is in ascending or descending order, for example, as provided by selection of buttons , shown in ). In the preferred embodiment, the Report Manager provides the customer with the ability to specify select columns as primary and secondary sorts. The user may specify additional secondary sorts in addition to the default sorts. For example, the user may provide the following sorts: for a Longest Call Report, a primary sort is Number of Minutes in descending order. For a Most Expensive Call Report, the primary sort is dollars in descending order.","Referring back to exemplar screen shown in ), with regard to the access customization options, the user is enabled to specify or change an accounting \u201cIDACC\u201d code or supplemental code, by selecting field , and specify or change the inbound access type, by selecting field . For example, selection of inbound access customization presents the user with a web page having an inbound access customization screen such as example screen display  presented as shown in ). In ), depending upon the selected report format, the right hand entry field  presents the user with the following selectable access types: dial 1, card, dedicated, 800 Remote Access, Direct Dial fax, store\/forward fax, 800 Business line (highlighted in the )), 800 wide area telecommunications service, 800 dedicated, 800 Network Call Redirect, local, cellular.","Referring back to exemplar screen shown in ), with regard to the hierarchy customization options, the user is enabled to specify or change the billing location by selecting field . Upon selection of the billing location customization option, the user is presented with a web page having a customization screen such as example screen display  presented as shown in ). In ), depending upon the selected report format, the right hand screen presents the user with three tabs: a corporations tab , a search tab, , and, a selected items tab . When selected, the corporations tab  enables the user to add or remove a corporate ID to\/from a billing location hierarchy in the entry field . A search of corporate IDs may be performed by selecting the search tab , and items that have been selected may be displayed in a field (not shown) presented by selection of the selected items tab. Likewise, referring back to exemplar web page screen shown in ), with regard to the geographic customization options, the user is enabled to specify or change the billing location by selecting field . Upon selection of the billing location customization option, the user is presented with a web page having a customization screen such as example screen display  presented as shown in ).","In ), depending upon the selected report format, the right hand screen presents the user with three tabs: a countries tab , a search tab, , and, a selected items tab . When selected, the countries tab  enables the user to select, add or remove a country that may be a subject for reporting as provided in the entry field . A search of countries may be performed by selecting the search tab , and items that have been selected may be displayed in a field (not shown) presented by selection of the selected items tab .","Referring back to exemplar screen shown in ), with regard to the notification customization options, the user is enabled to specify report notification by paging, by selecting field , and, report notification by e-mail, by selecting field . Upon selection of the paging notification option, the user is presented with a web page having a customization screen (not shown) presenting the user to select or enter that user's page number, PIN number and a paging message description. Upon selection of the e-mail notification option, the user is presented with a web page having a customization screen (not shown) presenting the user to select or enter that user's e-mail address.","As mentioned above with respect to , the Report Requestor client application  gains access to the metadata stored at the Report Manager server  through messaging. Particularly, as hereinafter described, a message generated by the Report Requestor in accordance with the user request is first received by the report manager proxy \u2032. In the preferred embodiment, the report manager proxy comprises a set of tools in the form of reusable objects, preferably written in C++ code, or the like. For example, a parser object tool is employed to decompose the Metadata messages sent by the report requestor  to validate the message. If errors are found in the Metadata input, the RM will return an error message to the requesting client. If the Metadata passes the validation tests, the request type is then determined and the appropriate service will be invoked after which a standard response is sent back to the requesting client.","The Report Manager  implements stored procedures to translate the message, perform the request, and send the information back to the Report Requestor  which uses the metadata to determine what a standard report should look like, the customization options the user has, and the types of screens that should be used for the various options (i.e., single selection, multiple selections, etc.).","It is understood that the selection of available standard template reports is based on the user's entitlements.","As described in above-referenced commonly owned U.S. Pat. No. 6,631,402, and particularly Appendices A-G provided therein, the following types of metadata requests and responses that may be generated by the StarWRS Report Requestor  and Report Manager  components include: 1) Get\/Send report template list (GRTL\/SRTL)\u2014which request enables retrieval of the list of all standard report templates for all products and is used only to obtain general report information, e.g., report title, description, etc.; 2) Get\/Send report template detail (GRTD\/SRTD)\u2014which request retrieves the details of a specific standard report template; 3) Get\/Send user report list (GURL\/SURL)\u2014which request retrieves the list of all user reports for the report format selected from a user report table and is used only as a request for general report information, e.g., report title, status, etc.; 4) Get\/Send user report detail (GURD\/SURD)\u2014which request retrieves the details of a specific user's report; 5) Add report definition\/Acknowledgment (ARD\/ARDA)\u2014which requests addition of a user-created report to a user report table. If the report is a scheduled report, this request is also communicated to the fulfilling server at the tame the report is due, 6) Delete report definition\/Acknowledgment (DRD\/DRDA)\u2014which request deletes a user-created report from the user table; 7) Copy report definition\/Acknowledgment (CRD\/CRDA)\u2014which request creates a duplication of the report the user is editing (other than the report title) and creates a new report ID for it; 8) Update Reporting Schedule\/Acknowledgment (URD\/URDA)\u2014which request updates the scheduling information on a report without having to send a Delete and Add request; and, 9) Get Pick List\/Acknowledgment (GPL)\u2014which request enables the Report Requestor  to get a pick list provided by StarOE server. The aforementioned Appendices A-G provides a series of tables containing the content for each metadata message request that can be sent by the report requestor  for each of the enumerated user requests, in addition to the format of the corresponding metadata message responses by the RM server .","Having described the functionality of selecting and\/or generating a report and customizing it, reference is now had to ) which describes the next step  of presenting the user with report run and save options. Particularly, in the preferred embodiment, as shown in each of the customization screens ()-()), the user may select a save and exit option, depicted in ) as button  or a save and run option, depicted in ) as button . In either scenario, an WRSEdit object enables a WRSScnMgr object to save the report to the RM server. The WRSScnMgr object launches each screens save method which communicates with the DataManager object to place the screens data in its corresponding WRSNode. Once all of the WRSNode objects have been updated, the WRSScnMgr object calls the DataManager object's SaveReport method to build a hash table to contain all of the report's data. The CommunicationManager utilizes the RptManagerMsg object to create the ARD metadata message from the hash table, the WRSCommWrapper for direct communication with the backend, and the WRSReportManagerUtilParser to handle any errors thrown by the server. The Report Manager creates the Dispatcher object, and utilizes the services of the RMParser class and validation objects. Upon determining that the client has sent a valid message, the appropriate member function is invoked to service the request. The response is built inside the esql wrapper function after obtaining the necessary information through the stored procedure from the RM database. The Report Manager creates the RMServerSocket object and sends the ARDA message back to the client. When a report is submitted the selected report type and reporting criteria are sent to the Report Manager.","As illustrated in ), at step , in reference to user selection of a Save and Run report option, the report is marked as scheduled and saved in the Report Scheduler server  via the report Manager. Subsequently, as indicated at step , the Report Scheduler server  sends the ARD message to the fulfilling server which queues the report and runs the report at the specified time(s), as indicated at step .","The process for generating a report for StarODS priced call detail data is described in detail in aforementioned U.S. Pat. No. 6,377,993, and, for TVS unpriced call detail data, in aforementioned co-pending U.S. patent application Ser. No. 09\/159.404. Generally, whether the report is to be currently run for immediate ad hoc reporting, or, is scheduled for normal scheduled reporting, the following sequence of operations, as indicated at steps -, )-(), are performed; First, in response to receipt of the ARD message, e.g., submitted to the fulfilling server by the Report Scheduler, the fulfilling server completes the report and compresses the report\/data, as indicated at step . Then, the report\/data is \u201cpushed\u201d, implementing FTP, to the fulfilling server's directory on the Inbox server , as indicated at step . Each application server, e.g., TVS server  (, is responsible for generating unique file names within their directory on the Inbox server . For example, the following directory and file naming conventions used for reports generated by the TrafficView server are labeled inbox\\files\\tvs with text files having the suffix *txt or *txt.zip (compressed), and comma separated files having a suffix *csv or *csv_zip (compressed). The fulfilling server then verifies that the FTP process was successful, as indicated at step , and, at step , a notification is sent by the fulfilling server to the Report Manager to notify the Report Manager server  of the location of a scheduled report. This is accomplished by using a \u201cNRL\u201d metadata message.","Aforementioned Appendix B of commonly owned U.S. Pat. No. 6,631,402 provides a table comprising the Notify Report Location parameters used for the NRL Metadata messaging sent by a fulfilling server to the RN Server  when a requested report is complete. Also provided in above referenced Appendix B is the acknowledgment table sent back to the fulfilling server in response. An example NRL message sent from the TVS server  to the RN server  can be found in commonly owned, co-pending U.S. patent application Ser. No. 09\/159,404.","In the preferred embodiment, the NRL message received by the RM server  includes parameters verifying whether or not the FTP process was successful. If it was successful, then the fulfilling server messages the Inbox that the file has been transmitted successfully by transmitting the report name (filename) and location. When the fulfilling server encounters a problem executing a report, a notification is sent to the Report Manager. Particularly, an error flag is placed in the status field of the User_report by the Report Manager which is displayed to the user during Report Request. The error message description will be placed in a text file and FTP'd to the fulfilling server's report location on the Inbox server (e.g., \\inbox\\files\\tvs) by the fulfilling server.","Referring to ), step , once the RM server  has received the NRL message from the fulfilling server, it verifies the file's presence, as indicated at step . The RM server  then builds a metadata file, e.g., by compressing the appropriate metadata (for displaying the report) into a .MTD file, as indicated at step . This .MTD file is utilized by the Report Viewer to know how to display the report. The Report Manager server creates a file including the metadata using the same file name as the report\/data file, but having the following suffix: *.mtd or *.mtd_zip indicating a metadata or compressed metadata file, respectively.","Above referenced Appendix F of commonly owned U.S. Pat. No. 6,631,402 details the parameters that are passed in the GET METADATA messaging for indicating to the Report Viewer how to display a requested report. An example message in metadata format to initiate the generation of a MTD file corresponding to a user-created report for StarODS priced call detail data and TVS unpriced call detail data may be found in commonly owned U.S. Pat. No. 6,631,402.","Once the metadata file corresponding to the requested report is built by the Report Manager, the RM ftp's the .MTD file to the Inbox server, as indicated at step , ). The RM server additionally updates the User_report table status field with a status \u201cC\u201d indicating completion, as indicated at step .","Once the Report Manager has updated the status field, the RM server  then adds the report to the Inbox server, as indicated at step .","Above referenced Appendix C of commonly owned U.S. Pat. No. 6,631,402 provides a table showing the fields for the metadata messaging between the RN server  and the Inbox server  for adding an item into the StarWRS system Inbox server , and the respective acknowledgment message format back from the Inbox server. In the add \u201cA\u201d message found in Appendix C, the \u201cLOC\u201d field includes information about where the data is located. An example metadata message indicating to the Inbox server that an unpriced TVS fulfilling server report is available is described in commonly owned U.S. Pat. No. 6,631,402. Particularly, the RN server supplies a metadata \u201cA\u201d message to the Inbox indicating the FTP file location. Via the report viewer, the report is now available for viewing, downloading, saving, or printing by the user, as indicated at step , and as described in further detail in commonly owned U.S. Pat. No. 6,385,644.","Particularly, as shown in the exemplary nMCI home page in ), the nMCI Interact \u201cMessage Center\u201d icon  may be selected which will cause the display of a web page including the message center dialog box  such as shown in ). From the dialog box , a user may select from among three tabs, a news tab , a reports tab  and a data tab . Selection of the reports tab  enables the retrieval of both a data file and a metadata file from the Inbox Server corresponding to those reports that have been run and available for customer viewing. Information provided for display by the message center display  is provided by the User_table which keeps track of the status of all reports for a particular user. Particularly, by double-clicking a chosen report, a report viewer application is enabled to display the chosen report on a web-page. ) illustrates an example web-page presenting a text viewer screen  enabled by selecting the highlighted report  in ).","Referring back to , the Report Viewer  interfaces with the user's Inbox  for presenting to the customer the various type of reports received at the Inbox. Preferably, all Report Requestor and Report Viewer applications communicate with the RN server  through the use of the common object communication classes, as described in greater detail in commonly-owned U.S. Pat. No. 6,385,644 entitled MULTI-THREADED WEB-BASED USER INBOX FOR REPORT MANAGEMENT, the contents and disclosure of which is incorporated by reference as if fully described herein.","It should be understood that fulfilling servers such as the Broadband, and Toll Free Network Manager , and StarODS , Report Scheduler server, and any other back-end or fulfilling servers (not shown), send report results and event notifications to the inbox server . The fulfilling servers, and Report Manager server may communicate to the inbox server  by making requests to the inbox proxy \u2032. The proxy, generally waits for a request from an application and then services the request.","The inbox proxy's main responsibility is to process requests by either handling them internally within the inbox proxy \u2032 or forwarding them to the inbox server , and then responding back to the client (i.e., the fulfilling servers in this case). In order to maintain secure connectivity throughout the system, the inbox proxy \u2032 uses the application program interfaces (APIs) provided by the \u201cnetworkMCI Interact\u201d supporting different types of data transport mechanisms: synchronous transaction; asynchronous transaction; and, synchronous bulk transfer. The transport mechanisms are implemented as sockets message protocol, and the proxy handles its conversation processing on a thread or process per conversation basis for servicing multiple simultaneous clients.","As an alternative to the transports above, the inbox server  offers direct File Transport Protocol (FTP) \u201cput\u201d for very large transfers in order to alleviate some of the network server loads. The fulfilling servers ,  with large data transfers typically use the common shareware compression format ZIP which is also PKZIP compatible. Alternately, the fulfilling servers ,  distributing information via the inbox may \u201cput\u201d the data to the inbox and defer zipping until after the inbox receives the data.","As described, the fulfilling servers, when placing the data in the inbox, notify the report manager server  they are adding new data in the inbox. The report manager  then retrieves and FTPs the appropriate metadata associated with the new data in the inbox, notifying the inbox of the new additions to the inbox, i.e., the new data and the associated metadata. The metadata is then stored in the inbox server database  along with the report results. Thus, if the metadata is required to be changed, it does not interfere with the information needed to display the reports included in the inbox.","Particularly, as shown in , the Inbox server  interface with the Inbox Client  supports messaging that enables the User to remove an item from the Inbox, e.g., delete a report, or, to delete all items from the Inbox, e.g., for a particular Enterprise and User ID as well as other associated reports. Above referenced Appendix G of commonly owned U.S. Pat. No. 6,631,402 illustrates the parameters used in the metadata messaging between the Inbox client and the Inbox server. Particularly, the List \u201cL\u201d message is a synchronous request for a list of all Inbox items for a specific user. The Inbox fetch \u201cF\u201d function is a bulk transfer request that enables bulk transfer of the requested file to the Inbox client.","Referring back to ), after editing or modifying an existing report, the user may simply select to save the report and exit. In this case, the ARD message is sent from the Report Requestor client to the RM server and is saved in the RM inventory database for subsequent execution. Consequently, the report is flagged as incomplete in the User_table and may not be run until a run option for that report is chosen. Otherwise, the report may be immediately scheduled if the user selects the save and run button.","As described, Metadata messaging is used throughout the various components of the StarWRS system . The format of an interface message that is sent to the Report Scheduler server is identical to the format as the interface messaging format returned by the RS server . Thus, in the case of automatic recurring reports, a variation of the process outlined in ) occurs at step , whereby the ARD request is instead sent from the report scheduler to the fulfilling server at the programmed frequency. Particularly, when a report is required to be run, the Report scheduler server  ( sends an ARD request to the fulfilling server in a metadata message format having parameters as included in the Add Report Definition table provided in above-referenced Appendix D. Upon processing of the metadata message, the fulfilling server will respond to the report Scheduler with an acknowledgment of the command, and the process outlined in ) and () is executed.","As described in greater detail in commonly owned U.S. Pat. No. 6,631,402 the Report Scheduler server  is additionally capable of updating the User report status table and, preferably, is provided with a tracking mechanism for tracking the scheduling of user reports. If the report is an Ad hoc report, it is marked as inactive in the user report table once the status is complete.","StarODS","As mentioned, the StarODS data management tool of the integrated suite of telecommunications network applications comprises a back-end architecture providing customers with priced reporting data pertaining to usage of their telecommunications networks.","In ), there is shown the high-level logical approach of the StarODS data management system  integrated with the StarWRS component  of the nMCI Interact architecture. Generally, the data management system  of the invention, referred to herein as \u201cStarODS\u201d, provides customers with priced reporting data pertaining to telecommunications services. Although the description herein pertains to priced billing data, it should be understood that the principles described herein could apply to any type of reporting data Through StarWRS web-based reporting, the StarODS system provides priced reporting data and implements a DataMart approach for maintaining the data used for customer reporting. StarODS stores and incrementally processes customer's priced data included in call detail records, and loads this processed data in Data Marts in a manner such as described in commonly owned U.S. Pat. No. 6,714,979 entitled DATA WAREHOUSING INFRASTRUCTURE FOR WEB-BASED REPORTING TOOL, the contents and disclosure of which are incorporated by reference as if fully set forth herein. From these data marts customer's priced reporting data may be provided to customers on a daily basis via the StarWRS reporting system.","For priced reporting data, report categories from which a variety of reports can be generated include: a) Financial category\u2014for providing priced data reports relating to longest calls, most expensive calls, Off Peak Calls, payphone report, usage summary, calling card summary, and area code summary for Toll Free, VNET, Vision, and CVNS customers; b) Marketing category\u2014for providing priced data reports relating to country code summary, state summary, frequent numbers, frequent area code summary, frequent state, and frequent cities; c) Telecommunications category\u2014for providing priced data reports relating to call duration summary, IDACC\/Supp Code Summary and Call Access Summary for Toll Free, VNET, Vision, CVNS customers; d) Call Center report category\u2014for providing priced data reports relating to most active toll free numbers, Hourly Distribution, Day of Week Distributions, state summary, and country code summary for their Toll Free, VNET, Vision, CVNS customers; e) Monitor Usage\u2014for providing priced data reports relating to longest calls, most expensive calls, most active calling card and most active toll free numbers for their Toll Free, VNET, Vision, CVNS customers; f) Analyze Traffic\u2014area code summary, country code summary, state summary, range summary, city summary, frequent numbers, payphone report, usage summary, calling card summary, IDACC\/Supp Code Summary, Day of Week Distributions, Hourly Distribution, Call Access Summary and review calls; and, a g) Check Calling Frequencies category\u2014for reporting on frequent numbers, frequent area code, frequent country codes, frequent state and frequent cities.",{"@attributes":{"id":"p-0272","num":"0272"},"figref":["FIG. 14(","FIG. 14("],"i":["a","a"],"b":["400","405","410","420","430","435","440","435","440","440"]},"Additionally, as shown in the ), other external systems and applications may interface with the common data gateway component  including: Cyclone Billing system and Concert Virtual Network Services which provide additional billing detail records; and, a calling area database  which provides geographical reference information, i.e., identify city, state and country information.","After the data has been processed in the Harvesting component  it is input to an Operational Data Store component (\u201cODS\u201d)  that stores the billing detail records and dimension tables as a data model. This ODS layer  is comprised of all data harvested from all applications in the data harvesting layer , and feeds report-supporting DataMarts  in a manner which supports customized data access. The Datamarts may be engineered to pre-process data, create aggregates, and otherwise perform transformations on the data prior to DataMart loading  in order to implement a defined data model, e.g., star schema key structures, fact and dimension tables depicted as block . In the preferred embodiment, as shown in ), the ODS  includes multiple datamarts  each for storing and retrieving daily and monthly priced data on a periodic basis. It primarily is responsible for hosting highly current data, typically at least 72 hours old. In accordance with customer-reporting needs, data marts  are partitioned in accordance with partitioning schemes which, in the invention, is based on customer-ID. Particularly, each DataMart is engineered for servicing specific customers or specific product sets, as well as engineered for the specific requirements of the customer\/product such as high insert activity, heavy reporting requirements, etc. As data is volatile and changing and may not produce consistent results for the same query launched at multiple times, ODS is engineered for high performance through appropriate storage technologies and parallel processing. Although not shown, a common data warehouse is provided in this ODS layer that is responsible for performing storage, retrieval and archiving of data, typically of relaxed currency (e.g., more than 24 hours) and is targeted at trend analysis and detection. In the preferred embodiment, the datamarts utilize an Informix database in a star topology.","As described herein, from the data included in these data marts, one-time or recurring priced data reports are available for reporting through the NMCI Interact StarWRS reporting system .","Additionally, the ODS component  includes a Decision Support Server (\u201cDSS\u201d) reporting engine component  that performs the following functions: 1) receives various customer report requests from the StarWRS GUI Report Requestor component and accordingly generates database queries; 2) routes the query to the appropriate data marts , data warehouse or operational data store; and, 3) responds to the requestor with a formatted result set. The DSS server  may also perform cost estimation, agent scheduling, workflow broadcasting interface, and transaction logging functions. In the preferred embodiment, the DSS  is a cluster of DEC (Digital Equipment Corp.) UNIX 8400 servers running Information Advantage\u00ae software accessing an Informix database, e.g., Informix Dynamic Server V.7.3. database product, distributed across multiple Data Marts.","In accordance with the invention, the primary function of the DSS  is to generate priced billing report data in accordance with the customer's request which is received from the StarWRS reporting component as a metadata message. To accomplish this, the DSS interfaces with two StarWRS systems: Report Manager\/Scheduler , and Inbox , as shown in ). As described herein, the Report Manager\/Scheduler formats the customer's request in accordance with a defined set of rules and sends a metadata request message to the DSS. The DSS  reads the customer's metadata descriptions of the type of priced data report requested by a customer, translates the metadata into database queries, and implements commercial off-the-shelf (\u201cCOTS\u201d) tools such as Information Advantage's Decision Suite\u2122 to generate SQL queries, and run the queries against the data in the DataMarts. Afterwards, the query results are formatted by a formatter process into a form readable by StarWRS report viewing components, and the completed reports are transmitted to the directory of the customer's Inbox, e.g., via FTP.","In the preferred embodiment, a publish-and-subscribe communications tool  such as Talarian SmartSockets\u2122 messaging middleware is used to coordinate report requests transmitted from the StarWRS report Manager to DSS, and report completion notification from DSS to the StarWRS Report Manager. The Report Manager formats the customer's request in accordance to a defined set of rules and sends the request to the DSS as a Talarian message with the Report Manager  maintaining the Talarian Sender program, and the Decision Support Server  maintaining the Talarian Receiver program. Messages are sent with guaranteed message delivery (\u201cGMD\u201d), thus assuring all request data sent by RM is received by the DSS. As known, Talarian messaging middleware defines a message as types and subjects. A message type is a structure that defines the format of the message. Message subjects are subsets of message types and describe messages by which Talarian receivers can subscribe. Conversely, message subjects describe messages by which Talarian senders publish.","Above-referenced, commonly owned U.S. Pat. No. 6,377,993 describes in greater detail the application programming interface \u201cAPI\u201d whereby the RN server  publishes the message to the Decision Support Server in response to its receipt of a report request. Similarly, a DSS\/Inbox API is provided to manage FTP transmission of completed customer report files including: error handling, retry logic, and the ability to maintain the file name and location of where report files are stored. Particularly, the DSS\/Inbox API sends the report file to the inbox ( ()).","In the preferred embodiment, the DSS architecture is transparent to the Report Manager which publishes Talarian messages to which the DSS will subscribe. More particularly, an RTServer process located in the RM is provided for maintaining connections, implementing a report request queue  for ensuring guaranteed message delivery, and tracking the success of all messaging operations. In addition to the tokenized character string request message which specifies report type, filters, and any customer request-specific information, RM server provides additional fields as part of the Talarian request message including: a Corp_ID, Priority, and RequestID. Corp_ID allows the DSS to route the request to the appropriate data store without having to invoke a parser. Data are partitioned on Corp_ID in the ODS database warehouse. Request_id is used to send back an ARDA failure message, in the event of an invalid message. The Priority field allows DSS to pickup the next high priority request from a queue of non-processed requests, without invoking the parser.",{"@attributes":{"id":"p-0281","num":"0281"},"figref":"FIG. 14(","i":"b","b":["472","475","260","493","492","4941"]},"More particularly, in view of ), ARD metadata request messages are received into the ODS system via arbitrator processes which are responsible for routing the request message to the appropriate ODS database according to a Corp\/ODS mapping table (not shown).","In ), a Talarian receiver, referred to herein as a Talarian Interface Object (\u201cTb\u201d) , is a process that receives the Talarian message, manages the GMD functionality, and posts updates to the request table  and request status table . Appendix \u201cI\u201d of above-referenced, commonly owned U.S. Pat. No. 6,377,993 illustrates the contents of the ODS Request table  which is the table maintained for the purpose of holding specific report request information from the received ARD message, and, a Request Status table , for tracking the status of DSS processes for the current request. As further shown in ), the receiver  inserts the message received from an arbitrator into the request table  and request status table  along with the priority, timestamp- and status fields. The request status table resides on the ODS database and the messages are stored in the queue to provide queuing, log and tolerance from the failures. To determine the pending messages to be processed, a status field and history_stat flags are used.","As further shown in ), in operation, the Information Advantage\u00ae Interface Object (\u201cIAIO\u201d)  reads the status table  for new entries. When a new entry is posted, it invokes a parser process , for parsing the received report request ARD message, and generates an overlay text file  comprising tokens corresponding to the requested report format and data descriptions. An SQL engine generator, e.g., Decision Suite\u2122, receives the overlay file  and performs the following functions: 1) generates SQL; 2) submits the SQL to the appropriate datamart (ODS database); 3) generates a Report file with a *.txt extension; 4) updates Request Status table  with appropriate status; and, 5) if a failure occurs, updates the error log. Following generation of the *txt file, a sort process is invoked to perform the following functions: 1) reads the Request table  for column(s) on which to sort the Report; 2) reads the *.txt file; 3) sorts the *.txt file and generates two files: i. a file with a *.hdr extension which file contains the header information, consisting only of only column id's, and, ii. a file with a *.data extension which file contains sorted data provided in the *.txt file and is the body of the report; 4) it further updates the request status table with a \u2018success\u2019 or \u2018failure\u2019 code; and, 5) if a failure occurs, updates the error log.","Continuously running FTP, NRL and ARDA processes are provided to take appropriate actions in accordance with the entries in the request status table . For example, an FTP process performs the following functions: 1) reads the status table  for entries ready to be sent to the Inbox and FTP's the .csv or .txt to the inbox ; 2) Determines success or failure of file transfer; 3) Updates the Request Status table ; and, if a failure occurs, updates an error log. The NRL (Notification of Report Location) process performs the following functions: 1) reads the Request Status table  for any success status or failure of any process; 2) Invokes a receiver process with appropriate status and file location populated in the NRL; and, 3) If failure occurs, updates the error log.","The end-to-end process  from a priced report request to report delivery is shown in )-().","Assuming successful user logon and authentication, as described herein, the first step  of ), indicates that a user has opened the report requester dialog box from the nMCI Interact home page ()) by selecting the Report Requestor icon .","Using metadata messaging, the StarWRS Report Requester retrieves an available report list (including user defined list) from StarWRS Report Manager, as indicated at step . This process entails invoking a Communication Manager object to communicate with the RM server in order to obtain a SURL metadata message, as described.","Next, as indicated at step , the Report inventory for the specific user is loaded and displayed for the user on the user report request display screen, enabling the user to select a report, as indicated at step . Then, at step , the selected report is retrieved from StarWRS Report Manager and displayed in the manner as described.","Then, as indicated at steps  and , the user selects a product, including phone numbers and geographic locations, etc. and enters criteria, i.e., reporting interval and frequency, if a new report is desired. Specifically, when the user selects a report from the Inventory List or a new report, an WRSEdit Screen is launched to provide the editing capabilities which are available for the Report format, as described.","Once a report is created the user may save the report request, e.g., by clicking a \u201cSave and Exit\u201d button, or submit the request, as indicated at step , e.g., by clicking a \u201cSave and Run\u201d button. When a report is submitted the selected report type and reporting criteria are sent to the Report Manager. As indicated at step , the RM creates the metadata request for which the DSS has a predefined interface. The metadata request is submitted by StarWRS Report Requester to a COTS software module, e.g., such as provided by Information Advantage\u00ae which module is used for the generation and execution of SQL queries and retrieval and formatting of the results. Particularly, the metadata requests are transmitted via an interface with the Talarian Smart Sockets product and a header is built for each report request including the CorpID and Enterprise information which is used by the IAIO to select the proper DataMart as the target for the query. At this time, the report requestor additionally creates an entry in a RM table to track the progress of the request. RM communicates with the StarODS using Talarian Smart Sockets\u00ae which creates a header comprising the product and other information, and controls the delivery of the report request. Smart Sockets guaranteed messaging feature automatically routes the call and repeatedly tries until the delivery is successful.","Next, as indicated at steps  and , the DSS receives the request and acknowledges receipt. Specifically, when the request is received it is first validated with StarOE to ensure that the user is entitled to receive information about the selected product corp and number(s). Once the request passes validation, the DSS IAIO reads the header to determine which Data Mart will ultimately be queried. It then parses the metadata into a format which the COTS software can readily convert into an SQL statement, as indicated at step , ), and adds the report to the DSS report queue based upon type (Daily, Weekly, Monthly, Adhoc) and associated DataMart, as indicated at step . It should be understood that at this point, the request has been flagged as submitted in the RM database, as indicated at step .","From this point forward, DSS activity is controlled by a control process and progress or errors are logged internally in the DSS system. This control process includes logic enabling the prioritization of report requests and application of rules defining the order in which they should be executed. Thus, at the appropriate time, depending on the type or report, reporting period and other parameters, the Information Advantage query engine selects the report from the queue, as indicated at step , which action is logged in the report status table (Appendix I) as indicated at step . The SQL statement is then built by Decision Suite\u2122 and routed to the appropriate data mart for execution in the manner as described herein, as indicated at step . The query engine generates the SQL statement from the metadata and executes the report which action is logged in the report status table as indicated at step . Next, as indicated at step , the query results are returned, and, a post-SQL formatting process is invoked.","More particularly, as described in further detail in commonly owned U.S. Pat. No. 6,377,993, the report result set from Decision Suite is input to a Formatter module which performs various report result transformations including: 1) Converting of column headers generated by Information Advantage into appropriate column ids that are recognizable to the StarWRS client viewer functionality (as indicated at step ); 2) Provide subtotaling for specific requested \u201csubtotal by\u201d columns in the format required by the StarWRS client interface (as indicated at step ) and provides report-based totals as requested by customer; 3) converting binary stream data file to ASCII text file (as indicated at step ); 4) implementing Replacelogic, e.g., replacement of \u201cTAB\u201d delimiters with appropriate \u201cComma\u201d field delimiters (as indicated at step ); 5) implementing Repeat\/Padding logic, i.e., identifying compressed columns\/values and decompressing (or repeating) the values that were compressed; 6) providing alphanumeric translations for any encoded data elements returned in the result set data file (as indicated at step ); and, 7) adding new computed\/derived columns, e.g., percents, averages of column data values, etc., as requested by customers on specific reports.","After formatting the report, as indicated at step , a message is sent to the control process to update the request status table  ()). It should be understood that, if a failure occurs during formatting, the error log is updated and a status message sent to the request status table , as well. Then, as indicated at step  ()), the formatter creates a *.csv (Comma Separated Value) or .txt file, gives the file a unique name and saves the file. Preferably, a *.csv is the file generated if the report is successfully generated. As indicated at step , the *.csv report\/data file is then \u201cpushed\u201d, implementing FTP, to the StarODS server's directory on the Inbox server .","Finally, as indicated at step , once the file has been successfully transferred to the Priced reporting directory on the Inbox server, and the request status table  appropriately updated at step , an NRL message is sent to the RM Server  notifying it of the report file name and location in the Inbox, requestor information, and if the transfer was successful. This is accomplished by using a \u201cNRL\u201d metadata message with a corresponding NRLA message sent back to the DSS. Report Manager is subsequently notified of the successful completion of the report and the report request is marked as completed in the RM database. If the report is a recurring report, it is not marked as complete. After the control process updates the report status table, the Report Manager is notified that the report is complete and the Inbox server notifies the user that report is ready.","A user may subsequently retrieve the report by clicking on the message center icon  from the home page of ) which will present to the customer a list of all the available reports. To view a report the user selects the report and, the report metadata and the appropriate viewer are downloaded to the user (client) workstation.","TVS","As mentioned, the traffic view system (\u201cTVS\u201d)  of the present invention comprises a Traffic View Server  which functions to store network call detail records (CDRs) and statistics, generate reports and deliver reports and\/or call detail to the customer via the StarWRS Web Reporting System, and, supplies on-line customer access to call detail and hourly statistics that aid the customer in Network management, call center management and customer calling pattern analysis. For real time (unpriced) data, statistics are generated for the following totals: minutes, attempts, completes, incompletes, other, dto (direct termination overflow), short calls, didn't wait, didn't answer, tcc, and equipment failures.","The process by which the TVS server  gets data is now explained in greater detail with reference to . As shown, call records are created by a network switch . An AP (Adjunct processor) or Storage and Verification Elements (\u201cSAVE\u201d) platform  is co-located with each switch and receives all the call records from the switch as soon as possible after a call disconnects. The AP\/SAVE sends all the call records to a (Network Information Concentrator (NIC)  where records are grouped together and those groupings numbered for a more efficient network utilization. If the NIC determines that it is missing a gap in the numbers, it will request the AP\/SAVE resend that group of data to ensure that no data is lost. Should the NIC be unavailable to receive data, the AP\/SAVE queues the data for later delivery. The NIC  receives all calls from all switches as soon as possible after a call has disconnected (hangs up) and distributes records to clients that match a certain criteria.","A generalized statistics engine (GSE) component  receives all records that are considered to be a toll free (800\/8xx, etc) call from the NIC and also employs the same sequencing of groups of records to ensure that no data is lost. Should the GSE be unavailable, the NIC will queue the data for later delivery. The GSE component  further filters toll-free calls to only process calls that match a subscriber list which is maintained by an order entry OE process on the GSE (not shown) that accepts add & delete requests from TVS via a messaging interface  as shown in . The GSE component then formats the CDRs, i.e., enhances the call records, from the form as originally provided at the switch, into a normalized form to allow for a common record format regardless of the type of switch that created the record, or the exact call record type. For example, different network switches generate different call detail records, e.g., call detail record, enhanced call detail records, etc., which denote differences in toll-free services and features. This type of call detail record generated by GSE component is herein referred to as a TCR (Translated Call Record).","Groups of TCRs are sent from the GSE to TVS via TCP\/IP. When TVS has safely stored that record it sends an acknowledgment to the GSE  so that the GSE may dispose of the group. Should TVS not be available to receive data, GSE queues data to be sent later.","As shown in , in the preferred embodiment, initial customer provisioning occurs at either the Corporate Order Entry system  (CORE) or the StarOE server  component of MCI Interact. Particularly, CORE  transmits daily to the TVS server  via Network Data Mover (NDM) files which comprise information about new reports for TVS to create, and where to send those reports, e.g., FAX, E-Mail, or US Mail. In the NMCI Interact TrafficView Server , a CORE FEED process  provisions reports into a reference database , and sets up scheduled reports to work on the next boundary, e.g., hourly, daily reports at midnight the next complete day, weekly reports at the end of the next week, monthly reports at the end of the month, etc. If this report requires Call detail records, as opposed to aggregated data, a CDR database is selected based on weighted values for the existing database. If a request contains a toll-free number that has not been provisioned with the GSE, a request is sent to the GSE to start collecting that toll-free number. This request is sent by placing a request onto a DMQ queue , and a GSE_SEND_OE process  is invoked to forward the request to the GSE  via a TCP\/IP interface.","As further shown in , in the preferred embodiment, requests to enable TrafficView customers are received in real-time from StarOE  via TCP\/IP. Generally, StarOE specifies what general categories of reports can be requested for a given nMCI Interact subscriber. These categories include:","1) reports that only require data aggregation; 2) reports that require call detail records to be collected; and 3) real-time monitor (RTM) reports. This is provisioned into the reference database  for future verification of requests from the nMCI Interact platform. If a request contains a toll-free number that has not been provisioned with the GSE, a subscription request is sent to the GSE  to start collecting TrafficView data pertaining to that toll-free number. This request is sent by placing a request onto the DMQ queue , and the GSE_SEND_OE process  then forwards this request to the GSE  via a TCP\/IP interface. In the preferred embodiment, the content and format of an \u201corder entry\u201d message generated by the TVS server for requesting unpriced traffic data from the GSE is provided in Appendix H. In accordance with this messaging, the GSE selects all TCR's for TVS enabled customers and places them in a SAVE storage queue, e.g., Versant or Talarian, for subsequent distribution to the TVS server.","As further shown in , an input feed from the calling area database component  (\u201cCADB\u201d) provides the TVS server  with reference data including state and country information for mapping NPA\/NXX (Numbering Plan Area\/Number Exchange) to city name and state code, and, for mapping country codes to country names. Data is transported from the CADB database  to the TVS server via a network data mover (\u201cNDM\u201d) or FTP via interface .","A further input feed from the Global Information Repository \u201cGIR\u201d component  provides the TVS server with International toll-free number terminations on a periodic basis.","From the circuit order management system (\u201cCOMS\u201d) component , TVS receives three NDM feeds: 1) a Trunk Type Master feed  used in Un-priced Reporting to map enhanced voice service\/dedicated access line (EVS\/DAL) information to specific service locations; 2) an automatic number identification (\u201cANI\u201d) feed  also used in Unpriced Reporting to map EVS\/DAL information to specific service locations; and, 3) a switch mapping feed  to map gem the switch ID (per Network control system) to the billing representations of the same switch.","As further shown in the , unpriced data collection process begins with the placement of an order for unpriced reporting with the customer's account team. Specifically, the account team places the order in real time using an ordering system component. In a periodic process, this order information is transmitted to OEHubs , e.g., via e-mail which later inputs the necessary service and reporting flags to the StarOE component , via messaging interface . The OEHubs  further adds new customers to the corporate order entry (\u201cCORE\u201d) system component , which provides customer billing hierarchy information used by the StarWRS system. The new customer hierarchy information is extracted by the CORE system , and is available for pickup by the StarOE server  via messaging interface .","The StarOE server  then messages the Traffic View Server  in real time via TCP\/IP that the number has been added for Unpriced Reporting. The TVS additionally messages the GSE component  in real time to immediately initiate the collection of call detail for that number, as will be described in greater detail herein. Due to latency inherent in the fulfillment process, customers may select and receive daily reports after CDR collection begins.","In accordance with the invention, a wide variety of reports and reporting frequencies are available. In the preferred embodiment, reports are available in hourly, daily, weekly, and monthly frequencies. Types of TVS reports that are available to customers include: Standard reports; Summary reports; Termination Reports; Exception reports; and, unpriced call detail. For example, Standard reports that may be generated from stored Toll Free hourly statistics include, but are not limited to: Summary by Toll Free Number and Hour which is available in the following frequencies (Ad-hoc \u201cA\u201d,Daily \u201cD\u201d, Weekly \u201cW\u201d, and Monthly \u201cM\u201d); Summary by Toll Free Number and Date (A,D,W,M); Summary by Toll Free Number and day of week (\u201cDOW\u201d) (A,W,M); Summary by Toll Free Number and Week (A,M); Summary by Toll Free Number and NPA (A,D,W,M); Summary by Toll Free Number, Service Location and Hour (A,D,W,M); Summary by Toll Free Number, Service Location and Date (A,D,W,M); Summary by Toll Free Number, Service Location and DOW (A,W,M); Summary by Toll Free Number, Service Location and Week (A,M); Summary by Service Location and Hour (A,D,W,M); Summary by Service Location and Date (A,D,W,M); Summary by Service Location and DOW (A,W,M); Summary by Service Location and Week (A,M); Summary by Service Location, Toll Free Number and Hour (A,D,W,M); Summary by Service Location, Toll Free Number and Date (A,D,W,M); Summary by Service Location, Toll Free Number and DOW (A,W,M); Summary by Service Location, Toll Free Number and Week (A,M). The Toll Free Summary Reports generally comprise three sections: Summary, Incomplete Call Analysis, and Network Customer Blocked Analysis (other category breakdown). The Termination Summaries include three types of termination reports: Toll Free by Location, i.e., showing termination summary and incomplete call analysis by service location for a specific Toll Free number; By Location, i.e., by service location across all Toll Free numbers terminating to the same service location; and, Location by Toll Free, i.e., for a specific service location, shows each Toll Free number terminating to this location. The originating NPA\/Country Code summary reports provide information by NPA and Country for each Toll Free number attached to the report.","Additionally available are what are called Call Detail Exception Reports\/images which provide reporting information pertaining to the following: Completion Rate and Retry (A,D,W,M); Completion Rate and Retry with Queue Abandonment (A,D,W,M); Lost Caller and Retry (A,D,M); Lost Caller and Retry with Queue Abandonment (A,D,M); Most Frequent Calling Numbers (A,D,W,M); Most Frequent Calling NPA\/NXX (A,D,W,M); Most Frequent Calling Country (A,D,W,M).","The nMCI Interact Exception reports (images) includes: Completion Rate and Retry (A,D,W,M); Completion Rate and Retry with Queue Abandonment (A,D,W,M); Lost Caller and Retry (A,D,M); Lost Caller and Retry with Queue Abandonment (A,D,M); Most Frequent Calling Numbers (A,D,W,M); Most Frequent Calling NPA\/NXX (A,D,W,M); and, Most Frequent Calling Country (A,D,W,M). The nMCI Interact Exception reports (data) includes: Call Detail by Originating ANI (A,D,W,M); Call Detail by ID Code (A,D,W,M); Call Detail by NCR Indicator (A,D,W,M); Call Detail by Originating State (A,D,W,M); Call Detail by Disposition (A,D,W,M); Call Detail by Service Location (A,D,W,M); Payphone Summary (A,M). Downloadable nMCI interact Call Detail reports includes Traffic view call detail (available as ad-hoc and daily) and Outbound traffic view call detail data (available as ad-hoc, daily and weekly).","As mentioned, via TCP\/IP messaging, the TVS system  receives a request in real-time from the nMCI Interact StarOE component  to begin collecting call detail records for a particular TVS\/Unpriced reporting customer, which number had been previously assigned during the order entry process. When a customer discontinues Unpriced Reporting for a number, this information is entered in StarOE tables where it is stored for a predetermined period subsequent to termination of the number. After the predetermined period of time, e.g., seven days, the numbers scheduled for service deletion are passed to TVS via TCP\/IP connectivity in real time. After receiving this information, TVS instructs the GSE  in real time to stop collecting CDRs for these numbers.",{"@attributes":{"id":"p-0314","num":"0314"},"figref":["FIG. 21","FIG. 21"],"b":["564","504","564","553","553","564","504","566"],"i":["a ","a"]},"First, as the reference database  contains information on which toll-free number belongs in which CDR database associated with the TVS server, records are grouped for each CDR database , , . . . , , to which they belong. The reference database  additionally flags which numbers are to have statistics collected for them. Thus, an additional group of records is created and may be routed to a DMQ Queue which inputs these records into a statistics \u201cstats\u201d counter process  for statistics processing, as will be described in greater detail herein. When all, the records in the group have been read, each group is written to it's DMQ queue , , . . . , associated with its destination database CDR Database , , . . . , . For instance, via a TCR Poster process , records destined for CDR database are forwarded from the DMQ Queue . Particularly, each CDR poster process , , . . . , reads data from it's corresponding DMQ Queue and formats & stores those records in their database.","With further regard to the stats counter  shown in , TCRs are rolled up into statistics records. Specifically, the stats counter  keeps counts of the following: summary information about each toll free number for an hour; summary information about each toll free number and termination for an hour; and, summary information about each toll free number and origination NPA for an hour. These statistics are kept in memory for a pre-determined amount of time, e.g., one hour. As matching records come in, statistics are updated. At the end of the time period, these records are written to the statistics database , and particularly high speed electronic data drives.","The statistics that are gathered for each subscriber's toll-free number in the TVS system of the invention include: total completions, total call duration, total attempts, total switch control call, total Network Control System (NCS) blocked, total NCS rejected, total network blocked (all routes busy), total supp code blocked, and out-of-band blocked. Appendix I of co-pending U.S. patent application Ser. No. 09\/159,404, provides a summary table processing algorithm detailing the collection of statistics by the GSE and the TVS summary table processing.","Additionally, statistics gathered for NP table processing include: originating NPA, total attempts per NPA, total calls completed (tcc) per NPA, total call not delivered (blocked) per NPA, total attempts for International Originations, tcc for International Originations (\u201cIO\u201d), total calls not delivered (blocked) for IO.","Additionally, call statistics for terminations include: termination type, termination address, total completions, total call duration, and call dispositions indicating the cause of an incomplete call including: total short calls, total didn't write, and total didn't answer.","With more particularity regarding the statistics database design, and, in further view of , the stats_counter  contains processes that read TCR's from a DMQ queue, and create statistics records for input to \u201cc_tables\u201d in the statistics database .","Appendix I of co-pending U.S. patent application Ser. No. 09\/159,404 depicts the algorithms implemented in TVS stats_counter process  for generating statistics data tables so that TCR records may be processed in batches. As shown, the processes include: a summary table process which process generates statistics for call summary data; a NPA table process; Country table process and Termination table process. The stats_counter  enables multiple processes to be run at the same tine on the same machine. To allow an arbitrary number of Stats_Counter processes, the stats databases are organized as a series of configurable tables, e.g., \u201cC_Tables\u201d , which are temporary tables that the stats counters first insert records to. These tables are identical to normal statistics tables with the exception that they include a field for the date in them. In accordance with the provision of C_tables, a pending_stats_list table and stats_table usage_list table are used to keep track of what data is in the C_tables, and to drive the movement of data from the C_tables to a more permanent database tables .","Particularly, when the stats_counter process  starts, it performs a check of the set of \u201cc_tables\u201d by inserting its process name in the used_by_process field of the stats_table_usage_list table. If the stats_counter process unexpectantly dies, it reclaims the tables previously used by searching the stats_table_usage_list for tables marked with it's process name. The stats_counter process adds an entry into the pending_stats_list every time it creates stats for a new day. The usage_flag is initially set to \u201c1\u201d in that table. At the top of the hour, for example, the stats_counter processes marks all of the usage_flag entries to \u201c2\u201d, and modifies the value of the used_by_process field in the stats_table_usage_list to \u201cMOVER\u201d. The stats_counter process then searches the stats_table_usage_list for another set of tables to use for the next hours counting. If the stats_counter process cannot find a set of tables, it aborts. To avoid this, there is extra sets of \u201cc_tables\u201d configured with entries in the stats_table_usage_list.","Table 1 of co-pending U.S. patent application Ser. No. 09\/159,404, depicts an example pending_stats_list table which comprises a directory of what the stats_counter is working on, or finished with. Each record represents a name of a c_table that contains statistics, and dates that are contained in this c_table. The report generator process, and on-line access use this table to determine if there is any data in the c_tables that they may be interested in, and what the table name is. The Stats_counter processes insert records into this table, and data_mover processes , shown in , remove entries from this table.","Table 2 of co-pending U.S. patent application Ser. No. 09\/159,404, depicts an example stats_table_usage_list table which comprises a list of all the c_tables that are configured and used by the stats_counter processes and data_mover processes to allocate tables amongst themselves. The number of records in this table remains static. Stats_counter processes  update the \u201cused_by_process\u201d field with their process name when they are in control of that table. At the top of the hour, they may change the used_by_process to \u201cMOVER\u201d, and attempt to find another table that is unallocated. The movers change the used_by_process name to \u201cNONE\u201d when they have completed moving data from that c_table. In the preferred embodiment, there are four types of movers are currently configured to run: NPA, summary, country, and termination. Each type of mover looks in the pending_stats_list for the name of the c_table of the same type with a usage_flag of \u201c2\u201d, for instance, and the earliest date. The mover then transfers the data for this date from the \u201cc_table\u201d to appropriate the permanent table. When the data transfer is finished, the matching record in pending_stats_list is deleted. If there are no more entries for this \u201cc_table\u201d in pending_stats_list, the mover process takes the precautionary step of searching the \u201cc-table\u201d for additional data that was not noted in pending_stats_last Entries are then added to pending_stats_list for any data found in the \u201cc table\u201d. If no additional data is found, used by_process in stats_table_usage_list is changed from \u201cMOVER\u201d to \u201cNONE\u201d for this \u201cc_table\u201d.","The interaction between StarWRS web-based reporting system and TVS system  will now be explained in greater detail with respect to FIG. . In the preferred embodiment, reports may be triggered by two possible sources: Scheduled report setup by a CORE order; and, real time report requests as forwarded from the report request\/Report Manager Server . The report generation process is hereinafter described with respect to real-time reports from the StarWRS system.","As mentioned, requests are received in real-time from the Report Manager Server  which either passes on-demand reports from an end-user, or reports that it has internally scheduled via Report scheduler server . In the TVS server , a report manager proxy process \u2033 gathers information about the reports to be generated from the reference database  by determining whether the report request may be fulfilled by statistics processing, or the CDR's. If CDR's are needed, a determination is then made as to which database contains the necessary data. Additionally determined is whether the needed CDR data to fulfill the request spans a long period of time, e.g., several days. Once these determinations are made, the request is sent to the appropriate DMQ queue , , . . . , , or via the report manager proxy process \u2033.","For the scenario requiring generation of call detail data (\u201cCDT\u201d) reports, i.e., those requiring Call detail records, the destination of the report, e.g., StarWRS Inbox server , fax, U.S. mail, etc., is determined from the reference database . Then, the requested data is gathered based on the metadata request, analyzed, and formatted by various corresponding report generation \u201cCDT\u201d processes indicated in  as CDT process , . . . , . Although not shown in , it should be understood that reference data that originates from CADB and COMS may be necessary to complete these reports. Furthermore, although not shown, the TVS server is provided with an additional set of queues and CDT processes for each of the CDR processing to allow longer reports to not interfere with shorter reports. If the requested report is destined for MCI Mail delivery (Fax, Mail, US Mail): then the data is formatted with headers, page breaks, line numbers into a report that is saved to a file. The report is then sent to an Internet Gateway , e.g., the MCI Mail Internet Gateway via SMTP for delivery by MCI Mail. Once the file is successfully sent it is deleted, thus allowing for report generation to continue when the MCI Mail Internet Gateway is not available.","If the report is destined for the StarWRS Inbox server , the data is formatted in a comma separated value (CSV) format and sent to the Inbox via FTP. The Inbox is notified via TCP\/IP that the report is complete by the inbox send process and that the appropriate metadata is available for report presentation via the report viewer.","An identical process is implemented for those customer report requests for aggregate data, i.e., statistics. However, the data that is gathered and analyzed is retrieved from a report generation process  which retrieves the requested report data from the statistics database .","As described herein, when the user requests call detail for a particular period of time, this request is translated by the StarWRS component into a metadata file which is sent to TVS in the manner described herein. Users schedule reports for execution using the Report Scheduler in StarWRS in the manner as described herein and in commonly owned U.S. Pat. No. 6,631,402. When the user has completed report selection, modifications and scheduling, the StarWRS Report Scheduler component  creates a metadata message comprising this information which file is passed to TVS in real time. The TVS then uses this file to formulate a query and runs the report for the scheduled time period.","After TVS runs the report, TVS sends the report to the Inbox server component  of StarWRS immediately after they are completed.","RTM","As further shown in , the nMCI Interact's web-based front-end and middle-tier TVS system infrastructure  implements processes enabling customers to monitor in real time, their network traffic call detail statistics, in real time, via TCP\/IP connections  and . As shown, customer requests are entered by the customer  via an RTM graphic user interface and preferably communicated over secure TCP\/IP socket connections for input over the firewall  to at least one secure server, e.g., a DMZ RTM Web Server  () that provides for authentication, validation, and session management in the manner as described herein.","Particularly, the user first establishes communication with the RTM Web server  (), Dispatcher and StarOE systems to enable logon, authentication and verification of Real Time traffic Monitor entitlements, as described above with respect to . If the customer subscribes to Real Time Monitor, a Traffic Monitor icon  ()) is automatically enabled when the home page appears.","The process flow  for implementing real time monitoring of a customer's network traffic is shown in )-(). Preferably, as shown in ), in response to selecting the RTM function, at step , a hot link connection to the TVS CGI\/HTML implementation of RTM is in order to initiate a second security\/authentication process and verify the Unpriced data RTM products for which the customer is provisioned. With more particularity, the user connects to the RTM URL. and checks the RTM Web Server implementing an HTTP Post method. In response, the RTM Web Server generates a cookie and implements the RTM Web Server common gateway interface protocol (\u201cCGI\u201d) to send a validation request to TVS via TCP\/IP with the cookie. TVS server  validates the logon request by referencing Level of Service tables (not shown) provided in the Traffic View server that confirm the customer is enabled for RTM, as indicated at step . The TVS server stores user information with the cookie, and returns the validation information to the Web Server. Next, via CGI, an HTML page is sent to the user as indicated at step  presenting the user with an RTM screen and menu options, as indicated at step , thus allowing customer access to all RTM functionality which that user is entitled. As will be explained, this functionality includes interaction with the RTM application to formulate and transmit requests and receive the results. For example, the user may select the tollfree numbers to be tracked, enter a polling period, and define the call detail statistics desired.","From an RTM window provided on a web-screen page, the customer is enabled to select or modify his\/her predefined RTM use profile, as indicated at step , ). Specifically, the customer may create or edit their user profile, for example, by entering selection criteria such as: 800\/8xx or Vnet number to report, a polling interval, and time zone. The user may also delete a user profile. The entered selection criteria may be saved by the subscriber as a new user profile for storage in the TVS server Level_of_use tables, as indicated at steps  and , or submitted directly to the TVS server, as indicated at steps  and . It should be understood that all TVS RTM functionality as described in commonly owned U.S. Pat. No. 5,825,769, entitled SYSTEM AND METHOD THEREFOR OF VIEWING IN REAL TIME CALL TRAFFIC OF A TELECOMMUNICATIONS NETWORK, the contents and disclosure of which is incorporated by reference as if fully set forth herein, may be available to the customer.","If, at step , the subscriber has selected a previously defined use profile, as indicated at step , the subscriber may modify the profile, i.e., 800\/8xx or VNET number to report, polling interval, and define statistics, as indicated at step , and submit it directly to the TVS server, as indicated at steps  and  ()).","At this point, the user can interact with the RTM application to formulate a request, transmit it and receive the results according to the user-selected tollfree number(s) to be tracked, polling period and defined statistics desired.","Briefly, after receiving the request, at step , ), the TVS formulates a query and submits the query to the call detail database which is the repository of all call detail records for the particular number selected. The TVS server selects the call detail data in accordance with the user profile or selection at step , and passes the data to the RTM Web Server which formats the data into an HTML table, as indicated at step . This HTML table is sent to the user's browser at step  and the process continues at step  for each successive polling interval until the user terminates the request.",{"@attributes":{"id":"p-0339","num":"0339"},"figref":["FIG. 24","FIG. 24"],"b":["20","590","52","593","52","550","595","550","598","593","20","590"]},"In view of the foregoing, a subscriber via a client workstation running a Web browser can monitor in real time, or, in addition, using the RTM system, has the ability to monitor in substantially real time, the operation of the network as it relates to the calls directed to that subscriber's special service call number(s). For example, the subscriber may see in real time how many calls are being attempted minute by minute, how many calls are being allowed through the network, how many calls are incompletes, how many calls are blocked, etc. This ability to monitor the operation of the network gives the subscriber the ability to decide in real time the specific actions that need to be taken. For instance, if there is an abnormal number of incompletes for a given period, the subscriber can look at the specific call records that made up those incomplete calls. In the manner described herein and in co-pending U.S. Pat. No. 7,574,661, the subscriber may then request the management of the network to restructure the network so as to reroute the incoming calls of the subscriber to different locations where they may better be handled.","Service Inquiry","Another application of the suite of telecommunications network applications is the networkMCI Interact Service Inquiry (\u201cSI\u201d) application which is a web-based network management product that enables customers to manage, i.e., create, status, and display service requests (\u201ctrouble tickets\u201d), to the enterprise service provider (MCI). Particularly, through a client application GUI, customers have the ability to create and query trouble tickets (\u201ctickets\u201d).",{"@attributes":{"id":"p-0342","num":"0342"},"figref":"FIG. 2","b":["36","40","36","26","20"],"i":"a"},"As in any of the above-described suite of telecommunications network applications, the Service Inquiry application utilizes the Common Objects application framework (COF) to inter-operate with the networkMCI Interact back plane and integrate with the other elements of the networkMCI Interact architecture. The Common Objects framework is utilized to leverage existing infrastructure services such as logon and authentication, transaction management, and security. Particularly, the Service Inquiry application extends the COAppImpl class in order to inter-operate with the Interact back plane and other networkMCI Interact applications (as required), and, includes one or more screens derived from the COAppFrame class. Most of the high level classes dealing with the initiation of transactions are utilized by Service Inquiry. The COClientSession class is available to the Service Inquiry application upon successful login to the networkMCI Interact system and is utilized for session management (e.g., connect, disconnect, and logoff). The family of COTransaction classes is used to send and receive messages to the backend Service Inquiry service. These classes include CONonblockTransaction, COSynchTransaction, and COAsynchTransaction and, a COBulkTransaction may also be used if necessary. Additionally, the SI utilizes all of the COCommunications classes with the exception of the COBulkTransaction. However, as development and testing continues, the COBulkTransactions class may be utilized.",{"@attributes":{"id":"p-0344","num":"0344"},"figref":["FIG. 25(","FIG. 3"],"i":["a","a"],"b":["2200","2250","2300","36","36","40"]},"The Service Inquiry communications and application server packages provide the framework for transporting client messages to the mid-tier application server for invocation of domain objects. The domain objects encapsulate the logic to translate the actual client messages and deliver the request to the backend services. The response from the backend service is then received by the application server and returned to the originating client. The framework enables customers to develop the business logic independent of the underlying transport layer and negate the need to modify the transport layer whenever a new domain model is introduced into the framework. The separation of the framework from the domain is accomplished through the use of reflection by dynamically loading and executing the business logic at the application server once the client request specification is received.","As described herein and in greater detail in commonly owned U.S. Pat. No. 6,859,783 entitled INTEGRATED INTERFACE FOR WEB BASED CUSTOMER CARE AND TROUBLE MANAGEMENT, the contents and disclosure of which is incorporated by reference as if fully set forth herein, the SI application serves  interfaces with the Legacy Backend (), CSM\/SI through a Requester object  and Receiver object  as shown in ). Particularly, the SvclnqCSMRequester object  is the class that represents the requester which takes the request data that comes from the Front-End\/Client application through the Transaction Manager , builds the CSM\/SI request transactions by interacting with the Translator classes  and ships off the requests to CSM. The request data that comes from the Front End\/Client is an array of strings that are required from the customer for the request to be made. Minimal information is passed from the client to reduce the communication overhead from the client to the SI application server. All other information is packaged in the Requester. Particularly, the Requester object  uses the SyclnqRegistryHeader and SvclnqSlHeader classes in the Translator  to build the \u201cRegistry Header\u201d and \u201cSI Header\u201d strings that are required for the CSM\/SI request transactions. It also talks to the SvclnqActivity or the SyclnqRemarks classes to build the data portion of the CSM\/SI requests. Once the CSM\/SI Transaction String is formatted the actual request to CSM is made. Sending the transaction to CSM's Standard Interface (SI) via Registry classes does this.","The receiver object is an instance of the SIRegistryHandler class whose responsibility is to obtain the responses from CSM, parse the response, strip off the headers and build objects from the response data, by interacting with the Translator classes . Particularly, it uses the SvcInqRemark, the SvcInqActivity, the SvcInqTroubleTicket or the SvcInqRegistryEntry class in the Translator to build the remark, activity, detail or list of Ticket object from the response string that is received from CSM. The built object is then sent back to the Transaction Manager  who passes it back to the Front-End\/Client.",{"@attributes":{"id":"p-0348","num":"0348"},"figref":["FIG. 25(","FIG. 25("],"i":["b","b"],"b":["36","2501","2320","2500","2502","36","2503"]},"In operation, the Transaction Server receives a client transaction request, as shown at step . The connection is accepted and Transaction Handler thread is removed from the thread pool for execution, as indicated at . The Transaction Handler unpackages the transaction request at step  and puts the request message into the Transaction Manager's RequestQ. The Transaction Manager  removes the request message from its RequestQ at step  and spawns a Transaction Executer thread to execute the transaction. Then, at step , the Transaction Executer translates the message and executes the transaction by loading the domain class and invoking the specified method which send the request to the backend services.","As indicated at step , the backend service responds by sending the result of the transaction to the Registry Server which accepts the connection. At step , a Registry Handler is removed from the thread pool for execution for performing translation of the received message and placing the result into the Transaction Manager's ResponseQ, as indicated at step . The Transaction Handler retrieves the transaction result from the ResponseQ at step . and the transaction response is delivered to the client at step .","The mainframe legacy backend () \u201cRegistry\u201d is the cross-platform communication mechanism that is used by Service Inquiry to send messages to and receive messages from the CSM host. It shields applications from network protocols. CSM is provided with a mainframe database (not shown) that provides a set of Transactions to request CSM information through its Standard Interface (SI) which uses Registry as the messaging system. The Service Inquiry Application Server  is configured to communicate asynchronously with CSM using Registry's RQS as the Inter-Process Communication (IPC) mechanism. Since CSM supports only one-way messaging, the communication between Service Inquiry and CSM\/SI is asynchronous. When CSM () receives a request from the Requester, it does not send any acknowledgment back to the requester. The requester only receives a confirmation from Registry that the request was successfully sent. When CSM finishes processing the request, it sends the response to the Receiver.","Registry configuration consists of configuring the Registry client which sends request messages to CSM from the Service Inquiry Requester and Registry server that receives responses from CSM and passes it to the Service Inquiry Receiver. As shown in ) the Registry Queuing system, RQS is an asynchronous mode of inter process communication where there is one queue on the client and one on the server and there is only one TCP\/IP connection always open between the client and the server. The client puts its requests on its own local queue  and it is then forwarded to the queue on the server. The server takes the request off the queue, processes the request and the response messages are put in the client's queue . Since there is only one TCP\/IP connection at any given time between the client and the server this mode is very efficient in terms of both network and system resources.","As in the other application of the nMCI Interact suite, the Service Inquiry client application is written as a Java application to be executed at the client web browser running, for example, Microsoft Internet Explorer 4.0. The Service Inquiry client will be started from the networkMCI Interact homepage upon selection of the service inquiry icon  shown in the home page () of ).",{"@attributes":{"id":"p-0354","num":"0354"},"figref":["FIG. 25(","FIG. 25("],"i":["c","c"],"b":["2400","2400"]},"With more particularity, the menu bar  consists of the following items that correspond to the associated functionality: a File option including selections for creating a new ticket or new query, opening an existing query, saving a query being edited; printing and exiting the SI service; an Edit option including selections for querying on a specific ticket number, closing a currently selected ticket, or referring back to a currently selected ticket; a View option including selections for showing details of a currently selected ticket, and refreshing current query results; a Tools option including selections for sorting tickets in the active window; and, a Help option. The tool bar  provides a Create button  for creating a new ticket, a Query button  for generating a new query, and, a find button  enabling queries on a specific ticket number.","The Query component of the Service Inquiry application enables Service Inquiry users to query trouble ticket information within the system, i.e., the listing or viewing of tickets based on, e.g., different selection criteria. This component also allows provides users with the ability to add remarks to tickets. A Default Query functionality is provided that allows users to keep a dedicated query available at all times. This query enables users to monitor the subset of tickets that are of most interest to them. A refresh mechanism is additionally provided so that the user may keep up with as current a status of these tickets as needed. The Default Query may be executed and displayed immediately on startup of the Service Inquiry application and is available throughout the Service Inquiry session. Preferably, the Service Inquiry application includes a set of predefined queries, one of which is preset as the Default Query and which may be redefined at any time. The user can only set their Default Query from a saved query.","To create a new query, e.g., upon selection of the \u201cQuery\u201d button  from the tool bar , a \u201cCriteria\u201d window is displayed such as the example window display  shown in ) which enables the customer to select from among the following criteria to be used in the query: priority, status, identifier, open date, and ticket number. As criteria are selected from the \u201cCRITERIA\u201d tab , new tabs (not shown) appear that are associated with the selected criteria. It is from these tabs that the actual parameters are specified for which the query is executed against. As the query is built, the parameters that are selected will populate themselves in the table  to the right of the tabbed panel. At any point in this selection process, the user may perform the following: move back and forth to any criteria tab by selecting the \u201cBack\u201d and \u201cNext\u201d buttons , respectively, or selecting the desired tab directly; add or remove criteria tabs by selecting or deselecting the associated checkbox from the \u201cCRITERIA\u201d tab ; execute the query by selecting the \u201cExecute\u201d button ; save the query by selecting the \u201cSave As\u201d button ; remove highlighted parameters in the table by selecting the \u201cRemove\u201d button ; or, remove all parameters in the table by selecting the \u201cRemove All\u201d button ","As an example, a \u201cList Tickets by Status Request\u201d transaction will provide all the tickets for a given organization (ORG) code with the requested status and created after a specified date. The ORG code to be passed in this transaction is one of the selection criteria representing the originating organization or the organization where the ticket was created. The customer may choose from a list of ORGs that the customer has authority over and a primary ORG is obtained from every customer and is stored locally in the user profile. The resulting information from all of the tickets will be cached for future processing. Generally, only one type of status may be specified in a single request: Open, Closed, Referred or Cancelled status. If a customer has authority over more than one organization that customer is able to view tickets for any organization he\/she has authority over. If a customer has access to a primary organization, then he\/she has implied access to all the subordinate organizations meaning that the request will apply to the subordinate organizations as well. Furthermore, this transaction may only display some of the details\/fields of the tickets which means that the data cached from this request may only be used to process the Queries on tickets. It cannot be used to view all the details of the tickets for which further CSM\/SI transactions will have to be made as will be herein described.","Once the query is specified and executed, the \u201cQuery Results\u201d window such as provided in the example window  of ) is displayed to present the results of the query in a table . Preferably, these results may be sorted by column by either clicking on the column in the table to sort by or by selecting \u201cTools\/Sort\u201d from the menu bar . Selecting \u201cTools\/Sort\u201d from the menu bar will initiate display of a \u201cSort\u201d window such as the example display  shown in ) which is capable of a three level sort by column in the table. The table columns can also be reordered by dragging and dropping them to their desired locations. Details of a particular ticket may also be viewed.","The ability to save and retrieve queries allows a user to persist queries not only for the current session but for future sessions as well. This gives the user the ability to define a query once, then save it such that there will be no need to define it again, i.e., all the user needs do is retrieve and execute it. To save a query, the user must first create the query and then select the \u201cSave As\u201d button which enables display of the \u201cSave As\u201d window such as the example window  shown in ). This window enables a user to select from the list of existing saved queries or type a new name in entry field . If an existing saved query is selected its query will be copied over and its name will refer to this new query. A checkbox  is available to designate this new query as the Default Query. To retrieve a saved query, e.g., upon selection of the \u201cFile\/Open\/Query\u201d from the menu bar , an \u201cOpen Query\u201d window such as the example window  shown in ) is displayed which provides a list of all saved queries. Once the desired query is selected the user may perform the following: execute the query, i.e., run the query and display the results in the \u201cQuery Results\u201d window or the \u201cDefault Query\u201d window if the user selects it as their default query; or, edit the query by bringing up the \u201cCriteria\u201d window  ()) with the appropriate parameters already in the table.","The customer may then view the results of a query, i.e., the details, remarks or activities of a Ticket chosen from a list of Tickets. To view the details of a ticket, the user may either select it from the query results and select \u201cView\/Details\u201d from the menu bar or double click the ticket in the query results. Particularly, a \u201cDisplay Ticket Request Transaction\u201d (CSM\/SI transaction) may be used to obtain the details, activities and remarks of a ticket. This transaction allows several display requests to be made, e.g., by setting corresponding flags to \u2018Y\u2019. Whenever the customer wishes to view details, remarks or activities of a particular ticket, this request will be made with all the three flags set and the ticket number stuck into the SI header which will generate three or more responses. The \u201cDisplay Detail Response Transaction\u201d is a response that returns all the data elements corresponding to a given ticket in a \u201cDetails\u201d window such as the example window  shown in the ). This window  provides information about the selected ticket including: ticket number, ticket priority, ticket status, ticket identifier, ticket product, ticket service, date occurred, trouble description, and organization (ORG). It should be understood that the number of data elements will be different for different types of tickets.","Alternately, to find a ticket, e.g., upon selection of the \u201cFind\u201d button  from the tool bar , the CSM\/SI Transaction, \u201cDisplay Ticket Request Transaction\u201d is invoked, where the ticket number is passed on the request for handling as described above. It should be understood that, in the preferred embodiment, a \u201cChange Ticket Request Transaction\u201d may be implemented allowing the customer to change some of the fields of a ticket that is already created. This restriction is enforced by the GUI as this CSM\/SI transaction does not impose any such conditions on the field being modified.","Remarks are comments added to a ticket for historical purposes and can aid in the resolution of the problem. A customer must be viewing the particular ticket's details that contain the remarks desired. The \u201cDisplay Remarks Response Transaction\u201d is a response that shows all the comments added on the ticket either by the customer or by the enterprise (MCI). The CSM legacy system supports \u201cpublic\u201d and \u201cprivate\u201d remark types. Thus, from the \u201cDetails\u201d window  shown in ), the user may click on the \u201cRemarks\u201d button  which will bring up the \u201cRemarks\u201d window such as the example window  shown in ). From the remarks window, the remarks for that ticket are displayed. It should be understood that remarks may be added to a ticket for historical purposes, e.g., to aid in the resolution of the problem. From the \u201cRemarks\u201d window the customer may click on the \u201cAdd Remarks\u201d button  which enables display of the \u201cAdd Remarks\u201d window (not shown) which allows the customer to add remarks to that Ticket. Thus, by implementing an \u201cAdd Remarks Request Transaction,\u201d the customer may add remarks on a ticket that is in an open status at any time. This may be used as a final step, just after creating a ticket, for example, to enable the customer to describe the trouble in his\/her own words or add any comments. This transaction returns a success or failure response.","Activities are events that occur to a ticket throughout its lifecycle. These events include changing status, changing priority, and reassignment of the person working the ticket. The customer must be viewing the particular ticket's details that contain the activities desired. The \u201cDisplay Activity Response Transaction\u201d is a response that provides all the activities, i.e., actions that have been taken on the ticket. Specifically, from the \u201cDetails\u201d window  ()), the customer may click on the \u201cActivities\u201d button  which will bring up the \u201cActivities\u201d window  such as shown in the example screen display of ). From the activities window, the activities for that ticket are displayed. This is a useful transaction in checking the status of a ticket and, it aids in tracking a ticket as it shows which organization the ticket is currently in.","The create component of Service Inquiry application provides Service Inquiry customers with the ability to create a ticket within the system.","The first step in the creation of a trouble ticket is to identify the Event-Type\/Call-Type of the problem which is basically the way CSM handles different problem types and is required for most CSM\/SI transactions. To do that the client front end asks the customer the problem\/identifier type and then narrow down the problem by having the customer choose from a list of Product types, Service types and Trouble Descriptions as described herein with respect to ). Based on these choices the system maps it to the correct Event-Type\/Call-Type which mapping is done using database tables stored locally on the client. Once the Event-Type\/Call-Type is determined, the data fields that correspond to that Event-Type\/Call-Type is obtained from the database tables. The information required for all these fields is then gathered from the customer by presenting appropriate questions. Once all the required information is available, the system performs an \u201cOpen Ticket Request Transaction\u201d and passes all of the data fields. The CSM legacy system then attempts to open a Trouble Ticket based on the data passed, and performs an \u201cOpen Ticket Response Transaction\u201d to indicate if the ticket was created successfully along with the ticket number. Based on this response a confirmation message along with the ticket number is displayed to the customer.","As an example, to create a service request from scratch, the customer may select, for example, the \u201cCreate\u201d button  from the tool bar  of ). This will initiate display of a \u201cCreate\u201d window such as the example window  shown in ). From this window, the customer provides answers to the questions for each tab  shown as questions , and clicks the \u201cNext\u201d button  when ready to go to the next set of questions. As the next tab appears, the answers from the previous tab populate the table . The user may navigate via the \u201cBack\u201d and \u201cNext\u201d buttons or by using the tabs. In the preferred embodiment, the questions are dynamic depending on previous answers. Thus, if the user goes back and changes the answer to a question that later questions depend on, then those questions will be overwritten by the new set of questions. The user will be warned if this is the case.","Once the ticket is opened, it has to be referred out to a \u201cCustomer Facing Organization\u201d to initiate the problem resolution process. To do this, the CSM system refers the ticket out to an organization obtained from the user up front and stored in the User Profile. This is done using an \u201cEnter Activity Request Transaction\u201d which allows the customer to enter different activities like \u2018Refer Out\u2019, \u2018Close\u2019, \u2018Refer Back\u2019 and \u2018Open\u2019 on a ticket by passing the appropriate activity code.","Finally, the SI application allows the customer to close the ticket by using an \u201cEnter Activity Request Transaction\u201d described with respect to ticket creation. When a customer wishes to close a ticket, the system will make this transaction on behalf of the customer by passing the activity code for \u2018Close\u2019. A customer is allowed to close a ticket only if it were created by that organization and if the ticket is currently in that organization, i.e., it has been referred out to that organization. Since only the organization that opened the ticket has authority to close it, once a ticket has been resolved the ticket is referred out to the customer's organization. If the customer is not satisfied with the problem resolution, that customer may refer the ticket back to the enterprise (MCI). This is also accomplished using the Enter Activity Request Transaction. Again, the system will make this transaction and pass the activity code for \u2018Refer Back\u2019.","The creation of trouble tickets through Service Inquiry will now be described in greater detail in view of ). In the preferred embodiment, the Service Inquiry application implements a domain object model (DOM)  that allows the collection of information regarding a problem with a product offered by MCI. The questions that need to be asked to open a ticket vary by product and problem type. In addition to specifying a problem with a particular product, Service Inquiry provides the user with the functionality to perform queries for Trouble Tickets and to view the details of Trouble Tickets. The DOM's responsibility is the creation and query of Trouble tickets and it accomplishes its tasks via interaction with the client presentation layer and interaction with the back-end systems. Information that is gathered via the presentation layer is used to construct backend transactions. The information returned from these backend transactions is formatted to DOM classes, which are forwarded to the presentation layer.","As shown in ), the TroubleTicket  is the root of the Service Inquiry DOM. TroubleTicket instances contain identifying information that is used by the presentation layer to sort and filter a collection of TroubleTickets. The TroubleTicket class is responsible for accepting requests from the presentation layer, forwarding the requests to the backend and returning results to the presentation layer. In addition to maintaining identifying information, a Trouble Ticket also contains references to a QuestionTree  and a Registry .","Specifically, a Question Tree  is comprised of three Domain Classes: QuestionTree , Question  and RegistryEntry . QuestionTrees  are essentially a set of questions for a particular product and problem type. The QuestionTree is responsible for the grouping of questions and the navigation between the groups. In addition, a QuestionTree knows if it has been completely specified, i.e., all of its required Questions have been answered. Within a QuestionTree, the group or category is designated by a unique name String). Preferably, questions are stored in a hashtable (not shown). A group name is the key and a vector of Questions is the value for each entry in the hashtable. The order of the groups is significant and since hashtables do not maintain order, a vector of Group names is required. This Vector of names is used for some of the navigational behaviors of a QuestionTree.","The Registry  is responsible for maintaining collections of objects that represent information retrieved from CSM via the client interface. The collections of objects represent Remarks, Details and Activities in CSM. Remarks and Details are also represented by vectors of instances of a \u201cRegistryEntry\u201d class. Activities are represented by a vector of instances of the Activity class  which is an information holder having instance variables containing information that corresponds to fields in the CSM\/SI Activity Record.","The RegistryEntry class is a class in the ServiceInquiry DOM comprising instances that are used by Question instances  and instances used by Registry instances . When used by a Question, RegistryEntry instances  represent the possible choices for answers to the Question. Once the user selects a RegistryEntry \u201cchoice\u201d, this RegistryEntry instance becomes the answer to the question. When used by a Registry, the RegistryEntry instances represent remark or detail information respectively, that is retrieved from CSM\/SI. Specifically, RegistryEntry comprise the following instance variables: 1) a Text instance variable which is an optional variable used to specify text that will be presented to the user as a choice for an answer to a Question if the value is different than that specified by the registryValue; 2) registryKey instance variable which maps to a key in CSM\/SI; 3) a registryValue instance variable which maps to the value in CSM\/SI specified by the key in registryKey; 4) a nextGroupID instance variable which is an optional field used by the Question to assist the QuestionTree in some navigational tasks; and 5) a question instance variable which is a reference to the Question instance to which this RegistryEntry belongs. A RegistryEntry is contained by its Question; this instance variable is a back-pointer.","The Registry Classes, i.e., classes that represent CSM\/SI Registry records, have two additional responsibilities that are variations of a single behavior. The Registry Classes (RegistryEntry and Activity) are used for communication between Service Inquiry and CSM\/SI. CSM\/SI requires Remark, Detail and Activity information in fixed-length field record format; Service Inquiry requires Remark, Detail and Activity information in Java object format (instances of RegistryEntry or Activity). To provide these two formats, the Registry Classes contain behavior to convert instances to fixed-length field record format and to instantiate themselves from fixed-length field record format.","Questions are the main component in a QuestionTree. A Question has a vector of group identifiers that indicate the groups to which it belongs. A Question has a vector of RegistryEntry instances called choices. When the user \u201canswers\u201d the Question, the answer is set to the selected choice; i.e. the selected RegistryEntry. Short answer or text answer questions are a specialization of this behavior. Within each group of Questions, there is one question that is designated as the decision point which is used to determine the next group of Questions that need to be presented to the user. As a Registry Entry may contain a nextGroupID, the nextGrouplfl of the RegistryEfltry instance selected as an answer to a decision point Question is used to derive the next group of Questions. Occasionally, the only difference between the two groups of Questions is the inclusion or exclusion of a particular Question. One solution is to create two identical groups, one with the optional question and one without and rely on the decision point mechanism. In the preferred embodiment, an optional parent-child relationship between Questions is created. The inclusion\/exclusion of a Question (child) in a group is based on the answer to a previous Question (parent). A child Question maintains a reference to one of the possible choices (RegistryEntry) of the parent Question. If the parent Question's answer is the same as the child Question's parent Answer, the child Question is included in the group; otherwise, it is excluded from the group. Details regarding the process by which a system administrator may generate trouble ticket queries corresponding to particular types of trouble tickets are provided in above referenced, commonly owned U.S. Pat. No. 6,859,783 entitled INTEGRATED INTERFACE FOR WEB BASED CUSTOMER CARE AND TROUBLE MANAGEMENT.","TFNM","As mentioned above, another application of the suite of telecommunications network management applications is the toll free network management tool  as shown in . Referred to herein as \u201cTFNM,\u201d the toll free network management tool  provides the client GUI and middle-tier service that enable customers to request, specify, receive and view data pertaining to their toll free network management assets, e.g., toll free number routing plans, and to generate orders for changing aspects of the routing plans via a World Wide Web interface. Particularly, customer directives are entered by the user  via a TFNM graphic user interface. These directives are preferably communicated as Java applets over secure TCP\/IP socket connections for input over the firewall to at least one secure Web server , e.g., a DMZ Web server that provides for authentication, validation, and session management in the manner as described herein. In view of , as will be described, the TFNM tool  implements a TFNM domain server  which is one component part of a back-end MCI infrastructure comprising: MCI's NetCap system , a Service Control Manager (\u201cSCM\u201d), and Data Access Points (\u201cDAP\u201d). Particularly, the legacy NetCap order entry system  processes (i.e., edits, validates, logs) call routing feature orders for customer's 800\/8xx traffic and submits orders to the Service Control Manager (\u201cSCM\u201d) which then formats and distributes orders to each of three redundant data access points (\u201cDAPS\u201d) which implements the plan orders at the network switches. Once an order is implemented on the DAPS, calls to the customer's 800\/8xx number are processed with the features specified in the order. The TFNM server  interfaces with the \u201cNetCap\u201d  mainframe system that provides user interface to the network control system, i.e., DAP switches . The TFNM domain server  includes Java object classes whose methods are invoked by Java applets running on the customer browser. The browser Java applets specifically execute the customer directives by invoking certain methods on the TFNM Domain server . These Java objects additionally provide the interface functions to the NetCap . In the preferred embodiment, the Java objects at the TFNM domain server function as a proxy, and are invoked remotely implementing a Java remote method invocation \u201cRMI\u201d-like methodology.","Particularly, as described herein with respect to , within the networkMCI Interact framework for producing Java applications over the Internet, there is provided common objects and an infrastructure allowing secure communications between a client (which resides on a browser) and a server (which resides safely within MCI's firewalls). As briefly mentioned, the security strategy includes: encrypting communication from the client to the web-server via SSL (HTTPS) and implementing HTTPS as the preferred method for allowing communication into the web server from the Internet; providing an additional firewall between the web-server and the dispatcher to allow only specific traffic from the web server to the dispatcher to occur; encrypting traffic between the web server and the dispatcher via DSA encryption; and enabling the dispatcher to validate all packets destined to internal MCI servers to ensure that they are from an authenticated client, and that a particular client has permission to communicate with a specific back-end server. To make this seamless for the client, the aforementioned set of common objects performs this messaging. In the preferred embodiment, the invention implements a modified RMI which is referred to as \u201cCORMI\u201d (Common Objects RMI) which provides an RMI-like interface between the client and the server using the networkMCI Interact protocol. The CORMI procedures implemented have additional controls built in to provide the necessary session security and maintenance for communication over the firewalls.","More specifically, CORMI is nMCI Interact's protocol for providing secure, client-to-server communication with Java RMI-like semantics and comprises a library of Java classes used by both the client applet and server application. In view of , the communication path from the client and the server is as follows:","The TFNM server application  registers remote objects with CORMI's CORemoteSessionServer (analogous to Java RMI's Registry service) and then blocks waiting for connections. The TFNM client applet initiates communication by performing a logon through a COClientSession object. The COClientSession creates a COSynchTransaction (an atomic unit of work based over an HTTPS socket) which connects to the MCI Interact system dispatcher server  (which is behind the outer firewall ()) and interfacing with StarOE server . The dispatcher server  validates the client's authorization to logon (a process that involves contacting the StarOE service and generating a session key with a \u2018cookiejar\u2019 process). After validating the client, the dispatcher uses a round-robin protocol to select a TFNM server and then opens an HTTPS connection to an instance of the TFNM server application. On this server, the CORemoteSessionServer creates a new session for this client and records the session key.","A reply to a logon is sent back through the dispatcher server  to the client . The client then can do a lookup which results in a serialized remote interface of the remote object registered earlier being passed back to the client. The client can then use this remote interface as it would with Java RMI-doing remote method invocations. The remote method invocations are handled by CORMI as COSynchTransactions through the dispatcher to the same TFNM server instance that the logon and interface lookup took place at.","It should be understood that there is no permanent connection between the TFNM client and server; CORMI, through a COSynchTransaction, creates a new HTTPS connection to the dispatcher (and the dispatcher creates a connection to the TFNM server) for each unit of communication.","After the above-described logon, authentication and entitlement processes, the user is presented with the nMCI Interact home page ()) whereby the user may select the Network Manager icon  to enter into the TFNM system. Upon selection of the Network Manager icon, a client TFNM application is downloaded to the customer who is presented with the TFNM web-page display , such as shown in )-(). As shown, this TFNM web-page display presents a variety of TFNM file menu options including: 1) an option  enabling a user to select a Corp ID, i.e., a corp, set, number, and plan to establish a working environment; 2) an option  enabling a user to cut-through to a 3270 mainframe NetCap application; 3) an option  enabling a user to Implement Plan, i.e., put a plan in use by creating an IMPL order; and, 4) an option  enabling a user to modify the termination information on a plan by creating a QUIK order. As further shown in ), the open menu includes a Plan option  which allows the user to select from a list of plans in the current working environment and enables opening of the plan in a graphical mode on a VORT (\u201cView Only Routing Tree\u201d), as will be explained; and a Tree View option  which displays the last plan accessed on the VORT screen. As further shown in ), the report menu includes an option  for allowing the user to set up and execute an order filter query which results in the display of an order list, as will be hereinafter described in greater detail.","Thus, the customer is enabled to select a view of his\/her routing plans in accordance with that user's privileges. To determine privileges, TFNM user security profile information is requested from StarOE that comprises a list of Corp Ids and AccessId combinations, referred to herein as \u201cRACF ID\u201d combinations that the customer is allowed to access within TFNM. Particularly, user security profile elements obtained from StarOE include: Corp Id, i.e., the Corporation Id the customer user has access to within StarOE; and DefaultInd, i.e., a default CorpId indicator having, for example, \u2018Y\u2019 or \u2018N\u2019 values.","Once the customer has logged into TFNM and has received the StarOE security message, a communication is made from the TFNM server  to NetCap  requesting a user security profile. Particularly, the messaging system implemented for all communications between the TFNM server and NetCap is referred to herein as \u201cRegistry\u201d, such as shown and described in commonly-owned U.S. Pat. No. 5,790,809, the contents and disclosure of which are incorporated by reference as if fully set forth herein. Security from NetCap is by Racf Id and Corp Id. For each Corp Id a user has access to, that user must have a Racf Id. If a user has Enterprise level security, then the list of Corps under that Enterprise within NetCap have the same security as the Enterprise. Particularly, in response to a user login, in the preferred embodiment, a TFNM server application is executed. From this application, the TFNM server instantiates a Profile Manager Java object which is registered with CORM and called upon to invoke further objects relating to the following user profile, e g preferences, user security profiles, i.e., for tracking customer entitlements\/privileges including rights for creating or modifying specific TFNM routing plans or generating QUIK or IMPL orders; and, session management, i.e., objects which encapsulate the state and behavior associated with a specific user login, e.g., time logged in.","In the preferred embodiment, once profile manager is instantiated, the TFNM server additionally instantiates objects related to view screens and options according to the user's entitlements\/privileges. Specifically, a Corporation Manager (\u201cCorpMngr\u201d) object is invoked to enable the user to select the corporation having the desired routing plan to be looked at. Then, the following objects are sequentially invoked: a Set Manager object for the corporation selected; a Number Manager object that knows the TFNM numbers (e.g., 1-800\/8xx) belonging to the Set and\/or Corp; and, a Plan Manager object, which knows the routing plans that belong to the selected corporation, set, and\/or number selected by the user up to that point. It should be understood that the TFNM server is enabled to communicate with NetCap server for this data if not provided in the TFNM database, or, if the information in TFNM is not current. For instance, for some messages, a data sync may always be invoked. Thus, TFNM may contact NetCap and pass date and time stamps indicating the last update for the record. If NetCap determines that they have later data version, it will pass down the updated version, otherwise, it will pass an empty message back to TFNM. Alternately, an internal table , as shown in , may be accessed indicating the intervals for data record updates and which will indicate the last time a data sync was performed for a particular record. By checking this table, a determination may be made as to whether contact must be made to NetCap for a data update.","In the preferred embodiment, as shown in , the TFNM server  communicates a plan\/data sync message  via Registry messaging to NetCap. Appendix A of commonly owned U.S. Pat. No. 6,574,661, entitled INTEGRATED PROXY INTERFACE FOR WEB BASED TELECOMMUNICATION TOLL-FREE NETWORK MANAGEMENT, the contents and disclosure of which is incorporated by reference herein, illustrates the Registry message call \u201cNPSNC\u201d which is the request to sync a plan and transmitted from the TFNM server to NetCap. A variety of Registry response messages for this request is provided in Appendix B of above-referenced commonly owned U.S. Pat. No. 6,574,661.","As shown in ), the File\/Select Corp ID menu option causes a screen  to be displayed in the web page that enables the user to select elements (Corp ID, Set ID, Routing Number) that invoke objects for establishing a working environment, or, to select a plan for view. The data elements displayed on this screen differ according to the type of plan chosen. In the preferred embodiment, the TFNM Network Manager component  enables the customer to create or modify orders for four types of TFNM routing plans: a Number Level Plan (\u201cNLP\u201d), Super Routing Plans (\u201cSRP\u201d), Enhanced Voice Service Routing plans (\u201cEVS\u201d), and universal routing plans (\u201cURP\u201d). As shown in ), Number Level, EVS, or Super Routing plan radio buttons  may be selected to access corresponding visible screen elements. When an NLP plan is selected, for instance, the following elements are displayed: a Corp ID element  which is a single selection list box that becomes populated with corp id's available to the user in accordance with that user's entitlements; a Set ID element  which is a single selection list box populated with Set ID's that the user has security access to for a chosen Corp ID; a Number list box element  which is a single selection list box populated with number information for the indicated corp.\/set; and, a Plan list box  which is a single selection list box populated with plan information such as: a plan description, plan in use, or when the plan was last modified, for the selected number. It should be understood that corporate security is obtained from NetCap whenever a new Corp ID is selected, in the manner described.","In the preferred embodiment, using additional buttons ,  and  from the screen shown in ), the user respectively, is enabled to open or close the \u201cplan\u201d portion of the screen; save the selected corp\/set\/number\/plan id as the user's current working environment; and\/or display a tree view of the highlighted plan.","When the user chooses to view a selected routing plan, and after verifying security with both StarOE and NetCap, the TFNM server may execute the synch process with NetCap  as described above. During this process, TFNM updates any records in the TFNM server copy of the customer's chosen routing plan with changes that were made in NetCap since the user last accessed the system. The TFNM server database is updated with the latest routing plan information for that customer, and the updated routing plan information is sent to the user, as indicated at step . The customer is now presented with the requested routing plan view via the TFNM client application.","A user may view a routing plan in several formats, e.g., a hierarchical tree graphic or a spreadsheet. In the preferred embodiment, as shown in the exemplar screen display  of ), the Routing Plan is displayed as a tree structure comprising of a series of linked node types in a specific hierarchy. As shown in ), the screen is divided into two main sections: a first section  comprising the graphical representation of the routing tree having nodes tree branches that can be expanded and collapsed; and, a second section  for displaying the details of the currently highlighted tree node. The node types that are available include: 1) a Plan node which is shown highlighted in ) and details the features for the plan; 2) an Origination node (\u201cORIG\u201d) which details the geographical elements used in determining where to route the call. Multiple Origination nodes may exist under a plan node; 3) a Day of Week node (\u201cDOW\u201d) which details how to route calls based on days of the week. Multiple Day of Week nodes may exist under an Origination and all seven days of the week must be accounted for under each origination; 4) a Time of Day node (\u201cTOD\u201d) which details specific time ranges for routing calls. Multiple Time of Day nodes may exist under a Day of Week and all 24 hours of the day must be accounted for under each Day of Week; and, 5) a Percent Logical Termination node (\u201c% LTERM\u201d) which details where the calls terminate and at what percentage of the time. As shown in ), multiple % LTERM nodes may exist under a Time of Day. The percentages in \u201csibling\u201d nodes must add up to 100 percent. A user can select details of any node by clicking or scrolling. Trigger Points (not shown) may also be displayed as children of the node they ride on. For example, a Trigger Point that rides on an Origination node would be displayed under the Origination on the same level as a Day-of-Week node. At each node, decisions related to the call routing are executed.","As further shown in ), for a plan node, the corresponding plan detail screen  is populated with the existing plan description; the Orig id of the default orig on the plan; and Origination Features having values derived based on the features in use on the plan. Likewise, for an origination node , the corresponding plan detail screen displays: the ID of the highlighted origination node and the corresponding description including listboxes displaying the geographic elements (countries, states, area codes and exchanges) associated with the highlighted Origination node. For the DOW node , the corresponding plan detail screen displays the Day Id of the DOW node and the list of days associated with the DOW node. For the TOD node , the corresponding plan detail screen displays the list of time ranges associated with the TOD node. For the Termination node , the corresponding plan detail screen displays: the ID of the termination associated with the highlighted node; a description of the termination associated with the highlighted node; an indication of whether a cross corp term is associated with the highlighted node, and, if the Cross Corp Term indicator is \u201cYes,\u201d a field displaying the cross corp Id associated with the termination in the Termination ID field; and an indication of the percentage of calls allocated to this termination node. Further details may be displayed including a Details tab (not shown) for displaying: the customer service id associated with the termination; the activation date of the termination; the activation date received associated with the termination; the service status associated with the termination; the Switch Trunk ID associated with the termination; and, an indication of whether the termination is EVS; whether the Termination has a real-time ANI Delivery and, the activation date for the Real Time ANI. Additionally, an ANI tab (not shown) may be displayed for presenting the user with information as to whether the termination has an Automatic Number Identifier (\u201cANI\u201d), the country code associated with the termination and the Termination ANI. An \u201cOverflow\u201d tab of the termination details screen displays for the user: a network call redirect indicator indicating whether the termination has an NCR; a direct termination overflow indicator indicating whether the termination has a DTO. Likewise, a \u201cDNIS\u201d tab (not shown) may be displayed for presenting the user with information as to whether DNIS\/Enhanced DNIS is active on the termination; the date that DNIS is activated; an indication of whether the Dialed Digit Outpulsing (DDO) is active on the termination; the prefix digits used for DNIS, and the number of digits to be reused for DNIS. Finally, an \u201cInternational Outbound\u201d tab (not shown) may be displayed for presenting the user with information as to whether international outbound is active on the termination; the Country code associated with the termination if international outbound is active; the Carrier code associated with the termination if international outbound is active; and the free phone number associated with the termination if international outbound is active.","Via the TFNM Client Application, the user is now able to invoke TFNM functions such as the \u201cIMPL\u201d depicted in  as the IMPL request  which enables the user to quickly change the number routing plan that a working number or set of working numbers is routing to; or \u201cQUIK\u201d depicted in  as the QUIK request  which enables the user to quickly add, change and\/or delete one or more termination locations, and\/or change the percentage allocation of two or more of these locations, for a currently implemented routing plan. In accordance with the present invention, additional directives may include: a temporary (\u201cTEMP\u201d) IMPL directive which is created in conjunction with an Impl by entering a roll-back date so that the routing plan will revert to its prior use status prior to creation of the Impl; and a TEMP QUIK directive which enables'roll-back of the changes made by a QUIK order to what they were before the QUIK.","For the case when a user desires to implement the IMPL\/TEMP IMPL plan, or the QUIK\/TEMP QUIK, the user selects the Setup IMPL from the TFNM screen. Specifically, the TFNM Client application causes the instantiation of an \u201cOrder Manager\u201d object which invokes methods capable of accessing all the information pertaining to orders for a given corp id, set, TFNM telephone number and plan. An order comprises two components: 1) an order administration record comprising data such as: order status, effective data time and order number, etc.; and, 2) order administration detail record which includes the detailed information pertaining to that order, e.g., changes to percent allocation or effective dates\/times etc. for a plan, etc. The Order Manager object includes an ImplOrder sub-class which knows about IMPL orders, e.g., IMPL functionality, and invokes objects to obtain order records, pertaining to plans. As mentioned, an IMPL order allows a user to change which routing plan they want to be \u201cin use\u201d for a specific number or a set of numbers.",{"@attributes":{"id":"p-0395","num":"0395"},"figref":["FIG. 27(","FIG. 27("],"i":["f","f"],"b":["1670","1671","1672","1672"]},"After having selected the Corp, set, Routing Plan Number or Routing Plan ID, the user may set or modify the routing plan. In the preferred embodiment, the user can define the routing plan according to any of the above-described options: Origin, Country, State, NPA, NXX, Day of week, Time of day, and Termination. These options can be defined for each Corp ID, Set or number. In the preferred embodiment, the user is enabled to implement NLPs, SRPs, and EVSs and URPs for a selected toll free number or, implement NLPs and SRPs for a set of numbers that they want routed differently. Via IMPL request messaging, the user selects the desired routing plan for the number\/set and the desired date and time when they want to start routing the number to the selected plan and forwards the request to the TFNM server via HTTPS messaging.","As shown in , the customer's Send IMPL request  is communicated over the HTTPS connection as a request to invoke methods in the Order Manager class\/sub-classes via CORMI. Once the plan has been submitted to the TFNM server via the send IMPL message , the TFNM server receives the new routing plan and verifies the user's security with NetCap. Once the user's security has been verified, the TFNM server submits the IMPL request to NetCap  via Registry messaging. Particularly, the Order Manager classes\/sub-classes execute methods for translating the IMPL order in a form suitable for submission to NetCap.","Appendix A of above referenced commonly owned U.S. Pat. No. 6,574,661, illustrates the Registry message calls that are transmitted from the TFNM server to NetCap for the IMPL\/TEMP IMPL order and the corresponding NetCap responses. Included is the message for submitting an IMPL order (NIMPL) to NetCap.","It should be understood that, in the case of a user implementing a TEMP IMPL request, the user follows the same procedure as for the IMPL order, e.g., selecting the desired routing plan for the number\/set and Corp Id. However, as shown in ), the user is presented with a dialog  for submitting the desired date and time when the user wants to start routing the number to the selected plan, and, a dialog  for submitting the roll back date and time when they want the previous routing plan to be effective again. Thus, both an IMPL and TEMP IMPL message pair is sent to the TFNM server for processing as described herein.","After a TEMP IMPL and\/or IMPL request has been transmitted to NetCap , it is stored for future implementation. In view of , NetCap sends an acknowledgment via Registry messaging back to the TFNM server.","Appendix B of above-mentioned commonly owned U.S. Pat. No. 6,574,661, illustrates the Registry message calls that are transmitted to the TFNM server from NetCap in response to the submitted IMPL order. Included is the message indicating successful processing of the IMPL request (NSUCS) and the message indicating completion of the order in NetCap (UCOMP). The TFNN server passes this information on to the user via CORMI messaging over the HTTPS connection. If the user is still logged on, this acknowledgment appears as a pop-up message on their screen, as indicated via line  in . The user has logged off, TFNM retains the acknowledgment that the IMPL has been received and saved for the next user logon. Likewise, when an IMPL has been transmitted to NetCap and either implemented or terminated, NetCap sends a registry message back to the TFNM server which, in turn, passes this information back to the user via HTTPS connectivity.","The user of the TFNM system may instead desire to execute the QUIK feature that enables customers to quickly add, change and\/or delete one or more termination locations (nodes), and\/or change the percentage allocation of two or more of these locations, for a currently implemented routing plan, ) illustrates an exemplary web-page screen  instantiated by the TFNM client application for the QUIL\/TEMP QUIK order process which is presented to the user. As shown in ), there is provided a number of radio buttons which the user may select: 1) an 800\/8xx number button  which causes a dialog to be displayed for enabling the user to enter or select an 800\/8xx number from a list of 800\/8xx #'s (not shown) having an associated \u201cplan in use.\u201d Once the 800\/8xx # is entered, the system returns the corresponding NLP or SRP Plan in use; 2) an SRP button  which causes a dialog to be displayed for enabling the user to enter or select an SRP Id from a list (not shown). Once entered, the system returns the SRP Routing Plan for the SRP Id; 3) an EVS button  which causes a dialog to be displayed for enabling the user to enter or select an EVS number. Once entered, the system returns an EVS Plan In Use if available. In each dialog, a corresponding \u201cdata controller\u201d object is invoked for retrieving information from a TFNM database causing a corresponding dialog to appear enabling user selection.","After selecting the desired plan, the user is required to key or select each of the following buttons: Origination Id\/Description , Day of Week Id\/Desc. , and Time Begin\/Desc. . Selection of the Origination Id\/Description button  causes a list of Origination Id and corresponding descriptions to be displayed. In this manner a user may scroll through the list and identify the branch comprising the terminations that are to be modified. Likewise, selection of the Day of Week Id\/Desc. button  causes a list of Day of Week node ids\/descriptions to be displayed for the selected Origination Id node and through which the user may scroll through and select for modification. Similarly, selection of the Time Begin button  causes a list of Time of Day node ids\/descriptions to be displayed for the selected DOW and through which the user may scroll through and select for modification. Through use of the Order Manager classes\/sub-classes the system auto-populates the Orig, DOW, TOD, and, once populated, the system displays in display field  the Lterms for the TOD node which comprise the terminations and percent allocations. In the preferred embodiment, the user may change percentage allocations by overtyping the amount or using the spin box up\/down arrows  (increments of 1 percent). The user may additionally modify the percentages for the remaining termination(s) as long as the sum of the percentages for all the terminations attached to the selected Time interval node equals 100 percent. Action keys -may additionally be enabled for user selection in accordance with enterprise business rules and\/or user security. Specifically, key enables the submission of the QUIK\/TEMP QUIK order to NetCap for approval (Issue key). Key allows the user to add a termination to the TOD node (including cross-corp terms that the customer has cross corp agreements with), or change the termination id, description, or percent allocated to the termination for this plan. Preferably, selection of key enables display of a web page having a Termination screen enabling these choices. Key enables the user to select the termination that the user wants replaced and presents the user with the Termination screen to select the term for change (Change Term key). The key enables the user to select the term they want to delete on the selected routing branch. In the preferred embodiment, the system defaults effective date\/time to the current date\/time, however, the user may enter a future rollback date\/time up to 1 year in the data and time entry fields in ). If the user enters a Rollback date\/time in the rollback date fields, the system generates a TEMP QUIK order that sets the Routing Plan back to its state before the QUIK order. Preferably, the Rollback date\/time may not be greater than 1 year in the future.","Thus, from the dialog box  ()), the user is enabled to perform the following: 1) change one or more terminations for NLP or SRP; 2) replace one or more terminations on an EVS Routing Plan; 3) change the percent allocation of currently implemented NLP, EVS, or SRP Plan; 4) add one or more terminations to the currently implemented NLP or SRP Plan; 5) add one or more terminations to an EVS Routing Plan; and, 6) delete one or more terminations from the currently implemented plan of an NLP, EVS or SRP Plans. It should be understood that, in the case of a user implementing a TEMP QUIK request, the user selects the desired routing plan for the number\/set, the desired date and time when they want to add, change and\/or delete one or more termination locations and\/or percentage allocation of these locations for a currently implemented routing plan, and, optionally, the roll back date and time when the changes are to revert back to their original settings. Thus, a QUIK and TEMP QUIK message pair is sent to the TFNM server for processing as described herein.","Referring back to , the customer's Send QUIK request  is communicated by the TFNM client applet by communication between the Dispatcher server  and the TFNM server objects using CORMI. The Object manager\/sub-classes execute methods for translating the QUIK\/TEMP QUIK order in a form suitable for submission to NetCap.","The above referenced Appendix A of commonly owned U.S. Pat. No. 6,574,661 also illustrates the Registry message calls that are transmitted from the TFNN server to NetCap for the QUIK\/TEMP QUIK order and the corresponding NetCap responses. Included as the message for submitting an QUIK order (NQtJIK) to NetCap.","Once the plan has been submitted to the TFNM server via the send QUIK message, the TFNM server receives the new routing plan and verifies the user's security with NetCap. Once the user's security has been verified, the TFNM server submits the QUIK request to NetCap  via Registry messaging.","After a TEMP QUIK and\/or QUIK request has been transmitted to NetCap, it is stored for future implementation. In view of , NetCap sends a registry message to the TFNM server acknowledging that the request has been stored.","Appendix B of commonly owned U.S. Pat. No. 6,574,661 also illustrates the Registry message calls that are transmitted to the TFNM server from NetCap in response to the submitted QUIK order. Included is the message indicating successful processing of the QUIK request (NSUCS) and the message indicating completion of the order in NetCap (UCOMP). The TFNM server then passes this information on to the user via CORMI messaging over the HTTPS connection. If the user is still logged on, this acknowledgment appears as a pop-up message on their screen, as indicated via line  in . If the user has logged off, TFNM retains the acknowledgment that the QUIK order has been received and saved for the next user logon. Likewise, when a QUIK has been transmitted to Netcap and either implemented or terminated, NetCap sends a registry message back to the TFNM server which, in turn, passes this information back to the user via HTTPS connectivity.","As described, a change to a routing plan is saved locally before being submitted to NetCap. The submission happens when the plan changes are converted into an approved order having an approved order admin record and with a condition that NetCap has no preceding orders queued against the plan. The submission process takes place in two steps: first, the order admin record is sent to NetCap immediately, and second, when no orders are pending against the plan, the order admin detail record is then sent. The delay results because NetCap does not queue more than one order against a plan at a time. The TFNM server is configured to hide this limitation by stacking orders\u2014a process of accepting multiple submissions and queuing them internally for later transmission to NetCap. The order admin record is sent immediately. The order admin detail record is sent soon as possible thereafter.","Further functionality provided by the TFNM server is the ability to open plans, i.e., display a list of routing plans under the current working environment for display as a VORT ()), or, view orders and filter through orders. Particularly, the TFNM client will instantiate the Order Manager object which instantiates order administration detail objects and other objects for retrieving administrative records comprising the details for a particular order in the TFNM database. For example, selection of the Report Order menu option shown in the screen display of ), will cause the display of an order filter screen enabling a user to enter elements that they would like to use to query for orders and submit order queries. The results of an order query are displayed in an order select list , such as shown in ). From this list, a user can retrieve details pertaining to an order, or, change an order's status or update remarks. Particularly, from an administration button , the user is presented with a dialog  as shown in ), for example, enabling the user to update the order status and the effective date\/time. It is from these dialogs that a user may select a button  to un-approve an order (if the selected order has been approved by NetCap) and, a button  to \u201czap\u201d (delete) an existing order.","Appendix A of commonly owned U.S. Pat. No. 6,574,661 also illustrates the Registry message calls that are transmitted from the TFNM server to NetCap for un-approving an order (NOUAP), zapping an order (NOZAP), and, requesting pending order data (NPIUO). Corresponding NetCap responses are provided in Appendix B of commonly owned U.S. Pat. No. 6,574,661.","It should be understood that, in accordance with the principles described herein, the TFNM management tool of the invention is capable of supporting \u201cfeature\u201d orders, i.e., functionality enabling customers to add a new TFN routing plan, e.g., NLP, SRP, URP, or EVS, or, change other the attributes or structure of an existing plan, e.g., changing attributes of a routing plan directly from the VORT ()). The TFNM tool additionally may provide \u201cdrag and drop\u201d enabling users to configure routing elements between plans.","Although the TFNM web\/Internet network management tool has been described herein with respect to a customer's toll-free, e.g., 1-800\/8xx networks, the principles may be readily applied to other types of telecommunications network numbers.","ONM","Another application of the suite of telecommunications network applications is the networkMCI Interact Outbound Network Manager application . Referred to herein as \u201cONM,\u201d the outbound network management tool  provides the client GUI and middle-tier service that enable customers to manage and track Calling Party Number Orders, Calling Card Orders, Dialing Plan Orders, and ID Code Set Orders relating to their private networks such as Vnet and Vision networks.","As shown in , the ONM tool  of the invention implements an ONM domain server  integrated with a back-end MCI intranet and legacy system Infrastructure comprising above-described MCI's NetCap order entry system , Service Control Manager (\u201cSCM\u201d) and Data Access Points (\u201cDAP\u201d). The ONM server  enables customers to change their Vnet\/Vision network management plans, both in real-time and on a scheduled basis, via nMCI Interact's web-based front-end and middle-tier infrastructure. Particularly, customer order directives are entered by the customer  via an ONM graphic user interface. These directives are preferably communicated as Java applets over secure HTTPS socket connections ,  for input over the firewall () to at least one secure server, e.g., a DMZ Web server  that provides for authentication, validation, and session management in the manner as herein described. After validation and authentication, the DMZ Web server , in turn, re-encrypts messages and dispatches them to the Dispatcher  server over TCP\/IP connection . The Dispatcher server may implement an ONM proxy  which properly receives ONM order messages from the web server, and translates them into a format suitable for transmission over another TCP\/IP connection  to the ONM domain server . As will be described, the ONM domain server  interfaces with the \u201cNetCap\u201d  mainframe system that provides user interface to the network control system, i.e., DAP switches (). The ONM domain server  may include Java object classes whose methods are invoked by Java applets running on the customer browser. The browser Java applets specifically execute the customer directives by invoking certain methods on the ONM Domain server . These Java objects additionally provide the interface functions to the NetCap . In the preferred embodiment, the Java objects at the ONM domain server function as the ONM proxy, and are invoked remotely implementing a Java remote method invocation \u201cRMI\u201d-like methodology.","Particularly, as described herein with respect to , within the networkMCI Interact framework for producing Java applications over the Internet, there is provided common objects and an infrastructure allowing secure communications between a client (which resides on a browser) and a server (which resides safely within MCI's firewalls). As described, the security strategy includes: encrypting communication from the client to the web-server via SSL (HTTPS) and implementing HTTPS as the preferred method for allowing communication into the web server from the Internet; providing an additional firewall between the web-server and the dispatcher to allow only specific traffic from the web server to the dispatcher to occur; encrypting traffic between the web server and the dispatcher via DSA encryption; and enabling the dispatcher to validate all packets destined to internal MCI servers to ensure that they are from an authenticated client, and that a particular client has permission to communicate with a specific back-end server. To make this seamless for the client, the set of Common Objects performs this messaging. In the preferred embodiment, a \u201cCORMI\u201d (Common Objects RMI) which provides an RMI-like interface between the client and the server using the networkMCI Interact protocol is implemented. The CORMI procedures implemented have additional controls built in to provide the necessary session security and maintenance for communication over the firewalls.","After customer logon, authentication and entitlement determination, a networkMCI Interact applet is downloaded to the customers Web Browser via the established TCP\/IP connection, and the browser presents the customer with the networkMCI Interact systems home page including a Network Manager icon  ()). Selection of this icon, enables a client ONM application to be downloaded to the customer who is then presented with the ONM screen, as indicated at step .","An exemplary ONM web-page display  is shown in ) which presents a variety of ONM menu options including: 1) a File menu option  providing a selection  for creating a new order, a selection  for opening an existing order, a selection  for displaying events, and a selection  for enabling  cut through to a Vnet\/Vision configuration management system; 2) an Edit menu  providing options for deleting an ONM order or, enabling a search for specific components, e.g., within an Order detail and Inventory windows pertaining to a Calling Party Number (\u201cCPN\u201d), Calling Card, Dialing Plan, and ID Code\/Set, such as will be described; 3) a Control menu  providing a refresh option to enable a user to retrieve a list of all updated lists that have been altered on the host system including: Network IDs, Range Privileges, ID Code Set, Billing location ID, Customer Service ID, Location\/Access type and Provisioning Carrier; and 4) a Report menu  providing options enabling a customer to inquire on his\/her inventory of CPNs, Calling Cards, Dialing Plans and ID Code Sets.","With more particularity regarding the File menu option , when a user selects the new order menu option , he\/she is presented with a drop down menu (not shown) presenting a section of the order types which can be created via their Web Browser, e.g., CPN, Calling Card, Dialing Plan, and ID Code Set. When the user selects the open order selection  from the drop down menu of ), the user is presented with a web page  displaying a request order window where the user may enter search criteria from which a user may select orders, or, choose all orders. As shown in ), the user may enter the following search criteria: an exact order number or partial order number in the \u201corder match\u201d field ; an order type, e.g., Calling Card, CPN, Dialing Plan, ID Code Set, or all, from a drop down list presented by \u201corder type\u201d drop down menu ; a starting date or current default date in the \u201cstarting date\u201d field ; a user ID or default current user ID from the \u201cuser ID\u201d field ; and, a set of order status check boxes  which enables the user to choose an order status, e.g., not approved, approved, complete, and error\/rejected.","When multiple orders are retrieved, as a result of an entered search criteria, a web page  presenting an \u201cOrders\u201d window will appear such as shown in ). From the Order detail window, an order may be selected, e.g., by double clicking an order summary line . The field descriptions for an order displayed in the orders window include: an order Number  which is a unique number assigned to the order for identification; a currently logged-on user ID ; the current order status ; the order type , e.g., ID Code, as depicted in ); the date the order was prepared , and the effective date\/time  when the order will be implemented in the network by the host. The details of an order may be retrieved by highlighting the order summary line  and pressing the details button  or, by double-clicking the order summary line . It should be understood that the user may retrieve a web page having an Order window by either selection of a New Order, from ), or, selection from the Open Orders Window, when retrieving existing order(s).","Selection of a new or existing CPN Order option via the nMCI Interact ONM system allows a customer to \u201clink\u201d or attach network features to any Calling Party Number (CPN) that exists in that customer's inventory, i.e., CPNs that are active in that customer's database. Preferably, the following features can be defined\/linked to CPNs: 1) Multiple Networks; 2) Supplemental Codes including ID Codes and Accounting Codes; 3) Range Privileges including Universal and Customized; 4) Data vs. Voice Specification; and Extended Enterprise (Location\/Access Type).",{"@attributes":{"id":"p-0423","num":"0423"},"figref":"FIG. 29(","i":"d","b":["2755","2760","2770","2775","480","2790","2755"]},"With more particularity, the CPN order administration section  of web page display  comprises the following field descriptions: 1) a field  enabling a customer to set the date\/time when the order is to be implemented by the host. For example, a default time is the current PC date and time, shown in the format of MM\/DD\/YYYY HH:MM (24 hour clock); 2) a field  enabling the establishment of a priority (depending on security access privileges); 3) a field  for describing the order's current status. For example, new CPN orders default to \u201cnot approved\u201d; 4) a Remarks text field  optionally used to describe the contents of the CPN order; and, 5) an Approve field  such that when checked, indicates the order is approved and transmitted to the host. After transmission, the field name changes to Approved and the Order Status field displays Approved. It should be understood that, if authorized, a customer may unapprove an approved order that has not completed by reselecting the Approved check box. A pop-up message (not shown) in the web display will prompt the customer to confirm the action.","With more particularity, the CPN inventory section  used to retrieve CPNs from CPN order inventory comprises the following field\/command button descriptions: a CTRY field  including a three-digit country code for the CPN; a CPN Beginning field  comprising the remaining digits of the CPN or the beginning number within a range; a Description field  comprising an alphanumeric description assigned to the CPN, e.g., the CPN location or company name; a Component Count field  indicating how many CPNs are within the CPNs in Inventory section; a Retrieve button  such that, when selected, retrieves a list of a customer's available CPNs in inventory that are not included in other orders. Selection of this option will enable a web page display of a Retrieve CPNs from Inventory Window  such as shown in ); and, a right arrow \u201c>\u201d command button  enabling a customer to move single or multiple (selected) CPNs from the CPNs in inventory section to the CPN Updates to include in the current order.","With more particularity, the CPN updates section  comprises the following field\/command button descriptions: a status code indication field  displayed next to a CPN, with the following designations: a (blank) indication meaning no status; an \u201cA\u201d indicating that a new CPN is being added, e.g., Stentor customers; a \u201cC\u201d displayed next to CPNs that have been changed; and a \u201cD\u201d indicating that a CPN has been marked for deletion; a CTRY field ; a CPN Beginning field ; a Description field ; and, a Component Count field  as described above; a left arrow \u201c<\u201d command button  enabling a customer to remove a CPN from the current order, and to restore its attributes back to those that were last transmitted to the host, i.e., move one or more highlighted CPNs to the CPNs in Inventory section; an \u201cAdd\u201d command button , e.g., displayed for Stentor customers, which presents a web page having an Add New CPN window such as shown in ); and, a \u201cDelete\u201d command button , e.g., displayed for Stentor customers marks the highlighted CPN displayed in the CPN Updates section for deletion.","With more particularity, the CPN attributes section  comprises the following field\/command button descriptions: an \u201cItem\u201d field  comprising those Vnet\/Vision feature items that are listed in this column once linked to CPN(s), e.g., Range Privilege, ID Code Set, etc.; a \u201cValue\u201d field  which comprises the defined value of the network features (e.g., U 001) linked to CPN(s); a \u201cCPN Nbr\u201d field  which designates the information displayed in the Attributes section is for the selected CPN, which can be either in the CPNs In Inventory or CPN Updates sections; a \u201cVariable\u201d field  which changes according to the item selected in the Attributes section and enables customers to add\/change information for the selected item, except when any prepopulated information is dimmed; a <Set Dflt> button  which enables a customer to define the PC default for CPN attributes. Once set, the PC default values can be applied to other CPNs by selecting the <Use Dflt> button  which command provides the option of applying either the host default or the user-defined PC default attributes for the selected CPN. For example, if the Location Type of the current CPN is \u201cC\u201d, default attributes that would change it to \u201cA\u201d or \u201cB\u201d cannot be applied. On the other hand, if Location Type \u201cC\u201d was established as a default with <Set Dflt>, a pop-up message will prompt the user to confirm using it as a default when you select <Use Dflt>; an <Undo> button  for removing any changes made to the selected CPN, and restoring its attributes back to those that were last transmitted to the host, an <Expand> button  enabling the display of the Calling Party Number Attributes window, such as shown in ); and a <Close> button  for closing the CPN Order window.","The Add New CPN window  such as shown in ) enables a customer, if authorized, to add a new CPN to their inventory and assign it attributes. In the example web page display shown in ), the Add new CPN functionality includes: assigning a provisioning carrier in entry field ; adding a CPN-From number in entry field ; adding a CPN-To number in entry field ; and, adding a CPN description in entry field . Preferably, the added CPN(s) are displayed in the CPN Updates section  with the \u201cA\u201d indication  as shown in ). It should be understood that CPN orders may be deleted by selecting the delete button  ()).","As mentioned above, selection of the CPN Retrieve button  enables a web page display of a Retrieve CPNs from Inventory Window  such as shown in the example web page display of ). From this window, a customer may specify search criteria or retrieve a predetermined amount of CPNs having defaulted criteria. Particularly, the Retrieve CPNs from Inventory Window  comprises the following field\/command button descriptions for retrieving CPNs from customer inventory: a country field  for a country code from a drop-down list by selecting a \u201cdown\u201d arrow  when specifying a CPN in the CPN From field; a CPN From field  enabling a customer to enter a partial or whole CPN, e.g., from 3-25 numeric characters. The nMCI Interact ONM system matches the partial CPN and retrieves the first 10 exchanges available in inventory; a Quantity field  enabling a customer to enter a value, from 1 to 200 per CPN group, specifying the quantity of CPNs to include in the retrieval; a Network ID field  enabling a customer to select a specific Network ID from the drop-down list by selecting the down arrow; a Range Privilege field  enabling a customer to select a specific Range Privilege from the drop-down list by selecting the down arrow; an ID Code Set field  enabling a customer to select a specific ID Code Set number from the drop-down list by selecting the down arrow. It should be understood that ID Code Sets must be defined prior to creating the CPN Order, as will be described herein; a Description field  enabling a customer to type a full or partial CPN description as retrieval criteria; an <Add> button  for updating the list box with the group information from the Country, CPN From, Quantity, Network ID, Range Privilege, ID Code Set and Description edit boxes; a <Remove> button  enabling a customer to remove a highlighted display item so that it is not included in the retrieval request; an <OK> button  for accepting all entries in the Retrieve CPNs from Inventory window, and messaging the host. If nMCI Interact ONM finds one or more CPNS that matches specified search criteria, it will close the Retrieve CPNs from Inventory window. If the Retrieve CPNs from Inventory window is accessed from the CPN Order window, the results are displayed in the CPNs in Inventory section and replaces any CPNs that may have been in this section prior to retrieval; and, a <Cancel> button  for closing the Retrieve CPNs from Inventory window without accepting any changes.","As mentioned above, selection of the CPN attributes <Expand> button  ()) enables a web page display of a Calling Party Number Attributes window , such as shown in the example web page display of ). From this window, a customer may \u201cview only\u201d CPN attributes or features, if the selected CPN is located in the CPNs in Inventory section of the CPN order window, or, view or modify attributes if the selected CPN is in the CPN Updates section.","As shown in the example web page display of ), a first section referred to as the CPN information section  comprises view only fields presenting information such as: a three digit country code field  which identifies the country of origin for this CPN; a \u201cFrom\u201d field  indicating the beginning number of a possible range of CPNs affected by this CPN Order; a \u201cTo\u201d field  indicating the last number of a range of numbers affected by this CPN Order; a Customer Account field ; a Division ID field ; a Description field  describing the CPN(s); and, a yes or no Cellular field  indicating whether this CPN originates from a cellular phone. Additionally, a second section referred to as the CPN feature information section  comprises the following field\/command buttons including: a Network ID field  obtained from the drop-down list by selecting the down arrow; a Range Privilege field  for selecting the Range Privilege (customized or universal) to be linked to this Calling Card from the drop-down list by selecting the down arrow; an ID Code Set field  for selecting an ID Code Set to be associated with this CPN from the drop-down list by selecting the down arrow. When an ID Code Set is chosen, nMCI Interact ONM automatically populates the ID Code Length; a Supp Code Collection field  enabling selection from the drop down list to indicate when ID and\/or accounting codes will be collected for this CPN. A tone will prompt callers to enter code(s) after the dialed number. Selections include: 0\u2014Do not collect Supplemental Codes; 1\u2014Collect Supplemental Codes for all numbers; 2\u2014Collect Supplemental Codes on all calls except 7-digit Private On-Net Numbers; 3\u2014Collect Supplemental Codes only for international Off-Net numbers; 4\u2014Collect Supplemental Codes for all Off-Net numbers; a Data Indicator field  enabling a user to denote data versus voice traffic by selecting from the drop-down list; a Prov Carrier  indicating the provisioning carrier (MCI or Stentor) associated with the CPN, in the format of Country Code, padded to three digits with leading zeros, and the 4-digit Carrier Code; a Location Type field  which may be selected by clicking on the down arrow to activate the drop down list; an ID Code Length field  which is autopopulated with a 2-digit number according to the ID Code Set selected; an Account Code Length field ; and, <Set Default>, <Use Default>, <OK> and <Cancel> option buttons, as described herein.","When opening an existing Calling card order, the nMCI Interact ONM system Calling Card Order option allows a customer to \u201clink\u201d or attach network features to a Calling Card(s) that exist in that customer's inventory, i.e., Calling Cards that are active in that customer's database, or link network features to a new calling card. The following features can be defined\/linked to Calling Cards: 1) Multiple Networks; 2) Range Privileges including Universal and Customized; Range Restrictions including Corporate and Custom; and Extended Enterprise (Location\/Access Type).",{"@attributes":{"id":"p-0433","num":"0433"},"figref":"FIG. 29(","i":"h","b":["2870","2880","2890","2895","2900","2910","2912"]},"With more particularity, the Calling Card order administration section  of web page display  comprises the same field descriptions as mentioned herein with respect to the CPN order administration including: 1) a set date\/time field  for when the calling card order is to be implemented by the host; 2) a priority field  for establishing calling card order priority (depending on security access privileges); 3) a current order status field ; 4) a Remarks text field  optionally used to describe the contents of the Calling card order; and, 5) an Approve field  such that when checked, indicates the order is approved and transmitted to the host.","The Calling Card inventory section  used to retrieve a Calling Card(s) from the Calling Card inventory comprises the following field\/command button descriptions: a Card Nbr-PIN field  that displays the Calling Card number and associated PIN if the user has security access to view the PINS; a Description field  which comprises a description assigned to the Calling Card, e.g., the employee or company name; a Component Count field  indicating how many Calling Cards are within the Calling Cards Inventory section; a Retrieve button  such that, when selected, retrieves a list of a customer's available Calling cards in inventory that are not included in other orders. Selection of this option enables a web page display of a Retrieve Calling Cards from Inventory Window  such as shown in ); and, a right arrow \u201c>\u201d command button  enabling a customer to move single or multiple (selected) Calling Cards from the Calling Cards in inventory section to the Calling card Updates to include on the current order.","The Calling card updates section  comprises the same field\/command button descriptions as mentioned herein with respect to the CPN order administration including: a status code indication  displayed next to a Calling card having the same designations, i.e., no status, \u201cA\u201d, \u201cC\u201d, and \u201cD\u201d; a Card Nbr-PIN field , a Description field  and, a Component Count field  as described above; a left arrow \u201c<\u201d command button  enabling a customer to remove a Calling card from the current order, and to restore its attributes back to those that were last transmitted to the host, i.e., move one or more highlighted Calling cards to the Calling cards in Inventory section; an \u201cAdd\u201d command button, e.g., only displayed for Stentor customers; and, a \u201cDelete\u201d command button.","The Calling Card attributes section  comprises the same field\/command button descriptions as mentioned herein with respect to the CPN order administration including: a table  including an item field  comprising those Vnet\/Vision feature items that are listed in this column once linked to Calling cards, e.g., Range Privilege, Location type, etc.; a \u201cValue\u201d field ; a \u201cCard Nbr\u201d field  which designates the information displayed in the Attributes section is for the selected Calling card, which can be either in the Calling card In Inventory or Calling cards Updates sections; a <Set Dflt> button  which enables a customer to define the PC default for Calling card attributes. Once set, the PC default values can be applied to other Calling cards by selecting the <Use Dflt> button  which command provides the option of applying either the host default or the user-defined PC default attributes for the selected Calling card; an <Undo> button ; an <Expand> button  enabling the display of the Calling Card Attributes window, such as shown in ); and a <Close> button  for closing the Calling card Order window.","As mentioned above, selection of the Calling card \u201cRetrieve\u201d button  in ) enables a web page display of a Retrieve Calling cards from Inventory Window  such as shown in the example web page of ). From this web page, a customer may specify search criteria or retrieve a predetermined amount of Calling cards having defaulted criteria. Particularly, the Retrieve Calling cards from Inventory Window  comprises the following field\/command button descriptions for retrieving Calling cards from customer inventory: a Card Nbr field  enabling entry of a partial or whole 10-digit calling card number; a PIN field  enabling entry of an optional 4-digit personal identification number that is associated with the Calling Card number and can only be used in combination with Card Nbr; a Quantity field  enabling a customer to enter a value, from 1 to 200 per Calling card group, specifying the quantity of Calling cards to include in the retrieval; a Network ID field ; a Range Privilege field  enabling a customer to select a specific Range Privilege from the drop-down list by selecting the down arrow; a Description field  enabling a customer to type a full or partial Calling card description as retrieval criteria; an <Add> button  for updating the list box with the group information from the Card Nbr, PIN, Quantity Network ID, Range Privilege, and Description edit boxes; a <Remove> button  enabling a customer to remove a highlighted display item so that it is not included in the retrieval request; an <OK> button  for accepting all entries in the Retrieve Calling cards from Inventory window, and messaging the host; and, a <Cancel> button  for closing the Retrieve Calling cards from Inventory window without accepting any changes.","As mentioned above, selection of the Calling card <Expand> button  ()) from the calling card attributes section enables a web page display of a Calling card Attributes window , such as shown in ). From this window, a customer may \u201cview only\u201d calling card attributes or features, if the selected calling card is located in the Cards in Inventory section of the calling card order window, or, view or modify attributes if the selected calling card is in the Card Updates section. As shown in the web page display of ), a first section referred to as the calling card information section  comprises view only fields presenting information such as: the Calling Card Number  and the associated PIN ; the Customer Account number ; and the calling card description  which is user-defined and accessible. Additionally, a second section referred to as the feature information section  comprises the following field\/command buttons including: a Network ID field  obtained from the drop-down list by selecting the down arrow; a Range Privilege field  for selecting the Range Privilege (customized or universal) to be linked to the Calling Card from the drop-down list by selecting the down arrow; a Range Restriction field  for selecting a Corporate or Custom Range Restriction to be linked to this Called Card from the drop-down list by selecting the down arrow; a Prov Carrier field  which indicates the provisioning carrier (MCI or Stentor) associated with the Calling Card, in the format of Country Code, padded to three digits with leading zeros, and the 4-digit Carrier Code; a Location Type field  for example, host default, which, once selected, cannot be changed until the Calling Card is deactivated and reinstalled; a <Set Default> button; an <Use Default> button; an <OK> command button for returning to the Calling Card Order window; and a <Cancel> button for exiting the Calling Card Attributes window without making changes to the feature information.","In a similar manner as described above with respect to the Add New CPN web page display ()), a Stentor customer, if authorized, may add a new Calling Card to their inventory and assign attributes. The Add new Calling Card functionality includes: assigning a card number and associated personal identification number (PIN), adding a provisioning carrier in the format of a country code, and, adding a Calling card description. It should be understood that Calling card orders may be deleted by selecting a delete button.","When opening an existing Dialing Plan order or creating a new one, the nMCI Interact ONM system Dialing Plan Order option allows a company to define their call routing Dialing Plans to meet their business needs and manage their network costs. Thus, the nMCI Interact Outbound NM Dialing Plan order enables a customer to: 1) Create 7-digit Private Numbers that translate to Public Numbers, used for caller convenience and easy association of locations; 2) Force Public Numbers On-Net so that it is no longer routed according to Public Network rules, but rather by the customer's dialing plan; 3) Exclude a specific number, or range of Public Numbers, to control network abuse; assign specific numbers to terminate to Customized Message Announcements to provide user-defined information lines; and, establish \u201cHotlines\u201d to enhance customer service by providing caller convenience and local presence.","Within a dialing plan order, a user may specify the origination, or dialed digit range (the number dialed), and the termination data (where or how the call is answered, e.g., terminating to Dedicated Access Lines (DALs).",{"@attributes":{"id":"p-0443","num":"0443"},"figref":"FIG. 29(","i":"k","b":["2950","2960","2970","2975","2980","2990","2950"]},"With more particularity, the Dialing Plan order administration section  of example web page display  comprises the same field descriptions as mentioned herein with respect to the CPN order administration including: 1) a set date\/time field  for when the dialing plan order is to be implemented by the host; 2) a priority field  for establishing dialing plan order priority (depending on security access privileges); 3) a current order status field ; 4) a Remarks text field  optionally used to describe the contents of the Dialing Plan order; and, 5) an Approve field  such that when checked, indicates the order is approved and transmitted to the host.","The Dialing Plans in Inventory section  used to retrieve Dialing Plan(s) from the Dialing Plan inventory comprises the following field\/command button descriptions: a Ctry field  that displays the Dialing Plan's country code; a Dial Plan Beginning field  indicating the remaining digits of the Dialing Plan number of beginning number within a range; a type field  indicating the termination type for the dialing plan; a Component Count field  indicating how many Dialing Plans are within the Calling Cards Inventory section; a Retrieve button  such that, when selected, retrieves a list of a customer's available Dialing Plans in inventory that are not included in other orders. Selection of this option will enable a web page display having a Retrieve Dialing Plans from Inventory Window  such as shown in ); and, a right arrow \u201c>\u201d command button  enabling a customer to move single or multiple (selected) Dialing Plans from the Dialing Plans in inventory section to the Dialing Plan Updates to include on the current order.","The Dialing Plan updates section  comprises the same field\/command button descriptions as mentioned herein with respect to the CPN updates section including: a status code indication  displayed next to a Dialing Plan having the same designations, i.e., no status, \u201cA\u201d (added), \u201cC\u201d (changed), and \u201cD\u201d (deleted); a Ctry field , a Dial Plan Beginning field , a termination \u201ctype\u201d field , and, a Component Count field  as described above; a left arrow \u201c<\u201d command button  enabling a customer to remove a Dialing Plan from the current order, and to restore its attributes back to those that were last transmitted to the host, i.e., move one or more highlighted Dialing Plans to the Dialing Plans in Inventory section; an \u201cAdd\u201d command button enabling entry of new Dialing Plan record(s); and, a \u201cDelete\u201d command button for deleting Dialing Plan records.","The Dialing Plan attributes section  comprises the same field\/command button descriptions as mentioned herein with respect to the CPN attributes section including: an \u201cItem\u201d field , e.g., Network ID; a \u201cValue\u201d field ; a \u201cDial Nbr\u201d field  which designates the information displayed in the Attributes section is for the selected Dialing Plan, which can be either in the Dialing Plans In Inventory or Dialing Plan Updates sections; an <Undo> button ; an <Expand> button  enabling the display of the Dialing Plan Attributes window, such as shown in ); and a <Close> button  for closing the Dialing Plan Order window.","As mentioned above, selection of the Dialing Plan \u201cRetrieve\u201d button  in ) enables a web page display of a Retrieve Dialing Plans from Inventory Window  such as shown in the example web page of ). From this display, a customer may specify search criteria or retrieve a predetermined amount of Dialing Plans having defaulted criteria. Particularly, the Retrieve Dialing Plans from Inventory Window  comprises the following field\/command button descriptions for retrieving Dialing Plans from customer inventory: an International Direct Dialed Digits \u201cIDDD\u201d radio button  enabling entry of dialed digits as a public number in a dialed digits field . When IDDD is selected, the user is required to designate a Country Code in a Country field ; a Private radio button  enabling entry of a Private Number in the Dialed Digits field when selected. The Country field is protected when this type of dialed digits is selected; a Country field  that must be selected from the drop-down list when IDDD is selected as the type of dialed digits; a dialed digits field  enabling entry of a partial or whole number (dialed digits) not including the Country Code); a Quantity field  enabling a customer to enter a value, from 1 to 100, specifying the quantity of Dialing Plans to include in the retrieval; a Network ID field ; a Termination\/Location ID field  indicating the Location ID of a DAL which can be selected from the drop-down list (if available within the customer's network); an <Add> button for updating the list box in the selected dialing plans section with the group information from the IDDD, Private, Country (only when IDDD is selected), Dialed Digits, Quantity, Network ID and Termination Location ID edit boxes, where applicable; a <Remove> button enabling a customer to remove a highlighted display item so that it is not included in the retrieval request; an <OK> button for accepting all entries in the Retrieve Dialing Plans from Inventory window, and messaging the host; and, a <Cancel> button for closing the Retrieve Dialing Plans from Inventory window without accepting any changes.","As mentioned above, selection of the Dialing Plan <Expand> button  from the Dialing Plan attributes section enables a web page display of a Dialing Plan Attributes window , such as the example web page display shown in ). From this display, a customer may view Dialing plan attributes or features, if the selected dialing plan is located in the Dialing Plans in Inventory section of the Dialing Plans Order window, or, view or modify attributes if the selected calling card is in the Dialing Plan Updates section.","As shown in the web page display of ), a first section referred to as the Dialed Digit Range section  comprises fields\/command buttons enabling a customer to define the origination data (number dialed) for a dialing plan. The field\/command buttons include: \u201ctype\u201d radio buttons  enabling the selection of the originating number as a private number or public number (IDDD); a country field  for enabling entry of a country code from a drop-down list when IDDD is selected as the dialed digit type; a network ID field  enabling entry of a network in which a new Dialing plan is defined; a \u201cFrom\u201d field  enabling entry of a beginning number of a range of numbers; a \u201cTo\u201d field  enabling entry of a last number of a range of numbers; a Carrier ID field  which is an optional entry for numbers defined in the Dialing Plan order that are only completed by the DAP if originated by the specified Carrier Code within that originating country, and, that are only entered when a Country and Carrier Code is specified.","As shown in the example web page display of ), a second section referred to as the Termination section  comprises fields\/command buttons enabling a customer to define the termination data for a dialing plan. The field\/command buttons include: location name field  which is an alphanumeric field enabling entry of a description of the termination, e.g., company name or location; a type field  enabling selection from a drop-down list of the following termination types to which the Private or Public Number sends the call: a DAL\u2014used for Dedicated Access Lines, an IDDD\u2014used for all Public Numbers, a CMA\u2014used for Customized Message Announcements, and, a EXCL\u2014used to exclude a number or range of numbers; a Location ID field  of a Dedicated Access Line (DAL) which can be entered (e.g., Shared DALs) or selected from the drop-down list. If the termination type is \u201cDAL,\u201d a section\/entry is required; a Country field  for selection of the Country Code (where call will terminate) from the values in the drop-down list and is required entry when \u201cIDDD\u201d is the termination type; a Prefix Digits field  for entering the numbers at the beginning of the terminating number (not including the Country Code) which are the same for all numbers in a range, or the entire terminating number when entering individual numbers; a Reuse Digit Length field  enabling entry of the number of digits from the dialed digits that will be reused in the terminating number when used in a range with Prefix Digits. This field displays the default value, e.g., \u201c00\u201d, and is protected when terminating numbers are entered individually or when the termination type is CMA or EXCL. When a value is required, it can either be typed in or selected from the drop-down list; a Nature of Subsequent Address field  enabling entry of the out pulse digits delivered to a customer's equipment (CPE). When the termination type is a DAL, the default is changed from \u201cNone\u201d to any of the other selections. However, \u201cSubscriber\u201d is typically selected, as \u201cNational\u201d and \u201cInternational\u201d would only be used by a private network owner; a Point of Origin Routing Indicator check box  to indicate Point of Origin Routing which enables a customer to designate an alternate DAL, that overrides the DAL specified in that customer's Dialing Plan, based on the originating switch. This helps to manage load balancing for DALS, e.g. for Vnet; and, an <OK> button and a <Cancel> button for closing the Dialing Plan Attributes window without making changes to the feature information.","When opening an existing ID Code\/Set order or gig creating a new one, the nMCI Interact ONM system ID Code\/Set Order option allows a customer to define a unique 1-11 digit number ID Code and assign that number to an individual. ID Codes preferably have a range privilege assigned to them, therefore, a customer can tailor calling privileges and assign them to individuals via their ID Code. Once an ID Code system is established, the code is entered after the dialed number on every call made. It should be noted that the network DAP switches () verifies ID Codes. Thus, a correct ID Code must be entered or the MCI switch will not complete the call. In the preferred embodiment, there are two types of ID Code Set Orders in nMCI Interact Outbound NM: 1) Add\/Change ID Code Set Order; and 2) Delete ID Code Set Order. In the preferred embodiment, the Add\/Change ID Code Set Order enables a customer to perform the following functions to implement ID Codes within that customer's Vnet\/Vision Network: 1) Define ID Code Length (1-11 digits); 2) Assign Range Privileges to ID Codes; 3) Define Local Sets; 4) Generate ID Codes Sequentially or Randomly to an ID Code Set; 5) Individual Entry of ID Codes; and 6) Modify\/Delete ID Codes within a Set.",{"@attributes":{"id":"p-0453","num":"0453"},"figref":"FIG. 29(","i":"n","b":["3050","3051","3060","3065","3070","3080"]},"With more particularity, the ID Code Set Order administration section  of web page display  comprises the same field descriptions as mentioned herein with respect to the Dialing Plan order administration including: 1) a set date\/time field  for when the ID Code\/Set order is to be implemented by the host; 2) a priority field  for establishing dialing plan order priority (depending on security access privileges); 3) a current order status field ; 4) a Remarks text field  optionally used to describe the contents of the ID Code\/Set order; and, 5) an Approve field  such that when checked, indicates the order is approved and transmitted to the host.","The ID Code\/Sets in inventory section  used to retrieve ID Code\/Set(s) from the ID Code\/Sets inventory comprises the following field\/command button descriptions: a Set field  indicating the ID Code\/Set; a \u201ctype\u201d field  having an indication of a local (\u201cL\u201d) set or a global (\u201cG\u201d) set; a Len field  indicating the defined length of the ID Code; a description field  indicating the description of the ID Code Set, e.g., location; a Component Count field  indicating how many ID Code Sets are within the ID Code Sets in Inventory section; a Retrieve button  such that, when selected, retrieves a list of a customer's available ID Code Sets in inventory that are not included in other orders. Selection of this option will enable a web page display having a Retrieve ID Code Sets from Inventory Window  such as shown in ); and, a right arrow \u201c>\u201d command button  enabling a customer to move single or multiple (selected) ID Code Sets from the ID Code Sets in inventory section to the ID Code Set Updates to include on the current order.","The ID Code Sets updates section  comprises the above-described Set, \u201ctype,\u201d Len, description and component count fields and, a left arrow \u201c<\u201d command button  enabling a customer to move one or more highlighted ID Code Sets to the ID Code Sets in Inventory section; a \u201cDelete\u201d command button; and, an \u201cAdd\u201d command button  enabling the addition of new ID Code Sets to the order including functionality enabling the creation of an ID Code Set which can be added to an order and which must contain at least one ID Code prior to approving the order. Adding a new Set to the order entails specification of either a local or global ID Codes sets.","The ID Code Sets attributes section  comprises the same field\/command button descriptions as mentioned herein with respect to the Dialing Plan attributes section including: an \u201cItem\u201d field , e.g., including ID Code Set and ID Code Information; a \u201cValue\u201d field ; a \u201cSet\u201d field  which designates the information displayed in the Attributes section is for the selected ID Code Set, which can be either in the ID Code Sets In Inventory or ID Code Set Updates sections; an <Undo> button ; a <Del Code> button  for deleting a selected ID Code; an <Add Code> button  enabling display of a further Web page including an Add ID Codes to Set window, such as shown in ); and a <Close> button  for closing the Add\/Change ID Code Set Order window.","As mentioned above, selection of the ID Code Sets \u201cRetrieve\u201d button  in ) enables a web page display of a Retrieve ID Code Sets from Inventory Window  such as shown in the example web page display of ). From this window, a customer may specify search criteria or retrieve a predetermined amount of ID Code Sets having defaulted criteria. Particularly, the Retrieve ID Code Sets from Inventory Window  comprises the following fields for retrieving ID Code Sets from customer inventory: a Set field  enabling entry of the Set number; a description field  enabling entry of a full or partial ID Code Set description, e.g., alphanumeric description; an ID Code field  enabling entry of a specific ID Code; a Quantity field  enabling a customer to enter a value specifying the quantity of ID Code Sets to include in the retrieval; an <Add> button  for updating the list box in the selected dialing plans section with the group information from the Set, Description, ID Code, and Quantity text boxes; a <Remove> button  enabling a customer to remove a highlighted display item so that it is not included in the retrieval request; an <OK> button  for accepting all entries in the Retrieve ID Code Sets from Inventory window, and messaging the host; and, a <Cancel> button  for closing the Retrieve ID Code Sets from Inventory window without accepting any changes.","As mentioned above, selection of the Add Code button  in ), enables display of the Add ID Codes to Set window such as shown in the example Add ID Codes to Set web page  of FIG. (). As shown in ), the Add ID Codes to Set window  enables the customer to delete ID codes from a set; add ID codes one at a time, e.g., single generation; sequentially generate ID Codes to the Set; and randomly generate ID Codes to the Set. For instance, the customer may enter the set information in the following fields: the Set field  for which the ID Code changes will take effect; a length field  setting forth the length of the ID Codes contained in the set; a description field enabling entry of text describing the set; and a type field indicating the set as local or global. With regard to the ID Codes generate options, a single generate option  enables a user to add ID Codes one at a time to a set, e.g. by entering the number in the ID Code field ; a sequential generate option  enables the user to specify a beginning ID Code number and a Quantity in entry fields (not shown). The nMCI Interact ONM will automatically generate sequential ID codes according to the quantity specified by selecting the Add button  which updates a list box  with information from the generated id Codes; and, a random generate option  enables the user to specify a beginning ID Code number, an ending ID Code number, and, a Quantity in entry fields (not shown). The nMCI Interact ONM will randomly-generate the specified number of ID codes within the beginning and ending range by selecting the Add button  to update list box . Selection of the <OK> button  will enable acceptance of all the newly generated ID Code entries, messaging the host of the new codes, and, returning control to the Add\/Change ID Code Set order page ()).","As mentioned above with respect to ) depicting the nMCI Interact ONM web page display , the control menu option  provides a refresh option which enables an update of all internal lists that have been altered on the host NetCap system. Specifically, the nMCI Interact ONM system  updates the following lists: the network ID, Range Privilege, ID Code Set, Billing Location ID, Customer Service ID, location\/access type, and, provisioning carrier. It should be understood that Refresh option will not change the values of an open window that includes data from one of the lists.","Furthermore, with respect to the report menu option  provided in the main web page display of ), users are enabled to inquire on their respective inventory for CPNs, Calling Cards, Dialing Plans, and ID Code Sets. The ONM system will display a respective \u201cRetrieve\u201d item from inventory, e.g., selection of report option for CPNs enables the display of the Retrieve CPNs from inventory screen as shown in ). Particularly, in the ONM system , four inventory reports may be provided to customers: CPN, Calling Card, Dialing Plan, and ID Code Set. Reports may be requested from the screen display of ), however, will be delivered to the nMCI Interact Inbox message center , for client viewing and retrieval in the manner as described herein.","Event Monitor","As mentioned above, another application of the suite of telecommunications network management applications is the Broadband reporting system . As shown in the high level process flow diagram of  customers are enabled to request, specify, schedule and receive data reports relating to their Broadband, e.g., packet-switched, data networks.","As shown in , the Broadband (\u201cBB\u201d) reporting system includes a Broadband view client comprising the client workstation component  employing a web browser running, for example, Internet Explorer\u00ae 4.0 or greater, for enabling the generation of requests and receipt of responses from the Broadband system processes over the Web\/Internet via a secure socket connection. As described herein, the StarWRS component  of the nMCI Interact system may be implemented to support Broadband report request, report retrieval, and alarm monitoring functions. All interactions with the Broadband reporting and system network management platform (\u201cSNMP\u201d) features occur between the Broadband client applet  and a Broadband server . Particularly, Broadband application's Java classes invoke a \u201cmessage class\u201d that has the Common Object code as an interface definition.","Integrated within the Broadband reporting system architecture  of  is the nMCI Interact Web Server  and Dispatcher components  which provides for the transport between the BB client browser and a Broadband proxy interface including all authentication and encryption. Thus, secure communication from the customer browser to a DMZ Web server is enabled over a first secure TCP\/IP socket connection, such as SSL, and, communication from the DMZ Web server over a corporate firewall to the Dispatcher server is enabled over a second TCP\/IP socket connection, such as DES. These secure paths enable customer requests and server responses to be communicated between the client browser and the Broadband server . Specifically, the Dispatcher server  includes an integrated Broadband proxy application to forward user requests and responses to\/from the Broadband server process  and to enable the Broadband functionality. As described herein, this proxy capability includes a multi-thread engine enabling multiple, simultaneously executing sessions supporting anticipated user load. The interface between the Dispatcher server and the Broadband proxy process is also message-based employing, e.g., TCP\/IP socket transport, and, as will be described, a messaging protocol is defined that comprises a generic message header followed by proxy-specific data. For messages sent to the Broadband server, the generic message header is first sent followed by the proxy specific data. In the other direction, the same process is employed, i.e., the Broadband proxy sends the generic header followed by the proxy-specific response back to the dispatch server for communication over the firewall and back to the Web server.","In the embodiment shown in , all Broadband responses including CSV data files are forwarded through the Dispatcher server  and intervening DMZ Web server  to the Broadband Inbox messaging server for subsequent access and eventual display at the client.","In the preferred embodiment, the Broadband (\u201cBB\u201d) server  performs the various database queries and function calls in response to requests received from the customer via the Broadband proxy . That is, the BB Client submits all requests and queries to the BB Server  using a generic proxy framework called BBProxyServer . These communications include Report requests, retrieval and viewing; requests for circuit information using SNMP Get commands; assignments of mnemonics for circuit names using SNMP Set commands; and, establishing a session to monitor alarm activities on circuits. Particularly, the Broadband server  is responsible for all tasks leading up to and including the generation of performance report and SNMP information including data collection, calculation, storage, and report generation.","As further shown in , the components feeding information to the Broadband server  include: 1) a Performance Reporting System (\u201cPRS\u201d) server  for sending performance and statistical data to the Broadband server; and, 2) the SNMP platform  which is a tool that feeds real- or near real-time SNMP alarm and network event data to the Broadband Web server  via proxy interface . One such SNMP tool implemented by the assignee of the present invention is entitled \u201cNetExpert\u201d. The Broadband server  additionally supports SNMP \u201cget\/set\u201d functionality which is a menu-driven facility enabling a user to query the SNMP database for the value of a variable in a Management Information Base (\u201cMIB\u201d) , or, to set the value of certain variables in the MIB, as will be described in further detail hereinafter.","The Broadband server  additionally supports communication with the StarOE component  which provides order entry functions including functionality necessary to manage (create, update, delete) Broadband users and, allows for a feed of the appropriate information to the Broadband server in order to associate the appropriate reports and Broadband functionality to the right customer once given admission to the Broadband service. As described, the StarOE order entry process essentially provides the means for authenticating users, and, initiating report generation. A messaging interface is provided between StarOE to the Broadband Web Server  functioning as a client to receive authentication information and Bill ID and Level of service information which are supplied in response to launch of the Broadband applet.","To establish Basic level reporting, the Broadband Server  transmits new customer information to the PRS1 component  when it is received. The customer Bill ID and circuit information are entered into the PRS1 tables via messaging interface . Any additions to or updates of User Name, User ID, Bill IDs are periodically passed from the Broadband Server  to the PRS1  via FTP messaging interface  in response to the periodic, e.g., nightly, updates to the Broadband server from StarOE. Particularly, the Broadband server  receives from the StarOE server  a file containing all current BB customers with the following information: a date\/time stamp; a username; a userid; a service level indicator; and, the number of billing ids and bill ids. For the level of service indicator, Broadband offers the following options: 1) Basic; 2) Standard; 3) Enhanced SNMP; 4) Premium; 5) Enhanced Ad hoc Reporting; 6) Enhanced SNMP+Ad hoc Reporting; and 7) Dedicated SNMP. Specifically, from the information downloaded from StarOE, comma separated value (CSV) reports are automatically created on a daily basis by the PRS1 from the inception of service until service is discontinued. As an example, for the Basic level of service, the Broadband Server delivers three (3) CSV Files to StarWRS Inbox : Configuration report, Circuit usage, and PVC usage.","Referring to , the PRS device  performs the following: 1) queries the MIB  on each switch via interface  for information about that circuit; 2) collects the data; and, 3) assembles that data in the appropriate tables for storage in the Broadband Server database . A nightly process between the RMS  and PRS database  synchs up PRS level of service information with the RMS  to determine what level of reporting is assigned to each circuit\/PVC and runs the appropriate reports. From these components, the following functions, reports and capabilities are available to nMCI Interact users: a) near real-time performance statistics; b) customer performance reports including: 1) Frame Relay Graphs including: Network Health (Daily-Monthly); Network Throughput (Daily-Weekly-Monthly); Busy Hour Circuit Trend (Daily-Weekly-Monthly); Customer Frame Delivery (Daily-Weekly-Monthly); PVC Utilization by Access Circuit Busy Hour (Daily-Weekly-Monthly); and Quality of Access Port by Hour (Daily); 2) Frame Relay Text Reports including: Network Throughput (Daily-Weekly-Monthly); Busy Hour Circuit Trend (Daily-Weekly-Monthly); Customer Frame Delivery (Daily-Weekly-Monthly); PVC Utilization by Access Circuit Busy Hour (Daily-Weekly-Monthly); Quality of Access Port by Hour (Daily); and, Customer Configuration (Daily); 3) Frame Relay Downloads including: Circuit Usage (Daily) and PVC Usage (Daily); and 4) SMDS Graphs including Circuit Statistics (Daily-Weekly-Monthly) and Busy Hour Circuit Trend (Daily-Weekly-Monthly). Additional capabilities include providing Near Real-time alarms and configuration reports (Frame and SMDS) relating to an MCI customer's virtual transport network. Thus, the Broadband system  of the invention provides a tool set by which a customer can understand the performance of their virtual data network. It provides the customer with the ability to trend network performance statistics over time, and then to determine whether the network should be changed to ensure that it is operating at maximum performance levels (i.e., meeting business needs). The Broadband reporting system thus enables customers to review network performance data over a period of time, e.g., up to 45 days, by creating and saving reports on their workstation, a network server, or a floppy disk. Alarm trending and analysis, correlating alarm occurrences to network availability, network performance and problem resolution may also be performed.","A detailed flow diagram illustrating the CSV report creation process is now illustrated in view of , , () and (). As shown in ), steps - depict the addition of the User Bill ID to PRS1, the addition of a customer's level of service information to StarOE and, addition of any report suppression information to the RMS. As described, level of Service information is available from the StarOE system. Level of service information from StarOE is of a courser granularity and is used to enable access to the appropriate Broadband capabilities, based on the order entry process. A user can suppress the transmission of a report or set of reports using the BB application, however, this does not stop the collection of performance statistics, only the generation of reports.","The next few steps - relate to the data collection process. Specifically, data on the performance of all circuits associated with a particular Bill ID is collected from all switches in the ATM or Frame Relay Network by an automated periodic polling process, e.g., hourly. The addition of a new Bill ID to the PRS1 tables (step ) is utilized by the polling process which process adds circuits and PVC to its polling requests based on association with the new Bill ID, as indicated at step . Then, as indicated at step , the poller queries the MIB  on each switch in the network for statistics on selected circuits and PVC on a cyclical basis, e.g., every 15 minutes. As shown in , the PRS poller function  polls the MIB  at each switch  in the network, e.g., Frame Relay or ATM network, in sequence. The Poller sends a UDP packet to the MIB on each switch in sequence for statistics on all circuits\/PVCs enabled for Broadband service. In response to the UDP request, at step , the MIB returns all the current statistics on circuit\/PVC data from the switch. In the event that a switch is not reachable, the polling process logs an error in a PRS1 error log indicating that the specific switch was not reachable. Next, as indicated at step , the PRS1 writes the data to a text file and a Sybase bulk loader process adds the information to a raw data table. Particularly, as shown in , a PRS assembler process  distributes statistics to the appropriate tables in a PRS1 active database . The assembler process compares the previous hour's data to the data in the raw table, compares values and writes the deltas to the hourly tables, which tables are then replicated to the reporter.","Then, in ) at step , an automated process runs selected reports on available statistics in the PRS database tables. In the preferred embodiment, as shown in , this reporting process  occurs nightly, however, it can be run on any periodic basis. The specific reports that are run are determined by the level of service for which the Bill ID is enrolled as stored in StarOE tables.","Referring to ), as indicated at step , for each Bill ID, the reporter determines which reports are to be produced, generates queries against the appropriate tables, runs the queries at the appropriate time and delivers reports to the users BB Inbox . Report creation is done in sequence: all dailies, then all weeklies (if appropriate) then all monthlies (as appropriate). Particularly, as indicated at steps  and , a control process \u201cs_RunAllReports\u201d is invoked to load all customer lists, and at step  calls \u201cs_GenReport\u201d which collects level of service information for all customers. As indicated at step , the RMS process returns level of service information indicating any report suppression, and, at steps , the \u201cs_GenReport\u201d creates and executes queries against the data collected in the PRS1 database. At step , result sets are written to a temporary report directory and are then compressed at step  and added to the PRS database which may store the report for a predetermined amount of time, e.g., one week. Next, as indicated at step , the reports are replicated using off-the-shelf components, e.g., Sybases's RepServer, and saved on a Broadband server report location database (\u201cRLD\u201d)  which can be remote mounted by the Broadband Server . Particularly, the PRS reporter  shares a drive on which these reports are located with the Broadband Server via a remote file mount. The Broadband Server database retains data and reports for a predetermined period of time, e.g., 45 days, prior to the current data.","Finally, as indicated at step , the Broadband Server  determines which reports have been produced and forwards them directly to of with the Broadband Inbox component associated with the Bill ID. Broadband Server creates a unique filename for each CSV report and places each report on the Broadband Inbox  () for customer retrieval, as indicated at step . The steps of - are depicted in a condensed physical architecture diagram of the Broadband system shown in .","As shown in ) at steps -, - a determination is made as to whether the processing performed in each step was successful. If the processing performed in each step was not successful, or, an error occurs, then the error may be logged in a log file  at the Broadband Server and at Inbox for subsequent review, when necessary.","Details of the Broadband report retrieval process  is now described in view of . It is assumed that StarOE has already validated the user's id and password, and that the user is entitled to receive Broadband services. Thus, upon selection of the Broadband Services icon  from the nMCI Interact home page ()) the user may enter into the Broadband Services system and particularly, to access the Broadband Client front end. A client Broadband applet is thus, downloaded to the customer who is presented with the Broadband main display screen, as indicated at step .","An exemplary Broadband web-page BB Main Display screen  is shown in ) which presents a variety of user-selectable Broadband options including: 1) an Inbox option  enabling a user to retrieve their Broadband reports; 2) an option  enabling a user to view SNMP alarms; 3) an option  enabling a user to specify reports to be suppressed; 4) an option  enabling a user to retrieve Broadband reports that have been archived; 5) an option  enabling a user to receive information regarding their circuit locations, 6) an option  enabling the \u201cget\/set\u201d functionality for providing meaningful labels to circuit locations to improve report readability; and, 7) an option  enabling the retrieval of a map viewer application for generating maps portraying the customer's virtual networks. Details of each of these Broadband applications may be found in commonly-owned U.S. Pat. No. 6,574,661 entitled INTEGRATED PROXY INTERFACE FOR WEB BASED BROADBAND TELECOMMUNICATIONS MANAGEMENT, the contents and disclosure of which is incorporated by reference herein.","In the preferred embodiment, a Broadband Main Display applet is provided as a launching pad for accessing all of the aforementioned Broadband services. The Main Display applet is preferably a Java applet running inside the user web browser  and utilizing classes which extend the basic Java applet functionality in areas such as application management, user session management, user-interface, inter-applet communication, and client\/server communications. Particularly, from the Broadband Main Display applet access to and communications between Broadband applications is provided using the Common Object COApplet, COApp, and COBackPlane services which are objects functioning in the manner as described herein. In the manner as shown in , the Main Display applet BBMainDisplay inherits from COAppIMPL class with a COApplet interface and is launched from the nMCI Interact COBackPlane using the COApplet interface. When a user clicks on a Broadband service toolbar button or menu item, BBMainDisplay creates an instance of a COApp(let) to manage the corresponding application. When the user exits from Broadband services, the COBackPlane is utilized to destroy the application and its windows.","The Broadband Main Display applet provides a menu-bar, toolbar, and status bar for accessing Broadband services according to the customer's subscribed service option which includes: Basic; Standard; Enhanced SNMP; Premium; Enhanced Ad hoc Reporting; Enhanced SNMP+Ad hoc Reporting; and Dedicated SNMP. As determined by the user logon session with the StarOE server , if the user is not entitled or does not have authorization for a particular service, the corresponding toolbar icon or menu item is disabled (ghosted-out) and will be rendered insensitive to user input in accordance with the customer service option.","When BBMainDisplay is launched, the Main Display first determines the user's Broadband level of service option, e.g., Basic, Standard, Enhanced SNMP, etc. A user selects a Broadband service, e.g., custom reporting, archive reporting, or SNMP features such as Get\/Set and alarm panel by clicking on the corresponding toolbar icon or pull-down menu item on the Main Display applet ()). For the case of custom (Ad hoc) reporting of data, e.g., from the Frame Relay MIB, a custom reporting applet interface is provided. From this web interface, a customer can select from the available data variables (i.e. physical or logical circuit, data point value, time frame for report, etc.). Specific responsibilities of the custom report applet include: 1) allowing customers to define a custom report query using single performance statistics category, statistics range, and date\/time range; 2) allowing customers to select reports presenting statistics relating to their current network Access Circuits or network PVCs. This comprises enabling a customer to select either Access Circuit or PVC reporting category type, in which case a drop down list displays current performance statistics for the selected category. The Customer then selects a single performance statistics category from drop down list; 3) allowing a customer to specify range on statistic value using relational operators and numerical values, e.g., value >=80%; 4) allowing a customer to specify report date\/time range covering, for example, the previous 45 days of service. A customer can select start and stop date\/time anytime within range; 5) allowing the customer to save the custom defined queries by providing a \u201cSave Query\u201d option; and, 6) providing an \u201cAuto Run\u201d function to allow custom reports to be run automatically and available when the default reports are produced through the Broadband Inbox. Once the user submits the custom report request it is forwarded to the Broadband Inbox for subsequent view.","When basic service option is provided, the Broadband main display applet has the responsibility of: 1) requesting service type (entitlements) either from StarOE authentication server or as data from BackPlane (); 2) requesting reports that are no longer on the Inbox server to be retrieved from a report data archive if a pre-determined period of time has elapsed, e.g., 45 days, and provide these reports to the customer via the Broadband Inbox; 3) defining how the customer reports should be requested, e.g. report ID, date, etc.; 4) providing on-line context sensitive help for all aspects of the Broadband WEB application; 5) providing access to the Broadband User's Guide; 6) providing the ability to spawn separate dialog windows, for example, to explain reporting activity in progress; 7) providing a \u201csend mail\u201d function to provide the customer with a method to create a mail memo for distribution to a help desk; and, depending upon the customer's service option, 8) providing access to custom reporting capability (Ad hoc Reporting) via toolbar and menu; and, 9) providing access to the SNMP features (Get\/Set and Alarm) via toolbar and pull-down menu.","Referring back to , the user may select the BB Inbox feature as indicated at steps -by clicking on the BB Inbox icon. By clicking the BB Inbox icon a download of the BroadBand Inbox applet is initiated, as indicated at step . Via this applet, the BroadBand View Inbox client requests all available report data (headers) from the Report Location Database as indicated at step . Then, at step , the RLD returns header information such as report name, id, location, date\/time requested, data time produced to the client, and uses the information to autopopulate the entries in the Broadband Inbox at step . The report availability is then displayed in the BB Inbox (client) screen at step . It should be understood that by the time a user has received the welcome packages from nMCI Interact, backend data collection and report generation activities at the appropriate level of service have already begun. As a result, completed reports are available at the first login.",{"@attributes":{"id":"p-0484","num":"0484"},"figref":["FIG. 34(","FIG. 33"],"i":"b","b":["1740","1745","968"]},"BroadBand Server responds by locating the file (using the RLD) and transferring the file to the user and the appropriate viewer to the client. In the preferred embodiment, the user is enabled to display comma separated values (\u201cCSV\u201d) textual reports, as indicated at step ; network health multigraph reports, as indicated at step ; and, map reports, as indicated at step .","Thus, in the preferred embodiment, the Broadband Report Viewer component includes Java applet viewer classes that enable the downloading and display of performance reports generated from the Broadband server . In the preferred embodiment, there are at least two types of viewer classes providing the following reports: 1) Monthly Network Health Reports which are static standard and multi-graph reports having three information areas: i) domestic latency, i.e., network delays; ii) delivery, i.e., network throughput; and iii) Peak Utilization, e.g., based on committed information rates; and, 2) Daily Network Health Reports which are static standard and multi-graph reports having the domestic latency, delivery and Peak Utilization reporting views, in addition to a fourth reporting Exceptions view. Besides having the ability to select reports on a daily or monthly basis, a custom reporting Java applet is provided to enable customers to select Broadband \u201cad hoc\u201d (one time) reports at any previously defined interval. For example, a customer may have a standard \u201cDaily Throughput Performance\u201d report delivered each day. However, for a particular day, the same customer may choose to submit an ad hoc \u201cThroughput Performance\u201d report for a previous time interval, e.g., previous week, or previous month. In the preferred embodiment, the Broadband web server adds completed report data in CSV to the Broadband Inbox server  which component enables the client reporting viewing process  to display reports. Particularly, the BB client application loads the report viewer, which loads the requested report and displays it to the user. For CSV\/spreadsheet reports the user has the option to manipulate the data in the viewer. When viewing multi-graph reports such as the Network Health report, the viewer provides drill down capability: by double clicking on a section of a graph, the supporting data is displayed.","The Broadband Report Viewer component additionally includes Java applet classes enabling the display of customer configuration maps which are two dimensional maps having certain locations highlighted, e.g., customer gateways, in addition to lines connecting two or more locations representing a customer's dedicated data transport paths, e.g., permanent virtual connections (\u201cPVC\u201d), as will be hereinafter described in further detail. Besides having the ability to generate network performance reports and configuration maps, the Report Viewer component of the Broadband Reporting tool includes Java applet classes enabling the presentation of real- or near real-time alarm and network event data obtained from the network management platform, \u201cNetExpert\u201d  as shown as . Via a proxy application , events and alarm notifications are sent to the BB server  which processes the alarms for communication through the dispatcher\/BBProxyServer applications directly to the BB client , via secure TCP\/IP socket messaging, as will be described in greater detail hereinafter.","Referring back to ), the selection of the report suppression option  will enable the presentation of a BB view report suppression screen , an example screen of which is shown in FIG. (). From this screen, the user is enabled to suppress or enable the particular selected report name, type, schedule, by selecting pull-down menu .","Furthermore, as shown in ), the selection of the archive option  will enable the presentation of a BB view archive report screen  an example screen of which is shown in ). From the screen of ), the user is enabled to select the archived report to be displayed at the BB Inbox by name, type, scheduling period, and reporting time period in entry fields . Details of the process flow in generating the Broadband archive reports corresponding to the archive option screen of ) is described in above-referenced, commonly owned U.S. Pat. No. 6,490,620.","As further shown in ), the selection of the circuit location option  will enable the presentation of a BB view circuit location screen  an example screen of which is shown in ). From the screen of ), the user is enabled to retrieve network configuration information pertaining to that customer's network by clicking the appropriate circuit id and location field from a list . By clicking on this field, a textual report containing circuit configuration information may be displayed. The preferred method of reporting to a customer the current configuration of their MCI supplied virtual data network is via a web base geographical image map. The Broadband mapping report and Customer Configuration Map report are available for customers of all levels of service via the Broadband reporting system.","Preferably, all Broadband customers receive a basic report set containing information on utilization, throughput and treatment of data transmitted over their virtual data networks as part of the default report set for the selected service option. Each service, e.g., SMDS and Frame Relay option, is provided reports specific to the performance indicators of that service (e.g. utilization, throughput and treatment of data transmitted over the virtual data network). The actual reports and the reporting interval may be unique, based on the type of report although default reports are available. A Customer Configuration text report is included within a default set of reports. The mapping report is preferably updated on a daily basis based on changes that have occurred within the customer's network in the previous 24-hour period. As the update is dependent upon a successful completion record, update latency can be greater than 24 hours from the actual event causing the change.","The data source for the customer's Configuration Map and Customer Configuration text reports includes: a customer name; Billing id; contact (name and phone number of customer representative for this account); customer's mailing address; and the company providing FR service, e.g., MCI; a location field comprising a mnemonic identifying the MCI point of presence (POP), i.e., the city and state where the circuit is located; a circuit name assigned in circuit order management system for customer's FR access; a gateway field containing a mnemonic identifying the gateway that services this circuit; a Network Mgt. ID field that identifies the \u201cNetExpert\u201d system () address by gateway, slot, port, and channel in the router card cage for this circuit; a Bandwidth field indicating circuit speed; a # PVC field indicating the Number of PVCs associated with this circuit (circuit name) a CIR total field indicating the sum of the CIRs for all PVCs on this circuit; an OVR SUB (%) field indicating the CIR Total (above) divided by the bandwidth times 100; a PVC field indicating a PVC number; a Gateway field comprising a mnemonic identifying the gateway that services circuit on the A side of the PVC; a Circuit field indicating the circuit name assigned to the A side of the PVC; a DLCI field indicating the DLCI assigned to the A side of the PVC; a CIR field indicating the CIR for the A side of the PVC; a Gateway field comprising a mnemonic identifying the gateway that services circuit on the B side of the PVC; a Circuit field indicating the circuit name assigned to the B side of the PVC; a DLCI field indicating the DLCI assigned to the B side of the PVC; and, a CIR field indicating the CIR for the B side of the PVC.","As mentioned above, the BB Report Viewer component includes the capability of displaying maps. The Map viewer displays all available (BB enabled) circuits provisioned for the user. Clicking on a circuit enables a display of the latest statistics for the circuit. All display functions including sorting, saving to disk and printing the report are executed by the viewer locally.","In the preferred embodiment, there are two graphical views of the configuration report to support both the Standard and Enhanced service level options: ) illustrates the first map view  which presents a two dimensional map of the United States with all end points of a customer's virtual data network represented with an indicator , e.g. a star; Each star represents a customer's circuit end point location within an MCI data network, but may also indicate non-domestic frame relay, SMDS or LEC access end points. As shown in the ), selection of the \u201cView all PVC's\u201d button  enables the presentation of all circuits supported in the network. A second map view  may also be displayed such as shown in ). From this view, the customer may drill down on a selected endpoint by clicking on an identified location  and receiving a changed view (text box) that includes a description  of the physical circuits supported by that network end point. Thus, a click on any identified point provides greater detail about the circuits supported from that end point including: circuit location; Circuit number; Gateway mnemonic; Network Management ID; Bandwidth; # PVC; and, CIR Total. As shown in ), lines connecting PVC end points are also drawn by a mouse click on an identified end point. In the preferred embodiment, map views of ) and () are supported by invocation of Java applets which have the advantage that an image map implemented as a Java applet provides instant feedback to users. When a user clicks on a map displayed by a Java applet, the applet locally computes a response to the click and instructs the browser to load a new page.","Referring back to the report retrieval process flow  illustrated in , at step , the customer is further enabled to delete a report by selecting the delete report option. To delete a report, the user highlights the report in the Inbox listing ()) and selects a delete function, as indicated at step . In response, at step , the client submits a delete request to the BB Inbox Server which locates the report, logs the request, deletes the file, and returns an acknowledgment to the client, as indicated at step . Upon receipt of the acknowledgment, the Inbox client refreshes the display to reflect the deletion. Errors in the deletion activity result in an error message which is logged at the server, and returned to the Inbox client. In response, the client may notify the user of the deletion failure by a pop-up dialog box on screen.","For the case of accessing SNMP capabilities, an SNMP application is launched from the Broadband SNMP Main Display Application if the customer has the SNMP dedicated or PRS Enhanced service option. Specific responsibilities of the SNMP application include: 1) providing SNMP Get\/Set operations including: obtaining the selected variables from the Enterprise MIB upon initialization; 2) communicating with BBProxyServer and Broadband server database; 3) invoking Get\/Set operations on MIB and returning results and displays; 4) providing an Alarm Panel for displaying alarms and event reporting; 5) handling customer near real time notification of updates to these alarms if the customer's web browser is pointed to a Broadband web page; and, 6) providing customer with SNMP get capability for the lowest interval data, e.g., 15 minutes to 1 hour.","Thus, as further shown in ), the selection of the SNMP Alarm option  enables the presentation of a BB alarm panel screen  an example screen of which is shown in ). From the screen of ), the user is enabled to retrieve and view their virtual network alarm conditions including the following indications: an alarm type; circuit id; alias; alarm severity level; alarm trap level; alarm description; and, date of the alarm. Details regarding the process flow in providing near-real time Broadband alarms is found in above-referenced, commonly owned U.S. Pat. No. 6,490,620.","In one embodiment, as shown in ), the alarm data is handled by listing all of the PVCs and the associated Access Circuits as well. For each PVC and Access circuit all relevant events and alarms will be displayed. Preferably, color coding is used for indicating alarm severity in compliance with OSI standards, e.g., orange for major, red for critical. In the preferred embodiment, Broadband alarms may be grouped into two categories: Network Detected alarms and User Defined alarms. Network Detected alarms include: \u201cSet alarms\u201d that are generated when a condition exists indicating service degradation or failure, and \u201cClear alarms\u201d which are generated when a previously set alarm condition no longer exists. Particularly, in order for alarm data to be updated, the alarm collection server process invokes two methods on BBProxyServer: 1) a \u201crecordAlarm\u201d method which records an alarm and writes the alarm data to the database; and 2) a \u201cclearAlarm\u201d method which clears an alarm and removes it from the database.","It should be understood that all Network Detected Alarms are event-based and discovered by SNMP Network Management tool. User Defined Alarms include \u201cAd-Hoc Threshold\u201d alarms which are generated in instances where a customer set value in a custom report is exceeded. The alarms are generated as the reports are updated, based on the polling frequency, and only when the customer set threshold is exceeded. User defined alarms additionally includes SNMP alarms which are generated when a customer defined alarm condition exists based on the SNMP service.","Assuming that order entry for the user has been completed and the user is provisioned with a level of service which includes SNMP functionality, the user has additional access to SNMP functions Get and Set. The Get and Set represent paired functionality which is accessed when the user selects the SNMP Get\/Set option  from the BroadBand View Main Display of ). The selection of the SNMP Get\/Set option  enables the presentation of a BB SNMP Get\/Set screen  an example screen of which is shown in ). From the screen of ), the user is enabled to: Get SNMP statistics and Set SNMP name.","Particularly, the process flow for providing SNMP Get\/Set capabilities begins by invocation of an SNMP applet which is sent to the client workstation by the BB Server application. By selecting the SNMP Get\/Set button  ()) from the main display causes the creation of a SNMPGetSetApp (COApp) object to manage the session and create a series of objects, SNMPGetSetFrame, SNMPGetSetView, SNMPGetSetModel and SNMPGetSetController to handle the presentation to\/interaction with the user. This also results in the presentation of the get\/set display window ()) having a dialog box  presenting the user with the customer, PVC or circuit to be queried. Particularly, the SNMP client stub invokes the following BBProxyServer methods for populating the dialog box with the PVC and circuit information: 1) a getSnmpCategories( ) method for communicating the request to retrieve SNMP variables from the MIB; 2) a \u201cgetPVCList( )\u201d method for returning a list of customer PVC's; and, 3) a \u201cgetCircuitList( )\u201d method for returning a list of customer's access circuits, i.e., circuit IDs. Preferably, the appropriate service is invoked on BBProxyServer, the BroadBand database is queried and the results are returned to the customer browser for display. The user selects the desired SNMP category , e.g., customer, PVC, or access circuit, to be queried. For instance, as shown in ), the selection of the PVC Statistics category  will enable the variable list box  to be updated with a list of only those variables from the selected category.","When a SNMP variable \u201cGET\u201d operation is desired, the user selects the particular SNMP variable. Then, the user invokes the get operation by selecting the GET button  from the Get\/Set display of ). Selection of the GET button causes the SNMP client stub to invoke the BBProxyServer side \u201cgetAttribute\u201d method which returns object <String>, the string being an SNMP attribute name, to the customer browser. By invoking the\u201cgetAttribute\u201d method, the request is submitted to the BB server and communicated to the MIB to retrieve SNMP attributes, e.g., circuit and PVC statistics. The MIB obtains the latest SNMP data, transfers the data to the BB server, and returns control to the BB Client which handles the display of the data to the customer ()). Particularly, the BB server issues a GetService request in turn to the MIB on the appropriate switch(es). The MIB locates the latest polled status information and returns the data to the server, which passes the data back to the client with a GetService Response message. Upon receipt of the data, the client closes the thread and updates the display. Finally, the user may submit requests for SNMP variables from other circuits, or, may end the session.","Above-referenced, commonly owned U.S. Pat. No. 6,490,620 describes the valid customer attributes that a client may get.","Likewise, when the user wishes to Set a circuit name, the user first selects the particular SNMP variable and further, enters the \u201calias\u201d variable value for the selected SNMP circuit. This \u201calias\u201d variable value is entered in the \u201cvalue\u201d entry field  as shown in ). Then, the user invokes the set operation by selecting the SET button  from the Get\/Set display of ). Selection of the SET button causes the SNMP client stub to invoke the BBProxyServer side \u201csetAttribute\u201d method which updates the selected SNMP variable in the Broadband database sets. By invoking the \u201csetAttribute\u201d method, the request is sent to the BB server which issues a setService( ) request to the MIB on the appropriate switch(es). The MIB changes the (user defined) alias assigned to the circuit and returns an acknowledgment to the server, which passes it to the client with a SetService Response message. Upon receipt of the data, the client closes the thread and updates the display, acknowledging that the circuit name has been changed. Finally, the user may submit new requests to set SNMP variables from other circuits, or, may end the session.","As in the case of Broadband network systems reporting, the nMCI Interact suite of network management applications further includes an event monitor tool  for enabling customers to monitor, over the Internet or a company Intranet, their dedicated voice and data circuits. A Web-based user-friendly interface presents network alarms on degraded or broken circuits and provides network performance and alarm information, thereby effectively increasing the efficiency of troubleshooting and allowing customers to make informed network management decisions.","More specifically, the Event Monitor tool  of the nMCI Interact System gives customers the ability to: exercise alarm management from a single workstation, the management including, triggering the alarms and clearing the events; acknowledge or recognize new alarm conditions as they occur; receive notification of fiber outages that impact their data circuits; define or display customized troubleshooting procedures for specific alarm or circuits; access a comprehensive database of their dedicated voice and data circuits; display or print lists of active alarms; define or display customized alarm filters to specify which alarms will appear in the alarm presentation; and generate reports about network performance.","A general block diagram illustrating the event monitor system architecture  is shown in . Generally, as shown in , the Event Monitor system  is integrated within the nMCI Interact system comprising: the user web browser  which employs an event monitor GUI  enabling the generation of requests and receipt of responses from various event monitor system server processes  over the Web\/Internet via a secure socket connection for presentation of event monitor's alarms and reports; report viewer  and requestor processes  () of the StarWRS tool  which provides the support for generating and presenting reports relating to the conditions of the customer's voice and data networks as described herein; a corresponding server side reporting component having the above described inbox, report scheduler and report manager components, in addition to alarm and report viewer and requestor components implementing Java applets having viewer classes that enable the downloading and display of performance reports generated from event monitor server processes . In the preferred embodiment, the viewer classes provide the following types of network alarms on dedicated circuits that carry the following service types: inbound services, e.g., toll free and 900 numbers; outbound services, e.g., Vnet\/Vision, and PRISM; and data services such as TDS 1.5. The circuit types for which the present invention presents network alarms include: dedicated access lines such as DALs; TDS 1.5 circuits; TDS45 circuits, DDS\/DSO point to point circuits; ISDN DALs; and SW 56 DALs. In addition, the event monitor reporting feature enables customers to review alarm data over a period of time by creating and saving reports. The reports which may be generated include alarm summary, alarm detail, alarm duration, data circuit performance, and DAL performance. The alarm and performance reporting scheme effectually allows the customers to perform alarm trending and analysis, and to correlate alarm occurrences to network availability, network performance and problem resolution. Reports for fault reporting may be requested through the report requestor component of StarWRS, and retrieved from the STarWRS inbox. Recurring reports may be requested on a timely basis, e.g., hourly, daily, weekly, and monthly. Moreover, through the report requestor, a user may specify whether the user should be paged or e-mailed when a report is in the inbox.","It should be understood that the event monitor tool may be integrated with the Broadband network reporting service to provide a comprehensive network performance reporting and alarm monitoring system.","Also shown as part of the event monitor system architecture  of  is the web server\/dispatcher component  which provides for the transport between the web browser and an event monitor proxy interface including all authentication and encryption. Thus, secure communication from the customer browser to a DMZ web server is enabled over a first TCP\/IP socket connection, such as SSL, and communication from the DMZ web server over an enterprise firewall to the dispatcher server is enabled over a second TCP\/IP socket connection. These secure paths enable customer requests and server responses to be communicated from the client browser to the event monitor server .","Specifically, the dispatcher forwards user requests to the event monitor server process  that employs an integrated proxy application  for receiving and interpreting the user messages and enabling the event monitor functionality. This proxy capability includes a multithreaded engine enabling multiple, simultaneously executing sessions supporting anticipated user load. The interface between the dispatcher server  and the event monitor proxy process  is also message-based, e.g., employing TCP\/IP socket transport, and, as will be described, a defined messaging protocol which includes a generic message header followed by proxy-specific data. In the other direction, the same process is employed, i.e., the event monitor proxy  sends the generic header followed by the proxy-specific response back to the dispatch server  for communication over the firewall (not shown) and back to the user browser .","In the embodiment shown in , the necessary CSV data files and report definition metadata files may be downloaded to the StarWRS inbox messaging server  for eventual presentation to the StarWRS browser-side components ,  for subsequent access. It should be understood, however, that all event monitor responses including CSV data files and report definition metadata files are forwarded through the dispatcher and intervening DMZ web servers for eventual display at the client. Additionally, the event monitor may return a report object of variable length which includes the report data to be displayed at the client workstation.","In a preferred embodiment, the event monitor server  performs the various database queries and function calls in response to requests received from the customer via the event monitor proxy . Particularly, the event monitor server  is responsible for all tasks leading up to and including the management of alarms and performance reports including data collection, calculation, storage, and report generation.","In operation, the event monitor server  supports communication with the StarOE server component  which provides order entry functions including functionality necessary to manage (create, update, delete) event monitor users, and allows for a feed of the appropriate order entry information to the event monitor server in order to properly associate the appropriate event monitor functionality and data to the right customer once given admission to the event monitor service. Thus, a messaging interface is provided between StarOE  to the event monitor server  functioning as a client to receive authentication information including logon user identifiers which are supplied in response to launch of the event monitor GUI applet . The billing identifiers and levels of services, including the specific entitlement information are supplied from StarOE  to the event monitor server  via flat files which may be generated daily.","From the back-end legacy host, the event monitor server  receives statistics on voice (DAL) and data (TDS 1.5) services for providing its functionality to the event monitor users. The DALs are groups of dedicated K circuits that carry voice traffic to and from a customer's premise terminating equipment, i.e., PBX, to a telecommunication service provider's switch. A TDS 1.5 data circuit is a dedicated point-to-point circuit that spans from one customer location directly to another. The data circuit includes at least two monitoring units, called Extended Superframe Monitoring Units (ESFMUs or ESF Cards), which generate alarms and collect statistics on the performance of the circuit. Alarms are presented near real-time and indicate that there is a failure associated with the data circuit. Performance statistics are compiled in 15-minute intervals and are used to derive performance alarms that provide the users with the indication that their network performance is degraded before the problem becomes service impacting.","Performance statistics are compared against pre-set performance parameters and deviations from these parameters are recorded. When a given threshold is exceeded, alarms are generated and notification is sent to the customers such that the customers may then view alarms and take necessary steps to correct the problem. The performance parameters and thresholds may be modifiable via the event monitor GUI applet  by those customers having proper access level entitlements as verified by the StarOE . Each of the components shown in  and their respective processes will be described in further detail herein.","Event Monitor GUI Client Application","All alarms and reports for event monitor are accessible via the \u201cnetworkMCI Interact\u201d alarming and reporting structure established within the nMCI Interact home page . Event monitor alarms are viewed via an alarm monitoring system in which both broadband and event monitor alarms may appear. The event monitor GUI client application is launched via the event monitor icon  on the home page ()). Reports for fault reporting may be requested through the report requestor component of StarWRS, and the inbox server.","In the preferred embodiment, the event monitor GUI client application  is launched by selecting the event monitor icon  from the \u201cnetworkMCI Interact\u201d home page ()). The event monitor GUI client application provides a menu bar, toolbar, and status bar for accessing event monitor services depending on the customer's service subscriptions. Event monitor service availability is determined by user logon session with StarOE server . If the user is not entitled or does not have authorization for a particular service, the corresponding toolbar icon or menu item is disabled. Thus, in accordance with the customer service option, the corresponding service icon and\/or menu item is not activated and would not respond to a user input.","In providing its basic services, the event monitor display applet may have the responsibility of: 1) requesting reports that are no longer on the inbox server to be retrieved from a report data archive if a pre-determined period of time has elapsed, e.g., 45 days, and provide these reports to the customer via the inbox; 2) defining alarm thresholds and parameters and trouble shooting procedures; 3) defining how the customer reports should be requested, e.g., report id, date, etc.; 4) providing on-line context sensitive help for all aspects of the event monitor web-based application; 5) providing the ability to spawn separate dialog windows, for example, to explain reporting activity in progress; and 6) providing access to custom reporting capability via the toolbar and menu.","In the preferred embodiment, the event monitor GUI application is implemented in Java to ensure platform independence and particularly is developed using many of the networkMCI Interact's common objects as described herein. Particularly, the Event monitor GUI application, via the COApp object, may create its own display space and present its user interface in a separate frame by having the space in one or more COAppFrame windows. The COAppFrame class and its COStdAppFrame subclass are wrappers for the Java Frame class which provide COApps with standard look-and-feel elements and implement some standard behavior, such as participating in COBackPlane's window management functions. The COAppFrame is a desktop window, separate from the browser. It presents the user with a preset layout of a menu, toolbar, status bar, enterprise logo, an application icon, etc., and a main viewing area. Since a separate frame does not need to be located inside a Web page, a concurrent (side-by-side) access to more than one networkMCI Interact application service is possible.","In another embodiment, the event monitor GUI application's startup code may be implemented using the COApplet class.","For determining the user's event monitor service options, the GUI client application requests and retrieves user profiles including the user entitlements from an event monitor customer database populated by a periodic feed (e.g., on a daily basis) from StarOE  ().","From the event monitor GUI client application, an alarm management object is also launched upon initialization of the GUI client application. The alarm management object essentially creates a blank user interface and starts a thread to handle communications with the event monitor server for events or alarms. The alarm thread is created to run periodically, e.g., every two minutes. Specifically, the AlarmThread invokes a COAsynchronousTransaction with the web server to poll for current event monitor alarms. When the AlarmThread receives the data back from the web server, it creates a command to update the display and executes the command.","The event monitor alarms are generally grouped into two categories: voice alarms and data circuit alarms, including broadband and SNMP alarms. Voice alarms are further divided into two types: service outage alarms which are generated when a percentage of circuits in a trunk group are not available to complete calls; and traffic alarms which are generated when a percentage of DALs reach a predefined percentage for blockage, terminating failure rates and originating failure rates. Traffic alarms are based on data accumulated for five or thirty minute intervals. Data alarms are divided into two types: service affecting alarms which are generated in instances where the service cannot be used because there is a loss of signal, unframed signal or equipment failure; and performance affecting alarms which are generated when high error rates are received for ten seconds or more, out-of-frame conditions occur or frame slips exist but service is still available. A Drill down view depicting each alarm down to the individual circuit is available via the GUI as will be described below.","Reporting Functionality","As described above, the existing and new event monitor reports may be requested via the report requestor, a component of StarWRS. The reports are then posted in the inbox. Customers view the reports by launching the report viewer applet, another component of StarWRS. Once the report is made available, at the customer's preference and selection based on priorities and severity, the customers may receive notification through one or any combination of page, e-mail, or fax in addition to the display option of the notification on the customer's inbox. For example, a customer may choose to receive page and e-mail notification on all level 1 severity alarms and just display notifications in the inbox for level 2 severity alarms, etc.","Recurring reports may also be created by the user to run on a timely basis, e.g., hourly, daily, weekly, and monthly, as well as ad hoc (one time) reports. For example, a customer may have a standard DAL performance report delivered on a daily basis, and on a particular day, the same customer may choose to submit an ad hoc DAL performance report for any given interval, i.e., previous hour, previous several hours or days.","In addition, the event monitor may provide the ability to drill down within customer's premise equipment to view a breakdown of the customer's equipment and the ability to monitor performance and report alarms on individual channels within each circuit. Giving customers the capability to create and save a variety of reports and graphical views allows them to perform customized trending and analysis for maintaining better control and problem resolution schemes during their network management process.","Moreover, the event monitor presents via the report viewer applet, the map of the continental U.S. (World for global customers\/services) for purposes of displaying the configuration of a customer's network. The customer may view their sites, the various connections between any two or more of these sites, and information about each specific site and circuit. The topographical mapping display allows customers to see a logical depiction of their network. The ability to drill down into individual sites, nodes and circuits are also available via the viewer applet. For example, if a customer has a circuit between New York and Los Angeles the highest level of the map shown may be the two locations on either end as well as the circuit between them. If a customer clicks on the circuit itself, raw data pertaining to the current throughput of that circuit or any alarm conditions that exist on the circuit may be displayed. Additionally, if the customer clicks on either of the two locations, further drill down for logical design layout of the customer premise equipment, such as a DSU or CSU, may be enabled. Furthermore, if alarms are present for that particular site, the drill down view may depict each alarm down to the individual circuit on a 24 channel T-1.","Another type of reporting service provided by the event monitor is called an integrated management services bouncing busy intervals report. This report provides a picture of a DAL group during its busiest time of the day by reporting statistics for the current or one of the previous 7 days at the busiest interval. The busiest interval is defined to be the 30-minute or 60-minute time period in which total usage was at the highest point. Other reports which may be obtained through the event monitor include: monitoring and performance reporting of individual DS3 and OC3 circuits, IDSN channels, International voice or data point-to-point private lines, E1 lines; and trunk utilization reports.","Alarming Functionality","The event monitor presents all detected alarms to the customer automatically, without the customer's intervention. The detected alarms within the event monitor are sent to the customers' inbox for spreadsheet display for on-line reviews. All current alarms are retrieved by the customer's web browser GUI applet using polling techniques at session initiation. Customers may define a period of time during which their alarms remain in current status, allowing non-current alarms to be deleted.","In addition to providing alarm notifications to customers, the event monitor may also provide a scheme in which a pre-defined trouble shooting procedure, modifiable by a customer, is launched automatically when an alarm is detected. For example, if an alarm is generated regarding a fiber outage that impacts a customer's toll free circuit, an option allows the user to go directly from the alarm message in the inbox to the appropriate alternate routing plan. In order to integrate two services, i.e., event monitor with toll free network manager (TFNM), the event monitor key data and alarm are communicated to allow TFNM to find the appropriate routing plan associated with the outage. The key data may include: toll free number, service id, circuit id, and type of service, e.g., toll free or broadband. The TFNM application is typically launched directly from an alarm view with the above parameters for finding the associated routing plan. User profile information needed by TFNM for authentication and entitlement verification before actually proceeding with the alternate routing plan, are also passed as parameters to the TFNM application at the same time.","Performance Metrics","The event monitor follows and conforms to general \u201cnetworkMCI Interact\u201d reporting standards in order to provide a consistent and common interface to the customers. Weekly reports do not have to be on a calendar week and may cover any consecutive 7 days. Monthly reports are, unlike the weekly reports, calendar based and are defined to cover the entire month. Ad-hoc reports are reports outside the pre-selected reporting structure and are available to customers within two minutes from the point of request by customers.","In a preferred embodiment, the event monitor alarms are distinguished into two types: event-based alarms, and statistical alarms. Event-based alarms are alarms generated on the physical connection between the customers CSU\/DSU circuits and the telecommunication service provider's switches, e.g., alarms occurring due to a loss or bring-down of a circuit. In addition, the customer may specify this notification to be sent as a page, fax, or e-mail. In these cases, the notification is sent within the required 30-second window from the moment the alarm is detected by the event monitor.","Statistical alarms are alarms generated due to the percentage of down time or of other statistical nature. Statistical alarms depend on the frequency at which the customer's web browser is polled, e.g., 2-4 minute intervals. Once polling is established and an alarm is detected, the time-to-deliver notification of the alarm is similar to the event-based alarms, i.e., within 30 seconds.","The Event Monitor Back-End Configuration",{"@attributes":{"id":"p-0534","num":"0534"},"figref":"FIG. 37","b":["1002","1004","1006","1004","1008","1006","1004","1008","1008","1050"]},"Event monitor server  accumulates in near real-time a database of events pertinent to each customer's leased services. The accumulated data is viewable via the client browser application GUI and also via the StarWRS reporting system as described above. Because individual customers may subscribe to various different services which may experience different events, event monitor server  must not only collect different sets of data on a real-time basis, but the client browser application GUI and the reporting system must also present the data in a format relevant to the particular services to which the customer subscribes. This data may be organized for display to the user in an event queue.","In the preferred embodiment of the present invention, event monitor host  is an Integrated Network Management System (INNS) host implemented as an IBM S\/370 mainframe and the event monitor server  is implemented as an IBM RS6000 computer; the architecture of this embodiment is depicted in . The present invention may be implemented in other ways, as would be apparent to one skilled in the relevant art.","Referring to , INMS host  operates in an IBM Customer Information Control System (CICS) environment and includes an IBM virtual telecommunications access method\/network control program (VTAM\/NCP) interface  for making an IBM System Network Architecture\/Logical Unit interface version 6.2 (SNA LU6.2) connection to a mainframe client gateway (MCG)  of INNS host . The MCG  in turn makes a Transport Control Protocol\/Internet Protocol (TCP\/IP) connection to IBM RS6000 event monitor server , which operates under the IBM Advanced Interactive Executive (AIX) 3.2.5 operating system.","Server  comprises two servers: a Structure Query Language (SQL) server  and an open server . Open server  receives events from INMS host  and stores them on a database  stored on server . The SQL server  is a database engine providing access to and managing database . In the preferred embodiment, database  is a Sybase\u00ae database and SQL server  is a Sybase\u00ae SQL server.","Database  compiles information that is sent on a regular basis by INMS host . The data stored in the SQL server may be queried at will by a user via the client browser application for analysis. Database  is a relational database using SQL server  as the database management system (DBMS). In the preferred embodiment, database  comprises two databases. The first database includes information relevant to other network management applications (for example, MCI Service View\u00ae), such as facilities and circuit prefixes, and a customer mapping table for all customers subscribing to the event monitor service.","The second database includes statistics relating to the various facilities monitored by network management system . In the preferred embodiment, these statistics are compiled and updated on a regular basis, by MCI Extended Super Frame Monitoring Units.","An additional database accessed and utilized by the fault management system is a customer database located with the StarOE server . This database includes specific event information such as alarms, reporting and user information. It also tracks the users who log on from the various client terminals via the client browser applications and stores such information as the user's log on password, access security, and the various alarm descriptions and their status as reported by network management system .","Database  includes a number of tables of data which are accessed by the client browser application GUI to event displays, including alarm displays, alarm report, facilities cross-references and event log displays. In addition to the StarOE authentication and entitlement checking, user access to database  is monitored by SQL server ; levels of security may be provided to permit tiers of access to different levels of information within database , as would be apparent to one skilled in the relevant art.","The data within database  is organized in views. For example, an alarm view provides an alarm description, an alarm severity representing the degree of consequence for the alarm, and selected conditions associated with the alarm.","The interface between INMS host  and server  is one-way, from the INMS host only. In this scenario, the INMS host  is a client, issuing calls for stored procedures to SQL server  via MCG  when there is an event to report.","When MCG  receives a request from INMS host , it accepts an LU6.2 conversation and creates a local area-networked-based connection to SQL server . The request is then forwarded to SQL server , which updates database  with the information sent by INMS host .",{"@attributes":{"id":"p-0546","num":"0546"},"figref":"FIG. 39","b":"1020"},"Severity: critical, major, minor, informational, no alert.","Service Types (MCI): 800, 900, TDS1.5, TDS 45, VNET, Prism\u00ae, Vision\u00ae, ISDN, SW56, and DDS\/DDO.","Corporate Identifiers: A list of corporate identifiers related to the customer's enterprise and for which the user is authorized access.","Facilities: All elements of a physical telephone plant required to provide a service and to which the user is authorized access (for example, trunk groups and circuits).","Data Elements: The user can configure a customized event view by selecting the data fields to be displayed.","Date and Time Elements: The user can configure a customized event view by selecting the date and time period for the custom event view.","Sort Order: The user can configure a customized event view by selecting, for example, the data fields on which the data to be displayed is sorted.","Once the event view has been defined, the client browser application transmits a transaction request to the server  via the web\/dispatch server. An SQL statement is generated at the server  to create the event view from data stored in database . In the preferred embodiment, the SQL statement is constructed such that each element\/field is joined by an \u201cAND\u201d and values within each element\/field are joined by an \u201cOR.\u201d Thus, an example partial SQL statement may be depicted as follows:\n\n","The SQL statement created in step  is forwarded to SQL server . The SQL statement identifies to SQL server  the particular stored procedure to be activated to obtain the event view specified by the SQL statement. The SQL server  then executes the stored procedure and builds a report of event data specified by the event view, as shown in a step .","Once the event report is built, it is sent to the client browser  via the web\/dispatcher servers. The events are typically loaded into an event queue. The events in the event queue are sorted by sort criteria entered by the user when defining the event view, as shown at step . In a preferred embodiment, the primary sort criterium is severity. The sorted events are displayed to the user on the client browser application GUI in a step . Each event displayed is accompanied by an acknowledgment field for the user to indicate his acknowledgment of the event; for example, the user may acknowledge an event, if so authorized, by entering an asterisk in the associated acknowledgment field. When the user acknowledges an event, as indicated by the \u201cY\u201d branch from step , the client browser application reports the acknowledgment to server , as shown at step . When the user has acknowledged the last event in the event queue, as indicated by the \u201cY\u201d branch from step , event processing ends. At this point, the user may either retain the session or close it.","If the session remains open, server  will report new events defined by the event view as they are received by server . When server  receives a new event, as indicated by the \u201cY\u201d branch from step , processing resumes at step , as shown in .","Thus, in accordance with the event view defined by the user and communicated to event monitor server , reports of events identified in the event view may be continuously forwarded to the client browser application, and made available in an event queue for display to the user in order of the severity of the event.","Call Manager","Another application of the suite of telecommunications network management applications is the call manager (\u201cCM\u201d) system which provides sophisticated mechanisms, e.g., intelligent call routing, for call center customers to control delivery of toll free calls from the telecommunications enterprise network to call centers, including call centers having multiple Automatic Call Distributors (ACDs). Particularly, using the CM system the customers have the ability to define routing rules which, on a call by call basis, determine the best place to route incoming toll free calls. A high level overview of the call manager system environment  is illustrated in . The call manager system  generally includes a service control point (SCP)  for providing call manager routing features, known as \u201ccall by call\u201d (CXC) routing; an intelligent routing customer element (ICE) (not shown); an intelligent routing host (IR host) ; and client workstations, i.e., call manager webstation client , and\/or Nexus workstation client . The SCP  is a routing engine which essentially maintains call routing rules and uses those rules to determine where to route the calls. A typical call processing flow for a call received from a caller  includes routing requests and responses from the enterprise switches  through above-mentioned data access points (DAPs)  and remote data gateways (RDGs)  into and out of the SCP . The DAP  executes a routing plan by translating a toll free number passed by the switch  into a network number, and maps it to an address. The RDG  provides a standard gateway allowing communication between the SCP host  and the enterprise's backbone network. The translated network number is then communicated to the SCP host  via the RDG .","Data collection and storage of ACD-based statistics from customer call centers and network statistics are supported by DAP traffic statistics (DTS) , the IR host  and the ICE components. The DTS collects network routing statistics from the DAP  and passes them to the IR host . The IR host  stores routing statistics from DTS  and the ACD . The ACD  data statistics are collected by the ICE for each ACD , normalized by the IR host  and provided to the SCP . When the SCP  receives a routing request, the SCP  typically determines the best location to route a call by modeling each call center using periodic Automatic Call Distributor (ACD)  data statistics to keep the model in line with what is actually going on at each location.","Upon completion of call processing according to customer routing plan, the DAP  passes routing instructions to the switch  for setting up the call to a customer's ACD . The ACD  balances the load of calls based upon customer defined rules such as the \u201cbusy-ness\u201d of a call center. Calls may be distributed evenly using \u201cround robin\u201d technique, or directed in which calls are routed based on a percentage allotted to each destination identifier. Voice communications are carried from the switch  to the ACD  which terminates the call at the appropriate trunk or destination identifier.","The routing capabilities supported by SCP  include a termination selection based upon one or more of the following: initial list of eligible destinations, destinations eliminated from consideration based upon tested conditions, artificially biased evaluation criteria, percent allocation, and manipulation of user-defined peg-counter variables. SCP  also supports the routing and blocking of incoming calls using event-level data based on one or more of the following characteristics: day of the week, day of year, preference of destination choices, time of day, membership of the automatic number identification (ANI) or caller entered digits (CED) in a defined list of values, load balancing and\/or availability at specific destinations, user-defined quota schemes, user-defined peg-counters, preference of destination choices, and artificial bias of load balancing algorithms.","The Call Manager Integrated Data Server(s) (CMIDS)  are included to provide a front-end functionality to the SCP host  and off-load various workstation-related processing from the routing engine. In addition, the CMIDS  may directly access data stored on the IR host or on other data servers. Further details of the CMIDS  will be described with reference to .","As shown in , the call manager system of the nMCI Interact System further includes one or more web servers  for providing browser-based customer connections from the World Wide Web (WWW or Web). The call manager web server  passes the customer connections through to the SCP host  via the CMIDS , and thus delivers the call manager functionality to the call manager webstation client  via a standard web browser and the Internet. The web server  is accessed by customers using the public Internet by directing a web browser  running on the call manager webstation to point to a call manager Uniform Resource Locator (URL).","The call manager webstation  may be any hardware\/software platform connected to the public Internet and running a supported web browser. The call manager webstation  is typically owned and maintained by the customer. The call manager webstation  includes a web-based graphical user interface (GUI) application which enables the customers to define their call terminations, and provision routing rules and associated tabular data to control routing by the SCP host . The GUI application also presents alarms and near real time graphical displays of peg counts and ACD-based statistics. The application also provides reports and data extracts of historical data, including call detail records (CDRs), ACD-based statistic, and peg counts. In addition, user-id administration functions including business hierarchy structures and function profiles may be performed via the call manager webstation's web-based GUI application.","In addition, the Nexus client workstation  is included as an alternative client for the SCP host . The presence of the call manager webstation  does not preclude use of the Nexus client workstation . The Nexus client workstation  typically runs a graphical user interface application for enabling the customer to define their call terminations, routing rules and to display the ACD and routing information in either tabular or graphical forms. The Nexus client workstation  are directly connected to the SCP host  typically via dedicated circuits to customer premise locations or through the enterprise backbone networks for the enterprise locations.","Call Manager Webstation Architecture",{"@attributes":{"id":"p-0567","num":"0573"},"figref":["FIG. 41","FIG. 41"],"b":["1130","1132","1140","1130","1132","1132","17","25","25"],"i":["a","b"]},"As described above, the client webstation  provides a web-based graphical user interface (GUI) offering data management and data presentation features for the call manager system. The web-based front-end GUI is typically written using the Java programming language to insure platform independence. The client webstation  typically includes a web browser with Java applets for the interface for providing access to the call manager webstation application from a standard web browser, e.g., Internet Explorer V4.01. In addition, the networkMCI Interact common objects, described in the above-referenced, commonly owned U.S. Pat. No. 6,115,040 and the contents and disclosure of which are incorporated by reference as if fully set forth herein, are used for implementing many functions needed for client\/server communications protocols. The Java applets generally reside on the web servers  and are dynamically downloaded to the client browsers (client webstations)  when the Uniform Resource Locator (URL) for the call manager webstation client GUI application is accessed.","The call manager webstation client GUI application of the system of the present invention is typically invoked by clicking a \u201ccall manager\u201d icon  from the networkMCI Interact home page ()). The customer is then presented with a toolbar for launching each of the call manager webstation application features as shown in  at . Moreover, on-line help is offered via hyper-text markup language (HTML) documents residing on the web servers .","Each call manager webstation application feature may be accessed through an icon button in a tool bar  as shown in . Moreover, each feature is brought up in a separate window frame, giving a consistent look and feel throughout the web environment. As shown in the example display of , the main features offered include: user  setup and administration, i.e., security functions at ; business hierarchy setup; call by call application for rules writing and provisioning at , ; graphic data display at ; alarm manager at ; and reporting and data extracts at . A detailed description for each of feature will be provided with reference to  below.","For providing the above features, the client browser includes class objects making up the client interface code, in a first embodiment shown in . Specifically, the user interface classes  represent the main GUI objects for performing a call manager specific functionality. Each of the classes, i.e., user and business hierarchy setup, call by call application, graphic data display, alarm manager, reporting extracts, and authentication\/entitlements, performs the corresponding client-side functionality associated with the call manager features provided. The web server classes  provide the communication pass through to the back-end server. The communication classes (not shown) are employed between the client browser  and the web server  for requesting transactions and\/or data sets from the web server .","In the first embodiment, the communications from the client  and back-end CMIDS  () via the web server  are conducted using the common gateway interface (CGI). Requests from the client are typically first targeted at a CGI program, which then relays the request to the appropriate proxy process. Results are returned from back-end processes to the requesting client in the same manner. Each transaction or data request may be executed as a separate process, to allow processing to continue from other applications within the call manager webstation system.","In a preferred embodiment, a Netscape Server Application Program Interface (NSAPI) module may be used as an alternative to the CGI layer, the NSAPI module replacing the CGI-protocol communications layer between the client  and the web server . The web server  may be configured to pick up the NSAPI module and load on start up. Java client code  () may be configure to refer to the NSAPI module. For example, the Java client may invoke a method to communicate directly with the NSAPI module that performs the same function as the CGI program. Using the NSAPI module enhances performance and messaging throughput. When the server  recognizes requests for the NSAPI module, it invokes a particular function in the module which performs essentially the same function as the CGI program. For example, a middle tier transaction handler, typically a message manager (msgmgr) and residing with the web servers , may be modified to use the NSAPI instead of the HTTP CGI. The advantage of NSAPI over CGI is that a new process need not be created whenever a request comes in from the web client .","In general, and as described above, the web server  provides a communication pass-through between the web client GUI application  and the back-end call manager integrated data server (CMIDS)  which may communicate with the SCP host.  illustrates one embodiment of the software architecture showing communications between the client  and the web server  and its components. The web server  provides web-based call manager applications to web clients having a web browser on their client workstations . The web server  includes an HTTP service manager  and a message manager . The HTTP service manager  generally handles requests from multiple clients  to download web pages and Java applets for display within a browser. Web pages include hypertext markup language (HTML) files and Java applets  that are downloaded to the clients  and are executed within a browser by the Java applets. The HTTP service manager  also handles message transactions via the POST method defined by the hyper-text transfer protocol (HTTP) protocol. The HTTP service manager may be standard off-the-shelf World Wide Web server software, e.g., Netscape Enterprise Server.","The message manager  is typically a CGI program that is executed as a spawned process within the HTTP service manager  when a message transaction is received from the client via the POST method sent to the HTTPS port () . The HTTP service manager  spawns a process to run an instance of the message manager  each time it receives a message transaction from the client. Alternatively, the message manager  may be implemented as a function in the NSAPI module as described above. The HTTP service manager  then invokes the message function in the NSAPI module. Both input and output streams are created by the message manager  to receive message data from the client  and to reply back to the client . The message manager  is generally responsible for the following: 1) accepting new user login by allocating a new session key for a newly created session; 2) attaching a dispatcher and proxy header to the web client's message and forwarding the message to the proxy server ; and receiving a SCP host response message from the proxy server  and re-wrapping this message with dispatcher and proxy header and sending this formatted message to the web client . Message transactions are sent to the proxy server  over a new connection by opening a new TCP socket to the proxy server  while the original socket from the browser is blocking, waiting for a response from the web server .","Typically, communications to and from the client  take place over hyper-text transfer protocol secure (HTTPS), which uses hyper-text transfer protocol (HTTP) over a secure socket layer (SSL) encrypted channel. Applications may include web pages in the form of hyper-text markup language (HTML) files and Java applets  that are stored on the web server . The HTTP service manager  downloads the HTML files and Java applets  to the client  upon request via the HTTPS port , typically configured to port number . Each transaction from a client  is sent to the web server  in the form of a logical message that has been encrypted. The web server  decrypts the message and wraps the message with the user's information, including environment variables and a server-generated session identifier (id). The message is then encrypted and forwarded to the CMID , or alternately, as will be described below, to the proxy server component of the CMID .","The message transactions created by the client  may be transmitted over HTTPS using the POST method defined within the HTTP protocol. Using the POST method, a specified CGI program and more specifically, an invoked message manager runs as a thread in the HTTP service manager . Message data is passed to the message manager  by opening an input stream and an output stream within the thread. As described previously, the HTTP service manager  spawns a message manager process  for each message transaction sent to web server . Each message transaction is a single request from the client  that is answered by a single reply from the web server .","The web server  also includes a session manager  and a session table () for providing session management functions including the authentication of various web requests. A session is defined as the amount of time between which a client  logs onto the web server  and when the client logs off. During a session, a client  may submit many message transactions to the web server . State data for each session is stored in the session table (). Session entries are deleted from the session table () when a user logs off or when a session is aged. Each message transaction received by the web server  is associated with an active session. If a session no longer exists for a particular transaction, the message transaction is returned to the client  as rejected. The application then may prompt the user to login again.","Generally, the session table  is a table that has state information on all current client sessions that are active on the web server . When a client logs onto the web server  and is authenticated, the client is provided a \u201csession id\u201d which is a unique server-generated key. The client holds this and returns it to the server as part of subsequent message transaction. The session table  maintains a \u201csession key table\u201d which maps these keys to the associated session. The session table also includes a time stamp for each client session. A client session's time stamp is updated each time a message transaction containing the session id for the session is received. A session is aged if no message transactions belonging to the session are seen after a given amount of time. If so, the session, with its entry deleted from the session table , is logged off from the SCP host .","The session manager  is generally responsible for monitoring all current client sessions. The session manager  typically monitors the sessions by accessing the session table  and checking the current time stamp values for each current session. If the time stamp value shows that a session has aged, the session entry for the aged session is cleared from the session table . Clearing the session entry forces any further message transactions associated with the session identifier to be rejected, requiring the user to restart the session.","For communications to and from the web client  and the back-end, the middle-tier web server  supports three types of transport mechanism which are provided by the networkMCI Interact platform: synchronous, asynchronous, and bulk transfer, as described herein. Particularly, the Synchronous transaction type typically has a single TCP connection which is kept open until a full message reply has been retrieved. The Asynchronous transaction type is typically used for handling message transactions requiring a long delay in the back-end server response. A server process handling the message transaction responds back to the web client  immediately with a unique transaction identifier and then closes the connection. The web client  may then poll the web server  using the transaction identifier to determine when the original message transaction has completed. The bulk transfer type of transport mechanism is typically used for large data transfers which may be virtually unlimited in size.","In the embodiment shown in , the web server  includes a proxy server  and a database , e.g., Informix database. In this embodiment, the web server  includes capability to communicate directly to the SCP host, bypassing the CMIDS , by having the proxy server reside physically in the web server.",{"@attributes":{"id":"p-0583","num":"0589"},"figref":["FIG. 44","FIG. 44"],"b":["1132","1132","1110","1110","1112","1132","1110","20","29","631","1132"]},"In another embodiment, the data processing components for business and data logic, i.e., the proxy server and the database, resides with the CMIDS , thereby reducing the functions of the web server  to an application server providing primarily state and session management. Porting the proxy server  over to the CMIDS  may be easily performed. The transaction handler in the middle tier, i.e., the message manager  still passes messages between the Web client  and the CMIDS . The only change needed is that the transaction handler connects to the proxy residing on the CMIDS , as opposed to the proxy  on the web server .","The proxy server  generally processes message transactions from the client  and is multithreaded to handle multiple message transactions simultaneously. The proxy server  is designed to process one type of message transaction or a set of message transactions. In this embodiment, routing of the messages to and from the proxy is handled by the message manager . The proxy server  also interacts with a database , e.g., Informix, to pass back information to be displayed by the client . The proxy server opens a connection to the SCP host  to retrieve information about routing plans or report statistics by sending the SCP \u201cman machine language\u201d protocol (MML) commands. Upon retrieval, the proxy server  formats a response message which is sent back to the client webstation  so that it is displayed on the current web page. As the message reply is sent back to the client , each thread created by the proxy server  is completed. It should be noted that the proxy server  need not reside in the web servers . Instead, as will be described with reference to , the proxy server  may reside in the CMIDS , the back-end server component.","The database  generally maintains information needed to translate the messages to and from the SCP host . A message translation program written in 4GL accesses the database  when a message transaction is received. The program translates the message and sends the message to the SCP host  for processing. After the message has been processed, the program translates the response and sends it back to the message manager . The proxy server  typically invokes an instance of the translation program for each message transaction it receives and processes. As noted above with reference to the proxy server, the database  may also alternately reside in the CMIDS with the proxy server.","In the first embodiment, a data server, i.e., the CMIDS, is included. In this embodiment, much of the functions of the proxy server are performed within the data server. More specifically, the proxy server  and the database  may be ported over to the CMIDS . The web server  communicates to the proxy in the CMIDS  which then communicates with the SCP host. The call manager integrated data server (CMIDS)  generally services web requests for the webstation application and serves as a front-end for the SCP host . Referring back to , the CMIDS , in addition, provides data storage and management for data resident on the SCP host , the IR host , and\/or other servers. The CMIDS  also provides pass through connectivity for rules writing and other provisioning from the client webstation  to the SCP host . The CMIDS includes databases -and provides an interface  to the call manager SCP host  for rules writing and list management. CMIDS databases -are extracted or replicated from the SCP host  and\/or the IR host . The SCP host  services are typically requested and satisfied through a protocol known as \u201cman machine language\u201d (MML) commands. The CMIDS  utilizes MML as well as other interface mechanisms supported by the SCP host . The call manager integrated data server (CMIDS)  physically resides on hardware located behind the intranet firewall () as shown.","The proxy server  and the database  which were described with reference to the web server , may reside in the CMIDS . In addition, the CMIDS  may also include a session manager and associated session table for managing host sessions. As described above, the proxy server  generally handles webstation client  requests passed from the web servers  by accepting message transactions from the webstation client  via the web servers , maintains logging information, sends the request to a session manager, and receives data from back-end and forwards to the web servers . In addition the proxy server  may accept messages originating from the Nexus client workstations ( at ), and perform user logon validations for the Nexus client workstation . The Nexus client transactions, with the exception of the user logons, are passed directly to the SCP host  for processing via a Nexus port manager (not shown).","The session manager , residing in the CMIDS , receives data from the proxy server . The session manager  updates the sessions table , validates that the user has proper privilege to perform the task and determines whether the transaction originated from a webstation  or a Nexus client . The user validation function may be performed for the webstation client  also, in addition to a validation conducted by the networkMCI Interact StarOE authentication and entitlement system during the session logon.","CMIDS  also may include a Nexus host formatter, a CMIDS transaction manager, and a Nexus port manager. The session manager  typically passes a transaction request received from the web server  to either the Nexus host formatter, or the CMID transaction manager. The Nexus host formatter module services transactions requiring SCP host services to fulfill the request. If the transaction originated from a Nexus client workstation , the MML command message is adjusted to use a selected generic id for access to the SCP host . If the transaction originated from a webstation client , the request is translated to the correct MML format. When the message is prepared, it is then sent to the Nexus host port manager component.","The CMIDS transaction manager module services transactions that do not require the SCP host , i.e., the types of client request which may be serviced locally on CMIDS, including: obtaining NEMS alarm information, obtaining GDD information, and processing of user security. When the local processing is complete, results are sent back to the proxy server  component.","The Nexus port manager component of the CMIDS manages pools of session with one or more SCP hosts . The Nexus port manager logs onto each session in a pool using a \u201cgeneric\u201d user id. Using a \u201cgeneric\u201d user id enables each session to access an individual user's data without having to log each user onto the SCP host . MML commands for a particular user are sent to a SCP host using any available session in the pool of \u201cgeneric\u201d session. After an MML command is sent and a response is received, the session is returned to the session pool and freed for use by the succeeding transactions. A session pool is defined as a set of sessions connected to one particular SCP host . Therefore, the Nexus port manager component of CMIDS  supports multiple session pools for communicating with multiple SCP hosts .","The Nexus port manager also maintains state of each session in each pool. The Nexus port manager generates a keep-alive-message whenever a session is idle to keep the SCP host  connection from being dropped. If a session in a pool has failed, the Nexus port manager will try to reestablish the session and add it back into the pool when establishment is completed. The Nexus port manager determines the communication channel to use to access the SCP host  and keeps a number of connections open to the host . Each message is sent to the SCP host  and the channel blocked until a response is received.",{"@attributes":{"id":"p-0594","num":"0600"},"figref":["FIG. 45","FIG. 46"],"b":["1140","1148"]},"The CMWS proxy  is generally a logical internal software entity which verifies application access and interfaces with host application. Depending on the application access chosen by the customer, either the networkMCI Interact dispatcher or the CMWS web server  communicates client transactions to the CMWS proxy . The networkMCI Interact, as described herein, typically accepts the encrypted customer request from the networkMCI Interact web server cluster, and it interfaces with a CMWS proxy. The user account interface software component  generally maintains sessions with the SCP hosts and provides the functions of the Nexus port manager described above. The report handler process generally maintains databases -and provides reporting facilities. The CMIDS back-end interface  supports a number interface mechanisms including MML and command line access to the Nexus SCP host, common alarm and logging services, and data retrieval from the IR host.","The Call Manager Webstation Back-End","As described generally above, the back-end is responsible for transmitting web client request to the SCP host and delivering the host reply information back to the web clients. For supporting the request\/reply transmissions, the back-end system of the present invention generally includes three logical components: front-end interface (BFI), translate\/data manager (TDM), and back-end to Nexus, i.e., SCP host interface (BNI). It should be noted that SCP host functionality is currently implemented on the Nexus, hence the acronym, BNI. However, other host systems are not precluded as having capability to support the SCP host functionality for the purposes of the call manager webstation system of the present invention.",{"@attributes":{"id":"p-0597","num":"0603"},"figref":"FIG. 46","b":["1200","1122"]},"Accordingly, as shown at step , when the customer  dials the toll-free number, the call goes to the network through the switch. At step , the call is passed from the switch to the DAP for translation. The DAP translates the toll-free number to a network number and maps it to an address readable by the RDG. NetCap  generally houses routing plans, destination labels, toll-free numbers, logical terminations, DAP-based details and trigger plans required for the call manager webstation system. Most of this data may be provisioned in NetCap  via the Toll Free Network Manager (TFNM) application service, as described herein. Seeing the trigger point and other DAP-based data provisioned from NetCap , the DAP passes the call to the RDG at step . At step , call statistics are saved in DAP traffic statistics (DTS) for use in case of time-out or other failures. They are also stored within the IR host. At step , the RDG, with its ability to communicate with the SCP host, passes the network number and associated address to the call-by-call (C\u00d7C) routing application on the SCP host. Based on instructions in the rule set defined by the call manager webstation system customer, the C\u00d7C application selects the HSN ACD path group at step . At step , C\u00d7C application then selects the individual destination identifier within the ACD path based on the specified distribution method which may be either even\/\u201cround robin\u201d or directed\/percentage distribution. At step , the call is routed back through the RDG to the DAP. Then at step , the DAP routes the call to the ACD via the specified destination id or trunk. Specifically, referring back to the above illustrated example, calls received on Thursdays between 5:00 and 7:00 GMT may be set to be routed to Orlando, and accordingly the destination id is Orlando Central. The C\u00d7C routing application returns destination id \u201cOrlando Central\u201d to the network, which routes the call to the ACD via the Orlando Central destination id or trunk.","Call Manager Client GUI Application Implementation","As in the other nMCI Internet network management client applications, the call manager client application (CMApp) is preferably derived from the (common object) COApp class and may be launched by a backplane object that is typically derived from the COBackPlane class, including the networkMCI Interact backplane ().","In one embodiment of the present invention, the call manager client application is launched in a separate browser window from the one within which the networkMCI Interact backplane is running. For example, after validating that a customer's profile allows access to the call manager application, and after a customer clicks the call manager icon  on the networkMCI Interact home page ()), the networkMCI Interact backplane creates a separate browser window and populates the call manager webstation URL. The call manager webstation web server then downloads the call manager client application for execution within the new browser window. The call manager client application downloaded from the server includes a CMBackPlane class which is an applet derived and inherits from the COBackPlane class. The CMBackPlane is launched with the call manager webstation web page and provides backplane functionalities within the context of the call manager webstation application. The call manager client application also includes a aFeature class from which the CMFeature is derived. The CMFeature typically is invoked by the CMApp and provides an application specific functionality within the call manager application such as reporting, alarm management (NEM), graphical data display (GDD), and call by call application (C\u00d7C).","Above-mentioned commonly owned U.S. Pat. No. 6,611,498 illustrates a class diagram for a call manager global attribute display icon. A scenario diagram illustrating the class interactions when setting the global attribute and a scenario diagram showing the class interactions when the call manager application is launched from a web home page having the backplane applet is also described in commonly owned U.S. Pat. No. 6,611,498. Upon the call manager application launch and initialization, the main toolbar sets its icon. For example, the browser starts the backplane applet which launches the CMApp by calling its init method. The CMApp calls setIcon method for setting up an icon for the main toolbar. The main toolbar may be implemented using a view of a model in a MVC paradigm described above. Above-referenced, commonly owned U.S. Pat. No. 6,611,498 also describes the class interactions when an icon is set on feature initialization. When a user presses a button on the main toolbar to launch a feature, e.g., NEMS, Rules, Provisioning, etc., the CMAppView derived from the theMainToolbar class creates\/activates the selected feature and initializes it. When the CMFeature is instantiated or started, it invokes a setlcon method to create a frame, the CMFeatureFrame, in which to run the selected feature.","Call Manager Webstation Client Application Features","As described above, the call manager webstation application allows authorized customers to manage their ACD data networks via a web-based interface. Specifically, customers are enabled to provision hierarchies for their business; control all routing of their toll-free traffic; create, modify or delete agent pools; manipulate capacity tables; and define quota schemes, value lists and schedule tables.","In the manner as described herein, a customer at a client webstation  having Internet connectivity and a web browser, and after logon, is presented with the networkMCI Interact home page [)] downloaded from the web server. With downloading and presenting of the home page, the web browser at the webstation , deploys a backplane applet via which the call manager GUI client application is invoked. The backplane requests a list of authorized applications from the StarOE authentication and entitlement system for the networkMCI Interact platform and a select list of applications which may include the call manager webstation application, is enabled on the home page according to the customer specific entitlements. The call manager webstation application is then accessed from the home page [)].","The customer may be presented with a call manager webstation application logon dialog box, in which the customer enters the call manager webstation logon name and password. In addition, the customer may be presented with a change password dialog. This dialog implements a password expiration design feature, which due to security reasons, the customer must change after a predetermined period of time.","In addition, multiple hosts may be handled through the web client front-end and translation processing at the back-end. The front-end client application sends the \u201cget-nexus-host\u201d command to retrieve a list of SCP host names. The host information is stored at the back-end with the Informix database and, typically an SQL routine retrieves the available Nexus SCP host machines. The proxy residing at the back-end returns a list of the available Nexus SCP host machines to the front-end web GUI client application. The proxy generally maintains a \u201chosts\u201d list having SCP host names and their IP addresses. Maintaining the list of host names on the proxy allows for easy modification of host names and IP addresses with no impact to the client code.","When the front-end web GUI client application receives the list, a list of host names may be displayed in a drop-down list for the customer to select, or the customer may be prompted for the Nexus SCP host machine desired. The selected host name is sent along with a login transaction having user name\/password to the back-end, when the customer clicks a \u201clogin\u201d button from the login dialog. The \u201cestablish-session\u201d command is then sent to the back-end where the proxy may open a connection to that host. The proxy maps the SCP host name to the appropriate IP address and forwards the user login request to the host. The SCP host id selected at login is populated in the toolbar ( at ) at the client webstation.","An application-level process flow  for the CMWS system is now presented in view of . After an entered login name is validated by StarOE and user entitlements ascertained, the call manager webstation applet is downloaded to the customer webstation , and as indicated at step , the customer is presented with the screen  shown in  through which the customer may perform the call manager features of the present invention provided. These features include: manipulating user and business hierarchy by querying, creating, or editing user id records as shown at steps  and ; managing routing schemes via the call by call application as shown at steps  and -; invoking alarm manager at step  and  to view problems occurring across the call manager components, such as loss of connectivity, failure of ACD data collection, system failures, and application abnormalities; reporting and data extracts at steps ,  for printing, displaying and managing ACD statistics, alarm history, database usage, peg counter, and system performance; and graphic data display at steps ,  for viewing histograms and charts of ACD and peg-count statistics.","More specifically, by selecting the option at step , to manage a user and business hierarchy, via, e.g., the security button  () from the toolbar  (), a customer may search for a user id and, with appropriate privileges, create or edit a user id for a business level below their own. Through this option the customer may also access reporting visibility to all data items belonging to the customer and any business level below their own. In addition, the customer may assign a read, read\/write, or no access privileges to each function in the user id profile. Moreover, the customers may administer and modify limits on the number of entities that a business unit may own in the provisioning database.","By selecting the call by call application at step , for example, by clicking on an icon labeled \u201cProvisioning\u201d ( at ) on the call manager web station tool bar displayed on the screen  in , the customer may perform business hierarchy provisioning as shown at step . The customer may select the option at step and perform load-balancing by determining the degree of \u201cbusy-ness\u201d by tracking the average call handling time, the number of agents, and the number of calls routed to each destination. At steps and , the customer is enabled to provision capacity tables for providing a default staffing allocation for use by the load balancing algorithm. With the C\u00d7C option and shown at step , the customer may also provision basic destination ids representing a single call termination on the network which may be a single telephone instrument or a line termination into a PBX. Destination ids with ACD feeds, which may represent a single call termination into an ACD, may also be provisioned. Provisioning of ACD path groups representing a set of destination ids that terminate on the same physical ACD and share the same statistical data feed is also enabled. Provisioning of Destination Groups representing a set of logically related destination ids and\/or ACD path groups is possible via the C\u00d7C option. Destination Groups are a convenience mechanism for writing rules that refer to multiple destinations without having to list each destination separately. In addition, the customer may provision distribution methods, e.g., even, which is a round-robin selection of destination ids or directed, in which the calls are routed to destination ids based on a percentage allotted to each destination id.","At step , quota customers to specify and maintain call routing quotas for destinations. At step , the customer is enabled to provision called numbers. For example, the customer creates a rule set associated with the called number. The rule set typically determines the location of the caller and selects the appropriate destination number for the nearest warehouse. At step , the customer may provision value lists which are sets of related numeric values. They are typically used in rule sets to test the attributes of an incoming call to determine a characteristic of the call or caller. An attribute of the call (such as the ANI) is tested against a value list. If the value of the call attribute matches an entry in the value list, then other rules are executed based on this logical condition. This feature is highly useful for non-English-speaking callers. At step , the customer may provision translation tables. The translation tables include a highly flexible mechanism for performing a table lookup and returning a value that corresponds with the search argument. At steps and , the customers may maintain user variables such as setting up names for peg counters and rule variables and routing instructions.","By selecting the alarm manager option at step , for example, by clicking on an icon labeled \u201cNEMS\u201d ( at ) on the call manager web station tool bar displayed on the screen  in , the customer may display various alarms for problems occurring across the call manager components. These components were described above. Typically, alarming is performed through the BMC patrol software agents with monitoring provided by the system operational support (SOS) organization, which monitors other components of the call manager platform. Patrol's \u201clogwatch.cinfig\u201d allows setting up a file name and a selection string. Patrol agents typically monitor the file and pass alarms matching the selection string to the web clients. For logging application level alarms, a UNIX syslog facility is used. A set of \u201csend-alarm functions\u201d interfaced between the application processes and syslog daemon is added to a common utility library. Through the send-alarm function the call manager application processes send the alarm messages to the same log file with different levels of severity. The alarms with high level of severity is generally monitored by system operational support (SOS) organization through BMC patrol software. Each alarm message typically includes a process name, an alarm number, and a severity level. A typical alarm message looks like: \u201cApr 8 17:23:31 cmjwstest Process Name [Process PID]:[LOG_Alert Number] can't set up a connection to XXX Nexus at Line  File proxy.\u201d The alert number then may be used to determine possible solutions.","Referring back to , selecting the reporting and data extracts option at step , for example, by clicking on an icon labeled \u201cReporting\u201d ( at ) on the call manager web station tool bar displayed on the screen  in , enables the customer to obtain reports of ACD statistics, alarm history, database usage, CDR extracts, Peg counters, and system performance. Each of these reports may be generated on-line or by a print function within the application. The ACD statistics are monitored in live, near-real-time by the SCP Host application. A load-balancing algorithm uses ACD statistics to determine the \u201cbusy-ness\u201d of a destination. When an ACD Path Group is selected as the least busy location by the load-balancing algorithm, one of the individual destination ids within that ACD path group is picked to carry the call. The reports of alarm history permit the customer to view the status of alarms and events on the various hosts. An alarm or event may be an informational message sent autonomously from a host. Database usage reports generally provide information on users, typically by user id, accessing a workstation, SCP host, or C\u00d7C application. CDR extracts generally provide a database record of call detail record information about a called number translation query and its outcome of the routing translation process. Peg counters generally represent a series of accumulators that are available to the user for counting actions or situations encountered in a rule set. System performance reports allow the customer at a workstation (webstation) to monitor capacity of the host and application components to foresee and prevent possible outages.","Selecting the graphic data display option at step , for example, by clicking on an icon labeled \u201cGDD\u201d ( at ) on the call manager web station tool bar displayed on the screen , enables the customer to obtain and view histogram, chart, and line graph displays of ACD-based statistics and routing peg counts, which may be refreshed as frequently as once per minute.","Rules Writing, Testing, Debugging Application Features","The rules feature ( at ) allows users to write rules for routing of toll free calls. Rules may load balance based on call center capacity and route based on automatic number identification (ANI), caller entered digits (CED), or quotas. Via this feature, users may also test, install, uninstall, and swap rules as shown at . The bottom half of screen  in  displays a typical rules writing\/editing template. The users may build rules on the rules construction area  by including statements selected from the constructs list box and the statements list box . The users may also select various options  available for the selected construct or statement for building the rule.","For enabling a rule writer to test a rule set, the rules feature provides a rules debugger\/tester functionality which runs a rule set against a set of test data, i.e., call context, simulating call scenarios in which to test a rule set logic. This optional facility allows rule writers to check if their rule set exhibits the expected behavior, for example, before installing the rule set on the network. Moreover, because this test feature is purely optional, a rule writer need not run the rule testing functionality before the rule is installed.","When a customer, e.g., a rule writer, selects the debugger\/tester feature option, a rules testing dialog appears. Via this dialog, a user may define a call context parameters for simulating call scenarios in which to test a rule set logic. The basic call context includes called-number, ANI, CED, carrier, date and time of the call. Optionally, the user may also modify the different parameters of destinations and quotas that may affect the load balancing.","In addition, an option to allow the database to be updated during the simulation is also provided. During the testing process, the customer may step through the simulation one line at a time or choose a \u201cRun\u201d command to run through the entire call all at once. Furthermore, during the simulation, the customer may select from various view tabs to view, including, a log view, a destination status view, a destination details view, a CDR view and a user variable view.","For executing the testing process, the debugger\/tester uses the MML interface to Nexus, i.e., the debugger\/tester formulates the user actions to one or more MML commands and sends the translated command to the SCP host. The SCP host typically stores the state of testing (including the different views of the log), and manages the test execution.","System Status Display","Typically, a system status display  shown in , is opened by selecting \u201cSystem Status Display\u201d from the security button on the main toolbar ( at ). The dialog is non-modal having a top half having a dialog  including general information about the system, and, a bottom half including a combination box  that allows the user to select between the different options described above, i.e: application status, ACD gateway status, partner links status, signaling network links status, and webstation session links status. Selecting an option displays a list including information relevant to that option. As shown at , selection the application status displays information including application names , instance numbers , desired states , actual states , release numbers  and TPS . Similarly, selecting the ACD gateway status option displays information including gateway names, gateway states, gateway link states, collector link states, and dates\/times of last change. Selecting the partner links status option displays host names, states, link states, sync states information. Likewise the signaling network links status option displays information which includes linkset names, link names, states, dates\/times of last change, and adjacent point codes. Selecting the WebStation session links status option displays information such as workstation instance numbers, locations, states, user ids, and dates\/times of last change.","Example MML and (SCP) host system status messaging supporting the system status display feature of the CMWS application is described in above-referenced, commonly owned U.S. Pat. No. 6,611,498. When a message prompting user readiness is received by the host, the host sends system status messages on a regular interval. The length of the interval may vary anywhere from every second to every minute. The system status display messages are automatically sent from the SCP host, once the messages are turned on. The backend typically stores this type of message received from the SCP host until the client queries for it. A unique set of data is stored for each user currently performing a system status display. Subsequent messages received from the SCP host typically overwrite previous data.","The Host Administration Functions","A user may select to perform host administrations by selecting the appropriate icon from the main tool bar (). In response, a pull-down menu from is presented with options including: a backup option for backing up server database to a user-selectable back-up medium, e.g., tape or a disk; an ACD gateway administration option for providing users with the ability to view, create, delete and edit ACD gateways; an ACD collector administration option for providing the user with the ability to view, create, delete and edit ACD collectors; a FMS gateway administration option for providing the ability to view, create, delete and edit FMS gateways; and FMS collector administration for providing the ability to view, create, delete and edit FMS collectors.","When the ACD collector administration option is selected, a dialog  shown in  opens with a list of retrieved gateway types. Typically the client GUI application sends two messages to retrieve information needed to populate the dialog box . A \u201crtrv-acd-type\u201d is used to fill the gateway type combo box . A \u201crtrv-acd-status\u201d is sent to retrieve information  on the selected gateway type. Clicking a row in the list  of enables the delete button. Typing characters into the site collector name  enables the Add button . The FMS administration dialogs share the same dialog box with the above described ACD gateway and collector administration functionalities. The same messages, i.e., the \u201crtrv-acd-type\u201d, and the \u201crtrv-acd-status\u201d, are sent to the back-end but with different parameter types, e.g., \u201cFSM\u201d or \u201cACD.\u201d","Company Branding","The CMWS component of the nNCI Interact system supports a branding functionality which allows users to open the call manager webstation application in a company specific context. Details including an example class diagram including classes used in branding process and, a scenario diagram showing an example of branding process for presenting a warning dialog with a company brand is found in above-referenced, commonly owned U.S. Pat. No. 6,611,498. In this application, the CMBackPlane class is derived from the COBacklane class, which is an applet, which inherits all of the applet attributes and methods. This branding feature may be equally used in the other applications of the present invention when the Backplane class for that application is defined. The main URL for the branded application uses JavaScript, a client side scripting language, to render the html. The JavaScript, typically, directs the browser to retrieve a company brand. The browser then opens the application web page with the company web page specified in the query portion of the URL. Typically the application applet retrieves a company brand name by invoking a getParameter method (an applet method), and sets the brand name in the application specific globals class by invoking a setBrand method. This feature of the present invention enables resellers of enterprise telecommunication services to brand those services and features as their own when providing them to a third party user or customer. This facilitates the adoption and resale of unused enterprise capacity through a reseller market.","Language Support","The CMWS component of the nMCI Interact system additionally provides an internationalization feature, supporting local languages for text displays. This optional feature allows a user to open the call manager application in a language as set by the user. Subsequent texts and phrases are rendered in the language chosen. Typically, the call manager webstation application is opened with a default language as set by the operating system. The user is also given an option to select a language other than the default. A call manager applet typically determines the locale set for the operating system and launches the appropriate language version by including the locale as a parameter. For example, the parameter with a name \u201clocale\u201d may have one of the following values: \u201cen_tIS\u201d for English US, \u201cen_CA\u201d for English-Canada, and \u201cfr_CA\u201d for French Canada. The applet uses this value to set the locale for the system string and phrase resources. A scenario diagram for setting the locale via the call manager applet is found in above-referenced, commonly owned U.S. Pat. No. 6,611,498. As described in commonly owned U.S. Pat. No. 6,611,498 a CMResource class handles the general resources of character encoding, numeric formatting and date formatting.","Online Invoicing","Another application of the suite of telecommunications network management applications is an online invoicing system, herein referred to as \u201cClientView,\u201d which provides customers with the ability to view invoices and reports online, and offers a facility for printing and faxing documents. The online invoicing system takes information available from different billing systems and incorporates that information into its database for subsequent retrieval and presentation to a user according to user-specified requests. A general block diagram illustrating the online invoicing system architecture , integrated with the networkMCI Interact platform, is shown in . Generally, as shown in , the ClientView system  is integrated within the nMCI Interact system comprising: the user web browser  which employs a ClientView GUI  for providing an interface to which a customer may request and view various billing invoices associated with the application services subscribed by the customer and provided by the networkMCI Interact system via a secure socket connection for presentation of invoice reports. For example, using the GUI client application , customers may drill down on their applicable invoices, typically accessing them via the given customer identifiers such as the corp id, bill payer, or mega account numbers. The invoice reports may also be available for various application services including toll free, Frame Relay, and ATM; StarWRS client-side report viewer and requestor processes  which provides the support for generating and presenting reports relating to the conditions of the customer's dedicated voice and data networks as described herein; a corresponding server side reporting component having the above described inbox, report scheduler and report manager components, in addition to alarm and report viewer and requestor components implementing Java applets having viewer classes that enable the downloading and display of reports generated from ClientView server processes .","Also shown as part of the online invoicing invoice viewing system architecture  of  is the Web server\/dispatcher component  which provides for the transport between the Web browser and an online invoicing proxy interface  including all secure communications and encryption. Thus, customer requests and server responses may be communicated from the user browser  to the online invoicing server  in a secure manner. Specifically, the dispatcher  forwards user requests, such as \u201cget index\u201d message for retrieving a list of documents available for viewing by a customer, to the online invoicing server  process that employs an integrated proxy application  for receiving and interpreting the user messages and performing the online invoicing functionality. This proxy capability includes a multithreaded engine enabling multiple, simultaneously executing sessions supporting anticipated user load. The interface between the dispatcher server  and the online invoicing server  is also message-based, employing, e.g., TCP\/IP socket transport, and, as will be described, a messaging protocol that is defined and which includes a generic message header followed by proxy-specific data. The same process of messaging scheme is employed in the other direction. That is, the online invoicing proxy  sends the generic header, followed by the proxy-specific response back to the dispatch server  for communications over the firewall and back to the user browser .","The online invoicing proxy  uses the networkMCI Interact platform's \u201ctemplate proxy\u201d as an implementation of the listener\/slave portion of the proxy. The proxy  passively listens on a previously defined port number and forks a process on an interrupt basis, after which the parent proxy continues to listen for other request. The forked process is generally dedicated to handling the detected requests. The forked process detects a transaction type from the proxy protocol header. The transaction types generally include synchronous, asynchronous, and bulk transfer, as described above. The proxy  then calls a \u201cback-end\u201d function whose function is dependent on the transaction type detected. The back-end functions typically provide individual services for which the application is responsible.","For example, if the transaction type for a detected request is of \u201csynch\u201d type, the forked process executes the synch back-end function and passes the request as an argument. The synch back-end function generally passes the request to a CICS task on the online invoicing server and waits for a response. More specifically, the synch function first establishes a CICS task via a direct TCP\/IP socket connection to the CICS TCP\/IP interface service. The synch function then waits for a response indicating whether a connection was successfully established or an error occurred. If an error is occurred, an error response from the CICS task is returned to the synch function, which then terminates appropriately.","If a connection to the CICS task is successfully established, the request is sent to the task and the synch function waits on a response. The response is generally preceded with a preamble block, indicating the status of request and the number of bytes to follow. The preamble block may include an error code, indicating error conditions that may have occurred during the CICS task processing. Certain error indications may prompt the synch function to terminate the CICS task connection, and also to exit the synch function.","If the preamble block indicates that the request was successfully processed, the preamble block is returned, and the byte count specified in the preamble block is piped from the CICS task, to the requesting process, and typically all the way back to the client GUI application. Upon completion of piping the data, the synch function disconnects the CICS task and exits. The forked process which called the synch function also terminates itself by exiting.","In the preferred embodiment, the online invoicing server  stores documents from various billing systems and performs the various database queries and function calls in response to requests received from the customer via the online invoicing proxy . Particularly, the online invoicing server  is responsible for tasks including data collection, calculation, storage, and report generation. A more detailed description of the server  is provided with reference to .","During its operation, the online invoicing server  supports communications with the StarOE server  which provides for authentication of users, supplying of entitlement information, and enabling order entry for the various online invoicing invoice viewing services order entry functions including functionality necessary to manage (create, update, delete) online invoicing users, and feed the appropriate order entry information to the online invoicing server  in order to properly associate the appropriate online invoicing functionality and data to the right customer once given admission to the online invoicing invoice viewing service.","As described previously, order entry for the networkMCI Interact browser and all applications on networkMCI may be made through the networkMCI StarOE order entry system. The online invoicing application service may be ordered for all business markets customers. For example, a user may select to have online invoicing invoices for a given enterprise, corp, bill payer, and\/or mega account number. These include all NCBS, Toll Free, PLBS, and Mega invoices. In addition, selections may include invoice images for MCI CVNS-ROW, MCI CVNS-Mexico, MCI CVNS-Canada as well as Stentor Advantage Vnet\/CVNS invoice images.","In the preferred embodiment, a messaging interface is utilized between the StarOE  and the online invoicing server  for communications means. The online invoicing server , typically functions as a client and receives authentication information, billing ids, and level of service information, which may also be supplied in response to the launch of the online invoicing GUI client application . For example, when online invoicing client application  is launched from the home page [)], a customer identifier such as the userid and the applicable corp ids and mega account numbers may be retrieved by the order entry system administration server, StarOE , and passed to the online invoicing server. The online invoicing server then makes the necessary association to individual bill payers that the user is authorized to view. The view of invoices may include a particular portion of the invoice as well as the entire invoice.","The online invoicing server  also may interact with the StarWRS inbox server  by storing the news information regarding the online invoicing service, in addition to the event notifications, and report data from the networkMCI Interact application services.","In addition, the invoice files saved on the inbox may be retrieved and viewed using the report requestor  and the report viewer  components of StarWRS  () residing in the user browser . Via the report requestor, the customer may request tailored reports regarding the invoice files and view or print the customized invoice reports displayed by the report viewer as described herein.","An application-level process flow  for the ClientView system is now presented in view of . After successful logon and entitlement determination (by StarOE server), and upon selection of the online invoice (ClientView) application from the downloaded networkMCI Interact homepage to the user [)], a ClientView applet is invoked at step  to display an online invoice screen at the customer workstation. As indicated at step , the user then enters the customer identifiers on the online invoice screen which are then checked against the available list of customer identifiers in the online invoice server's database at step . If the customer identifier does not exist or is not a valid type at step , the user is prompted to re-enter the identifier at step . When the customer identifier is properly validated, the user is presented with the online invoicing products associated with the customer identifier at step . The user then may select products by their date ranges at step  for viewing. At step , a server module then retrieves a list of document based on the selected product and date range from the online invoicing database, and at step , the list is presented to the user, from which the user may select to view a document, at step . Upon the user selection, the server modules retrieve the document from the database at step . At step , the invoice and\/or report documents are presented to the user at the user's workstation. At step , the user may scroll through, or print the data presented, or the user may, at step , select to view another document at step .","The information stored in the database  generally originate from different billing systems. When data is available from these billing systems, the online invoicing server typically performs a conversion process and stores the converted data on tape until an audit approval. When the converted data is audited and approved, the data having the invoicing documents are stored to the database . After the data has been stored in the database for a predetermined period, it may be moved from a direct access storage device (DASD) and stored on optical platters. These platters may remain in an optical jukebox for another predetermined period and then migrated to an optical shelf where the data may be available for a certain period.","Having described generally, an overview of the online invoicing application service and its integration with the networkMCI Interact's network and data infrastructure, the specific functionalities of the online invoicing application, namely the online invoicing GUI application on the client platform side and the online invoicing server in the enterprise Intranet, will now be described in detail below.","Online Invoicing GUI Application","As in the other nMCI Internet network management client applications, the online invoicing client application is implemented in Java to ensure platform independence and particularly is developed in accordance with many of the networkMCI Interact's common objects, as described herein, for achieving interoperability with the application backplane. The client component of the online invoicing includes a client interface for the user to select what data to retrieve. The data is then retrieved through various application processing, and a list of invoices and reports are provided for the user to choose from for online viewing. When a customer clicks on the \u201conline invoice\u201d icon  on the home page [)], after a proper authentication via a logon, the customer is presented with a criteria screen  as shown in ) from which the customer may specify various types of, and date ranges for, invoices desired, e.g., Vnet invoices and the Concert Cross Border Reporting. The criteria screen  is divided into a customer identifier section , products section , and dates section . The customer identifier type includes identification by corporate id , account id, bill payer id, and\/or mega id. Each online invoicing user is given at least one identifier type  and a customer identifier number  associated with the type at the time of order entry via the StarOE. The StarOE maintains this customer information and communicates the information to the online invoicing GUI application, when the application is invoked by the backplane applet. Accordingly, at the same time the online invoicing GUI application displays the criteria screen , it also populates the identifier type  and customer identifier  fields automatically as received from the StarOE user authentication and entitlement system.","The user may then select a desired identifier type from the list of identifier types shown at . The online invoicing GUI application then automatically fills in the customer identifier field  associated with the identifier type selected. In addition, if the customer's last selection was made with a certain type, e.g., corp id, the next time the customer views the criteria screen , the corp id identifier type will be selected automatically. After selecting a desired identifier, the user typically then may execute the search of invoices available for that identifier by clicking on the retrieve button , pressing an enter key, or using a fast key combination such as Alt+S.","The products and dates sections ,  are used for displaying the service products for which invoice viewing is available for a given customer identifier type and the date range for the available invoices. When the user executes the search, the products field  is filled in with the date ranges , indicating available invoice reports for various period ranges. For retrieving invoice documents, the user may select ranges of dates including multiple ranges of dates as shown, and then click on the retrieve button , press enter, use the fast key combination Alt+R, or click on any area within the date range list box .","Upon executing the retrieve user command, the online invoicing GUI application displays the screen  shown at ) listing the report documents. For each document, date, invoice number, bill payer id, and number of pages are displayed as shown in screen display . The status bar  at the bottom of the screen may display a number of indices (document lists) loaded. The number of indices which may be loaded at one time may be configurable by a customer via the online invoicing GUI application. An invoice report listed then may be selected and retrieved by clicking on the retrieve button , pressing an enter key or double clicking on a highlighted item , or using a fast key combination such as alt+R. When a selection is entered, a page range selection box  appears. The selection box  allows customers to enter in the desired page range for viewing. The mail\/payment option  for retrieving only the remittance pages without having to retrieve additional invoice pages, is available from this screen.",{"@attributes":{"id":"p-0644","num":"0650"},"figref":["FIG. 54","FIG. 53("],"b":["1925","1915","1927","1928"],"i":"b"},"With more particularity, the batch print option may allow customers to send a batch print job to be performed at the enterprise Intranet to the customers, e.g., via Federal Express, at a location specified by the customer. An example batch print data entry screen and pop-up confirmation screen can be found in commonly owned, commonly owned U.S. Pat. No. 6,745,229 entitled WEB BASED INTEGRATED CUSTOMER INTERFACE FOR INVOICE REPORTING, the contents and disclosure of which is incorporated by reference as if fully set forth, herein.","Another feature, provided by the ClientView system  includes an accumulator function which allows customers to add up numerical figures, such as minutes and charges, by highlighting the numbers directly on the screen. Details regarding the accumulator function can be found in above-referenced, commonly owned U.S. Pat. No. 6,745,229.","The above-mentioned fax current document option offered by the online invoicing application includes an ability to fax to the customer, at a customer specified location, a current page, specified range of pages, or the entire document by making an appropriate selection in a fax dialog box such as described in above-referenced, commonly owned U.S. Pat. No. 6,745,229.","Online Invoicing Server","As described above, the online invoicing provides on-line visibility to various networkMCI Interact documents. In presenting various documents online to a customer, the GUI client application communicates to a online invoicing server via the proxy for retrieving up-to-date information which the server maintains. These documents are indexed and stored in the online invoicing's database  (). The online invoicing server includes several processes for performing the indexing and storing of the documents.",{"@attributes":{"id":"p-0649","num":"0655"},"figref":["FIG. 55","FIG. 56"],"b":["1400","1350","1432","1432","1432","1432","1434"],"i":["a","b","c"]},"In a preferred embodiment, an online invoicing's conversion process  is used to convert documents at each of the data centers. The conversion process generally defines the key information necessary to retrieve the document and compresses the document for storing. Each conversion process  generally performs the same tasks. More specifically, these tasks include creating a formatted compressed data set (FCDS) file and a conversion stats report for each conversion run. The FCDS file is the document which may eventually be incorporated into the online invoicing database. At step , the online invoicing conversion process reads in a PARM file and an invoice file. The PARM file includes document information such as the logical record length. The invoice file is read one line at a time and at step , key information including page numbers and document dates is placed in a header record which is kept in memory until the FCDS file is created. At step , the conversion process creates compressed pages of the document. The compressed pages follow the header record in the FCDS file. Once the FCDS file is created at step , the file is stored on tape at step , and the B and C locations NDM the tape to A at step . At step , the conversion stats report is also created which includes page information and conversion information associated with each conversion run. The last line of the report has the conversion stats record, which includes the number of pages converted and the number of headers created. This report is then NDM'd to A by B and C and kept on DASD for future reviews and audit verification.","The FCDS file is generally placed on hold, as indicated at step , until audit approval is received through MCIMail, which is sent by various groups responsible for auditing and approving the document files sent to the online invoicing. Once the audit approval e-mail is received, an online invoicing production manually enters the product\/division date and the invoice count into the audit statistics database , at step . The store job is manually released at step  by the online invoicing production control after audit approval is received.","The online invoicing includes a DB2 database subsystem residing in a NOR4 mainframe. The subsystem further includes an object database and an index database. An online invoicing store process  loads the compressed document to an online invoicing object database and an online invoicing index load process  stores index pointers to each document in the index database. An audit check is executed to ensure that the correct number of documents are added to the online invoicing databases during the object load and index load processes.","More particularly, the store process loads the conversion stats record into the audit stats database at step . At step , the conversion records are then matched against the manually entered audit stats records. The store process  also includes loading of the FCDS file from which is builds an index for each object and an index file, which includes the pointers to the document, as shown at step . The store process , the loads the compressed documents into the online invoicing object database , as indicated at step . At step , the store process  then creates a store status report and loads the report into the audit stats database . At step , an audit checkpoint verifies that the stored numbers match the converted numbers. If there are nay errors with the numbers in the audit stats database at any point in this process, the job may automatically stop the store process  until the feed\/problem is corrected. Once these numbers are verified, the index process  may begin.","The index process  at step , i.e., EDINDEXX as shown in  as an example, generally loads the index pointer for each document, which are typically created by the store process . At step , the process  also updates the account product table with new customer identifiers such as the corp ids or billpayers. At step , the index process  creates an index status report. At step , another audit checkpoint verifies that the index numbers match the stored numbers. The stored and indexed data are kept on DASD  for a predetermined number of days, e.g., 45 days as shown at step . After the predetermined number of days, the object access method (OAM) copies the files from DASD  to an optical disk via the optical drive . After another predetermined period, OAM migrates the objects from the optical disk to the optical shelf as shown at step , where they remain available for another predetermined period of time. Once the indexes are loaded into the database, the documents are available for viewing.","The following database tables are included in the online invoicing database: a product cross reference table which assigns the online invoicing product code to the product name; a CDSPARM table which keeps the store precess run statistics to allow for a restart when necessary and which includes an entry for each product code and runstream; an EDBAAPPL table which assigns a product code to a store group; a statistics audit table which keeps audit statistics for each product\/runstream logged by the store process; and a conversion program parameter file which defines where the conversion may find the documents key information.","The information on documents for imaging and storing are typically received from the various networkMCI Interact's application services. A list of the various billing systems providing product feeds to online invoicing for document imaging is provided in above-referenced, commonly owned U.S. Pat. No. 6,745,229.","The online invoicing server application is typically written in COBOL II using CICS\/DB2 and OAM. The persons skilled in the art would appreciate that the server application may also be implemented with any other compiler languages or software tools. The server application includes a startup transaction (EDUP), and a multipurpose transaction, EDS2. The EDUP transaction passes several DB2 tables such as a function table, a version control table, and the batch print request table. The EDUP transaction also calls OAM to verify OAM is active and to get the token for future calls to OAM. An in-core table is built for system information and temp storage records are built for version control and batch print pricing. The EDUP is generally executed at CICS startup time.","EDS2 is a multi-purpose transaction which is started when a request is received from a client GUI application. Its functions may include product and date listing, index retrieval such as shown at  ), and batch print request storing. The transaction uses the common top-level function (EDOCS000) and links to a lower level function designed to perform a specific task, based on a specific function. The lower level function results are passed back to the top-level function which checks return codes for possible error. The data result is then passed to the client GUI application via the proxy and the Web\/dispatcher  (, and statistics are written to a VSAM file. EDS2 is also executed for document retrieval for retrieving invoice documents shown at  . It uses the common top-level function and links to lower level functions to perform the retrieval processing.",{"@attributes":{"id":"p-0659","num":"0665"},"figref":"FIG. 56","b":["2000","2002","2004","2006"]},"Generally, the communications from the online invoicing server to the client workstation is performed by a set of calls to the TCP\/IP address space. As an example, a listener process, EZACIC02 is activated at CICS initiation, and constantly \u201clistens\u201d for activities. When a request is received from the client, the listener, e.g., EZACIC02, invokes the EDS2 transaction, at step . At step , CICS invokes the first program, i.e., EDOCS000 in the example shown, in the transaction EDS2 via the CICS transaction control table. Then, at step , EDOCS000 loads system tables into memory. In addition, EDOCS000 also makes calls to TCP\/IP to communicate with the client GUI application. EDOCS000 is also responsible for logging both successful and unsuccessful requests, as well as routing the request to one of many sub-programs, based on a function code and an object name. The sub-programs include EDOCS030, EDOCS001, EDOCS020\/EDOCS040, and EDOCS220\/EDOCS440, each of which will be described in more detail below.","When the listener process has a data to pass to EDOCS000, EDOCS000 invokes a RETRIEVE command to get the data. EDOCS000 then performs a take socket and responds to the client by a write socket. The client then typically responds to the server with a function code and additional data such as a customer identifier, dates, etc. EDOCS000 performs data validation such as function codes, checks to see if the system is up, supplies pricing information for batch print, links to lower level functions, checks the results of the lower level results, produces error entries where needed, writes statistics, and passes any data retrieved (or an error) back to the client GUI application.","After each call to a subroutine, EDOCS000 checks a return code. EDOCS000 also checks return codes from calls to the TCP\/IP and posts an error message when the TCP\/IP return code is a non-zero value, indicating an error. The errors are generally logged in the TCP data file and may be reviewed as needed. When all the processing necessary for responding to the client is complete and response data is successfully sent to the client, the client GUI application sends an acknowledgment for the receipt of the data, back to the server. The socket is then closed, freeing it for another request to be communicated.","Referring back to  at step , EDOCS030 is executed when a request is made to retrieve all products and dates associated with a customer identifier. This process gets all entries from the account\/product cross-reference table for the customer identifier received from the client GUI application. For each entry in the account\/product cross-reference table found, the process looks up the product on the product cross-reference table. If the group is different than any group processed yet, then the process adds an additional entry at the group level, gets the product description from the product cross-reference, and gets distinct dates for addition to the table. When the entries in the table have been exhausted, the process sorts the products, e.g., in an alphabetical order by product description followed by dates sorted in descending order, for proper display at the client workstation. At step , the sorted data is returned to the client GUI application for viewing by the user.","EDOCS000 links to EDOCS001 and executes it when a client GUI application requests index retrieval for specified dates within specified products. EDOCS000 passes in the customer identifier, the product and a list of dates received from the client GUI application as entered in the criteria screen  at ). At step , EDOCS0001 reads the index table and extracts from the online invoicing database all matching entries and sorts them in order of date and invoice numbers. Different sorting order may be utilized for different products. The entries meeting the product\/date criteria are then sent back to the client GUI application for presentation to a customer at step . The matching entry message, which is sent to the client GUI application includes a subset of entry records found.","EDOCS000 links to EDOCS020\/EDOCS040 and executes either one when a client. GUI application requests for document retrieval such as the invoice document  shown at . EDOCS020 and EDOCS040 are generally used for document retrieval and are clones of each other. The difference between the two is that EDOCS020 was written for new style objects and EDOCS040 was written to handle old style objects. In their operation, EDOCS020 and EDOCS040 generally allocate storage for the document and retrieve the document meeting the requested page range into the allocated storage as shown at step . The retrieved document is then sent back to the client GUI application for presentation to the customer.","At step , EDOCS220 and EDOCS440 are used for object searches on the document requested. These processes perform similar functions as do the EDOCS020 and EDOCS040 processes. They typically get the collection name and the object, and loop through the index portion of the object to find pages in the requested range for the requested document. At step , the retrieved document is sent back to the client GUI application and is displayed on the user's workstation.","For servicing batch-printing requests, EDOCS000 may link to EDOCS050 and execute it. A next available request number is determined by getting the EDBPREQ record in the database and adding one to the last request number. EDBPREQ record is then updated. The information passed to EDOCS050 is then mapped into the EDBPRINT table layout, and a new row is inserted into DB2. Errors from EDOCS050 are sent to EDOCS000, which reports them to the client GUI application.","E-Billing","On-Line E-Billing is an electronic commerce enabling tool that will allow selected networkMCI Interact customers to receive, analyze, and pay their invoice(s) over the public Internet. On-Line E-Billing provides a variety of Internet-based billing features that includes electronic invoice presentment, invoice analysis and electronic bill payment, all from a single point of customer authentication.","By utilizing the present invention, customers may download their invoice information into their Accounts Payable systems. For the customer this will same time and money by not having to manually load the data from the paper invoices. In addition, this will increasing accuracy of the bill payment process for the customer. The present invention provides an \u201cintelligent, navigable invoice\u201d where customers and users can drill down from summary level information to specific site and service level detail. By providing more timely receipt of information, the customer is able to identify inefficient and costly operations sooner, is able to make adjustments sooner, and may thereby save money that would otherwise be lost. Customers are also able to more easily analyze their invoices, thereby facilitating customer identification of inefficient\/costly operations.","The present invention utilizes Electronic Funds Transfer (EDF), which provides for timely payment, reduces the \u201cfloat\u201d of funds and saves on clerical, postage and bank expenses. The Electronic Bill Presentment and Payment (EBPP) application and database may reside on a highly secure \u201cVirtual Vault\u201d server technology that allows absolutely no remote access to the server.","The On-Line E-Billing portion of the present invention is initiated through the StarOE order entry system in a manner similar to that previously described with opening and modifying customer or user entitlements to the present invention. Each phase of the account setup, activation and confirmation is tracked and available for viewing by help desk\/customer service personnel to aid in trouble resolution. A Log is kept of errors for trouble\/maintenance procedures. When registering for On-Line E-Billing, the introductory web-page for registration is downloaded in a manner similar to the network MCI Home page previously discussed. This page tells the registrant what will be required to complete registration, including any MCI Corp and Bill Payer Ids, Taxpayer Ids, or other information that is not immediately accessible so that the customer can gather this information prior to initiating the process.","During registration, the customer picks the appropriate customer service segment for the customer. Once the segment is determined, appropriate customer service information is displayed to that customer. A \u201cClick and Connect\u201d 800 number for connection to networkMCI On-Line E-Billing applications support group is provided (\u201cI need help with this application\u201d). If a customer does not have a multimedia pc, the click-n-connect button is not displayed, only the 800 # for the application support group will be displayed.","The customer or user then receives a screen notification that all data has been successfully received, and a confirmation number is noted on the screen notification. This confirmation number, (order number), is used to track the order. If the registrant did not enter the correct data needed for a successful registration, a screen notification will state the field that causing the rejection.","Once the order is successfully received, both the enterprise account management team and the newly registered customer receive an e-mail confirmation that the order was received. As discussed previously with respect to Order Entry modification of customer entitlements, the notification includes customer id, names, level of access (view\/approve\/pay) for each user and corp\/billpayers they have access to, the user or customer registrant, and the registrants vnet, if applicable. Need to validate name, address, SSC, customer segment and corp id is also validated with the host COPS system.","Preferably, the customer has the option of signing up for only one payment option at a time. The customer may be required to give a 15 day notice to change that payment option.","The present invention also provides for a \u201cprint and pay\u201d option wherein the customer may receive the invoice electronically, print it at the customer site, and render payment in a conventional manner. When the print and pay option is selected, the following fields are displayed to ensure the print and pay remittance slips are correct:","Invoice numbers","Invoice dates","Billpayer ID(s)","Invoice amount due","Customer name and number","Payment amount","Check number","A desired lockbox address for the enterprise may also be printed on the remittance page to ensure direction of the payment to the appropriate facility.","If a customer signs up for EFT during registration, the customer's routing number is validated to verify that it is a valid routing number. After all EFT registrations, a \u201cprenote\u201d verification is provided that the customer's checking and bank account information is valid. The Electronic Fund Transfer feature utilizes ACH files for fund transfers through an appropriate banking institution. The ACH file is formatted as EDI  and must be encrypted. The following elements need to be included in the bank ACH file:\n\n","The customer receives a confirmation number for all EFT transaction. The customer has an option to schedule recurring and non-recurring EFT options, including payment of non-recurring payments. The customer also has the ability to cancel a scheduled non-recurring payment if it is canceled before X (TBD) - - - of scheduled payment. When a non-recurring payment is submitted by the customer, an appropriate screen notifies the customer that the payment was accepted and is in pending status.","Communications Security","Communications security, which relates to the authenticity of the enterprise web servers  () and the security of the transmitted data is now described with respect to an implementation in the preferred embodiment of the invention of the Secure Sockets Layer (SSL) version of HTTPS.","In order for a communication to be secure, it must be known that the message comes from the correct source, that it arrives at the correct destination, that it has not been modified, and has not been intercepted and understood by a third party. Normal encryption protects against understanding the message, even if intercepted, and certain types of cipher encryption provide the ability to determine that the message has been tampered with and in some cases reconstruct the message even if intercepted and intentionally garbled. The disadvantage of normal encryption is the difficulty associated with the secure distribution and updates of the keys used for encryption and decryption.","Public key encryption solves the distribution and update problem, but does not, for the public Internet, ensure the identity of the party with whom one is communicating. A spoofer who appropriates the DNS address of an enterprise for a leg of the Internet can substitute the spoofers public key for the public key of the enterprise with whom the user is attempting to communicate, thereby fooling the user into revealing the user name and password used on the enterprise system. To avoid this problem, digital signatures have been developed to ensure the identity of the sender. They also, simultaneously, commit the sender to the message, avoiding subsequent repudiation.","The communications link between the enterprise and the user may be secured with S-HTTP, HTTPS, or proprietary encryption methodologies, such as VNP or PPTP tunneling, but in the preferred embodiment utilizes the Secure Sockets Layer (SSL) protocol developed by Netscape Communications. It is noted that these solutions are intended for use with IPv4, and that Ipv6, presently under comment by the Internet Engineering Steering Group, may enable secure transmissions between client and server without resort to proprietary protocols. The remaining security protocols of the present invention may be used with Ipv6 when it becomes an available standard for secure IP communications.","The SSL component of the HTTPS also includes non-repudiation techniques to guarantee that a message originating from a source is the actual identified sender. One technique employed to combat repudiation includes use of an audit trail with electronically signed one-way message digests included with each transaction. This technique employs SSL public-key cryptography with one-way hashing functions.","Another communications issue involving the secure communications link, is the trust associated with allowing the download of the Java common objects used in the present invention, as discussed earlier with respect to the browser, since the Java objects used require that the user authorize disk and I\/O access by the Java object.","Digital Certificates, such as those developed by VeriSign, Inc. entitled Verisign Digital ID\u2122 provide a means to simultaneously verify the server to the user, and to verify the source of the Java object to be downloaded as a trusted source as will hereinafter be described in greater detail.","The above-mentioned authentication and encryption processes are performed in the handshake protocol, which can be summarized as follows: The client sends a client hello message to which the server must respond with a server hello message, or else a fatal error will occur and the connection will fail. The client hello and server hello are used to establish security enhancement capabilities between client and server. The client hello and server hello establish the following attributes: Protocol Version, Session ID, Cipher Suite, and Compression Method. Additionally, two random values are generated and exchanged: ClientHello.random and ServerHello.random.","Following the hello messages, the server will send its digital certificate. Alternately, a server key exchange message may be sent, if it is required (e.g. if their server has no certificate, or if its certificate is for signing only). Once the server is authenticated, it may optionally request a certificate from the client, if that is appropriate to the cipher suite selected.","The server will then send the server hello done message, indicating that the hello-message phase of the handshake is complete. The server will then wait for a client response. If the server has sent a certificate request Message, the client must send either the certificate message or a no_certificate alert. The client key exchange message is now sent, and the content of that message will depend on the public key algorithm selected between the client hello and the server hello. If the client has sent a certificate with signing ability, a digitally-signed certificate verify message is sent to explicitly verify the certificate.","At this point, a change cipher spec message is sent by the client, and the client copies the pending Cipher Spec into the current Cipher Spec. The client then immediately sends the finished message under the new algorithms, keys, and secrets. In response, the server will send its own change cipher spec message, transfer the pending to the current Cipher Spec, and send its finished message under the new Cipher Spec. At this point, the handshake is complete and the client and server may begin to exchange user layer data.",{"@attributes":{"id":"p-0698","num":"0723"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Client",{}]},{"entry":[{},"Server",{}]},{"entry":[{},"ClientHello","-------->"]},{"entry":[{},"ServerHello",{}]},{"entry":[{},"Certificate*",{}]},{"entry":[{},"ServerKeyExchange*",{}]},{"entry":[{},"CertificateRequest*",{}]},{"entry":[{},{},"<------- ServerHelloDone"]},{"entry":[{},"Certificate*",{}]},{"entry":[{},"ClientKeyExchange",{}]},{"entry":[{},"CertificateVerify*",{}]},{"entry":[{},"[ChangeCipherSpec]",{}]},{"entry":[{},"Finished","-------->"]},{"entry":[{},"[ChangeCipherSpec]",{}]},{"entry":[{},{},"<-------"]},{"entry":[{},"Finished",{}]},{"entry":[{},"Login Data","<-------> Login HTML"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"*Indicates optional or situation-dependent messages that are not always sent."]}]}}}}},{"@attributes":{"id":"p-0699","num":"0724"},"figref":"FIG. 57"},"As mentioned herein, the messages created by the client applications (Java software) are transmitted to the secure Web Servers  over HTTPS. For incoming (client-to-server) communications, the Secure Web servers  decrypt a request, authenticate and verify the session information. The logical message format from the client to the Web server is shown as follows:","\u2225TCP\/IP\u2225encryption\u2225http\u2225web header\u2225dispatcher header\u2225proxy-specific data\u2225","where \u201c\u2225\u201d separates a logical protocol level, and protocols nested from left to right.  illustrates a specific message sent from the client browser to the desired middle tier server for the particular application. As shown in , the client message  includes an SSL encryption header  and a network-level protocol HTTP\/POST header  which are decrypted by the Secure web Server(s)  to access the underlying message; a DMZ Web header  which is used to generate a cookie  and transaction type identifier  for managing the client\/server session; a dispatcher header  which includes the target proxy identifier  associated with the particular type of transaction requested; proxy specific data  including the application specific metadata utilized by the target proxy to form the particular messages for the particular middle tier server providing a service; and, the network-level HTTP\/POST trailer  and encryption trailer  which are also decrypted by the secure DMZ Web server .","Referring back to , after establishing that the request has come from a valid user and mapping the request to its associated session, the request is then forwarded through the firewall over a socket connection  to one or more decode\/dispatch servers  located within the corporate Intranet . The messaging sent to the Dispatch Server  will include the user identifier and session information, the target proxy identifier, and the proxy specific data. The decode\/dispatch server  then authenticates the user's access to the desired middle-tier service from cached data previously received from the StarOE server as will be hereinafter described in greater detail in connection with User Identification and Authentication.","As shown in , the Secure Web server  forwards the Dispatcher header and proxy-specific data to the Dispatch Server  \u201cenriched\u201d with the identity of the user (and any other session-related information) as provided by the session data\/cookie mapping, the target proxy identifier and the proxy-specific data. The dispatch server  receives the requests forwarded by the Secure Web server(s)  and dispatches them to the appropriate application server or its proxy. The message wrappers are examined, revealing the user and the target middle-tier service for the request. A first-level validation is performed, making sure that the user is entitled to communicate with the desired service. The user's entitlements in this regard are fetched by the dispatch server from StarOE server  at logon time and cached. Assuming that the Requestor is authorized to communicate with the target service, the message is then forwarded to the desired service's prox. Each of these proxy processes further performs: a validation process for examining incoming requests and confirming that they include validly formatted messages for the service with acceptable parameters; a translation process for translating a message into an underlying message or networking protocol; and, a management process for managing the communication of the specific customer request with the middle-tier server to actually get the request serviced. Data returned from the middle-tier server is translated back to client format, if necessary, and returned to the dispatch server as a response to the request.","It should be understood that the application server proxies can either reside on the dispatch server  itself, or, preferably, can be resident on the middle-tier application server, i.e., the dispatcher front end code can locate proxies resident on other servers.","Session Security","As described previously, the SLL protocol includes one level of session security, and may negotiate and change in cipher code between sessions. Additionally, the present invention employs the \u201ccookie\u201d feature set of contemporary browsers to maintain session security, and prevent session hijacking or the use of a name and password obtain by sniffing, spoofing or EMR monitoring.",{"@attributes":{"id":"p-0706","num":"0731"},"figref":["FIG. 58","FIG. 58"],"b":["20","220","79","24","26","28","39"]},"As described above, following the SSL handshake, certain cab files, class files and disclaimer requests are downloaded with the logon Web page as shown at . At the logon Web page, the customer  then enters a userid and password for user authentication as illustrated at . The customer also enters disclaimer acknowledgment  on the logon page . If the entered userid and password are not valid or if there were too many unsuccessful logon transactions, the logon object  communicates the appropriate message to the customer  as shown at . A logon object , typically an applet launched in the logon Web page, connects to the Web server , for communicating a logon request to the system as shown at . The logon data, having an encrypted userid and password, is sent to the dispatcher  when the connection is established as shown at . The dispatcher  then decrypts the logon data and sends the data to the StarOE  after establishing a connection as shown at . The StarOE server  validates the userid and password and sends the results back to the dispatcher  as illustrated at  together with the user application entitlements. The dispatcher  passes the data results obtained from the StarOE  to the Web server  as shown at , which passes the data back to the logon object  as shown at . The customer  is then notified of the logon results as shown as .","When the customer  is validated properly, the customer is presented with another Web page, referred to as the home page , from which the backplane is launched typically. After the user validation, the backplane generally manages the entire user session until the user logs off the \u201cnetworkMCI Interact\u201d. As shown at , the backplane initiates a session heartbeat which is used to detect and keep the communications alive between the client platform and the enterprise Intranet site. The backplane also instantiates a COUser object for housekeeping of all client information as received from the StarOE . For example, to determine which applications a current customer is entitled to access and to activate only those application options on the home page for enabling the customer to select, the backplane sends a \u201cget application list\u201d message via the Web server  and the dispatcher  to the StarOE  as shown at , , and . The entitlement list for the customer is then sent from the StarOE  back to the dispatcher , to the Web server  and to the backplane at the home page  via the path shown at , , and . The application entitlements for the customer are kept in the COUser object for appropriate use by the backplane and for subsequent retrieval by the client applications.","The entitlement information for COUser is stored in a cookie jar , maintained in the cookie jar server  (illustrated in ). When the Web server receives the entitlement requests from the backplane at the home page  or from any other client applications, the Web server  makes a connection to the cookie jar  and checks if the requested information is included in the cookie jar  as shown at . The cookie jar  is a repository for various customer sessions and each session details are included in a cookie including the entitlement information from the OE server . During the logon process described above, the OE server  may include in its response, the entitlements for the validated customer. The dispatcher  transfers the entitlement data to the Web server , which translates it into a binary format. The Web server  then transmits the binary entitlement data to the cookie jar  for storage and retrieval for the duration of a session. Accordingly, if the requested information can be located in the cookie jar , no further request to the StarOE  may be made. This mechanism cuts down on the response time in processing the request. Although the same information, for example, customer application entitlements or entitlements for corp ids, may be stored in the COUser object and maintained at the client platform as described above, a second check is usually made with the cookie jar  via the Web server  in order to insure against a corrupted or tampered COUser object's information. Thus, entitlements are typically checked in two places: the client platform  via COUser object and the Web server  via the cookie jar .","When a connection is established with the cookie jar , the Web server  makes a request for the entitlements for a given session as shown at . The cookie jar  goes through its stored list of cookies, identifies the cookie for the session and returns the cookie to the Web server  also shown at . The Web server  typically converts the entitlements which are received in binary format, to string representation of entitlements, and sends the entitlement string back to the backplane running on the client platform .","Furthermore, the cookie jar  is used to manage heartbeat transactions. Heartbeat transactions, as described above, are used to determine session continuity and to identify those processes which have died abnormally as a result of a process failure, system crash or a communications failure, for example. During a customer session initialization, the cookie jar  generates a session id and sets up \u201cheartbeat\u201d transactions for the customer's session. Subsequently, a heartbeat request is typically sent from a process running on a client platform to the Web server , when a connection is established, as shown at . The Web server  connects to the cookie jar  and requests heartbeat update for a given session. The cookie jar  searches its stored list of cookies, identifies the cookie for the session and updates the heartbeat time. The cookie jar  then sends the Web server  the updated status heartbeat as shown at . The Web server  then sends the status back to the client platform process, also as shown at .","When a customer wants to logoff, a logoff request transaction may be sent to the Web server . The Web server  then connects to the cookie jar  and requests logoff for the session as shown at . The cookie jar  identifies the cookie for the session and deletes the cookie. After deleting the cookie, the cookie jar  sends a logoff status to the Web server , which returns the status to the client platform.","Other transaction requests are also sent via the Web server  and the cookie jar  as shown in .  is a data flow diagram for various transactions communicated in the system of the present invention. Typically, when a customer enters a mouse click on an application link as shown at , an appropriate transaction request stream is sent to the Web server as shown at . The Web server  typically decrypts the transaction stream and connects to the cookie jar  to check if a given session is still valid as shown at . The cookie jar  identifies the cookie for the session and sends it back to the Web server  as shown at . The Web server  on receipt of valid session connects to the dispatcher  and sends the transaction request as shown at . When the dispatcher  obtains the request, it may also connect to the cookie jar  to validate the session as shown at . The cookie jar  identifies the cookie for the session and sends it back to the dispatcher  as shown at . The dispatcher , upon receiving the valid session connects to a targeted application server or proxy , which may include StarOE, and sends the request transaction to the target proxy as shown at . The server or proxy  processes the request and sends back the response as stream of data which is piped back to the dispatcher  as shown at . The dispatcher  pipes the data back to the Web server  as shown at , which encrypts and pipes the data to the client asp platform as shown at , referred to as the home page  in .","The present invention includes a client communications unit for providing a single interface from which the backplane and the applications may send messages and requests to back-end services. The client communications unit includes a client session unit and a transactions unit. The client session unit and the transactions unit comprise classes used by client applications to create objects that handle communications to the various application proxies and or servers. Generally, the entire communications processes start with the creation of a client session after a login process. This is started through the login process. The user logs into user's Web page with a username and password. During a login process, a client session object of class COClientSession is created, and the COClientSession object passes the username and password information pair obtained from the login process to a remote system administrative service which validates the pair. The following code instructions are implemented, for example, to start up a session using the COClientSession class.","COClientSession ss=new COClientSession( );","try {\n\n","} catch (COClientLogonException e) { . . .","} catch (MalformedURLException e) { . . . };","In addition, the COClientSession object contains a reference to a valid COUser object associated with the user of the current COClientSession object.","The client session object also provides a session, where a customer logs on to the system at the start of the session, and if successfully authenticated, is authorized to use the system until the session ends. The client session object at the same time provides a capability to maintain session-specific information for the life\/duration of the session. Generally, communications to and from the client takes place over HTTPS which uses the HTTP protocols over an SSL encrypted channel. Each HTTP request\/reply is a separate TCP\/IP connection, completely independent of all previous or future connections between the same server and client. Because HTTP is stateless, meaning that each connection consists of a single request from the client which is answered by a single reply by a server, a novel method is provided to associate a given HTTP request with the logical session to which it belongs.","When a user is authenticated at login via the system administrative server, the client session object is given a \u201ccookie\u201d, a unique server-generated key which identifies a session. The session key is typically encapsulated in a class COWebCookie, \u201cpublic COWebCookie (int value).\u201d, where value represents a given cookie's value. The client session object holds this key and returns it to the server as part of the subsequent HTTP request. The Web server maintains a \u201ccookie jar\u201d which is resident on the dispatch server and which maps these keys to the associated session. This form of session management also functions as an additional authentication of each HTTPS request, adding security to the overall process. In the preferred embodiment, a single cookie typically suffices for the entire session. Alternatively, a new cookie may be generated on each transaction for added security. Moreover, the cookie jar may be shared between the multiple physical servers in case of a failure of one server. This mechanism prevents sessions being dropped on a server failure.","In addition, to enable a server software to detect client sessions which have \u201cdied\u201d, e.g., the client session has been disconnected from the server without notice because of a client-side crash or network problem, the client application using the client session object \u201cheartbeats\u201d every predefined period, e.g., 1 minutes to the Web server to \u201crenew\u201d the session key (or record). The Web server in turn makes a heartbeat transaction request to the cookie jar. Upon receipt of the request, the cookie jar service \u201cmarks\u201d the session record with a timestamp indicating the most recent time the client communicated to the server using the heartbeat. The cookie jar service also alarms itself, on a configurable period, to read through the cookie jar records (session keys) and check the timestamp (indicating the time at which the client was last heard) against the current time. If a session record's delta is greater than a predetermined amount of time, the cookie jar service clears the session record, effectively making a session key dead. Any subsequent transactions received with a dead session key, i.e., nonexistent in the cookie jar, are forbidden access through the Firewall.","The heartbeat messages are typically enabled by invoking the COClientSession object's method \u201cpublic synchronized void enableSessionHeartbeat (boolean enableHeartbeat)\u201d, where enableHeartbeat is a flag to enable or disable heartbeat for a session. The heartbeat messages are typically transmitted periodically by first invoking the COClientSession object's method \u201cpublic synchronized void setHeartbeatInterval (long millsecsInterval)\u201d, where the heartbeat interval is set in milliseconds, and by the COClientSession object's method \u201cprotected int startHeartbeat( )\u201d, where the heartbeat process starts as soon as the heartbeat interval is reached. Failure to \u201cheartbeat\u201d for consecutive predefined period, e.g., one hour, would result in the expiration of the session key.","Enterprise Security","Enterprise Security is directed to the security of the enterprise network and the data maintained by the various enterprise applications with respect to the open nature of the Internet, and the various attacks on the system or data likely to result from exposure to the Internet. Usual enterprise security is focused on internal procedures and employees, since this represents the biggest single area of exposure. Strong passwords, unique user Ids and the physical security of the workstations are applicable to both internal employees and external customers and users who will access the enterprise applications. It is noted that many of the previously described features relating to data encryption for communications security and session security are essential parts of enterprise security, and cooperate with enterprise architecture and software infrastructure to provide security for the enterprise.","For example, as will be hereinafter described in detail, the present invention uses strong symmetric key encryption for communications through the firewalls to the application servers. This internal symmetric key encryption, when coupled with external public key encryption provides an extra level of security for both the data and the software infrastructure.",{"@attributes":{"id":"p-0725","num":"0752"},"figref":["FIG. 60","FIG. 60"],"b":["100","20","24","17","25","30","40"]},"As illustrated in , a double or complex firewall system defines a \u201cdemilitarized zone\u201d (DMZ) between two firewalls , . In the preferred embodiment, one of the firewalls  includes port specific filtering routers, which may only connect with a designated port on a dispatch server within the DMZ. The dispatch server connects with an authentication server, and through a proxy firewall to the application servers. This ensures that even if a remote user ID and password are hijacked, the only access granted is to one of the web servers  or to intermediate data and privileges authorized for that user. Further, the hijacker may not directly connect to any enterprise server in the enterprise intranet, thus ensuring internal company system security and integrity. Even with a stolen password, the hijacker may not connect to other ports, root directories or applications within the enterprise system.","The DMZ acts as a double firewall for the enterprise intranet because the web servers located in the DMZ never store or compute actual customer sensitive data. The web servers only put the data into a form suitable for display by the customer's web browser. Since the DMZ web servers do not store customer data, there is a much smaller chance of any customer information being jeopardized in case of a security breach.","As previously described, the customer access mechanism is a client workstation  employing a Web browser  for providing the access to the networkMCI Interact system via the public Internet . When a subscriber connects to the networkMCI Interact Web site by entering the appropriate URL, a secure TCP\/IP communications link  is established to one of several Web servers  located inside a first firewall in the DMZ . Preferably at least two web servers are provided for redundancy and failover capability. In the preferred embodiment of the invention, the system employs SSL encryption so that communications in both directions between the subscriber and the networkMCI Interact system are secure.","In the preferred embodiment, all DMZ Secure Web servers  are preferably DEC  systems having Unix or NT-based operating systems for running services such as HTTPS, FTP, and Telnet over TCP\/IP. The web servers may be interconnected by a fast Ethernet LAN running at 100 Mbit\/sec or greater, preferably with the deployment of switches within the Ethernet LANs for improved bandwidth utilization. One such switching unit included as part of the network, architecture is a HydraWEB\u2122 unit , manufactured by HydraWEB Technologies, Inc., which provides the DMZ with a virtual IP address so that subscriber HTTPS requests received over the Internet will always be received. The Hydraweb\u2122 unit  implements a load balancing algorithm enabling intelligent packet routing and providing optimal reliability and performance by guaranteeing accessibility to the \u201cmost available\u201d server. It particularly monitors all aspects of web server health from CPU usage, to memory utilization, to available swap space so that Internet\/Intranet networks can increase their hit rate and reduce Web server management costs. In this manner, resource utilization is maximized and bandwidth (throughput) is improved. It should be understood that a redundant Hydraweb\u2122 unit may be implemented in a Hot\/Standby configuration with heartbeat messaging between the two units (not shown). Moreover, the networkMCI Interact system architecture affords web server scaling, both in vertical and horizontal directions. Additionally, the architecture is such that new secure web servers  may be easily added as customer requirements and usage increases. The use of the HydraWEB\u2122 enables better load distribution when needed to match performance requirements.","As shown in , the most available Web server  receives subscriber HTTPS requests, for example, from the HydraWEB\u2122  over a connection and generates the appropriate encrypted messages for routing the request to the appropriate MCI Intranet midrange web server over connection , router  and connection . Via the Hydraweb\u2122 unit , a TCP\/IP connection  links the Secure Web server  with the MCI Intranet Dispatcher server .","Further as shown in the DMZ  is a second RTM server  having its own connection to the public Internet via a TCP\/IP connection . As described in commonly owned U.S. Pat. No. 6,470,386 this server provides real-time session management for subscribers of the networkMCI Interact Real Time Monitoring system. An additional TCP\/IP connection  links the RTM Web server  with the MCI Intranet Dispatcher server .","With more particularity, as further shown in , the networkMCI Interact physical architecture includes two routers: a first router  for routing encrypted subscriber messages from a Secure Web server  to the Dispatcher server  located inside the second firewall ; and, a second router  for routing encrypted subscriber messages from the RTM Web server  to the Dispatcher server  inside the second firewall. Although not shown, each of the routers ,  may additionally route signals through a series of other routers before eventually being routed to the nMCI Interact Dispatcher server . In operation, each of the Secure servers  function to decrypt the client message, preferably via the SSL implementation, and unwrap the session key and verify the users session from the COUser object authenticated at Logon.","After establishing that the request has come from a valid user and mapping the request to its associated session, the Secure Web servers  will re-encrypt the request using symmetric RSA encryption and forward it over a second secure socket connection  to the dispatch server  inside the enterprise Intranet.",{"@attributes":{"id":"p-0734","num":"0761"},"figref":["FIGS. 61(","FIG. 61(","FIG. 61(","FIG. 61("],"i":["a","b","a","b","a"],"b":["61","26","26","140","141","142","143","144","145"]},"Additionally, the common protocol header section includes an indication of dispatcher-assigned serial number  that is unique across all dispatcher processes and needs to be coordinated across processes (like the Web cookie (see above)), and, further, is used to allow for failover and process migration and enable multiplexing control between the proxies and dispatcher, if desired. A field  indicates the status is unused in the request header but is used in the response header to indicate the success or failure of the requested transaction. More complete error data will be included in the specific error message returned. The status field  is included to maintain consistency between requests and replies. As shown in ), the proxy specific messages  are the metadata message requests from the report requestor client and can be transmitted via synchronous, asynchronous or bulk transfer mechanisms. Likewise, the proxy specific responses are metadata response messages  again, capable of being transmitted via a synch, asynch or bulk transfer transport mechanism.","It should be understood that the application server proxies can either reside on the dispatch server  itself, or, preferably, can be resident on the middle-tier application servers , i.e., the dispatcher front end code can locate proxies resident on other servers.","As mentioned, the proxy validation process includes parsing incoming requests, analyzing them, and confirming that they include validly formatted messages for the service with acceptable parameters. If necessary, the message is translated into an underlying message or networking protocol. If no errors are found, the proxy then manages the communication with the middle-tier server to actually get the request serviced. The application proxy supports application specific translation and communication with the back-end application server for both the Web Server (java applet originated) messages and application server messages.","For example, in performing the verification, translation and communication functions, the Report Manager server, the Report Scheduler server and Inbox server proxies () each employ front end proxy C++ objects and components. For instance, a utils.c program and a C++ components library, is provided for implementing general functions\/objects. Various C++ parser objects are invoked which are part of an object class used as a repository for the RM metadata and parses the string it receives. The class has a build member function which reads the string which contains the data to store. After a message is received, the parser object is created in the RNDispatcher.c object which is filed containing the business logic for handling metadata messages at the back-end. It uses the services of an RMParser class. Upon determining that the client has sent a valid message, the appropriate member function is invoked to service the request. Invocation occurs in MClRMServerSOcket.C when an incoming message is received and is determined not to be a Talarian message. RMSErverSocket.c is a class implementing the message management feature in the Report Manager server. Public inheritance is from MClServerSoCket in order to create a specific instance of this object. This object is created in the main loop and is called when a message needs to be sent and received; a Socket.c class implementing client type sockets under Unix using, e.g., TCP\/IP or TCP\/UDP. Socket.C is inherited by ClientSocket.C:: Socket (theSocketType, thePortNum) and ServerSocket.C:: Socket(theSocketTYPe, thePortNum) when ClientSocket or ServerSocket is created. A ServerSocket.c class implements client type sockets under Unix using either TCP\/IP or TCP\/UDP. ServerSocket.C is inherited by RMServerSocket when RMServerSocket is created. An InboxParser.c class used as a repository for the RN Metadata. The class \u201cbuild\u201d member function reads the string which contains the data to store and the class parses the string it receives. After a message has been received, the MClInboxParser object is created in inboxutl.c which is a file containing the functions which process the Inbox requests, i.e, Add, Delete, List, Fetch and Update. Additional objects\/classes include Environ c which provides access to a UNIX environment; Process.c which provides a mechanism to spawn slave processes in the UNIX environment; Daemon.c for enabling a process to become a daemon; Exception c for exception handling in C++ programs, and, RMlog.c for facilitating RN logging. In addition custom ESQL code for RN\/database interface is provided which includes the ESQC C interface (Informix) stored procedures for performing the ARD, DRD, DUR, URS, GRD, CRD, and GPL messages as described with reference to Appendix A in copending U.S. Pat. No. 6,631,402. The functions call the stored procedures according to the message, and the response is build inside the functions depending on the returned values of the stored procedures. A mainsql.c program provides the ESQL C interface for messages from the report manager and report viewer.","Outgoing (server-to-client) communications follow the reverse route, i.e., the proxies feed responses to the decode\/dispatch server  and communicate them to the DMZ Web servers  over the socket connection. The Web servers  will forward the information to the client  using SSL. The logical message format returned to the client from the middle tier service is shown as follows:","\u2225TCP\/IP\u2225encryption\u2225http\u2225web response\u2225dispatcher response\u2225proxy-specific response\u2225","where \u201c\u2225\u201d separates a logical protocol level, and protocols nested from left to right.","While the invention has been particularly shown and described with respect to preferred embodiments thereof, it will be understood by those skilled in the art that the foregoing and other changes in form and details may be made therein without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Further features and advantages of the invention will become more readily apparent from a consideration of the following detailed description set forth with reference to the accompanying drawings, which specify and show preferred embodiments of the invention, wherein like elements are designated by identical references throughout the drawings; and in which:",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIGS. 5(","i":["a","b"],"b":"5"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIGS. 11(","i":["a","c"],"b":["11","300"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIGS. 12(","i":["a","h"],"b":"12"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 13(","i":"a"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 13(","i":"b"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 14(","i":"a","b":"400"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 14(","i":"b"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIGS. 15(","i":["a","c"],"b":["15","600"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 17","b":"1540"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 18","b":"500"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 19","b":"550"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIGS. 23(","i":["a","b"],"b":"23"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIGS. 23(","i":["c","j"],"b":"23"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 25(","i":"a","b":"2200"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 25(","i":["b","a"],"b":["2300","40"]},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIGS. 25(","i":["c","l"],"b":"25"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 25(","i":"m","b":"2600"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 25(","i":"n"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIGS. 27(","i":["a","c"],"b":"27"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 27(","FIG. 27("],"i":["d","a"]},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 27(","i":"e"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 27(","i":"f"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 27(","i":"g"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 27(","i":"h"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 27(","i":"i"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 28","b":"200"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIGS. 29(","i":["a","p"],"b":"29"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIGS. 32(","i":["a","b"],"b":["32","300"]},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIGS. 34(","i":["a","g"],"b":"34"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIGS. 35(","i":["a","b"],"b":"35"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 43","b":["20","1132"]},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 44","b":["1132","1140"]},{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 45","b":"1140"},{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 47","b":"1250"},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 50"},{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 51","b":"1300"},{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 53(","i":"a"},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 53(","i":"b"},{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 55","b":"1400"},{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 57","b":["20","24"]},{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 58"},{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 61(","i":"a"},{"@attributes":{"id":"p-0123","num":"0122"},"figref":"FIG. 61(","i":"b"}]},"DETDESC":[{},{}]}
