---
title: Content router with multiple forwarding elements instantiated on hardware entities
abstract: A carrier grade content router, includes a distinct management plane for housing externally visible management applications, and coordinating and relaying external management requests to appropriate underlying application code in the router; a distinct control plane for running control protocols required within an XML routed network; and a distinct data plane for receiving and forwarding customer data. Some functions can be implemented in software or via a hardware accelerator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07844733&OS=07844733&RS=07844733
owner: Solace Systems, Inc.
number: 07844733
owner_city: Ottawa, Ontario
owner_country: CA
publication_date: 20041216
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application claims the benefit under 35 USC 119(e) or prior U.S. provisional application Ser. No. 60\/530,676 filed Dec. 19, 2003, the contents of which are incorporated herein by reference.","This invention relates to the field of implicit or content routing in digital communications networks, and in particular a carrier grade content router, such as an XML router.","Content routing is described in A. Carzaniga, M. J. Rutherford, A. L. Wolf; A routing scheme for content-based networking, Department of Computer Science, University of Colorado, June 2003, the contents of which are herein incorporated by reference.","The field of \u201cImplicit Routing\u201d (or \u201ccontent routing\u201d) is an emerging networking technology. Implicit routing is the act of forwarding customer data based on the content, rather than a networking header specifying an explicitly addressed destination. A specific form of implicit routing is one which focuses on routing eXtensible Markup Language (XML) documents based on XPath Expressions. For XML, refer to \u201cExtensible Markup Language (XML) 1.0 (Third Edition)\u201d, W3C Recommendation 4 Feb. 2004, W3C (World Wide Web Consortium) and \u201cExtensible Markup Language (XML) 1.1\u201d, W3C Recommendation 15 Apr. 2004, W3C (World Wide Web Consortium). For XPath, refer to \u201cXML Path Language (XPath) Version 1.0\u201d, W3C Recommendation 16 Nov. 1999, W3C (Word Wide Web Consortium). For an XML Content router to function, it must perform the functions of XML parsing, XML filtering and forwarding, and conversion between various XML formats and semantics. Each of these involves a CPU intensive computational algorithm.","A small scale product can perform each of these functions in software. Projected data rates for such a product would be in the 50 to 200 Mbps region. Such a product is suitable for some network tasks; such as firewall\/edge routing for a branch plant or small enterprise.","A product with slightly higher data throughput requirements, 1 to 2 Gbps, will require some or all of the parsing, filtering\/forwarding, and conversion operations to be performed using some form of hardware acceleration. Such a product is suitable for deployment as an edge router for a corporate headquarters or large enterprise network.","For core networking applications, an XML router must support data rates in the range of 10 to 20 Gbps. To scale to these data rates, the XML router must incorporate multiple data plane forwarding elements, each based upon a HW accelerated data plane. Techniques are required to manage and distribute incoming XML traffic across the forwarding elements, to maximize the throughput of the system.","The products described above, although distinct in their HW architectures, have a common set of software requirements. These are largely identical to those defined for traditional carrier grade products such as Frame Relay or ATM switches, or IP routers. Among those requirements are:\n\n","To enable all three of the products to support this feature set in a common and cost effective manner, each must be implemented from a common software architecture and code base.","For a router using a mark-up language, such as XML, to be a viable networking device, hardware acceleration and parallelization techniques are required to achieve sufficient forwarding data rates. The present invention provides a system architecture which allows one or more of the above functions to be performed in hardware, with one or more hardware elements operating in parallel.","According to the present invention there is provided a carrier grade router for use in a content routed network, comprising a management plane for housing externally visible management applications, and coordinating and relaying external management requests to appropriate underlying application code in the router; a distinct control plane for running control protocols required within said mark-up language routed network; and a distinct data plane for receiving and forwarding customer data.","The mark-up language will normally be XML, although the invention would be applicable to other equivalent mark-up languages.","It will be seen that embodiments of the invention provide:\n\n","The invention also provides a method of managing a carrier grade content router in a content based network, comprising providing distinct management, control, and data planes; coordinating and relaying external management requests to appropriate underlying application code in the router in said management plane, said management plane housing externally visible management applications; running control protocols required within a mark-up language routed network in said control plane; and receiving and forwarding customer data in said data plane.",{"@attributes":{"id":"p-0021","num":"0039"},"figref":"FIG. 1","b":["1","2","3","4","5","6"]},"The management plane  is responsible for two main functions:\n\n","The first function is accomplished via straightforward implementations of the CLI\/SNMP\/WebGUI protocols, each in a distinct sub-system. All are designed to have a minimal understanding of the underlying architecture of the system, and rely on the MgmtPlane Controller (MPC)  to service management requests.","The second function is implemented in a sub-system called the MgmtPlane Controller . The primary responsibility of the MPC is to forward management responses and replies between the management applications (CLI \/SNMP \/WebGUI ) and the other applications in the XML router. It performs this function in an abstracted, data driven design by consulting the System Object Model (SOM) . The SOM is an object oriented representation of the system. This includes both physical components (slots, ports, forwarder elements) and abstract entities such as protocols (XLSP, XSMP), XML router links, or subscription table entries. The MPC also manages the non-volatile (NV) configuration datastore . This datastore is the repository for configuration information so that the configuration (or other information such as systems logs, alarm logs, billing records, etc.) can be remembered across a system restart, including a loss of power. The MPC allows read and write access to the datastore , including support for transactions, and allows other operations such as backing up the datastore , restoring the datastore from a previous backup if necessary, and initializing the system using the information in the datastore.","The SOM  oriented design of the MPC  is a key aspect to the extensibility of the XML routed architecture. The SOM  defines a simple, self contained structure by which the physical architecture of the product is abstracted away from the management applications. By this technique, the CLI , SNMP agent  and WebGUI  implementations need have no design consideration for the different variants of XML router products described in below. The Management Plane  is also responsible for storing the configuration for the router in a non-volatile (NV) repository , so that upon a system restart (e.g. after a power failure), the configuration can be restored to the previously configured state.","The Control Plane  is responsible for running all control protocols required within an XML routed network (inter-router; between a publisher and a router; between a router and a subscriber). Currently, this consists of the implementation of two protocols; the XML Link State Protocol (XLSP)  and the XML Subscription Management Protocol (XSMP) . Note that XLSP and XSMP are fully described in the above-reference application Ser. No. 60\/530,615.","The XLSP  is a protocol which discovers and monitors the topology of the XML routed overlay network. The XLSP  produces a topology graph (or topology information base) .","The XSMP  is a protocol which is responsible for registering and validating subscribers and publishers, processing subscription requests, and propagating subscription information throughout the network (such that forwarding of XML documents to the appropriate set of subscribers takes place). The XSMP maintains a copy of the forwarding database known as the Content Routing Information Base (CRIB) . Note that a subscriber is a computer or user who has expressed interest in some specific content, and a publisher is a computer or user that can insert content into the network.","All protocols designed and implemented within the Control Plane  are done so under the following constraints:\n\n","These design constraints are imposed to insure independence of the control plane from the design and location of the data plane. As the software architecture migrates across each of the products described below, the control plane protocol implementations are unaffected. Variants of the FE Abstraction class  exists for each of the single FE Element and multiple FE Element architectures described below.","The Data Plane  is the component of the XML router which receives and forwards customer data. It is the single XML router component which varies greatly across the three architectures described below.","At a high level, the Data Plane  is responsible for four main tasks:\n\n","Each of these functions is computationally intensive, and relates directly to the performance of the XML router. Correspondingly, each task is a candidate for performance speedups by using a companion HW accelerator, as described below.","In a software only architecture, the data plane consists of five key components; the Connection Manager  and associated Connection Handlers , the Forwarding Engine (FE) , the XML Parser  with the associated XML Parser API , the Content Forwarding Information Base (CFIB)  with the associated CFIB access block , the XML Transform Engine (XEngine)  with the associated XML XEngine API , and the FE Dispatcher (FE-DISP) .","The ConnMgr  and ConnHndlrs  are threads which are responsible for managing and terminating HTTP connections, and parsing HTTP headers for de-multiplexing control plane traffic from the data plane flows (refer to 60\/530,678). Note that control and data plane messages may be received from a single HTTP connection.","The FE  is the thread which is responsible for coordinating the parsing, lookup and transformation of the XML document. It houses the XML Parser subsystem ( and ), the CFIB subsystem ( and ), and the XEngine subsystem ( and ), which are responsible for parsing, lookups and transforms respectively. The FE  is designed to account for the scenarios in which these components are performed in hardware. It handles documents in a pipelined manner, allowing multiple documents to be in process at each stage at any one time (the hardware variants of these objects utilize pipelining to increase overall throughput). And the interface to each component is asynchronous in nature; that is, the document is dispatched to the object, and the FE  continues processing a subsequent document without blocking, with the results of the first document being returned to the FE  via an asynchronous call back.","As the data plane design migrates across the three product architectures, it is critical that the remaining components of the system (i.e. control plane  and management plane  applications) are minimally affected. It is a requirement for the three product architectures to be constructed from a single code base, so the operation of the control plane  and management plane  applications must be isolated from the data plane  implementation. This is accomplished within the \u201cFE Manager\u201d  object, which presents a single common interface to the remainder of the system. The FE Manager is responsible for directing requests to add, delete or retrieve subscribers, publishers and subscription entries from Content Forwarding Information Base . It also presents an interface for retrieving data plane statistics (e.g. documents and bytes forwarded, documents discarded, HTTP formatting errors, etc . . . ).","As the XML router scales to speeds in the 1 to 2 Gbps range, some of the repetitive and CPU intense components of the data plane must be moved into hardware acceleration. Specifically, the XML Parsing function  and CFIB  lookup functions are implemented within a single hardware device (which may utilize one or more Field Programmable Gate Array (FPGA), and\/or Application Specific Integrated Circuit (ASIC), memories, etc.) known as the XParser. Similarly, a subset of XML transform functionality  is implemented in the XEngine hardware device. The design of the data plane sub-system in this scenario is depicted in , showing the XParser  and the XEngine . Note that elements of  in common with  share the same labels. Note that the XParser  and the XEngine  may be implemented on the same or different hardware assemblies within the router.","This migration of the data plane from a strictly software to hardware accelerated design is accomplished via OO (Object Oriented) inheritance techniques. In the software only architecture, the subsystems for the XML Parser ( and  of ) and CFIB ( and  of ) and the XEngine ( and  of ) are separated into two classes or blocks, access classes (providing access methods, also known as API) and derived classes which actually perform the algorithm. In the hardware architecture, the derived class performs a device driver function; that is it passes info to\/from the hardware device as necessary. The access class remains the same in both instances, and the interface between the FE  and the access class is identical in both the software and hardware implementations. In , for the software only implementation of the Parser, CFIB and XEngine functions respectively, the access classes are shown in blocks ,  and , and the derived classes, which perform the actual algorithm or function, are shown in blocks , , and  respectively. For the architecture with hardware acceleration shown in , the access classes for the Parser, CFIB and XEngine respectively remain as blocks ,  and , and the derived classes, which in this case perform device driver functions to interact with the hardware components, are shown in blocks ,  and  respectively. In , within the XParser hardware , is the XML Parser Engine , the CFIB Lookup Engine , and the CFIB . Within the XEngine hardware  is the XSLT Transform Engine .","To further scale the XML Router to 10 Gbps to 20 Gbps speeds, it is necessary to incorporate multiple data planes, each one being considered a \u201cForwarding Element\u201d. The system architecture for this size router is depicted in . The implementation of each Forwarding Element in this architecture is identical to the single data plane design in . In , each Forwarding Element  is instantiated on a distinct hardware entity, which is separate from the other Forwarding Elements, and separate from the Control Element  which executes on a centralized hardware entity","The exact number of Forwarding Elements in the system is a function of desired capacity versus system cost. For the purposes of this document, it is sufficient to state that there are N Forwarding Elements, and all N are equal in terms of forwarding and subscription capacity. However, in the future, as new versions of XML forwarding elements are introduced to the system, the newer versions may have enhanced performance or capacity which must be taken into account by the controlling logic.","In , elements in common with  share the same label. In , the XML Control Element  contains the Management Plane , the Control Plane , the System Services , and the TCP stack  in the same manner as previously described, along with constituent elements such as Control Plane  protocols XLSP  and XSMP , and Management Plane  entities CLI , SNMP , and WebGUI . Within the XML Control Element , the DataPlane  has a reduced role. It still contains the Connection Manager  and Connection Handlers  and FE Manager  as previously described. However, the main dataplane functions such as parsing, content matching and content transformation have been distributed to the plurality of XML Forwarding Elements .","It should be noted that the Multiple Forwarding Element architecture can be used to increase scalability of the system across several axes:\n\n","A key question in the design of this architecture is the question of how incoming XML data is assigned to a particular forwarding element. As can be seen in , a new data plane software component has been introduced, the FE-Load Balancer (FE-LB) , specifically to perform this task. There are a number of alternatives for load balancing across the Forwarding Elements :\n\n","The method used is configurable by the network administrator, to optimize the behavior of the XML router for his specific network and application. The characteristics and further details on each load balancing algorithm are presented below.","Interface Based Load Balancing is based on a static mapping of physical interfaces to Forwarding Element. That is, all traffic received on a given interface is automatically directed to a specific Forwarding Element. This method of load balancing is the simplest, and potentially yields the highest system throughput, because there is no intermediary between the interface and the Forwarding Element (i.e. traffic need not touch the Control Element).","This is also a good method for yielding a high availability system, as N:1 and 1:N interface to Forwarding Element redundancy schemes are easily and efficiently realized. That is, the interface to Forwarding Element mappings can quickly be changed in the event of a Forwarding Element failure.","However, this method does not improve the scalability of the system with respect to the number of publishers\/subscribers\/subscriptions. This is due to the connectionless nature of the underlying IP network; packets from a given publisher or destined to a given subscriber can be received from any physical port. Hence, the CFIB tables on each Forwarding Element must be identical, and fully populated with the complete topology information.","Socket Based Load Balancing is based on a static mapping of sockets (or XML static links between routers) to Forwarding Element. That is, all traffic received on a given XML link is automatically direct to a specific Forwarding Element . This method of load balancing is only marginally more complex than Interface Based Load Balancing, and in some network topologies may yield similar throughput gains.","However, because of the connectionless nature of IP, it is possible for a large number of the routers sockets to be isolated to a small number of physical interfaces, thereby skewing the load on a small number of Forwarding Elements (and leaving other Forwarding Elements under utilized).","Similar to Interface Based Load Balancing, Socket Based Load Balancing allows a simple redundancy scheme, as the mappings from socket to Forwarding Elements  can be changed quickly. The Socket Based Load Balancing, like the interface-based load balancing, requires the CFIB tables on each Forwarding Element must be identical, and fully populated with the complete topology information.","In a scheme using Publisher Based Load Balancing, the incoming XML document is dispatched by the Control Element  to a Forwarding Element  based on the Publisher Id stored in the meta-tag associated with the document, as explained in co-filed application Ser. No. 60\/530,677, the contents of which are herein incorporated by reference. The network administrator would be required to statically configure the publisher to Forwarding Element  bindings (typically based on his knowledge of the expected volume of traffic from a given publisher). The throughput improvement for the Publisher Based Load Balancing would vary greatly depending on the traffic patterns in the network. For networks with evenly distributed traffic generation across a number of publishers, it would be easy for the administrator to optimally distribute publisher to Forwarding Element mappings. For networks with unpredictable or clumped traffic distributions across the publishers, the performance increase would be less deterministic.","The capacity of the XML router could be greatly increased by isolating the CFIB entries related to a given publisher to a single Forwarding Element . One scheme of doing this is if a publisher declares the type of documents to be published (for example, based on top-level XML elements that describe the type of document, such as stock quotes vs. news articles vs. purchase orders; or based on the XML Document Type Definition (DTD) or schema to be published against). An alternative method is to provision this information on the router instead of it being dynamically determined from the publisher. Then, when one or more publishers are assigned to a given Forwarding Element, only subscriptions related to the type of documents produced by the publishers need to sent to the Forwarding Engine, reducing the number of subscriptions that the Forwarding engine needs to deal with. A downside of this scheme is that a publisher is not free to publish any sort of XML content; if a new type of content not previously declared is to be published, the publisher has to declare that it will be publishing this new document type, resulting in the router additionally downloading to the Forwarding Engine assigned to the publisher any subscriptions that now relate to the new content type. However, the benefit of increased capacity is offset by a slower switchover rate when using the Publisher Based Load Balancing scheme in a redundant configuration. That is, when a Forwarding Element  servicing traffic from a given publisher fails, and that traffic is moved to a new Forwarding Element , all the CFIB entries for that publisher will need to be downloaded to the new Forwarding Element . This process could take several milli-seconds, depending on the size of the publisher CFIB.","With the Entitlement Group Load Balancing scheme, the incoming XML document is dispatched by the Control Element  to a Forwarding Element  based on the Entitlement Group stored in the meta-tag associated with the document. Entitlement Groups are explained in co-filed application Ser. No. 60\/530,677. The network administrator would be required to statically configure the entitlement group to Forwarding Element  bindings (typically based on his knowledge of the expected volume of traffic from a given entitlement group or based on other policies, such as the need to isolate certain entitlement groups from each other by using different Forwarding Engines).","With entitlement groups, subscribers are also associated with one or more entitlement groups, and thus so are their subscriptions. As a result, when a given Forwarding Engine is assigned one or more entitlement groups to handle, the associated subscriptions from the network for those entitlement groups can be associated with the Forwarding Element. Thus, a given Forwarding Element only sees the subscriptions for the entitlement groups it is handling, leading to better scalability and performance. In addition, this provides isolation among entitlement groups (or sets of entitlement groups), which is important when providing services such as virtual private networks. Upon a switchover from a failed Forwarding Element to a backup Forwarding Element, the correct set of subscriptions to be matched against must be sent to the new Forwarding Element.","With the above static load balancing schemes based on interface, socket, publisher id, or entitlement group, the lookup can use a simple table-based approach, where the input discriminator (one of interface, socket, publisher id, or entitlement group) is used to index into a table to yield the Forwarding Element to use. Other lookup techniques, such as a hash lookup, can also be used. For redundancy support, the lookup can yield a logical Forwarding Element identifier, which is then used to lookup in a second table to find the identifier of the physical Forwarding Element to use. Thus, when a switchover occurs, only one entry in the logical to physical Forwarding Element table need be updated, vs. a potentially large number of entries in the first lookup table (for example, indexed by publisher id). This is illustrated in . The input discriminator  used for the static load balancing scheme (such as the interface, socket, publisher id, or entitlement group) is used to index into a lookup table  (by doing a direct index operation, or by using a scheme such as a hash table lookup). The resulting entry  indicates the logical Forward Element unit to use. This value is used to index into a second lookup table  and the resulting entry  yields the Forwarding Element identifier  which indicates which Forwarding Element is to be used for the document. If a Forwarding Element fails, only the single entry in the table  needs to be modified to indicate the new Forwarding Element to use. Note that many entries in lookup table  can point to the same entry (e.g. ) in the second lookup table .","A more sophisticated scheme for distributing traffic across the Forwarding Elements  is the Dynamic Usage Based Load Balancing method. Under this approach, the FE-LB  dynamically tracks the loading of each Forwarding Element (keeping the information in the FE Loading data store ) and distributes new documents to that which is least loaded.","It should be noted that the processing time for a single XML document is non-deterministic, as it is affected by document size, size of the CFIB, and level of nesting of the XML elements which eventually yield the CFIB lookup results. This characteristic results in a simple, round robin load balancing scheme being ineffective.","A further description of the Dynamic Usage Based Load Balancing method:\n\n","The Dynamic Usage Based Load Balancing algorithm is a strong scheme for optimizing the usage of forwarding elements , and therefore should yield a high throughput regardless of network topology and traffic patterns.","However, because a given XML document could be dispatched to any Forwarding Element , it is necessary that each Forwarding Element  maintain a complete copy of the entire CFIB. No increased scalability of the XML router's capacity for publishers, subscribers and subscriptions is achieved.","The Dynamic Usage Based Load Balancing scheme yields a simple and efficient mechanism for Forwarding Element  redundancy. When a Forwarding Element  fails, the FE-LB  simply removes it from its linked list, such that it will not be chosen for subsequent XML documents. No downloading of CFIB updates is required.","The various Load Balancing schemes can be combined. For example, the Dynamic Usage Based Load Balancing can be combined the Entitlement group Based Load Balancing. Consider a system with six Forwarding Elements, where two Forwarding Elements are assigned to an entitlement group (or an entitlement group set), and the other four Forwarding Elements are assigned to a different entitlement group (or different entitlement group set). As explained above, each Forwarding Element would be given only the subscriptions involved in the entitlement group(s) that it is handling. The Dynamic Load Balancing scheme would track the number of free slots on each Forwarding Element as described above, but would keep the list described above for each group of Forwarding Elements instead of only having a single list. Thus, for a given entitlement group (or set of entitlement groups), the Dynamic Usage Based Load Balancer would balance the traffic among the associated set of Forwarding Elements.","The Preliminary Content Inspection Based Load Balancing scheme is the most subtle of the available schemes. In this method, the FE-LB  on the Control Element  performs a quick parse and lookup operation on the XML document, and forwards it to the appropriate Forwarding Element  based on that result. Typically the first pass parse and lookup would only filter based on a simplified CFIB, such as examining top level elements, or searching for a small set of element names. For example, the top level examination might separate documents based on whether they contain news, financial quotes, or SOAP messages. Such an initial parse can be used with a very simplified XML parsing engine which does not do any XML conformance or validity checks (for example, checking to see if the XML document is well-formed and valid as per the XML specification). A parser with an event interface, such as a SAX parser (known in the art) with very simplified parsing rules, could be used for this preliminary content inspection. Moreover, if very simple checks such as only using the top-level XML tag are used, then the simplified parsing can stop as soon as the top-level tag is found and checked. The selected Forwarding Element, as part of its parsing function, will do the full conformance and validity checks on the XML document.","The benefit of the Preliminary Content Inspection Based Load Balancing scheme is the ability for the administrator to tune and optimize the router performance for a given family of traffic, publishers and subscribers. In the example above, the financial quote data could be dispatched to a number of isolated Forwarding Elements , guaranteeing a certain level of throughput and service. Similarly, the administrator can partition the CFIB resources in the system based on the preliminary inspection. That is, the number of subscription entries for a given family of traffic (eg. News, financial quotes, SOAP messages) are managed by the mapping of each class to Forwarding Elements .","The Preliminary Content Inspection Based Load Balancing method may or may not yield a significant increase in XML router capacity, depending on the nature and content of the CFIB, and how XML documents are separated in the first pass.","The Preliminary Content Inspection Based Load Balancing method also does not lead to strong performance in the case of a redundancy switchover. All CFIB entries for a failed Forwarding Element  will need to be downloaded to a new Forwarding Element .","It should also be noted that in , functions such as the TCP\/IP stack , and other portions of the dataplane  such as the connection manager , connection handlers , the FE-LB  and the FE loading data store  could themselves be implemented in specialized hardware, allowing for the complete datapath to be implemented in hardware. The FE Manager  would abstract this from the management plane  and the control plane .","The invention has been described with reference to an exemplary embodiment. It will be appreciated by persons skilled in the art that many variants are possible within the scope of the invention.","All references mentioned above are herein incorporated by reference. Reference has been made herein to copending provisional applications, which are incorporated by reference. Such incorporation by reference should also be taken to include the non-provisional applications based thereon whose serial numbers will be inserted when they become available."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will now be described in more detail, by way of example only, with reference to the accompanying drawings, in which:",{"@attributes":{"id":"p-0017","num":"0035"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0036"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0037"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0038"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
