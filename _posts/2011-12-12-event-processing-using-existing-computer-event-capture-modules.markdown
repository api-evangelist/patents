---
title: Event processing using existing computer event capture modules
abstract: Embodiments disclosed herein provide systems and methods for processing events using existing computer event capture modules. In a particular embodiment, a method provides a primary event module communicating with an operating system to detect application events generated by user input and processing the application events to determine if a primary event has occurred. The method further provides a secondary event module communicating with the primary event module to obtain an indication of the application events detected by the primary event module and processing the application events to determine if a secondary event has occurred.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782668&OS=08782668&RS=08782668
owner: Verint Americas Inc.
number: 08782668
owner_city: Alpharetta
owner_country: US
publication_date: 20111212
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL BACKGROUND","OVERVIEW","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Applications No. 61\/422,020, 61\/422,177, 61\/422,179, 61\/422,183, 61\/422,185, 61\/422,186, and 61\/422,189, filed Dec. 12, 2010, and 61\/438,108, filed Jan. 31, 2011, which are hereby incorporated by reference in their entirety.","Entities such as businesses, educational institutions, and individuals use computers routinely to accomplish tasks. The tasks can vary widely depending on the user and what the user needs to perform. Usually the tasks are accomplished using various computer applications that may each be used in various ways. Thus, there may be more than one way for a user to accomplish a task using the applications on the computer of the user. Having multiple ways of accomplishing tasks may make it difficult to track the activity of the user or may also make it difficult for the user to determine whether the user is accomplishing the task appropriately.","Embodiments disclosed herein provide systems and methods for processing events using existing computer event capture modules. In a particular embodiment, a method provides a primary event module communicating with an operating system to detect application events generated by user input and processing the application events to determine if a primary event has occurred. The method further provides a secondary event module communicating with the primary event module to obtain an indication of the application events detected by the primary event module and processing the application events to determine if a secondary event has occurred.","In some embodiments, the primary event module comprises a browser helper object and the user input is entered into web page displayed in a web browser application.","In some embodiments, the primary event module comprises an accessibility application programming interface (API) for the operating system.","In some embodiments, the method further provides processing the application events to using recursive substring analysis to identify events that are likely to follow one another. The method further provides creating a matrix of the application events that are likely to follow one another and graphically displaying the matrix including a visual indication of the application events that are likely to follow one another.","In some embodiments, the indication of the application events includes an occurrence time and event type for each application event and the method further includes the secondary event module receiving schedule information regarding a schedule for use of a plurality of computer workstations and determining a metric for whether each of the plurality of computer workstations is in use based on the schedule information, occurrence time, and event type. The method further includes determining a number of occupied seats in a room based on the metric.","In some embodiments, the indication of the application events includes an occurrence time for each application event and the method further includes the secondary event module receiving process definitions that each defines a process based on a sequence of events and receiving telephony events, wherein each telephony event indicates an occurrence time. The method further includes processing the application events and the telephony events to determine whether a subset of the application events and telephony events is a first process based on the process definitions. The method further includes, determining an occurrence time for the first process based on the occurrence times for the subset of the application and telephony events and displaying the first process on a timeline along with the application events and the telephony events in accordance with the occurrence times of the first process, the application events, and the telephony events.","In some embodiments, the method further includes the secondary event module receiving an indication of the user input from the primary event module and determining a user action that should be taken with the computer system by a user based on the user input and the application events. The method further includes generating an instruction to notify the user about the user action that should be taken.","In some embodiments, the method further comprises the secondary event module receiving process definitions that each define a process based on a sequence of events and processing the application events to determine whether a subset of the application events comprises a first process based on the process definitions even if the subset of application events includes application events that are extraneous to a definition for the first process. The method further includes processing the application events a second time to determine whether a second subset of the application events comprises an incomplete process based on the process definitions even if the second subset of application events includes application events that are extraneous to a definition for the incomplete process.","In another embodiment, non-transitory computer readable medium with instructions stored thereon is provided for operating a computer system to process computer events, wherein the instructions, when executed by the computer system, direct the computer system to communicate with a primary event module to obtain an indication of application events detected by the application enhancement event module, wherein the primary event module communicates with an operating system to detect the application events generated by user input and determine if a primary event has occurred based on the application events. The instructions further direct the computer system to process the application events to determine if a secondary event has occurred and process the application events to determine if a business process has occurred.","In another embodiment, a method provides communicating with a primary event module to obtain an indication of application events detected by the application enhancement event module, wherein the primary event module communicates with an operating system to detect the application events generated by user input and determine if a primary event has occurred based on the application events. The method further includes processing the application events to determine if a secondary event has occurred.","In some embodiments, the secondary event is a business process.","The following description and associated figures teach the best mode of the invention. For the purpose of teaching inventive principles, some conventional aspects of the best mode may be simplified or omitted. The following claims specify the scope of the invention. Note that some aspects of the best mode may not fall within the scope of the invention as specified by the claims. Thus, those skilled in the art will appreciate variations from the best mode that fall within the scope of the invention. Those skilled in the art will appreciate that the features described below can be combined in various ways to form multiple variations of the invention. As a result, the invention is not limited to the specific examples described below, but only by the claims and their equivalents.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","100","101","102","103","103","101","102","103","105","106","107","107","108","109","100","100","109","100"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["100","100","108","103","100","100"]},"Primary event module  communicates with the operating system to detect application events generated by user input into user interface . The user input may be any type of user input, such as mouse click, keyboard entry, or touch screen gesture, that interacts with an application executing within the operating system or on with the operating system itself. The application events may be user notifications, events occurring directly in reaction to user input, events caused by the normal execution of an application, or any other type of event that may occur on a computer system, including those in the operating system and applications running on the operating system. Primary event module  then processes the application events to determine if a primary event has occurred. A primary event is an event that primary event module  is programmed to detect based on the application events. Other application events that do not qualify as a primary event are thereby ignored by primary event module . Primary event module  may direct computer system  to take a particular action based on the detection of the primary event.","Secondary event module  communicates with the primary event module to obtain an indication of the application events detected by the primary event module. The indication may be any type of message that can be sent between two software modules that indicates the application events that were detected by primary event module . Secondary event module  may request the indication of the application events or primary event module  may be configured to automatically make the application events available to secondary event module . The application events indication may be transferred to secondary event module  in real time as each event happens or may be periodically sent in blocks of multiple application events at later times.","Secondary event module  then processes the application events to determine if a secondary event has occurred. A secondary event is an event that secondary event module  is programmed to detect based on the application events. Other application events that do not qualify as a secondary event are thereby ignored by secondary event module . Secondary event module  may direct computer system  to take a particular action based on the detection of the secondary event. The secondary event may be the same or different than the primary event and, if they are the same, the action taken based on the secondary event may be different than the action taken by the primary event.","Advantageously, both the primary and the secondary event modules process the application events in order to determine whether a particular primary or secondary event has occurred. Accordingly, the primary and secondary event modules are able to each individually process the application events to detect a primary and secondary event, respectively. This allows the primary and secondary event modules to detect different events from the application events and take different actions in accordance with each modules individual programming. Additionally, by using the primary event module's application event detection, the secondary event module is able to perform application event processing without the necessary mechanisms for detecting the application events themselves.","In an exemplary embodiment of the above method, primary event module  may comprise a browser helper object that is running in conjunction with a web browser application within the operating system of computer system . A browser helper object is a mechanism of the web browser that typically allows third party applications to augment the Internet browser experience. For example, antivirus software may use a browser helper object to recognize and highlight trusted links in a web page by injecting additional HTML code into the web page that instructs the links to be highlighted.","The browser helper object receives a user input into a web page that the web browser is displaying. The web page may be any type of web page capable of being displayed on a display in user interface . The user input may be received via touch input into the aforementioned display or through some other type of user input device in user interface , such as a mouse or keyboard. The user input may be a single user input, such as a mouse click, or multiple inputs, such as a series of mouse clicks or mouse clicks and keyboard strokes. The user input is considered to interact with the web page if the user input acts on the web page in some way, such as entering text into a text field, clicking on a link, interacting with an object within the web page, such as a Flash app, or any other way that a user may interact with a web page in a browser.","The browser helper object then processes the user input to determine application events that occurred based on the user input and processes the application events to determine whether action should be taken. For example, if the application event is a link opening up another web page, then the browser helper object may do nothing. However, if the application event requires some other application to run in order to comply with the application event, then the browser helper object may open the required application.","The application events detected by the browser helper object are the events that are passed to the secondary event module. The secondary event module then processes the application events to determine whether a secondary action should be taken. While the application event may not have caused the browser helper object to trigger an action, the application event may cause the secondary event module to trigger an action. Likewise, both the browser helper object and the secondary event module may trigger different actions from the same application events. Some actions that may be triggered by the secondary event module are discussed below.","In an exemplary embodiment of the above method, primary event module  may comprise an accessibility application programming interface (API). The accessibility API is an API that is used to comply with section  legal guidelines on accessibility to computer devices irrespective of any physical disability that a user of the device may have. Thus, the accessibility API is typically meant to aid a disabled user of computer system  in the operation of computer system .","The accessibility API receives user input into a first application executing within the operating system of computer system  or into the operating system itself. The user input may be received via touch input into the aforementioned display or through some other type of user input device in user interface , such as a mouse or keyboard. The user input may be a single user input, such as a mouse click, or multiple inputs, such as a series of mouse clicks or mouse clicks and keyboard strokes. The content or purpose of the user input will vary based on the functionality of the first application. For example, the first application may be a web browser, word processor, or email client.","The accessibility API then processes the user input to determine application events that occurred based on the user input and processes the application events to determine whether action should be taken. For example, if the application event selects text, then the accessibility API may trigger an audible reading of the text for the user. However, if the application event is a file save, then the accessibility API may do nothing.","The application events detected by the accessibility API are the events that are passed to the secondary event module. The secondary event module then processes the application events to determine whether a secondary action should be taken. While the application event may not have caused the accessibility API to trigger an action, the application event may cause the secondary event module to trigger an action. Likewise, both the accessibility API and the secondary event module may trigger different actions from the same application events. Some actions that may be triggered by the secondary event module are discussed below.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["109","108","100","109","108","300"]},"The application events are processed using recursive substring analysis to identify application events of the application events that are likely to follow one another (step ). Thus, the recursive substring analysis determines likely event combinations from the application events. For example, a user of computer system  may consistently use an email application after using a contact catalog application. Hence, the processing will determine that the email application is likely to be used after the contact catalog application.","A matrix of the application events that are likely to follow one another is then created (step ). The matrix is a data structure that stores the application events that are likely to follow one another. The matrix may be stored in memory device  in computer system  but may also be stored elsewhere, such as a network storage server or administrative computer system via communication interface . The matrix may include an indication as to which application event combinations are more likely to occur than other application event combinations.","Secondary event module  directs user interface  to graphically display the matrix including a visual indication of which application events are likely to follow one another (step ). Secondary event module  may be executing on and administrative computer system that receives application events from primary event modules executing on many remote computer systems, including computer system . A diagramming application, such as Microsoft Visio, executing on processing system  or on another computer system may display the matrix. For example, each application event of the application events may be displayed on a diagram with application event combinations connected by lines. The thickness of the line between application events indicates the frequency of occurrence for the combination, thus, giving a user a visual representation of event combination frequency. The application event combinations may be time stamped to show which users perform the application event combinations more quickly. Additionally, a user may be able to indicate a number of standard deviations from a norm in order to display outlying event combinations as opposed to those events that occur most often.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4","b":["109","108","100","109","108"]},"Secondary event module  determines a user action that should be taken with the computer system by a user based on the user input and application events (step ). The application events may occur in such a way that the next action can be determined. For example, there may be a particular sequence of application events that requires a particular action be taken. Likewise, certain events occurring within a period of time may warrant a particular action. The action could be anything that the user can perform using computer system , such as operating a particular application or not using another application.","Once the user action is determined, an instruction is generated to notify the user about the user action that should be taken (step ). The instruction may use various ways to notify the user of the action. For example, the instruction may highlight objects on a display of user interface  in order to guide the user through the action, steer users through a process actively tracking the progress of the user and updating the script as the user proceeds, intercept user inputs based on the current state of the operating software desktop, preventing a certain user input before another user input has been completed, or indicating to a user a number of screens until the operation is completed.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5","b":["109","108","100","109","500","101","102","100"]},"Secondary event module  further receives the application events from primary event module  (step ). The application events may be user notifications, events in reaction to user input, events caused by the normal execution of an application, or any other type of event that may occur on a computer system.","The application events are processed to determine whether a subset of the application events comprises a first process based on the process definitions even if the subset of application events includes application events that are extraneous to a definition for the first process (step ). Thus, secondary event module  compares the application event sequences within the application events to the sequences in each process definition to determine whether the process definition is satisfied. Additionally, the comparison finds application event sequences that match the process definitions except for one or more extraneous events in between. If secondary event module  determines that the extraneous events are inconsequential, then secondary event module  still determines that the process definition has been met. For example, if the user checks email in the middle of the events of a process before continuing the process, then the process definition will still be met even though the email check event falls in the middle of the event sequence.","The application events are then processed a second time to determine whether a second subset of the application events comprises an incomplete process based on the process definitions even if the second subset of application events includes application events that are extraneous to a definition for the incomplete process (step ). Secondary event module  therefore compares the events to a first part of the process definition. If the first part of the process definition is met, even when there are extraneous intervening events, then secondary event module  determines that the process defined by the definition was started and abandoned before completion. The process may be considered abandoned also based on a process restart detected on the previous processing pass or an application event that signifies the abandonment of the process, such as a cancellation event. Additionally, the process may be considered abandoned based on processes that were completed before or after the abandoned process as determined on the previous processing pass. For example, if the process that was abandoned usually follows a process that was detected on the first processing pass, then the abandoned process is most likely an abandoned process and not simply random events.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 6","b":["600","601","600","109","109","109","601","109","109"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 7","b":["109","108","100","109","700","101","102","100"]},"Secondary event module  further receives telephony events and in addition to the application events, wherein each event indicates an occurrence time (step ). The telephony events may include any sort of event stemming from a communication with another individual, such as call answer, call hold, call hang up, or words spoken during the call. The telephony events may occur from a landline phone, a VoIP phone, audio chat, video chat, text based chat, or any other type of communication method between an agent and another individual, such as a customer or potential customer. The telephony events may be a subset of the application events that are received from primary event module . Alternatively, the telephony events may be received from an automatic call distributor (ACD) or any other system or software module that manages call activity. Each event, application or telephony, includes an occurrence time for the event. The occurrence time may include a start time, stop time, duration, date, or any other time related information for the event.","The telephony and application events are processed to determine whether a subset of the telephony and application events is a first process based on the process definitions (step ). Thus, secondary event module  compares the event sequences within the events to the sequences in each process definition to determine whether the process definition is satisfied. For example, the process may be a sale and it may be made up of a telephony event comprising a customer saying \u201cI agree to buy the product,\u201d along with application events that pull the product from inventory and generate a bill for the customer. In addition to the first process, there may be other processes that occur in the received events that are also determined during the processing of the telephony and application events.","An occurrence time is determined for the first process based on the occurrence times for the subset of the telephony and application events (step ). Since processes are defined by the events that make up each process, the timing of the events that make up each process coincide with the timing of each process. For example, the start time for a process may be the time of the first event defining the process. Likewise, the time of the last event defining the process may be the end time of the process.","The first process is displayed on a timeline along with the telephony events and the application events in accordance with the occurrence times of the first process, the telephony events, and the application events (step ). Therefore, in addition to showing time and duration of events on a timeline, the time and duration of the first process is also displayed on the timeline. This allows a user to view when a process occurred on a timeline and be able to associate the timing of the process with the timing of the events that make up the process, which are also displayed on the same timeline.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 8","b":["800","800"]},"Telephony event 1 along with application events 2, 3, and 4 make up process 1. Therefore, process 1 is displayed having a duration extending from the first event that occurred (application event 2) to the last event that occurred (application event 4). Application event 1 is not part of process 1, thus process 1 does not extend to the time period of application event 1. An expanded view of table  may show additional events and processes that occur outside of the 10:00-10:06 time frame. In some embodiments, application events 2-4 may apply to multiple processes, not just process 1.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 9","FIG. 1"],"b":["900","900","901","902","906","907","901","902","906","911","917","907","911","917","901","902","906","100","109","901","902","906","108","109","911","917"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 10","b":["109","108","900","900","902","906","901","902","906"]},"The operation begins with secondary event module  receiving schedule information regarding a schedule for the use of computer workstations - (step ). The schedule information may include information about an application that is to be used on computer systems -, when that application is supposed to be used, and who is supposed to be using the application. For example, in a computer learning lab, the schedule information may indicate that a calculus test is going to be administered at noon and include a list of students who will be taking the test.","Secondary event module  receives application events from primary event modules  on computer systems - including an occurrence time and event type for each event (step ). The application events may include login information, which application execution, events within an application, or any other type of event that may occur on a computer system. For example, the application events may indicate to secondary event module  which user logged into which computer, whether that user started the exam on time, and where that user is in the process of taking the exam.","Secondary event module  then determines a metric for whether each of computer systems - is in use based on the schedule information, occurrence time, and event type (step ). Thus, the metric shows who is using the computer system and how are using the computer system. For example, the metric will show who the user is and whether the user is using the computer to take the calculus test or is using the computer for other purposes, such as checking email.","Secondary event module  then determines a number of occupied seats in a room based on the metric (). The metric therefore allows secondary event module  to determine whether the users of computer systems - are using computer systems - in accordance with the schedule. For example, the metric allows secondary event module  to take a sort of roll call for computer systems -. The metric may indicate which students are actually taking the test, whether they are taking the test on time, and whether the students are making appropriate progress.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 11","b":["109","108","900","900","902","906","901","902","906"]},"The operation begins with secondary event module  receiving a first plurality of application events associated with a first interaction for a customer from primary event module  (step ). The application events may be user notifications, events in reaction to user input, events caused by the normal execution of an application, or any other type of event that may occur on a computer system. The interaction could consist of any sort of customer\/agent interaction, such as a sales call, tech support, or other inquiry. The interaction may take place over phone, email, text chat, or any other way that an agent and customer can interact. The application events are associated with an interaction for a customer if they occur during an interaction between a customer and an agent using computer system . For example, the agent may be on a call with the customer and the application events may occur in an inventory management application or a sales application. Likewise, the application events may occur before or after the actual customer interaction but still be related to the interaction, such as administrative tasks finalizing a transaction.","An identifier associated only with the customer is assigned to the first plurality of application events (step ). The identifier could take any form that is unique to the customer, such as a number, code, or customer name. The plurality of events is assigned the identifier so that the events can be identified as pertaining to the customer.","Secondary event module  then receives a second plurality of application events associated with a second interaction for the customer from primary event module  (step ). The second interaction may be the same type of interaction as the first interaction or may be a different interaction with the same customer. The identifier is assigned to the second plurality of events (step ). The identifier is the same because the second plurality of application events is associated with the same customer as the first. The second plurality of application events may also be received and assigned the identifier by one of the other computer systems -.","The identifier is stored as an entity along with other associated identifiers in administrative computer system  (step ). The entity may be defined as a group of identifiers with something in common, such as customers with the same type of business or customers who purchase a certain amount of product. The identifiers are stored on administrative computer system  so that administrative computer system  can monitor and perform actions with computer systems - based on the identifiers.","For example, when an indicator is detected because one of computer systems - is interacting with the customer associated with the customer for the indicator, secondary event module  could notify computer systems - which agent is currently interacting with that customer.","In another example, if the agent using computer system  is detected as completing a process for a customer and the agent using computer system  is about to perform the same process, then administrative computer system  will notify the agent using computer system  of this fact. Thus, the agent using computer system  could refer to the agent using computer system  for assistance if needed. Alternatively, if the two users deal with a customer in succession, for example one agent deals with billing and the other with delivery scheduling, then the delivery agent will be notified when the billing agent is almost finished so that the delivery agent can be prepared.","In another example, if an identifier shows that a customer interaction is taking too long with the user of computer system , the secondary event module  may perform some action to remedy the issue, such as notifying a supervisor about the issue.","Referring back to , communication interface  comprises components that communicate over communication links, such as network cards, ports, RF transceivers, processing circuitry and software, or some other communication devices. Communication interface  may be configured to communicate over metallic, wireless, or optical links. Communication interface  may be configured to use TDM, IP, Ethernet, optical networking, wireless protocols, communication signaling, or some other communication format\u2014including combinations thereof.","User interface  comprises components that interact with a user. User interface  may include a keyboard, display screen, mouse, touch pad, or some other user input\/output apparatus. User interface  may be omitted in some examples.","Processing circuitry  comprises microprocessor and other circuitry that retrieves and executes operating software  from memory device . Memory device  comprises a disk drive, flash drive, data storage circuitry, or some other memory apparatus. Operating software  comprises computer programs, firmware, or some other form of machine-readable processing instructions. Operating software includes primary event module  and secondary event module . Operating software  may further include an operating system, utilities, drivers, network interfaces, applications, or some other type of software. When executed by circuitry , operating software  directs processing system  to operate information computer system  as described herein.","In particular, primary event module  communicates with the operating system to detect application events generated by user input and processing the application events to determine if a primary event has occurred. Additionally, secondary event module  communicates with the primary event module  to obtain an indication of the application events detected by the primary event module and processing the application events to determine if a secondary event has occurred.","The above description and associated figures teach the best mode of the invention. The following claims specify the scope of the invention. Note that some aspects of the best mode may not fall within the scope of the invention as specified by the claims. Those skilled in the art will appreciate that the features described above can be combined in various ways to form multiple variations of the invention. As a result, the invention is not limited to the specific embodiments described above, but only by the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
