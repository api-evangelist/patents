---
title: Method, system and article for improved network performance by avoiding IP-ID wrap-arounds causing data corruption on fast networks
abstract: The reassembly timer in a TCP/IP receiver is dynamically set to avoid data corruption on fast networks caused by IP identification wrap-around. A sender generates IP packets with a special option specifying a reassembly time for fragments based on the subnet of the destination or on the calculated round-trip time of the connection. A receiver sets the reassembly timer to the reassembly time specified in the option. A sender can generate IP packets with an alternative option setting a time stamp for the generated packet. A receiver calculates a traversal time based on the difference between the arrival time of the fragment and this time stamp, and sets the reassembly timer based on this traversal time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07564843&OS=07564843&RS=07564843
owner: International Business Machines Corporation
number: 07564843
owner_city: Armonk
owner_country: US
publication_date: 20041216
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates generally to data transfers in data processing network systems, and in particular to transfer of data blocks over the Internet and similar networks. Still more particularly, the present invention relates to improved Internet Protocol (IP) network communications.","2. Description of the Related Art","A computer network is a geographically distributed collection of interconnected communication media for transporting data between entities. An entity may consist of any device, such as a host or end station, that sources (i.e., transmits) and\/or receives network messages over the communication media. Many types of computer networks are available, with the types ranging from local area networks (LANs) to wide area networks (WANs). The end stations, which may include personal computers or workstations, typically communicate by exchanging discrete messages, such as frames or packets, of data according to predefined protocols. In this context, a communications protocol stack consists of a set of rules defining how the stations interact with each.","The Internet has become an important computer network for transmission and distribution of data (text, code, image, video, audio, or mixed) and software. The primary protocols of the Internet communications architecture protocol stack are the Internet Protocol (IP) at the network layer (layer 3) and Transmission Control Protocol (TCP) at the transport layer (layer 4). The term TCP\/IP is commonly used to refer to the Internet architecture, which has become a widely implemented standard communication protocol in Internet and Intranet technology, enabling broad heterogeneity between clients, servers, and the communications systems coupling them. IP provides a \u201cdatagram\u201d delivery service at the network level. TCP builds a connection-oriented transport level service to provide reliable, sequential delivery of a data stream between two IP hosts. Reliability in TCP\/IP transmissions is generally compromised by three events: data loss, data corruption, and reordering of data.","Data loss is managed in TCP\/IP by a time-out mechanism. TCP maintains a timer (retransmission timer) to measure the delay in receiving an acknowledgment (ACK) of a transmitted segment from the receiver. When an ACK does not arrive within an estimated time interval (retransmission time-out (RTO)), the corresponding segment is assumed to be lost and is retransmitted. Further, because TCP is traditionally based on the premise that packet loss is an indication of network congestion, TCP will back-off its transmission rate by entering \u201cslow-start,\u201d thereby drastically decreasing its congestion window to one segment.","TCP manages data corruption by performing a checksum on segments as they arrive at the receiver. The checksum algorithm is a 16-bit one's complement of a one's complement sum of all 16-bit words in the TCP header and data. The TCP sender computes the checksum on the packet data and loads this 2-byte value into the TCP header. The TCP header's checksum field also includes a 12-byte pseudo header that contains information from the IP header. The receiver computes the checksum on the received data (excluding the 2-byte checksum field in the TCP header), and verifies that it matches the checksum value in the header.","TCP manages reordering of data or out-of-order arrival of segments by maintaining a reassembly queue that queues incoming packets until they are rearranged in sequence. Only when data in this queue gets in sequence is it moved to the user's receive buffer where it can be seen by the user. When the receiver observes a \u201chole\u201d in the sequence numbers of packets received, it generates a duplicate acknowledgement (DACK) for every subsequent \u201cout-of-order\u201d packet it receives. Until the missing packet is received, each received data packet with a higher sequence number is considered to be \u201cout-of-order\u201d and will cause a DACK to be generated.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 10","b":["100","110","150","110","102","104","106","108","110"]},"The IP header further includes a more fragment (MF) flag , an IP fragment offset field  that specifies the placement of the fragment within the IP packet and a time to live (TTL) field  that indicates a maximum time the packet is allowed to remain in the network. A protocol field  indicates the next level protocol used in the payload\/data portion  of the packet, while a header checksum field  provides a checksum on only the IP header. The IP header further includes a source address field  containing the IP source address of the sending entity and a destination address field  containing the IP destination address of the receiving entity, along with an options field  and a padding field .","Fragmentation of an IP datagram (hereinafter referred to as a packet) is often necessary if the LAN standards associated with the source and destination entities are dissimilar (e.g., Ethernet and Token Ring). In such a case, the routers and switches of the network may need to alter the format of the packet so that it may be received by the destination entity. For example, if a packet originates in a network that allows a large packet size and traverses one or more links or local networks that limit the packet to a smaller size, the switch interconnecting the networks must fragment the IP packet. In the context of a TCP\/IP networking environment, the fragmentation and reassembly procedure is well known and described in detail in the Internet Protocol, Request for Comments (RFC) 791, by Information Sciences Institute University of Southern California (1981), which disclosure is hereby incorporated by reference. According to RFC 791, IP fragmentation apportions an IP packet into an arbitrary number of fragments that can be later reassembled.","To fragment an IP packet, either a source or an intermediate system (e.g., a switch) creates two or more new IP fragments and copies the contents of a portion of the IP header fields from the original packet into each of the IP headers of the fragments. The receiving entity of the fragments uses the contents of the IP identification field  (i.e., the packet identifier (ID)) to ensure that fragments of different packets are not mixed. That is, the identification field  is used to distinguish the fragments of one packet from those of another. The IP fragment offset field  informs the receiving entity about the position of a fragment in the original packet. The contents of the fragment offset field and the IP total length field  of each fragment determine the portion of the original packet covered by the fragment. The MF flag  indicates (e.g., when reset) the last fragment. The originating host of a complete IP packet sets the IP identification field  to a value that is unique for the source\/destination address pair and protocol (e.g., TCP, UDP) for the time the packet will be active in the network. The originating host of the complete packet also sets the MF flag  to, e.g., zero and the IP fragment offset field  to zero.","The IP identification field  is a 2 byte field, which must wrap around (i.e., must restart numbering at 1) after reaching 65535. On a high speed network generating thousands of IP packets per second, the IP identifier (IP-ID) in field  can wrap around multiple times per second. For example, on gigabit Ethernet, 80,000 packets can be generated in a second, which means the wrap around of the IP-ID can occur within a second. As networks become even faster, this wrap around occurs even more frequently. For example, with 10 gigabit Ethernet, the wrap around can occur in milliseconds.","As a result, IP-ID wrap around can be a cause of data corruption in the network if fragments belonging to a wrapped around IP-ID are reassembled with fragments of a different IP packet identified by the original IP-ID. Upper layer protocols such as TCP or UDP may not be able to detect the corruption since the Internet checksum algorithm utilizing header checksum  to detect corruption is not very strong. This problem is addressed in IP by the use of a reassembly timer (see RFC 791). IP fragment reassembly uses the reassembly timer to discard fragments if all fragments of an identified packet have not been received within the reassembly timer period. Many implementations of IP fragment reassembly typically use 30 seconds for the reassembly timer. In vary fast networks, the IP-ID will wrap around many times in this time interval, increasing the likelihood that fragments will be mismatched with the wrong fragments of a wrapped around IP-ID.","The solution to IP-ID wrap around in fast networks has been to set the reassembly timer to a very low value, thereby reducing the number of duplicate IP-IDs outstanding. However, this causes performance degradation in network environments with varied speeds of both fast and slow networks because fragments will be mistakenly discarded along a slow link when the IP packets merely have not yet arrived. Discarding IP fragments in slow network connections will result in unnecessary retransmissions being required from the upper layers. As can be seen, it would be desirable to provide a solution to data corruption problems caused by IP-ID wrap-around on variable-speed networks that provides improved performance over the known solutions.","In accordance with the present invention, improved methods, systems and articles of manufacture for communication over a data processing system network are disclosed. One preferred method of the present invention comprises the steps of determining a customized reassembly time for a particular data packet to be transmitted, generating the data packet, including inserting the customized reassembly time into a field of the data packet, and transmitting the data packet, wherein a receiver of the data packet will utilize the customized reassembly time to discard a fragment of the packet that remains fragmented longer than indicated by the customized reassembly time following receipt of the fragment.","Another preferred method of the present invention for communication over a data processing system network comprises receiving a data fragment over a network containing an option indicating a customized reassembly time for a data packet comprising the data fragment, and discarding the data fragment if it remains fragmented from the data packet longer than indicated by the customized reassembly time following receipt of the data fragment.","All objects, features, and advantages of the present invention will become apparent in the following detailed written description.","In the following detailed description of exemplary embodiments of the invention, reference is made to the accompanying drawings, which form a part hereof, and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced.","In the following detailed description of exemplary embodiments of the invention, specific exemplary embodiments in which the invention may be practiced are described in sufficient detail to enable those skilled in the art to practice the invention, and it is to be understood that other embodiments may be utilized and that logical, architectural, programmatic, mechanical, electrical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims. In particular, although the preferred embodiment is described below with respect to a TCP\/IP network environment, it will be appreciated that the present invention is not limited to TCP\/IP implementations.","With reference now to the figures, and in particular with reference to , a data processing system network in which a preferred embodiment of the present invention may be implemented is depicted. Data processing system network  includes at least one server system  coupled to at least one client system  via at least one network such as the Internet . Data transfers between the server  and client  conform to the TCP\/IP specification, as well as File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), or some similar communications protocol. As will be appreciated, while only a single server  and single client system  are shown, data processing system network  may include any number of server and client systems (not shown) interconnected by one or more connections and networks, including Internet . For illustrative purposes, server  and client system  communicate using TCP\/IP, although the present invention is not limited as such, and that, in alternative embodiments, other suitable protocols may also be employed.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["103","105","200","205","210","215","220","225"]},"As shown in , TCP\/IP and similar protocols are utilized by a 4-layer communications architecture for the network comprising an application layer , a transport layer , a network layer , a link layer  and a physical layer . Each layer is responsible for handling various communications tasks, as follows.","Physical layer  generally transforms data into bits for communication between the various physical devices in the network. Examples of protocols employed in the physical layer may include, but are not limited to, protocols from the network interface card, such as an Ethernet card, token ring card, wireless network card, and the like. The Institute Of Electrical and Electronics Engineers (IEEE) has promulgated a variety of protocols that may be employed in the physical layer, protocols such as IEEE 802.3 Standard (Ethernet), IEEE 802.5 Standard (Token Ring), and IEEE 802.11 Standard (Wireless Ethernet).","Link layer  generally manages the data that is communicated over the network. Link layer  (also referred to as the data-link layer or the network interface layer) normally includes the device drivers and may include protocols such as Media Access Control (MAC), for example. Together, the physical and link layers handle all the hardware details of physically interfacing with the network media being used.","The network layer  (also referred to as the internet layer) handles the movement of packets of data around the network. For example, the network layer handles the routing of the various packets of data that are transferred over the network. The network layer in the TCP\/IP suite is comprised of several protocols, including IP (Internet Protocol), ICMP (Internet Control Message Protocol), and IGMP (Internet Group Management Protocol).","The transport layer  provides an interface between the network layer  and the application layer  that facilitates the transfer of data between two host computers. The transport layer is concerned with things such as dividing the data passed to it from the application into appropriately sized chunks for the network layer below, acknowledging received packets, setting timeouts to make certain the other end acknowledges packets that are sent, etc. In the TCP\/IP protocol suite there are two distinctly different transport protocols: TCP (Transmission Control Protocol) and UDP (User Datagram Protocol). TCP provides reliability services to ensure that data is properly transmitted between two hosts, including dropout detection and retransmission services. Conversely, UDP provides a much simpler service to the application layer by merely sending packets of data called datagrams from one host to the other, without providing any mechanism for guaranteeing that the data is properly transferred. When using UDP, the application layer must perform the reliability functionality.","The application layer  handles the details of the particular application. There are many common TCP\/IP applications that almost every implementation provides, including (1) Telnet for remote login; (2) FTP, the File Transfer Protocol; (3) SMTP, the Simple Mail Transfer Protocol, for electronic mail, (4) SNMP, the Simple Network Management Protocol, and (5) Post Office Protocol, v3 (POP3).","Networks such as the Internet are interconnected by routers, which each connecting two or more networks together. Typical routers comprise a special-purpose hardware box with input and output connections and dedicated hardware and\/or embedded software that allow many different types of physical networks to be connected, such as Ethernet, token ring, point-to-point links, etc.  shows an internet  comprising an Ethernet network  connected to a token ring network  by a router . Although  only shows two hosts in communication, any host on the Ethernet network can communicate with any host thereon, or with any host on the token ring network, and vice versa.","As shown in , the router  comprises a network layer module  (an IP module in this case), and appropriate network drivers for connecting to the host networks, namely an Ethernet driver  and a token ring driver . At the application layer, the network comprises an FTP client  and a FTP server ; at the transport layer, the network comprises a TCP client  and a TCP server ; and at the network layer, the network comprises an IP client  and a IP server . Most network applications are designed so that one end is the client and the other side is the server. The server provides some type of services to various clients, in this case, access to files on the server host. Each layer has one or more protocols for communicating with its peer at the same layer. These communication protocols include the FTP protocol  at the application layer, the TCP protocol  at the transport layer, the IP protocol  at the network layer, and the Ethernet protocol  and token ring protocol  at the link layer. It is common for the application layer to handle user processes, while the lower three layers (transport, network and link) are implemented in the kernel of the operating system, such as UNIX or Windows operating system. For example, the purpose of the network interface layer is to handle the details of the communication media (Ethernet, token ring, etc.), while the purpose of the application layer is to handle one specific user application (FTP, Telnet, etc.).","The application layer and the transport layer use end-to-end protocols (FTP protocol , TCP protocol ). The network layer provides a hop-to-hop protocol that is used on the two end systems and every intermediate system in between (for clarity only one intermediate system is shown here). For instance, the IP module  of the router  is connected to the two hosts by IP protocols . There are also link layer protocols that are specific to the various types of host networks that are connected to the router to handle communication between the networks and the router at the link layer. Thus, an Ethernet protocol  is used to handle communications between the Ethernet driver  in the router  and the Ethernet driver  of the hosts on the Ethernet network , while a token ring protocol  is used to handle communications between the token ring driver  of the router  and the token ring driver  of the hosts on the token ring network .","When an application sends data using TCP\/IP, the data is sent down a protocol stack, through each layer, until it is sent out as a stream of bits across the network. As shown in , each layer in the protocol stack  adds information to the data by prepending headers (and sometimes adding trailer information) to the data that it receives. For instance, at the application layer an application header  is prepended to user data  to form application data . At the transport layer a transport protocol header is prepended to the application data. In the case of  the transport layer is TCP, and therefore a TCP header  is prepended to the application data , thereby forming a TCP frame  that is sent to the network layer IP. The TCP header  comprises twenty bytes. Similarly, at the network layer, a network layer header is prepended to the transport layer data. In the case of TCP\/IP, an IP header  is prepended to the TCP frame  to form an IP datagram . The IP header  also comprises twenty bytes. Finally, at the link layer a media header such as Ethernet header  is added to the data received from the network layer to form a frame of data. In some instances, such as when the media is Ethernet, a media trailer is also appended to the end of the data. For instance, in  an Ethernet trailer  is appended to the Ethernet Header  and the IP datagram  to form an Ethernet frame . The Ethernet frame comprises the stream of bits that flow across the network that correspond to the original application message data. The numbers (14, 20, 20, 4) at the bottom of the headers are typical sizes of the headers in bytes, e.g., the Ethernet header  comprises 14 bytes, etc. The size of the frame will be limited by the maximum transmission unit (MTU) of the type of network being used to transfer the data packet. For example, the MTU of an Ethernet network is 1500 bytes. The network layer automatically performs fragmentation (breaking the datagram up into smaller pieces), so that each fragment is smaller than the MTU of the network.","With reference now back to , the operation of a dynamic IP packet reassembly timer as provided in a preferred embodiment of the present invention for use in a heterogeneous network environment is now described. In various embodiments of the present invention, the reassembly timer for discarding IP fragments is dynamically computed individually for each IP packet. These embodiments provide substantial improvements in avoiding data corruption due to IP-ID wraparound in IP network systems.","In a first embodiment, the IP packet sender (either server  or client ) specifies a new IP option  in the IP packet header  that specifies the reassembly timer value for the generated IP packet. In accordance with a preferred embodiment of the present invention, this new option is called the Reassembly Timer Option. The format for the Reassembly Timer Option for an IP header, in accordance with a preferred embodiment of the present invention, is shown in .","As seen in , Reassembly Timer Option  contains a one-byte field  specifying the option number of option  recognized in IP for the Reassembly Timer Option. Field  is a one-byte field specifying the payload length in bytes. In this example, the payload to the Reassembly Timer Option  is a numeric value of reassembly time, which is specified as a four-byte field. Field  indicates the reassembly time that should be assigned to the receiver's reassembly timer for this IP packet. The sender will determine the value for the Reassembly Time  based on a variety of factors related to the network, sender and receiver, and IP packet being sent.","In a preferred embodiment for setting the Reassembly Time , the sender has two considerations for setting the reassembly time. As a first consideration, the sender determines whether the destination address for the IP packet is on the same subnet as the sender. If the sender and receiver are on the same subnet, the sender can base the Reassembly Time  on the speed of the subnet connecting the sender and receiver. For example, on a gigabit Ethernet network that can generate 80,000 packets per second, the reassembly timer can be sent to half a second (0.5 sec), and for a 10 gigabit Ethernet network, the reassembly timer can be set to a tenth of this time (i.e. 50 milliseconds).","As a second consideration, the sender can review the round trip time (RTT) value computed by TCP for use as the re-transmission timer computation. By using this value, the sender can provide the receiver an estimate of an expected roundtrip time under normal network conditions, thereby suggesting that a fragment taking longer than the RTT should appropriately be re-transmitted. Using this algorithm, the sender will set the Reassembly Time  equal to the RTT or RTT plus some delta (for example, RTT*1.5). It should be understood that the sender may consider any number of factors and algorithms when setting the Reassembly Time , and that any one consideration alone or a combination of these or other considerations can be used.","In an alternative preferred embodiment of the present invention, the sender and receiver coordinate a synchronized timing algorithm to determine the appropriate reassembly timer. This preferred embodiment can be used in environments where the network protocol doesn't have an estimate of the round trip time or if the destination is not on the same subnet.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 7","b":["126","702","126","100","704","706","708","708","100"]},"The sender first synchronizes its time using Network Time Protocol and sends the current time as time stamp . Upon receiving a Time Stamp Reassembly Timer option  contained within options  of an IP header , the receiver computes the traversal time of that fragment by calculating the difference between the current time and the time stamp . The receiver then adds a \u201cdelta\u201d time period to the calculated traversal time to determine a reassembly timer for the fragments of the IP packet. For example, after computing a traversal time of the fragment, the receiver could add an amount of time equal to half of the traversal time to set the reassembly timer to one and a half times the calculated traversal time of the IP packet. This calculated reassembly timer would normally be used by the receiver if the received packet was the first fragment of an IP packet or if the calculated reassembly timer is determined to be larger than the currently used timer in the receiving system. This algorithm for setting the reassembly time could be used only on the first fragment of an IP packet or on every fragment, depending on the granularity desired. In a network environment where either the Reassembly Timer and the Time Stamp Reassembly Timer options are not available or received, the receiver can use a preprogrammed value for the reassembly timer.","With reference now to , there is shown a flow diagram of a process for generating an IP packet containing a reassembly time, in accordance with a preferred embodiment of the present invention. The process starts at step  when a sending server is instructed to generate an IP packet. At decision block , a determination by the sending server is made whether the IP destination is on the same subnet as the IP source address. If so, the subnet has a known, fast throughput, suggesting a very short retransmission timer should be set for the IP fragment. The process proceeds to step , where the sending server will generate an IP packet containing a Reassembly Timer option  in options  having a Reassembly Time  set at a very short time corresponding to the speed of the known subnet between the server and client. Thereafter, the server transmits the IP packet (or fragment) as shown at step  (the process ends).","Returning to decision block , if the IP destination is not on the same subnet as the sender, the process proceeds to decision block , where the sending server determines if the transport layer has calculated a round-trip time for data communication. For example, TCP calculates a RTT and includes this calculation in the TCP header. If so, the process proceeds to step , where the sending server generates the IP packet containing a Reassembly Timer option  set to the roundtrip time calculated for the transport layer. In TCP, is set to the RTT. Thereafter, the process ends at step , when the sending server transmits the IP packet.","Returning to decision block , if the transport layer has not calculated the round-trip time or if such a calculation is not supported by the transport layer, the process proceeds to step , where the sending server generates the IP packet containing the Time Stamp Reassembly Timer option . The sender sets the Time Stamp  with a numeric value representing the current time when the IP packet is generated. Thereafter, the process ends following the sending server transmitting the IP packet to the client, as seen at step . As will now be appreciated, each of these header options can be used individually or in combination.","With reference now to , there is shown a flow diagram of a process for setting the reassembly timer in response to receiving an IP fragment, in accordance with a preferred embodiment of the present invention. The process begins at step  when an IP fragment is received by a client on the network. The process proceeds to decision block , where the receiving client determines if the IP fragment contains a Reassembly Timer option . If so, the receiving client sets the reassembly time for the received IP fragment to a value set in the option's payload field , as seen at step . If the IP fragment does not contain a Reassembly Timer option , the process proceeds to decision block , where the receiving client determines if the IP fragment contains a Time Stamp Reassembly Timer option . If so, the receiver calculates the traversal time of the IP fragment by subtracting the time stamp  contained in the payload from the current time at the receiver, as seen at step . The receiver then sets the reassembly timer based on the calculated traversal time, as seen at step . Returning the decision block , if the time stamp reassembly option is not set, the process ends at block , where the receiving client sets the reassembly timer to a stored value predetermined by the user or calculated by the system as an optimal time for discarding IP fragments and requiring retransmission.","It will be appreciated by one of ordinary skill in the art that the method described above will typically be carried out in software running on one or more processors (not shown), and that the software may be provided as a computer program element carried on any suitable data carrier (also not shown) such as a magnetic or optical computer disc. The channels for the transmission of data likewise may include storage media of all descriptions as well as signal carrying media, such as wired or wireless signal media.","Accordingly, the present invention may suitably be embodied as a computer program product for use with a computer system. Such an implementation may comprise a series of computer readable instructions either fixed on a tangible medium, such as a computer readable medium, for example, diskette, CD-ROM, ROM, or hard disk, or transmittable to a computer system, via a modem or other interface device, over either a tangible medium, including but not limited to optical or analogue communications lines, or intangibly using wireless techniques, including but not limited to microwave, infrared or other transmission techniques. The series of computer readable instructions embodies all or part of the functionality previously described herein.","Those skilled in the art will appreciate that such computer readable instructions can be written in a number of programming languages for use with many computer architectures or operating systems. Further, such instructions may be stored using any memory technology, present or future, including but not limited to, semiconductor, magnetic, or optical, or transmitted using any communications technology, present or future, including but not limited to optical, infrared, or microwave. It is contemplated that such a computer program product may be distributed as a removable medium with accompanying printed or electronic documentation, for example, shrink-wrapped software, pre-loaded with a computer system, for example, on a system ROM or fixed disk, or distributed from a server or electronic bulletin board over a network, for example, the Internet or World Wide Web.","While the invention has been particularly shown and described with reference to a preferred embodiment, it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. For example, the present invention may be implemented using any combination of computer programming software, firmware or hardware. As a preparatory step to practicing the invention or constructing an apparatus according to the invention, the computer programming code (whether software or firmware) according to the invention will typically be stored in one or more machine readable storage mediums such as fixed (hard) drives, diskettes, optical disks, magnetic tape, semiconductor memories such as ROMs, PROMs, etc., thereby making an article of manufacture in accordance with the invention. The article of manufacture containing the computer programming code is used by either executing the code directly from the storage device, by copying the code from the storage device into another storage device such as a hard disk, RAM, etc., or by transmitting the code for remote execution. The method form of the invention may be practiced by combining one or more machine-readable storage devices containing the code according to the present invention with appropriate standard computer hardware to execute the code contained therein. An apparatus for practicing the invention could be one or more computers and storage systems containing or having network access to computer program(s) coded in accordance with the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["This invention is described in a preferred embodiment in the following description with reference to the drawings, in which like numbers represent the same or similar elements, as follows:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
