---
title: First and second manager components that communicate to initialize and/or shut down software components in an ordered sequence
abstract: An apparatus in one example comprises: a first manager component responsible for one or more first software components within one or more first executables of a distributed software application; and a second manager component responsible for one or more second software components within one or more second executables of the distributed software application. The first and second manager components communicate to initialize and/or shut down the one or more first software components and the one or more second software components in an ordered sequence based on one or more dependency relationships among two or more of: the one or more first software components; and/or the one or more second software components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08245190&OS=08245190&RS=08245190
owner: Alcatel Lucent
number: 08245190
owner_city: Paris
owner_country: FR
publication_date: 20040614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application contains subject matter that is related to the subject matter of the following applications, which are assigned to the same assignee as this application. The below-listed applications are hereby incorporated herein by reference in their entireties.\n\n","The invention relates generally to distributed software applications and more particularly to management of distributed software applications.","In known distributed software applications, software components are distributed among a plurality of executables (i.e., software capsules or software entities). Each of the executables contains one or more software components that perform some portion of the functionality of the distributed software application. The executables and software components of the distributed software application may all run on a single processor or may be divided up and run across a plurality of processors.","Upon startup of the distributed software application, each of the executables and software components are started. The distributed software application may have dependency relationships between the executables and\/or software components of the distributed software application. As one shortcoming, without a proper startup sequence, the distributed software application may fail to completely achieve an active state of operation.","During operation of the distributed software application, state information is created, resources are allocated, and\/or databases are updated. If the distributed software application shuts down without a preplanned shutdown sequence, then the distributed software application may be left in an inconsistent state. As one shortcoming, without a proper shutdown sequence, the distributed software application may not properly maintain the state information, release the allocated resources, and\/or update the databases.","To handle dependency relationships between the executables and software components of the distributed software application, software developers need to write special software in each of the software components to handle startup and\/or shutdown of the distributed software application. As one shortcoming, the software developers must write extra software for each software component to control the startup and\/or shutdown. The extra software may need to be customized for a specific software application or system. Creating software for each software component to control startup and\/or shutdown increases the amount of effort required by the software developers to create the software components.","Thus a need exists to initialize a distributed software application in a manner that achieves an active state of operation for the distributed software application. A further need exists to shut down a distributed software application in a manner that maintains state information, releases resources, and\/or leaves the distributed software application in a consistent state. Yet another need exists to alleviate software components of the responsibility of controlling startup and\/or shutdown.","One or more distributed software applications are divided up for control by a plurality of manager components. A first manager component is responsible for one or more first software components of the distributed software application. A second manager component is responsible for one or more second software components. The first and second manager components communicate to initialize and\/or shutdown the software components according to dependency relationships between the software components.","In one embodiment, there is provided an apparatus comprising: a first manager component responsible for one or more first software components within one or more first executables of a distributed software application; and a second manager component responsible for one or more second software components within one or more second executables of the distributed software application. The first and second manager components communicate to initialize the one or more first software components and the one or more second software components in an ordered sequence based on one or more dependency relationships among two or more of: the one or more first software components; and\/or the one or more second software components.","In another embodiment, there is provided a method for: performing, by a first manager component, one or more management operations on a first software component within a first executable of a distributed software application; performing, by a second manager component, one or more management operations on a second software component within a second executable of the distributed software application, wherein the first software component comprises a dependency relationship on the second software component; and exchanging one or more initialization progress messages between the first and second manager components to cause the second manager component to initialize the second software component before the first manager component initializes the first software component based on the dependency relationship.","In yet another embodiment, there is provided an apparatus comprising a high availability infrastructure in communication with a distributed software application that comprises a plurality of software components within a plurality of executables. The high availability infrastructure comprises a first manager component responsible for one or more first software components of the plurality of software components. The high availability infrastructure comprises a second manager component responsible for one or more second software components of the plurality of software components. The first and second manager components exchange initialization progress messages to coordinate an initialization of the one or more first software components and the one or more second software components in an ordered sequence based on one or more dependency relationships among the plurality of software components.","In still another embodiment, there is provided an apparatus comprising: a first manager component responsible for a first software component within a first executable of a distributed software application; and a second manager component responsible for a second software component within a second executable of the distributed software application. The first software component comprises a dependency relationship on the second software component. Based on the dependency relationship, the second manager component waits for an indication from the first manager component that the first software component has been shut down before the second manager component shuts down the second software component.","In still yet another embodiment, there is provided a method for: performing, by a first manager component, one or more management operations on a first software component within a first executable of a distributed software application; performing, by a second manager component, one or more management operations on a second software component within a second executable of the distributed software application, wherein the first software component comprises a dependency relationship on the second software component; and exchanging one or more shutdown progress messages between the first and second manager components to cause the first manager component to shut down the first software component before the second manager component shuts down the second software component based on the dependency relationship.","In another embodiment, there is provided an apparatus comprising a high availability infrastructure in communication with a distributed software application that comprises a plurality of software components within a plurality of executables. The high availability infrastructure comprises a first manager component responsible for one or more first software components of the plurality of software components. The high availability infrastructure comprises a second manager component responsible for one or more second software components of the plurality of software components. The first and second manager components exchange shutdown progress messages to coordinate a shutdown of the one or more first software components and the one or more second software components in an ordered sequence based on one or more dependency relationships among the plurality of software components.","Turning to , an apparatus  in one example comprises a distributed software application  and a management infrastructure . The management infrastructure  performs one or more management operations on the distributed software application . The management infrastructure  comprises a plurality of manager components  and . For example, the manager components  and  may be responsible for one or more of starting, stopping, initializing, and monitoring the distributed software application , detecting failures of the distributed software application , recovering the distributed software application , propagating state changes about distributed software application , and the like.","The distributed software application  may represent a single software application or a plurality of software applications. For example, the distributed software application  may comprise a first functionality (i.e., a first software application) and a second functionality (i.e., a second software application). The manager component  may control initialization and\/or shutdown of the first functionality and the manager component  may control initialization and\/or shutdown of the second functionality.","The distributed software application  represents a software application divided among a plurality of executables (i.e., software capsules or software entities). For example, the distributed software application  comprises a plurality of executables  and . The distributed software application  may provide any functionality for a computer system. The distributed software application  in one example comprises a call processing software application. For example, the distributed software application  sets up and\/or tears down telecommunication sessions in a telecommunication network.","The distributed software application  may run on a single central processing unit (\u201cCPU\u201d) or may be divided between multiple CPUs. For example, the executable  may run on processor  and the executable  may run on processor . The processor  comprises an executable manager  and the processor  comprises an executable manager . The executable managers  and  in one example are part of the management infrastructure .","The executable managers  and  monitor executables of the distributed software application  that run on the processors  and , such as the executables  and . For example, the executable managers  and  monitor communication channels and\/or diagnostics on behalf of the executables  and . Should one or more of the executables  and  fail, the respective one of the executable managers  and  informs the respective one of the manager components  and  of the failure. Multiple executable managers may report to a same manager component. For example, the manager component  may control a part of the distributed software application  that executes on multiple processors  and . Each of the executable managers  and  of the multiple processors  and  may send notifications to the manager component .","Each of the executable managers  and  comprise a communication interface  for communication with one of the manager components  and . The executable managers  and  receive instruction from the manager components  and . For example, the executable managers  and  may receive instructions at the communication interface  from the manager components  and . The executable manager  is encapsulated in an executable  running on the processor  and the executable manager  is encapsulated in an executable  running on the processor .","The distributed software application  in one example is divided into a plurality of domains. Each domain comprises a manager component. For example, the manager component  is responsible for the portion of the distributed software application  within domain  and the manager component  is responsible for the portion of the distributed software application  within domain . The domain  in one example comprises the manager component , the executable , the processor , and the executable manager . The domain  in one example comprises the manager component , the executable , the processor , and the executable manager . Each of the domains  and  may also comprise additional executables (e.g., analogous to the executables  and ) of the distributed software application  and additional processors (e.g., analogous to the processors  and ).","In one embodiment, the domains  and  represent a separation of a single functionality. For example, the distributed software application  may comprise a call processing functionality. The domain  comprises one or more first portions of the call processing functionality and the domain  comprises one or more second portions of the call processing functionality. For example, the executable  performs a first portion of the call processing functionality and the executable  performs a second portion of the call processing functionality.","In another embodiment, the domains  and  represent a separation between different but cooperating functionalities. For example, the distributed software application  may comprise call processing functionality together with base station functionality. The domain  may comprise the call processing functionality and the domain  may comprise the base station functionality. For example, the executable  performs the call processing functionality and the executable  performs the base station functionality.","The executables  and  comprise one or more software components ,  and . For example, the executable  encapsulates the software components  and  and the executable  encapsulates the software component . Within each of the executables  and  may be tens, hundreds, or even thousands of other software components (e.g., analogous to the software components ,  and ).","The software components ,  and  represent software sub-entities of the executables  and . For example, the software components ,  and  represent logical blocks of software of the executables  and . The software components  and  in one example are developed independently and encapsulated together within the executable . The software components ,  and  each perform some portion of the overall functionality of the distributed software application . The software components ,  and  work together to make the distributed software application  achieve the desired operation.","Each of the software components ,  and  comprise application software , management support software , a management support software communication interface , and one or more application software communication interfaces . The software components ,  and  employ the management support software communication interfaces  to receive communications from the manager component . The software components ,  and  employ the application software communication interfaces  to receive communications from other software components of the software components ,  and . An application programming interface (\u201cAPI\u201d)  communicatively couples the application software  with the management support software  in each of the software components ,  and . The application software  and the management support software  can exchange information through the application programming interface .","The application software  is the portion of the software components ,  and  that performs some portion of the overall functionality of the distributed software application . The management support software  is the portion of the software components ,  and  that cooperates with the manager components  and  to perform management operations on the software components ,  and . The application software  is part of the distributed software application  and the management support software  is part of the management infrastructure .","An application developer creates the application software  of the software components ,  and  to achieve the designated functionality of the software components ,  and . For example, the application developer creates the application software  of the software components ,  and  to achieve the overall functionality of the distributed software application .","To alleviate the application developers from being required to write software into each of the software components ,  and  for the management operations, a code generator in one example automatically generates the management support software . The manager components  and , the executable managers  and , and the management support software  cooperate to perform the management operations for the software components ,  and .","The manager components  and  employ information from one or more configuration files  and  during initialization and\/or shutdown of the distributed software application . The configuration files  and  are created to store connection information and\/or architecture information of the distributed software application . The configuration files  and  in one example provide the manager components  and  with information about the set of executables  and , the number of each type of the executables  and , the mapping of the software components ,  and  to the executables  and , the types of the software components ,  and , and the number of each type of the software components ,  and  in each of the executables  and . The configuration files  and  may be substantially identical or may be customized for each of the manager domains  and . The configuration files  and  comprise enough information to enable the manager components  and  to work together after discovering the existence of the other of the manager components  and .","The configuration files  and  in one example also indicate one or more dependency relationships among the software components ,  and  and\/or the executables  and . The manager components  and  employ a list of the dependency relationships to establish an ordered sequence for initialization and an ordered sequence for shutdown. The ordered sequence for shutdown in one example is substantially the reverse of the ordered sequence for initialization.","The manager component  initializes and\/or shuts down the software components ,  and  in the ordered sequence based on the dependency relationships among the software components ,  and . For example, if the software component  of the domain  is dependent on the software component  of the domain , then the manager component  initializes the software component  before the manager component  initializes the software component  as part of the ordered sequence. After initialization of the software component, the manager component  sends a notification to the manager component  to alert the manager component  of the initialization. If the software components  and  are free from any dependency relationships, then the manager components  and  may initialize and\/or shut down the software components  and  in parallel as part of the initialization or shutdown procedure.","To create the management support software  of the software components  and  in the domain , the configuration file  in one example is input into the code generator. To create the management support software  of the software component  in the domain , the configuration file  in one example is input into the code generator. The code generator creates code for the management support software . The code for the management support software  is compiled and linked with the application software  in the software components ,  and . The management support software  may be different for each of the software components ,  and , as will be appreciated by those skilled in the art.","The manager components  and  each comprise a communication interface  for receiving incoming communications. The communication interface  is employable for receiving the configuration files  and  for use with the distributed software application . The configuration file  in one example is associated with the domain  and the configuration file  is associated with the domain . The manager components  and  may employ other means to receive the configuration files  and , such as reading the configuration files  and  directly from a disk or file system. The communication interface  may also receive communications from the executable managers  and , as well as communications from the software components ,  and .","The manager components  and  may also use the communication interfaces  for receipt of external system information from an external environment . In one example, the external environment  represents other components of the system that are in communication with the manager components  and . In another example, the external environment  represents another management infrastructure in communication with the management infrastructure .","The manager components  and  are encapsulated with zero or more other software components in executables  and . The executable  that contains the manager component  is run on the processor  or an additional processor of the domain . The executable  that contains the manager component  is run on the processor  or an additional processor of the domain . The manager components  and  in one example are active and the domains  and  may have one or more standby manager components (e.g., analogous to the manager components  and ). If the manager component  fails, then one of the standby manager components of the domain  becomes active and gains managerial control of the domain .","The manager components  and  control initialization and\/or shutdown of the distributed software application  on behalf of the distributed software application . One advantage to the manager components  and  controlling initialization and\/or shutdown of the distributed software application  is that the manager components  and  alleviate application developers from being required to write software into each of the software components ,  and  to manage initialization and\/or shutdown. The manager components  and  control initialization and\/or shutdown of the software components ,  and  on behalf of the software components ,  and . For example, the manager components  and  interface with the management support software  coupled with the application software  in the software components ,  and  to sequence initialization and\/or shutdown of the software components ,  and . Therefore, the manager components  and  save the application developers the effort of creating software to sequence initialization and\/or shutdown.","The management infrastructure  provides initialization and\/or shutdown management functionality as a reusable asset for distributed software applications. The management infrastructure  in one example comprises a portion of a high availability (\u201cHA\u201d) infrastructure. The manager components  and  comprise high availability manager components operating in a high availability infrastructure. For example, the high availability infrastructure controls initialization and\/or shutdown of the software components ,  and  in an ordered sequence for the distributed software application . The high availability infrastructure is able to continue processing while switching between active and standby components in the high availability infrastructure.","Turning to , an illustrative description of one exemplary operation of the apparatus  is now presented, for explanatory purposes. The manager components  and  of the management infrastructure  in one example comprise high availability manager components operating in a high availability infrastructure. To begin operation of the apparatus , the distributed software application  is configured for control by the manager components  and , and the manager components  and  coordinate the initialization of the distributed software application . Exemplary logic  serves to allow the manager components  and  to employ an ordered sequence to initialize the distributed software application . The logic  employs one or more steps, for example, STEPS , , , ,  and . The manager components  and  perform the STEPS , , , ,  and  of .","At STEP , the manager component  in one example imports the configuration file  and the manager component  imports the configuration file  to obtain connection information of the distributed software application . The configuration files  and  provide information to the manager components  and  to allow the manager components  and  to control initialization of the distributed software application .","One or more of the manager components  and  in one example receive an indication to begin initialization of the distributed software application . For example, the manager component  receives a message from the external environment  to initialize the distributed software application . At STEP , to begin initialization of the distributed software application , the manager components  and  set up a communication session for exchange of connection information and initialization progress messages. For example, the manager component  receives an indication of a need for communication with the manager component . The configuration file  or the external environment  in one example indicates to the manager component  the need for a communication session with the manager component .","To initiate a setup of the communication session, the manager component  sends a setup message to the manager component . The manager component  creates an identifier of the communication session and passes the identifier to the manager component  in the setup message. To agree to join the communication session, the manager component  sends a confirmation message to the manager component . The manager component  sends an acknowledgement message to the manager component  in response to the confirmation message to complete the transition from the proposed communication session to an active communication session.","The manager components  and  employ the communication session to acquire information from the other one of the domains  and . For example, the manager component  may request connection information of software component  from the manager component . The manager components  and  also employ the communication session to coordinate initialization of the distributed software application  across the domains  and . Once the communication session is setup, the manager component  and  exchange event notifications as part of the initialization of the distributed software application . The manager component  is responsible for coordinating any initialization activity within the domain  and the manager component  is responsible for coordinating any initialization activity within the domain . The manager components  and  communicate to coordinate any initialization activity that crosses between the domains  and .","The manager components  and  in one example build timeouts into the initialization progress messages. Therefore, if the manager component  fails to receive a response to an initialization progress message from the manager component  within a predefined time limit, then the manager component  sends another initialization progress message to the manager component . If the manager component  is again unable to get a response from the manager component , then the manager component  may determine that the manager component  is unavailable. The manager component  may then undo one or more portions of the initialization of the distributed software application  to get back to a known state of last successful communication with the manager component . For example, the manager component  may have set up a communication channel between the software components  and . After setup of the communication channel, if the manager component  is unable to get a confirmation response from the manager component , then the manager component  may tear down the communication channel and retry to create the communication channel again once communication is reestablished with the manager component .","To initialize the distributed software application , the manager components  and  initialize each of the software components ,  and  and each of the executables  and . Once the manager components  and  have received and\/or obtained the configuration files  and , the manager components  and  determine which processors are available for the distributed software application . For example, the manager component  may obtain a list of processors from the configuration file  and the manager component  obtains a list of processors from the configuration file . Once the manager components  and  obtain the list of processors, the manager components  and  assign the executables  and  of the distributed software application  to the available processors. For example, the manager component  assigns the executable  to the processor  and the manager component  assigns the executable  to the processor . The manager components  and  then start the executables  and  on the processors  and  through employment of the executable managers  and . The manager component  sends a message to the executable manager  to start the executable  and the manager component  sends a message to the executable manager  to start the executable . The messages comprise one or more parameters for execution of the executables  and .","The manager components  and  employ the configuration files  and  to initialize the distributed software application . The manager components  and  in one example obtain the list of dependency relationships from the configuration files  and . Exemplary conditions for a dependency relationship comprise shared state information and communication channels between software components. In one example, before a communication channel between the software component  and the software component  can be established, both the software component  and the software component  must be created. In another example, before a shared value for the software component  can be retrieved from the software component , the software component  must have the shared value set, as will be appreciated by those skilled in the art.","The list of dependency relationships in one example indicates to the manager components  and  that the software component  comprises a dependency relationship on the software component  and the software component  is free from any dependency relationship. Therefore, the manager components  and  must initialize the software component  before initializing the software component . The manager component  may initialize the software component  independently of the software components  and . The manager components  and  exchange initialization progress messages to alert the other one of the manager components  and  of the current initialization state of the distributed software application . For example, the manager component  waits for an indication from the manager component  that the software component  has been initialized before the manager component  initializes the software component .","Initialization of the software components ,  and  within the executables  and  in one example comprises creating instances of the software components ,  and  in memory of the processors  and , establishing communication channels between the software components ,  and , and setting the initialization values of the software components ,  and .","At STEP , the manager components  and  create instances of the software components ,  and . The manager components  and  in one example create instances of the software components ,  and  in parallel. At STEP , once the software components ,  and  have been created, the manager components  and  may create communication channels between the software components ,  and . The manager component  in one example receives an indication of a need for a communication channel between the software component  and the software component . Before the manager component  may set up the communication channel, the manager component  requires connection information of the software component . The manager component  sends a message to the manager component  to request the connection information of the software component .","The manager components  may decide at runtime which portion of the requested connection information to provide to the manager component  and which portion of the requested connection information  to restrict from the manager component . In one example, the manager component  accepts the request for connection information and employs the communication session to send the connection information to the manager component . In another example, the manager component  denies the request for the connection information. For example, the software component  may be classified as a restricted access software component or the software component  may be overloaded at the time of the information request. If the manager component  denies the request for connection information, the manager component  may choose to send connection information for an alternative software component analogous to the software component .","Upon receipt of the connection information of the software component  (or an analogous software component), the manager component  sends one or more portions of the connection information to the management support software  of the software component  to instruct the management support software  to set up a communication channel between the software component  and the software component . The manager component  sends a message to the management support software  that comprises identification and\/or location information of the software component  to instruct the management support software  to set up the communication channel. For example, the manager component  may send the communication handle of the software component  to the management support software . The message also indicates which one of the application software communication interfaces  of the software component  is the target for the communication channel.","Once the management support software  has set up the communication channel, the management support software  employs the application programming interface  of the software component  to notify the application software  of the existence of the communication channel. If the management support software  is able to set up the communication channel, the management support software  sends an indication to the manager component  that the setup of communication channel was successful. The manager component  sends to the manager component  an indication of the successful setup of the communication channel. The manager component  sends an acknowledgement message to the manager component  to confirm receipt of the indication of the successful setup.","If the management support software  is not able to set up the communication channel, the management support software  sends an indication to the manager component  that the setup of communication channel failed. The manager component  may make another attempt to set up the communication channel. However, if the manager component  fails to set up the communication channel, the manager component  may send a failure indication to the manager component .","In one example, the manager component  knows exactly which software component from the domain  is needed. In another example, the manager component  knows which type of software component from the domain  is needed. For example, the manager component  receives an indication of a need for connection information of a software component of a specific software component type. The manager component  employs the communication session with the manager component  to request connection information of a specific software component type from the manager component . The manager component  determines which one or more of the software components of the domain  are of the specific software component type and are available for access by the manager component . The manager component  chooses one of the software components of the specific software component type and passes connection information of the chosen software component to the manager component . The manager component  may then use the connection information to set up a communication channel to the software component chosen by the manager component .","At STEP , once the communication channels between the software components ,  and  have been created, the manager components  and  may request for the software components ,  and  to initialize according to an ordered sequence based on the dependency relationships between the software components ,  and . In one example, the software component  comprises a dependency relationship with the software component  and the software component . For example, the software component  is dependent on the software component  and the software component  is dependent on the software component . The manager components  and  determine the ordered sequence for initialization based on the dependency relationships. For example, the ordered sequence comprises the initialization of the software component , followed by the initialization of the software component , followed by the initialization of the software component .","To initialize the software component , the manager component  sends an initialization request to the software component . The software component  attempts to initialize and sends either an initialization success message or an initialization failure message to the manager component . Upon initialization of a software component (e.g., the software component ) within the domain , the manager component  sends an initialization progress message to alert the manager component  of the initialization. The manager component  responds to the manager component  with a message that confirms receipt of the initialization progress message.","The manager component  may be waiting for the initialization progress message before continuing with initialization of the domain . For example, the software components  and  of the domain  depend on the software component  within the domain . Upon receipt of the initialization progress message, the manager component  may initialize the software component  of the domain  followed by the initialization of the software component . The manager components  and  exchange initialization progress messages and responses for initialization of the software components  and  analogously to the initialization of the software component , as described herein.","In another example, the software components  and  comprise dependency relationships on the software component . However, the software component  is free from any dependency relationship on the software component . Therefore, upon receipt of the indication of the initialization of the software component , the manager component  may initialize the software components  and  concurrently, for example, in parallel as part of the ordered sequence for initialization. Parallel initialization of the software components  and  promotes a reduction in time needed for initialization of the distributed software application , as will be appreciated by those skilled in the art. The manager components  and  in one example build timeouts into the initialization progress messages to handle delivery failure or component failure, as described herein.","At STEP , once the software components ,  and  set initial values for the software components ,  and , initialization of the software components ,  and  in one example is complete. Upon completion of the initialization of the distributed software application , one or more of the manager components  and  send an initialization success message to the other one of the manager components  and . The manager component may then distribute the initialization success message to the software components ,  and  within the respective domains  and .","After initialization of the software components , , and , the manager components  and  instruct the executable managers  and  to monitor the software components , , and . The executable managers  and  monitor the software components , , and  for correct operation. Upon an error and\/or fault related to one or more of the software components , , and\/or , the executable manager  or  notifies its respective manager component  or  of the error and\/or fault. In one example, the software component  experiences a failure. The executable manager  detects the failure and sends a failure message to the manager component  to alert the manager component  of the failure. The manager component  then sends an indication of the failure to the manager component . Both of the manager components  and  take any appropriate action within their respective domains  and  to recover from the failure and may notify each other of the actions as they progress, as appropriate, as will be appreciated by those skilled in the art.","Upon recovery of the software component , the manager component  sends a recovery notification to the manager component . The manager component  responds with an acknowledgement to the manager component  to confirm receipt of the recovery notification. The manager components  and  take any appropriate action within their respective domains  and  to regain full active operation of the distributed software application , as will be appreciated by those skilled in the art.","Turning to , an illustrative description of one exemplary operation of the apparatus  is now presented, for explanatory purposes. The manager components  and  of the management infrastructure  in one example comprise high availability manager components operating in a high availability infrastructure. Exemplary logic  serves to allow the manager components  and  to employ an ordered sequence to shut down the distributed software application . The logic  employs one or more steps, for example, STEPS , , , ,  and . The manager components  and  perform the STEPS , , , ,  and  of .","At STEP , the manager component  in one example imports the configuration file  and the manager component  imports the configuration file  to obtain connection information of the distributed software application . The configuration files  and  provide information to the manager components  and  to allow the manager components  and  to control shutdown of the distributed software application .","To shut down the distributed software application , the manager components  and  shut down the software components ,  and  in an ordered sequence based on the dependency relationships among the software components ,  and  and\/or among the executables  and . Shutting down the distributed software application  in the ordered sequence serves to save a record of state information, release allocated resources, and properly update databases. For example, the manger components  and  save the state information into a file system to maintain a record of operation of the distributed software application , so the state information may be retrieved at a later time. The domains  and  may share a file system or each of the domains  and  may have separate file systems. The manger components  and  serve to shut down the executables  and  according to the ordered sequence. The manager components  and  also serve to shut down the software components ,  and  running within the executables  and  according to the ordered sequence.","One or more of the manager components  and  in one example receive an indication to begin shutdown of the distributed software application . For example, the manager component  receives a message from the external environment  to shut down the distributed software application . At STEP , to begin shutdown of the distributed software application , the manager components  and  establish a communication session for exchange of shutdown progress messages. The manager components  and  may reuse the communication session that was set up for initialization of the distributed software application  or may reestablish another communication session.","The manager components  and  employ the communication session to acquire information from the other one of the domains  and . For example, the manager component  may request connection information of software component  from the manager component . The manager components  and  also employ the communication session to coordinate shutdown of the distributed software application  across the domains  and . Once the communication session is setup, the manager component  and  exchange event notifications as part of the shutdown of the distributed software application . The manager component  is responsible for coordinating any shutdown activity within the domain  and the manager component  is responsible for coordinating any shutdown activity within the domain . The manager components  and  communicate to coordinate any shutdown activity that crosses between the domains  and . For example, the manager components  and  exchange shutdown progress messages to coordinate the shutdown activity across the domains  and .","The manager components  and  in one example build timeouts into the shutdown progress messages. Therefore, if the manager component  fails to receive a response to a shutdown progress message from the manager component  within a predefined time limit, then the manager component  sends another shutdown progress message to the manager component . If the manager component  is again unable to get a response from the manager component , then the manager component  may determine that the manager component  is unavailable and complete the shutdown procedure assuming that the domain  managed by the manager component  is unavailable. In another example, the manager component  pauses the shutdown procedure until the manager component  is able to establish another communication session with the manager component , then the manager components  and  continue with the shutdown procedure.","To shut down the distributed software application , the manager components  and  shut down each of the software components ,  and  and each of the executables  and . Once the manager components  and  have received and\/or obtained the configuration files  and , the manager components  and  employ the list of the dependency relationships to establish an ordered sequence for shutdown. Exemplary conditions for a dependency relationship comprise shared state information and communication channels between software components.","The list of dependency relationships in one example indicates to the manager components  and  that the software component  comprises a dependency relationship on the software component  and the software component  is free from any dependency relationship. Therefore, the manager components  and  agree to shut down the software component  before shutting down the software component . The manager component  may shut down the software component  independently of the software components  and . The manager components  and  exchange shutdown progress messages to notify the other one of the manager components  and  of the current shutdown state of the distributed software application . For example, the manager component  waits for an indication from the manager component  that the software component  has been shut down before the manager component  shuts down the software component .","Shutdown of the software components ,  and  within the executables  and  comprises deactivation of each of the software components ,  and , tearing down communication channels between the software components ,  and , followed by termination of each of the software components ,  and .","At STEP , the manager components  and  cooperate to deactivate the software components ,  and  according to the ordered sequence. In one example, the software component  comprises a dependency relationship with the software component  and the software component . For example, the software component  is dependent on the software component  and the software component  is dependent on the software component . The manager components  and  determine the ordered sequence based on the dependency relationships. For example, the ordered sequence comprises the deactivation of the software component , followed by the deactivation of the software component , followed by the deactivation of the software component .","To deactivate the software component , the manager component  sends a deactivation message to the management support software communication interface  of the software components . The deactivation message indicates to the software component  to wrap up any current tasks and to not take on any new tasks. The manager component  may also instruct the active software components of the software component  and the software component  (e.g., via the manager component ) to not send new tasks to the software component . Before proceeding, the manager component  waits for a confirmation message from the software component  to confirm the deactivation of the software component .","Upon deactivation of the software component  and receipt of the confirmation message, the manager component  sends a shutdown progress message to notify the manager component  of the deactivation. The manager component  responds to the manager component  with a message that confirms receipt of the shutdown progress message. The manager component  may be waiting for the shutdown progress message before continuing with shutdown of the domain . For example, the manager component  is unable to deactivate the software component  of the domain  until the manager component  deactivates the software components  and  within the domain .","After deactivation of the software component , the manager component  is able to deactivate the software component  following the ordered sequence. The manager component  deactivates the software component  and notifies the manager component  of the deactivation analogously to the deactivation of the software component , described herein. Upon receipt of the shutdown progress message that indicates deactivation of the software component , the manager component  is able to deactivate the software component . The manager components  and  exchange initialization progress messages and responses for the deactivation of the software component  analogously to the deactivation of the software component , described herein. The manager components  and  in one example build timeouts into the shutdown progress messages to handle delivery failure or component failure, as described herein.","In another example, the software component  comprises a dependency relationship on the software components  and . However, the software component  is free from any dependency relationship on the software component . Therefore, upon receipt of the indication of the deactivation of the software component , the manager component  may deactivate the software components  and  concurrently, for example, in parallel as part of the ordered sequence. Parallel creation of the software components  and  promotes a reduction in time needed for shutdown of the distributed software application , as will be appreciated by those skilled in the art.","Once the manager components  and  have deactivated each of the software components ,  and  according to the ordered sequence, the manager components  and  wait for the software components ,  and  to complete processing of any remaining tasks. After the software components ,  and  completely deactivate and are no longer performing tasks for the distributed software application , the manager components  and  may tear down the communication channels between the software components ,  and  and then terminate each of the software components ,  and .","At STEP , before terminating the executables  and  and the software components ,  and  within the executables  and , the manager component  instruct the executable managers  and  to stop monitoring the executables  and . For example, the manager component  sends a message to the communication interface  of the executable manager  to instruct the executable manager  to stop monitoring the executable . The manager component  sends a message to the communication interface  of the executable manager  to instruct the executable manager  to stop monitoring the executable .","After the executable managers  and  stop monitoring the executables  and , the manager components  and  may begin terminating the software components ,  and  according to the ordered sequence. At STEP , the manager components  and  send termination messages to the management support software communication interfaces  of the software components ,  and . The termination messages instruct the software components ,  and  to stop running. In one embodiment, the manager components  and  terminate the software components ,  and  without following the ordered sequence. In another embodiment, the manager components  and  terminate the software components ,  and  according to the ordered sequence. For example, the manager components  and  exchange shutdown progress messages and responses for termination of the software components ,  and  analogously to the deactivation of the software components ,  and , described herein.","At STEP , once the manager components  and  terminate each of the software components ,  and , the manager components  and  instruct the executable managers  and  to shut down the executables  and . For example, the manager component  sends a message to the communication interface  of the executable manager  to instruct the executable manager  to shut down the executable . The manager component  sends a message to the communication interface  of the executable manager  to instruct the executable manager  to shut down the executable . Upon shutdown of the executables  and , the executable managers  and  each send confirmation messages to the manager components  and  to indicate a successful shutdown of the executables  and . Receipt of the confirmation messages from the executable managers  and  indicates to the manager components  and  that the distributed software application  is fully shutdown.","Upon completion of the shutdown of the distributed software application , one or more of the manager components  and  send a shutdown success message to the other one of the manager components  and . After shutdown, the manager components  and  may close the communication session or leave the communication session open for coordination of other activities between the domains  and .","The apparatus  in one example comprises a plurality of components such as one or more of electronic components, hardware components, and\/or computer software components. A number of such components can be combined or divided in the apparatus . An exemplary component of the apparatus  employs and\/or comprises a set and\/or series of computer instructions written in or implemented with any of a number of programming languages, as will be appreciated by those skilled in the art. The apparatus  in one example comprises any (e.g., horizontal, oblique, or vertical) orientation, with the description and figures herein illustrating one exemplary orientation of the apparatus , for explanatory purposes.","The apparatus  in one example employs one or more computer-readable signal-bearing media. The computer-readable signal-bearing media store software, firmware and\/or assembly language for performing one or more portions of one or more embodiments of the invention. Examples of a computer-readable signal-bearing medium for the apparatus  comprise the recordable data storage medium of the manager components  and . The computer-readable signal-bearing medium for the apparatus  in one example comprise one or more of a magnetic, electrical, optical, biological, and atomic data storage medium. For example, the computer-readable signal-bearing medium comprises floppy disks, magnetic tapes, CD-ROMs, DVD-ROMs, hard disk drives, and electronic memory. In another example, the computer-readable signal-bearing medium comprises a modulated carrier signal transmitted over a network comprising or coupled with the apparatus , for instance, one or more of a telephone network, a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), the Internet, and a wireless network. The steps or operations described herein are just exemplary. There may be many variations to these steps or operations without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted, or modified.","Although exemplary implementations of the invention have been depicted and described in detail herein, it will be apparent to those skilled in the relevant art that various modifications, additions, substitutions, and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["Features of exemplary implementations of the invention will become apparent from the description, the claims, and the accompanying drawings in which:",{"@attributes":{"id":"p-0017","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0026"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0027"},"figref":["FIG. 3","FIG. 1"]}]},"DETDESC":[{},{}]}
