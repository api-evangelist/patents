---
title: Virtual partition for recording and restoring computer data files
abstract: Some computer operating systems do not permit application programs to perform certain tasks. If there is a desire to perform a forbidden task, a virtual partition () is created () in a storage device (), such as a hard disk drive, associated with the computer system (). The virtual partition () is stored as a file within the file system of the storage device (). Operating system files () are installed in the virtual partition (), and the storage device () is configured () to boot the computer system () using the operating system in the virtual partition. When the task is complete, the computer system () is configured to boot using the operating system other than the one in the virtual partition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07032107&OS=07032107&RS=07032107
owner: Symantec Corporation
number: 07032107
owner_city: Cupertino
owner_country: US
publication_date: 20021030
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DISCLOSURE OF INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","This invention pertains in general to storage devices for computer systems and pertains in particular to software tools for accessing hard disk drives and other types of media.","2. Background Art","Modem computer systems, such as personal computer systems, typically include a large persistent storage device, such as a hard disk drive (\u201chard drive\u201d). A typical hard drive might hold, for example, 120 or 200 gigabytes (GB) of data. The hard drive is often formatted into one or more logical divisions called \u201cpartitions.\u201d For example, a 120 GB hard drive can be logically divided into two 60 GB partitions. Each partition can hold executable files and other data utilized in the operation of the computer system.","An operating system is typically stored on the hard drive and executed by the computer system. The operating system controls the operation of the computer system and, as part of this task, controls access to the hard drive. Modem operating systems do not provide other applications executing on the computer system with direct access to the hard drive. Instead, the applications must use an application programming interface (API) provided by the operating system to perform tasks such as accessing files.","Among other things, the API enforces a set of policies designed to protect the integrity of the data on the hard drive. Forcing application programs to use the API also allows the operating system to perform background tasks such as journaling, caching, and de-fragmenting the drive. However, the benefits produced by enforcing disk access through the API come at the expense of power and flexibility. Applications executing on the computer system may be prevented by the API from obtaining exclusive access to the disk or modifying files protected by the operating system, and thereby prevented from performing legitimate tasks.","One technique for avoiding the limitations imposed by the API is to perform the tasks on the hard drive before the operating system enforces the access policies. For example, MICROSOFT WINDOWS-based operating systems provide a facility for performing certain file read\/write operations at an early stage in a computer's boot process. In this manner, an application can alter files that are locked once the operating system is fully booted.","Another way to avoid the limitations imposed by the API is to boot the computer with another operating system that allows the tasks to be performed. One technique for accomplishing this is to insert a floppy disk containing a different operating system, such as DOS (the \u201cDisk Operating System\u201d) into a floppy drive on the computer system and boot the floppy disk's operating system instead of the operating system stored on the hard drive. Once the computer boots to DOS, a DOS-based application program can freely access the hard drive. However, this method is often inconvenient when the end user lacks a floppy disk or the computer system lacks a floppy disk drive. Another technique is to store a customized image of a bootable floppy disk on the hard drive, load the disk image into a logical drive stored in volatile memory (i.e., a RAM disk) and then cause the computer system to load and boot from the RAM disk. However, this solution can be problematic because it requires significant alteration of the normal computer boot process. Plus, applications executing on the computer system can inadvertently disable the boot process or overwrite the memory locations holding the disk image.","Accordingly, there is a need in the art for a way to perform tasks on a storage device of a computer system that are not permitted by the computer system's normal operating system. Preferably, a solution meeting this need will not require the end user to use a floppy disk, require the computer to have a floppy disk drive, or make extensive and vulnerable alterations to the computer system or storage device.","The above need is met by booting the computer system () from an operating system () contained within a virtual partition (VP) () in the storage device (). The storage device (), such as a hard disk drive, is typically divided into one or more logical partitions (, , ). Each partition (, , ) is formatted according to a file system, such as FAT16, FAT32, or NTFS. One partition () is usually designated as the \u201cboot partition\u201d and contains the operating system () and other data utilized to control the computer system (). A master boot record (MBR)  in the storage device () includes a partition table () that specifies the parameters of the partitions (, , ) and identifies the boot partition ().","A VP client (VPC) module () includes a VP creation module () that creates the VP () as a file preferably located in one of the partitions of the storage device (). In one embodiment, the VP creation module () defragments content on the storage device () in order to make the VP file () contiguous.","A VP formatting module () formats the VP file () so that its contents emulate a file system. The emulated file system is not necessarily the same as the file system of the partition hosting the VP file (). In one embodiment, if the VP file () is fragmented, the VP formatting module () marks the gaps between the fragments as bad file allocation units (e.g., bad clusters) or as belonging to a file in the VP file system. The VP formatting module () also installs executable code and data in the VP (), including an operating system (), that allow the computer system () to boot from the VP. The operating system () in the VP () allows application modules () executing on the computer system () to perform tasks not permitted by the operating system () normally booted by the computer system (). An MBR modifier module () modifies the MBR () to establish the VP () as the boot partition and cause the computer system () to boot from the VP.","In one embodiment, the application modules () utilized when the computer system () is booted from the VP () include an image restore module () and an image create module (). The image restore module () restores an image onto the storage device (). If () the location of the VP file () is incompatible with the image being loaded, the image restore module preferably moves () the VP to a new location. The image create module () creates an image of the storage device (). The image create module () skips () the VP file () so that the created image does not contain the VP. Once the application modules () have completed their tasks, one embodiment of the present invention restores the MBR () to its original state and boots the computer system () back to its normal operating system.","The figures depict an embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","102","104","104","106","108","110","112","114","116","118","112"]},"The processor  may be any general-purpose processor such as an INTEL x86, SUN MICROSYSTEMS SPARC, or POWERPC compatible-CPU. The storage device  is, in one embodiment, a hard disk drive but can also be any other device capable of storing data, such as a writeable compact disk (CD) or DVD, or a solid-state memory device. The memory  may be, for example, firmware, read-only memory (ROM), non-volatile random access memory (NVRAM), and\/or RAM, and holds instructions and data used by the processor . The pointing device  may be a mouse, track ball, or other type of pointing device, and is used in combination with the keyboard  to input data into the computer system . The graphics adapter  displays images and other information on the display . The network adapter  couples the computer system  to a local or wide area network.","As is known in the art, the computer system  is adapted to execute computer program modules for providing functionality described herein. As used herein, the term \u201cmodule\u201d refers to computer program logic for providing the specified functionality. A module can be implemented in hardware, firmware, and\/or software. In one embodiment, the modules are stored on the storage device , loaded into the memory , and executed by the processor .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["200","108","100"]},"As is known in the art, a hard drive  typically has one or more platters of magnetic media. The media are divided into logical components called tracks, sectors, and clusters. A \u201ctrack\u201d is a circular ring of storage elements on the disk. A \u201csector\u201d is the smallest addressable section of a track. A \u201ccluster\u201d (also called an \u201cextent\u201d) is a set of one or more sectors and represents the smallest unit of storage elements that can be allocated to a file or other structure, although some file systems do not use clusters. In addition, a \u201ccylinder\u201d is the group of corresponding tracks on each platter. The hard drive  also has one or more heads that read from the platters.","In , the hard drive  stores a master boot record (MBR)  that holds information describing the logical structure of the drive. In a typical embodiment, the MBR  is located in the first physical sector of the hard drive and contains two logical components: the boot module  and the partition table . The boot module  contains executable code for initiating the operation of the computer system  when activated by code stored in the basic input\/output system (BIOS), ROM, and\/or NVRAM of the computer system.","The partition table  holds information describing the logical arrangement of storage on the drive . In general, a hard drive can be divided into one or more logical partitions. The partitions appear to the computer system  as logically distinct hard drives, even though the partitions reside within a single drive. The partition table  contains entries describing the parameters of each partition. For example, an entry may specify the heads, cylinders, and sectors forming the partition, the type of partition, and whether the partition is the boot partition. The hard drive  may have unallocated sectors that are not part of the MBR  or any partition.","The exemplary drive  illustrated in  is divided into three logical partitions , , . The first partition , in this example, is the boot partition. The other two partitions are similar to the first partition, but are not designated as the boot partition. As is known in the art, each partition is formatted according to a particular file system. For example, a partition may be formatted according to the FAT16, FAT32, HPFS, NTFS, or other file systems. The formatted partitions are adapted to hold files that contain executable code and\/or data.","In most file systems, the boot partition holds a special module called the boot record . The boot record  holds instructions for booting (i.e., initiating the operation of) the computer system . Depending upon the file system for the partition, the boot record  may also access a file allocation table (FAT) (in the case of the FAT16 and FAT32 file systems) or a master file table (MFT) (in the case of NTFS file systems) that describes how the storage in the partition is allocated, including, e.g., the directory structure, bad sectors, etc. Those of skill in the art will recognize that other file systems may use different techniques to represent this information.","In , the first partition  holds files  forming the operating system for the computer system . The operating system might be, for example, MICROSOFT WINDOWS XP, WINDOWS 2000, WINDOWS ME, LINUX, APPLE OS X, or another operating system. Depending upon the embodiment, the other partitions ,  may also hold operating system files that are the same, or different, than the operating system files held by the first partition . In general, the operating system files  are not treated differently than other files in the file system and can be stored in any valid location in the partition  and\/or hard disk .","When a computer system  running the DOS or 32-bit WINDOWS operating system is booted, it loads and then executes the boot module  stored in the MBR . The boot module  examines the partition table , identifies the boot partition , and loads and executes the code in the boot record  for the partition. This code, in turn, loads and executes instructions stored in the operating system files , which cause the operating system to load and then control the computer system . Computer systems running other operating systems, such as LINUX or 64-bit WINDOWS (e.g., WINDOWS for INTEL ITANIUM-based computers) boot using different procedures, although the net effect is the same. Namely, modules in the memory  utilize data stored on the hard disk  and\/or elsewhere in the computer system  to identify the boot partition  and load and execute the operating system contained therein.","Various application programs can be run on the computer system  under the control of the operating system. Many modern operating systems, such as those based on the MICROSOFT WINDOWS XP operating system, do not permit application programs executed by the operating system to perform certain tasks with respect to the data on the hard drive . It is desirable to permit certain application programs to perform these tasks.","Therefore, an embodiment of the present invention utilizes a VP client (VPC) module  stored in one or more files on the hard drive . The VPC module  creates a VP  on the hard drive , stores in the VP an operating system that permits the desired functionality, and alters the MBR  to cause the computer system to boot from the VP the next time the computer is booted. In , the VPC module  and VP  are illustrated within the first partition . This partition  is referred to as the \u201chost\u201d partition because it holds the VP . However, the VPC module  can just as easily be stored in another partition in the hard drive , outside of a partition, or on another computer-readable medium accessible to the computer system . Likewise, the VP  can be stored in any other storage device  in the computer system  adapted to store boot instructions and an operating system.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3","b":["226","226","310","228","228","228","216","228","216","228","200"]},"Preferably, the VP creation module  takes steps to ensure that the VP file  is not fragmented (i.e., the VP file is stored in a single, contiguous space in the host partition ). In one embodiment, the VP creation module  identifies a contiguous space and then creates the VP file  in that space. In another embodiment, the VP creation module  creates the VP file  and then tests it to determine whether it is contiguous. If the VP file  is not contiguous, the module  identifies a suitable space and moves the VP file to it. In either embodiment, if the VP creation module  cannot identify a suitable space, it preferably rearranges other files or file fragments in the host partition  to clear a suitable space and moves the VP file  to there. In another embodiment, the VP creation module  creates the VP file  in unpartitioned space on the hard drive .","Certain operating systems and file systems allow files and\/or partitions on the hard drive to be compressed. For example, the WINDOWS 9x and ME operating systems can create compressed partitions that are embedded within non-compressed partitions. Similarly, the WINDOWS 2000 and XP operating systems can create compressed directories in a partition, including the root directory. If compression is active in the host partition , the VP creation module , in one embodiment, ensures that the VP file  is uncompressed. Under the WINDOWS 9x and ME operating systems, the VP creation module , in one embodiment, creates the VP file in the uncompressed partition encompassing the compressed partition. Under the WINDOWS 2000 and XP operating systems, the VP creation module , in one embodiment, uses functionality provided by the operating systems to disable compression for the VP file .","A VP formatting module  preferably stores program code logic for \u201cformatting\u201d the VP file  as if it were a separate partition. In one embodiment, the VP formatting module  formats the file so that it emulates a FAT16-formatted partition. As part of this process, the VP formatting module  places data structures in the VP file  that emulate the FAT and directory structure of a normal FAT16 file system. Other embodiments of the VP formatting module  format the VP to emulate other file systems. In some operating systems, partitions are expected to start at a track or cylinder boundary. In one embodiment, if the VP file  does not start on such a boundary, the VP formatting module  creates the file system data structures at a track or cylinder boundary within the VP file . In this case, the location of the data structures is referenced as the start of the VP  rather than the true start of the VP file.","In one embodiment, the VP creation module  allows the VP file  to be fragmented. Then, the VP formatting module  uses functionality within the file system with which the VP  is \u201cformatted\u201d to account for the spaces between the fragments forming the file. In one embodiment, the VP formatting module  uses structures within the VP (e.g., the FAT) to mark the spaces between the fragments as \u201cbad\u201d clusters, thereby letting the discontinuous file appear as a contiguous file having gaps of bad clusters. In another embodiment, the VP formatting module  marks spaces between the fragments as belonging to a particular file in the emulated file system.","The VP formatting module  also preferably writes operating system files into the VP . In one embodiment, the VP formatting module  obtains the files from another location on the hard drive  or via network adapter . In one embodiment, the operating system is DOS and the VP formatting module writes the PC-DOS command files IBMBIO.COM and IBMDOS.COM (or the MS-DOS equivalents IO.SYS and MSDOS.SYS) as the first two entries of the root directory of the VP . However, other embodiments can use different operating systems. The VP formatting module  also writes certain files that will be used when the computer is booted to DOS into the VP , such as mouse and network drivers, configuration files, batch files, and application files. In one embodiment, the application files are located outside the VP .","A MBR modifier module  preferably stores program code logic for modifying the boot module  and partition table  in the MBR  of the hard drive  to make the VP  the active boot partition. Preferably, the MBR modifier module  replaces the boot module  with program code causing the computer system  to boot the active partition. The MBR modifier module  also alters the partition table  to establish a real partition having the boundaries of the VP file  (or a boundary at the beginning of the emulated file system in the VP file) and makes this partition the active boot partition. Accordingly, when the computer system is booted, it will boot the operating system in the VP  rather than the one stored in the host partition or the other partitions on the hard drive . The MBR modifier module  also preferably saves the original MBR  as a file  in the VP .","The MBR modifier module  preferably replaces the original boot module  because some computer systems might have boot modules that do not necessarily boot the computer system from the active partition identified by the partition table . If a computer system  is known to have a standard boot module  that boots the active boot partition identified in the partition table , one embodiment of the MBR modifier module  modifies only the partition table. Modifying the partition table  in this manner does not require special code or functionality in the MBR . Rather, the MBR  follows the normal boot process to boot from the VP . In addition, other application programs that use and alter the MBR , such as FDISK, are unlikely to inadvertently damage the virtual partition or render it inaccessible. Those of skill in the art will recognize that other embodiments of the VPC module  can distribute the functionality of its various component modules in a manner different than the distribution described above.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIG. 4"],"b":["228","226","228","410","412","414","422","312","228","416","228"]},"The application modules  in the VP  of  are designed to utilize the storage device  access functionality permitted under the operating system  installed in the VP. In one embodiment, the application modules  provide image restoration and image creation for the hard drive  containing the VP .  illustrates an image restore module  and an image create module  for performing these tasks. An \u201cimage\u201d is a collection of data, such as a file or files, that specifies content on the storage device ().","In one embodiment, the image restore module  contains program code logic for restoring an image onto a partition and\/or hard drive  in the computer system . This functionality may be desirable, for example, when an end-user wishes to clone (i.e., make an exact or nearly exact copy of) the contents of another computer's hard drive onto the hard drive  of the computer system . In one embodiment, the image restore module  accomplishes this functionality by overwriting any content on the hard drive  with new files and\/or other data structures as specified by the disk image.","The image restore module  is preferably \u201caware\u201d of the VP  and can load the disk image around it. The image restore module  also preferably contains functionality for detecting a conflict between the image being loaded and the location of the VP  on the hard drive . For example, the image might specify that other files should be stored in the location of the VP file . Similarly, the VP file  might fall across partition boundaries or in the MFT area as specified by the image. In these cases, the image restore module  preferably detects the conflict and identifies a new, valid location for the VP file  on the hard drive . In one embodiment, this location is at the end of the host partition  because there are no restricted areas used by the FAT or NTFS file systems in that region. Other embodiments use other locations that are advantageous for the particular file system of the host partition . The image restore module  moves the VP  to the new location, updates the MBR  to reflect the change, and reboots the computer system .","In one embodiment, the image create module  contains program code logic for creating an image of the partition and\/or hard drive . The image can be saved, for example, at previously-unused locations on the hard drive , on another hard drive, on a removable storage device such as a CD, or on a hard drive of another computer system connected via a network. Preferably, the image create module  is adapted to detect and skip the VP file  when creating the disk image.","The application modules  in the VP  often need to access the copy of the original MBR saved as a file  in the VP . For example, the image restore module  may need to alter the original MBR to reflect the restored image. In addition, the image create module  preferably uses the MBR saved as the file  as the MBR in the disk image it creates. In another example, the application modules  may need to access the original MBR in order to generate reports on disk layout. In one embodiment, the application modules  are \u201caware\u201d of the VP  environment and \u201cknow\u201d to use the copy of the original MBR saved in the file  for tasks that require access to the MBR. In another embodiment, a MBR redirect module  is loaded with the VP operating system . This module  redirects all application accesses to sector  of the hard drive  (the MBR sector) to the MBR copy  in the VP , thereby causing the applications to transparently utilize the original MBR. The MBR redirect module  is deactivated before the original MBR is restored from the file  in the VP  back to sector  of the hard drive . In one embodiment, the MBR redirect module  is implemented as a terminate-and-stay-resident (TSR) program.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5","b":"228"},"Initially, the task that requires functionality not permitted under the computer system's normal operating system is identified . This step may occur, for example, when an end-user provides an input to the computer system  indicating that it should restore an image onto, or create an image from, the hard drive  of the computer system . Alternatively, this step can occur when an automated process executing on the computer system  indicates that such a task should be performed.","In response, the computer system  executes the program modules to create  the virtual partition  on the hard drive  and boot to it. In one embodiment, the VP has already been created at this stage. Thus, the program modules boot from the already-created VP. The program modules then perform  the task or tasks that require functionality not permitted under the computer system's normal operating system. Once the tasks are completed, the program modules preferably restore the MBR  to its original configuration (or the configuration produced as a result of the performed task) and boot the computer system  to the operating system installed in the host partition  (i.e., the operating system other than the one in the VP ).","Once the computer is rebooted, program modules executed in the restored operating system may need to recover  data, such as the operational status and logs, from the VP . However, in certain circumstances, such as when an image is restored onto the hard drive , indicia of the VP file  no longer exist on the hard drive. The data formerly in the VP  reside on the hard drive, but are no longer marked as being within a file.","In order to recover data from a VP  that is no longer marked as a file, the program modules determine the location of the VP . There are several techniques used by embodiments of the program modules to find the location of the VP . One technique is for program modules executing in the VP  to store the location of the VP in a designated sector of the hard disk  (e.g., sector , which is outside of any partition), which is later read by the program modules executing in the restored operating system. Another technique is for the program modules in the restored operating system to do a brute force search of the hard disk for a \u201csignature\u201d of the VP. In one embodiment, this search examines only track boundaries since the VP  starts at such a boundary. In addition, the program modules preferably remove the signature once the data are recovered in order to avoid identifying old VP files during subsequent searches. A third technique is for the image restore module  or another module to create a file in the restored file system that matches boundaries and\/or contents of the VP file .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 6","figure 616"],"b":["512","100","610","228","216","612","228","614","100","228","210"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","b":"514"},"Initially, program modules executed by the computer system  determine  the type of operation requested by the end-user and\/or other modules on the computer system. In the example of , there are two operation types: 1) restore an image onto the hard drive ; and 2) create an image from the contents of the hard drive. If  the \u201cimage create\u201d operation type is selected, the program modules preferably read the contents of the hard drive  and create  the disk image. Accordingly, the resulting disk image reflects the contents of the hard drive  before the VP was created.","If  the \u201cimage restore\u201d operation type is requested, the program modules preferably determine  whether the current location of the VP file  is compatible with the image being loaded. If the location is not compatible, the program modules preferably move  the VP file  to a new location that is compatible with the image. Once the VP file  is in a compatible location, the program modules preferably restore  the image onto the hard drive .","Accordingly, the present invention allows an application program or other program modules to perform tasks normally not permitted by the host operating system. The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2","b":["200","108","100"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 3","FIG. 2"],"b":"226"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4","b":["228","226"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5","b":["228","223"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6","b":"512"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7","b":"514"}]},"DETDESC":[{},{}]}
