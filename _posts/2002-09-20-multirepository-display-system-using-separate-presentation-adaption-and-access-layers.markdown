---
title: Multi-repository display system using separate presentation, adaption and access layers
abstract: A software object display system using an adaptation layer to obtain information concerning a number of software objects is described. The adaptation layer communicates to a presentation layer which produces a display for the software objects. The adaptation layer isolates the presentation layer from the details of the structures of the software objects to be displayed. The adaptation layer provides a standard set of data to the presentation layer for the presentation layer to display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07669145&OS=07669145&RS=07669145
owner: Apple Inc.
number: 07669145
owner_city: Cupertino
owner_country: US
publication_date: 20020920
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE PRESENT INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is related to the applications Arrouye et al, U.S. patent application Ser. No. 09\/161,758 (now U.S. Pat. No. 6,230,310), for \u201cA METHOD ADAPTED TO TRANSPARENTLY TRANSFORM OBJECTS FOR AN APPLICATION PROGRAM,\u201d and Arrouye et al, U.S. patent application Ser. No. 09\/162,126, for \u201cPERSISTENT STATE DATABASE FOR OPERATING SYSTEM SERVICES,\u201d which are both incorporated herein by reference.","1. Field of the Invention","The present invention relates to software systems for providing the display and access to software objects in a computer system.","2. State of the Art","Typically, in a computer system, the files which are available for selection by different applications are displayed in a hierarchical manner. The display is part of a user interface on the file management system of the computer system. The user can select a file to be opened by clicking on a representation of the file, or performing a related operation which issues a command to open the file.","A difficulty occurs when different types of software objects are accessible. In the past, the user interface has been designed with certain, sometimes hidden, expectations of the software objects to be accessed. Most file access systems assume that the software objects are based on a single model. Typically, the local file system forms the basis for this model, since files are the most common types of software objects. When a new type of software object is introduced, it is often forced into this file system model. Some types of software objects, however, do not have a good conceptual fit with the file system model. For example, in file systems, small portions of the file can be independently accessed and modified. This type of access is not possible for some other types of software objects, such as database objects, or web pages on the Internet. For these objects, the entire software object is replaced when a change is to be made.","As another example of the differences between types of software objects, file systems are typically based upon containment relationships, where one object can have child, or dependent objects, as well as parent objects. This type of relationship may not apply to other types of objects, such as database records, or web pages, since they are not inherently hierarchical.","In the past, when a new type of software object is introduced, either the user interface software is modified to recognize and handle the new type of software object, or the new type of software object is forced into an existing model, such as the file system model. Because of hidden links between the file system model and the user interface software, modifying the interface to add a new object type can be difficult.","It is desired to have an improved system of displaying and accessing software objects that avoid some of the problems of the prior art, and facilitate access to a variety of different types of software objects.","In accordance with the present invention, an adaptation layer is used to isolate a presentation layer of a user interface from the details of accessing the software objects. For each object to be displayed, a standard set of information is transferred to the presentation layer from the adaptation layer. This information, in one embodiment, includes the type of object (e.g. file, web page, etc.) the name and\/or icon of the software object, and an indication of the presence of children objects of the software object. This data is provided by the adaptation layer which can call different access units for the different types of software objects. Thus, if there are three different types of software objects, there will be three different access software units called by the adaptation layer to get the appropriate information about the software object. Each of the access units can obtain a standard set of information from the respective types of software objects in vastly different manners. In a preferred embodiment, the amount of data required to be transferred from the adaptation layer to the presentation layer is relatively minimal. Optional information can also be transferred, including, but not limited to, the date and time of the last modification, and the object size.","An advantage of the present invention is that new types of software objects can be added without requiring modifications to the presentation layer. The presentation layer can display representations of software objects having vastly different software object types. For example, web pages, databases, file transfer protocol (FTP) objects, and regular file types can be displayed in the same hierarchical structure.","Another embodiment of the present invention concerns a hierarchical display which allows for the selection of software objects having different heterogeneous types. In one embodiment, such a system is made possible by the use of the adaptation layer. Representations of software objects of different types can be shown in the same display, and viewed and selected by the user. The selection of representations in the hierarchical display call access units to access the software objects. The presentation layer is not burdened with figuring out how to access the different software objects. The presentation layer merely sends an \u201copen software object\u201d signal to the different access units which can access the software objects in their own manner.","The software objects can be from a variety of different sources and repositories. These different repositories can contain heterogeneous types of objects, which would previously have been considered to be incompatible. For example, the software objects can include file objects, database objects, FTP objects, or internet web objects.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},"Typically, conventional presentation systems were produced with knowledge of the types of software objects to be used. Conventional presentation systems can be tightly meshed with the details of the expected software object types. Often, the presentation layer expects the software objects to behave as files. The file system model is useful for a variety of different types of software objects, such as sound files, movie files, and text files. The prevalence of the file system model has influenced software designers to force new objects into this model.","A problem occurs when a new type of software object is introduced that does not easily fit the file system model, such as an Internet web page. Modifying the presentation software to allow display of a web page is quite difficult because the presentation software was written expecting all of the software objects to behave in the same manner as a file.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2A"},"The software objects can be from a variety of different sources and repositories. These different repositories can contain heterogeneous types of objects, which would previously be considered incompatible. For example, the software objects can include file objects, database objects, and internet web objects, including FTP server objects.","The details of the software object access is provided by the adaptation layer and access units. Certain other types of information can be provided by the adaptation layer to the presentation layer, but is not required. This data can include the file size, and the time and date of the last modification. For some types of objects where this information does not make sense, it need not be transferred to the presentation layer. In a preferred embodiment, the adaptation layer is a \u201cthin\u201d layer of software that uses the access units to obtain the display information. The access units may be unmodified commercially available software.","The presentation layer also preferably sends signals to the lower levels in a fixed form. Thus, if the user selects a command to open a software object, an \u201copen object\u201d instruction is sent to the lower levels which interpret this instruction to open the software object in its own fashion.","As shown in , a variety of different software objects can be simultaneously accessed with the present invention. The different types of objects might be stored on different respective repositories. Thus, file objects might be stored on a local disk drive, FTP objects can be stored at a remote FTP site, and database objects are accessed via a separate database server. Access units for file objects, database objects, and web objects are shown. It is easy to support new types of software objects. The adaptation layer can be changed and additional access units added. Since the presentation layer only expects certain fixed data, the new object types can be added without modifying the presentation layer.","In a preferred embodiment, the presentation layer does not require the identifying data to be returned within a fixed time period. With a file system, when data is requested by the presentation unit, the computer system can quickly obtain this data. A presentation layer that expects the objects to conform to a file system model may require that data be received within a certain amount of time. For example, the system could time out after a short period if the data is not obtained by the presentation layer. However, in the preferred embodiment of the present invention, the presentation layer does not have any expectations of when the identification data is to be presented. The presentation layer requests data a few times, and can produce a display whenever the data is sent from the lower levels. The presentation layer does not have any expectations as to when this data is to be received.","This feature is particularly advantageous when web objects are accessed. Since Internet access is typically much slower than access over the computer system files, the timing out of the system can cause problems. In other embodiments, a time limit may be set.","Different access units can obtain the required data from the objects in vastly different manners. The presentation layer has no expectations of how this data is to be produced. For a file unit access, the data can be obtained in the conventional manner. For a web access system, the system can search for text to use as the name of the object, either from the web page or the web page's uniform resource locator (URL), and can go through the web page to identify URLs contained within it to produce an indication of the children objects of that web page. An access unit for a database can use the details of the database structure to produce the name and links to any children objects. The adaptation layer is preferably quite thin and merely an intermediary between the presentation layer and the different software object access units.","The access units can also provide different ways of manipulating the software objects as a result of instructions from the presentation layer. For example, if the user selects \u201copen a file\u201d, this instruction is interpreted as appropriate by each of the different access units, to retrieve a file.","An access unit may be able to access more than one type of object. Additionally, a single type of object can be accessed by more than one access unit.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["22","24"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 3","FIGS. 4-6"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 5","FIG. 5"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 7","b":["40","42","44"]},"It will be appreciated by those of ordinary skill in the art that the present invention can be embodied in other specific forms without departing from the spirit or essential character thereof. The presently disclosed embodiments are therefore considered in all respects to be illustrative and not restrictive. The scope of the invention is indicated by the appended claims, rather than the foregoing description, and all changes which come within the meaning and range of equivalence thereof are intended to be embraced therein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be further understood from the following description in conjunction with the appended drawings. In the drawings:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
