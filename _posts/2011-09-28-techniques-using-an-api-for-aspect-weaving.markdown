---
title: Techniques using an API for aspect weaving
abstract: Described are techniques for executing an application. The application includes a plurality of partitions including business logic and one or more aspects. A first registration interface of an application programming interface is defined for registering a code entity and associated input and output parameters. A provider of a first aspect of the application is registered using the first registration interface to define the provider as a callback invoked from other code of the application programming interface that performs aspect weaving. The provider includes a first code entity and a first data entity of the first aspect. A second code entity of the business logic is executed that performs a call to the other code performing aspect weaving to obtain a second data entity of the business logic. The other code performing aspect weaving is executed and performs a callback to the provider of the first aspect.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08418192&OS=08418192&RS=08418192
owner: EMC Corporation
number: 08418192
owner_city: Hopkinton
owner_country: US
publication_date: 20110928
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENT(S)"],"p":["1. Technical Field","This application relates to techniques used in connection with aspects and aspect oriented programming (AOP), and in particular, in connection with use of an API (application programming interface) to perform aspect weaving.","2. Description of Related Art","Computer systems may include different resources used by one or more host processors.","Resources and host processors in a computer system may be interconnected by one or more communication connections. These resources may include, for example, data storage devices such as those included in the data storage systems manufactured by EMC Corporation. These data storage systems may be coupled to one or more servers or host processors and provide storage services to each host processor. Multiple data storage systems from one or more different vendors may be connected and may provide common data storage for one or more host processors in a computer system.","A host processor may perform a variety of data processing tasks and operations using the data storage system. For example, a host processor may perform basic system I\/O operations in connection with data requests, such as data read and write operations.","Host processor systems may store and retrieve data using a storage device containing a plurality of host interface units, disk drives, and disk interface units. The host systems access the storage device through a plurality of channels provided therewith. Host systems provide data and access control information through the channels to the storage device and the storage device provides data to the host systems also through the channels. The host systems do not address the disk drives of the storage device directly, but rather, access what appears to the host systems as a plurality of logical disk units. The logical disk units may or may not correspond to the actual disk drives. Allowing multiple host systems to access the single storage device unit allows the host systems to share data in the device. In order to facilitate sharing of the data on the device, additional software on the data storage systems may also be used.","In connection with data storage systems, or more generally any type of system, an application may be written which embodies multiple abstract concepts whereby the application may be partitioned into different functionally related segments. In some development environments, the application may be written to include code that intermixes or does not separate the different functional segments so that a single routine or code module, for example, may encode logical processing of many different functional segments. The foregoing has drawbacks in that different code developers and maintainers that may each have a different area of expertise related to one of the functional segments cannot independently work on the different functional segments of the application. Furthermore, combining code performing various functionally different segments into a single code entity, such as a single routine or module, does not provide a modular functional design facilitating code reuse of different functional segments.","In accordance with techniques described herein is a method for executing an application comprising: partitioning said application into a plurality of partitions including business logic and one or more aspects, each of said business logic and one or more aspects including one or more code entities and one or more data entities; defining a first registration interface of an application programming interface for registering a code entity and associated input and output parameters; registering a provider of a first of said one or more aspects using said first registration interface, said registering defining said provider as a callback provider invoked from other code of said application programming interface that performs aspect weaving, said provider including a first code entity and a first data entity of the first aspect of the application; executing a second code entity of the business logic, wherein said executing said second code entity includes performing a call to said other code performing aspect weaving to obtain a second data entity of the business logic; executing said other code performing aspect weaving, wherein said executing said other code includes performing a callback to said provider of the first aspect to obtain the first data entity and using the first data entity to obtain the second data entity; and returning, by said other code performing aspect weaving, said second data entity to the second code entity. The first aspect may include code entities and data entities related to operational logic of the application. The business logic may include code entities and data entities related to business logic of the application, wherein performing processing to complete an operation of said business logic may include performing an operation of said operational logic. The first aspect performing operational logic may include an endpoint provider providing said first data entity, said first data entity being endpoint information used in communicating with a communication endpoint. The endpoint information may include an address of said communication endpoint, a protocol used in communicating with said communication endpoint, and a port used in communicating with said communication endpoint. The endpoint provider may be registered in said registering step as a first endpoint provider using said first registration interface. Executing the other code performing aspect weaving may further include invoking code of said endpoint provider that provides said endpoint information to said other code performing aspect weaving; connecting, by said other code, to said communication endpoint using endpoint information; and obtaining, by said other code, said second data entity. Obtaining the second data entity may include obtaining the second data entity directly from a first system including said communication endpoint. Obtaining the second data entity may further comprise returning a first system data entity that is included in said business logic from a first system that includes the communication endpoint. The method may also include invoking, by said other code, a second endpoint provider of the first aspect, wherein, prior to invocation by said other code, said second endpoint provider is registered as said second endpoint provider using said first registration interface; returning, by said second endpoint provider to said other code, second endpoint information used in communicating with a second communication endpoint; connecting, by said other code, to said second communication endpoint using said second endpoint information; sending, by said other code, said first system data entity to said second communication endpoint; and returning, by a second system including said second communication endpoint, said second data entity. The one or more aspects may include a second aspect performing operational logic and may include a credential provider providing a third data entity of the second aspect. The third data entity may include credentials used to establish an authentication session with said communication endpoint. The credential provider may be registered as a second provider using a second registration interface of the application programming interface defining said second provider as a callback provider invoked from said other code performing aspect weaving. Executing the other code performing aspect weaving may further include invoking code of said credential provider that provides said credentials to said other code performing aspect weaving; and establishing, by said other code, an authentication session with said communication endpoint using said credentials. The second code entity of the business logic may provide a set of one or more input parameters in the call to the other code performing aspect weaving. The set of one or more input parameters may be data entities referenced by the business logic of the application and used in connection with obtaining the second data entity. The set of one or more input parameters may be provided to the communication endpoint as input parameters by said other code.","Also in accordance with techniques herein is a method of executing a client application comprising: partitioning said client application into a plurality of partitions including a business logic partition and one or more other partitions, each of said one or more other partitions corresponding to a different aspect of the client application, wherein said business logic partition and each of said one or more other partitions corresponding to a different aspect includes one or more code entities and one or more data entities, each of said one or more other partitions corresponding to a different operational logic aspect of the client application; providing an application programming interface that performs processing including aspect weaving, said application programming interface including: one or more registration interfaces; and a first code entity having a defined interface including a set of one or more parameters; and executing code of the business logic partition which invokes said first code entity of the application programming interface, wherein said first code entity invokes one or more registered providers of an operational logic aspect of the client application to obtain one or more operational logic data entities used in obtaining one or more business logic data entities. The method may include registering said one or more providers of the operational logic aspect using said one or more registration interfaces of the application programming interface. The registering may include registering a code entity, input parameters, and output parameters of the operational logic aspect. The registering may register any of an endpoint provider providing communication endpoint information, a credential provider providing credentials used to establish an authentication session with a communication endpoint, a crash recovery provider that saves context information used for crash recovery, a transaction provider that saves transactional context information, a failover or high availability provider that provides information regarding connection failures and\/or alternative connections to be utilized upon failure of a primary connection, a quality of service provider that indicates what one or more quality of service parameters to use and\/or provides values for the quality of service parameters, and a logging provider perform logging of various events or operations performed.","In further accordance with techniques herein is computer readable medium comprising code thereon for use in executing a client application, the computer readable medium comprising code for: defining a plurality of partitions of the client application, the plurality of partitions including a business logic partition and one or more other partitions, each of said one or more other partitions corresponding to a different aspect of the client application, wherein said business logic partition and each of said one or more other partitions corresponding to a different aspect includes one or more code entities and one or more data entities, each of said one or more other partitions corresponding to a different operational logic aspect of the client application; an application programming interface that performs processing including aspect weaving, said application programming interface including: one or more registration interfaces; and a first code entity having a defined interface including a set of one or more parameters, wherein executing code of the business logic partition invokes said first code entity of the application programming interface, wherein said first code entity invokes one or more registered providers of an operational logic aspect of the client application to obtain one or more operational logic data entities used in obtaining one or more business logic data entities. The one or more providers of the operational logic aspect may be registered using said one or more registration interfaces of the application programming interface. Registering each of the one or more providers may include registering a code entity, input parameters, and output parameters of the operational logic aspect. The registering may register any of an endpoint provider providing communication endpoint information, a credential provider providing credentials used to establish an authentication session with a communication endpoint, a crash recovery provider that saves context information used for crash recovery, a transaction provider that saves transactional context information, a failover or high availability provider that provides information regarding connection failures and\/or alternative connections to be utilized upon failure of a primary connection, a quality of service provider that indicates what one or more quality of service parameters to use and\/or provides values for the quality of service parameters, and a logging provider perform logging of various events or operations performed.","Referring to , shown is an example of an embodiment of a system that may be used in connection with performing the techniques described herein. The system  includes one or more data storage systems  connected to server or host systems -through communication medium . The system  also includes a management system  connected to one or more data storage systems  through communication medium . In this embodiment of the system , the management system , and the N servers or hosts -may access the data storage systems , for example, in performing input\/output (I\/O) operations, data requests, and other operations. The communication medium  may be any one or more of a variety of networks or other type of communication connections as known to those skilled in the art. Each of the communication mediums  and  may be a network connection, bus, and\/or other type of data link, such as a hardwire or other connections known in the art. For example, the communication medium  may be the Internet, an intranet, network or other wireless or other hardwired connection(s) by which the host systems -may access and communicate with the data storage systems , and may also communicate with other components (not shown) that may be included in the computer system . In one embodiment, the communication medium  may be a LAN connection and the communication medium  may be an iSCSI or fibre channel connection.","Each of the host systems -and the data storage systems  included in the system  may be connected to the communication medium  by any one of a variety of connections as may be provided and supported in accordance with the type of communication medium . Similarly, the management system  may be connected to the communication medium  by any one of variety of connections in accordance with the type of communication medium . The processors included in the host computer systems -and management system  may be any one of a variety of proprietary or commercially available single or multi-processor system, such as an Intel-based processor, or other type of commercially available processor able to support traffic in accordance with each particular embodiment and application.","It should be noted that the particular examples of the hardware and software that may be included in the data storage systems  are described herein in more detail, and may vary with each particular embodiment. Each of the host computers -, the management system  and data storage systems may all be located at the same physical site, or, alternatively, may also be located in different physical locations. In connection with communication mediums  and , a variety of different communication protocols may be used such as SCSI, Fibre Channel, iSCSI, and the like. Some or all of the connections by which the hosts, management system, and data storage system may be connected to their respective communication medium may pass through other communication devices, such as a Connectrix or other switching equipment that may exist such as a phone line, a repeater, a multiplexer or even a satellite. In one embodiment, the hosts may communicate with the data storage systems over an iSCSI or a Fibre Channel connection and the management system may communicate with the data storage systems over a separate network connection using TCP\/IP. It should be noted that although  illustrates communications between the hosts and data storage systems being over a first connection, and communications between the management system and the data storage systems being over a second different connection, an embodiment may also use the same connection. The particular type and number of connections may vary in accordance with particulars of each embodiment.","Each of the host computer systems may perform different types of data operations in accordance with different types of tasks. In the embodiment of , any one of the host computers -may issue a data request to the data storage systems  to perform a data operation. For example, an application executing on one of the host computers -may perform a read or write operation resulting in one or more data requests to the data storage systems .","The management system  may be used in connection with management of the data storage systems . The management system  may include hardware and\/or software components. The management system  may include one or more computer processors connected to one or more I\/O devices such as, for example, a display or other output device, and an input device such as, for example, a keyboard, mouse, and the like. A data storage system manager may, for example, view information about a current storage volume configuration on a display device of the management system , provision data storage system resources, and the like.","In one embodiment, the data storage systems  may include one or more data storage systems such as one or more of the data storage systems, such as data storage arrays, offered by EMC Corporation of Hopkinton, Mass. Each of the data storage systems may include one or more data storage devices -, such as disks. One or more data storage systems may be manufactured by one or more different vendors. Each of the data storage systems included in  may be inter-connected (not shown). Additionally, the data storage systems may also be connected to the host systems through any one or more communication connections that may vary with each particular embodiment and device in accordance with the different protocols used in a particular embodiment. The type of communication connection used may vary with certain system parameters and requirements, such as those related to bandwidth and throughput required in accordance with a rate of I\/O requests as may be issued by the host computer systems, for example, to the data storage systems . It should be noted that each of the data storage systems may operate stand-alone, or may also be included as part of a storage area network (SAN) that includes, for example, other components such as other data storage systems. Each of the data storage systems may include a plurality of disk devices or volumes -. The particular data storage systems and examples as described herein for purposes of illustration should not be construed as a limitation. Other types of commercially available data storage systems, as well as processors and hardware controlling access to these particular devices, may also be included in an embodiment.","In such an embodiment in which element  of  is implemented using one or more data storage systems, each of the data storage systems may include code thereon for performing the techniques as described herein.","Servers or host systems, such as -, provide data and access control information through channels to the storage systems, and the storage systems may also provide data to the host systems also through the channels. The host systems may not address the disk drives of the storage systems directly, but rather access to data may be provided to one or more host systems from what the host systems view as a plurality of logical devices or logical volumes (LVs). The LVs may or may not correspond to the actual disk drives. For example, one or more LVs may reside on a single physical disk drive. Data in a single storage system may be accessed by multiple hosts allowing the hosts to share the data residing therein. An LV or LUN (logical unit number) may be used to refer to the foregoing logically defined devices or volumes.","Referring to , shown is an example of an embodiment of the data storage system  that may be included in the system  of . Included in the data storage system  of  are one or more data storage systems -as may be manufactured by one or more different vendors. Each of the data storage systems -may be a data storage array inter-connected (not shown) to other data storage array(s). Additionally, as noted above, the data storage systems may also be connected to the host systems through any one or more communication connections . In this example as described in more detail in following paragraphs, reference is made to the more detailed view of element . It should be noted that a similar more detailed description may also apply to any one or more of the other elements, such as , but have been omitted for simplicity of explanation.","Each of the data storage systems, such as , may include a plurality of storage devices such as disk devices or volumes included in an arrangement  consisting of n rows of disks or more generally, data storage devices, -. In this arrangement, each row of disks may be connected to a disk adapter (\u201cDA\u201d) or director responsible for the backend management of operations to and from a portion of the disks . In the system , a single DA, such as , may be responsible for the management of a row of disks, such as row . In a data storage system such as by EMC Corporation, a backend DA may also be referred to as a disk controller. The DA may performed operations such as reading data from, and writing data to, the physical devices which are serviced by the DA.","The system may also include one or more storage processors . Each of the storage processors  may be CPU and an embodiment may include any number of such processors. For example, the CLARiiON\u00ae data storage system by EMC Corporation includes two storage processors. The system may also include one or more host adapters (\u201cHAs\u201d) or directors -. Each of the HAs may be used to manage communications and data operations between one or more host systems and the global memory. In an embodiment, the HA may be a Fibre Channel Adapter (FA) or other adapter which facilitates host communication. The HA communicates with a component of the host such as a host bus adapter (HBA). Generally, directors may also be characterized as the different adapters, such as HAs (including FAs), DAs RAs and the like, as described herein. Components of the data storage system, such as an HA, which may communicate with a host may also be referred to as front end components. Within the data storage system, components, which may be characterized as backend components, communicate with a front end component. An example of a backend component is a DA. In connection with data storage systems such as by EMC Corporation, various types of directors or adapters may be implemented as a processor, or, more generally, a component that includes the processor. Examples of directors are disk adapters (DAs), host adapters (HAs), and the like.","One or more internal logical communication paths may exist between the DAs, the RAs, the HAs, and the memory . An embodiment, for example, may use one or more internal busses and\/or communication modules. For example, the global memory portion may be used to facilitate data transfers and other communications between the DAs, HAs and RAs in a data storage system. In one embodiment, the DAs -may perform data operations using a cache that may be included in the global memory , for example, in communications with other disk adapters or directors, and other components of the system . The other portion is that portion of memory that may be used in connection with other designations that may vary in accordance with each embodiment.","The particular data storage system as described in this embodiment, or a particular device thereof, such as a disk, should not be construed as a limitation. Other types of commercially available data storage systems, as well as processors and hardware controlling access to these particular devices, may also be included in an embodiment.","Also shown in the storage system is an RA or remote adapter . The RA may be hardware including a processor used to facilitate communication between data storage systems, such as between two of the same or different types of data storage systems.","In connection with a data storage system, system management may be performed using software installed, for example, on a management system . The software may be used in connection with techniques herein to display requested data storage management information to a user. For example, the user may be interested in listing information about particular data storage systems, devices, and the like, which may be displayed on a graphical user interface (GUI).","Although following paragraphs may provide exemplary uses of techniques herein with data storage management, it will be appreciated by those skilled in the art that techniques herein have broader use and applicability, more generally, with any type of UI, or even more generally, any application.","Aspect oriented programming may be characterized as a programming paradigm that supports modularization of concerns or aspects. A program or application may be partitioned into distinct segments or partitions where each such segment or partition may correspond to a cohesive area of functionality. The program may perform primary or main operations such as referred to herein as the business logic. An aspect may be characterized as ancillary processing performed as part of accomplishing an operation of the business logic whereby the ancillary processing may cut across multiple business logic operations or tasks. For example, primary tasks performed by the business logic may relate to provisioning storage, performing data replication, data storage system monitoring, and the like. Security is an example of an aspect or concern that may be performed, or applied to, any of the above-noted primary tasks in order to perform such primary task securely in connection with accomplishing the main goal of the primary task. As described elsewhere herein in more detail, the business logic and each of the one or more aspects of an application may include related code entities and data entities. An aspect may be further characterized as an encapsulation of one or more code entities and corresponding data entities of a particular concern whereby the code and data entities of an aspect are a functionally related set of code and associated data for performing an ancillary task that may cut across multiple tasks of the business logic. As an example as described above, a basic or primary functionality of a program may be referred to as the business logic. An aspect of the program may address an operational logic concern or aspect for performing other operations in support of implementation of a task or operation of the business logic. In some embodiments, the operational logic aspect may further comprise multiple different aspects representing a further partitioning of the operational logic concerns. There may be data entities for each individual concern or aspect and also the business logic. For example as described in more detail elsewhere herein, there are data entities of the operational logic aspects such as IP addresses, credentials, and the like, which are not data entities of the business logic. In a similar manner, there are data entities of the business logic which are not data entities of any operational logic. With reference to data storage management as the business logic, an operation or task of the business logic may include retrieving different sets of information of a current data storage configuration for display and presentation to a user via a data storage management GUI. The user may also issue a request for particular data storage management information through the GUI, for example, by selecting a menu item or other interface element. In response, code of the GUI comprising the business logic may issue a request to perform an operation and obtain the requested information using an application programming interface (API) described herein. To further illustrate, a user may request a list of all LUNs on one or more selected data storage systems, may request a list of file systems, may request a list of LUNs upon which data of a particular file system is stored, and the like, by performing an API call. In connection with the obtaining any of the foregoing requested information as a task of the business logic, processing may be performed by the API in accordance with techniques herein to connect to the correct one or more systems (e.g., data storage systems, file servers and the like), obtain and provide any required authentication information that may vary with system, and the like. Additionally, the particular one or more systems from which information may be obtained to provide the user's requested information for display via the GUI may vary with the current data storage system configuration or topology. As such, the runtime or execution sequence performed to implement the business logic operation and obtain requested information may vary with a variety of different factors such as the particular operation and data storage system topology and may be handled by the API code. The runtime execution sequence may include invoking executing code of multiple different aspects of the application which is embodied in encoded logic of the API code as described in more detail below.","Referring to , shown is an example illustrating use of aspect weaving as may be performed in an embodiment in accordance with techniques herein. The example  include an application or process  having its code and data partitioned into multiple aspects -. The aspect weaver  may be characterized as code which executes at runtime and includes programming logic to appropriately invoke various code entities of the different aspects -and accordingly use appropriate data entities of such aspects to perform a particular operation or task such as of the business logic.","What will be described in following paragraphs are techniques that may be used in connection with performing aspect weaving using an API in connection with integrating or weaving together code and data of different aspects such as in connection with performing an operation of the business logic. In connection with an application for data storage system management as an exemplary embodiment, the main task or primary operation of the business logic is in performing the different data storage system management operations not in the particular underlying details of the aspects or operational concerns, for example, such as related to security that may vary with data storage system topology and configuration (e.g., whether the requested information for a business logic operation is one or more data storage systems), how to logon or connect to each such system, and the like. In connection with techniques herein, the application may include code and data entities for the business logic and also for each aspect or concern. The application, such as the business logic, may invoke an API that embodies the aspect-weaving logic controlling the sequence or flow of execution related to the different aspects. For example, the API may include code which controls when to obtain sets of credentials, whether to contact multiple systems for performing a single business logic operation, which particular system(s) to contact, and the like. Thus, the application may include aspects having code and data entities where each such aspect may be independently developed. The code of the application (which may also be characterized as a client application or process) does not need to embody the logic of aspect weaving in connection with when to interweave other code and\/or data entities from various aspects. Aspects of the application may be interwoven to perform a task through the API. Thus, the application may be insulated from or not exposed to the interweaving of the various aspects to perform a task.","As described in more detail below, the API may define registration interfaces for which aspects of the application may supply code and data via a registration process. Thus, the API may be characterized as supplying hooks into the API framework into which the application code \u201cplugs in\u201d via the registration process. The registration of code entities of the application is completed prior to executing code of the business logic of the application. The registration process involves the application defining and registering callbacks into its own code where the API invokes such callbacks as needed during runtime as part of the aspect weaving process such as when performing processing of a business logic operation. In this example, an operation of the business logic may be implemented by performing an API call where the code of the API embodies the logic and performs processing to weave in code and data of other various aspects. In connection with this aspect weaving process, the API code may perform several callbacks into the application code as needed during runtime as part of aspect weaving. In this manner, the application includes code and data for the different aspects where the API controls when such code of the application's various aspects is invoked, what data entities of the application's aspects are utilized (e.g., which aspect data entities are used as input and\/or output parameters for different operational logic tasks), and the like.","In an embodiment described herein, the operational logic may be further partitioned into multiple aspects such as based on different types or categories of services provided. For example, in one embodiment for data storage management the operational logic may include a plurality of types of service providers such as, for example, credential provider(s), endpoint provider(s), logging provider(s), and the like. Each such category of service provider may be characterized as a different aspect and may include one or more providers. An endpoint provider may provide information about a communication endpoint such as of a data storage system, file server, or more generally, any system to which a communication connection is established as part of performing an operation or task for the business logic. For example, as described in more detail in following paragraphs, an example of an endpoint may be a port of a data storage system such as a data storage array or a file server to which a request is issued by API code to obtain information at runtime as part of executing a business logic operation. The endpoint may be identified by a particular IP address, communications protocol and port where all the foregoing may be used in connection with establishing a communication connection to the endpoint. For an endpoint, the communications protocol may identify the particular protocol used when communicating to the identified port of a component having the IP address. A credential provider may provide authentication information or credentials (e.g., account or user id and password) used when establishing an authorized session or connection to a communication endpoint. When establishing a connection to an endpoint, such a connection may or may not require use of authentication information or credentials from a credential provider. A logging provider may perform logging of various events or operations performed. The foregoing are just some examples of the different types of providers that may be included in an embodiment where each such type may be characterized as a different aspect or operational logic concern besides the business logic.","Each of the foregoing providers of the application may register with the API so that the API may invoke these providers of the application as needed at runtime in connection with performing aspect weaving. Each of the foregoing operational providers include code and data of the application. The API may define the registration interface. The registration interface may identify a registration routine of the API that is invoked by the application provider to register the provider of the application. The API's registration interface may include one or more input parameters identifying the conditions under which the application provider is invoked by API code during execution. For example, as described in more detail below, the API may include a registration interface for registering an endpoint provider of the application. The registration interface may include a parameter that maps to an identifier of the system including an endpoint. The identifier may be a serial number used by the business logic (e.g. the identifier is a data entity of the business logic) and is used to uniquely identify and distinguish among the different systems having endpoints (e.g., uniquely identify each of the different data storage systems, file servers, and the like). In this manner, the API code knows to invoke a particular registered application provider to provide a communication endpoint for a particular system having the serial number. The registration interface may also identify the call signature of the registered application provider such as what input and output parameters, if any, are supplied during runtime invocation. In this manner through registration, the API adds the registered provider to its list of callback routines for possible runtime invocation. In a similar manner, the API may provide additional registration interfaces for registering different aspect providers of the application as may be included in an embodiment in accordance with techniques herein","Referring to , shown is an example illustrating an application and API as may be used in an embodiment in accordance with techniques herein for data storage system management. The example  includes an application  having business logic and operational logic . The example  includes an API , a file system server  and data storage systems , . The business logic may include a plurality of providers of different types such as, for example, endpoint (EP) providers , , credential provider , and one or more other providers . Element  may be an EP provider for EP1 of data storage system . Element  may be an EP provider for EP2 of data storage system . Element  may be a provider that provides credentials (e.g., user id, password, and the like) used in connection with establishing an authenticated session with any of the EPs. Element  may generally represent any other providers that may be included in the application . The example  may illustrate the components of an embodiment in accordance with techniques herein. As illustrated and described below, one or more of the providers , ,  and  may register with the API  prior to executing code of the business logic in an embodiment in accordance with techniques herein. Such registration with the API  provides the application  with the means to \u201cplug into\u201d the API  so that the API may perform callbacks to the registered providers as needed during execution of API code as part of runtime processing in connection with performing aspect weaving for implementation of a business logic operation.","Various runtime illustrations utilizing components of  will now be described in more detail.","Referring to , shown is an example illustrating a communication diagram illustrating runtime execution flow in an embodiment in accordance with techniques herein. It should be noted that the example  includes only some of the components from  for simplicity of illustration. The example  includes application  which may be a client process including business logic . Elements , , ,  and  of  may be analogous, respectively, to elements , , , , and  of . Element  may represent code of the application  that is the EP1 provider for the file server system EP. Element  may be a file server system including EP1. The example  illustrates using an EP provider  in connection with contacting a file system management server  to obtain a list of one or more file systems.","It should be noted that example  illustrates a sequence of calls denoted by the connections between different code entities. A call shows the sequence number and call signature as follows: [seq num]: [function name([parameters]): [return type], where each of the \u201cparameters\u201d are input parameters and \u201creturn type\u201d identifies the output parameter or type returned by the function at completion of runtime invocation. Also illustrated in connection with sequence number  is subnumbering (e.g., ., . . . . ) which illustrates a runtime call stack. For example call , element , is accomplished by calling . (), then . (), and . () and then returning to the caller of  ().","At step  the operating system  may launch execution of the application . At step , the application provider  providing EP information for EP1 at a later point during runtime may be registered using an endpoint registration interface of the API. In connection with this registration process, the routine registerEndpointProvider of the API is invoked passing as a first input parameter, serverSerialNumber, of type string identifying the serial number of the file server system , and a second input parameter, provider, of type EndpointProvider. Element  illustrates code entity  registering as an EP provider for a server system with a particular serial number passed as a value for the above-mentioned first input parameter. When called at a later point in time by the API (e.g., such as illustrated by .), the registered EP provider  returns as an output an EP structure or object of type \u201cEndpoint\u201d including an IP address, port identifier, and protocol.","At step , the business logic  of the application  is notified that provider registration has completed and code of  may begin execution. The particular mechanism used to trigger execution of the application's business logic  or notify the business logic  to start may be performed using any suitable technique that may vary with embodiment. At step , the business logic  calls  code of the API  to perform a business logic operation. In this example, the API call  returns a parameter of type FileSystem for a corresponding input parameter (e.g., serialNumber of type string) that identifies a file system server. In connection with processing of the API call , additional calls denoted by ,  and  are performed. The input parameter, serialNumber, for the call  is a data entity of the business logic . At , the API  performs a callback to the registered provider  to obtain EP information for the desired serial number passed as the first input parameter in . The endpoint information for EP1 as returned by  (which is a data entity of the EP provider aspect) may include an IP address, protocol and port identifier as described elsewhere herein and the API code  may use the foregoing endpoint information for EP1 to connect  to fileserver system  including EP1. Additionally, once the connection to  is established in , the API code  may call  requesting information for the business logic operation. It should be noted that additional query parameters may be provided as input parameters to the call  although there are no such query parameters illustrated in this particular example . For example, a query parameter provided in the call  may be a business logic data entity provided as an input parameter in the call . In response to the call , the system  may return an output to the API  of type \u201cFileSystem\u201d identifying one or more managed elements which are data entities of the business logic. Subsequently, the API  then returns the managed element(s) of type \u201cFileSystem\u201d to the business logic  (e.g., return of call represented by ). In this example, the managed element(s) returned to  as return parameters for call  may be a list of one or more file systems.","The example  of  provides a rather simple example illustrating use of an API in accordance with techniques herein that performs aspect weaving whereby the API performs a callback to the application by invoking one of the registered client EP providers to obtain endpoint information for desired server serial number. Of note in connection with the foregoing, the API is calling into the other aspects of the application rather than the business logic. The API knows the appropriate logical runtime ordering, sequencing or weaving of aspects (e.g., such as by performing callbacks to the endpoint providers of the operational aspect). The API performs this task rather than the business logic. In this manner, the business logic developer does not need to be burdened with or exposed to the details of the other aspects in order to implement the particular request or operation of the business logic. In a similar manner, the business logic and each of the different aspects of the application  may be independently developed without exposing developers of the individual aspects to the complexities of aspect weaving and the other aspects. Rather, in accordance with techniques herein the API weaves together the various aspects in terms of runtime execution sequencing and also selectively using various different data entities of different aspects during runtime.","In this simplified example, it should be noted that there is no authentication required when the API establishes a connection in . However, an embodiment may also include other processing performed by the API such as to appropriately invoke other registered client provider callbacks for authentication information if such credentials are required\/authentication is performed in connection with step . For example with reference to , if authentication information is required for the API  to establish a connection via  to the management server , prior to performing call , the API  may invoke another previously registered callback provider (such as  of ) to provide the required authentication information. Subsequently, the API  may provide such authentication information as input parameters of the call  for establishing an authentication session and connection of .","Referring to , shown is a sequence diagram representing the communication diagram and calling sequence of . The example  expresses the processing sequence and data flow (e.g., input and output parameters) described above in connection with . In connection with sequence diagram notation, time flows from top to bottom (increasing time towards bottom). Call signatures are denoted as in the sequence diagram and are analogous to those of . Returned data structures are shown with dashed lines. Elements , , , , , , , , , , , , and  of  are analogous, respectively, to elements , , , , , , , , , , ,  and  of . Element  illustrates the EP structure of EP information (e.g., including IP address, protocol and port) returned by the registered EP provider  of the application. Element  illustrates the file system managed elements returned by the management server  may include a list of one or more file systems. Element  illustrates further returning the foregoing file system managed elements to the application business logic .","Referring to , shown is another example of a communication diagram illustrating runtime execution flow processing in an embodiment in accordance with techniques herein. It should be noted that the example  includes only some of the components from  for simplicity of illustration. Elements , , , , ,  and  of  may be analogous, respectively, to elements , , , , ,  and  of . Element  may represent code of the application  that is the EP1 registered provider for the file server system EP. Element  may be a file server system including EP1. Element  may represent code of the application  that is the EP2 registered provider for the data storage system or array management server EP. Element  may be the data storage system including EP2. As described in more detail below, the example  illustrates using an EP provider  in connection with contacting a file system management server  to obtain a list of one or more file systems as in connection with . The example  additionally illustrates then requesting information via call about which one or more LUNs a particular file system is stored upon. To obtain the latter information regarding the one or more LUNs for the particular file system, a second EP provider  is used to contact a data storage system management server . It should be noted that the notations and conventions described above in connection with  also apply to .","At step  the operating system  may launch execution of the application . At step , the application provider  providing EP information for EP1 at a later point during runtime may be registered using an endpoint registration interface of the API. In connection with this registration process, the routine registerEndpointProvider of the API is invoked passing as a first input parameter, serverSerialNumber, of type string identifying the serial number of the file server system , and a second input parameter, provider, of type EndpointProvider. In a manner similar to that of step , the application provider  providing EP information for EP2 at a later point during runtime may be registered  using the endpoint registration interface of the API. Elements ,  illustrate code entities ,  registering as EP providers with a particular serial number passed as a value for the above-mentioned first input parameter. When called at a later point in time by the API (e.g., such as illustrated by . and .), the registered EP providers ,  each return as an output an EP structure or object of type \u201cEndpoint\u201d including an IP address, port identifier, and protocol.","At step , the business logic  of the application  is notified that provider registration has completed and may begin execution. At step , the business logic  calls  code of the API  to perform a first business logic operation. Elements , , , and  of  are analogous, respectively, to elements , ,  and  of . As noted above, the API call  returns a parameter of type \u201cFileSystem\u201d for a corresponding input parameter (e.g., serialNumber of type string) that identifies a file system server. The output parameter for call  returned to the business logic  may be a list of one or more file systems obtained from management server .","As a second business logic operation in this example, the application  may perform a second query or request by making a second API call , \u201cgetVolumesForFileSystem\u201d, having an input parameter, \u201cfileSystem\u201d, identifying a particular file system. As a return or output parameter, the call returns a list of one or more LUNs providing storage for the particular file system identified in the input parameter of the call . In connection with processing of the API call , additional calls denoted by , and are performed. The input parameter, fileSystem, for the call is a data entity of the business logic . At , the API  performs a callback to the registered provider  to obtain EP information for the desired management system which the API  knows is management server . The endpoint information for EP2 as returned by (which is a data entity of the EP provider aspect) may include an IP address, protocol and port identifier as described elsewhere herein and the API code  may use the foregoing endpoint information for EP2 to connect to management server  including EP2. Additionally, once the connection to  is established in , the API code  may call requesting information (e.g., the LUNs for a particular file system) for the business logic operation. It should be noted that additional query parameters may be provided as input parameters to the call although there are no such query parameters are illustrated in this particular example . For example, a query parameter for the call may identify the particular file system originally passed as an input parameter in the call . In response to the call , the system  may return (e.g., return of call ) an output to the API  of type \u201cVolume\u201d identifying one or more managed elements which are data entities of the business logic. In this example, the return parameter of type \u201cVolume\u201d may be a list of one or more LUNs upon which a particular file system is stored. Subsequently, the API  then returns the managed element(s) of type \u201cFileSystem\u201d to the business logic  (e.g., return of call represented by ).","It should be note that any business logic data entities, such as one identifying the particular file system as a query parameter, may be mapped to another suitable form for use when communicating with the various management server systems , . This mapping may not alter the underlying aspect (e.g., business logic) associated with the data entity.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","b":["500","500","506","506","529","532"],"i":"d"},"As noted above in connection with , no authentication required when the API establishes connections for  and in this example. However, an embodiment may also include other processing performed by the API such as to appropriately invoke other registered client provider callbacks for authentication information if such credentials are required.","Referring to , shown is a sequence diagram representing the communication diagram and calling sequence of . The example  expresses the processing sequence and data flow (e.g., input and output parameters) described above in connection with . In connection with sequence diagram notation, time flows from top to bottom (increasing time towards bottom). Call signatures are denoted as in the sequence diagram and are analogous to those of . Returned data structures are shown with dashed lines. Elements , , , , , , ,  , , , , , , , , , , , and  of  are analogous, respectively, to elements , , , , , , ,  , , , , , , , , , , ,  of . Element  illustrates the return EP structure of EP information (e.g., including IP address, protocol and port) returned by the registered EP provider  of the application. Element  illustrates the return EP structure of EP information (e.g., including IP address, protocol and port) returned by the registered EP provider  of the application. Element illustrates the file system managed elements returned by the management server  such as may include a list of one or more file systems. Element illustrates further returning the foregoing file system managed elements to the application business logic . Element  illustrates the volume managed elements returned by the management server  such as may include a list of LUNs. Element  illustrates further returning the foregoing volume managed elements to the application business logic .","Referring to , shown is a flowchart of processing steps as may be performed in an embodiment in accordance with techniques herein. The steps of  summarize processing described above. At step , the client application may be partitioned into multiple segments including the business logic and one or more operational logic aspects. At step , the client application registers one or more providers of one or more of its aspects as callbacks in accordance with defined API interfaces. At step , the client application's business logic begins execution and performs a call to API code to perform a business logic task or operation. At step , the API code performs processing including aspect weaving as part of performing the business logic task or operation. Step  may include the API code invoked one or more registered client application providers as needed as part of the aspect weaving performed. At step , the API code returns control to the client application's business logic along with any return or output parameters for the requested business logic operation.","As described above, techniques herein provide for use of an API to perform aspect weaving for different aspects of a client application in connection with implementation of the main or primary tasks of the business logic. The API includes a registration interface used by the client application to register different aspect providers which the API subsequently may invoke, as needed, during runtime of the application. The particular aspects of the data storage management application as the client application using the techniques herein are merely exemplary to illustrate one use of the techniques herein. More generally, an embodiment may include additional and\/or different aspects of an application than described herein. For example, the application using the API as described herein may include aspects related to various operational concerns such as providing credentials, endpoint information, performing logging, failover and high availability, obtaining threads as may be needed in connection with processing from a thread factory and for thread management, performing crash recovery, performing transactions, providing and utilizing quality of service parameters, and the like. In connection with failover and high availability, for example, the API may perform processing to use a first endpoint and system. However, if the foregoing first endpoint and\/or system are not available, the API may include code which utilizes one or more alternate endpoints and systems and may callback into client code using a registered callback to determine what alternate endpoint(s) and\/or system(s) to select, to learn about connection failures, and the like. In connection with crash recovery, the registered callback of the client invoked by the API may save any context information needed for use during recovery processing for a system or application crash. In connection with transactions, the registered callback of the client invoked by the API may save transactional context information. In connection with quality of service, the registered callback of the client invoked by the API may indicate which one or more quality of service parameters to use, (e.g., such as maximum bandwidth), may provide values for such parameters, and the like. As will be appreciated by those of ordinary skill in the art, the application may generally be used for any business logic and is not limited to data storage management as described herein. Use of the techniques herein provides for separation of different aspects of the client application which may be independently developed, maintained and\/or tested. Furthermore, use of such independent aspects facilitates reuse of an aspect with other applications.","An embodiment may implement the techniques herein using code executed by a processor. For example, an embodiment may implement the techniques herein using code which is executed by a processor of the data storage system, management system, or more generally, any computer system. As will be appreciated by those skilled in the art, the code may be stored on the data storage system on a computer-readable storage medium having any one of a variety of different forms including volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer-readable storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by a processor.","While the invention has been disclosed in connection with preferred embodiments shown and described in detail, their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly, the spirit and scope of the present invention should be limited only by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Features and advantages of the present invention will become more apparent from the following detailed description of exemplary embodiments thereof taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 5","b":["6","7","8"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
