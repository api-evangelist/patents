---
title: Message handling method, for mobile agent in a distributed computer environment
abstract: A communication system is provided that is capable of flexibly dealing with conversations among agents. An agent includes a software part which performs operations that represent the functions of a human ear and a mouth. In generating a conversation, an agent communication language, which is similar to a human conversation, is prepared and sent to a conversation part as a message packet. The conversation part then generates a plurality of conversation threads one for each unit of conversation and converse with a plurality of nodes in parallel and asynchronously. On the other hand, in another node which receives the message packet, a protocol manager receives the data (message packet) from a network and passes it to the conversation part. The conversation part understands the message packet and executes the content. In the preferred embodiment of this invention, the conversation part moves to other places along with a mobile agent.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949309&OS=08949309&RS=08949309
owner: International Business Machines Corporation
number: 08949309
owner_city: Armonk
owner_country: US
publication_date: 20010411
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This is a divisional patent application of application Ser. No. 09\/090,506 filed Jun. 4, 1998 now abandoned","1. Field of the Invention","This invention relates to a data processing technique, and more particularly, to an improved data processing method for supporting communications among two or more nodes on a network in a distributed computer environment.","2. Description of the Related Art","There is a mobile agent technology in the art in which an internal condition is moved to a place which is provided in a server existing on a network in a distributed computer environment to form an instruction in the place where the internal condition is moved. Reference is made to U.S. Pat. No. 5,603,021, issued Feb. 11, 1997, entitled \u201cSystem and Method for Distributed Computation Based Upon the Movement, Execution, and Interaction of Processes In A Network\u201d, by White et al., Japanese unexamined Patent Publication No.: 7-182174, and an article entitled \u201cLatest Internet Technology, special edition of Nikkei Communication\u201d, by Fumihiko Nishida, Susumu Fujiwara et al., pp. 104-117, Nikkei B P.","Mobile agents, operating within the above mentioned mobile agent technology, make a contact to other agents in the moved-to place, i.e. a mobile agent or a resident agent, and may be served as appropriate. A place is a location provided by a server existing on the network to which the agent is moved and which supports a contact among agents. Preferably, the server accommodates the differences between the hardware and between the platforms.","The mobile agent technology enables a mobile agent to act as a proxy of a human being in handling work such as, for example, dynamically adjusting a schedule of internal meetings in compliance with the schedule of attendees and the status of reservations of conference rooms, and also acquiring desired information distributed on the network.","In the prior art mobile agents, however, it can be difficult to realize a flexible, smooth information exchange and coordination among agents because the communications among agents are realized by a conventional method call (subroutine call) or by low level message passing. Further, it is often a requirement to define the processing of a stereotypical conversation in order to communicate by using an agent. This requirement can result in a load to a user of an agent. Furthermore, it can be difficult to communicate between different types of agents because no agent communication language is used to realize the communications among a variety of agents.","It can be appreciated that a \u201cconversation\u201d between human beings generally consists of steps in which:\n\n","If a messaging system of a computer is defined as one which simulates the message processing of a natural language and is designed for recycling by patterning a conversation in this way, a message which is closer to a natural language than in prior art message processing systems can be processed. As a result, an intelligent message system can be constructed which is more user friendly and allows a series of packets having a certain context to be exchanges with the flow of contexts being followed.","It is a first object and advantage of this invention to provide a communication system which is capable of having a conversation with an agent communication language which is intuitively and easily understandable to a human being, and also having an agent (mobile or resident agent) to communicate.","It is another object and advantage of this invention to provide a communication system which enables a conversation among agents (mobile or resident agents) to proceed concurrently and asynchronously.","It is a further object and advantage of this invention to provide a communication system in which agents can communicate to each other without knowledge of a variety of agent communication languages and communication protocols.","It is still another object of this invention to provide a communication system which realizes high speed parallel conversation processing.","It is still a further object of this invention to reduce the work and the time required for developing and maintaining a program as much as possible in providing a support to communication among agents.","It is a further object of this invention to provide a message processing system which is capable of flexibly dealing with conversations among agents.","It is another object of this invention to provide a message processing system which results in less load to a communication network.","Further objects and advantages of this invention will become more apparent from a consideration of the drawings and ensuing description.","The foregoing and other problems are overcome and the objects of the invention are realized by methods and apparatus in accordance with embodiments of this invention, wherein a communication system is provided which is capable of having a conversation with an agent communication language that is intuitively and easily understandable to a human being.","This invention provides an agent with a software part (agent communication system) which performs operations that represent the functions of a human ear and a mouth. In such an agent communication system, the functions of the ear are provided in the form of an API (Application Program Interface) \u201chandleMessage\u201d, while the functions of the mouth are provided in the form of an API \u201csendMessage\u201d. In the preferred embodiment of this invention, these API's are implemented as an object oriented programming language method of an agent communication language manager object for an agent communication system.","In generating a conversation, an agent prepares an agent communication language (ACL) which represents a human conversation and sends it by passing it to the sendMessage method. A message packet contains a sender field and a destination field by which the agent communication system can recognize the location of a conversation partner.","On the other hand, in the node which receives the message packet, the data (message packet) from the network is received by a protocol manager which is a component that processes a data coming through the network and which passes it to the handleMessage method of the agent communication language manager object. The handleMessage method understands the message packet and executes the content.","According to one aspect of this invention, the agent communication system, upon transmission or receipt of a message packet, determines whether or not a new conversation is initiated and generate a new conversation thread when it is determined that a new conversation is initiated. The conversation thread enables conversations to proceed concurrently and asynchronously among a plurality of agents (mobile or resident agents).","According to another aspect of this invention, the functions of the ear and the mouth are provided to an agent simply by instantiating the agent communication language manager object.","According to one aspect of this invention, a message processing method is provided for execution by a message processor which is connected to a network and has a conversation thread control part that is capable of generating a plurality of conversation threads, the method includes the steps of: detecting a message packet containing a destination information and a conversation thread identifying information; determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; generating a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor; and sending the message packet to a destination which corresponds to said destination information.","According to another aspect of this invention, a message processing method is provided for execution by a message processor which is connected to a network and has a conversation thread control part that is capable of generating a plurality of conversation threads, the method includes the steps of: detecting a message packet containing a destination information, a conversation thread identifying information and a content information; determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; generating a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor; converting the message packet to a protocol which corresponds to the network to which the message processor is connected; and sending the message packet to a destination which corresponds to said destination information.","According to still another aspect of this invention, a message processing method is provided for execution by a message processor which is connected to a network and has a conversation thread control part that is capable of generating a plurality of conversation threads, the method includes the steps of: detecting a message packet containing a conversation thread identifying information; determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exist in the message processor; and generating a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor.","According to a further aspect of this invention, a message processing method is provided for execution by a message processor which is connected to a network and has a conversation thread control part that is capable of generating a plurality of conversation threads, the method includes the steps of: detecting a message packet containing a conversation thread identifying information and a content information; determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exist in the message processor; and passing a control to the corresponding conversation thread when it is determined that the corresponding conversation thread exists in the message processor.","According to a still further aspect of this invention, a message processing method is provided for execution by a message processor which is connected to a network and has a conversation thread control part that is capable of generating a plurality of conversation threads, the method includes the steps of: detecting a message packet containing a destination information and a conversation thread identifying information; determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; and generating a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor.","According to a further aspect of this invention, a message processing method is provided for execution by a message processor which is connected to a network and has a conversation thread control part that is capable of generating a plurality of conversation threads, the method includes the steps of: detecting a message packet containing a conversation thread identifying information and a content information; determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exist in the message processor, passing a control to the corresponding conversation thread when it is determined that the corresponding conversation thread exists in the message processor; and analyzing the content of the content information.","According to a further aspect of this invention, a message processing method is provided for execution by a message processor which has a plurality of conversation threads and a conversation part object including a conversation thread control part that is capable of controlling the plurality of conversation threads, the message processor being capable of sending a message to another message processor through a network, the method includes the steps of: halting the plurality of conversation threads; sending the conversation part object to another place through the network; and resuming the plurality of conversation threads at the another message processor.","According to a still further aspect of this invention, a message processor is provided which is connected to a network, the processor including: a plurality of conversation threads; an agent communication language manager for detecting a message packet which contains a destination information, a conversation thread identifying information and a content information; a first conversation thread control part for determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; a second conversation thread control part for generating a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor; and a protocol manager for converting the message packet to a protocol which corresponds to a network to which the message processor is connected.","According to a still further aspect of this invention, a message processor is provided which is connected to a network, the processor includes: an agent communication language manager for detecting a message packet which contains a conversation thread identifying information; a first conversation thread control part for determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in said message packet exists in said message processor, and a second conversation thread control part for generating a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor.","According to a still further aspect of this invention, a message processor is provided which is connected to a network and has a conversation thread control part which is capable of generating a plurality of conversation threads, the processor includes: an agent communication language manager for detecting a message packet which contains a conversation thread identifying information and a content information; a first conversation thread control part for determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; and a second conversation thread control part for passing a control to said corresponding conversation when it is determined that said corresponding conversation thread exists in said message processor.","According to a still further aspect of this invention, a message processor is provided which is connected to a network and has a conversation thread control part which is capable of generating a plurality of conversation threads, the processor includes: a protocol manager for receiving a message packet containing a conversation thread identifying information; a first conversation thread control part for determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; and a second conversation thread control part for generating a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor.","According to a still further aspect of this invention, a message processor is provided which is connected to a network and has a conversation thread control part which is capable of generating a plurality of conversation threads, the processor includes: a protocol manager for receiving a message packet containing a conversation thread identifying information and a content information; a first interpreter for determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor, and a second interpreter for passing a control to the corresponding conversation thread when it is determined that the corresponding conversation thread exists in the message processor.","According to one of the aspects of this invention, a recording media is provided which stores therein a message processing program for execution by a message processor which is connected to a network and has a conversation thread control part capable of generating a plurality of conversation threads, the message processing program including: a program code which instructs the message processor to detect a message packet containing a destination information and a conversation thread identifying information; a program code which instructs the message processor to determine whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; a program code which instructs the message processor to generate a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor; and a program code which instructs the message processor to send the message packet to a destination which corresponds to the destination information.","According to a further aspect of this invention, a media is provided which stores therein a message processing program for execution by a message processor which has a conversation thread control part capable of generating a plurality of conversation threads and is connected to a network, the message processing program including: a program code which instructs the message processor to detect a message packet containing a destination information, a conversation thread identifying information and a content information; a program code which instructs the message processor to determine whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exist in the message processor; a program code which instructs the message processor to generate a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor; a program code which instructs the message processor to convert the message packet to a protocol which corresponds to which the message processor is connected; and a program code which instructs the message processor to send the message packet to the destination which corresponds to the destination information.","According to a further aspect of this invention, a media is provided which stores therein a message processing program for execution by a message processor which has a conversation thread control part capable of generating a plurality of conversation threads and is connected to a network, the message processing program including: a program code which instructs the message processor to detect a message packet containing a conversation thread identifying information; a program code which instructs the message processor to determine whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exist in the message processor; and a program code which instructs the message processor to generate a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor.","According to a further aspect of this invention, a media is provided which stores therein a message processing program for execution by a message processor which has a conversation thread control part capable of generating a plurality of conversation threads and is connected to a network, the message processing program including: a program code which instructs the message processor to detect a message packet containing a conversation thread identifying information and a content information; a program code which instructs the message processor to determine whether or not a conversation thread corresponding to a conversation thread identifying information contained in the message packet exists in the message processor; and a program code which instructs the message processor to pass a control to the corresponding conversation thread when it is determined that the corresponding conversation thread exists in the message processor.","According to a further aspect of this invention, a media is provided which stores therein a message processing program for execution by a message processor which has a conversation thread control part capable of generating a plurality of conversation threads and is connected to a network, the message processing program including: a program code which instructs the message processor to detect a message packet containing conversation thread identifying information; a program code which instructs the message processor to determine whether or not a conversation thread corresponding to a conversation thread identifying information contained in the message packet exists in the message processor; and a program code which instructs the message processor to generate a new conversation thread when it is determined that the corresponding conversation thread does not exists in the message processor.","According to a further aspect of this invention, a media is provided which stores therein a message processing program for execution by a message processor which has a conversation thread control part capable of generating a plurality of conversation threads and is connected to a network, the message processing program including: a program code which instructs the message processor to detect a message packet containing conversation thread identifying information and content information; a program code which instructs the message processor to determine whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; a program code which instructs the message processor to pass a control to the corresponding conversation thread when it is determined that the corresponding conversation thread exists in the message processor; and a program code which instructs the message processor analyze the content of the content information.","According to a further aspect of this invention, a media is provided which stores therein a message processing program for execution by a message processor which has a conversation thread control part capable of generating a plurality of conversation threads and is capable of sending a message to another message processor through a network, the message processing program including: a program code which instructs the message processor to halt the plurality of conversation threads; a program code which instructs the message processor to send the conversation part object to another place through the network; and a program code which instructs the message processor to resume the plurality of conversation threads.","According to a still further aspect of this invention, a media is provided which stores therein a plurality of objects to be loaded to a message processor which has a conversation thread control part capable of generating a plurality of conversation threads and is connected to a network, the message processing program including: a plurality of conversation threads; an agent communication language manager for detecting a message packet which contains a destination information, conversation thread identifying information and content information; a first conversation thread control part for determining whether or not a conversation thread corresponding to the conversation thread identifying information contained ins aid message packet exists in the message processor; and a second conversation thread control part for generating a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor; and a protocol manager for converting the message packet to a protocol which corresponds to a network to which the message processor is connected.","According to a still further aspect of this invention, a media is provided which stores therein a plurality of objects to be loaded to a message processor which has a conversation thread control part capable of generating a plurality of conversation threads and is connected to a network, the message processing program including: an agent communication language manager for detecting a message packet which contains conversation thread identifying information; a first conversation thread control part for determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; and a second conversation thread control part for generating a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor.","According to a still further aspect of this invention, a media is provided which stores therein a plurality of objects to be loaded to a message processor which has a conversation thread control part capable of generating a plurality of conversation threads and is connected to a network, the message processing program including: an agent communication language manager for detecting a message packet which contains conversation thread identifying information and content information; a first conversation thread control part for determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; and a second conversation thread control part for passing a control to the corresponding conversation when it is determined that the corresponding conversation thread exists in the message processor.","According to a still further aspect of this invention, a media is provides which stores therein a plurality of objects to be loaded to a message processor which has a conversation thread control part capable of generating a plurality of conversation threads and is connected to a network, the message processing program including: a protocol manager for receiving a message packet containing a conversation thread identifying information; a first conversation thread control part for determining whether or not a conversation thread corresponding to the conversation thread identifying information contained in the message packet exists in the message processor; and a second conversation thread control part for generating a new conversation thread when it is determined that the corresponding conversation thread does not exist in the message processor.","Identically labeled elements appearing in different ones of the above described figures refer to the same elements but may not be referenced in the description for all figures.","The embodiment of this invention will now be described with reference to the drawings. With reference to , a distributed network environment  is shown which executes mobile objects of this invention. Each server - is provided with a place - for serving mobile agents , , ,  and . The group of places in the distributed network environment  is referred to as a crowd.","An application  for forming and moving a mobile agent, for example mobile agent , is defined in a client system . Mobile agents, such as mobile agent , are sent out by the application  and may contact other agents (mobile or resident agents) existing in each place -, send a request, and receive a result of a request. An agent which contacts a mobile agent to provide a service is hereinafter referred to as an actor agent. A place provides a support to the contact between agents. Mobile agents, such as mobile agent , may hold a result of a request received from an actor agent, continue to move, or send the result to the client  or another place during movement.","The mobile agent  (or a resident agent) may send a message packet to another place and execute a conversation and an instruction in the another place.",{"@attributes":{"id":"p-0069","num":"0074"},"figref":["FIG. 2","FIG. 1"],"b":["150","100","1","4","1","4","13","30","2","20","13","30","26","29","28","2","19","25","27"]},"A portable storage media such as a floppy disk is inserted in to the storage media drive such as the floppy disk drive . The floppy disk or other storage media of the hard disk drive  and a ROM  have recorded therein a computer program which provides instructions to the CPU  in cooperation with an operating system (OS) to practice this invention. During operation, the program is loaded into the memory  for execution. The computer software may be compressed or divided into multiple pieces for storage in multiple media.","The node system  may be a system which has a user interface hardwired, such as a pointing device (e.g., a mouse  or a joy stick, etc.) or a keyboard  for input and a display (e.g., a CRT ) for presenting visual data to a user. A parallel port  may be provided for connecting an external output device such as a printer. The node system  may have a modem connected thereto via a serial port  for connection to the network through the serial port  and the modem or through a token ring or a communication adapter  to communicate with other computer systems.","It can be appreciated that this invention may be implemented in a conventional personal computer (PC), a workstation, a general purpose computer or a combination of them. It should be noted, however, that these components are chosen as exemplary components and that not all components are necessarily an indispensable component of the invention.","For example, it is not necessary to install a user interface in the server side because it is sufficient to have a basic data processing function such as a CPU and a memory, and a communication function. It is also sufficient for the client side to have a configuration that is needed to send out a message packet (described later), including a communication function and an input means for designating a message packet and instructions to send out the message packet. Further, when a machine is controlled remotely from a portable terminal, it would be enough to have a data processing function and a communication function to receive an instruction to send the message packet from the portable terminal, detect it and send out the message packet.","The operating system (OS) in the client side and the server side may be implemented as one which supports on a standard basis, a GUI multi-windows environment such as WindowsNT (trademark of Microsoft), Windows95 (trademark of Microsoft), Windows3.x (trademark of Microsoft), OS\/2 (trademark of IBM), X-Window system (trademark of MIT) on AIX (trademark of IBM), and Solariz (trademark of Sun Micro Systems). The OS may also be implemented to support a character based environment such as PC-DOS (trademark of IBM) and MS-DOS (trademark of Microsoft), or a real time OS such as OS\/Open (trademark of IBM) and VxWorks (trademark of Wind River Systems, Inc.) without being limited to any specific operating system environment.","With reference to the block diagram in , a system configuration of the server side in the preferred embodiment of this invention is described.","An agent  is either a mobile agent which was sent to this server or a resident agent which is resident in this server. The agent  may have a dialog with the agent communication system  by sending out or receiving a message packet which will be described later. An agent communication language manager  is a component for receiving a message sent from the agent  or the existing system and network, and for transmitting messages to these systems.","A conversation thread control part  is a component for controlling a conversation thread  that corresponds to each conversation with an agent, for example agent , for forming a suitable thread in conformance to the flow of conversation, or for giving the control to the thread which has been generated. Multiple conversations are split into multi-threads to accept multiple conversations asynchronously. The thread is referred to as a conversation thread. According to one aspect of this invention, a plurality of such conversation threads are generated by which conversations are held in parallel and asynchronously with a plurality of agents.","A message log  is a component for memorizing conversations. A conversation content monitoring part  is a component which conducts a policy check as to whether or not a conversation is valid from a conversation log stored in the message log and the content of the current message. A conversation content monitoring part loader  is a component for calling the conversation monitoring part  which corresponds to the message type of the message packet .","A translator  is a component for translating the agent communication language used in the conversation into another language. A translator loader  is a component for controlling a group of translators.","An interpreter  is a component for understanding and executing the content of a conversation. A plurality of different such interpreters are provided corresponding to ontologies and describing languages which will be described later. The interpreters each have a format check routine, a content interpretation routine and an execution routine, each of which is specific to an ontology. Take, for example, an ontology of traffic reservation. Assuming that a content \u201cR, flight, Narita to Tacoma, 1997\/07\/06\/15:00-1997\/07\/06\/1800\u201d is received. This content is checked in accordance with a predetermined format, and a specific content interpretation routine is executed. The interpretation routine interprets that \u201cR\u201d is a command which instructs the routine to make a reservation by accessing a database in a given airline to execute an execution routine for checking the reservation status. A reservation is made for a non-smoking seat, economy, FlightXX26 for Tacoma, Seattle, departing Narita airport at 15:00 on Jul. 6, 1997 and the reservation is confirmed to the sender.","An interpreter loader  is a component for controlling a group of interpreters . A protocol manager  is a component for converting to a protocol which conforms to the type of network to be connected.","Each of functional blocks in  has been described. These functional blocks (components), which are logical functional blocks, are not meant to be implemented as an independent integral hardware or software and may be implemented as a complex of hardware devices and software routines, or common hardware devices and software routines. Further, not all of the functional blocks in  are necessarily a component which is indispensable to this invention.","For example, it would be enough to install interpretation execution parts such as the conversation content monitoring part , the translator  and the interpreter  because this invention provides an agent with a special function to have a conversation with other agents or an existing system. Components such as the conversation content monitoring part loader , the translator loader , and the interpreter loader  may optionally be included or excluded within a given configuration. In one aspect of this invention, because one or more specific number of conversation threads are provided to converse with a specific agent, thread control part , message log  and ID generator  are not an indispensable components.",{"@attributes":{"id":"p-0084","num":"0089"},"figref":["FIG. 4","FIG. 5","FIG. 3"],"b":"300"},"In a message type  contained in the message packet  in , a performative of the agent communication language (ACL) is used in the preferred embodiment of this invention. The ACL is a high level language which provides for communication among agents in a form that is similar to human language, and includes, for example, one provided by FIPA (Foundation for Intelligent Physical Agents), KQML (Knowledge Query Manipulation Language), and KIF (Knowledge Interchange Format). These ACLs are discussed in \u201cSEMANTICS FOR AN AGENT COMMUNICATION LANGUAGE\u201d by Yannis Labrou, A Doctoral Dissertation for the PhD Defense Examination, submitted to the PhD Defense Committee at the Computer Science and Electrical Engineering Department (CSEE) of the University of Maryland Graduate School, and \u201cTR CS-97-03, A Proposal for a new KQML Specification, by Yannis Labrou and Tim Finin, Feb. 3, 1997\u201d.","Included in the performative of KQML which is one of the ACLs are;\n\n","Referring again to , a sender  is a sender of a message, while a receiver  is a receiver of a message. A response ID  is an ID which follows a preceding conversation. When an agent has a conversation with a plurality of parties, a plurality of response ID's are allocated corresponding to the conversation threads. This will be described in further details below.","A conversation ID  is an ID which tells the conversation partner to respond with this ID. The describing language type  is information which specifies the language describing a content. The ontology  is information which specifies the ontology that the content specifies. In the preferred embodiment of this invention, a ticket purchase ontology, a numerical calculation ontology and a yellow page ontology, etc., are provided.","The content  is the particular subjects or topics covered in a message and contains, in the preferred embodiment of this invention, a software routine for forming instructions after it has moved to another place. The content  may also internally contain a message packet for movement to another place via a relaying paint. If the content  does contain a message packet for movement, then a \u201cFrom\u201d entry and a \u201cTo\u201d entry are provided to indicate a true sender and a final receiver, respectively.","An operational condition of each component in  during message generation will now be described with reference to . The agent  sends a message packet  (shown in ) to the agent communication system . In the preferred embodiment of this invention, the components shown in  are defined as a class of an object oriented programming language. Each object, upon generating a message, prompts other objects to operate by sending an instruction to such other objects. These prompts between components is shown in the object instruction diagram of .","The agent communication language manager , upon receiving the message packet , determines that the message packet  is one for generating a conversation depending on whether it is called by a \u201csendMessage\u201d or a \u201chandleMessage\u201d method and instructs the conversation thread control part  to process. The conversation thread control part  determines whether or not to instruct an already generated conversation thread  to process with reference to the response ID  which is contained in the message packet . If the conversation thread control part  determines that it is a new conversation, it generates a new conversation thread , instructs the generator  via the new conversation thread  to allocate a new conversation ID  to the new conversation thread , and moves control to the new conversation thread .","In this invention, because the conversation threads are dynamically generated in this way, conversations can be held in parallel and asynchronously with other system (agents or existing system). In the preferred embodiment of this invention, the response ID  is allocated with an ID that is uniquely identified on the network such as, for example, \u201cURL+Date+Time+Serial Number\u201d.","If a conversation thread  corresponding to the response ID  has existed, the conversation thread control part  determines that this is not a new conversation and moves control to the corresponding and existing conversation thread . If it is desired to continue conversation, the conversation thread  instructs the ID generator  to allocate a conversation ID .","The message log  memorizes the message packet  which is sent to the conversation thread . The conversation content monitoring part loader  calls a conversation content monitoring part  corresponding to the message type  of the message packet . The conversation content monitoring part  corresponding to the message type  may be called by providing a conversation content monitoring part table  as shown in , or by using a class name of the conversation content monitoring part  which is the same as the message type .","The conversation content monitoring part  conducts a policy check as to whether or not a conversation is valid based on the conversation log stored in the message log  and the content of the current message. For example, if the message type  of the received message packet  is a value \u201csorry\u201d (a message type which means that the content of the conversation is understandable but that the receiving part does not have a capability to process), a reference is made to the message log  for a message type  of the message which has a corresponding response ID  and an immediately preceding ID. It is then determined that the message type  is of no problem if it is of a type which can be valid as a conversation, for example \u201cask-if\u201d a message type which queries about the processing capability of the other party. If it is determined that the message type  is in error, for example, if it is determined to be of a message type  can not be valid (e.g., the conversation \u201csorry\u201d), then the message type  is found to be in error (not valid) and an action is taken such as sending a message packet of \u201cerror\u201d (a message type  which means an error) to the sender  of the message packet .","If it is determined that a conversation can be valid, a message packet  is sent from the conversation thread  to a node which is designated as a receiver  through the protocol manager . The protocol manager  converts the protocol to one which conforms to the type of the network to be connected so that the agent communication system  can send and receive a message packet  without being aware of the network protocol.","Now with reference to  and , operational conditions of each component at the node which received the message packet so sent is described.","The agent communication language manager  which has received a message packet  from the protocol manager  determines that the received message packet  is one for receiving a message as it is called with the \u201chandleMessage\u201d method and asks the conversation thread control part  to handle it. In the preferred embodiment of this invention, the protocol manager  knows the existence of the agent communication language manager  as the latter internally instantiates, it can send the incoming data to the agent communication language manager .","The conversation thread control part  determines whether or not to ask the conversation thread  to process the message packet  with reference to the response ID  contained in the message packet . if the conversation thread control part  determines that the packet  is a new conversation, it generates a new conversation thread  and transfers the packet  to the conversation thread  for processing.","When a conversation thread  corresponding to the response ID  has existed, the conversation thread control part  determines that the packet is not a new conversation and transfers it to the corresponding, existing conversation thread  for processing. The message log  memorizes a message packet  which is sent to the conversation thread .","The conversation content monitoring part loader  calls a conversation content monitoring part  which conforms to the message type  of the message packet . The conversation content monitoring part  conducts a policy check as to whether or not a conversation is valid based upon the conversation log stored in the message log  and the content  of the current message. If it is determined that a conversation is valid, the conversation thread  transfers control to the interpreter loader  for processing. The interpreter loader  understands the agent communication language of the message packet  and determines whether or not the describing language type  contained in the message packet  and an interpreter  which corresponds to the ontology  are stored in an interpreter control table  shown in .","If the interpreter , which corresponds to the agent communication language, describing language type  and the ontology  of the received massage packet  is stored in the interpreter control table , the content  is interpreted by that interpreter . If an interpreter  which corresponds to the agent communication language, describing language type  and the ontology  of the received massage packet  is not stored in the interpreter control table , a determination is made as to whether or not an interpreter  which corresponds to that combination exists in the interpreter library which is managed (accessible) by the system.","If the interpreter  exists, it is registered in the interpreter control table  and the content  is interpreted by using that interpreter . If an interpreter  which corresponds to a combination of the agent communication language, describing language type  and the ontology  does not exist in the interpreter library, determination is made as to whether or not an interpreter  which corresponds to a combination of the describing language type  and the ontology  exists in the interpreter library. If it does not exist, it is determined that the message can not be processed. In the preferred embodiment of this invention, the onotologies are hierarchically structured so that an interpreter  of a best matching ontology is used.","If the interpreter  exists, the control is transferred to the translator loader  to translate the content  into the agent communication language of the discovered interpreter . The translator loader  makes a reference to the translator control table  and determines whether or not there exists a translator which can execute the requested translation. In the preferred embodiment of this invention, if the translator does not exist, the translator library is searched in the way as the interpreter library was searched, an entry is made to the table  and the translated content  is processed by the selected interpreter . If the translator  does not exist, it is determined that the message can not be processed.","In the preferred embodiment of this invention, the result of the interpretation by the interpreter  is transmitted to the agent  where it is processed according to the content of instructions which are described in the content . Depending on what is in the content , either the conversation thread  is destroyed, a process is entered to begin a new message generation, or a new agent is generated. In the preferred embodiment of this invention, the interpreter  returns the control to the conversation thread . The conversation thread  will standby until another message is received.","In contrast to many API calls in a prior art procedural system, a conversation is asynchronous so that it is unpredictable when the receiving party replies in response to a conversation sent from a sending party to the receiving party. It is possible that information which is possessed by the receiving party could be returned at a timing which is changed by an external force (such as an action by other agents). The reply is sent as a message packet in such case too. The conversation thread  waits with a \u201cwait0\u201d method until a reply following the conversation is returned. The \u201cwait0\u201d method renders the conversation thread  in wait state and waits until it is woken up by a function (method) like \u201cnotify0\u201d or others. When the reply is returned, the message is given to the agent system . If it is found that the message is a message following the existing conversation, the thread of sleeping conversation is woken up and given the message.","In the preferred embodiment of this invention, when the agent  started a conversation in the past and is waiting for a reply, that conversation was started through the agent communication system  (sending the \u201csendMessage\u201d method to the agent communication system) and an object \u201cConversation\u201d is returned as a return value of the \u201csendMessage\u201d method. The object \u201cConversation\u201d is associated with an object called \u201cResult\u201d which holds a state. In the preferred embodiment of this invention, the agent  can receive a notification by examining the state which is held by the object \u201cResult\u201d through a polling.","In the preferred embodiment of this invention, in order to provide the agent  with the agent communication system  which is a conversation part of this invention, a coding in JDK (Java Development Kit: Trademark of Sun Microsystems) is used.","The agent communication  of this invention can be provided to the agent  simply by instantiating an ACLManager by;","aclManager=new aclManager (agentName, protocolName, port);","To start a conversation, a \u201ckqml\u201d object is prepared for example, and the conversation is started simply by;\n\n","When waiting for a reply, a polling is conducted by;","Result res=conversation.getResult 0;",{"@attributes":{"id":"p-0112","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":"if (res.isAvailableO) {do something appropriate}"}}}},"The reply returned or a content of the message sent by another agent is correctly interpreted and executed by an interpreter of the default agent communication system .","In the preferred embodiment of this invention described above, the interpretation execution parts are registered in the control tables at the time of execution. However, the interpretation execution parts need not be registered at the time of execution and, instead, a check may be made as to what interpretation execution parts exist to form and maintain an interpretation execution part control table.","While the message packet  moves among nodes in the preferred embodiment of this invention, the message packet  may be sent in an attachment to a mobile agent  (as shown in ). In such a case, the mobile agent  moves around places and holds conversations with the message packet  attached thereto. It is further possible to carry out complex jobs such as having a conversation at another place using the process result. The movement of the mobile agent over the network is accomplished, for example, by executing the steps shown in .","In particular, in step  a thread in an agent communication language manager is halted. Optionally, the mobile agent framework is serialized as shown by step . If step  is performed, then optional deserialization is done by the mobile agent framework as shown by step . Thereafter a thread in the agent communication language manager is resumed as shown by step .",{"@attributes":{"id":"p-0117","num":"0124"},"figref":"FIG. 15"},"As described above, this invention provides a communication system which is capable of conversing with an agent communication language which is intuitively understandable to a human being in communication among agents (mobile or resident agents).","In one of the aspects of this invention, a message processing system is provided which enables a high speed processing by reducing unnecessary decision logics.","In another aspect of this invention, a communication system is provided in which agents can communicate with each other without being conscious of a variety of agent communication languages and communication protocols.","In still another aspect of this invention, a communication system is provided which realizes a high speed parallel conversation processing.","In a further aspect of this invention, the work and the time required for developing and maintaining a program are reduced as much as possible in providing a support to communication among agents.","In still a further aspect of this invention, a message processing system is provided which is capable of flexibly dealing with conversation among agents.","In another aspect of this invention, a message processing system is provided which gives less load to a communication network.","In still another aspect of this invention, a message processing system is provided in which resources required for execution are decreased.","Although described in the context of preferred embodiments, it should be realized that a number of modifications to these teachings may occur to one skilled in the art. While the invention has been particularly shown and described with respect to preferred embodiments thereof, it will be understood by those skilled in the art that changes in form and details may be made therein without departing from the scope and spirit of the invention."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","Objects and Advantages of the Invention","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above set forth and other features of the invention are made more apparent in the ensuing Detailed Description of the Invention when read in conjunction with the attached Drawings, wherein:",{"@attributes":{"id":"p-0050","num":"0055"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0051","num":"0056"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0052","num":"0057"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0053","num":"0058"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0054","num":"0059"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0055","num":"0060"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0056","num":"0061"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0057","num":"0062"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0058","num":"0063"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0059","num":"0064"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0060","num":"0065"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0061","num":"0066"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0062","num":"0067"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0063","num":"0068"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0064","num":"0069"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
